






<HTML>
     
     <HEAD>


          
          <TITLE>March 1996/The Learning C/C++urve</TITLE>
     </HEAD>
     
     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          
          <H2><A href="../tocmar.htm"><IMG src="../../toc.gif" ALT="Back to TOC" WIDTH="54" HEIGHT="54"></A>
          <FONT COLOR="#FF0000">Columns</FONT></H2>
          
          <HR>
          
          <H2 ALIGN="center"><FONT COLOR="#800000">The Learning C/C++urve</FONT></H2>
          
          <H3 ALIGN="center"><FONT COLOR="#800000">Bobby Schmidt</FONT></H3>
          
          <H3 ALIGN="center"><FONT COLOR="#800000">Creating a Boolean Inserter</FONT></H3>
          
          <BLOCKQUOTE>
               
               <p>One way to find out if your new data
                    type behaves like a builtin is to hook it up to an inserter.
                    Bobby uses what he learns from this exercise to spruce up
                    his boolean data type.</p></BLOCKQUOTE>
          <HR>
          <BLOCKQUOTE>
               
               <h4><FONT COLOR="#000080">Introduction</FONT></H4>
               
               <p>Last month I left our continuing
                    boolean saga with a version fettered with too much type
                    safety. I also promised to rectify the weaknesses of that
                    version this time around. As a means to that end, I'm
                    changing course a bit by introducing boolean inserters; as
                    we explore such inserters and the boolean limitations that
                    hamper them, we'll discover solutions that not only enable 
                    inserters, but also solve problems posed last month.</p>
               
               <h4><FONT COLOR="#000080">CS 101</FONT></H4>
               
               <p>I'll wager the first C program you
                    wrote is something along the lines of</p>

<PRE>
#include &lt;stdio.h&gt;
int main(void)
    {
    printf("Hello, world!\n");
    return 0;
    }
</PRE>
               
               <p></p>
               
               <p>printf is a function sporting a
                    variable argument list. You should avoid such functions like
                    the proverbial plague, for they completely defeat the
                    language's ability to ensure the caller's arguments match
                    what the function actually expects.</p>
               
               <p>Unfortunately, C does not have the
                    equivalent of Pascal's intrinsic writeln statement, which
                    acts as a sort of inline-expanded printf with the format
                    string implied; instead, C must call an external function
                    and hope the arguments match the format string.</p>
               
               <p> To the rescue comes the white knight
                    of C++. While you can still use printf, the comp.lang.c++
                    elite will sniff at your proletarian tastes. Much more hip
                    and cool are C++ inserters, syntactically represented by the
                    operator &lt;&lt;. In fact, the canonical first C++ program
                    is the above C program updated as</p>

<PRE>
#include &lt;iostream.h&gt;
int main()
    {
    cout &lt;&lt; "Hello, world!" &lt;&lt; endl;
    return 0;
    }
</PRE>
               
               <p><BR>
                     Now you C programmers, and C++ newcomers, may wonder what
                    is so spiffy about this &lt;&lt; operator; after all, such
                    bit shifting has been part of C since Dennis Ritchie was a
                    pup. Well, to paraphrase the old car ads, this is not your
                    father's bit-shift operator. C++ (or more accurately, the
                    C++ standard library) has, in certain contexts, trumped the
                    normal meaning of &lt;&lt;. Take a look in the standard C++
                    header file iostream.h [<A href="#NOTE1">1</a>]
. There you
                    will find a cornucopia of ostream member function
                    definitions such as</p>

<PRE>
ostream &amp;operator&lt;&lt;(int);
</PRE>
               
               <p></p>
               
               <p>where function operator&lt;&lt; is
                    overloaded &#151; that is, declared multiple times, with
                    different parameter lists in each declaration &#151; for all the
                    builtin arithmetic types and a few pointer types.</p>
               
               <p>Typically you don't use ostream
                    directly, but instead use a type derived from ostream. One
                    such type, also defined in iostream.h, is
                    ostream_withassign. While you can declare your own objects
                    of this type, more often you use the ostream_withassign
                    objects predefined in iostream.h. In fact, the canonical
                    first C++ program above references one of these objects,
                    cout, which is the ostream analog of the familiar stdout.</p>
               
               <h4><FONT COLOR="#000080">Life is But a Stream</FONT></H4>
               
               <p>All this permits writing the short
                    program</p>

<PRE>
#include &lt;iostream.h&gt;
int main()
    {
    int n = 123;
    cout.operator&lt;&lt;(n);
    return 0;
    }
</PRE>
               
               <p></p>
               
               <p>which you can alternately (and more
                    aesthetically) write</p>
               
               <p></p>

<PRE>
#include &lt;iostream.h&gt;
int main()
    {
    int n = 123;
    cout &lt;&lt; n;
    return 0;
    }
</PRE>
               
               <p></p>
               
               <p>Here the token &lt;&lt; does not mean
                    the builtin bit-shift operator. Instead it means the
                    function operator&lt;&lt;, acting as an inserter; that is,
                    it acts as an operator inserting the text image of a value
                    (123 here) into a stream (cout). Note that you can chain
                    inserters together, like UNIX pipes, so that</p>

<PRE>cout &lt;&lt; "n = " &lt;&lt; n &lt;&lt; endl;</PRE>
               
               <p>inserts the text sequence n = 123
                    (followed by a newline, courtesy of endl) into the stream
                    cout.</p>
               
               <p>I want to use an inserter with
                    boolean, so that</p>

<PRE>
#include &lt;iostream.h&gt;
#include "booltest.h"
int main()
    {
    boolean b = TRUE;
    cout &lt;&lt; "boolean b = " &lt;&lt; b &lt;&lt; endl;
    return 0;
    }
</PRE>
               
               <p>inserts the line booleanb=TRUE into
                    cout. This leads me to add Rule #6 to the informal set of
                    Abstract Data Type (ADT) rules I started creating last
                    month: types acting builtin work directly with inserters.</p>
               
               <p>As you peruse the list of inserters
                    advertised in iostream.h, you'll note the distinct lack of
                    an inserter accepting a boolean. That is, you won't find
                    anything remotely like</p>

<PRE>
ostream &amp;operator&lt;&lt;(boolean);
</PRE>
               
               <p></p>
               
               <p>as a member of class ostream. This is
                    unsurprising, as ostream can't possibly know about the
                    existence of our boolean. You could rewrite your compiler's
                    ostream to recognize boolean, but I gently dissuade you from
                    doing so; instead you should write a non-member function
                    that achieves the same end.</p>
               
               <p>Recall the earlier ostream member</p>

<PRE>
ostream &amp;operator&lt;&lt;(int);
</PRE>
               
               <p></p>
               
               <p>Recall further that non-static
                    function members implicitly have a hidden first parameter,
                    the infamous this pointer. When operator&lt;&lt;(int) gets
                    called, it is passed arguments as if it had really been
                    called as operator&lt;&lt;(ostream * const this, int).</p>
               
               <p>Similarly, if ostream had a member
                    that understood boolean, it would be passed arguments as if
                    it were really called as operator&lt;&lt;(ostream * const
                    this, boolean).</p>
               
               <h4><FONT COLOR="#000080">Insert Tab B(oolean)
               Into Slot O(stream)</FONT></H4>
               
               <p>Since we can't reasonably augment
                    ostream with such a function, we'll instead craft a
                    non-member function with the same arguments. Where the
                    member function makes the first parameter (this) hidden and
                    implicit, the non-member function makes it overt and
                    explicit:</p>

<PRE>
ostream &amp;operator&lt;&lt;(ostream * const, boolean);
</PRE>
               
               <p><BR>
                     Unfortunately, such a literal extrapolation from function
                    members means that, instead of using</p>

<PRE>
cout &lt;&lt; b; // or operator&lt;&lt;(cout, b);
</PRE>
               
               <p></p>
               
               <p>we are stuck with</p>
               
               <p></p>

<PRE>
&amp;cout &lt;&lt; b; // or operator&lt;&lt;(&amp;cout, b);
</PRE>
               
               <p></p>
               
               <p>since the first parameter is a pointer
                    to an ostream. Better to define the function as</p>
               
               <p></p>

<PRE>
ostream &amp;operator&lt;&lt;(ostream &amp;, boolean);
</PRE>
               
               <p></p>
               
               <p>so we can safely write [<A href="#NOTE2">2</a>]
</p>
               
               <p></p>

<PRE>
cout &lt;&lt; b;
</PRE>
               
               <p><BR>
                     Augmenting class boolean with such a function yields
                    Version 7:</p>

<PRE>
enum boolean_value
    {
    FALSE,
    TRUE
    };
class boolean
    {
public:
    boolean(boolean_value = FALSE);
private:
    char value_;
    };
boolean::boolean(boolean_value value) :
        value_(value ? TRUE : FALSE)
    {
    }
ostream &amp;operator&lt;&lt;(ostream &amp;left, boolean right)
    {
    return left &lt;&lt;
            (right.value_ ? "TRUE" : "FALSE");
    }
</PRE>
               
               <p></p>
               
               <h4><FONT COLOR="#000080">Friends, References,
               Countrymen</FONT></H4>
               
               <p>Sadly, if you append Version 7 to
                    booltest.h and try compiling our simple test of</p>

<PRE>
#include &lt;iostream.h&gt;
#include "booltest.h"
int main()
    {
    boolean b = TRUE;
    cout &lt;&lt; "boolean b = " &lt;&lt; b &lt;&lt; endl;
    return 0;
    }
</PRE>
               
               <p></p>
               
               <p>the compiler will object with
                    something like</p>
               
               <p></p>

<PRE>
'operator&lt;&lt;':cannotaccessprivatememberofclass'boolean'
</PRE>
               
               <p><BR>
                     Our operator&lt;&lt; references the boolean private data
                    member value_. The only functions that can reference private
                    data are either members of the class defining the data, or
                    friends of that class. operator&lt;&lt; cannot be a boolean
                    member (otherwise its left operand would have to be a
                    boolean instead of an ostream), so we must make it a boolean
                    friend.</p>
               
               <p> Also note that I pass the boolean
                    argument to operator&lt;&lt; by value (boolean b) rather
                    than by constant reference (boolean const &amp;b).
                    Conventional wisdom says you should generally pass objects
                    of class type by constant reference to avoid the overhead of
                    constructing temporaries. Here that wisdom is not so clear.
                    boolean objects contain a single character of data (value_),
                    while references are generally implemented as pointers; thus
                    a boolean object may be smaller than the corresponding
                    reference, meaning less stuff is passed during the call.
                    However, what is gained in size may be lost in speed as the
                    temporary boolean object is constructed.</p>
               
               <p> Instead of optimizing the data passed
                    during the function call, I'm probably better off optimizing
                    the call itself through inlining [<A href="#NOTE3">3</a>]
.
                    A clever compiler could then net all this out so there were
                    no actual arguments passed in either scenario. Still, as a
                    columnist I'm supposed to be a paragon of C++ virtue, so
                    I'll defer to conventional wisdom and pass the parameter by
                    constant reference. All these changes yield Version 8:</p>

<PRE>
enum boolean_value
    {
    FALSE,
    TRUE
    };
class boolean
    {
    friend ostream &amp;operator&lt;&lt;
            (ostream &amp;, boolean const &amp;);
public:
    boolean(boolean_value = FALSE);
private:
    char value_;
    };
inline boolean::boolean(boolean_value value) :
        value_(value ? TRUE : FALSE)
    {
    }
inline ostream&amp; operator&lt;&lt;
        (ostream &amp;left, boolean const &amp;right)
    {
    return left &lt;&lt; (right.value_ ? "TRUE" : "FALSE");
    }
</PRE>
               
               <p></p>
               
               <p>Saved into booltest.h, Version 8 works
                    swimmingly for our tiny test program. If you link and run
                    that program on a system that lets you capture what's
                    written to cout, you'll see correct results.</p>
               
               <h4><FONT COLOR="#000080">I'm no Bool, no
               Sirree</FONT></H4>
               
               <p>Now change the program to</p>

<PRE>
#include &lt;iostream.h&gt;
#include "booltest.h"
int main()
    {
    cout &lt;&lt; "TRUE = " &lt;&lt; TRUE &lt;&lt; endl;
    return 0;
    }
</PRE>
               
               <p></p>
               
               <p>and the test is less cooperative. My
                    Microsoft compiler gives a diagnostic claiming operator&lt;&lt;
                    is ambiguous. MetaWare does better, successfully compiling
                    and linking. However, rather than writing the desired</p>
               
               <p></p>

<PRE>
TRUE = TRUE
</PRE>
               
               <p></p>
               
               <p>the resulting program writes</p>
               
               <p></p>

<PRE>
TRUE = 1
</PRE>
               
               <p><BR>
                     That number 1 should look familiar: it is the integral
                    value of the enumeration constant TRUE. It would seem that
                    operator&lt;&lt; is interpreting TRUE not as an enumeration
                    constant, but as an integral. But why is this even an issue?
                    After all, shouldn't the program call the operator&lt;&lt;
                    we defined above?</p>
               
               <p> Remember that TRUE is of type
                    boolean_value. The operator&lt;&lt; overload we defined for
                    Version 7 accepts a boolean, not a boolean_value. In fact,
                    there is no operator&lt;&lt; that accepts a boolean_value.
                    However, as we saw earlier, there are several operator&lt;&lt;
                    overloads that accept integral types &#151; and enumeration
                    types (like boolean_value) easily decay to their underlying
                    integral type.</p>
               
               <p> So, instead of passing the
                    enumeration constant TRUE directly to the function operator&lt;&lt;,
                    C++ will let TRUE decay into it's underlying integral type,
                    then pass that integral type to the appropriate operator&lt;&lt;.
                    While Microsoft's compiler apparently can't choose a single
                    best fit, leading to the "ambiguous overload"
                    message, MetaWare's can. Even so, the results are incorrect;
                    we want FALSE and TRUE to behave just like boolean.</p>
               
               <p> Since adding an operator&lt;&lt; that
                    accepted boolean worked for that type, perhaps adding an
                    operator&lt;&lt; that accepts boolean_value will for FALSE
                    and TRUE. Adding such a function produces Version 9:</p>

<PRE>
enum boolean_value
    {
    FALSE,
    TRUE
    };
class boolean
    {
    friend ostream &amp;operator&lt;&lt;
        (ostream &amp;, boolean const &amp;);
public:
    boolean(boolean_value = FALSE);
private:
    char value_;
    };
inline boolean::boolean(boolean_value value) :
        value_(value ? TRUE : FALSE)
    {
    }
inline ostream &amp;operator&lt;&lt;
        (ostream &amp;left, boolean const &amp;right)
    {
    return left &lt;&lt; (right.value_ ? "TRUE" : "FALSE");
    }
inline ostream &amp;operator&lt;&lt;
        (ostream &amp;left, boolean_value const &amp;right)
    {
    return left &lt;&lt; (right ? "TRUE" : "FALSE");
    }
</PRE>
               
               <p></p>
               
               <h4><FONT COLOR="#000080">Too Many Notes</FONT></H4>
               
               <p>Hmmm. A bit redundant, isn't it? I'm
                    troubled that we need two separate operator&lt;&lt;
                    overloads for what are conceptually the same kind of
                    objects. This is a red flag, indicating that we probably
                    have a hole in our design strategy. We need two operator&lt;&lt;
                    overloads because boolean is not boolean_value. Perhaps the
                    time has come to reevaluate our use of boolean_value.</p>
               
               <p> We originally introduced
                    boolean_value in Version 3, before making boolean a class.
                    In that version, boolean_value added type safety. But
                    classes are obscenely more type safe than enumerations.
                    Further, the only "objects" of type boolean_value
                    are FALSE and TRUE. A more ideal solution would both keep
                    FALSE and TRUE type-safe, and make them compatible with
                    boolean, eliminating the need for two operator&lt;&lt;
                    overloads.</p>
               
               <p> The trick, simple and perhaps too
                    obvious, is to actually make FALSE and TRUE of type boolean.
                    This trick bears out the adage "what goes around comes
                    around," for we wrote such a solution in Version 2:</p>

<PRE>
static boolean const FALSE = 0;
static boolean const TRUE = 1;
</PRE>
               
               <p></p>
               
               <p>In C++, these statements are
                    equivalent to</p>

<PRE>
boolean const FALSE(0);
boolean const TRUE(1);
</PRE>
               
               <p><BR>
                     Points to ponder:</p>
               <UL><LI>In Version 2, boolean was really an int, while now it
                         is a full- fledged class no longer requiring the
                         typedef.</LI>
                    <LI>The FALSE and TRUE definitions still must appear at
                         global scope; otherwise you will need explicit scope
                         resolution[<A href="#NOTE4">4</a>]
.</LI>
                    <LI>Version 2 was written for C. C++ gives constant objects
                         at file scope internal linkage by default, so I don't
                         need to specify the static keyword. In this case, we
                         want them to be static; if they are extern, we can't
                         always know when they will be initialized relative to
                         other objects that reference them[<A href="#NOTE5">5</a>]
.</LI>
                    <LI> I use function-style initialization syntax here (e.g.,
                         FALSE(0)) instead of the more familiar assignment-style
                         (FALSE=0) to emphasize we are creating objects and
                         initializing them by a call to a constructor.</LI>
                    <LI>We can remove type boolean_value and all functions
                         referencing that type.</LI>
               </UL>
               
               <p>I want to explore these last two
                    points (the constructor call and removing boolean_value)
                    more fully. The statement</p>

<PRE>
boolean const FALSE(0);
</PRE>
               
               <p></p>
               
               <p>suggests FALSE is created by a
                    constructor accepting 0 as an argument. As written, boolean
                    has no such constructor. In fact, by removing type
                    boolean_value, we also have to remove
                    boolean(boolean_value), leaving us with no explicit
                    constructors[<A href="#NOTE6">6</a>]
.</p>
               
               <p>To support our new definitions of
                    FALSE and TRUE, I introduce a new constructor accepting an
                    int. You may be tempted to write that constructor's
                    implementation as</p>

<PRE>
inline boolean::boolean(int value) :
        value_(value ? TRUE : FALSE)
    {
    }
</PRE>
               
               <p></p>
               
               <p>modeled after the (now obsolete)
                    boolean(boolean_value) implementation. This new constructor,
                    like that old one, initializes the boolean object from FALSE
                    and TRUE. Now consider what happens if the objects we are
                    constructing are the actual FALSE and TRUE objects. By using
                    this constructor, FALSE and TRUE  would be initialized from
                    ... FALSE and TRUE! Turtles, turtles everywhere.</p>
               
               <p>Perhaps surprisingly, this would
                    actually compile. C++ fills static objects with all zeroes
                    at (conceptual) load-time, so that FALSE.value_ and
                    TRUE.value_ would contain zero before they were ever
                    constructed. Thus, before these two objects are initialized,
                    they hold values equivalent to FALSE after construction. The
                     net result, then, is that FALSE would construct properly,
                    but TRUE would be initialized as if it were FALSE.</p>
                
               
               <h4><FONT COLOR="#000080">Little Change, Big
               Effect</FONT></H4>
               
               <p>To get around this, change the
                    constructor slightly to</p>

<PRE>
inline boolean::boolean(int value) :
        value_(value ? (char) 1 : 0)
    {
    }
</PRE>
               
               <p></p>
               
               <p>"Slightly" is probably
                    misapplied here, for while the source code change is small,
                    the effect is actually quite large (as we'll see shortly).
                    Also notice I'm casting 1 to be a char; otherwise the
                    compiler may complain of data loss (squeezing an int
                    constant into a smaller char object)[<A href="#NOTE7">7</a>]
.
                    Adapting all these changes to Version 9 gives us Version 10:</p>
               
               <p></p>

<PRE>
#include &lt;iostream.h&gt;
class boolean
    {
    friend ostream &amp;operator&lt;&lt;
        (ostream &amp;, boolean const &amp;);
public:
    boolean(int = 0);
private:
    char value_;
    };
inline boolean::boolean(int value) :
        value_(value ? (char) 1 : 0)
    {
    }
inline ostream &amp;operator&lt;&lt;
        (ostream &amp;left, boolean const &amp;right)
    {
    return left &lt;&lt; (right.value_ ? "TRUE" : "FALSE");
    }
boolean const FALSE(0);
boolean const TRUE(1);
</PRE>
               
               <p></p>
               
               <p>If I append this to booltest.h and
                    compile the little test suite</p>

<PRE>
#include &lt;iostream.h&gt;
#include "booltest.h"
int main()
    {
    boolean b(TRUE);
    cout &lt;&lt; "b = " &lt;&lt; b &lt;&lt; endl;
    cout &lt;&lt; "TRUE = " &lt;&lt; TRUE &lt;&lt; endl;
    return 0;
    }
</PRE>
               
               <p></p>
               
               <p>I find the program builds and runs
                    correctly with both my compilers.</p>
               
               <p>A better test, of course, is compiling
                    January's test suites with this version. My results of such
                    compilation appear in <A href="table1.htm">Table 1</a>,

                    and show the success percentage has leapt to a whopping 78%,
                    far and away the highest yet. Highlights:</p>
               <UL><LI>boolean, FALSE, and TRUE are all the same type, so
                         however one behaves, they generally all behave.</LI>
                    <LI>Because of the constructor boolean(int), some integral
                         types will silently convert to boolean, as evidenced by
                         booleanb= 'A'.</LI>
                    <LI>However, that same constructor now allows statements
                         like b=(i&gt;0), a favorable consequence we hadn't
                         explicitly considered or designed for.</LI>
                    <LI>Unlike enumerations, boolean does not silently convert
                         to integral type, preventing much unintended mixing of
                         boolean and non-boolean. <BR>
                          Unfortunately, this also prevents intended mixing in
                         expressions like b&amp;&amp;(i&gt;0).</LI>
                    <LI>&#160;Some compilers won't accept constant objects of
                         class type as case labels and aggregate initializers.</LI>
               </UL>
               
               <p>Overall, the high success percentage
                    tells me we are getting very close to what I consider ideal
                    behavior for a simple boolean type.</p>
               
               <p> Next month's column wraps up our
                    survey of fundamental type design. I will add the remaining
                    boolean members, augment the test suite, and discuss the
                    final version's merits (and limitations). I will also run
                    the genuine builtin bool type through the same tests, as a
                    control measurement against our implementation[<A href="#NOTE8">8</a>]
.</p>
               
               <h4><FONT COLOR="#000080">Erratica</FONT></H4>
               
               <p>Note that in my examples this month my
                    main returns an int. In previous listings it returned void
                    so that I wouldn't need an actual return statement. I
                    reasoned that return was not pertinent to what I was
                    demonstrating, and that using it might induce you to wonder
                    how the returned value fit with the problem at hand. But as
                    diligent reader James Stern points out, returning void from 
                    main is not strictly conforming, and I had promised in my
                    first column to stick with strictly conforming constructs.</p>
               
               <p> Like programming in general, teaching
                    programming is an exercise in compromise. Were I literally
                    to use only strictly conforming code, the resulting examples
                    would often be pedantic and contain much distracting
                    overhead. Upon reflection, I don't think that returning int
                    from main is such a case, so I am comfortable amending my
                    wicked ways there. But I am also backing off from my 
                    doctrine of strictly conforming code where such code would
                    inhibit the clarity and conciseness of my examples. I am not
                    crafting production-quality maintainable code in a "real
                    world" environment &#151; I am writing small examples as
                    demonstration tools. Given the choice, I will sacrifice some
                    portability if doing so makes for more cogent teaching.</p>
               
               <h4><FONT COLOR="#000080">Footnotes and
               References</FONT></H4>
               
               <p>[<A name="NOTE1">1</a>]
 The C++
                    Working Paper denotes inclusion of this header as #include &lt;iostream&gt;,
                    without the trailing .h. I have yet to use a compiler that
                    supports this nomenclature, so for the time being, I'll
                    include the .h in my examples. Also, some compilers (such as
                    MSVC 2.x and earlier) define class ostream in the file
                    ostream.h.</p>
               
               <p> [<A name="NOTE2">2</a>]
 You may be
                    wondering, especially if you program primarily in C, why
                    adding &amp; in the operator&lt;&lt; parameter list means
                    omitting &amp; before cout. Such is the mystery of
                    references, which unfortunately use the same token (&amp;)
                    as the address of operator. For now, just take it on faith;
                    later this year, I'll cover references in greater detail.</p>
               
               <p> [<A name="NOTE3">3</a>]
 I generally
                    avoid inline functions, except for code that demonstrably
                    requires the performance tuning, and even then only in
                    release versions. Inline code often requires more frequent
                    recompilation, may be difficult or impossible to step into
                    with a debugger, and can actually make code slower.</p>
               
               <p> [<A name="NOTE4">4</a>]
 If your
                    compiler supports namespaces, you can define FALSE and TRUE
                    in a namespace and make them look global with a using
                    declaration.</p>
               
               <p> [<A name="NOTE5">5</a>]
 This is a
                    general annoyance with extern objects: you cannot know in
                    which order they are constructed and initialized. This
                    problem crops up with the standard library's predefined
                    stream objects (cout and the like), which you are allowed to
                    use in constructors for your own objects &#151; even though the
                    streams may not yet be constructed. The library employs
                    smoke and mirrors to pull this off, a topic covered by P.J.
                    Plauger in the May 1994 CUJ.</p>
               
               <p> [<A name="NOTE6">6</a>]
 But we still
                    have the implicit language-synthesized default and copy
                    constructors.</p>
               
               <p> [<A name="NOTE7">7</a>]
 I could use
                    one of the new and improved RTTI casts here. However, your
                    compiler may not fully support RTTI. Further, such casts
                    would add little to this discussion, at the cost of
                    confusing C and beginning C++ programmers.</p>
               
               <p> [<A name="NOTE8">8</a>]
 At the time
                    of writing, I still don't have available to me a compiler
                    implementing builtin bool. If this condition persists, I
                    will have to "play compiler" and translate the
                    code by eye.</p>
               
               <p><I>Bobby Schmidt is a freelance
                    writer, teacher, consultant, and programmer. He is also an
                    alumnus of Microsoft, and an original "associate"
                    of (Dan) Saks &amp; Associates. In other career
                    incarnations, Bobby has been a pool hall operator, radio DJ,
                    private investigator, and astronomer. You may summon him at
                    3543 167th Ct NE #BB-301, Redmond WA 98052; by phone at
                    (206) 881-6990, or via Internet e-mail as
                    rschmidt@netcom.com.</I></p>

<h4><a href="../../../source/1996/mar96/schmidt.zip">Get Article Source Code</a></h4>

 </BLOCKQUOTE>
     </BODY>
</HTML>
