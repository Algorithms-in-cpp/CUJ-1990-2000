






<HTML>
     
     <HEAD>


          
          <TITLE>March 1996/Uncertainty Propagation in C++/Listing 1</TITLE>
     </HEAD>
     
     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          
          <H4>Listing 1: Definition of class UDouble</H4>

<PRE>

//  model  uncertain  number  using  only  mean  and  sigma  (pure  Gaussian)
template  &lt;int  is_correlated&gt;
class  UDouble
{
private:
      double  value;
      double  uncertainty;
public:
      UDouble(const  double,  const  double);
      UDouble(const  UDouble&amp;);
      ~UDouble(void);
      UDouble&lt;is_correlated&gt;  operator  +(void)  const;
      UDouble&lt;is_correlated&gt;  operator  -(void)  const;
      friend  UDouble&lt;is_correlated&gt;  operator  +(UDouble&lt;is_correlated&gt;,
                                                 const  UDouble&lt;is_correlated&gt;&amp;);
      friend  UDouble&lt;is_correlated&gt;  operator  -(UDouble&lt;is_correlated&gt;,
                                                 const  UDouble&lt;is_correlated&gt;&amp;);
      UDouble&lt;is_correlated&gt;  operator  ++();
      UDouble&lt;is_correlated&gt;  operator  --();
      UDouble&lt;is_correlated&gt;  operator  ++(int);
      UDouble&lt;is_correlated&gt;  operator  --(int);
      friend  UDouble&lt;is_correlated&gt;  operator  *(UDouble&lt;is_correlated&gt;,
                                                 const  UDouble&lt;is_correlated&gt;&amp;);
            
      friend  UDouble&lt;is_correlated&gt;  operator  /(UDouble&lt;is_correlated&gt;,
                                                 const  UDouble&lt;is_correlated&gt;&amp;);
            
      UDouble&lt;is_correlated&gt;  &amp;operator  +=(const  UDouble&lt;is_correlated&gt;&amp;);
      UDouble&lt;is_correlated&gt;  &amp;operator  -=(const  UDouble&lt;is_correlated&gt;&amp;);
      UDouble&lt;is_correlated&gt;  &amp;operator  *=(const  UDouble&lt;is_correlated&gt;&amp;);
      UDouble&lt;is_correlated&gt;  &amp;operator  /=(const  UDouble&lt;is_correlated&gt;&amp;);
      friend  ostream&amp;  operator  &lt;&lt;(ostream  &amp;,  const  UDouble&lt;is_correlated&gt;&amp;);
      friend  istream&amp;  operator  &gt;(istream  &amp;,  UDouble&lt;is_correlated&gt;);
      //  math  library  functions
      friend  UDouble&lt;is_correlated&gt;  ceil(UDouble&lt;is_correlated&gt;);
      friend  UDouble&lt;is_correlated&gt;  floor(UDouble&lt;is_correlated&gt;);
      friend  UDouble&lt;is_correlated&gt;  fabs(UDouble&lt;is_correlated&gt;);
      friend  UDouble&lt;is_correlated&gt;  ldexp(UDouble&lt;is_correlated&gt;,  int);
      friend  UDouble&lt;is_correlated&gt;  modf(UDouble&lt;is_correlated&gt;,  double  *);
      friend  UDouble&lt;is_correlated&gt;  frexp(UDouble&lt;is_correlated&gt;,  int  *);
      friend  UDouble&lt;is_correlated&gt;  fmod(const  UDouble&lt;is_correlated&gt;&amp;,
                                               const  UDouble&lt;is_correlated&gt;&amp;);
      friend  UDouble&lt;is_correlated&gt;  sqrt(UDouble&lt;is_correlated&gt;);
      friend  UDouble&lt;is_correlated&gt;  sin(UDouble&lt;is_correlated&gt;);
      friend  UDouble&lt;is_correlated&gt;  cos(UDouble&lt;is_correlated&gt;);
      friend  UDouble&lt;is_correlated&gt;  tan(UDouble&lt;is_correlated&gt;);
      friend  UDouble&lt;is_correlated&gt;  asin(UDouble&lt;is_correlated&gt;);
      friend  UDouble&lt;is_correlated&gt;  acos(UDouble&lt;is_correlated&gt;);
      friend  UDouble&lt;is_correlated&gt;  atan(UDouble&lt;is_correlated&gt;);
      friend  UDouble&lt;is_correlated&gt;  atan2(const  UDouble&lt;is_correlated&gt;&amp;,
                                               const  UDouble&lt;is_correlated&gt;&amp;);
      friend  UDouble&lt;is_correlated&gt;  exp(UDouble&lt;is_correlated&gt;);
      friend  UDouble&lt;is_correlated&gt;  log(UDouble&lt;is_correlated&gt;);
      friend  UDouble&lt;is_correlated&gt;  log10(UDouble&lt;is_correlated&gt;);
      friend  UDouble&lt;is_correlated&gt;  sinh(UDouble&lt;is_correlated&gt;);
      friend  UDouble&lt;is_correlated&gt;  cosh(UDouble&lt;is_correlated&gt;);
      friend  UDouble&lt;is_correlated&gt;  tanh(UDouble&lt;is_correlated&gt;);
      friend  UDouble&lt;is_correlated&gt;  pow(const  UDouble&lt;is_correlated&gt;&amp;,
                                               const  UDouble&lt;is_correlated&gt;&amp;);
      //  read-only  access  to  data  members
      double  mean(void)  const;
      double  deviation(void)  const;
      friend  UDouble&lt;is_correlated&gt;  PropagateUncertaintiesBySlope(
                                               double  (*)(double),
                                               const  UDouble&lt;is_correlated&gt;&amp;);
      friend  UDouble&lt;is_correlated&gt;  PropagateUncertaintiesBySlope(
                                               double  (*)(double,  double),
                                               const  UDouble&lt;is_correlated&gt;&amp;,
                                               const  UDouble&lt;is_correlated&gt;&amp;);
};
/* End of File */
</PRE>
     </BODY>
</HTML>
