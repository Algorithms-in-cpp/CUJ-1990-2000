



<HTML><HEAD>

<TITLE>March 1996/Standard C/C++/Listing 1</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4>
<A name="HEADING1">Listing 1: The Header &lt;utility&gt;</A></h4>


<pre>

// utility standard header
#ifndef _UTILITY_
#define _UTILITY_
#include &lt;iosfwd&gt;
///namespace std {
		// TEMPLATE STRUCT pair
template&lt;class T1, class T2&gt; struct pair {
	pair()
		: first(T1()), second(T2()) {}
	pair(const T1&amp; val1, const T2&amp; val2)
		: first(val1), second(val2) {}
	T1 first;
	T2 second;
	};
		// TEMPLATE FUNCTION make_pair
template&lt;class T1, class T2&gt; inline
	pair&lt;T1, T2&gt; make_pair(const T1&amp; x, const T2&amp; y)
	{return (pair&lt;T1, T2&gt;(x, y)); }
		// pair TEMPLATE OPERATORS
template&lt;class T1, class T2&gt; inline
	bool operator==(const pair&lt;T1, T2&gt;&amp; x,
		const pair&lt;T1, T2&gt;&amp; y)
	{return (x.first == y.first &amp;&amp; x.second == y.second); }
template&lt;class T1, class T2&gt; inline
	bool operator&lt;(const pair&lt;T1, T2&gt;&amp; x,
		const pair&lt;T1, T2&gt;&amp; y)
	{return (x.first &lt; y.first ||
		!(y.first &lt; x.first) &amp;&amp; x.second &lt; y.second); }
		// TEMPLATE OPERATORS
template&lt;class T&gt; inline
	bool operator!=(const T&amp; x, const T&amp; y)
	{return (!(x == y)); }
template&lt;class T&gt; inline
	bool operator&gt;(const T&amp; x, const T&amp; y)
	{return (y &lt; x); }
template&lt;class T&gt; inline
	bool operator&lt;=(const T&amp; x, const T&amp; y)
	{return (!(y &lt; x)); }
template&lt;class T&gt; inline
	bool operator&gt;=(const T&amp; x, const T&amp; y)
	{return (!(x &lt; y)); }
///};	// end of namespace std
#endif /* _UTILITY_ */
</pre>
</body></html>
