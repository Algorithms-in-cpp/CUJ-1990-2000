






<HTML>
     
     <HEAD>


          
          <TITLE>March 1996/A Template Based Quicksort/Listing 4</TITLE>
     </HEAD>
     
     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          
          <H4>Listing 4: Sorting Word objects</H4>

<PRE>

// Listing 4: test2.cpp
#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;iostream.h&gt;
#include &lt;iomanip.h&gt;
#include "qsortT.h"

// simple class to hold a word
class Word
{
public:
  Word(const char *val = 0)
  {
    if (val)
    {
      strncpy(buf, val, bufLen);
      buf[bufLen-1] = '\0';
    }
    else
      buf[0] = '\0';
  }
  // conversion to C string for printing
  operator const char *() const
  { return buf; }

  // comparison operators for sorting
  int operator==(const Word &amp;word) const
  { return (strcmp(buf, word.buf) == 0); }
  int operator&lt;(const Word &amp;word) const
  { return (strcmp(buf, word.buf) &lt; 0); }
private:
  enum { bufLen = 40 };
  char buf[bufLen];
};

int main()
{
  const int maxWords = 100;
  int nWords = 0;
  Word **wArry = new Word* [maxWords];
  char tmp[40];

  while (cin &gt;&gt; setw(sizeof(tmp)) &gt;&gt; tmp)
  {
    wArry[nWords++] = new Word(tmp);
    if (nWords &gt;= maxWords)
      break;
  }

  // sort and print results
  qsortPT(wArry, nWords);
  for (int i = 0; i &lt; nWords; i++)
  {
    cout &lt;&lt; *(wArry[i]) &lt;&lt; endl;
    delete wArry[i];
  }
  delete []wArry;
  return 0;
}

// End of Listing 4
</PRE>
     </BODY>
</HTML>
