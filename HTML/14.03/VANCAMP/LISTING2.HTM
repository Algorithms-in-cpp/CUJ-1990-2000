






<HTML>
     
     <HEAD>


          
          <TITLE>March 1996/A Template Based Quicksort/Listing 2</TITLE>
     </HEAD>
     
     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          
          <H4>Listing 2: Implementation of qsortVT and qsortPT</H4>

<PRE>

// Listing 2: qsortT.cpp
#include &lt;assert.h&gt;
template&lt;class T&gt; void qsortVT(T *data, const int num)
{
#define SMALLEST_PARTITION 15
    register int i, j;
    int first,
        last,
        stack_pointer;
    T temp;
    struct
    {
        int left,
            right;
    } stack[100];

    if (num &lt;= 0)
        return;
    stack_pointer = 0;
    stack[0].left = 0;
    stack[0].right = num-1;
    while (stack_pointer &gt;= 0)
    {
        first = stack[stack_pointer].left;
        last  = stack[stack_pointer].right;
        assert(first &gt;= 0);
        assert(last &gt;= 0);
        assert(first &lt; num);
        assert(last &lt; num);
        stack_pointer--;

        temp = data[first];
        data[first] = data[(last + first) / 2];
        data[(last + first) / 2] = temp;

        i = first + 1;
        j = last;
        while (i &lt;= j)
        {
            while (data[i]==data[first] || data[i]&lt;data[first])
            {
                if (++i &gt; last)
                    break;
            }
            while (! (data[j] &lt; data[first]))
            {
                if (--j &lt;= first)
                    break;
            }
            if (j &gt; i)
            {
                temp = data[i];
                data[i] = data[j];
                data[j] = temp;
            }
        }

        temp = data[first];
        data[first] = data[j];
        data[j] = temp;

        if ((j - first) &gt;= SMALLEST_PARTITION)
        {
            stack[++stack_pointer].left = first;
            stack[stack_pointer].right = j - 1;
        }
        if ((last - j) &gt;= SMALLEST_PARTITION)
        {
            stack[++stack_pointer].left = j + 1;
            stack[stack_pointer].right = last;
        }
    }

    for (i = 1; i &lt; num; i++)
    {
        temp = data[i];
        j = i - 1;
        while (j &gt;= 0)
        {
            if ( (! (data[j] == temp)) &amp;&amp; (! (data[j] &lt; temp)))
            {
                data[j+1] = data[j];
                j--;
            }
            else
                break;
        }
        data[j+1] = temp;
    }
}

template&lt;class T&gt; void qsortPT(T **data, const int num)
{
#define SMALLEST_PARTITION 15
    register int i, j;
    int first,
        last,
        stack_pointer;
    T *temp;
    struct
    {
        int left,
            right;
    } stack[100];

    if (num &lt;= 0)
        return;
    stack_pointer = 0;
    stack[0].left = 0;
    stack[0].right = num-1;

    while (stack_pointer &gt;= 0)
    {
        first = stack[stack_pointer].left;
        last  = stack[stack_pointer].right;
        assert(first &gt;= 0);
        assert(last &gt;= 0);
        assert(first &lt; num);
        assert(last &lt; num);
        stack_pointer--;

        temp = data[first];
        data[first] = data[(last + first) / 2];
        data[(last + first) / 2] = temp;

        i = first + 1;
        j = last;
        while (i &lt;= j)
        {
            while (*data[i]==*data[first]||*data[i]&lt;*data[first])
            {
                if (++i &gt; last)
                    break;
            }
            while (! (*data[j] &lt; *data[first]))
            {
                if (--j &lt;= first)
                    break;
            }
            if (j &gt; i)
            {
                temp = data[i];
                data[i] = data[j];
                data[j] = temp;
            }
        }

        temp = data[first];
        data[first] = data[j];
        data[j] = temp;

        if ((j - first) &gt;= SMALLEST_PARTITION)
        {
            stack[++stack_pointer].left = first;
            stack[stack_pointer].right = j - 1;
        }
        if ((last - j) &gt;= SMALLEST_PARTITION)
        {
            stack[++stack_pointer].left = j + 1;
            stack[stack_pointer].right = last;
        }
    }

    for (i = 1; i &lt; num; i++)
    {
        temp = data[i];
        j = i - 1;
        while (j &gt;= 0)
        {
            if ( (! (*data[j]==*temp)) &amp;&amp; (! (*data[j]&lt;*temp)))
            {
                data[j+1] = data[j];
                j--;
            }
            else
                break;
        }
        data[j+1] = temp;
    }
}

// End of Listing 2
</PRE>
     </BODY>
</HTML>
