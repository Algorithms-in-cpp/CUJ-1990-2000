






<HTML>
     
     <HEAD>


          
          <TITLE>March 1996/C/C++Sources</TITLE>
     </HEAD>
     
     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          
          <H2><A href="../tocmar.htm"><IMG src="../../toc.gif" ALT="Back to TOC" WIDTH="54" HEIGHT="54"></A>
          <FONT COLOR="#FF0000">Columns</FONT></H2>
          
          <HR>
          
          <H2 ALIGN="center"><FONT COLOR="#800000">C/C++ Sources</FONT></H2>
          
          <H3 ALIGN="center"><FONT COLOR="#800000">Algorithms Are Everywhere
          on the Web</FONT></H3>
          
          <BLOCKQUOTE>
               
               <P>Graphs, Operations Research, Evolutionary Computation
                    Victor's latest outing on the web nets a treasure trove of
                    algorithms, source code, and information for C/C++
                    programmers.</P></BLOCKQUOTE>
          <HR>
          <BLOCKQUOTE>
               
               <h4><FONT COLOR="#000080">Introduction</FONT></H4>
               
               <p>Algorithms are abstract tools that
                    describe a problem to be solved and how to solve it.
                    Algorithms in Computer Science texts are typically written
                    in pseudo-code, a shorthand that conveys the structure of
                    processing while leaving out distracting detail. Algorithms
                    in the form of small but easily adaptable demonstration
                    source programs or libraries are also valuable. My sweep of 
                    the WWW has produced both types of algorithms, which I will
                    share with you. Specifically, I'll point you towards
                    algorithms for graphs, generic implementations, numerical
                    methods, operations research, parallelism, and evolutionary
                    computing (including genetic algorithms and neural
                    networks).</p>
               
               <p> [Editor's Note: Since web addresses
                    are often too long for a magazine column, we adopt the
                    following convention for displaying a web address on more on
                    than one line: The backslash ('\') at the end of a line
                    means that the address continues on the next line.
                    Whitespace should be ignored. Thus, we may display</p>

<PRE>
http://www.this.is/a/fairly/long/address
</PRE>
               
               <p><BR>
                     as</p>

<PRE>
http://www.this.is/a \
fairly/long/address
</PRE>
               
               <p></p>
               
               <p>As in C and C++, two backslashes
                    together represent a single literal backslash. &#151; mb]
                    </p>
               
               <p> <IMG src="volkman1.gif" WIDTH="24" HEIGHT="30">
                    = Documentation    <IMG src="volkman2.gif" WIDTH="32" HEIGHT="31">
                    = Source code    <IMG src="volkman3.gif" WIDTH="32" HEIGHT="32"> = Links
                    </p>
                              
               <h4><FONT COLOR="#000080">Graphs</FONT></H4>
                    <IMG src="volkman4.gif" WIDTH="24" HEIGHT="30"> The "Animated
                    Graph Algorithms Page"
                    (http://www.essi.fr/~waldura/graphs.html) maintained by Renaud Waldura &lt;waldura@essi.fr&gt;
                    is a great place to get started on implementing graph
                    algorithms. Robert R. Korfhage (Discrete Computational
                    Structures,1974) defines graphs (or more properly, linear
                    graphs) as:</p>
               
               <p> "...structures such as the edges
                    and vertices of a polyhedron, or the diagram of a lattice of
                    subsets &#151; that is, structures made up of points joined by
                    line segments".</p>
               
               <p>Specifically, Waldura's URL focuses on
                    pseudo-code for the classic "Depth-First Search,"
                    and "Breadth-First Search," and comments on their
                    applications. Contact him by email if there's a specific
                    graph algorithm you'd like to see there. The real treat in
                    this URL is an animated demonstration of both algorithms,
                    which you can view with a SUN Java browser. This will work
                    on Netscape v2.00 or SUN's own browser available on "Java:
                    Programming for the Internet" (http://java.sun.com/).</p>
               
               <p><IMG src="volkman5.gif" WIDTH="32" HEIGHT="31">
                    Moving from pseudo-code to practical implementations, I turn
                    next to "LEDA: The Library of Efficient Data Types and
                    Algorithms" (ftp://mpi-sb.mpg.de/pub/LEDA/leda.html) maintained by
                    Christian Uhrig &lt;leda@mpi-sb.mpg.de&gt; at the Max Planck
                    Institute of Computer Science. LEDA is a
                    platform-independent C++ class library that supports most
                    compilers, including Zortech, Borland, and AT&amp;T style "cfront"
                    C++ compilers. Specifically, LEDA supplies efficient
                    implementations for many data types such as Fibonacci heaps
                    for priority queues, red-black trees, dynamic perfect
                    hashing for dictionaries, and more. LEDA contains an
                    especially useful graph implementation including:</p>
               
               <p><BR>
                     <LI> iterations such as "for all nodes do" and "for
                    all neighbors do"</LI>
                     <LI>addition and deletion of vertices and edges</LI>
                     <LI>arrays and matrices indexed by nodes and edges</LI>
                     <LI>methods which mimic textbook pseudo-code directives</LI></p>
               
               <p>You can obtain LEDA by FTP from
                    ftp.mpi-sb.mpg.de:/pub/LEDA, note that it is available both
                    in PKZIP and tgz (tar'red and gnuZipped) archive formats:</p>
               
<PRE><B>Filenames         Size</B>
FAQ               19 Kb
GMBH              1 Kb
LEDA-33b.zip      1124 Kb
LEDA-R-3.2.3.tgz  717 Kb
LEDA-R-3.3.b.tgz  791 Kb
MANUAL-R-3.3.ps   741 Kb</PRE>
               
               <h4><FONT COLOR="#000080">Genericizing Algorithms</FONT></H4>
                    <IMG src="volkman6.gif" WIDTH="24" HEIGHT="30"> "Algorithm-Oriented
                    Generic Libraries" (http://www.cs.rpi.edu/~zalewskk/www/ADS/Algor/Algor.html) created by Musser and Stepanov &lt;musser@cs.rpi.edu&gt;
                    provides a new spin on an old subject. Their approach
                    differentiates itself by using generic containers rather
                    than the traditional parameterization methods of templates.
                    By expressing the algorithms in terms of basic access
                    operations and making the operations parameters, generic
                    libraries permit a single expression of the algorithms to be
                    used with any concrete representation of the container.
                    Musser and Stepanov use C++ to demonstrate their techniques,
                    but emphasize that other languages such as Ada are equally
                    suited. [This work is a step along the way to the Standard
                    Template Library of the C++ Standard &#151; pjp]</p>
               
               <h4><FONT COLOR="#000080">Numerical Methods</FONT></H4>
               
               <p> <IMG src="volkman7.gif" WIDTH="32" HEIGHT="31">
                    A completely different branch of algorithm research and
                    design involves numerical methods. "Teaching Numerical
                    Analysis" (http://www.netlib.org/textbook/mathews/) is meant to accompany the textbook of the same
                    name by John Mathews &lt;mathews@fullerton.edu&gt;. Mathews
                    covers the traditional undergraduate curriculum in Numerical
                    Analysis, including nonlinear and linear equations,
                    differentiation and integration, differential and
                    partial-differential equations, and eigenvalues and
                    eigenvectors. Algorithms are presented in Ryan-McFarland
                    FORTRAN but the concepts should be transportable to C/C++
                    either by transcription or perhaps using the GNU f2c
                    (Fortran-to-C) translator (ftp://netlib.att.com:/netlib/f2c)</p>
               
               <h4><FONT COLOR="#000080">Operations Research</FONT></H4>
               
               <p> <IMG src="volkman8.gif" WIDTH="64" HEIGHT="32">
                    Operations Research is a business-oriented class of
                    algorithms that are typically used to minimize costs
                    (production) or maximize profits. You can browse a listing
                    of packages at the "Operations Research and
                    Mathematical Optimization &#151; Software" page
                    (http://www.rrz.uni-koeln.de/themen/or/soft.html). Most of these packages are oriented
                    towards "Linear Programming." Parallelism</p>
               
               <p> <IMG src="volkman9.gif" WIDTH="24" HEIGHT="30">
                    Parallel algorithms revolve around properly exploiting the
                    resources of multiple-CPU computers. The "ICASE
                    Parallel Algorithm Highlights" page (http://www.icase.edu/docs/hilites/index.cs.alg.html) focuses specifically on parallelism as applied to
                    rendering of 3-D photorealistic images. ICASE has developed
                    a data-distributed parallel algorithm for ray-traced volume
                    rendering, which distributes not only the data but also the
                    rendering and image compositing process.</p>
               
               <p>ICASEhas also developed a parallel
                    polygon rendering algorithm. These algorithms allow
                    interactive visualization of the massive datasets created
                    for scientific applications. By exploiting the available
                    parallelism to perform graphics operations in place, you can
                    obtain visual feedback from an ongoing computation without
                    moving the entire dataset across the network.</p>
               
               <p><IMG src="volkma10.gif" WIDTH="24" HEIGHT="30">
                    Many problems are difficult to parallelize into equally
                    sized pieces that can be worked on independently. These
                    problems also require constant communication between the
                    pieces. These so-called "irregular problems" are
                    the subject of the "Implementations of Irregular
                    Parallel Algorithms" page (http://www.ius.cs.cmu.edu/afs/cs.cmu.edu/project/scandal/public/www/alg/algs.html) These pages provide
                    pseudo-code and list the pros and cons of implementations
                    involving the following irregular problems:</p>
               
               <p><BR>
                     <LI>sorting and merging</LI>
                     <LI>sparse matrix operations</LI>
                     <LI>connected components</LI>
                     <LI>scans and linear recurrences</LI>
                     <LI>list ranking</LI>
                     <LI>graph separators</LI>
                     <LI>N-body simulation</LI>
                     <LI>preconditioned conjugate gradient</LI></p>
               
               <h4><FONT COLOR="#000080">Evolutionary Computation</FONT></H4>

               <p> <IMG src="volkma11.gif" WIDTH="24" HEIGHT="30"> The hottest
                    area for algorithm research and design is the family of
                    studies which fall under the category of Evolutionary
                    Computation (EC). EC embraces all of the heuristic algorithm
                    subtypes, including Genetic Algorithms, Neural Networks,
                    Evolutionary Programming, Evolution Strategies, Classifier
                    Systems, Genetic Programming, and Darwinian strategies,
                    lumped together as Evolutionary Algorithms. If you're new to
                    EC concepts and definitions, you might as well start with
                    the comp.ai.genetics FAQ page (http://www.cis.ohio-state.edu/hypertext/faq/usenet/ai-faq/genetic/top.html).
                    
               <p> <IMG src="volkma12.gif" WIDTH="64" HEIGHT="32"> The "Genetic
                    Algorithm Research Group Online Resources" page
                    (http://www-personal.engin.umich.edu/~streak/online.html) is a great place to begin your
                    search for GA libraries. It also provides extensive pointers
                    to URLs describing Artificial Life and Cellular Automata.
                    The "MSU Genetic Algorithms Research and Applications
                    Group (the GARAGe)" (http://isl.cps.msu.edu/GA) offers
                    two libraries to get you started: GALOPPS and "lil-gp."</p>
               
               <p>The "Genetic ALgorithm Optimized
                    for Portability and Parallelism System" (GALOPPS) is a
                    generic C genetic algorithm tool that provides an enormous
                    range of options for genetic algorithm experiments. In
                    particular:</p>
               
               <p><BR>
                    <LI>It runs on both PCs and UNIX workstations (same source code).</LI>
                    <LI>It runs on a single CPU or symmetric multiprocessors (SMP).</LI>
                    <LI>It supports multi-population runs with arbitrary topologies for exchanges among subpopulations.</LI>
                    <LI>It includes complete documentation and a large number of examples.</LI>
                    <LI>The new DJGPP (GNU C) version can use all available RAM.</LI> 
                    <LI>It's PVM-compatible for better load balancing on SMP machines.</LI></p>
               
               <p>lil-gp is a generic C genetic
                    programming tool. It was written with several goals: speed,
                    ease of use, and support for the following features:</p>
               
               <p><BR>
                    <LI>It runs on both workstations and PCs (requires dgjpp on PC).</LI>
                    <LI>It supports multiple population experiments with arbitrary and user-settable topologies for exchange.</LI>
                    <LI>It uses trees of function pointers optimized for speed and avoiding swapping.</LI>
                    <LI>lil-gp now supports the use of ADFs.</LI></p>
               
               <p><IMG src="volkma13.gif" WIDTH="32" HEIGHT="31">
                    The "CMU Artificial Intelligence Repository" page
                    (http://www.cs.cmu.edu/afs/cs/project/ai-repository/ai/areas/genetic/ga/systems/genlib/0.html) is the home of the Genetic Algorithms and
                    Neural Networks Library (GENlib). This repository contains a
                    library of functions for Genetic Algorithms together with
                    two applications of this library to train Neural Networks: "cosine"
                    and "vartop."</p>
               
               <p>The cosine application uses a genetic
                    algorithm to train a simple three-layer feed-forward network
                    to work as a cosine function. This task is very difficult to
                    train for a Backwards Propagation Algorithm, but the Genetic
                    Algorithm produces good results. The vartop application
                    demonstrates developing a neural network to perform the
                    XOR-function (a classic problem). This is done with two 
                    Genetic Algorithms, the first one develops the topology of
                    the network, and the second one adjusts the weights.<BR>
                     
               <p> Both applications are written in C and have been tested and
                    verified for the IBM PC and IBM RS/6000 platforms. These
                    programs may be used for academic research and educational
                    purposes only. Commercial and non-academic purposes require
                    written permission of the author.</p>
               
               <h4><FONT COLOR="#000080">Neural Networks</FONT></H4>

               <p> <IMG src="volkma14.gif" WIDTH="32" HEIGHT="32"> Neural
                    networks are pattern recognition algorithms that learn by
                    example. One of the best catalogs of Internet resources for
                    neural networks can be found on the "Links to Neural
                    Network Sites" (http://www.asi.com/neural/www_nn.html) maintained courtesy of Adaptive Systems</p>

                <p> <IMG src="volkma15.gif" WIDTH="24" HEIGHT="30"> The "DYSTAL
                    Algorithm" page (http://www.erim.org/DS2/neuron/TVogl_4.html#HEADING3) describes the culmination of an
                    eight-year research project involving a neural network based
                    on biological associative learning with non-Hebbian learning
                    rules. The Dynamically STable Associative Learning (DYSTAL)
                    algorithm is based on the biophysics and electrophysiology
                    of the changes that learning produces in a "patch"
                    of dendritic membrane (cluster of synapses) of individual
                    neurons.</p>
               
               <p>DYSTAL, like biological associative
                    learning, works by learning an association between two
                    inputs, called the Conditioned Stimulus (CS) and the
                    Unconditioned Stimulus (UCS), to conform with the usage in
                    the associative learning literature. Recall that Pavlov's
                    dogs learned to associate the sound of a bell (the CS) with
                    the smell of meat (the UCS), so they salivated when they 
                    heard the bell alone. Humans (and DYSTAL) have generalized
                    this ability to associate events consistently presented in
                    the same sequence, so that any repeatedly paired stimuli can
                    be associated.</p>
               
               <h4><FONT COLOR="#000080">CD-ROM Review: Visual
               Programming</FONT></H4>
               
               <p>"Visual Programming: The Best of
                    Internet" by Pacific HiTech provides 163 MB (unzipped)
                    of libraries for use with Microsoft Visual Basic, Visual
                    C/C++, Borland C++, and other compatible environments. In
                    all, some 250 different products are represented.
                    Approximately 90% of the products presented are VBXs
                    designed for use with VB, though they can of course be
                    called from other environments.</p>
               
               <p> I've done considerable research in
                    this area for my book Windows Programming with Shareware
                    Tools and was pleasantly surprised to find many new products
                    here that were new to me. I recommend this disk mainly for
                    Visual Basic users. It would require you dozens of hours to
                    acquire this software over the Internet yourself.</p>
               
               <p> The HiTech browser provides the main
                    method of locating products of interest. You can browse by
                    category or perform text searches against descriptions,
                    authors, and platform (see <a href="fig1.htm">Figure 1</a>). My only complaint with
                    the browser itself was that I had difficulty reading some of
                    the fonts in 640x480.</p>
               
               <p> I found the quality of the long
                    descriptions to be uneven. Some descriptions had as many as
                    five exclamation points (!), a few typos, and many others
                    referred to figures or lists that were plainly missing.
                    Nevertheless, the descriptions do give you some idea of what
                    each product is about.</p>
               
               <p> The disc is unsuitable for BBS use
                    since it does not contain ZIPped copies of the programs. Nor
                    is there a FILES.BBS that would provide the one-line
                    descriptions needed for a BBS. It will work fine on a
                    desktop or even a shared CD-ROM server.</p>
               
               <p><I>Victor R. Volkman received a BS in
                    Computer Science from Michigan Technological University. He
                    has been a frequent contributor to the C/C++ Users Journal
                    since 1987. He is the author of the book Windows Programming
                    with Shareware Tools. He can be reached at the HAL 9000 BBS
                    (313)663-4173, telnet to hal9k.com, or email to
                    sysop@hal9k.com.</I></p> </BLOCKQUOTE>
     </BODY>
</HTML>
