<HTML>   
     <HEAD>
<TITLE>March 2000/Editor's Forum</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocmar.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Departments</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Editor's Forum</FONT></H2>

<HR>
<BLOCKQUOTE>
<p>In last month's editorial, I reported that Sun seemed to be playing games with ECMA, the European standards organization that was slated to write the Java standard. Now the news has gotten worse, at least in my opinion. Sun has completely withdrawn Java from the standardization process, claiming that Java's status as a "de facto standard" is good enough.</p>
<p>Since that time, I have read a number of arguments &#151; some compelling, some not &#151; to the effect that we don't really need a Java standard anyway, and that the situation with Java really ain't all that bad. One of the more intriguing arguments says that Sun's abandonment of standardization might inspire the open source community to develop a clean room, open source version of Java, or something very much like it. Could they succeed? Well, maybe, if the success of Linux is any indication. You could argue that, with the possible exception of C++, implementing an OS like Linux is at least as difficult as implementing a programming language. So maybe the open source community is up to the task.</p>
<p>On the other hand, a language is an entirely different thing than an OS, and there is a vast difference between getting a language to work and documenting what it is supposed to do &#151; the latter being the province of a standard. I am not optimistic that the open source process could produce a good standards document, even assuming that was the intent of its participants. To put it delicately, skill at writing good source code does not necessarily translate into skill at writing clear prose.</p>
<p>The prospect of a Java sans standard is not a cheery one, especially when it comes to teaching the language. Hardly an issue of <I>CUJ</I> goes by in which one of our columnists does not quote from the C or C++ Standard. They do so, in part, to emphasize the importance of writing portable code. It's going to be hard for teachers of Java to emphasize portability when there's nothing that defines what portable is. I find this situation a little ironic, considering how much Java has been hyped as the ultimate portable solution.</p>
<p>We will continue to cover Java in <I>CUJ,</I> and in supplements to the magazine, which seem to offer a better way to handle pure Java content. But I can quell the fears of some readers that <I>CUJ</I> is shifting to mostly Java content the way it shifted to mostly C++ content a couple years ago. It isn't happening and it isn't going to. We are not going to throw ourselves behind a proprietary language. We would be just as sane to turn <I>CUJ</I> into a Visual Basic publication. The larger question is, how long will the software market continue to throw itself behind Java? I don't have an answer for that one. Poor little Java is almost five years old, and we still don't know what will become of it. That is a long time for a programming language to find its place, by anybody's standards. It doesn't give me a rosy feeling about the future of Java.</p>

Marc Briand<br>
Editor-in-Chief</p></blockquote></body></html>
