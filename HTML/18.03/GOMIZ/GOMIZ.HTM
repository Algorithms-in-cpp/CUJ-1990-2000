<HTML>   
     <HEAD>
<TITLE>March 2000/Finding Neat Scales for Plotting</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocmar.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Finding Neat Scales for Plotting</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Antonio G&oacute;miz Bas</FONT></H3>

<BLOCKQUOTE>
<p>Labeling axes is easy for people. For a computer, it's rather less obvious.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H4><FONT COLOR="#000080">Introduction</FONT></H4>

<p>Function plotting is a very common operation included in many applications. Plotting consists of several tasks, one of them being the selection of an adequate scale for both axes. A neat, legible scale may improve graph interpretation considerably.</p>
<p>For the sake of illustration, consider that a possible x scale for displaying f(x) = x3 - x in an interval around zero is -3.1416, -1.5708, 0.0000, 1.5708 and 3.1416. Although &#188; is a very familiar number to most of us, these plotting positions look artificial. The step 1.5708 is simply not "neat." Of course, this situation would be very different if f(x) was a trigonometric function such as sin(x), cos(x), etc. Then it would seem more natural to divide the x axis into simple fractions of &#188;.</p>
<p>This article presents a function that attempts to work out a nice scale for a single plotting axis, given both interval bounds and the number of plotting positions. Of course, terms such as "neat" and "nice" are not very rigorous. I don't try to define them here in terms of formal mathematical properties. Rather, a neat scale is simply one that looks good to the eye. This is a subjective property, but hopefully one that is universal enough to be useful, even if it is hard to define.</p>
<p>The first time I faced the neat scale problem, about twelve years ago, I preferred to make use of solutions that were already available instead of writing my own function. I considered two FORTRAN subroutines: <B>CHLON</B>, included in <a href="#2">[2]</a> and <B>SCALE</B>, described in <a href="#1">[1]</a>. <B>SCALE</B> is more elaborate than <B>CHLON</B>, and it uses a longer list of neat values.</p>
<p>During all these years my C version of <B>SCALE</B> worked fine with only one, very infrequent, minor problem: the function generated some very small value, say, 9.724e-13, instead of an obvious, round 0. Since the step size was usually much bigger than this strange scale minimum, the rest of the scale consisted of the normal neat value series. However, a much more serious problem appeared recently. I found a set of initial values that made the C version of <B>SCALE</B> enter an infinite loop. Since translating from FORTRAN into C may have introduced subtle errors (and could very well again), I decided to write my own function from scratch while using the same approach.</p>

<H4><FONT COLOR="#000080">Algorithm Description</FONT></H4>

<p>The function to compute a neat step size is called <B>Scale</B>, as shown in <a href="list1.htm">Listing 1</a>. It inputs two <B>double</B>s that represent the upper and lower bounds of the plotting interval of interest, plus an integer <B>N</B> that represents the number of points to plot. It returns a <B>double</B> <B>SMin</B>, the actual minimum value along the graph scale that must be used to make everything work out, and <B>Step</B>, the computed neat step size.</p>
<p>The first problem is to define what a neat step is, at least in terms that will make sense to a program. A plausible starting place is to limit neat steps to numbers composed of two significant digits. Nelder and Stirling, the authors of <B>SCALE</B>, selected the steps 10, 12, 15, 16, 20, 25, 30, 40, 50, 60, and 80. I have included 75 to have some extra flexibility.</p>
<p>The second problem is to select a suitable step size. The first task is to compute an initial step, <B>lfIniStep</B>. This occurs just inside the outer <B>for</B> loop in <a href="list1.htm">Listing 1</a>. If <B>XMin</B>, <B>XMax</B> and <B>N</B> are the interval lower bound, upper bound, and number of plotting positions respectively, then the initial step is simply:</p>

<pre>
lfIniStep = (XMax - XMin) / (N - 1)
</pre>

<p>In most cases this computed value of <B>lfIniStep</B> will not match any of the predetermined neat steps above. For example, using the numbers from the first example in this article, <B>XMin = -3.1416</B>, <B>XMax = 3.1416</B>, and <B>N = 5</B>, which results in:</p>

<pre>
lfIniStep = (3.1416 - (-3.1416))/(5 - 1)
          = 1.5708
</pre>

<p>Therefore, it is necessary to rescale <B>lfIniStep</B>. The neat step list spans the range from 10 almost up to 100. (100 is not included in the range because it has three digits.) So it will suffice to multiply or divide the initial step by 10 until the rescaled step, <B>lfSclStep</B>, is within the open range [10, 100).</p>
<p>Using <B>lfIniStep</B> from the above example:</p>

<pre>
lfSclStep = lfIniStep * 10 = 15.708
</pre>

<p>A sequential search in the neat step list will give 16 as the smallest neat step that is greater than or equal to the rescaled step. This neat step is not the value that <B>Scale</B> returns to its caller; but it will be used in subsequent calculations. The function remembers this value via the computed index <B>i</B>.</p>
<p>The third problem is to work out a suitable scale minimum value, <B>SMin</B>. There is a condition to fulfill: the original interval <B>[XMin, XMax]</B> must be included in the new interval <B>[SMin, SMin + (N - 1) * Step]</B>, where <B>Step</B> is the final calculated neat step. <B>Step</B> will not necessarily be one of those in the neat step list, but it will be equal to one of them multiplied by a power of ten. In other words, the statements</p>

<pre>
SMin &lt;= XMin
</pre>

<p>and</p>

<pre>
XMax &lt;= SMin + (N - 1) * Step
</pre>

<p>must hold.</p>

<p>This is accomplished within the <B>do-while</B> loop shown in <a href="list1.htm">Listing 1</a>. A tentative step is first calculated as:</p>

<pre>
Step = lfSclFct * Steps [i]; (Eq. 1)
</pre>

<p>where <B>Steps[i]</B> is the smallest step from the step list greater than or equal to <B>lfSclStep</B> computed above, and <B>lfSclFct = lfIniStep/lfSclStep</B> is the rescaling back factor (<B>lfSclFct = 1.5708/15.708 = 0.1</B>). The corresponding scale minimum is given by:</p>

<pre>
SMin = floor (XMin/Step) * Step
</pre>

<p>Note that <B>SMin</B> is a multiple of <B>Step</B>, which means that zero is a potential plotting position, assuming that it falls within the range of <B>[Smin, Smax]</B> and that it does not fall in the middle of a step. This algorithm may not generate the tightest possible scale, but I have not found it to be a problem to date.</p>
<p>Once having obtained <B>SMin</B> and <B>Step</B>, the function checks the upper limit: if <B>XMax</B> is less than or equal to <B>SMin + (N - 1) * Step</B> then the function returns. If not, the function selects the next value <B>Steps[i]</B> from the step list, and goes through the <B>do-while</B> loop again, starting with the recalculation of a new value for <B>Step</B> in Equation 1 above. This <B>do-while</B> loop keeps repeating until either a) the conditions listed above are satisfied, in which case the function returns a 1 (meaning success); or b) the function runs out of values to use from the neat step list.</p>
<p>If the function exhausts the neat step list without satisfying the conditions for success, this is a signal that the number of plotting positions was too small. The variable <B>iNm1 = N - 1</B> is the number of intervals in the scale; function <B>Scale</B> doubles this value and runs through another iteration of the outer <B>for</B> loop, recomputing <B>lfIniStep</B>, <B>lfSclStep</B>, etc. and checking <B>XMax</B> again. This outer <B>for</B> loop repeats three times at most.</p>
<p>I have tested <B>Scale</B> with Microsoft Visual C++ 5.0, generating around half a billion random cases. For each of them <B>XMin</B> and <B>XMax</B> were taken from the interval <B>[-15000, 15000]</B> and <B>N</B> was assigned an integer value from 2 to 10, both included.</p>
<p>It never returned a zero.</p>

<H4><FONT COLOR="#000080">Acknowledgement</FONT></H4>

<p>Many thanks to Sandrine Levieux who revised this English composition.</p>

<H4><FONT COLOR="#000080">Source Code Copyright Notice</FONT></H4>

<p>This code may be freely used provided that the names of the original authors, J.A. Nelder, W. Douglas Stirling, and Antonio G&oacute;miz, are included within the comments.</p>

<H4><FONT COLOR="#000080">References</FONT></H4>
<p><a name="1"></a>[1]  P. Griffiths and I.D. Hill. <I>Applied Statistics Algorithms</I> (Ellis Horwood Limited, 1985).</p>
<p><a name="2"></a>[2]  L. Lebart, A. Morineau, and J. P. F&eacute;nelon. <I>Traitement des donn&eacute;es statistiques</I> (Dunod, 1979).</p>

<p><i><b>Antonio G&oacute;miz</B> received his B.Sc. in Mathematics from Universidad de Murcia, Spain. He usually earns his living as a software engineer, frequently as a data analyst. He has over seven years of C++ programming experience (ten years with C). He is interested in the design and development of computational libraries in C++ for areas such as numerical analysis, statistical analysis, operations research, and artificial intelligence. He is a member of the ACM, ASA, IEEE, and SIAM. He can be reached at <B>a.gomiz@acm.org</B>.</i></p>

<h4><a href="../../../source/2000/mar00/bas.zip">Get Article Source Code</a></h4>

</blockquote></body></html>
