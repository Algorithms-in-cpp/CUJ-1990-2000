<HTML>   
     <HEAD>
<TITLE>March 2000/Uncaught Exceptions</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocmar.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editor</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Uncaught Exceptions: comp.cuj.qa.moderated</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Bobby Schmidt</FONT></H3>

<BLOCKQUOTE>
<p>Never one to let his uncertainty show, Bobby nevertheless falls prey to Heisenberg.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>Copyright &copy; 2000 Robert H. Schmidt</p>
<p>Lately I've received submissions like</p>

<UL><LI>   How can I add color to text?</LI>
<LI>   Why does my compiler complain about a lack of DLL interfaces in STL?</LI>
<LI>   How can I implement <B>IObjectControl</B> interface methods to register my component?</LI></UL>

<p>All of these fall outside my charter, which is to answer questions about Standard C and C++. Fair game for this column: anything you would legitimately post to the newsgroups</p>

<UL><LI>   comp.lang.c.moderated</LI>
<LI>   comp.lang.c++.moderated</LI>
<LI>   std.lang.c</LI>
<LI>   std.lang.c++</LI></UL>

<p>In addition I make sorties into closely related topics such as compiler bugs and non-conformance. I almost never answer questions specific to a particular host or target platform, or that incorporate non-Standard language and library extensions. (Apparent exception: the plethora of VC++ questions, although they really fall into the bucket of compiler bug/non-conformance.)</p>
<p>I'd also like to remind one and all that, as much as I'd like to, I really can't give free consulting advice through this column. Many of the questions I get asked are quite interesting, but would require too much time to research and answer on the cheap <a href="#1">[1]</a>.</p>
<p>On a related note: I don't mind you sending me code, but please try to make your samples the smallest possible, just enough to demonstrate your problem or question. Not only does it take me longer to work through long examples, but I try not to tie up too much column space with those examples.</p>
<p>Finally, I want to thank you all for the interest you've shown in the magazine and in this column. For every question I can answer (either in print or via email), I have a dozen that I simply can't get to. As I've mentioned in the past, if you need a quick turnaround, I suggest you patronize the newsgroups I listed above. At the same time, I want to encourage you to keep sending me those questions. The more variety you give me, the more opportunity I have for wit and entertainment and, oh all right, education too.</p>

<H4><FONT COLOR="#000080">Turtology</FONT></H4>

<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> "Turtles all the way down" I understand, but I think the Heisenberg analogy is ill-founded. Apparently the sentence in your November 1999 <I>CUJ</I> column, which is supposed to justify the Heisenberg reference is the following:</p>

<BLOCKQUOTE>
If the act of defining an object changes the object type's size, that type is clearly not yet complete.
</BLOCKQUOTE>

<p>Despite the verbal echoes of Heisenberg, this does not really follow the pattern of the Uncertainty Principle, where the act of <I>observing</I> an object changes the object's <I>own behavior</I> but not the size or definition of the object's <I>type.</I> Bouncing a light beam off an electron to observe it will knock the electron off course, but it won't change the size or constant physical characteristics of all the electrons in the universe.</p>
<p>For truly Heisenberg-like behavior (which may be of no real-life programming use whatever), consider the following partially defined class:</p>

<pre>
class H
   {
private:
   int n;
public:
   // ...
   operator int()
      {
      return rnd() %2 ? n++ : n&#151;;
      }
   };
</pre>

<p>Here any attempt to get back the actual contents of an <B>H</B> object will leave the object in an altered state; if <B>int(h)</B> returns 7, we know that <B>h.n</B> used to be 7 and is now either 6 or 8, but we don't know which and can't find out without disturbing it again. &#151; Larry Kuenning</p>

<H4><FONT COLOR="#000080">A</FONT></H4>

<p> I started my undergraduate life as a Biology major. During my sophomore year I discovered that, while I was interested in biology and other "hard" sciences, I wasn't interested enough to make a career of them. (I think flagging Organic Chemistry helped clarify my discovery.) At the end of that year, I switched my major to Computer Science, which I found much more intellectually and esthetically satisfying.</p>
<p>In my CS curricula, the classes that gave me the most trouble were Physics II and III &#151; that is, pretty much everything beyond the blocks-sliding-down-a-plane stage. Of the physics topics that squashed me, quantum mechanics among them, I learned just enough to be dangerous &#151; or at least, in later life, to make dangerous analogies.</p>
<p>So yes, after reading your letter, I realize that my editorial reach somewhat exceeded my grasp. But I couldn't have missed the mark too badly, for you did see what I was aiming for, even if I didn't hit it spot on. And that, in the end, is what I was really after <a href="#2">[2]</a>.</p>

<H4><FONT COLOR="#000080">Linka-Dinka-Do</FONT></H4>

</B><H4><FONT COLOR="#000080">Q</FONT></H4>
<p> Dear Mister Schmidt,</p>
<p>I hope all is going well for you in cyberspace as well as real space. Furthermore, the happiest of holidays to you. You at the <I>CUJ</I> have always been pretty generous about freebies and general dispensing of knowledge. As well as being genuinely appreciative of this, I'm coming back to the well once again...</p>
<p>Whether or not this merits an entry in your column I don't know, but we've been encountering a strange compiler warning (Sun Sparcworks C++ compiler, 5.0). The code synopsis is this:</p>

<pre>
extern "C" void func(void (*)());

class Tclass
   {
public:
   Tclass ()
      {
      }
  static void static_func()
      {
      }
  void a ()
      {
      func(static_func); // WARNING
      }
   };

int main()
   {
   Tclass T;
   }
</pre>

<p>The compiler generates this on the line indicated:</p>

<pre>
Warning (Anachronism): Formal
argument 1 of type extern "C"
void(*)() in call to
func(extern "C" void(*)()) is being
passed void(*)().
</pre>

<p>Weird (but not a real problem). Any thoughts? Once again, thanks for sharing your smarts. &#151; Sincerely, Bill Palladino</p>

<H4><FONT COLOR="#000080">A</FONT></H4>

<p> Before launching into the boring technical answer, I want to thank you for your lovely and kind words. We here at <I>CUJ</I> certainly strive to make your Q&amp;A experience a pleasant one. We aren't happy until you're happy. Customer service is our life purpose...z-z-z-Z-Z-Z...</p>
<p>Well, you get the picture. However, I must correct one small misconception. What I dispense may be a "freebie" to you, but it certainly isn't to <I>CUJ.</I> Not that it's far from a freebie, given what they pay me; but if you carry out to enough decimal places, technically speaking I don't work for free.</p>
<p>Now for some of that bodacious customer service.</p>
<p>Your compiler's diagnostic is on the money. It tells you that the actual argument <B>TClass::static_func</B> is not the same type as the first formal argument (parameter) of <B>func</B>. The diagnostic label "Anachronism" suggests that the two types were the same in the hoary Old Days, but are no longer.</p>
<p>I've crafted a small example that I think more clearly shows the problem:</p>

<pre>
extern "C"   typedef void ((*C)  ());
extern "C++" typedef void ((*CPP)());

C   c   = 0;
CPP cpp = 0;

int main()
   {
   c   = cpp; // ERROR
   cpp = c;   // ERROR
   return 0;
   }
</pre>

<p>The two pointer-to-function definitions <B>C</B> and <B>CPP</B> are identical, with one exception: the former has C language linkage, while the latter has C++ language linkage. From the C++ Standard (7.5, "Linkage"):</p>

<BLOCKQUOTE>
<p>All function types, function names, and variable names have a language linkage.</p>
<p>The default language linkage of all function types, function names, and variable names is C++ language linkage. Two function types with different language linkages are distinct types even if they are otherwise identical.</p>
</BLOCKQUOTE>

<p>In my example, even though both <B>C</B> and <B>CPP</B> define <B>void (*)()</B> pointers, they are different types because their linkages are different. By implication, the objects <B>c</B> and <B>cpp</B> have different function-pointer types. Because C++ has no standard conversion between different function-pointer types, the two objects are not assignment-compatible, and the code shouldn't compile.</p>
<p>That's the theory anyway. In practice, every system I've ever used shares the same calling conventions for C and C++ functions. On these systems, treating a C function pointer as a C++ function pointer (or vice versa) causes no tangible problem. Many compilers therefore support a language extension allowing implicit conversion among C and C++ function pointers.</p>
<p>I don't have access to a Sparcworks compiler. Of the translators I currently have available to me, only EDG in strict mode gets it right:</p>

<pre>
a value of type "CPP" cannot be
assigned to an entity of type "C"
    c = cpp;
      ^

a value of type "C" cannot be
assigned to an entity of type "CPP"
    cpp = c;
        ^
</pre>

<p>You may wonder about my unusual declaration:</p>

<pre>
extern "C++" typedef void ((*CPP)());
</pre>

<p>Yes Virginia, there is such a thing as explicit C++ linkage. Don't panic if you've never seen this. Few people ever use it, since &#151; as the above Standard excerpt teaches us &#151; program entities default to C++ linkage.</p>

<H4><FONT COLOR="#000080">Copyish Constructor</FONT></H4>

<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> Hi,</p>
<p>My question: to a copy constructor of a class we send the argument as a reference to the class. I can understand why we cannot pass by value (causes infinite recursion), but why can't we send a pointer to the class as the argument:</p>

<pre>
class X
   {
public:
   X(const X&amp;);
   // why not X(const X*)?
   };
</pre>

<p>Thanks &#151; Anita Ved</p>

<H4><FONT COLOR="#000080">A</FONT></H4>
<p> Nothing prevents you from defining an <B>X</B> constructor the way you want. Such a definition allows</p>

<pre>
X *p;
X x1(p);   // calls X(X const *)
X x2(&amp;x1); // ditto
</pre>

<p>But if the copy constructor were defined this way, you could not write:</p>

<pre>
X x3(x1); // ERROR
</pre>

<p>or:</p>

<pre>
X x3 = x1; // ERROR
</pre>

<p>That is, you couldn't construct a new <B>X</B> object from an existing one. The closest you could come is:</p>

<pre>
X x3 = &amp;x;
</pre>

<p>which doesn't look very natural.</p>
<p>Your constructor also would not allow:</p>

<pre>
void f(X);

f(x1); // ERROR
</pre>

<p>Again, the closest you could come is:</p>

<pre>
f(&amp;x1);
</pre>

<p>Copy constructors allow a new object to be copied from an existing object, in a way that looks natural and C-like. They are required for many common C++ constructs to compile, especially those originally written in C. In addition, many template containers assume that their contained element type can copy itself (rather than copy a pointer to itself).</p>

<H4><FONT COLOR="#000080">Slings and (Cupid's) Arrows</FONT></H4>

<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> Why do fools fall in love? &#151; F. Lymon</p>
<H4><FONT COLOR="#000080">A</FONT></H4>
<p> Because they don't watch where they're walking.</p>
<H4><FONT COLOR="#000080">Model Behavior</FONT></H4>

<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> What did I miss when I have a template class:</p>

<pre>
template &lt;typename T&gt;
RetStatus&lt;T&gt;
</pre>

<p>which works fine if implemented in the header file, but not if implemented in the source file? The error message after making:</p>

<pre>
/usr/ccs/bin/ld: Unsatisfied symbols:
RetStatus&lt;int&gt;::RetStatus( ... )%1
(code)
RetStatus&lt;int&gt;::~RetStatus()(code)
*** Error exit code 1
</pre>

<p>The first diagnostic was for the constructor, the second for the destructor. It seems that the compiler cannot see the implementation. Why?</p>
<p>Your insights are appreciated! &#151; Zack Hu</p>

<H4><FONT COLOR="#000080">A</FONT></H4>

<p> What you've stumbled upon is a fork in the function template road. A full explanation would take several columns; I'll do my best to summarize here.</p>
<p>Templates, in and of themselves, do not produce code. As their name suggests, they are templates or frameworks for code, defining the pattern for a family of related classes and functions. When you instantiate a template, you create code having that template's pattern, customized for the template arguments you supply.</p>
<p>Assume for the sake of argument that you have a simple class template defined as:</p>

<pre>
template &lt;typename T&gt;
class X
   {
public:
   T f();
   };
</pre>

<p>Were you to translate a source file containing just the above, you would see no executable code produced. But once you instantiate the template:</p>

<pre>
X&lt;int&gt; x;
</pre>

<p>you direct the translator to produce a class definition matching the <B>X</B> pattern, with all the <B>T</B>'s replaced by <B>int</B>. The effect is the same as physically writing out:</p>

<pre>
template &lt;&gt;
class X&lt;int&gt;
   {
public:
   int f();
   };
</pre>

<p>The translator creates a real class called <B>X&lt;int&gt;</B>, having a name, pattern, and meaning based on the template.</p>
<p><B>X&lt;int&gt;</B> is a class type with a member function <B>f</B>. When your program makes the call:</p>

<pre>
x.f();
</pre>

<p>it needs some real function <B>f</B> to call into. Where does the body or definition of that <B>f</B> come from? Well, like the class definition, the function definition is instantiated from the template. That is, the translator takes the pattern defined for <B>f</B>, substitutes <B>int</B> for <B>T</B>, and produces a real function <B>X&lt;int&gt;::f</B> with a real body.</p>
<p>For the translator to instantiate a real <B>f</B> based on the <B>f</B> template pattern, the translator has to see the <B>f</B> pattern. This brings us to the fork in the road, for the translator really has two potential ways to see the <B>f</B> pattern:</p>

<UL><LI>   Include the pattern within every translation unit instantiating from that pattern. In practical terms, the pattern lives in a header file, which is included by other source files.</LI>
<LI>   Have the pattern exist in a separate source file and put only the function declaration in the common header.</LI></UL>

<p>In C++ lore, these two methods are called the inclusion model and the separation model. The inclusion model is the one you are familiar with and requires no extra language support. Conversely, the separation model requires the new Standard C++ keyword <B>export</B>:</p>

<pre>
export template &lt;typename T&gt;
class X
   {
public:
   T f();
   };
</pre>

<p>I've yet to see a translator actually support this keyword properly. While the separation model sounds lovely in theory, I suspect it is difficult for translator vendors to robustly implement in practice. As testament to that difficulty, every translator I've ever used employs the inclusion model.</p>
<p>The Standard talks about these compilation models in clause 14 ("Templates") paragraphs 6 through 9. Lippman and Lajoie also explain the models in their <I>C++ Primer</I>, pp. 509-12. In addition, they offer explicit template instantiation (pp. 512-514) as a way to mitigate some of the inclusion model's costs <a href="#3">[3]</a>.</p>

<H4><FONT COLOR="#000080">Erratica</FONT></H4>

<p>The brand spanking new C Standard v2.0 (a.k.a C99) is slated to be published by February 2000. I still don't know how you can buy it, but at least it should exist somewhere in our shared space-time continuum (that is, outside the Committee's event horizon).</p>
<p>Speaking of black holes and all-consuming darkness, I can finally run Windows at home on my main Mac. Up until now, what little Windows I've run has been on a laptop P.J. Plauger generously lent me. But now I've finally purchased a PC emulator (Connectix Virtual PC) that runs on Mac OS. Since the "PC" runs as a Mac application, I end up running Windows in a window. Turtles all the way down, Heisenberg or otherwise <a href="#4">[4]</a>.</p>
<p>This doesn't mean I'm about to start writing <I>MSJ</I> columns [Or what used to be <I>MSJ</I> &#151; mb]. It does mean that I can better reproduce your scenarios, since most of you seem to run Windows-hosted compilers.</p>

<H4><FONT COLOR="#000080">Notes</FONT></H4>

<p><a name="1"></a>[1]  Yeah, I could've been a Microsoft millionaire and spared myself all this agony, but I left it all behind for love. ("Why do fools...") Maybe someday when I'm desperate for column inches I'll tell the story.</p>
<p><a name="2"></a>[2]  That, and the chance to coin a new C++ pattern buzz phrase. I felt I could hardly claim membership among the C++ Literati without naming a pattern, and all the really good names were taken. Even Scott Meyers has yet to make up a pattern, other than the <I>Effective C++</I> book pattern.</p>
<p><a name="3"></a>[3]  The primary costs: redundant definitions of the same instantiated function, which can slow translation and bloat executable file size; and exposure of the function implementation within the common header.</p>
<p><a name="4"></a>[4]  Actually, I've come to believe that observing Windows does affect its behavior. I just wish the altered behavior could come in colors other than blue.</p>

<p><i><B>Bobby Schmidt</B> is a freelance writer, teacher, consultant, and programmer. He is also an alumnus of Microsoft, a speaker at the Software Development and Embedded Systems Conferences, and an original "associate" of (Dan) Saks &amp; Associates. In other career incarnations, Bobby has been a pool hall operator, radio DJ, private investigator, and astronomer. You may summon him on the Internet via <B>rschmidt@netcom.com</B>.</i></p>

</blockquote></body></html>
