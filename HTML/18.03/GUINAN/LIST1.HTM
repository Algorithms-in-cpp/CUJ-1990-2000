<HTML><HEAD>
<TITLE>March 2000/Cross-Platform Development Using GCC/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: crc.c &#151; C implementation of CRC(32)</A></h4>
<pre>
/*
 * CRC32 implementation.
 * Derived from http://www.w3.org/TR/PNG-CRCAppendix.html,
 * with modifications.
 */

#include "crc.h"

/* Table of CRCs of all 8-bit messages. */
static unsigned long crc_table[256];
   
/* Flag: has the table been computed? Initially false. */
static int crc_table_computed = 0;
   
/* Make the table for a fast CRC. */
static void make_crc_table(void)
{
  unsigned long c;
  int n, k;
   
  for (n = 0; n &lt; 256; n++) {
    c = (unsigned long) n;
    for (k = 0; k &lt; 8; k++) {
      if (c &amp; 1)
    c = 0xedb88320L ^ (c &gt;&gt; 1);
      else
    c = c &gt;&gt; 1;
    }
    crc_table[n] = c;
  }
  crc_table_computed = 1;
}

/* Supply the initial CRC value. */
unsigned long init_crc()
{
  return 0xffffffffL;
}
   
/* Update a running CRC with the bytes buf[0..len-1]--the CRC
   should be initialized to all 1's, and the transmitted value
   is the 1's complement of the final running CRC (see the
   crc() routine below)). */
unsigned long 
update_crc(unsigned long crc, const unsigned char *buf,
           int len)
{
  unsigned long c = crc;
  int n;
   
  if (!crc_table_computed)
    make_crc_table();
  for (n = 0; n &lt; len; n++) {
    c = crc_table[(c ^ buf[n]) &amp; 0xff] ^ (c &gt;&gt; 8);
  }
  return c;
}

/* Get the value of a "running" CRC. */
unsigned long value_crc(unsigned long crc)
{
  return crc ^ 0xffffffffL;
}
</pre></body></html>
