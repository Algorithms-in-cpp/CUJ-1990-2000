<HTML><HEAD>
<TITLE>March 2000/An Embedded Memory-Based SQL Class for C++/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2: The stock quote client program</A></h4>
<pre>
// Sample client that creates an embedded sql object, and then 
// allows the user to select data out of the object using sql. 
// Note, the database is stored in shared memory and the access
// is controlled by the C++ object.
#include &lt;afxwin.h&gt;
#include &lt;iostream.h&gt;        
#include "EMBSQL.h"
void main(int argc, char *argv[])
{
    SCCollection *ptr; // holds the row data (a collection)
    void **row;        // a row out of ptr (a row an array)
    char buf[512];     // input buffer

    CESql* a = new CESql();       // get the embsql object
    if (a-&gt;ReturnError() != "") { // watch out for errors 
        cout &lt;&lt; a-&gt;ReturnError() + "\n";
        exit(1);
    }
    a-&gt;PrintStack(false);       // set to t to see the stack

    while(true) {        // read from console and execute it
        cout &lt;&lt; "embsql&gt;";
        cout.flush();
        cin.getline(buf,512);
        if (buf[0] == 0) exit(0);
        if ((ptr = a-&gt;Sql(buf)) != NULL) { // execute the sql
            for (int i=0; a-&gt;GetColumnCount()&gt;-1, 
                     i&lt;ptr-&gt;GetSize(); i++) {
                // for each row, get it and print it 
                row = (void **)ptr-&gt;GetAt(i);       
                SCTable::PrintRow(a-&gt;GetColumnInfo(),
                    a-&gt;GetColumnCount(),row);  // use helper
            }
        }
        if (a-&gt;ReturnError() != "") {
            cout &lt;&lt; a-&gt;ReturnError() + "\n";
            cout.flush();
        }
    }
}
</pre></body></html>
