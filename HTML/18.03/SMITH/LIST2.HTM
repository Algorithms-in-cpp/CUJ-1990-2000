<HTML><HEAD>
<TITLE>March 2000/An STL-Based N-Way Set/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2: hostdb.cpp</A></h4>
<pre>
#ifdef WIN32
#pragma warning( disable : 4786 )
#pragma warning( disable : 4503 )
#endif
#include &lt;ctype.h&gt;
#include &lt;string&gt;
#include &lt;stdio.h&gt;
#include "nwayset.h"

class CDNSRecord //A DNS record encapsulator
{
    public:
        inline CDNSRecord(const char *pszName, 
            const char *pszType, const char *pszAddress) 
            : m_strName(pszName), m_strType(pszType),     
              m_strAddress(pszAddress) {};
        string m_strName, m_strType, m_strAddress;       
};

bool DNSNameCompare(const CDNSRecord &amp;obj1, 
         const CDNSRecord &amp;obj2)
    {return obj1.m_strName &lt; obj2.m_strName;}
bool DNSAddressCompare(const CDNSRecord &amp;obj1, 
         const CDNSRecord &amp;obj2)
    {return obj1.m_strAddress &lt; obj2.m_strAddress;}

//parse lines from an nslookup ls &gt; file
const char *GetNextWord(char ** ppsz) 
{
    char *psz=*ppsz;
    if(!psz) return NULL;
    while(*psz &amp;&amp; iswspace(*psz)) psz++;
    if(!*psz) return NULL;
    char *pszResult=psz;
    while(*psz &amp;&amp; !iswspace(*psz)) psz++;
    if(*psz) { *psz=0; psz++;}
    *ppsz=psz;
    return pszResult;
}

//Trim left and right white space from a string
int alltrim(char *psz) 
{
   int iLength=strlen(psz);
   for(int iCount=iLength-1;iCount&gt;=0 &amp;&amp; 
       isspace(psz[iCount]); iCount--);
   iLength=iCount+1;
   psz[iLength]=0;
   for(iCount=0;psz[iCount]&amp;&amp;isspace(psz[iCount]);iCount++);
   if(iCount)
   {
      strcpy(psz,psz+iCount);
      iLength-=iCount;
   }      
   return iLength;
}

void main(int argc, char *argv[])
{
    char szLine[100];
    
    if(argc!=2)     return;
        
    //create our n-way set and insert our indexes
    nwayset&lt;CDNSRecord&gt; nsDNSLookup;
    
    nsDNSLookup.index_insert(DNSNameCompare);
    nsDNSLookup.index_insert(DNSAddressCompare);
    
    //process our file
    FILE *pFile=fopen(argv[1], "r");
    while(fgets(szLine, 99, pFile))
    {
        alltrim(szLine);
        if(ispunct(szLine[0])) continue;
        char *pLine=szLine;
        const char *pszName, *pszType, *pszAddress;
        if((pszName=GetNextWord(&amp;pLine))&amp;&amp;
               (pszType=GetNextWord(&amp;pLine))&amp;&amp;
               (pszAddress=GetNextWord(&amp;pLine)))
            nsDNSLookup.insert(
                CDNSRecord(pszName, pszType, pszAddress));
    }
    fclose(pFile);

    printf("Processed %d records.\n", nsDNSLookup.size());

    for(;;) 
    {
        //grab an address/hostname to look up
        printf("Type in query string&gt; ");
        gets(szLine);
        if(alltrim(szLine)&lt;=0)
            break;
        //search all indexes
        CDNSRecord objSearch(szLine,"",szLine);
        nwayset&lt;CDNSRecord&gt;::const_iterator it =
            nsDNSLookup.find(objSearch);
        if(it!=nsDNSLookup.end())
            printf("Hostname: %s\nAddress: %s\n",
         (*it).m_strName.c_str(),
         (*it).m_strAddress.c_str());
    }
}

</pre></body></html>
