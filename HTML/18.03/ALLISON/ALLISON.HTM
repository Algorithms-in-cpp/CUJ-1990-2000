<HTML>   
     <HEAD>
<TITLE>March 2000/import java.*</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocmar.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">import java.*: Arrays</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Chuck Allison</FONT></H3>

<BLOCKQUOTE>
<p>Java arrays are very much like those in C/C++, except where they're not.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>"Arrays?" you ask yourself. I know what you're thinking. You wonder why an article on a powerful object-oriented programming language in the year 2000 is focusing on arrays. Well, that's a good question, with a good answer: arrays in Java are very different than arrays in C. In fact, they're much safer and easier to use than C arrays; although, as usual, you pay the price of increased overhead. In this article I discuss how arrays work in Java, and I also look at the array algorithms introduced to Java 2.</p>

<H4><FONT COLOR="#000080">Like C, Only Different</FONT></H4>

<p>Well, how different can Java arrays be? Like arrays in C, Java arrays are fixed-length, indexed sequences of objects of the same type. Furthermore, with Java arrays you use square brackets for indexing and indexes begin at zero. But that's where the similarity between Java and C arrays ends. The most important thing to remember about arrays in Java is:</p>

<BLOCKQUOTE>
<p><I>Java arrays are run-time objects.</I></p>
</BLOCKQUOTE>

<p>Arrays in Java are created at run time. Therefore, they always reside on the heap. Since arrays are objects, they can store their length and check indexing operations for out-of-bounds errors &#151; and so they do. Array elements are also automatically zero/null-initialized when they are created. The following program excerpt creates an array of <B>int</B>s:</p>

<pre>
int[] a;         // line 1
a = new int[3];  // line 2
a[0] = 1;
a[1] = 2;
a[2] = 3;
for (int i = 0; i &lt; a.length; ++i)
   System.out.println(a[i]);

/* Output:
1
2
3
*/
</pre>

<p>You can see from the first line above that you place the brackets with the type, not the array name, which makes sense, because <B>a</B> is an array of <B>int</B>, precisely what the expression <B>int[]</B> suggests. Java will allow you to use a C-style declarator (<B>int a[]</B>), but that's just to ease the transition from C to Java. "Real" Java programmers say <B>int[]</B>.</p>
<p>The second thing to learn from line 1 above is that you <I>never</I> specify an array's dimension when you declare it &#151; that comes later when you create it with the <B>new</B> operator. After line 1 executes, the variable <B>a</B> holds a null. After line 2, <B>a</B> points to heap space large enough to hold three contiguous <B>int</B>s, which have already been initialized to zero. (Feel free to insert a print loop to verify the zero-initialization.) The number of elements in an array is available in its read-only <B>length</B> member <a href="#1">[1]</a>. If you try to index outside of the range <B>[0,</B> <B>length-1]</B> you will get an <B>IndexOutOfBoundsException</B>.</p>
<p>Java allows C-style array initializers for typists who prefer to minimize keystrokes. A single line, for example, could replace the first five lines of the excerpt above:</p>

<pre>
int[] a = {1, 2, 3,};
</pre>

<p>Note that Java allows a benign, trailing comma, probably for those of us who occasionally change our intializers but forget to delete that last comma.</p>
<p>Java provides yet another initializer mechanism, which is particularly handy for those instances when an array doesn't need a name. If you wanted to pass the array <B>{1, 2, 3}</B> as an argument to a function, for example, you could create the array on-the-fly as follows <a href="#2">[2]</a>:</p>

<pre>
f(new int[]{1, 2, 3});
</pre>

<p>Since arrays are run-time objects (somewhat similar to using <B>calloc</B> in C, in fact), you can reassign an array variable to another array, as in:</p>

<pre>
// assume a is initialized,
// from above
...
a = new int[]{10, 20, 30, 40};    
// now a.length == 4
</pre>

<p>The old array will be cleaned up when the garbage collector runs.</p>
<p>You can create arrays of any type, of course, not just primitives. To create an array of <B>Integer</B>s, you can do something like the following <a href="#3">[3]</a>:</p>

<pre>
Integer[] a;
a = new Integer[3];
a[0] = new Integer(1);
a[1] = new Integer(2);
a[2] = new Integer(3);
</pre>

<p>or if you prefer</p>

<pre>
Integer[] a = {new Integer(1),
               new Integer(2),
               new Integer(3)};
</pre>

<p>Since arrays of objects only hold object references, you can always store objects in an array of the objects' supertype, as in:</p>

<pre>
Object[] a = {new Integer(1),
              new Integer(2),
              new Integer(3)};
</pre>

<p>If you try to store an object that is not compatible with an array's element type you will get an <B>ArrayStoreException</B>.</p>

<H4><FONT COLOR="#000080">Arrays as Objects</FONT></H4>

<p>Each array type is a class that implicitly extends <B>Object</B>, as if declared like this:</p>

<pre>
class &lt;ArrayType&gt;
   implements Cloneable
{
   public final int length =
      &lt;system provided value&gt;;
   public Object clone()
   {
      try
      {
         return super.clone();
      }
      catch (CloneNotSupportedException x)
      {
       throw new
       InternalError(e.getMessage());
      }
   }
}
</pre>

<p>Since the overridden <B>clone</B> method doesn't throw an exception, you don't have to worry about catching or declaring it in your code. Unfortunately, in this pseudo implementation, <B>Object.equals()</B> isn't overridden, so you can't use it to compare two arrays for equality. (It behaves the same as the <B>==</B> operator; in other words, it's useless.) There is an array algorithm discussed below that will do the job, however. The program in <a href="fig1.htm">Figure 1</a> illustrates all of the above. Note the actual class name for an array of <B>int</B>. The length of an array is not part of its type name (it's a field, remember), so all arrays that hold the same type of element are instances of the same class. The class name of an array is not a valid Java token (because it contains a bracket) and it reveals the array's dimension (the number of braces).</p>
<p>The <B>System</B> class includes a handy algorithm for copying a subsequence of one array to another. The following program copies the array <B>a</B> into the middle of array <B>b</B>.</p>

<pre>
class ArrayCopy
{
   public static void
   main(String[] args)
   {
      int[] a = {1,2,3};
      int[] b = new int[5];
      System.arraycopy(a, 0, b, 1,
                       a.length);
      for (int i=0; i &lt; b.length;++i)
        System.out.print(b[i] + " ");
   }
}

/* Output:
0 1 2 3 0
*/
</pre>

<p>Of course all the indices need to be within range and the types of the two arrays must be compatible.</p>

<H4><FONT COLOR="#000080">Multidimensional Arrays</FONT></H4>

<p>Like C, Java interprets an array with multiple dimensions as an array of arrays. For example, the expression:</p>

<pre>
int[][] a;
</pre>

<p>declares <B>a</B> to be an array, each of whose elements is itself an array of <B>int</B>. Unlike in C, you can't specify the size of each element array &#151; that has to wait until run time. If you want a to create a 3x4 array of <B>int</B>s, you again have three choices. You can allocate the space all at once, as in:</p>

<pre>
int[][] a = new int[3][4];
</pre>

<p>and then initialize each element individually (i.e., <B>a[0][0] = 0</B>, <B>a[0][1] = 1</B>, etc.). Or, you can use a shorthand C-style initializer, such as:</p>

<pre>
int a[][] = {{0, 1, 2, 3},
             {4, 5, 6, 7},
             {8, 9, 0, 1}};
</pre>

<p>Finally, you can allocate each row individually, like this:</p>

<pre>
// 1st dimension required
// in the next statement
int a[][] = new int[3][];
a[0] = new int[]{0, 1, 2, 3};
a[1] = new int[]{4, 5, 6, 7};
a[2] = new int[]{8, 9, 0, 1};
</pre>

<p>Whenever you create an array with the <B>new</B> operator without an initializer, you must always provide at least the first dimension specifier, so the compiler knows how many elements the array will hold. The latter two techniques emphasize the fact that each element of <B>a</B> is itself an array. If you wanted to, you could define <B>a</B> as a ragged array by giving each element <B>a</B> different length:</p>

<pre>
a[0] = new int[]{0, 1, 2, 3, 4};
a[1] = new int[]{5, 6, 7};
a[2] = new int[]{8, 9, 0, 1};
</pre>

<p>To print <B>a</B> row-wise requires using the <B>length</B> field for each element, as you can see in <a href="fig2.htm">Figure 2</a>. You can also define ragged arrays with a single initializer list, as the program in <a href="fig3.htm">Figure 3</a> illustrates.</p>
<p>Since you can place the brackets in an array declaration either with the type or with the variable (C-style), declarations can sometimes be hard to decipher. For example, the following statement declares <B>a</B> as a <B>T[]</B> and <B>b</B> as a <B>T[][]</B>.</p>

<pre>
T[] a, b[]; // b is T[][]
</pre>

<p>I think it's best not to mix the two declaration styles.</p>

<H4><FONT COLOR="#000080">Array Algorithms</FONT></H4>

<p>The class <B>java.util.Arrays</B> has some useful algorithms for processing arrays, namely:</p>

<UL><LI>   <B>binarySearch</B></LI>
<LI>   <B>equals</B></LI>
<LI>   <B>fill</B></LI>
<LI>   <B>sort</B></LI>
</UL>

<p>These algorithms come in the form of overloaded methods that take arrays of <B>Object</B> and also of every primitive data type. The program in <a href="fig4.htm">Figure 4</a> uses all four algorithms on arrays of <B>int</B>. The <B>binarySearch</B> algorithm requires an ordered array, of course, so the first thing I do is call the <B>sort</B> algorithm with the statement:</p>

<pre>
Arrays.sort(array);
</pre>

<p><B>binarySearch</B> returns the zero-based index of the element you're after, if it's there; otherwise it returns:</p>

<pre>
-pos - 1
</pre>

<p>Solving for <B>pos</B> by adding 1 and then changing sign will either give you the location before which the number should be inserted, or <B>array.length</B>, in case it should be appended to the array. Be aware that if the array contains multiple instances of a search object, there is no guarantee as to which one the search algorithm will find.</p>
<p>Unfortunately, when used with arrays of primitives, <B>Arrays.sort</B> puts things in ascending order only. If you want some other ordering scheme, you have to use arrays of <B>Object</B> and pass <B>sort</B> an extra comparator argument.</p>
<p>A comparator is an object that implements the following interface:</p>

<pre>
public interface Comparator
{
   int compare(Object o1, Object o2);
}
</pre>

<p>The <B>compare</B> method must behave like C's <B>strcmp</B> function by returning a negative number if <B>o1</B> precedes <B>o2</B> in your ordering, zero if they are equal, or a positive number otherwise. The program in <a href="fig5.htm">Figure 5</a> sorts an array of <B>Integer</B>s in descending order by using the following comparator:</p>

<pre>
class Descending
   implements Comparator
{
   public int
   compare(Object o1, Object o2)
   {
     Comparable c1 = (Comparable) o1;
     Comparable c2 = (Comparable) o2;
     return -c1.compareTo(c2);
   }
}
</pre>

<p>A <B>Comparable</B> object implements the method <B>int compareTo(Object o)</B>, which also behaves like C's <B>strcmp</B>. <B>String</B>, <B>Date</B>, and all the primitive wrapper classes implement <B>Comparable</B>, as do the new Java 2 collections (to be described in a future article). <B>Arrays.sort</B> uses <B>Descending.compare</B> to compare <B>Integer</B>s in <a href="fig5.htm">Figure 5</a>.</p>
<p>Note that the definition of <B>Descending</B> above is totally generic &#151; you can use it to reverse sort any collection of objects derived from <B>Comparable</B>. Since this is something you'll want to do quite often, the Java 2 library provides this comparator as the return value of <B>Collections.reverseOrder</B>, so you can replace the definition of <B>desc</B> in <a href="fig5.htm">Figure 5</a> with the following one:</p>

<pre>
static Comparator desc =
   Collections.reverseOrder();
</pre>

<p>Since all Java 2 algorithms process instances of <B>Object</B>, it is easy to handle objects of any class. <a href="fig6.htm">Figure 6</a> defines a <B>Person</B> class. Note that it implements <B>Comparable</B>, in case I want to sort an array of <B>Person</B>s. The fact that <B>Person</B> also implements <B>Cloneable</B> is a coincidence of my test program. I tried to implement <B>hashCode</B> and <B>compareTo</B> to insure that different <B>Person</B> objects will yield distinct results. The program in <a href="fig7.htm">Figure 7</a> searches an array of <B>Person</B>s.</p>
<p>It is possible to order and search an array by a subset of the objects' fields by defining a suitable comparator. In <a href="fig8.htm">Figure 8</a>, I use a comparator that just looks at a Person's name. Unfortunately, I have to use a complete <B>Person</B> object as the search key, even though the last three fields are ignored. As far as I can tell, there is no way to define a comparator to use a <B>Person</B> as one argument and a string as the other, as you can with function objects in the Standard C++ library.</p>

<H4><FONT COLOR="#000080">Conclusion</FONT></H4>

<p>Because arrays are bona fide objects in Java, you have ample run-time support for handling them safely. The <B>length</B> field constitutes a run-time query for the number of elements in an array, so you don't have to pass it as a parameter as you do in C. If you accidentally use a bad index, the system will tell you instead of letting you march higgledy piggledy through memory on your merry way to an access violation. The <B>java.util.Arrays</B> class provides commonly-needed algorithms for processing arrays of any type. Naturally there is some overhead for all this safety and convenience, but unless you're building a performance-critical embedded system, the safety and ease of use is likely to be a winning proposition.</p>

<H4><FONT COLOR="#000080">Notes</FONT></H4>

<p><a name="1"></a>[1]  Why <B>length</B> is a field and not a method is a great mystery known only to Java's designers.</p>
<p><a name="2"></a>[2]  This feature became available with JDK version 1.1. This syntax is very similar to "compound literals" in C99. In the new C you can create a stack-based array on-the-fly in an expression like: <B>F((int[]){1, 2, 3});</B></p>
<p><a name="3"></a>[3]  An <B>Integer</B> is a class wrapper around an <B>int</B>.</p>

<p><i><B>Chuck Allison</B> is Consulting Editor and a columnist with <I>CUJ</I>. He is the owner of Fresh Sources, a company specializing in object-oriented software development, training, and mentoring. He has been a contributing member of J16, the C++ Standards Committee, since 1991, and is the author of <I>C and C++ Code Capsules: A Guide for Practitioners</I>, Prentice-Hall, 1998. You can email Chuck at <B>cda@freshsources.com</B>.</i></p>

<h4><a href="../../../source/2000/mar00/allison.zip">Get Article Source Code</a></h4>

</blockquote></body></html>
