<HTML>   
     <HEAD>
<TITLE>March 2000/Making Primitive Objects Thread Safe</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocmar.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Making Primitive Objects Thread Safe</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Juval Lowy</FONT></H3>

<BLOCKQUOTE>
<p>All sorts of things need thread locks. A fairly simple template or two can do the job.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>Multithreading can bring many advantages to an application: the user interface can remain responsive while processing goes on in the background; the application can take advantages of multiple CPUs, serve multiple clients, and prioritize tasks. But these benefits come with a price &#151; you have to worry about synchronization issues, deadlocks, reentrancy, and managing the state of objects that are being accessed on multiple threads.</p>
<p>The non-OO way to protect resources, is to have a collection of locks (semaphores or critical section objects), that a thread must acquire before accessing the resource. If the resource is being accessed by another thread, the thread trying to acquire the lock will block. This solution is very error prone. It relies on developers having the necessary discipline, it couples the clients of the resources to the synchronization requirements and proper usage (e.g., what lock goes with what object), and it could result in deadlock. Changing the sychronization mechanism is difficult.</p>
<p>The object-oriented solution to synchronization problems is conceptually simple &#151; make the resource or the object itself thread safe by encapsulating a lock inside the object it is supposed to protect. For example, if you have a member variable in your class that is a linked list, and multiple clients on multiple threads can access your object, you encapsulated the list lock inside the list. The list has a synchronization lock inside it as a data member. Every time you access the list API, say via function <B>AddHead</B>, the method implementation tries to acquire the internal lock. If it is available, the <B>AddHead</B> method locks the object, accesses the list pointer, adds a new element to the head, and releases the lock. If the lock is not available, the call blocks until it is.</p>
<p>However, suppose you have member variables in your class that are primitive types, such as <B>int</B> or <B>float</B>. In C++ you cannot extend primitive types by inheritance. You will end up in the scope of your class managing locks for those primitive members variables and be susceptible to the same problems as if you were programming in C!</p>
<p>The solution I've come up with is a template class called <B>SAFETYPE</B>. <a href="fig1.htm">Figure 1</a> shows portions of the header file that defines <B>SAFETYPE</B>. The complete source files (<B>safetype.h</B>, <B>safetype.inl</B>, and <B>safetype.cpp</B>) are available on the <I>CUJ</I> ftp site (see p. 3 for downloading instructions). I also make the files <B>safelist.h</B> and <B>safelist.inl</B> available, as an example of the classic OO way of making an object thread safe. <B>SAFETYPE</B> provides synchronization at the atomic level, both for primitive types and for complex classes such as <B>CString</B>. <B>SAFETYPE</B> implements almost all of the C operators. It has only two member variables &#151; an object of type <B>T</B> (the type specified by the template parameter), and a lock (a Win32 mutex).</p>
<p>The implementation of a given operator is straightforward. It locks the object, executes the "real" operator that is defined for the <B>T</B> type, and unlocks the object. <a href="fig2.htm">Figure 2</a> shows an example. The <B>SingleLock</B> method shown simply calls the Win32 function <B>WaitForSingleObject</B>. If the operator is a binary, it calls a method <B>DoubleLock</B>, which in turn calls <B>WaitForMultipleObjects</B>.</p>
<p>I have implemented <B>SAFETYPE</B> on Windows, but you should be able to port it easily to other platforms by providing your own implementation for the <B>SingleLock/DoubleLock</B> methods using the target platform's synchronization support.</p>

<H4><FONT COLOR="#000080">Using SAFETYPEs</FONT></H4>

<p>Using <B>SAFETYPE</B> is just like using the original type, assuming the original type has all the operators that you want to call defined. Just declare the <B>SAFETYPE</B> variable and use it:</p>

<pre>
SAFETYPE&lt;int&gt; nValue;
int nBug;

nValue +=3; //This is thread safe
nBug   +=3; //This is not thread safe
</pre>

<p>By making all your class data members thread safe, you can automatically eliminate synchronization problems. This is a much more simplified programing model than the non-OO way presented above. <a href="fig3.htm">Figure 3</a> shows an example of using <B>SAFETYPE</B> in a C++ object that is being accessed by multiple threads. Note that all the data members are safe.</p>

<H4><FONT COLOR="#000080">Summary</FONT></H4>

<p>It is not possible to make access to primitive types thread safe the way it is typically done with user-defined types in object-oriented programs. With user-defined types it is fairly easy to encapsulate a lock within the object to be protected. This is not possible with primitive types. The <B>SAFETYPE</B> template class provides a convenient way to make access to primitive objects safe in a multithreading environment. You can use <B>SAFETYPE</B> on complex user-defined types as well.</p>

<p><i><B>Juval Lowy</B> is a software architecture manager at KLA-Tencor, a fortune 500 company. Juval also manages a program for reusable software components across the corporation. He conducts classes on Object-Oriented Design, Win32 multithreading, COM, and advanced COM. He can be reached at <B>juval.lowy@kla-tencor.com</B>.</i></p>

<h4><a href="../../../source/2000/mar00/lowy.zip">Get Article Source Code</a></h4>

</blockquote></body></html>
