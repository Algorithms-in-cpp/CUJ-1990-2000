


<HTML>
<HEAD>

<TITLE>June 1992/Debugging With Sherlock</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjun.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Software Tools</FONT></H2>

<hr><h2 align="center"><font color="#800000">Debugging With Sherlock<A name="010F_0082"><A name="010F_0082"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="010F_0000"><A name="010F_0000">Comments by Edward K. Ream</font></h3><hr><blockquote><P>
<P><i><A name="010F_0000"><A name="010F_0000">Edward K. Ream is the author of the RED text editor, CPP (a C Preprocessor), the CSTAR language and compilers and Sherlock, all of which are in the public domain and available from the C Users Group Library. He received a masters degree in computer science from the University of Wisconsin in 1974 and is the owner of Sherlock Software. His computer interests include compiler implementation, language design and debugging and verification techniques.</i></P><P>
Normally, writing debugging statements into your code is tedious. In addition, the code can produce huge amounts of unwanted output and slow programs to unacceptable levels.<P>
I wrote a set of programming tools, called Sherlock, which tackles the problems caused by adding debugging code to programs. With Sherlock, debugging code can be enabled or disabled without recompiling and relinking your program. Inserted <I>printf</I> statements trace your functions and data structures exactly as you desire. You can insert heavy-weight assertions &#151; detailed code to check your data structures &#151; wherever you wish with no unwanted time penalty. Finally, Sherlock measures program performance at whatever level you desire.<P>
Sherlock contains over 40 macros and dozens of hidden support routines, plus three stand-alone utilities. In particular, the SPP tool contains the front-end and parser of a full ANSI C compiler, with extensions to handle Microsoft C, Turbo C, MPW C, and Think C. There are more than three full programmer years worth of code in Sherlock.<P>
I have contributed Sherlock to The C Users' Group Library. Sherlock is not protected by copyright and is in the public domain. The volume includes full source code.<P>
<h4><FONT COLOR="#000080"><A name="010F_0083">Beyond <B><I>DEBUG</I><A name="010F_0083"></B></FONT></h4></P>
Sherlock fixes two defects in <I>DEBUG</I>, a macro commonly used to disable debugging code. A typical definition of <I>DEBUG </I>is<P>
<pre>#if DEBUG_ON == 1
 #define DEBUG(code) code
#else
 #define DEBUG(code)
#endif</pre>
The <I>code</I> argument is assumed to be one or more C language statements. If <I>DEBUG_ON</I> equals <I>1</I>, <I>DEBUG</I> produces the code, while if <I>DEBUG</I>_<I>ON</I> is defined to be zero, it produces nothing at all.<P>
A serious drawback to <I>DEBUG</I> is its "all or nothing" approach &#151; all debugging code is enabled or none of it is. One can improve <I>DEBUG</I> by adding different "levels" of debugging, for example,<P>
<pre>#if DEBUG_LEVEL == 2
 #define DEBUG2(s) s
 #define DEBUG1(s) s
#elif DEBUG_LEVEL == 1
 #define DEBUG2(s)
 #define DEBUG1(s) s
#else
 #define DEBUG2(s)
 #define DEBUG1(s)
#endif</pre>
<I>DEBUGn</I> is enabled only if <I>DEBUG_LEVEL</I> == <I>n</I>. Sherlock goes even further. It enables statements, either individually or in groups, using a much simpler and more general method.<P>
Another problem with <I>DEBUG</I> is that it enables or disables debug code only at compile time. Sherlock enables and disables code at <I>runtime</I> by using debugging macros that manage a runtime symbol table. This Sherlock symbol table is initialized during program execution, either from a command line, dialog box, argument file, or Sherlock macros. Entries in the table are created automatically by the Sherlock macros themselves. Sherlock support routines (hidden routines called from the Sherlock macros) indicate whether individual symbols are currently enabled. They also perform other behind-the-scenes chores.<P>
<h4><FONT COLOR="#000080"><A name="010F_0084">Sherlock Macros<A name="010F_0084"></FONT></h4></P>
A typical Sherlock macro might be defined as<P>
<pre>#ifdef SHERLOCK
 #define TRACE(name, code)\
 if(sl_trace (name)) {code}
#else
 #define TRACEP(name, code)
#endif</pre>
The argument <I>name</I> is a C string that names a symbol. <I>TRACE</I> expands to code that calls <I>sl_trace</I>, a support routine that returns <I>TRUE</I> if the symbol is currently enabled in the Sherlock symbol table. For example, in the code<P>
<pre>void foo (int a)
{
 TRACE("foo", printf("%d/n, a));
}</pre>
the <I>name</I> argument is <I>"foo"</I> and the <I>code</I> argument is,<P>
<pre>printf("%d\n", a);</pre>
The <I>TRACE</I> macro is deceptively simple. The <I>printf</I> statement is executed only if the symbol <I>foo</I> is enabled. Otherwise nothing happens.<P>
<I>TRACE</I> can disable code either at compiletime or runtime. If <I>SHERLOCK</I> is not defined, the <I>TRACE</I> macro produces no code at all. More importantly, the code produced by <I>TRACE</I> remains disabled unless explicitly enabled at runtime.<P>
<I>TRACEP</I> is one of several variations on <I>TRACE. TRACEP</I> prints the symbol before executing the code. For example, the effects of the two macros<P>
<pre>TRACEP (" foo", printf ("%d\n" ,a));
TRACE("foo",printf("foo: %d\n",a));</pre>
are identical.<P>
Sherlock can enable and disable symbols singly or in groups &#151; the details don't matter here. What does matter is that<P>
<UL><li>symbols are enabled at runtime and,</li>
<li>the executable image of a program need not change to enable or disable individual debugging, tracing, and profiling statements.</li></UL>
<h4><FONT COLOR="#000080"><A name="010F_0085">An Important Optimization<A name="010F_0085"></FONT></h4></P>
As previously defined, the <I>TRACE</I> macro calls <I>sl_trace</I> to search the Sherlock symbol table every time <I>TRACE</I> is executed. After using Sherlock for a while, I discovered a method to define <I>TRACE</I> so the symbol table is searched only once. The improved definition is<P>
<pre>#ifdef SHERLOCK
 #define TRACE(name, code) \
 {static void * h = NULL; \
 if (sl_trace (&amp;h, name) ) {code}}
#else
 #define TRACE(name, code)
#endif</pre>
This version of <I>TRACE</I> defines a separate handle <I>h</I> for each macro call. The first time <I>TRACE</I> is called, the handle <I>h</I> is <I>NULL</I> and <I>sl_trace</I> searches for the symbol in <I>name</I>. An entry is created and tracing is disabled if the proper entry does not already exist. In any case, <I>sl_trace</I> changes <I>h</I> to point to the proper symbol table entry. Finally, <I>sl_trace</I> returns <I>TRUE</I> if the symbol is currently enabled. The second time <I>TRACE</I> is called, <I>sl_trace</I> uses <I>h</I> to access the symbol table without searching. Using a handle to the symbol table entry insures that <I>sl_trace</I> will always return the current tracing status of the symbol. Sherlock macros are very fast because the symbol table is only searched the first time a macro is called.<P>
<h4><FONT COLOR="#000080"><A name="010F_0086">Evaluating Sherlock<A name="010F_0086"></FONT></h4></P>
Sherlock is easy to use. Adding another <I>TRACE</I> macro is trivial. You don't have to write new argument handling code, and no new variables need to be defined. In addition, Sherlock includes a utility called SPP which inserts Sherlock macros throughout any kind of C source code, from K&amp;R C to ANSI C &#151; handy when using Sherlock in an existing program.<P>
Sherlock is flexible. When using a command-line environment, I enable the symbol <I>foo</I> simply by adding ++<I>foo</I> to the command line. In effect each symbol defines a separate debugging switch. Groups of symbols can be enabled or disabled using wildcard characters like * and <I>?</I>. A Sherlock initialization macro strips these Sherlock arguments from the command line so they do not interfere with the application's argument processing logic.<P>
The Macintosh version of Sherlock gets Sherlock arguments either from a dialog box, an MPW command line, or an argument file. I typically add hundreds of <I>TRACE</I> macros to a large program. The more <I>TRACE</I> macros I add, the more flexibility I obtain.<P>
Sherlock is fast. <I>TRACE</I> macros do not slow my programs significantly because Sherlock's support routines don't do much searching. In practice I use <I>TRACE</I> to speed up my debugging code. Indeed, I use <I>TRACE</I> to disable heavy-weight assertions, which perform complex checks on large data structures. For example, suppose a routine called <I>check_s</I> checks a data structure <I>s</I>. After creating or modifying <I>s</I>, insert the following macro,<P>
<pre>TRACE (" chec k_s",
 ASSERT(check s(s));</pre>
The <I>ASSERT</I> macro, which is part of the Standard C library, writes an error message and aborts if its argument does not evaluate to <I>TRUE</I>. It shares both of <I>DEBUG</I>'s failings: it is an all-or-nothing macro and can disable code only at compile time.<P>
Using <I>ASSERT</I> by itself would be impractical because <I>check_s</I> takes too much time. Sherlock lets me add <I>ASSERT </I>macros without worrying how slow they are.<P>
<I>TRACE</I> produces no unwanted output. Since Sherlock macros are disabled by default, <I>printf</I> statements may be inserted anywhere without worrying about how much output they produce. Just as Sherlock encourages heavy-weight assertions, Sherlock encourages very sophisticated print routines. Because traces are so easy to enable, I use traces more often and can justify (to myself) the extra work involved in making them sophisticated.<P>
Finally, Sherlock produces fine-grained statistics. Sherlock support routines gather statistics and store them in the Sherlock symbol table. A Sherlock macro prints all symbols and their associated statistics in alphabetical order. I can quickly and accurately measure, to the millisecond, how any section of my code performs. If I need more accuracy, I need only add another Sherlock macro.<P>
<h4><FONT COLOR="#000080"><A name="010F_0087">Conclusion<A name="010F_0087"></FONT></h4></P>
Sherlock takes a very different approach to debugging. It can be of value to many C programmers. Once you use Sherlock you may well wonder how you ever programmed without it. I think that Sherlock is more flexible and easier to use than any other profiling tool.<P>
C Users Group Library<br>
Volume 355 (MS-DOS)<br>
Volume 356 (Macintosh)<br>
1601 W. 23rd St., Ste. 200<br>
Lawrence, KS 66046<br>
(913) 841-1631<P>
</BLOCKQUOTE>
</BODY>
</HTML>
