


<HTML>
<HEAD>

<TITLE>June 1992/A Small make</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjun.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Software Tools</FONT></H2>

<hr><h2 align="center"><font color="#800000">A Small make<A name="0111_0084"><A name="0111_0084"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0111_0000"><A name="0111_0000">Michael Gilson</font></h3><hr><blockquote><P>
<P><i><A name="0111_0000"><A name="0111_0000">Mike Gilson develops C software<I></I> <I></I>for VAX/VMS, UNIX, and<I></I> <I></I>MS-DOS platforms, for the<I></I> <I></I>Allen-Bradley Co. He can be reached<I></I> <I></I>at Internet address<I></I> <I></I>gilsonm@edn.lcd.ab.com.</i></P><P>
<I>make</I>, a tool available for virtually every operating system, speeds the building of systems by recompiling and linking only those elements of a program that have had source code changes since the program was last built. This article presents a small version of the <I>make</I> utility based on a graph algorithm called Depth-First Search. <a href="fig1.htm">Figure 1</a> contains a directed graph, or digraph, that represents the dependencies of the files which comprise <I>hello.exe.</I> (The term directed graph, or digraph, refers to the one-way relationship between the files. An executable file is built from the source code. The source code is not built from the executable.)<P>
<h4><FONT COLOR="#000080"><A name="0111_0085">How <B><I>make</I></B> Works<A name="0111_0085"></FONT></h4></P>
In <I>make</I> terminology, <I>hello.exe</I> is referred to as the target and the object files are its dependencies. <I>make</I> must determine whether <I>hello.exe</I> is up to date with respect to its dependencies. <I>make</I> also verifies that the object files are up to date with respect to their dependencies. <I>hello.exe</I> is newer than either of the object files, making it current with respect to its dependencies. <I>main.c</I> has been modified since <I>main.obj</I> was rebuilt, so <I>main.obj</I> must be rebuilt, making it newer than the target, <I>hello.exe.</I> So make rebuilds the target. <I>make</I> does not rebuild <I>hello.obj</I> since its last change occurred before the last change to the target.<P>
<h4><FONT COLOR="#000080"><A name="0111_0086">Using a Makefile<A name="0111_0086"></FONT></h4></P>
A makefile contains statements that describe the file dependencies and the commands required to build objects and executables. A programmer uses a makefile to translate the graph in <a href="fig1.htm">Figure 1</a> into something meaningful to the <I>make</I> program.<P>
<A href="list1.htm">Listing 1</a>
contains the makefile for <I>hello.exe. hello.exe</I>, the target, begins in column 1 of the makefile, followed by <I>hello.exe</I>'s dependency list on the same line after the colon. The next line links the two files, creating the <I>hello.exe</I> executable. The third line copies the executable to another directory.<P>
<h4><FONT COLOR="#000080"><A name="0111_0087">Program Structure<A name="0111_0087"></FONT></h4></P>
This implementation of <I>make</I> contains four parts: the <I>main</I> function, the command-line parser, the makefile parser, and the executive. The <I>main</I> function (<A href="list2.htm">Listing 2</a>)
 calls the makefile parser and the executive and then exits. The <I>fatal_error</I> routine prints an error message, when necessary, then exits the program.<P>
The command-line parser processes any arguments that are passed to the program when invoking <I>make</I>. This program allows the user to pass two arguments to <I>make: -f </I>(filename) and <I>-t</I> (target). <I>-f </I>allows the user to specify an alternative to the default filename, <I>Makefile. -t </I>specifies which target to build. The program creates the default from the first target label appearing in the makefile (in this case <I>hello.exe</I>).<P>
The makefile parser reads the makefile and stores the dependencies in a data structure called an adjacency list. An adjacency list is a two-dimensional linked list. The vertical dimension is a linked list of all <I>n</I> vertices in the graph, where each vertex is a target or dimension: its dependency list and its command list. Either or both of these lists may be null lists. <a href="fig2.htm">Figure 2</a> shows an adjacency list of <I>hello.exe</I> and its dependencies. <I>proto.h</I> is an example of a vertex with null dependency and command lists.<P>
<A href="list3.htm">Listing 3</a>
shows the declarations of the three structures used to implement the adjacency list representation of the digraph of a makefile. These structures are <I>TARGET, DEP</I>, and <I>CMD</I>. They correspond to each target and its lists of dependencies and commands, respectively.<P>
The executive traverses the target's dependency digraph, rebuilding files as necessary. Using the adjacency list, the executive systematically examines the modification dates of files on which the target depends. The program rebuilds out-of-date files based on their command lists.<P>
<h4><FONT COLOR="#000080"><A name="0111_0088">Command-Line Parser<A name="0111_0088"></FONT></h4></P>
<I>parse_options</I> (<A href="list4.htm">Listing 4</a>)
 directs that all options are preceded by a minus sign and followed by an argument. The option flag and argument are separated by whitespace. An example command line when using the makefile in <A href="list1.htm">Listing 1</a>
might be<P>
<pre>make -t main.obj</pre>
It specifies that the target <I>main.obj</I> be built (if necessary). The next command line redefines both the makefile and the target:<P>
<pre>make -f testing.txt -t some.obj</pre>
This command line renames the makefile to <I>testing.txt</I>, opens it, and requests the target <I>some.obj</I> be built by <I>parse_makefile</I>.<P>
<h4><FONT COLOR="#000080"><A name="0111_0089">Makefile Syntax<A name="0111_0089"></FONT></h4></P>
You must understand the makefile syntax before you can parse the makefile. In this implementation of <I>make</I>, targets always begin in column 1 and are followed by whitespace and a colon. The colon may optionally be followed by a list of dependencies. The list is terminated by a newline character. The format for a target line is<P>
<pre>target&lt;whitespace&gt;:[&lt;dependency&gt;][&lt;depenecy&gt;]...&lt;\n&gt;</pre>
Dependencies may be other targets or filenames, but are always preceded by whitespace. The format for a dependency is<P>
<pre>&lt;whitespace&gt;&lt;label | filename&gt;</pre>
Targets may be followed by a list of commands which specify how to build the label. Each command is preceded by whitespace and terminated by a newline character. The list of commands is terminated by the next target in the makefile or the end of file character. The format for a command line is<P>
<pre>   &lt;whitespace&gt;[&lt;shell command&gt;]&lt;newline&gt;</pre>
Notice that a shell command is optional. This allows for blank lines in the makefile to improve readability.<P>
(In <a href="fig1.htm">Figure 1</a>, <I>proto.h</I> does not need to be rebuilt, so it has no commands. In fact, it does not need to appear as a target at all. It is included merely for completeness.)<P>
<h4><FONT COLOR="#000080"><A name="0111_008A">Parsing the Makefile<A name="0111_008A"></FONT></h4></P>
<A href="list5.htm">Listing 5</a>
shows the routines used to parse the makefile and build the adjacency list. <I>add_target, insert_cmd</I>, and <I>insert_dependency</I> are straight-forward, linked-list insertions. In <I>insert_cmd</I>, the order of commands in a command list must be preserved, so commands are always added to the end of the list. In the makefile in <A href="list1.htm">Listing 1</a>,
 <I>hello.exe</I> is copied to another directory after it is built by the link command. <I>insert_cmd</I> preserves this order. <I>skip_ws</I> is used to skip the whitespace that precedes a command-shell command.<P>
<I>parse_makefile</I> receives three arguments from <I>main: argc</I> and <I>argv</I>, and the address of a character buffer that will receive the name of the target. <I>parse_makefile</I> uses these arguments to determine whether the user specified a makefile or target on the command line. If not, the defaults are used. The default filename for the makefile is <I>makefile</I>. The default target is the first target found in the makefile. The program calls <I>parse_options</I> to process the command line arguments. <I>parse_options</I> copies the user-defined makefile name and target into <I>parse_makefile</I>'s buffers.<P>
After calling <I>parse_options, parse_makefile</I> opens the appropriate makefile, then reads and processes each line of the makefile. If the first character is whitespace, it considers the line a command line, otherwise it must be a target. Since a command line must be preceded by a target, the adjacency list must be non-empty, that is, <I>head</I> must not be NULL. If <I>head</I> is NULL, the program reports a fatal error, then exits. If <I>head</I> is not NULL, the program adds the command to the current target's command list by a call to <I>insert_cmd</I>.<P>
The program processes a target line by repeated calls to <I>strtok</I> and inserts the resulting token into the appropriate list. The first call to <I>strtok</I> returns the target, which is inserted in the adjacency list by a call to <I>add_target</I>. Before performing an insertion, <I>add_target</I> checks for duplicate targets. A duplicate target results in a fatal error. The target token should be followed by a colon token, then (optionally) by a list of dependencies. Dependencies are added to the target's dependency list by a call to <I>insert_dependency</I>. When finished parsing the makefile, <I>parse_makefile</I> returns the address of the head of the dependency list.<P>
<h4><FONT COLOR="#000080"><A name="0111_008B">Executive<A name="0111_008B"></FONT></h4></P>
The executive, <A href="list6.htm">Listing 6</a>,
 builds the target. <I>process_dependency</I> starts the execution process by calling <I>search_target_list</I> to return a pointer to the target in the adjacency list. <I>search_target_list</I>, a simple linked-list search routine, returns NULL if it doesn't find the target. The program will then report a fatal error and exit. If <I>search_target_list</I> finds the target, the program calls <I>build_target</I>.<P>
<I>build_target</I>, the heart of this <I>make</I> program, is a recursive algorithm based on the Depth-First Search (DFS) algorithm. DFS is used to search both graphs and digraphs. (See <a href="#ref1">[1]</a> in references.)<P>
In the structure definitions in <A href="list3.htm">Listing 3</a>,
 the <I>TARGET</I> structure has a <I>enum</I> member, <I>color.build_target</I> uses this field to determine which vertices have been visited. <I>WHITE</I> indicates that a vertex has not been visited; <I>GRAY</I> that the vertex is in the process of being visited; <I>BLACK</I> that the vertex has been visited sometime in the past. <I>add_target</I> initializes this field to <I>WHITE</I> when building the adjacency list. <I>build_target</I> changes the color to <I>GRAY</I> and eventually to <I>BLACK</I>.<P>
The <I>build_taget</I> visit to a vertex can be logically divided into four parts: initialization, checking the vertex's dependency list, executing the command list, and cleanup. During initialization <I>build_target</I> sets the color of the vertex it is visiting from <I>WHITE</I> to <I>GRAY</I>. It also saves the timestamp of the vertex's target in two variables: <I>newest_t</I> and <I>current_vertex_t</I>.<P>
<I>build_target</I> then checks the vertex's dependency list, a linked list, by stepping through from the head of the list until it reaches a NULL pointer. It then searches the list of targets to determine whether the dependency is another target or simply a file. As noted in the case of <I>proto.h</I> above, some files may appear as dependencies and not as targets when no commands are needed to build them. If it is a dependency, it must have one of three colors: <I>WHITE, GRAY</I>, or <I>BLACK</I>. If <I>r-&gt;color</I> is <I>WHITE, build_target</I> visits <I>r</I> by a recursive call. If <I>r-&gt;color</I> is <I>GRAY</I>, then <I>r</I> is currently being visited by an earlier call to <I>build_target</I>, meaning the current vertex is a dependency of <I>r. GRAY</I> indicates a recursive dependency, since <I>r</I> is a dependency of the current vertex, by being in the current vertex's dependency list. This causes the program to report a fatal error, then exit. (<A href="list7.htm">Listing 7</a>
is an example of a makefile with a recursive dependency.) If <I>r-&gt;color</I> is <I>BLACK, r</I> has been visited before and its timestamp is taken by a call to <I>stat.</I><P>
<I>build_target</I> must ensure that the current vertex's file is newer than the files of its dependents and all their dependents, etc. If not, it must rebuild the current vertex. It must then compare the timestamp for the current vertex, saved in <I>current_vertex_t,</I> to that of its dependents. At the beginning of the visit, it assumes the current vertex is newer than its dependents, so its timestamp is also saved in <I>newest_t</I>. During a recursive call to <I>build_target</I>, a newer dependent could be found and <I>build_target</I> writes this dependent's timestamp into <I>dependent_t</I>. After a return from a recursive call to <I>build_target, make</I> compares <I>dependent_t</I> to <I>newest_t.</I> If it is newer, the program assigns<P>
<pre>newest_t = dependent_t;</pre>
The <I>make</I> program repeats this comparison after every recursive call to <I>build_target</I>, ensuring that the final value of <I>newest_t</I> is the timestamp of the newest file among the current vertex and its dependents. Using this information, <I>build_target</I> performs the comparison<P>
<pre>if (newest_t &gt; current_vertex_t) {
    exec_cmd_list(p-&gt;cmdlink);
    if (FNFERR == (stat(p-&gt;target, &amp;statbuf))
        fatal_error("target not built");
    newest_t = statbuf.st_mtime;
}</pre>
In other words, if any of its dependents are newer than the current vertex, the program rebuilds the current vertex, takes a timestamp of the rebuilt file, and assigns that to <I>newest_t.</I> Otherwise, the current vertex is already the newest file, so the program assign its timestamp to <I>newest_t.</I><P>
During the cleanup phase the program sets the color of the current vertex to <I>BLACK</I>, indicating it has been visited, and it reports its timestamp to the calling routine.<P>
<h4><FONT COLOR="#000080"><A name="0111_008C">Extensions<A name="0111_008C"></FONT></h4></P>
The implementation of <I>make</I> presented here is a small subset of <I>make</I> functionality. Simple extensions to this program include: macro definition and expansion, continuation of target line to allow long dependency lists, printing (not executing) the commands, printing the dependency list, and allowing <I>make</I> to search for files along a directory path if not found in the current directory.<P>
This program was developed using Borland C++, MS-DOS 5.0 and Windows 3.0. However, the code is portable to systems with ANSI C compilers. The header file <I>stat.h</I> may be in a different location on other systems, which requires a change to the <I>#include</I> directive in the executive (<A href="list6.htm">Listing 6</a>)
 of<P>
<pre>#include &lt;sys\stat.h&gt;</pre>
<A href="list8.htm">Listing 8</a>,
 <A href="list9.htm">Listing 9</a>,
 and <A href="list10.htm">Listing 10</a>
comprise the source code for the <I>hello.exe</I> program that has been used as an example throughout this article.<P>
<h4>References</FONT></h4></P>
<a name="ref1">[1]</a>     Carmen, Leiserson, and Rivest. <I>Introduction to Algorithms</I>. The MIT Press, 1990.<P>
[2]     Knuth, Donald E.. <I>The Art of Computer Programming</I>, Vol. 1. Addison-Wesley, 1973.<P>
[3]     <I>The SunOs Reference Manual</I>, Vol. 1., Sun Microsystems, Inc., 1989.<P>

<h4><a href="../../../source/1992/jun92/gilson.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
