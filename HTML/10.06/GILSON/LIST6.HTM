<HTML><HEAD>
<TITLE>June 1992/A Small make/Listing 6</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 6</A></h4>
<pre>#include "makedef.h"
#include &lt;sys\stat.h&gt;

#define FNFERR (-1)    /* stat error: file not found */

long    process_dependency(TARGET *head,
                       char *build_target)
{
TARGET  *p;
time_t  dependent_t;
int     rebuilt;

if {p = search_target list(head, build_target))
   rebuilt = build_target(head, p, &amp;dependent_t);
else
   fatal_error("build target not found");

if (!rebuilt)
   printf("\n'%s' is up to date.",build_target);
}


TARGET *search_target_list(TARGET *head, char *target)
{
while {head &amp;&amp; strcmp{target, head-&gt;target))
   head = head-&gt;link;
return head;
}


long    exec cmd list(CMD *p)
{
int     status;

while (p) {
   printf("\n%s",p-&gt;cmdstr);
   status = system(p-&gt;cmdstr);
     if (status)
      exit(status);
     p = p-&gt;link;
}
}


long    build_target(TARGET *head, TARGET *p,
                       time_t *parent_t)
{
DEP     *q;
TARGET  *r;
long    status = 0;
time_t  dependent_t;
time_t  newest_t;
time_t  current_vertex_t;
struct  stat statbuf;

/*+++++ Initialization +++++*/

p-&gt;color = GRAY;
if (FNFERR == stat(p-&gt;target, &amp;statbuf))
   statbuf.st_mtime = 0;
newest_t = current_vertex_t = statbuf.st_mtime;

/*++++ Check current vertex's dependencies +++++*/

q = p-&gt;deplink;
while (q) {
     if (NULL == (r = search_target_list(head, q-&gt;depstr))) {
      if (FNFERR == stat(q-&gt;depstr, &amp;statbuf))
         fatal_error("dependency not found");
      else
         dependent_t = statbuf.st_mtime;
   } else {
      switch (r-&gt;color) {
         case WHITE:
           build_target(head, r, &amp;dependent_t);
            break;
         case GRAY:
           fatal_error("recursive dependency found");
            break;
         case BLACK:
            dependent_t = statbuf.st_mtime;
            break;
      }
   }
   if (dependent_t &gt; newest_t)
      newest_t = dependent_t;
   q = q-&gt;link;
}

/*++++  Execute command list ++++*/

if (newest_t &gt;_current vertex_t) {
   status++;
      exec cmd list(p-&gt;cmdlink);
   if (FNFERR == stat(p-&gt;target, &amp;statbuf))
      fatal_error("commands did not update target");
   newest_t = statbuf.st_mtime;
}else
   newest_t = current_vertex;

/*++++ Cleanup ++++*/

p-&gt;color = BLACK;
*parent_t = newest_t;
return status;
}
/* End of File */
</pre>
</BODY>
</HTML>
