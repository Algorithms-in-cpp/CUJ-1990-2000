<HTML><HEAD>
<TITLE>June 1992/A Small make/Listing 5</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 5</A></h4>
<pre>#include "makedef.h"

#define WHITESPACE       "\t\n"

TARGET *parse_makefile(int argc, char *argv[], char *target)
{
FILE   *fp;
TARGET *head = NULL;
TARGET *current = NULL;
char   makefile[ DEP LEN ] = {0};
char   buffer[ CMD_LEN ];
char   *token;

parse_options(argc, argv, makefile, target);
if (NULL == (fp = strlen(makefile) ?
   fopen(makefile, "r") : fopen("Makefile", "r")))
      fatal_error("could not find makefile");

while (fgets(buffer, CMD_LEN, fp)) {
   if (!isspace(buffer[0])) {
      token = strtok(buffer, WHITESPACE);
      if (!head &amp;&amp; !strlen(target))
          strcpy(target, token);
      current = add target(&amp;head, token);
      token = strtok(NULL, WHITESPACE);
      if (!token || strcmp(":", token))
         fatal_error("target must be followed by ':'");
      while (token = strtok(NULL, WHITESPACE))
          insert_dependency(current, token);
   } else {
      if (!head)
        fatal_error("command must be preceeded by a target");
      else if (token = skip_ws(buffer))
          insert_cmd(current, token);
   }
}

fclose(fp);
return head;
}


char    *skip_ws(char *s)
{
while (isspace(*s)) s++;
return (('\O'== *s) ? NULL : s);
}


TARGET *add_target(TARGET **head, char *target)
{
TARGET *p;

if (search_target_list(*head, target))
   fatal_error("duplicate target found");
p = (TARGET *) malloc(sizeof(TARGET));

if (p) {
   p-&gt;link = *head;
   strcpy{p-&gt;target, target);
   p-&gt;cmdlink = (CMD *) NULL;
   p-&gt;deplink = (DEP *) NULL;
   p-&gt;color = WHITE;
   *head = p;
}
return p;
}


DEP     *insert_dependency(TARGET *p, char *dependency)
{
DEP     *q;

q = (DEP *) malloc(sizeof(DEP));

if (q) {
   q-&gt;link = p-&gt;deplink;
   strcpy(q-&gt;depstr, dependency);
   p-&gt;deplink = q;
}
return q;
}


CMD     *insert_cmd(TARGET *p, char *cmd)
{
CMD     *q, *r;

q = (CMD *) malloc(sizeof(CMD));

if (q) {
   q-&gt;link = NULL;
   strcpy(q-&gt;cmdstr, cmd);
   q-&gt;cmdstr[strlen(q-&gt;cmdstr) - 1] = '\O';
   if (r = p-&gt;cmdlink) {
      while (r-&gt;link)
         r = r-&gt;link;
      r-&gt;link = q;
   } else
      p-&gt;cmdlink = q;
}
return q;
}
/* End of File */
</pre>
</BODY>
</HTML>
