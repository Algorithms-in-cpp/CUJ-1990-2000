<HTML><HEAD>
<TITLE>June 1992/Creating Interactive Voice Response Systems in C++/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2</A></h4>
<pre>#include    "channel.hpp"

// initialize the channel
void CHANNEL::prep(int line)
{
   lineno = line;
   
   // enable events for this line: change in loop
   // current, ring detected, off-hook or on-hook
   // completed. Answer after 1 ring.
   setcst(lineno, C_LC | C_RING | C_OFFH | C_ONH, 1);
   
   // initial state is wait for ring
   begin_func = &amp;CHANNEL::wait_for_ring;
   end_func   = &amp;CHANNEL::wait_complete;
   
   begin_state();
}

// play the message back to the user
int CHANNEL::play()
{
   printf("Playing %s on %d\n", msgname, lineno);
   clrrwb(&amp;rwb);   // clear the read/write block
   
   char fname[13];
   sprintf(fname, "%s%s", msgname, SPEECH_EXT);
   
   // open the handle to be played back, should
   // check against -1 return in production code
   rwb.filehndl = open(fname, 0_RDONLY | 0_BINARY);
   
   // instruct card to cause event if keypad is
   // pressed or loop signal detected
   rwb.maxdtmf = 1;
   rwb.loopsig = 1;
   
   return(xplayf(lineno, PM_NORM, &amp;rwb));
}

// execute the state begin function
int CHANNEL::begin_state()
{
   INTPROC fp = this-&gt;begin_func;
   return (this-&gt;*fp)();
}

// execute the state end function
void CHANNEL::cmplt_state(int evtcode)
{
   VOIDPROC fp = this-&gt;end_func;
   (this-&gt;*fp)(evtcode);
}


// End of File
</pre>
</BODY>
</HTML>
