


<HTML>
<HEAD>

<TITLE>June 1992/Creating Interactive Voice Response Systems in C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjun.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">Creating Interactive Voice Response Systems in C++<A name="0117_0088"><A name="0117_0088"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0117_0000"><A name="0117_0000">Michael W. Cohn</font></h3><hr><blockquote><P>
<P><i><A name="0117_0000"><A name="0117_0000">Mike Cohn works as Software Team Leader for Telephone Response Technologies. He has an M.A. in economics from the Claremont Graduate School and is pursuing an M.S. in computer science at the University of Idaho. His interests include software engineering, object-oriented design, and anything remotely related to C or C++. He can be reached at 70324,3535 on Compuserve.</i></P><P>
By now we've all experienced it. In fact, hardly a week goes by when we don't at some point deal with an Interactive Voice Response (IVR) system. IVR systems are those that allow us to determine our bank account balances, confirm airline reservations, order retail merchandise or request product information from companies solely by using our telephone keypads. It may come as a surprise to many programmers that a great deal of these IVR systems are being run by standard MS-DOS machines equipped with add-on cards.<P>
Despite the power inherent in these applications, programming them can be made quite simple given the proper basic framework. Because one of the basic requirements of an IVR system is that it handle multiple incoming phone lines, the code presented here will be of interest to anyone who could make use of a multitasking state machine in C++.<P>
<h4><FONT COLOR="#000080"><A name="0117_0089">Necessary Hardware<A name="0117_0089"></FONT></h4></P>
In order to set up an IVR system, you will need two pieces of special hardware &#151; an add-on card to interface with an incoming telephone line, and a record adapter. The record adapter is a small box that connects in-line between your speech card and your telephone. It allows you to simulate an incoming call. You could program a system without the record adapter by actually calling into your system over the local phone lines. This is not only inconvenient, however, it also reduces the quality of your recordings because of the inherent line noise.<P>
Voice cards are available from a variety of manufacturers, ranging from Talking Technologies' BigMouth on the low end to Dialogic on the upper end. Because of their superiority of features and applicability to multi-line systems, the example developed in this article uses the Dialogic cards. However, the basic concepts presented here are portable among most card manufacturers. The use of C++ allows for the encapsulation of any card-specific details.<P>
<h4><FONT COLOR="#000080"><A name="0117_008A">Basic Concepts<A name="0117_008A"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0117_008B">Channel Event Queue<A name="0117_008B"></FONT></h4></P>
The Dialogic speech cards maintain an internal queue of events which occur on all phone channels within the system. Events are signalled when certain multitasking functions of the hardware are completed. These functions include playing and recording messages, getting touch tone input from a caller, and performing outdialing operations. As these events occur, the speech card will store the information. It may then be retrieved through a call to the Dialogic library function <I>gtevtblk</I>.<P>
<h4><FONT COLOR="#000080"><A name="0117_008C">Read/Write Block<A name="0117_008C"></FONT></h4></P>
When messages are recorded or played on the speech cards, information is passed between the calling program and the speech card through a read/write block. This C structure is defined in the Dialogic library. It is used for passing information such as the file handle to use, the number of bytes read or written, and the maximum number of seconds of silence before cancelling a record.<P>
<h4><FONT COLOR="#000080"><A name="0117_008D">The Sample Application<A name="0117_008D"></FONT></h4></P>
Because our system will support multiple phone channels in a single machine, it will be important to maintain information about the current state of each channel. For example, channel 1 may be playing the "hello" message, while channel 2 is getting input from a caller, and channels 3 and 4 are idle. Maintaining this state information can most easily be accomplished by using state machines that control the flow through the system of the individual phone lines. A State Transition Diagram for this program is shown in <A href="fig1.htm">Figure 1</a>.
<P>
As you can see, this example program involves ten states with all phone channels beginning in the <I>Wait For Ring</I> state. After a ring is detected, the channel will transition to the <I>Offhook</I> state &#151; this is the computer's equivalent of lifting the receiver. If that operation is successful, it will be followed by the <I>Hello</I> state. If the offhook operation is not successful, the channel will be placed back onhook and return to <I>Wait For Ring</I>. At the <I>Hello</I> state, a simple message informing the user that he has reached our IVR system is played.<P>
In the <I>Get Digits</I> state, the user is asked to press 11 to hear a message about current products, to press 22 to record a message, or to press 33 to hear the most recently recorded message. After either playing or recording the desired message, the channel progresses to the <I>Goodbye</I> state. At this time a "Thank you for calling message" is played and the channel is placed back on hook and into the <I>Wait For Ring</I> state.<P>
<h4><FONT COLOR="#000080"><A name="0117_008E">Multitasking with State Machines<A name="0117_008E"></FONT></h4></P>
Two steps will be involved in achieving the level of mulitasking necessary in creating our IVR application. The first step will be to partition each state into two functions which will begin and end the state. The second step will be to write a main processing function which will repeatedly check on the status of each channel.<P>
States are broken into "begin" and "end" functions so that state transitions can be separated from state processing. For example, in the <I>Offhook</I> state's begin function, the Dialogic card is instructed to take the line offhook. The <I>Offhook</I> state's end function is called the next time a Dialogic event is received for that line. The end function will control the state transition by moving the line to either the <I>Hello</I> or the <I>Onhook</I> state based on whether the current <I>Offhook</I> attempt was successful.<P>
<h4><FONT COLOR="#000080"><A name="0117_008F">The <B><I>CHANNEL</I></B> Class<A name="0117_008F"></FONT></h4></P>
The only class necessary for a simple IVR application will be <I>CHANNEL</I>. It contains all information specific to a given phone line. Defining just the data members of the <I>CHANNEL</I> class gives the following:<P>
<pre>class CHANNEL {
private:
   int lineno;
   char msgname;
   char digits [MAXDIGITS+1];
   RWB rwb;
   int (CHANNEL::*begin_func) ();
   void (CHANNEL::*end_func) (int evtcode);
};</pre>
Each instantiation of the <I>CHANNEL</I> class contains a character array to hold the name of any speech file currently being played. It also contains a second array which will hold digits that are entered on the caller's phone keypad. The <I>lineno</I> member stores the channel number and the <I>rwb</I> member is the channel's read/write block.<P>
The most interesting parts of the <I>CHANNEL</I> class are the two function pointers, <I>begin_func</I> and <I>end_func</I>. These two function pointers are the means for initializing and terminating each state. Each state will consist of two functions, each of which will be pointed to by one of these class members. Because the function pointers are declared as private, we will need to add public member functions to our class to access these function pointers:<P>
<pre>public:
   int begin_state();
   void cmplt_state(int evtcode);</pre>
The biggest advantage of accessing our begin and end function pointers through separate class members is not the extra level of abstraction but the ability to hide one of C++'s stranger syntactical features. The <I>begin_state</I> function is written as follows:<P>
<pre>typedef int (CHANNEL::*INTPROC)();

int CHANNEL::begin_state()
{
   INTPROC fp = this-&gt;begin_func;
   return (this-&gt;*fp) ();
}</pre>
This code sets a pointer to a function which is itself a member of the <I>CHANNEL</I> class. This function is then executed through the implicit <I>this</I> object. Because this aspect of C++ takes some getting used to, it is beneficial to hide it in a separate member function. Similar pains are taken with the end function, as can be seen in <A href="list2.htm">Listing 2</a>.
<P>
<h4><FONT COLOR="#000080"><A name="0117_0090">Member State Functions<A name="0117_0090"></FONT></h4></P>
Once designed, the actual implementation of the individual begin and end functions is almost trivial. All code for processing the states used in this sample application is contained in <A href="list3.htm">Listing 3</a>.
 For example, consider the <I>Offhook</I> state, which consists of <I>offhook</I> and <I>offhook_cmplt</I>.<P>
<pre>int CHANNEL::offhook()
{
   return(sethook(lineno, H_OFFH));
}

void CHANNEL::offhook_cmplt(int evtcode)
{
   if (evtcode == T_OFFH) {
      begin_func = CHANNEL::hello;
      end_func = CHANNEL::hello_cmplt;
}
   else { // otherwise go back on hook
      begin_func = CHANNEL::onhk;
      end_func = CHANNEL::onhk_cmplt;
   }
}</pre>
The begin function, <I>CHANNEL::offhook</I>, simply instructs the Dialogic hardware to set the status of the line to offhook. Because this task cannot be performed instantly, the hardware will at some point signal an event for this line. At that point in time the end function, <I>CHANNEL::offhook_cmplt</I>, will be called and passed the event code. If that event code represents a successful offhook operation the state function pointers will be set to the <I>Hello</I> state.<P>
<h4><FONT COLOR="#000080"><A name="0117_0091">Playing Messages<A name="0117_0091"></FONT></h4></P>
Probably the most fundamental concept in any IVR application is playing messages. Because a typical IVR application may play hundreds or even thousands of different messages, the actual implementation of playing a message has been hidden a level lower. States that play messages do not need to do anything other than store the name of the file to play. For example, the <I>Goodbye</I> state is written as:<P>
<pre>int CHANNEL::goodbye()
{
   strcpy(msgname, "goodbye");
   return play();
}

void CHANNEL::goodbye_cmplt(int evtcode)
{
   close(rwb.filehndl);
   begin_func = CHANNEL::onhk;
   end_func = CHANNEL::onhk_cmplt;
}</pre>
It is in the <I>play</I> function, which is called by <I>CHANNEL::goodbye</I> that the true play begins. <I>CHANNEL: :play</I>, shown in <A href="list2.htm">Listing 2</a>,
 creates the full name of the speech file to play. A handle to this file is stored in the channel's read/write block. Also stored in the read/write block is information instructing the hardware to terminate the play if the user presses a touch tone or if a loop signal is detected. A loop signal is essentially a change in the current on the line. This frequently indicates that a caller has hung up. The play is initiated through the call to <I>xplayf</I>, which is in the Dialogic library.<P>
<h4><FONT COLOR="#000080"><A name="0117_0092">Gathering Touch Tones<A name="0117_0092"></FONT></h4></P>
The ability to gather and process touch tones from a caller is what distinguishes an IVR application from a glorified answering machine. Touch tones gathered by our demo application will be stored in the <I>digits</I> element of the <I>CHANNEL</I> class. The first step in gathering digits is to clear the channel's read/write block by using the Dialogic library function <I>clrrwb.</I> Next, a pointer to the location of the character array used for storing digits is set in the read/write block. Finally, options for the number of touch tone digits to get, the maximum number of seconds to allow for input, and whether to terminate on loop signal are set.<P>
Because touch tone input is stored in the <I>CHANNEL</I> class as a null-terminated string, it is possible to perform standard string manipulation functions with it. In the <I>get_digits_cmplt</I> function in our example, a simple menu is created by performing a series of string comparisons. Based on the results of the string comparison, the application can then progress to the <I>Product_info, Playback</I>, or <I>Rec_msg</I> states.<P>
<h4><FONT COLOR="#000080"><A name="0117_0093">Recording a Message<A name="0117_0093"></FONT></h4></P>
Some IVR applications can be quite functional without allowing callers to record messages. For example, many vendors now have technical support hotlines that play back answers to frequently asked questions. But it is certainly an easy and valuable feature to implement. As shown in <I>CHANNEL::rec_msg</I> in <A href="list3.htm">Listing 3</a>,
 the steps involved are to clear the channel's read/write block and then get a handle to the file into which you want to record the caller's message. In this application, all caller recordings will be stored in <I>OUTPUT. VOX</I>. After opening the file, a number of options are set in the read/write block. These control the maximum recording length, which digits will terminate the recording, the amount of silence before timing out, whether to terminate on a loop signal, and the duration of the beep used to notify the caller to begin speaking. The actual record process then begins with a call to the <I>recfile</I> function in the Dialogic library.<P>
All that is necessary in the end function for recording a message is to close the open file handle and clear the channel of any digits that the caller may have pressed. If the channel is not cleared of these digits, they will still be waiting the next time the Dialogic card is called.<P>
<h4><FONT COLOR="#000080"><A name="0117_0094">Demonstration Program<A name="0117_0094"></FONT></h4></P>
The demonstration program presented here implements the features of playing messages, recording messages, and gathering and acting upon touch tone input from a caller. It is thus a good foundation for building more useful applications. It can easily be enhanced so that callers can be presented a list of topics and then hear a message about each topic. Similarly, the system could be enhanced by removing the limitation that allows only a single user-recorded message. Instead of always recording to the filename <I>OUTPUT. VOX</I>, the system could record to a filename based on the value of an integer that is incremented each time a record is requested.<P>
<h4><FONT COLOR="#000080"><A name="0117_0095">Practical Applications of IVR<A name="0117_0095"></FONT></h4></P>
One of the most basic applications you can create using the foundation presented here is the "Automated Attendant." This is the computerized receptionist that can be programmed to answer your regular phone lines. Automated attendant systems can be full-time systems that route calls through your regular phone systems (including PBXs). They can also be off-hours systems that can present callers with a menu of likely options. ("Press 1 to leave a message for Customer Service, press 2 to leave a message for Marketing.") Systems such as these are extremely useful at playing back any standard set of information a user may request. ("Press 1 for upgrade information, press 2 for a list of new features.")<P>
Many companies have made use of IVR technology to provide order hotlines through which customers may track the progress of their orders. Others have used IVR to automate order processing, especially for customers upgrading to a new software version. Such systems can use the caller's serial number to determine the caller's name and address, and can then request a credit card number. Credit card validation can be accomplished by dialing out on a different line to a credit validation company.<P>
One of the most exciting prospects for the use of IVR to arise over the past few years has been "Demand Publishing." This is the integration of an IVR system with one or more fax cards installed in the same machine. The caller can instruct the system to fax him company information or product literature. Most of the large software resellers have added systems like this over the past year. This allows you to call them and by pressing product access codes be instantly faxed back information on available products.<P>
I have shown how easy it can be to create IVR applications using C++. But there may be even easier methods based on your needs. There are now commercial products available that serve as Fourth-Generation Languages for creating voice applications. Naturally, there will be a tradeoff between flexibility and development effort when using one of these 4GL products. However, in most cases the saved development time is worth it.<P>
<h4><a href="list1.htm">Listing 1</a></h4>
<h4><a href="list4.htm">Listing 4</a></h4>

<h4><a href="../../../source/1992/jun92/cohn.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
