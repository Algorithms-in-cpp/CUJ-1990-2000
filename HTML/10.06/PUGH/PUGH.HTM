


<HTML>
<HEAD>

<TITLE>June 1992/Questions & Answers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjun.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Questions &amp; Answers<A name="0127_0090"><A name="0127_0090"></font></h2><P>
<h3 align="center"><A name="0127_0000"><A name="0127_0000">Initializing Arrays</h3><P>
<h3 align="center"><font color="#800000">Ken Pugh</font></h3><hr><blockquote><P>
<P><i><A name="0127_0000"><A name="0127_0000">Kenneth Pugh, a principal in Pugh-Killeen Associates, teaches C language courses for corporations. He is the author of C Language for Programmers and All On C, and was a member on the ANSI C committee. He also does custom C programming for<I></I> <I></I>communications, graphics, image databases, and hypertext. His address is 4201 University Dr., Suite 102, Durham, NC 27707. You may fax<I></I> <I></I>questions for Ken to (919) 489-5239. Ken also receives email at kpugh@dukemvs.ac.duke.edu<I></I> <I></I>(Internet).</i></P><P>
<B>Q</B><P>
I have been a subscriber of <I>The C Users Journal</I> for a few months. I like the magazine, and of course your "Question and Answer" columns. I would like to submit to you a little programming question.<P>
Presently I am working with some C modules containing array definitions and initializations like these:<P>
<pre>#define N 2
static int num [N] = { 1, 2 };
static char * nam[N] = { "first", "second" };
int fun1(int);
int fun2(int);
static int (* fun[N]) (int) = { fun1, fun2  };</pre>
The modules have to be customized frequently, varying the value of <I>N</I>, and the initializations. Each time I must guarantee that all the elements of the arrays have been initialized (to non-zero values). For example, if <I>N</I> is changed from 2 to 3, I have to guarantee that a new element has been added to the initialization of <I>fun</I>. One of the reasons for this is that in my modules <I>fun[N-1]</I> will be called without checks.<P>
Of course, it is easy (and desirable) to introduce some runtime checks, but I am also looking for a way to check at compile time if my arrays have been completely initialized or not. (This will be more useful than runtime checks).<P>
I tried the following solution<P>
<pre>static int num[] = {1, 2 };
#if sizeof(num) != N * sizeof(num[0])
#error wrong number of initializers for num
#endif</pre>
But this solution is not accepted by Standard C because the use of the <I>sizeof</I> operator within <I>#if</I> is explicitly prohibited. I found that some compilers accept this construction, but most generate an error.<P>
I tried this second way<P>
<pre>static int num[] = { 1, 2 };
int num[N];</pre>
If the number of initializers for <I>num</I> is different from <I>N</I> an error is produced by the compiler (something like "redefinition of num"), while if the number is exactly <I>N</I> then the duplicate declaration of <I>num</I> is accepted. But this works only for global variables, for other variables the redefinition of <I>num</I> always produces an error.<P>
In my real case, many of the arrays I want to check are global, so this second solution works fine. My problem is really originated by the fact that I have many of these arrays and their declarations are scattered and interspersed with other declarations. I would like to know if the duplicate declaration is really Standard C, or not.<P>
But I also have some local variables: for these I did not find a clean solution to my problem. I found only some tricky solutions such as the following one.<P>
<pre>static int num[] = { 1, 2 };
int dummy[ sizeof(num)/sizeof(num[0]) == N ];</pre>
If the number of initializers for <I>num</I> is different from <I>N</I>, the number of elements of the array <I>dummy</I> evaluates to zero, so the compiler produces an error. But I do not like this solution (I was never serious about using it).<P>
I would be very grateful to you, if you will tell me your opinion about this question, although I understand that the problem is not so important.<P>
Bruno Fassino<br>
Torino, Italy<P>
<B>A</B><P>
The solution that you used for global variables appears to be ANSI standard. Section 3.5.4.2 states that two compatible arrays need the same size specifier, if it is present. Using an initialization list as an implicit size specifier would seem to count. So if the size specifiers were not the same, an error message should result (if the declarations are in the same source file).<P>
Your requirement for a compile-time error makes matters a slight bit more complicated. The <I>assert</I> macro would abort the program if the value of the expression passed to it was false. This would only occur at run time.<P>
<pre>assert( sizeof(num)/sizeof(num[0]) == N);</pre>
The <I>sizeof</I> is a compiler operator, rather than a preprocessor function, so your <I>#if</I> approach using <I>sizeof</I> is <I>not</I> ANSI standard.<P>
My standard approach when multiple data types must be coordinated is to use a structure, as in <A href="list1.htm">Listing 1</a>.
 This keeps all the initialization values for each group together on a single line, so it is easier to be sure that all have been initialized properly. You would make references to <I>group[i].num</I>, and so forth.<P>
I like your creative approach to the local variable problem. I cannot think of another way to create a compile time error. <I>[But it is also not Standard C</I> &#151; <I>pjp]</I> Perhaps one of our readers has an answer.<P>
<B>Q</B><P>
I'm writing to you because I'm baffled. I have just bought Turbo Assembler with the purpose of using inline assembly in my C programs. I typed in the <I>plusone.c</I> routine (<A href="list2.htm">Listing 2</a>)
 taken from the <I>Turbo Assembler User's Guide</I> and checked that the procedure<P>
<pre>tcc -S plusone.c
tcc plusone.asm</pre>
produces working code (though the <I>plusone.asm</I> looks a little bit different than <I>plusone.asm</I> on pp. 262-264 of the above mentioned manual), while the following sequence<P>
<pre>tcc -S plusone.c
tasm plusone.asm
tlink plusone</pre>
gives out something discouraging, and the resulting <I>plusone.exe</I> doesn't work!!! And the question is should I care about it or consider it a bug or what?<P>
Vladimir Laptev<br>
Los Angeles, CA<P>
<B>A</B><P>
It is not a bug. You simply failed to specify to <I>tlink</I> the additional files necessary to completely link the program &#151; the startup routine and the appropriate C library. The <I>tcc</I> program, like many other compilers, will automatically invoke the linker (<I>tlink</I>), unless otherwise requested. A compile-only or produce-assembly-output flag inhibits this invocation. When <I>tlink</I> is executed by <I>tcc</I>, it is passed two additional filenames. These are <I>CX.LIB</I> and <I>COX.OBJ</I>, where <I>X</I> is the memory model that you used for the compilation.<P>
The source for <I>COX.OBJ</I> is <I>CO.ASM</I>, which is in the Turbo C <I>.\EXAMPLES\STARTUP</I> directory. It may be educational to look at some of the setup it performs. You can modify it if you wish or substitute your own if you are operating on a system other than MS-DOS. Some of the comments have been pulled out and placed in <A href="fig1.htm">Figure 1</a>.
 It is in this startup routine that the stack segment is created.<P>
<B>Q</B><P>
I find increasingly that my C programs do not produce good output on newer printers, particularly laser printers. For example, the printer may ignore linefeeds or carriage returns or it does not produce the ordered characters. I suspect that, to use these printers, a printer driver has to be added to the program. If this is the case, this raises some questions, namely:<P>
1. Where can these drivers be obtained?<P>
2. How can they be incorporated into the program?<P>
3. Is it possible to obtain a preprogrammed file with printer drivers for the most used printers that can be linked into the program or, perhaps, be used as a header file?<P>
Possibly the unsatisfactory output is not caused by missing printer drivers. If so, what could be the cause?<P>
Thanking you in advance.<P>
Gerrit M. de Wit<br>
Boston, VA<P>
<B>A</B><P>
There are a couple of reasons why the laser printer may not be working the way you expect it to. First, the extended character set (character values greater than 127) that was supported on many dot-matrix printers is not supported by many laser printers. You may need to switch to a different font and use different character values to get the same result that you see on the screen. Second, if you are using a serial port to drive the laser printer, it may be set up for only seven bits. If so, the printer will not be getting the eighth bit.<P>
I have not come across a laser printer that ignores carriage return/line-feed combinations and form-feeds. All the printers I have experienced work with plain ASCII characters the same way. It's only when you are trying to do underlining or other "fancy stuff," that you run into a problem. The Slate package from the Symmetry Group may solve many of your problems. I haven't used it myself, but I've heard of people who have.<P>
<B>Q</B><P>
There must be a good reason (but I've never seen it) as to why there is no Standard C function for clearing a terminal screen. It seems absurd since every terminal has some way to do it and on something like a teletype it could be a line feed or a NOP.<P>
There's not even good agreement among compiler makers for the name or location of this function. I came up with the list shown in <A href="fig2.htm">Figure 2</a>
for a C class I was teaching.<P>
I would guess that a lot of programmers would be curious about the background on this matter if you would care to discuss it in your column.<P>
Bob Patton<br>
Arlington, TX<P>
<B>A</B><P>
Since C and UNIX are related in their creation, the C output functions regard all output as a simple stream of bytes. There is no conception of a terminal screen in the standard language library.<P>
The curses package on UNIX and available on several other systems comes closest to a standard way of controlling the terminal screen. The <I>clear</I> function clears the screen. It is essentially terminal-independent. It reads an environment variable that gives the terminal type and then reads a data-file for the appropriate commands for that type of terminal. Of course, the curses library also has provision for positioning the cursor on the screen, setting attributes (e.g. highlight) and other functions.<P>
If the curses library had been ported to the IBM-PC at the very beginning of its existence, then most of the compilers would have probably supported it. However, to my knowledge, it was several years later, so by then compiler manufacturers had come out with their own functions and put them in their own unique places.<P>
The <I>clrscr</I> routines that you listed usually call the BIOS (on IBM-PCs) to clear the the screen. These would be the least portable of all the methods. The ANSI method sends the ANSI escape sequence for clearing the screen to the terminal. If the terminal is an ANSI-compliant one (and most of them have such a mode), then the terminal will respond with the appropriate sequence. If <I>ANSI.SYS</I> is loaded on an IBM-PC, then it will also work on that machine. This would be the most portable.<P>
Note that this lack of uniformity extends to almost any function that makes a reference to MS-DOS. My approach to the problem has been to define my own set of functions, which then call the appropriate compiler functions. For example, I use a routine that looks like<P>
<pre>void clear_screen(void)
   {
   printf("\033 [2J");
   }</pre>
All my code use the <I>clear_screen</I> function. It then becomes a simple matter to alter to<P>
<pre>void clear_screen(void)
   {
   clrscr();
   }</pre>
or whatever may be required.<P>
<I>[X3J11 considered defining a set of screen-control functions, but rejected the idea in the end. At the time, we felt that we didn't know enough to choose a good set. I think we were wise not to try then. &#151; pjp]</I><P>
<h4><FONT COLOR="#000080"><A name="0127_0091">Readers' Replies<A name="0127_0091"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0127_0092">Conditional Expression Operators<A name="0127_0092"></FONT></h4></P>
I read your comments in <I>The C Users Journal</I> on the conditional expression operator, and I wanted to comment for us embedded-systems programmers (who are always concerned about space).<P>
The conditional operator uses less code space! Although many purists out there claim that compilers should take care of optimizations, this claim is idealistic and not realistic.<P>
One example is<P>
<pre>strcpy(to_string, (flag ? from_string true, from_string_false));</pre>
versus:<P>
<pre>if(flag)
   strcpy(to_string, from_string_true);
else
   strcpy(to_string, from_string_false);</pre>
where there are two calls to the <I>strcpy</I> function with pointers to the location of <I>to_string</I> being passed twice instead of just once.<P>
As your comments suggested, this is not always the best way to save space, and judgment by knowledge or trial and error should always be employed when attempting to write tight code.<P>
Stephan Warre<br>
Santa Cruz, CA<P>
I well agree with your suggestion to use the conditional operator to save space. There are two reasons for using everything that C has to offer &#151; space and time. To make a Z-80-based CP/M system (with a maximum of 64KB) work reasonably well without resorting to assembly language, using every trick in the book was necessary at some point in the code. Embedded systems with limited speed and memory size require the same care.<P>
With more recent systems, sufficient memory and speed is usually available to be able to write code in whatever style you desire. With the more complex user interfaces of today, what is gained in speed by making your code perfectly efficient may not be as noticeable. If half the execution time is spent in window functions which you do not control, then even if you cut your code-execution time by a factor of ten, you would only cut your total program time by about half.<P>
As a caveat, I am not suggesting that one simply ignore code optimization entirely in writing programs. If sloppy programming causes your execution time to increase by a factor of ten, then the total program time for a windowed program might increase about four and a half times. Using the proper algorithm is usually much more important than worrying about whether using two statements are slower than a single statement. (KP)<P>
<h4><FONT COLOR="#000080"><A name="0127_0093">Conditional Operator<A name="0127_0093"></FONT></h4></P>
Your Q&amp;A had a good discussion of the ternary operator. I tend to shy away from casual use of it in ordinary code, but there is one place where it really pays its way &#151; in macros. Typically, when you're making a macro, you need something that is an <I>expression</I>, not a <I>statement</I>. And that's where the ternary operator shines. For a trivial example<P>
<pre>#define SAFESTRING(s) ( (s != NULL) ? s : "Error: Unsafe string")</pre>
You can certainly do a<P>
<pre>printf ("%s:n",SAFESTRING (s));</pre>
but try to accomplish the same thing with <I>if/then</I> and you're at a dead end. Note that in this case we're using the ternary operator to simplify program structure through a macro, <I>not</I> displaying it all over the code. If written correctly and properly protected, no maintainer should have to figure out the logic.<P>
Thanks for the great column!<P>
Randy Fay<br>
Evolving Systems, Inc.<P>
Hiding a conditional operator in a macro is perfectly fine by me. It is practically the same as hiding the details of a function. Your example macro could have been coded as<P>
<pre>char *SAFESTRING(char *s)
   {
   char *ret;
   if (s == NULL)
      ret = "Error: Unsafe string";
   else
      ret = s;
   return ret;
}</pre>
Using a macro may save a bit of overhead in calling the function. (KP)<P>
<h4><FONT COLOR="#000080"><A name="0127_0094">Conditional operator<A name="0127_0094"></FONT></h4></P>
Instead of<P>
<pre>i = (7 &gt; 5 ? (10 &gt; 9 ? 4 : 7) : (3 &gt; 1 ? 6 : 2) ;</pre>
or<P>
<pre>if (7 &gt; 5)
   if (10 &gt; 9)
      i = 4 ;
   else
      i = 7 ;
else if (3 &gt; 1)
      i = 6 ;
   else
      i =2 ;</pre>
how about<P>
<pre>i = (7 &gt; 5 ? (10 &gt; 9 ? 4 : 7) : (3 &gt; 1 ? 6 : 2);</pre>
Not only is is it clearer than the first two, but you can then do interesting things on the left side of the "=" sign where the redundancy was removed that would look far more complex in the second form above. E.g.<P>
<pre>(4 &gt; 5 ? x[f(z)] : i) = (7 &gt; 5? (10 &gt; 9 ? 4 : 7) : (3 &gt; 1 ? 6 : 2) ;</pre>
The key issue is factoring vs. redundancy. The use of the <I>if</I> statement to simplify is largely a red herring since the main contribution was to graphically structure the conditional. As I have shown, this is trivial to accomplish with conditional expressions. On the other hand, comparing a conditional expression to a case statement is not quite fair since you are simply swapping one factoring (the <I>printf</I> statement) for another (the comparison). The correct solution would be a case expression which, of course, does not exist in C.<P>
Ed Ipser Solomon<br>
I agree with you that it is a partially a matter of redundancy versus factoring. I tend to stay with nested <I>if</I> logic, since that is the way that it would be done in most other languages.<P>
I prefer simple expressions &#151; as the advertisement goes, I'm a simple kind of guy. My rule of thumb is that an expression should fit on a single line (or two lines if you use long names). Anything longer should be broken up into multiple statements. This is just a guideline. It is not meant as an absolute rule. (KP)<P>
<h4><FONT COLOR="#000080"><A name="0127_0095"><I>void</I><B> * and </B><I>int</I><B> *<A name="0127_0095"></B></FONT></h4></P>
I was just reading your column in the November 1991 issue of <I>The C User Journal</I>, where you responded that you didn't know of any systems where <I>void</I> * pointers and <I>int</I> * pointers were different sizes. I develop software using C on an HP1000 system (this is Hewlett Packard's real-time system) and, while the two pointers are not different sizes, they do have different representations. An <I>int</I> * pointer points to a word address, and a <I>void</I> * pointer points to a byte address. So, while the pointers are not different sizes, I believe they still will not work with the <I>typedef</I> that you provide.<P>
Greg Long<br>
General Motors Research Laboratories<P>
On most all systems, <I>void</I> pointers can point to any address in the system &#151; in fact they are required by ANSI to have the same representation as a <I>char</I> pointer. Other pointers, such as <I>int</I> *, <I>double</I> *, need only be able to point to addresses that follow the alignment requirements of the processor. Under ANSI C, you could code without compiler error (but perhaps a warning)<P>
<pre>void * void_pointer;
int * int_pointer;
int * another_int_pointer;
char * char_pointer;
char * another_char_pointer;
char c;
char another_c;
int i;
int another_i;

char_pointer = &amp;c;
void_pointer = char_pointer;
int_pointer = void_pointer;</pre>
<I>int_pointer</I> will contain an invalid address for an <I>int</I> if the variable <I>c</I> were not stored on a word boundary. Everything is legal (although immoral) so far. If you tried to use the invalid address as in<P>
<pre>i = *int_pointer;</pre>
then the program may abort on a memory access violation. The ANSI rules state that a pointer to a particular type can be converted to a <I>void</I> pointer and back to the original type pointer without any problem. So you could code<P>
<pre>another_char_pointer = void_pointer;
another_c = *another_char_pointer;</pre>
You can also code in ANSI<P>
<pre>int_pointer = &amp;i;
void_pointer = int_pointer;
another_int_pointer = void_pointer;
another_i = *another_int_pointer;</pre>
If your HP system does not allow this, then it is not ANSI-compliant. The C standard section 3.2.2.3 states that "a pointer to any incomplete or object type may be converted to a pointer to <I>void</I> and back again; the result shall compare equal to the original pointer."<P>
This does not require that <I>void</I> and <I>int</I> pointers have the same representation. <I>void</I> pointers cannot be dereferenced, so their representation is immaterial. It simply means that conversion to a <I>void</I> pointer and back again does not eliminate any of the bits in the address. (KP)<P>

<h4><a href="../../../source/1992/jun92/pugh.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
