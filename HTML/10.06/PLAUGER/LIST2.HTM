<HTML><HEAD>
<TITLE>June 1992/Standard C/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2</A></h4>
<pre>/* malloc function */
#include "xalloc.h"
#include "yfuns.h"

              /* static data */
_Altab _Aldata = {0};    /* heap initially empty */

static _Cell **findmem(size_t size)
       {       /* find storage */
       _Cell *q, **qb;
       
       for (; ; )
              {       /* check freed space first */
              if ((qb = _Aldata._Plast) == NULL)
                     {       /* take it from the top */
                     for (qb = &amp;_Aldata._Head; *qb;
                            qb = &amp;(*qb)-&gt;_Next)
                            if (size &lt;= (*qb)-&gt;_Size)
                                   return (qb);
                     }
              else
                     {       /* resume where we left off */
                     for (; *qb; qb = &amp;(*qb)-&gt;_Next)
                            if (size &lt;= (*qb)-&gt;_Size)
                                   return (qb);
                     q = *_Aldata _Plast;
                     for (qb = &amp;_Aldata._Head; *qb != q;
                            qb = &amp;(*qb)-&gt;_Next)
                            if (size &lt;= (*qb)-&gt;_Size)
                                   return (qb);
                     }
              {       /* try to buy more space */
              size_t bs;
              const size_t sz = size + CELL_OFF;
              
              for (bs = SIZE_BLOCK; ; bs &gt;&gt;= 1)
                     {       /* try larger blocks first */
                     if (bs &lt; sz)
                            bs = sz;
                     if ((q = (_Cell *)_Getmem(bs)) != NULL)
                            break;
                     else if (bs == sz)
                            return (NULL);  /* no storage */
                     }
              /* got storage: add to heap and retry */
              q-&gt;_Size = (bs &amp; ~ MEMBND) - CELL_OFF;
              free((char *)q + CELL_OFF);
              }
              }
       }

void *(malloc)(size_t size)
       {       /* allocate a data object on the heap */
       _Cell *q, **qb;
       
       if (size &lt; SIZE_CELL)  /* round up size */
              size = SIZE CELL;
       size = (size +_MEMBND) &amp; ~ _MEMBND;
       if ((qb = findmem(size)) == NULL)
              return (NULL);
       q = *qb;
       if (q-&gt;_Size &lt; size + CELL _OFF + SIZE_CELL)
              * qb= q-&gt;_Next;         /* use entire cell */
       else
              {       /* peel off a residual cell */
              * qb= (_Cell *)((char *)q
                     + CELL_OFF + size);
              (*qb)-&gt;_Next = q-&gt;_Next;
              (*qb)-&gt;_Size = q-&gt;_Size - CELL_OFF - size;
              q-&gt;_Size = size;
              }
       _Aldata._Plast = qb;    /* resume here */
       return ((char *)q + CELL_OFF);
       }

/* End of File */
</pre>
</BODY>
</HTML>
