


<HTML>
<HEAD>

<TITLE>June 1992/Doctor C's Pointers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjun.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Doctor C's Pointers&reg;<A name="012B_0094"><A name="012B_0094"></font></h2><P>
<h3 align="center"><A name="012B_0000"><A name="012B_0000">Data Structures, Part 13: Queues (continued)</h3><P>
<h3 align="center"><font color="#800000">Rex Jaeschke</font></h3><hr><blockquote><P>
<P><i><A name="012B_0000"><A name="012B_0000">Rex Jaeschke is an independent computer consultant, seminar leader, and author of several books, including The Dictionary of Standard C (Professional Press, Horsham, PA). Readers are encouraged to submit column topics and suggestions to Rex at 2051 Swans Neck Way, Reston, VA, 22091 or via UUCP at rex@aussie.com.</i></P><P>
Last month we introduced queues and showed how they can be represented in arrays. This month we'll see how they can be implemented in a linked list.<P>
<h4><FONT COLOR="#000080"><A name="012B_0095">Representing Queues Using Linked Lists<A name="012B_0095"></FONT></h4></P>
Arrays are inherently restrictive in that they have a fixed size. And short of using (the potentially expensive) realloc to keep extending a dynamically allocated array, you must live with this limitation.<P>
This restriction can be removed by using a linked list instead. By allowing the nodes to be noncontiguous, we can allocate and free memory at runtime to handle addition and removal of nodes. In <A href="list1.htm">Listing 1</a>,
 space for nodes is never actually freed; instead, it's added to a free node list for later use. As such, new memory is only allocated when the free list pool is completely used. The queue size then is only limited by available memory at runtime. Note that in this solution, the strings are not actually stored in the node but are also allocated dynamically.<P>
Using a linked list avoids the need to have a circular queue altogether; we simply keep adding to the tail of the list and removing from the front. There is no fixed array size to work around.<P>
The dump node option featured last month is missing since there is no fixed-size queue behind the scenes. The remove node function now actually returns the string being removed although the caller doesn't use it apart from displaying it.<P>
<A href="list1.htm">Listing 1</a>
contains the code. An example of some output appears in <A href="fig1.htm">Figure 1</a>.
<P>
<h4><FONT COLOR="#000080"><A name="012B_0096">An Issue Concerning <B><I>scanf</I><A name="012B_0096"></B></FONT></h4></P>
For the most part, the program in <A href="list1.htm">Listing 1</a>
(and the one in last month's installment) operates independent of the value of <I>MAX_LEN</I>; if the macro changes, the program changes with it. However, this is not quite complete. Note the call to <I>scanf</I>.<P>
<pre>scanf("%10s", queue[tail_node]);</pre>
Despite the use of <I>MAX_LEN</I>, the maximum length for the input is hard-coded in the edit mask string. Now if this were <I>printf</I>, the solution would be easy<P>
<pre>printf("%*s", size, string);</pre>
The <I>printf</I> family has a wild-card mechanism to allow the field width (and precision) to be specified at runtime. And while the scanf family also allows a "*" in edit masks, this, unfortunately, has a completely different meaning; it is used to suppress input conversion.<P>
The only way to provide the same flexibility using <I>scanf</I>, is to construct the edit mask from the individual parts. There are two ways to do this. The first involves using <I>sprintf</I> to create the edit mask at runtime (<A href="list2.htm">Listing 2</a>)
.<P>
Another approach is to construct the edit mask string using the <I>stringize</I> preprocessor operator invented by ANSI C (<A href="list3.htm">Listing 3</a>)
.<P>
Once the preprocessor has run, the call to <I>scanf</I> looks like the following:<P>
<pre>scanf("%" "10" "s" , str);</pre>
and the three adjacent string literals are concatenated by the compiler and treated as if you had written <I>%10s</I> directly.<P>
<h4><FONT COLOR="#000080"><A name="012B_0097">Double-Ended Queues<A name="012B_0097"></FONT></h4></P>
For certain applications, a special kind of queue can be useful. It is called a double-end queue and is often abbreviated to deque (pronounced the same as <I>deck</I>). In such a queue, you can add and remove from either end. If, however, you can only add to one end but can remove from both, it is known as an <I>input-restricted queue</I>. Similarly, if you can add to either end but only remove from one end it is called an <I>output-restricted queue</I>.<P>

<h4><a href="../../../source/1992/jun92/jaeschke.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
