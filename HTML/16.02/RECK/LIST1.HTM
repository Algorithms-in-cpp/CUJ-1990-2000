


<HTML><HEAD>

<TITLE>February 1998/Thread Synchronization with Reference-Counting Handles/Listing 1</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4>
<A name="HEADING1">Listing 1: The basic Handle template</A></h4>


<pre>
// Copyright (c) 1997 by Bill Reck &lt;breck@magna.com.au&gt;
// This code may be used royalty-free as long as
// this notice appears in the product.

class null_rep {}; // Exception class used below

template &lt;class REP, class ACCESS = REP*&gt;
class Handle {
public:
    Handle(REP *rep = 0)
    : rep_(rep) {  // Claim a reference
        if ( rep_ != 0 ) rep_-&gt;incrRefCount();
    }
    Handle(const Handle&lt;REP, ACCESS&gt; &amp;that)
    : rep_(that.rep_) { // Claim a reference
        if ( rep_ != 0 ) rep_-&gt;incrRefCount();
    }
    ~Handle() { // Release a reference
        if ( rep_ != 0 ) rep_-&gt;decrRefCount();
    }
    const Handle&lt;REP, ACCESS&gt; &amp;operator = (
        const Handle&lt;REP, ACCESS&gt; &amp;rhs) {
        // Claim a reference to the RHS and
        // release the old LHS reference
        REP *oldRep = rep_;
        rep_ = rhs.rep_;
        if ( rep_ != 0 ) rep_-&gt;incrRefCount();
        if ( oldRep != 0 ) oldRep-&gt;decrRefCount();
        return(*this);
    }
    ACCESS operator-&gt;() const {
        if ( rep_ == 0 ) throw null_rep();
        return(rep_); // Construct an ACCESS object
    }
    bool isNull() const { return(rep_ == 0); }
private:
    REP *rep_;
};
//End of File
</pre>
</body></html>
