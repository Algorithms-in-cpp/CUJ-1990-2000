





<HTML>
     
     <HEAD>

<TITLE>February 1998/Standard C/C++</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<H2><A href="../tocfeb.htm"><IMG src="../../toc.gif" ALT="Back to TOC" WIDTH="54" HEIGHT="54"></A>
<FONT COLOR="#FF0000">Columns</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Standard C/C++: The Facet num_get</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">P. J. Plauger</FONT></H3>
<blockquote>
<p>Parsing numeric input has always been a messy affair. Standard C++ locales add culture
dependence to the mix as well.</p></blockquote><hr>

<blockquote>

<H4><FONT COLOR=#000080>Prolog</FONT></H4>

<p>Well, the C++ Standard is finally on its way. Barring any unpleasant administrative
surprises, we should now know what Standard C++ will look like for the next
half decade or so. You can read the details elsewhere in this issue. (See Pete
Becker's column.) I celebrate the change in this column by a small but
significant alteration in style. Instead of calling it the draft C++ Standard,
I will henceforth refer to the language definition as the C++ Standard. May it
live long and prosper.</p>

<H4><FONT COLOR=#000080>Introduction</FONT></H4>

<p>Last
month, I described the thoroughly modern way to convert numeric values within a
C++ program to human-readable text. (See "Standard C/C++: The Facets num_put
and numpunct," CUJ, January 1998.) This is the magic that gets invoked when
you insert, say, a value n of type short into the standard output stream cout,
as in:</p>

<pre>
cout &lt;&lt; n;
</pre>
<p>The expression statement calls the function:</p>

<pre>
ostream::operator&lt;&lt;(ostream&amp;, short)
</pre>

<p>where the type ostream is now a synonym for the template specialization:</p>

<pre>
basic_ostream&lt;char,
    char_traits&lt;char&gt; &gt;
</pre>

<p>Text is inserted into the stream buffer associated with cout by an output iterator
OutIt of type:</p>

<pre>
ostreambuf_iterator&lt;char,
    char_traits&lt;char&gt; &gt;
</pre>

<p>The actual conversion to text occurs within the member function put in a locale
facet of type:</p>

<pre>
num_put&lt;char, OutIt&gt;
</pre>

<p>All this machinery is a far cry from the early days of C++. The first
implementations of iostreams basically just called printf, or perhaps sprintf,
like any good C programmer would do. Indeed, the behavior of the put functions
in num_put is defined in terms of equivalent printf calls. Inserters supply
pretty notation, and better type checking than in C, but they encapsulate much
the same simple functionality of yore. (And as I observed last month,
num_put&lt;char, Iter&gt;::put typically relies on sprintf to do the actual
conversion.)<p>
As you might expect, the reverse process has been blessed with equally modern
machinery in the Standard C++ library. To extract a text field from the
standard input stream cin and convert it to a numeric value n of type short,
you can write:</p>

<pre>
cin &gt;&gt; n;
</pre>

<p>The expression statement calls the function:</p>

<pre>
istream::operator&gt;&gt;(istream&amp;, short&amp;)
</pre>

<p>where the type istream is now a synonym for the template specialization:</p>

<pre>
basic_istream&lt;char,
    char_traits&lt;char&gt; &gt;
</pre>

<p>Text is extracted from the stream buffer associated with cin by an input iterator
InIt of type:</p>

<pre>
istreambuf_iterator&lt;char,
    char_traits&lt;char&gt; &gt;
</pre>
<p>The actual conversion to text occurs within the member function get in a locale
facet of type:</p>

<pre>
num_get&lt;char, InIt&gt;
</pre>
<p>The analogous machinery in C is the function scanf and its brethren. Indeed, the
behavior of the get functions in num_get is defined in terms of equivalent
scanf calls. Extractors, like inserters, supply pretty notation, and better
type checking than in C, but they too encapsulate much the same simple
functionality.<p>
Here is where the parallelism breaks down. The function printf is reasonably
well designed and has been used widely for decades. But the function scanf is
much less successful. The C Standards committee haggled over its details for
quite some time. Eventually, we concluded that the function is of limited
usefulness. Programmers simply have too many conflicting needs for parsing text
fields and handling error conditions to be satisfied by one all-purpose
scanning function.<p>
The C++ Standard can, should, and does look to scanf for a precise definition
of acceptable input fields. But an implementation of the Standard C++ library
should not necessarily endeavor to turn each extractor call into an actual call
on scanf or one of its variants. Put simply, the work you have to do to set up
for a call to scanf isn't worth the benefit. Better to call directly the
underlying functions that scanf might call, such as strtol or strtod.</p>

<H4><FONT COLOR=#000080>Template Class num_get</FONT></H4>

<p>My goal this month is to describe template class num_get, as part of my ongoing
tour of the locale facets defined in the Standard C++ library. You'll have to
go back a few months to read an overview of facets in general. (See "Standard
C/C++: Introduction to Locales," CUJ, October 1997.) All I'll say here is that
num_get encapsulates all the logic for converting a text field to a numeric
value &#151; Boolean, integer, floating-point, or void pointer value. Every locale
object contains references to two locale num_get facets, with types:</p>

<pre>
num_get&lt;char,
    istreambuf_iterator&lt;char,
        char_traits&lt;char&gt; &gt;&gt;
num_get&lt;wchar_t,
    istreambuf_iterator&lt;wchar_t,
        char_traits&lt;wchar_t&gt; &gt;&gt;
</pre>
<p>Numeric-conversion logic can in principle depend on culture-specific rules. Indeed, each of the
num_get facets relies on its corresponding numpunct facet, just as the num_put
facets do, for various interesting bits of information. (See last month's
column.) The numpunct member function decimal_point, for example, may return a
comma in a European locale. The num_get member function get thus knows to treat
a comma as a decimal point when reading a floating-point text field.<p>
<A href="list1.htm">Listing 1</a>
shows one way to implement the extractor for a short integer. It
illustrates in detail how the facet num_get is used in real life. In brief:</p>
<UL><LI>The member function ios_base::getloc obtains a copy of the locale object
        "imbued" into the object of class basic_istreambuf&lt;_E, _Tr&gt;.</LI>
    <LI>The template function use_facet&lt;_Nget&gt; obtains from its locale object
        argument a const reference to the facet _Nget (a typedef for num_get&lt;_E,
        _Iter&gt; here), which should always be present.</LI>
    <LI>The facet reference _Fac can be used to call any of several versions of
        _Fac.get to extract a field (sequence of elements) from the input stream and
        convert it.<LI>
    <LI>_Fac.get extracts elements from the stream buffer (obtained by calling
        _Myios::rdbuf()) using an input iterator of type _Iter (a typedef for
        istreambuf_iterator&lt;_E, _Tr&gt;) to assemble the input field.</LI>
    <LI>_Fac.get obtains stored formatting information from the object of class
        basic_istream&lt;_E, _Tr&gt;(*this).</LI>
    <LI>_Fac.get stores the converted field value in the object _Y (of type long in
        this case). It can also throw an exception if anything goes wrong along the
        way.</LI>
    <LI>The extractor ensures that the converted value can be properly represented
        in a short integer, then stores the converted value.</LI>
</UL>
<p>The facet is thus responsible for parsing the input and doing the
conversion. It doesn't define an overload of get for type short because the one
for long can do the job, with a little help from the extractor.<p>
<A href="list2.htm">Listing 2</a>
shows one way to implement (most of) template class num_get. As with
earlier facets, I choose to omit most of the implementation-specific magic
code. It's a distraction. Most of the interesting action occurs in the
overloads for do_get. These protected virtual member functions deal with the
quite different parsing requirements of bool, integer values, floating-point,
and void pointer values.<p>
A few hints to minimize distractions:</p>
<UL><LI>The macro _NARROW converts a member of the element type to type char. If
        the character code is not a member of the basic C character set, the function
        returns zero (a null character).</LI>
    <LI>The macro _WIDEN converts a member of the basic C character set, as type
        char, to the element type. Typically, this involves little or no work.</LI>
    <LI>The macros _MAX_INT_DIGIT, _MAX_EXP_DIGIT, and _MAX_SIG_DIGIT are ones I've
        used for years to specify the number of characters (elements) needed to
        represent the largest possible integer and floating-point values.</LI>
    <LI>The private member function _Getifld parses an integer input field. It must
        also check for "thousands separators," such as the commas widely used to
        separate groups of three digits. If any separators are present, then the field
        must obey the grouping rules spelled out in the numpunct facet. The resulting
        logic can charitably be described as interesting.</LI>
    <LI>The private member function _Getffld parses a floating-point input field.</p>
</UL>
<p>Note that the code in <A href="list2.htm">Listing 2</a>
doesn't do the actual conversion from an
integer or floating-point text field to an internal encoding. Integers are
converted by calling the Standard C library functions strtol or strtoul. Void
pointers are converted much the same way, except that the code provides a way
to represent pointers with more bits than an unsigned long.<p>
Floating-point values are converted by calling the special functions _Stof,
_Stod, or _Stold. These behave much like the Standard C library function stod
except that they also accept a power-of-ten scaling factor. A careful
implementation of these special functions can more easily and portably handle
values too large to represent. (For more detail, see my book, The Draft
Standard C++ Library, Prentice-Hall, 1995.)</p>

<H4><FONT COLOR=#000080>Conclusion</FONT></H4>

<p>You now have a nodding acquaintance with the facets num_get, num_put, and numpunct.
The questions is, why should you care? You might conceivably want to write your
own locale-dependent numeric converters. But you can probably do a serviceable
job using the iostreams facilities in &lt;sstream&gt; or &lt;strstream&gt;.
Both are rather easier to use than the raw facet facilities.<p>
More likely, you might want to write your own version of one of these facets.
In that case, it helps to know what they do. Nevertheless, your best bet is to
derive a subclass from one of these template classes. That way, you can simply
override the virtual do_get functions you want to muck with. Leave the others
alone. Even better, call on the unmodified member functions to do all the hard
work.<p>
Locale facets are pretty powerful, but then so is my VCR. I avoid messing with
the programming of either as much as possible. o
</p>
<p><i>P.J. Plauger is Senior Editor of C/C++ Users Journal and President of
Dinkumware, Ltd. He is the author of the Standard C++ Library shipped with
Microsoft's Visual C++, v5.0. For eight years, he served as convener of the ISO
C standards committee, WG14. He remains active on the C++ committee, J16. His
latest books are The Draft Standard C++ Library, Programming on Purpose (three
volumes), and Standard C (with Jim Brodie), all published by Prentice-Hall. You
can reach him at pjp@plauger.com.
</i></p>

<h4><a href="../../../source/1998/feb98/plauger.zip">Get Article Source Code</a></h4>

</blockquote>
</body></html>
