<HTML><HEAD>
<TITLE>April 2000/Views, A New Form of Container Adaptors/Figure 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Figure 3: Finding the minimum default iterator tag category</A></h4>
<pre>
//
// Combine traits computing the common denominator of two types.
// This works via a mapping to integers, taking the minimum, 
// and mapping back to corresponding types.
//

// Compute the minimum of two integers at compile time.
template&lt;int a, int b&gt; 
struct min_traits 
{ enum { x = a &lt; b ? a: b }; };

// Given two types and priority mappings to and from integers,
// compute the lower type.
template &lt;class A, class B, template&lt;class T&gt; class map,
          template&lt;class T, int x&gt; class inv&gt;
struct combine_traits {
   typedef typename 
      inv&lt;A, min_traits&lt;map&lt;A&gt;::x, map&lt;B&gt;::x&gt;::x&gt;::type type;
};

// Mapping iterator tags to integers.
template &lt;class T&gt; 
struct iterator_tag_mapping 
{ enum { x = 0 }; };

template&lt;&gt; 
struct iterator_tag_mapping&lt;std::input_iterator_tag&gt;
{ enum { x = 1 }; };

template&lt;&gt; 
struct iterator_tag_mapping&lt;std::forward_iterator_tag&gt; 
{  enum { x = 2 }; };

template&lt;&gt; 
struct iterator_tag_mapping&lt;std::bidirectional_iterator_tag&gt; 
{ enum { x = 3 }; };

template&lt;&gt; 
struct iterator_tag_mapping&lt;std::random_access_iterator_tag&gt; 
{ enum { x = 4 }; };

// Mapping integers to iterator tags.
template&lt;class T, int x&gt; 
struct mapping_iterator_tag 
{ typedef void type; };

template&lt;class T&gt; 
struct mapping_iterator_tag&lt;T,1&gt;   
{ typedef std::input_iterator_tag type; };

template&lt;class T&gt; 
struct mapping_iterator_tag&lt;T,2&gt;   
{ typedef std::forward_iterator_tag type; };

template&lt;class T&gt; 
struct mapping_iterator_tag&lt;T,3&gt;   
{ typedef std::bidirectional_iterator_tag type; };

template&lt;class T&gt; 
struct mapping_iterator_tag&lt;T,4&gt;   
{ typedef std::random_access_iterator_tag type; };

// Given two iterator categories, compute the lower one.
template &lt;class cat_a, class cat_b&gt;
struct combine_iterator_categories
  : public combine_traits&lt;
             cat_a,
             cat_b,
             iterator_tag_mapping,
             mapping_iterator_tag
           &gt; 
{};

// Given two iterator types, compute the lower category.
template&lt;class A, class B&gt;
struct combine_iterator_tags
  : public combine_traits&lt;
             iterator_traits&lt;A&gt;
               ::iterator_category,
             iterator_traits&lt;B&gt;
               ::iterator_category,
             iterator_tag_mapping,
             mapping_iterator_tag
           &gt; 
{};
</pre></body></html>
