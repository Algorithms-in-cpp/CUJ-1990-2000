<HTML>
<HTML><HEAD>
<TITLE>April 2000/Views, A New Form of Container Adaptors/Sidebar</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<H3 align=center><FONT COLOR="#000080">Traits Classes and Compile-Time Default Selection</FONT></H3>

<HR>

<BLOCKQUOTE>
<p>One of the techniques we use extensively to increase the flexibility of the code while maintaining ease of use and a relatively small code base are traits classes <a href="powell.htm#5">[5]</a>. We use traits to add or remove reference/pointer indirection and <B>const</B> specifiers to or from types. We also use them to select sensible iterator category defaults for the views' iterators. We describe the latter in some detail.</p>
<p>In order to identify the maximum iterator category for a view, we implemented a very interesting set of trait templates (see <a href="fig3.htm">Figure 3</a>). The algorithm is simple: map the two iterator category tags to integers, choose the smaller one, and map it back to the corresponding iterator category tag. Note that this has to be done at compile time. This kind of technique was invented by Todd Veldhuizen <a href="powell.htm#6">[6]</a>.</p>
<p>First we set up a template to give us the minimum value of two integers. Since this is a compile-time determination we cannot use the standard library <B>min&lt;&gt;</B> template; instead we use the <B>?:</B> operator in an enumeration. Next we created the <B>combine_traits</B> template that encapsulates the whole algorithm. Notice that two of the template arguments to <B>combine_traits</B> are templates, <B>map</B> mapping categories to integers, and <B>inv</B> functioning as its inverse. Accordingly, the <B>map</B> template provides an enum <B>x</B>, and <B>inv</B> provides a type named <B>type</B>. Then we create the integer mapping for iterator category tags, specializing each type with a different value, in ascending order of their inclusiveness. The <B>random_access_iterator_tag</B> has the highest value, and <B>input_iterator_tag</B> has the lowest, reflecting their priority for our purpose.</p>
<p>Now when we call <B>combine_iterator_categories</B> with two iterator category tags, we end up with the two specializations for those categories. The <B>combine_traits</B> template specializes on the minimum value, and sets the typedef type to the correct type.</p>
<p>This is a very powerful use of the traits technique. It allows us to select the correct minimum <B>iterator_trait_tag</B> from the container or view specified, at compile time. For example, if a view is at best bidirectional, but the underlying container is random access, we will set the view's iterator catagory to bidirectional. We have used this technique to simplify the encoding of the views templates in a lot of places.</p>

</blockquote></body></html>
