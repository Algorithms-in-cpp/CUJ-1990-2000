<HTML>   
     <HEAD>
<TITLE>April 2000/The Journeyman's Shop</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocapr.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">The Journeyman's Shop: Casts and Conversions</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Pete Becker</FONT></H3>

<BLOCKQUOTE>
<p>Type casting is a blunt instrument in C. The four different casts in C++ are safer, but still require care when used.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>Thirty years ago, when Spiro Agnew was nattering about nabobs of negativism and Richard Nixon was not a crook, one of the slogans from the other side of the wedge was "you haven't converted a man just because you have silenced him." Here in The Journeyman's Shop we have a similar rule for casts: you haven't converted an object just because you have silenced the compiler. Or, a little less tersely and quite a bit more comprehensibly, before you add a cast, make sure that you understand what you're telling the compiler to do. A cast is a very powerful tool, one that many programmers are too quick to employ. In many cases a cast says to the compiler, "don't worry, I know what I'm doing." That's okay when it's true. It's disastrous when it's not. This month we're going to try to help avoid coding disasters by looking at pointer conversions and casts.</p>

<H4><FONT COLOR="#000080">Terminology</FONT></H4>

<p>A <I>conversion</I> occurs whenever the compiler changes the type of an expression from the type given to that expression by the language rules to a type required by the context where that expression is used. For example:</p>

<pre>
unsigned char ch = 3;
</pre>

<p>Here the expression <B>3</B> has type <B>int</B>. It is being used to initialize a variable of type <B>unsigned char</B>, so the compiler converts its type from <B>int</B> to <B>unsigned char</B>.</p>
<p>A conversion can result in a value that is different from the value of the original expression. For example:</p>

<pre>
unsigned char to_ch(int val)
{
unsigned char ch = val;
return ch;
}
</pre>

<p>Here, the expression <B>val</B> has type <B>int</B>. Just as in the previous example, it is being used to initialize a variable of type <B>unsigned char</B>, so the compiler converts its type from <B>int</B> to <B>unsigned char</B>. On a system where, for example, <B>unsigned char</B> is eight bits and <B>int</B> is 32, it is not possible to store every possible <B>int</B> value in an <B>unsigned char</B> variable. The rule in that case is that the value being stored is reduced modulo 2n, where n is the number of bits in an <B>unsigned char</B>; in this example the value would be reduced modulo 256. Calling <B>to_ch</B> shows the effect of this conversion:</p>

<pre>
#include &lt;stdio.h&gt;

int main()
{
printf("1000 &#151;&gt; %d\n", to_ch(1000));
return 0;
}
</pre>

<p>An <I>implicit conversion</I> is one that the compiler is allowed to do on its own. In the two code examples we've just looked at we've seen an implicit conversion from <B>int</B> to <B>unsigned char</B>. You probably noticed another implicit conversion, in the <B>main</B> function above: the call to <B>to_ch</B> returns an <B>unsigned char</B>, but the compiler must convert that return value to an <B>int</B> <a href="#1">[1]</a> before passing it to <B>printf</B>. But that's not all. There are two more implicit conversions in <B>main</B>. First, <B>printf</B> returns an <B>int</B>, which the compiler converts to type <B>void</B> by ignoring it. Second, the format string must be converted from an array of <B>const char</B> to a pointer to <B>const char</B> <a href="#2">[2]</a>.</p>
<p>An <I>explicit conversion</I> is one that the compiler is not allowed to do unless you tell it to. For example:</p>

<pre>
int *convert(void *ptr)
{
return ptr;
}
</pre>

<p>This code is not valid in C++. There is no implicit conversion from a pointer to <B>void</B> to a pointer to any non-<B>void</B> type.</p>
<p>A <I>cast</I> is something that you write in your source code to tell the compiler to perform an explicit conversion <a href="#3">[3]</a>. To make the previous example into valid C++, we could rewrite it, with a cast, like this:</p>

<pre>
int *convert(void *ptr)
{
return (int *)ptr;
}
</pre>

<H4><FONT COLOR="#000080">C-Style Casts and New-Style Casts</FONT></H4>

<p>In C, casts are simple: to convert an expression to a particular type, you put the name of that type in parentheses in front of the expression, just as in the preceding code example. This form of cast is now frowned upon in C++, because C++ provides four different forms of cast for four different kinds of conversions <a href="#4">[4]</a>: <B>static_cast</B>, <B>const_cast</B>, <B>dynamic_cast</B>, and <B>reinterpret_cast</B>. There's a bit of overlap between the things these casts can do, but they let you say more clearly what it is that you intend to change by a conversion, which helps avoid mistakes. We'll look at all four kinds of cast, as they apply to various kinds of pointers, in the rest of this column.</p>

<H4><FONT COLOR="#000080">static_cast</FONT></H4>

<p>Suppose you have a simple class hierarchy that looks like this:</p>

<pre>
class Base
{
};

class Derived : public Base
{
};
</pre>

<p>and you have some code that uses it like this:</p>

<pre>
void f(void *ptr)
{
// do something with ptr
}

void g()
{
Derived d;
f(&amp;d);
}
</pre>

<p>The type of the expression <B>&amp;d</B> in <B>g</B> is pointer to <B>Derived</B>. We can pass it as an argument to <B>f</B> without a cast because there is an implicit conversion from any pointer type to <B>void *</B> <a href="#5">[5]</a>.</p>
<p>A slightly more complicated case involves a function that takes a pointer to <B>Base</B>:</p>

<pre>
void f(Base *bp)
{
// do something with bp
}

void g()
{
Derived d;
f(&amp;d);
}
</pre>

<p>This too is valid in C++, because there is an implicit conversion from pointer to <B>Derived</B> to pointer to <B>Base</B>. This conversion is allowed only in contexts where <B>Base</B> is accessible &#151; if <B>Derived</B> inherited privately from <B>Base</B> instead of publicly, the implicit conversion would be allowed only within member functions and friends <a href="#6">[6]</a>. There is another restriction on this conversion. It is allowed only when it is unambiguous &#151; we'll see an example a little later of an ambiguous conversion, and how to handle it.</p>
<p>This conversion from <B>Derived</B> to <B>Base</B> is considered safe, and therefore appropriate for an implicit conversion, because every object of type <B>Derived</B> contains all the member data and has all the member functions of an object of type <B>Base</B>. However, the designer of the class <B>Base</B> is responsible for giving users of the class a good shot at using <B>Base</B> safely. This usually means making data private and providing virtual functions so that derived classes can override their behaviors properly. Conversions in the other direction are much more dangerous, and the compiler is not allowed to do them on its own:</p>

<pre>
void f(Derived *dp)
{
// do something with dp
}

void g(void *ptr)
{
Base b;
f(ptr); // not allowed
f(&amp;b);  // not allowed
}
</pre>

<p>Stated more formally, there is no implicit conversion from a <B>void *</B> to a pointer to any non-<B>void</B> type, and there is no implicit conversion from a pointer to <B>Base</B> to a pointer to <B>Derived</B>. The reason for this ought to be fairly evident: there is no guarantee that the data that a pointer to <B>void</B> or a pointer to <B>Base</B> points to has any connection whatsoever with the class <B>Derived</B>.</p>
<p>However, if you know that a pointer to <B>Base</B> in fact points to an object of type <B>Derived</B>, you can tell the compiler to do the conversion anyway. Use a <B>static_cast</B> when you know that the conversion will make sense:</p>

<pre>
void f(Derived *dp)
{
// do something with dp
}

void g()
{
Derived d;
void *ptr = &amp;d;
Base *bp = &amp;d;
f(static_cast&lt;Derived*&gt;(ptr)); //okay
f(static_cast&lt;Derived*&gt;(bp));  //okay
}
</pre>

<p>Here, we know that <B>ptr</B> and <B>bp</B> both point to an object of type <B>Derived</B>, so we know that it's safe to use a <B>static_cast</B> to tell the compiler to do the conversion.</p>
<p>There is a limitation on this use of <B>static_cast</B>: you cannot use it to convert a pointer to a virtual base into a pointer to a derived type. We'll look at this limitation later on, when we talk about <B>dynamic_cast</B>.</p>
<p>Now let's look at another form of conversion, in a more complicated class hierarchy:</p>

<pre>
class B {};
class I1 : public B {};
class I2 : public B {};
class D : public I1, public I2 {};

D d;
I1 *i1p = &amp;d;	// okay
I2 *i2p = &amp;d;	// okay
B *bp = &amp;d;	// not allowed
</pre>

<p>There is an implicit conversion from a pointer to <B>D</B> to a pointer to <B>I1</B>, and from a pointer to <B>D</B> to a pointer to <B>I2</B>. There isn't an implicit conversion from a pointer to <B>D</B> to a pointer to <B>B</B>, because an object of type <B>D</B> has two subobjects of type <B>B</B>. Rather than leave it up to the compiler to decide what the initialization in this example means, the language definition does not allow an implicit conversion here because the conversion is ambiguous. You can't get rid of this ambiguity by telling the compiler to do it anyway &#151; instead, you have to give the compiler some guidance by telling it which of the two <B>B</B> subobjects you want to end up pointing to:</p>

<pre>
B *bp1 = static_cast&lt;I1*&gt;(&amp;d); //okay
B *bp2 = static_cast&lt;I2*&gt;(&amp;d); //okay
</pre>

<p>These conversions work because the <B>I1</B> and <B>I2</B> subobjects in <B>D</B> each have a single <B>B</B> subobject. The cast tells the compiler to convert the pointer into a pointer to <B>I1</B> or a pointer to <B>I2</B>, and the compiler then implicitly converts the resulting pointer into a pointer to <B>B</B>. We could also have used the pointers <B>i1p</B> and <B>i2p</B> to initialize pointers to <B>Base</B>:</p>

<pre>
B *b1p = i1p; // okay: points to Base subobject of I1
B *b2p = i2p; // okay: points to Base subobject of I2
</pre>

<p>Use <B>static_cast</B> to convert a pointer to base type into a pointer to derived type when you know that the conversion is safe, and to give the compiler a hint when you want to convert a pointer to derived type into a pointer to base type and the derived type has multiple subobjects of the desired base type.</p>

<H4><FONT COLOR="#000080">dynamic_cast</FONT></H4>

<p>When you use <B>static_cast</B> to tell the compiler to convert a pointer to a base type into a pointer to a derived type you take responsibility for ensuring that the conversion is safe. The compiler doesn't check whether the object that the original pointer points to is an object of the derived type. It takes you at your word, and converts the pointer. If you don't know whether the pointer actually points to an object of the derived type you shouldn't use <B>static_cast</B>. Instead, you should use <B>dynamic_cast</B>, which checks the actual type of the object at run time. If the conversion is valid <B>dynamic_cast</B> gives you the pointer, adjusted if necessary. If the conversion is not valid it gives you a null pointer <a href="#7">[7]</a>. For example:</p>

<pre>
class Base
{
public:
   virtual ~Base();
};

class Derived : public Base
{
};

class Other : public Base
{
};

Derived *convert(Base *bp)
{
return dynamic_cast&lt;Derived*&gt;(bp);
}

void test()
{
Derived d;
Other o;
Base *bpd = &amp;d;
Other *bpo = &amp;o;
Derived *dpd = convert(bpd);
Derived *dpo = convert(bpo);
}
</pre>

<p>At the end of test the pointer <B>dpd</B> will point to <B>d</B>, and the pointer <B>dpo</B> will contain a null pointer.</p>
<p>Note that the class <B>Base</B> in this example has a virtual function. That's required &#151; you cannot use <B>dynamic_cast</B> on a pointer to a class type that has no virtual functions. The reason behind this is pragmatic. Run-time type checking requires the compiler to generate information about the actual types of program objects. Adding a pointer to a type description to a struct that merely contained two <B>double</B>s (say, to represent a complex number) would bloat that structure, and would rarely be useful. In typical implementations, classes that have virtual functions already have such a pointer, so adding type conversion information doesn't make the objects themselves any bigger.</p>
<p>I mentioned earlier that you can't use a <B>static_cast</B> to convert from a pointer to a virtual base into a pointer to a derived type. That's because the location of the virtual base subobject within the derived type depends on whether there is a more derived type and how that type is defined. For example:</p>

<pre>
class Vbase {virtual ~Vbase(); int i;};
class I1
   : public virtual Vbase{int j;}
class I2
   : public virtual Vbase{int k;}
</pre>

<p>One fairly typical way for the compiler to lay out this data in memory is like this:</p>

<pre>
Vbase *vbptr;
int j;   // I1's data
int i;   // Vbase's data
</pre>

<p>Similarly, if a class <B>I2</B> is derived virtually from <B>Vbase</B>, its data layout might look like this:</p>

<pre>
Vbase *vbptr;
int k;   // I2's data
int i;   // Vbase's data
</pre>

<p>In both cases, the <B>Vbase</B> subobject is located at the same offset from the beginning of the object. But look at what happens when we combine these two types in a derived class:</p>

<pre>
class Derived : public I1, public I2
{
int m;
}
</pre>

<p>Remember, there is only one <B>Vbase</B> subobject in <B>Derived</B>; the layout usually looks something like this:</p>

<pre>
Vbase *vbptr1;//I1's virtual base ptr
int j;        //I1's data
Vbase *vbptr2;//I2's virtual base ptr
int k;        // I2's data
int m;        // Derived's data
int i;        // Vbase's data
</pre>

<p>If the compiler has to convert a pointer to <B>Vbase</B> into a pointer to <B>I1</B> it has to know whether the <B>Vbase</B> subobject is part of an object of type <B>I1</B> or part of an object of type <B>Derived</B>. In general, there is no way to know this at compile time, so a conversion from a pointer to a virtual base into a pointer to a derived type can be done only with a <B>dynamic_cast</B>.</p>
<p>You can also use <B>dynamic_cast</B> to convert a pointer to a type in another branch of a class hierarchy. For example:</p>

<pre>
class Base1
{
virtual void f();
};

class Base2
{
};

class Derived
   : public Base1, public Base2
{
};

void test()
{
Derived d;
Base1 *b1p = &amp;d;
Base2 *b2p =
   dynamic_cast&lt;Base2*&gt;(b1p);
}
</pre>

<p>Just as before, <B>dynamic_cast</B> will return a null pointer if the conversion cannot be performed.</p>
<p>Finally, you can use <B>dynamic_cast</B> to get a pointer to the beginning of an object, with a <B>dynamic_cast&lt;void*&gt;</B>:</p>

<pre>
void test(Base2 *bp)
{
void *addr = dynamic_cast&lt;void*&gt;(bp);
}
</pre>

<p>This technique can be used to determine whether two <B>Base</B> pointers point to subobjects of the same object:</p>

<pre>
boolean
same_object(Base1 *bp1, Base2 *bp2)
{
return dynamic_cast&lt;void*&gt;(bp1)
       == dynamic_cast&lt;void*&gt;(bp2);
}
</pre>

<p>If you use a <B>dynamic_cast</B> to initialize a variable that is defined in an <B>if</B> statement you can tightly control the scope of the converted pointer:</p>

<pre>
void use(Base *bp)
{
if (Derived *dp = dynamic_cast&lt;Derived*&gt;(bp)
   {
   // code that uses dp
   }
// code here cannot access dp
}
</pre>

<p>If you have a small, well-defined set of derived types you can use a series of <B>else if</B> statements to perform a type-specific operation:</p>

<pre>
void use(Bse *bp)
{
if (Der1 *dp1 = dynamic_cast&lt;Der1*&gt;(bp)
   {
   // code that uses dp1
   }
else if (Der2 *dp2 = dynamic_cast&lt;Der2*&gt;(bp)
   {
   // code that uses dp2
   }
else if (Der3 *dp3 = dynamic_cast&lt;Der3*&gt;(bp)
   {
   // code that uses dp3
   }
else
   // unknown type
}
</pre>

<p>Of course, it's almost always more appropriate to use virtual functions than to explicitly check a pointer's type in this way. But once in a while this sort of cascade can be the best solution.</p>
<p>Use <B>dynamic_cast</B> to check the validity of a conversion at run time, to convert a pointer to a virtual base into a pointer to a derived type, and to get the address of the start of an object.</p>

<H4><FONT COLOR="#000080">reinterpret_cast</FONT></H4>

<p>Don't ever use this. There is nothing portable you can do with it. If you really need to do bit twiddling on pointers read what the C++ Standard says about <B>reinterpret_cast</B> and read your compiler's documentation. Be warned: you're playing with fire.</p>

<H4><FONT COLOR="#000080">const, volatile, and const_cast</FONT></H4>

<p>So far, none of the pointers we've looked at had <B>const</B> or <B>volatile</B> qualifiers in their type declarations. Now it's time to consider the effect of <B>const</B> and <B>volatile</B> qualifiers on the validity of a cast expression. Rather than keep on repeating "<B>const</B> and <B>volatile</B>" or using the standardese "cv-qualifier," I'll simply talk about <B>const</B>. The same rules apply to <B>volatile</B>.</p>
<p>You can use any of the three cast operators that we looked at to change the constness of a type, provided you don't cast away constness. This means that most of the conversions that we're used to applying in const-correct code are valid as part of a cast. For example,</p>

<pre>
class Base {};
class Derived : public Base {};

Derived d;
Base *bp = &amp;d;
const Derived *dp = static_cast&lt;const Derived *&gt;(bp);
</pre>

<p>Here, the conversion from pointer to <B>Base</B> into pointer to <B>const Derived</B> does not cast away constness, so we're allowed to add the <B>const</B> qualifier as part of the cast <a href="#8">[8]</a>.</p>
<p>If you need to cast away constness you can use a <B>const_cast</B>:</p>

<pre>
Derived d;
const Derived *cdp = &amp;d;
Derived *dp =
   const_cast&lt;Derived *&gt;(cdp);
</pre>

<p>Here, the <B>const_cast</B> tells the compiler that the programmer is taking responsibility for the consequences if removing the <B>const</B> qualifier causes problems.</p>
<p>The C++ Standard has a precise definition of what it means to cast away constness, and if you want to see the formalism you can look there. Informally, once you add a <B>const</B> qualifier to a multi-level pointer you must add <B>const</B> qualifiers all the way up to the pointer type that you are converting to. For example,</p>

<pre>
int **ipp;

// not allowed: casts away const
int const **cipp = ipp;
// okay
int const * const *ccipp = ipp;
</pre>

<p>Here, <B>ccipp</B> is a pointer to a <B>const</B> pointer to <B>const int</B>. Because we added a <B>const</B> qualifier to the <B>int</B> part of the type we had to add a second <B>const</B> qualifier, moving up through the levels of pointers, in order to avoid casting away constness. Got that? Now let's look at a pointer to a pointer to a pointer:</p>

<pre>
int ***ippp;
// not allowd
int const *** cippp = ippp;
// not allowed
int const * const ** ccippp = ippp;
// okay
int const * const * const * ccippp =
   ippp;
</pre>

<p>So far, this example looks pretty much like the previous one. We've added a <B>const</B> qualifier to the type of the underlying object that we're pointing to, so the rule says that we have to add <B>const</B> qualifiers all the way up to the next-to-last pointer. But we don't have to start adding <B>const</B> qualifiers at the underlying type. We can start part way through, just so long as we keep adding qualifiers on the way out:</p>

<pre>
// not allowed: casts away const
int * const **xcippp = ippp;	
// okay
int * const * const *xccippp =
   ippp;
</pre>

<p>Use <B>const_cast</B> to cast away constness when you know that it is safe to do so.</p>

<H4><FONT COLOR="#000080">In General</FONT></H4>

<p>All of these casts can be safely applied to a null pointer. If the cast requires changing the value of the pointer, the compiler will generate code that checks for a null pointer before doing any arithmetic on the pointer value.</p>
<p>Although none of our examples so far have shown it, these casts can be cascaded. This can be rather hard to read:</p>

<pre>
Derived d;
const Base *bp = &amp;d;
Derived *dp = const_cast&lt;Derived*&gt;(
   static_cast&lt;const Derived*&gt;(bp));
</pre>

<p>That's actually a good thing: it helps discourage use of casts. Most casts are used to get around the protection that C++'s strong typing provides. Occasionally there are good reasons for doing that, but often the need to violate the type system is a symptom of a design problem. When the compiler tells you that it can't do an implicit conversion, make sure that you understand why the compiler is complaining. Then think about whether what you're trying to do is appropriate, or whether a change in design can eliminate the need for violating the type system. After thinking hard about this, if you are convinced that you really do need to do the conversion, add a cast.</p>

<H4><FONT COLOR="#000080">Notes</FONT></H4>

<p><a name="1"></a>[1]  That is, on our (not very) hypothetical hardware architecture. On an architecture where an <B>int</B> cannot hold all possible values of type <B>unsigned char</B> the conversion would be to an <B>unsigned int</B>. This happens when <B>unsigned char</B> and <B>int</B> are the same size.</p>
<p><a name="2"></a>[2]  In C this involves two implicit conversions: the array of <B>char</B> is converted to a pointer to <B>char</B>, and the pointer to <B>char</B> is converted to a pointer to <B>const char</B>.</p>
<p><a name="3"></a>[3]  Programmers who anthropomorphise compilers sometimes muddle "conversion" and "cast" with statements like "the compiler casts the <B>int</B> value to an <B>unsigned char</B>." This is wrong. A cast is something you write in your source code. The compiler can convert values, but it cannot cast them. (It's also arguably wrong because it introduces an outside entity, the compiler, into what ought to be a conversation between a programmer and the language definition, but that's a subject for another column.)</p>
<p><a name="4"></a>[4]  We may have missed an opportunity here: there should be a fifth conversion, of the form <B>compiler_cast&lt;T&gt;(v)</B>, which tells the compiler to do exactly what it would have done in the absence of the cast, but not to generate a warning. That way we could suppress warnings on valid, well-defined implicit conversions such as <B>int</B> to <B>unsigned char</B> that compiler writers suspect we don't understand well enough to be allowed to use.</p>
<p><a name="5"></a>[5]  We'll look at the limits that are imposed by the qualifiers <B>const</B> and <B>volatile</B> a bit later.</p>
<p><a name="6"></a>[6]  In addition, an old-style cast can be used for this conversion, and it is required to produce a pointer to the correct subobject in the presence of multiple inheritance.</p>
<p><a name="7"></a>[7]  We haven't said anything about references so far, but in general you can convert references in the same way as pointers. However, since null references do not exist in C++, <B>dynamic_cast</B> has to use a different mechanism to tell you that the conversion was not valid. When you use <B>dynamic_cast</B> to convert a reference and the conversion is not valid, <B>dynamic_cast</B> throws an exception object of type <B>std::bad_cast</B>.</p>
<p><a name="8"></a>[8]  When these new-style casts were first introduced the rule was that you couldn't add or remove <B>const</B> qualifiers. Somewhere along the way this was replaced with the present rule. I, for one, overlooked this sensible change, until I reread the rules for these conversions in preparation for writing this column.</p>

<p><i><B>Pete Becker</B> is Technical Project Leader for Dinkumware, Ltd. He spent eight years in the C++ group at Borland International, both as a developer and manager. He is a member of the ANSI/ISO C++ standardization committee. He can be reached by email at <B>petebecker@acm.org</B>.</i></p>

</blockquote></body></html>
