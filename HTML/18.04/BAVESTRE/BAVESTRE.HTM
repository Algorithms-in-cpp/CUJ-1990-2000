<HTML>   
     <HEAD>
<TITLE>April 2000/Building HTML Documents with C++</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocapr.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Building HTML Documents with C++</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Giovanni Bavestrelli</FONT></H3>

<BLOCKQUOTE>
<p>The block structure of C++ can really help you get the block structure of HTML right.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>Recently I had to build HTML documents from within a C++ server program. As usual, at the beginning of a project, I think of creating some low-level classes to help me build the foundation for higher levels of abstraction. Building HTML documents using C++ streams, such as <B>std::ostrstream</B> and <B>std::ostringstream</B>, is very simple and very intuitive, but I saw an opportunity for some kind of automation in the handling of opening and closing matching HTML tags.</p>
<p>The similarity between opening and closing HTML tags and opening and closing curly braces in C++ immediately struck me. A very simple and obvious solution came up. Let C++ constructors handle opening tags, and destructors handle closing tags. This way a C++ programmer could forget the tedious work of matching nested HTML tags and leave it to the C++ compiler to handle. What would have been done with careful attention to a free stream of characters could now be done by logically organizing scopes with curly braces and function calls within C++ programs.</p>
<p>All C++ programmers are very familiar with scopes and curly braces, constructors and destructors, and logically arranging them is very intuitive for us. This would also be less error prone. If I forget to close a curly brace, the compiler will tell me. If I forget to close an HTML tag, only the Web client will find out at run time. Common errors like mismatching tags and overlapping tags could be effectively avoided. My simple <B>htmltag</B> class lets me write the following "Hello World" HTML document:</p>

<pre>
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Simple Title&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;Hello World&lt;/BODY&gt;
&lt;/HTML&gt;
</pre>

<p>with code like this:</p>

<pre>
void HelloWorld(std::ostream &amp; o)
{
   htmltag HTML(o,"&lt;HTML&gt;\r\n");
   {
      htmltag HEAD(o,"&lt;HEAD&gt;\r\n");
      htmltag TITLE(o,
         "&lt;TITLE&gt;Simple Title");
   }
   htmltag BODY(o,"&lt;BODY&gt;");
   o&lt;&lt;"Hello World";
}
</pre>

<p>The nice thing about this approach is that you can intermix HTML stream building with any other kind of operation. You can call functions that do part of this streaming and, if you let the <B>htmltag</B> class take care of all opening tags that need closing, you will have given your HTML building code a logical structure that will be difficult to break. The <B>htmltag</B> class is extremely simple. It consists of just the following:</p>

<UL><LI>   a constructor that takes a reference to a <B>std::ostream</B> and an opening tag (with attributes if necessary) to put to the stream</LI>
<LI>   a private member function that, given the opening tag, builds the closing one</LI>
<LI>   a destructor that puts the closing tag onto the stream when the object goes out of scope.</LI></UL>

<p>As I started using these classes, I saw that often adding scopes (with curly braces) was a bit tedious when the opening and closing tags are very near to each other, when there's not much text in between them. So I saw another opportunity to exploit a C++ language feature to do some work for me &#151; expressions. I can nest expressions the way I nest HTML tags, one within the other, and again the C++ compiler will help me get right what a free stream of characters would leave only to my diligence.</p>
<p>So I added a single static function to the <B>htmltag</B> class, named <B>str</B>. It takes the opening tag as a first argument (with attributes if necessary), and a string containing the HTML text between the opening tag and the closing tag as the second argument. It returns a string containing the opening tag concatenated with the HTML text passed as second parameter and the closing tag. The closing tag is automatically detected from the opening one.</p>
<p>Not much help, you might think. But the power of this approach is obvious when you build expressions. You can concatenate parts of HTML text by summing the outputs of this <B>htmltag::str</B> functions. You can also put one block of HTML text, with its opening and closing tags, nested correctly within another block, by passing the output of the <B>htmltag::str</B> function as input to another <B>htmltag::str</B> call (as the second argument). So the HTML document of <a href="fig1.htm">Figure 1</a> can be built with the C++ code of <a href="list1.htm">Listing 1</a>. Note that the <B>htmltag::str</B> function does not take an <B>std::ostream</B> parameter, as its string output can be streamed directly to the HTML stream. Note also that this function was not designed to be as fast as possible, although you probably won't notice the difference.</p>
<p>That's all! This <B>htmltag</B> class is very simple, very small, and does a very limited job, but it lets you give your HTML building code a logical structure, as far as opening and closing tags are concerned. If you let this class handle all opening tags that need closing (some tags, like <B>&lt;HR&gt;</B> and <B>&lt;BR&gt;</B> must not be closed and must not be fed to my class as opening tags) you can reduce drastically your chance of making mistakes building HTML documents. For the rest, it leaves you total freedom in the way you stream your HTML.</p>
<p>To use the <B>htmltag</B> class effectively, you should take a look at its implementation. It is not difficult, since it's only 50 lines of code. You can quickly see that whatever is before and after the first HTML tag in the string passed as opening tag to my <B>htmltag</B> class is just put to the stream (or string) as it is. You can easily attach an end-of-line (<B>"\r\n"</B>) or other text as you like. You can also see that you can put any attribute you want in the string passed as opening tag.</p>
<p>Note that the parsing of the opening tag to build the closing one and the relative error handling is very simple and would have to be improved for production code.</p>
<p>Be careful of one mistake that's easy to make using these classes, as shown in the following code:</p>

<pre>
std::ostrstream o;
htmltag HTML(o,"&lt;HTML&gt;");
// put other tags on the stream
// extract text from stream and send it
</pre>

<p>The <B>ostrstream</B> and the <B>htmltag</B> objects are in the same scope, and they will go out of scope together, the <B>ostrstream</B> right after the htmltag object, without giving you a chance to access the <B>ostrstream</B> after the <B>htmltag</B> object's destructor has put the closing &lt;/HTML&gt; tag on it. The code above should have been:</p>

<pre>
std::ostrstream o;
{
        htmltag HTML(o,"&lt;HTML&gt;");
        // put other tags on the stream
}
// extract text from stream and send it
</pre>

<p>This solution is so simple and obvious that I am sure many other C++ programmers have come up with something very similar, although I haven't seen it yet. At the beginning I had a more ambitious goal, designing classes <B>HtmlHEAD</B>, <B>HtmlBODY</B>, <B>HtmlTABLE</B>, etc., to encapsulate the use of each HTML tag, adding type safety to the way attributes were specified, with some enums and so on. But I soon discovered I was adding more complexity than I was removing. Besides, such an approach would have been less flexible, more intrusive, and less intuitive to use for HTML experts, and would be tied to the HTML version I was using when designing the classes. So I aimed at a more general and simpler solution that works with HTML, DHTML, and even XML, and is not closely tied to the evolution of such languages.</p>
<p>You can download the code from the <I>CUJ</I> website. (See the instructions on page 3.) There's an <B>HtmlTag</B> class that uses the MFC <B>CString</B>, and an <B>htmltag</B> class that uses <B>std::string</B>. (See <a href="list2.htm">Listings 2</a> and <a href="list3.htm">3</a>.) Just pick the one you prefer, and extend it as needed.</p>

<p><i><B>Giovanni Bavestrelli</B> lives in Milan and is a software engineer for Techint S.p.A., Castellanza, Italy. He has a degree in Electronic Engineering from the Politecnico di Milano, and writes automation software for Pomini Roll Grinding machines. He has been working in C++ under Windows since 1992, specializing in the development of reusable object-oriented libraries. He can be reached at <B>giovanni.bavestrelli@pomini.it</B>.</i></p>

<h4><a href="../../../source/2000/apr00/bavestre.zip">Get Article Source Code</a></h4>

</blockquote></body></html>
