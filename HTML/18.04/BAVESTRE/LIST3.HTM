<HTML><HEAD>
<TITLE>April 2000/Building HTML Documents with C++/Listing 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 3: Implementation of htmltag class</A></h4>
<pre>
// File HtmlTags.cpp

#include "stdafx.h"
#include "assert.h"
#include "Htmltags.h"

using namespace std;

// Find the closing tag given the opening one
bool 
htmltag::closingtag(const string &amp; OpenTag, string &amp; CloseTag)
{
    // String must not be empty
    assert(!OpenTag.empty()); 
    if (OpenTag.empty()) return false;

    // Find opening &lt;
    string::size_type lesst=OpenTag.find('&lt;');  
    assert(lesst!=string::npos);
    if (lesst==string::npos) return false;

    // Find closing &gt;
    string::size_type great=OpenTag.find('&gt;',lesst); 
    assert(great!=string::npos &amp;&amp; great&gt;lesst+1);
    if (great==string::npos || great&lt;=lesst+1) return false;

    // Find space separating options, if any
    string::size_type space=OpenTag.find(' ',lesst);  
    // Space must be after first char
    assert(space==string::npos || space&gt;lesst+1);     
    if (space!=string::npos &amp;&amp; space&lt;=lesst+1) return false; 

    // Now extract closing tag
    if (space==string::npos || space&gt;=great)
    {
        CloseTag="&lt;/";
        CloseTag.append(OpenTag,lesst+1,great-lesst); 
    }
    else
    {
        CloseTag="&lt;/";
        CloseTag.append(OpenTag,lesst+1,space-lesst-1);
        CloseTag.append("&gt;"); 
    }
    return true; 
}

htmltag::htmltag(ostream &amp; stream,const string &amp; OpenTag)
        : m_Stream(stream)
{
    stream&lt;&lt;OpenTag.c_str();  
    closingtag(OpenTag,m_CloseTag);
}

htmltag::~htmltag()
{
    m_Stream&lt;&lt;m_CloseTag.c_str()&lt;&lt;"\r\n";
}

string htmltag::str(const string &amp; OpenTag,const string &amp; Body)
{ 
    string CloseTag,Result(OpenTag);
    closingtag(OpenTag,CloseTag);

    Result.append(Body);
    Result.append(CloseTag);
    Result.append("\r\n");

    return Result;
}
</pre></body></html>
