<HTML>   
     <HEAD>
<TITLE>April 2000/A Class for Scanning Directories</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocapr.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">A Class for Scanning Directories</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Michal Niklas</FONT></H3>

<BLOCKQUOTE>
<p>Expanding wildcard filenames is something you want to do uniformly across many utilities and different operating systems.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>Like many other programmers, I write many simple file utilities. My first utilites operated on the standard input, or on a list of files named in the command line. As I learned more about Unix, I found that the shell can do some work for me. If I write <B>*.c</B>, for example, the shell expands it into a sorted list of the names of all the C source files in the current directory. Of course I wanted much the same capability for MS-DOS tools, so I read about the MS C library function <B>FindFirst</B> and family. With a little work, I got to where both Unix and MS-DOS versions of a utility accepted similar filename shorthand on the command line.</p>
<p>Later I found that it would be useful to scan subdirectories also, so you can describe sets of files in multiple subdirectories. So I have written functions that call <B>FindFirst</B> recursively to do this job too.</p>
<p>Along the way, I noticed that I often would copy all the source code of a utility, just to make a few small changes in it for different environments. But C++ taught me to write code that minimizes the need to make such changes, and C++ compilers have become smarter and smarter over time. So I decided to create a C++ class to serve as the backbone for all my text utilities and eliminate the need for multiple versions. I present here a small but quite useful class, called <B>CFileList</B>, that can automate common directory scanning and file operatons.</p>
<p>The main idea is to to provide an assist for tools that are often called with sets of files that have similar names. For example, in MS-DOS you want to be able to write:</p>

<pre>
myrm -r *.o *.bak
</pre>

<p>and have <B>myrm</B> operate on all the files whose name ends in <B>.o</B>, followed by all the files whose name ends in <B>.bak</B>. The Unix shell does this for you, as I mentioned above. But if you want to get these "wildcard" names past the shell so that <B>CFileList</B> does the job, you have to write under Unix:</p>

<pre>
myrm -r "*.o" "*.bak"
</pre>

<p>In either case, as the command name suggests, this program should remove all files with <B>.o</B> and <B>.bak</B> extension from the current directory and from all its subdirectories.</p>
<p><a href="list1.htm">Listing 1</a> shows the header <B>cdir.h</B>, which declares class <B>CFileList</B>. <a href="list2.htm">Listing 2</a> shows the source file <B>cdir.cpp</B>, which defines many of the member functions for the class. The class also uses functions from the package Simple FileList Regular Expression, based on functions described by Brian Kernighan and Rob Pike in an earlier article (<I>Dr. Dobbs' Journal,</I> April 1999). These functions are included the source file <B>sflre.cpp</B>, shown in <a href="list3.htm">Listing 3</a>.</p>
<p>In my <B>CFileList</B> class, the member function <B>ProcessFiles</B> is where most of the work is done. Here I used the Posix <B>readdir</B> family of functions to scan directories. I also use the Posix <B>stat</B> function to check whether a name corresponds to a normal file or a directory. I use STL vectors to save the file and directory names. After a whole directory is scanned, I call the user-supplied function for each file. If the user has specified recursive mode, I do the same for all subdirectories.</p>
<p>The <B>CFileList</B> class is designed to serve as a base class, but it can be useful as it stands. In the constructor, you can specify a wildcard pattern that describes the names of the files you are interested in. The member function <B>ParseArgs</B> can then parse command-line arguments. It recognizes the flag <B>-r</B> for recusive directory scan and <B>-i</B> to ignore case sensitivity when matching names. Case sensitivity may be a useful option on Unix-style systems, where filenames are case sensitive, but you probably don't want it under MS-DOS systems, where they aren't. To do extra work while parsing command-line arguments, just create a new class derived from <B>CFileList</B> and write your version of <B>ParseArgs</B>.</p>
<p>To create a program that uses <B>CFileList</B>, just create a function that takes as an argument a filename (with full path information) and, if necessary, any additional data you might need in a derived class. The additional data can also be useful if you want to save some information between parsing calls. For example, your utility may choose to query a user before removing a file, as in (broken to fit column):</p>

<pre>
remove cdir.o ? (y-yes, n-no, a-all,
   c-cancel):
</pre>

<p>If the user types <B>a</B>, you can set a special flag in a structure passed to your file function. The next time, your function checks this flag and no query is printed.</p>
<p>To show how simple it is to use this class, I wrote my own version of <B>remove</B>. This program recognizes the recursive, silent, and querying options. <a href="list4.htm">Listing 4</a> shows the source file <B>myrm.cpp</B>, which implements this utility. Here, I derive a new class from <B>CFileList</B>. Its member function <B>ProcessFiles</B> lets you pass a pointer to access the ask and silence flags.</p>
<p>I have tested this class on Linux using egcs 1.1, and under Win95 using Borland C++ 5.02.</p>

<p><i><B>Michal Niklas</B> has a Master of Computer Science from the Technical Univerity of Szczecin, Poland. For three years, he has worked at HEUTHES (<B>http://www.heuthes.pl</B>), for financial and banking developers of applications. His interests are Internet applications, cryptography, telephony apps, smart cards, and various low-level class libraries. You can contact him at <B>michal.niklas@heuthes.pl</B>.</i></p>

<h4><a href="../../../source/2000/apr00/niklas.zip">Get Article Source Code</a></h4>

</blockquote></body></html>
