<HTML><HEAD>
<TITLE>April 2000/A Class for Scanning Directories/Listing 4</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 4: A sample remove utility based on CFileList</A></h4>
<pre>
#include &lt;stdio.h&gt;
#include &lt;ctype.h&gt;

#include &lt;iostream&gt;
#include &lt;string&gt;

#include "cdir.h"

class CDelFileList: public CFileList
  {
  private:
    bool m_ask;       // should we ask user before removing file
    bool m_silent;    // should we show file names
  public:
    bool Ask() const { return m_ask; };
    bool &amp;Ask() { return m_ask; };
    bool Silent() const { return m_silent; };
    CDelFileList(char *masks[], int count): CFileList(masks, count)
      {
      m_ask = true;
      m_silent = false;
      }

    virtual bool ParseArgs(int argc, char *argv[])
      {
      for (int i = 0; i &lt; argc; ++i)
        if (IsOptionOn(argv[i], 'a'))
          m_ask = true;
      for (int i = 0; i &lt; argc; ++i)
        if (IsOptionOn(argv[i], 's'))
          m_silent = true;
      return CFileList::ParseArgs(argc, argv);
      } // ParseArgs
      
  }; // CDelFileList


// callback function: remove file 
int DelFile(const char *name, void *data)
  {
  CDelFileList *DelFileListPtr = static_cast &lt;CDelFileList *&gt; (data);
  if (DelFileListPtr-&gt;Ask())
    {
    std::string tmp_str; // string to store user input
    cout &lt;&lt; "remove: " &lt;&lt; name &lt;&lt; " ? (yes,no,all,cancel) ";
    cin &gt;&gt; tmp_str;
    switch (tolower(tmp_str[0]))
      {
      case 'a':
        DelFileListPtr-&gt;Ask() = false;
        break;
      case 'y':
        break;
      case 'c':
        throw 1;
      default:
        return 0;
      } // switch 
    }
  if (!DelFileListPtr-&gt;Silent())
    cout &lt;&lt; "removing: " &lt;&lt; name &lt;&lt; endl;
  if (remove(name) != 0)
    {
    perror(name);
    return 0;
    } 
  return 1;
  } // DelFile

// print it if user don't know how to use this program
void ShowUsage()
  {
  cerr &lt;&lt; "My own remove\n"
          "Usage: myrm [-r] [-i] [file_mask] ...\n"
          "  -a - ask\n"
          "  -s - silent\n"
          "  -r - recursive\n"
          "  -i - ignore case\n"
          "  file_masks - masks like \"*.cpp\" or \"*.h\"\n"
          "    (notice usage of \" to avoid shell interpretation\n"
          "    of command line args on unices)\n";
  exit(1);
  } // ShowUsage


int main(int argc, char *argv[])
  {
  int i;
  for (i = 1; i &lt; argc; ++i)  // caalculate first mask index
    if (argv[i][0] != '-')
      break;
  if (argc == 0 || argc - i == 0)
    ShowUsage();
  CDelFileList DelFileList(&amp;argv[i], argc - i);
  if (DelFileList.ParseArgs(argc, argv))
    {
    try
      {
      DelFileList.ProcessFiles(".", DelFile, NULL, static_cast&lt;void *&gt; (&amp;DelFileList));
      }
    catch (...)
      {
      cout &lt;&lt; "user abort" &lt;&lt; endl;
      }
    }
  else
    ShowUsage();
  } // main
</pre></body></html>
