<HTML><HEAD>
<TITLE>April 2000/Error Logging with Iostreams/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2: Implementation of Errstream class</A></h4>
<pre>
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
#include "Errstream.h"

Errstream errout;

static void
_StdDisplayImpl_(const char *msg)
{
    cerr &lt;&lt; msg &lt;&lt; endl;
}

void
(*Errstream::_displayImpl)(const char *)
    = _StdDisplayImpl_;

Errstream::Errstream()
    : _line(0),
      _collectLine(0),
      _diffLevel(0),
      _collectDiffLevel(0),
      _numMultiples(0),
      _collect(true),
      _logOnly(false),
      _logOpen(false)
{
    clear();
    pid_t pid = getpid();
    sprintf(_logFile, "%s.%d",
        DEFAULT_ERROR_FILE, (int)pid);
}

Errstream::Errstream(const char *name)
    : _line(0),
      _collectLine(0),
      _diffLevel(0),
      _collectDiffLevel(0),
      _numMultiples(0),
      _collect(true),
      _logOnly(false),
      _logOpen(false)
{
    clear();
    strcpy(_logFile, name);
}

Errstream::~Errstream()
{
    if(_collect &amp;&amp; _numMultiples)
        _writeMultiples();
    ofstream::close();
}

void Errstream::open(const char *name)
{
    ofstream::close();
    ofstream::open(name);
}

void Errstream::collect(bool set)
{
    if(_numMultiples &amp;&amp; !set)
        _writeMultiples();
    _collect = set;
}

Errstream &amp;
Errstream::displayError(Errstream &amp;stream)
{
    if(!stream.logOnly())
       (*_displayImpl)(stream.errString());
    if(stream._collectMultipleMsgs())
        return stream;
    stream._writeMultiples();
    stream._writeDebugInfo();
    return stream;
}

Errstream &amp;
Errstream::operator&lt;&lt;(const char *str)
{
    _concatenate(str);
    if(_okayToWriteToLog())
        (ofstream&amp;)*this &lt;&lt; str;
    return *this;
}

Errstream &amp;Errstream::operator&lt;&lt;(int d)
{
    char buf[64];
    sprintf(buf, "%d", d);
    _concatenate(buf);
    if(_okayToWriteToLog())
        (ofstream&amp;)*this &lt;&lt; d;
    return *this;
}

Errstream &amp;Errstream::operator&lt;&lt;(double f)
{
    char buf[64];
    sprintf(buf, "%lf", f);
    _concatenate(buf);
    if(_okayToWriteToLog())
        (ofstream&amp;)*this &lt;&lt; f;
    return *this;
}

void Errstream::_openLogFile()
{
    ofstream::open(_logFile);
    if(good())
        _logOpen = true;
    else
        cerr &lt;&lt; "Unable to open log file "
             &lt;&lt; _logFile &lt;&lt; endl;
}

bool Errstream::_collectMultipleMsgs()
{
    if(!_collect ||
       (_diffLevel != _collectDiffLevel) ||
       (_line != _collectLine) ||
       (_file != _collectFile))
        return false;
    clear();
    _logOnly = false;
    _diffLevel = 0;
    _numMultiples++;
    return true;
}

void Errstream::_writeMultiples()
{
    if(_numMultiples)
    {
        (ofstream&amp;)*this
           &lt;&lt; "\n\t*** MESSAGE REPEATS "
           &lt;&lt; _numMultiples
           &lt;&lt; " TIMES ***\n"
           &lt;&lt; endl;
        (ofstream&amp;)*this &lt;&lt; _str;
        _numMultiples = 0;
    }
}

void Errstream::_writeDebugInfo()
{
    if(_collect)
    {
        _collectLine = _line;
        _collectFile = _file;
        _collectDiffLevel = _diffLevel;
    }
    clear();
    _logOnly = false;
    _diffLevel = 0;
    (ofstream&amp;)*this &lt;&lt; "\n\tFile: "
                     &lt;&lt; _file
                     &lt;&lt; "\n\tLine: "
                     &lt;&lt; _line
                     &lt;&lt; '\n'
                     &lt;&lt; endl;
}

void
Errstream::_concatenate
   (const char *buf, int len)
{
    int catSize =
MAX_STR_SIZE - strlen(_str);
    if(catSize &gt; len)  catSize = len;
    strncat(_str, buf, catSize);
}

bool Errstream::_okayToWriteToLog()
{
    if(_collect &amp;&amp; _numMultiples)
        return false;
    if(!_logOpen)
        _openLogFile();
    return true;
}

Errstream &amp;
set_diffLevel(Errstream &amp;stream, int d)
{
    stream.diffLevel(d);
    return stream;
}

Errstream &amp;
set_debug_line(Errstream &amp;stream, int l)
{
    stream.line(l);
    return stream;
}

Errstream &amp;
set_debug_file(Errstream &amp;stream,
    const std::string &amp;f)
{
    stream.file(f);
    return stream;
}

Errstream &amp;logOnly(Errstream &amp;stream)
{
    stream.logOnly(true);
    return stream;
}

Errstream &amp;endl(Errstream &amp;stream)
{
    (ofstream&amp;)stream &lt;&lt; endl;
    return stream;
}

EMANIP_int differentiate(int d)
{
    return EMANIP_int(set_diffLevel, d);
}

EMANIP_int setDebugLine(int l)
{
    return EMANIP_int(set_debug_line, l);
}

EMANIP_string
setDebugFile(const std::string &amp;f)
{
    return EMANIP_string(set_debug_file,
               f);
}
</pre></body></html>
