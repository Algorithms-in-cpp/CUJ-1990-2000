<HTML><HEAD>
<TITLE>April 2000/Error Logging with Iostreams/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: Definition of Errstream class</A></h4>
<pre>
#ifndef __ERRSTREAM__
#define __ERRSTREAM__

#include &lt;sys/param.h&gt;
#include &lt;fstream&gt;
#include &lt;string&gt;

#define MAX_STR_SIZE 1024
#define DEFAULT_ERROR_FILE "./errorLog"

#define dspl setDebugFile(__FILE__) &lt;&lt; setDebugLine(__LINE__) \
        &lt;&lt; Errstream::displayError

class Errstream : public ofstream
{
  public:
    Errstream();
    Errstream(const char* name);
   ~Errstream();

    void setDisplay(void (*f)(const char *))
                                    { _displayImpl = f; }
    void open(const char *name);
    const char *errString() const   { return _str; }
    void clear()                    { _str[0] = '\0'; }
    void line(int l)                { _line = l; }
    int  line() const               { return _line; }
    void file(const std::string &amp;f) { _file = f; }
    std::string file() const        { return _file; }
    void logOnly(bool l)            { _logOnly = l; }
    bool logOnly() const            { return _logOnly; }
    void collect(bool set);
    bool collect() const            { return _collect; }
    void diffLevel(int d)           { _diffLevel = d; }
    int  diffLevel() const          { return _diffLevel; }

    static Errstream &amp;displayError(Errstream &amp;stream);

    Errstream &amp;operator&lt;&lt;(const char *);
    Errstream &amp;operator&lt;&lt;(int);
    Errstream &amp;operator&lt;&lt;(double);
    Errstream &amp;operator&lt;&lt;(Errstream&amp; (*f)(Errstream&amp;))
        { return (*f)(*this); }

  private:
    int         _line, _collectLine;
    std::string _file, _collectFile;
    int         _diffLevel, _collectDiffLevel;
    u_int       _numMultiples;
    bool        _collect, _logOnly, _logOpen;
    char        _logFile[MAXPATHLEN];
    char        _str[MAX_STR_SIZE + 1];

    static void (*_displayImpl)(const char *msg);

    void _openLogFile();
    bool _collectMultipleMsgs();
    void _writeMultiples();
    void _writeDebugInfo();
    void _concatenate(const char *buf, int len=MAX_STR_SIZE);
    bool _okayToWriteToLog();

    Errstream(const Errstream &amp;);
    Errstream &amp;operator=(const Errstream &amp;);
};

extern Errstream errout;

class EMANIP_int
{
    Errstream&amp; (*fct)(Errstream&amp;, int);
    int arg;
  public:
    EMANIP_int(Errstream&amp; (*f)(Errstream&amp;, int), int a)
        : fct(f), arg(a) {}
    friend Errstream&amp;
    operator &lt;&lt; (Errstream&amp; s,
        const EMANIP_int&amp; m) { return(m.fct)(s, m.arg); }
};

class EMANIP_string
{
    Errstream&amp; (*fct)(Errstream&amp;, const std::string &amp;);
    std::string arg;
  public:
    EMANIP_string(
       Errstream&amp; (*f)(Errstream&amp;, const std::string &amp;),
       const std::string &amp;a) : fct(f), arg(a) {}
    friend Errstream&amp;
    operator &lt;&lt; (Errstream&amp; s,
       const EMANIP_string&amp; m) { return(m.fct)(s, m.arg); }
};

Errstream &amp;endl(Errstream &amp;stream);
Errstream &amp;logOnly(Errstream &amp;stream);
EMANIP_int differentiate(int d);
EMANIP_int setDebugLine(int l);
EMANIP_string setDebugFile(const std::string &amp;f);

#endif // __ERRSTREAM__
</pre></body></html>
