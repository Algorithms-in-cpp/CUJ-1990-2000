<HTML>   
     <HEAD>
<TITLE>April 2000/Standard C/C++</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocapr.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Standard C/C++: Testing C++ Library Conformance</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">P. J. Plauger</FONT></H3>

<BLOCKQUOTE>
<p>Now that we have a standard for C++ libraries, we need to know how to determine which libraries conform to the standard.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H4><FONT COLOR="#000080">Introduction</FONT></H4>

<p>Last month, I began discussing the business of testing conformance of programming languages to various standards. (See "Standard C/C++: Testing Conformance," <I>CUJ,</I> March 2000.) Specifically, I focused on testing C and C++ implementations against their respective ISO Standards. I also have a commercial interest in testing our Java library for conformance, but the Java "standard" is rather more equivocal. (See "Standard C/C++: Java Standard Time," <I>CUJ,</I> January 2000.) I described, in general terms, several commercial <I>validation suites</I> that provide objective, if anecdotal, measures of conformance.</p>
<p>This time around, I confine my attention to testing conformance of a Standard C++ library to the recently approved ISO standard. It's a topic dear to my heart because, over the past eight years, I've written both the library and a validation suite for same. My company, Dinkumware, Ltd., now licenses assorted libraries and validation suites for C, C++, and Java. Of course, we like our customers to get both &#151; the suites are a great way to check that a library port hasn't broken anything &#151; but we're ecumenical. We license either without the other.</p>
<p>But this is a technical column, not a paid advertisement. My purpose here is to describe in some detail the Standard C++ library and what is involved in testing it. As I mentioned last month, more and more enterprises are beginning to claim conformance to the C++ Standard, which has now been stable for over two years. The Standard C++ library is pretty big and pretty new. It helps to know what "conformance" really means, in this context.</p>

<H4><FONT COLOR="#000080">The C++ Standard</FONT></H4>

<p>The official definition of Standard C++ is the document ISO/IEC 14882:1998. You can download a machine-readable copy of the whole thing from the ANSI web site for a mere $18. (See <B>http://webstore.ansi.org</B>.) The C++ Standard is organized into 27 clauses, plus five annexes. Two of the annexes are normative &#151; they tell you things you have to do in a conforming implementation. The remaining three are purely informative &#151; they do not impose requirements on a conforming implementation.</p>
<p>The first part of the C++ Standard focuses on the language proper. Here are the titles of the clauses:</p>

<table width=300>
<tr><td>1</td>
<td>General</td></tr>
<tr><td>2</td>
<td>Lexical conventions</td></tr>
<tr><td>3</td>
<td>Basic concepts</td></tr>
<tr><td>4</td>
<td>Standard conversions</td></tr>
<tr><td>5</td>
<td>Expressions</td></tr>
<tr><td>6</td>
<td>Statements</td></tr>
<tr><td>7</td>
<td>Declarations</td></tr>
<tr><td>8</td>
<td>Declarators</td></tr>
<tr><td>9</td>
<td>Classes</td></tr>
<tr><td>10</td>
<td>Derived classes</td></tr>
<tr><td>11</td>
<td>Member access control</td></tr>
<tr><td>12</td>
<td>Special member functions</td></tr>
<tr><td>13</td>
<td>Overloading</td></tr>
<tr><td>14</td>
<td>Templates</td></tr>
<tr><td>15</td>
<td>Exception handling</td></tr>
<tr><td>16</td>
<td>Preprocessing directives</td></tr>
</table>

<p>Also, Annex E defines "Universal character names for identifiers," which is normative.</p>
<p>Some of these chapters are relatively straightforward. Lexical conventions, Standard conversions, Expressions, and Statements &#151; to name just a few topics &#151; derive largely from Standard C. And the C Standard tinkered very little with those concepts since the first draft of Kernighan &amp; Ritchie's classic opus. But other topics, such as Overloading and Templates, involve considerable invention beyond the days of C, and considerable complexity. Such topics require a deal of defining. Luckily, there's no law within ISO that says all clauses in a programming language standard have to be the same length.</p>
<p>The second part of the C++ Standard defines the library. Here are the titles of the clauses:</p>

<table width=300>
<tr><td>17</td>
<td>Library introduction</td></tr>
<tr><td>18</td>
<td>Language support library</td></tr>
<tr><td>19</td>
<td>Diagnostics library</td></tr>
<tr><td>20</td>
<td>General utilities library</td></tr>
<tr><td>21</td>
<td>Strings library</td></tr>
<tr><td>22</td>
<td>Localization library</td></tr>
<tr><td>23</td>
<td>Containers library</td></tr>
<tr><td>24</td>
<td>Iterators library</td></tr>
<tr><td>25</td>
<td>Algorithms library</td></tr>
<tr><td>26</td>
<td>Numerics library</td></tr>
<tr><td>27</td>
<td>Input/output library</td></tr>
</table>

<p>Also, Annex D defines "Compatibility features," which is normative.</p>
<p>As with the language part, these clauses range from the very simple, such as the Diagnostics library, to the very extensive, such as the Localization library and the Input/Output library.</p>
<p>I intend to review these library clauses in order, from the standpoint of writing a set of tests for conformance to the C++ Standard. Such a set of tests is commonly called a <I>validation suite.</I> As I discussed last month, a validation suite is the most pragmatic tool for determining the degree of conformance of an implementation to a given specification, such as the C++ Standard.</p>
<p><a href="list1.htm">Listing 1</a> shows one such test, for the requirement in Clause 17 that headers can be included more than once. Of course, the test is hardly exhaustive. All it can do is include a couple of representative headers, and ensure that the header <B>&lt;cassert&gt;</B> gets the special treatment it deserves. The test itself consists of two chunks of code, one at file level and one inside function <B>main</B>.</p>
<p>Each of the chunks is wrapped with the same sort of ifdef logic, which allows a variety of conditional testing options when tests are run in batches. The header <B>"defs.h"</B> defines a number of functions and macros used for logging tests, such as <B>begin_chk</B> and <B>end_chk</B>, and for reporting the results of tests. The function <B>ieq</B>, for example, reports a failure if its two integer arguments are not equal. This particular code is representative of the tests in the Dinkum C++ Proofer, but you will probably find something similar in practically any validation suite.</p>

<H4><FONT COLOR="#000080">Clause 17 &#151; Library Introduction</FONT></H4>
<p>Clause 17 provides an overview of the library, defines a number of terms, and specifies several library-wide requirements. As such, it provides few objective statements that can be tested with executable code. For example, it makes pronouncements such as, "This library also makes available the facilities of the Standard C library, suitably adjusted to ensure type safety." Perhaps a tester can use this as an excuse to test the presence of Standard C library headers, but that opportunity comes often enough later. There's certainly no way to test whether the Standard C library has been "suitably adjusted," at least not without the details that follow. As standardese goes, Clause 17 contains a lot of unnecessary words.</p>
<p>A small island of testable wording appears about two thirds of the way into Clause 17. Subclause 17.4.2 talks about "Using the library." It lists all the required C++ headers and the ways they can be included in a program. It also discusses handler functions, such as the ones associated with <B>set_new_handler</B>, and replaceable functions, such as the simpler forms of <B>operator new</B>.</p>
<p>Some important tests are:</p>

<UL><LI>  whether all the headers are present, particularly those that depend on features added with Amendment 1 to the C Standard (<B>&lt;cwchar&gt;</B> and <B>&lt;cwctype&gt;</B>)</LI>
<LI>  whether any of the headers contain common reserved names, such as <B>first</B> or <B>open</B></LI>
<LI>  whether handler functions can indeed be replaced</LI>
<LI>  whether replaceable functions are indeed replaceable</LI></UL>

<H4><FONT COLOR="#000080">Clause 18 &#151; Language support Library</FONT></H4>

<p>Clause 18 defines the contents of the headers <B>&lt;limits&gt;</B>, <B>&lt;new&gt;</B>, <B>&lt;typeinfo&gt;</B>, and <B>&lt;exception&gt;</B>.</p>
<p>The header <B>&lt;limits&gt;</B> defines a template class useful for summarizing the numeric properties of an arbitrary type. It also defines explicit specializations for all the builtin arithmetic types, including the character types and <B>bool</B>.</p>
<p>The remaining three headers define library entities that are known to the language translator proper. For example:</p>

<UL><LI>  A <B>new</B> expression calls various forms of <B>operator new</B> declared or defined in <B>&lt;new&gt;</B>.</LI>
<LI>  A <B>typeid</B> operator yields an object of type <B>type_info</B>, defined in <B>&lt;typeinfo&gt;</B>.</LI>
<LI>  An unexpected exception results in a call to <B>unexpected</B>, declared in <B>&lt;exception&gt;</B>.</LI></UL>

<p>Clause 18 also imposes additional requirements, beyond those of the C Standard, on the headers <B>&lt;cstdarg&gt;</B>, <B>&lt;csetjmp&gt;</B>, <B>&lt;cstddef&gt;</B>, <B>&lt;cstdlib&gt;</B>, and <B>&lt;csignal&gt;</B>. Mostly, these requirements are additional constraints on types and function arguments, to deal with small differences between the worlds of C and C++.</p>
<p>Finally, Clause 18 contains vacuous remarks about the headers <B>&lt;climits&gt;</B>, <B>&lt;cfloat&gt;</B>, and <B>&lt;ctime&gt;</B>. They add nothing to requirements already spelled out in other parts of the C++ Standard.</p>
<p>Some important tests are:</p>

<UL><LI>  whether <B>&lt;limits&gt;</B> accurately reports all the properties of the builtin types</LI>
<LI>  whether all the definitions of <B>operator</B> <B>new</B> and <B>operator delete</B> are present</LI>
<LI>  whether the replaceable versions of <B>operator new</B> and <B>operator delete</B> are indeed replaceable</LI>
<LI>  whether objects yielded by <B>typeid</B> have the expected properties</LI>
<LI>  whether class <B>exception</B> serves as the base class for exceptions such as <B>bad_alloc</B>, <B>bad_cast</B>, and <B>bad_exception</B></LI></UL>

<H4><FONT COLOR="#000080">Clause 19 &#151; Diagnostics Library</FONT></H4>

<p>Clause 19 defines the contents of the header <B>&lt;stdexcept&gt;</B>. It defines a hierarchy of classes all based on class <B>exception</B>, defined in <B>&lt;exception&gt;</B>. The Standard C++ library uses a couple of these classes for reporting errors. For example, template class <B>basic_string</B> throws an object of class <B>length_error</B> if you attempt to construct an object too large to represent. The remaining classes are simply provided as a convenience for the programmer.</p>
<p>Clause 19 also contains vacuous remarks about the headers <B>&lt;cassert&gt;</B> and <B>&lt;cerrno&gt;</B>. They add nothing to requirements already spelled out in other parts of the C++ Standard.</p>
<p>Some important tests are:</p>

<UL><LI>  whether all the classes are defined, in the proper hierarchy</LI>
<LI>  whether each class defines the appropriate member functions</LI></UL>

<H4><FONT COLOR="#000080">Clause 20 &#151; General Utilities Library</FONT></H4>

<p>Clause 20 defines the contents of the headers <B>&lt;utility&gt;</B>, <B>&lt;functional&gt;</B>, and <B>&lt;memory&gt;</B>. These are all headers from the Standard Template Library, developed at Hewlett-Packard Labs and included as a block in 1994. The only wart is template class <B>auto_ptr</B>, which was added to <B>&lt;memory&gt;</B> at a later date and which is wholly incompatible with STL containers. Clause 20 also defines a number of terms, such as less-than comparison and copy construction, that apply across all STL headers.</p>
<p>The header <B>&lt;utility&gt;</B> defines template class <B>pair</B>, which is used throughout STL. It also defines the obvious template version of <B>operator!=</B> in terms of <B>operator==</B>, and template versions of <B>operator&gt;</B>, <B>operator&lt;=</B>, and <B>operator&gt;=</B> in terms of <B>operator&lt;</B>. The latter impose a <I>total ordering</I> on the operand types, which is also a fairly obvious set of definitions. But these four operators are relegated to namespace <B>std::rel_ops</B>, which renders them largely useless.</p>
<p>The header <B>&lt;functional&gt;</B> defines a slew of template classes and template functions that help you concoct <I>function objects</I> for use with various STL algorithms and containers. And the header <B>&lt;memory&gt;</B> defines template class <B>allocator</B>, which is the default allocator for all STL containers, and several other template classes and functions for managing memory.</p>
<p>Clause 20 also contains vacuous remarks about the header <B>&lt;ctime&gt;</B>. The remarks are slightly more extensive than those about <B>&lt;ctime&gt;</B> in Clause 18, but they still add nothing to requirements already spelled out in other parts of the C++ Standard.</p>
<p>Some important tests are:</p>

<UL><LI>  whether template class <B>pair</B> supports all the necessary constructors and conversions</LI>
<LI>  whether the template operators are suitably defined in namespace <B>std::rel_ops</B></LI>
<LI>  whether <B>&lt;functional&gt;</B> properly defines all the varied template classes and template functions for concocting function objects</LI>
<LI>  whether template class <B>allocator</B> meets the basic requirements for an allocator object</LI>
<LI>  whether template class <B>auto_ptr</B> supports all the necessary (and mildly unusual) constructors and conversions</LI></UL>

<H4><FONT COLOR="#000080">Clause 21 &#151; Strings Library</FONT></H4>

<p>Clause 21 defines the contents of the header <B>&lt;string&gt;</B>. This header of course defines template class <B>basic_string</B>, which serves as the basis for the types <B>string</B> (an alias for <B>basic_string&lt;char&gt;</B>) and <B>wstring</B> (an alias for <B>basic_string&lt;wchar_t&gt;</B>). The header also defines template class <B>char_traits</B> and a couple of explicit specializations, for character types <B>char</B> and <B>wchar_t</B>. This template class supplies the default <I>character traits</I> for template class <B>basic_string</B> and for a number of the iostreams template classes defined in Clause 27.</p>
<p>Clause 21 also imposes additional requirements, beyond those of the C Standard, on the headers <B>&lt;cstring&gt;</B> and <B>&lt;cwchar&gt;</B>. Specifically, it replaces several function signatures in each header with pairs of signatures that offer improved type safety.</p>
<p>Finally, Clause 21 contains vacuous remarks about the headers <B>&lt;cctype&gt;</B>, <B>&lt;cwctype&gt;</B>, and <B>&lt;cstdlib&gt;</B>. They add nothing to requirements already spelled out in other parts of the C++ Standard.</p>
<p>Some important tests are:</p>

<UL><LI>  whether the explicit specializations <B>char_traits&lt;char&gt;</B> and <B>char_traits&lt;wchar_t&gt;</B> have proper behavior</LI>
<LI>  whether template class <B>basic_string</B> lets you supply an alternate form of character traits</LI>
<LI>  whether template class <B>basic_string</B> properly defines all its numerous conversions and searches</LI>
<LI>  whether the specializations <B>basic_string&lt;char&gt;</B> and <B>basic_string&lt;wchar_t&gt;</B> behave as expected</LI>
<LI>  whether it is possible to specialize template class <B>basic_string</B> for a character type other than <B>char</B> or <B>wchar_t</B></LI></UL>

<H4><FONT COLOR="#000080">Clause 22 &#151; Localization Library</FONT></H4>

<p>Clause 22 defines the contents of the header <B>&lt;locale&gt;</B>. The header defines class <B>locale</B>, which encapsulates all the information traditionally associated with a Standard C locale, in an extensible format. Specifically, the information in each of the locale categories of Standard C is captured in one or more <I>locale facets.</I> A locale object is a non-mutable collection of references to facet objects. The header <B>&lt;locale&gt;</B> defines a number of template classes that specify two dozen or so standard facets. The programmer can derive new facets from specializations of these template classes, or introduce entirely new facets when constructing a locale object.</p>
<p>The template classes in Clause 22 parse numeric input and generate formatted numeric output for the iostreams classes. Other template classes do much the same for times and dates, and for monetary quantities. They also categorize characters, much like the traditional Standard C headers <B>&lt;ctype.h&gt;</B> and <B>&lt;wctype.h&gt;</B>. And they encapsulate rules for converting between byte streams and wide-character encodings, as when performing file input/output. Thus, Clause 22 is very large and touches on many aspects of input/output conversion and categorization.</p>
<p>Clause 22 also contains vacuous remarks about the header <B>&lt;clocale&gt;</B>. They add nothing to requirements already spelled out in other parts of the C++ Standard.</p>
<p>Some important tests are:</p>

<UL><LI>  whether multiple locale objects can indeed coexist</LI>
<LI>  whether all facets are implemented and behave as required</LI></UL>

<H4><FONT COLOR="#000080">Clause 23 &#151; Containers Library</FONT></H4>

<p>Clause 23 defines the contents of the headers <B>&lt;bitset&gt;</B>, <B>&lt;deque&gt;</B>, <B>&lt;list&gt;</B>, <B>&lt;map&gt;</B>, <B>&lt;set&gt;</B>, <B>&lt;vector&gt;</B>, <B>&lt;queue&gt;</B>, and <B>&lt;stack&gt;</B>. All but the first header define containers or container adapters for the Standard Template Library. Clause 23 also presents a number of requirements that are common to various subgroups of the STL containers.</p>
<p>The header <B>&lt;bitset&gt;</B> defines template class <B>bitset</B>, which describes a fixed-length sequence of Boolean elements intended as a replacement for the integer <I>mask</I> variables of traditional C programming.</p>
<p>Some important tests are:</p>

<UL><LI>  whether all containers are implemented and behave as required</LI>
<LI>  whether all containers use allocator objects as required</LI>
<LI>  whether containers have the required time complexity</LI></UL>

<H4><FONT COLOR="#000080">Clause 24 &#151; Iterators Library</FONT></H4>

<p>Clause 24 defines the contents of the header <B>&lt;iterator&gt;</B>. It defines a number of template classes and template functions that aid in constructing and categorizing STL iterators. Clause 24 also presents a number of requirements that are common to various categories of the STL iterators.</p>
<p>Some important tests are:</p>

<UL><LI>  whether all iterator template classes are implemented and behave as required</LI>
<LI>  whether iterators can be categorized as required</LI></UL>

<H4><FONT COLOR="#000080">Clause 25 &#151; Algorithms Library</FONT></H4>

<p>Clause 25 defines the contents of the header <B>&lt;algorithm&gt;</B>. The header defines a slew of template functions for performing nearly all of the STL <I>algorithms</I> &#151; operations on sequences delimited by iterators. It is thus a very large clause, but one with subclauses that are only loosely related.</p>
<p>Clause 25 also imposes additional requirements, beyond those of the C Standard, on the header <B>&lt;cstdlib&gt;</B>. Specifically, it replaces the lone function signatures for <B>bsearch</B> and <B>qsort</B> with pairs of signatures that offer improved flexibility in defining comparison functions.</p>
<p>Some important tests are:</p>

<UL><LI>  whether all algorithms are implemented and behave as required</LI>
<LI>  whether all algorithms use iterators of the appropriate categories as required</LI>
<LI>  whether algorithms have the required time complexity</LI></UL>

<H4><FONT COLOR="#000080">Clause 26 &#151; Numerics Library</FONT></H4>

<p>Clause 26 defines the contents of the headers <B>&lt;complex&gt;</B>, <B>&lt;valarray&gt;</B> and <B>&lt;numeric&gt;</B>. Clause 26 also presents a number of requirements that are common to the "value" types permissible as template parameters for template classes <B>complex</B> and <B>valarray</B>.</p>
<p>The header <B>&lt;complex&gt;</B> defines template class <B>complex</B>, for performing complex arithmetic, and explicit specializations for the three floating-point types.</p>
<p>The header <B>&lt;valarray&gt;</B> defines template class <B>valarray</B>, for performing numeric array operations that require various "slicing" operations.</p>
<p>The header <B>&lt;numeric&gt;</B> defines a handful of template functions for performing the numeric STL algorithms on sequences delimited by iterators.</p>
<p>Clause 26 also imposes additional requirements, beyond those of the C Standard, on the headers <B>&lt;cmath&gt;</B> and <B>&lt;cstdlib&gt;</B>. Specifically, it overloads a number of functions for arguments of additional basic types. All the functions declared in <B>&lt;math.h&gt;</B> must also be provided for arguments of type <B>float</B> and <B>long double</B>.</p>
<p>Some important tests are:</p>

<UL><LI>  whether all three explicit specializatons of <B>complex</B> are implemented to the required precisions</LI>
<LI>  whether all of the indexing (slicing) operations on <B>valarray</B> behave as required</LI>
<LI>  whether all the numeric algorithms are implemented, use iterators of the appropriate categories, and have the required time complexity</LI>
<LI>  whether all three sets of <B>&lt;cmath&gt;</B> functions are implemented to the required precisions</LI></UL>

<H4><FONT COLOR="#000080">Clause 27 &#151; Input/Output Library</FONT></H4>

<p>Clause 27 defines the "iostreams" classes &#151; based on the traditional C++ library classes for performing input/output. Specifically, it defines the contents of the headers <B>&lt;iosfwd&gt;</B>, <B>&lt;ios&gt;</B>, <B>&lt;istream&gt;</B>, <B>&lt;ostream&gt;</B>, <B>&lt;streambuf&gt;</B>, <B>&lt;iomanip</B>, <B>&lt;fstream&gt;</B>, <B>&lt;sstream&gt;</B>, and <B>&lt;iostream&gt;</B>. Clause 27 also presents a couple requirements that are common to several of the iostreams classes.</p>
<p>Needless to say, this is a very large clause. It is half again larger than Clause 22 Locales, which edges out Clause 25 Algorithms as the second largest of the library clauses. And unlike these runners up, Clause 27 defines classes that are highly interrelated, among themselves and the features defined in Clause 22. Isolating features for separate testing is thus all the more difficult.</p>
<p>Clause 27 also contains vacuous remarks about the header <B>&lt;cstdio&gt;</B>. They add nothing to requirements already spelled out in other parts of the C++ Standard. Finally, Clause 27 threatens to say something about the headers <B>&lt;cstdlib&gt;</B> and <B>&lt;cwchar&gt;</B>, but never delivers on the threat.</p>
<p>Some important tests are:</p>

<UL><LI>  whether the basic machinery of template classes <B>basic_ios</B> and <B>basic_streambuf</B> behaves as required</LI>
<LI>  whether the derived classes for input/ouput to files (<B>&lt;fstream&gt;</B>) and strings (<B>&lt;sstream&gt;</B>) behave as required</LI>
<LI>  whether classes such as <B>basic_istream&lt;char&gt;</B> and <B>basic_ostream</B> demonstrate the proper dependency on "imbued" locale objects when parsing and generating formatted text</LI>
<LI>  whether classes such as <B>basic_fstream&lt;wchar_t&gt;</B> demonstrate the proper dependency on imbued locale objects when converting to and from external byte streams</LI>
<LI>  whether file-positioning operations behave as required for text and binary files</LI></UL>

<H4><FONT COLOR="#000080">Annex D &#151; Compatibility Features</FONT></H4>

<p>Annex D defines a number of features that are <I>deprecated</I> &#151; still part of the C++ Standard but candidates for future removal. These include a few language features plus several library features:</p>

<UL><LI>  the use of the Standard C headers, such as <B>&lt;stdio.h&gt;</B> (You are encouraged to use <B>&lt;cstdio&gt;</B> instead.)</LI>
<LI>  a handful of traditional type definitions, such as <B>ios::io_state</B> (You are encouraged to use <B>ios_base::iostate</B> instead.)</LI>
<LI>  the header <B>&lt;strstream&gt;</B> (You are encouraged to use the header <B>&lt;sstream&gt;</B> instead.)</LI></UL>

<p>Some important tests are:</p>

<UL><LI>  whether all Standard C headers are present</LI>
<LI>  whether names are defined in the appropriate namespaces among the Standard C and Standard C++ headers</LI>
<LI>  whether function overloading can distinguish pairs of types such as <B>ios::io_state</B> and <B>ios_base::iostate</B></LI>
<LI>  whether the derived classes for input/ouput to character buffers (<B>&lt;strstream&gt;</B>) behave as required</LI></UL>

<H4><FONT COLOR="#000080">In Practice</FONT></H4>

<p>Performing all the tests outlined above requires tens of thousands of lines of code, distributed over a couple of thousand tests. Please note that such conformance tests are still merely "anecdotal" &#151; they make no attempt to be exhaustive. Instead, they rely on the testing of representative, or critical, cases to show up likely failures. Lots of other forms of testing can also be appropriate:</p>

<UL><LI>  If your goal is, say, to hunt down marginal bugs in output formatting functions, you might want to supplement such tests with a test generator that tries many variations on a theme. (This is a common technique when testing expressions in the language part of a validation suite.)</LI>
<LI>  If your goal is, say, to unearth performance problems and memory leaks under extreme conditions, you might want to add stress tests. These are particularly useful for exercising the STL algorithms and containers.</LI>
<LI>  If your goal is to check for strict conformance to the C++ Standard, you might want to add <I>deviance</I> tests &#151; tests that should fail to compile, or that should throw an exception at runtime that is not strictly necessary. A strict implementation can be useful when developing code intended to be highly portable.</LI></UL>

<p>We at Dinkumware are continually on the lookout for such useful tests to supplement what we already use. We write such tests, or commission them, when the need becomes apparent. But mostly, we've had good success with just the couple of thousand conformance tests in the Dinkum C++ Proofer.</p>
<p>I should point out, before I quit, that the Dinkum C++ Library, in conjunction with the Dinkum C Library, is the only library we've found so far that has successfully passed <I>all</I> the tests in the Proofer. For the past two years, the C++ front end from Edison Design Group has been complete enough to compile a fully conforming Standard C++ library. Since the EDG front end is widely used, that means many compilers are capable of full library support today. Of course, several gray areas remain in the interpretation of the C++ Standard, so there's always room to quibble about what full conformance means. But, as a practical matter, any past worries about whether the Standard C++ library is fully implementable have been laid to rest.</p>
<p>As the mathematicians would say, a solution exists.</p>

<p><i><B>P.J. Plauger</B> is Senior Editor of <I>C/C++ Users Journal</I> and President of Dinkumware, Ltd. He is the author of the Standard C++ Library shipped with Microsoft's Visual C++, v5.0. For eight years, he served as convener of the ISO C standards committee, WG14. He remains active on the C++ committee, J16. His latest books are <I>The Draft Standard C++ Library</I>, <I>Programming on Purpose</I> (three volumes), and <I>Standard C</I> (with Jim Brodie), all published by Prentice-Hall. You can reach him at <B>pjp@plauger.com</B>.</i></p>

<h4><a href="../../../source/2000/apr00/plauger.zip">Get Article Source Code</a></h4>

</blockquote></body></html>
