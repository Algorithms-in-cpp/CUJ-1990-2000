


<HTML>
<HEAD>

<TITLE>October 1990/Doctor C's Pointers&reg;</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tococt.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Doctor C's Pointers&reg;<A name="0231_0139"><A name="0231_0139"></font></h2><P>
<h3 align="center"><A name="0231_0000"><A name="0231_0000">Puzzles, Part 1</h3><P>
<h3 align="center"><font color="#800000">Rex Jaeschke</font></h3><hr><blockquote><P>
<P><i><A name="0231_0000"><A name="0231_0000">Rex Jaeschke is an independent computer consultant, author and seminar leader. He participates in both ANSI and ISO C Standards meetings and is the editor of The Journal of C Language Translation, a quarterly publication aimed at implementors of C language translation tools. Readers are encouraged to submit column topics and suggestions to Rex at 2051 Swans Neck Way, Reston, VA 22091 or via UUCP at uunet!aussie!rex or aussie!rex@uunet.uu.net.</i></P><P>
If you have a solid background in one of various high-level languages, you can come to grips with much of C relatively quickly. However, there are quite a few "dark corners" of the language, preprocessor and library. In this issue, I'll begin a series of articles that examines a few of these darker corners involving functions. I've included the answers to the problems presented, but as a check to see how you are doing try to answer them on your own. (Even if you are a seasoned assembly language programmer, C still has enough idiosyncrasies of its own that you must master.)<P>
Another reason for my presenting these puzzles is that they provide lots of interesting but unrelated bits of information. As such, they don't necessarily warrant a column of their own.<P>
<h4><FONT COLOR="#000080"><A name="0231_013A">The Puzzles<A name="0231_013A"></FONT></h4></P>
1. If there is no function prototype in scope when a function is called, what does the compiler do? Why is it a bad idea to omit function declarations when those functions are called?<P>
2. What is the order of evaluation in the expression <I>a() - b() * c()?</I></FONT><P>
3. Try compiling the following program. Explain why it runs without error.<P>
<pre>#include &lt;stdio.h&gt;

main()
{
/*1*/  printf("Hello\n");
/*2*/  (printf)("Hello\n");
/*3*/  (*printf)("Hello\n");
/*4*/  (**printf)("Hello\n");
/*5*/  (***printf)("Hello\n");
}</pre>
4. Given the declaration <I>int i, j = 2</I>;, describe everything you can about expression <I>i = (*v[++j]) (j)</I>.</FONT></FONT></FONT><P>
5. When function <I>f</I> is called, what is the type of each argument actually passed to it? How must the function <I>f</I> be defined for the linkage to work reliably?</FONT></FONT></FONT></FONT><P>
<pre>void f(char, short, ...);
char c;
short s;
float f;

f(c, s, f);</pre>
6. Given <I>int f(void);</I>, what is the value of the following expressions?</FONT></FONT><P>
<pre>sizeof(f)
sizeof((f))
sizeof(f())
sizeof(&amp;f)</pre>
<h4><FONT COLOR="#000080"><A name="0231_013B">The Solutions<A name="0231_013B"></FONT></h4></P>
1. When the compiler comes across a call to a function for which there is no function prototype in scope, it assumes that function has a return type of <I>int</I> and generates code accordingly. If the function actually has some other return type the behavior is undefined. The program might work, for example, where a <I>long</I> was returned and types <I>long</I> and <I>int</I> have the same representation. However, if an eight-byte <I>double</I> were returned and an <I>int</I> has four bytes, the return value would be misinterpreted.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Since the compiler sees no prototype, it has no information about the number and type of arguments expected. As such, it cannot diagnose invalid argument lists nor implicitly convert argument types as appropriate. Furthermore, if the function actually expects a variable number of arguments, ANSI C states that a call to it without a prototype (containing the ellipses notation) in scope, results in undefined behavior.<P>
Any arguments having "narrow" type (<I>char, short,</I> or <I>float</I>) are converted to their "wide" equivalents (<I>int, int,</I> or <I>double</I>, respectively.) Of course, unsigned narrow types are converted to their unsigned wide equivalents.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
A few compilers and static analysis checkers (i.e., <I>lint</I>) issue an informational message when an undeclared function is called. This is a valuable capability, and it usually points out the omission of the corresponding <I>#include</I> directive, a problem that would otherwise go undetected and potentially require hours of debugging.</FONT></FONT></FONT></FONT><P>
2. There is considerable misunderstanding about operator precedence and order of evaluation. The vast majority of C programmers I have come across think the two aspects are related if not the same. They are NOT!<P>
Regarding precedence, by inserting the implied grouping parentheses, the expression <I>a() - b()</I> * <I>c()</I> becomes <I>a()</I> - <I>(b()</I> * <I>c())</I>. That is, the multiplication operator has higher precedence than the subtraction. However, this simply tells the compiler how to group subexpressions when it is building its parse tree. Specifically, it provides no information as to the order in which the three functions are called. That is up to the order of evaluation, a property specific to each operator.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
In short, only five operators (<I>&amp;&amp;</I>, | |, <I>?</I>:, <I>()</I>, and comma) give any guarantee about order of evaluation of their operands, and multiplication and subtraction are not in that set. For all other operators the order of evaluation of their operands is undefined. That is, the order need not be documented and it need not be reproducible <I>even</I> in different places in the <I>same</I> source file during the <I>same</I> compilation.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The bottom line is that the order in which the three functions are called is undefined. In fact, unless the functions somehow interact with each other via global data or pointers to local data, their order of calling won't affect you and that is by far the most common case.<P>
Adding grouping parentheses to an expression can <I>never </I>change the evaluation order of subexpressions.<P>
3. All of the calls to <I>printf</I> are equivalent. Here's why. The function call operator requires a postfix expression to precede it. This expression must denote the function to be called. In the first case, this expression is simply <I>printf</I>, the function's name. In case 2 we have the same situation since a parenthesized expression has the same type and value as the unparenthesized expression.</FONT></FONT></FONT></FONT><P>
An expression that designates a function is converted to the address of that function except when it is the operand of the function call operator (amongst other places). In cases 3-5, this expression is the operand of the indirection operator and, therefore, it is converted to a function pointer. Then, that pointer is dereferenced giving a function designator expression. And in cases 4 and 5, this expression is again converted to a pointer which is again dereferenced, etc. In all cases we eventually finish up with an expression that designates a function and is the operand of the function call operator resulting in that function being called.<P>
4. The expression <I>(...)(j) </I>is a call to some function with one argument. And although an <I>int</I> expression is passed in, without seeing the prototype for that function we don't know if the <I>int</I> will be passed as is or converted to something like a <I>long</I>, for example. Similarly, we don't know the function's return type but for the example to compile, the return type must be assignment-compatible with <I>int</I> since that's the type of the object it's being assigned to. (This requires the return type to be one of the arithmetic types.)</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The expression <I>*v[++j]</I> designates the function to be called. Therefore, <I>v[++j]</I> is a pointer to that function and <I>v</I> either points to an element of an array of functions or is the name of such an array. Since <I>j</I> uses the prefix ++ operator, the function called is that pointed to by <I>v[3]</I>. However, the value of the argument passed to that function is undefined. (It would either be 2 or 3.) The order in which a function's arguments are evaluated is undefined. And whether the function designating expression is evaluated before or after the argument list (or even in between arguments), is also undefined.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
On the other hand, the expression <I>(*v[j]) (++j)</I> always results in 3 being passed to the function, however, it is undefined as to which function is actually being called &#151; it could be the one pointed to by either<I> v[2]</I> or<I> v[3]</I>.</FONT></FONT></FONT></FONT></FONT></FONT><P>
5. With the introduction of function prototypes, ANSI C provides a way for compilers to deal with narrow types directly, without widening. In this example, the prototype <I>void f(char, short, ...)</I>; indicates that given narrow types for the first two arguments, the compiler is permitted to not widen them as traditionally required. That is, it is up the implementor whether they are widened or not. ANSI C does <I>not</I> require that they be kept narrow. A compiler may chose to widen both, widen neither or widen one but not the other. As long as you define the function exactly the same using the new definition style (including the ellipses), you are guaranteed the caller and callee will agree. Whatever the compiler's strategy, it must be the same for compiling the prototype and the corresponding function definition. As such, the strategy is transparent to the programmer. (Of course, you must find out what that strategy is if you are writing the called function in some language other than C.)</FONT></FONT><P>
In the case of the third and subsequent arguments, ANSI C requires they be widened (without exception) as defined by K&amp;R.<P>
See what your compiler's strategy is in this case. Is it documented or did you have to work it out for yourself?<P>
6. The <I>sizeof</I> operator computes the size of an object of a given type. Since it requires an operand (either an expression or type name) having an object type, it cannot handle function or incomplete types. As such, <I>sizeof(f)</I> is invalid just as <I>sizeof(int ())</I> is, assuming the declaration <I>int f()</I>;. Similarly, <I>sizeof ((f))</I> is also invalid since a parenthesized expression has the same type and value as the unparenthesized expression.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
In Solution 3, we learned there are instances in which function designating expressions are not converted to function pointers. One such situation is when they are the operand of the <I>sizeof </I>operator. Therefore, <I>sizeof(f)</I> does <I>not</I> produce the size of a pointer to such a function, as some substandard compilers have reported in the past.</FONT></FONT></FONT></FONT></FONT></FONT><P>
In <I>sizeof(f())</I>, the size of the function's return type is determined. This is possible provided the return type is not incomplete (as is the case with <I>void</I>). The function, could however, return a pointer to an incomplete type.</FONT></FONT></FONT></FONT><P>
In the final case, <I>sizeof(&amp;f)</I>, the type of the operand is pointer to function returning some object or incomplete type, and that is permitted. However, when I tested this, several compilers, including some claiming ANSI C conformance, incorrectly rejected this expression apparently because they treat the <I>&amp;</I> as being redundant. As far as I can tell, it always is <I>except</I> in this one case.</FONT></FONT></FONT></FONT></FONT></FONT><P>
Next month we'll continue with this series by looking at arrays and subscripting.<P>
</BLOCKQUOTE>
</BODY>
</HTML>
