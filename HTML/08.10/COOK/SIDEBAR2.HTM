<HTML><HEAD><TITLE>October 1990/Portable Transaction Tracking/Sidebar</TITLE></HEAD><BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h3 align="center"><FONT FACE="Garamond" COLOR="#000080">Function Descriptions</FONT></h3><hr>
<BLOCKQUOTE>
<B>FHANDLE VFOpen(filename,flags,permissions)</B> This function is used to open your program's data file(s). The filename must be fully qualified since it is written to the transaction log file. The flags and permissions are any valid combination permitted by the operating system. The function returns <I>BADFHANDLE</I> if the file cannot be opened. Otherwise it returns a valid <I>FHANDLE.</I></FONT></FONT></FONT><P>
<B>BOOL VFClose( dataHandle )</B> This functions closes a program's data file(s). It returns <I>TRUE</I> if successful, and <I>FALSE</I> otherwise. The <I>dataHandle</I> must have been obtained from a call to <I>VFOpen()</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<B>FHANDLE OpenTransact( logName, logType )</B> As with data files, the logName must be a fully qualified filename. The logType can be either <I>NORMAL_TRANS</I> or <I>DEL_ON_CLOSE</I>. If you specify <I>NORMAL_TRANS</I>, you must make an explicit call to <I>DeleteTransactionFile()</I> after closing the log file. If you specify <I>DEL_ON_CLOSE</I>, the log file is automatically deleted after it is closed. The function returns <I>BADFHANDLE</I> if the log file cannot be created or if the rollback of an existing log file failed. Otherwise, a valid <I>FHANDLE</I> is returned.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<B>BOOL CloseTransact( logHandle )</B> To close a transaction log file, pass this function the <I>FHANDLE</I> returned by <I>OpenTransact()</I>. It will return <I>TRUE</I> if the log file is closed and, if specified, deleted. Otherwise, <I>FALSE</I> is returned.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<B>BOOL DeleteTransactionFile( logName )</B> If you specify <I>NORMAL_TRANS</I> alone in a call to <I>OpenTransact()</I>, you must call this function with the same logName when you wish to commit all transactions recorded in the log file. The function will return <I>TRUE</I> if the file is successfully deleted, and <I>FALSE</I> otherwise.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<B>BOOL BeginTransaction( dataHandle, logHandle )</B> This function associates the data file with the indicated transaction log file. Subsequent changes to the data file will be tracked using the log file. <I>dataHandle</I> is the return value of <I>VFOpen()</I> and logHandle is from <I>OpenTransact(). TRUE</I> is returned if the association is established; <I>FALSE</I> otherwise.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<B>BOOL EndTransaction( dataHandle, logHandle )</B> This function terminates an update session begun with a call to <I>BeginTransaction()</I>. It takes the same parameters as the corresponding <I>BeginTransaction</I> call. <I>TRUE</I> is returned if the tracking is discontinued.</FONT></FONT></FONT></FONT></FONT></FONT><P>
<B>int VFRead( dataHandle, buffer, bytes )</B> This function retrieves data from the data file associated with <I>dataHandle</I>. It assumes that buffer is large enough to hold the number of bytes specified by bytes. On error it returns <I>-1</I>, otherwise, it returns the number of bytes retrieved from the data file.</FONT></FONT></FONT></FONT><P>
<B>int VFWrite( dataHandle, buffer, bytes )</B> This function writes up to <I>bytes</I> characters from buffer to the data file associated with <I>dataHandle</I>. If the data file has been associated with a transaction log file using <I>BeginTransaction()</I>, the necessary transaction records will be recorded. The return value is <I>-1</I> if an error occurs; otherwise the number of bytes written to the data file is returned.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<B>long VFLSeek( dataHandle, offset, whence )</B> This function repositions the current file location of the data file specified by <I>dataHandle</I>. Repositioning is relative to either the start of the file (<I>whence=0</I>), the current file position (<I>whence=1</I>) or the end of file (<I>whence=2</I>). The file position may not be positioned before byte 0 or beyond the current end-of-file. The return value is <I>-1L</I> in case of error. Otherwise, the new file position is returned.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<B>long VFTell( dataHandle )</B> This function returns the current file position; a shorthand for <I>VFLSeek( dataHandle, 0L, 0)</I>.</FONT></FONT><P>
<B>BOOL VFLocking( dataHandle, lockType, bytes )</B> This function locks a portion of a data file. The lock starts at the current file position and extends for the specified number of bytes. The <I>lockType</I> may be either <I>SHARED_LOCK</I> (permits other processes to read the bytes), <I>EXCLUSIVE_LOCK</I> (blocks all access to the locked bytes) or <I>UNLOCK_BYTES</I> (releases locks on the bytes). The return value is <I>TRUE</I> if the operation is successful or <I>FALSE</I> if it fails.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<B>BOOL VFChangeSize( dataHandle, newSize )</B> This function changes the length of the data file to the number of bytes specified. If the file is extended, the new region is filled with zeros. currently being tracked, the proper transaction record is written to the log file. The function returns <I>TRUE</I> if the file's size is successfully altered. NOTE: This function always returns <I>FALSE</I> (failure) under SCO UNIX.</FONT></FONT></FONT></FONT><P>
<B>BOOL VFStat( dataHandle, statStruck )</B> This function fills the <I>stat</I> structure parameter with environment specific data concerning the file associated with <I>dataHandle</I>. It returns <I>TRUE</I> if able to retrieve the data; else <I>FALSE</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<B>int VFLastError()</B> Whenever a function returns a failure code, calling this function will indicate the cause of the problem. This function should be called immediately as all functions zero the error code variable on entry.<P>

</BLOCKQUOTE>
</BODY>
</HTML>
