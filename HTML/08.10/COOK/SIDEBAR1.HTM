<HTML><HEAD><TITLE>October 1990/Portable Transaction Tracking/Sidebar</TITLE></HEAD><BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h3 align="center"><FONT FACE="Garamond" COLOR="#000080">Transaction Record Format</FONT></h4><hr>
<BLOCKQUOTE>
In order to undo the changes made to a database file, the following information must be known:<P>
<UL><li>the fully qualified database file's name,</li>
<li>the mode and permissions used to open the database file,</li>
<li>the offset in the database file where the data was changed,</li>
<li>the number of bytes changed,</li>
<li>a copy of the altered data and</li>
<li>the type of alteration which took place.</li></UL>
This information forms the core of a transaction record in a transaction log file.<P>
<A href="fig1.htm">Figure 1</a> shows the specific format of a transaction record. Since both the length of the filename and the number of bytes in the data area may vary, both of these values are stored in the <I>TRollBackStruct</I>. (Note: the null terminator of the filename is also recorded in the transaction record for use during a rollback.) While it is possible to make both of these areas a fixed size, doing so would result in unnecessary data being written to disk.</FONT></FONT><P>
Since a transaction record has a fixed maximum size (<I>XFER_BYTES</I>), a single user-initiated file modification may require multiple transaction records.</FONT></FONT><P>
For a file extension operation (appending new data or changing the file size so it is larger), no bytes are recorded in the data area. Instead, the value in the file offset field of the structure is the old file length.<P>
Transaction records must be rolled back in reverse chronological order. To do so efficiently, we must be able to find the beginning offset of each record. Storing the total record size at the start of each record enables the system to seek to the location where the next record should be located.<P>
Once the end of the last record is found, the fixed size <I>TRollBackStruct</I> at the end of the record can be retrieved. This structure holds enough information to retrieve both the filename and logged data and position the log file at the end of the previous record.</FONT></FONT><P>
Each transaction record must be recorded in a single file<I> write()</I> call. Multiple writes would open a window in which the system may fail, leaving a partial transaction record in the log file. Multiple writes would also add unnecessary file system overhead.</FONT></FONT><P>
</BLOCKQUOTE>
</BODY>
</HTML>
