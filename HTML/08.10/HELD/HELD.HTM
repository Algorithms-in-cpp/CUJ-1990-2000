


<HTML>
<HEAD>

<TITLE>October 90/Function Returns</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tococt.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">Function Returns:<A name="0229_0131"><A name="0229_0131"></font></h2><P>
<h3 align="center"><A name="0229_0000"><A name="0229_0000">How To Use Them</h3><P>
<h3 align="center"><font color="#800000">Arthur Held</font></h3><hr><blockquote><P>
<P><i><A name="0229_0000"><A name="0229_0000">Arthur Held is vice-president of Glacier Software, publishers of Pic Trak, a photo management and labeling system for businesses, and amateur and semi-professional photographers. He also teaches C Language courses for VoTech and Adult Continuing Education programs. Art can be reached at Glacier Software, PO Box 3358, Missoula MT 59806. (406) 251-5870.</i></P><P>
Fully understanding what you can (and can't) do with function return values will help you understand others' code and the operation of the standard library functions. Mastering the C return mechanism can also help you write better code and more useful, flexible functions. This tutorial will survey the various return mechanisms available in C, and show you how and when to use each.<P>
<h4><FONT COLOR="#000080"><A name="0229_0132">The Basics<A name="0229_0132"></FONT></h4></P>
A C function may or may not return a value. You can determine whether a library function returns a value by checking the manual. For other functions, the same information is available in either the function prototype (often found in an include file) or the function header. The prototype<P>
<pre>int my_func(int x);</pre>
tells us that <I>my_func()</I> will return an integer. Alternatively,</FONT></FONT><P>
<pre>void my_func_2(int x);</pre>
tells us <I>my_func_2()</I> returns <I>void</I>, i.e., it doesn't return anything.</FONT></FONT></FONT></FONT><P>
Generally, when a function does not return a value, two specific conditions should be met: first, the function should have no useful information to pass back, and second, nothing can go wrong during its execution, at least nothing that the function can detect.<P>
For example, the standard library <I>srand()</I> function reseeds the random number generator. <I>srand()</I> has no information to send back, (one uses <I>rand()</I> to actually get a random number.) There is also nothing to go wrong, so the function is written to return nothing. Thus the prototype in the include file <I>math.h</I> gives the return type as <I>void</I>:</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>void srand(unsigned seed);</pre>
Conversely, there are two cases when you should be getting and using a returned value:<P>
<UL><li>when the function called has information to pass back and</li>
<li>when you need to know if something has gone wrong.</li></UL>
Functions are seldom as simple as <I>srand()</I>; functions with both result and error return values are more prevelant than those without.</FONT></FONT><P>
In addition to deciding <I>whether</I> to return a value, you must also decide <I>how</I> to use the returned value. There are six common cases:<P>
<UL><li>discard it</li>
<li>assign it to a variable,</li>
<li>use it in a formula without assignment,</li>
<li>assign and use it within a conditional test,</li>
<li>use the result in a conditional test without assigning it, and</li>
<li>pass it as an argument to another function.</li></UL>
<h4><FONT COLOR="#000080"><A name="0229_0133">Cases 1 &amp; 2<A name="0229_0133"></FONT></h4></P>
The first two cases are straightforward:<P>
<pre>char ch;
/* idle until user presses a key */
printf("Press any key to continue....");
getch();

/* or wait for a response, then save it */
printf ("Please enter your menu selection: ");
ch = getch();</pre>
However, many functions return a special value (or flag) to indicate that something has gone wrong. For example, <I>fopen ()</I> opens a file, returning a pointer to a structure <I>typedef</I><I>ed</I> as <I>FILE</I>:</FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>FILE *fp;
fp = fopen("MYFILE.DAT", "r");</pre>
After a successful <I>fopen ()</I> call, <I>fp</I> will have been assigned a pointer.</FONT></FONT></FONT></FONT><P>
But, if the file is not found <I>fopen()</I> will not create it (since we have told <I>fopen()</I> to open the file in the <I>"r"</I> (read) mode. When <I>fopen()</I> is unable to open the file, it returns a flag telling you it has failed. This flag is <I>NULL </I>(or<I> 0</I>). Since the C standard guarantees that no pointer will be zero, when you get a <I>NULL</I> back from <I>fopen()</I>, you know something is wrong.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
To test for this result, use:<P>
<pre>if (fp == NULL)
   printf("file not found\n");
else
   printf("file found\n");</pre>
<h4><FONT COLOR="#000080"><A name="0229_0134">Case 3<A name="0229_0134"></FONT></h4></P>
Assignment is not required before using a returned value. The following example determines the hypotenuse of a right triangle. Given a function called <I>square()</I> that returns the square of a <I>double</I> as a <I>double</I>, you can state:</FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>double square(), sqrt();
double side_a, side_b, temp, hyp;
temp = square(side_a) +
square (side_b);
hyp = sqrt(temp);</pre>
In the third line, the squares are determined and returned by the function square, but the returns are never explicitly assigned. Rather, these results are added together, and the sum is placed in the variable <I>temp</I>.</FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0229_0135">Case 4<A name="0229_0135"></FONT></h4></P>
Because C assignment "statements" are actually expressions and have a value, you can merge the function call into a conditional test. Using this technique the test for <I>fopen()</I>'s success becomes:</FONT></FONT><P>
<pre>FILE *fp;
if ((fp = fopen("MYFILE.DAT",
"r")) == NULL)
     printf("file not found\n");
     else
        printf ("file exists\n");</pre>
At first glance<P>
<pre>if (fp = fopen("MYFILE.DAT",
"r") == NULL)</pre>
appears to be an equivalent test. It is <I>not!</I> The order of precedence puts the comparison operator == above the assignment operator =. Thus, leaving out the parentheses results in a statement that evaluates as:<P>
<pre>if (fp = (fopen ("MYFILE. DAT",
"r") == NULL))</pre>
Without the parentheses, the test compares the value returned by <I>fopen()</I> with <I>NULL</I>, and then assigns the result of the comparison to the variable <I>fp</I>.</FONT></FONT></FONT></FONT></FONT></FONT><P>
If <I>fopen()</I> failed, returning a <I>NULL</I>, then the evaluated condition is <I>NULL</I> == <I>NULL</I>, which evaluates to <I>TRUE</I>. On failure, <I>TRUE</I> (non-zero and probably <I>1</I>) will be assigned to <I>fp</I>. Since <I>1</I> is non-zero, the overall if conditional also evaluates <I>TRUE</I>, and the program appears to work correctly, reporting a failure.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
If the file is present and <I>fopen()</I> can successfully open it, <I>fopen()</I> returns a non-zero value (the pointer to the structure <I>FILE</I>). This non-zero is compared with <I>NULL</I>. The condition:</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>&lt;some non-zero pointer value&gt; ==
   NULL</pre>
is <I>FALSE</I>, so <I>fp</I> is assigned a <I>0</I>. The else branch is taken, and again, the program appears to work correctly, reporting that file present. Unfortunately, when you attempt to use the pointer <I>fp</I> (which now contains <I>0</I>, rather than a valid pointer to the opened file,) to access a file, you get an error.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0229_0136">Case 5<A name="0229_0136"></FONT></h4></P>
Often you need to check and act upon the result returned by a function only once. <A href="example1.htm">Example 1</a>,
 for instance, assigns the result of <I>fgets()</I> to <I>more_data</I>, but never uses <I>more_data</I> again.</FONT></FONT></FONT></FONT></FONT></FONT><P>
The function <I>fgets()</I> returns the address of buff when it successfully reads data. When it reaches end-of-file, or if there is an error reading the file, it returns <I>NULL</I>. You can simplify the <I>fgets()</I> statement in <A href="example1.htm">Example 1</a>
by leaving off the assignment, yielding:</FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>while(fgets(buff, 180, fp) != FALSE)</pre>
Since in a conditional test, any non-zero value is considered <I>TRUE</I>, you don't really need to compare the return value with FALSE. Instead you can write</FONT></FONT><P>
<pre>while(fgets(buff, 180, fp))</pre>
As long as <I>fgets()</I> doesn't return <I>NULL</I>, the loop continues; on end-of-file, (or a file handling error), the loop terminates.</FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0229_0137">Case 6<A name="0229_0137"></FONT></h4></P>
One function's return value can be used immediately as the argument to a second function. This coding style can shorten and clarify a program. (But be careful, the implementation of some simple functions as macros in some standard libraries may produce confusing results!)<P>
Perhaps the most common use of function return values as function arguments is in conjunction with printf(). For example:<P>
<pre>double i = 5;
printf("the square root of %3.1f is %3.1f\n", i,
sqrt(i));</pre>
This evaluation requires two function calls. While collecting the arguments for the call to <I>printf(), sqrt()</I> is encountered and evaluated (called). The <I>sqrt()</I> return value becomes the third argument. Only then is <I>printf()</I> called.</FONT></FONT></FONT></FONT></FONT></FONT><P>
Many libraries implement certain functions as macros. These code substitutions simplify and clarify code and also speed execution by eliminating a function call.<P>
For example, to convert a character to upper case you need only make a range comparison or do a table lookup to determine whether the character is lower case. Lower case letters can be converted to the corresponding upper case code by decrementing the ASCII value as necessary. For example:<P>
<pre>char ch;
(if ch &gt;= 'a' &amp;&amp; ch &lt;= 'z' ? ch - ('a' - 'A') : ch);</pre>
(Note the use of colon operator.) Since the translation to upper case is often needed, compiler authors often put it into a handy macro disguised as a function call:<P>
<pre>#define toupper(x)  \
   (if x&gt;='a' &amp;&amp; x &lt;= 'z' ?
      ch -  ('a' -  'A') : ch);</pre>
(This <I>define</I> is generally in the include header file <I>ctype.h</I>, provided with the compiler.)</FONT></FONT></FONT></FONT><P>
With this macro definition present,<P>
<pre>ch = toupper(ch);</pre>
will translate the character, with code that looks like a function call, but that doesn't invoke the overhead of a function call.<P>
Your compiler's macro is probably more complex (and more efficient), but still hides the same pitfall for the uninitiated: the macro argument is substituted (and evaluated) in more than one place.<P>
Consider the statement:<P>
<pre>ch = toupper(getch());</pre>
When <I>toupper()</I> is implemented as a real function call, it works fine; <I>getch()</I> is called, and the returned value is passed to the function <I>toupper()</I>. But if <I>toupper()</I> is really implemented with the macro given earlier, when expanded it becomes</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>(if getch()&gt;='a' &amp;&amp; getch() &lt;= 'z' ?
   ch - ('a' -  'A') : ch);</pre>
In this expansion, <I>getch ()</I> will be called <I>twice</I> before the evaluations are complete! Clearly, the best way to write this code is the old, longer way:</FONT></FONT><P>
<pre>ch = getch();
ch = toupper(ch);</pre>
Using function calls as arguments is often the briefest, cleanest coding style. However, if you are to avoid this multiple evaluation trap, you must know which "functions" are really implemented as macros. These macros will all reside in one of the standard header files. The most commonly used macros are probably those in <I>ctype.h</I> and <I>math. h</I>.</FONT></FONT></FONT></FONT><P>
You can gain additional economies of expression by combining directly returned function values in equations used as arguments to other functions.<P>
For example, these two lines from the earlier hypotenuse example:<P>
<pre>temp = square(side_a) + square(side_b);
hyp = sqrt(temp);</pre>
could be condensed to:<P>
<pre>hyp = sqrt(square(side_a) + square(side_b));</pre>
eliminating the variable <I>temp</I> entirely, and representing the entire operation in a single statement.</FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0229_0138">Deciding What To Return<A name="0229_0138"></FONT></h4></P>
It is usually most convenient to report errors via a function's return value. A <I>NULL</I> error value has the advantage of allowing the short, easy syntax illustrated by the earlier <I>fgets()</I> controlled loop.</FONT></FONT></FONT></FONT><P>
However, don't blindly assume that all functions will or should return <I>NULL</I> upon failure. In some cases a <I>NULL</I> can't be used as the error flag. For example, <I>sscanf()</I> returns the number of fields assigned. Zero is clearly a valid response, distinctly different from an attempt to read beyond the end of the input string. When zero is a valid return value, consider using EOF (typically a -<I>1</I>) to indicate an error. To test for EOF and save the return value, one could write:</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>if ((counter = sscanf(fp, format_in_buff, &amp;my_var)) !=EOF)...</pre>
If the returned count won't be needed later, the assignment can be omitted:<P>
<pre>if (sscanf(fp, format_in_buff, &amp;my_var) != EOF)...</pre>
However,<P>
<pre>if (sscanf(fp, format_in_buff, &amp;my_var))...</pre>
does not have the same meaning or result!<P>
When multiple errors are possible and more information about the error is desired, a single value flag is usually still returned to indicate the failure. However, before returning, the function sets a global variable, such as <I>errno</I>, to a value specifying in detail the cause of the problem. The calling function still uses the returned value to test for an error. But it may refer to the global for more details, if you, as the programmer, so choose.</FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0229_0139">Conclusion<B><A name="0229_0139"></B></FONT></h4></P>
Function return values can play a constructive roll in writing clear, clean code. A good understanding of how that return value can be best tested and applied will help you develop functions that are both efficient and reusable.<P>
</BLOCKQUOTE>
</BODY>
</HTML>
