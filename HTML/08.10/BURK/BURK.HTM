


<HTML>
<HEAD>

<TITLE>October 1990/Math.h++ Library</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tococt.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   User Reports</FONT></H2>

<hr><h2 align="center"><font color="#800000">Math.h++ Library<A name="0237_013F"><A name="0237_013F"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0237_0000"><A name="0237_0000">Comments By Ron Burk and Helen Custer</font></h3><hr><blockquote><P>
<P><i><A name="0237_0000"><A name="0237_0000">Ron Burk has a B.S.E.E. from the University of Kansas and has been a programmer for the past 10 years. Helen Custer holds degrees in computer science, English and psychology from the University of Kansas and is currently researching a book on operating systems for Microsoft Corporation. You may contact them both at Burk Labs, P.O. Box 3082, Redmond, WA 98073-3082.</i></P><P>
Math.h++, from Rogue Wave Associates, is a library of C++ classes designed for efficient numerical computing. Most of the code performs various numerical operations on vectors and matrices. The library also supports Fast Fourier Transforms (FFTs), linear algebra, statistics and random number generation. This report examines the Math.h++ library, v3.3.<P>
<h4><FONT COLOR="#000080"><A name="0237_0140">Why C++?<A name="0237_0140"></FONT></h4></P>
Several well-established program libraries already exist for mathematics and statistics, such as NAG and IMSL. They are typically written in FORTRAN but can usually be called from a variety of programming languages. This numerical C++ library simplifies the task of writing large programs that are readable and maintainable.<P>
A principle of good computer program design is "problem-solution similarity". If this principle is followed, the code should contain representations of some of the same components that make up the problem being solved. C++ doesn't have built-in support for lists as Lisp does, or for arrays as APL does, or for complex numbers as FORTRAN does. However, with C++ the programmer can extend the language to support whatever constructs are needed.<P>
Consider the Mandelbrot set, which is characterized by the following iterative formula:<P>
<pre>Z = Z * Z + C</pre>
You might expect to see this formula in the code of a program that plots the Mandelbrot set. However, since C and C++ do not directly support complex numbers, the Mandelbrot formula is usually obscured by the details of complex arithmetic.<P>
It is possible, however, to add a complex number type to C++. In fact, complex numbers are one of the simpler classes supplied by the Math.h++ class library. <A href="list1.htm">Listing 1</a>
shows a Zortech C++ program that uses the Math.h++ complex number class and the Zortech graphics package to draw the Mandelbrot set on a PC.<P>
Adding complex numbers to C++ is only a minor feature of Math.h++; the library's real strengths are vectors and matrices. For example, <A href="fig1.htm">Figure 1</a>
shows an electrical circuit and the matrix equation that characterizes it. Finding the circuit's currents requires inserting actual component values into the formula and multiplying the voltage vector by the inverse of the impedance matrix.<P>
If you write a program to perform this simple matrix inversion and multiplication, you can end up with a lot of code just for ancillary details (i.e., reading the data into the matrices). <A href="list2.htm">Listing 2</a>
shows a simple solution using C++ and the Math.h++ library.<P>
The Math.h++ classes are designed to work with the C++ "stream" I/O package (which uses the &lt;&lt; operator for input and the <I>&gt;&gt;</I> operator for output). <A href="list3.htm">Listing 3</a>
shows a particular input and output for the <I>CIRCUIT. C</I> program in <A href="list2.htm">Listing 2</a>.
 The Math.h++ class library expects you to enclose matrices and vectors in square brackets (<I>[]</I>) and to specify matrix dimensions (the 3x3 in this case) before the matrix data.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
This program took only a few minutes to write and required no debugging. The program is not concerned with how large the vectors and matrix will be, or with whether matrices are stored in column or row order, or with any other details not directly related to the task. Larger programs take more effort, of course, but programming at a higher level of abstraction can significantly reduce the time and expense of development, debugging and maintenance.<P>
<h4><FONT COLOR="#000080"><A name="0237_0141">Overview Of Classes<A name="0237_0141"></FONT></h4></P>
The library contains vectors and matrix classes for the following data types: <I>signed char, unsigned char, int, float, double</I> and <I>double complex</I>. With some effort, you can also compile new classes for vectors or matrices of other types. (Genericity is discussed later in this article.)</FONT></FONT></FONT></FONT><P>
Math.h++ overloads arithmetic operators for addition, subtraction, multiplication, and division to work with vectors and matrices. For example, if <I>A</I> and <I>B</I> are matrices, then the following expressions are legal:</FONT></FONT></FONT></FONT><P>
<pre>A  = A + B;
A  += B;</pre>
Both expressions add each element of <I>B</I> to the corresponding element of <I>A</I>. It is an error if both matrices do not have the same number of rows and columns; (A discussion of error handling appears later in this article.)</FONT></FONT></FONT></FONT><P>
A variety of library functions operate on the class objects in the library. The following standard C++ functions are overloaded so that they also operate on vectors and matrices:<P>
<pre>abs()    acos()   asin()
atan()   atan2()  ceil()
cos()    cosh()   exp()
floor()  log()    log10()
pow()    sin()    sinh()
sqrt()   tan()    tanh()</pre>
For example, given a matrix <I>A</I>, the following code produces a matrix in which each element in <I>B</I> is the absolute value of the corresponding element in <I>A</I>.</FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>DGEMatrix B = abs(A);</pre>
The library supplies specialized functions that operate on vectors and matrices, including functions for forming vector sums and cumulative sums, complex conjugates of complex vectors or matrices, determinants of matrices, dot products of vectors, the spectral variance of a complex vector and the transpose of a matrix.<P>
Math.h++ implements the LINPACK algorithms for solving simultaneous linear equations. Math.h++ provides separate classes that contain the LU decomposition (a matrix transformation which speeds repetitive calculations) of a matrix. In fact, the code in <A href="list2.htm">Listing 2</a>
implicitly performs an LU decomposition on the impedance matrix before solving the equation. If the program were going to solve the same equation multiple times with different inputs (voltages), it would be much faster to generate the LU decomposition once and use that result explicitly in the call to <I>solve()</I>.</FONT></FONT><P>
Math.h++ also provides support for other areas of numerical analysis. One set of classes support FFTs. This package also supplies random number generators that produce the following distributions: binomial, exponential, gamma, Gaussian, Poisson and uniform. Also included are a class that handles linear regressions and a histogram class that helps compile and display the distributions.<P>
<h4><FONT COLOR="#000080"><A name="0237_0142">Slices And Picks<A name="0237_0142"></FONT></h4></P>
Another concept integral to the Math.h++ library is a vector slice. A vector slice is a subset of vector elements formed by starting at a certain position and taking every n<SUP>th </SUP>element until the desired number of elements are collected. Numerical algorithms can often be coded in terms of vector slices. Such solutions are more easily ported to a vector processing machine.</FONT></FONT><P>
In the Math.h++ library, vectors and slices are the same &#151; a vector is just a slice that starts at the <I>0</I><SUP>th</SUP> element and has a step size of <I>1</I>. Since a slice is not a special case, it can be used wherever a vector can, and vice versa.</FONT></FONT></FONT></FONT><P>
You can refer to arbitrary subsets of vectors using vector picks. Picks are implemented with a separate class and are not as efficient as slices, because the elements selected must be remembered explicitly, rather than calculated.<P>
To form matrix picks, you specify a set of rows (a vector of integers) and a set of columns (another vector of integers). The picked elements are the intersections of these rows and columns, which enables you to perform operations on selected portions of a matrix. For example, you could use a matrix pick to set the lower half of a matrix to <I>0</I>.</FONT></FONT><P>
Slices do not apply to matrices, but there are matrix operators that return the rows, columns and diagonals of a matrix. These operators return lvalues, a feature that supports coding techniques such as:<P>
<pre>// 10x10 matrix
DGEMatrix a(10,10);
// set column 1 to zero
a.col (1) = 0;
// set main diag to -1
a.diagonal(0) = -1;</pre>
Treating rows, columns, diagonals, slices and picks as atomic elements eliminates a lot of <I>for</I> loops from your code.</FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0237_0143">Class Design Issues<A name="0237_0143"></FONT></h4></P>
Every class library design begins by answering at least two important questions: Does the inheritance structure form a tree (all descended from one root) or a forest (many independent trees)? Do class objects assume reference or value semantics?<P>
The Math.h++ library is a forest rather than a tree of classes. Although there are disadvantages to both approaches, merging a forest of classes into an existing class tree is probably easier than merging two class trees. For example, suppose you want all of your classes to be descendants of a class called <I>Object</I>. You could create a new class for each Math.h++ class that was simply the inheritance of both the <I>Object</I> class and the individual Math.h++ class.</FONT></FONT></FONT></FONT><P>
One of the more confusing aspects of C++ class libraries is reference versus value semantics. The following statement, which assigns one matrix to another, illustrates the problem:<P>
<pre>A = B</pre>
After this statement is executed, does <I>A</I> contain a copy of the matrix <I>B</I>, or does<I>A</I> simply refer to the same matrix as <I>B</I>?</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The answer is a little complicated. In C++, assignment and initialization are treated differently. The Math.h++ class library generally uses reference semantics for initialization and value semantics for assignment. In other words, assignment creates a distinct copy of the object (vector, matrix, and so on) that is being assigned. With initialization, however, you can create two references to the same matrix. The library also supplies functions for forcing a distinct copy of an object to be made. Using Math.h++, you can almost, but not quite, ignore the issue for much of your coding.<P>
<h4><FONT COLOR="#000080"><A name="0237_0144">Portability<A name="0237_0144"></FONT></h4></P>
In addition to the portability problems of different environments, a C++ program must also cope with variations among currently available C++ compilers. The language itself continues to change, so it is difficult to choose between all the latest language features or a program that is portable to the largest number of compiler implementations.<P>
With normal portability problems, Math.h++ does a fair job. The worst flaw is some gratuitous name-space pollution. For example, the header files define the symbols <I>TRUE</I> and <I>FALSE</I> as macros, which will cause a syntax error when used in programs that define these symbols as <I>enums</I>.</FONT></FONT></FONT></FONT></FONT></FONT><P>
There are also some unnecessary dependencies on non-ANSI I/O functions for doing binary file I/O. On the other hand, conditional compilation is used in many places to adapt to host environment differences.<P>
The authors seem to have worked hard to accommodate differences between C++ compilers. The code has been ported to compilers from AT&amp;T, Borland, Zortech, Oregon Software, HCR and GNU. Conditional compilation allows the code to adapt to various compilers. For example, for compilers that supply a complex number class, the library generally uses that class rather than its own, to make it easier to use the library with existing code.<P>
The fact that no standard class library for C++ is defined poses a significant problem for writing portable C++ class libraries. For example, AT&amp;T ships with a revised and enhanced stream class for doing I/O, but some compilers do not. Math.h++ handles this by using whichever stream class the compiler provides.<P>
<h4><FONT COLOR="#000080"><A name="0237_0145">Efficiency<A name="0237_0145"></FONT></h4></P>
In general, the design of the library makes efficiency a high priority. Since reference semantics are used for initialization, matrix copying is avoided in places where the compiler might generate a temporary matrix variable. Likewise, since slices are an integral part of the vector design, there is no significant penalty for using a slice instead of a vector.<P>
The space efficiency of the library depends on how smart your linker is. The member functions are grouped into relatively few object modules, so many linkers will load the entire object module even if your program uses only one of the functions. The <I>CIRCUIT.C</I> program in <A href="list2.htm">Listing 2</a>
results in a 55K executable under MS-DOS.</FONT></FONT><P>
If space is critical, you could recompile the library in a more granular form, but this is tedious without an automated tool. Perhaps linkers will become smarter as object-oriented languages proliferate.<P>
On a related subject, matrices are stored in column-order, as in FORTRAN. Since most numerical libraries are written in FORTRAN, this increases the odds that you will be able to mix the Math.h++ library and some other numerical library in the same program.<P>
<h4><FONT COLOR="#000080"><A name="0237_0146">Genericity<A name="0237_0146"></FONT></h4></P>
One important feature that C++ lacks is genericity &#151; the ability to define a single class for multiple data types. For example, the only difference between a <I>float</I> matrix class and a <I>double</I> matrix class is probably that each occurrence of the key word <I>float</I> is replaced by the key word <I>double</I>. Currently, the only portable way to accomplish this is with large, multi-line preprocessor macros that are difficult to read, use and debug.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The Math.h++ solves this problem by supplying its own program (a shell script, for UNIX) for expanding class "templates" into class definitions. These templates take a type name as a parameter and expand into the correct definitions for the given type. The supplied program is not set up to be used on new data types, but the basic task is simple text substitution, which can be done in an editor or with a simple <I>sed</I> script in UNIX.</FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0237_0147">Handling Errors<A name="0237_0147"></FONT></h4></P>
C++ detects many kinds of type errors, such as applying an operator to the wrong variable type. The Math.h++ class library can also detect several kinds of semantic errors, such as an attempt to access an element outside the bounds of a vector or matrix.<P>
The library supplies bounds checking in a couple of forms. First, the subscript operator <I>[]</I> always performs bounds checking. Second, the function call operator <I>() </I>is overloaded to work just like the subscript operator, except it performs bounds checking only if the macro <I>BOUNDS_CHECK</I> is defined. The function call operator enables you to perform bounds checking during development and easily remove it to speed up the final product. Other kinds of errors, such as attempts to multiply matrices of incompatible sizes, are also detected. When the library encounters a runtime error, it prints a message on the screen and (depending upon the severity of the error) terminates the program.</FONT></FONT></FONT></FONT></FONT></FONT><P>
Unfortunately, you can't easily replace this error function with your own. For example, if you use the library in a windowing environment, you may have to alter the error function in the library so that it displays errors in a window and terminates the program by posting the correct system event.<P>
<h4><FONT COLOR="#000080"><A name="0237_0148">Summary<A name="0237_0148"></FONT></h4></P>
Math.h++ is not aimed at the same market as a down-and-dirty, wired-for-speed numerical library. Its primary strength is the level of abstraction it provides and the ease it provides in constructing correct, readable, maintainable programs. Its secondary strength is portability, although that is a moving target as C++ becomes more standardized. Also, since the library is supplied in source form, you can change or improve it, but you must maintain your changes through future releases of the library.<P>
This is one of the earliest commercial C++ class libraries. Class library vendors face many problems, such as compiler incompatibilities and lack of support for genericity. Despite these problems, Math.h++ demonstrates that the promise of reusable class libraries is not all hype &#151; the future looks bright.<P>
Math.h++ Library<br>
Rogue Wave Associates<br>
P.O. Box 2328<br>
Corvallis, OR 97339<br>
(503) 745-5908<P>

<h4><a href="../../../source/1990/oct90/burk.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
