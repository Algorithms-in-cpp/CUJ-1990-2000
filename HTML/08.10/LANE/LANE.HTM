


<HTML>
<HEAD>

<TITLE>October 1990/Debugging Objects With Turbo Debugger</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tococt.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Debugging</FONT></H2>

<hr><h2 align="center"><font color="#800000">Debugging Objects With Turbo Debugger<A name="0215_012B"><A name="0215_012B"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0215_0000"><A name="0215_0000">Alex Lane</font></h3><hr><blockquote><P>
<P><i><A name="0215_0000"><A name="0215_0000">Alex Lane is the Senior Technical Writer in the Languages Business Unit at Borland International. This article was excerpted from Turbo C++ by Example (M&amp;T Books, 1990) and has been reprinted with the permission of M&amp;T Books (415/366-3600). Thanks to Mark Weaver for his help in coding the program.</i></P><P>
The C++ language allows programmers to use object-oriented programming (OOP) techniques in program development. A programmer's tools, especially the debugger, must cope with object and class hierarchies and inspection of objects and classes. OOP aside, debugging technology itself must keep the programmer productive. This article demonstrates Turbo Debugger's capabilities in supporting OOP by debugging a sample C++ program.<P>
<h4><FONT COLOR="#000080"><A name="0215_012C">About Turbo Debugger<A name="0215_012C"></FONT></h4></P>
Turbo Debugger is a source-level debugger designed for Borland language programmers, yet it can be used by programmers using other compiler products as well. Among other features, the current release (version 2.0) supports the expanded memory specification (EMS) for debugging large programs, assembler/CPU access when needed, support for 80386 and third-party debugging hardware, and TSR and device driver debugging. Turbo Debugger's features also include:<P>
<UL><li>a user interface, including overlapping windows, pull-down menus and mouse support,</li>
<li>support for OOP using either Turbo Pascal 5.5 or Turbo C++,</li>
<li>reverse execution, which restores machine state without re-executing the program from the beginning,</li>
<li>breakpoint and logging facility,</li>
<li>real mode, protected-mode and virtual (386) debugging support</li></UL>
<h4><FONT COLOR="#000080"><A name="0215_012D">The Test Program<A name="0215_012D"></FONT></h4></P>
The sample program in this article roughly simulates an ant colony. In this souped-up version of Conway's "Game of Life," an ant not only appears, lives and dies, it also moves and behaves in specific ways, depending on what type of ant it is: <I>Queen</I><I> </I>or<I> </I><I>Worker</I>.</FONT></FONT></FONT></FONT><P>
The rules of the anthill are: All ants have an energy store that is decremented in each cycle of the program. If the level falls to zero, the ant dies. All worker ants have a life span and an age that increments each cycle. The ant dies when its age exceeds its life span. When an ant dies, it disappears from the screen. The <I>Queen</I> does not age, but she can die of hunger. When all ants are dead, the simulation is over.</FONT></FONT><P>
<I>Workers</I> feed the <I>Queen</I> by foraging for food and bringing it back to the <I>Queen</I>. The <I>Queen</I> is restricted to one corner of the screen and can only eat food and lay eggs. The eggs hatch into worker ants after a few cycles.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<A href="list1.htm">Listing 1</a>
contains the header file for the program. <A href="list2.htm">Listing 2</a>
shows the class definitions, supporting functions and <I>main()</I> function.</FONT></FONT><P>
After watching the program run awhile, you'll notice a few annoying characteristics. First, from time to time, ants seem to stop dead in their tracks. Second, the count of worker ants at the bottom left of the screen never goes down. Third, if we run the program for a long time with a large amount of food on the screen, the queen "dies" (her energy goes to zero) for no apparent reason, even though moments before, she had plenty of energy.<P>
<h4><FONT COLOR="#000080"><A name="0215_012E">Running Turbo Debugger<A name="0215_012E"></FONT></h4></P>
For the sake of brevity, I won't describe the exact keystrokes or mouse actions needed to perform various actions. (You can perform virtually all actions within the debugger by a set of keystrokes or a set of equivalent mouse actions. Function keys also provide shortcuts for some common actions, such as toggling breakpoints or tracing through code.)<P>
The anthill program is packaged in one file for convenience, so finding parts of code in the 800-plus lines is relatively easy. Normally, source code is scattered among a number of files, and under such conditions, hunting for a specific routine is a challenge. Browsing through the class hierarchy can help.<P>
The <I>class</I> is a basic object-oriented concept. You can think of a class in C++ as a template for a data type that has private, so-called "member" functions available to it. A class can inherit the data and member functions of another class, or from multiple classes (see <A href="fig1.htm">Figure 1</a>)
. Classes in a hierarchy can share a common member function defined in some base class, or they can each define their own version of a function. When many classes have their own version of a member function, declaring the function as <I>virtual</I> assures that the appropriate class's function is executed in any given context. Letting objects invoke their own form of a function having a common name is <I>polymorphism</I>, and lends a great deal of flexibility to OOP.</FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0215_012F">Debugging The Anthill<B><A name="0215_012F"></B></FONT></h4></P>
First, let's tackle the problem with the queen dying for no apparent reason. By calling up the Class hierarchy window shown in <A href="fig1.htm">Figure 1</a>,
 we can examine relationships among classes in the program. The pane in the window's upper right-hand portion displays a hierarchy tree for all objects and classes in the program module. The tree shows that both <I>Worker</I> and <I>Queen</I> classes are derived from the more generic <I>Ant</I> class. <I>Ant</I>, in turn, is derived from both <I>Mover</I> and <I>Consumer</I> via multiple inheritance. If you move the highlight bar down to <I>Ant</I>, the lower right pane displays a reverse tree showing the parents of the highlighted class; in this case, <I>Mover </I>and <I>Consumer</I> are shown as parents of <I>Ant</I>. The left pane diplays a "flat" alphabetical list of all classes in the program module.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Selecting the <I>Queen</I> from the hierarchy opens a Class inspection window, shown in <A href="fig2.htm">Figure 2</a>.
 This window's upper pane shows all of the member <I>data</I> of the <I>Queen</I> class; the lower pane shows the member <I>functions</I> for the class. (To make the window less crowded, you can toggle a 'Show Inherited' flag to No, and you'll see only the member data and functions of the <I>Queen</I> class.) Selecting the line</FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>void doTheAntThing ()</pre>
brings up a function inspection window, containing the starting address of this member function. Selecting again brings up another window, shown in <A href="fig3.htm">Figure 3</a>,
 containing the function's source code. The line we're interested in is visible in this window.<P>
We set a breakpoint at the line<P>
<pre>if (nEnergy&lt;1)</pre>
so the breakpoint fires only when an expression we enter evaluates as true. <A href="fig4.htm">Figure 4</a>
shows a filled in dialog box, which will fire the breakpoint when the expression<P>
<pre>nEnergy &lt;= 0</pre>
is true. We then run the program, setting the queen's initial energy level to 20,000, and the amount of food on the screen to 1,000. After a minute or so, the breakpoint fires. We inspect the queen's energy level and find that it's negative (In our run, it was -31,744.) The solution becomes apparent. This looks like integer overflow (the variable <I>nEnergy</I> is probably an <I>int</I>, and if we look back to the Class Inspection window in <A href="fig2.htm">Figure 2</a>,
 we confirm that it is). The easiest way to fix this problem is to change the <I>nEnergy</I> variable to a <I>long</I> integer (unsigned integer won't do, because a freak addition might result in 0, again killing the queen). We choose, however, to fix the problem by modifying the queen's eating habits; if the Queen goes to eat and finds her energy is high, she won't eat. This characteristic is implemented as a member function to the <I>Queen</I> class (<A href="list3.htm">Listing 3</a>)
.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The remaining two problems might be related, because when a worker ant dies, the ant should disappear and the global count of workers should decrease. Since the count never decrements, maybe the ants aren't dying. If they are dying, why are they visible, and why doesn't the count change?<P>
We set a breakpoint at the line<P>
<pre>thisAnt-&gt;doTheAntThing ();</pre>
in the code that processes the Worker ant list in<I> main().</I> We execute to that line and begin to trace through the code. Our first call is to the function <I>Worker::doTheAntThing(),</I> which immediately calls the function <I>Ant::doTheAntThing()</I>. Here, the ant is aged, and its energy is decremented. The ant is also checked to see if it has died of old age or starvation. If we accientally trace past the line that reads</FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>if ( nEnergy &lt; 1 || nAge &gt;
     nLifeSpan )</pre>
we can undo our trace using reverse execution (<I>Alt-F4</I>). Reverse execution lets you move backward through code when an expected path is not taken, or when you want to cover all possible paths through a statement (for example, a switch statement).</FONT></FONT><P>
Here, let's "kill" the ant by setting the energy level to zero using the Evaluate/modify dialog box shown in <A href="fig5.htm">Figure 5</a>.
 Now, the call to<I> die() </I>executes <I>Ant::die(),</I> which sets the <I>bDead</I> flag to<I> TRUE,</I> clears <I>nEnergy,</I> and erases the ant.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
We then return to <I>Worker::doTheAntThing(),</I> which evaluates an <I>if</I> statement that, if true, executes <I>moveTowardQueen(),</I> and if false, executes <I>lookForFood()</I>! Using the hierarchy browser to find the code for these functions, we see that both functions move and redraw the ant! In other words, after the ant is dead and erased, another function draws it again. Once <I>doTheAntThing()</I> is finished, an <I>if</I> statement deletes the dead ant object back in <I>main(). </I>We can solve the problem of non-disappearing ants simply by moving the call to <I>doTheAntThing()</I> after the <I>if</I> statement. This way, the ant doesn't get to move again once it's dead.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Finally, we attack the problem of decrementing the global number of workers. Using Turbo Debugger's file browsing capability to look at <I>ANTHILL.CPP</I>, we search for all occurrences of <I>die()</I> and find three occurrences: the one in <I>Ant::doTheAntThing(),</I> which calls <I>die(),</I> another call from a <I>Queen</I> member function, and an explicit call from <I>Worker::doTheAntThing()</I> to<I> Ant::die().</I></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Notice that the call from <I>Ant::doTheAntThing()</I> merely calls <I>die()</I>, and yet the code executed was <I>Ant::die()</I>. Since the object originating the call is a <I>Worker</I> object, the call to <I>die()</I> should execute the <I>Worker</I> class's <I>die()</I> member function, not the <I>Ant's</I>. This call didn't happen because the <I>die()</I> member function is not declared virtual. Making <I>die()</I> virtual will result in <I>die()</I> calling the correct version of the function, in this case, <I>Worker: :die()</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0215_0130">Summary<B><A name="0215_0130"></B></FONT></h4></P>
After implementing the code changes we've identified, we rerun the program and note that the queen does not gorge herself, and that workers disappear quietly when their time comes. Our debugging session has been a success.<P>
Turbo Debugger can help programmers achieve better productivity through its enabling features, such as informative window displays, breakpoints, reverse execution and an easy-to-use interface. Turbo Debugger makes debugging object-oriented programs easier by offering the user access to the program's different parts to examine the data and member functions of various classes.<P>

<h4><a href="../../../source/1990/oct90/lane.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
