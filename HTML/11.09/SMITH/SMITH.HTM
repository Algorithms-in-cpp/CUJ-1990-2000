

<HTML>
<HEAD>

<TITLE>September 1993/Windows, DLLs, and Floating Point Types</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocsep.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Windows Programming</FONT></H2>

<hr><h2 align="center"><font color="#800000">Windows, DLLs, and Floating Point Types<A name="028B_00D1"><A name="028B_00D1"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="028B_0000"><A name="028B_0000">William Smith</font></h3><hr><blockquote><P>
<P><i><A name="028B_0000"><A name="028B_0000">William Smith is the engineering manager at Montana Software, a software development company specializing in custom applications for MS-DOS and Windows. You may contact him by mail at P.O. Box 663, Bozeman, MT 59771-0663.</i></P><P>
While DLLs are largely language independent, conventions for passing floating point values remain compiler dependent &#151; largely because Windows sets no explicit standards for representing floating point values. Parameter passing methods vary, depending upon calling convention, floating-point type, and even compiler vendor. When you develop programs and DLLs with different compilers, you must be certain that both the argument passing methods and function return methods match between program and DLL. When the DLL exports functions that pass floating-point values, the program and DLL may be incompatible, unless both use a specific floating-point type and calling convention.<P>
In this article, I will describe parameter passing incompatibilities between two compilers &#151; Microsoft C/C++ 7.0 (MSC) and Borland C/C++ 3.1 (BC). If you are using other compilers, you may want check them for incompatibilities.<P>
<h4><FONT COLOR="#000080"><A name="028B_00D2">Calling Conventions<A name="028B_00D2"></FONT></h4></P>
MSC and BC offer three alternate calling methods: <I>_cdecl, _fastcall</I>, and <I>_pascal</I> (<I>_fortran</I> is the same as <I>_pascal</I>). _<I>cdecl</I> is the standard C method of passing parameters right to left on the stack. <I>_fastcall</I> uses registers, when possible, to pass parameters. <I>_pascal</I> passes parameters left to right on the stack. For each of these calling conventions, the two compilers use identical mechanisms for passing argument values.<P>
The calling convention also controls how the compiler passes return values. Surprisingly, for certain calling conventions, the two compilers use different mechanisms for passing return values.<P>
<A href="tab1.htm">Table 1</a>
and <A href="tab2.htm">Table 2</a>
show how the compilers return floating-point values from functions. The unshaded portions of the tables represent parameter return methods that are identical between the two compilers. Both compilers use the NDP (Numeric Data Processor) stack to return floating-point values when the functions are defined with the <I>_fastcall</I> calling convention. Also, under the <I>_cdecl</I> calling convention both compilers use the NDP stack to return long doubles. However, if you are "mixing" compilers and exporting DLL functions which return a floating-point value, only the latter combination &#151; the <I>long double</I> return type with the <I>_cdecl</I> calling convention &#151; will work. <I>_fastcall</I> will not work, because exported DLL functions must be declared as <I>far</I>, and <I>_fastcall</I> is incompatible with <I>far</I> functions.<P>
If you don't want to use the <I>long double</I> return type, an alternative is to build the DLL with the same compiler that was used to compile the program. This alternative may be inconvenient: if you are selling your DLLs, you will have to distribute two versions &#151; one for programs compiled with MSC, and one for programs compiled with BC.<P>
The last alternative is to return floating-point types through pointers. You must use this alternative if you don't know which compiler will be used to compile the calling program, or if you know that the compiler to be used employs an incompatible parameter passing method.<P>
<h4><FONT COLOR="#000080"><A name="028B_00D3">Summary<A name="028B_00D3"></FONT></h4></P>
You may need to use special techniques to pass floating-point parameters between programs and DLLs. These techniques include appropriate selection of return type, calling convention, and compiler. You must use one of three techniques when the DLL exports functions which pass floating point parameters.<P>
<UL><li>Use the <I>long double</I> return type with the <I>_cdecl</I> calling convention to define functions which return floating-point values directly. This technique works when the calling program is compiled with either MSC or BC, and the DLL is compiled with either MSC or BC. (The calling program and DLL do not have to be compiled with the same compiler.)</li>
<li>If you can't meet all of the conditions listed in technique #1, be sure to compile your DLL with the same compiler as the calling program.</li>
<li>If you can't comply with either #1 or #2, use <I>far</I> pointers to return floating-point values from exported DLL functions.</li></UL>
<h4>Returning Structures from Exported DLL Functions</FONT></h4></P>
As with floating-point numbers, MSC and BC do not use the same mechanisms to return structures from functions. <A href="tab3.htm">Table 3</a>
shows the return mechanism used by MSC and BC under the calling conventions _<I>cdecl,</I> _<I>fastcall,</I> and _<I>pascal</I>. While MSC returns a pointer into the data segment or stack segment, BC always returns a <I>far</I> pointer. If you can't guarantee that the DLL and calling program will be compiled with the same compiler, the DLL must not <I>return</I> structures from exported functions.<P>
</BLOCKQUOTE>
</BODY>
</HTML>
