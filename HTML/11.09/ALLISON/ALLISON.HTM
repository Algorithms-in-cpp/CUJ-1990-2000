

<HTML>
<HEAD>

<TITLE>September 1993/Code Capsules</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocsep.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Code Capsules<A name="02BB_00E1"><A name="02BB_00E1"></font></h2><P>
<h3 align="center"><A name="02BB_0000"><A name="02BB_0000">Pointers, Part 2: Pointers and Arrays</h3><P>
<h3 align="center"><font color="#800000">Chuck Allison</font></h3><hr><blockquote><P>
<P><i><A name="02BB_0000"><A name="02BB_0000">Chuck Allison is a regular columnist with CUJ and a software architect for the Family History Department of the Church of Jesus Christ of Latter Day Saints  Church Headquarters in Salt Lake City. He has a B.S. and M.S. in mathematics, has been programming since 1975, and has been teaching and developing in C Since 1984. His current interest is object-oriented technology and education. He is a member of X3J16, the ANSI C++ Standards Committee. Chuck can be reached on the Internet at allison@decus.org, or at (801)240-4510.</i></P><P>
In last month's capsule I introduced the fundamentals of pointers in C: 1) a pointer is simply an object that holds the address of another object, and 2) when you define a pointer, you must also define what type of object it targets (this allows sensible pointer arithmetic). In spite of such simple rules, nothing in C seems to be as confusing and difficult to master as the proper use of pointers. Having taught C to more than 200 students over the past nine years, I have noticed that the relationship between pointers and arrays, especially multi-dimensional arrays, causes them much of the difficulty. I hope to clarify that relationship in this capsule.<P>
<h4><FONT COLOR="#000080"><A name="02BB_00E2">Pointers and One-Dimensional Arrays<A name="02BB_00E2"></FONT></h4></P>
It may seem strange to say, but C does not really support arrays, at least not in the same way that it does "first-class" types such as integers or structures. Consider the following statements:<P>
<pre>int i = 1, j;
int a[4] = {0,1,2,3}, b;
struct pair {int x; int y;};
struct pair p = {1,2}, q;
j = i; /* OK: integer assignment */
q = p; /* OK: structure assignment */
b = a; /* No can do! */</pre>
Not all operations are valid with arrays. We could do the following:<P>
<pre>int a[4] = {0,1,2,3}, *p;
p = a;    /* Stores &amp;a[0] in p */</pre>
but it isn't a "real" assignment, because none of the data in the array is transferred from one location to another. Instead, the code copies the <I>address</I> of the data from one location to another.<P>
In most contexts, the compiler interprets an array name as a pointer to its first element. The only exception is when an array name is the operand to the <I>sizeof</I> or <I>&amp;</I> operators. You can express this principle as<P>
<pre>    a == &amp;a[0]</pre>
or equivalently as<P>
<pre>    *a == a[0]</pre>
By the rules of pointer arithmetic (see last month's Code Capsule if you've forgotten them), if you add an integer <I>i</I> to an array name, the result is a pointer to the <I>i</I>th element of the array, that is,<P>
<pre>    a + i == &amp;a[i]</pre>
or, as I like to express it,<P>
<pre><B>Grand Pointer Principle #2: *(a + i) == a[i]</B></pre>
The program in <A href="list1.htm">Listing 1</a>
illustrates these principles.<P>
Since all array subscripting is really pointer arithmetic, you can use the expression <I>i[a]</I> in place of <I>a[i]</I>. This follows directly from the above formula:<P>
<pre>    a[i] == *(a + i) == *(i + a) == i[a]</pre>
Of course, any program that uses such banalities should be shot instead of executed (to quote Andrew Koenig), and the programmer too. It is not altogether unreasonable, however, to use negative subscripts. If a pointer <I>p</I> traverses an array, you can retrieve the element preceding the current element, *<I>p</I>, with the expression <I>p[-1]</I><I>,</I> since<P>
<pre>    p[-1] == *(p - 1)</pre>
<A href="list2.htm">Listing 2</a>
contains an an ample mixture of pointer and array notation. It also employs a useful formula for the number of elements in an array:<P>
<pre>    size_t n = sizeof a / sizeof a[0];</pre>
You can use any other valid subscript besides <I>0</I> in the divisor, but <I>0</I> is the safest since every array has a <I>0</I>-th element.<P>
A popular idiom that follows from the interaction of pointer and array notation is<P>
<pre>    strncpy(s,t,n)[n] = '\0';</pre>
This idiom copies the string at <I>t</I> to <I>s</I>, guarantees no over-flow during copy, and null-terminates the destination string &#151; all in one compact statement.<P>
There is one other difference between pointers and array names to remember: because an array name is not a modifiable lvalue, you cannot change the address to which an array name is bound. For example:<P>
<pre>    int a[5], b[5], *p;
    /* ... */
    /* All the following are invalid */
    a++;
    a = p + 5;
    b = a;</pre>
If you could make such assignments, you could easily lose track of where an array resides in memory (not a good idea!).<P>
<h4><FONT COLOR="#000080"><A name="02BB_00E3">Exercise 1<A name="02BB_00E3"></FONT></h4></P>
Given the declarations<P>
<pre>    int a[] = {10,15,4,25,3,-4};
    int *p = &amp;a[2];</pre>
what is the result of each of the following expressions?<P>
<pre>  a)     *(p+1)
  b)     p[&#151;1]
  c)     p &#151; a
  d)     a[*p++]
  e)     *(a+a[2])</pre>
(Answers are at the end of the article. Don't Peek! Work them out first, please).<P>
<h4><FONT COLOR="#000080"><A name="02BB_00E4">String Literals<A name="02BB_00E4"></FONT></h4></P>
String literals are arrays without names. You can find their <I>sizeof</I> and you can even subscript them (see <A href="list3.htm">Listing 3</a>
and <A href="list4.htm">Listing 4</a>)
. Note that my compiler treats each occurrence of "hello" in <A href="list3.htm">Listing 3</a>
as a separate object, returning a different address each time. Some compilers can "pool" equivalent string literals to save space.<P>
<h4><FONT COLOR="#000080"><A name="02BB_00E5">Arrays as Parameters<A name="02BB_00E5"></FONT></h4></P>
C typically passes parameters by value, but it can't pass an array by value. Instead, C passes a pointer to the array's first element. Use of the pointer allows you to permanently change the elements of the array from within the called function &#151; which you cannot do with parameters passed by value. In the function <I>f</I> in <A href="list5.htm">Listing 5</a>,
 the address <I>&amp;a[0]</I> is passed by value to the pointer <I>b</I>, so the expression <I>b[i]</I> behaves identically to the expression <I>a[i]</I>.<P>
Even though I defined the parameter <I>b</I> with array notation:<P>
<pre>    int b[]</pre>
the effect would be the same as if I had written<P>
<pre>    int *b</pre>
In either case, the function cannot determine the size of the array at compile time. This explains why <I>sizeof(b)</I> == <I>2</I>, the size of a pointer on my platform.<P>
Pointer parameters that refer to array elements are common in text processing. Here is a function that copies one string to another (like <I>strcpy</I>, except it doesn't return anything):<P>
<pre>void str_cpy(char *s1, const char *s2)
{
   while (*s1++ = *s2++)
      ;
}</pre>
Th e <I>while</I> loop does not test for equality. Instead, it tests the value of <I>s1</I>, after the assignment, but before the increment operation on <I>s1.</I> (*<I>p</I>++ is another very common C idiom.) The loop stops after copying the terminating <I>'\0'</I>.<P>
<h4><FONT COLOR="#000080"><A name="02BB_00E6">Exercise 2<A name="02BB_00E6"></FONT></h4></P>
The following statements modify the string <I>s</I> through a sequence of pointer expressions. What character is retrieved by each expression when executed in succession, and what is the final value of <I>s</I>?<P>
<pre>      char s[] = "desolate", *p = s;
      
      *p++   == ?
      *(p++) == ?
      (*p)++ == ?
      *++p   == ?
      *(++p) == ?
      ++*p   == ?
      ++(*p) == ?
      
      strcmp(s,?) == 0</pre>
(Thanks to Chet Small of Lincoln Laboratories for this very clever example.)<P>
<h4><FONT COLOR="#000080"><A name="02BB_00E7">Arrays of Strings<A name="02BB_00E7"></FONT></h4></P>
There are two ways to implement arrays of strings in C: 1) as arrays of pointers, and 2) as two-dimensional arrays of characters. The program in <A href="list6.htm">Listing 6</a>
illustrates the first approach. The memory layout looks like this:<P>
<IMG SRC="figa.gif"><P>
This type of array is sometimes called a "ragged array" because the strings can be of different lengths. This scheme uses only the amount of memory required to hold the data, plus one pointer per string. The array of command-line parameters that the run-time system provides (<I>argv[]</I>) is a ragged array.<P>
A disadvantage to the ragged array approach is that in most circumstances you need to dynamically allocate memory for each string. If you don't mind wasting a little bit of space, and if you know the length of the longest string you will encounter, you can use a fixed-size region of storage as a two-dimensional array of characters (one string per row). The memory layout for the array in <A href="list7.htm">Listing 7</a>
is:<P>
<IMG SRC="figb.gif"><P>
As the program in <A href="list7.htm">Listing 7</a>
illustrates, you don't have to specify the first dimension of a multi-dimensional array if it can be inferred from the initializer.<P>
C is somewhat unique among programming languages in that it allows you to use an array with only some of its subscripts. As the program in <A href="list7.htm">Listing 7</a>
suggests, the expression <I>array[i]</I> is a pointer to the <I>i</I>th row. For the array defined as <I>int a[2][3][4]</I>, what do you suppose <I>a[i]</I> represents? Or <I>a[i][j]</I>? Read on.<P>
<h4><FONT COLOR="#000080"><A name="02BB_00E8">Pointers and Multi-Dimensional Arrays<A name="02BB_00E8"></FONT></h4></P>
Actually, there is no such thing as a multi-dimensional array in C (at least, there is no direct support for such). One usually thinks of a one-dimensional array as a vector, a 2-d array as a table (or matrix), and a 3-d array as a rectangular solid. As opposed to this geometric model, C supports the notion of "arrays of arrays." For example, if a 1-d array of integers, say<P>
<pre>int a[4] = {0,1,2,3};</pre>
is an indexed collection of integers:<P>
<IMG SRC="figc.gif"><P>
which we usually depict as a single vector:<P>
<IMG SRC="figd.gif"><P>
then a 2-d array of integers, say,<P>
<pre>   int a[3][4] = {{0,1,2,3},{4,5,6,7},{8,9,0,1}};</pre>
is a collection that looks like this:<P>
<IMG SRC="fige.gif"><P>
or, if you like,<P>
<IMG SRC="figf.gif"><P>
which is a collection of <I>arrays</I>. So <I>a</I> is an "array of 3 arrays of 4 <I>ints</I><I>"</I>, and <I>a[0]</I> is one of those arrays of 4 <I>ints</I>. Pointer arithmetic in C is consistent with this addressing scheme. Since an array name always resolves to a pointer to its first element when used in an expression, an expression like <I>a</I>+<I>1</I> is of type "pointer to array of 4 ints;" in this case it would point to the second row (i.e., <I>a[1]</I>).<P>
The program in <A href="list8.htm">Listing 8</a>
shows how to declare a pointer to an array. Such a pointer can replace the array name with no change in indexing syntax. Novices mistakenly assume that since a pointer to <I>int</I> can substitute for the name of an integer array,<P>
<pre>    int a[] = {0,1,2,3), *p = a;
    /* ... */
    P[i] = ...</pre>
a pointer to pointer to <I>int</I> will do the same thing for a two-dimensional array, as in:<P>
<pre>    int a[][4] = {{0,2,3,4},{4,5,6,7},{8,9,0,1}};
    int **p = a;  /* Suspicious pointer conversion */
    /* ... */
    P[i][j] = ...</pre>
By <B>Grand Pointer Principle #2,</B> <I>p[i] [j]</I> is equivalent to:<P>
<pre>    *(p[i] + j</pre>
which is equivalent to<P>
<pre>    *(*(p + i) + j)</pre>
Since <I>p</I> is a pointer to pointer to <I>int</I><I>, </I><I>p</I> + <I>i</I> advances past <I>p</I> by a distance equal to the size of <I>i</I> pointers &#151; but we want to advance past <I>p</I> by <I>i</I><I> rows</I>. Thus <I>p</I> must be bound to a type whose size is the size of row. To correctly define <I>p</I>, the programmer could use the interesting but consistent syntax:<P>
<pre>    int (*p)[4] = a;</pre>
A compiler observes the following steps to evaluate the expression *<I>(*(p</I> + <I>i</I>) + <I>j)</I> with the correct definition of <I>p</I>:<P>
1.     <I>p</I> + <I>i</I><P>
This expression computes a pointer to the row which is <I>i </I>rows beyond the row targeted by <I>p</I>.<P>
2.     *<I>(p</I> + <I>i</I>)<P>
This expression is that row targeted by <I>(p</I> + <I>i</I>) (which is an array).<P>
3.     Since the array *<I>(p</I> + <I>i</I>) is not the operand of a <I>sizeof</I> or <I>&amp;</I> operation, it is immediately replaced with a pointer to its first element, namely, <I>&amp;a[i][0]</I>, which is a pointer to an <I>int</I>.<P>
4.     <I>&amp;a[i][0] + j</I><P>
Since <I>&amp;a[i][0]</I> is a pointer to an int, adding <I>j</I> advances it by <I>j ints</I>, resulting in <I>&amp;a[i][j]</I>.<P>
5.     <I>*&amp;a[i][j]</I><P>
This expression is the integer <I>a[i][j]</I>.<P>
<A href="tab1.htm">Table 1</a>
summarizes this relationship between pointers and 2-d arrays. Don't let the fact that <I>a</I> + <I>1</I> and <I>a[1]</I> have the same value (0x8), tempt you to conclude that<P>
<pre>    a[i] == a + i    /* not quite true */</pre>
These two expressions are only equal in value, not in type, because <I>sizeof(a</I>+<I>1) == 2</I> (a pointer), <I>sizeof(a[1]) == 8</I> (an array of 4 integers).<P>
<h4><FONT COLOR="#000080"><A name="02BB_00E9">Higher and Deeper<A name="02BB_00E9"></FONT></h4></P>
It naturally follows that a 3-d array is a collection of 2-d arrays. For example, for:<P>
<pre>int a[2][3][4] = {{{0,1,2,3},{4,5,6,7},{8,9,0,1}},
               {{2,3,4,5},{6,7,8,9},{0,1,2,3}}};</pre>
the memory layout is:<P>
<IMG SRC="figg.gif"><P>
The First element of this array is the "2-d" array <I>a[0]</I> (technically, <I>a[0]</I> is an array of 3 arrays of 4 <I>ints</I>). To use a pointer compatible with the array name, <I>a</I>, define:<P>
<pre>    int (*p)[3][4] = a;</pre>
<A href="list9.htm">Listing 9</a>
has a sample program using such a pointer, and <A href="tab2.htm">Table 2</a>
is the 3-d analogue of <A href="tab1.htm">Table 1</a>.
<P>
The programs in both <A href="list8.htm">Listing 8</a>
and <A href="list9.htm">Listing 9</a>
show how to determine the "rank" (or dimension) of an array and all of its sub-arrays. For the 2-d array <I>a</I> in <A href="list8.htm">Listing 8</a>,
 the rank is the number of rows (1-d objects) it contains, which is<P>
<pre>    sizeof a / sizeof a[0]</pre>
and the rank of each row is the number of integers (0-dimensional objects) in each row of <I>a</I>, namely<P>
<pre>    sizeof a[0] / sizeof a[0][0]</pre>
In general, if <I>a</I> is an n-dimensional array, then <I>a</I> is a collection of<P>
<pre>    sizeof a / sizeof a[0]</pre>
(n&#151;1)-dimensional objects, and each (n&#151;1)-dimensional object in <I>a</I> contains<P>
<pre>    sizeof a[0] / sizeof a[0][0]</pre>
(n&#151;2)-dimensional objects, each of which in turn contains<P>
<pre>    sizeof a[0][0] / sizeof a[0][0][0]</pre>
(n&#151;3)-dimensional objects, and so on. The number of 0-dimensional objects (e.g., integers) in each 1-dimensional object is<P>
<pre>    sizeof a[0][0]...[0]  /  sizeof a[0][0]...[0][0]
          (n-1 subscripts)           (n subscripts)</pre>
I think it's time to quit.<P>
<h4><FONT COLOR="#000080"><A name="02BB_00EA">Exercise 3<A name="02BB_00EA"></FONT></h4></P>
Fill in the Array-to-Pointer conversion table below, as I did in the examples above, for the 4-dimensional array:<P>
<pre>    int a[2][3][4][5] =
    {
      {
        {{0,1,2,3,4},{5,6,7,8,9},{0,1,2,3,4},{5,6,7,8,9}},
        {{0,1,2,3,4},{5,6,7,8,9},{0,1,2,3,4},{5,6,7,8,9}},
        {{0,1,2,3,4},{5,6,7,8,9},{0,1,2,3,4},{5,6,7,8,9}},
      },
      {
        {{0,1,2,3,4},{5,6,7,8,9},{0,1,2,3,4},{5,6,7,8,9}},
        {{0,1,2,3,4},{5,6,7,8,9},{0,1,2,3,4},{5,6,7,8,9}},
        {{0,1,2,3,4},{5,6,7,8,9},{0,1,2,3,4},{5,6,7,8,9}},
      }
    };</pre>
<IMG SRC="figh.gif"><P>
<h4><FONT COLOR="#000080"><A name="02BB_00EB">Summary<A name="02BB_00EB"></FONT></h4></P>
Arrays in C differ from other data types in that they cannot be passed by value. All array operations (except the use of <I>sizeof</I> and &amp;) involve pointers to the array's first element. Unless you understand this thoroughly, multi-dimensional arrays can cause you considerable confusion.<P>
I'll finish this series on pointers next month with a discussion of pointers to functions, incomplete data types, and some examples of when you might want to use the <I>volatile</I> qualifier.<P>
<h4><FONT COLOR="#000080"><A name="02BB_00EC">Answers to Exercises<A name="02BB_00EC"></FONT></h4></P>
1.     Given the declarations<P>
<pre>    int a[] = {10,15,4,25,3,-4};
    int *p = &amp;a[2];</pre>
what is the result of each of the following expressions?<P>
<pre>    a)  *(p+1)    25

    b)  p[-1]     15

    c)  p - a      2

    d)  a[*p++]    3

    e)  *(a+a[2]   3</pre>
2.     The following statements modify the string <I>s</I> through a sequence of pointer expressions. What character is retrieved by each expression when executed in succession, and what is the final value of <I>s</I>?<P>
<pre>    char s[] = "desolate", *p = s;
    
    *p++   == d
    *(p++) == e
    (*p)++ == s
    *++p   == o
    *(++p) == l
    ++*p   == m
    ++(*p) == n
    
    strcmp(s,"detonate") == 0</pre>
3.     See <A href="tab3.htm">Table 3</a>.

<h4><a href="../../../source/1993/sep93/allison.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
