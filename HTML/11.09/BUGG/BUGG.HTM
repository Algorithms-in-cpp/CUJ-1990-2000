

<HTML>
<HEAD>

<TITLE>September 1993/Implementing and Using Windows Help</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocsep.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Windows Programming</FONT></H2>

<hr><h2 align="center"><font color="#800000">Implementing and Using Windows Help<A name="02B1_00D7"><A name="02B1_00D7"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="02B1_0000"><A name="02B1_0000">Keith E. Bugg and Jack Tackett, Jr.</font></h3><hr><blockquote><P>
<P><i><A name="02B1_0000"><A name="02B1_0000">Jack and Keith are the principals of TriStar Systems, Inc. a consulting firm specializing in C and C++ applications and training. They<I></I> <I></I>can be contacted via TriStar at 122 E. Morningside Dr., Oak Ridge, TN 37830 or on CompuServe at 70312,132 or 72203,3612.</i></P><P>
<h4><FONT COLOR="#000080"><A name="02B1_00D8">Introduction<A name="02B1_00D8"></FONT></h4></P>
MS-Windows 3.x applications typically incorporate a robust, application-specific help system. This system, usually accessed via the application's help menu or by pressing the <I>F1</I> key, allows for context-sensitive responses, keyword searches, and hypertext links between topics. The key to the system is the MS-Windows help engine, <I>winhelp.exe</I>, which the Windows setup program installs so that every windows installation has access to it. The help engine provides the user with a consistent interface to both system and application help. It also means that you, as a developer, have access to the help engine used by contemporary, Windows-based software.<P>
To use the help engine, you create and ship with your program a Windows resource file with the extension of <I>.hlp.</I> An application accesses this file through an API call to the Winhelp engine. Most of the help features (except for context-sensitive help) are available independent of your program. Thus you can add a professional help system with little effort and even less code.<P>
In this article we show you how to build and use a basic Windows help system (<A href="list1.htm">Listing 1</A>, <a href="list2.htm">Listing 2</a>, <a href="list3.htm">Listing 3</a>, <a href="list4.htm">Listing 4</a>, <a href="list5.htm">Listing 5</a>, <a href="list6.htm">Listing 6</a>, and <a href="list7.htm">Listing 7</a>
contain code for a demonstration system). You will find that most of the basic features are only adequately documented in Microsoft's SDK and that most Windows "cookbooks" treat the subject tangentially, if at all (Petzold's book, <I>Windows Programming 3.1</I>, is an example). For supplementary information or for information on subjects we haven't covered here (such as including bitmapped images, using child windows inside help topics, and dynamically updating them at runtime, etc.) consult the source listed in the Bibliography.<P>
<h4><FONT COLOR="#000080"><A name="02B1_00D9">Process<A name="02B1_00D9"></FONT></h4></P>
The steps required to enable your application to use the help engine are:<P>
<UL><li>Create a help topic file with the <I>.RTF</I> (Rich Text Format) extension. This file will contain special commands or characters, and although it is recommended that you use a word processor capable of producing the special RTF characters, such as Microsoft Word, the truth is that any ASCII editor will do.</li>
<li>Create a project file to control the compiler's operation. This file, with the extension of <I>.HPJ</I>, is a normal ASCII file that tells the help compiler how to build the. <I>.HLP</I> file.</li>
<li>Compile the <I>.RTF</I> file into a binary <I>(.HLP)</I> file that <I>winhelp.exe</I> will access. (This binary file is in a proprietary format, and you should be aware that the format changed between windows version 3.0 and 3.1.) Most MS-Windows development systems include the help compiler, <I>hc.exe</I> for 3.0 or <I>hc31.exe</I> for 3.1, under license from Microsoft.</li></UL>
Your program will access this <I>.HLP </I>file by making a call to the windows <I>api</I> function<I> WinHelp,</I> as shown in the sample program, <I>helpdemo.c</I> (<A href="list1.htm">Listing 1</a>.
)<P>
<h4><FONT COLOR="#000080"><A name="02B1_00DA">The <B><I>.HPJ</I></B> File<A name="02B1_00DA"></FONT></h4></P>
The <I>.HPJ</I> file is essentially a project file that is supplied to the help compiler tool <I>hc.exe</I> (or <I>hc31.exe</I> for Windows 3.1). This file consists of nine distinct sections, but most of these are optional. For this article, our discussion is limited to the three most useful sections: <I>OPTIONS, FILES,</I> and <I>MAP.</I> Each of these tokens must be enclosed in square brackets.<P>
Strictly speaking, the <I>OPTIONS</I> section is also optional, but its use is highly recommended. If used, it must be the first entry in the <I>.HPJ</I> file (see <A href="list5.htm">Listing 5</a>)
. The following are recommended entries in the <I>[OPTIONS]</I> section:<P>
<UL><li>TITLE &#151; A brief description of the associated application</li>
<li>COMPRESS &#151; This option determines if the <I>.HLP</I> file will be stored in compressed form. While developing, you should leave this as FALSE to save time; set to TRUE for your final build.</li>
<li>WARNING &#151; Level of error reporting, 1-3 (1 is least, 3 is most). Set to 3 during development.</li>
<li>CONTENTS &#151; This is the string token for the help file's "table of contents"; again, its use is highly recommended. If it is omitted, the first topic found in the <I>.RTF</I> file is assumed to be the table of contents.</li></UL>
In the next major section, the <I>MAP</I>, help topics are defined and given a unique numerical value. It is best to place these in a header file, and include it in both the <I>[MAP]</I> section and the source code for your Windows application. By allowing one file to service both the help side and the application side of your project, you can greatly simplify maintenance requirements. See <A href="list4.htm">Listing 4</a>
for examples of <I>#define</I> help topics.<P>
In the last section, <I>FILES</I>, you direct the help compiler to find the actual help material, the <I>.RTF</I> file. While our example only has one <I>.RTF</I> file, you can have more than one; in fact, for large projects, you may wish to divide your help files into logical categories and give each its own <I>.RTF</I> file.<P>
You may insert comments in your <I>.HPJ</I> file by prefacing them with a semicolon.<P>
<h4><FONT COLOR="#000080"><A name="02B1_00DB">The <B><I>.RTF</I></B> File<A name="02B1_00DB"></FONT></h4></P>
The <I>.RTF</I> file is where the work begins. You can use any of a considerable number of text-formatting tokens; for the sake of simplicity, the sample program, <I>helpdemo.rtf</I> (<A href="list6.htm">Listing 6</a>)
 is restricted to just the basics. Still, these are quite powerful, and will allow you to select fonts and specify their colors and sizes, to underline, to use bold typeface, and to perform other utilitarian functions. Like the <I>.HPJ</I> file, the <I>.RTF</I> file consists of logical units, as follows:<P>
<UL><li>The font table, which describes which fonts are to be used</li>
<li>The color table, which defines the colors that are available</li>
<li>The table of contents, if specified in the <I>.HPJ</I> file</li>
<li>The text associated with each help topic defined in the <I>MAP</I> section of the <I>.HPJ</I> file or in the header file.</li></UL>
The entire <I>.RTF</I> file must be enclosed in the traditional C curly braces { }. The first token in the file must be \<I>rtf1</I> followed by the name of the character set to use and the default font. The default font must be one of the stock fonts shipped with Windows. This allows Windows to make a graceful substitution if you've specified a font that can't be found on the target platform. The character set is generally set to ANSI. So, the first line of the <I>.RTF</I> file is usually:<P>
<pre>{\rtf1\ansi\deff0}</pre>
where <I>f0</I> is defined in the font table. <A href="list6.htm">Listing 6</a>
contains the .RTF file for the sample program; if you examine the font table found there, you'll see that each font is defined as follows:<P>
<pre>{\fontnumber \fontsize font name}</pre>
Hence, the entry that defines "font zero" might look like this:<P>
<pre>{\f0\fs12 Courier}</pre>
This declares <I>f0</I> to be 12-point Courier.<P>
The color table which is defined next, is also delimited by braces, and is declared with the token:<P>
<pre>\colortbl;</pre>
Each color value is defined by the Windows RGB macro (Red, Green, Blue), which allows you to set colors by assigning each color a value between 0 and 255, and delimiting each color value a backslash. Each color definition in the table is terminated with a semicolon. (See <A href="tab1.htm">Table 1</a>
for some examples of typical color values.)<P>
To specify a color table containing only the colors black and red, your <I>.RTF </I>entry would look like this:<P>
<pre>{\colortbl;\red0\green0\blue0;
          \red255\green0\blue0;}</pre>
Referencing the colors is similar to indexing an array, with one caveat. The first color in the table is assigned the number 1, not 0, which most C programmers would expect. The process of selecting a color for display may best be explained via an example. Given the following statement<P>
<pre>{\f0\fs22\cf2 Write this line in
 RED using the above color table.}</pre>
WinHelp would display "Write this line in RED using the above color table." using 22-point Courier font, in red. The key here is the <I>\cf2</I> token. As a mnemonic, it may be helpful to think of <I>\cf</I> as "Color Font."<P>
The last significant components of the <I>.RTF</I> file are the tokens for declaring the content topics and the content text. The "label" of a context string is defined by a <I>"#"</I> concatenated with the string assigned in the <I>[MAP]</I> section or header file. This is how WinHelp does a "go to" when you select a topic or click on a hypertext word from inside Help. A topic begins with a <I>\footnote</I> token and ends with a <I>\page</I> token. Everything between these tokens comprises the topic, including the caption, browse sequences, and search keywords. Within WinHelp, there is a button labeled "Search." When pressed, it brings up a dialog box that allows you to search for topics. These topics are identified with the letter <I>K</I> in the \<I>footnote</I> token. There is a special case when the search word also begins with the letter "K" &#151; you must insert an extra space between the <I>\footnote</I> and the search word.<P>
Topic captions (or titles) are identified with the character <I>$</I> and the <I>\footnote</I> token. These strings are displayed when you select Search or History from WinHelp. The <I>.RTF</I> file in <A href="list6.htm">Listing 6</a>
shows how these are actually implemented.<P>
The text associated with a topic is delimited with the <I>\footnote</I> statement and the <I>\page</I> token. You can also create hypertext links inside your topic text by using the <I>\uldb</I> token (also demonstrated in the sample program). Hypertext words should be displayed in a contrasting, consistent color. They usually follow some descriptive text such as "See also:", etc.<P>
A closing word about formatting the text itself: use the token \<I>par</I> to insert a blank line, \<I>tab</I> to insert a tab character, and use \<I>b</I> to display something in bold typeface. Since so much of the Help Compiler's operations is undocumented, you can probably learn best by experimenting with these command tokens.<P>
<h4><FONT COLOR="#000080"><A name="02B1_00DC">Summary<A name="02B1_00DC"></FONT></h4></P>
Incorporating Windows help gives your application an extra level of professionalism that is easy to implement and maintain. In addition, since WinHelp functionality is consistent across all Windows applications, including it gives the user a greater level of confidence in your application. Further questions on advanced and undocumented topics may be referred to the authors.<P>
<h4><FONT COLOR="#000080"><A name="02B1_00DD">Bibliography<A name="02B1_00DD"></FONT></h4></P>
Conger, James L. <I>The Windows API Bible</I>. The Waite Group.<P>
Mischel, Jim. "A Guide to Windows Help." <I>PC Techniques</I>. Feb/Mar 1993.<P>
Microsoft Corp. <I>The Windows Interface: An Application Design Guide</I>. Redmond, WA: Microsoft Press.<P>
<h4>Sidebar: <a href="sidebar1.htm">"The WinHelp API Call"</a></h4>

<h4><a href="../../../source/1993/sep93/bugg.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
