

<HTML>
<HEAD>

<TITLE>September 1993/We Have Mail</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocsep.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Departments</FONT></H2>

<hr><h2 align="center"><font color="#800000">We Have Mail<A name="02CF_00EA"><A name="02CF_00EA"></font></h2><hr>
<BLOCKQUOTE>
<A name="02CF_0000"><A name="02CF_0000">Errata<P>
In last month's <I>CUJ</I> (August 1993), we inadvertently omitted the main code listing for the article on pages 23-24, "Clipping Polygons with Sutherland-Hodgman's Algorithm," by Thomas Rvsz. The listing includes definitions for the classes <I>ClipEdge</I> and <I>LinearEdge</I>, which Rvsz described in his article. We have included the listing in this issue (p. 135). We apologize for the inconvenience this omission may have caused our readers.<P>
Dear CUJ,<P>
I enjoyed very much the article "SSX - Stack Swap eXecutive" in the March 93 issue of <I>CUJ</I>. It coincided very nicely with my desire to implement a small "multi-tasking" executive, just for the fun of it. My initial idea was to use some form of "callback dispatching" similar to the X11 system, primarily because I was scared of what pre-emptive scheduling would do to pending DOS operations. Your SSX does not resolve this fear, but the elegant simplicity of the SSX solution has spurred me on to work around the DOS single-thread problem. Maybe I will publish my results in <I>CUJ</I>. Who knows?<P>
I was most impressed with the level of portability achieved in SSX, which brings me to the reason for this letter, i.e. to nit-pick about two minor holes in the code that detract from portability. The first is when <I>ssx_stop</I> is called, and the second is when a task deletes itself.<P>
In both of these cases, the stack currently being used by the executing code is released to the heap via <I>free</I>. However, the executing code then proceeds to call other functions, which by definition will modify the stack. This is a risky operation, as the stack has been returned to the heap.<P>
All the implementations of <I>malloc</I> and <I>free</I> I have seen would not blink an eye in the above situation, assuming the current stack-pointer is some distance from the top and bottom of the stack. However, if the stack-pointer is near the top or bottom and the heap package uses the released storage for its own purposes (for example, to keep a chain of free blocks), then a corrupt heap soon results.<P>
The only solutions I can think of all involve having a special stack that is always switched to for task deletes (or <I>ssx_stop</I>). The best candidate is probably the stack that was used to invoke <I>ssx_run</I>. I have managed to do this for <I>ssx_stop</I> by moving all the logic to after the <I>longjmp</I> has completed. The task delete is proving more difficult, so as they say in the text books it is "left as an exercise for the reader!"<P>
Thanks for the magazine, and thanks for an interesting article.<P>
David Brown<br>
<I>dcb@atb.ch</I><P>
Dear Editor,<P>
I have had two bugs reported by readers from our article, "SSX&#151;Stack Swap eXecutive" (Tom Green and Dennis Cronin, <I>CUJ</I>, March 1993.). The first bug is a design problem that was introduced when we ported SSX to MS-DOS. In <I>sx_stop</I> and <I>ssx_task_create</I>, stacks allocated for tasks may be freed. The stack that the executive is running on is freed in some cases. This means that the program's current stack space is in memory that has been freed. Although this works in most cases, it certainly cannot be guaranteed to work.<P>
Dennis and I discussed this feature and he suggested that the executive should not be involved in allocating and freeing stacks for tasks. After the reported bug, I now agree with him. In our original version, <I>ssx_task_create</I> was called with the address and size of the stack space, so the executive was not involved in allocating and freeing stacks. This is probably the best approach.<P>
The second bug involves the current task pointer when the <I>switch_lock</I> is enabled. In Listing 1 on page 38 there are the following lines:<P>
<pre>oldtcb = t_current
t_current = np;
/* check and see if scheduling *
 * is disabled                 */
if(switch_lock == 0)
    stack_swap(&amp;oldtcp--&gt;stack_ptr
             ,&amp;np--&gt;stack_ptr);</pre>
These should be changed to:<P>
<pre>oldtcb = t_current
t_current = np;
/* check and see if scheduling *
 * is disabled                 */
if(switch_lock == 0){
    oldtcb = t_current
    t_current = np;
    stack_swap (&amp;oldtcp--&gt;stack_ptr
               ,&amp;np--&gt;stack_ptr);
}</pre>
The old code would set <I>t_current</I> prematurely and, if <I>switch_lock</I> was on, <I>t_current</I> would point to the wrong task.<P>
Thanks,<P>
Tom Green<br>
<I>tomg@cd.com</I><P>
P.J. Plauger:<P>
I've been using Borland C++ w/ Application Frameworks to generate on-screen graphics charts. I'd like to get hardcopy of these on my HP IIIP laser printer. There doesn't seem to be much information available on how one goes about doing this. In the November 1992 issue of <I>The C Users Journal</I> there was an article by Lowell Smith on plotting. He showed some source code which gave me an idea of what must be done to obtain hardcopy. My HP technical reference document also added some detail. It looks like I need to (1) send some escape sequences to the printer, (2) send a stream of data, and (3) send some more escape sequences.<P>
My specific questions are;<P>
1.     How do I re-direct the graphics routines to a file instead of the screen?<P>
2.     How do I transfer the data from that file to the printer?<P>
3.     Do I need any special drivers?<P>
4.     Is there a good reference on this subject?<P>
Thanks,<P>
Jim LeBar<br>
6962 Almondine Drive<br>
Garden Grove, Ca 92645<br>
(714) 896-3513<P>
Lowell Smith replies:<P>
Mr. James LeBar, Greetings:<P>
<I>This is in response to your E mail request to P.J. Plauger, which was forwarded to me by The C Users Journal.</I><P>
<I>If the graphics you develop in Borland C++ are drawn in while on a black background you can use the function hpltit given at the end of the SPLOT.C file. First open the file hpfile. This can, of course, be assigned to different hard disk file names at various points in the program. Then simply call that function while your graphic is on the screen. The graphic will be saved in hpfile in PCL format. To transmit the graphic to the printer after the run is complete, type:</I><P>
<pre>C&gt; copy &lt;filename&gt; lpt1 /b</pre>
<I>The /b (for binary copy) is necessary to assure copying the entire file. Text ASCII files use ctl-Z (ASCII 026d) as an end-of-file indicator, and that character may occur in the middle of a binary file.</I><P>
<I>I'll briefly discuss the operation of hpltit and then present an alternative for use with plots with foreground color other than white and/or background color other than black.</I><P>
<I>In VGA hi-res color mode, the pixels in the image are stored in row-major order starting at coordinate (0, 0) at the upper left corner of the screen. Beginning at location A0000:0000 in memory, there are 80 bytes (640 bits) for row 0, followed by 80 bytes for row 1, etc. The bytes can be read from memory using </I><I>peek (segment, byte)</I><I>. The code sets segment at the memory location corresponding to the beginning of the row and byte at the offset of the byte in the row.</I><P>
<I>HP control sequences stored in the array bcn [] are used to reset the printer, position the printer cursor at the upper left of the image on the page, initiate graphics mode, start each row of graphics output, initiate the transfer of 80 bytes for each row, end graphics mode, and finally to reset the printer (which automatically ejects a page). Note that the cursor position is relative to the upper left margin &#151; normally 0.5 inch from the top and left edges of the page.</I><P>
<I>The HP control sequences are defined in the LaserJet Printer Technical reference manual for your printer. The code was developed using the LaserJet II, which supports PCL level 4. I believe the LaserJet IIIp supports (most of) level 5, so you should have no problems.</I><P>
The HP control sequences always begin with what they refer to as Ec, which is ASCII 027d or ctl-[.<P>
<B>E</B><B>c</B><B>EE</B><B>c</B><B> * p600x400Y</B> &#151; <I>Reset printer, position cursor to 600,400 dots (2, 1.3333 in.) relative to upper left margin of page. (Same as E</I><I>c</I><I>EE</I><I>c</I><I> * p600XE</I><I>c</I><I> * p400Y). See discussion on combining escape sequences in Tech. Ref. Manual.</I><P>
<B>E</B><B>c</B><B> * t150R &#151; </B><I>Initiate raster graphics at 150 dpi resolution.</I><P>
<B>E</B><B>c</B><B> * r1A</B> &#151; <I>Start a row of graphics output.</I><P>
<B>E</B><B>c</B><B> * b80W &#151; </B><I>Transfer 80 bytes of data.</I><P>
<B>E</B><B>c</B><B> * rBE</B><B>c</B><B>E</B> &#151; <I>End graphics and reset printer.</I><P>
<I>You can change the initial cursor position and the graphics resolution (75, 100, 150, or 300 dpi) to suit. I chose 150 dpi resolution as a compromise. With 300 dpi you get better resolution, but the maximum image size on the page is 2.133 by 1.6 inches. The PostScript plots created by </I><I>WOIsplot</I><I> offer the advantage of output at printer resolution in any scale-e.g., 600 dpi on LaserJet 4M (or 4 with PostScript SIMM). Additional functions would be required to simulate all the Borland C graphics routines, however.</I><P>
<I>I chose white on black for the graphics displays in</I><I> splot</I><I> because I didn't see a need for color when hardcopy output is the main objective. If you must use color, however, the function</I><I> hpltit2</I><I> shown in Listing 1 should do the trick. As explained in Bradley Kliewer's book, EGA/VGA &#151; A Programmer's Reference Guide, Second Edition (McGraw Hill, 1990), the color data are stored using four-bit planes, with bits in the four planes used to define the 16 possible colors in hi-res mode. The bit plane must be selected prior to a memory read. White (color 15) sets bits in all planes, so you get a one bit for a lit pixel regardless of which plane is selected. That is why the direct memory access via peek can be used in</I><I> hpltit</I><I>. Borland C provides the function</I><I> getpixel(x, y)</I><I> to extract color data for the pixel at the specified location. Note that getpixel returns a nonzero value if and only if the pixel color differs from the background color.</I><P>
<I>Instead of getting a whole byte via peek at each byte offset th each row, we must determine the value of color for each of the eight bits in the byte. At the beginning of the process for each byte we set the char variable ch to zero. For the i-th pixel, if the color is zero we set the char variable ch1 to zero. If it is nonzero, we set ch1 to 0x80&gt;&gt;i. 0x80 is 10000000b. Thus the leftmost bit remains set for i=0 and the one bit is shifted to the rightmost position for i =7. The statement:</I><P>
ch = ch1 | ch;<P>
<I>sets the bit in ch at the location where (and if) a bit is set in ch1. After all eight pixels are processed, the byte is transferred to the file as in</I><I> hpltit</I><I>.</I><P>
<I>hpltit2</I><I> is rather slow; on my 16 Mhz 386.</I><I> hpltit</I><I> processes an image in about one second while</I><I> hpltit2</I><I> takes about 30 seconds. The operation could be speeded up substantially by an assembly-language function developed using the descriptions given in Kliewer's book, but I have not yet attempted that.</I><P>
I hope this answers your questions. If you have further problems feel free to contact me directly.<P>
Sincerely,<P>
<I>Lowell Smith</I><br>
<I>(801) 272-3075</I><br>
<I>Compuserve 73377,501</I><P>
Dear Messrs. Weinstein and Plauger:<P>
Does Sydney Weinstein know a firstrate book? If so, I'd like to hear about it.<P>
Over the past few years the programming world has been blessed with a number of excellent books. I am happy to believe that not all of these have come to my attention. An armful of titles on almost any topic, including UNIX device drivers, are currently in print. Thus there is little information in a negative review of one book (May '93 <I>CUJ</I>). Given this fact, I suggest that the <I>CUJ</I> Book Review focus exclusively on good and exceptionally good books, and say why they are good.<P>
Sincerely,<P>
Sean Furlong<br>
100 Thayer St., 2H<br>
New York, NY 10040<P>
<I>Your argument is compelling, but I must still demur. I personally appreciate knowing when a book has weaknesses. I might still buy it anyway, but at least I won't be disappointed. &#151; pjp </I><P>
Dear C Users Journal Subscription Taker:<P>
I was going to let my subscription lapse. The last issue changed my mind. After a long, deep trip into pixel shuffling (Windows), I had been feeling burnt out and disgusted with the direction Microsoft &amp; company is pushing. It was refreshing to read something reinforcing the idea that computers should be used as an aid to, or an extension of, our thought processes. We think in words, not pictures, and each picture requires visual deciphering to determine the words it represents. This deciphering places unnecessary speed bumps in the human thought process. <I>The C</I> <I>Users Journal</I> is the only subscription I receive that appears devoted to the pure beauty of logic. Let children play the games, they will eventually mature and understand the words.<P>
One more thing please: Correct the spelling of my name and company, The name is spelled <I>Gearhart</I> with an R, and the company is BGS not Mbt. Sometimes the words can be confusing also.<P>
Bob Gearhart<br>
121 Washington St.<br>
Trenton, MI 48183-1233<P>
<I>The pure beauty of logic, huh? I was wondering what our acceptance criteria were. &#151; pjp</I><P>
Dear Dr. Plauger:<P>
I was quite intrigued by the description of the CORDIC algorithm in the November 1992 issue ("The CORDIC method for faster <I>sin</I> and <I>cos</I> calculations"). I was interested enough to translate the C code presented into C++, which I have included with this letter.<P>
Only a few changes were necessary to move the code from C to C++. Most notable, and probably most useful, the C++ version is able to encapsulate the variables which were global in the C version. They are moved inside a <I>cordic</I> class as static member variables, protecting them from accidental modification by routines unaware of them. Moving these variables inside a class structure makes it necessary to develop interface routines, and also requires that a decision be made about how the class will be used.<P>
The route I took was to have one predefined member of the <I>cordic</I> class, <I>cord</I>, which should be used to access the member functions which compute the integer sine and cosine. Other instances of class <I>cordic</I> can be created, and they will work as well as the predefined instance, but there is little advantage to this in the current implementation.<P>
One possibility I did not follow up on in this implementation is providing the ability to instantiate the class with different levels of accuracy &#151; using different bases for the CORDIC algorithm. The complexity of that implementation and its use seemed to go against the straightforwardness which is the main advantage of the CORDIC algorithm.<P>
I hope you can use this in the magazine. Thanks for a wonderful publication, and all the great services connected with the C Users Group.<P>
Sincerely,<P>
Tim Farnum<br>
72 Tryon Park<br>
Rochester, NY 14609<br>
Internet: <I>tfarnum@delphi.com</I><P>
<I>The code is available on the monthly code disk. &#151; pjp</I><P>

<h4><a href="../../../source/1993/sep93/letters.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
