<HTML><HEAD>
<TITLE>September 1993/Guidelines for Signal Processing Applications in C/Listing 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 3 <I>Sample code that avoids computations that lead to expensive exception handling</A></I></h4>
<pre>typedef  struct resdesc
{
       float out1, out2;   /* filter state variables */
       float a1, b1, b2;   /* filter coefficients */
} resdesc;
static void Avoid_Underflow(resdesc *o)
{
       /* clamp state variables */
       if (o-&gt;out1&gt;-0.0000000001f
                     &amp;&amp; o-&gt;out1&lt;0.0000000001f)
              o-&gt;out1 = 0.0f;
       if (o-&gt;out2&gt;-0. 0000000001f
                     &amp;&amp; o-&gt;out2&lt;0.0000000001f)
              o-&gt;out2 = O.Of;
}
/* assumes coefficients are constant throughout block */
void Resonator(resdesc *f , int n, float *out,
             int stride, float *in, int istride )
{
        float ym;
        int j;
        
       j=0;
       for(j=0;j&lt;n;++j)
       {
              ym = f-&gt;b1 * f-&gt;out1 + f-&gt;b2 * f-&gt;out2
                      + f-&gt;a1 * in[j*istride];
              f-&gt;out2 = f-&gt;out1;
              f-&gt;out1 = ym;
              out[j*stride] = ym;
       }
       Avoid_Underflow (f);
}

/* End of File */
</pre>
</BODY>
</HTML>
