

<HTML>
<HEAD>

<TITLE>September 1993/Stepping Up to C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocsep.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Stepping Up to C++<A name="02B9_00DF"><A name="02B9_00DF"></font></h2><P>
<h3 align="center"><A name="02B9_0000"><A name="02B9_0000">Rewriting and Reconsidering</h3><P>
<h3 align="center"><font color="#800000">Dan Saks</font></h3><hr><blockquote><P>
<P><i><A name="02B9_0000"><A name="02B9_0000">Dan Saks is the founder and principal of Saks &amp; Associations, which offers consulting and training in C++ and C. He is secretary of the ANSI and ISO C++ committees. Dan is coauthor of C++ Programming Guidelines, and codeveloper of the Plum Hall Validation Suite for C++ (both with Thomas Plum). You can reach him at 393 Leander Dr., Springfield OH, 45504-406, by phone at (513)324-3601, or electronically at dsaks@wittenberg.edu.</i></P><P>
My last column described the general rules by which a C++ translator looks up names as it translates C++ source into object form. (See "Stepping Up to C++: Looking Up Names," <I>CUJ</I>, August 1993. In addition to lexical scope rules adopted from C (covering file, function, and block scopes), C++ has rules that govern the added complexities of nested class scopes. However, the lookup rules stated in the <I>Annotated</I> C++ <I>Reference Manual</I> (ARM) (Ellis and Stroustrup, 1990) are incomplete and somewhat inconsistent in handling complex lookup situations. The C++ standards committee's Core Language working group has spent most of its time ironing out these problems.<P>
Last month, I also explained a new rule that prohibits a <I>friend</I> declaration (in one class) of a member function (in another class) from defining that member. This rule eliminated a confusing overlap of scope regions that had little, if any, practical value. This month, I'll explain other recent rules that cope with another problem area: the interaction of class member declarations in general and inline function definitions in particular with nested constants and types.<P>
<h4><FONT COLOR="#000080"><A name="02B9_00E0">Inline Functions<A name="02B9_00E0"></FONT></h4></P>
In C++, as in C, a typical function call generates code that passes arguments and jumps to a single copy of the object code for that function. For very short functions, the generated code for the call may be longer than the body of the function itself. In that case, you probably want the compiler to expand each call on that function inline &#151; that is, to expand each call into a copy of the function body with the actual arguments substituted for each of the function's formal arguments. Although I covered inline functions in an earlier column, it's been a while (see "Stepping Up to C++: Rewriting Modules as Classes," <I>CUJ</I>, July, 1991). Here's a brief review.<P>
C++ offers several different ways to declare a function (either a member or a non-member) as <I>inline</I>. You can place the keyword <I>inline</I> before the function declaration, as in:<P>
<pre>class X
   {
public:
   inline X();
   ...
   };</pre>
or, you can place it before the function definition, as in:<P>
<pre>inline X::X()
   {
   ...
   }</pre>
Alternatively, you can define the function inside the body of the class definition, as in<P>
<pre>class X
   {
public:
   X() { ... } // implicitly inline
   ...
   };</pre>
Regardless of how you request inlining, the compiler need not comply with your request. In that sense, inlining is like using the <I>register</I> storage-class specifier. A compiler may ignore <I>register</I> specifiers, if for no other reason than that the target architecture doesn't have enough registers to satisfy all such requests. Similarly, a compiler may ignore an inlining request for a particular function for reasons such as:<P>
<UL><li>the function is recursive</li>
<li>the function is too long</li>
<li>the function contain complex flow structures</li></UL>
Furthermore, a compiler must generate out-of-line code for an inline function if the program ever computes the function's address.<P>
<h4><FONT COLOR="#000080"><A name="02B9_00E1">The Rewriting Rule<A name="02B9_00E1"></FONT></h4></P>
Section 9.3.2 of the ARM attempts to specify name lookup for inline member by the "rewriting" rule. The rule states: "Defining a function within a class declaration is equivalent to declaring it inline and defining it immediately after the class declaration; this rewriting is considered to be done after preprocessing but before syntax analysis and type checking of the function definition." The ARM elaborates these words with this example:<P>
<pre>int b;
struct x {
   char*f() { return b; }
   char *b;
};</pre>
is equivalent to<P>
<pre>int b;
struct x {
   char *f();
   char *b;
};
inline char *x::f() { return b; }</pre>
and explains that "the <I>b</I> used in <I>x::f()</I> is <I>x::b</I> and not the global <I>b</I>."<P>
The rewriting rule permits functions defined inside a class to refer to other members declared later in that class. This rule gives you the freedom to place function definitions in a logical order inside class definitions, even if some of those definitions refer to members declared later in the class.<P>
Many C++ programmers, including me, use this freedom to place all the public members first, as in <A href="list1.htm">Listing 1</a>.
 But, as I've often stated in the past (most recently in "Stepping Up to C++: Nested Classes," <I>CUJ</I>, July 1993), I generally discourage defining functions inside class definitions of production quality code. For short class definitions typical of books and journal articles, defining functions inside the class yields more concise and often more readable code. But long class definitions peppered with function definitions can be hard to read. In that case, I usually recommend applying the rewriting rule explicitly, as shown in <A href="list2.htm">Listing 2</a>.
<P>
The rewriting rule applies to <I>friend</I> as well as member functions defined inside a class. However, it doesn't apply to <I>friend</I> functions defined outside a class. This asymmetry coincides with the asymmetry of the scope rules for <I>friend</I> functions that I cited last month: a <I>friend</I> function defined inside a class definition is in the (lexical) scope of that class, but a <I>friend</I> function defined outside the class definition is not. <A href="list3.htm">Listing 3</a>
(which appeared as <A href="list5.htm">Listing 5</a>
last month) illuminates this distinction.<P>
Class <I>X</I> in <A href="list3.htm">Listing 3</a>
declares two <I>friend</I> functions, <I>f</I> and <I>g. f</I>'s declaration inside <I>X</I> is also its definition. The body of <I>f</I> is in the scope of <I>X</I>, so the use of <I>k</I> in the function body refers to the member <I>X::k</I>. On the other hand, <I>g'</I>s definition appears outside the <I>X</I>'s definition. Even though <I>g</I>'s body appears identical to <I>f</I>'s, it is not in the scope of <I>X</I>. Thus, the use of <I>k</I> inside <I>g</I> refers to the global <I>k</I> (defined before <I>X</I>), not the static member <I>X::k.</I><P>
The ARM and the current (June, 1993) working draft of the C++ standard both state (in section 11.4) that the rewriting rule for member functions is applied to <I>friend</I> functions defined in a class definition. Taken literally, I think this says that you can rewrite class <I>X</I> in <A href="list3.htm">Listing 3</a>
as shown in <A href="list4.htm">Listing 4</a>.
 But this literal interpretation can't be right because it changes the semantics of <I>f</I>. When <I>f</I>'s definition appears inside <I>X</I>, the <I>k</I> used in <I>f</I> refers to <I>X::k</I>. But when you "rewrite" <I>f</I> as an inline function defined after <I>X</I>, the <I>k</I> in <I>f</I> refers to <I>::k</I>, just like the <I>k</I> in <I>g</I>.<P>
Rather, the appropriate rewrite" for <I>f</I> is<P>
<pre>inline void f(X &amp;x) { x.i = ++X::k; }</pre>
which eliminates the confusion by referring to <I>k</I> by its fully-qualified name <I>X</I>::<I>k</I>. I believe the intent of the ARM is clear, even though the words need a little work. Just another little thing for the standards committee to fix.<P>
The ARM does explain that you are not supposed to take the rewriting rule too literally. It is only a "semantic notion" and does not dictate any particular implementation technique. In fact, there are situations where applying the rewriting rule can literally produce syntax errors, as in the case of local classes.<P>
A local class is a class declared inside a function. For example, <A href="list5.htm">Listing 5</a>
shows local class <I>X</I> inside function <I>f</I>. The class name <I>X</I>, like any name with block scope, is local to <I>f</I>'s body. Since you can't refer to <I>X</I> outside <I>f</I>, you must define <I>X</I>'s member functions inside <I>f</I> as well. You can only define member functions of a local class inside the class definition, as in <A href="list5.htm">Listing 5</a>.
<P>
You cannot apply the rewriting rule explicitly, as attempted in <A href="list6.htm">Listing 6</a>,
 because C++, like C, doesn't allow nested function definitions. Even though you can't literally rewrite <I>X</I>'s member functions, the rewriting rule still applies in that an inline member function definition may refer to a member declared later in the class.<P>
<h4><FONT COLOR="#000080"><A name="02B9_00E2">The Scope of a Member<A name="02B9_00E2"></FONT></h4></P>
The rewriting rule establishes a general principle for interpreting member functions defined inside a class, but it doesn't precisely define the scope of a class member. Although the ARM never says so explicitly, the members of WG21+X3J16 (the C++ standards committee) generally agreed that the scope of a member extends at least from the point immediately after that member's declaration to the end of the class definition. The ARM<B>'</B>s example accompanying the rewriting rule makes it pretty clear at the scope of a class member also includes the bodies of an functions defined inside the class, even those functions defined before the member's declaration. What isn't clear is whether the scope of a member includes other parts of the member declarations that precede it.<P>
Consider class <I>File</I> in <A href="list7.htm">Listing 7</a>,
 which provides an inline public member function, <I>good</I>, that reports the health of a <I>File</I> object, and another inline member, <I>reset</I>, for reviving a sick <I>File</I>. File and stream objects often provide such error-handling facilities to handle resource allocation failures (such as being unable to open a file or allocate adequate buffer space) or device errors. Function <I>good</I> returns a Boolean result &#151; a <I>File</I> is either good or it isn't. Function <I>reset</I> sets the error status. By default, it puts a <I>File</I> in a good state.<P>
Since C++, like C, has no standard Boolean type, <I>File </I>defines its own using<P>
<pre>enum bool {FALSE, TRUE};</pre>
To avoid possible name conflicts with other parts of the program, <I>File</I> defines <I>bool</I> as a member (a nested type). <I>bool</I> appears as a <I>private</I> type after the definitions of all the <I>public</I> member functions.<P>
Clearly, the scope of <I>File::bool</I> includes the declarations that follow it, up to the end of the class. Thus, the declaration<P>
<pre>bool ok;</pre>
is in the scope of <I>bool</I>, and so <I>ok</I> is also the enumerated type.<P>
The rewriting rule exam be in the ARM suggests that the body of the constructor<P>
<pre>File() { ok = FALSE; }</pre>
compiles as if were written immediately after the class definition. Thus inside the constructor, <I>ok</I> refers to the data member <I>File::ok,</I> and <I>FALSE</I> refers to the member constant <I>File::FALSE</I>. But how can C++ compiler rewrite<P>
<pre>bool good() { return ok; }
void reset(bool b = TRUE) { ok = b; }</pre>
after the class definition? Does the scope of <I>bool</I> include the return types and parameter lists of functions declared before <I>bool</I>?<P>
For a time, the committee considered simply defining the scope of a member to include the entire class definition, not just the subsequent declarations. Unfortunately, this rule leads to some horrendous parsing problems, so the committee abandoned it. The committee finally settled on a revised scope rule that seems to fit existing practice pretty well. Basically, the scope of a class member includes the declarations that follow it (to the end of the class), plus all function bodies, default function arguments, and constructor initializers in that class (whether defined before el after that member).<P>
This new rule explicitly states that all function bodies defined within the class definition are in the scope of every class member, thus preserving the rewriting rule. However, the rule omits function return types from the scope of members declared later in the class. Thus, <I>good'</I>s return type specifier is outside the scope of member <I>bool</I>, so the function declaration is in error.<P>
The scope of a class member includes default function argument values inside the class definition, but not the formal argument types. Thus, in<P>
<pre>void reset(bool b = TRUE) { ok = bool(b); }</pre>
the default argument value <I>TRUE</I> refers to the member constant declared later. However, the formal argument type is not in the scope of the nested type <I>bool</I>, so this function is also in error. On the other hand, the function-like cast in the function body is a valid reference to the nested type.<P>
The scope of a class member also includes all constructor initializers for that class. Thus, if you rewrite<P>
<pre>File() { ok = FALSE; }</pre>
as<P>
<pre>File() : ok(FALSE) { }</pre>
<I>ok</I> and <I>FALSE</I> still refer to the class members declared later.<P>
<h4><FONT COLOR="#000080"><A name="02B9_00E3">Limiting Context Sensitivity<A name="02B9_00E3"></FONT></h4></P>
A class definition is sensitive to the context in which it appears. That is, names declared in the scope(s) surrounding a class definition affect that definition's meaning. For example, the string classes in <A href="list1.htm">Listing 1</a>
and <A href="list2.htm">Listing 2</a>
rely on a type definition for <I>size_t</I> in the surrounding context. This context sensitivity should come as no surprise &#151; it's a direct consequence of the lexical scope rules. The problem with this context sensitivity is that, if unconstrained, it can mask programming errors.<P>
For example, suppose the program in <A href="list7.htm">Listing 7</a>
included some other header prior to the definition for <I>File</I>, and that header contained its own (distinct) definition for type <I>bool</I> at file scope. You can simulate this supposition by simply defining<P>
<pre>typedef int bool;</pre>
before the definition of class <I>File</I>. Now, the previously erroneous forward references to nested type <I>bool</I> refer to this prior definition for <I>bool</I> in the surrounding context, and to and behold, two of the four compilers I tried (Borland 3.1 and Microsoft 7.0) compiled and executed the program. The other two compilers (Corneau 3.0 and Metaware 3.0) objected to the forward reference to <I>TRUE</I> as a default argument of <I>reset</I>. When I removed the default argument, they compiled and executed the program as well.<P>
If you really want to see whether a particular use of <I>bool</I> binds to the global or the nested type, define the global type so that its size is different from the size of an enumeration type. For example, on the MS-DOS compilers I use, the size of an enumeration is either one or two bytes, so I defined the global <I>bool</I> using<P>
<pre>typedef long bool;</pre>
Thus, when the program executes<P>
<pre>cout &lt;&lt; sizeof(f.good()) &lt;&lt; '\n';</pre>
it displays the size of the return type of <I>File::good</I> as 4 (the size of a <I>long</I>), and when it executes<P>
<pre>cout &lt;&lt; sizeof(f) &lt;&lt; '\n';</pre>
it displays the size of a<I> File</I> object (which contains a single member of type <I>File::bool</I>) as either 1 or 2 (the size of an enumeration).<P>
Even though compilers will accept this code, you must admit it's pretty flaky. It's especially sinister that the two uses of <I>bool</I> in<P>
<pre>void reset(bool b = TRUE) { ok = bool(b); }</pre>
refer to different type definitions. In fact, the ARM never intended this code to compile.<P>
Section 9.9 of the ARM places limits on the context sensitivity of the rewriting rule and of member declarations in general. It says: "A <I>class-</I>name or a <I>typedef</I>-name or the name of a constant used in a type name may not be redefined in a <I>class</I> declaration after being used in the <I>class</I> declaration, nor may a name that is not a <I>class</I> name or a <I>typeder</I>-name be redefined to a <I>class-</I>name or a <I>typeder</I>-name in a <I>class </I>declaration after being used in the <I>class</I> declaration." The ARM illustrates this rule with an example shown in <A href="list8.htm">Listing 8</a>.
<P>
This rule hints at a general principle which seems very reasonable, namely, that a class definition containing an erroneous forward reference to a class member should not be accepted by a C++ translator just because the name of the forward-referenced member happens to be declared in a scope enclosing the class definition. For example, <A href="list8.htm">Listing 8</a>
shows struct <I>Y</I> declaring member <I>a</I> of type <I>T</I>. The rewriting rule does not apply to data member declarations, so this <I>T</I> refers to the global <I>T</I> defined immediate <I>Y</I> before <I>Y</I>. Then <I>Y</I> defines <I>T</I> as a nested type, and declares another member <I>b</I> of type <I>T</I>. Fortunately, the limits on context sensitivity rule out the nested type definition. Otherwise, you might have a <I>struct</I> (a class) with two members of type <I>T</I> actually having different types.<P>
Unfortunately, the rule obscures the general principle by being too broad in some ways and too narrow in others. For example, class <I>X</I> in <A href="list8.htm">Listing 8</a>
defines, among others, two members<P>
<pre>int f() { return sizeof(c); }
char c;</pre>
The rewriting rule suggests that this usage is okay &#151; <I>c</I> in the body of <I>f</I> should refer member <I>c</I>. But the member declaration for <I>c</I> redeclares a <I>typedef-</I>name in the scope enclosing class <I>X</I>, so the ARM says <I>c</I>'s declaration is an error. However, had the <I>c</I> at file scope been an object rather than a type, the declaration of member <I>c</I> would have been just fine.<P>
In contrast, consider<P>
<pre>int c;
struct Z
   {
   char s[sizeof(c)];
   char c;
   };</pre>
The ARM's limits on context sensitivity don't prohibit this usage. Yet, if <I>c</I> at file scope had been a <I>typedef</I> instead of an object, the ARM would disallow the declaration of member <I>c</I>. The committee agreed that this definition for <I>struct Z</I> is bogus no matter how you declare <I>c</I> at file scope.<P>
Note that, in the previous example (from class <I>X</I> in <A href="list8.htm">Listing 8</a>)
<P>
<pre>struct X
   {
   int f() { return sizeof(c); }
   char c;
   };</pre>
is a legitimate forward reference, but in the last example<P>
<pre>struct Z
   {
   char s[sizeof(c)];
   char c;
   };</pre>
is not. The difference is that function bodies (along with default arguments and constructor initializers) are subject to the revised class scope rule, but member declarators are not.<P>
<h4><FONT COLOR="#000080"><A name="02B9_00E4">The Reconsideration Rule<A name="02B9_00E4"></FONT></h4></P>
In an effort to increase the apparent consistency of the language rules, WG21+X3J16 replaced the rule limiting the context sensitivity of the rewriting rule with the "reconsideration" rule. The reconsideration rule simply states that a name <I>N</I> used in a class <I>S</I> must refer to the same declaration when evaluated both in its context (the names declared prior to that use of <I>N</I>) and in the completed scope of <I>S</I> (the set of names available to a member function of <I>S</I> defined outside of <I>S</I>).<P>
One of the compilers I tried (Borland 3.1) actually appears to enforce the reconsideration rule in its "ANSI" mode. I expect the others to follow suit.<P>
<h4><FONT COLOR="#000080"><A name="02B9_00E5">Errata<A name="02B9_00E5"></FONT></h4></P>
An alert reader, Roger Zeitel of Teaneck, NJ, caught an error in one of my string class examples in my article on "Function Name Overloading" (<I>CUJ</I>, November, 1991). The same bug appears in the member function definitions for both <I>String::cat(const char</I> *) and <I>String::cat(const String &amp;</I>) in <A href="list3.htm">Listing 3</a>
on page 107 of that issue. <A href="list9.htm">Listing 9</a>
in this article shows the problem and the repair.<P>
Both functions correctly build a new character array containing the result, but fail to update the <I>len</I> data member to reflect the new string length. Simply adding the line<P>
<pre>len = n;</pre>
as the last line in each function body should correct the problem. This is a good example of a common error, namely, leaving an object in an inconsistent state. Cargill (1992) has a nice treatment of these kinds of errors in chapter 2 of his book on C++ style.<P>
Another problem which appears several times in that listing, as well as other listings in that same article, is that I did not use the <I>delete []</I> notation to delete arrays. In most implementations, deleting a pointer to the first element of array of objects without destructors works even if you omit the <I>[]</I>. But strictly speaking, such <I>delete</I> expressions have undefined behavior &#151; compilers need not get them right. So I should have put the <I>[]</I> in the <I>delete</I> expressions. You should too.<P>
<H4>References</FONT></h4></P>
Cargill, Tom. <I>C++ Programming Style</I>. Reading, MA: Addison-Wesley, 1992.<P>
Ellis, Margaret A. and Bjarne Stroustrup. <I>The Annotated C++ Reference Manual.</I> Reading, MA: Addison-Wesley, 1990.<P>

<h4><a href="../../../source/1993/sep93/saks.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
