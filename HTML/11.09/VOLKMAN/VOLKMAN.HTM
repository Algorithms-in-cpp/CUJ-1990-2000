

<HTML>
<HEAD>

<TITLE>September 1993/CUG New Releases</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocsep.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">CUG New Releases<A name="02C5_00E3"><A name="02C5_00E3"></font></h2><P>
<h3 align="center"><A name="02C5_0000"><A name="02C5_0000">JMODEM, JPEG, and GZIP</h3><P>
<h3 align="center"><font color="#800000">Victor R. Volkman</font></h3><hr><blockquote><P>
<P><i><A name="02C5_0000"><A name="02C5_0000">Victor R. Volkman received a BS in Computer Science from Michigan Technological University. He has been a frequent contributor to The C Users Journal since 1987. He is currently employed as Senior Analyst at H.C.I.A. of Ann Arbor, Michigan. He can be reached by dial-in at the HAL 9000 BBS (313) 663-4173 or by Usenet mail to sysop@hal9k.com.</i></P><P>
<h4><FONT COLOR="#000080"><A name="02C5_00E4">Introduction<A name="02C5_00E4"></FONT></h4></P>
As the new Acquisitions Editor for the C Users' Group Library, I'll be introducing you to the best new volumes of shareware and freeware programming tools over the coming months. Each of these volumes includes full source code in C or C+ + (sometimes a little bit of assembly language too). Each of the volumes can be incorporated into your application or used as the basis of an entirely new application. Licensing restrictions vary with each volume, but keep in mind the authors have submitted their source code for one purpose: to help you.<P>
This month, I'll introduce three new volumes:<P>
<UL><li>JMODEM (CUG #380): an efficient file transfer protocol</li>
<li>JPEG (CUG #381): the standard method for image compression</li>
<li>GZIP (CUG #382): a general purpose archiver for all platforms</li></UL>
<h4><FONT COLOR="#000080"><A name="02C5_00E5">JMODEM: CUG 380 (one disk)<A name="02C5_00E5"></FONT></h4></P>
JMODEM, by Richard B. Johnson (Beverly, MA), is the definitive version of this innovative file-transfer protocol. Johnson wrote and distributed the first version of JMODEM in 1989. Although he wrote the original in assembly language, he has since rewritten it in C and made the source freely available. Johnson hopes that the source will "make it easier for software developers throughout the world to use this very useful protocol."<P>
The CUG distribution includes a pre-built JMODEM MS-DOS executable that can be used as is. Johnson has taken much care to ensure that it behaves well as an externally shelled communications protocol driver. Because it's a protocol driver, you may simply add it to your existing upload/download protocol menu in Procomm, Telix, Commo, and other terminal programs. JMODEM also provides detailed installation instructions for BBS use.<P>
Developers of their own communications programs can also integrate JMODEM support. JMODEM requires as little as 79KB RAM to run and can be built without any floating-point support libraries. The current version runs only on MS-DOS and has been successfully built with Microsoft C and Borland Turbo C.<P>
Why does the world need another file transfer protocol? In short, JMODEM provides more intelligent block sizing, data compression, and CRC support than the more established protocols. Many of the older protocols, such as XMODEM and YMODEM variants, were designed when 1200 baud was state-of-the-art. To accommodate this low baud rate they use fairly small block sizes which typically range from 128 to 1024 bytes. The older protocols require the receiver to acknowledge receipt of each block before another block is transmitted. The acknowledgment overhead and block size limitations together slow the effective transmission rate by up to 25 percent of the maximum throughput.<P>
JMODEM avoids the block size and acknowledgment logjam by allowing block sizes to increase to 8,192 bytes in length. JMODEM starts out the block size at 512 bytes in length. With each successively correct transmission, it doubles the block size to 1,024, 2,048, 4,096, and finally 8,192 bytes. Similarly, each successively incorrect transmission causes it to halve the previous block size. If necessary, JMODEM will drop to block sizes as small as 64 bytes, allowing transmission even in a high-noise environment.<P>
JMODEM remains one of the few file transfer protocols with built-in data compression. Specifically, JMODEM will apply Run-Length Encoding (RLE) to blocks which are compressible enough (under RLE) to make the operation worthwhile. Upon handling pre-compressed data, such as ZIPped files, JMODEM Automatically disables its own compression process. Realistically, RLE can significantly increase throughput when used with older 2400 baud (v.22bis) modems on uncompressed data; however, RLE cannot beat modern hardware-implemented compression protocols such as Microcom Networking Protocol (MNP 5) and the CCITT v.42bis LZW compression. (MNP 5 typically achieves 2:1 compression and v.42bis achieves 4:1 compression.)<P>
Last, JMODEM provides a 16-bit Cyclic Redundancy Check (CRC) for further protection against transmission errors. Older protocols, such as XMODEM, often rely on checksums to guard against accidental transmission errors. Some protocols, such as ZMODEM, do offer even higher protection via 32-bit CRCs. However, the 16-bit CRC is more than sufficient, yielding only about 1 in 2132 undetectable errors.<P>
<h4><FONT COLOR="#000080"><A name="02C5_00E6">JPEG: CUG 381 (one disk)<A name="02C5_00E6"></FONT></h4></P>
JPEG Software, by Thomas G. Lane (The Independent JPEG Group), is a complete JPEG image compression and decompression system. JPEG (pronounced "jay-peg") is a standardized compression method for full-color and gray-scale images. JPEG originated from a desire to efficiently handle photographic images. The image can be computer-generated (e.g., a fractal landscape) or captured from an endless variety of sources, including scanners and video capture boards.<P>
The JPEG Software distribution source code is written entirely in C. You can compile it on many platforms, including IBM compatibles, Amiga, Macintosh, Atari ST, DEC VAX/VMS, Cray Y/MP, and most UNIX platforms. Supported UNIX platforms include, but are not limited to, Apollo, HP-UX, SGI Indigo, and SUN Sparcstation. The make system even includes a utility to convert the ANSI-style C code back to older K&amp;R-style.<P>
JPEG differs considerably from file formats such as PCX, GIF, and TIFF, which must reproduce 100 percent of the original image data. Rather, JPEG is "lossy" in that the output image is not necessarily identical to the input image. Applications requiring exact correspondence between input and output bits, such as engineering blueprints, are thus inappropriate for JPEG. However, on typical photographic images, JPEG delivers very good compression levels without visible change. Additionally, with JPEG you can achieve amazingly high compression if you can tolerate a low-quality image. You can trade off image quality against file size by adjusting the compressor's "quality" setting.<P>
By default, the JPEG Software distribution code builds a command-line-driven translator. The currently supported image file formats are: PPM (PBMPLUS color format), PGM (PBMPLUS gray-scale format), GIF, Targa, and RLE (Utah Raster Toolkit format). RLE is supported only if the URT library is available. The compression program, <I>cjpeg</I>, recognizes the input image format automatically, with the exception of some Targa-format files. The decompression program, <I>djpeg</I>, requires you to specify the target file format. The only JPEG file format currently supported is the JFIF format. Support for the TIFF 6.0 JPEG format will probably be added at some future date.<P>
You may incorporate any or all of the JPEG Software source code into your own applications. The only restriction is that you must include a small notice stating: "This software is based in part on the work of the Independent JPEG Group."<P>
<h4><FONT COLOR="#000080"><A name="02C5_00E7">GZIP: CUG 382 (one disk)<A name="02C5_00E7"></FONT></h4></P>
GZIP, by Jean-loup Gailly (Rueil-Malmaison, France), is a general-purpose archiving and compression utility. Rather than introducing yet another compression file format, GZIP seeks to unite the myriad existing compression methods. GZIP will automatically detect and unacompress files created by Phil Katz's PKZIP and compatible zip methods; it also handles UNIX-derived "pack" (Huffman encoding) and "compress" (LZW) files.<P>
GZIP v1.2.2 (released 6/93) supports many platforms, including MS-DOS, OS/2, Atari, Amiga, and DEC VAX/VMS. GZIP works well with most UNIX workstations including those compatible with NeXT, MIPS, SGI Indigo, and Sun Sparcstations. On the MS-DOS platform, GZIP is only guaranteed to work with Microsoft C 5.0 (or later) and Borland Turbo C 2.0 (or later). By default, GZIP builds for the MS-DOS Compact memory model. An additional compilation flag allows for the Large memory model. Other memory model variations might be possible as well; but GZIP specifically disclaims ability to build for the Small model.<P>
GZIP uses the well-known Lempel-Ziv encoding method as published in the <I>IEEE Transactions on Informataion Theory</I> (1977). By using Lempe-Ziv, GZIP avoids the patented algorithms prevalent in other implementations. GZIP reduces the size of typical text, such as English or C source code, by about 6-70 percent. Files which are already signficantly compressed, such as GIF graphics and VOC audio files, undergo far less reduction. The algorithm is implemented entirely in C, with one exception: the routines that do the performance-critical, longest-string matching have been rewritten in platform-specific assembly language.<P>
GZIP is licensed under the GNU General Public Software License. Therefore, if you plan on incorporating source code from GZIP in your own product, you must make your source code readily available to your users. However, you are still free to distribute the unmodified version of <I>GZIP.EXE</I> and bundle GZIP-archived files with your software.<P>
<h4><FONT COLOR="#000080"><A name="02C5_00E8">Call for Submissions<A name="02C5_00E8"></FONT></h4></P>
The C Users' Group Library needs your source code to support the C Users' Group mission: to help developers help each other. Currently, the CUG Library offers nearly 300 volumes of source code covering all application areas and all platforms. Applications include function libraries, disassemblers, compilers, text editors, text filters, communications support, text formatters, interpreters, bulletin boards, windowing systems, games, tutorials, math packages, cross-compilers, pre-compilers, and more.<P>
Platforms include all forms of UNIX as well as MS-DOS, Windows 3.x, and OS/2 for PCs. The Atari, Amiga, and Macintosh platforms also have support. Source disks are distributed at minimal cost to users (only $4 per disk). The source will also be made available on CD-ROMs. If your source code is potentially useful to other developers, we want it.<P>
<h4><FONT COLOR="#000080"><A name="02C5_00E9">Submission Policy<A name="02C5_00E9"></FONT></h4></P>
CUG is interested in <I>all</I> user-supported C and C++ source code. Programs need not be new and unique, nor massive, to be useful to other members. Many times even minor modifications of existing library programs are important to other members, especially if the modifications improve the portability of the code.<P>
CUG accepts submissions only from the author or copyright holder. All submissions must be accompanied by the Author's Release Form. In part, the Author's Release is designed to protect the interest of members who want to restrict for-profit distribution of their product. For tax purposes, CUG is a service of R&amp;D Publications, Inc., a for-profit Kansas corporation.<P>
We had originally intended to organize as a non-profit corporation, but found that it was an unbelievable hassle. We hope the Author's Release Form will allow authors to clearly authorize distribution by CUG while at the same time protecting their residual rights. We make every effort to respect the intentions of the submitting author when distributing software. For a copy of the Author's Release Form, please contact Victor Volkman through any of the methods listed later in this article.<P>
<h4><FONT COLOR="#000080"><A name="02C5_00EA">Guidelines for Submission<A name="02C5_00EA"></FONT></h4></P>
If you (or perhaps several authors) have placed restrictions on your material, include <I>all</I> the restrictions prominently in the documentation.<P>
Though you may provide documentation of your software in any file format, always include plain ASCII copies of the documentation as well.<P>
Include a one- or two-paragraph summary of the archive contents along with a longer (two-to-ten pages) description detailed enough to help members decide whether the submission is of use to them.<P>
Unless you are serious about policing users of your software, do not place restrictions on its reuse. Reuse restrictions are difficult to enforce, and in the long term, only reduce the credibility of your restrictions.<P>
<h4><FONT COLOR="#000080"><A name="02C5_00EB">How to Submit Your Code<A name="02C5_00EB"></FONT></h4></P>
<UL><li>Mail in a diskette to:</li><br>
Victor Volkman, CUG Acq. Ed.<br>
P.O. Box 130206<br>
Ann Arbor, MI 48113-0206<P>
<li>Upload your archive to:</li><br>
HAL 9000 BBS<br>
+1313 663 4173 or 663 3959<br>
(Also leave message to sysop)<P>
<li>Tell me where to get it:</li><br>
contact me via Usenet as<br>
<I>sysop@hal9k.com</I></UL>
</BLOCKQUOTE>
</BODY>
</HTML>
