

<HTML>
<HEAD>

<TITLE>September 1993/Standard C</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocsep.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Standard C<A name="02B7_00DD"><A name="02B7_00DD"></font></h2><P>
<h3 align="center"><A name="02B7_0000"><A name="02B7_0000">Floating-Point C Extensions</h3><P>
<h3 align="center"><font color="#800000">P.J. Plauger</font></h3><hr><blockquote><P>
<P><i><A name="02B7_0000"><A name="02B7_0000">P.J. Plauger is senior editor of The C Users Journal. He is convenor of the ISO C standards committee, WG14, and active on the C++ committee, WG21. His latest books are The Standard C Library, published by Prentice-Hall, and ANSI and ISO Standard C (with Jim Brodie), published by Microsoft Press. You can reach him at pjp@plauger.com.</i></P><P>
<h4><FONT COLOR="#000080"><A name="02B7_00DE">Introduction<A name="02B7_00DE"></FONT></h4></P>
Last month, I described the operations of the Numerical C Extensions Group, also known as NCEG or ANSI X3J11.1. (See "Standard C: The Numerical C Extensions Group," <I>CUJ</I> August 1993.) Under the chairmanship of Rex Jaeschke, that committee has been working for several years on a number of extensions to C. Some of those extensions are now starting to appear in the form of Technical Reports. The first three to appear (still in draft but available for wider review) are:<P>
<UL><li>TR Part 1: Designated Initializers and Compound Literals</li>
<li>TR Part 2: Aliasing Control via Restricted Pointers</li>
<li>TR Part 3: Floating-Point C Extensions</li></UL>
I remind you yet again that these documents do <I>not</I> have the force of a standard. The idea is to publish a recommended form for extensions that many people are inclined to make. That way, more organizations are likely to gain experience with the same syntax and semantics. When the time comes to revise the C Standard (and that time is rapidly approaching), there will be more common "prior art" to evaluate for each possible extension. And that makes it easier to determine whether an idea is basically good enough to make a formal part of Standard C.<P>
I covered TR Part 1 and TR Part 2 in my last column. This month, I review the much more extensive TR Part 3. Floating-point arithmetic is a boundless pit of subtleties and complexities. <I>Floating-Point C Extensions</I> is a measured attempt to bring to heel a few more of those subtleties and complexities within the compass of the C programming language.<P>
<h4><FONT COLOR="#000080"><A name="02B7_00DF">IEEE Floating-Point Standards<A name="02B7_00DF"></FONT></h4></P>
You probably know that detailed standards already exist for floating-point arithmetic. Since 1985, the world has had ANSI/IEEE 754-1985, <I>IEEE Standard for Binary Floating-Point Arithmetic.</I> This document spelled out formats for binary floating-point data in several precisions. It also described in exquisite detail what operations could be performed on them, how accurate the results had to be, and what funny codes to produce for all sorts of error conditions. In short, IEEE 754 gave us chapter and verse about how best to do floating-point arithmetic.<P>
That Standard was not lovingly received in all circles. You have to understand that, up to that time, each hardware vendor traditionally defined a unique floating-point format. The accompanying arithmetic was equally idiosyncratic. Some vendors favored speed over precision, some favored simplicity of implementation above all else. In fairness, all floating-point implementations had improved over the years, as better techniques became well known. But vendors still had a stake in continuing to support their proprietary approaches.<P>
You also have to understand that floating-point arithmetic takes a lot of microcode. In fact, it typically takes about as many kilobytes to describe the floating-point instructions as it does <I>all the rest of the instruction set put together.</I> (And that's why floating-point was often optional on minicomputers, or is still sold separately as a coprocessor with microcomputers.)<P>
So along comes this Standard that is perhaps twice as complex as your typical floating-point architecture of yore. It obsoletes everything that has gone before and causes conversion problems in the bargain. You can see why not everyone jumped aboard the bandwagon.<P>
A few important players did, however. Most notable were Intel, with their 80X87 line of floating-point coprocessors, and Motorola, with their MC 68881. They turned a paper document into very real, and affordable, hardware. And they forced the world to give serious consideration to this new, more conscientious, approach to computing in floating-point.<P>
Today, all but the oldest architectures generally offer some variant of IEEE 754 floating-point arithmetic. I say variant in part because the Standard does offer some latitude in the choice and representation of data representations, and in the range of operations supported. But I also mean that not everybody slavishly implements <I>all</I> of the requirements of the Standard. (I certainly didn't, in the several software versions I put on the market in years past.) And some people try to match the Standard, but ship products with various errors and inaccuracies. Don't think you're in safe territory just because a vendor offers IEEE 754 compliance.<P>
I should also mention ANSI/IEEE 854-1987, <I>IEEE Standard for Radix-Independent Floating-Point Arithmetic</I>. That document extends the floating-point model to bases other than 2. While in some ways it is now a more fundamental document than IEEE 754, it has so far had less practical effect.<P>
<h4><FONT COLOR="#000080"><A name="02B7_00E0">What C Standardized<A name="02B7_00E0"></FONT></h4></P>
Both of these IEEE floating-point standards were in place well before we froze the C Standard. That obliged us to take them into consideration when we described floating-point arithmetic in C. ANSI takes a dim view of technical committees who develop conflicting standards. They don't like turf wars either. Even if two standards say exactly the same thing about a given topic, the potential for future diversion is very real.<P>
We on committee X3J11 listened to several presentations on the existing floating-point standards. We also got knowledgeable input from several vendors of alternate floating-point formats. Tom MacDonald of Cray Research did quite a bit of work along these lines for the committee. In the end, I believe we did far more than we had to, and far less than we could have.<P>
We cribbed the abstract description of floating-point formats from the FORTRAN Standard. That was written in the heyday of proprietary floating-point standards, so it was quite general. We agreed on various minima for precisions and exponent ranges, then expressed them in terms of the FORTRAN model. Somewhere along the way, we decided to add the third floating-point type, <I>long double.</I> We chose, however, not to require that it be represented any differently than <I>double.</I><P>
Tom MacDonald championed the view that sophisticated numerical programmers needed to know about the model parameters chosen by each implementation. Yes, there are programs that play clever games with a computer long enough to figure out these parameters. But it seemed perverse to require such antics to get answers so easily supplied by an implementation.<P>
Thus was born the header <I>&lt;float.h&gt;.</I> It can be subtitled, "Everything you always wanted to know about your floating-point processor, but were afraid to ask." From personal experience, as both a compiler implementor and a numerical programmer, I'd add the trailer, "and then some." I have found uses for only a handful of the parameters we chose to put in that header. Still, I'm glad they're there.<P>
As for IEEE 754, we listened carefully, but we didn't feel an obligation to follow the bandwagon. (IBM, DEC, and Cray would have screamed rather loudly if we'd tried.) We aimed for reasonable compatibility with the basic representations, but we didn't mandate all the error codes or extended capabilities in that standard. It is fairest to say that we made the C Standard <I>tolerant</I> of IEEE 754 peculiarities. And that was enough to make ANSI happy.<P>
<h4><FONT COLOR="#000080"><A name="02B7_00E1">Language Extensions<A name="02B7_00E1"></FONT></h4></P>
<I>Floating-Point C Extensions</I> thus picks up where the C Standard left off. It addresses several perceived needs:<P>
<UL><li>to give more C language support for floating-point operations in general</li>
<li>to give reasonably complete C language support (called a "C binding" these days) for IEEE 754 floating-point operations in particular</li></UL>
I do not intend to describe in detail what's in this Technical Report. It would take far more than one installment of this column. Worse, it would bore most of you to tears. My more limited goal is to give you an overview of a rather complex subtopic in Standard C. You can file that superficial knowledge away against future need. If, at some later date, you have occasion to delve more deeply into some aspect of floating-point arithmetic, you'll know roughly where to look.<P>
<h4><FONT COLOR="#000080"><A name="02B7_00E2">Pragmas<A name="02B7_00E2"></FONT></h4></P>
Committee X3J11 borrowed the concept of pragmas from Algol 68 as a general way to extend the C language in nonstandard ways. In C, they take the form of preprocessing directives that begin with <I>#pragma</I><I>. Floating-Point C Extensions</I> defines five pragmas. You write them only outside of external declarations. That means you can't change the rules partway through a function definition.<P>
Four of the pragmas loosen the usual C rules about honoring the types declared by the programmer:<P>
<pre>#pragma fp_wide_function_returns <B>{ </B><I><B>on off</I></B><B> }</B>
#pragma fp_wide_function_parameters <B>{</B><I><B> on off</I></B><B> }</B>
#pragma fp_wide_variables <B>{ </B><I><B>on off</I></B><B> }</B>
#pragma fp_contract <B>{ </B><I><B>on off</I></B><B> }</B></pre>
To conform to the C Standard, the default in each case is <I>off. </I>You turn them <I>on</I> to, respectively:<P>
<UL><li>permit functions to return a wider floating-point type than declared</li>
<li>permit functions to receive (and not narrow down) arguments with wider floating-point types than declared</li>
<li>permit objects to be represented as wider floating-point types than declared</li>
<li>permit the use of "contracted" instructions, such as combined multiply-add, even when the result is slightly different than when not contracted</li></UL>
Why would you want to do these things? Because modern floating-point processors often do all their serious work in an extended precision (usually what is chosen for <I>long double</I> in C). It takes extra work &#151; and causes more loss of precision, overflow, and underflow &#151; to keep chopping down floating-point results.<P>
Sounds good. So why would you <I>not</I> want to do this all the time? Because some programs actually depend on truncation of precision to behave properly. (This is generally more true when narrowing integers than when narrowing floating-point values, however.) And some programs have large arrays of floating-point values. They depend on trading precision for storage space to work properly in limited storage. Thus the pragmas.<P>
The fifth pragma is part of the IEEE 754 support:<P>
<pre>#pragma fenv_access <B>{ </B><I><B>on off default</I></B><B> }</B></pre>
It determies whether a function may use the library functions (described below) to alter the floating-point operating mode. The <I>default</I> mode may be either <I>on</I> or <I>off</I>.<P>
<h4><FONT COLOR="#000080"><A name="02B7_00E3">Additions to &lt;<B><I>float.h</I></B>&gt;<A name="02B7_00E3"></FONT></h4></P>
The Technical Report adds two macros to <I>&lt;float.h&gt;</I>:<P>
<pre>#define_MIN_EVAL_FORMAT <B>{</B><I><B>0 1 2</I></B><B>}</B>
#define_WIDEST_NEED_EVAL<B>{</B><I><B>0 1</I></B><B>}</B></pre>
These reveal two implementation decisions, which are, respectively:<P>
<UL><li>whether the narrowest kind of floating-point arithmetic is performed in <I>float</I> (0), <I>double</I> (1), or <I>long double</I> (2)</li>
<li>whether the kind of floating-point arithmetic for a subexpression is determined by the wider of the two operands (0), or by the widest kind that will be needed for the containing expression (1)</li></UL>
Presumably, a very smart, and critical, floating-point calculation may require different forms of expression, depending on what these do to <I>#if</I> expressions.<P>
<h4><FONT COLOR="#000080"><A name="02B7_00E4">Floating-Point Constants<A name="02B7_00E4"></FONT></h4></P>
We all want our constants to be "folded" at translation time. That's compiler-writers' jargon for doing something once up front instead of every time an expression is evaluated. Some constant expressions must be evaluated at translation time, or at least prior to program startup. Static initializers are an obvious example. But the rest can be deferred to runtime, at least in principle.<P>
The C Standard makes a few blanket statements about writing floating-point constants and folding constant expressions. The Technical Report goes into considerably more detail about what's expected. In particular:<P>
<UL><li>constant folding that can occur at runtime, and that causes a floating-point exception, must result in an expression that reports the exception at runtime</li>
<li>any number of "identities" of mathematics cannot be used in constant folding, because they are <I>not</I> identities in the real world of floating-point arithmetic</li></UL>
Yet another real-world problem is representing certain floating-point constants exactly. Decimal to binary conversion is notoriously uncertain in this regard. So the Technical Report adds <I>hexadecimal floating-point constants</I>. For example,<P>
<pre>#define FLT_MAX 0x. 7F7FFFFF</pre>
is a reliable way to write the largest (IEEE 754) value of type <I>float</I>. Of course, such forms are extremely implementation dependent, but at least they're exact.<P>
<h4><FONT COLOR="#000080"><A name="02B7_00E5">New Relational Operators<A name="02B7_00E5"></FONT></h4></P>
One problem with comparing floating-point values is the funny codes. Sure, +INF is larger than any finite value, but what about a NaN? The honest answer is to say that comparisons with NaNs (or even between NaNs) are <I>unordered</I>. The implementor gets to choose between trapping unordered comparisons, which can be slow and complex, or bulling ahead with the wrong answer, which is fast and unsafe.<P>
The Technical Report offers another alternative. It adds a slew of new relational operators, and redefines an existing one, to handle the unordered case properly inline. The basic idea is that a <I>!</I> can be put in front of any of the relational operators that don't already have one. Its presence now usually means, "also true if unordered." Thus, <I>!=</I> is redefined to mean, "unordered, less, or greater." Its old meaning is now handled by the new operator <I>&lt;&gt;.</I> There is also a new operator <I>&lt;&gt;=</I> which means, "less, equal, or greater" (believe it or not).<P>
I won't list all the operators, or discuss them in detail, because I get a headache every time I think about them. I doubt that I'll ever have occasion to use such creatures, given library functions that perform the same tests more readably.<P>
<h4><FONT COLOR="#000080"><A name="02B7_00E6">Predefined Macros<A name="02B7_00E6"></FONT></h4></P>
The last addition to the language proper is a pair of predefined macro names:<P>
<UL><li><I>__FPCE__</I> is defined if this Technical Report is implemented.</li>
<li><I>__FPCE_IEEE__</I> is defined if IEEE 754 compatibility is also present.</li></UL>
<h4><FONT COLOR="#000080"><A name="02B7_00E7">Library Extensions<A name="02B7_00E7"></FONT></h4></P>
The library extensions are easier to describe (glibly, at least), but in many ways more extensive than the language changes. Only a few apply to functions declared in existing headers.<P>
The functions in <I>&lt;stdlib.h&gt;</I> that convert from text to floating-point types have to be smarter. First, the old warhorse <I>atof</I> is no longer excused from proper error checking. Then there are new functions <I>strtof</I>, to convert directly to <I>float</I>, and <I>strtold</I>, to convert to <I>long double</I>. And then there are new requirements on all these functions plus the older workhorse <I>strtod</I>. All must now accept text strings such as <I>INF</I> and <I>NAN</I> for the funny codes.<P>
Their companions in <I>&lt;stdio.h&gt;</I> that read such numbers are, of course, the scan functions &#151; <I>fscanf</I>, etc. These get smarter too, since their behavior is defined in terms of <I>strtod</I> anyway.<P>
Their opposite numbers are the print functions &#151; <I>fprintf</I>, etc. They are now expected to print the same codes for infinities and NaNs. They also get three new conversion specifiers:<P>
<UL><li><I>%a</I>, to print in the new hexadecimal floating-point format</li>
<li><I>%A</I>, the same as <I>%a</I>, only using upper case letters instead</li>
<li><I>%F</I>, the same as <I>%f</I>, only using upper case letters instead</li></UL>
None of this should come as a surprise. It is simply a natural follow through, to complement the language additions.<P>
<h4><FONT COLOR="#000080"><A name="02B7_00E8">The Header &lt;<B><I>fp.h</I></B>&gt;<A name="02B7_00E8"></FONT></h4></P>
<A href="list1.htm">Listing 1</a>
shows the new header <I>&lt;fp.h&gt;</I>. It adds a variety of new types, macros, and functions:<P>
<UL><li><I>float_t</I> is the most efficient (computational) floating-point type at least as wide as <I>float</I>.</li>
<li><I>double_t</I> is the most efficient (computational) floating-point type at least as wide as <I>double</I>.</li>
<li><I>HUGE_VAL</I> is the same as in <I>&lt;math.h&gt;</I>. (It can be infinity.)</li>
<li><I>INFITITY</I> is assuredly infinity. </li>
<li><I>NAN</I> is a NaN.</li>
<li><I>FP_NAN</I>, etc. describe the values that can be generated by the floating-point classification macros</li>
<li>(<I>fpclassify</I>, etc.) that follow.</li>
<li><I>DECIMAL_DIG</I> is the largest number of decimal digits that can be converted between text and <I>long double </I>without loss of precision.</li></UL>
The thumping great list that follows is an extensive set of mathematical functions, far too numerous to detail here. What's really adventurous is the set of functions whose return and argument types contain the vague bold italic <I><B>T</I></B>. These are <I>generic</I> functions, just like in FORTRAN, and not quite like templates in C++. Each represents a set of functions overloaded on the (floating-point) type of its argument(s), By some unspecified mechanism, C is extended to handle such generics.<P>
<h4><FONT COLOR="#000080"><A name="02B7_00E9">The Header &lt;<B><I>fenv.h</I></B>&gt;<A name="02B7_00E9"></FONT></h4></P>
<A href="list2.htm">Listing 2</a>
shows the new header <I>&lt;fenv.h&gt;</I>. It adds new types, macros, and functions for controlling the state of an IEEE 754 processor:<P>
<UL><li><I>fenv_t</I> describes an object that can hold the entire floating-point environment.</li>
<li><I>fexcept_t</I> describes an object that can hold all the exception flags.</li>
<li><I>FE_INEXACT</I>, etc. describe the various exception flags.</li>
<li><I>FE_TONEAREST</I>, etc. describe the various rounding modes.</li>
<li><I>FE_DFL_ENV</I> points at an object of type <I>fenv_t</I> that holds the default floating-point environment.</li></UL>
The rest of this header declares the various functions provided for manipulating the floating-point environment in various ways.<P>
<h4><FONT COLOR="#000080"><A name="02B7_00EA">Conclusion<A name="02B7_00EA"></FONT></h4></P>
That's the end of my rather brief overview of <I>Floating-Point C Extensions</I>. I confess that I find most of this stuff rather specialized, for my needs at least. On the other hand, it was developed over several years by people with good credentials, and intentions to match. I don't dismiss it lightly.<P>
I end with one of my favorite quotes from R.W. Hamming. He said it of an early book of floating-point arithmetic, but it applies at least as well here: "Nobody should have to know that much about floating-point arithmetic, but I'm afraid sometimes you might."<P>

<h4><a href="../../../source/1993/sep93/plauger.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
