<HTML><HEAD>
<TITLE>September 1993/A Fixed-Point Numeric Class for C++/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2 fixed.h<I> &#151; fixed-point numeric class for C</I>++</A></h4>
<pre>/*----------------------------------------------------

     Module: FIXED.H
     
     Class: Fixed
     
     Description:
     
     Revision History
     
-----------------------------------------------------
  Date     Name  Comment
-----------------------------------------------------

Feb-16-93  rbf   Added the addProduct function

Nov-24-92  rbf   Initial Creation

----------------------------------------------------*/

#ifndef    _FIXED_H
#define    _FIXED_H

#if !defined(__IOSTREAM_H)
#include &lt;_iostream.h&gt;
#endif

typedef signed long FixedData;

// construct a union of a Fixed
// and two int sized parts
// for easy access to the appropriate bits

typedef union
   {
   FixedData long_rep;
   struct
      {
      unsigned int  fractional_part;
        signed int  whole_part;
      } half_rep;
   } FixedUnion;

// Definition of class Fixed
// in the Orthodox Canonical Form

class   Fixed
   {
   
   public:  // Public interface to class
   
      // Boilerplate member functions
      
      // default constructor
      Fixed();
      
      // default copy constructor
      inline Fixed(const Fixed&amp;);
      
      // default assignment
      inline Fixed&amp; operator=(const Fixed&amp;);
      
      // default destructor
      ~Fixed();
      
      // Class specific member functions &amp; data
      
      friend ostream&amp; operator&lt;&lt;
         ( ostream&amp; s, Fixed&amp; rhs );
      
      // various constructors &amp; conversion operators
      // construct a Fixed from an int
      Fixed(int rhs);
      // construct a Fixed from an double or float
      Fixed(double rhs);
      
      // binary operators on a Fixed class
      
      friend   Fixed operator-
         (const Fixed&amp; lhs, const Fixed&amp; rhs);
      friend   Fixed operator+
         (const Fixed&amp; lhs, const Fixed&amp; rhs);
      friend   Fixed operator*
         (const Fixed&amp; lhs, const Fixed&amp; rhs);
      friend   Fixed    operator/
         (const Fixed&amp; lhs, const Fixed&amp; rhs);
      friend   int   operator&lt;
         (const Fixed&amp; lhs, const Fixed&amp; rhs);
      friend   int   operator&gt;
         (const Fixed&amp; lhs, const Fixed&amp; rhs);
      friend   int   operator==
         (const Fixed&amp; lhs, const Fixed&amp; rhs);
      friend   int   operator!=
         (const Fixed&amp; lhs, const Fixed&amp; rhs);
      friend   int   operator&lt;=
         (const Fixed&amp; lhs, const Fixed&amp; rhs);
      friend   int   operator&gt;=
         (const Fixed&amp; lhs, const Fixed&amp; rhs);
      
      // unary operators on a Fixed class
      inline   Fixed&amp;   operator+=(const Fixed&amp; rhs);
      inline   Fixed&amp;   operator-=(const Fixed&amp; rhs);
      inline   Fixed&amp;   operator*=(const Fixed&amp; rhs);
      inline   Fixed&amp;   operator/=(const Fixed&amp; rhs);
      inline   Fixed    operator+ ();
      inline   Fixed    operator- ();
      
      void      addProduct(const Fixed&amp; rhs1,const Fixed&amp; rhs2);

   protected:   // Protected interface to class
   
      // Protected member functions &amp; data
   
   
   private: // Private interface to class
      
      // Private member functions &amp; data
      FixedUnion fixeddata;
      
   };   // Fixed

#endif       _FIXED_H

// End of File
</pre>
</BODY>
</HTML>
