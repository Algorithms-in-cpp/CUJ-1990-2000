

<HTML>
<HEAD>

<TITLE>November 1994/Questions & Answers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocnov.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Questions &amp; Answers<A name="01D5_00F7"><A name="01D5_00F7"></font></h2><P>
<h3 align="center"><A name="01D5_0000"><A name="01D5_0000">Function Return Value Conventions</h3><P>
<h3 align="center"><font color="#800000">Kenneth Pugh</font></h3><hr><blockquote><P>
<P><i><A name="01D5_0000"><A name="01D5_0000">Kenneth Pugh, a principal in Pugh-Killeen Associates, teaches C and C++ language courses for corporations. He is the author of All on C, C for COBOL Programmers, and UNIX for MS-DOS Users, and was a member of the ANSI C committee. He also does custom C/C++ programming and provides SystemArchitectonicssm services. His address is 4201 University Dr., Suite 102, Durham, NC 27707. You may fax questions for Ken to (919) 489-5239. Ken also receives email at kpugh@allen.com (Internet) and on Compuserve 70125,1142.</i></P><P>
<h4><FONT COLOR="#000080"><A name="01D5_00F8">To be or not to be<A name="01D5_00F8"></FONT></h4></P>
<B>Q</B><P>
This may seem like a picky little detail, but I've been having some discussions about your column with my colleagues as to whether a function should be named to return true or false. For example, should you name a function that describes the state of a stack as <I>is_empty</I> or <I>is_not_empty</I>? If the former, you may find yourself always testing it with <I>!is_empty()</I>.<P>
Kevin Shearson<P>
<B>A</B><P>
Isn't it funny how the little details seem to stir up the biggest battles? We programmers have probably spent more time and energy arguing over proper indentation, placement of braces, and capitalization/underscoring than in actual coding. At least we can switch indentation and brace placement around fairly quickly to suit the tastes of particular readers. Naming conventions are not simple to change and are therefore the subject of religious wars.<P>
You can follow two rules in cases like this. The first is to use whichever form seems the most likely to require no additional operators (nominally the <I>!</I>). This is the law of "less typing is better coding." The other rule is to simply be consistent with function naming everywhere. If you follow this rule, a user of your code can always count on calling the "right" function, without having to look it up each time.<P>
I'm not going to tell you which style to follow, but I do have a strong opinion in a related situation &#151; in the use of Booleans as parameters. I've come across many cases in which I'm compelled to replace a Boolean parameter with a different enumeration or with multiple function calls. For example, consider one vendor's implementation of a member function <I>UpdateData,</I> belonging to a class <I>Dialog.</I> If you create an instance of <I>Dialog</I>, as in<P>
<pre>Dialog my_dialog;</pre>
then this implementation lets you store data into <I>my_dialog</I> with<P>
<pre>dialog.UpdateData(FALSE);</pre>
From inside the dialog class, you can <I>retrieve</I> data with<P>
<pre>UpdateData(TRUE)</pre>
Unfortunately, the default for the parameter is <I>TRUE,</I> implying that retrieval occurs more frequently than storage. So this default works well with calls from inside the class (which are predominantly retrievals), and lousy with calls from outside (which are predominantly stores). It so happens that calls from outside are more common. I would rather have two functions such as:<P>
<pre> dialog.StoreData();
 RetrieveData();</pre>
which would be at least more readable, if not far more understandable.<P>
<h4><FONT COLOR="#000080"><A name="01D5_00F9">Old <B><I>new</I></B> stuff<A name="01D5_00F9"></FONT></h4></P>
<B>Q</B><P>
In the April issue of <I>CUJ</I> you asked for reader comments on the following C++ statements:<P>
<pre>char *pc5 = new (char *)[n];
char *pc6 = new (char (*))[n];</pre>
Before I present my analysis for these strange things, I should warn you that despite my mail-address below I'm not at all a "C++"-Guru. Well, I started to work with C in 1981 and with C++ around 1989, but as thorough as my understanding of C is today, I'm regularly overwhelmed by the numerous ways in which C++ can be used.<P>
In case it matters: My C++ translation environment is Comeau C++ v3.0 12/01/91, more or less a plain port of AT&amp;T USL C++ Language System v3.0 09/15/91, i.e. Stroustrup's cfront, which compiles C++ into C and uses the local C compiler to proceed.<P>
Doing some experiments with this compiler and analyzing its C output reveals several things, which may give an idea what happens:<P>
1)     only the first of the above statements (pc5) compiles correctly, the second (pc6) is a syntax error in my version of cfront.<P>
2)     Adding another level of parentheses:<P>
<pre>     char *pc5 = (new (char *))[n];</pre>
does <I>not</I> change the generated C Source.<P>
3)     If the address returned from <I>new</I> is subsequently printed, the following two statements yield the same value:<P>
<pre>     char **ppc5 = &amp; new (char *)[n];
     char **ppc5 = new (char *) + n;</pre>
(Of course, the above two statements must be compiled into separate programs that differ <I>only</I> in the above statements.)<P>
I think the major clue is the additional parentheses I added in step 2, and judging from your expertise in explaining C and pointers, I think I don't have to add any more words about what the above means and why <I>pc5</I> will contain garbage with a probability of about 100%. Step 3 was only meant to verify my analysis from step 2.<P>
Finally, I tried to parse the original statements of your April column by hand using the grammar from the Annotated C++ Reference Manual, but without success. Though I did not spend enough hours to be sure that my hand-parsing was absolutely correct, I think both statements are syntax errors and I strongly suppose a C++ compiler had to reject both.<P>
Martin Weitzel<P>
<B>A</B><P>
As readers may have noted in last month's column, the mystery behind the two statements was solved. As the judge might say, "case is closed." However your letter reinforces a few points that deserve repetition. C++ is a much more complex language than C. The ++ symbol represents more than just an increment of +1. I rather think it implies a factor of 10 to the first power. In fact, it is so complex that even with the base definition in the ARM, compiler writers have difficulty producing compilers that handle code consistently, as this problem has shown.<P>
Another point is to avoid complicated declarations. The C committee took a long time to insure that the use of typedefs produced no unexpected results. If you use typedefs in C or classes in C++, you can avoid many of these problems. For example, if you use:<P>
<pre>typedef char * CharPointer;</pre>
the need for parentheses disappears entirely. You can then allocate with:<P>
<pre>CharPointer *pc = new CharPointer[n];</pre>
The KISS (Keep It Simple (really) Simple) principle makes for more understandable code.<P>
</BLOCKQUOTE>
</BODY>
</HTML>
