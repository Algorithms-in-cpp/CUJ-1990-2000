<HTML><HEAD>
<TITLE>November 1994/Code Capsules/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2 <I>The rest of the string class implementation</I></A></h4>
<pre>// str.cpp
#include &lt;iostream.h&gt;
#include &lt;iomanip.h&gt;
#include &lt;string.h&gt;
#include &lt;assert.h&gt;
#include "str2.h"

string&amp; string::operator+=(const string&amp; s2)
{
   if (s2.count &gt; 0)
   {
      size_t new_count = count + s2.count;
      char *buf = new char[new_count + 1];

      memcpy(buf,data,count);
      memcpy(buf+count,s2.data,s2.count);
      buf[count = new_count] = '\0';
      delete [] data;
      data = buf;
   }
   return *this;
}

string operator+(const string&amp; s1, const string&amp; s2)
{
   string temp(s1);
   return temp += s2;
}

int operator==(const string&amp; s1, const string&amp; s2)
{
   return &amp;s1 == &amp;s2 ||
      s1.count == s2.count &amp;&amp;
      strcmp(s1.data,s2.data) == 0;
}

ostream&amp; operator&lt;&lt;(ostream&amp; os, const string&amp; s1)
{
   os.write(s1.data,s1.count);
   return os;
}

istream&amp; operator&gt;&gt;(istream&amp; is, string&amp; s1)
{
   const size_t BUFSIZ = 256;
   char buf[BUFSIZ];

   is.getline(buf,BUFSIZ);
   delete [] s1.data;
   s1.clone(buf);
   return is;
}

void string::clone(const char *s)
{
   // Assumes data is deallocated
   assert(s);
   count = strlen(s);
   data = new char[count + 1];
   strcpy(data,s);
}

// End of File
</pre>
</BODY>
</HTML>
