<HTML><HEAD>
<TITLE>November 1994/Code Capsules/Listing 27</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 27 <I>A </I>Vector<I> class template that manages its own heap</A></I></h4>
<pre>#include &lt;iostream.h&gt;
#include &lt;stddef.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;new.h&gt;

// Borland's &lt;new.h&gt; doesn't supply this:
inline void *operator new(size_t, void *p)
{
   return p;
}

// The next two are just for tracing execution:
inline void *operator new(size_t siz)
{
   cout &lt;&lt; "&gt;&gt;&gt; operator new (" &lt;&lt; siz &lt;&lt;" bytes)" &lt;&lt; endl;
   return malloc(siz);
}

inline void operator delete(void *p)
{
   cout &lt;&lt; "&gt;&gt;&gt; operator delete: " &lt;&lt; (void *) p &lt;&lt; endl;
   free(p);
}

template&lt;class T&gt;
class Vector
{
public:
   Vector();
   Vector(size_t);
   ~Vector();

   // Append &amp; subscript:
   Vector&lt;T&gt;&amp; operator+=(const T&amp;);
   T&amp; operator[](size_t);

   // Length-related functions:
   size_t length() const;
   void resize(size_t);
   size_t capacity() const;
   void reserve(size_t);

private:
   T *arena;        // class-specific storage arena
   size_t length_;
   size_t capacity_;

   enum {CHUNK = 10};

   // Disallow copy and assign:
   Vector(const Vector&amp;);
   Vector&lt;T&gt;&amp; operator=(const Vector&lt;T&gt;&amp;);

   static size_t next_chunk(size_t n);
};

template&lt;class T&gt;
inline Vector&lt;T&gt;::Vector()
{
   // Intialize an empty vector
   arena = 0;
   length_ = capacity_ = 0;
}

template&lt;class T&gt;
inline Vector&lt;T&gt;::Vector(size_t n)
{
   // Allocate a multiple of CHUNK elements &gt;= n
   length_ = 0;
   capacity_ = next_chunk(n);
   arena = (T *) ::operator new(sizeof(T) * capacity_);
   cout &lt;&lt; "&gt;&gt;&gt; arena created at " &lt;&lt; (void *) arena &lt;&lt; endl;
}

template&lt;class T&gt;
Vector&lt;T&gt;::~Vector()
{
   // Execute destructor for each element
   for (int i = 0; i &lt; length_; ++i)
      (arena+i)-&gt;T::~T();

   ::operator delete(arena);
}

template&lt;class T&gt;
inline T&amp; Vector&lt;T&gt;::operator[](size_t pos)
{
   if (pos &gt;= length_)
      throw "bad index in Vector&lt;T&gt;::operator[]";
   return arena[pos];
}

template&lt;class T&gt;
inline size_t Vector&lt;T&gt;::length() const
{
   return length_;
}

template&lt;class T&gt;
inline size_t Vector&lt;T&gt;::capacity() const
{
   return capacity_;
}

template&lt;class T&gt;
void Vector&lt;T&gt;::reserve(size_t new_capacity)
{
   // Only allow an increase:
   if (new_capacity &gt; capacity_)
   {
      new_capacity = next_chunk(new_capacity);
      if (new_capacity &gt; capacity_)
      {
         // Copy elements to new space
         T *new_arena = (T*) ::operator new(sizeof(T) *
                                      new_capacity);
         cout &lt;&lt; "&gt;&gt;&gt; new arena created at "
             &lt;&lt; (void *) new_arena &lt;&lt; endl;
         for (int i = 0; i &lt; length_; ++i)
            (void) new (new_arena + i) T(arena[i]);

         // Destroy old vector
         for (i = 0; i &lt; length_; ++i)
            (arena+i)-&gt;T::~T();
         delete arena;

         // Update state
         arena = new_arena;
         capacity_ = new_capacity;
      }
   }
}

template&lt;class T&gt;
void Vector&lt;T&gt;::resize(size_t new_length)
{
   // Only allow a decrease:
   if (new_length &lt; length_)
   {
      // Just destroy truncated elements;
      // Don't change capacity
      for (int i = new_length; i &lt; length_; ++i)
         (arena+i)-&gt;T::~T();
      length_ = new_length;
   }
}

template&lt;class T)
Vector(T)&amp; Vector&lt;T&gt;::operator+=(const T&amp; x)
{
   if (length_ == capacity_)
      reserve(length_ + 1);
   (void) new (arena + length_++) T(x):
   return *this;
}

template(class T)
inline size_t Vector&lt;T&gt;::next_chunk(size_t n)
{
   return ((n + CHUNK - 1) / CHUNK) * CHUNK;
}
/* End of File */
</pre>
</BODY>
</HTML>
