<HTML><HEAD>
<TITLE>November 1994/Code Capsules/Listing 23</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 23 <I>A class with its own versions of</I> new<I> and </I>delete</A></h4>
<pre>// t.h
#include &lt;iostream.h&gt;

class T
{
   int x;
public:
   T();
   T(int);
   ~T();

   // Override both scalar and array verions
   void *operator new(size_t);
   void operator delete(void *, size_t);
   void *operator new[](size_t);
   void operator delete[](void *);
};

inline T::T() : x(0)
{
   cout &lt;&lt; "T::T()" &lt;&lt; endl;
}

inline T::T(int i) : x(i)
{
   cout &lt;&lt; "T::T(int)" &lt;&lt; endl;
}

inline T::~T()
{
   cout &lt;&lt; "T::~T()" &lt;&lt; endl;
}

inline void *T::operator new(size_t siz)
{
   cout &lt;&lt; "T::new (allocating " &lt;&lt; siz &lt;&lt; " bytes)" &lt;&lt; endl;
   return ::operator new(siz);
}

inline void T::operator delete(void *p, size_t siz)
{
   cout &lt;&lt; "T::delete (" &lt;&lt; siz &lt;&lt; " bytes)" &lt;&lt; endl;
   if (p)
      ::operator delete(p);
}

inline void *T::operator new[](size_t siz)
{
   cout &lt;&lt; "T::new[] (allocating" &lt;&lt; siz &lt;&lt; " bytes)" &lt;&lt; endl;
   return ::operator new(siz);
}

inline void T::operator delete[](void *p, size_t siz)
{
   cout &lt;&lt; "T::delete[]" &lt;&lt; endl;
   if (p)
      ::operator delete(p);
}

class U : public T
{
   int y;
public:
   U();
   U(int);
   ~U();
};

inline U::U() : T(0), y(0)
{
   cout &lt;&lt; "U::U()" &lt;&lt; endl;
}

inline U::U(int i) : T(i), y(i)
{
   cout &lt;&lt; "U::U(int)" &lt;&lt; endl;
}

inline U::~U()
{
   cout &lt;&lt; "U::~U()" &lt;&lt; endl;
}

/* End of File */
</pre>
</BODY>
</HTML>
