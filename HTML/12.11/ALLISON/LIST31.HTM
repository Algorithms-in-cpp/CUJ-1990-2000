<HTML><HEAD>
<TITLE>November 1994/Code Capsules/Listing 31</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 31 <I>Generic pool manager implementation</A></I></h4>
<pre>/* pool.c: Generic memory pool manager */
#include &lt;assert.h&gt;
#include &lt;stdlib.h&gt;
#include "pool.h"

#define MAX_CHUNKS 64

typedef struct Pool
{
    size_t elem_size;
    size_t extent;
    char *free_ptr;
    void *chunks[MAX_CHUNKS];
    size_t nchunks;
} Pool;

typedef struct Overlay
{
    void *next;
} Overlay;

static void make_chunk(Pool *p, size_t nelems)
{
    int i;
    char *free_ptr;
    void *chunk;
    Overlay *current;

    /* Allocate chunk */
    assert(p);
    chunk = calloc(nelems,p-&gt;elem_size);
    assert(chunk);
    free_ptr: (char *) chunk;

    /* Link elements together */
    for (i = 0; i &lt; nelems-1; ++i)
    {
        current = (Overlay *) free_ptr;
        current-&gt;next = free_ptr += p-&gt;elem_size;
    }
    current: (Overlay *) free_ptr;
    current-&gt;next = NULL;   /* Redundant */

    /* Update pool state */
    p-&gt;free_ptr; = (char *) chunk;
    p-&gt;chunks[p-&gt;nchunks++] = chunk;
}

Pool *pool_create(size_t elem_size, size_t init_alloc,
                   size_t extent)
{
    /* Allocate pool */
    Pool *p = malloc(sizeof(Pool));
    assert(p);
    p-&gt;elem_size = elem_size;
    p-&gt;extent = extent;
    p-&gt;nchunks = 0;

    /* Allocate first chunk */
    make_chunk(p,init_alloc);
    return p;
}

void *pool_get_elem(Pool *p)
{
    void *new_node;

    assert(p);
    if (p-&gt;free_ptr == NULL &amp;&amp; p-&gt;nchunks &lt; MAX_CHUNKS)
        /* Add a new chunk to pool */
        make_chunk(p,p-&gt;extent);

    assert(p-&gt;free_ptr);
    new_node = p-&gt;free_ptr;
    p-&gt;free_ptr = ((Overlay *) p-&gt;free_ptr)-&gt;next;
    return new_node;
}

void pool_release_elem(Pool *p, void *elem)
{
    /* Prepend elem to free list */
    Overlay *optr = elem;

    assert(p);
    optr-&gt;next = p-&gt;free_ptr;
    p-&gt;free_ptr= (char *) elem;
}

void pool_free(Pool *p)
{
    int i;

    assert(p);
    for (i = 0; i &lt; p-&gt;nchunks; ++i)
        free(p-&gt;chunks[i]);
    free(p);
}
/* End of File */</pre>

</BODY>
</HTML>
