

<HTML>
<HEAD>

<TITLE>November 1994/Code Capsules</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocnov.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Code Capsules<A name="01CB_00F3"><A name="01CB_00F3"></font></h2><P>
<h3 align="center"><A name="01CB_0000"><A name="01CB_0000">Dynamic Memory Management, Part 2</h3><P>
<h3 align="center"><font color="#800000">Chuck Allison</font></h3><hr><blockquote><P>
<P><i><A name="01CB_0000"><A name="01CB_0000">Chuck Allison is a regular columnist with CUJ and a software architect for the Family History Department of the Church of Jesus Christ of Latter Day Saints Church Headquarters in Salt Lake City. He has a B.S. and M.S. in mathematics, has been programming since 1975, and has been teaching and developing in C since 1984. His current interest is object-oriented technology and education. He is a member of X3J16, the ANSI C++ Standards Committee. Chuck can be reached on the Internet at 72640.1507@compuserv.com.</i></P><P>
In last month's article I explored some of the finer points of using heap memory in C programs, and then introduced the <I>new</I> and <I>delete</I> operators of C++. The word <I>operators</I> is key. In C, you allocate dynamic memory via the library functions <I>malloc, calloc,</I> and <I>realloc</I>. You must explicitly pass the size of the objects you're working with to these functions. Since <I>new</I> is an operator in C++, the compiler figures out how much memory is needed &#151; you just deal with objects.<P>
To get a pointer to a dynamic object of any type, just ask for it:<P>
<pre>   T *tp = new T;</pre>
Using <I>new</I> does two things:<P>
1)     Allocates memory for the object<P>
2)     Calls the appropriate constructor<P>
Arrays are easy, too:<P>
<pre>   const size_t SIZE = 100;
   T *tap = new T[SIZE];</pre>
In this case <I>new</I> calls the default constructor to initialize each array element, in order of increasing index.<P>
Even multi-dimensional arrays are a snap. For example, to allocate a 2-by-3 array, you can do something like:<P>
<pre>   const size_t NROWS = 2;
   const size_t NCOLS = 3;
   T (*p)[NCOLS] =
      new T[NROWS][NCOLS];</pre>
You can now use <I>p</I> with array syntax, as in<P>
<pre>   T t;
   ...
   p[0][1] = t;</pre>
(If <I>p</I>'s declaration syntax is puzzling to you, see the Code Capsule, "Pointers and Arrays," <I>CUJ</I>, September 1993.)<P>
To dispose of a heap object, you use the <I>delete</I> operator:<P>
<pre>   delete tp;      // scalar version
   delete [] tap;  // array version</pre>
A call to <I>delete</I> invokes the appropriate destructor before deallocating memory. The array version, <I>delete[]</I>, destroys the array elements in decreasing index order. It is important to use the correct version of <I>delete</I> when returning memory to the heap.<P>
In this month's article I discuss some of the things you should be aware of when using the heap in C++.<P>
<h4><FONT COLOR="#000080"><A name="01CB_00F4">Deep vs. Shallow Copy<A name="01CB_00F4"></FONT></h4></P>
The simple string class in <A href="list1.htm">Listing 1</a>
and <A href="list2.htm">Listing 2</a>
holds its data in an underlying C-style string. Since the string can grow and shrink, the class allocates the data buffer from the heap. The test program in <A href="list3.htm">Listing 3</a>
exposes a problem with this class, however. Somehow a string which is either initialized or assigned from another stays "connected" to the original &#151; changing one changes the other. If you look closely at the class definition, you'll notice that I did not define a copy constructor or an assignment operator. A copy constructor has the signature<P>
<pre>   string(const string&amp;);</pre>
and executes whenever a new string object is initialized with the value of another, as in<P>
<pre>   string t = s;</pre>
The assignment operator has the following signature:<P>
<pre>   string&amp; operator=(const string&amp;);</pre>
The compiler automatically generates these functions if you don't. These automatic versions use <I>memberwise</I> semantics, which means that when you initialize a <I>string</I> object with another's value, each member of the receiving object is initialized with the value of the corresponding member in the original object. If the data member is an instance of a type that has a copy constructor, that constructor gets called. In the case of <I>string</I>, the data members are built-in types, so no constructor is called for each member; the pointer and counter are just copied as scalar values. This simple copy operation results in the situation shown in <A href="fig1.htm">Figure 1</a>.
<P>
The string objects <I>s</I> and <I>t</I> actually share the underlying C-string buffer, since the compiler-generated copy constructor just copied <I>s.data</I> to <I>t.data</I>. This is called a <I>shallow copy</I>. Sharing private data this way is not only inconvenient, but dangerous. If <I>s</I> should go out of scope before <I>t</I> does, the <I>string</I> destructor will turn <I>t.data</I> into a dangling pointer, as depicted in <A href="fig2.htm">Figure 2</a>.
<P>
What you really want is a "deep copy," which creates a separate copy of the underlying character buffer for each initialization or assignment. A deep copy requires a special copy constructor and assignment operator, both of which allocate a new buffer for the receiving object, and copy the characters from the original with <I>strcpy</I>. (See <A href="list4.htm">Listing 4</a>, <A href="list5.htm">Listing 5</a>, and
<A href="list6.htm">Listing 6</a>.
) In general, when an object contains a pointer to heap memory, you should define a custom copy constructor and assignment operator, not to mention a destructor and other constructors as necessary.<P>
<h4><FONT COLOR="#000080"><A name="01CB_00F5">Virtual Destructors<A name="01CB_00F5"></FONT></h4></P>
The essence of object-oriented programming is <I>polymorphism</I>, a fancy word for being able to invoke different but related behavior through a single interface. For example, the universal interface of a brake pedal allows you to stop any motor vehicle, even though the mechanics of stopping may differ from vehicle to vehicle, depending on the type of brake system (disc, drum, air, etc.). You can stop a car without even knowing what type of brake system it has, and without understanding what happens under the hood. In programming, polymorphism allows a higher degree of reuse and maintainability than traditional procedural systems.<P>
C++ supports polymorphism through <I>virtual functions</I>. The program in <A href="list7.htm">Listing 7</a>
uses an array of pointers that can point to objects of either of two class types: <I>B</I> (base) or <I>D</I> (derived). As the program traverses the array the appropriate member function executes transparently. If the current pointer refers to a <I>B</I> object, <I>B::f</I> executes, otherwise <I>D::f</I> does.<P>
A user interface library might support objects for data entry, such as tables, popup menus, or single data cells. A data entry form might consist of a collection of such objects in a particular layout. It would be convenient if a form-management system could simply traverse its objects (lets call them "fields") to invoke a particular action, without having to know what type of field each object was. With this sort of capability, you could refresh a form display by doing this:<P>
<pre>   for (int i = 0; i &lt; nfields; ++i)
       fields[i]-&gt;display();</pre>
The appropriate <I>display</I> member function would be called depending on the specific type of the object that <I>fields[i]</I> refered to.<P>
Novices to C++ often don't realize that destructors need to be virtual too. To illustrate, the programs in <A href="list8.htm">Listing 8</a>
- <A href="list12.htm">Listing 12</a>
contain skeletal definitions of the following class hierarchy:<P>
<pre>   field           (<a href="list8.htm">Listing 8</a>)
      cell        (<a href="list9.htm">Listing 9</a>)
      column      (<a href="list10.htm">Listing 10</a>)
         popmenu  (<a href="list11.htm">Listing 11</a>)
      table        (<a href="list12.htm">Listing 12</a>)</pre>
<I>field</I> is an <I>abstract class</I>, a class that exists only to unite the other classes as derived classes in a single hierarchy. A <I>form</I> object contains an array of pointers to dynamic <I>field</I> objects, and knows nothing about the other concrete types (see <A href="list13.htm">Listing 13</a>
and <A href="list14.htm">Listing 14</a>)
. The test program in <A href="list15.htm">Listing 15</a>
merely creates a form with a few fields so that you can observe what happens when the form is destroyed. The statement<P>
<pre>   delete fields[i]</pre>
in <I>Form::~Form()</I> as usual calls a destructor and then deallocates the associated memory. Because the destructors are virtual, the correct destructor gets called according to the dynamic type of the referenced object. By contrast, <A href="list16.htm">Listing 16</a>
shows that only the base part of each object is destroyed when the destructor is not virtual. In general, all base classes should have a virtual destructor, because you never know when a user might access derived objects on the heap through a base class pointer.<P>
<h4><FONT COLOR="#000080"><A name="01CB_00F6">Handling Memory Allocation Failures<A name="01CB_00F6"></FONT></h4></P>
Traditional C++ compilers return a null pointer when <I>new</I> fails to allocate memory:<P>
<pre>   T *tp = new T;
   if (t == 0)
   {
   cerr &lt;&lt; "memory exhausted" &lt;&lt; endl;
   abort();
}</pre>
Since inserting code like this can be quite tedious in applications that make heavy use of the heap, programmers of such applications often don't bother to check if the pointer is valid. Even if you religiously check every call to <I>new</I>, what do you do when memory fails within a constructor? Constructors don't return a value, so it can be awkward to pass that information down the line to client code.<P>
One alternative is to define a <I>new handler</I>, a function that executes whenever memory runs out. To install a function as a <I>new_handler</I>, pass it to the standard library function <I>set_new_handler</I> (see <A href="list17.htm">Listing 17</a>)
. A typical custom <I>new</I> handler tries to free up some memory and then returns, allowing <I>new</I> to try again. But if it can't come up with any more memory, then you should probably abort the program.<P>
A standard-conforming C++ compiler throws a <I>bad_alloc</I> exception when memory fails. Some compilers allow you to revert to the traditional "return-null" behavior by calling <I>set_new_handler(0)</I> (see <A href="list18.htm">Listing 18</a>)
. The program in <A href="list19.htm">Listing 19</a>
does not handle the <I>bad_alloc</I> exception, so the standard library function <I>terminate</I> executes, aborting the program. <A href="list20.htm">Listing 20</a>
shows how to catch a <I>bad_alloc</I> exception (except that the Borland compiler I use calls it <I>xalloc</I>, which was its old name). For more information on exceptions, see the Code Capsule "C++ Exceptions," <I>CUJ</I>, July 1994.<P>
<h4><FONT COLOR="#000080"><A name="01CB_00F7">Overriding <B><I>new</I></B> and <B><I>delete<A name="01CB_00F7"></B></I></FONT></h4></P>
The Standard C++ library defines six functions for allocating and deallocating memory. When you use the<I> </I><I>new</I> operator, it calculates the number of bytes needed and in turn calls one of these functions to allocate those bytes. The six functions are:<P>
<pre>   // Scalar versions
   void *operator new(size_t);
   void operator delete(void *);

   // Array versions
   void *operator new[](size_t);
   void operator delete[](void *);

   // Placement new
   void *operator new(size_t, void *);
   void *operator new[](size_t, void *);</pre>
Whenever you allocate an object of a built-in type from the heap, <I>new</I> calls the first function shown above to get the memory. You can easily implement this <I>new</I> via the <I>malloc()</I> function from Standard C (see <A href="list21.htm">Listing 21</a>)
. Likewise, deleting a dynamic, built-in object results in a call to <I>::operator delete(void *).</I> <A href="list21.htm">Listing 21</a>
also illustrates that you can <I>override</I> these functions. You override a function by defining it with the same signature as a previously-defined function. Any function you define with the same signature as one of the above replaces the library version of that function in your program.<P>
<A href="list22.htm">Listing 22</a>
shows a typical implementation of the default <I>::operator new</I> and <I>::operator delete</I> functions. The <I>bad_alloc</I> exception mentioned previously is thrown from the default <I>new</I> handler, which <I>::operator new</I> calls if the allocation fails. As you might expect, the array versions of these functions are called whenever you deal with dynamic arrays of built-in types.<P>
You can also replace the various versions of operator <I>new</I> and operator <I>delete</I> on a per-class basis. As <A href="list23.htm">Listing 23</a>
shows, you just include declarations of the functions you want to replace in the class definition. The test program in <A href="list24.htm">Listing 24</a>
creates and destroys both scalar objects and arrays of both base and derived classes so you can observe the interaction of constructors and destructors with class-specific versions of operator <I>new</I> and <I>delete</I> (see <A href="list25.htm">Listing 25</a>)
.<P>
<h4><FONT COLOR="#000080"><A name="01CB_00F8">Placement <B><I>new</I><A name="01CB_00F8"></B></FONT></h4></P>
Sometimes you want to create an object at a pre-determined address. The location could be in a region of RAM mapped to some device, or within a class-specific heap. You can construct such an object using the <I>placement</I> syntax for the <I>new</I> operator. For example, to construct a <I>T </I>at address<I> p</I>, do the following:<P>
<pre>   #include &lt;new.h&gt;
   T *tp = new (p) T;</pre>
In this case, no version of operator <I>new</I> executes, since the memory is already available. In fact, the default version of operator <I>new</I> associated with this use of <I>new</I> ignores its size parameter and just returns the address parameter:<P>
<pre>   void *operator new(size_t, void *p)
   {
      return p;
   }</pre>
You may need to include this code in your program since not all compilers provide this function yet. As <A href="list26.htm">Listing 26</a>
illustrates, you can <I>overload</I> placement <I>new</I> with as many parameters as you like.<P>
You can use placement <I>new</I> to keep a class's assignment operator in sync with its copy constructor without duplicating the code that initializes a new object. You explicitly invoke the destructor on the object's <I>this</I> pointer and reconstruct the new copy in-place, with placement <I>new</I>:<P>
<pre>   T&amp; T::operator=(const T&amp; x)
   {
      if (this != &amp;x)
      {
         this-&gt;T::~T();
         new (this) T(x);
      }
      return *this;
   }</pre>
<h4><FONT COLOR="#000080"><A name="01CB_00F9">Class-specific Storage Management<A name="01CB_00F9"></FONT></h4></P>
A common use for placement <I>new</I> is in managing class-specific heaps. As I illustrated last month, to save the overhead inherent in creating dynamic objects, it is often a good idea to allocate one large chunk off the heap and manage it yourself for allocating smaller objects. This action results in critical savings of time and space for container classes. The program in <A href="list27.htm">Listing 27</a>
uses a class template for an expandable vector. To save overhead, the program allocates storage to hold a pre-determined number (<I>CHUNK</I>) of elements. Whenever you append an element to the vector, the program just constructs that element at the next available location:<P>
<pre>   new (arena + length_++) T(x);</pre>
The program only calls the real operator <I>new</I> when it is time to expand the underlying storage pool:<P>
<pre>   T *new_arena = (T*) ::operator new(sizeof(T) *
                                   new_capacity);</pre>
When it comes time to destroy a single element, you don't want to deallocate any memory, since it is part of the storage arena and can be reused. Instead, all you do is explicitly invoke the destructor:<P>
<pre>   (arena+i)-&gt;T::~T();</pre>
The test program and sample output are in <A href="list28.htm">Listing 28</a>
and <A href="list29.htm">Listing 29</a>
respectively.<P>
<h4><FONT COLOR="#000080"><A name="01CB_00FA">Summary<A name="01CB_00FA"></FONT></h4></P>
Using the <I>new</I> and <I>delete</I> operators is more convenient than using <I>malloc</I> and free, but there are a few gotchas to watch out for, namely:<P>
1)     Be sure to do deep copies for objects with members that point to the heap.<P>
2)     Make base class destructors virtual.<P>
3)     Always define a <I>bad_alloc</I> exception handler.<P>
4)     Override <I>new</I> and <I>delete</I> and/or their array versions for custom control of the heap.<P>
I haven't exhausted all there is to say about dynamic memory in C++. In a future article I'll discuss smart pointers and garbage collection.<P>
<h4><FONT COLOR="#000080"><A name="01CB_00FB">Answer to Last Month's Exercise<A name="01CB_00FB"></FONT></h4></P>
Last month I asked you to write a generic memory pool manager in C with the following interface:<P>
<pre><I>Pool *pool_create(size_t elem_size, size_t init_alloc,</I>
               <I>size_t extent);</I></pre>
Creates a pool to manage elements of size <I>elem_size</I>. Allocates <I>init_alloc</I> elements initially, and increases the pool by <I>extent</I> elements as needed.<P>
<pre><I>void *pool_get_elem(Pool *p);</I></pre>
Returns a pointer to the next free element in the pool, and updates the free pointer.<P>
<pre><I>void pool_release_elem(Pool *p, void *elem);</I></pre>
Returns an element to the pool.<P>
<pre><I>void pool_free(Pool *p);</I></pre>
Releases all the memory used by the pool.<P>
My solution is in <A href="list30.htm">Listing 30</a>
- <A href="list31.htm">Listing 31</a>.
 Like the less generic solution in last month's article, it allocates a region large enough to hold a given number of elements, and then links them together by placing in each element a pointer to the subsequent element, as represented by <A href="fig3.htm">Figure 3</a>.
 The following structure definition allows me to interpret the contents as a pointer:<P>
<pre>struct Overlay
{
   void *next;
};</pre>
For example, to return a pointer to the next free space and then advance past it, the function <I>pool_get_elem</I> does this:<P>
<pre>   new_node = p"&gt;free_ptr;
   p"&gt;free_ptr = ((Overlay *) p"&gt;free_ptr)"&gt;next;
   return new_node;</pre>
See the cross-reference program <I>(xref2.c)</I> in last month's article for hints on where to put calls to the pool interface.<P>

<h4><a href="../../../source/1994/nov94/allison.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
