<HTML><HEAD>
<TITLE>November 1994/Encapsulating the DOS IOCTL Interface/Figure 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Figure 2<I> Using a static class initializer</A></I></h4>
<pre>class testClass : public parentClass {
protected:
    int _value;             //internal data member
    int validate(int);      //validation function

    testClass( int input )    //constructor
    {   //validate input, set _value to result....
        _value = validate(input) == OK ? input : -1;
    }

public:
    ~testClass() { }        //destructor
    readfile( char * );     //other member function

    static testClass *Init( int input ) {
        testClass *objp = new testClass( input);

        if( objp-&gt;_value == -1 )  { //input invalid
            delete objp;        //deallocate object
            return NULL;        //return error
        }

        return objp;  //input OK
    }
};

//program "testprog.exe" ........

#include &lt;iostream.h&gt;

main( int argc, char **argv )
{
    testClass *test =
               testClass::Init( atoi( argy[1] ) );

    if( !test )     {
        cerr &lt;&lt; "Object initialization failed\n";
        return 1;   //exit, return error
    }

    //continue normal program operation ....
        ..
        ..
    test-&gt;readfile( argv[2] ); //access member func
        ..
        ..
    delete test;
    return 0;
}
/* ----- End of File ------------------------------ */</pre>
</BODY>
</HTML>
