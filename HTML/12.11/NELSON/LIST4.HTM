<HTML><HEAD>
<TITLE>November 1994/Encapsulating the DOS IOCTL Interface/Listing 4</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 4 iohandle.cpp &#151; <I>base class implementation for handle-based IOCTL for character devices and files</A></I></h4>
<pre>#include &lt;io.h&gt;         //open()
#include &lt;fcntl.h&gt;
#include "iohandle.h"

#ifndef NDEBUG
#include &lt;iostream.h&gt;

void IoctlHandle::IoctlError( int errval )
{
   cerr &lt;&lt; "*** class IoctlHandle: DOS error #"
       &lt;&lt; errval &lt;&lt;" encountered, subfunction #"
       &lt;&lt; hex &lt;&lt; _iregs.x.ax &lt;&lt; dec &lt;&lt; endl;
}
#endif      // NDEBUG

IoctlHandle::~IoctlHandle()  {
   if( _pathused )      //close() handle
          close( _handle );    //if path specified.
}
IoctlHandle::IoctlHandle( int handle )     {
   _info = handle_info( handle );
   _handle = _dos_error ? -1 : handle;
   _pathused = 0;
}
IoctlHandle::IoctlHandle( const char *path )    {
   int fh;
   if( (fh = open( path, O_RDWR )) != -1 )    {
          _info = handle_info( fh );
          _handle = fh;
          _pathused = 1;
          return;
   }
   _handle = -1;
   _pathused = 0;
}
IoctlHandle *IoctlHandle::Init( int fhandle )   {
  /* Return a pointer to new IoctlHandle object */
   IoctlHandle *obj = new IoctlHandle( fhandle);
   if( obj-&gt;_handle == -1 )  {    //bad fhandle
          delete obj;
          return (IoctlHandle *) 0;
   }
   return obj;
}
IoctlHandle *IoctlHandle::Init(const char *path ) {
  /* Return a pointer to a new IoctlHandle object */
   IoctlHandle *obj = new IoctlHandle( path);
   if( obj-&gt;_handle == -1 )   {   //bad path
          delete obj;
          return (IoctlHandle *) 0;
   }

   return obj;
}
unsigned IoctlHandle::handle_info( int handle ) {
  /* Get device information word */
   _iregs.x.bx = handle;
   int21_44h(get_handle_info);
   return _oregs.x.dx;
}
int IoctlHandle::inputStatus(void)  {
  /* Return -1 if handle ready for input, else 0 */
   _iregs.x.bx = _handle;
   int21_44h(input_status);
   return (int) _oregs.h.al;
}
int IoctlHandle::outputStatus(void) {
  /* Return -1 if handle read for output, else 0 */
   _iregs.x.bx = _handle;
   int21_44h(output_status);
   return (int) _oregs.h.al;
}
int IoctlHandle::isRemote(void)  {
   _iregs.x.bx = _handle;
   int21_44h( handle_remote );
   return _oregs.x.dx &amp; remote; //!0 if remote
}

// End of File
</pre>
</BODY>
</HTML>
