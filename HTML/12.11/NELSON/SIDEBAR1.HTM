<HTML><HEAD><TITLE>November 1994/Encapsulating the DOS IOCTL Interface/Sidebar</TITLE></HEAD><BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h3 align="center"><FONT FACE="Garamond" COLOR="#000080">class <I>IoctlHandle</I></FONT></h3><hr>
<BLOCKQUOTE>
<I>IoctlHandle *Init(int handle)</I> &#151; Returns a pointer to a new object of type <I>IoctlHandle</I>, returns <I>NULL</I> is specified handle is invalid. Specified handle becomes the current handle. New object is guaranteed to be correctly initialized.<P>
<I>IoctlHandle *Init(const char *path)</I> &#151; Returns a pointer to a new object of type <I>IoctlHandle</I>, returns <I>NULL</I> if specified path is invalid or filename does not exist. Handle of opened file/device becomes current handle. New object is guaranteed to be correctly initialized.<P>
<I>int isFile(void)</I> &#151; Returns non-zero result if current handle is associated with a file.<P>
<I>int isDevice(void)</I> &#151; Returns non-zero result if current handle is associated with a character device.<P>
<I>unsigned handleInfo(void)</I> &#151; Returns information word for current handle.<P>
<I>int readHandle(void)</I> &#151; Returns current handle in use by the object, passed originally to <I>Init(int)</I> or opened by <I>Init(char *)</I>.<P>
<I>int inputStatus(void)</I> &#151; Returns input status for current handle, non-zero (-1) if device or file is ready for input.<P>
<I>int outputStatus(void)</I> &#151; Returns output status for current (device) handle, non-zero (-1) if device is ready for output. Not applicable for files.<P>
<I>int isRemote(void)</I> &#151; Returns non-zero if current handle refers to a file or device located on a remote computer. Should not normally be used by applications.<P>
<h4>class<B><I> IoctlBlock</I></B></FONT></h4></P>
<I>IoctlBlock *Init(int drive)</I> &#151; Returns a pointer to a new object of type <I>IoctlBlock</I>, returns <I>NULL</I> is specified (1-based) drive is invalid. Specified drive becomes current (block) device. New object guaranteed to be correctly initialized.<P>
<I>unsigned driveInfo(void)</I> &#151; Returns information word for current device.<P>
<I>int currentDrive(void)</I> &#151; Returns 1-based number of current device in use by the object.<P>
<I>int readIoctl(unsigned *count, void *buffer)</I> &#151; Receive control data from device driver associated with the current device. Assigns number of characters actually received to <I>count</I> argument. Returns zero on success, or DOS error value if not.<P>
<I>int sendIoctl(unsigned *count, void *buffer)</I> &#151; Send control data to device driver associated with the current device. Assigns number of characters actually sent to <I>count</I> argument. Returns zero on successful, or DOS error value if not.<P>
<I>int isRemote(void)</I> &#151; Returns non-zero if current device is located on a remote computer.<P>
<I>int isRemovable(void)</I> &#151; Returns non-zero if current device contains removable storage media, such as a floppy disk drive, or if device is remote.<P>
<I>int checkAlias(void)</I> &#151; Returns the active drive alias (if any) assigned to the current device, zero if no drive aliases have been assigned, or -1 on DOS error.<P>
<I>int nextAlias(int next)</I> &#151; Set next active (logical) drive number for the current device and return active drive number, or return -1 on DOS error. Assumes prior call to function <I>checkAlias</I>. Specified drive# is 1-based.<P>
<I>int getParams(struct DEVICEPARAMS *data)</I> &#151; Fills a <I>DEVICEPARAMS</I> structure with configuration data related to current device. Returns zero on success, or DOS error value.<P>
<I>int setParams(struct DEVICEPARAMS *data)</I> &#151; Sets new configuration data for current device from specified <I>DEVICEPARAMS</I> structure. Returns zero on success, or DOS error value.<P>
<I>int readSectors(struct RWBLOCK *data)</I> &#151; Read raw sectors from current device as specified in the <I>RWBLOCK</I> structure. Returns zero on success, or DOS error value.<P>
<I>int writeSectors(struct RWBLOCK *data)</I> &#151; Write raw sectors to current device as specified in the <I>RWBLOCK</I> structure. Returns zero on success, or DOS error value.<P>
<I>int getAccessFlag(void)</I> &#151; Returns media access flag for current device, zero if access is blocked or media is unformatted.<P>
<I>int setAccessFlag(int flag)</I> &#151; Sets media access flag for current device, set to zero to block access to media. Returns new flag state for confirmation.<P>
<I>int formatTrack(int head, int cylinder)</I> &#151; Formats and verifies a track on current device at specified head/cylinder location. Returns zero on success, or DOS error value.<P>
<I>int checkFormat(int head, int cylinder)</I> &#151; Returns value indicating: presence of ROM support (0), no ROM support present (1), specified format combination is invalid (2), or no media present (3). See reference <a href="nelson.htm#2">[2]</a>.<P>
<I>int verifyTrack(int head, int cylinder)</I> &#151; Verify a track on the current device at specified track location. Returns zero on success, or DOS error value.<P>
<I>int getMediaID(struct MID *mid)</I> &#151; Fills a structure of type <I>MID</I> with the volume label, serial number, and file system type for the current device. This data uniquely identifies the storage medium in use. Returns zero if no errors, or DOS error value if an error was encountered.<P>
<I>int setMediaID(struct MID *mid)</I> &#151; Sets media ID data for the current device from the given <I>MID</I> structure. Returns zero if no errors, or DOS error value if an error was encountered.<P>
<I>int senseMediaType(struct MTYPE *mtype)</I> &#151; Fills a structure of type <I>MTYPE</I> with data pertaining to media type for current device. Returns zero if no errors, or DOS error value if an error was encountered.<P>
<I>int checkFunction(block_cmd cmd)</I> &#151; Determines whether the specified Generic Block IOCTL minor code is supported by the device driver for the current device. Function accepts all Generic Block IOCTL minor codes except the get/set access flag. This function is invalid for DOS versions &lt; 5.0. Returns zero if function is supported, 1 or 2 if not supported, 3 if drive is invalid, or 4 if support cannot be determined or DOS version &lt; 5.<P>
<h4>class <B><I>charHandle</B></I></FONT></h4></P>
<I>charHandle *Init(const char *device)</I> &#151; Returns a pointer to a new object of type <I>charHandle</I>, returns <I>NULL</I> if specified device is invalid or refers to a file. Handle of opened device becomes current handle. New object is guaranteed to be correctly initialized.<P>
<I>int deviceCat(void)</I> &#151; Returns category (Serial, Console, or Parallel) for current device handle.<P>
<I>unsigned setDeviceInfo(unsigned newinfo)</I> &#151; Sets new information word for current device handle and returns new word for confirmation, or zero if a DOS error was detected.<P>
<I>int isCooked(void)</I> &#151; Returns non-zero if current device handle is in ASCII (translated) mode.<P>
<I>int isRaw(void)</I> &#151; Returns non-zero if current device handle is in binary (untranslated) mode.<P>
<I>int hasIoctlChar(void)</I> &#151; Returns non-zero if device driver for current device handle supports send/receive IOCTL data, subfunctions 02h and 03h, implemented here by <I>sendIoctl</I> and <I>readIoctl</I>.<P>
<I>int deviceReadyIn(void)</I> &#151; Convenience function related to <I>IoctlHandle::inputStatus</I>. Returns non-zero if device is ready for input.<P>
<I>int deviceReadyOut(void)</I> &#151; Convenience function related to <I>IoctlHandle::outputStatus</I>. Returns non-zero if device is ready for output.<P>
<I>unsigned sendIoctl(unsigned *count, void *data)</I> &#151; Sends control data to device driver associated with current device handle. Re-assigns number of characters actually sent to <I>count</I> argument. Returns 0 on success, or DOS error value if not.<P>
<I>unsigned readIoctl(unsigned *count, void *data)</I> &#151; Receive control data from device driver associated with current device handle. Re-assigns number of characters actually received to <I>count</I> argument. Returns zero on success, or DOS error value if not.<P>
<I>unsigned busyCount(void)</I> &#151; Returns value (iteration count) indicating number of times a device driver will attempt to send output to a printer device before concluding that the device is busy. Current handle must refer to a printer (<I>LPT1-LPT3</I>). Returns zero on error.<P>
<I>unsigned busyCount(unsigned count)</I> &#151; Sets busy (iteration) count for a printer device driver and return new count for confirmation, or zero on error. Current handle must refer to a printer (<I>LPTI-LPT3</I>).<P>
<I>int getANSIdata(struct ANSIdata *data)</I> &#151; Fills an <I>ANSIdata</I> struct with data pertaining to <I>ANSI.SYS</I> driver configuration. Current handle must refer to CON device and <I>ANSI.SYS</I> driver must be installed. Returns zero on success, -1 on error.<P>
<I>int setANSIdata(struct ANSIdata *data)</I> &#151; Sets new <I>ANSI.SYS</I> driver configuration data from specified <I>ANSIdata</I> struct. Returns zero on success, -1 on error.<P>
<h4>class <B><I>fileHandle</I></B></FONT></h4></P>
<I>fileHandle *Init(int handle)</I> &#151; Returns a pointer to a new object of type <I>fileHandle</I>, returns <I>NULL</I> if specified handle is invalid or refers to a device. Specified handle becomes the current handle. New object is guaranteed to be correctly initialized.<P>
<I>fileHandle *Init(const char *path)</I> &#151; Returns a pointer to a new object of type <I>IoctlHandle</I>, returns <I>NULL</I> if specified path is invalid, filename does not exist, or is a device name. Handle of opened file/device becomes current handle. New object is guaranteed to be correctly initialized.<P>
<I>int fileEof(void)</I> &#151; Convenience function related to <I>IoctlHandle::inputStatus</I>. Returns non-zero if file is currently at end-of-file.<P>
<I>int driveNumber(void)</I> &#151; Returns zero-based drive number of disk on which the current (file) handle resides.<P>
</BLOCKQUOTE>
</BODY>
</HTML>
