

<HTML>
<HEAD>

<TITLE>November 1994/CUG New Releases</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocnov.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">CUG New Releases<A name="01D7_00F9"><A name="01D7_00F9"></font></h2><P>
<h3 align="center"><A name="01D7_0000"><A name="01D7_0000">ODMG-93, VGAMAZE, Coerce, and RFVDEMO</h3><P>
<h3 align="center"><font color="#800000">Victor R. Volkman</font></h3><hr><blockquote><P>
<P><i><A name="01D7_0000"><A name="01D7_0000">Victor R. Volkman received a BS in Computer Science from Michigan Technological University. He has been a frequent contributor to C/C++ Users Journal since 1987. He is currently employed as Senior Analyst at H.C.I,A. of Ann Arbor, Michigan. He can be reached by dial-in at the HAL 9000 BBS (313) 663-4173 or by Usenet mail to sysop@hal9k.com</i></P><P>
<h4><FONT COLOR="#000080"><A name="01D7_00FA">New Acquisitions<A name="01D7_00FA"></FONT></h4></P>
<UL><li>ODMG-93 (CUG #419): Dale Anderson's own implementation of the collections specified by Object Database Management Group 93 (ODMG-93).</li>
<li>VGAMAZE and Coerce (CUG #420): Display 3-D mazes with square or hexagonal rooms on your VGA. Also, a UNIX utility to coerce compatibility between MAP, PI, PIC, MAKI, PPM, PBM, and MLL image file formats.</li>
<li>RFVDEMO (CUG #421): Demo to show bitmap rotation, fractal zoom, voxelspace, and simple plasma effects on VGA for MS-DOS.</li></UL>
<h4><FONT COLOR="#000080"><A name="01D7_00FB">CUG #419: An ODMG-93 Collection for UNIX<A name="01D7_00FB"></FONT></h4></P>
Dale Anderson (San Diego, CA) submits his first release of the collections specified by Object Database Management Group 93 (ODMG-93). This work is based on the publication <I>The Object Database Standard: ODMG-93</I> (ISBN 1-55860-302-6). Although Anderson has no personal affiliation with the ODMG, his work nevertheless significantly furthers the ODMG conceptual model's propagation. Anderson's release contains collection classes, man pages for each method, and a test suite for almost all methods. The code itself has been tested on an HP/UX 9.0 C++ compiler and GNU C++ on the HP/UX platform. Anderson's ODMG-93 implementation for UNIX (as released on 03/02/94) is immediately available as CUG volume #419.<P>
This implementation does not include a mechanism for persistent objects. Anderson designed his collection to be the "front end" of the specification so that software developed with it today can easily integrate with an object-oriented database (OODB) in the future. Since the ODMG-93 specification intends to be independent of OODB implementations, no back-end database will appear in this implementation. Also, this implementation does not include an SQL parser, though one may eventually be released.<P>
Anderson's short-term goal is to develop a working model of the ODMG-93 class library that is as near 100% compliance as possible. This model then becomes a tool to compare and contrast with the written specification and to experiment with alternatives that can then be proposed to the ODMG-93 working group. Over the long term, Anderson hopes to continue to track with extensions of the ODMG model as they occur.<P>
This software fits the description in the U.S. Copyright Act of a "United States Government Work" &#151; it cannot be copyrighted. This software is freely available to the public for use without a copyright notice, and there are no restrictions on its use, now or subsequently.<P>
<h4><FONT COLOR="#000080"><A name="01D7_00FC">CUG #420: VGAMAZE and Coerce<A name="01D7_00FC"></FONT></h4></P>
CUG volume #420 includes two graphics tools with source code in C++. VGAMAZE is designed specifically for use with MS-DOS. Coerce is designed for use with UNIX workstations, such as Sun. A single diskette volume includes both programs as described below.<P>
<h4><FONT COLOR="#000080"><A name="01D7_00FD">CUG #420A: VGAMAZE in 3-D<A name="01D7_00FD"></FONT></h4></P>
James L. Dean (New Orleans, LA) contributes his VGAMAZE tools written for MS-DOS VGA graphics with the Borland C++ 3.0 compiler. VGAMAZE displays mazes with square (<I>SQRMAZE.CPP</I>) or hexagonal rooms (<I>HEXMAZE.CPP</I>)in three dimensions on your monitor. VGAMAZE includes a template for one dimensional virtual arrays. A plotting class can plot any surface z=f(x,y). An example program for surfaces (<I>SPIKE.CPP</I>) demonstrates that its good for more than just mazes. The CUG Library distribution includes all C++ source code and executables for SQRMAZE, HEXMAZE, and SPIKE.<P>
When you start a maze program, it will prompt you for a random number seed of eight or less characters. (Usually, a different random number seed will produce a different maze.) After the maze is displayed, press S to see the solution. <A href="fig1.htm">Figure 1</a>
shows a square maze fully generated, but before the solution is overlaid. You can then press any key to exit. To run VGAMAZE you will need a VGA (or SVGA) graphics card, a VGA monitor, and about 2 MB of expanded memory or disk space (for virtual memory).<P>
VGAMAZE supports only the large memory model. Also, <I>VGA3D.CPP</I> uses Borland's <I>GRAPHICS.LIB</I>, so you must link this library file in with any program you create. See the Borland documentation on the utilities BINOBJ and TLIB for information on including <I>EGAVGA.BGI</I> in <I>GRAPHICS.LIB.</I><P>
Be advised that VGAMAZE performs an extreme amount of floating-point arithmetic and probably should not be run without a math coprocessor. On my Cyrix 80486DLC 40 Mhz machine (without math coprocessor) I waited 28 minutes for VGAMAZE to complete its work.<P>
For HEXMAZE, do not optimize invariant code motion if you optimize common subexpressions; a bug in Borland C++ 3.0 causes incorrect code to be generated.<P>
VGAMAZE version 4 (as released on 02/27/94) is immediately available as CUG Library volume #420A.<P>
<h4><FONT COLOR="#000080"><A name="01D7_00FE">CUG #420B: Coerce Graphics File Converter for UNIX<A name="01D7_00FE"></FONT></h4></P>
Tatsurou Sekiguchi (Department of Information Science, University of Tokyo, Japan) submits his Coerce program which can convert between many graphics file formats popular on BBSs in Japan. Specifically, it converts from one of MAG, PI, PIC, MAKI, PPM, PBM, ML1, and beta formats to one of MAG, PI, PIC, PPM, and beta formats. Coerce compiles on any Sun workstation running SunOs 4.1.3 with GNU C++ 2.4.5 or later. Others have reported good success compiling Coerce on MIPS and RS/6000 machines. Sekiguchi also includes source for a simple X-Window bitmap viewer.<P>
Coerce is a synthesis of converters, so it can be used as an alternative to each individual converter. For instance, in order to convert MAG format to PIC format, type<P>
<pre>   % coerce -mag +pic foo.mag</pre>
Options of coerce:<P>
<I>-{mag, pi , pic,maki,ppm,pbm,ml1,beta}</I> &#151; Specify the format of input images.<P>
<I>+{mag, pi,pic,ppm, beta}</I> &#151; Specify the format of output images.<P>
<I>-notadjust</I> &#151; Prevents adjustment of the pixel aspect ratio for PIC format images.<P>
<I>-stdin</I> &#151; Indicates that an input image is read from standard input.<P>
<I>-stdout</I> &#151; Indicates that the result is to be sent to standard output.<P>
<I>-o [name]</I> &#151; Specifies the output file name.<P>
<I>-quiet</I> &#151; Prevents messages from being written.<P>
Coerce includes part of the source files from PiFM vet 0.16, which was written by Takashi Nawashiro. Sekiguchi has obtained permission to use and redistribute these source files. He also waives the copyright on Coerce. You may use/modify/redistribute this package freely, even for commercial purposes. You can reach him via the Internet at <I>cocoa@is. s. u-tokyo. ac.jp.</I><P>
Sekiguchi welcomes ports to other environments and other machines as well as efforts to incorporate new facilities to save/load additional format types. (There is already a patch for xv which enables it to load MAG and PIC format images. It is an interesting attempt to combine Coerce with xv.)<P>
Coerce (as released on 02/24/94) is immediately available as CUG Library volume #420B.<P>
<h4><FONT COLOR="#000080"><A name="01D7_00FF">CUG #421: RFV VGA Graphics Demo<A name="01D7_00FF"></FONT></h4></P>
Thomas Hagen (Trondheim, Norway) contributes his RFVDEMO collection of high-speed VGA animation demonstrations for MS-DOS. These animations require the Borland C++ 3.1 compiler. RFVDEMO includes four main animation demonstrations: bitmap-rotation routine, fractal zoomer, plasma, and a voxelspace routine. This volume also includes lower-level support routines for keyboard handling, a timer class, and others.<P>
I was particularly impressed with the speed of these demonstrations on my Cyrix 80486DLC 40 Mhz machine (without math coprocessor). The bitmap rotation appeared seamless without flicker, The fractal zoomer showed the Mandelbrot set at a breathtaking speed &#151; faster than some fractal videotaped productions I've seen. An included utility called MAKEFRAC lets you design your own fractal animation sequences. The plasma literally oozes and flows across your screen (see <A href="fig2.htm">Figure 2</a>)
, Last, the voxelspace demo uses shading and perspective to give you a real-time flyby over imaginary terrain.<P>
RFVDEMO requires an 80386 or better CPU (486 recommended) and a register-level-compatible VGA card. If you want to run the MAKEFRAC designer, you'll need a 1 MB SVGA. The programs require fairly heavy chunks of MS-DOS conventional memory, from 500 to 600 KB.<P>
Hagen mentions that he has kept documentation to its bare minimum. He writes: "The one thing you <I>won't</I> find, though, is verbose comments. You're pretty much on your own here!" Licensing is equally informal since the source code has been released into the public domain. Hagen asks only for a postcard if you find the source code useful. He may be contacted at Elvegata 16, N-7013 Trondhiem, Norway. e-mail: <I>thomas@edb. tih. no.</I><P>
RFVDEMO version 0.1 (as released on 01/17/94) is immediately available in a three disk set as CUG volume #422.<P>
</BLOCKQUOTE>
</BODY>
</HTML>
