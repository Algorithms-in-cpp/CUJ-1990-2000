<HTML><HEAD>
<TITLE>November 1994/Standard C/C++/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1<I> The file ostream</I></A></h4>
<pre>// ostream standard header
#ifndef _OSTREAM_
#define _OSTREAM_
#include &lt;streambuf&gt;
       // class ostream
class ostream : virtual public ios {
public:
   ostream(streambuf *_S)
      : ios(_S) {}
   ostream(_Uninitialized)
      : ios_(Noinit) {}
   virtual ~ostream();
   _Bool opfx();
   void osfx();
   ostream&amp; operator&lt;&lt;(ostream&amp; (_*F)(ostream&amp;))
      {return ((*_F)(*this)); }
   ostream&amp; operator&lt;&lt;(ios&amp; (*_F)(ios&amp;))
      {(*_F)(*(ios *)this); return (*this); }
   ostream&amp; operator&lt;&lt;(const char *);
   ostream&amp; operator&lt;&lt;(char_C)
      {put(_C); return (*this); }
   ostream&amp; operator&lt;&lt;(unsigned char_C)
      {return (*this &lt;&lt; (char)_C); }
   ostream&amp; operator&lt;&lt;(short _X)
      {return (_Print(&amp;"B hoB hxB hd"[_If()], _X)) ; }
   ostream&amp; operator&lt;&lt;(unsigned short_X)
      {return (_Print(&amp;"B hoB hxB hu"[_If()], _X)); }
   ostream&amp; operator&lt;&lt;(int _X)
      {return (_Print(&amp;"B oB xB d"[_If()],_X)); }
   ostream&amp; operator&lt;&lt;(unsigned int _X)
      {return (_Print(&amp;"B oB xB u"[_If()], _X)); }
   ostream&amp; operator&lt;&lt;(long _X)
      {return (_Print(&amp;"B lob lxB ld"[_If()], _X)); }
   ostream&amp; operator&lt;&lt;(unsigned long _X)
      {return (_Print(&amp;"B lob lxB lu"[_If()], _X)); }
   ostream&amp; operator&lt;&lt;(float _X)
      {return (_Print(&amp;"P. eP. fP. g"[ _Ff()], _Pr(), _X)); }
   ostream&amp; operator&lt;&lt;(double _X)
      {return (_Print(&amp;"P .leP.lfP.lg"[_Ff()],_Pr(), _X)); }
   ostream&amp; operator&lt;&lt;(long double_X)
      {return (_Print(&amp;"P.LeP.LfP.Lg"[_Ff()], Pr(), _X)); }
   ostream&amp; operator&lt;&lt;(void *);
   ostream&amp; operator&lt;&lt;(streambuf&amp;);
   ostream&amp; put(char);
   ostream&amp; write(const char *, int);
   ostream&amp; write(const unsigned char *_S, int _N)
      {return (write((const char *)_S, _N)); }
   ostream&amp; flush();
#if_HAS_SIGNED_CHAR
   ostream&amp; operator&lt;&lt;(signed char _C)
      {return (*this &lt;&lt; (char)_C); }
   ostream&amp; write(const signed char *_S, int_N)
      {return (write((const char *)_S,_N)); }
#endif /* _HAS_SIGNED_CHAR */
protected:
   int _Ff()
      {return ((flags() &amp; floatfield) == scientific ? 0
             : (flags() &amp; floatfield) == fixed ? 4 : 8); }
   int _If()
      {return ((flags() &amp; basefield) == oct ? 0
             : (flags() &amp; basefield) == hex ? 4 : 8); }
      void _Pad(const char *, char *, int);
   int _Pr();
   ostream&amp;_Print(const char * ...);
   };
      // manipulators
ostream&amp; endl(ostream&amp;);
ostream&amp; ends(ostream&amp;);
ostream&amp; flush(ostream&amp;);
#endif
</pre>
</BODY>
</HTML>
