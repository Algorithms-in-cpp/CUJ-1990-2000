

<HTML>
<HEAD>

<TITLE>November 1994/Stepping Up To C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocnov.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Stepping Up To C++<A name="01D3_00F5"><A name="01D3_00F5"></font></h2><P>
<h3 align="center"><A name="01D3_0000"><A name="01D3_0000"><B>Designing Generic Container Classes, Part 5</B></h3><P>
<h3 align="center"><font color="#800000">Dan Saks</font></h3><hr><blockquote><P>
<P><i><A name="01D3_0000"><A name="01D3_0000">Dan Saks is the president of Saks &amp; Associates, which offers consulting and training in C++ and C. He is secretary of the ANSI and ISO C++ committees. Dan is coauthor of C++ Programming Guidelines, and codeveloper of the Plum Hall Validation Suite for C++ (both with Thomas Plum). You can reach him at 393 Leander Dr., Springfield OH, 45504-4906, by phone at (513)324-3601, or electronically at dsaks@wittenberg.edu.</i></P><P>
This is the fifth part of my exploration into designing and implementing generic container classes. A container is a data structure, such as a list, tree, or vector, that holds other objects. A generic container class is a single class definition for a particular type of container. But unlike a specific container class which can only hold objects of one particular type, each instance of a generic container class can hold a different type of object.<P>
I began this series by presenting two different classes for first- in-first-out queues: <I>intq and strq</I>. (See "Stepping Up to C++: Designing Generic Container Classes, Part 1," <I>CUJ</I>, June, 1994.) These classes differed only in the types of elements they could hold: an <I>intq</I> is a queue of <I>int</I>, and a <I>strq</I> is a queue of <I>str</I> (a class of variable-length strings). The obvious similarities in these classes led me to try writing a single class, <I>genq</I>,<I> </I>that could do the work of both.<P>
A major impediment to implementing a generic container class is that the different types they are meant to contain can have vastly different sizes. It's difficult, if not impossible, to cram large as well as small objects into container slots of only one size. Thus I designed a <I>genq</I> that holds pointers to the elements in the collection, rather than holding the elements themselves. The pointers have type <I>void </I>*so that a <I>genq</I> can hold the address of any type of data object.<P>
Using a container of <I>void </I>*as a generic container has several drawbacks:<P>
1.     <I>genqs</I> have pointer semantics. Thus, applications using <I>genqs</I> must deal with complications that arise from storing the addresses of objects rather than the objects themselves. In contrast, a container for a specific type (such as <I>intq</I> or <I>strq</I>) typically has value semantics, which are simpler to use.<P>
2.     <I>genqs</I> lack type safety. Applications must use casts when removing objects from a <I>genq</I>.<P>
3.     <I>genqs</I> are heterogeneous. However, most applications need only homogeneous containers, that is, containers for which all the objects in a single container have the same type. Specific containers can enforce homogeneity at compile time, <I>genqs</I> cannot.<P>
Part 2 (August, 1994) introduced type-specific wrapper classes as a solution to these problems. A wrapper is a version of a type-specific class (such as <I>intq</I> or <I>strq</I>) using a <I>genq</I> object as a private member. A wrapper class "wraps" a thin layer of member functions around a <I>genq</I>. These member functions delegate most of the real work of the container to the <I>genq</I> member functions, but they add explicit type conversions (casts) plus a little more code to restore the compile-time type information and value semantics lost by using <I>void</I> * elements. By confining the casts and pointer manipulations to just a small part of the code, wrappers make <I>genqs</I> both safer and easier to use.<P>
Part 3 (September, 1994) introduced iterator objects as a general mechanism for visiting each (iterating over) element in a container. An iterator is not part of the container, but it knows enough about the internals of the container to be able to locate objects within the container. A given iterator class typically works with only one particular container class. Therefore, each container that has an iterator defines its own iterator class. I recommend declaring each iterator class as a public member of its corresponding container.<P>
Writing a type-safe wrapper is not always easy. Ideally, the author of the generic should supply wrappers for every conceivable element type, but that's simply not feasible. Thus end users (application programmers) often must write their own wrappers.<P>
In Part 4 last month, I considered using polymorphism (dynamic binding) instead of wrapper classes as a way to provide a generic container with the type information it needs to do its job. I presented a class <I>comq</I> that's very similar to <I>genq</I>, except that <I>comq </I>has elements of type <I>common</I> * instead of <I>void </I>*<I>. common</I> is an abstract base class for containable objects (objects that can be placed into containers). You adapt <I>comq</I> to hold a specific element type <I>T</I> not by wrapping <I>comq</I> in another class, but rather by deriving from <I>common</I> a new class that has a member of type T.<P>
This polymorphic approach solves some problems, but doesn't completely eliminate the need for using casts in applications using <I>comqs</I>. Thus containers of <I>common</I> * still need wrapper classes. Furthermore, in my opinion, this design misuses inheritance.<P>
All this brings us to the present. It appears that the best way to write generic containers is by using some combination of <I>void</I> * elements (to relax type checking) and wrapper classes (to restore lost type information). If only class designers could supply users with some way to generate wrappers as needed, generics would be much safer and easier to use. That's what I'll show you how to do this month.<P>
Until a few years ago, macros were the only tool available for generating wrapper classes. Unfortunately, they weren't really up to the task. More recent C++ implementations, as well as the draft C++ Standard, provide templates as a superior alternative to macros. Although I'm clearly headed toward using templates, I think the older macro-based techniques still merit discussion because:<P>
<UL><li>They provide useful background for understanding and appreciating templates.</li>
<li>Some compilers still don't support templates. In that case, macros are the best alternative for implementing generics until templates arrive.</li></UL>
<h4><FONT COLOR="#000080"><A name="01D3_00F6">The Header <B><I>&lt;generic. h&gt;</I><A name="01D3_00F6"></B></FONT></h4></P>
Most C++ compilers provide a header called <I>generic.h</I> that defines a small set of macros for automating the production of type-specific wrapper classes. Bjarne Stroustrup briefly explained these macros in the first edition of <I>The</I> <I>C</I>++ <I>Programming Language</I> <a href="#1">[1]</a>, and Tony Hansen provided additional explanations and examples in <I>The</I> <I>C</I>++ <I>Answer Book</I> <a href="#2">[2]</a>. Other than that, I haven't found any other books that discuss these macros.<P>
A version of <I>generic.h</I> appears in <A href="list1.htm">Listing 1</a>.
 The <I>name2</I> and <I>_name2</I> macros are for use by generic class implementers. The <I>declare</I> and <I>implement</I> macros are for generic class <I>users</I>. (The header in <A href="list1.htm">Listing 1</a>
is a bit shorter than what you'll probably find with your compiler. An industrial strength <I>generic.h</I> provides additional versions of the <I>name, declare</I>, and <I>implement</I> macros that accept extra arguments, plus additional macro and function declarations for error-handling support.)<P>
Applications use the <I>declare</I> and <I>implement</I> macros to adapt generic classes to specific types. A macro call of the form<P>
<pre>declare(C, T)</pre>
expands to the class and inline member function definitions for generic container class <I>C</I> adapted to type <I>T</I>. The act of adapting a generic class for a specific type is called <I>instantiation</I>. That is, the call to <I>declare </I><I>instantiates</I> a definition for generic class <I>C</I> with type parameter <I>T</I>.<P>
For example, if <I>queue</I> is a generic queue, then<P>
<pre>declare(queue, int)</pre>
instantiates the class definition for a queue of <I>ints</I>. The macro call expands to a class definition roughly of the form<P>
<pre>class int_queue
   {
public:
   int_queue();
   ~int_queue();
   append();
   remove();
   // and so on ...
   };</pre>
with <I>int</I> and <I>int_queue</I> substituted in the appropriate places throughout the definition. As you will see shortly, the author of the class determines the exact spelling for the generated class name. The name could just as easily be <I>intqueue</I> or <I>queueint </I>instead of <I>int_queue</I>.<P>
A macro call of the form<P>
<pre>implement(C, T)</pre>
instantiates the non-inline member function definitions and static data member definitions for generic class <I>C</I> with type parameter <I>T</I>.<P>
For example,<P>
<pre>implement(queue, int)</pre>
instantiates the non-inline member function definitions for a queue of <I>ints</I>. The expansion looks something like<P>
<pre>int_queue::int_queue()
   {
   ...
   }
int_queue::~int_queue()
   {
   ...
   }
int_queue::append()
   {
   ...
   }
int_queue::remove()
   {
   ...
   }
// and so on...</pre>
An application must call <I>declare(C, T)</I> in every source file that uses generic class <I>C</I> instantiated with type <I>T</I>, but it need call <I>implement(C, T)</I> in only one source file. For instance, <A href="list2.htm">Listing 2</a>
shows the main source file <I>(strtst7.cpp)</I> of my test program for generic queues. I've modified the program to use the <I>generic.h </I>macros. <A href="list2.htm">Listing 2</a>
calls<P>
<pre>declare(queue, str)</pre>
to instantiate a queue of <I>str</I>, but it does not call <I>implement</I>. The corresponding call to <I>implement</I> is in <A href="list3.htm">Listing 3</a>
<I>(strq7. cpp)</I>, which must be compiled and linked with <A href="list2.htm">Listing 2</a>.
 Notice that <A href="list3.htm">Listing 3</a>
calls <I>declare</I> (as it must) before it calls <I>implement</I>.<P>
Neither <A href="list2.htm">Listing 2</a>
nor <A href="list3.htm">Listing 3</a>
includes <I>generic.h</I> directly. Rather, they include <I>queue7.h</I> which, in turn, includes <I>generic.h</I> and defines a bunch of other stuff. Among that stuff is a macro <I>queue(T) </I>which expands to the generated class name. For example, the declaration<P>
<pre>queue(str) q[4];</pre>
appearing in the body of <I>main</I> (<A href="list2.htm">Listing 2</a>)
 expands to<P>
<pre>str_queue q[4];</pre>
The declaration<P>
<pre><I>queue(str)::iterator sqi(q);</I></pre>
appearing in the body of <I>operator&lt;&lt;</I> (also <A href="list2.htm">Listing 2</a>)
 expands to<P>
<pre>str_queue::iterator sqi(q);</pre>
Using a macro to generate the class name relieves users from knowing the exact spelling of the name.<P>
<h4><FONT COLOR="#000080"><A name="01D3_00F7">How It All Works<A name="01D3_00F7"></FONT></h4></P>
The macro definitions for <I>declare</I> and <I>implement</I> in <A href="list1.htm">Listing 1</a>
are pretty short. They don't expand immediately into full-blown code, but generate a series of intermediate macro calls. The sequence of intermediate expansions is nearly identical for both macros.<P>
A macro call of the form<P>
<pre><I>declare(C, T)</I></pre>
expands directly to<P>
<pre><I>name2(C, declare)(T)</I></pre>
which, in turn, expands to<P>
<pre><I>_name2(C, declare)(T)</I></pre>
<I>_name2</I> uses the token-pasting operator ## to splice <I>C</I> and <I>declare</I> into a single identifier. Thus, the call to <I>_name2</I> expands to yet another macro call of the form<P>
<pre><I>Cdeclare(T)</I></pre>
Similarly, a call of the form<P>
<pre><I>implement(C, T)</I></pre>
expands to<P>
<pre><I>Cimplement(T)</I></pre>
For example, if <I>queue</I> is a generic queue, then<P>
<pre><I>declare(queue, int)</I></pre>
expands to call<P>
<pre><I>queuedeclare(int)</I></pre>
and<P>
<pre><I>implement(queue, int)</I></pre>
expands to call<P>
<pre><I>queueimplement(int)</I></pre>
It is <I>queuedeclare(C, T)</I> and <I>queueimplement(C, T)</I> that finally expand to the code that defines and implements class <I>C</I> with type parameter <I>T</I>. The author of the generic queue class provides the definitions for these macros, as well as the definition for the class name generating macro, <I>queue(T)</I>. These definitions appear in <A href="list4.htm">Listing 4</a>
(<I>queue7.h</I>). Let's start with <I>queue(T)</I>.<P>
Like <I>queuedeclare</I> and <I>queueimplement</I>, the <I>queue</I> macro pastes identifiers together using the <I>name2</I> macro. A call such as<P>
<pre><I>queue(str)</I></pre>
expands through several steps:<P>
1.     <I>name2(str, _queue)</I><P>
2.     _<I> name2(str, _queue)</I><P>
3.     <I>str ## _queue</I><P>
which finally yields <I>str_queue</I>.<P>
The token-pasting operator <I>##</I> is an invention of the C standards committee, circa 1985. Early C and C++ preprocessors didn't have this operator, so programmers used an assortment of tricks to paste identifiers together. Different tricks worked with different preprocessors. One trick was to define <I>name2</I> as:<P>
<pre>#define name2(n1, n2) n1\
n2</pre>
Another trick used an empty comment as a vanishing separator:<P>
<pre>#define name2(n1, n2) n1/**/n2</pre>
Neither of these tricks work on current preprocessors; now you must use <I>##</I>.<P>
Why, you ask, does the <I>name2</I> macro invoke <I>_name2</I> to paste tokens together? It seems that you could define <I>name2</I> as just<P>
<pre>#define name2(n1, n2) n1 <I>##</I> n2</pre>
The extra level of macro expansion produces a different behavior, but it's rather subtle. In most applications, you probably won't notice the difference.<P>
The difference arises only when the arguments to <I>name2</I> are themselves macros that should be expanded before they are pasted together. For example, using the <I>name2</I> macro that invokes <I>_name2 </I>(as in <A href="list1.htm">Listing 1</a>)
,<P>
<pre>#define str string
name2(str, _queue)</pre>
expands to <I>string_queue</I> (<I>str</I> expands to <I>string</I> before pasting). On the other hand, using the <I>name2</I> macro that invokes <I>##</I> directly expands to <I>str_queue</I>.<P>
<I>queuedeclare</I> is a <I>big</I> macro spanning many lines. Every line in the macro definition, except the last, ends with a backslash. The backslashes fuse separate physical lines into a single logical line, satisfying the requirement that a macro definition must fit on one logical line.<P>
<I>queuedeclare</I> contains the class definition and the inline member function definitions for a queue with elements of type <I>T </I>implemented as a wrapper around a <I>genq</I>. The macro body is essentially the same as the header <I>strq5.h</I> (Listing 10 in Part 3), which defines a queue of <I>str</I> as a wrapper, except that <I>queuedeclare</I> is parameterized to handle any queue element type <I>T</I>. Aside from all the backslashes, the only differences in the listings are that <I>queuedeclare</I> uses <I>T</I> where <I>strq5.h</I> uses <I>str</I>, and <I>queuedeclare </I>uses <I>queue(str)</I> where <I>str5.h</I> uses <I>strq.</I><P>
<I>queueimplement</I> is also a multi-line macro, though a bit shorter than its corresponding <I>queuedeclare</I> macro. <I>queueimplement </I>contains the non-inline member function definitions for a queue of <I>T </I>wrapped around a <I>genq</I>. You may wish to compare this with <I>strq4.cpp</I> (<A href="list4.htm">Listing 4</a>
in Part 3), which is the <I>str-</I>specific version of this wrapper.<P>
In summary, you implement a generic class of <I>void </I>* with accompanying macros that generate type-specific wrappers by piecing together the following components:<P>
1.     a header file, <I>cov.h</I>, that specifies the interface to a generic container of <I>void </I>*. (<I>cov</I> is a place-holder that stands for "container of <I>void </I>*.") In my example, <I>cov.h</I> is <I>genq.h</I>.<P>
2.     a source file, <I>cov.cpp</I>, that defines the remaining components (such as non-inline member function definitions) for the generic container of <I>void </I>*<I> </I>. In my example, <I>cov.cpp</I> is <I>genq.cpp</I>.<P>
3.     a header file, <I>C.h</I>, that defines the <I>C(T)</I>,<I> Cdeclare(T)</I>, and <I>Cimplement(T)</I> macros for wrapper class <I>C(T)</I>. In my example, <I>C.h </I>is <I>queue.h. C.h</I> must include both <I>generic.h</I> and <I>cov.h</I>.<P>
<h4><FONT COLOR="#000080"><A name="01D3_00F8">Eliminating the Middle-Man<A name="01D3_00F8"></FONT></h4></P>
Recall that I originally chose to use <I>void</I> <I>*</I> as the container element type so I could write a single implementation of the container and easily adapt it to hold objects of any type. A container of <I>void</I> *comes close to that goal, but still requires some specialized code, namely, a type-specific wrapper, for each instantiation. The <I>generic.h</I> macros reduce that specialized code to just a couple of simple macro calls per instantiation, and that's pretty good.<P>
Now think about this: If the macros work so well, do we really need the generic container of <I>void</I> * at all? Why not just generate all the code for each instantiation of the generic from the macros? <A href="list5.htm">Listing 5</a>
(<I>queue8.h</I>) shows a version of the <I>queue(T), queuedeclare(T)</I> and <I>queueimplement(T)</I> macros that do just that.<P>
The decision to eliminate the container of <I>void</I> * is a classic trade-off of code space and execution time. A queue of <I>void</I> * (a <I>genq</I>) captures a sizeable chunk of code common to all type-specific instances of a queue. An application with many different queue instantiations can save code space by using a single instance of <I>genq</I> shared by all the wrapper classes. Indeed, each new wrapper generates a little more code, but much less than the code for an entirely new type-specific queue (that's not just a wrapper).<P>
On the other hand, wrapper classes add extra layers of function calls to most of the member functions, which may slow them down. Granted, many wrapper functions are inline functions applying simple casts that can be compiled away, but others add considerable run-time overhead. In particular, wrapper functions that require extra calls to <I>new</I> and <I>delete</I>, as do <I>queue(T)::append </I>and <I>queue(T)::remove</I>, might be considerably slower than the corresponding functions in a type-specific (non-wrapper) queue.<P>
<h4><FONT COLOR="#000080"><A name="01D3_00F9">Assessing <B><I>generic.h</I><A name="01D3_00F9"></B></FONT></h4></P>
Once defined, generic classes built from the <I>generic.h</I> classes are type-safe and fairly easy to instantiate. Unfortunately, macros for large generic classes push the preprocessor well beyond the simple tasks it was designed to handle.<P>
These macros can be extremely hard to debug. The problem is that each macro call expands on a single logical line. If there's a bug in the macro, or you call it with an invalid argument, the best most compilers can do is tell you there's some sort of error somewhere in the macro expansion.<P>
Cramming lots of code on a single line gives some symbolic debuggers fits. They won't let you set more than one breakpoint per line, or set a breakpoint in the interior of a line.<P>
Templates were added to C++ to alleviate these shortcomings. In many ways, a template is like a macro. You can explain much of the behavior of templates by analogy with the <I>declare</I> and <I>implement</I> macros. But templates are part of the language itself, not the preprocessor, so they preserve the line structure of the source code.<P>
Of course, templates have their share of problems, but on balance, they are an improvement. I'll show you why I think so next month.<P>
<h4>References</FONT></h4></P>
<a name="1"></a>[1]     Bjarne Stroustrup. <I>The</I> <I>C</I>++ <I>Programming Language </I>(Addison-Wesley, 1986)<P>
<a name="2"></a>[2]     Tony L. Hansen. <I>The</I> <I>C</I>++ <I>Answer Book</I> (Addison-Wesley, 1990)<P>

<h4><a href="../../../source/1994/nov94/saks.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
