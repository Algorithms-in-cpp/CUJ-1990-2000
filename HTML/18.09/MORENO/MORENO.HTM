<HTML>   
     <HEAD>
<TITLE>September 2000/HTML Document Templates for CGI Applications</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocsep.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Internet Programming</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">HTML Document Templates for CGI Applications</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Carlos Moreno</FONT></H3>

<BLOCKQUOTE>
<p>Get the power of C/C++ programming with the flexibility of HTML by keeping the two at arms length.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H4><FONT COLOR="#000080">Introduction</FONT></H4>

<p>CGI (Common Gateway Interface) is an important tool in the field of Web and Internet Programming. It enables web servers to execute programs in response to requests made by remote users (clients) via web browsers.</p>
<p>CGI is not needed for simple websites, which serve as a mere collection of documents ready to be displayed whenever a client requests one. However, this "collection of documents" approach is often insufficient, and the web server has to perform some processing in response to a client's request. Examples of this are online information systems, online stores, search engines, etc. In an online store or an online information system, clients request information based on certain parameters; the web server has to search through a database &#151; or through other servers providing certain online services &#151; to obtain the information requested.</p>
<p>In this article, I present a set of classes and functions that greatly simplify the implementation of CGI applications in C++. Generally speaking, the main advantage of C/C++ over the other CGI programming options (mainly PERL and Unix shell scripts) is efficiency. However, in my opinion, the main advantage of my approach is the convenience and ease of development of complex CGI-enabled websites.</p>
<p>This article does not require prior knowledge of HTML (Hypertext Markup Language). I present a very brief introduction to HTML basics. However, I strongly advise that you use any book or online reference to learn more about it.</p>

<H4><FONT COLOR="#000080">Understanding HTML</FONT></H4>

<p>Simply put, HTML is the standard formatting language for web pages. It provides a set of tags that define and format the various sections of a web page. It is based on standard ASCII characters.</p>
<p>Thus, a web page is simply a text file containing HTML code, which is stored on a web server. When a remote client requests a specific web page, the web server locates the file containing the requested document and transmits it back to the client's browser. The browser receives the text stream, decodes it, and generates the graphical display encoded in the HTML file.</p>
<p>HTML is based on the use of tags. Tags are represented by keywords enclosed by angle brackets. HTML tags are case insensitive. Some tags, such as <B>&lt;br&gt;</B>, are stand-alone, but most tags must be provided in pairs: the opening tag and the closing tag. The closing tag uses the same keyword as the opening tag, preceded by a forward slash. Examples of these are text formatting tags, such as the <B>&lt;b&gt;</B> and <B>&lt;/b&gt;</B> tags; the text between these tags is displayed in bold characters. Also, some tags indicate sections of the HTML document, such as the <B>&lt;title&gt;</B> and <B>&lt;/title&gt;</B> tags. These last two tags enclose the document's title, which is the text displayed in the browser's title bar.</p>
<p>The <I>anchor</I> tag (<B>&lt;a&gt;</B> and closing tag <B>&lt;/a&gt;</B>) specifies two kinds of elements: links and targets. In the case of links, the tags must include the <B>href</B> attribute, as shown in the example below:</p>

<pre>
The code of this article is available
on the
&lt;a href="http://www.cuj.com"&gt;C/C++
 Users Journal&lt;/a&gt;'s web site.
</pre>

<p>This fragment of HTML code defines a link to the <B>www.cuj.com</B> website. The section of the document enclosed by the <B>&lt;a&gt;</B> and <B>&lt;/a&gt;</B> tags is the link. In general, it will be displayed by most browsers as underlined text in a specific color that changes when the link has been visited. The <B>href</B> attribute specifies the URL (Uniform Resource Locator or, informally, the web address) of the link.</p>
<p>Anchor tags can also mark a section or a location in the document. These locations are known as targets. In the example below, anchor tags are used to implement a table of contents at the beginning of the web page. The first three anchors serve as links; the last three serve as targets:</p>

<pre>
...
Table of Contents&lt;br&gt;
&lt;br&gt;
&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;
&lt;br&gt;
&lt;a href="#html_intro"&gt;Understanding
HTML&lt;/a&gt; &lt;br&gt;
&lt;a href="#cgi_intro"&gt;Understanding
CGI&lt;/a&gt; &lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;a name="introduction"&gt;&lt;/a&gt;
&lt;b&gt;Introduction&lt;/b&gt;
&lt;br&gt;
&lt;br&gt;
CGI is an important tool ....
...
&lt;a name="html_intro"&gt;&lt;/a&gt;
&lt;b&gt;Understanding HTML&lt;/b&gt;
&lt;br&gt;
&lt;br&gt;
...
&lt;a name="cgi_intro"&gt;&lt;/a&gt;
&lt;b&gt;Understanding CGI&lt;/b&gt;&lt;br&gt;
</pre>

<p>Notice that in the targets, the <B>&lt;a&gt;</B> and <B>&lt;/a&gt;</B> tags don't enclose any text or use an <B>href</B> attribute; they just mark a specific document location and identify that location with a name. As you will see, I take advantage of anchor tags in my implementation of the CGI toolkit.</p>

<H4><FONT COLOR="#000080">Understanding CGI</FONT></H4>

<p>The web server executes CGI applications in response to remote-user requests. The way information flows in a CGI-enabled web transaction is similar to that of a normal HTML document request. In the case of a CGI application, the difference is that the HTML file is not stored on the web server; instead, the CGI application is executed, and it dynamically generates the stream of HTML text to be sent back to the client's web browser. Remote users send their requests by pointing their web browsers to the executable CGI file instead of pointing to an existing HTML file.</p>
<p>Thus, if the remote user selects <B>http://www.example.com/cgi-bin/example.cgi</B>, the web server will execute the file <B>example.cgi</B> that is stored in the directory <B>/cgi-bin</B>, and the CGI application will generate the HTML code that will be sent back to the client's web browser. The CGI application responds to the client's request by sending the HTML text stream to <B>stdout</B> (e.g., using <B>cout</B>).</p>
<p>A simple example of a CGI application is the following program, which responds to clients' requests with a fixed message:</p>

<pre>
#include &lt;iostream&gt;
using std::cout;

int main()
{
    // header; CGI applications must
    // send this line first
    cout &lt;&lt; "Content-type:"
         &lt;&lt; "text/html\n\n\n";
         &lt;&lt; "This is the text"
         &lt;&lt; "displayed by this"
         &lt;&lt; "CGI application.\n";
    cout &lt;&lt; "&lt;center&gt;&lt;b&gt;CGI Demo&lt;/b&gt;"
         &lt;&lt; "&lt;/center&gt;&lt;br&gt;&lt;br&gt;"

    return 0;
}
</pre>

<p>This program must be compiled, and the executable should be placed on a CGI-enabled directory of the web browser (typically <B>/cgi-bin</B>). When remote users request <B>http://www.example.com/cgi-bin/example.cgi</B>, the web server executes <B>example.cgi</B>, reads the output that this program sends to <B>stdout</B>, and sends it back to the remote user's browser.</p>
<p>Most CGI applications are much more complex than this simple example. They typically read or update information stored in databases on the web server or other machines accessible from the web server. Based on this information, the CGI application builds the HTML-formatted stream of output text.</p>
<p>Additionally, the CGI application may require parameters or other information from the remote user. A typical example would be a search engine &#151; the user has to indicate the search keywords and criteria, and the CGI application uses that information to execute the search. This is typically done using HTML <I>forms</I>. Forms can be included in an HTML document using the <B>&lt;form&gt;</B> tag. An example of a form to request user ID and password is shown below:</p>

<pre>
&lt;form action="/cgi-bin/login.cgi" method="post"&gt;
User Name: &lt;input type="text" name="user_name"&gt; &lt;br&gt;
Password:  &lt;input type="password" name="password"&gt; &lt;br&gt;
&lt;input type="submit" value="Ok"&gt;
&lt;/form&gt;
</pre>

<p>In this form, the <B>action</B> attribute indicates which CGI application will be invoked when the user clicks on the submit (OK) button. In this case, the browser will point directly to <B>login.cgi</B> (on the same site, since no absolute URL is indicated) and will pass the query according to the information that the user entered. If the user enters "John Smith" as <B>name</B> and "C++" as <B>password</B>, then the query sent to the CGI application will be <B>user_name=John+Smith&amp;password=C%2B%2B</B>.</p>
<p>Notice the URL encoding. <B>&amp;</B> separates the different fields of the query. Spaces are replaced by <B>+</B>, and non-alphanumeric characters are replaced by an "escape sequence" consisting of <B>%</B> followed by the ASCII code of the character in hexadecimal format.</p>
<p>Also note the <B>method</B> attribute in the <B>&lt;form&gt;</B> tag. The CGI application reads the query from <B>stdin</B> if the <B>method</B> used is <B>POST</B>, or from the environment variable <B>QUERY_STRING</B> if the <B>method</B> used is <B>GET</B>. Other pieces of information are available from other environment variables. (See one of the references for more details.)</p>

<H4><FONT COLOR="#000080">Writing CGI Applications in C++</FONT></H4>

<p>One of the main inconveniences in writing complex CGI applications (in any language) is maintainability. The C++ programs (or PERL or shell scripts) must include sections of code that build the HTML document. In other words, the CGI program code must include HTML code. This represents a major drawback concerning website maintainability. Changing the graphical look of your website would involve painful modifications to the C++ code. (Keep in mind that web pages are often designed using graphical, point-and-click tools, where even minor changes may lead to tens or hundreds of lines of HTML code that change.)</p>
<p>Also, including HTML code in your C++ programs implies that either the C++ programmer must be able to write HTML code, or the person in charge of the web page design should have access to the C++ code.</p>
<p>One of the main advantages of the toolkit that I present is that it allows you to completely isolate the web page design from the process of writing the CGI applications.</p>
<p>The key idea is to take advantage of the fact that virtually every CGI application responds with a pre-defined HTML with fields that need to be dynamically generated. This allows you to design your web pages with "fill in the blank" fields that the CGI application will complete (typically with information coming from databases.)</p>
<p>These "fill in the blank" fields are provided via anchor tags. To specify such a field in an HTML file, the web designer includes an empty anchor tag with the <B>name</B> attribute, as shown below:</p>

<pre>
&lt;a name="user_name"&gt;&lt;/a&gt;
</pre>

<p>The CGI application reads the file and replaces the anchor tags with the appropriate data. If the application (accidentally or not) fails to replace the anchor tag, it will be disregarded by the web browser when displaying the document.</p>

<H4><FONT COLOR="#000080">A Class for Dynamically Generating HTML</FONT></H4>

<p>The ideas discussed in the previous section are conveniently encapsulated in the <B>HTMLstream</B> class (see <a href="list1.htm">Listings 1</a> and <a href="list2.htm">2</a>). The constructor for this class takes a string argument indicating the filename of the HTML template document. When an <B>HTMLstream</B> object is constructed, the contents of the file are read into the data member <B>html_code</B>. Alternatively, you can invoke the constructor with no arguments and later call the <B>open</B> method to read the HTML code from the specified file. Also, you can use the stream insertion operator to append arbitrary data to the HTML stream.</p>
<p><B>HTMLstream</B> provides a <B>send</B> method, which sends the HTML stream to the output stream parameter, prepended with the header <B>(Content-type: text/html)</B>. For increased reusability, the method receives an <B>ostream</B> object as a parameter, with a default to <B>cout</B>:</p>

<pre>
HTMLstream reply ("user_not_registered.html");
reply &lt;&lt; "&lt;br&gt;&lt;center&gt;An extra line added at the end&lt;/center&gt;";

reply.send ();  // equivalent to reply.send (cout);
</pre>

<p><B>HTMLstream</B> provides a <B>set_field</B> method that replaces the anchor tags with a given string (the "fill in the blank" fields in the HTML code). This method receives two parameters, indicating the field to be set and the contents to store. An example is shown below:</p>

<pre>
HTMLstream reply ("invalid_password.html");
// name is a string variable that contains the
// user name (presumably from the CGI query)
reply.set_field ("user_name", name);

reply.send ();
</pre>

<p>In this case, the HTML template document <B>invalid_password.html</B> should contain a fragment similar to the following:</p>

<pre>
Sorry &lt;a name="user_name"&gt;&lt;/a&gt;, the password you entered is 
incorrect.
</pre>

<p>The <B>set_field</B> method in the example above will replace the anchor tag with the content of the variable name (the second parameter in the call to <B>set_field</B>).</p>
<p><a href="list2.htm">Listing 2</a> shows the implementation details of these methods.</p>
<p><B>HTMLstream</B> also provides the <B>add_option</B> method, to dynamically fill the options in a pull-down menu, and the <B>remove_table_row</B> method, to dynamically size a table. Instead of adding table rows as required, it is easier and more convenient to include the maximum number of rows in the HTML template document and then remove the extra ones from the <B>HTMLstream</B> object. (An example of this is provided in sample code with this month's online archives. See <B>www.cuj.com/code/</B>.)</p>

<H4><FONT COLOR="#000080">Utility Functions for CGI Programming</FONT></H4>

<p>The string and container classes available in C++ and the C++ Standard Library are of great help to CGI applications. I took advantage of these tools to provide a set of utility functions that greatly simplify the processing of the queries. These functions are shown in <a href="list3.htm">Listings 3</a> and <a href="list4.htm">4</a>.</p>
<p>Function <B>cgi_parameters</B> returns a <B>map&lt;string, string&gt;</B> containing all the parameters of the user's query. In the example above, where the query string was <B>user_name=John+Smith&amp;password=C%2B%2B</B>, you could directly use the following:</p>

<pre>
map&lt;string, string&gt; parameters = cgi_parameters ();

string name = parameters ["user_name"];      // stores "John
                                             // Smith" in name
string password = parameters ["password"];   // stores "C++" in
                                             // password
</pre>

<p><B>cgi_parameters</B> receives an argument indicating the method used. This argument can be <B>get</B>, <B>post</B>, or <B>any</B>. It defaults to <B>post</B>. <B>cgi_parameters</B> calls function <B>get_cgi_string</B> to read the query string, and then uses function <B>tokens</B> to split the string into individual parameters. For each parameter, <B>tokens</B> is called again to break them into name, value pairs. Finally, <B>decode_cgi_string</B> is used to decode the URL-encoded strings (that is, it replaces <B>+</B> with spaces and the escape sequences with the corresponding characters). After decoding, this pair is inserted into the <B>map&lt;string, string&gt;</B> returned by <B>cgi_parameters</B>.</p>
<p><a href="list4.htm">Listing 4</a> shows the details of all these functions and a few other utility functions as well. Typically, you will only have to use <B>cgi_parameters</B>, which decodes the parameters and breaks them into ready-to-use pieces.</p>

<H4><FONT COLOR="#000080">A Concrete Example</FONT></H4>

<p>The following example shows part of a login process authorized by a CGI application. To make the example simple, I will not use databases. Instead, I use text files containing the following information: user name, password, and a list of options authorized for the user. The fields are separated by tabs, and the records are separated by newline characters (i.e., one user per line). The options will be used to fill a pull-down menu of selections in the welcome page, once the user is authorized.</p>
<p>The login page contains the following form:</p>

<pre>
&lt;form action="/cgi-bin/login.cgi" method="post"&gt;
User Name: &lt;input type="text" name="user_name"&gt; &lt;br&gt;
Password:  &lt;input type="password" name="password"&gt; &lt;br&gt;
&lt;input type="submit" value="Ok"&gt;
&lt;/form&gt;
</pre>

<p>Users enter their information and click on the OK button. The application responds with one of two possibilities: a welcome page, with a pull-down list to select the next action, or an error page indicating that either the user name is not registered or the password is incorrect.</p>
<p>The HTML templates are stored in <B>welcome.html</B> and <B>login_failed.html</B>. <B>welcome.html</B> contains, among other things, the following:</p>

<pre>
Hello &lt;a name="user_name"&gt;&lt;/a&gt;, welcome
back.  Please select
one of the following options: &lt;br&gt;&lt;br&gt;
&lt;select name="options"&gt;
&lt;/select&gt;
</pre>

<p>Here is a portion of <B>login_failed.html</B>:</p>

<pre>
Login failed. Either the user name that
you supplied (&lt;a name="user_name"&gt;&lt;/a&gt;)
is not registered in our database,
or the password is incorrect.
</pre>

<p><B>login.cpp</B> (which should be compiled to the executable <B>login.cgi</B>) is shown below. To keep the example as simple as possible, I omit the exception-handling code, and I assume that no errors will occur (e.g., files will be successfully opened and read, all the fields in the HTML templates will be correctly set up, etc.):</p>

<pre>
// #include files

int main()
{
   map&lt;string, string&gt; parameters = 
      cgi_parameters ();

   string line;
   bool login_accepted = false;

   ifstream users ("users.txt");
   while (!login_accepted &amp;&amp; getline (users, line))
   {
      vector&lt;string&gt; user = tokens (line, "\t");

      if (user[0] == parameters["user_name"] &amp;&amp;
         user[1] == parameters["password"])
      {
         login_accepted = true;
      }
   }

   if (login_accepted)
   {
      HTMLstream reply ("welcome.html");
      reply.set_field ("user_name",
         parameters["user_name"]);

      for (int i = 2; i &lt; user.size(); i++)
      {
         reply.add_option ("options", user[i]);
            // fill the pull-down menu according to the user
      }

      reply.send ();
   }
   else
   {
      HTMLstream reply ("login_failed.html");
      reply.set_field ("user_name", parameters["user_name"]);
      reply.send ();
   }

   return 0;
}
</pre>

<H4><FONT COLOR="#000080">Security Issues</FONT></H4>

<p>Before trying out your first CGI application, make sure that you read the section on security in a reference book. Keep in mind that you are executing a program on your machine. Malicious hackers may take advantage of carelessly written CGI applications to steal information from your machine, gain privileged access, or perform destructive actions.</p>
<p>One of the well-known tricks is to cause a CGI's input buffer to overflow when reading the query string. This does not happen if the application is carefully written and definitely can not happen using this toolkit, since I use <B>getline</B> to read into a <B>string</B> object, which will be dynamically resized to accommodate a string of virtually any size.</p>
<p>There are many other security issues that I do not discuss in this article. Please remember this advice (even though I don't think I can repeat it enough times): Do read the section on security in a good reference book before trying out your first CGI application!</p>

<H4><FONT COLOR="#000080">Summary</FONT></H4>

<p>CGI applications are at the heart of dynamic websites. They provide a convenient and portable way of enabling web servers to perform certain processing in response to remote requests.</p>
<p>The C++ language is an excellent choice for developing CGI applications. Though C++ does not provide built-in tools oriented to CGI applications, this article shows that with C++ it is easy to write highly reusable and powerful tools, making CGI programming easier than in any other programming language.</p>
<p>However, extreme caution should be taken when writing CGI applications, regardless of the choice of language or tools. Carelessly written CGI applications can easily compromise the security and stability of web servers.</p>

<H4><FONT COLOR="#000080">References</FONT></H4>

<p>Bjarne Stroustrup. <I>The C++ Programming Language, 3rd Edition</I> (Addison, Wesley, 1997).</p>
<p>Eric Ladd and Jim O'Donnell, et al. <I>Using HTML 4, XML, and Java 1.2</I> (MacMillan Publishing Company, 1999).</p>
<p>Mark Felton. <I>CGI Internet Programming with C++ and C</I> (Prentice Hall, 1997).</p>

<p><i><B>Carlos Moreno</B> has a Bachelor's Degree in Electronics Engineering and a Master Engineering diploma in Computer and Electrical Engineering. He has 12 years of experience in the development of low-level applications and currently works as an instructor/trainer in C, C++, Object-Oriented Programming, and Visual Basic, and as an independent consultant and software developer. His main interests are digital signal processing, audio and image processing applications, communications, data encryption and compression, and (of course) computer games development. He can be reached at <B>moreno@mochima.com</B> or on the Web at <B>http://www.mochima.com</B>.</i></p>

<h4><a href="../../../source/2000/sep00/moreno.zip">Get Article Source Code</a></h4>

</blockquote></body></html>
