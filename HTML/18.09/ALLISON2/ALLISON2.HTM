<HTML>   
     <HEAD>
<TITLE>September 2000/import java.*</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocsep.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">import java.*: Collections and Algorithms</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Chuck Allison</FONT></H3>

<BLOCKQUOTE>
<p>Java lacks both a standard and templates, but it nevertheless offers something resembling the C++ Standard Template Library.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>Everyone needs to implement lists and trees at least once, wouldn't you say? Computer science departments certainly think so and so do I, but not in the workplace. I suppose it didn't hurt me when I wrote binary search trees in FORTRAN at my first job in the late '70s, nor when I wrote a generic list library in C almost ten years ago, but you just can't afford to roll all of your own tools in production. The proliferation of C libraries in the '80s and C++ libraries in the '90s helped a great deal, but we C/C++ folks pride ourselves in writing portable code (or at least we used to, but that's another topic of discussion), and historically, few libraries have ported well across platforms. This is a big enough problem that Bjarne Stroustrup, inventor of C++, once said that his biggest mistake with C++ was releasing it before it had a robust foundation library, including data structures <a href="#note1">[1]</a>.</p>
<p>That "mistake" has been more than rectified by the generic containers and algorithms in the now-standard C++ library (also erroneously called STL, for Standard Template Library <a href="#note2">[2]</a>). C++ programmers now routinely and effectively use containers of any type of object with maximum efficiency on any platform with a standard C++ system. Iterators and function objects are everyday terms now, and yet we're all still learning how far we can go with this brilliantly designed library.</p>
<p>But this is a column about Java, and Java has no STL, nor even templates (although there is talk in that direction). In 1997 Objectspace, Inc. ported STL to Java and called it JGL <a href="#note3">[3]</a>, which originally stood for "The Java Generic Library," but Sun put the kibosh on such an official-sounding title, so now it's called "The Generic Collection Library for Java" (but the JGL acronym has stuck). JGL has everything STL-like that a Java programmer could hope for, even without templates. Function objects, for example, by convention use the <B>execute</B> method to substitute for overloading <B>operator()</B> in C++. All the standard function objects and adapters are there.</p>
<p>JGL had a growing audience in the days of JDK 1.x, especially since the latter has only four wimpy containers: <B>Vector</B>, <B>Stack</B>, <B>Bitset</B>, and <B>Hashtable</B>. With Java 2, Sun has given us a lot less than JGL, but the new collections and their associated algorithms are well designed and easy to use. You may find that they meet most day-to-day production software needs. In this article, I survey the collections in both Java 1 and 2, with an emphasis on the latter <a href="#note4">[4]</a>.</p>

<H4><FONT COLOR="#000080">Collections in JDK 1.x</FONT></H4>

<p>The <B>Vector</B> class is pretty much what you would expect: a container that holds an arbitrary number of instances derived from <B>Object</B>, which means you can store anything but primitives in a <B>Vector</B>. (This is how Java and some other object-oriented languages achieve genericity &#151; by processing instances of a "Mother of All Classes" such as <B>Object</B>). The program in <a href="list1.htm">Listing 1</a> populates a <B>Vector</B> with seven integers and uses the <B>indexOf</B> method to perform various searches. <B>indexOf</B> searches linearly from the beginning for a match (using the <B>equals</B> method, of course) and returns the 0-based index of where it first occurs, or -1 if the object isn't there. There is also a <B>contains</B> method that returns a <B>boolean</B> indicating whether or not an object is present (see <a href="list2.htm">Listing 2</a>). The program in <a href="list2.htm">Listing 2</a> also illustrates an <B>Enumeration</B> object, which is an iterator of sorts. The <B>Vector.elements</B> method returns an <B>Enumeration</B> that points to the first (zeroth) vector element. To traverse the container you query <B>Enumeration.hasMoreElements</B>; if it returns true, you can access the next element via <B>Enumeration.nextElement</B>, which as a side effect advances the iterator for the next query. You can't delete an element via an <B>Enumeration</B>, but you can with Java 2's iterators, which you'll see shortly.</p>
<p>A serious drawback to the <B>Vector</B> class is that most of its methods are synchronized, which is fine if you need to write thread-safe code, but unacceptable otherwise, since your code has thread overhead you'll never use. To address this problem, the Java 2 collections come in both synchronized and non-synchronized flavors (more on this below).</p>
<p>The <B>Stack</B> class attempts to give you the typical last-in-first-out container semantics that you expect, but evidently its designers skipped Object-Oriented Design 101. For some mysterious reason, <B>Stack</B> extends <B>Vector</B>, instead of just using a <B>Vector</B> for implementation. The problem with this approach, of course, is that it lets you use a <B>Stack</B> as <B>Vector</B>, so you can add or remove elements anywhere you want instead of just at the beginning, which is all a <B>Stack</B> should let you do. I'm so appalled that I'm not even going to show an example that uses <B>Stack</B> (really!).</p>
<p>The <B>BitSet</B> class represents what its name implies: a collection of bits. Actually, a <B>BitSet</B> object is an ordered set of bits, beginning with bit 0, just like arrays. You can set, reset, and test individual bits and perform set operations on <B>BitSet</B>s as a whole (e.g., OR, AND, XOR, etc.). Oddly enough, there is no method to toggle a bit directly, so you'll have to do it manually. <B>Bitset</B>s grow as needed to contain whatever bit number you need to refer to. The <B>length</B> method returns how many bits are in use. (In other words, <B>length</B> returns <B>n</B> if <B>n-1</B> is the highest bit number you've referenced.) The program in <a href="list3.htm">Listing 3</a> creates two <B>BitSet</B>s and computes their intersection relative to the first.</p>
<p><B>Hashtable</B>s are fast lookup tables. A <B>Hashtable</B> object stores key-value pairs by hashing the key into an open hash table, which is basically a dynamic array of linked lists, each list holding pairs whose keys hash to the same value. Hash tables tend to perform faster than tree-based solutions, but are by nature unordered. As you can see in <a href="list4.htm">Listing 4</a>, you add a key-value pair with the <B>put</B> method and perform lookups with the <B>get</B> method. If you put a duplicate entry in the table for an existing key, the new value replaces the old (i.e., no duplicate keys, or "multimaps," allowed). If you search for a non-existent key, you get a null back. You can also search for the existence of keys and values independently and even traverse them via <B>Enumeration</B>s.</p>
<p>That's pretty much all you get with JDK 1.x &#151; no sets, no lists, no queues. And what's worse: no generic algorithms. If you want to sort a <B>Vector</B>, for example, tough luck; you have to write your own sort routine. Java 2 rectifies this situation with a well-defined hierarchy of collections and associated algorithms and also provides replacements for all the 1.x containers except <B>BitSet</B>.</p>

<H4><FONT COLOR="#000080">The Java 2 Collection Hierarchy</FONT></H4>

<p>Java 2 provides two families of containers, Collections and Maps. Collections are containers that implement the <B>Collection</B> interface, which defines basic collection methods for inserting, removing, and visiting elements (see <a href="list5.htm">Listing 5</a>). The <B>Collection</B> interface is further refined into <B>List</B> and <B>Set</B> (see <a href="fig1.htm">Figure 1</a>). <B>List</B>s are ordered sequences that support direct indexing(!) as well as bi-directional traversal. (For the STL-aware, a <B>List</B> is a sequence &#151; see <a href="list6.htm">Listing 6</a> for its methods). Java 2 comes with <B>LinkedList</B> and <B>ArrayList</B> as implementations for <B>List</B>, as shown in <a href="fig2.htm">Figure 2</a>. (The leaves of the hierarchy are implementations.) <B>Vector</B> is also there for historical reasons, but <B>ArrayList</B> is preferred over <B>Vector</B> in new code. <B>LinkedList</B> implements a doubly-linked list and is optimal for inserting and removing elements anywhere in a list. <B>ArrayList</B> is simply an expandable array and is preferred when you need to use random access to list elements.</p>
<p>The program in <a href="list7.htm">Listing 7</a> puts both <B>ArrayList</B> and <B>LinkedList</B> to the test. The <B>get</B> method returns the object at a particular position, while <B>indexOf</B> performs a linear search to find the index of an element and returns -1 if it's not present. The <B>subList</B> method is a useful feature of the <B>List</B> interface. It returns a <B>List</B> that is a subset of the original, using an asymmetric range specification, similar to STL ranges, where the first index is inclusive and the second is exclusive. For example, the statements</p>

<pre>
LinkedList list = new LinkedList(array);
List view = list.subList(1,3);
</pre>

<p>define <B>view</B> as containing the second and third elements of <B>list</B> (i.e., indexes 1 and 2), where <B>list</B> is itself a shallow copy of <B>array</B>. Since <B>view</B> is just a wrapper for a subset of <B>list</B>, any operations on <B>view</B> affect <B>list</B>. Appending <B>Gregory</B>'s instance to <B>view</B>, therefore, inserts it after <B>James</B>, not <B>Charles</B>, the latter being outside of view.</p>
<p><a href="list7.htm">Listing 7</a> also illustrates various algorithms found in the <B>java.util.Collections</B> class, such as <B>sort</B>, <B>binarySearch</B>, <B>max</B>, <B>min</B>, and <B>reverse</B>. These are similar in spirit to those in <B>java.util.Arrays</B>, but apply only to collections. The complete listing of algorithms in <B>java.util.Collections</B> is in <a href="list8.htm">Listing 8</a>. Notice the methods containing the prefixes <B>unmodifiable</B> and <B>synchronized</B>. These methods act as wrappers for existing collections and restrict their use. If you call <B>unmodifiableCollection</B> on an existing collection, for example, the object returned would throw an <B>UnsupportedOperationException</B> if you try to call any of the <B>Collection</B> methods that modify a collection. The <B>synchronized</B> methods return objects that are thread-safe (i.e., the <B>mutator</B> methods in the wrapper are synchronized), which is the only way to use collections in multithreaded situations since for efficiency reasons none of the <B>Collection</B> methods are synchronized. The wrappers act as a synchronized view into the original collection, and any changes you make in the wrapper are reflected in the backing collection. If want to iterate through a synchronized collection, you need to synchronize on the collection to ensure thread-safety, as in:</p>

<pre>
Collection coll = Collections.synchronizedCollection(aCollection);
          ...
synchronized(coll)
{
    Iterator iter = coll.iterator();
    while (iter.hasNext())
    {
        // use iter.next()...
    }
}
</pre>

<p>You may have noticed the glaring omission of some popular data structures, such as <B>queue</B>, <B>stack</B>, and <B>deque</B>. Although they're not there explicitly, you can use <B>LinkedList</B> to achieve the desired effect. <B>LinkedList</B> includes the following methods, among others:</p>

<pre>
// Some LinkedList methods:
void addFirst(Object o);// push_front()
void addLast(Object o); // push_back()
Object getFirst();      // front()
Object getLast();       // back()
Object removeFirst();   // pop_front()
Object removeLast();    // pop_back()
</pre>

<p>For you STL folks, I have included the names of the equivalent C++ functions in the comments above. To implement a <B>queue</B>, all you have to do is use a <B>LinkedList</B> that supports <B>addFirst</B> and <B>removeLast</B>, as follows:</p>

<pre>
class Queue
{
    private LinkedList data;
    
    public Queue()
    {
        data = new LinkedList();
    }
    public void put(Object o)
    {
        data.addFirst(o);
    }
    public Object get()
        throws NoSuchElementException
    {
        return data.removeLast();
    }
    public int size()
    {
        return data.size();
    }
}
</pre>

<p>For a <B>stack</B>, just replace <B>removeLast</B> with <B>removeFirst</B>. For a <B>deque</B>, which allows insertions and removals at both ends, just use <B>LinkedList</B> as it is.</p>

<H4><FONT COLOR="#000080">Iterators</FONT></H4>

<p>Iterators, like <B>Enumeration</B>s, are objects that facilitate traversing through an ordered sequence (see <a href="list9.htm">Listing 9</a>). Unlike <B>Enumeration</B>s, you can remove elements via an iterator. All collections support iterators, but the order of the traversal depends on the collection itself. For lists, you visit objects in the order they are stored. For sets (discussed below), objects appear in no particular order unless the set is ordered. The <B>ListIterator</B> interface, also in <a href="list9.htm">Listing 9</a>, lets you update an object through an iterator, as shown in <a href="list10.htm">Listing 10</a>. All the iterators returned by the Java 2 collections are <I>fail-fast</I>, which means that if the underlying structure changes during the lifetime of an iterator, other than through operations performed through the iterator itself, the iterator becomes invalid and any attempted use of it thereafter will result in a <B>ConcurrentModificationException</B>.</p>

<H4><FONT COLOR="#000080">Sets</FONT></H4>

<p>The <B>Set</B> interface conforms to the usual notion of a mathematical set, which basically is just an unordered receptacle for elements, and provides operations for insertion, removal, and testing of membership. Since these are already part of the <B>Collection</B>s interface, the <B>Set</B> interface is identical to <B>Collection</B>, with the added specification that duplicates are not allowed. The <B>SortedSet</B> interface adds methods useful for processing a set ordered by <B>comparator</B> (see <a href="list11.htm">Listing 11</a>). The <B>HashSet</B> class implements <B>Set</B>, and <B>TreeSet</B> implements <B>SortedSet</B>. <B>HashSet</B>s are more efficient, since they use hashing algorithms, but if order is important, <B>TreeSet</B>s provide logarithmic-time algorithms since they store the object in balanced tree structures. As you can see in <a href="list12.htm">Listing 12</a>, any attempts to insert duplicates into a set are ignored. For <B>TreeSet</B>s, <B>headSet</B> returns a view from the beginning up to but not including the specified element, and <B>tailSet</B> comprises the rest of the sequence.</p>

<H4><FONT COLOR="#000080">Maps</FONT></H4>

<p>A map, like a hash table, is a dictionary, or associative array. A map stores pairs, treating the first element of the pair as a key, and the second as its associated value. Maps provide fast search times for keys, and duplicate keys are not allowed. Like <B>Set</B>s, there are <B>HashMap</B>s and <B>TreeMap</B>s, the former being faster and unordered while instances of the latter are ordered. For some reason, maps are in no way related to collections in Java 2; they have their own interface and implementation hierarchies (see <a href="fig3.htm">Figures 3</a> and <a href="fig4.htm">4</a>). A <B>WeakHashMap</B> stores keys as weak references, which means that if the only reference to the key object is the weak reference in the map, then that object can be garbage-collected, whereupon the entry is automatically removed from the map. (This basically gives you caching for free.)</p>
<p>The key methods of the <B>Map</B> interface are <B>put</B> and <B>get</B> (see <a href="list13.htm">Listing 13</a> for the complete specification). The <B>put</B> method stores a pair of objects in the <B>map</B>, and <B>get</B> retrieves the value for the given key. If you want to just see the keys, <B>keySet</B> returns them as a <B>Set</B> view, and the <B>values</B>method returns the values as a <B>Collection</B>. If you want to iterate through the pairs, you can call <B>entrySet</B>, which returns the pairs as a <B>Set</B> of instances of <B>Map.EntrySet </B>(which also appears in <a href="list13.htm">Listing 13</a>). All the above is illustrated in the program in <a href="list14.htm">Listing 14</a>. Note that calling put a second time with the same key replaces its associated value.</p>

<H4><FONT COLOR="#000080">An Application</FONT></H4>

<p>Let's finish by doing something useful. The program in <a href="list15.htm">Listing 15</a> implements a typical cross-reference lister, which prints each word from a text file with the line numbers where it appears. Applying <a href="list15.htm">Listing 15</a> to its own text produces the output:</p>

<pre>
a: 2, 28
Add: 45, 54
addLast: 55
already: 49
and: 45
args: 81, 84, 93, 100, 101
at: 28
BufferedReader: 21, 88, 102
(etc.)
</pre>

<p>This program uses a <B>Map</B> that associates a token with a list of line numbers. Since I want the tokens to appear in alphabetical order, I use a <B>TreeMap</B> with the default <B>comparator</B>. I want case to be ignored in comparisons, so I define a <B>comparator</B>, called <B>NoCase</B>, that calls on <B>String.compareToIgnoreCase</B> to do the job. Before inserting a new pair, I first check to see if it is already in the map. If not, I add it with the statement</p>

<pre>
map.put(token, new LinkedList());
</pre>

<p>Then I retrieve the list of lines with</p>

<pre>
LinkedList lines = (LinkedList) map.get(token);
</pre>

<p>I then check to see if the current line number has already been added to the list; if not, I append it. It would have been simpler to just use a <B>TreeSet</B>, but the constant re-balancing of the tree would degrade performance, and since the lines are entered in the correct order, a list suffices.</p>

<H4><FONT COLOR="#000080">Summary</FONT></H4>

<p>I hope you'll agree that Java has come of age as far as data structures and algorithms are concerned. The Arrays and Collections classes have useful algorithms for arrays and collections, respectively, and the families of <B>Collection</B> and <B>Map</B> implementations provide virtually everything you need in the way of data structures. As a C++ programmer, I must admit that I miss function objects a little, but only a little. I must also confess that I find the Java 2 collections easier to use than STL. Although my C++ version of the cross-reference program was 20 lines shorter than the Java version, it took me longer to get it right. To be fair, the C++ collections tend to be much faster than Java's, but this is the story of these two languages in general. (I realize not everyone agrees with me here!) If you want blinding speed, use C++. For typical applications, it's hard to imagine a situation that the Java 2 collections won't nicely handle, and if you need more intricate data structures, you have a nice hierarchy to plug into and algorithms ready to use.</p>

<H4><FONT COLOR="#000080">Notes</FONT></H4>

<p><a name="note1">[1]  See my interview with Bjarne Stroustrup, "C++: The Making of a Standard," <I>CUJ</I>, October 1996, also available at <B>http://www.freshsources.com</B> (select "C++" under Articles).</p>
<p><a name="note2">[2]  Don't get me started. The term STL is both misused and obsolete.</p>
<p><a name="note3">[3]  Read about JGL at <B>http://www.objectspace.com/jgl/prodJGL.asp</B>.</p>
<p><a name="note4">[4]  The array algorithms in <B>java.util.Arrays</B> were discussed in the March 2000 issue of this column.</p>

<p><i><B>Chuck Allison</B> is a columnist with </I>CUJ<I>. He is the owner of Fresh Sources, a company specializing in object-oriented software development, training, and mentoring. He has been a contributing member of J16, the C++ Standards Committee, since 1991, and is the author of </I>C and C++ Code Capsules: A Guide for Practitioners<I>, Prentice-Hall, 1998. You can email Chuck at <B>cda@freshsources.com</B>.</i></p>

<h4><a href="../../../source/2000/sep00/allison2.zip">Get Article Source Code</a></h4>

</blockquote></body></html>
