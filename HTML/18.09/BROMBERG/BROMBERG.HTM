<HTML>   
     <HEAD>
<TITLE>September 2000/Tracing an Application in Release Configuration</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocsep.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Tracing an Application in Release Configuration</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Boris Bromberg</FONT></H3>

<BLOCKQUOTE>
<p>A lightweight trace facility is less likely to distort performance in the final stress of debugging.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>Sometimes you may find yourself wanting to trace an application in its Release configuration. In a Release-mode application you may not be able to use a debugger, and tracing to a log file might slow down the program too much. The utility presented here lets Windows users trace an application in its Release configuration, without expensive writes to a log file.</p>
<p>The following code provides a Windows user with trace information based on <B>WM_COPYDATA</B> message processing. The trace utility is provided in two parts. The first part is a debug window, which runs as a stand-alone application (<B>QMonitor.exe</B>). It will receive trace output, via the Windows messaging system, from the application being traced. The second part is an API that the application uses to send out trace data as a Windows message.</p>
<p>The application under test can produce trace information in the following manner:</p>

<pre>
#include "QMonitorAPI.h"

void MyFunc()
{
   Tracer t("MyFunc");
   ...
   Display("i=%d s=%s", i, d);
   ...
}
</pre>

<p>The output appears as in <a href="fig1.htm">Figure 1</a>.</p>
<p>The <B>Tracer</B> object shown in the snippet above calls the <B>Display</B> function internally, during construction and destruction. <a href="list1.htm">Listings 1</a> and <a href="list2.htm">2</a> show the source code for <B>QMonitorAPI.h</B> and <B>QMonitorAPI.cpp</B>.</p>
<p>As you can see, if <B>QMonitor.exe</B> is not running, then <B>FindWindow</B> will fail in the <B>Display</B> function, thus generating no output <a href="#note1">[1]</a>.</p>
<p><a href="list3.htm">Listings 3</a> and <a href="list4.htm">4</a> show a partial implementation of <B>QMonitor.exe</B> using MFC. For brevity only the <B>Dialog</B> derived class is presented, and just the implementation of the <B>OnCopyData</B> member function. The rest can be easily recreated. The source code is self-explanatory. A plain <B>ListBox</B> control uses the following style flags: sort disabled, selection = none, and both scrolls enabled.</p>
<p>In my experience the performance overhead of the extra code involved is insignificant. This approach can be used in many projects to display trace data in Release mode applications.</p>

<H4><FONT COLOR="#000080">Note</FONT></H4>
<p><a name="note1">[1]</a>  In a very rare case on Windows NT, <B>FindWindow</B> might fail for an existing window when the application runs under a different account than the one bound to the current desktop. For example, the application may be an NT service or spawned by a service like a telnet server. To make it work, you need to set the process's window station to <B>"WinSta0"</B> and set the thread's desktop to "Default" at the beginning of the program by using <B>SetProcessWindowStation</B> and <B>SetThreadDesktopWin32</B>. For details, see the article, "Interacting with User in a Service," on the MSDN CD-ROM.</p>

<p><i><B>Boris Bromberg</B> has an M.Sc. from the Moscow Institute of Petrochemical and Gas Technology. He has been working as a software developer for over ten years in the oil-gas, automation, and banking industries. He currently works as a Senior Software Developer for Q.Data Inc, Markham, Ontario, Canada, where he develops applications using Visual C++ on Windows NT. He can be reached at <B>brom@interlog.com</B>.</i></p>

<h4><a href="../../../source/2000/sep00/bromberg.zip">Get Article Source Code</a></h4>


</blockquote></body></html>
