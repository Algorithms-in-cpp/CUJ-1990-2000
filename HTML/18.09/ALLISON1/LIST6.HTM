<HTML><HEAD>
<TITLE>September 2000/The Simplest Automated Unit Test Framework That Could Possibly Work/Listing 6</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 6: The file Suite.cpp</A></h4>
<pre>
// suite.cpp

#include "suite.h"
#include &lt;iostream&gt;
#include &lt;stdexcept&gt;
#include &lt;cassert&gt;
using namespace std;

class TestSuiteError : public logic_error
{
public:
    TestSuiteError(const string&amp; s = "")
        : logic_error(s)
    {}
};

void Suite::addTest(Test* t) throw(TestSuiteError)
{
    // Make sure test has a stream:
    if (t == 0)
        throw TestSuiteError("Null test in Suite::addTest");
    else if (m_osptr != 0 &amp;&amp; t-&gt;getStream() == 0)
        t-&gt;setStream(m_osptr);

    m_tests.push_back(t);
    t-&gt;reset();
}

void Suite::addSuite(const Suite&amp; s) throw(TestSuiteError)
{
    for (size_t i = 0; i &lt; s.m_tests.size(); ++i)
        addTest(s.m_tests[i]);
}

void Suite::free()
{
    // This is not a destructor because tests
    // don't have to be on the heap.
    for (size_t i = 0; i &lt; m_tests.size(); ++i)
    {
        delete m_tests[i];
        m_tests[i] = 0;
    }
}

void Suite::run()
{
    reset();
    for (size_t i = 0; i &lt; m_tests.size(); ++i)
    {
        assert(m_tests[i]);
        m_tests[i]-&gt;run();
    }
}


long Suite::report() const
{
    if (m_osptr)
    {
        long totFail = 0;
        *m_osptr &lt;&lt; "Suite \"" &lt;&lt; m_name &lt;&lt; "\"\n=======";
        size_t i;
        for (i = 0; i &lt; m_name.size(); ++i)
            *m_osptr &lt;&lt; '=';
        *m_osptr &lt;&lt; "=\n";

        for (i = 0; i &lt; m_tests.size(); ++i)
        {
            assert(m_tests[i]);
            totFail += m_tests[i]-&gt;report();
        }

        *m_osptr &lt;&lt; "=======";
        for (i = 0; i &lt; m_name.size(); ++i)
            *m_osptr &lt;&lt; '=';
        *m_osptr &lt;&lt; "=\n";
        return totFail;
    }
    else
        return getNumFailed();
}

long Suite::getNumPassed() const
{
    long totPass = 0;
    for (size_t i = 0; i &lt; m_tests.size(); ++i)
    {
        assert(m_tests[i]);
        totPass += m_tests[i]-&gt;getNumPassed();
    }
    return totPass;
}

long Suite::getNumFailed() const
{
    long totFail = 0;
    for (size_t i = 0; i &lt; m_tests.size(); ++i)
    {
        assert(m_tests[i]);
        totFail += m_tests[i]-&gt;getNumFailed();
    }
    return totFail;
}

void Suite::reset()
{
    for (size_t i = 0; i &lt; m_tests.size(); ++i)
    {
        assert(m_tests[i]);
        m_tests[i]-&gt;reset();
    }
}
</pre></body></html>
