<HTML>   
     <HEAD>
<TITLE>September 2000/The Simplest Automated Unit Test Framework That Could Possibly Work</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocsep.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">The Simplest Automated Unit Test Framework That Could Possibly Work</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Chuck Allison</FONT></H3>

<BLOCKQUOTE>
<p>Testing is a necessary evil to many programmers, but it doesn't have to be all that evil.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>The title of this article is a variation on a theme from Extreme Programming <a href="#foot1">[1]</a>, or XP for short. XP is a code-centric discipline for getting software done right, on time, within budget, while having fun along the way. Quit laughing <a href="#foot2">[2]</a>. The XP approach is to take the best software practices to the extreme.</p>
<p>For example, if code reviews are good, then code should be reviewed constantly, even as it's written. Hence the XP practice of Pair Programming, where all code is written by two developers sharing a single workstation. One programmer pilots the keyboard while the other watches to catch mistakes and give strategic guidance. Then they switch roles as needed. The next day they may pair up with other folks.</p>
<p>Likewise, if testing is good, then all tests should be automated and run many times per day. An ever growing suite of unit tests should be executed whenever you create or modify any function, to ensure that the system is still stable. Furthermore, developers should integrate code into the complete, evolving system and run functional tests often (at least daily).</p>
<p>You've probably seen the old cartoon with the caption, "You guys start coding while I go find out what they want." I spent a number of years as a developer wondering why users couldn't figure out what they wanted before I started coding. I found it very frustrating to attend a weekly status meeting only to discover that what I completed the week before wasn't quite going to fit the bill because the analysts changed their mind. It's hard to reshape concrete while it's drying. Only once in my career have I had the luxury of a "finished spec" to code from <a href="#foot3">[3]</a>.</p>
<p>Over the years, however, I've discovered that it is unreasonable to expect mere humans to be able to articulate software requirements in detail without sampling an evolving, working system. It's much better to specify a little, design a little, code a little, test a little. Then, after evaluating the outcome, do it all over again. The ability to develop from soup to nuts in such an iterative fashion is one of the great advances of this object-oriented era in software history. But it requires nimble programmers who can craft resilient (i.e., slow-drying) code. Change is hard.</p>
<p>Ironically, another kind of change that good programmers want desperately to perform has always been opposed by management: improving the physical design of working code. What maintenance programmer hasn't had occasion to curse the aging, flagship company product as a convoluted patchwork of spaghetti, wholly resistant to modification? The fear of tampering with a functioning system, while not totally unfounded, robs code of the resilience it needs to endure. "If it ain't broke, don't fix it" eventually gives way to "We can't fix it &#151; rewrite it." Change is necessary.</p>
<p>Fortunately, we are now seeing the rise of the new discipline of Refactoring, the art of internally restructuring code to improve its design, without changing the functionality visible to the user <a href="#foot4">[4]</a>. Such tweaks include extracting a new function from another, or its inverse, combining methods; replacing a method with an object; parameterizing a method or class; or replacing conditionals with polymorphism. Now that this process of improving a program's internal structure has a name and the support of industry luminaries, we will likely be seeing more of it in the workplace.</p>
<p>But whether the force for change comes from analysts or programmers, there is still the risk that changes today will break what worked yesterday. What we're all after is a way to build code that withstands the winds of change and actually improves over time.</p>
<p>Many practices purport to support this quick-on-your-feet motif, of which XP is only one. In this article I explore what I think is the key to making incremental development work: a ridiculously easy-to-use automated unit test framework, which I have implemented in C++, C, and Java.</p>
<p>Unit tests are what developers write to gain the confidence to say the two most important things that any developer can say:</p>
<p>1.  I understand the requirements.</p>
<p>2.  My code meets those requirements.</p>
<p>I can't think of a better way ensure that you know what the code you're about to write should do than to write the unit tests first. This simple exercise helps focus the mind on the task ahead, and will likely lead to working code faster than just jumping into coding. Or, to express it in XP terms, Testing + Programming is faster than just Programming. Writing tests first also puts you on guard up front against boundary conditions that might cause your code to break, so your code is more robust right out of the chute.</p>
<p>Once you have code that passes all your tests, you then have the peace of mind that if the system you contribute to isn't working, it's not your fault. The statement, "All my tests pass" is a powerful trump card in the workplace that cuts through any amount of politics and hand waving.</p>
<p>Writing good unit tests is so important that I'm amazed I didn't discover its value earlier in my career. Let me rephrase that. I'm not really amazed, just disappointed. I still remember what turned me off to formal testing at my first job right out of school. The testing manager (yes, we had one in 1978!) asked me to write a unit-test plan, whatever that was. Being an impatient youth I thought it was silly to waste time writing a plan &#151; why not just write the test? That encounter soured me on the idea of formal test plans for years thereafter.</p>

<H4><FONT COLOR="#000080">Automated Testing</FONT></H4>

<p>I think that most developers, like myself, would rather write code than write about code. But what does a unit test look like? Quite often developers just verify that some well behaved input produces the expected output, which they inspect visually. Two dangers exist in this approach. First, programs don't always receive just well behaved input. We all know that we should test the boundaries of program input, but it's hard to think about it when you're trying to just get things working. If you write the test for a function first before you start coding, you can wear your QA hat and ask yourself, "What could possibly make this break?" Code up a test that will prove the function you'll write isn't broken, then put on your developer hat and make it happen. You'll write better code than if you hadn't written the test first.</p>
<p>The second danger is inspecting output visually to see if things work. It's fine for toy programs, but production software is too complex for that kind of activity. It is tedious and error prone to visually inspect program output to see if a test passed. Most any such thing a human can do a computer can do, but without error. It's better to formulate tests as collections of Boolean expressions and have the test program report any failures.</p>
<p>As an example, suppose you need to build a <B>Date</B> class in C++ that has the following properties:</p>
<UL><LI>   A date can be initialized with a string (YYYY-MM-DD), three integers (Y, M, D), or nothing (today's date).
<LI>   A date object can yield its year, month, and day or a string of the form <B>"YYYY-MM-DD"</B>.
<LI>   All relational comparisons are available, as well as computing the duration between two dates (in years, months, and days), and adding or subtracting a duration.
<LI>   Dates need to span an arbitrary number of centuries (e.g., 1600-2200)</UL>
<p>Your class could store three integers representing the year, month, and day. (Just be sure the year is 16 bits or more to satisfy the last bullet above.) The interface for your <B>Date</B> class might look like this:</p>

<pre>
// date.h
#include &lt;string&gt;
#include "duration.h"  // a three-int struct

class Date
{
public:
    Date();
    Date(int year, int month, int day);
    Date(const std::string&amp;);

    int getYear() const;
    int getMonth() const;
    int getDay() const;
    string toString() const;

    friend operator&lt;(const Date&amp;, const Date&amp;);
    friend operator&lt;=(const Date&amp;, const Date&amp;);
    friend operator&gt;(const Date&amp;, const Date&amp;);
    friend operator&gt;=(const Date&amp;, const Date&amp;);
    friend operator==(const Date&amp;, const Date&amp;);
    friend operator!=(const Date&amp;, const Date&amp;);

    friend Duration duration(const Date&amp;, const Date&amp;);
    void addDuration(const Duration&amp;);
};
</pre>

<p>You can now write tests for the functions you want to implement first, something like the following:</p>

<pre>
int main()
{
    Date mybday(1951, 10, 1);

    test(mybday.getYear() == 1951);
    test(mybday.getMonth() == 10);
    test(mybday.getDay() == 1);
    cout &lt;&lt; "Passed: " &lt;&lt; nPass &lt;&lt; ", Failed: "
         &lt;&lt; nFail &lt;&lt; endl;

}
/* Output:
Passed: 3, Failed: 0
*/
</pre>

<p>In this case you can assume that the function <B>test</B> maintains the global variables <B>nPass</B> and <B>nFail</B>. The only visual inspection you do is to read the final score. If a test failed, then <B>test</B> would print out an appropriate message. The framework described below has such a <B>test</B> function, among other things.</p>
<p>As you continue in the test-and-code cycle you'll want to build a suite of tests that are always available to keep all your related classes in good shape through any future maintenance. As requirements change, you add or modify tests accordingly.</p>

<H4><FONT COLOR="#000080">The TestSuite Framework</FONT></H4>

<p>As you learn more about XP you'll discover that there are some automated unit test tools available for download, such as <B>JUnit</B> for Java and <B>CppUnit</B> for C++. These are brilliantly designed and implemented, but I want something even simpler. I want something that I can not only easily use but also understand internally and even tweak if necessary. And I can live without a GUI. So, in the spirit of TheSimplestThingThatCouldPossibleWork, I present the TestSuite Framework, as I call it, which consists of two classes: <B>Test</B> and <B>Suite</B>. <B>Test</B> is an abstract class you derive from to override the <B>run</B> method, which should in turn call <B>_test</B> <a href="#foot5">[5]</a> for each Boolean test condition you define. For the <B>Date</B> class above you could do something like the following:</p>

<pre>
// DateTest.h: Use the test class
#include "test.h"
#include "date.h"

class DateTest : public Test
{
    Date mybday;

public:
    DateTest()
        : mybday(1951,10,1)
    {}

    void run()
    {
        // The tests to run:
        testConstructors();
    }
    void testConstructors()
    {
        _test(mybday.getYear() == 1951);
        _test(mybday.getMonth() == 10);
        _test(mybday.getDay() == 1);
    }
};
</pre>

<p>You can now run the test very easily, like this:</p>

<pre>
#include "DateTest.h"

int main()
{
    DateTest t;
    t.setStream(&amp;cout); // must precede run()
    t.run();
    t.report();
}

/* Output:
Test "class DateTest":
        Passed: 3       Failed: 0
*/
</pre>

<p>As development continues on the <B>Date</B> class, you'll add other tests called from <B>DateTest::run</B>, and then execute the main program to see if they all pass.</p>
<p>The <B>Test</B> class uses RTTI to get the name of your class (e.g., <B>DateTest</B>) for the report <a href="#foot6">[6]</a>. The <B>setStream</B> method lets you specify where the output will go, and report sends output to that stream. See <a href="list1.htm">Listings 1</a> and <a href="list2.htm">2</a> for the definition and implementation of <B>Test</B>. No rocket science here. <B>Test</B> just keeps track of the number of successes and failures as well as the stream where you want <B>Test::report</B> to print the results. <B>_test</B> and <B>_fail</B> are macros so that they can include filename and line number information available from the preprocessor (which is not available in the Java version, of course).</p>
<p>In addition to <B>_test</B>, the framework includes the functions <B>_succeed</B> and <B>_fail</B>, for cases where a Boolean test won't do. For example, a simple stack class template might have the following specification:</p>

<pre>
// Stack.h
...

template&lt;typename T&gt;
class Stack
{
public:
    Stack(size_t) throw(StackError, bad_alloc);
    ~Stack();

    void push(const T&amp;) throw(StackError);
    T pop() throw(StackError);
    T top() const throw(StackError);
    size_t size() const;
    ...
};
</pre>

<p>Before giving any thought at all to implementation, it's easy to come up with general categories of tests for this class:</p>

<pre>
class StackTest : public Test
{
    enum {SIZE = 5};
    Stack&lt;int&gt; stk;

public:
    StackTest() : stk(SIZE)
    {}

    void run()
    {
        testUnderflow();
        testPopulate();
        testOverflow();
        testPop();
        testBadSize();
    }
...
</pre>

<p>But to test whether exceptions are working correctly, you have to generate an exception and call <B>_succeed</B> or <B>_fail</B> explicitly, as <B>StackTest::testBadSize</B> class illustrates:</p>

<pre>
    void testBadSize()
    {
        try
        {
            Stack&lt;int&gt; s(0);
            _fail("Bad Size");
        }
        catch (StackError&amp;)
        {
            _succeed();
        }
    }
</pre>

<p>Since a stack of size zero is prohibited, "success" in this case means that a <B>StackError</B> exception was caught, so I have to call <B>_succeed</B> explicitly. The implementation of the <B>Stack</B> class template is in <a href="list3.htm">Listing 3</a>. <B>StackTest</B> and its results appear in <a href="list4.htm">Listing 4</a>.</p>

<H4><FONT COLOR="#000080">Test Suites</FONT></H4>

<p>Real projects usually contain many classes, so there needs to be a way to group tests together so you can just push a single button to test the entire project. The <B>Suite</B> class allows you to collect tests into a functional unit. You add a derived <B>Test</B> object to a <B>Suite</B> with the <B>addTest</B> method, or you can swallow an entire existing <B>Suite</B> with <B>addSuite</B>. To illustrate, I have four modules that work together to provide real-world date support. <B>JulianDate</B> is what I call an API of C functions that implement the basics of Julian Date arithmetic <a href="#foot7">[7]</a>. The <B>JulianTime</B> module uses <B>JulianDate</B> but adds support for hours, minutes, and seconds. <B>Date</B> uses <B>JulianDate</B> and adds various niceties for C++ users. The same relationship exists between <B>Time</B> and <B>JulianTime</B>. Since these classes are all interrelated and are packaged as a single library, I want to test them together. After defining each test class (derived from <B>Test</B>, of course), I group them into a suite entitled "Date and Time Tests." Here's an actual test run:</p>

<pre>
// test Suite for the Date projects
#include &lt;iostream&gt;
#include "suite.h"
#include "JulianDateTest.h"
#include "JulianTimeTest.h"
#include "DateTest.h"
#include "TimeTest.h"
using namespace std;

int main()
{
    Suite s("Date and Time Tests", &amp;cout);

    s.addTest(new JulianDateTest);
    s.addTest(new JulianTimeTest);
    s.addTest(new DateTest);
    s.addTest(new TimeTest);
    s.run();
    long nFail = s.report();
    s.free();
    cout &lt;&lt; "\nTotal failures: " &lt;&lt; nFail &lt;&lt; endl;
    return nFail;
}

/* Output:
Suite "Date and Time Tests"
===========================
Test "class MonthInfoTest":
        Passed: 18      Failed: 0
Test "class JulianDate":
        Passed: 36      Failed: 0
Test "class JulianTime":
        Passed: 29      Failed: 0
Test "class Date":
        Passed: 57      Failed: 0
Test "class Time":
        Passed: 84      Failed: 0
===========================

Total failures: 0
*/
</pre>

<p><B>Suite::run</B> calls <B>Test::run</B> for each of its contained tests. Much the same thing happens for <B>Suite::report</B>. Individual test results can be written to separate streams, if desired. If the test passed to <B>addSuite</B> has a stream pointer assigned already, it keeps it. Otherwise it gets its stream from the <B>Suite</B> object. The code for <B>Suite</B> is in <a href="list5.htm">Listings 5</a> and <a href="list6.htm">6</a>. As you can see, <B>Suite</B> just holds a vector of pointers to <B>Test</B>. When it's time to run each test, it just loops through the tests in the vector calling their <B>run</B> method.</p>

<H4><FONT COLOR="#000080">No C++? No Problem!</FONT></H4>

<p>After I showed <B>TestSuite</B> to the developers where I used to work, a number of programmers were a little chagrined that they couldn't use it, because they were developing strictly in C. It took all of one afternoon to change all the classes to structs and rename things accordingly to come up with a C version. A simple test example is in <a href="list7.htm">Listing 7</a>. The Java version was even easier, of course. You can get all the code on the <I>CUJ</I> web site (<B>www.cuj.com/code</B>).</p>
<p>It takes some discipline to write unit tests before you code, but if you have an automated tool, it makes it a lot easier. I just add a project in my IDE for a test suite for each project, and switch back and forth between the test and the real code as needed. There's no conceptual baggage, no extra test scripting language to learn, no worries &#151; just point, click, and test!</p>

<H4><FONT COLOR="#000080">Footnotes</FONT></H4>
<p><a name="foot1">[1]  See Kent Beck's book, <I>eXtreme Programming Explained: Embrace Change</I> (Addison-Wesley, 2000, ISBN 0-201-61641-6), or visit <B>www.Xprogramming.com</B> for more information on XP. The XP theme from which this article derives its title is DoTheSimplestThingThatCouldPossiblyWork.</p>
<p><a name="foot2">[2]  "Stop laughing," are Kent's own words. See ibid, p. xvi. </p>
<p><a name="foot3">[3]  Yes, you guessed it. It was a government project. For all the paperwork, at least I knew what to do.</p>
<p><a name="foot4">[4]  The seminal work on this subject is of course Martin Fowler's <I>Refactoring: Improving the Design of Existing Code</I> (Addison-Wesley, 2000, ISBN 0-201-48567-2). See <B>www.refactoring.com</B>.</p>
<p><a name="foot5">[5]  The leading underscore is necessary so as not to conflict with <B>ios::fail</B>. I know that leading underscores are scary to some, but as long as an uppercase letter or another underscore does not follow them, there's no problem.</p>
<p><a name="foot6">[6]  If you're using Microsoft Visual C++, you need to specify the compile option <B>/GR</B>. If you don't, you'll get an access violation at run time.</p>
<p><a name="foot7">[7]  These functions hold a Julian Day as a long. The <B>JulianTime </B>functions hold a <B>JulianDate</B> plus hour, minute, and second all in one <B>double</B>. These are global functions because I want them to support both C and C++. The <B>Date</B> and <B>Time</B> classes wrap these modules and add more functionality. For more on Julian day arithmetic, see Chapter 19 of my book, <I>C &amp; C++ Code Capsules</I> (Prentice-Hall, 1998).</p>

<p><i><B>Chuck Allison</B> is the owner of Fresh Sources, a company specializing in object-oriented software development, training, and mentoring. He has been a contributing member of J16, the C++ Standards Committee, since 1991, and is the author of </I>C and C++ Code Capsules: A Guide for Practitioners<I>, Prentice-Hall, 1998. You can email Chuck at <B>cda@freshsources.com</B>.</i></p>

<h4><a href="../../../source/2000/sep00/allison.zip">Get Article Source Code</a></h4>

</blockquote></body></html>
