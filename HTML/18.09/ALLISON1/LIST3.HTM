<HTML><HEAD>
<TITLE>September 2000/The Simplest Automated Unit Test Framework That Could Possibly Work/Listing 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 3: A simple stack template</A></h4>
<pre>
// Stack.h
#include &lt;cassert&gt;
#include &lt;cstddef&gt;
#include &lt;stdexcept&gt;
#include &lt;string&gt;
#include &lt;new&gt;

using std::logic_error;
using std::string;
using std::bad_alloc;

// MS std namespace work-around
#ifndef _MSC_VER
using std::size_t;
#endif

class StackError : public logic_error
{
public:
    StackError(const string&amp; s)
        : logic_error(s)
    {}
};

template&lt;typename T&gt;
class Stack
{
public:
    Stack(size_t) throw(StackError, bad_alloc);
    ~Stack();

    void push(const T&amp;) throw(StackError);
    T pop() throw(StackError);
    T top() const throw(StackError);
    size_t size() const;
private:
    T* data;
    size_t max;
    size_t ptr;
};
// not shown: ctor,size(), dtor

template&lt;typename T&gt;
void Stack&lt;T&gt;::push(const T&amp; x) throw(StackError)
{
    if (ptr == max)
        throw StackError("stack overflow");
    assert(ptr &lt; max);
    data[ptr++] = x;
}
template&lt;typename T&gt; T Stack&lt;T&gt;::pop() throw(StackError)
{
    if (ptr == 0) throw StackError("stack underflow");
    return data[--ptr];
}
template&lt;typename T&gt; T Stack&lt;T&gt;::top() const throw(StackError)
{
    if (ptr == 0) throw StackError("stack underflow");
    return data[ptr - 1];
}
</pre></body></html>
