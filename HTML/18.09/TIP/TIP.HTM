<HTML>   
     <HEAD>
<TITLE>September 2000/C/C++ Tip #2: Generic Constants for Generic Programming</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocsep.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Tips</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">C/C++ Tip #2: Generic Constants for Generic Programming</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Fernando Cacciola</FONT></H3>
<hr>
<BLOCKQUOTE></p>

<p>Suppose you need to write a generic function to convert angles from degrees to radians. The usual way is to declare a constant to hold the value of one radian in degrees <a href="#note1">[1]</a>:</p>

<pre>
#define RADIAN (180/M_PI)
</pre>

<p>Then you write your conversion function something like this:</p>

<pre>
template&lt;typename T&gt;
T toRAD (T const&amp; deg)
{
   return deg / T(RADIAN);
}
</pre>

<p>Now suppose the user of your code has a library with a <B>bigfloat_t</B> number type, and that this <B>bigfloat_t</B> can be constructed from a <B>double</B>. The user might call your <B>toRad</B> function as follows:</p>

<pre>
bigfloat_t alfa (45.0);
bigfloat_t beta = toRAD (alfa);
</pre>

<p>This code will cause the compiler to instantiate the function <B>toRAD&lt;bigfloat_t&gt;</B>, which is equivalent to:</p>

<pre>
bigfloat_t toRAD (bigfloat_t const&amp; deg)
{
   return deg / bigfloat_t(RADIAN);
}
</pre>

<p>What's the problem here? Remember that in expressions of the form <B>T(CONSTANT)</B> or <B>const T &amp; C = CONSTANT</B> that the <B>T</B> object is constructed (or copy initialized) using a constructor that takes the same type as the literal <B>CONSTANT</B> <a href="#note2">[2]</a>. No matter how <B>CONSTANT</B> is declared, its type is unique and will not necessarily be of the same type as <B>T</B>. In the above example, the expression <B>bigfloat_t(RADIAN)</B> will use the <B>bigfloat_t</B> constructor that takes a <B>double</B> value. As a result, the newly constructed <B>bigfloat_t</B> will have no more precision than a <B>double</B>.</p>
<p>Math libraries often provide definitions for commonly used numbers, such as pi. For example, the bigfloat library might provide an external symbol, <B>BigFloatRadian_</B>, that represents this number with a precision suitable for <B>bigfloat_t</B>. The user would naturally want <B>toRad</B> to use the full-precision <B>BigFloatRadian_</B> in its calculation of degrees to radians. This tip shows how to preserve such precision in generic calculations involving constants.</p>
<p>When writing generic code involving constants such as <B>RADIAN</B>, <B>M_PI</B>, etc., don't use expressions of the form <B>T(CONSTANT)</B>. Instead, define and use a template function as shown in the following snippet:</p>

<pre>
template&lt;typename T&gt; inline T cRadian() {return 180 / M_PI;}

template&lt;typename T&gt;
T toRAD ( T const&amp; deg )
{
   return deg / cRadian&lt;T&gt;() ;
}
</pre>

<p>The user can now add an <I>explicit specialization</I> of the template function <B>cRadian</B> for type <B>bigfloat_t</B>:</p>

<pre>
template&lt;&gt; inline bigfloat_t cRadian&lt;bigfloat_t&gt;()
{return BigFloatRadian_;}
</pre>

<p>When the compiler sees a call to the function <B>cRadian&lt;bigfloat_t&gt;</B>, it will substitute this special definition for the more general one.</p>
<p>For the specialization for <B>bigfloat_t</B> to work, it must return a reasonable <B>bigfloat_t</B> representation of one radian. If the library does not provide such a representation, it may be possible to use a helper function to compute the value at run time.</p>
<p>[<I>Fernando also showed how to return a reference to a generic constant instead of a copy, but the solution is rather involved. We may run it as a separate tip. </I>&#151;<I>mb</I>]</p>

<H4><FONT COLOR="#000080">Notes</FONT></H4>

<p><a name="note1">[1]  A <B>const double</B> declaration might raise problems in precompiled headers, because of the storage needed by the <B>double</B> value.</p>
<p><a name="note2">[2]  Or, if a conversion exists between the type of <B>CONSTANT</B> and the type required by a certain constructor, that constructor will be called assuming there is no closer match.</p>

<p><i>Thanks to Fernando Cacciola for this tip. If you have a C/C++ programming tip and can write it up in 400 words or less, send it to </I><B>mbriand@cmp.com</B><I>. If we print your tip, we'll send you a nice </I>CUJ<I> shirt and a copy of the </I>CUJ<I> CD-ROM.</i></p>

</blockquote></body></html>
