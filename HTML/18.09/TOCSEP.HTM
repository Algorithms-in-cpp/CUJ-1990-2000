<HTML>
<HEAD>
<TITLE>September 2000</TITLE></HEAD>     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          <BLOCKQUOTE> <IMG SRC="../logo.gif" ALT="{logo}" WIDTH="310" HEIGHT="100">
               
               <H3><FONT COLOR="#000080">September 2000<BR>
                Volume 18 Number 9</FONT></H3>
               
<H3><FONT COLOR="#FF0000">INTERNET PROGRAMMING</FONT></H3>
<H4><A HREF="moreno/moreno.htm">HTML Document Templates for CGI Applications</A></H4>
<p><b>Carlos Moreno</b><br>
<i>Get the power of C/C++ programming with the flexibility of HTML by keeping the two at arms length.</i></p>

<H4><A HREF="nelson/nelson.htm">Network Programming with Linux</A></H4>
<p><b>Erik Nelson</b><br>
<i>TCP isn't the only protocol for swapping data packets, nor is it always the most effective.</i></p>

<H4><A HREF="smereka/smereka.htm">A TCP/IP Socket Location Server</A></H4>
<p><b>Richard Smereka</b><br>
<i>You can write remarkably portable network-aware code, if you are careful how you isolate the dependencies.</i></p>

<H3><FONT COLOR="#FF0000">FEATURES</FONT></H3>

<H4><A HREF="allison1/allison1.htm">The Simplest Automated Unit Test Framework That Could Possibly Work</A></H4>
<p><b>Chuck Allison</b><br>
<i>Testing is a necessary evil to many programmers, but it doesn't have to be all that evil.</i></p>

<H4><A HREF="bromberg/bromberg.htm">Tracing an Application in Release Configuration</A></H4>
<p><b>Boris Bromberg</b><br>
<i>A lightweight trace facility is less likely to distort performance in the final stress of debugging.</i></p>

<H3><FONT COLOR="#FF0000">C/C++ TIPS</FONT></H3>

<H4><A HREF="tip/tip.htm">Tip #2: Generic Constants for Generic Programming</A></H4>
<p><b>Fernando Cacciola</b><br>
<i>If you're going to write generic code, make sure it's completely generic.</i></p>

<H3><FONT COLOR="#FF0000">BOOK REVIEW</FONT></H3>

<H4><A HREF="phillips/phillips.htm">The Pragmatic Programmer</A></H4>
<p><b>reviewed by Dwayne Phillips</b><br>
<i>There's more to programming than algorithms and programming languages &#151; much more.</i></p>

<H3><FONT COLOR="#FF0000">C/C++ CONTRIBUTING EDITORS</FONT></H3>

<H4><A HREF="tbecker/tbecker.htm">STL &amp; Generic Programming: Welcome to STL and Generic Programming</A></H4>
<p><b>Thomas Becker</b><br>
<i>Another Becker joins CUJ's editorial team to cover one of the most important areas of C++ programming.</i></p>

<H4><A HREF="allison2/allison2.htm">import java.*: Collections and Algorithms</A></H4>
<p><b>Chuck Allison</b><br>
<i>Java lacks both a standard and templates, but it nevertheless offers something resembling the C++ Standard Template Library.</i></p>

<H4><A HREF="schmidt/schmidt.htm">Uncaught Exceptions: The Ballad of Ned Kelly</A></H4>
<p><b>Bobby Schmidt</b><br>
<i>Bobby gets hitched, pines for Oz, and deals with several common confusions in C/C++, all in one action-packed episode.</i></p>

<H3><FONT COLOR="#FF0000">DEPARTMENTS</FONT></H3>

<H4><A HREF="editor/editor.htm">Editor's Forum</A></H4>
<H4><A HREF="newprod/newprod.htm">New Products</A></H4>
<H4><A HREF="letters/letters.htm">We Have Mail</A></H4>

<H3><FONT COLOR="#FF0000">C++ EXPERTS FORUM &#151 WEB-EXCLUSIVE</FONT></H3>
<p>In this new, web-only component of CUJ, we continue publication of the columns that were popular in the former C++ Report magazine. The following articles are featured on the CUJ website this month:


<H4><A HREF="../cexp1809/sutter/sutter.htm">Conversations: So Who’s the Portable Coder?</A></H4>
<p><b>Jim Hyslop and Herb Sutter</b><br>
<i>When it comes to writing portable code, knowing what's standard is only half the battle. You might have to work around a few obstacles, including a guy named Bob.</i></p>

<H4><A HREF="../cexp1809/murray/murray.htm">Obfuscated C++</A></H4>
<p><b>Robert Murray</b><br>
<i>Rob Murray delivers up one final puzzler to sharpen your C++ knowledge.</i></p>

<H4><A HREF="../cexp1809/lippman/lippman.htm">Standard C++ Programming: Virtual Functions and Inlining</A></H4>
<p><b>Jos&eacute;e Lajoie and Stanley Lippman</b><br>
<i>As we gain mastery of C++, it is natural to question the rules of thumb that helped us get by in the beginning. Lippman and Lajoie provide an excellent example of such a rule regarding virtual functions, and why that rule should be carefully reconsidered.</i></p>

</BLOCKQUOTE></BODY></HTML>
