<HTML>   
     <HEAD>
<TITLE>September 2000/Uncaught Exceptions</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocsep.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Uncaught Exceptions: The Ballad of Ned Kelly</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Bobby Schmidt</FONT></H3>

<BLOCKQUOTE>
<p>Bobby gets hitched, pines for Oz, and deals with several common confusions in C/C++, all in one action-packed episode.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>Copyright &copy; 2000 Robert H. Schmidt</p>
<p>I've had Sydney on the brain lately.</p>
<p>In three days my fianc&eacute;e Annie <a href="#note1">[1]</a> leaves for a six-week vacation in Australia. Her mum still lives just outside Sydney; they haven't seen each other in almost a decade. After losing my mother last year, I made it a personal priority for Annie to see hers this year.</p>
<p>We just saw the new <I>Mission Impossible</I> movie for the first time, and <I>The Matrix</I> for the second; both were filmed largely in Sydney. The fringe movie channels on my digital cable system have been showing a rash of Australian movies lately. And God help me, but I've been sneaking peaks at the truly wretched Aussie TV series <I>Skippy</I> on the Discovery Kids' channel.</p>
<p>While Annie's gone, I'll be slaving away at Microsoft. Now that I'm back with the company, I'm working closely with the Visual C++ team. I first met their product manager in Sydney over eight years ago. Several other team members are also from Down Under (although I suspect one is a Kiwi &#151; I have trouble discerning the accents).</p>
<p>And as you probably know by now, the 2000 Summer Olympic games will be held in Sydney this September. While we had toyed with the notion of attending those games, circumstances require me to be here this summer. Besides, Annie's dragging her 14-year-old tadpole with her, so they're bound to the school's vacation calendar.</p>
<p>We don't miss everything about Sydneyside living, but we do miss a lot. We talk about having a second home there some day, so we can rejoice in eternal summer. I envy Annie her chance to reconnect with her home, and very much look forward to our first sojourn there together.</p>

<H4><FONT COLOR="#000080">[const]_iterator</FONT></H4>

<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> Re: Q&amp;A topic "Hobson's Choice" from the August 1999 issue</p>
<p>As you say, P.J. Plauger wrote Microsoft's Standard libraries, and they compile cleanly under EDG's <B>-strict</B> switch. But he made a bit of a cock-up of his iterators, at least in Visual C++ v5. If you look in <B>&lt;list&gt;</B>, you will see that he has <B>iterator</B> as a public base to <B>const_iterator</B>! So things like this:</p>

<pre>
typedef std::list&lt;int&gt; X;

void f(X const &amp;x)
    {
    X::iterator const it = x.begin();
    *it = 7;
    }
</pre>

<p>work just fine! &#151; Lou Lavery</p>

<H4><FONT COLOR="#000080">A</FONT></H4>
<p> P.J. confirms this bug in the version 5 library, saying that the incorrect derivation was an accident rather than a design flaw. He corrects the bug in the version 6 library, deriving <B>iterator</B> from <B>const_iterator</B> as he intends. While I don't know for certain why P.J. implements his library this way, I can make a pretty fair guess.</p>
<p>According to the C++ Standard (Subclause 23.1, Table 65), all Standard library containers are required to define types <B>iterator</B> and <B>const_iterator</B>. Table 65 also specifies that &#151; for a given container class <B>X</B> &#151; <B>X::iterator</B> "is convertible to <B>X::const_iterator</B>." The Standard does not mandate how the conversion occurs, leaving that detail to the library implementer.</p>
<p>As implementer, Plauger chose to define <B>iterator</B> and <B>const_iterator</B> as distinct class types, with <B>iterator</B> derived from <B>const_iterator</B>. The derivation allows the usual standard conversion from derived (<B>iterator</B>) to base (<B>const_iterator</B>), thereby satisfying the Standard's requirements.</p>
<p>Plauger also declares a <B>const_iterator</B> constructor that accepts an <B>iterator</B> argument. This constructor provides another conversion path from <B>iterator</B> to <B>const_iterator</B>. According to Plauger, the redundancy is a transitional error from one library design to another, and is not intended. He claims (but I cannot verify) that the latest versions of his Dinkumware library do not contain this redundant constructor.</p>

<H4><FONT COLOR="#000080">More on const_iterator</FONT></H4>

<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> I have written a class called <B>range_set</B>, which was featured in the June 1999 issue of <I>CUJ</I>. <B>range_set</B> is designed to be compatible with <B>std::set</B>. I developed this class with Visual C++ v5 SP3, under which it compiled and ran fine. But compiling under Visual C++ v6 has uncovered a "const" problem that was previously undetected.</p>
<p>The problem stems from the fact that <B>std::set::iterator</B> is really a <B>const_iterator</B> (and so is my <B>range_set::iterator</B>), since you can't change the value in a set via an <B>iterator</B>. My implementation of <B>range_set</B> uses <B>std::list</B> internally (which has separate const and non-const iterators). Consequently, <B>range_set::const_iterator</B> has a <B>std::list::const_iterator</B> member.</p>
<p>Now the problem is that my <B>range_set::insert</B> calls <B>std::list::insert</B> passing the <B>std::list::const_iterator</B> as the first parameter. But <B>std::list::insert</B> takes a non-const iterator as its first parameter. This causes the compilation error under Visual C++ v6.</p>
<p>My question is: Why doesn't STL (Standard Template Library) specify that <B>std::list::insert</B> takes a <B>const_iterator</B> instead of a (non-const) <B>iterator</B>? After all, no value in the list is modified via this iterator, and the fact that you are calling a non-const member of <B>std::list</B> (i.e. <B>insert</B>) implies that the list itself may be modified.</p>
<p>My other question is: How do I cast an <B>iterator</B> to a <B>const_iterator</B>? The obvious way would be with a <B>const_cast</B>, but that (and all the other cast operators) give a compilation error (with Visual C++ v6 SP1). &#151; Andrew Phillips</p>

<H4><FONT COLOR="#000080">A</FONT></H4>

<p> As your second question segues nicely from reader Laverly's, I'll tackle it first.</p>
<p>In the Table 65 excerpt I quoted above, the Standard specifies that <B>iterator</B> "is convertible to" <B>const_iterator</B>. The Standard does not say if the conversion must be implicit, or if a cast could be required. I'm going to assume the former, that the conversion must occur without a cast.</p>
<p>Under that assumption, you should be able to write</p>

<pre>
typedef std::list&lt;int&gt; X;

X::iterator i;
X::const_iterator ci = i;
</pre>

<p>without any casts at all. As I discussed above, the Visual C++ v6 library implements this conversion by deriving <B>iterator</B> from <B>const_iterator</B>. That same library uses a different approach for <B>vector</B>s:</p>

<pre>
typedef std::vector&lt;int&gt; X;

X::iterator i;
X::const_iterator ci = i;
</pre>

<p>Instead of creating an inheritance relationship, <B>std::vector</B> defines <B>iterator</B> and <B>const_iterator</B> as <B>int *</B> and <B>int const *</B>, respectively. The conversion from <B>iterator</B> to <B>const_iterator</B> thus maps to the standard conversion from <B>int *</B> to <B>int const *</B>, which requires no cast.</p>
<p>With your other question, you've hit on a hole in the library's const correctness. Citing a similar problem, Dave Abrahams filed a potential Defect Report with the standards committee's Library Working Group (a.k.a. LWG). From his report:</p>

<BLOCKQUOTE>
<p>It is the constness of the container which should control whether it can be modified through a member function such as <B>erase</B>, not the constness of the iterators. The iterators only serve to give positioning information.</p>
<p>The proposed resolution: Change all non-const <B>iterator</B> parameters of standard library container member functions to accept <B>const_iterator</B> parameters. Note that this change applies to all library clauses, including strings.</p>
</BLOCKQUOTE>

<p>The Working Group considered Dave's issue, but finally decided that it did not represent a defect. Their response (slightly edited):</p>

<BLOCKQUOTE>
<p>The issue was discussed at length. It was generally agreed that</p>
<UL><LI>   There is no major technical argument against the change (although there is a minor argument that some obscure programs may break).
<LI>   Such a change would not break const correctness.</UL>
<p>The concerns about making the change were that it</p>
<UL><LI>   is user detectable (although only in boundary cases).
<LI>   changes a large number of signatures.
<LI>   seems more of a design issue that an out-and-out defect.</UL>
<p>The LWG believes that this issue should be considered as part of a general review of const issues for the next revision of the standard. Also see issue 200.</p>
</BLOCKQUOTE>

<p>In that issue 200, we find this illuminating note:</p>

<BLOCKQUOTE>
<p>The LWG believes this is the tip of a larger iceberg; there are multiple const problems with the STL portion of the library and that these should be addressed as a single package.</p>
</BLOCKQUOTE>

<p>Bottom line: the committee knows this is broken, but they want to fix it as part of a systemic const-correctness overhaul to the STL.</p>

<H4><FONT COLOR="#000080">Array Decay Blues</FONT></H4>

<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> Revered Sir,</p>
<p>I like the way you try to reason out the possible bugs in the code someone sends you or the way you present them, which is quite easy to comprehend.</p>
<p>I am facing a problem with an ANSI C compiler when I do something like this:</p>

<pre>
/* file1.c */
int arr[5];

/* file2.c */
extern int *arr;
</pre>

<p>Hope you can spare some of your precious time in helping me out.</p>
<p>Thanks in advance.</p>
<p>Regards &#151; Vijayan T. Dorairajan</p>

<H4><FONT COLOR="#000080">A</FONT></H4>
<p> While you don't say so explicitly, I'm assuming that your program compiles fine, but either fails to link or (more likely) links but runs incorrectly.</p>
<p>You've declared a single global entity (<B>arr</B>) with different types in different parts of your program. In <B>file1.c</B>, you define <B>arr</B> as having type "array of 5 <B>int</B>s," while in <B>file2.c</B> you declare <B>arr</B> as having type "pointer to <B>int</B>."</p>
<p>The actual <B>arr</B> object within your executable is an array, and as all Diligent Readers know, an array will often decay to a pointer. However, this is not the same as saying that an array is a pointer. It's this confusion between what an array is, and what an array converts to, that underlies your difficulty <a href="#note2">[2]</a>.</p>
<p>For the sake of discussion, assume that <B>sizeof(int) == sizeof(int *) == 4</B> in your program. Also assume that <B>file1.c</B> initializes <B>arr</B> as</p>

<pre>
int arr[5] = {1, 2, 3, 4, 5};
</pre>

<p>If <B>file2.c</B> evaluates the expression</p>

<pre>
arr[3] = 123;
</pre>

<p>the following occurs:</p>
<UL><LI>   <B>file2.c</B> declares <B>arr</B> as an <B>int *</B> and therefore believes that the chunk of storage named <B>arr</B> contains the address of an <B>int</B> object.
<LI>   The "pointer" in <B>arr</B> is fetched. Since pointers and <B>int</B>s have the same size, the value fetched is 1.
<LI>   The expression <B>arr[3]</B> adds <B>3 * sizeof(int)</B>, or 12, to the "pointer" 1, yielding the "pointer" 13.
<LI>   The storage at byte addresses 13 through 16 is set to 123.</UL>
<p>Thus, instead of setting the third element of <B>arr</B> to 123, <B>file2.c</B> sets whatever happens to be at address 13 to the value 123. This is almost certainly not correct behavior.</p>
<p>The easiest solution is to declare <B>arr</B> in a header as</p>

<pre>
extern int a[5];
</pre>

<p>then include that header in both <B>file1.c</B> and <B>file2.c</B>. Assuming you don't otherwise change either file, the compiler will flag the conflicting declaration in <B>file2.c</B>.</p>

<H4><FONT COLOR="#000080">Super Trouper</FONT></H4>

<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> Hi Bobby,</p>
<p>Recently I used a simple inheritance where the child's method uses the parent's implementation:</p>

<pre>
class Top
    {
public:
    virtual void f()
        {
        // ...
        }
    };

class Bottom: public Top
    {
public:
    virtual void f() // override
        {
        Top::f();
        // ...
        }
    };
</pre>

<p>Later, I put another class <B>Middle</B> between <B>Top</B> and <B>Bottom</B>:</p>

<pre>
class Middle: public Top
    {
public:
    virtual void f() // override
        {
        Top::f();
        // ...
        }
    };

class Bottom:
    public Middle //I changed this...
    {
public:
    virtual void f() // override
        {
        Top::f(); //...but forgot to
                  //change this
        // ...
        }
    };
</pre>

<p>But actually I had in mind:</p>

<pre>
class Bottom: public Middle
    {
public:
    virtual void f()
        {
        // correct implementation
        Middle::f();
        // ...
        }
    };
</pre>

<p>So my question is: Can one somehow specify to use the implementation of the immediate parent without explicitly naming it (like in a directory using <B>".."</B>)? Do you know another way this problem could be avoided? (This problem bit me when there were several different <B>Bottom</B> classes.)</p>
<p>Sincerely &#151; Joachim Eibl</p>

<H4><FONT COLOR="#000080">A</FONT></H4>
<p> What you want is the equivalent of Java's <B>super</B> keyword. You aren't alone &#151; I've seen this request, or a variation of it, in many C++ newsgroup postings. Unfortunately for you (and those posters), C++ does not support such a keyword.</p>
<p>Java allows only single inheritance of implementation. As a result, a Java derived (or sub) class has at most one direct base (or super) class. Within the derived class, the keyword <B>super</B> references this unambiguous base portion. In contrast, a C++ derived class may inherit implementation from multiple base classes. A <B>super</B> keyword wouldn't unambiguously work in such contexts.</p>
<p>Restricting myself to single inheritance of implementation, I've come up with various ways to approximate <B>super</B>'s effects. Although no technique is completely satisfactory, I think a solution using templates is not too heinous.</p>
<p>Consider this variation of your first example:</p>

<pre>
class Top
    {
public:
    virtual void f()
        {
        // ...
        }
    };

template&lt;typename super&gt;
class Bottom_ : public super
    {
public:
    virtual void f()
        {
        super::f(); // calls Top::f
        // ...
        }
    };

typedef Bottom_&lt;Top&gt; Bottom;
</pre>

<p>Highlights:</p>
<UL><LI>   What was a derived class <B>Bottom</B> in your example is now a class template <B>Bottom_</B>.
<LI>   <B>Bottom_</B> takes a single parameter <B>super</B>. When <B>Bottom_</B> is instantiated, the type argument bound to <B>super</B> becomes <B>Bottom_</B>'s base class.
<LI>   <B>Bottom_</B> is specialized for exactly one type argument (<B>Top</B>).
<LI>   The resulting class <B>Bottom_&lt;Top&gt;</B> is aliased to the type name <B>Bottom</B>.
<LI>   Within the context of <B>Bottom</B>, the name <B>super</B> acts as a faux keyword aliased to the base class type <B>Top</B>. (This behavior differs from Java's, which treats <B>super</B> as an object reference, not a type alias.)</UL>

<p>My technique scales as you want. If you introduce an intermediate class <B>Middle</B>, you don't need to change <B>Bottom_</B>'s implementation:</p>

<pre>
class Top
    {
    // ... same as before
    };

template&lt;typename super&gt;
class Middle_ : public super // new
    {
public:
    virtual void f()
        {
        // ...
        }
    };

typedef Middle_&lt;Top&gt; Middle; // new

template&lt;typename super&gt;
class Bottom_ : public super
    {
    // ... same as before
    };

typedef Bottom_&lt;Middle&gt;
    Bottom; // changed
</pre>

<p>The only required change to existing code is the replacement of</p>

<pre>
typedef Bottom_&lt;Top&gt; Bottom;
</pre>

<p>with</p>

<pre>
typedef Bottom_&lt;Middle&gt; Bottom;
</pre>

<p>This change corresponds to the analogous change in your original example from</p>

<pre>
class Bottom : public Top
</pre>

<p>to</p>

<pre>
class Bottom : public Middle
</pre>

<p>Because <B>Bottom</B> now takes <B>Middle</B> as its base class, the expression <B>super::f</B> within <B>Bottom</B> magically references <B>Middle::f</B> as you desire.</p>

<H4><FONT COLOR="#000080">Notes</FONT></H4>

<p><a name="note1">[1]  Yes, fianc&eacute;e. We're getting hitched on the 6th of August, which is the 40th anniversary of my parents' wedding.</p>
<p><a name="note2">[2]  If it's any consolation, you are not alone in your confusion. I first ran into this problem ten years ago, during my stint in Microsoft's Product Support.</p>

<p><i><B>Bobby Schmidt</B> is a freelance writer, teacher, consultant, and programmer. He is also an alumnus of Microsoft, a speaker at the Software Development and Embedded Systems Conferences, and an original "associate" of (Dan) Saks &amp; Associates. In other career incarnations, Bobby has been a pool hall operator, radio DJ, private investigator, and astronomer. You may summon him on the Internet via <B>BobbySchmidt@mac.com</B>.</i></p>

</blockquote></body></html>
