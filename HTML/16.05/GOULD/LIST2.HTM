


<HTML><HEAD>

<TITLE>May 1998/Double Dispatch with an Inverted Visitor Pattern/Listing 2</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4>
<A name="HEADING1">Listing 2: Test run of inverted visitor technique</A></h4>


<pre>
////////// event.h
#include &lt;iostream.h&gt;
#include "widget.h"

class Event
{
public:
    virtual void visit(Widget&amp; w) { w.handleEvent(*this); }
};

class EventA : public Event
{
public:
    void visit(Widget&amp; w) { w.handleEvent(*this); }
};

class EventB : public Event
{
public:
    void visit(Widget&amp; w) { w.handleEvent(*this); }
};

class EventC : public EventB
{
public:
    void visit(Widget&amp; w) { w.handleEvent(*this); }
};

///////// widget.h

#include &lt;iostream.h&gt;

class Event;
class EventA;
class EventB;
class EventC;

class Widget
{
public:
    virtual void handleEvent(Event&amp;)
    { cerr &lt;&lt; "Widget, Event" &lt;&lt; endl;  }
    virtual void handleEvent(EventA&amp;)
    { cerr &lt;&lt; "Widget, EventA" &lt;&lt; endl; }
    virtual void handleEvent(EventB&amp;)
    { cerr &lt;&lt; "Widget, EventB" &lt;&lt; endl; }
    virtual void handleEvent(EventC&amp; c)
    { cerr &lt;&lt; "Widget, EventC" &lt;&lt; endl;
      handleEvent((EventB&amp;)c);      }
};

class WidgetA : public Widget
{
public:
    void handleEvent(EventA&amp;) { cerr &lt;&lt; "WidgetA, EventA" &lt;&lt; endl; }
    void handleEvent(EventB&amp;) { cerr &lt;&lt; "WidgetA, EventB" &lt;&lt; endl; }
};

class WidgetB : public Widget
{
public:
    void handleEvent(EventB&amp;) { cerr &lt;&lt; "WidgetB, EventB" &lt;&lt; endl; }
    void handleEvent(EventC&amp;) { cerr &lt;&lt; "WidgetB, EventC" &lt;&lt; endl; }
};

class WidgetC : public WidgetB
{
public:
    void handleEvent(EventB&amp;)
    { cerr &lt;&lt; "WidgetC, EventB" &lt;&lt; endl; }
    // void handleEvent(EventC&amp;)
    // { cerr &lt;&lt; "WidgetC, EventC" &lt;&lt; endl; }
};

//////// main.c

#include "event.h"

void myVisitEngine(Widget&amp; w, Event&amp; e) { e.visit(w); }

int main()
{
    WidgetA wa;
    WidgetB wb;
    WidgetC wc;
    EventA ea;
    EventB eb;
    EventC ec;
    Widget *eh = &amp;wa;

    cerr &lt;&lt; "-------------" &lt;&lt; endl;
    cerr &lt;&lt; "-------------" &lt;&lt; endl;

    eh-&gt;handleEvent(ea);
    wa.handleEvent(ea);

    cerr &lt;&lt; "-------------" &lt;&lt; endl;

    eh-&gt;handleEvent(eb);
    ((Widget&amp;)wa).handleEvent(eb);

    cerr &lt;&lt; "-------------" &lt;&lt; endl;

    eh-&gt;handleEvent(ec);
    wa.handleEvent(ec);

    cerr &lt;&lt; "-------------" &lt;&lt; endl;
    cerr &lt;&lt; "-------------" &lt;&lt; endl;

    eh = &amp;wb;
    eh-&gt;handleEvent(ea);
    ((Widget&amp;)wb).handleEvent(ea);

    cerr &lt;&lt; "-------------" &lt;&lt; endl;

    eh-&gt;handleEvent(eb);
    wb.handleEvent(eb);

    cerr &lt;&lt; "-------------" &lt;&lt; endl;

    eh-&gt;handleEvent(ec);
    wb.handleEvent(ec);

    cerr &lt;&lt; "-------------" &lt;&lt; endl;
    cerr &lt;&lt; "-------------" &lt;&lt; endl;

    eh = &amp;wc;
    eh-&gt;handleEvent(ea);
    ((Widget&amp;)wc).handleEvent(ea);

    cerr &lt;&lt; "-------------" &lt;&lt; endl;

    eh-&gt;handleEvent(eb);
    wc.handleEvent(eb);

    cerr &lt;&lt; "-------------" &lt;&lt; endl;

    eh-&gt;handleEvent(ec);
    wc.handleEvent(ec);

    cerr &lt;&lt; "-------------" &lt;&lt; endl;
    cerr &lt;&lt; "-------------" &lt;&lt; endl;

    myVisitEngine(wa,ea);
    myVisitEngine(wa,eb);
    myVisitEngine(wa,ec);

    cerr &lt;&lt; "-------------" &lt;&lt; endl;

    myVisitEngine(wb,ea);
    myVisitEngine(wb,eb);
    myVisitEngine(wb,ec);

    cerr &lt;&lt; "-------------" &lt;&lt; endl;

    myVisitEngine(wc,ea);
    myVisitEngine(wc,eb);
    myVisitEngine(wc,ec);

    cerr &lt;&lt; "-------------" &lt;&lt; endl;
    cerr &lt;&lt; "-------------" &lt;&lt; endl;

    return 1;

}

//////// Output
-------------
-------------     // Each Widget is asked to handle each different
                  // event in turn
WidgetA, EventA   // &lt;-- First through a base class pointer
                  //     to the Widget
WidgetA, EventA   // &lt;-- Then through a direct reference
-------------
WidgetA, EventB
WidgetA, EventB
-------------
Widget, EventC    // &lt;-- Here since WidgetA has no handler for
                  //     EventC (which derives from EventB),
WidgetA, EventB   //     it falls through to the base class, which
                  //     then reroutes to the EventB handler
WidgetA, EventB
-------------
-------------
Widget, EventA    // &lt;-- Since WidgetB has no EventA handler,
Widget, EventA    //     it falls back to base the class
                  //     implementation 
-------------
WidgetB, EventB
WidgetB, EventB
-------------
WidgetB, EventC
WidgetB, EventC
-------------
-------------
Widget, EventA    // &lt;-- WidgetC has no EventA handler either
Widget, EventA
-------------
WidgetC, EventB
WidgetC, EventB
-------------
WidgetB, EventC   // &lt;-- This is an example of the different
WidgetC, EventB   //     behavior from using a base class pointer
                  //     and a direct reference, when the EventC
                  //     handler does not exist.
-------------
-------------     // Now a generic visitation engine is simulated,
                  // which asks the event to visit the widget
WidgetA, EventA
WidgetA, EventB
Widget, EventC    // &lt;-- Same behavior as above for
                  //     WidgetA and EventC
WidgetA, EventB
-------------
Widget, EventA
WidgetB, EventB
WidgetB, EventC
-------------
Widget, EventA
WidgetC, EventB 
WidgetB, EventC   // &lt;-- A generic base class engine will generate
                  //     this behavior.
-------------
-------------
/* End of File */
</pre>
</body></html>
