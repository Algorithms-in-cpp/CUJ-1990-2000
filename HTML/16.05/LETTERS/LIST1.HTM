


<HTML><HEAD>

<TITLE>May 1998/We Have Mail/Listing 1</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4>
<A name="HEADING1">Listing 1: Cohen's example: insertion operators require const parameters</A></h4>


<pre>
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;set&gt;
#include &lt;iterator&gt;
using namespace std;
#pragma warning(disable: 4786)
     
class foo
{
public:
  foo(int x_=0, int y_=0) : 
    x(x_),y(y_){}
  bool 
  operator&lt; (const foo&amp; rhs) const
  {return ((x==rhs.x) ? 
     (y &lt; rhs.y) : (x &lt; rhs.x));}
private:
  int x;
  int y;
     
  //this won't compile when used 
  //with an ostream iterator: 
  //friend ostream&amp; operator &lt;&lt; 
  //  (ostream&amp; os, foo&amp; f) 
  //{return os &lt;&lt; f.x &lt;&lt; " " &lt;&lt; 
  //  f.y &lt;&lt; " ";}
     
  // this is okay:
  friend ostream&amp; operator &lt;&lt; 
    (ostream&amp; os, const foo&amp; f);
  {return os &lt;&lt; f.x &lt;&lt; " " &lt;&lt; 
    f.y &lt;&lt; " ";}
};
     
typedef set&lt;foo&gt; fooSet;
     
void main()
{
  fooSet foos;
  for (int i=0; i &lt; 10; i++)
    foos.insert(foo(i,i+1));
  ostream_iterator&lt;foo&gt; 
  outFoo(cout);
  // this line won't compile unless 
  // the insertion operator takes a 
  // const foo&amp;
  copy(foos.begin(), foos.end(),  
    outFoo);
}
//End of File
</pre>
</body></html>
