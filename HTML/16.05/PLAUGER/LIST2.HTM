


<HTML><HEAD>

<TITLE>May 1998/Standard C/C++/Listing 2</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4>
<A name="HEADING1">Listing 2: Partial implementation of money_get</A></h4>


<pre>
        // TEMPLATE CLASS money_get
template&lt;class _E,
    class _II = istreambuf_iterator&lt;_E, char_traits&lt;_E&gt; &gt; &gt;
    class money_get : public locale::facet {
    typedef moneypunct&lt;_E, false&gt; _Mypunct0;
    typedef moneypunct&lt;_E, true&gt; _Mypunct1;
public:
    typedef _E char_type;
    typedef _II iter_type;
    typedef basic_string&lt;_E, char_traits&lt;_E&gt;, allocator&lt;_E&gt; &gt;
        string_type;
    _II get(_II _F, _II _L, bool _Intl, ios_base&amp; _X,
        ios_base::iostate&amp; _St, long double&amp; _V) const
        {return (do_get(_F, _L, _Intl, _X, _St, _V)); }
    _II get(_II _F, _II _L, bool _Intl, ios_base&amp; _X,
        ios_base::iostate&amp; _St, string_type&amp; _D) const
        {return (do_get(_F, _L, _Intl, _X, _St, _D)); }
    static locale::id id;
    explicit money_get(size_t _R = 0);
protected:
    virtual ~money_get();
    virtual _II do_get(_II _F, _II _L, bool _Intl, ios_base&amp; _X,
        ios_base::iostate&amp; _St, long double&amp; _V) const
        {string_type _Str = _Getmfld(_F, _L, _Intl, _X);
        if (_F == _L)
            _St |= ios_base::eofbit;
        if (_Str.size() == 0)
            _St |= ios_base::failbit;
        else
            {string _Str2;
            _Str2.reserve(_Str.size());
            for (size_t _I = 0; _I &lt; _Str.size(); ++_I)
                _Str2 += _NARROW(_E, _Str[_I]);
            const char *_Eb = _Str2.c_str();
            char *_Ep;
            errno = 0;
            const long double _Ans = _Stold(_Eb, &amp;_Ep, 0);
            if (_Ep == _Eb || errno != 0)
                _St |= ios_base::failbit;
            else
                _V = _Ans; }
        return (_F); }
    virtual _II do_get(_II _F, _II _L, bool _Intl, ios_base&amp; _X,
        ios_base::iostate&amp; _St, string_type&amp; _D) const
        {string_type _Str = _Getmfld(_F, _L, _Intl, _X);
        if (_F == _L)
            _St |= ios_base::eofbit;
        if (_Str.size() == 0)
            _St |= ios_base::failbit;
        else
            _D = _Str;
        return (_F); }
private:
    string_type _Getmfld(_II&amp; _F, _II&amp; _L, bool _Intl,
        ios_base&amp; _X) const
        {const _Mpunct&lt;_E&gt; *_Pfac;
        if (_Intl)
            _Pfac = &amp;_USE(_X.getloc(), _Mypunct1);
        else
            _Pfac = &amp;_USE(_X.getloc(), _Mypunct0);
        const ctype&lt;_E&gt;&amp; _Fac2 = _USE(_X.getloc(), ctype&lt;_E&gt;);
        bool _Bad = false, _Neg = false;
        string_type _Sg, _Str;
        const money_base::pattern _Pat = _Pfac-&gt;neg_format();
        for (size_t _N = 0; !_Bad &amp;&amp; _N &lt; 4; ++_N)
            switch (_Pat.field[_N])
        {case money_base::symbol:
            {string_type _Cs = _Pfac-&gt;curr_symbol();
            string_type::const_iterator _S;
            if (_X.flags() &amp; ios_base::showbase)
                ;
            else if (_N == 3 &amp;&amp; _Sg.size() == 0
                || _F == _L || *_F != *_Cs.c_str())
                _Cs.erase();
            for (_S = _Cs.begin(); _F != _L &amp;&amp; _S != _Cs.end()
                &amp;&amp; *_F == *_S; ++_S, ++_F)
                ;
            if (_S != _Cs.end())
                _Bad = true; }
            break;
        case money_base::sign:
            {if (_F == _L)
                ;
            else if (0 &lt; (_Pfac-&gt;positive_sign()).size()
                &amp;&amp; _Pfac-&gt;positive_sign()[0] == *_F)
                ++_F, _Sg = _Pfac-&gt;positive_sign();
            else if (0 &lt; (_Pfac-&gt;negative_sign()).size()
                &amp;&amp; _Pfac-&gt;negative_sign()[0] == *_F)
                ++_F, _Sg = _Pfac-&gt;negative_sign(), _Neg = true;
            if (_Sg.size() == 1)
                _Sg.erase(); }
            break;
        case money_base::value:
            {int _Nfd = 0;
            int _Fd = _Pfac-&gt;frac_digits();
</pre>
<p>
           const string _Gr = _Pfac-&gt;grouping();</u></b></p>

<pre>
            if (*_Gr.c_str() &lt;= '\0')
                while (_F != _L
                    &amp;&amp; _Fac2.is(ctype_base::digit, *_F))
                    _Str += *_F++;
            else
                {const _E _Ks = _Pfac-&gt;thousands_sep();
                string _Grin((size_t)1, '\0');
                size_t _I = 0;
                for (; _F != _L; ++_F)
                    if (_Fac2.is(ctype_base::digit, *_F))
                        {_Str += *_F;
                        if (_Grin[_I] != CHAR_MAX)
                            ++_Grin[_I]; }
                    else if (_Grin[_I] == '\0' || *_F != _Ks)
                        break;
                    else
                        _Grin.append((size_t)1, '\0'), ++_I;
                if (_I == 0)
                    ;
                else if ('\0' &lt; _Grin[_I])
                    ++_I;
                else
                    _Bad = true;
                for (const char *_Pg = _Gr.c_str();
                    !_Bad &amp;&amp; 0 &lt; _I; --_I)
                    if (*_Pg == CHAR_MAX)
                        break;
                    else if (0 &lt; --_I &amp;&amp; *_Pg != _Grin[_I]
                        || 0 == _I &amp;&amp; *_Pg &lt; _Grin[_I])
                        _Bad = true;
                    else if ('\0' &lt; _Pg[1])
                        ++_Pg;
                if (_Bad)
                    break; }
            if (_F != _L &amp;&amp; *_F == _Pfac-&gt;decimal_point())
                {while (++_F != _L
                    &amp;&amp; _Fac2.is(ctype_base::digit, *_F))
                    if (_Nfd &lt; _Fd)
                        _Str += *_F, ++_Nfd; }
            if (_Str.size() == 0)
                _Bad = true;
            else
                for (; _Nfd &lt; _Fd; ++_Nfd)
                    _Str += _WIDEN(_E, '0'); }
            break;
        default:
            {if (_N == 3)
                break;
            while (_F != _L &amp;&amp; _Fac2.is(ctype_base::space, *_F))
                ++_F; }}
        if (!_Bad &amp;&amp; 0 &lt; _Sg.size())
            {string_type::const_iterator _S;
            for (_S = _Sg.begin(); _F != _L
                &amp;&amp; ++_S != _Sg.end() &amp;&amp; *_F == *_S; ++_F)
                ;
            if (_S != _Sg.end())
                _Bad = true; }
        if (_Bad)
            _Str.erase();
        else if (_Neg)
            _Str.insert((size_t)0, (size_t)1, _WIDEN(_E, '-'));
        return (_Str); }
    };
template&lt;class _E, class _II&gt;
    locale::id money_get&lt;_E, _II&gt;::id;
//End of File
</pre>
</body></html>
