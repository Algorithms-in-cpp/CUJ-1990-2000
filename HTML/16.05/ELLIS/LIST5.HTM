


<HTML><HEAD>

<TITLE>May 1998/A Regular Expression Class Library/Listing 5</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4>
<A name="HEADING1">Listing 5: Class FiniteAutomaton definition</A></h4>


<pre>
#ifndef _FINAUTO_H_
#define _FINAUTO_H_
     
#include "faquery.h"
     
// Use of the envelope/letter idiom -- methods overridden by this 
// class are implemented by delegating to the letter class. 
class FiniteAutomaton : protected CFAQuery
{
public:
   FiniteAutomaton(CFAQuery&amp;);
   virtual ~FiniteAutomaton() {;}
   // Debug method
   void Dump(ostream &amp;out);
     
  //methods overridden from base class. 
  virtual bool 
  ToStatesForEvent(int i_from, char i_oninput, CIntSet&amp; o_toset);
  virtual int GetAcceptState(); 
     
private:
  CFAQuery *pFaQuery;
};
     
// the AutomatonState class acts as an iterator for tracking 
// the state in input matching functions.
class AutomatonState
{
   friend class FiniteAutomaton;
     
public:
   virtual ~AutomatonState();
     
   AutomatonState(FiniteAutomaton *parent, int startState);
     
   // Users are allowed to copy and assign iterators, though
   AutomatonState(const AutomatonState &amp;src); 
   AutomatonState &amp;operator=(const AutomatonState &amp;src);
     
   virtual bool IsAccept();
   virtual bool IsValid();
     
   // Accepts an event and uses the state machine to move onto the 
   // next state Returns true if the state is non-terminal, ie not 
   // accept, and valid.
   virtual bool NextState(char event);
     
   // Debug method
   void Dump(ostream &amp;out);
     
private:
     
   FiniteAutomaton *parent;
   // current state is a set of states in a 
   // non-deterministic automaton
   CIntSet currentState;
     
   // Helper method to do the non-deterministic transitions
   void PerformTransitionSet(char event); 
   void 
   TraverseEvents(CIntSet &amp;source, CIntSet &amp;target, char event);
};
     
#endif   // _FINAUTO_H_
     
//End of File
</pre>
</body></html>
