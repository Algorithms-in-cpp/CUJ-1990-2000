


<HTML><HEAD>

<TITLE>May 1998/A Regular Expression Class Library/Sidebar</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<font color="#8000000">
<H2 ALIGN="center"><FONT COLOR="#800000">Regular Expressions</FONT></H2></font>
<hr>
<BLOCKQUOTE>
<p>Building
a finite automaton to represent a regular expression amounts to parsing the
regular expression and constructing a directed graph that describes the order
in which characters are to occur.<p>
Constructing this graph requires the regular expression parser to recognize the
elements of a regular expression, create graph fragments for these elements,
and attach these fragments to the automaton graph in the proper place. The
algorithm used is described in the first "Dragon Book" <a href="ellis.htm#2">[2]</a>.<p>
The implementation described in the article handles the following set of
regular expression syntax:</p>
<UL><LI>wildcards: ? (for any character), + (for one or more of something), *
        (for zero or more of something)</LI>
    <LI>sets of characters: characters enclosed in square brackets will be treated
        as an option set, although character ranges have not been implemented. That is,
        [abc] is valid, [a-c] is not.</LI>
    <LI>logical OR: subexpressions may be ORed together.</LI>
    <LI>parenthesized subexpressions: a regular expression may be enclosed within
        parentheses and will be treated as a unit.</LI>
    <LI>escape characters: sequences such as \t, \n, etc. will be substituted for an
        equivalent single character. \\ represents the backslash.</LI>
</UL>
<p>The regular expression elements are:</p>
<UL><LI>subexpressions: either a single character (including escape characters),
        or a set of characters (enclosed between square brackets), or a parenthesized
        regular expression</LI>
    <LI>wildcard characters: to modify a subexpression's meaning</LI>
    <LI>logical operators: these are used to control how a subexpression graph is
        connected to the parent automaton graph. The OR operator | is the only explicit
        logical operator recognized, but any sequence of subexpressions is connected by
        an implicit AND operator.</LI>
</UL>
<p>A subexpression is represented by a start node, an end node, and one or more
transitions between the nodes for each character event. Each subexpression
graph is contained between a pair of outer nodes and empty transitions. These
outer nodes are referred to as the outer start and end nodes.<p>
Although these outer nodes introduce unnecessary transitions into simple
expression graphs, they are needed to prevent ambiguity in the interpretation
of more complex expressions involving wildcards adjacent to the OR operator.
Without these outer nodes, an expression like a*|b might be misinterpreted as
(a|b)* when it should be treated as (a*)|b.<p>
Using these outer nodes also allows the conversion to be performed in one pass
of the regular expression.<p>
Subexpressions joined by logical operators are connected to the parent graph
through their outer nodes with empty transitions. For two subexpressions ANDed
together, an empty transition is inserted between the outer end node of the
first subexpression and the outer start node of the second (<A href="fig1a.htm">Figure 1a</a>)
. Two
subexpressions joined by an OR have their outer start and end nodes connected
to each other using empty transitions (<A href="fig1b.htm">Figure 1b</a>)
.<p>
Applying a wildcard character to a subexpression adds empty transitions (i.e.,
transitions without an event) between the inner start and end nodes. For the
"any character" wildcard ?, an empty transition is inserted from the inner
start to inner end node; for the "one or more" character +, an empty
transition is added from the end to the start; for the "zero or more"
character *, empty transitions are added from the end to the start and from the
start to the end (<A href="fig1c.htm">Figures 1c</a>,
 <A href="fig1d.htm">1d</a>,
 <A href="fig1e.htm">1e</a>)
.<p>
A complete example of a finite automaton graph derived from a regular
expression is shown in <A href="fig2.htm">Figure 2</a>
(the initial and terminal nodes are filled in). o
</p></BLOCKQUOTE>
</body></html>
