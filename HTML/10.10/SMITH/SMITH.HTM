


<HTML>
<HEAD>

<TITLE>October 1992/Debugging with Macro Wrappers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tococt.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Debugging</FONT></H2>

<hr><h2 align="center"><font color="#800000">Debugging with Macro Wrappers<A name="01F0_00F2"><A name="01F0_00F2"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="01F0_0000"><A name="01F0_0000">William Smith</font></h3><hr><blockquote><P>
<P><i><A name="01F0_0000"><A name="01F0_0000">William Smith is the engineering manager at Montana Software, a software development company specializing in custom applications for MS-DOS and Windows. You may contact him by mail at P.O. Box 663, Bozeman, MT 59771-0663.</i></P><P>
Identification and localization of software bugs are the hardest parts of the debugging process. Testing your code can show the presence of bugs but cannot guarantee the absence of bugs. Embedding debugging code in your program is a good way to expose bugs that may not appear during testing. Once you identify a bug, you must localize it by finding the offending lines of code that are causing the problem. One way to help localize bugs is to use the <I>__FILE__</I> and <I>__LINE__</I> macros that the ANSI standard defines. The <I>__FILE__</I> macro expands to a string constant containing the name of the current source file. The <I>__LINE__</I> macro expands to an integer constant containing the current line in the source file.<P>
Using these macros inside debugging macro wrappers for functions and C keywords can help pin down the whereabouts of elusive bugs. Macros have another advantage. Using conditional compilation, they make it easy to either incorporate or remove the debugging code from a program without any modification to the program. Using macro wrappers for functions is straightforward and a common practice. Macro wrappers for C keywords such as <I>return</I> and <I>default</I> is novel and not as well known. I am going to show you how to create and use debugging macros for both C keywords and standard library functions. These macros can help pin down the exact location of problems in your code.<P>
<h4><FONT COLOR="#000080"><A name="01F0_00F3">Recursive Macro Wrappers<A name="01F0_00F3"></FONT></h4></P>
The first challenge is to get the <I>__FILE__</I> and <I>__LINE__</I> macros embedded into your code without having to make significant changes to your existing code. Using recursive macros is a solution. A recursive macro is a macro that contains the name of the macro in the macro definition. You can do this for macro names that expand to C keywords or functions. By taking advantage of this, you can create macros with the same names as functions or C keywords that already exist in your code. This allows you to incorporate debugging features into your code without having to modify the code. At most, you may have to add an #<I>include</I> statement to your program to incorporate the macro definitions.<P>
Recursive macros also provide for easy removal of debugging statements from your code. Since the debugging code can add significant overhead to your program, the ability to remove the debugging statements and create a release version of your program is important.<P>
In general, the debugging statements added with recursive macros check for error conditions and then generate a message with the location of the error identified with the file name and line number. Common error conditions checked for are out-of-range arguments passed to functions and return values of functions that indicate a failure condition.<P>
<h4><FONT COLOR="#000080"><A name="01F0_00F4">Macro for <B><I>return</I></B> Keyword<A name="01F0_00F4"></FONT></h4></P>
It is customary to use the return value from a function to indicate success or failure. It is also a common practice to ignore this value. This is especially true when generating a return value is not the major purpose of the function. Adding code to check for failure conditions every time a function is called can be expensive in terms of space and time. A macro wrapper for the <I>return</I> keyword is a handy way to turn this checking code on and off. Macros allows you to create a debugging version of your program and expose failed conditions. As well as a debugging tool, a macro wrapper for the <I>return</I> keyword also allows for the installation of central error processing.<P>
<A href="list1.htm">Listing 1</a>,
 <I>DBG_RTRN.H</I>, is an include file that defines a macro replacement for the <I>return</I> keyword. This macro inserts code at every return statement. This code checks to see if the return argument is equal to <I>EXIT_FAILURE</I> and sends a message to <I>stderr</I> if this condition is true. Instead of <I>stderr</I>, you could just as well write the message to a file or display a message in a window for programs with an interactive user interface. The standard library include file &lt;<I>stdlib.h</I>&gt; defines the value of <I>EXIT_FAILURE</I>. You may find you use a different value to indicate failure. This macro has the side effect of trapping and displaying messages for possible valid return values that may happen to correspond to <I>EXIT_FAILURE</I>.<P>
Many functions return pointers instead of a return condition code. You may find it useful to trap a null pointer return value as an error code in some situations as opposed to an <I>EXIT_FAILURE</I> return value.<P>
Notice that the <I>return</I> macro in <A href="list1.htm">Listing 1</a>
is a multi-line macro consisting of more than one statement. It is worth noting that the safe way to create multiple statement macros is to enclose the statements in a <I>do-while</I> construct that executes only once. To ensure that the macro executes only once, make sure that the expression in the <I>while</I> statement evaluates to 0, such as <I>while</I> <I>(</I><I>0</I><I>)</I>. Another caveat about the <I>return</I> macro is that it requires you to enclose the return argument in parentheses. Without the parentheses, the macro will not expand.<P>
<h4><FONT COLOR="#000080"><A name="01F0_00F5">Monitoring Available Stack Space<A name="01F0_00F5"></FONT></h4></P>
Macro replacement of the <I>return</I> keyword is in general a handy way to insert code that your program will execute right before control exits the function. A useful example is to insert stack-checking code. For environments where memory is at a premium, you may want to size you stack so that it is not any larger than absolutely necessary. A macro wrapper for the <I>return</I> keyword facilitates the ability to check for the minimum free available stack space in a program.<P>
<A href="list3.htm">Listing 3</a>,
 <I>DBG_STAK.H</I>, contains a macro to do just this. This macro for the <I>return</I> keyword inserts a call to the function <I>check_min_stackavail</I>. This function is in <A href="list2.htm">Listing 2</a>,
 <I>DBG_STAK.C. check_min_stackavail</I> makes a call to the Microsoft C function <I>stackavail</I> and keeps track of the minimum amount of stack available in a static variable, _<I>MinStack-Avail</I>. To check the amount of unused or surplus stack space in your program, run your program, exercise all the features, and then upon exit check this static variable. The function <I>get_min_stackavail</I> in <A href="list2.htm">Listing 2</a>
retrieves this value. The goal is to set the stack size so the value returned by <I>get_min_stackavail</I> is as small as you feel is safe.<P>
<h4><FONT COLOR="#000080"><A name="01F0_00F6">Macro for <B><I>default</I></B> Keyword<A name="01F0_00F6"></FONT></h4></P>
The <I>return</I> keyword is probably the most powerful and useful keyword to replace with a debugging macro. Other keywords such as <I>default, break</I>, and <I>continue</I> can come in handy in specific situations. I have found a general macro wrapper for the <I>default</I> keyword to be a powerful method of exposing elusive bugs.<P>
It may not seem apparent at first how to use the <I>default</I> label for debugging. The <I>default</I> keyword appears inside <I>switch</I> statements. I recommend that every <I>switch</I> statement have a <I>default</I> label. You should use a <I>default</I> label even inside <I>switch</I> constructs that you are sure have individual cases to account for all the expected situations. This is the exact situation where this technique can yield important information. Adding the lines<P>
<pre>default: break;</pre>
to <I>switch</I> statements that appear not to need them usually does not slow down or increase the size of your compiled program. The <I>default</I> keyword in a <I>switch</I> statements allows you to use a debugging macro for the <I>default</I> keyword.<P>
The <I>default</I> macro can trap unexpected conditions. These situations are ones that only arise if memory is corrupt, an array has run over its bounds, a variable is not initialized, or the code behaves in some other way that you did not intend. This technique has helped me identify bugs that did not appear in any other way. It has helped me find memory overwrites, heap corruption problems, and just plain programmerinduced errors. Eventually, these bugs would have surfaced, but not nearly as quickly.<P>
<A href="list4.htm">Listing 4</a>,
 <I>DBG_DFLT.H</I>, is an include file that contains the macro wrapper for the <I>default</I> keyword.<P>
Because of the colon after the <I>default</I> keyword, the macro has to pull a trick. It adds an extra <I>case</I> label. The macro must do this to avoid a dangling-colon syntax error. I use the <I>INT_MIN</I> value for the case. I hate actually inserting code that may modify the intended behavior of a program, but I could not find a better way. I tried creating a unique dummy label using the __<I>LINE__</I> macro and the token-pasting preprocessor operator (##). I found, however, that this trick only worked on an older version of a popular compiler. The ANSI Standard says the pasting takes place before the expansion of the macro token. Most compilers pride themselves in strict conformance to the Standard.<P>
You will probably have to resort to inserting an extra <I>case</I> label. If you know of another way to create a macro wrapper for the <I>default</I> keyword without resorting to modifying your original code, let me know. Or if you know of a way to create a unique label name at compile time, let me know.<P>
<h4><FONT COLOR="#000080"><A name="01F0_00F7">Macro Wrappers for Functions<A name="01F0_00F7"></FONT></h4></P>
Nearly every Standard C library function is a potential candidate for wrapping with debugging code. The debugging code can check for appropriate ranges of the arguments passed to the function. Obviously, I cannot list possible macros for them all. A particularly sensitive set of functions are the math functions. I also find localizing errors generated by the math functions difficult. The built-in <I>matherr</I> debugging function will trap errors and generate an error message, but you cannot use <I>matherr</I> to indicate where in your program the error came from. [And <I>matherr</I> is not in the Standard C library. &#151; pjp]<P>
By encapsulating the math functions in macros, you can incorporate debugging instrumentation. I have found the flexibility and power of this method superior to using <I>matherr</I>. The main advantage to the macro method is that, by using the __<I>FILE__</I> and __<I>LINE__</I> macros, it exposes the location in the source code where the offending function call occurred.<P>
<A href="list5.htm">Listing 5</a>,
 <I>DBG_MATH.H</I>, contains macros for five different math functions. Let these macros inspire you to come up with your own for situations that are most troubling for you. I also use macro wrappers to check for null pointer arguments. Some of the string functions and I/O stream functions are sensitive to null pointers as arguments.<P>
<h4><FONT COLOR="#000080"><A name="01F0_00F8">An Example<A name="01F0_00F8"></FONT></h4></P>
The following code is a program that demonstrates the macros in <A href="list1.htm">Listing 1</a>,
 <A href="list4.htm">Listing 4</a>,
 and <A href="list5.htm">Listing 5</a>.
 If you define the macro <I>NDEBUG</I>, debugging macro replacement does not occur.<P>
<pre>#include &lt;float.h&gt;
#include &lt;limits.h&gt;
#include &lt;math.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

#include &lt;dbg_rtrn.h&gt;
#include &lt;dbg_math.h&gt;
#include &lt;dbg_dflt.h&gt;

int main( void )
     {
     acos( -2.0 );
     asin( 2.0 );
     log( 0.0 );
     log10( -1.0 );
     sqrt( -1.0 );
     switch( 2 )
          {
          default:
               break;
          case 1:
               break;
          }
     return ( EXIT_FAILURE );
     }</pre>
The __<I>FILE__</I> macro upon expansion can take up a lot of space if the compiler doesn't merge identical string literals. You may want to create a static variable with single-module scope that contains the file name and use this in place of the __<I>FILE</I>__ macro. This is especially true if the debugging code ends up inserting the __<I>FILE__</I> macro in many places in your code. Adding a definition like the following in you code and making the necessary changes to the debugging macros that use __<I>FILE__</I> can help if your compiler limits the amount of data space your program can have.<P>
<pre>static char _FileName[] = __FILE__;</pre>
<h4><FONT COLOR="#000080"><A name="01F0_00F9">Conclusions<A name="01F0_00F9"></FONT></h4></P>
Debugging is a form of problem solving that requires a creative touch. The first step is to identify the problem. The next step is to localize it. Debugging macros wrappers for C keywords and functions help with both steps. Once you have identified and localized a problem, the solution usually follows quickly. The macros presented here are a collection of novel and useful techniques to aid the debugging process.<P>

<h4><a href="../../../source/1992/oct92/smith.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
