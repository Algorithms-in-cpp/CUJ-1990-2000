


<HTML>
<HEAD>

<TITLE>October 1992/Using OOP Techniques Instead of switch in C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tococt.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">Using OOP Techniques Instead of switch in C++<A name="022A_00FC"><A name="022A_00FC"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="022A_0000"><A name="022A_0000">Michael Wiebel and Steve Halladay</font></h3><hr><blockquote><P>
<P><i><A name="022A_0000"><A name="022A_0000">Michael Wiebel is a computer scientist applying object oriented programming techniques to the study of advanced architectures for StorageTek. He has written articles on advanced programming issues for several technical publications. Michael has a B.S. in computer science from Colorado State University. He can be reached at (303) 673-7082.</i></P><P>
<P><i>Steve Halladay currently works for StorageTek in Louisville, CO. He has over 10 years experience developing products like CSIM and Multi-C in C and C++. Steve received his MS in Computer Science in 1982 from Brigham Young University. You can reach Steve at Storage Tek (303) 673-6683.</i></P><P>
In 1968 Edsger W. Dijkstra ushered in the structured-programming era with his letter to the editor detailing the dangers of the <I>goto</I> statement. Now C++ programmers need to beware of a statement they have grown accustomed to using in C &#151; the <I>switch</I> statement. Usually, the <I>switch</I> statement in an object-oriented program causes the program to be more susceptible to bugs and less maintainable. C++ programmers should avoid the <I>switch</I> statement and learn how to apply inheritance and dynamic binding to make their programs more flexible, maintainable, and reliable. In this article, we will discuss the failings of the <I>switch</I> statement when used in C++ and we will present the concepts a C++ programmer needs to exploit the full power of C++.<P>
<h4><FONT COLOR="#000080"><A name="022A_00FD">Sample Code<A name="022A_00FD"></FONT></h4></P>
Most C programmers are familiar with the kind of code presented in <A href="list1.htm">Listing 1</a>.
 <A href="list1.htm">Listing 1</a>
is the header file for a new game program. The game currently has four types of playing pieces encapsulated by the enumerated type <I>GAME_PIECE</I>: pawns, bishops, rooks, and kings. The variable <I>piece_type</I> (defined to be of type <I>GAME_PIECE</I>) in the <I>struct PIECE_STRUCT</I> is a discriminating record. C Programmers typically use discriminating records to identify the enumerated type value represented by a <I>struct</I>. In our program, <I>piece_type</I> will identify the kind of game piece represented by a variable of type <I>PIECE</I>.<P>
<A href="list2.htm">Listing 2</a>
contains a portion of C code that performs a move operation based on the type of game piece identified by the discriminating record <I>piece_type</I>. The <I>switch</I> statement in the function <I>piece_move</I> determines what kind of game piece the calling function passes and calls the appropriate move routine. Many functions that perform operations based on the value of the discriminating record may be scattered throughout the code of a large program.<P>
<h4><FONT COLOR="#000080"><A name="022A_00FE">Cost of Maintaining Code<A name="022A_00FE"></FONT></h4></P>
Maintaining and extending programs like this one can be extremely costly and painful. For proof of this, consider extending the game program to include a new playing piece called <I>queen</I>. The identifier <I>QUEEN</I> must be added to the enumerated type <I>GAME_PIECE</I>. A new <I>struct</I> must be added to the union <I>MOVE_U</I>. The program needs a function that moves the <I>queen</I> playing piece. But the costliest changes are those to the existing code. Each <I>switch</I> statement that operates on the discriminating record must be located and modified to include the new game piece.<P>
Making changes to existing (and presumably working) code is like opening a door and letting the bugs crawl in. Bugs introduced in this way are expensive to find because isolating the defective code will take time. If we only add code to the program then the bugs must be in the new code. Since changes are made in the old code the scope of the search must include all code modules added or changed. In a large program requiring the modification of many functions across several files debugging is excruciatingly painful.<P>
<h4><FONT COLOR="#000080"><A name="022A_00FF">Advantages of OOP<A name="022A_00FF"></FONT></h4></P>
Object-oriented programming (OOP) makes the tasks of maintaining and extending the functionality of programs easier. OOP languages support the concepts of data abstraction or encapsulation, inheritance, and polymorphism. The resulting code is more flexible and easier to maintain.<P>
Abstraction lets OOP programmer's encapsulate data and operations to form abstract data types, or types. The keyword <I>class</I> in C++ supports this concept. <A href="list3.htm">Listing 3</a>
shows one possible application of abstraction in the game program. This listing replaces the <I>struct PIECE_STRUCT</I> with a class piece and uses the keyword <I>private</I> to hide the data from other classes. Creating a game-piece object is as simple as declaring a variable of type <I>PIECE_CLASS</I> such as:<P>
<pre>// an object is an instance of a class.
PIECE_CLASS     pawn;</pre>
What have we gained by taking advantage of encapsulation? Restricting access to the data limits the scope of a debugging session to only those functions that have access to the data in error. Because the discriminating record still exists we have not eliminated the costs of modifying and maintaining the program. The first step to removing the cumbersome discriminating record is to apply the principles of inheritance.<P>
<h4><FONT COLOR="#000080"><A name="022A_0100">Inheritance<A name="022A_0100"></FONT></h4></P>
Inheritance is the concept that allows OOP programmers to reuse and extend existing (and presumably bug-free) classes. Thus inheritance improves the reliability of programs and reduces program development time. C++ programmers inherit classes by placing a colon after the class name followed by the name of the class they wish to inherit. In the following example, class <I>B</I> inherits from a class named <I>A</I>:<P>
<pre>class B : A
{
    /* class B declaration body */
};</pre>
Class <I>B</I> is a derived class because it inherits from the class <I>A</I>. Class <I>A</I> is a base class. Programmers create base classes when they notice that types have features in common. One way of locating base classes is to explore <I>kinds of</I> relationships. In our game program, pawns, bishops, rooks, and kings are all <I>kinds of</I> game pieces. Therefore we should create a base class (<I>game_piece</I>) and derive each individual game piece from this base class. <A href="list4.htm">Listing 4</a>
shows the new game program header file.<P>
The discriminating record is no longer included in any of the class declarations. Objects are declared to be of a specific type of game piece. Each derived class inherits the public member functions and public member variables of the class <I>game_piece</I>. Derived classes cannot access base class private data directly; they must use the public interfaces. To create a <I>king</I> game piece declare a variable of type <I>king</I> such as<P>
<pre>    king player1_king;</pre>
<A href="list4.htm">Listing 4</a>
uses the keyword <I>virtual</I> before the base class functions <I>position</I> and <I>move</I>. This signals the compiler that the function may be declared in a derived class. Virtual functions are commonly used in defining abstract base classes &#151; classes that do not provide implementations for member functions but do provide a common interface for a group of classes.<P>
<h4><FONT COLOR="#000080"><A name="022A_0101">Polymorphism<A name="022A_0101"></FONT></h4></P>
Each derived class has its own implementation of the functions <I>move</I> and <I>position</I>. The <I>pawn</I> class <I>move</I> function may only move the <I>pawn</I> game piece one space vertically, while the <I>bishop</I> class <I>move</I> function may only move the bishop game piece diagonally. Different implementations of functions with the same name is an example of polymorphism. The code fragment<P>
<pre>    // move a pawn
    plyr1_pawn.move ();
    // move a bishop
    plyr2_bishop.move();</pre>
will first move the object <I>plyr1_pawn</I> using the implementation of <I>move</I> declared in the class <I>pawn</I>. The object <I>plyr2_bishop</I> moves using the implementation of the <I>move</I> function declared in the class <I>bishop</I>.<P>
<h4><FONT COLOR="#000080"><A name="022A_0102">Dynamic Binding<A name="022A_0102"></FONT></h4></P>
The previous code fragment is also an example of <I>static binding</I>. It is static because the compiler can determine the type of object and the virtual function to call at compile time. When the compiler cannot determine the type of object at compile time, the code exhibits dynamic binding. To use <I>dynamic binding</I> in C++, refer to an object of a derived class by using a pointer to the base class. In the game program a pointer to the base class would be a pointer to <I>game_piece</I>:<P>
<pre>    game_piece *gamep;</pre>
From a code fragment such as<P>
<pre>    gamep-&gt;move ();</pre>
it is not possible to determine the type of object until runtime.<P>
Rewriting the function <I>piece_move</I> to take advantage of polymorphism and dynamic binding yields a one line function<P>
<pre>    void piece_move (game_piece *gp)
    {
     gp-&gt;move ();
    }</pre>
Ideally, the derived classes and the code implementing their member functions will be in separate <I>.</I><I>h</I> and <I>.</I><I>cpp</I> files. To add a new piece called <I>queen</I> all we have to do is create a new header file specifying the <I>queen</I> class (that we can derive from <I>game_piece</I>) and create a new <I>.</I><I>cpp</I> file with the member function implementation code. We do not have to modify existing code and risk the possibility of introducing bugs into the program. There are no <I>switch</I> statements to hunt down and modify. We have improved the maintainability, extensibility, and reliability of the game program by applying the principles of object-oriented programming and C++.<P>
C++ is a powerful language. It combines the power of C with the promise of object-oriented programming. The principles of OOP help programmers create programs that are more reliable, maintainable, and extendable than programs developed using other methods. C++ is not an easy language to master; neither is C. But the benefits of C++ and object-oriented programming make it worth the effort.<P>
<h4>Sidebar: <a href="sidebar1.htm">When to Use the <I>switch</I> Statement</a></h4>

<h4><a href="../../../source/1992/oct92/weibel.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
