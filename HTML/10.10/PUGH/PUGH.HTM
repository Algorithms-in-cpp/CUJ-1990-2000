


<HTML>
<HEAD>

<TITLE>October 1992/Q & A</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tococt.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Q &amp; A<A name="0234_0106"><A name="0234_0106"></font></h2><P>
<h3 align="center"><A name="0234_0000"><A name="0234_0000">Linked-List Functions</h3><P>
<h3 align="center"><font color="#800000">Ken Pugh</font></h3><hr><blockquote><P>
<P><i><A name="0234_0000"><A name="0234_0000">Kenneth Pugh, a principal in Pugh-Killeen Associates, teaches C language courses for corporations. He is the author of C Language for Programmers and All On C, and was a member on the ANSI C committee. He also does custom C progrmaming for communications, graphics, image databases, and hypertext. His address is 4201 University Dr., Suite 102, Durham, NC 27707. You may fax questions for Ken to (919) 489-5239. Ken also receives email at kpugh@dukemvs.ac.duke.edu (Internet).<I></I></i></P><P>
<B>Q</B><P>
At the moment I am writing a fairly large program using more than one linked list. What I would like to know is whether it is possible to write just one single Store-Function for the different linked lists using a <I>void</I> pointer. I use Microsoft's QuickC, and I know that the <I>realloc</I> function for example takes a <I>void</I> pointer as an argument just like I would like my Store-Function to, but I just can't get it to work.<P>
Thomas Dalgaard<br>
Dumfries, VA<P>
<B>A</B><P>
It is possible to write a single set of linked lists functions that work on multiple data types. There are two ways to do this in Standard C, plus an additional way that can be coded in Microsoft C. Each link can simply point to the data for that link or each link can contain the data.<P>
In the first method, the links looks like<P>
<pre>struct s_link
    {
    struct s_link * next_link;
    void * pointer_to_data;
    };</pre>
To store a value in the list, you pass a pointer to the data. The function would appear something like <A href="list1.htm">Listing 1</a>.
<P>
Notice that the size of the data being pointed to is not passed. It is the responsibility of the calling program to keep the address of the data valid until the link is removed from the list or the list destroyed. To concentrate on the area of interest, error handling and setting the link address are not shown.<P>
With the second alternative you allocate enough storage for the data. The function could look something like <A href="list2.htm">Listing 2</a>.
<P>
With this version, the calling program can then destroy the item whose address was passed.<P>
Microsoft allows an unsized or zero-sized array as the last member of a structure. The link could look like<P>
<pre>struct s_link
    {
    struct s_link *next_link;
    char data[];
    };</pre>
The corresponding function would appear as in <A href="list3.htm">Listing 3</a>.
<P>
The allocation for the link includes the size of the item. This Microsoft feature eliminates one level of indirection when accessing the data. In this context, the accessing will be hidden from the user. However, in other applications that have a number of records that contain variable length data, it can simplify the appearance of your code.<P>
<B>Q</B><P>
I just started reading about C++. I noticed a function prototype that read <I>int foo(int &amp;);</I>. Is the function expecting an address?<P>
Leslie Schroft<br>
New York, NY<P>
<B>A</B><P>
The prototype specifies that the parameter will be passed by reference. This reference declaration is a useful one that might be added one day to ANSI C. A reference variable works like a pointer with some additional considerations. It contains an address, but it does not need the dereferencing operator (*) to access the value at that address. It must be initialized at the time of declaration of the variable and its value cannot change.<P>
Let's take a simple case<P>
<pre>int i, j;
int * pointer_to_int;
int &amp; reference_to_i = i;</pre>
With <I>pointer_to_int,</I> you can set it either in the declaration or in an assignment<P>
<pre>pointer_to_int = &amp;i;
/* Sets i to 0 */
* pointer_to_int = 0;
pointer_to_int = &amp;j;
/* Sets j to 0 */
* pointer_to_int = 0;</pre>
The reference variable must be initialized. In fact many compilers will complain if it is not. If it is the parameter for a function, it will be initialized when the function is called by the address of the argument (or a copy of its value) in the calling program.<P>
When using the reference variable in the executable part, any assignments to it alter the value of the referred variable.<P>
<pre>/* Assigns value of j to i */
reference_to_i = j;
/* Sets i to 0 */
reference_to_i = 0;</pre>
Notice that the initialization syntax for reference variables does not include the address symbol (<I>&amp;</I>). The compiler implicitly uses the address. When the reference variable is used in an expression, the compiler implicitly uses the indirection operator.<P>
The power of the reference declaration comes into play when it is the parameter of a function. The argument which is passed is not passed by value, but by reference. The user of the function does not have to make any changes in the calling program to use a call by reference. The compiler, seeing a function prototype which declares the parameter with the <I>&amp;</I> symbol, passes the address rather than the value.<P>
Let's take a look at the alternatives for passing parameters. <A href="list4.htm">Listing 4</a>
shows the code for passing the address. <A href="list5.htm">Listing 5</a>
is an example of passing by reference.<P>
You can change the value of a variable passed by reference simply by assigning it a value, For <A href="list5.htm">Listing 5</a>,
 you would simply write <I>input_value = 5;.</I> If you do not change the variable in the function, it is considered proper if you declare the parameter as <I>const int &amp; input_value.</I><P>
There is an interesting stylistic dispute as to whether you should declare a parameter whose value is going to be changed as a reference or as a pointer. In the former case, the users do not have to put the address operator on the arguments. In the latter case, they do.<P>
One advantage of the address operator is that it is more apparent to the user that the argument is going to be altered. My altered rule is that if the function name suggests that the parameter is to be changed, that a reference parameter may be preferable. If it does not, then a pointer type parameter should be used.<P>
One advantage of using reference parameters over pointer parameters comes with <I>struct</I>s and classes. If the parameter is a reference, then the plain member-of (.) operator is used to reference the members. This can make the code appear simpler and still be faster than passing the structure by value. All it takes is a change in the function header and the prototype. (See <A href="list6.htm">Listing 6</a>.
)<P>
<h4><FONT COLOR="#000080"><A name="0234_0107">Fixed Field Files<A name="0234_0107"></FONT></h4></P>
It's been a while since I've written, but I can't resist tossing out a few comments in response to Tom Crosman's letter and your reply in the April 1992 CUJ. Tom's letter concerned the processing of mostly fixed-field files. His question concerned loading a structure with data from the file.<P>
His own solution read a record to an input buffer, then counted and copied bytes into a structure. Your example was more complete. You used <I>fgets</I> to read data into a <I>char</I> buffer, and then followed Tom's example, counting and copying bytes. I was surprised that you didn't use <I>fread</I> to load the data directly into the structure!<P>
There is a little monkey wrench here, perhaps. Tom's existing data was created using PL/I and (judging by the code he provides) the data is stored without a null-terminating byte. Adding a null-terminating byte to each member of the C structure makes the structure grow larger than a record in the file. Destination addresses no longer line up properly with source addresses, and the data does not fall into place. However, your example offers a simple solution to this problem. You use the precision specifier with the <I>printf</I> function to extract just the right number of bytes from the buffer. You demonstrate that null-terminating bytes are not needed in the structure, if absent from the datafile.<P>
Your example also uses a flag to indicate whether or not the datafile contains null-terminators. Perhaps you provided this flag variable in response to Tom's need for a "very generic" solution. However, I feel that the null-terminator flag added complexity to an otherwise simple solution. Because of this flag, an additional parameter must be passed from <I>main</I> to each of your other functions. Moreover, each of these other functions must now handle two cases rather than one. To my mind, a function that does two things is more than twice as complex as a single-purpose function. As you note, "At some point the work of providing and using a generic interface exceeds the benefit."<P>
I'd like to go into this trade-off a little more. Given a datafile to be accessed, you declare a structure template that corresponds to the file format. Then you create a corresponding array of field sizes. You keep the declaration of this array of sizes "close to the structure template. Any changes in the order or size of the fields can be simply coordinated." So far, so good. Then you note, "you could add an array of field addresses to the calls. If that is necessary, I might suggest not using a generic function." So the system that supports field names and sizes breaks down when a third element (addresses) is added.<P>
The enclosed code (<A href="list7.htm">Listing 7</a>)
 presents a solution that avoids such a trade-off. My code uses a technique which permits all of the datafile-specific elements to be moved out of the source code, and into a separate include file that I call the <I>FILE_FORMAT</I>. This new include file contains (only) all of the information specific to the particular datafile that is to be accessed. This makes it easy to assure that the file structure is correctly described. Futhermore, different <I>FILE_FORMAT</I>s may be created to describe different datafiles. To access a particular datafile, simply specify the desired <I>FILE_FORMAT</I> in the C source.<P>
My code is based on Robert White's technique for list alignment, presented in the "C Programming" column of <I>Dr. Dobbs Journal</I>, October 1990. The technique was also discussed in your column in the <I>C</I> <I>Users Journal</I>, February 1991.<P>
The <I>FILE_FORMAT</I>s I present as examples (<A href="list8.htm">Listing 8</a>)
 share a standard pattern. Each defines the name of the datafile. It indicates whether or not the datafile is null-terminated. And it lists the fields of the datafile by name. Alongside each field name is the size of the field in bytes. Each fieldname/fieldlength pair is punctuated by a comma, surrounded by parentheses, and prefixed by the letters <I>ff</I> for File-Format. This arrangement produces a set of macro invocations, one for each field of the datafile. The technique permits the C source to <I>#define</I> a macro, and then invoke the macro for each field of the datafile simply by including the <I>FILE_FORMAT</I> file.<P>
The include file ends by <I>#undefine</I>ing <I>ff</I>. It undefines a macro <I>#defined</I> within the C source, and thereby permits the C source to define another macro. In the C source I present here, the include file <I>FILE_FORMAT</I> is brought in three times. First, it is used to create a structure fitted to the datafile format. Second, it is used to create an array of field lengths. As long as the <I>FILE_FORMAT</I> include file lists field name and field length side by side, the file format will always be properly created. Third, I include the <I>FILE_FORMAT</I> within my print function to create a custom report that perfectly (and automatically) matches the datafile format. Other macros, such as one to generate an array of field addresses, could be added to the C source should the need arise.<P>
The generation of a program suited to access a different file format requires only one change in the C file. The definition of <I>FILE_FORMAT</I> in the C source must be set to identify the include file in which you describe the datafile. Then this source file is compiled and linked to produce an executable that can read and write the file format of the desired datafile.<P>
If this ain't generic, I don't know what is!<P>
Art Shipman<br>
Westbrookville, NY<P>
Thanks for your submission. It is <I>definitely generic. I like your textual file</I> description for each file. It permits general file manipulations. That leads me to suggest that one could write a package (or create a C++ object) that reads a textual description file similar to yours. It would have a set of functions to access the fields in the file. The calls might look something like<P>
<pre>char value_returned[MAX_SIZE];
file_id = open_fixed_record_file("arts.ff");
get_number_fields(file_id);
get_field_value(file_id, 2, value_returned);
get_field_name(file_id, 2, value_returned);</pre>
This package could be expanded to read any type of file (fixed record, dBase, Paradox, etc) without change in the user interface. (KP)<P>

<h4><a href="../../../source/1992/oct92/pugh.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
