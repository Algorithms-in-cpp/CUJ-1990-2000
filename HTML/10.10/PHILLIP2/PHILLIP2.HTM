


<HTML>
<HEAD>

<TITLE>October 1992/Neural Networks in C++: An Object-Oriented Framework for Building Connectionist Systems</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tococt.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Book Reviews</FONT></H2>

<hr><h2 align="center"><font color="#800000">Neural Networks in C++: An Object-Oriented Framework for Building Connectionist Systems<A name="023A_010C"><A name="023A_010C"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="023A_0000"><A name="023A_0000">Review by Dwayne Phillips</font></h3><hr><blockquote><P>
<P><i><A name="023A_0000"><A name="023A_0000">Dwayne Phillips works as a computer and electronics engineer with the U.S. Department of Defense. He has a Ph.D. in Electrical and Computer Engineering from Louisiana State University. His interests include computer vision, artificial intelligence, software engineering, and programming languages.</i></P><P>
<I>Neural Networks in C</I>++ discusses neural networks implemented in C++ and how they can solve certain problems easier than traditional computer approaches. The intended audience is "people who implement computer solutions... anyone looking for new methods and tools to apply to real-world problems." This book is not for computer beginners. It is for experienced people accustomed to applying new techniques to solve difficult computing problems. The author tries to teach neural networks in the context of object-oriented programming in C++ in 126 pages. He covers the neural network part adequately, but loses the C++ novice.<P>
<h4><FONT COLOR="#000080"><A name="023A_010D">Synopsis<A name="023A_010D"></FONT></h4></P>
<I>Neural Networks in C++</I> contains:<P>
Introduction<br>
1.     The Object-Oriented Framework<br>
2.     Neural Network Fundamentals<br>
3.     Neural Net Models<br>
4.     Applications of Neural Networks<br>
Appendix 1: Listings for Neural Net Class Libraries<br>
Appendix 2: Listings for Applications<P>
The introduction discusses the history and advantages of neural networks. This history gives the reader an appreciation of the long and twisted trail neural networks have taken. The advantages section discusses the benefits of neural networks over statistical approaches. The author does not stress one important advantage of the neural network approach. That is, once you have a neural network, you do not need to revise the program for each new problem &#151; you only need to re-train it.<P>
The first chapter, The Object-Oriented Framework, introduces object-oriented programming, C++, and objects for neural networks. If you are a C++ veteran, you breeze through this material. If you are not, then this is confusing and you either study it closely and slowly or you are lost. The author's illustrations of these concepts are not at a level where C++ beginners can understand. The author dives into several C++ classes fundamental to neural network concepts (vectors, matrices, and vector pairs). The author states that he does not expect the reader to know C++, but the examples are far beyond the C++ novice.<P>
The second chapter, neural network fundamentals, quickly discusses several concepts of neural networks. This contains information about neurons, activation functions, learning, and multi-layer networks. The neuron is the basic processor in a neural network. It sums the product of all inputs and the weights of synapses (connections) and then produces an output. The neuron's activation function determines its output. The activation function is either a signum or sigmoid type function. The author gives a good explanation of unsupervised and supervised learning or training. The author explains the reason behind multi-layer networks and their technical and political significance. Multi-layer networks allow neural networks to classify functions that are not linearly separable. This was a key point in the development and near death of early neural networks. Neural networks were not taken seriously until they could solve non-linear problems.<P>
The third chapter, neural net models, pulls everything together as it describes specific neural networks and their implementations. The neural networks described include back-propagation, counterpropagation, BAM (bi-directional associative memories), BAM systems, and Hopfield nets. These are representative of the broad range of neural networks. The author states the algorithm, discusses the algorithm, gives a C++ class definition, and describes a test program for that type of neural network. The backpropagation section is the best part of the book. It gives a clear, simple, easy to implement description of the algorithm and relates the strengths and weaknesses of backpropagation.<P>
The final chapter, applications of neural networks, discusses several interesting uses of neural networks. These include a stock market predictor (something that grabs everyone's attention), handwritten digit recognition, a spell checker, and a neural network solution to the traveling salesman problem. These are good examples of difficult problems solved easily by neural networks. The author, however, omits the final step of the examples. In the stock market predictor, he completely describes the factors used as inputs, the format of the input file, training the network, and how given three weeks of data the network will predict the percent change in price of a stock in the fourth week. Nevertheless, the author does not gives details on the results. He does not state "the neural network predicted the change in IBM stock to be +1% when it actually was +0.7%."<P>
<h4><FONT COLOR="#000080"><A name="023A_010E">Conclusions<A name="023A_010E"></FONT></h4></P>
<I>Neural Networks in C</I>++ is a good, practical place to start if you want to explore the field of neural networks. It describes several representative neural networks and how you can use them on sensible problems. If you already know C++, then this is a good book on a growing application field. If you do not know C++, this book will not teach you the language and the code given will probably confuse you. You will still learn about neural networks, but you will not have a usable neural network toolkit.<P>
<I>Neural Networks in</I> C++ is wanting when it comes to coding examples; the code is hard to read and understand. The author uses short abbreviations (bp = backpropogation, gross = Grossberg, koh = Kohonen, vec=vector, etc.) for many of the key variable names in his code. I might understand this in some situations, but a tutorial book is not the place for such a terse coding style.<P>
Another problem with this book is the cost of the code on floppy disk. One of the selling points of the book is a complete neural network toolkit in C++. The source code occupies the second half of the book and entering it will take weeks. The publisher sells the source code on disk for an additional $40. This is excessive when there are many $30 books on the shelf that have floppy disks already in them.<P>
The text could be better organized. The author mixes in implementation code before the reader understands the problem. It would be more affective if the author adequately described neural networks and their applications before showing any code. As it is, the reader must glance back to early code segments after finally understanding the problem.<P>
Even with its problems, <I>Neural Networks in C</I>++ is a good introduction to the field of neural networks. The reader will learn the basics and the algorithms for several popular networks. The author includes a complete list of references so the interested reader can delve deeper into the subject.<P>
<B>Book Information</B><br>
Title: <I>Neural Networks in C++: An Object-Oriented Framework for Building Connectionist Systems,</I><br>
Author: Adam Blum<br>
Publisher: John Wiley and Sons 1-800-CALLWILEY<br>
ISBN: 0-471-53847-7 (book only) $34.95<br>
ISBN: 0-471-55201-1 (book and disk) $74.90<br>
ISBN: 0-471-55202-X (disk only) $39.95<br>
</BLOCKQUOTE>
</BODY>
</HTML>
