


<HTML>
<HEAD>

<TITLE>October 1992/Image Processing, Part 7: Spatial Frequency Filtering</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tococt.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">Image Processing, Part 7: Spatial Frequency Filtering<A name="01F8_00FA"><A name="01F8_00FA"></font></h2><P>
<h3 align="center"><font color="#800000">Dwayne Phillips</font></h3><hr><blockquote><P>
<P><i><A name="01F8_0000"><A name="01F8_0000">Dwayne Phillips works as a computer and electronics engineer with the U.S. Department of Defense. He has a Ph.D. in Electrical and Computer Engineering from Louisiana State University.</i></P><P>
<h4><FONT COLOR="#000080"><A name="01F8_00FB">Introduction<A name="01F8_00FB"></FONT></h4></P>
This is the seventh in a series of articles on images and image processing. The first six articles discussed reading and writing images (TIFF format), displaying them, printing them, histograms and histogram equalization, and basic and advanced edge detection. This article will discuss spatial frequency filtering. (All source code is available through the C Users Group.)<P>
<h4><FONT COLOR="#000080"><A name="01F8_00FC">Spatial Frequencies<A name="01F8_00FC"></FONT></h4></P>
All images and pictures contain <I>spatial</I> frequencies. Most of us are familiar with some type of frequency such as the 60-cycle, 110-volt electricity in our homes. The voltage varies in time as a sinusoid and the sinusoid completes a full cycle 60 times a second &#151; a frequency of 60 Hertz.<P>
Images have spatial frequencies. The gray level in the image varies in space (not time), i.e. it goes up and down. <A href="fig1.htm">Figure 1</a>
shows the side view of an image with low spatial frequencies. The gray level is low at the left edge of the figure, stays constant for a while, then shifts to a higher gray level. The gray level is fairly constant throughout (only one change in space) and so has low spatial frequencies.<P>
<A href="fig2.htm">Figure 2</a>
shows the side view of an image with high spatial frequencies. The gray level changes many times in the space of the image. The rate or frequency of change in the space of the image is high, so the image has high spatial frequencies.<P>
<h4><FONT COLOR="#000080"><A name="01F8_00FD">Filtering<A name="01F8_00FD"></FONT></h4></P>
Filtering is also a common concept. When we adjust the bass and treble on our stereos we are filtering out certain audio frequencies and amplifying others. High-pass filters pass high frequencies and stop low frequencies. Low-pass filters stop high frequencies and pass low frequencies. In the same manner, we can filter the spatial frequencies in images. A high-pass filter will amplify or "pass" frequent changes in gray levels and a low-pass filter will reduce frequent changes in gray levels.<P>
Consider the nature of a frequent or sharp change in gray level. <A href="fig1.htm">Figure 1</a>
showed an image with only one change in gray level. That change, however, was very sharp &#151; it was an edge (Phillips, November 1991). A high-pass filter will pass, amplify, or enhance the edge. A low-pass filter will try to remove the edge. Instead of an instant move from one gray level to another, the low-pass filter will produce a gradual slope between the two levels. The two gray levels will still exist, but the transition will be slower.<P>
<h4><FONT COLOR="#000080"><A name="01F8_00FE">Application of Spatial Image Filtering<A name="01F8_00FE"></FONT></h4></P>
Spatial image filtering has several basic applications in image processing. Among these are noise removal, smoothing, and edge enhancement. Noise in an image usually appears as snow (white or black) randomly sprinkled over an image. Spikes or very sharp, narrow edges in the image cause snow. A low-pass filter smooths and often removes these sharp edges.<P>
Edge enhancement improves the appearance of an image by sharpening the outlines of objects. I used an edge detector in "Image Processing, Part 6: Advanced Edge Detection" (Phillips, January 1992) to enhance edges. In that article, I detected the edges in an image and then overlaid the edges on top of the original image to emphasize them. A high-pass filter produces the same result in one operation.<P>
<h4><FONT COLOR="#000080"><A name="01F8_00FF">Frequency vs. Spatial Filtering<A name="01F8_00FF"></FONT></h4></P>
Consider sound as noise varying in the time domain, i.e. the pitch of the noise varies with time. A pure sinusoid completing a cycle 1000 times a second is a 1KHz tone. In the frequency domain, this is a single value at 1000. To filter it out, we multiply it by a low-pass filter that only passes frequencies below 900 cycles per second. Picture the low-pass filter as an array with the value of 1 in all places from 0 through 900 and the value 0 in all places above 900.<P>
Multiplication in the frequency domain is a simple idea, however, there is just one problem. You hear sound in the time domain, but you must transform it to the frequency domain before you can multiply it. You do this with the Fourier transform (Karl 1989) which requires substantial computations, and in some cases is not worth the effort.<P>
Multiplication in the frequency domain corresponds to convolution (Phillips, Nov. 1991, Jan. 1992) in the time and the spatial domain. If we use a small convolution mask, such as 3x3, then convolving this mask over an image is much easier and faster than performing Fourier transforms and multiplication.<P>
<h4><FONT COLOR="#000080"><A name="01F8_0100">Low-Pass Filtering<A name="01F8_0100"></FONT></h4></P>
Low-pass filtering smooths out sharp transitions in gray levels and removes noise. <a href="fig3.htm">Figure 3</a>
shows four low-pass filter convolution masks. Convolving these filters with a constant gray level area of an image will not change the image. Notice how the second convolution mask replaces the center pixel of the input image with the average gray level of the area. The other three masks have the same general form &#151; a "peak" in the center with small values at the corners.<P>
The next four figures show numerical examples of how a low-pass filter affects an image. <A href="fig4.htm">Figure 4</a>
shows an image segment with low spatial frequencies. The image segment changes gray level once, but with a sharp transition. <A href="fig5.htm">Figure 5</a>
shows an image segment with higher spatial frequencies. It changes gray level every row of pixels, with every change a sharp transition.<P>
<A href="fig6.htm">Figure 6</a>
shows the result of convolving the first 3x3 low-pass filter mask of <a href="fig3.htm">Figure 3</a>
with the image segment given in <A href="fig4.htm">Figure 4</a>.
 The high and low gray-level rows remain, but the transition differs. The low-pass filter smoothed the transition from one row to three rows of pixels. In a photograph this would make the edge look fuzzy or blurred.<P>
<A href="fig7.htm">Figure 7</a>
shows the result of convolving the first 3x3 low-pass filter mask of <a href="fig3.htm">Figure 3</a>
with the image segment given in <A href="fig5.htm">Figure 5</a>.
 The image in <A href="fig7.htm">Figure 7</a>
still has transitions or edges from row to row. The low-pass filter, however, reduced the magnitude of these transitions. In a photograph they would appear dimmer or washed out when compared with the original in <A href="fig5.htm">Figure 5</a>.
<P>
<h4><FONT COLOR="#000080"><A name="01F8_0101">Median Filters<A name="01F8_0101"></FONT></h4></P>
A special type of low-pass filter is the median filter (Levine 1985). The median filter takes an area of an image (3x3, 5x5, 7x7, etc.), looks at all the pixel values in that area, and replaces the center pixel with the median value. The median filter does not require convolution. It does, however, require sorting the values in the image area to find the median value.<P>
There are two noteworthy features of the median filter. First, you can easily change the size of the median filter. (The photographs later will show the effect of using a different size.) Implementing the different size is a simple matter of <I>for</I> loops in the code.<P>
Second, median filters remove noise in images, but change noise-free parts of images minimally. Consider the influence of a 3x3 median filter on the image segments in <A href="fig4.htm">Figure 4</a>
and <A href="fig5.htm">Figure 5</a>.
 The image in <A href="fig4.htm">Figure 4</a>
would not change. Centering the 3x3 filter on the last row of 150's yields a median value of 150. Centering it the first row of 1's yields a median value of 1. The image in <A href="fig5.htm">Figure 5</a>
would change, but the change would not be obvious. The filter would replace the rows of 150's with rows of 1's and would replace the rows of 1's with rows of 150's.<P>
<h4><FONT COLOR="#000080"><A name="01F8_0102">Effects of Low-Pass Filtering<A name="01F8_0102"></FONT></h4></P>
<A href="photo1.htm">Photograph 1</a>
is an aerial image spotted with noise. There are two streets running vertically with rows of houses on either sides of the streets. The white dots all over the trees are noise. The noise came from a poor photograph compounded by less than perfect scanning. <A href="photo2.htm">Photograph 2</a>,
 <A href="photo3.htm">Photograph 3</a>,
 <A href="photo4.htm">Photograph 4</a>,
 and <A href="photo5.htm">Photograph 5</a>
show the result of applying the low-pass filters to the image in <A href="photo1.htm">Photograph 1</a>.
 The four results are all similar. The filters removed the snow from <A href="photo1.htm">Photograph 1</a>
and retained the appearance of the houses and streets. My personal favorite is <A href="photo5.htm">Photograph 5</a>
but you should apply all four masks to your image and decide for yourself. The masks are different and produce different results &#151; sometimes noticeable sometimes not.<P>
<A href="photo6.htm">Photograph 6</a>
shows the result of applying a 3x3 median filter to <A href="photo1.htm">Photograph 1</a>.
 The filter removed the snow but left the areas of houses and streets unchanged.<P>
<A href="photo8.htm">Photograph 8</a>,
 <A href="photo9.htm">Photograph 9</a>,
 and <A href="photo10.htm">Photograph 10</a>
show the result of applying three different median filters (3x3, 5x5, and 7x7) to the house image in <A href="photo7.htm">Photograph 7</a>.
 In the result of the 3x3 filter (<A href="photo8.htm">Photograph 8</a>)
, the trees start to appear fuzzy and the lines between the bricks disappear. In the result of the 5x5 filter (<A href="photo9.htm">Photograph 9</a>)
, the trees are blotches, the bricks only textures, and the other details are disappearing. Finally, the 7x7 filter (<A href="photo10.htm">Photograph 10</a>)
 eliminates all detail. The "best" filter for this image is probably the 3x3 filter. Images with different-size details and noise would require different-size filters.<P>
(Note how in <A href="photo10.htm">Photograph 10</a>
you can only recognize the large objects such as windows, roof, window frames, door frames, and door. This is an excellent starting point for a part of image processing called segmentation. In segmentation you want a computer to find the major objects in the image and separate or segment them from the other objects. Segmentation would be difficult with <A href="photo7.htm">Photograph 7</a>
because it contains too many small and insignificant objects, such as bricks and leaves. <A href="photo10.htm">Photograph 10</a>
is fuzzy enough where you can only recognize the large objects. Segmentation will have to wait for another article.)<P>
Although you can change the size and results of median filters easily, they can be slow. The 3x3 median filter and the 3x3 convolution filters work equally fast. However, when you move to 5x5, and beyond, the median filter slows down noticeably because of the continuous sorting and picking of the median value.<P>
<h4><FONT COLOR="#000080"><A name="01F8_0103">Implementing Low-Pass Filtering<A name="01F8_0103"></FONT></h4></P>
<A href="list1.htm">Listing 1</a>
shows the source code for the low-pass and median filters. The first section of code declares the four low-pass filter masks (then three high-pass filter masks which we'll discuss later).<P>
The major filtering function is <I>filter_image</I>. This implements the low-pass (and high-pass) convolution filters. <I>filter_image</I> resembles the convolution-based, edge-detection functions in parts 5 and 6 of this series (Phillips, Nov. 1991, Jan. 1992). The first section of <I>filter_image</I> checks to see if the output image file exists. If not, it creates the file to be the same size as the input file.<P>
The <I>d=type</I> statements set up the denominator for later use. The low-pass filter masks should have fractions in front of them (1/6, 1/9, 1/10, and 1/16). Using the fractions in convolution masks would require floating-point arrays and operations. It is much simpler and quicker to use <I>shorts</I> and then divide the final result.<P>
<I>filter_image</I> reads an array from the input image and then goes into the <I>for</I> loops to perform the convolution. These loops move through the image array and do the 3x3 multiplication and summing. The sum is divided by the denominator mentioned above and set to the <I>max</I> or <I>min</I> value in case of overrun. <I>filter_image</I> finishes by calling <I>fix_edges</I> (Phillips, November 1991) to fill the edges of the output and writes the array to the output file.<P>
The next function in <A href="list1.htm">Listing 1</a>,
 <I>median_filter</I>, implements the variable-size median filter. The key to this filter is finding the median pixel value in the <I>n</I>x<I>n</I> area you are filtering. I did this by creating an array to hold the pixel values, sorting the array, and taking the middle number in the sorted array. First I allocated the elements array to hold the pixel values by calling <I>malloc</I><I>. </I><I>median_filter</I> then checks for the existence of the output image file and creates it, if necessary.<P>
After reading the image, <I>median_filter</I> goes into a series of loops which cover the entire image array. As it moves through the image, it copies an <I>nxn</I> area of pixel values surrounding each point to the elements array. The output image array is set to the <I>median_of</I> the elements array. <I>median_filter</I> calls <I>fix_edges</I> to fill out the edges of the output and then writes it to the output image file.<P>
The next function in <A href="list1.htm">Listing 1</a>
is <I>median_of</I>. This calls <I>sort_elements</I> to sort the elements array and returns the middle element of the sorted array. The <I>sort_elements</I> function (next in <A href="list1.htm">Listing 1</a>)
 is a bubble sort. It calls the <I>swap</I> function (also in <A href="list1.htm">Listing 1</a>)
 to swap elements.<P>
<h4><FONT COLOR="#000080"><A name="01F8_0104">High-Pass Filtering<A name="01F8_0104"></FONT></h4></P>
High-pass filters amplify or enhance a sharp transition (an edge) in an image. <A href="fig8.htm">Figure 8</a>
shows three 3x3 high-pass filter convolution masks. Each will leave a homogenous area of an image unchanged. They all have the same form &#151; a peak in the center, negative values above, below, and to the sides of the center, and corner values near zero. The three masks, however, produce different amplifications to different high spatial frequencies.<P>
<h4><FONT COLOR="#000080"><A name="01F8_0105">Effects of High-Pass Filtering<A name="01F8_0105"></FONT></h4></P>
<A href="fig9.htm">Figure 9</a>
and <A href="fig10.htm">Figure 10</a>
show the results of applying the first high-pass filter mask to <A href="fig4.htm">Figure 4</a>
and <A href="fig5.htm">Figure 5</a>.
 In <A href="fig9.htm">Figure 9</a>
(the result of filtering <A href="fig4.htm">Figure 4</a>)
 the high-pass filter amplified the edge. The transition from 150 to 1 is now from 255 to 0. In a photograph this would appear as adjacent black and white lines. In <A href="fig10.htm">Figure 10</a>
(the result of filtering <A href="fig5.htm">Figure 5</a>)
 the high-pass filter amplified the many edges, making the transitions all from 255 to 0. This would appear as alternating black and white lines in a photograph. Notice the differences between <A href="fig9.htm">Figure 9</a>
and <A href="fig10.htm">Figure 10</a>
and <A href="fig5.htm">Figure 5</a>
and <A href="fig6.htm">Figure 6</a>.
 The low-pass filter (<A href="fig5.htm">Figure 5</a>
and <A href="fig6.htm">Figure 6</a>)
 smoothed the edges. In contrast, the high-pass filter enhanced them.<P>
<A href="photo11.htm">Photograph 11</a>,
 <A href="photo12.htm">Photograph 12</a>,
 and <A href="photo13.htm">Photograph 13</a>
show what the high-pass filters will do to the house image of <A href="photo7.htm">Photograph 7</a>.
 <A href="photo11.htm">Photograph 11</a>
shows the result of the first high-pass filter convolution mask. Look closely at the differences between <A href="photo7.htm">Photograph 7</a>
and <A href="photo11.htm">Photograph 11</a>.
 In <A href="photo11.htm">Photograph 11</a>
you can see leaves, shingles on the roof, the texture of the screen door, and far greater contrast in the bricks and mortar. This high-pass filter has enhanced the details of the image.<P>
<A href="photo12.htm">Photograph 12</a>
shows the result of the second high-pass filter convolution mask. This image is almost black and white (few gray levels between). The details (edges) were enhanced, but probably too much. <A href="photo13.htm">Photograph 13</a>
shows the result of the third high-pass filter convolution mask. This image contains many tiny highlights in the leaves of the trees and noise or snow in the remaining parts.<P>
These photographs show the differences in the filtering properties of the three masks. The third filter mask has little affect on low spatial frequencies and a great affect on areas with relatively high spatial frequencies. So it does not enhance the bricks but does enhance the tiny leaves in the trees. The second filter has a high gain on most high frequencies (edges). So it produced an almost black and white image all the edges were amplified greatly. The first filter amplifies all edges, but not with a high gain. The filter enhanced, but did not saturate, the edges. Each filter has its own unique properties and you should use them to their advantage. Try all three on an image and choose the enhancement you prefer.<P>
<h4><FONT COLOR="#000080"><A name="01F8_0106">Implementing High-Pass Filtering<A name="01F8_0106"></FONT></h4></P>
The high-pass filters use the same function, <I>filter_image</I>, as the low-pass filters, but when calling <I>filter_image</I> you send it a different filter mask. In <A href="list1.htm">Listing 1</a>,
 you will find the function <I>setup_filters</I>. This copies a filter mask declared at the top of <A href="list1.htm">Listing 1</a>
into a 3x3 filter array. You must call this function to load the desired filter mask before calling <I>filter_image</I>.<P>
It's time now to integrate the filtering capabilities into the C Image Processing System (Phillips 1991, 1992). <A href="list2.htm">Listing 2</a>
shows the additions to the main program. I added a tenth case to handle image filtering. The code calls the usual routines to obtain image names and parameters. The <I>get_filter_options</I> function is at the end of <A href="list1.htm">Listing 1</a>.
 It queries the user about low-pass, median, or high-pass filtering and which filter mask to use. The second part of <A href="list2.htm">Listing 2</a>
shows the addition to the main menu.<P>
<A href="list3.htm">Listing 3</a>
shows the <I>mainfilt</I> application program which will filter an entire image file. <I>mainfilt</I> communicates with the user via a command line. Typing <I>mainfilt</I> produces a reminder of the command and parameters. <I>mainfilt</I> interprets the command, reads the header of the input image file, and sets up the looping structure. If needed, it calls <I>setup_filters</I> to load the desired filter mask. The loops over <I>i</I> and <I>j</I> call the chosen filter and cover the entire image. The filter functions read the input image array, filter it, and write the result to the output image. I used <I>mainfilt</I> to create the output images shown in the photographs.<P>
<h4><FONT COLOR="#000080"><A name="01F8_0107">Conclusion<A name="01F8_0107"></FONT></h4></P>
This article has discussed spatial frequencies in images and how to filter these frequencies. It demonstrated several types of low-pass and high-pass filters on various images. These are not the only filter masks available. Those familiar with Fourier transforms could derive other masks and also experiment with band-pass and band-stop filters.<P>
<h4>References</FONT></h4></P>
Karl, John H. 1989. An Introduction to Digital Signal Processing. Academic Press.<P>
Levine, Martin D. 1985. Vision in Man and Machine. McGraw-Hill.<P>
Phillips, Dwayne. March 1991. "Image Processing, Part 1: Reading the Tag Image File Format." The C Users Journal.<P>
Phillips, Dwayne. May 1991. "Image Processing, Part 2: Displaying Images and Printing Numbers." The C Users Journal.<P>
Phillips, Dwayne. June 1991. "Image Processing, Part 3: Displaying and Printing Images Using Halftoning." The C Users Journal.<P>
Phillips, Dwayne. August 1991. "Image Processing, Part 4: Histograms and Histogram Equalization." The C Users Journal.<P>
Phillips, Dwayne. November 1991. "Image Processing, Part 5: Writing Images to Files and Basic Edge Detection." The C Users Journal.<P>
Phillips, Dwayne. January, 1992. "Image Processing, Part 6: Advanced Edge Detection." The C Users Journal.<P>

<h4><a href="../../../source/1992/oct92/phillips.zip">Get Article Source Code</a></h4>

</BODY>
</HTML>
