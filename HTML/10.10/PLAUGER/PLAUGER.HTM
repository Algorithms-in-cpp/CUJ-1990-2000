


<HTML>
<HEAD>

<TITLE>October 1992/Standard C</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tococt.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Standard C<A name="0230_0102"><A name="0230_0102"></font></h2><P>
<h3 align="center"><A name="0230_0000"><A name="0230_0000">The Header &lt;string.h&gt;</h3><P>
<h3 align="center"><font color="#800000">P.J. Plauger</font></h3><hr><blockquote><P>
<P><i><A name="0230_0000"><A name="0230_0000">P. J. Plauger is senior editor of The C users Journal. He is secretary of the ANSI C standards committee, X3J11, and convenor of the ISO C standards committee, WG14. His latest books are The Standard C Library, published by Prentice-Hall, and ANSI and ISO Standard C (with Jim Brodie), published by Microsoft Press. You can reach him at pjp@plauger.com</i></P><P>
<h4><FONT COLOR="#000080"><A name="0230_0103">Introduction<A name="0230_0103"></FONT></h4></P>
The functions declared in <I>&lt;string.h&gt;</I> form an important addition to Standard C. They support a long tradition of using C to manipulate text as arrays of characters. Several other languages better integrate the manipulation of text strings, SNOBOL being a prime example. All that C incorporates in the language proper is the notation for null-terminated string literals such as <I>"abc"</I>. The Standard C library provides all the important functionality. These functions manipulate three forms of strings:<P>
<UL><li>Functions whose names begin with <I>mem</I> manipulate sequences of arbitrary characters. One argument (<I>s</I>) points to the start of the string &#151; the lowest subscripted element. Another (<I>n</I>) counts the number of elements.</li>
<li>Functions whose names begin with <I>strn</I> manipulate sequences of non-null characters. The arguments <I>s</I> and <I>n</I> are the same as above. The string ends just before the element <I>s[n]</I> or with the lowest value of <I>i</I> for which <I>s[i]</I> is zero (<I>'\0'</I>), whichever defines a shorter sequence.</li>
<li>All other functions whose names begin with <I>str</I> manipulate null-terminated sequences of characters. These functions use only the argument <I>s</I> to determine the start of the string. Each group has its distinct uses, as you might expect.</li></UL>
What you might not expect are several design lapses in these functions. The functions declared in <I>&lt;string.h&gt;</I> are not the result of a concerted design effort. Rather, they represent the accretion of contributions made by various authors over a span of years. By the time the C standardization effort began, it was too late to "fix" them. Too many programs had definite notions of how the functions should behave. Some of the problems are:<P>
<UL><li>Many of the functions that search, return a null pointer when the search fails. You have to capture the return value and test it before you can safely use it further. A pointer to the end of the string is just as good a failure code and <I>much</I> more usable in expressions.</li>
<li>The functions that copy, return a pointer to the start of the destination area. That is sometimes useful in a larger expression, but the address of the <I>end</I> of the copy is more informative. You can perform multiple copies more effectively with the latter return value than with the former.</li>
<li>The names of some functions are mysterious. <I>strcspn</I> and <I>strpbrk</I>, for example, do not loudly proclaim what they do.</li>
<li>The set of functions is incomplete and inconsistent. <I>strnlen</I> and <I>memrchr</I> are two sensible additions, for example, whereas <I>strncat</I> is surprising.</li></UL>
Despite these aesthetic gripes, I find the functions declared in <I>&lt;string.h&gt;</I> to be both important and useful. Several of them are, in fact, leading contenders for generating inline code. Many C programs use these functions, and use them a lot. They are worth the effort to learn and to optimize.<P>
The header <I>&lt;string.h&gt;</I> contains quite a few functions. I will be describing them in several installments. The first group consists mostly of the simple functions that copy and concatenate strings, plus a few miscellaneous additions.<P>
<h4><FONT COLOR="#000080"><A name="0230_0104">What the C Standard Says<A name="0230_0104"></FONT></h4></P>
The reading from the scripture this month occurs in two installments. Here is the first:<P>
<h4><FONT COLOR="#000080"><A name="0230_0105">7.11 String handling <B><I>&lt;string.h&gt;</I><A name="0230_0105"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0230_0106">7.11.1 String function conventions<A name="0230_0106"></FONT></h4></P>
The header <I>&lt;string.h&gt;</I> declares one type and several functions, and defines one macro useful for manipulating arrays of character type and other objects treated as arrays of character type.133 The type is <I>size_t</I> and the macro is <I>NULL</I> (both described in 7.1.6). Various methods are used for determining the lengths of the arrays, but in all cases a <I>char</I> * or <I>void</I> * argument points to the initial (lowest addressed) character of the array. If an array is accessed beyond the end of an object, the behavior is undefined.<P>
<h4><FONT COLOR="#000080"><A name="0230_0107">7.11.2 Copying functions<A name="0230_0107"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0230_0108">7.11.2.1 The <B><I>memcpy</I></B> function<A name="0230_0108"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0230_0109">Synopsis<A name="0230_0109"></FONT></h4></P>
<pre>   #include &lt;string.h&gt;
   void *memcpy(void *s1, const void *s2, size_t n);</pre>
<h4><FONT COLOR="#000080"><A name="0230_010A">Description<A name="0230_010A"></FONT></h4></P>
The <I>memcpy</I> function copies <I>n</I> characters from the object pointed to by <I>s2</I> into the object pointed to by <I>s1</I>. If copying takes place between objects that overlap, the behavior is undefined.<P>
<h4><FONT COLOR="#000080"><A name="0230_010B">Returns<A name="0230_010B"></FONT></h4></P>
The <I>memcpy</I> function returns the value of <I>s1</I>.<P>
<h4><FONT COLOR="#000080"><A name="0230_010C">7.11.2.2 The <B><I>memmove</I></B> function<A name="0230_010C"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0230_010D">Synopsis<A name="0230_010D"></FONT></h4></P>
<pre>   #include &lt;string.h&gt;
   void *memmove(void *s1, const void *s2, size_t n);</pre>
<h4><FONT COLOR="#000080"><A name="0230_010E">Description<A name="0230_010E"></FONT></h4></P>
The <I>memmove</I> function copies <I>n</I> characters from the object pointed to by <I>s2</I> into the object pointed to by <I>s1</I>. Copying takes place as if the <I>n</I> characters from the object pointed to by <I>s2</I> are first copied into a temporary array of <I>n</I> characters that does not overlap the objects pointed to by <I>s1</I> and <I>s2</I>, and then the <I>n</I> characters from the temporary array are copied into the object pointed to by <I>s1</I>.<P>
<h4><FONT COLOR="#000080"><A name="0230_010F">Returns<A name="0230_010F"></FONT></h4></P>
The <I>memmove</I> function returns the value of <I>s1</I>.<P>
<h4><FONT COLOR="#000080"><A name="0230_0110">7.11.2.3 The <B><I>strcpy</I></B> function<A name="0230_0110"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0230_0111">Synopsis<A name="0230_0111"></FONT></h4></P>
<pre>   #include &lt;string.h&gt;
   char *strcpy(char *s1, const char *s2);</pre>
<h4><FONT COLOR="#000080"><A name="0230_0112">Description<A name="0230_0112"></FONT></h4></P>
The <I>strcpy</I> function copies the string pointed to by <I>s2</I> (including the terminating null character) into the array pointed to by <I>s1</I>. If copying takes place between objects that overlap, the behavior is undefined.<P>
<h4><FONT COLOR="#000080"><A name="0230_0113">Returns<A name="0230_0113"></FONT></h4></P>
The <I>strcpy</I> function returns the value of <I>s1</I>.<P>
<h4><FONT COLOR="#000080"><A name="0230_0114">7.11.2.4 The <B><I>strncpy</I></B> function<A name="0230_0114"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0230_0115">Synopsis<A name="0230_0115"></FONT></h4></P>
<pre>   #include &lt;string.h&gt;
   char *strncpy(char *s1, const char *s2, size_t n);</pre>
<h4><FONT COLOR="#000080"><A name="0230_0116">Description<A name="0230_0116"></FONT></h4></P>
The <I>strncpy</I> function copies not more than <I>n</I> characters (characters that follow a null character are not copied) from the array pointed to by <I>s2</I> to the array pointed to by <I>s1</I>.134 If copying takes place between objects that overlap, the behavior is undefined.<P>
If the array pointed to by <I>s2</I> is a string that is shorter than <I>n</I> characters, null characters are appended to the copy in the array pointed to by <I>s1</I>, until <I>n</I> characters in all have been written.<P>
<h4><FONT COLOR="#000080"><A name="0230_0117">Returns<A name="0230_0117"></FONT></h4></P>
The <I>strncpy</I> function returns the value of <I>s1</I>.<P>
<h4><FONT COLOR="#000080"><A name="0230_0118">7.11.3 Concatenation functions<A name="0230_0118"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0230_0119">7.11.3.1 The <B><I>strcat</I></B> function<A name="0230_0119"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0230_011A">Synopsis<A name="0230_011A"></FONT></h4></P>
<pre>   #include &lt;string.h&gt;
   char *strcat(char *s1, const char *s2);</pre>
<h4><FONT COLOR="#000080"><A name="0230_011B">Description<A name="0230_011B"></FONT></h4></P>
The <I>strcat</I> function appends a copy of the string pointed to by <I>s2</I> (including the terminating null character) to the end of the string pointed to by <I>s1</I>. The initial character of <I>s2</I> overwrites the null character at the end of <I>s1</I>. If copying takes place between objects that overlap, the behavior is undefined.<P>
<h4><FONT COLOR="#000080"><A name="0230_011C">Returns<A name="0230_011C"></FONT></h4></P>
The <I>strcat</I> function returns the value of <I>s1</I>.<P>
<h4><FONT COLOR="#000080"><A name="0230_011D">7.11.3.2 The <B><I>strncat</I></B> function<A name="0230_011D"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0230_011E">Synopsis<A name="0230_011E"></FONT></h4></P>
<pre>   #include &lt;string.h&gt;
   char *strncat(char *s1, const char *s2, size_t n);</pre>
<h4><FONT COLOR="#000080"><A name="0230_011F">Description<A name="0230_011F"></FONT></h4></P>
The <I>strncat</I> function appends not more than <I>n</I> characters (a null character and characters that follow it are not appended) from the array pointed to by <I>s2</I> to the end of the string pointed to by <I>s1</I>. The initial character of <I>s2</I> overwrites the null character at the end of <I>s1</I>. A terminating null character is always appended to the result.135 If copying takes place between objects that overlap, the behavior is undefined.<P>
<h4><FONT COLOR="#000080"><A name="0230_0120">Returns<A name="0230_0120"></FONT></h4></P>
The <I>strncat</I> function returns the value of <I>s1</I>.<P>
<B>Forward references</B>: the <I>strlen</I> function (7.11.6.3).<P>
Footnotes<P>
133. See "future library directions" (7.13.8).<P>
134. Thus, if there is no null character in the first <I>n </I>characters of the array pointed to by <I>s2,</I> the result will not be<P>
null-terminated.<P>
135. Thus, the maximum number of characters that can end up in the array pointed to by <I>s1</I> is <I>strlen.(s1)+n+1.</I><P>
Here is the second quote from the C Standard:<P>
<h4><FONT COLOR="#000080"><A name="0230_0121">7.11.6 Miscellaneous functions<A name="0230_0121"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0230_0122">7.11.6.1 the <B><I>memset</I></B> function<A name="0230_0122"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0230_0123">Synopsis<A name="0230_0123"></FONT></h4></P>
<pre>   #include &lt;string.h&gt;
   void *memset(void *s, int c, size_t n);</pre>
<h4><FONT COLOR="#000080"><A name="0230_0124">Description<A name="0230_0124"></FONT></h4></P>
The <I>memset</I> function copies the value of <I>c</I> (converted to an <I>unsigned char</I>) into each of the first <I>n</I> characters of the object pointed to by <I>s</I>.<P>
<h4><FONT COLOR="#000080"><A name="0230_0125">Returns<A name="0230_0125"></FONT></h4></P>
The <I>memset</I> function returns the value of <I>s</I>.<P>
<h4><FONT COLOR="#000080"><A name="0230_0126">7.11.6.2 The <B><I>strerror</I></B> function<A name="0230_0126"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0230_0127">Synopsis<A name="0230_0127"></FONT></h4></P>
<pre>   #include &lt;string.h&gt;
   char *strerror(int errnum);</pre>
<h4><FONT COLOR="#000080"><A name="0230_0128">Description<A name="0230_0128"></FONT></h4></P>
The <I>strerror</I> function maps the error number in <I>errnum</I> to an error message string.<P>
The implementation shall behave as if no library function calls the <I>strerror</I> function.<P>
<h4><FONT COLOR="#000080"><A name="0230_0129">Returns<A name="0230_0129"></FONT></h4></P>
The <I>strerror</I> function returns a pointer to the string, the contents of which are implementation-defined. The array pointed to shall not be modified by the program, but may be overwritten by a subsequent call to the <I>strerror</I> function.<P>
<h4><FONT COLOR="#000080"><A name="0230_012A">7.11.6.3 The <B><I>strlen</I></B> function<A name="0230_012A"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0230_012B">Synopsis<A name="0230_012B"></FONT></h4></P>
<pre>   #include &lt;string.h&gt;
   size_t strlen(const char *s);</pre>
<h4><FONT COLOR="#000080"><A name="0230_012C">Description<A name="0230_012C"></FONT></h4></P>
The <I>strlen</I> function computes the length of the string pointed to by <I>s</I>.<P>
<h4><FONT COLOR="#000080"><A name="0230_012D">Returns<A name="0230_012D"></FONT></h4></P>
The <I>strlen</I> function returns the number of characters that precede the terminating null character.<P>
<h4><FONT COLOR="#000080"><A name="0230_012E">Using the Functions<A name="0230_012E"></FONT></h4></P>
You use these functions declared in <I>&lt;string.h&gt;</I> to copy and concatenate strings of characters. You characterize each string by an argument (call it <I>s</I>) which is a pointer to the start of the string.<P>
<UL><li>If a string can contain null characters, you must also specify its length (call it <I>n</I>) as an additional argument. <I>n</I> can be zero. Use the functions whose names begin with <I>mem</I>.</li>
<li>If a string may or may not have a terminating null character, you must similarly specify its maximum length <I>n</I>, which can be zero. Use the functions whose names begin with <I>strn</I>.</li>
<li>If a string assuredly has a terminating null character, you specify only <I>s</I>. Use the remaining functions whose names begin with <I>str</I>.</li></UL>
Beyond this simple categorization, the string functions are only loosely related. I describe each separately.<P>
<I>memcpy</I> &#151; If you can be certain that the destination <I>s1</I> and source <I>s2</I> do not overlap, <I>memcpy(s1, s2, n</I><I>)</I> will perform the copy safely and rapidly. If the two might overlap, use <I>mem-move(s1, s2, n)</I> instead. <I>Do not</I> assume that either function accesses storage in any particular order. In particular, if you want to store the same value throughout a contiguous sequence of elements in a character array, use <I>memset</I>.<P>
<I>memmove</I> &#151; See <I>memcpy</I> above.<P>
<I>strcat</I> &#151; If you have only two strings <I>s1</I> and <I>s2</I> to concatenate, or just a few short strings, use <I>strcat(s1, s2</I>). Otherwise, favor a form such as <I>strcpy(s1 += strlen(s1</I>), <I>s2)</I>. That saves repeated, and ever-lengthening, rescans of the initial part of the string. Be sure that the destination array is large enough to hold the concatenated string. Note that <I>strcat</I> returns <I>s1</I>, not a pointer to the new end of the string.<P>
<I>memset</I> &#151; This is the safe way to store the same value throughout a contiguous sequence of elements in a character array.<P>
<I>strcpy</I> &#151; If you can be certain that the destination <I>s1</I> and source <I>s2</I> do not overlap, <I>strcpy(s1</I>, <I>s2)</I> will perform the copy safely and rapidly. If the two might overlap, use <I>memmove(s1, s2, strlen(s2</I>) + <I>1</I>) instead. <I>Do not</I> assume that either function accesses storage in any particular order.<P>
<I>strerror</I> &#151; Use <I>strerror</I>(<I>errcode</I>) to determine the null-terminated message string that corresponds to the error code <I>errcode. errcode</I> should be <I>errno</I> or one of the macros defined in <I>&lt;errno.h&gt;</I> whose name begins with <I>E</I>. Be sure to copy or write out the message before you call <I>strerror</I> again. A later call can alter the message. If you simply want to write to the standard error stream a message containing <I>strerror(errno</I>), see <I>perror</I>, declared in <I>&lt;stdio.h&gt;</I>.<P>
<I>strlen</I> &#151; Use this function wherever possible to determine the length of a null-terminated string. It may well be implemented with inline code.<P>
<I>strncat</I> &#151; The <I>strn</I> in <I>strncat(s1, s2, n2</I>) refers to the string <I>s2</I> the the function concatenates onto the end of the null-terminated string <I>s1</I>. The function copies at most <I>n2</I> characters <I>plus</I> a terminating null if it doesn't copy a terminating null. Thus, <I>strlen(s1</I>) increases by at most <I>n2</I> as a result of the call to <I>strncat</I>. That makes <I>strncat</I> a safer function than <I>strcat</I>, at the risk of truncating <I>s2</I> to length <I>n2</I>.<P>
<I>strncpy</I> &#151; If you can be certain that the destination <I>s1</I> and source <I>s2</I> do not overlap, <I>strncpy(s1, s2, n2</I>) will perform the copy safely. Note, however, that the function stores exactly <I>n2</I> characters starting at <I>s1</I>. It may drop trailing characters, including the terminating null. It stores additional null characters as needed to make up a short count. If the two areas might overlap, use <I>memmove(s1, s2, n2</I>) instead. (You must then store the appropriate number of null characters at the end, if that is important to you.) <I>Do not</I> assume that either function accesses storage in any particular order.<P>
<h4><FONT COLOR="#000080"><A name="0230_012F">Implementing the Functions<A name="0230_012F"></FONT></h4></P>
The functions declared in <I>&lt;string.h&gt;</I> work largely independent of each other. The only exception is the pair <I>strcoll</I> and <I>strxfrm</I>. They perform the same essential operation two different ways. I discuss them in a later installment. The copy and concatenate functions each perform a fairly simple operation. Here, the challenge is to write them to be clear, robust, and efficient.<P>
<A href="list1.htm">Listing 1</a>
shows the file <I>string.h.</I> As usual, it inherits from the internal header <I>&lt;yvals.h&gt;</I> definitions that are repeated in with the header <I>&lt;stddef.h</I>. (See <I>Standard </I><I>C, CUJ</I> Aug.1991.)<P>
Only the function <I>strerror</I> has a masking macro. It shares the internal function <I>_Strerror</I> with the function <I>perror</I>, declared in <I>&lt;stdio.h&gt;</I>. (That lets each of the higher-level functions provide its own buffer.)<P>
Several other functions declared in <I>&lt;string.h&gt;</I> are serious candidates for implementing as built-in functions that generate inline code. A common practice is to give these built-in versions secret names. You then provide masking macros to gain access to the built-in functions. Thus, a production version of<P>
<I>&lt;string.h&gt;</I> could well include several additional masking macros.<P>
<A href="list2.htm">Listing 2</a>
shows the file <I>memcpy.c.</I> I chose <I>char</I> as the working type within <I>memcpy</I> in the off chance that some computer architectures may favor it over <I>unsigned char</I>. (That's one of the justifications for having a "plain" character type.) <I>memcpy</I> can assume that its source and destination areas do not overlap. Hence, it performs the simplest copy that it can.<P>
<A href="list3.htm">Listing 3</a>
shows the file <I>memmove. c.</I> The function <I>memmove</I> must work properly even when its operands overlap. Hence, it first checks for an overlap that would prevent the correct operation of an ascending copy. In that case, it copies elements in descending order.<P>
<A href="list4.htm">Listing 4</a>
shows the file <I>strncat.c.</I> The function <I>strncat</I> first locates the end of the destination string. Then it concatenates at most <I>n</I> additional characters from the source string. Note that the function <I>always</I> supplies a terminating null character.<P>
<A href="list5.htm">Listing 5</a>
shows the file <I>strncpy.c.</I> The function <I>strncpy</I> is likewise similar to <I>memcpy</I>, except that it stops on a terminating null. <I>strncpy</I> also has the unfortunate requirement that it must supply null padding characters for a string whose length is less than <I>n</I>.<P>
The <I>str</I> functions are direct analogs of the <I>strn</I> functions. <A href="list6.htm">Listing 6</a>
shows the file <I>strcat.c</I> and <A href="list7.htm">Listing 7</a>
shows the file <I>strcpy.c.</I> The functions differ only in not worrying about a limiting string length <I>n</I>. Of course, <I>strcpy</I> has no padding to contend with either.<P>
<A href="list8.htm">Listing 8</a>
shows the file <I>memset.c.</I> I chose <I>unsigned char</I> as the working type within <I>memset</I> in the off-chance that some implementation might generate an overflow storing certain <I>int</I> values in the other character types.<P>
<A href="list9.htm">Listing 9</a>
shows the file <I>strlen.c.</I> The function <I>strlen</I> is probably the most heavily used of the functions declared in <I>&lt;string.h&gt;</I>. It is the leading contender for implementation as a built-in function. If that form exists, look for places where <I>strlen</I> masquerades as inline code. The functions <I>strcat</I> and <I>strncat</I> are two obvious examples.<P>
Finally, <A href="list10.htm">Listing 10</a>
shows the file <I>strerror.c.</I> It defines both <I>strerror</I> and the internal function _<I>Strerror</I>. _<I>Strerror</I> constructs a text representation of certain error codes in a buffer. It uses its own static buffer only when called by <I>strerror</I>. I supply here specific messages only for the minimum set of error codes defined in this implementation of <I>&lt;errno.h&gt;</I>. Many implementations add more. Any unknown error codes print as three-digit decimal numbers.<P>
<I>This article is excerpted in part from P.J. Plauger</I>, The Standard C Library, <I>(Englewood Cliffs, N.J.: Prentice-Hall, 1992)</I>.<P>

<h4><a href="../../../source/1992/oct92/plauger.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
