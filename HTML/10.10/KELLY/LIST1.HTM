<HTML><HEAD>
<TITLE>October 1992/The Evolution of a Binary Tree in Turbo C/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1 <I>Minimal binary tree program</I>.</A></h4>
<pre>#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;

/*  Tree Node Definition */

typedef struct node {
   struct node *left;
   struct node *right;
   char key;
}node;

/*  Recursive Minimal Tree Insertion Function */

node *tree_insert(node *root, node *new_node)
{
   if(! root) {
   root = (node *) calloc(1, sizeof(node));
   root-&gt;key = new_node-&gt;key;
   return root;    /* return pointer to new memory block */
   }
   if(new_node-&gt;key == root-&gt;key)      /* if ==, return */
   return root;
   else if(new_node-&gt;key &lt; root-&gt;key)  /* if &lt;, go left */
   root-&gt;left = tree_insert(root-&gt;left, new_node);
   else                                /* else go right */
      root-&gt;right = tree_insert(root-&gt;right, new_node);

   return root;
}

/* Recursive Minimal Tree In-Order Traversal Function */

void tree_trace(node *root)
{
   if(! root)
   return;
   tree_trace(root-&gt;left);
   printf("\n%c", root-&gt;key);
   tree_trace(root-&gt;right);
}

/* Minimal Tree Test Driver */

void main(void)
{
   char c, m = 'm';
   node *tree_root = NULL;
   node this_node = { NULL, NULL, '\0' };

   this_node.key = m;
   tree_root = tree_insert (tree_root, &amp;this_node);

   for(c = '\x1';c &lt; '\x5';c++) {
      this_node.key = m + c;
   tree_insert(tree_root, &amp;this_node);
      this_node.key = m - c;
   tree_insert(tree_root, &amp;this_node);
   }
   tree_trace(tree_root);
   printf("\n");
   exit(0);                  /* minimal, so let exit()  */
                         /* free the dynamic memory */
}
/*  End of File */
</pre>
</BODY>
</HTML>
