

<HTML>
<HEAD>

<TITLE>July 1995/Questions and Answers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjul.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Questions and Answers<A name="00F4_0097"><A name="00F4_0097"></font></h2><P>
<h3 align="center"><A name="00F4_0000"><A name="00F4_0000">A Pitfall Inherited from C</h3><P>
<h3 align="center"><font color="#800000">Pete Becker</font></h3><hr><blockquote><P>
<P><i><A name="00F4_0000"><A name="00F4_0000">Pete Becker is Senior QA Project Manager for C++ at Borland International. He has been involved with C++ as a developer and manager at Borland for the past six years, and is Borland's principal representative to the ANSI/ISO C++ standardization committee.</i></P><P>
<B>Q</B><P>
I'm having a problem making two dimensional arrays of my <I>Complex</I> variable class. The following works:<P>
<pre>Complex *a = new Complex[5];
Complex b[3][3];</pre>
I can assign/view the elements in both arrays. What I'd like to do however, is:<P>
<pre>Complex **c: = new Complex[3][3];</pre>
When I try and assign values to the array elements I get a bus error. To set the values I do this:<P>
<pre>Complex temp(10.0,1.0);
// this works fine...
Complex **c = new Complex[3][3];

c[0][0]: temp;
// and so forth...</pre>
What else should I be doing to make the dynamic array allocation work for more than one dimension?<P>
<B>A</B><P>
This question should be as relevant to C programmers as C++ programmers; one of the wonderful things about our profession is that there is always more to learn. I've seen this question many times on the Internet and always passed it by because I felt that it wasn't very difficult, and I knew how to solve it if I ever needed to. The other day I needed to: someone dropped by my office with this same question, and it took half an hour to get something that worked. I attribute part of the blame to the lateness of the hour, but most of it must lie squarely on my own inadequate understanding of the issues involved with arrays and pointers.<P>
The complications in dealing with multidimensional arrays come from a feature of C that's usually a convenience: array names and pointers are interchangeable in most contexts. When this interchangeability does what you expect it's a great convenience; when it does something unexpected it can be very hard to debug. For example:<P>
<pre>void f( char * );
char text[] = "Hello, world!\n";
f( text );</pre>
In the call to <I>f</I>, the array name <I>text</I> is converted to a pointer to its first element, that is, a pointer to <I>char</I>, which is then passed to the function <I>f</I>. We're all used to seeing this happen, and it doesn't surprise anybody.<P>
This also occurs in a more subtle form:<P>
<pre>f( "Hello, world!\n" );</pre>
Here, the compiler translates the literal string "<I>Hello</I>,<I> world!\n</I>" into an unnamed array of <I>char</I>. This array is converted to a pointer to its first element, and that pointer is passed to <I>f</I>. This, too, is not surprising, although the mechanism is a bit more complicated, since it does not involve an explicit array declaration.<P>
However, if you become complacent about this interconvertability you can get into trouble. Have you ever stumbled over this one?<P>
<pre>// FILE1.C
char text[] = "Hello, world!\n";

// FILE2.C
extern char *text;

int main()
{
puts( text );
return 0;
}</pre>
In <I>FILE1</I> we've told the compiler that the identifier <I>text</I> is the name of an array of <I>char</I>, that is, the name refers to a block of memory that contains the ASCII codes for the characters "<I>Hello</I>,<I> world!\n</I>". In <I>FILE2</I> we've told the compiler that <I>text</I> is the name of a pointer to <I>char</I>, that is, it refers to a memory location that contains the <I>address</I> of a block of memory containing ASCII codes. These two definitions of text are not the same, and the program that results from linking these two files will not run correctly. In order to make it work, we must either change the definition of <I>text</I> in <I>FILE1</I> from array of <I>char</I> to pointer to <I>char</I>, or we must make the opposite change in its definition in <I>FILE2</I>, like this:<P>
<pre>// FILE1A.C
char *text = "Hello, world!\n";

// FILE2A.C
extern char *text;

int main()
{
puts( text );
return 0;
}</pre>
or like this:<P>
<pre>// FILE1B.C
char text[] = "Hello, world!\n";

// FILE2B.C
extern char text[];

int main()
{
puts( text );
return 0;
}</pre>
You've probably guessed by now that the problem raised in the question is the result of confusing arrays and pointers. This occurs in the declaration<P>
<pre>Complex **c = new Complex[3][3];</pre>
This declaration attempts to create a variable of type pointer to pointer to <I>Complex</I> and initialize it with the result of the <I>new</I>-expression. Let's take <I>new</I> out of the picture for the moment, so we can understand the types a bit better:<P>
<pre>typedef struct
{
double re, im;
} Complex;

int main()
{
Complex Initializer[3][3];
Complex **c = Initializer;  // line 9
return 0;
}</pre>
When I try to compile this code as C code with Borland C++ 4.5 I get the following message:<P>
<pre>Warning test.c 9:
Suspicious pointer conversion in function main</pre>
This message is a sign of trouble, although it doesn't tell us much about what the compiler thinks is going on. If we compile the same code as C++ code we get a more detailed message:<P>
<pre>Error test.cpp 9:
Cannot convert 'Complex ( *)[3]' to 'Complex *
*' in function main()</pre>
In C this conversion is valid; in C++ it is not. It's not that the C++ compiler can't do the same thing that the C compiler does with it; in fact, if you add the right cast you can persuade the C++ compiler to accept this conversion. The problem is that the conversion rarely makes sense, and C++ is much less tolerant than C of constructs that probably won't work.<P>
In this case, we've stumbled into the same old complacency that we ran into before: we've assumed that <I>[]</I> can be replaced with *, but the compiler is telling us that it doesn't agree. If you read the C++ error message carefully, it contains all the information you need to figure out what's wrong. The compiler is looking at an object of type <I>Complex (*)[3]</I>, and it is trying to convert it to <I>Complex **.</I> The left-hand side of the assignment operation is a <I>Complex **</I>, so the compiler must have decided that '<I>Initializer</I>' is of type <I>Complex (*)[3].</I> Once you work through C's inside-out type declarations, this means that the compiler is treating '<I>Initializer</I>' as a pointer to an array of three objects of type <I>Complex.</I> We declared it as an array of arrays; the compiler is converting it to a pointer to an array, but refusing to convert it to a pointer to a pointer. In fact, that's the rule in both C and C++ &#151; an array can only be treated as a pointer when it is the outermost type. Arrays buried on the inside of a type declaration cannot be converted to pointers.<P>
Knowing this, the way to fix line 9 is to declare the variable as a pointer to an array, rather than a pointer to a pointer. If we replace line 9 with the following<P>
<pre>Complex (*c)[3] = Initializer;
   // line 9</pre>
the code compiles and runs correctly, both as C and as C++. Note that the parentheses in the type declaration are necessary. Without them, <I>c</I> would be an array of pointers, not a pointer to an array.<P>
Once this correction has been made, adding the dynamic allocation back in is easy. In C we just need to call <I>malloc</I> and allocate the correct number of bytes:<P>
<pre>Complex (*c)[3] =
   malloc( sizeof(Complex)*3*3 );</pre>
In C++, instead of calling <I>malloc</I>, we use operator <I>new:</I><P>
<pre>Complex (*c)[3] = new Complex[3][3];</pre>
<B>Q</B><P>
Is anyone else as tired as I am writing <I>set...()</I> and <I>get...()</I> methods in C++ classes? Instead of having something such as:<P>
<pre>class foo {
   int i;
public:
   seti (const int i_new) {
      PRECONDITION (...);
      i = i_new;
    };
};</pre>
why can't we having something that goes:<P>
<pre>class foo {
readonly:
   int i;
public:
   i( const int i_new ) {...};
};</pre>
Basically, when the value of <I>i</I> is set using <I>foo_object.i = ...</I>,<I> i( const int )</I> is called. If <I>i( const int )</I> does not exist, then <I>foo_object.i</I> cannot be set since <I>i</I> is declared <I>readonly. readonly</I> declares a private member that is similar to a member declared <I>const</I>, but a <I>readonly</I> member can be modified with a "modifier," <I>i(). i()</I> does not need a return value since (I believe) the return value should always be the return value of <I>foo.i = ...</I>, according to the C++ specification today. (<I>i</I> is of course declared public or protected in this case.)<P>
I propose this because I am very much against making class properties public. I like controlled access. What do you think?<P>
<B>A</B><P>
I agree that the internal representation of a class's properties should not be made public. However, I don't think that making them read-only is a good solution. To see why not, let's begin at the beginning, with a simple C struct, wrapped in a typedef so that its name can be used in the same way as a C++ struct's name.<P>
<pre>typedef struct
{
    int x;
    int y;
} Point;</pre>
In C we can create an object of this type and modify the object's internal data:<P>
<pre>Point p;
p.x = 0;  /* locate at origin */
p.y = 0;</pre>
If we want to move this object so that it refers to a different location we do so by assigning new values to the internal data:<P>
<pre>p.x = 20;      /* move to (20,20) */
p.y = 20;</pre>
One of the primary goals of C++ is to provide better mechanisms for encapsulation, so we may be inclined to rewrite this struct to encapsulate its internals:<P>
<pre>class Point
{
public:
   Point( int x1, int y1 ) : x(x1), y(y1) {}
   void setX( int x1 ) { x = x1; }
   void setY( int y1 ) { y = y1; }
   int getX() const { return x; }
   int getY() const { return y; }
private:
   int x, y;
};</pre>
Now, instead of assigning directly to data members, users of <I>Point</I> call member functions:<P>
<pre>Point p(0,0); // locate at origin

p.setX(20);   // move to (20,20)
p.setY(20);</pre>
This version of <I>Point</I> provides better encapsulation because all of its operations are written as member functions. As a result, we can change the internal representation of a <I>Point</I> in such a way that users of the current class will not have to rewrite their code to use the new one. For example, suppose we change <I>Point</I> to use polar coordinates instead of rectangular coordinates. The new version looks something like this:<P>
<pre>class Point
{
public:
   Point( int x1, int y1 ) { reset( x1, y1 ); }
   void setX( int x1 ) { reset( x1, getY() ); }
   void setY( int y1 ) { reset( getX(), y1 ); }
   int getX() const { return radius*sin(theta); }
   int getY() const { return radius*cos(theta); }

private:
   double radius, theta;
   void reset( int x, int y )
      {
      radius = sqrt( x*x+y*y );
      if( x==0 &amp;&amp; y==0 )
         theta = 0.0;
      else
         theta = atan2(x,y);
      }
};</pre>
With this new version of <I>Point</I> old code will continue to run correctly, although a bit more slowly. By writing member functions instead of directly exposing data members we produce a class that greatly simplifies program maintenance. We have insulated users of the class from changes in its internal representation.<P>
Adding a <I>readonly</I> keyword will allow us to write classes that prevent direct assignments to their data members, but such classes do not insulate their users from changes to the internal representation. For example:<P>
<pre>class Point
{
    readonly:
    int x, y;
};

Point p;
cout &lt;&lt; p.x &lt;&lt; endl;</pre>
What happens to this code if we change its internal representation from cartesian coordinates to polar coordinates? The <I>readonly</I> members <I>x</I> and <I>y</I> go away, and any code that used them must be rewritten. <I>readonly</I> may seem convenient when you are first writing and using a class, but ultimately it exposes implementation details of the class and leads to code that is hard to maintain.<P>
Incidentally, if I were writing new code, I would not write a <I>Point</I> class with <I>setX()</I> and <I>setY()</I> member functions. As the comments in the code examples indicate, a <I>Point</I> has two fundamental properties: it describes a location, and that "point" can be moved. I would design the interface to a <I>Point</I> class to directly reflect these properties. It would look something like this:<P>
<pre>class Point
{
public:
   Point( int x1, int y1 );
   void move( int x1, int y1 );
   int getX() const;
   int getY() const;
};</pre>
<B>Q</B><P>
A simple example:<P>
<pre>class A;
class B;

file1.cpp       A foo1;
file2.cpp       B foo2;</pre>
Sometimes the compiler first builds object <I>foo1</I>, sometimes <I>foo2.</I> How can you tell the compiler the order of object creation? How do you work around this C++ problem?<P>
<B>A</B><P>
My usual answer to this question is "don't do that." Most of the times I'm tempted to create objects with this sort of interdependency it's because these things look clever, not because they represent the best solution to the problem. But I'm in a good mood today, so I'll concede that there are times when this sort of dependency is necessary. I'm willing to talk about how to make it work.<P>
There's no portable way to tell the compiler to construct <I>foo1</I> before <I>foo2</I> except to put them into the same compilation unit. In that case, the compiler will construct <I>foo1</I> and <I>foo2</I> in the order of their appearance within the compilation unit. But that's not much help if you really need to have them in separate files.<P>
Borland's compilers call constructors for global objects in the same order that the files occur on the linker command line. So, for example, the command line<P>
<pre>bcc file1 file2</pre>
would produce an executable file in which <I>foo1</I> was initialized before <I>foo2</I>, and<P>
<pre>bcc file2 file1</pre>
would produce an executable file in which <I>foo2</I> was initialized before <I>foo1</I>. Other compilers (including future versions of BCC) may do things differently, so check your compiler documentation if you're going to rely on this behavior. Oh, don't forget: if you put the resulting object files into a library and link with that library instead of the individual object files, all bets are off.<P>
Let's look a little deeper, and see if we can come up with a better solution. For the purposes of this discussion, let's assume that this order dependency arises because the constructor for <I>B</I> calls a member function on the object <I>foo1</I>, like this:<P>
<pre>extern A foo1;

B::B()
{
   foo1.Register(this);
}</pre>
Clearly, if <I>foo1</I> has not been constructed, this code will not execute correctly. One very simple mechanism (which I picked up from Jerry Schwarz) for guaranteeing that <I>foo1</I> has been constructed is to access it through a function call instead of accessing it directly:<P>
<pre>A&amp; GetFoo1();

B::B()
{
   GetFoo1().Register(this);
}</pre>
The function <I>GetFoo1()</I> contains a static variable:<P>
<pre>A&amp; GetFoo1()
{
    static A foo1;
    return foo1;
}</pre>
With this code, <I>foo1</I> will be constructed the first time the function <I>GetFoo1</I> is executed. This guarantees that <I>foo1</I> will be constructed before any use, and also that <I>foo1</I> will not be constructed if it is never used.<P>
However, this technique is a bit more expensive than accessing <I>foo1</I> directly, since it requires a function call each time. If this function call becomes a bottleneck in your program you may be tempted to turn it into an inline function. Be warned: static variables in inline functions are tricky, and your compiler might not do what you expect. I've tried this with both BCC and MSVC, and both ignore the <I>in-line</I> declaration. The resulting code works correctly. Other compilers might produce a separate copy of <I>foo1</I> in each compilation unit that uses <I>GetFoo1</I>. If that happens, this technique won't work. Check that it works correctly before you make <I>GetFoo1</I> inline.<P>
You can also use the "nifty counter" trick, which avoids the cost of the inline call but introduces more overhead at startup. Some implementations use this technique to ensure that <I>cout</I> and the other standard streams get constructed properly before execution of any code that uses them. The nifty counter technique requires adding a new class to the header, declaring the object to be initialized, and creating an object of the new class, like this:<P>
<pre>// FOO1.H
class Foo1Counter
{
   static unsigned long Foo1Initialized;
public:
   Foo1Counter()
      {
      if( Foo1Initialized++ == 0 )
         ConstructFoo1();
      }
   ~Foo1Counter()
      {
      if( --Foo1Initialized == 0 )
         DestroyFoo1();
      }
};

static Foo1Counter LocalFoo1Counter;

extern A foo1;</pre>
Every translation unit that needs to know about <I>foo1</I> should include this header. The result is that every such translation unit gets a static object, <I>LocalFoo1Counter</I>, whose constructor checks whether <I>foo1</I> has been constructed, and if it hasn't, constructs it. Similarly, <I>LocalFoo1Counter</I>'s destructor gets rid of <I>foo1</I> when destructors are run for the last translation unit that needs it. This technique avoids the overhead of a function call when <I>foo1</I> is used, but imposes the cost of a constructor and destructor in every translation unit that might use <I>foo1</I>, even when it isn't actually used.<P>
Another drawback to this approach is that it weakens locality of reference during program startup. Every translation unit that might need to reference <I>foo1</I> accesses the counter <I>Foo1Initialized</I> while it is intializing its global objects. On a virtual memory system this means that the page that holds this counter will probably be in memory throughout program startup. If you have several of these in your program these extra pages might well increase the amount of memory needed for program startup beyond the amount of memory physically available in the system. That will force much more paging to disk than otherwise necessary, and program startup may become unacceptably slow.<P>
Finding a simple, general method to control order of initialization has proven very difficult. Several very bright people on the ANSI/ISO C++ Committee have worked on it for three or four years. Every simple solution has had major flaws. One of the most important lessons that I've learned from this is that it's easy to find a solution that handles most of the problem cases; it's very hard to find one that handles them all. And handling <I>most</I> of the cases may be worse than not doing anything, especially if a program can create a "bad" case that's also hard to detect.<P>
<B>Q</B><P>
Speaking as one dissatisfied user of C++ libraries, I would like to see name mangling standards incorporated into the proposed C++ ANSI standards. That way I wouldn't have to keep purchasing different versions of other people's libraries when I change compilers.<P>
<B>A</B><P>
Name mangling is one of the least significant problems involved in creating a single library that can be used with multiple compilers. Consider that the C++ language definition also does not dictate how objects should be laid out in memory, how parameters are passed to functions, how virtual function calls should be implemented, or how virtual base classes should be implemented. As long as different compilers resolve these issues differently, differences in name mangling actually provide a major benefit: they make it much harder to accidentally link a program with a library that uses a different binary layout.<P>
The C language also does not prescribe a standard for name mangling. Most vendors have settled on the convention of adding an underscore at the beginning of a name, but this is by no means required. If a single C library can be used with several different compilers it's because the compiler vendors have tried to use compatible binary formats. In C++ we're still exploring ways of implementing classes efficiently. It's almost certainly too soon to settle on a single way of doing things. Maybe in five years...<P>
<I>The questions above were taken from various online sources, including the Internet and CompuServe. To ask Pete a question about C or C</I>++, <I>send e-mail to </I><I>p</I>b<I>ec</I>k<I>er@wpo</I>.b<I>orla</I>n<I>d.co</I>m, <I>use subject line: Questions and Answers; or write to Pete Becker, C/C</I>++ <I>Users Journal, 1601 W. 23rd St., Ste. 200, Lawrence, KS 66046.</I><P>
</BLOCKQUOTE>
</BODY>
</HTML>
