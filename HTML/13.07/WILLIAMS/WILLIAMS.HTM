

<HTML>
<HEAD>

<TITLE>July 1995/Testing Sort Functions</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjul.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Software Tools</FONT></H2>

<hr><h2 align="center"><font color="#800000">Testing Sort Functions<A name="00E2_0087"><A name="00E2_0087"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="00E2_0000"><A name="00E2_0000">K. B. Williams</font></h3><hr><blockquote><P>
<P><i><A name="00E2_0000"><A name="00E2_0000">K. B. Williams received a B.A. in Mathematics from California State University, Sacramento, in 1955. He is a veteran of forty years in the scientific applications programming trenches and is the founder of King Baker Enterprises, of Stillwater, Oklahoma. He consults in applied numerical techniques. He can be reached at 802 South Ridge Drive, Stillwater, OK 74074, or via e-mail at Kbwms@aol.com.</i></P><P>
<h4><FONT COLOR="#000080"><A name="00E2_0088">Introduction<A name="00E2_0088"></FONT></h4></P>
Sort user: beware. If you plan to use a sort function, what do you know about its performance? If you are uncertain or ignorant you could be suffering your career ship to go upon rocks and shoals. This article presents a program that subjects a sort function of your choosing to a variety of test targets. Its output consists of activity counts and timing data. The activity counts include numbers of comparisons required on each sort target and, when the sort function source is available, numbers of exchanges. (Counting exchanges requires insertion of a software "probe" into your sort function.)<P>
This program is the product of years of bitter experience with incautious implementations of Quicksort. Even C.A.R. Hoare, who invented Quicksort, didn't get it right [<a href="#1">1</a>, <a href="#2">2</a>]. In 1982, I wrote my first C version of Quicksort, using a mid-element pivot strategy. I used this strategy on the advice of <I>Software Tools</I> [<a href="#3">3</a>, p. 116] which warned that "pivoting on the end element is a bad thing to do." The early versions of my test program tested Quicksort only on three targets: random-uniform, already-sorted, and reverse-sorted.<P>
I soon added first-item-out-of-order to the list of targets. This happened after I nearly lost the friendship of a valued colleague when I recommended Quicksort but forgot the caveats. He was using two-way merge sort, which requires 2*N memory locations to sort N items, and was running short of memory. The day after he tried his new Quicksort I got an earful of invective. His application involved adding small amounts of data to an already-sorted list of several thousand items. This is just the thing for insertion sort, totally wrong for a poorly-implemented Quicksort. (For guidelines in implementing a good Quicksort, consult Sedgewick <a href="#8">[8]</a>.)<P>
Over the years I've added new targets to the test program and included additional sort functions in the software package. The principle test function, <I>tstsort</I>, appears in <A href="list1.htm">Listing 1</a>.
 The entire source for this utility, with included C source files, runs to about 1,000 lines &#151; too long to list here, but it's available on this month's code disk. The utility has grown up primarily under Microsoft C; the most recent is C/C++ Version 7.0. Unfortunately, I have been unable to compile it with Borland C++.<P>
The software on the code disk includes ten sort functions, including four Quicksorts and one each of Shellsort <a href="#4">[4]</a>, Heapsort [<a href="#5">5</a> &amp; <a href="#6">6</a>], Two-Way Merge Sort <a href="#7">[7]</a>, Bubble Sort, Insertion Sort, and Selection Sort. I've tested seven of these functions extensively using <I>tstsort</I>. The results appear in a later section, "Sample Test Results."<P>
<h4><FONT COLOR="#000080"><A name="00E2_0089">Description Of Test Program<A name="00E2_0089"></FONT></h4></P>
A sort-test program as envisioned here consists of the following:<P>
1.     A function <I>tstsort</I>, that grinds out test targets, calls the sort function under test, and prints performance statistics.<P>
2.     A <I>main</I> function (and possible satellite functions) that invokes function <I>tstsort</I>.<P>
To build the test program you link <I>tstsort</I> with <I>main</I>.<P>
<h4><FONT COLOR="#000080"><A name="00E2_008A">Function <B><I>tstsort</I><A name="00E2_008A"></B></FONT></h4></P>
Function <I>tstsort</I> resides with its local functions in source file <I>tstsort.c</I>. (<A href="list1.htm">Listing 1</a>
shows function <I>tstsort</I> only; the complete file is on the code disk.) This file contains a suite of ten target generators that can be used to verify the performance of virtually any sorting function. You must, however, arrange the sort function under test to use the same argument list as the standard library function, <I>qsort</I>. The test suite will generate the sort targets shown in <A href="tab1.htm">Table 1</a>.
 The code for one of the more interesting generators, Reverse-Sorted-by-Halves, appears in <A href="list2.htm">Listing 2</a>.
<P>
To call <I>tstsort</I>, the main program passes to it a pointer-to-struct of type <I>SORT_TEST_STRU</I>. The definition of <I>SORT_TEST_STRU</I> appears near the end of <A href="list3.htm">Listing 3</a>.
 This structure provides essential parameters to <I>tstsort</I>, including the address of the sort function under test, and command-line parameters. The main program that calls <I>tstsort</I> must therefore be able to accept command-line arguments.<P>
An example of a feature that has outlived its usefulness is member <I>OKCodes</I> in data type <I>SORT_TEST_STRU</I>. It holds a string of character codes that tell <I>tstsort</I> which targets to use (codes listed in <A href="tab1.htm">Table 1</a>)
. At one time some of the sort targets were just too large or complex for the sort function under test. If <I>OKCodes</I> is assigned either a null pointer or an empty string, tstsort will use all sort targets.<P>
<A href="list4.htm">Listing 4</a>
shows a program that tests Microsoft's <I>qsort</I>. All <I>main</I> needs to do is fill in the blanks, so to speak, then turn the dirty work over to <I>tstsort. main</I>'s parameter list must receive the standard command-line arguments. These arguments are passed to <I>tstsort</I> via its <I>struct</I> argument.<P>
To test your own sort function, tack <I>main</I> onto it. When you get everything put together here is what you have:<P>
<pre>Your <I>main</I>
 tstsort
   &amp;
 <I>friends</I>
sort under
   test</pre>
The code disk contains twelve sort drivers. Ten consist of a sort function with a <I>main</I> appended. These are shown in <A href="tab2.htm">Table 2</a>.
 The other two drivers contain only function <I>main</I>, relying as they do upon Borland's and Microsoft's native <I>qsort</I> functions.<P>
A makefile accompanies the program source files on the code disk. If you make a change to one of the source program files, just enter<P>
<pre>nmake</pre>
at the command line and wait. Function <I>tstsort</I> drives each sort function under test using test targets that can be up to 65,535 <I>unsigned long</I> elements in length. Therefore, programs are compiled using the Microsoft C compiler's huge model. The command-line arguments for invoking the compiler are geared for C/C++ version 7.0.<P>
<h4><FONT COLOR="#000080"><A name="00E2_008B">Running the Test Program<A name="00E2_008B"></FONT></h4></P>
The test program has a simple command-line interface. You invoke the program by typing the name of the program that calls <I>tstsort</I>, followed by arguments. These arguments enable you to control a few test parameters. For example, the test program typically sorts multiple instances of each target type. Successive instances increase in size, from a starting to a stopping size that you specify. This enables you to plot sort function performance vs. target size. Other command-line parameters let you control which target types to use, and whether or not to employ a millisecond timer. If you type &lt;<I>sortname</I>&gt; with no parameters you get a quick set of usage instructions, where &lt;sortname&gt; is the name of your executabale program. Instructions for using the command-line interface are included on the code disk.<P>
Function <I>tstsort</I> produces two kinds of test outputs &#151; an activity recap and plot-timing data. Activity recaps are printed on <I>stderr</I> and contain the following data:<P>
<UL><li>range of sort targets requested</li>
<li>name of sort function under test</li>
<li>setting of Plot-Timer option</li>
<li>one or more sets of exchange/comparison counts, one for each suite in the range of sort targets</li>
<li>name and command-line abbreviation of each target</li>
<li>running time for each suite of targets</li>
<li>total running time</li></UL>
<I>tstsort</I> prints an activity recap for each target and for each suite of targets.<P>
<I>tstsort</I> produces plot-timing data when the millesecond timer is enabled from the command line. Plot-timing data goes to <I>stdout.</I><P>
<h4><FONT COLOR="#000080"><A name="00E2_008C">Sample Test Results<A name="00E2_008C"></FONT></h4></P>
When I ran tests on the candidate sort functions, I wanted enough data to mean something, so I ran the functions at or near the upper range of target size. I selected a size of 50,000. Some of the sort utilities took an inordinate amount of time and one wouldn't run at all. I ran the full suite on eight of the candidates and estimated the time on the ninth. I also made runs on selected targets in the suite, all with a target size of 50,000 items.<P>
<A href="tab3.htm">Table 3</a>
shows the total execution time required to sort 50,000 four-byte items over all target types. I could not run Borland Quicksort on targets larger than 16,384 four-byte items so I had to estimate the time.<P>
<A href="tab4.htm">Table 4</a>
shows performance statistics to sort 50,000 four-byte items over one target type, random-uniform data.<P>
On data that are not random, quite another story emerges. For example, the performance figures to sort 50,000 four-byte items of reverse-sorted-by-halves data are as shown in <A href="tab5.htm">Table 5</a>.
<P>
To make some sense of all this, I provide an analysis of the various sort functions employed:<P>
<h4><FONT COLOR="#000080"><A name="00E2_008D">Two-Way Merge Sort<A name="00E2_008D"></FONT></h4></P>
I threw in this sort function for grins. It is my translation of D.E. Knuth's Algorithm S (Straight two-way merge sort) [<a href="#2">2</a>, p. 11]. My implementation is not coded efficiently so the stated running time is bloated; my only interest was comparing its efficiency with other algorithms.<P>
Two-way merge sort is a solid (stodgy but guaranteed) O(NLgN) algorithm, which means that its timing performance is proportional to N times the binary logarithm of N. (So, for that matter, is Heapsort [<a href="#5">5</a>, <a href="#3">3</a>].) Two-way merge sorting requires a companion storage area the size of the original sort target. This requirement frustrated early computer users and led to a flurry of development papers on sorting in the 1950s and early 1960s.<P>
Note that in both single-target runs Knuth's Two-Way Merge Sort uses the least number of comparisons. Keep in mind that the 800,000 <I>exchanges</I> tabulated are not really exchanges, but represent moves of the data from area to area, whereas each exchange (a.k.a. swap) used by the other methods requires three moves of the data.<P>
<h4><FONT COLOR="#000080"><A name="00E2_008E">Fat-Pivot Quicksort<A name="00E2_008E"></FONT></h4></P>
Fat-Pivot Quicksort uses fat-pivot detection [<a href="#3">3</a>, p. 116] and median-of-three pivoting [<a href="#8">8</a>, p. 186] plus sifting (Insertion Sort) on small segments as suggested by C.A.R Hoare [<a href="#9">9</a>, p. 11] and Knuth [<a href="#7">7</a>, p. 116]. Its behavior on the 50,000 item test suite is proportional to 0.6NLgN. This is not a wholly accurate measure because the fat-pivot algorithm especially favors four of the targets (Q, E, A, B). On the other six targets its behavior is proportional to 0.95NLgN.<P>
<h4><FONT COLOR="#000080"><A name="00E2_008F">Sedgewick Quicksort<A name="00E2_008F"></FONT></h4></P>
Sedgewick's Quicksort performance was a pleasant surprise. His article <a href="#8">[8]</a> showed that it should perform well and it does. Sedgewick's Quicksort is a solid O(NLgN) procedure. Comparison-plus-exchange counts run at about 13.3NLgN on a run of 10,000 items in the test suite and 13.99NLgN for 50,000 items. The timing factor on the 50,000-item case is 80 &micro;sec/item which yields an estimate of 10.63 seconds for the run of 10,000 items &#151; very close to the actual time of 10.49 seconds.<P>
<h4><FONT COLOR="#000080"><A name="00E2_0090">Hoare's Quicksort<A name="00E2_0090"></FONT></h4></P>
This implementation of Hoare's Quicksort might have brought tears to its originator. It performs credibly on six targets (R, S, V, H, F, T), with a timing behavior of O(NLgN). The other four targets (Q, E, A, B) present quite another story, where its behavior is O(N<SUP>2</SUP>) with a vengeance.<P>
<h4><FONT COLOR="#000080"><A name="00E2_0091">My Standard C Quicksort<A name="00E2_0091"></FONT></h4></P>
The timing data (<A href="tab3.htm">Table 3</a>)
 for my version of Standard C Quicksort <a href="#10">[10]</a> illustrates how poorly this implementation fares. The execution times are longer than the original version by about six percent.<P>
The timing behavior for this implementation is roughly proportional to 3.025N<SUP>2</SUP> + 4.3NLgN on the test suite. It exhibits poor performance, O(N<SUP>2</SUP>), on targets S, V, F, T, Q, E, A, and B.<P>
Of the remaining two targets, My Standard C Quicksort showed fair performance on the random-uniform target (as previously shown) and sub-par performance on the Reverse-Sorted-by-Halves target. This is clearly the poorest performing Quicksort of the lot &#151; at least on this test suite &#151; and should be avoided.<P>
<h4><FONT COLOR="#000080"><A name="00E2_0092">Microsoft Quicksort<A name="00E2_0092"></FONT></h4></P>
Microsoft's Quicksort on the test suite exhibits behavior roughly proportional to (61/36)N<SUP>2</SUP> + 4NLgN + 6N. Using a timing factor of 4.5 &micro;sec/item closely approximates the time required in seconds on my 33 MHz 80486 CPU. This is another utility that should be avoided until the known O(N<SUP>2</SUP>) behavior can be eliminated. This utility performed poorly, i.e. exhibited O(N<SUP>2</SUP>) behavior, on targets V, F, T, A, and <B> </B>B.<P>
<h4><FONT COLOR="#000080"><A name="00E2_0093">Borland Quicksort<A name="00E2_0093"></FONT></h4></P>
The timing for Borland Quicksort is an estimate based on runs of three populations &#151; 5,000, 10,000, and 15,000. It exhibits behavior on the test suite proportional to (N<SUP>2</SUP>)/8 + 7NLgN + 6N. The O(N<SUP>2</SUP>) behavior stems from its inability to handle the sort target First-Item-Out-of-Order (F) efficiently. The timing factor used for Microsoft's Quicksort (4.5 &micro;secs/item) did a credible job of estimating the running times on the three populations. I could not compile the test programs under Borland C++ to sort targets greater than 16,384 four-byte items despite using their compiler option for huge data, -<I>mh</I>.<P>
<h4><FONT COLOR="#000080"><A name="00E2_0094">Heapsort<A name="00E2_0094"></FONT></h4></P>
The performance of Heapsort on the entire test suite is proportional to 21NLgN. The timing factor for this algorithm is about 6.94 &micro;secs/item based on the run made on 50,000 items. These parameters predict that Heapsort running the suite on 10,000 items will take 19.4 seconds. This is close to the actual time of 19.6 seconds.<P>
<h4><FONT COLOR="#000080"><A name="00E2_0095">Shellsort<A name="00E2_0095"></FONT></h4></P>
The Shellsort algorithm as implemented here is guaranteed to have a running time factor no greater than O(N<SUP>1.5</SUP>) [<a href="#11">11</a>, pp. 17-26]. That is, the algorithm has an asymptotic upper bound proportional to N<SUP>1.5</SUP>. My tests show that it runs at about O(N<SUP>1.272</SUP>) on random data. (Shell estimated the timing to be proportional to N<SUP>1.226</SUP> on his data [<a href="#4">4</a>, p. 3].) But on other kinds of data I am at a loss. And I am not alone [<a href="#7">7</a>, p. 91; 12, p. 110]. The controlling mechanism is the gap-setting algorithm that seems to make Shellsort work less efficiently for some starting gap sizes (Shellsort works by breaking the target into subsets, separated by "gaps."). This is evident, for example, when the test program runs Shellsort on a suite with 29,519 items and then on 29,520 items. The starting gap for 29,519 items is 1,093 whereas the starting gap for 29,520 items is 3,280. Shellsort performs much better on the latter.<P>
The Shellsort function can be compiled to use one of two kinds of diminishing gap increments: (2<SUP>k</SUP> - 1) or (3<SUP>k</SUP> - 1)/2. My tests indicate that the preferred increment sequence overall is produced by (3<SUP>k</SUP> - 1)/2 despite the anomalous behavior just described.<P>
<h4><FONT COLOR="#000080"><A name="00E2_0096">Conclusions and Recommendations<A name="00E2_0096"></FONT></h4></P>
This program can help applications programmers determine whether the sort function provided in the runtime library performs adequately on a variety of sort targets. For example, this program reveals that Microsoft's <I>qsort</I> exhibits O(N2) performance in five of the ten tests. Borland's <I>qsort,</I> claiming a median-of-three implementation, exhibits O(N2) behavior on one of the tests. Judging from these tests. Borland's <I>qsort</I> also employs "fat-pivot" detection.<P>
This program can be invaluable to developers of runtime libraries who are unable to spend the time to perform extensive tests that a sort function demands.<P>
<I>tstsort's</I> targets come from a variety of sources. The traditional ones are Random-Uniform, Already-Sorted, Reverse-Sorted, Reverse-Sorted-by-Halves, and All-Items-Equal. Each of the others I either stumbled over in practice, such as First-Item-Out-of-Order and Boresight-Simulation, or dreamed up because I knew that one of the sort methods would struggle over it. You can put your own sort target in the arsenal either by replacing one that exists or by adding your own.<P>
Quicksort, properly implemented is a high-speed sorting algorithm. Its behavior is still O(N<SUP>2</SUP>) in the worst case but a carefully implemented algorithm should behave this way very rarely. Users who do not want to bet the farm on a contingency of "very rarely" should fall back on ultra-reliable Heapsort or Shellsort.<P>
<h4>References</FONT></h4></P>
<a name="1"></a>[1]  C.A.R Hoare. "Algorithm 63: Partition," and "Algorithm 64: Quicksort," <I>Communications of the ACM 4</I> July: 1961, p. 32.<P>
<a name="2"></a>[2]  C.A.R Hoare. "Quicksort," <I>Computer Journal 5</I> April: 1962, pp. 10-15.<P>
<a name="3"></a>[3]  Brian W. Kernighan and P. J. Plauger. <I>Software Tools</I> (Addison-Wesley, 1976)<P>
<a name="4"></a>[4]  Donald L. Shell. "A High-Speed Sorting Procedure," <I>Communications of the ACM 2</I> July: 1959, 604.<P>
<a name="5"></a>[5]  J.W.J. Williams. "Algorithm 232 (HEAPSORT)," <I>Communications of the ACM 7</I> June: 1964, pp. 347-348.<P>
<a name="6"></a>[6]  Robert W. Floyd. "Algorithm 245 (TREESORT 3)," <I>Communications of the ACM 7</I>, December: 1964, p. 701.<P>
<a name="7"></a>[7]  Donald E. Knuth. <I>The Art of Computer Programming, Vol. 3: Sorting and Searching</I> (Addison-Wesley, 1973)<P>
<a name="8"></a>[8]  Robert Sedgewick. "Quicksort with equal keys," <I>SIAM Journal Computing 6</I> June: 1977, pp. 240-267.<P>
<a name="9"></a>[9]  Thomas N. Hibbard. "An Empirical Study of Minimal Storage Sorting," <I> Communications of the ACM 6</I> May: 1963, pp. 206-213.<P>
<a name="10"></a>[10]  P.J. Plauger. <I>The Standard C Library</I> (Prentice Hall, 1992)<P>
<a name="11"></a>[11]  Vaughan Ronald Pratt. <I>Shellsort and Sorting Networks, Ph.D. Thesis</I> (Garland Publishing, Inc., New York, 1979)<P>
<a name="12"></a>[12]  Robert Sedgewick. <I>Algorithms in C</I> (Addison-Wesley, 1990)<P>
<h4><FONT COLOR="#000080"><A name="00E2_0097">Further Reading<A name="00E2_0097"></FONT></h4></P>
Alfred V. Aho, Brian W. Kernighan, and Peter W. Weinberger. <I>The Awk Programming Language</I> (Addison-Wesley, 1988)<P>
Thomas E. Cormen, Charles E. Leiserson, and Ronald L. Rivest. <I>Introduction to Algorithms</I> (McGraw-Hill, 1990)<P>
Robert W. Floyd. "Algorithm 113 (TREESORT)," <I>Communications of the ACM 5</I> August: 1962, p. 434.<P>
A.F. Kaupe. "Algorithms 143 and 144 (TREESORT)," <I>Communications of the ACM 5</I> December: 1962, p. 604.<P>
Richard C. Singleton. "Algorithm 347: An Efficient Algorithm For Sorting With Minimal Storage (SORT)," <I>Communications of the ACM 12,</I> March: 1969, pp. 185-187.<P>

<h4><a href="../../../source/1995/jul95/williams.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
