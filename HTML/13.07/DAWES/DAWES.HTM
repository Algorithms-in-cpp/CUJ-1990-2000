

<HTML>
<HEAD>

<TITLE>July 1995/You Can Count On It</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjul.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Software Tools</FONT></H2>

<hr><h2 align="center"><font color="#800000">You Can Count On It<A name="00E0_0085"><A name="00E0_0085"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="00E0_0000"><A name="00E0_0000">Beman Dawes</font></h3><hr><blockquote><P>
<P><i><A name="00E0_0000"><A name="00E0_0000">Beman Dawes has been an independent software consultant for fifteen years, specializing in libraries to support geographic applications. He is a voting member of X3J16, the ANSI C++ Standards Committee. You can reach him at (804) 787-8228 or via the Internet at beman@dawes.win.net.</i></P><P>
<h4><FONT COLOR="#000080"><A name="00E0_0086">Introduction<A name="00E0_0086"></FONT></h4></P>
The Standard Template Library (STL), developed by Alex Stepanov and Meng Lee of Hewlett-Packard, became part of the draft C++ Standard in July, 1994, when the joint ANSI/ISO C++ Standards Committee voted to add the STL to the Standard C++ library. The STL includes generic algorithms, containers, iterators, and other goodies. It can be extended with user-defined components. Even though the STL proposal surfaced uncomfortably late in the C++ standardization process, committee members felt that the long-term benefits of a much more powerflibrary overwhelmed any short-term committee discomfort.<P>
The Standard Template Library is hot technology. Initial skepticism on the C++ committee has turned to outright admiration. Vendors are announcing and shipping STL-related products. Well known authors are writing STL articles and books.<P>
Meanwhile, back in the everyday world where I write software for a living, a ten-year old C command-line utility program called Count needed an update. Count simply reads a file and keeps a frequency count of each value that appears in a specified field. At end of file, the values and frequency counts are displayed on the standard output ordered by value. Two limitations in the old C code needed fixing &#151; poor performance on sorted input and lack of frequency-ordered output.<P>
A rewrite of Count seemed like a good project to gain practical STL programming experience. This article examines the development of a C++ version of Count using the STL.<P>
<h4><FONT COLOR="#000080"><A name="00E0_0087">STL Implementations<A name="00E0_0087"></FONT></h4></P>
HP has made a free implementation of the STL available via FTP from <I>butler.hpl.hp.com.</I> The file to download is <I>stl/stl.zip</I> for PC users, or <I>stl/sharfile.Z</I> for the UNIX crowd. A PostScript document describing the STL is included.<P>
The STL can also be obtained from Modena Software (1-800-MODENA-1) in a product called STL++, which includes a tutorial and sample programs. Modena's implementation is a repackaging of the HP distribution, together with several non-STL classes. [ObjectSpace (1-800-OBJECT-1) has also been advertising their STL &lt;ToolKit&gt; lately. &#151; pjp]<P>
A word of caution here. Some of the details of the the STL are bound to change as the draft C++ Standard matures. For example, the names of header files and member functions may change. Furthermore, the STL is a torture test for template compilation, so a certain amount of working around compiler limitations is to be expected. The code in this article compiles and runs under Borland C++ 4.5 using the HP STL distribution of February 7, 1995. Before compiling, be sure to comment out the two-argument forms of the <I>min</I> and <I>max</I> templates in <I>algobase.h</I>, as described in the HP <I>readme.old</I> file.<P>
<h4><FONT COLOR="#000080"><A name="00E0_0088">Count1<A name="00E0_0088"></FONT></h4></P>
The final version of Count has lots of messy code to deal with command-line arguments and optional features, so I begin with a simple program, Count1, and develop the final program as a series of stepwise refinements. The Count1 program just builds a count of each string value read from the standard input, then displays the counts and strings when end of file is reached. The complete program is given in <A href="list1.htm">Listing 1</a>.
<P>
The STL <I>map</I> class template provides an ordered associative container for unique keys, and so is just what is needed to hold the field values and counts. The field value is the association key. The standard library <I>string</I> class is ideal for the keys since it can handle all the details of memory management. A <I>long</I> holds the count associated with each key.<P>
One of the Standard C++ library innovations introduced by the STL is the specification of time complexity for operations. Insertion, the most time-consuming operation Count1 needs to do on the map, is required to be of logarithmic (or better) complexity. The practical implications of this requirement are that Count's speed should not degrade badly if the input happens to be in some particular order, and that Count's code should be portable to other implementations of the STL without fear of poor performance.<P>
The first interesting line of code in Count1 is a type definition:<P>
<pre>typedef map&lt; string, long,
           less&lt;string&gt; &gt; map_t;</pre>
This defines <I>map_t</I> to be an STL <I>map</I> container with <I>string</I> keys and <I>long</I> values. Providing a typedef with a short name is a coding convention used to avoid repeating the lengthy map type declaration elsewhere in the program.<P>
The map uses <I>less&lt;string&gt;</I>, a templatized function object class, to order the container entries. The map's <I>less&lt;string&gt;</I> template argument isn't needed in theory since the default for the argument is <I>less&lt;Key&gt;</I> where <I>Key</I> is the first template argument. In practice most compilers don't support default template arguments yet, so the argument is required for the time being.<P>
Once <I>main</I> begins execution, the program defines <I>ct_map</I> as the container that will be used to hold the frequency counts, and <I>str</I> as the string that will be used to hold input:<P>
<pre>map_t ct_map;
string str;</pre>
The input string is read, inserted into the <I>ct_map</I> container, and the count incremented in the following loop:<P>
<pre>while ( cin &gt;&gt; str) {
   ct_map.insert(
      map_t::value_type(str, 0L) );
   ++ct_map[str]; // increment the count
   }</pre>
The argument for the <I>insert</I> function deserves a bit of explanation. STL containers like the <I>map</I> class provide a number of type definitions. Nesting a type definition inside a class effectively creates type members similar to the more familiar data and function members. In other words, type definitions allow the <I>map</I> class to export certain type names. The <I>map</I> class definition contains the type definition:<P>
<pre>typedef pair&lt;const Key, T&gt; value_type;</pre>
where <I>Key</I> and <I>T</I> are the first and second template arguments to <I>map</I>, and <I>pair</I> is an STL template class that holds a pair of objects. Thus the <I>insert</I> argument:<P>
<pre>map_t::value_type(str, 0L)</pre>
has the effect of creating <I>a pair&lt;string, long&gt;</I> with the appropriate values for insertion into the map.<P>
Since an STL <I>map</I> container's <I>insert</I> function has no effect if the key already exists, the insert is harmless if the program has already seen the string. If the string is not already present, the count inserted will be zero, so that the count increment works correctly in either case.<P>
Once end of file is reached, the only thing remaining is to display the results:<P>
<pre>for ( map_t::const_iterator it = it != ct_map.end(); ++it )
    { cout &lt;&lt; setw(7) &lt;&lt; (*it).second
          &lt;&lt; "-"     &lt;&lt; (*it).first &lt;&lt;
          endl;
    }</pre>
Iterators are pointer-like objects used to access the contents of containers. Each STL container supplies member functions that return the iterator range for the container. <I>begin</I> returns an iterator that designates the first element. <I>end</I> returns a sentinel iterator designating the end of the range. Both const and non-const iterator type definitions are supplied by the <I>map</I> class.<P>
In this case, the display <I>for</I> statement defines a <I>const_iterator</I> named <I>it</I> to use in stepping through the container. (This idiom for processing a range of iterators is essentially universal throughout the STL.) Dereferencing a <I>map_t::const_iterator</I> yields a <I>map_t::value_type</I>, which in turn is defined as an STL <I>pair</I> class template, and so allows access to the pair members <I>first</I> and <I>second</I> which contain the key and the count respectively.<P>
While iterators are pointer-like, they may not actually be pointers. The draft C++ Standard requires that STL iterators support <I>operator*</I> but not necessarily <I>operator-&gt;</I>, so <I>(*it).XXX</I>, rather than <I>it-&gt;XXX</I>, is used to access the container contents. <I>operator-&gt;</I> on iterators is not supported because it would not work for iterators to built-in types, such as <I>int.</I><P>
The explanation of iterators given here is far from complete, since this article is intended to be introductory rather than exhaustive. Luckily, iterators are easy to use even without an exhaustive explanation.<P>
<h4><FONT COLOR="#000080"><A name="00E0_0089">Test Results<A name="00E0_0089"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="00E0_008A">Count1<A name="00E0_008A"></FONT></h4></P>
When Count1 is given the input:<P>
<pre>how much wood could a woodchuck chuck
if a woodchuck could chuck wood</pre>
the program displays:<P>
<pre>   2 - a
   2 - chuck
   2 - could
   1 - how
   1 - if
   1 - much
   2 - wood
   2 - woodchuck</pre>
<h4><FONT COLOR="#000080"><A name="00E0_008B">Count2<A name="00E0_008B"></FONT></h4></P>
The second program, Count2 (see <A href="list2.htm">Listing 2</a>)
, refines Count1 by adding a layer of indirection in two places. Otherwise, Count1 and Count2 have the same functionality. The first indirection is to add a type called <I>long_t</I> which stores a <I>long</I> value and has a default constructor that initializes the value to zero:<P>
<pre>struct long_t {
   long v;
   long_t() : v(0) {}
   };</pre>
This type is used instead of a <I>long</I> for <I>map_t</I>, allowing <I>ct_map</I> insertion to be simplified:<P>
<pre>typedef map&lt; string, long_t,
           less&lt;string&gt; &gt; map_t;
.....
while ( cin &gt;&gt; str ) ++ct_map[str].v;</pre>
This works because the STL <I>map</I> container's <I>operator[]</I> is specified to insert the pair ( <I>key, T()</I> ) if the key is not found. The type <I>T </I>must have a default constructor which sets the value to zero, and that's why <I>long_t</I> rather than just plain <I>long</I> is required. The C++ standards committee has now specified that <I>T()</I> generate a zero value for built-in types, so <I>long_t</I> will no longer be needed once compilers catch up to the standard.<P>
Count2's second refinement is to add a function to display the results:<P>
<pre>static inline int
show_m( const map_t::value_type&amp; x )
    { cout &lt;&lt; setw(7) &lt;&lt; x.second.v
          &lt;&lt; "-"    &lt;&lt; x.first &lt;&lt;
          endl;
    }</pre>
This allows the replacement of the display <I>for</I> loop with a simpler call to the STL <I>for_each</I> algorithm. STL algorithms are implemented as function templates. The <I>for_each</I> algorithm calls the <I>show_m</I> function with each item in an STL iterator range:<P>
<pre>for_each( ct_map.begin(), ct_map.end(),
   ptr_fun( show_m ) );</pre>
As is typical of STL algorithms, the first two arguments to the <I>for_each</I> function supply iterators which define the range the algorithm is to be applied to.<P>
STL algorithms that need to call a function don't directly pass the function address as an argument. Instead they pass <I>function objects</I> which provide the desired functionality via an <I>operator()</I> member function.<P>
Passing STL function objects can be more efficient than passing a function address. The reason for this efficiency is that the function object's code gets inlined directly into the calling code. To understand this better, look at a possible implementation of the STL <I>for_each</I> function:<P>
<pre>template &lt;class InputIterator,
        class Function&gt;
   inline void
   for_each(InputIterator first,
           InputIterator last,
           Function func)
      {
      while (first != last)
         func(*first++);
      }</pre>
The call to <I>func</I> is compiled as an inline call to <I>func::operator()</I>. This allows the template code to be completely generic, yet is just as efficient as if hand tailored for a specific data type.<P>
It takes a bit more boilerplate to define a function object than to define a function. The STL <I>ptr_fun</I> function template is used in the Count2 <I>for_each</I> call to painlessly generate the necessary function object boilerplate.<P>
Incidentally, STL algorithms work on iterator ranges, and STL iterator range requirements are met by pointers to regular C++ arrays as well as iterators to more exotic containers. Thus <I>for_each</I> and other STL algorithms work fine on C++ arrays, using regular C++ pointers as the iterators.<P>
<h4><FONT COLOR="#000080"><A name="00E0_008C">Count3<A name="00E0_008C"></FONT></h4></P>
Count3 (<A href="list3.htm">Listing 3</a>)
 refines Count2 by displaying the results ordered by frequency count, in addition to the display ordered by string value. The strategy is to create the map as before, and at end of file copy the map contents to an STL <I>vector</I> container which is easily sorted. The vector is then sorted and the results displayed.<P>
The first addition defines a couple of types:<P>
<pre>struct ct_t {
   string str;
   long_t count;
   };
typedef vector&lt; ct_t &gt; vec_t;</pre>
Like the earlier <I>map_t</I> type definition, <I>vec_t</I> improves program readability by providing a short synonym for the longer type declaration.<P>
It might appear that it would be better to define <I>ct_t</I> as <I>map_t::value_type</I> via a type definition, but this won't work because the first member of the underlying <I>pair&lt;&gt;</I> type is const, and this prevents the <I>vector</I> template from instantiating.<P>
Count3 uses two additional functions to specify descending vector sort order and to display the vector after sorting:<P>
<pre>static inline bool order( const ct_t&amp; x, const ct_t&amp; y )
    { return x.count.v &gt; y.count.v; }

static inline int show_v( const ct_t&amp; x )
    { cout &lt;&lt; setw(7) &lt;&lt; x.count.v
          &lt;&lt;"-" &lt;&lt;x.str &lt;&lt; endl; }</pre>
The code in <I>main</I> is unchanged from Count2 until after the display of the map. Then the vector is defined, sized, and loaded with the contents of the map container:<P>
<pre>vec_t ct_vec;

ct_vec.reserve(ct_map.size() );

for ( map_t::iterator it = ct_map.begin(); it != ct_map.end(); ++it ) {
    ct_t ct;
    ct.str = (*it).first;
    ct.count = (*it).second;
    ct_vec.push_back( ct ); //append
}</pre>
The call to <I>ct_vec.reserve</I> is not strictly necessary since vectors resize automatically as needed. But <I>reserve</I> improves performance by eliminating unnecessary reallocations.<P>
There are several possible ways to copy the contents of the map to the vector. STL containers like <I>vector</I> include constructors which automatically insert an iterator range, but this requires member templates, a feature not implemented by most current compilers. The <I>for</I> loop actually used in Count3 takes a few more lines of code, but is straightforward and doesn't require an advanced compiler.<P>
Once the vector is loaded, sorting is simple using one of the STL sort algorithms:<P>
<pre>stable_sort( ct_vec. begin(), ct_vec.end(),
   ptr_fun( order ) );</pre>
The current implementation of <I>stable_sort</I> has an apparent bug which causes an occasional program crash, so the actual code in <A href="list3.htm">Listing 3</a>
uses the STL <I>sort</I> function instead.<P>
The final Count3 refinement is to display the sorted results:<P>
<pre>cout &lt;&lt; "Ordered by count:" &lt;&lt; endl;
for_each(ct_vec.begin(), ct_vec.end(),
   ptr_fun( show_v ) );</pre>
Here is what the count ordered output looks like for the test file:<P>
<pre>Ordered by count:
   2 - a
   2 - chuck
   2 - could
   2 - wood
   2 - woodchuck
   1 - how
   1 - if
   1 - much</pre>
<h4><FONT COLOR="#000080"><A name="00E0_008D">Count<A name="00E0_008D"></FONT></h4></P>
The final Count program (<A href="list4.htm">Listing 4</a>)
 adds a lot of code to handle command-line arguments, extract the field to be counted from input lines, and deal with errors. Yet the critical code that actually does the counting is almost unchanged from the Count3 program.<P>
The STL provided exactly the functionality needed for Count, and does so in very few lines of code. Design, coding, and testing all proceeded smoothly. I did get sidetracked several times trying out different approaches, such as <I>for_each</I> functions versus <I>for</I> statements, but these diversions tended to be educational rather than frustrating, since each approach really did work.<P>
<h4><FONT COLOR="#000080"><A name="00E0_008E">Conclusion<A name="00E0_008E"></FONT></h4></P>
The project to create a C++ version of Count encountered no serious difficulty in applying the STL to a real program. Although the STL can be initially intimidating because it requires learning a number of unfamiliar concepts and mastering the details of lots of library components, when I actually started to write code, I found the STL interfaces to be easy to use. I made a few coding errors, but these were all detected at compile time. The compilation error messages were easily fixed, and then each program ran correctly on the first test.<P>
One of the really nice aspects of the STL is that its interfaces are rich enough that there are several ways to attack any given task. This richness makes the STL more comfortable to use than libraries which are so brittle that users must do things a certain way or not at all.<P>
It is hard to fully appreciate the power and usefulness of the STL just by reading about it. So download a copy (or buy a commercial version) and try it out on your own projects. Almost all C++ programmers are going to want to learn at least the basics of this important addition to Standard C++.<P>
<h4>References</FONT></h4></P>
Alexander Stepanov and Meng Lee. <I>The Standard Template Library</I>, Hewlett-Packard Laboratories, Palo Alto, February 7, 1995. (Included in FTP distribution.)<P>

<h4><a href="../../../source/1995/jul95/dawes.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
