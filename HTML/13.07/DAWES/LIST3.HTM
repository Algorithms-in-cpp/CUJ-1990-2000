<HTML><HEAD>
<TITLE>July 1995/You Can Count On It/Listing 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 3 <I>Count3 program</I></A></h4>
<pre>#include &lt;cstring.h&gt;
#include &lt;iomanip.h&gt;
#include &lt;algo.h&gt;
#include &lt;map.h&gt;
#include &lt;vector.h&gt;

struct long_t { long v; long_t() : v(O) {} {;

typedef map&lt; string, long_t, less&lt;string&gt; &gt; map_t:
struct ct_t { string str; long_t count: };
typedef vector&lt; ct_t &gt;                      vec_t;

static inline int show_m( const map_t::value_type&amp; x )
  { cout &lt;&lt; setw(7) &lt;&lt; x.second.v &lt;&lt; " - " &lt;&lt; x.first &lt;&lt; endl; }

static inline bool order( const ct_t&amp; x, const ct_t&amp; y )
  { return x.count.v &gt; y.count.v; }

static inline int show_v( const ct_t&amp; x )
  { cout &lt;&lt; setw(7) &lt;&lt; x.count.v &lt;&lt; " - "   &lt;&lt; x.str &lt;&lt; endl; }

int main() {

  string str;
  map_t ct_map:

  while ( cin &gt;&gt; str ) ++ct_map[str].v;

  cout &lt;&lt; "Ordered by string:" &lt;&lt; endl;
  for_each( ct_map.begin(), ct_map.end(), ptr_fun( show_m ) );

  vec_t ct_vec;

  ct_vec.reserve(ct_map.size() );

  for ( map_t::iterator it = ct_map.begin();
       it != ct_map.end(); ++it ) {
    ct_t ct;
    ct.str = (*it).first;
    ct.count = (*it).second;
    ct_vec.push_back( ct );
    }

// stable_sort( ct_vec.begin(), ct_vec.end(), ptr_fun( order ) );
  sort(ct_vec.begin(), ct_vec.end(), ptr_fun( order ) );

  cout &lt;&lt; "Ordered by count:" &lt;&lt; endl;
  for_each( ct_vec.begin(), ct_vec.end(), ptr_fun( show_v ) );

  return EXIT_SUCCESS;
  }
// End of File
</pre>
</BODY>
</HTML>
