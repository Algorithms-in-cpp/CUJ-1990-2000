

<HTML>
<HEAD>

<TITLE>July 1995/Stepping Up To C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjul.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Stepping Up To C++<A name="00F2_0095"><A name="00F2_0095"></font></h2><P>
<h3 align="center"><A name="00F2_0000"><A name="00F2_0000">Other Assorted Changes, Part 1</h3><P>
<h3 align="center"><font color="#800000">Dan Saks</font></h3><hr><blockquote><P>
<P><i><A name="00F2_0000"><A name="00F2_0000">Dan Saks is the president of Saks &amp;  Associates, which offers consulting and training in C++ and C. He is secretary of the ANSI and ISO C++ committees. Dan is coauthor of C++ Programming Guidelines, and codeveloper of the Plum Hall Validation Suit for C++ (both with Thomas Plum). You can reach him at 393 Leander Dr., Springfield OH, 45504-4906, by phone at (513)324-3601, or electronically at dsaks@wittenberg.edu.</i></P><P>
Last month, I started describing those features of C++ that have different behaviors under the current draft standard than they do in the Annotated C++ Reference Manual (ARM) <a href="#1">[1]</a>. In particular, last month's column detailed the changes in the scope rules:<P>
<UL><li>Conditional statements now introduce a new block scope.</li>
<li>The scope of a declaration in a <I>for-init-statement</I> is now restricted to the <I>for-statement</I>.</li>
<li>The "rewriting" rule and the rule limiting the context sensitivity of class member declarations have been replaced by comprehensive scope rules for class member declarations.</li>
<li>The point of declaration for an enumerator is now immediately after its <I>enumerator-definition</I>.</li></UL>
(See "Stepping Up to C++: Changes in Scope Rules," <I>CUJ</I>, June, 1995 for details.)<P>
This month's column describes more of the language changes. Bear in mind that this list of changes does not include extensions to the C++ language. For descriptions of the extensions, refer to my earlier columns ("Stepping Up to C++," January through May, 1995).<P>
<h4><FONT COLOR="#000080"><A name="00F2_0096">Member Access Expressions<A name="00F2_0096"></FONT></h4></P>
A <I>member access expression</I> is an expression that uses a . (dot) or -&gt; (arrow) operator to access a class member. For example, <I>a.m</I> and <I>p-&gt;f(x)</I> are both member access expressions.<P>
The left-hand side of a member access expression can by itself be a non-trivial expression, as in <I>a[f(i)].m</I> or <I>(++p)-&gt;g(x).</I> As you might expect, a program normally evaluates the left-hand side of a member access expression to determine the object containing the specified member. However, according to the ARM Section 9.4 [StaticMembers]:<P>
When a static member is accessed through a member access operator, the expression on the left side of the . or -&gt; is not evaluated.<P>
For example, if <I>m</I> is a static data member, then according to the ARM, <I>a[f(i)].m</I> does not call <I>f(i)</I>. Similarly, if <I>g</I> is a static member function, then <I>(++p)-&gt;g(x)</I> does not increment <I>p</I>.<P>
Although this special rule for accessing static members eliminates some potentially inefficient code, the committees decided it led to inconsistent, and potentially surprising, results. Therefore, they eliminated that sentence from the draft. According to the current draft, if a program evaluates a member access expression, it must evaluate the expression on the left-hand side of the <I>.</I> or <I>-&gt;</I> operator.<P>
If this rule change makes sense to you already, and you know how to work around it, you can skip to the next section. If not, stay with me. The key insight comes from understanding static class members, which I'll explain with the following example.<P>
Suppose your application uses a class called <I>widget</I>, and you want to track the number of <I>widget</I> objects in existence at any given time in the execution of your program. Simply define a counter, initialized to zero, that counts the number of objects. Then, add a statement to each <I>widget</I> constructor to increment the counter, as in<P>
<pre>widget::widget()
   {
   ++counter;
   // initialize the widget
   }</pre>
You should also add a statement to the <I>widget</I> destructor to decrement the counter, as in<P>
<pre>widget::~widget()
   {
   // discard the widget's resources
   --counter;
   }</pre>
Where do you declare the counter? You might try declaring the counter as an ordinary data member of the <I>widget</I> class:<P>
<pre>class widget
   {
public:
   widget();
   ~widget();
   // other public members...
private:
   unsigned counter;
   // other private members ...
   };</pre>
but this just won't work. You get a separate <I>counter</I> member in each <I>widget</I> object (probably all set to one).<P>
The counter variable must be statically allocated and separate from every widget object so there's one and only one counter for all widget objects. Declaring the counter as a global variable will work, but you run the risk that the name of the counter may conflict with some other global name elsewhere in the program. Also, if it's a global variable, you can't prevent parts of the program outside the <I>widget</I> class from accessing the counter directly. As always, global variables weaken abstractions and you should avoid them.<P>
Static data members solve this dilemma. A static data member is in the scope of its class and is subject to access control (it can be <I>private</I>). However, a static data member is unlike an ordinary data member in that it is not a part of each class object; there's only one copy of the static member, and it is separate from every object. That one copy has static storage duration and external linkage, so that all objects of the class type share the same static member.<P>
For example,<P>
<pre>class widget
   {
public:
   widget();
   ~widget();
   // other public members ...
private:
   static unsigned counter;
   // other private members ...
   };</pre>
declares <I>counter</I> as a static member of <I>widget</I>. The fully-qualified name for the counter is <I>widget: :counter,</I> but the <I>widget</I> constructor and destructor (and every other <I>widget</I> member function) can refer to it as just plain <I>counter</I>.<P>
The declaration of a static data member inside a class is only a declaration. The definition (and initialization) of the static member appears elsewhere, typically in a source file along with other members of the class. For <I>widget::counter</I>, the definition looks like<P>
<pre>unsigned widget::counter= 0;</pre>
If the counter were public, non-member functions could access it using its fully-qualified name, <I>widget::counter</I>, as in<P>
<pre>cout &lt;&lt; "# of widgets = &lt;&lt; widget::counter;</pre>
But then non-member functions could also modify <I>widget::counter</I> and invalidate the count. Thus, you should declare the counter <I>private</I>, and write a public member function, <I>how_many</I>, that returns the current counter:<P>
<pre>unsigned widget::how_many()
   {
   return counter;
   }</pre>
Hence, a non-member function can only inspect the counter by calling <I>how_many</I>. This protects <I>widget::counter</I> from unauthorized access.<P>
However, this implementation of <I>how_many</I> is less than perfect. The problem is that <I>how_many</I> is an ordinary member function. An ordinary member functions always has a hidden extra argument &#151; the object addressed by its <I>this</I> pointer. Therefore, a call to <I>how_many</I> must be of the form <I>w.how_many()</I> (where <I>w</I> is a <I>widget</I>) or <I>p-&gt;how_many()</I>(where <I>p</I> is a pointer to a <I>widget</I>). But <I>how_many</I> doesn't need a <I>this</I> pointer to locate <I>widget::count</I> because <I>widget::count</I> is not in a widget object.<P>
In fact, if <I>how_many</I> is an ordinary member function, the logic for testing that there are no widgets becomes a bit contorted:<P>
<pre>{
widget w;
if (w.how_many() == 1)
   // there weren't any widgets
// w goes out of scope; destroy it
}</pre>
You must declare a <I>widget</I> object, say <I>w</I>, just so you can call <I>w.how_many()</I>, even though <I>how_many</I> ignores the object. Furthermore, declaring a <I>widget</I> increments the counter, so rather than test for no widgets, you must test for one.<P>
These problems go away if you declare <I>how_many</I> as a static member function:<P>
<pre>class widget
   {
public:
   widget();
   ~widget();
   static unsigned how_many();
   // other public members ...
private:
   static unsigned counter;
   // other private members ...
   };</pre>
A static member function does not have a <I>this</I> pointer, so it cannot access ordinary data members, but it can access static data members. Thus, you don't need a <I>widget</I> object to call <I>how_many</I>. You simply call it by its full name, as in<P>
<pre>cout &lt;&lt; "# of widgets ="
   &lt;&lt; widget::how_many();</pre>
or in<P>
<pre>if (widget::how_many() == 0)
   // there really aren't any widgets</pre>
If you wish, you can still call <I>w.how_many()</I> (where <I>w</I> is a <I>widget</I> object) or <I>p-&gt;howmany()</I> (where <I>p</I> is a pointer to a <I>widget</I> object). In either case, the translator only uses <I>w</I> or <I>p</I> to determine the class type of the static member; it does not bind a <I>this</I> pointer to the object as part of the call. Similarly, if <I>counter</I> were <I>public</I>, you could access the counter using <I>w.counter</I> or <I>p-&gt;counter</I>, as well as with <I>widget::counter</I>. Again, the translator only uses <I>w</I> or <I>p</I> to determine the class type of the static member; it does not use the object to locate the static member.<P>
Therein lies the rationale for the ARM's rule that a program need not evaluate the left-hand side of a <I>.</I> or <I>-&gt;</I> in a static member access expression. The access uses the left-hand side only to determine the member's class (at compile time), and then ignores any computational results in accessing the member (at run time). However, some committee members suggested this distinction was just too subtle, and that programmers might be surprised that the left-hand side of an access expression might not be evaluated.<P>
The program in <A href="list1.htm">Listing 1</a>
illustrates one such surprise. The first <I>while</I> loop uses pointer <I>p</I> to refer to each element of array <I>a</I> in ascending order. It works properly because the increment expression <I>p++</I> appears on the left-side of an non-static member access expression. The second loop uses <I>p</I> to access each array element in descending order. According to the ARM, this loop does not terminate (at least, not normally). The program never evaluates the decrement expression <I>--p</I> because it appears on the left side of a static member access.<P>
I believe the program in <A href="list1.htm">Listing 1</a>
should terminate using the rules in the current draft. Unfortunately, I can't verify this because all the compilers I have at my disposal still employ the ARM's rule.<P>
In a separate but related change, the committees also made the rules for member access expressions more regular by allowing enumerators to appear on the righthand side of a <I>.</I> (dot) or <I>-&gt;</I> (arrow). That is, given:<P>
<pre>class shape
   {
public:
   enum palette {BLUE, GREEN, RED};
   // ...
private:
   // ...
   }:</pre>
the current draft standard says you can refer to a value of type <I>shape::palette</I> outside class <I>shape</I> using an expression such as <I>s.E</I> or <I>p-&gt;E</I> (where <I>s</I> is a <I>shape</I>, <I>p</I> is a pointer to a <I>shape</I>, and <I>E</I> is either <I>BLUE, GREEN,</I> or <I>RED</I>). According to the ARM, the only way to refer to one of these values outside <I>shape</I> is by using a qualified name of the form <I>shape::E</I>.<P>
<h4><FONT COLOR="#000080"><A name="00F2_0097">Enumeration Types<A name="00F2_0097"></FONT></h4></P>
The current draft changes the behavior of enumerations in other ways as well. According to the ARM, enumerations are integral types, just as they are in C. Thus, given<P>
<pre>enum day {SUN, MON, TUE, WED, THU, FRI, SAT};
enum day  d;</pre>
the ARM and standard C both permit arithmetic expressions such as<P>
<pre>d = 0;
d++;
d += 2;
d = d+1;</pre>
This is a very weakly-typed approach to enumerations when compared with other high-level languages such as Pascal, Modula-2, and Ada. These other languages treat each enumeration as a distinct type with a very limited set of predefined operations such as assignment and comparison. None of these languages permits arithmetic on enumerations other than increment and decrement.<P>
The current C++ draft standard aspires to treat enumerations as distinct types in the mold of these other languages. However, for compatibility with the ARM as well as C, the current draft allows promotions from enumerations to integral types. Specifically, the draft says:<P>
Enumerations are not integral, but they can be promoted to <I>int, unsigned int, long,</I> or <I>unsigned long</I><I>.</I><P>
C++ no longer permits any of the expressions shown above, but it still permits declarations like<P>
<pre>int n = WED; // promote WED to int</pre>
This change introduced a possibly widespread incompatibility with existing C++ code because the predefined arithmetic operators such as <I>++</I> and <I>--</I> no longer apply to enumerations. This change rendered a previously valid loop such as<P>
<pre>for (d = SUN; d &lt;= SAT; ++d)</pre>
as an error (because the built-in <I>++</I> no longer applies to enumeration object <I>d</I>).<P>
As I described in an earlier column ("Stepping Up to C++: Minor Enhancements to C++ as of CD Registration," <I>CUJ</I>, February 1995), the committees compensated for this incompatibility by extending C++ to permit overloading on enumerations. For example, you can write the <I>for</I> loop above by first defining<P>
<pre>inline day &amp;operator++(day &amp;d)
   {
   return d = day(d + 1);
   }</pre>
as the prefix form of <I>++</I> for objects of type <I>day</I>.<P>
You may, but need not, also declare relational operators for type <I>day</I>, such as<P>
<pre>inline int operator&lt;=(day d1, day d2);</pre>
In the absence of this declaration,<P>
<pre>d &lt;= SAT</pre>
promotes both operands to <I>int</I> and uses the built-in <I>&lt;=</I> operator. In fact, these promotions even occur in relational expressions involving enumerations of differing types. For example, given<P>
<pre>enum color {BLUE, GREEN, RED};</pre>
then<P>
<pre>for (day d = SUN; d &lt;= RED; ++d)</pre>
compiles into a loop that goes around three times.<P>
Thus, the automatic promotion to an integer type weakens a C++ compiler's ability to keep enumerations distinct from each other. It's unfortunate, but the alternative of leaving a lot of C and older C++ code outside the C++ standard may be worse.<P>
In a separate, but related minor extension, the C++ draft allows an enumeration constant to have a value of an integral type whose size is larger than <I>int</I>. The ARM, like C, states that:<P>
The value of an enumerator must be an <I>int</I> or a value that can be promoted to <I>int</I> by integral promotion.<P>
The current draft now simply says:<P>
The <I>constant-expression</I> [used to initialize the enumerator] shall be of integral type.<P>
Integral types include <I>unsigned int, [signed] long int</I>, and <I>unsigned long int</I>. Thus, C++ now allows enumeration declarations such as<P>
<pre>enum big_numbers {MEGA = 1000000, GIGA: 1000000000};</pre>
<h4><FONT COLOR="#000080"><A name="00F2_0098">The Lifetime of Temporary Objects<A name="00F2_0098"></FONT></h4></P>
Both the ARM and the current draft standard let C++ compilers introduce temporary objects into the object program as needed to implement proper run-time behavior. If the program employs a temporary of a type with a non-trivial constructor, the program must call a constructor for that temporary. Similarly, if the temporary has a type with a non-trivial destructor, the program must call that destructor for the temporary.<P>
For example, calling a function such as<P>
<pre>String operator+(const String &amp;s1, const String &amp;s2)</pre>
typically creates a temporary <I>String</I> object. The function can't store the result in either operand, so it must place the result in a third <I>String</I> object. The function may construct the result in a named local object, but then it must also destroy that local object as it returns. For example, calling<P>
<pre>String operator+(const String &amp;s1, const String &amp;s2)
   {
   String rv;
   // compute result in rv
   return rv;
   }</pre>
destroys <I>rv</I> upon function return. Therefore, the return must transmit the result in another <I>String</I> object, typically an unnamed temporary. I described the situations where temporaries arise in much greater detail in an earlier column, "Stepping Up to C++: Temporary Inconvenience, Part 1," <I>CUJ</I>, October, 1993.<P>
The lifetime of a temporary object is the period of time during program execution from the temporary's construction until its corresponding destruction. The ARM simply says the lifetime of temporary objects created during expression evaluation is "implementation dependent." That is, a program might destroy each temporary almost immediately, or it might save them up and destroy them all at program termination.<P>
Ideally, C++ programmers shouldn't have to concern themselves with exactly when the temporaries come and go. But they do. If you don't know how your compiler manages temporaries, your program might inadvertently destroy a temporary before it's done with that temporary. Or your program might consume mass quantities of memory keeping temporaries around long after they've outlived their usefulness. If, for example, the aforementioned <I>String</I> class includes a conversion operator<P>
<pre>operator const char *() const;</pre>
then, given <I>Strings s</I> and <I>t</I>, an expression such as<P>
<pre>(const char *)(s + t)</pre>
returns the representation of the temporary resulting from <I>s + t</I> as a null-terminated character array. Over the years, C++ programs have used such expressions as arguments to Standard C library functions, as in<P>
<pre>printf("%s\n", (const char *)(s + t));</pre>
or<P>
<pre>if (strcmp((const char *)(s + t), buf) == 0)</pre>
Unfortunately, the ARM gave no assurance that the temporaries would survive until the enclosing call (to <I>printf</I> or to <I>strcmp</I>) completed.<P>
The current draft standard offers much better guidance about the lifetime of temporary objects. It says:<P>
Ordinarily, temporary objects are destroyed as the last step in evaluating the <I>full-expression</I> that (lexically) contains the point where they were created. This is true even if that evaluation ends in throwing an exception.<P>
As in C, a <I>full-expression</I> is an expression that is not part of another expression. It includes the following:<P>
<UL><li>an expression statement</li>
<li>the controlling expression of an <I>if</I> or <I>switch</I> statement</li>
<li>the controlling expression of an <I>while</I> or <I>do</I> statement</li>
<li>each of the three (optional) expressions of a <I>for</I> statement</li>
<li>the optional expression in a <I>return</I> statement</li></UL>
Thus, the draft C++ standard now clearly states that<P>
<pre>printf("%s\n", (const char *)(s + t));</pre>
works because the temporary resulting from <I>s + t</I> lasts until <I>printf</I> returns. Similarly,<P>
<pre>if (strcmp((const char *)(s + t), buf) == 0)</pre>
also works because the temporary lasts until the end of the conditional expression. However, the following will fail<P>
<pre>const char *p;
p = s + t;
printf("%s\n", p);</pre>
because the program destroys the temporary at the end of the assignment to <I>p</I>. For more such examples see my article "Stepping Up to C++: Temporary Inconvenience, Part 2," <I>CUJ</I>, November, 1993.<P>
The draft also describes two contexts in which a program destroys temporaries other than at the end of a <I>full-expression</I>:<P>
The first context is when an expression appears as an initializer for a declarator defining an object. In that context, the temporary that holds the result of the expression shall persist until the object's initialization is complete. The object is initialized from a copy of the temporary; during this copying, an implementation can call the copy constructor many times; the temporary is destroyed as soon as it has been copied.<P>
The second context is when a temporary is bound to a reference. The temporary bound to the reference or the temporary containing the sub-object that is bound to the reference persists for the lifetime of the reference initialized or until the end of the scope in which the temporary is created, which ever comes first. A temporary holding the result of an initializer expression for a declarator that declares a reference persists until the end of the scope in which the reference declaration occurs. A temporary bound to a reference in a constructor's <I>ctor-initializer</I> persists until the constructor exits. A temporary bound to a reference parameter in a function call persists until the completion of the call. A temporary bound in a function <I>return</I> statement persists until the function exits.<P>
Next month, I'll describe more of these language changes.<P>
<h4>References</FONT></h4></P>
<a name="1"></a>[1] Margaret A. Ellis and Bjarne Stroustrup. <I>The Annotated C</I>++ <I>Reference Manual</I> (Addison-Wesley, 1990).<P>

<h4><a href="../../../source/1995/jul95/saks.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
