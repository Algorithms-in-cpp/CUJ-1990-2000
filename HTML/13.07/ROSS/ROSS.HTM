

<HTML>
<HEAD>

<TITLE>July 1995/Fast String Searching</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjul.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">Fast String Searching<A name="00EA_008D"><A name="00EA_008D"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="00EA_0000"><A name="00EA_0000">John W. Ross</font></h3><hr><blockquote><P>
<P><i><A name="00EA_0000"><A name="00EA_0000">John Ross is a computational scientist in the University of Toronto's High Performance and Research Computing group. His interests include scientific programming on highly parallel and vector supercomputers. John can be reached at yjohn@utirc.utoronto.ca.</i></P><P>
<h4><FONT COLOR="#000080"><A name="00EA_008E">Introduction<A name="00EA_008E"></FONT></h4></P>
String searching, or finding occurrences of a particular pattern of characters in a block of text, is a common task and a component of many applications, including text editing and document indexing. Although conceptually straightforward, there are a number of subtleties to the problem, especially if it is to be done quickly.<P>
In this article I consider a couple of "intuitive" approaches to the problem and then present an algorithm that has been available in the literature for a number of years that is easy to code and extremely fast.<P>
<h4><FONT COLOR="#000080"><A name="00EA_008F">Brute-Force Method<A name="00EA_008F"></FONT></h4></P>
In the string searching problem, we have a pattern of length <I>m</I> characters and we want to find all occurrences of it in a block of text of length <I>n</I> characters. Usually <I>n</I> is much larger than <I>m</I> and may consist of multiple megabytes of text.<P>
The brute-force algorithm is the simplest approach. As everyone knows, it is very difficult to find a needle in a haystack, but to do so we could start by aligning the pattern and string so that their first characters coincide:<P>
<pre>IN A HAYSTACK
NEEDLE</pre>
and then compare successive pairs of characters until a) we get a mismatch or b) we run out of characters in the pattern. If b) then we have found an occurrence of the pattern in the text string and we report it. In either event, we move the pattern one character to the right<P>
<pre>IN A HAYSTACK
 NEEDLE</pre>
and start comparing characters again. We proceed in this manner until we have moved the pattern to within <I>m</I> characters of the end of the text block, i.e., to character <I>n</I> - <I>m</I> + 1 in the string:<P>
<pre>IN A HAYSTACK
      NEEDLE</pre>
There is no point moving the pattern further to the right since this is the last possible position in which we could find a match. Eventually we conclude that there are no needles in this haystack.<P>
This algorithm will find all occurrences of the pattern in the text block, but it is not terribly fast. We can make a minor improvement by noting that if we do find a match, we can slide the pattern along by <I>m</I> characters to the right before looking for the next match. So after:<P>
<pre>A NEEDLE IN A HAYSTACK
  NEEDLE</pre>
we try:<P>
<pre>A NEEDLE IN A HAYSTACK
        NEEDLE</pre>
The brute-force algorithm is quite easy to code. It is shown in <A href="list1.htm">Listing 1</a>,
 in function <I>bfFind</I> (for "brute force").<P>
In testing various string searching algorithms, I used a common <I>main</I> program shown in <A href="list2.htm">Listing 2</a>.
 It allocates a block of memory on the heap and then reads several copies of a text file into it. The various search algorithms are implemented in functions declared as:<P>
<pre>int xxxFind(int n, char *txt, int m, char *pat);</pre>
where <I>xxx</I> is changed to reflect the type of algorithm. The function returns the number of matches.<P>
In the tests reported in this article, I used a total text size of just over one megabyte. The characteristics of the patterns searched for are summarized in <A href="tab1.htm">Table 1</a>.
 On a MIPS R2000-based UNIX workstation, the brute-force algorithm obtained the performance shown in <A href="tab2.htm">Table 2</a>.
<P>
<h4><FONT COLOR="#000080"><A name="00EA_0090">Locate First Character<A name="00EA_0090"></FONT></h4></P>
It is generally more efficient to find a single character in a text string than to find a pattern &#151; this operation may even be supported by the underlying hardware. A potentially better algorithm would be to locate the next occurrence of the first character of the pattern in the text block and only resort to character-by-character matching from that point. Provided that the character searching function is sufficiently rapid, this should improve our search time.<P>
This algorithm is implemented in function <I>fcFind</I> (for "first character") in <A href="list3.htm">Listing 3</a>.
 It uses the C library's <I>strchr</I> function to locate the first character. Sure enough, this cuts the search time down considerably &#151; by about one half, as shown in <A href="tab3.htm">Table 3</a>.
 In fact, this is the algorithm often used by the C library function <I>strstr</I>. A search function can also be built using <I>strstr</I>. This is implemented in function <I>ssFind</I>, shown in <A href="list4.htm">Listing 4</a>.
 Performance times of <I>ssFind</I> and <I>fcFind</I> were practically identical on the test machine.<P>
A reflection on the nature of English text should suggest an improvement for this algorithm. If the first character of our search pattern is an <I>E</I> (the most common letter in English text) then we will have a lot of potential matches and will have to resort to character-by-character searching frequently, with many unsuccessful comparisons between the pattern and the letters following each <I>E</I>.<P>
If however, the first character of the pattern is an infrequently occurring letter like <I>X</I> then we will have fewer potential matches and the search will proceed faster. It is not necessary to have the first character of the pattern be a low frequency letter. We can select the least frequently occurring character in the pattern and search based on it. The <I>fcFind</I> function is modified as shown in <I>fclfFind</I> (for "first character, low frequency") in <A href="list5.htm">Listing 5</a>.
 Variable <I>pos</I> is the position number of the character in <I>pat</I> that occurs least frequently in English text.<P>
To select this character optimally you should have a list of frequencies of occurrence of upper and lower case letters in common English text. Better performance could be obtained by calculating the character frequencies based on the actual block of text you are searching. The success of this strategy depends on the pattern. Longer patterns generally do better since they are more likely to contain a low frequency character.<P>
<h4><FONT COLOR="#000080"><A name="00EA_0091">Boyer-Moore Algorithm<A name="00EA_0091"></FONT></h4></P>
To gain a really substantial improvement in speed, it is necessary to take a new approach. An algorithm discovered by R.S. Boyer and J.S. Moore <a href="#1">[1]</a> in 1977 introduces a couple of unexpected twists into the pattern matching method.<P>
First of all, they compare characters in the pattern and the text string from right to left rather than the more "natural" left to right. The method also incorporates a pair of heuristics. The <I>occurrence</I> heuristic is obtained by realizing that when we find a mismatch between characters, we must shift the pattern so that the character in the text causing the mismatch aligns with the first occurrence of that letter in the pattern. If it does not occur in the pattern we can shift the pattern right by its entire length. This procedure is accomplished simply by setting up a table of shifts for each letter of the alphabet based on the pattern, and looking up the required shift for the mismatching character.<P>
The other interesting idea embodied in the algorithm is expressed in the <I>match</I> heuristic. This notes that in comparing characters in the pattern and the text we may obtain a partial match before the mismatch occurs. If this sub-pattern occurs earlier in the pattern (i.e., further to the left) then we should shift the pattern right by the distance between the two sub-patterns. These shifts as well can be precomputed based solely on the pattern and the alphabet. However, the preprocessing step for the match heuristic is fairly complex.<P>
<h4><FONT COLOR="#000080"><A name="00EA_0092">Boyer-Moore-Horspool Algorithm<A name="00EA_0092"></FONT></h4></P>
A couple of years later, Nigel Horspool published a simplification of the Boyer-Moore algorithm <a href="#2">[2]</a>. He pointed out that the match heuristic is used for optimizing a search when the pattern being searched for contains repetitive subpatterns, thereby avoiding the worst-case running time. Since patterns of this sort occur infrequently, he postulated that this part of the algorithm could be omitted entirely, simplifying the coding considerably. In a number of tests searching for patterns of various lengths, he found that indeed the full Boyer-Moore algorithm and his simplified version produced practically identical timings.<P>
Horspool introduced a further refinement, known as the Boyer-Moore-Horspool (or BMH) algorithm, by noting that once we know for certain that the pattern matches or does not, any of the characters from the text can be used to address the heuristic table. The BMH algorithm addresses the occurrence with the character in the text corresponding to the last character of the pattern. Horspool found this algorithm faster than the "locate first character" algorithm for all but the shortest strings.<P>
You might wonder how this approach compares to other string searching algorithms. Baeza-Yates <a href="#3">[3]</a> has surveyed a number of string searching algorithms &#151; actually coding and testing them &#151; including the variations on the Boyer-Moore algorithm and the brute-force method. His empirical results showed that the BMH algorithm was superior to the algorithms tested for random or English text on search patterns of three or more characters. (For patterns of length 2, he found an algorithm by Knuth, Morris, and Pratt to have a slight edge.)<P>
<A href="list6.htm">Listing 6</a>
shows function <I>bmhFind</I>, an efficient implementation of the Boyer-Moore-Horspool algorithm. Perhaps surprisingly, the code is extremely simple. To avoid treating special cases, the first character (element zero) of the pattern and the text are set to characters that do not occur in the pattern or the text, respectively. Assuming an alphabet size of 128 (standard ASCII text) gives us lots of potential candidates. I selected character <I>0xfe</I> for the pattern and character <I>0xff</I> for the text.<P>
The algorithm searches for pattern <I>pat[1...m]</I> in text block <I>txt[1...n]</I> rather than beginning at element zero as is typical for C programs. The main program (see <A href="list7.htm">Listing 7</a>)
 defines a pair of pointers, <I>*txtp</I> and <I>*patp</I>, that point to element 1 of the text and pattern, respectively. This allows us to address these text strings in the conventional manner in the main program.<P>
<h4><FONT COLOR="#000080"><A name="00EA_0093">Timings<A name="00EA_0093"></FONT></h4></P>
<A href="tab4.htm">Table 4</a>
shows timings for the various algorithms: bf (brute-force), fclf (first character, low frequency) and bmh (Boyer-Moore-Horspool, not including table initialization). As you can see, in all cases the BMH algorithm performs best, though it has just a slight edge (probably not statistically significant), when searching for the short pattern. The BMH algorithm turns in much better times when searching for longer patterns, especially if they occur infrequently or not at all in the text block.<P>
<h4>References</FONT></h4></P>
<a name="1"></a>[1]     R.S. Boyer and J.A. Moore. "A Fast String Searching Algorithm," <I>Communications of the ACM</I>, 20 (10), p. 762, 1977.<P>
<a name="2"></a>[2]     R.N. Horspool. "Practical Fast Searching in Strings," <I>Software Practice and Experience</I>, 19, p. 501, 1980.<P>
<a name="3"></a>[3]     R.A. Baeza-Yates. "Algorithms for String Searching: A Survey," <I>SIGIR Forum</I>, 23 (3,4), p. 34, 1989.<P>

<h4><a href="../../../source/1995/jul95/ross.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
