<HTML><HEAD>
<TITLE>July 1995/A Simple, Easy AutoQueue Class/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1 AUTOQ.HPP &#151; <I>Header file for the</I> AutoQueue class</A></h4>
<pre>#ifndef __AUTOQ_HPP
#define __AUTOQ_HPP

// ===== AutoQueue Base Class =====
// There is no public interface for the AutoQueue base class.
class AutoQueue
{
  protected:
    // ----- Constructors / Destructor -----
    AutoQueue() { QHead_ = 0; Next_ = Previous_ = 0; };
    AutoQueue(AutoQueue** QHead);
    virtual ~AutoQueue();

    // ----- Protected Member Functions -----
    int IsLinked()               { return QHead_ ? 1 : 0; };
    AutoQueue* GetFirstNode()    { return *QHead_;   };
    AutoQueue* GetNextNode()     { return Next_;     };
    AutoQueue* GetPreviousNode() { return Previous_; };

  private:
    // ----- Private Member Functions -----
    // Prohibit Copy Constructor and Default Assignment Operator.
    // (Do not define these functions)
    AutoQueue(const AutoQueue&amp; rhs);
    AutoQueue&amp; operator=(const AutoQueue&amp; rhs);

    // ----- Private Data -----
    AutoQueue** QHead_;    // Head of list containing this instance.
    AutoQueue* Previous_;  // Previous AutoQueue Node.
    AutoQueue* Next_;      // Next AutoQueue Node.

    // Derived class will specify private data and access methods as
    // necessary for their implementation.
};
#endif
// end file AUTOQ.HPP
</pre>
</BODY>
</HTML>
