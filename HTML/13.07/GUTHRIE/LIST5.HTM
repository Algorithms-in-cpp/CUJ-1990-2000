<HTML><HEAD>
<TITLE>July 1995/A Simple, Easy AutoQueue Class/Listing 5</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 5 AQTEST.CPP &#151; AutoQueue <I>test program</I></A></h4>
<pre>#include "AQMSG.HPP"
#include &lt;iostream.h&gt;

// Local Function Prototype
void ListMessageQueues(AutoQueueMessage* List1, AutoQueueMessage* List2);

void main()
{
  AutoQueueMessage* pMessage = 0;
  AutoQueueMessage* NonLinked;
  AutoQueueMessage* NonLinked2;

  // -- Demonstrate stand alone (non-linked) instance of AutoQueueMessage --
  cout &lt;&lt; "CREATE NON-LINKED INSTANCE and show its contents." &lt;&lt; endl;
  NonLinked = new AutoQueueMessage(6, (string)"Hello World!");
  if(NonLinked)            // Hake sure NonLinked exists.
    NonLinked-&gt;List();    // List contents of this non-linked instance.
  else
    cout &lt;&lt; "The Non-Linked instance didn't create..." &lt;&lt; endl;
  cout &lt;&lt; endl;            // Add a blank line separator to output listing.

  // -- Copy previously created non-linked entry to a new stand alone entry --
  if(NonLinked)
  { cout &lt;&lt; "COPY STAND ALONE ENTRY to STAND ALONE ENTRY." &lt;&lt; endl;
    NonLinked2 = new AutoQueueMessage(NonLinked);
    if(NonLinked2)          // If it created, show contents of both.
    { cout &lt;&lt;" Source Instance: ";
      NonLinked-&gt;List();   // List of source.
      cout &lt;&lt; " New Instance : ";
      NonLinked2-&gt;List();  // List of new entry.
    }
    else
      cout &lt;&lt; "New stand alone entry failed to create..." &lt;&lt; endl;

    // To effect a MOVE operation, include a delete of the source instance.
    delete NonLinked;
  }
  cout &lt;&lt; endl;

  // -- CREATE 2 QUEUES --
  // Allocate Message list pointers. (Initialize to 0)
  AutoQueueMessage* pAQM_List1 = 0;
  AutoQueueMessage* pAQM_List2 = 0;

  // -- ADD NODES to a QUEUE --
  cout &lt;&lt; "ADD NODES - Add 4 instances to List 1, none to list 2." &lt;&lt; endl;
  (void) new AutoQueueMessage(&amp;pAQM_List1, 1, (string)"Message 1");
  (void) new AutoQueueMessage(&amp;pAQM_List1, 2, (string)"Message 2");
  (void) new AutoQueueMessage(&amp;pAQM_List1, 3, (string)"Message 3");
  (void) new AutoQueueMessage(&amp;pAQM_List1, 4, (string)"Message 4");
  ListMessageQueues(pAQM_List1, pAQM_List2);      // Show Queues

  // -- COPY STAND ALONE NODE to a QUEUE --
  cout &lt;&lt; "COPY STAND ALONE ENTRY to List 2." &lt;&lt; endl;
  (void) new AutoQueueMessage(&amp;pAQM_List2, NonLinked2);
  ListMessageQueues(pAQM_List1, pAQM_List2);      // Show Queues

  // -- COPY QUEUE NODE to STAND ALONE ENTRY --
  // Find record in pAQM_List1 whos Number_ value is 4 and COPY
  // it to a stand alone instance.
  cout &lt;&lt; "COPY NODE From List 1 to a STAND ALONE instance where Number_ = 4."
      &lt;&lt; endl;
  if(pAQM_List1)                                      // If entries,
    if((pMessage = pAQM_List1-&gt;FindByNumber(4)) != 0) // find match and
    { NonLinked = new AutoQueueMessage(pMessage);     // create copy.
      if(NonLinked)                                  // If it worked,
      { cout &lt;&lt; " New Instance: ";
        NonLinked-&gt;List();                           // List of new entry.
        cout &lt;&lt; endl;
      }
    }

  // -- COPY QUEUE NODE to ANOTHER QUEUE --
  // Find record in pAQM_List1 whos Number_ value is 2 and COPY to pAQM_List2.
  cout &lt;&lt; "COPY NODE From List 1 to List 2 where Number_ = 2." &lt;&lt; endl;
  if(pAQM_List1)                                           // If entries,
    if((pMessage= pAQM_List1-&gt;FindByNumber(2)) != 0)      // find match and
      (void) new AutoQueueMessage(&amp;pAQM_List2, pMessage); // create copy.
  ListMessageQueues(pAQM_List1, pAQM_List2);               // Show Queues

  // -- MOVE NODE from ONE QUEUE to ANOTHER QUEUE --
  // Find record in pAQM_List1 whos Number_ value is 3 and MOVE to pAQM_List2.
  cout &lt;&lt; "MOVE NODE From List 1 to List 2 where Number_ = 3." &lt;&lt; endl;
  if(pAQM_List1)                                           // If entries,
    if((pMessage= pAQM_List1-&gt;FindByNumber(3)) != 0)       // find match
    { // Create new message.
      (void) new AutoQueueMessage(&amp;pAQM_List2, pMessage); // make copy and
      delete pMessage;                                    // delete original.
    }
  ListMessageQueues(pAQM_List1, pAQM_List2);               // Show Queues

  // -- DELETE NODE from a QUEUE -- 
  // Delete the record in List 1 whos Number_value = 1.
  cout &lt;&lt; "DELETE NODE From List 1 where Number_ = 1" &lt;&lt; endl;
  if(pAQM_List1)                                           // If entries
    if((pMessage = pAQM_List1-&gt;FindByNumber(1)) != 0)      // find match
      delete pMessage;                                    // and delete.
  ListMessageQueues(pAQM_List1, pAQM_List2);               // Show Queues

  // -- EMPTY a QUEUE --
  cout &lt;&lt; "EMPTY LIST (Empty both lists)" &lt;&lt; endl;
  while(pAQM_List1)                           // While an entry exists,
    delete pAQM_List1;                        // delete it.

  // Empty List 2
  while(pAQM_List2)                           // While an entry exists,
    delete pAQM_List2;                        // delete it.
  ListMessageQueues(pAQM_List1, pAQM_List2);  // Show Queues

  // Delete stand alone instances.
  delete NonLinked;
  <I> </I>delete NonLinked2;
 } // end main

// =====ListMessageQueues =====
// List the contents of both AutoQueueMessage lists.
 void ListMessageQueues(AutoQueueMessage* List1, AutoQueueMessage* List2)
{
  // -- DISPLAY CONTENTS of both QUEUES --
  cout &lt;&lt; "----- List 1 -----"  &lt;&lt; endl;      // Title for List 1
  if(List1)                                   // If elements exist,
    List1-&gt;List();                            // Call list routine.
  else                                        // else
    cout &lt;&lt;" &lt;list is empty&gt;" &lt;&lt; endl;        // Let user know list is empty.
  cout &lt;&lt; "----- List 2 -----" &lt;&lt; endl;       // Title for List 2
  if(List2)                                   // If elements exist,
    List2-&gt;List();                            // Call list routine.
  else                                        // else
    cout &lt;&lt;" &lt;list is empty&gt;" &lt;&lt; endl;        // Let user know list is empty.
  cout &lt;&lt; endl;                               // Trailer.
 }
// end file AQTEST.CPP
</pre>
</BODY>
</HTML>
