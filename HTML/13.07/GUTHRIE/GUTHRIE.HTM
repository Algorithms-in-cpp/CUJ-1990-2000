

<HTML>
<HEAD>

<TITLE>July 1995/A Simple, Easy AutoQueue Class</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjul.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">A Simple, Easy AutoQueue Class<A name="00E8_008B"><A name="00E8_008B"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="00E8_0000"><A name="00E8_0000">R. Scott Guthrie</font></h3><hr><blockquote><P>
<P><i><A name="00E8_0000"><A name="00E8_0000">Scott Guthrie has been programming in C for over ten years. He received a B.S. in Computer Science from California Polytechnic State University, San Luis Obispo in 1976. Scott resides in Colorado Springs, Colorado, and works in Network Systems Engineering for MCI Telecommunications, Consumer Markets Division. Scott can be reached on the Internet as r._scott_guthrie@mcimail.com or by phone at (719) 535-3236.</i></P><P>
<h4><FONT COLOR="#000080"><A name="00E8_008C">Introduction<A name="00E8_008C"></FONT></h4></P>
On a recent project, I needed to have separate applications exchange messages. Since several such messages could be simultaneously in transit and received in no particular order, I needed a simple way to keep track of incoming messages for later processing by the application. The most obvious method was to place the outstanding message requests in a queue.<P>
Although queues seem like a great way to simplify data handling, and many candidate implementations appear in articles and books, these implementations always seem to miss the mark exhibiting either a lack or a gross excess of needed capabilities. At the risk of reinventing the wheel (or queue in this case), I've designed my own queue class. I've tried to strike a balance between versatility and practicality by first creating a list of my requirements. This article presents the resulting design.<P>
<h4><FONT COLOR="#000080"><A name="00E8_008D">Design Requirements<A name="00E8_008D"></FONT></h4></P>
My design requirements fall under two general categories. The first category is data handling, the second is encapsulation. As far as data handling is concerned, the queue must be capable of storing the message content, information about where each message originated, and each message's current status. The queue must also be capable of the following:<P>
<UL><li>Adding entries to a list</li>
<li>Finding an entry based on a data value stored within the entry</li>
<li>Supporting multiple lists</li>
<li>Copying and moving entries from one list to another</li>
<li>Removing an entry from any location within a list.</li></UL>
<h4><FONT COLOR="#000080"><A name="00E8_008E">Encapsulation<A name="00E8_008E"></FONT></h4></P>
I also want to take advantage of data and functionality encapsulation. Since it looks like I am reinventing the queue after all, I want to be able to reuse the implementation so I surely won't have to do this again!<P>
I've considered the standard <I>AddNodeToList</I> and <I>DeleteNodeFromList</I> type interface and thought "what if I put the linking code in the constructor and the delinking code in the destructor?" Just the creation of the instance can add an entry to the list, and the removal can be as simple as deleting an instance. The only interface left to define will deal just with data access methods. My next thought is that if I create a base class to implement the queuing behavior, I can inherit this class and only deal with the data issues in the derived class. A base class like this could surely be reusable.<P>
<h4><FONT COLOR="#000080"><A name="00E8_008F">The <B><I>AutoQueue</I></B> Class<A name="00E8_008F"></FONT></h4></P>
<A href="list1.htm">Listing 1</a>
and <A href="list2.htm">Listing 2</a>
show <I>AUTOQ.HPP</I> and <I>AUTOQ.CPP</I>, the respective declaration and implementation for the <I>AutoQueue</I> class. The <I>AutoQueue</I> class has two constructors, a destructor, and four methods to support queue traversal.<P>
The first constructor creates a stand-alone node not associated with a queue. This type of node could be useful for holding data that is not yet part of a list. If the data later needs to be added to a queue, the node can be moved or copied to the queue.<P>
The second constructor creates a data instance linked to a specified queue. This constructor links new nodes at the top of the queue, but that doesn't mean <I>AutoQueue</I>s are limited to a LIFO or FIFO operations. An <I>AutoQueue</I> can be searched (traversed) and nodes can be removed from any position.<P>
The destructor extracts a linked node from the queue. If the node is not associated with a queue, the destructor merely deletes it.<P>
Member function <I>IsLinked</I> determines if a node is linked to a queue, returning an integer one if linked, zero if not. The other three methods are useful for queue traversal. <I>GetFirstNode</I> returns the address of the first (last added) instance in the queue, <I>GetNextNode</I> returns the address of the next, and <I>GetPreviousNode</I> returns the previous node's address. These last two functions return zero when there is no next/previous node.<P>
Each class contains three private data items, accessible only through the methods already described. Since these are <I>Get</I>-type methods, the private members are effectively read-only, which helps maintain the integrity of the queue. The user does not require access or knowledge of these values to maintain or traverse the queue.<P>
<h4><FONT COLOR="#000080"><A name="00E8_0090">Deriving from <B><I>AutoQueue</I><A name="00E8_0090"></B></FONT></h4></P>
As a base class, <I>AutoQueue</I> provides queuing behavior to all derived classes. Classes derived from <I>AutoQueue</I> need only define the data elements of the queue and the methods necessary to access them.<P>
As an example, the <I>AutoQueueMessage</I> class in <I>AQMSG.HPP</I> and <I>AQMSG.CPP</I> (<A href="list3.htm">Listing 3</a>
and <A href="list4.htm">Listing 4</a>)
 shows how to add an integer and string value to an <I>AutoQueue</I> instance.<P>
As with <I>AutoQueue</I>, the <I>AutoQueueMessage</I> class has two constructors. The "non-queuing" constructor includes parameters for setting the data values, while the queuing constructor for linked nodes includes these parameters but adds another parameter to pass the address of the list the node is to join.<P>
<pre>// Non-Queuing Constructor:
// Initialize Data Values.
AutoQueueMessage(int Number, string&amp; Text);

// Queuing Constructor:
// Specify Destination Queue and
// Initialize Data Values.
AutoQueueMessage(AutoQueueMessage** QHead,
              int Number, string&amp; Text);</pre>
The <I>AutoQueueMessage</I> destructor does nothing since de-linking is handled by the <I>AutoQueue</I> base class.<P>
<I>AutoQueueMessage</I> has two specialized copy constructors. One creates stand-alone nodes and the other creates linked nodes. Both constructors accept either stand-alone or linked nodes as source parameters:<P>
<pre>// Non Queuing Copy Constructor:
// Copies 'Source' data to a new Stand Alone Node.
AutoQueueMessage(const AutoQueueMessage* Source);

// Queuing Copy Constructor:
// Copies 'Source' data to a new Queued Node.
AutoQueueMessage(AutoQueueMessage** QHead,
              const AutoQueueNessage* Source);</pre>
Member function <I>FindByNumber</I> demonstrates how a queue might be searched. This method searches the queue for a match of the private <I>Number</I>_ value, returning the address of the last added instance meeting the match criteria. If no instance in the list passes the test, the method returns a zero.<P>
<pre>//Find node t<I>h</I>at matc<I>h</I>es TargetValue and return a pointer to it.
AutoQueueMessage* FindByNumber(const int TargetValue);</pre>
I've included member function <I>List</I> here for the sake of example. <I>List</I> traverses the list from the beginning (regardless of the instance location from which it was called), and sends the queue data to <I>cout</I>. Including a method such as this may prove useful during development and testing.<P>
<pre>void List(); // Output entire queue contents via cout.</pre>
I've disabled the default copy constructor and assignment operator for the <I>AutoQueueMessage</I> class, by declaring them as class private and not including a body for their methods. Some rigorous compilers and utility programs such as PC Lint by Gimpel Software will issue a warning about this, which you can safely ignore.<P>
<h4><FONT COLOR="#000080"><A name="00E8_0091">Using <B><I>AutoQueueMessage</I><A name="00E8_0091"></B></FONT></h4></P>
<I>AQTEST. CPP</I> (<A href="list5.htm">Listing 5</a>)
 is a sample test program showing the use of the <I>AutoQueueMessage</I> class. It demonstrates the following:<P>
<UL><li>creating a stand-alone instance</li>
<li>creating a queue of instances</li>
<li>finding a specific instance by a data item value</li>
<li>copying and moving nodes from a stand-alone instance to another stand-alone instance</li>
<li>copying and moving nodes from a stand-alone instance to a queue</li>
<li>copying and moving nodes from a queue to a stand-alone instance</li>
<li>copying and moving nodes from a queue to another queue</li>
<li>deleting a node</li>
<li>listing the contents of a queue</li>
<li>emptying a queue</li></UL>
Please refer to the listings for the specifics. <A href="list6.htm">Listing 6</a>
shows the output from <I>AQTEST</I>.<P>
You should take a few precautions when using the <I>AutoQueueMessage</I> (or any <I>AutoQueue</I>-derived) class:<P>
1)     Initialize the queue pointers to zero. The <I>AutoQueue</I> constructor expects a queue pointer that either points to an instance or is null. <I>AutoQueue</I> interprets the queue pointer value as the address of the first entry in the node. (Who knows what will be in a non-initialized pointer.)<P>
2)     Before executing a method, make sure the queue is not empty. The access methods are members of the instances and are executed as follows:<P>
<pre>Queue-&gt;Method(); // Execute 'Method()' from an instance.</pre>
If <I>Queue</I> contains a null because no instances are linked to it, the call will fail with disastrous results. Always check access to a method, as in:<P>
<pre>if(Queue)              // If there is an instance,
    Queue-&gt;Method();   // Method() can be invoked.</pre>
3)     Maintain pointers to all stand-alone instances (created with <I>new</I>) so they can later be deleted. This advice seems obvious but it's easy to forget because pointers to the queued instances do not need to be explicitly maintained by the user. The queue linking provided by the <I>AutoQueue</I> base class keeps the instance pointer within its structure allowing the user to create an instance as follows:<P>
<pre>(void) new AutoQueueMessage(&amp;List1, 6, (string)"Hello World!");</pre>
In this case the return value is cast to <I>void</I> to eliminate compiler warning messages.<P>
<h4><FONT COLOR="#000080"><A name="00E8_0092">Conclusion<A name="00E8_0092"></FONT></h4></P>
The <I>AutoQueue</I> class not only provides an easily reusable queue management facility, but also helps to demonstrate a level of encapsulation that can be easily and efficiently achieved.<P>
Some of my associates and I have already found a number of applications for the <I>AutoQueue</I> class and I hope you can benefit from it as well.<P>

<h4><a href="../../../source/1995/jul95/guthrie.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
