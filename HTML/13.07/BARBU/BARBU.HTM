

<HTML>
<HEAD>

<TITLE>July 1995/A C++ Class Generator</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjul.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Software Tools</FONT></H2>

<hr><h2 align="center"><font color="#800000">A C++ Class Generator<A name="00E4_0089"><A name="00E4_0089"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="00E4_0000"><A name="00E4_0000">Adrian Barbu</font></h3><hr><blockquote><P>
<P><i><A name="00E4_0000"><A name="00E4_0000">Adrian Barbu has an M.S. in software engineering and is a project manager at Goto Informatique, a French software company specializing in communication software. He can be reached via e-mail at 100125.237@compuserve.com.</i></P><P>
<h4><FONT COLOR="#000080"><A name="00E4_008A">Introduction<A name="00E4_008A"></FONT></h4></P>
Writing a C++ class from scratch has always seemed like a tedious and error-prone business to me. I've found it difficult to bridge that gap between my mind, holding fast to a new concept at one end, and my fingers, typing in code at the other end. Moreover, as experience and good C++ books compel me to make more and more class design decisions, I find increasing need for a tool that allows me to focus on essentials from the very beginning.<P>
I expect such a tool to save me more than some brainless typing; I also want it to work as a repository of canned design experience, ready to be converted to generated code in a mouse click (see <a href="sidebar1.htm">sidebar</a> for examples). Want to forbid the use of a (frequently backfiring) default copy constructor? So be it, just click the right button and it's gone &#151; that's the kind of tool I'm looking for.<P>
Such a feature may seem to promote overly cautious programming, but I like it that way. On the other hand, the tool's design repository must remain as flexible and open as possible throughout its life span, allowing it to absorb new features or to be molded into some other shape, without requiring modification to the class generator's core code.<P>
The tool that reasonably answers these needs turns out to be a simple C++ class generator based on pattern files. This generator creates the skeleton of a class interface (.<I>HPP</I> file) and definition (.<I>CPP</I> file). It is implemented as a line-oriented substitution engine, with a user interface based on MS-Windows 3.1 or later (see <A href="fig1.htm">Figure 1</a>)
.<P>
<h4><FONT COLOR="#000080"><A name="00E4_008B">What Are Pattern Files?<A name="00E4_008B"></FONT></h4></P>
Pattern files are text files that behave somewhat like big macros, which will be transformed into C++ code. The class generator uses two mechanisms, <I>substitution</I> and <I>conditional code generation</I>, and these mechanisms are controlled by the pattern files. The two pattern files are <I>__GEN__.HPP</I> (<A href="list1.htm">Listing 1</a>)
 and <I>__GEN__.CPP</I> (not shown, but included on the code disk).<P>
Using the macro analogy, these files take one argument, the name of the new class itself. This class name is restricted to eight characters, as it is also used to generate output <I>.HPP/.CPP</I> filenames. To stay away from heavy grammars and parsers, I've designed the pattern files to be interpreted on a simple line-by-line basis. The pattern files also include a couple of comfortable metasymbols to isolate the formal arguments from the C++ text itself. Thus, [CLASS] stands for the class name.<P>
For example, if <I>MyClass</I> is the name of the class whose backbone is to be generated, the generator will output files <I>MYCLASS.HPP</I> and <I>MYCLASS.CPP</I>, translating the pattern line<P>
<pre>[CLASS]&amp; operator=(const [CLASS]&amp; y)</pre>
to<P>
<pre>MyClass&amp; operator=(const MyClass&amp; y)</pre>
In this case, substitution works fine within each line.<P>
What about conditional code generation? Notice that pattern lines are grouped into blocks. These blocks are delimited by <I>meta-lines</I>, prefixed by <I>#[</I> and <I>#]</I> (like C's <I>#ifdef</I> and <I>#endif</I> directives). Whenever the generator reaches the beginning of a block such as<P>
<pre>#[ CountInst= 1
static unsigned long_HowMany;
#]</pre>
it will decide whether to generate the enclosed block, based on the value of symbol <I>CountInst</I>. Since the user interface just collected values for all these switches a mouse click before, the generator has the information it needs to generate the output class as tailored by the user.<P>
As the two central ideas above work on a line-by-line basis, they both rely heavily on substring search operations. This is where <I>STR</I> makes its appearance (<A href="list2.htm">Listing 2</a>)
.<P>
<I>STR</I> is an old string class I began writing as an exercise back in my early C++ days. I eventually enhanced it with all kinds of stuff that seems excessive in a string class, except when you really need it: concatenation without space trouble, comparisons, letter case tricks, whitespace discarding (functions <I>noFrontSpace</I> and <I>noTrailSpace</I>), and, of course, substring search (functions <I>hasin</I>, with arguments defaulting to case-sensitive search from the beginning).<P>
<I>STR</I> even includes a "given-size" constructor <I>STR(int)</I>, an admittedly horrible feature that I use later to build an automatic <I>STR</I> before passing it as a buffer to <I>sprintf</I> or <I>fgets. STR</I> does all the dirty work in the heart of the generator's read-eval-print loop, albeit not without some direction from an elder brother, which I present next.<P>
<h4><FONT COLOR="#000080"><A name="00E4_008C">An Abstract Generation Engine<A name="00E4_008C"></FONT></h4></P>
The <I>ENGINE</I> class (<A href="list3.htm">Listing 3</a>
and <A href="list4.htm">Listing 4</a>)
 manages the whole generation job, and thus has several different responsibilities. First, <I>ENGINE</I> handles the substitution process at line level within the private function <I>_substitute</I>, which takes as a parameter the name of the class to be generated. <I>_substitute</I> places that class name in the output text whenever it encounters a substring matching the contents of <I>ENGINE::_Class</I> in the pattern file. (In this case <I>ENGINE::_Class</I> is a const string equal to "[CLASS]".)<P>
Second, the central <I>while</I> loop in <I>_fileJob</I> iterates through all the lines of the input file. This process is more complex than merely calling <I>_substitute</I> for each line, as meta-lines controlling conditional generation get in the way. Whenever a meta-line is found (heralded by the occurrence of a substring matching <I>ENGINE::_FlagOn</I>, or <I>#[</I>, analysis goes ahead on the line to pick up the symbol name and its expected value for the block to be conditionally generated.<P>
At this point, the generation engine must compare this value against the actual value chosen by the user. However, as we cannot reasonably expect the <I>ENGINE</I> class to handle the user interface directly (nor have I seen a car engine read the gas price on its own), the job of storing and retrieving the actual user options falls to an abstract agent called <I>SYM</I>, shorthand for "symbol table."<P>
The <I>SYM</I> class mediates between <I>ENGINE</I> and the user interface. <I>SYM</I> presents a pure virtual interface to <I>ENGINE</I>, providing it access to member functions <I>get</I> and <I>set</I>. These functions enable an <I>ENGINE</I> object to read from and write to a Windows .INI file, which will contain the user's selected options by the time <I>ENGINE</I> does its work. <I>ENGINE</I> gets a pointer to the <I>SYM</I> object currently on duty as an argument of the function <I>ENGINE::go</I>. Note, however, that <I>SYM</I> is an abstract base class, so this <I>SYM</I> object must be of a descendant class to <I>SYM</I>. (You cannot instantiate an abstract class.) In a later section, I present <I>SYM</I>'s descendant class, <I>WSYM</I>.<P>
<h4><FONT COLOR="#000080"><A name="00E4_008D">Nested Conditional Generation<A name="00E4_008D"></FONT></h4></P>
Since it would be a pity to forbid nested conditional blocks in pattern files, <I>ENGINE</I> must keep track of possible outer blocks when encountering a _<I>FlagOn</I> substring. Of course, the actual value of an option is meaningless if it's already within a block that <I>ENGINE</I> decided not to generate. But the occurrence of a <I>_FlagOn</I> must be paired with its corresponding <I>_FlagOff</I>. The corresponding <I>_FlagOff</I> will not necessarily be the next one in the input file, as the current block might have nested blocks of its own.<P>
To cope with nested blocks, <I>ENGINE::_fileJob</I> instantiates a stack of 0/1 values called <I>BSTACK</I>, a class trivial enough to be left unlisted here, featuring classical primitives such as push, pop and top. <I>_fileJob</I> also interrogates <I>BSTACK::empty</I> at places where unbalanced markers are likely to be detected. Once again, design issues get a bit ugly as time goes on; <I>ENGINE</I> should provide some feedback to the user as it is processing all these files and markers. After all, you would find <I>ENGINE</I> quite rude if it overwrote an existing output file without asking permission first. And you would probably rather be warned about a misplaced marker than play around with your freshly generated C++ nonsense.<P>
Again, since I did not want <I>ENGINE</I> involved in user interface issues, I left it as an abstract class, providing it with pure virtual functions to bridge the user interface gaps. For example, <I>ENGINE</I> itself doesn't care how some real <I>overwriteQuest(const char szOutputFile[]</I>) will manage to prompt the user for an answer, but it knows there will be a yes or no answer for it to act accordingly.<P>
<h4><FONT COLOR="#000080"><A name="00E4_008E">The Presentation Layer<A name="00E4_008E"></FONT></h4></P>
Classes <I>WENGINE</I> and <I>WSYM</I> (<A href="list5.htm">Listing 5</a>)
 are missing links, performing tasks under MS-Windows that base classes <I>ENGINE</I> and <I>SYM</I> do not want to mess with. <I>WENGINE</I> knows what a window handle is, and actually accepts one in its constructor as a parent window for message boxes. While extremely simple for the time being, <I>WENGINE</I> is designed to keep future evolution in one place, in the event that user level improvements are made, such as: internationalization support, keeping a history of generated classes, and integration in some larger CASE tool. As for <I>WSYM</I>, it is a true masterpiece of lazy programming, since it is no more than a wrapper for Windows API functions reading and writing integer values from a <I>.INI</I> file.<P>
Now, the recipe to cook a simple class generator is as follows:<P>
1)     Run a Windows dialog to collect the name and the path of the class to be generated, and the class generation options (via checkboxes and radiobutton groups)<P>
2)     Create a new WSYM object <I>pSym</I> and call <I>pSym-&gt;set</I> to store each option value<P>
3)     Create a new <I>WENGINE</I> object <I>pEng</I> with the two pattern filenames and the dialog's window handle as constructor arguments<P>
4)     Call <I>pEng-&gt;go</I> with the target path, class name, and <I>pSym</I> as arguments. Translated into plain Windows code, the above takes up some 120 lines of C++ (no MFC, OWL, or any other bird). Full source code for the project is available on the code disk and compiles under Borland C++ 3.1.<P>
<h4>References</FONT></h4></P>
[1]  Scott Meyers. Effective C++, 50 Specific Ways to Improve Your Programs and Designs (Addison-Wesley, 1992).<P>


<h4><a href="../../../source/1995/jul95/barbu.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
