


<HTML>
<HEAD>

<TITLE>January 1991/Questions & Answers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjan.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Questions &amp; Answers<A name="003A_001B"><A name="003A_001B"></font></h2><P>
<h3 align="center"><A name="003A_0000"><A name="003A_0000">More On const</h3><P>
<h3 align="center"><font color="#800000">Ken Pugh</font></h3><hr><blockquote><P>
<P><i><A name="003A_0000"><A name="003A_0000">Kenneth Pugh, a principal in Pugh-Killeen Associates, teaches C language courses for corporations. He is the author of C Language for Programmers and All On C, and is a member on the ANSI C committee. He also does custom C programming for communications, graphics, and image databases. His address is 4201 University Dr., Suite 102, Durham, NC 27707. You may fax questions for Ken to (919) 493-4390. When you hear the answering message, press the * button on your telephone. Ken also receives email at kpugh@dukemvs.ac.duke.edu (Internet) or dukeac!kpugh (UUCP).</i></P><P>
Last month, one of the questions revolved around the <I>const</I> modifier.<P>
The <I>const</I> type modifier is difficult to understand, especially when combined with pointers. Although some authors put it first in the declaration (along with the storage type), I am inclined to place the <I>const</I> modifier after the data type, since that more clearly reflects what the modifier is doing.<P>
A non-modified type such as<P>
<pre>int i = 5;</pre>
sets aside memory for the variable <I>i</I> and does not give any information as to whether the contents will be changed during the program's execution.<P>
<pre>int const i = 5;</pre>
or<P>
<pre>const int i : 5;</pre>
both declare that <I>i</I> is an integer constant. That is, its contents will not be modified during execution. Thus the compiler could place it in read-only memory (especially if it was a global or static variable) or it could use this information to optimize the code.<P>
Although you probably would not use this for a single integer in place of a <I>#define</I>, you might use this for an array or structure that was initialized and never altered.<P>
The keyword <I>static</I> is used for local variables whose memory is allocated at load time. You can initialize <I>static</I> variables and not change them. However the compiler does not prevent you from accidentally writing over their initial contents. The <I>const</I> variable is designed to protect against that occurrence. Its protection is compiler dependent, not absolute. A particular compiler/processor pair may not support read-only memory.<P>
The possibilities with <I>static</I> and <I>const</I> are:<P>
<pre>static int i = 5;            /*  Static variable whose contents may change */
static int const i = 5;      /*  Static variable whose contents will not be changed */
int const i : 5;             /*  Variable whose contents will not be changed */</pre>
Now that I've covered the simple use of <I>const</I>, I would like to discuss its use with pointers. There are two possibilities for placing <I>const</I>.<P>
<pre>char const *pc1;  /*  const char *pc1; */
char * const pc2;</pre>
<I>pc1</I> is a pointer that points to characters that are of type <I>const</I>. You cannot dereference the pointer (with a *) and assign something to that location. The following is valid:<P>
<pre>char const c_const;
char const another_c_const;
char const *pc1;
pc1 = &amp;c_const;</pre>
but you cannot then assign<P>
<pre>*pc1 = 'A';</pre>
since you are attempting to change the <I>char</I> constant. But you can perform:<P>
<pre>pc1 : &amp;another_c_const;</pre>
since the contents of <I>pc1</I> are not <I>const</I>, only what it points to.<P>
On the other hand, <I>pc2</I> is a constant pointer to characters that can change. For example, with:<P>
<pre>char variable_c;
char another_variable_c;
char * const pc2 = &amp;variable_c;</pre>
then<P>
<pre>*pc2 = 'A';</pre>
is perfectly valid, but<P>
<pre>pc2 = &amp;another_variable_c;</pre>
is not, since you are trying to change the contents of <I>pc2</I>, which is to remain constant.<P>
Because of pointers, I prefer placing the <I>const</I> after the type. If you declare:<P>
<pre>const char *pc1;</pre>
the variable <I>pc1</I> is not what is constant. It is the <I>char</I> to which it points. As shown previously, the way to declare that <I>pc1</I> is constant is:<P>
<pre>char * const pc1;</pre>
This arrangement appears inconsistent and confusing. Using the <I>const</I> after the type follows a regular pattern. If the <I>const</I> keyword appears just before the variable name, then that variable is <I>const</I>.<P>
Note that you can assign a less constant type to a more constant type. For example, the following is valid:<P>
<pre>char *pc3;
char const *pc1;
pc1 = pc3;</pre>
You just cannot use <I>pc1</I> to alter any values being pointed at.<P>
<pre>*pc3 = 'a';  /*  Valid */
*pc1 : 'a';   /*  Invalid */</pre>
We could use <I>const</I> in both places in the declaration. For example:<P>
<pre>char const * const pc3 = c_const;</pre>
Both of the following are invalid:<P>
<pre>*pc3 : 'A';
pc3 : &amp;another_const;</pre>
Now for one more step. Lets look at double pointers, since that is the crux of your question. Given these declarations:<P>
<pre>char const char_const;
char variable_char;
char * ptr;
char const * ptr_to_char_const;
char * const ptr_const_to_char = &amp;variable_char;
char const * const ptr_const_char_const;</pre>
You have at least the following possibilities for the declaration and assignment of the double pointer:<P>
<pre>char ** ptr_to_ptr_to_char;
char const ** ptr_to_ptr_to_char_const;
char * const * ptr_to_ptr_const_to_char;
char ** const ptr_const_to_ptr_to_char = &amp;ptr;

ptr_to_ptr_to_char = &amp;ptr;
ptr_to_ptr_to_char_const = &amp;ptr_to_char_const;
ptr_to_ptr_const_to_char = &amp;ptr_const_to_char;</pre>
Notice that the last of these declarations has to include the initialization, since the variable itself is being declared as <I>const</I>. I won't go into an explanation of all of these. You can work out the remaining possible variable declarations as:<P>
<pre>char const * const * ptr_to_ptr_const_to_char_const;</pre>
When a pointer to <I>const</I> appears in a function's parameter declaration, it implies that the function will not change the variable pointed at by the parameter that is passed. The actual variable pointed at by the parameter can be a non-<I>const</I> variable.<P>
This is not needed for the parameters themselves, as a copy is always passed to the function. With <I>ints</I>, for example, it is redundant to state in a prototype:<P>
<pre>int integer_compare_function ( int const integer1,
   int const integer2);</pre>
For string pointers, which may be changed by the called routine, it is also redundant to state:<P>
<pre>int change_strings(char * const string);</pre>
Although it is extraneous in the prototype, you may wish to specify the parameters in the function header this way. Inside the function you would not be able to accidentally alter their values.<P>
If the actual strings are not going to be changed, then you would code the prototype as:<P>
<pre>int string_compare_function(char const *string1,
   char const *string2);</pre>
Inside the function, you could not make assignments as:<P>
<pre>*string1 = 'a';</pre>
but you could perform:<P>
<pre>string1 = string2;</pre>
If the function were being passed handles (pointers to pointers), then the function could be prototyped as:<P>
<pre>int string_handle_compare_function(char const * const
   * string1, char const * const * string2);</pre>
You would not be permitted to use either:<P>
<pre>* string1 = *string2;
**string1 = 'a';</pre>
<h4><FONT COLOR="#000080"><A name="003A_001C">Readers' Replies<A name="003A_001C"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="003A_001D">Indentation<A name="003A_001D"></FONT></h4></P>
Generally, I find your column most interesting. Keep up the good work. However, I was a bit disappointed by your comments on Brian S. Merson's letter in the September issue.<P>
You said, "Your style has a lot going for it." While there is nothing particularly bad about his style of indentation, it seems to me to be a classic case of a solution to a non-problem for two reasons:<P>
1)     Even given his program as it stood, he could just have drawn a line to the left of the braces which would not then have run through the first character of the code. Ensuring that all the code was legible would seem to be a basic precaution taken before debugging.<P>
2)     What are <I>aflag</I> and <I>eflag</I> doing in a serious program? Variables should have meaningful names with a minimum Hamming distance between them, i.e., they should differ in a number of positions.<P>
Donal Lyons<br>
Dublin, Ireland<P>
The style to which you refer in #1 looked like:<P>
<pre>for (...)
   {
   /* Internals indented one space to right of brace */
   }</pre>
I agree with you regarding #2. That's why I started the Obscure Name Contest. (KP)<P>
<h4><FONT COLOR="#000080"><A name="003A_001E">Pointer Blues<A name="003A_001E"></FONT></h4></P>
There may be a simpler explanation than "pointer blues" for the problem mentioned by Mark Petrovic in the Q?/A! column in <I>The C Users Journal</I> September 1990. He reported that some simple programs did not run correctly until a <I>printf()</I> statement was added for debugging. Some C output functions are buffered and do not appear to work when stepping through a program in debug mode, until the buffer is dumped &#151; which a <I>printf()</I> statement does. His description of the way in which the programs didn't work isn't detailed enough to know if this is what he was encountering.<P>
Janet Price<br>
Kalamazoo, MI<P>
You are correct. The <I>printf</I> buffer is usually not dumped to the screen until a \<I>n</I> appears. Without the code though, it is difficult to state precisely what went on. (KP)<P>
<h4><FONT COLOR="#000080"><A name="003A_001F"><I>repeat_format<A name="003A_001F"></I></FONT></h4></P>
In your Q?/A! column (<I>The C Users Journal</I>, September 1990, page 111), I noticed another reader (Doug Oliver, Wichita, KS) had written a function, <I>repeat_format</I>, which expands format strings with embedded repeat specifications to make <I>printf</I>-compatible format strings. He pointed out that the function returned the address of data local to <I>repeat_format</I>, which technically is not guaranteed valid, but which may be copied and used anyway.<P>
The reason this data may be so used has to do with stack usage. Each time the function <I>repeat_format</I> is called, space is reserved on the stack for local data. My compiler (Turbo C 1.5), and perhaps his (he used QuickC), places the string space for <I>newfmt[]</I> farthest away in the stack area from BP (the processor register relative to whose value local variables and parameters are referenced in the compiled functions' code). Also, the 256 bytes reserved for <I>newfmt[]</I> in <I>repeat_format</I> is nearly 100 bytes longer than any of the format strings generated by the sample driver.<P>
In the sample driver and in the recursive calls within <I>repeat_format</I>, it is used as the source parameter to <I>strcpy</I>, e.g. <I>strcpy(newstr</I>, <I>repeat_format(fmtstr[i]))</I>, whose stack uses a portion of <I>repeat_format</I>'s now-invalid data area. Fortunately, in this case other local variables, which are not used for anything after the function returns, are the victims.<P>
To verify this, I changed a copy of the C source so that <I>newstr[152]</I> was used as the last local data item declared in <I>repeat_format</I>. (152 is only slightly longer than the minimum string length necessary to hold the longest format string returned to the sample program.) The result was that, when run, garbage was displayed at the end of the longest format string. As long as <I>repeat_format</I> is left in its original form, and used as a source parameter for <I>strcpy</I>, it should be <I>safe-tempstr[]</I>. The other local variables provide more than enough room for <I>strcpy</I> to execute safely.<P>
It should be noted, though, that the function is somewhat stack-hungry, requiring approximately 350 bytes minimum per call, and could run into trouble in some memory models if deeply-nested format strings were expanded in a data-intensive application.<P>
I also found it interesting to use this function with <I>dprintf</I>, which also appeared in <I>The C Users Journal</I> (September 1990). By modifying <I>dprintf</I> so that it uses <I>repeat-format</I> to expand the format string passed to it, and passing this result to <I>vdprintf</I>, format strings with repeat format specifiers may be treated as ordinary format specifiers in calls to <I>dprintf</I>.<P>
While testing these functions, I decided to check them for Microsoft compatibility with Learn C, a subset of QuickC developed by Microsoft and marketed by Microsoft Press. Unfortunately, <I>dprintf</I> would not run under Learn C, but, instead, generated the message <I>unresolved external: ftol</I>. I subsequently found out that it would not convert from <I>float</I> to <I>int</I>. I am still waiting to hear from Microsoft about the problem as of this writing.<P>
Thank you. I enjoy your column and <I>The C Users Journal</I>.<P>
John W. Bandy<br>
Armuchee, GA<P>
Thank you for your analysis of the code. Using the address of an automatic variable, when that variable is no longer allocated, is a cause for indeterminate code. The algorithm here will work as long as the processor/compiler does not make the previously allocated storage unavailable (i.e., to cause an addressing exception to occur).<P>
One could allocate a large static buffer to fill up with the generated string and return the address of that buffer. This is the way that some standard library routines work. Whether statics or automatics are used, the routine should check to see it does not exceed the length of the array. Some compilers allocate automatic variables on the same stack used for return addresses. Exceeding array limits causes interesting debugging problems on those machines. (KP)<P>
<h4><FONT COLOR="#000080"><A name="003A_0020">External Identifiers<A name="003A_0020"></FONT></h4></P>
I would like to address Andreas Lang's question in the October 1990 issue about keeping all public variables, <I>extern</I> or not, in one header file. Learning from other programmer's code and coming up with a few ideas of my own, I have developed a scheme for just this purpose.<P>
<A href="list1.htm">Listing 1</a>
shows how I would write the example in question. <I>MAIN</I> is <I>#defined</I> in a file that includes this header file, <I>EXT</I> is expanded to nothing, and the initialization is taken by the preprocessor. Otherwise, <I>EXT</I> is expanded to <I>extern</I> and the initialization is skipped.<P>
I have found this scheme very useful, I can keep a single header file for variables and initialize them too.<P>
Bill Sharar II<br>
Denton, Texas<P>
I was very much interested in your response to Andreas Lang in the October 1990 <I>C Users Journal</I>. He is attempting to create a single header file to be shared among any number of source files. This header file would allow reference to the global variables for the program by declaring them as external to all the source files except for one (the "main"source file). His attempt works well except in the case where a global variable must be initialized. I have another solution to the problem, which, though inelegant, would allow him to do what he wishes.<P>
Using his example, <I>test.h</I> would look like <A href="list2.htm">Listing 2</a>.
<P>
The remainder of his example would be unchanged. (I find the use of the keyword <I>Global</I> clearer than the <I>EXTERN</I> used in the example. It better defines what we are trying to do, which is declare a global variable.)<P>
Yes, it is kind of ugly, but it does work (at least when using Microsoft C v5.1). It permits the same code string to declare, define, and initialize the variable as needed, since everything is in one place, with all the associated maintenance benefits.<P>
In that same issue, in your response to Frederick C. Smith, you state that <I>stderr</I> cannot be redirected under MS-DOS. This statement requires clarification. While it is true that there is no command-line facility available to redirect <I>stderr</I>, such as &gt;&amp; in the C-shell under UNIX, redirection under program control is possible by calling the <I>freopen</I> function:<P>
<pre>freopen("error.log", "w", stderr);
system("cmd");</pre>
(These functions do return values that should be checked, but I omitted this for the sake of brevity.)<P>
The previous code sequence would redirect to the new file <I>error.log,</I> then run the program <I>cmd</I>. Any error messages from <I>cmd</I> would then be redirected to <I>error.log</I> (assuming they were written to <I>stderr</I>).<P>
I look forward to your column each month in <I>The C Users Journal</I>. I find it educational and well-written, and like the rest of the magazine, well worth reading. Thank you.<P>
David Hansen<P>
I think I have a solution to Andreas Lang's problem (October 1990) about initializing external variables in header files without having to write them in any other files.<P>
The macros <I>EXTERN</I> and <I>INIT</I> are defined in the header file as shown in <A href="list3.htm">Listing 3</a>.
 The variable is then written in the header file as:<P>
<pre>EXTERN int i INIT(5);</pre>
So, in the main file, the preprocessor produces:<P>
<pre>int i = 5;</pre>
and in all other files it produces:<P>
<pre>extern int i;</pre>
Note that the <I>INIT</I> macro will work independent of <I>val'</I>s type (I think). Is there anything questionable (or just plain wrong) about this method?<P>
Larry Leonard<br>
Norcross, GA<P>
The only problem with this method is that it looks awkward when initializing an array or anything that requires more than one line of initial values. For example:<P>
<pre>EXTERN int array[15] INIT({1,2,3,4,5,6,7,8,9,10,\
         11,12,13,15});</pre>
Notice both the braces next to parentheses and the need for the \ to carry the initializing string to the next line. <I>[Some older compilers required the backslash, but it is not required in standard C. - pjp]</I><P>
Even given the previous three responses, I think I still prefer using a single header file that contains the variable declarations with the keyword <I>extern</I> and a separate source file with the declarations and initial values.<P>
Most of the time I try to avoid using global variables entirely and use access routines that look like:<P>
<pre>static int global_variable = 5;
set_global_variable (value)
   {
   global_variable : value;
   }
get_global_variable(value)
   {
   return value;
   }</pre>
There is no header file to include and only one place where the definition has to appear. (KP)<P>

<h4><a href="../../../source/1991/jan91/pugh.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY>
</HTML>
