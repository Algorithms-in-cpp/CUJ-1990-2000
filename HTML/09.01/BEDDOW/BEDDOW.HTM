


<HTML>
<HEAD>

<TITLE>January 1991/Multi-Threaded C Functions</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjan.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">Multi-Threaded C Functions<A name="0028_000D"><A name="0028_000D"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0028_0000"><A name="0028_0000">AJM Beddow</font></h3><hr><blockquote><P>
<P><i><A name="0028_0000"><A name="0028_0000">Mr. Beddow is an electrical engineer with 15 years experience in electronic and computer system design. His current project involves real-time distributed databases. You may contact him at P.O. Box 36 Wantage, Oxon, OX12 8LL, United Kingdom.</i></P><P>
OS/2 incorporates <I>lightweight threads</I> to implement parallel control with efficient use of system resources. You can construct functions that create the context for multi-threaded execution, control the execution of the threads, and remove the multi-thread context when the thread functions terminate. You can do this with the standard C library under any operating system.<P>
The example of multi-threading uses an explicit function call to change thread context to the next thread of execution. This switch is normally made when an I/O resource is blocked and a thread is required to wait on the resource. The disadvantage of this non-preemptive thread switching is that you must add explicit thread switches within a thread's computation intensive parts to prevent its hogging the CPU. The advantage of non-preemptive thread switching is that reentrant calls to DOS can't run. The result is generally more efficient than the pre-emptive context switching for a non-reentrant operating system.<P>
All thread functions are loaded as part of the one program. You create the threads by reserving stack space for each thread, creating a dispatch table, and dispatching the first thread. If all threads terminate, then the stack context space is recovered and single thread execution continues where it left off. The thread creation function is non-reentrant. It cannot be called from inside a spawned thread.<P>
<h4><FONT COLOR="#000080"><A name="0028_000E">How It Is Done<A name="0028_000E"></FONT></h4></P>
To accomplish multi-threading in C, use the standard functions <I>longjmp()</I> and <I>setjmp()</I>. The <I>setjmp()</I> function takes an environment pointer and creates an environment for the current machine state, returning the value zero when it has done so. A<I> longjmp()</I> with the environment pointer as its parameter causes the program thread to return once more from a non-zero return value. The stack pointer and frame pointer are adjusted to the values saved in the environment when the <I>setjmp()</I> was originally called. This is the basis of the mechanism for switching thread context.<P>
<A href="list1.htm">Listing 1</a>
is an example of <I>setjmp()</I> and <I>longjmp()</I> functions for small model C programs. To return to a thread with its stack context intact, you must reserve a stack area for each thread. You achieve this by recursively calling a thread creation function with a large automatic array, and modifying the stack pointer in a thread environment to point to the top of the array.<P>
<A href="list2.htm">Listing 2</a>
shows my multi-threading functions. The function <I>thread()</I> takes a null terminated list of function pointers and copies the pointers into the <I>threaddata</I> structure array. <I>Thread()</I> then sets up a root environment and calls <I>threadrun().</I> <I>Threadrun()</I> calls itself recursively creating an environment for each thread on the stack and storing a pointer to the environment in the <I>threaddata</I> structure array. It also modifies each stack pointer in the environment to point to the top of its automatic array stack-space.<P>
<A href="fig1.htm">Figure 1</a>
shows the resulting stack arrangement of individual thread environments and stacks. <I>Threadrun()</I> then makes a <I>longjmp()</I> call to the first thread and returns to the <I>setjmp</I> point in <I>threadrun()</I> with a return value of <I>-1</I>. The first thread function pointer is then dispatched and the first thread runs. You make subsequent thread switches by calling <I>threadswitch()</I>, which sets the thread state flag to waiting, saves the thread environment, and calls <I>longjmp()</I> with the next thread environment to dispatch the next thread. When a function terminates, it returns to <I>threadrun()</I> which sets the thread state to terminated and calls <I>threadswitch()</I> to run the next available thread. When <I>threadrun()</I> finds all threads have terminated, it calls <I>longjmp()</I> with a pointer to the root environment, the thread stack spaces are recovered, and single (normal) thread execution resumes.<P>
Note that <I>threadswitch()</I> calls have no effect in single thread execution and can be embedded into functions with no ill effects to single thread execution. The macro <I>SPINDX</I> defines the offset in words of the stack pointer parameter in the environment space. Use <I>DEBUG</I> on a <I>setjmp()</I> call to determine the offset for your own C compiler.<P>
<h4><FONT COLOR="#000080"><A name="0028_000F">Example And Uses<A name="0028_000F"></FONT></h4></P>
In <A href="list3.htm">Listing 3</a>,
 the <I>main()</I> function calls <I>thread()</I> with a list of three function pointers. Each function has two <I>printf()</I> function calls with a thread switch between them. Each function executes in turn to print one statement at a time. Aside from this example, multi-threading allows execution sharing between program function components to be separated from the function control flow. A state-sequencing function for example, may process multiple character streams using a state-sequencer thread for each stream and thread switching when a input stream is blocked. In real- time applications this is a low overhead method of resource sharing between non-time critical tasks.<P>

<h4><a href="../../../source/1991/jan91/beddow.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
