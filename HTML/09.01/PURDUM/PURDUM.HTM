


<HTML>
<HEAD>

<TITLE>January 1991/Some Thoughts On Portability</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjan.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Portability</FONT></H2>

<hr><h2 align="center"><font color="#800000">Some Thoughts On Portability<A name="001E_0005"><A name="001E_0005"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="001E_0000"><A name="001E_0000">Jack Purdum, Ph.D</font></h3><hr><blockquote><P>
<P><i><A name="001E_0000"><A name="001E_0000">Jack Purdum is president of Ecosoft, Inc., and has authored several articles and books on C, including The C Programming Guide and a newly released book on Quick-C. Dr. Purdum can be reached at 8295 Indy Court, Indianapolis, IN 46214.</i></P><P>
It seems safe to say that C remains one of the most popular development languages available for personal computers. If you ask people who use C why they chose it over the alternatives, one reason often given is, "because C is a portable language." Perhaps a better statement would be, "C can be a portable language." Much has already been written about portability &#151; more than we can cover in one article. The purpose of this article is to discuss some portability problems that we've run up against in the past, and to discuss what we did (or should have done) to cope with those problems.<P>
<h4><FONT COLOR="#000080"><A name="001E_0006">What Is Portability?<A name="001E_0006"></FONT></h4></P>
In his book <I>Portability and the C Programming Language</I> (Howard Sams), Rex Jaeschke defines portability as, "the degree to which a program or other software can be moved from one computer system to another."<P>
That is, how easy is it to successfully recompile the source code in a different environment? The "different environment" can take several different forms. For example, we might move the source code to:<P>
1.     a different operating system<P>
2.     a different CPU<P>
3.     a different memory model<P>
4.     a different compiler<P>
5.     a different combination of the above<P>
The permutations of the last item in the list are considerable. You might have the same operating system on different CPUs (e.g., UNIX on an 80486 or 68030), different operating systems on the same CPU (MS-DOS or XENIX on a 80386), different compilers on different CPUs and operating systems, and so on.<P>
To say that C will always fulfill the portability needs for all of the possible system combinations that the programmer might face seems a bit much to assume. Indeed, it seems unlikely that any non-trivial program can be moved between computing environments without some modification. The real issue, then, is, "What can I do to make the port less difficult?"<P>
It should be obvious that the more portable a program is, the less expensive it is to move the code to the new environment. The benefits accrue not only in getting the program up and running in the new environment, but also in the support of the program once the port is complete.<P>
<h4><FONT COLOR="#000080"><A name="001E_0007">Where Am I?<A name="001E_0007"></FONT></h4></P>
In the past thirteen years, our firm has been involved with moving two rather large programs (each consisting of several million bytes of source code) to different environments. The ports involved different operating systems, different CPUs, and even a switch in languages during the port. When we switched programming languages, we had the freedom to redesign the program with portability in mind. (Alas, we weren't sure where the code would be ported to, only that it would likely be ported "somewhere.") With our other program, we were more or less locked into the design and had to port the program within existing code constraints.<P>
The degree to which your program is (or will be) portable is influenced by where you are in the development cycle. Writing portable code while the program is in the design stage is one matter; modifying existing code to be portable is quite another. In the remainder of this article, we will examine some of the things we did in both situations to improve program portability.<P>
<h4><FONT COLOR="#000080"><A name="001E_0008">Getting Organized<A name="001E_0008"></FONT></h4></P>
If you have the luxury of designing a program with portability in mind, you have greater flexibility in writing portable code than if you are locked into an existing design. Almost any (nontrivial) program has five major parts, as shown in <A href="tab1.htm">Table 1</a>.
<P>
Program initialization often involves reading a configuration file (containing information such as: drive or directory where the data are found, colors, fonts, video display information, setting or disabling interrupts, etc.), allocating dynamic memory, and a host of other tasks. Program input might involve reading the keyboard, a data file, or some other device that supplies data to the system. Processing is the manipulation of the data, while output sends the processed data to the desired output device. Finally, program termination involves any housekeeping tasks required by the program (e.g., closing open files, freeing dynamic memory, updating configuration files, and so forth).<P>
A useful step in the design stage is a "sideways" refinement of the five basic elements listed in <A href="tab1.htm">Table 1</a>.
 For example, the Output element might be refined as shown in <A href="tab2.htm">Table 2</a>.
<P>
This is a simple process that helps you to identify the type of functions that will be needed to display the program output. With a little additional thought, the process can help you identify those functions that will probably require hardware-dependent (i.e., non-portable) resources. In <A href="tab2.htm">Table 2</a>,
 it is probably inevitable that the <I>clearscreen()</I> and cursor control functions will use non-portable code.<P>
Having marked the non-portable functions, you should form a source code organization plan. Each of the primary program elements in <A href="tab1.htm">Table 1</a>
should have its own subdirectory. For example, the primary directory might be the program name or just <I>PROJECT</I>. The subdirectories might be <I>INIT, INPUT, PROCESS, OUTPUT</I>, and <I>TERMINAL</I>. In some cases, it may be desirable to have subdirectories below each of these directories. For example, under the <I>OUTPUT</I> subdirectory, we might have <I>PORT</I> and <I>NOTPORT</I>. This helps to keep the non-portable source code separate from the code that can be ported easily.<P>
<A href="tab3.htm">Table 3</a>
shows how a typical project might be laid out. (Only the <I>OUTPUT</I> directory shows the third layer of disk organization.)<P>
In the <I>PROJECT</I> directory, all five elements are brought together to form the completed application. Each of the five elements will have test code that is used to exercise that particular element of the program. If done properly, much of the code in these subdirectories will likely end up in their own library (<I>LIB</I>) files.<P>
An alternative is to simply place all of the non-portable source code into a single "non-portable" subdirectory. The important thing is for you to identify which elements are likely to be non-portable. Once the functions are identified and separated as being non-portable, you can look for possible alternatives that might allow you to recode them in a more portable fashion. At the very least, knowing which functions are non-portable will make you more aware of the types of resources you will need in the new environment.<P>
Using a disk layout similar to that shown in <A href="tab3.htm">Table 3</a>
assumes that you have a means by which you can quickly locate any given function definition. That is, you will need a utility program that can read all source files in a subdirectory and tell you the file and line number where each function definition appears. An example of such a utility can be found in the February 1989 issue of <I>Computer Language</I> or in the <I>C Programmer's Toolkit</I> (Que Corporation). Something as simple as having an organized plan for the source code and being able to locate a given function quickly can significantly reduce development time.<P>
While you are in the process of organizing things, you should limit all I/O functions as much as possible. For example, in our statistics package, all screen output goes through a single function. Although we didn't anticipate it, this is going to prove to be a very smart move when (if?) we move the program to Windows. The reason is because <I>printf()</I> is not usable in the Windows (or almost any other GUI) environment. Had we used <I>printf()</I> throughout the source code, it would take days of editing just to make this one change.<P>
<h4><FONT COLOR="#000080"><A name="001E_0009">Know Your Resources<A name="001E_0009"></FONT></h4></P>
If you know the environment that you are moving to, it will pay to study the programming tools that will be used in both environments. For example, when we worked in the CP/M environment, the development tools we used supported identifiers of up to eight characters. When we switched compilers, the compiler still recognized the first eight characters as significant, but the linker now only recognized the first six as being significant. We made the mistake of assuming that both the compiler and linker recognized the same number of significant characters. This little erroneous assumption cost us almost two weeks, to reduce the variable names to the shorter length.<P>
You should also exercise care in making assumptions about other resources and features available to you in the two environments. For example, if the existing code was written with a K&amp;R compiler and the target machine supports an ANSI compiler, certain resources and features may be missing. The K&amp;R compiler will support low-level (unbuffered) file I/O while the ANSI compiler is only required to supply high-level (buffered) functions as part of the standard library. Although present compilers support both types of file I/O, it might prove costly to make the assumption in the future.<P>
Another feature that may be missing (even on UNIX) is that some compilers do not support function prototyping. If you find yourself faced with this limitation, you will need to create a header file that lists the function declarations with prototypes (using, for example, <I>#ifdef ANSI</I>) and without <I>(#else)</I> prototypes. The same method can be used to toggle K&amp;R or ANSI coding style for function arguments in a function definition. <A href="list1.htm">Listing 1</a>
shows an example, with the corresponding header file in <A href="list2.htm">Listing 2</a>.
<P>
Note that both listings use the K&amp;R style of <I>#ifdef</I> rather than the ANSI <I>#if defined</I> preprocessor directive. While the style is not particularly pleasing to the eye, it does let you have the advantages of function prototyping in the ANSI environment without modifying the source code. And, after all, the goal is to support one body of source code for all environments.<P>
Compiler differences between environments will also affect other coding elements. For example, things like structure passing and assignment, certain keywords (e.g., <I>const, enum, far, near, void, volatile</I>), and initialization of auto arrays can be affected. Even the size of identical data structures may vary because one machine may require byte alignment and the other doesn't.<P>
Certain coding techniques should always be used, even if you don't plan to port the code to another environment. Hopefully, you already use a number of these coding techniques while others might be new to you.<P>
<h4><FONT COLOR="#000080"><A name="001E_000A">Magic Numbers<A name="001E_000A"></FONT></h4></P>
Every C programmer is familiar with the use of <I>#define</I> to avoid using magic numbers in a program. For example, define a macro:<P>
<pre>#define TABLESIZE 50</pre>
and then use it as in:<P>
<pre>for (i = 0; i &lt; TABLESIZE; i++) {
   printf("\n%d", number[i]);
}</pre>
This is a common coding practice. The advantage is that changes to the <I>number[]</I> array are easily accounted for by a single change to the symbolic constant <I>TABLESIZE</I> regardless of how many times <I>TABLESIZE</I> appears in the source code.<P>
While this approach reduces the amount of editing required in the source file, a better solution is possible. For example:<P>
<pre>int tablesize;
/*  main() plus some other code */
tablesize = sizeof(number) / sizeof(number[0]);
for (i = 0; i &lt; tablesize; i++) {
   printf("\n%d", number[i]);
}</pre>
There are several advantages to using this construct instead of the <I>#define</I>. First, any changes to the number of elements in the <I>number[]</I> array no longer require further editing the source file. (Be honest. Have you ever miscounted the number of elements in an array?) The program automatically adjusts to the new size of the <I>number[]</I> array. Second, because <I>tablesize</I> is a variable, it may be more useful with a source code debugger. Symbolic constants are often lost to the debugger.<P>
Another portability problem arises with macros used as bit masks. While the macro<P>
<pre>#define INTEGER_MASK 0x7fff</pre>
works fine on one system, it may fail miserably on a different system. One reason is because the size of an integer may vary between machines. A second reason might be due to the ordering of the integer in memory. (Is the high or low byte stored first?) Related problems may occur with any bitwise operator or manipulation of a bit field data item. I'm not sure if there is a totally portable means to cope with such problems. You should, however, document such items clearly in the source code.<P>
<h4><FONT COLOR="#000080"><A name="001E_000B">Improper Use Of <B><I>#define</I><A name="001E_000B"></B></FONT></h4></P>
In some cases, bad coding practices only show up after a port. One potential problem is using a <I>#define</I> when a <I>typedef</I> is more appropriate. We know that making the source code more readable is always a good idea. With that in mind, we try something like:<P>
<pre>#define INTERGER_POINTER int  *
/* ....some code */
INTEGER_POINTER table;</pre>
After the preprocessor pass, the definition for table becomes:<P>
<pre>int *table;</pre>
and the code works fine. However, in the process of making the port, you find you need a second pointer in the new environment and you change the definition statement to:<P>
<pre>INTEGER_POINTER table, delta;</pre>
However, because a macro is a simple textual substitution, the statement actually becomes:<P>
<pre>int *table, delta;</pre>
The variable <I>table</I> is defined as a pointer, but <I>delta</I> remains a straight integer. The proper solution is a <I>typedef</I>:<P>
<pre>typedef int *INTEGER_POINTER;</pre>
Now the code works the way you intended it to work, even with multiple identifiers.<P>
<h4><FONT COLOR="#000080"><A name="001E_000C">String Constants<A name="001E_000C"></FONT></h4></P>
Some time ago we were asked if we wanted to have our statistics package translated into a foreign language. While the benefits of the translation probably would have been substantial, it required giving out the program source code. Had we thought about foreign translations during the design stage, we would have altered the way we handled string constants in the program.<P>
We should have written all of the string constants to be defined as an array of pointers to <I>char</I>. For example:<P>
<pre>char *message[] = {
   "Select variable name:",     /*  Message # 0 */
   "All or Subset (A, S):",     /*  1 */
   "Printer or File (P, F):"    /*  2 */
   /* More in the list */
   "Out of memory"              /*  N */
};</pre>
First, this approach uses memory more efficiently because you can have multiple occurrences of a constant without using additional memory. (If you plan to port to Windows, this method is consistent with placing string constants in a resource file.) Second, you can use the "tablesize" approach discussed earlier to determine the size of the string table without using a macro. Third, anyone who wanted to translate the program need have only a copy of the string table, not the code itself. Finally, if a constant does need to be changed, a single edit is all that is necessary to change every instance of the constant throughout the program.<P>
As you may know, many foreign countries use different formats for dates, time, currency, and similar information. Although our packages don't have these particular formatting requirements, they may well apply to your application. If that is the case, you should examine the <I>locale.h</I> header file to see if any of the symbolic constants defined there can be used to advantage in your code. It may help make the port a bit easier.<P>
<h4><FONT COLOR="#000080"><A name="001E_000D">Program Input<A name="001E_000D"></FONT></h4></P>
Another fortuitous design decision we made was to use a single function to get all input from the keyboard. We felt we had to do this because we needed not only to read ASCII keystrokes but also to detect the simultaneous pressing of the function and shift keys. Porting the code to an environment like Windows won't be easy, but at least all of the keyboard input is isolated to one function.<P>
While we're on the subject, it's been our experience that <I>scanf()</I> is not a good function to use for data input. Not only is <I>scanf()</I> a huge function and difficult to use properly, the function makes it difficult for your program to sense input errors. Further, functions that rely on a terminating newline character don't translate well in some environments. In Windows, for example, pressing the <I>Enter</I> key is the same as clicking on the <I>OK</I> button.<P>
Another problem is that the behavior of <I>scanf()</I> may vary among compilers. For example, ANSI states that the <I>e</I> and <I>g</I> conversion characters are not case sensitive, while System V doesn't specify how these conversion characters are viewed. On the other hand, ANSI specifies that the <I>l </I>(for "long") modifier in <I>scanf()</I> is case sensitive. For example, <I>"%lf"</I> differs from <I>"%Lf"</I>. The latter form is used to get a <I>long double.</I> In some environments, however, a <I>long double</I> won't even be available in <I>scanf()</I> because that data type is not supported (e.g., System V). Little details like these need to be investigated if you still wish to use <I>scanf()</I>.<P>
A related problem arises when testing for the end of a user's input from the keyboard, regardless of the function used to capture the input. Some compilers use the newline character (<I>'\n'</I>) to terminate input while others use the carriage return character (<I>'\r'</I>). For example, the statement<P>
<pre>if (buff[0] == '\n') {
   /* The user didn't enter anything */
}</pre>
is often used to see if the user entered anything from the keyboard. The code will work fine with one compiler but fail with a different compiler. If your code tests for either of these character constants to sense end of input, you may want to <I>#define</I> a symbolic constant rather than test for a specific character. That is, if your compiler uses the carriage return to terminate user input from the keyboard, the code would be more portable if you write<P>
<pre>#define ENDOFINPUT '\r'
if (buff[0] == ENDOFINPUT) {
   /* The user didn't
      enter anything */
}</pre>
If data input is coming from a disk file, keep in mind that data sizes may vary among environments. For example,<P>
<pre>#define RECORD 50
fread(buf, RECORD, 1, fpin);</pre>
may not work properly. First, the data types themselves may not be the same size. (Does an <I>int</I> require two or four bytes of storage?) Second, the system may require the data items to be aligned in some special way. This may mean that the data must be padded with extra bytes to fulfill the alignment requirements. The moral here is: Don't use a symbolic constant when the <I>sizeof</I> operator can accomplish the same task.<P>
<h4><FONT COLOR="#000080"><A name="001E_000E">Numbers<A name="001E_000E"></FONT></h4></P>
We have already mentioned several instances where a difference in the size of a data item can have an impact on the program. Most of these considerations centered on the storage requirements (such as the size of an <I>int</I>). However, the storage requirement for a data item is not the only way such differences show up in a program. Clearly, a difference in storage requirements implies that the numbers are capable of different numeric ranges. Indeed, even data items with the same storage requirements can have a differing ranges of values. For example, is the default for a <I>char</I> a signed or unsigned quantity?<P>
If you are moving to an ANSI compliant compiler, the <I>limits.h</I> header file should be helpful in answering such questions. If your present compiler does not have the <I>limits.h</I> header file, you might want to consider writing your own. Most compilers supply enough information about the data types that creating your own <I>limits.h</I> header file is not very difficult. (If you haven't done so already, you should examine the symbolic constants defined in this header file.)<P>
Another header file that may prove useful is <I>float.h.</I> It defines almost everything you need to know about floating point variables (e.g., number of digits of precision, floating point exceptions, exponent limits, etc.). One potential problem area for programs that use floating point variables is the <I>epsilon factor</I> for a floating point number. (This factor is called <I>DBL_EPSILON</I> for type <I>double</I>.) The epsilon factor is the smallest value that can be added to 1.0 and satisfy the condition:<P>
<pre>1.0 + DBL_EPSILON != 1.0</pre>
The value of epsilon can vary widely among compilers. Such wide variation can produce bugs that are very difficult to track down. Most C programmers know that testing a floating point variable against 0.0 can be dangerous because of the epsilon factor. You should check the epsilon factor for both compilers to see if they are similar in magnitude. If they are not, you may have to incorporate the <I>DBL_EPSILON</I> constant into your code.<P>
<h4><FONT COLOR="#000080"><A name="001E_000F">Odds And Ends<A name="001E_000F"></FONT></h4></P>
Without thinking about it very much, we developed the habit of documenting our code, often using nested comments. In other cases, we often leave test code in the source file and simply surround it with comment characters. However, because we tend to comment the test code as well, we end up with nested comments.<P>
Some compilers do not allow nested comments. It is a real pain to "uncomment" nested comments. We have since moved away from commenting out test code and now use preprocessor directives to conditionally include the test code in the program. For example, we used to comment out the code in the following manner:<P>
<pre>/*
/*  Inspect the values for
   table[] */
for (i = 0; i &lt; MAXSIZE; i++) {
   printf("table[%d] = %g", i, table[i]);
}
*/</pre>
This approach results in a nested comment. Still, we feel that the comments are often useful and didn't want to simply throw them away. Now, we would write the same debug code as:<P>
<pre>#ifdef DEBUG
/* Inspect the values for
   table[] */
for (i = 0; i &lt; MAXSIZE; i++) {
   printf("table[%d] = %g", i, table[i]);
}
#endif</pre>
If we need to turn on the test code, we can simple insert a <I>#define DEBUG</I> and recompile the program to activate the debug code.<P>
Finally, I'd like to present a brief laundry list of don'ts that can cause problems in the middle of a code port.<P>
Don't use lowercase <I>l</I> as a modifier to a <I>long</I> constant; it looks too much like the digit <I>1</I>. Use the uppercase <I>L</I>, as in<P>
<pre>a = 20L;</pre>
Don't use a <I>long double</I> if you don't really need to. Some compilers don't support it yet, plus is can add significantly to the data segment requirements. While you're at it, check to see if <I>float</I> arithmetic is supported. If your application can use the lower precision, it might prove useful.<P>
Don't assume a pointer is a fixed length, especially in a mixed-model environment. Sometimes all data pointers are only two bytes, but function pointers are four bytes.<P>
Don't assume wildcard characters are universal across environments. A question mark and asterisk may mean nothing on a different system.<P>
Don't assume a filename is limited to a certain length.<P>
Don't assume a <I>NULL</I> pointer means all bits are set to 0; it is implementation defined. All you can safely assume is that the test for a <I>NULL</I> pointer behaves in the normal way (even though the bits may be nonzero).<P>
Don't use environment variables if you can avoid them. If you can't live without them, make sure you mark those functions that use them.<P>
Don't create your own symbolic constants if ANSI already provides for them (e.g., <I>DBL_EPSILON, SEEK_CUR</I>, etc.).<P>
As a final rule, if you follow most of the suggestions presented here, do take the estimated time required for the port, double it, and try to live within that time frame. C is not the perfect portable language, but it's way out in front of whatever is in second place.<P>

<h4><a href="../../../source/1991/jan91/purdum.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
