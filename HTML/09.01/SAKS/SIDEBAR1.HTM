<HTML><head><TITLE>January 1991/Applying C++/Sidebar</TITLE></head><BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h3 align="center"><FONT FACE="Garamond" COLOR="#000080">Turning Prototypes On And Off</FONT></h3><hr>
<BLOCKQUOTE>
C++ requires that function declarations have prototyped parameter lists, but Classic C won't accept prototypes. Code that compiles as both C++ and Classic C must sense which language is compiling the code, and turn the prototypes on and off accordingly. C++ compilers predefine the macro <I>_cplusplus</I>, so<P>
<pre>#ifdef _cplusplus</pre>
determines the current language.<P>
The simplest way to write a header that is both Classic C and C++ is to write all the function declarations twice - once with an empty parameter list and once with a prototyped parameter list. Select the appropriate declarations by testing <I>_cplusplus</I>, as in<P>
<pre>#ifdef __cplusplus
double foo(char *, int);
int bar(char *);
#else
double foo( );
int bar( );
#endif</pre>
If you would also like to use prototypes when compiling with Standard C, add a test for the predefined macro <I>_STDC_</I>. You can write the test as<P>
<pre>#if defined_cplusplus || \
defined __STDC__</pre>
but Classic C compilers might not understand the <I>defined</I> operator. Write the test as<P>
<pre>#ifdef __cplusplus
#define PROTOTYPES
#else
#ifdef __STDC__
#define PROTOTYPES
#endif
#endif</pre>
To avoid writing each function declaration twice, make each parameter list conditional. Define a macro <I>PROTO</I> as<P>
<pre>#ifdef PROTOTYPES
#define PROTO(x) x
#else
#define PROTO(x) ( )
#endif</pre>
Then write the function declarations as<P>
<pre>double foo PROTO((char *, int));
int bar PROTO((char *));</pre>
The extra set of parentheses around each parameter list transforms the comma-separated list of tokens into a single macro argument. Thus, if prototypes are available, then<P>
<pre>PROTO((char *, int))</pre>
expands to<P>
<pre>(char *, int)</pre>
Otherwise, it expands to just <I>( )</I>.<P>
C++ wants you to replace old-style function definition headings like<P>
<pre>double foo(s, n)
char *s;
int n;
{
...</pre>
with prototype definitions like<P>
<pre>double foo(char *s, int n)
{
...</pre>
But Classic C won't accept the prototypes. To make the replacement conditional, write the function definition as <P>
<pre>#if PROTOTYPES
double foo(char *s, int n)
#else
double foo(s, n) char *s; int n;
#endif
{
...</pre>
This heading is admittedly hard to read. Since C++ only issues a warning (not an error) for old-style headings, you may prefer to just live with the warnings.<P>
</BLOCKQUOTE>
</BODY>
</HTML>
