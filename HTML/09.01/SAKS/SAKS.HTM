


<HTML>
<HEAD>

<TITLE>January 1991/Applying C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjan.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Applying C++<A name="0038_0019"><A name="0038_0019"></font></h2><P>
<h3 align="center"><A name="0038_0000"><A name="0038_0000">Paving The Migration Path</h3><P>
<h3 align="center"><font color="#800000">Dan Saks</font></h3><hr><blockquote><P>
<P><i><A name="0038_0000"><A name="0038_0000">Dan Saks is the owner of Saks &amp; Associates, which offers consulting and training in C, C++ and Pascal. He is also a contributing editor of TECH Specialist. He serves as secretary of the ANSI C++ committee and is a member of the ANSI C committee. Readers can write to him at 287 W. McCreight Ave., Springfield, OH 45504 or by email at dsaks@wittenberg. edu.</i></P><P>
There are many good reasons to switch from C to C++. In addition to the full functionality of C, C++ offers stricter compile-time checking, type-safe linkage, inline expansion of functions, reference types, overloaded function names, and overloaded operators. And of course, C++ provides language-level support for encapsulation (data abstraction) and object-oriented programming (OOP).<P>
An unfortunate consequence of the current hype surrounding C++ and OOP is that some people believe that using C++ for anything other than OOP (employing both inheritance and polymorphism) misuses the language. I strongly disagree. OOP is very useful in some applications, but not all. C++ adapts well to different styles of programming, and OOP is just one of those styles. The language has much to offer, even if you're not ready for OOP.<P>
Still, there are some practical reasons for not using C++. C++ compilers are not as widely available as C compilers. Even if you can find C++ compilers for your target environment(s), you might not find the necessary support tools, such as symbolic debuggers and application libraries. A formal standard for C++ is still years away, and there isn't even a full implementation of the current <I>de facto</I> standard <a href="#ref1">[1]</a>. I have no doubt that the obstacles to C++ will eventually disappear, but that doesn't help you today.<P>
Even if you're not ready to move to C++, you can pave the migration path by writing your C code so that it also compiles as C++. C++ is an improper superset of Standard C; only a short list of C constructs won't compile as C++. Fortunately, you can easily rewrite every C construct that is not C++ as C that is also C++. (Note: Unless I explicitly write "Classic C", "C" means Standard C.)<P>
Tom Plum calls the common subset of C and C++ "C-". (Don't confuse this with "C--", Jim Gimpel's pejorative for C++ as a "strongly hyped" language <a href="#ref2">[2]</a>.) Converting a program from C to C- is the first step in converting to C++. You might as well plan ahead and write all your C as C- by observing the following guidelines.<P>
<h4><FONT COLOR="#000080"><A name="0038_001A">Function Declarations<A name="0038_001A"></FONT></h4></P>
Classic C has fairly relaxed rules for data type conversions. Whereas Standard C encourages you to get your data types right (and often warns you when you don't), C++ is much more insistent. C++ compilers frequently issue errors for transgressions that only merit a warning in C. C++ is particularly finicky about function declarations.<P>
<A href="list1.htm">Listing 1</a>
shows a simple Classic C program in the lax style of the first edition of K&amp;R <a href="#ref3">[3]</a>. The program compiles as Standard C, but not as C++. C++ has at least two complaints about <A href="list1.htm">Listing 1</a>:
 (1) <I>greet</I> is called before it is declared, and (2) <I>printf</I> is not declared at all. On most C++ compilers, both error messages say something about a missing prototype. Declaring <I>printf</I> is easy; just add<P>
<pre>#include &lt;stdio.h&gt;</pre>
at the top of the source file. Declaring <I>greet</I> is a little more complicated and requires some decisions.<P>
If you move the definition for <I>greet</I><I> </I>above <I>main</I>, most C++ compilers will accept the definition as a declaration, although they will issue a warning that the definition's style is obsolete. Rewrite the old-style heading<P>
<pre>greet (s)
   char *s;
   {
   ...</pre>
as the prototyped heading<P>
<pre>greet(char *s)
   {
   ...</pre>
to silence the warning. With a little extra thought, you might recognize opportunities to add appropriate <I>const</I> qualifiers to the parameters, such as<P>
<pre>greet(const char *s)</pre>
Once <I>greet</I> is declared before it's used, the compiler notices that <I>greet </I>has a default return type of <I>int</I>, but no return expression. You can add an explicit <I>void</I> return type to the function heading, or add a return statement with a integral expression. In this case, the <I>void</I><I> </I>return type is more appropriate.<P>
Notice that main also has a default return type of <I>int</I>, and no return expression. Curiously, most C++ compilers treat a missing return expression as an error, but don't even issue a warning for a missing return expression in <I>main</I>. I hope future compilers will issue at least a warning. In any event, I recommend explicitly declaring <I>main</I> as a function returning <I>int</I> with a normal return value of <I>EXIT_SUCCESS </I><I>(</I>from<I> </I><I>&lt;stdlib. h&gt;</I><I>)</I>.<P>
As an alternative to moving <I>greet</I>, you can insert the prototype declaration<P>
<pre>void greet(const char *);</pre>
above <I>main</I>. However, you must still rewrite the function definition as a prototype to turn off the compiler's warning for using an obsolete function heading. Converting a C program to C-by inserting prototypes is probably easier than moving entire function definitions, but I prefer to move the functions to eliminate unnecessary prototypes. (See <A href="list2.htm">Listing 2</a>.
)<P>
In C, the function declaration<P>
<pre>int f( );</pre>
means that <I>f</I>'s parameter list is completely unspecified &#151; <I>f</I> can have any number of arguments of any type. To declare <I>f</I> with no arguments, write<P>
<pre>int f(void);</pre>
In C++, both declarations for <I>f </I>mean that <I>f </I>accepts no arguments. To avoid confusion in C-, specify empty parameter lists explicitly using <I>void</I>.<P>
Function prototypes pose a real problem if you want your header and source files to compile as both Classic C and C++. Whereas Standard C supports prototypes but doesn't require them, Classic C doesn't support prototypes and C++ requires them. If you're still struggling with Classic C compilers, then writing in C- may be more trouble than it's worth. Nevertheless, you can use the preprocessor to write code that works with both Classic C and C++. See the sidebar, <A HREF="sidebar1.htm">"Turning Prototypes On and Off"</A> for details.<P>
<h4><FONT COLOR="#000080"><A name="0038_001B">Pointer Conversions<A name="0038_001B"></FONT></h4></P>
In Standard C, assignment between different (non-<I>void</I>) pointer types is non-portable and produces a diagnostic. Most C compilers generate a warning against assignments like<P>
<pre>char *pc;
int *pi;
...
pc = pi;</pre>
but compile the code nonetheless. C++ treats the assignment as an error. It is permitted only with an explicit cast:<P>
<pre>pc = (char *)pi;</pre>
When programming in C-, don't ignore the warnings or turn them off. Rewrite the code to use compatible pointers or insert a cast.<P>
Standard C allows assignment of any pointer type both to and from <I>void </I>pointers. This allows C programmers to write functions like<P>
<pre>void free(void *p);</pre>
that quietly accept any pointer type. It also permits the return value of functions like<P>
<pre>void *malloc(size_t size);</pre>
to be copied to any pointer type without a cast. C++ considers assignment of <I>void</I> pointers to non-<I>void</I> pointers as a "hole" in the type safety, and permits it only with an explicit cast. Thus, for example, you must write the assignment in<P>
<pre>t *p;
...
p = malloc(sizeof(t));</pre>
as<P>
<pre>p = (t *)malloc(sizeof(t));</pre>
to be valid in C-.<P>
<A href="list3.htm">Listing 3</a>
shows an implementation of the Standard C function <I>memcpy </I>written in C-. C does not require the casts in the initializations of <I>t1</I> and <I>t2</I>, but C++ does.<P>
C++ allows assignment of a non-<I>void</I> pointer to a <I>void</I> pointer, but only if the non-<I>void</I> pointer points to an object that isn't <I>const</I> or <I>volatile</I>. That is, given<P>
<pre>const char name[ ] = "Dan";
void *p;</pre>
then neither<P>
<pre>p = name;</pre>
nor<P>
<pre>memcpy(name, "Ben", sizeof (name));</pre>
are not permitted in C++. (The first parameter of <I>memcpy</I> is a non-<I>const void *</I>). C compilers typically compile these statements with only a warning. As always, you can force the conversion to <I>void *</I> with an explicit cast.<P>
<h4><FONT COLOR="#000080"><A name="0038_001C">Enumerations<A name="0038_001C"></FONT></h4></P>
In C, enumeration types are simply integral types. For example, given<P>
<pre>enum color {RED, WHITE, BLUE};
enum color c;
int n;</pre>
then C permits assignments like<P>
<pre>c = 1;
n = BLUE;</pre>
C even permits<P>
<pre>enum day {YESTERDAY, TODAY,
TOMORROW};
enum day d = RED;</pre>
although some compilers issue a warning for this assignment.<P>
C++ treats each enumeration as a distinct type. Assignments like <P>
<pre>c = 1;
d = RED;</pre>
are not allowed. C++ still promotes enumeration constants to integers, so<P>
<pre>n = BLUE;</pre>
is legal C++.<P>
When programming in C-, treat each enumeration as a distinct type. However, you can safely assume that enumerations promote to integers.<P>
<h4><FONT COLOR="#000080"><A name="0038_001D">Linkage<A name="0038_001D"></FONT></h4></P>
In Standard C, a global data object may be declared repeatedly without the <I>extern</I> specifier, in the same program or even in the same compilation. In C++, a global data declaration without <I>extern</I> is a definition, and each global data object must be defined exactly once in a program. (Note that a global data declaration with an initializer - with or without the <I>extern </I>specifier - is also a definition.)<P>
For example, suppose an integer <I>total</I> is shared by several source files in a C++ program. <I>total</I> must be defined in exactly one of the files using any of the following:<P>
<pre>int total;
int total = 0;
extern int total = 0;</pre>
Any other source file that references <I>total</I> must declare<P>
<pre>extern int total;</pre>
When programming in C-, observe the linkage rules of C++. Make sure that the external declarations in your header files are indeed declarations (with explicit <I>extern</I> and no initializer) and not definitions. If you use an external definition in a header and include that header in more than one source file of a C++ program, the linker will protest against multiple defined names.<P>
In C, the default linkage for global const objects is extern; in C++ it's static. For example, suppose file <I>f.c</I> contains<P>
<pre>const MAX = 100;</pre>
and file <I>g.c</I> contains<P>
<pre>extern const MAX;</pre>
If you compile and link <I>f</I>.<I>c</I> and <I>g.c</I> using C, the <I>MAX</I> in <I>f</I>.<I>c</I> has external linkage and provides a definition to satisfy the reference in <I>g.c.</I> If you compile using C++, the <I>MAX</I> in <I>f</I>.<I>c</I> has internal linkage, and the <I>MAX</I> in <I>g.c</I> is an unresolved reference. In C-, use explicit storage class specifiers (<I>extern</I> or <I>static</I>) on all global <I>const</I> declarations.<P>
<h4><FONT COLOR="#000080"><A name="0038_001E">Name Spaces<A name="0038_001E"></FONT></h4></P>
C++ has 16 more keywords than Standard C:<P>
<pre>asm            private
catch          protected
class          public
delete         template
friend         try
inline         this
new            virtual
operato        throw</pre>
C- programs should not use these keywords as identifiers.<P>
C++ predefines the macro <I>__cplusplus</I>. Many C++ compilers (especially those based on AT&amp;T's <I>cfront</I> translator) use names containing __ (a double underscore) in the translation process. C- programs should avoid identifiers with double underscores anywhere in the name. <I>[In standard C, you should avoid even a single  leading underscore. -pjp]</I><P>
C puts all ordinary identifiers (such as function, type and variable identifiers) in a single (scoped) name space, and puts all tags (for enumerations, structures, and unions) in a separate name space. Thus, for example, C lets you declare a structure and a function with the same name in the same scope, like<P>
<pre>struct tnode
   {
   char *word;
   struct tnode *left, *right;
   };
int tnode(const char *s);</pre>
Tag names in C are not type names, so you can't write<P>
<pre>tnode *t;</pre>
You must carry the tag keyword around with the tag name, as in<P>
<pre>struct tnode *t;</pre>
You can simplify tag references in C by defining a type name with the same spelling as the tag, like<P>
<pre>typedef struct tnode tnode;</pre>
and write<P>
<pre>struct tnode *t;</pre>
as simply<P>
<pre>tnode *t;</pre>
In C++, tags are also type names. That is, you can declare<P>
<pre>tnode *t;</pre>
without also defining <I>tnode</I> as a <I>typedef</I>. For compatibility with C, C++ accepts<P>
<pre>typedef struct tnode tnode;</pre>
as well as<P>
<pre>struct tnode *t;</pre>
However, C++ does not allow a tag name to also be a function or variable name in the same scope, so that<P>
<pre>struct tnode;
...
int tnode(const char *s);</pre>
is invalid.<P>
In C-, simply define each tag name as a type name in the same scope. For example, declare <I>tnode</I> in C- as<P>
<pre>typedef struct tnode tnode;
struct tnode
   {
   char *word;
   tnode *left, *right;
   };</pre>
and use <I>tnode</I> (rather than <I>struct tnode</I>) in all subsequent references.<P>
In C, a tag name or enumeration constant defined within a <I>struct</I> (or <I>union</I>) has the same scope as that <I>struct</I>. In <A href="list4.htm">Listing 4</a>,
 for example, tag names <I>t</I> and <I>e</I> and enumeration constants <I>X</I> and <I>Y</I> have the same scope as tag name <I>s</I>. Thus the declarations of <I>ee</I><I> </I>and <I>tt</I> are perfectly valid, but<P>
<pre>const int X = 0;</pre>
is an error in C because <I>X</I> is already defined as something else.<P>
C++ compilers interpret <A href="list4.htm">Listing 4</a>
differently depending on their vintage. According to the C++ <I>Annotated Reference Manual</I> <a href="#ref1">[1]</a> (based on the AT&amp;T 2.1 C++ <I>Product Reference Manual</I> <a href="#ref4">[4]</a>), classes introduce a new scope. Since <I>structs</I> are just a special case of classes, nested type names and enumeration constants are local to  the enclosing <I>struct.</I> By this rule,<P>
<pre>const int X = 0;</pre>
is valid. However, the declarations of <I>ee</I><I> </I>and <I>tt</I> are invalid, because identifiers <I>e </I>and <I>t</I> are out of scope. <P>
Earlier versions of C++ (including those compatible with AT&amp;T Release 2.0) export tag names defined in a <I>struct</I> to the scope of that <I>struct</I>, but keep enumeration constants local to the <I>struct</I>. By these rules, the declarations of <I>ee, tt</I> and <I>const int</I> <I>X</I> are allowed, but the reference to <I>Y</I> in the initializer of <I>ee</I> is undefined.<P>
Although nested <I>struct </I>and <I>enum</I><I> </I>definitions can be useful in C++, they're not much help in C. Given the variation in rules for nested definitions, your safest bet is to avoid nested definitions in C-.<P>
<h4><FONT COLOR="#000080"><A name="0038_001F">Odds And Ends<A name="0038_001F"></FONT></h4></P>
C discards extra characters in a string initializer. For instance, C ignores the \<I>0</I> at the end of "Dan" in<P>
<pre>char name[3] = "Dan";</pre>
C++ refuses to turns its back on defenseless characters. You must write the initializer as<P>
<pre>char name[3] = {'D', 'a', 'n'};</pre>
or face the wrath of the compiler.<P>
In C, <I>sizeof</I><I>(</I><I>'a</I>'<I>)</I> equals <I>sizeof</I><I>(</I><I>int</I><I>)</I>, but in C++, <I>sizeof</I><I>('</I><I>a</I><I>') </I>equals <I>sizeof</I><I>(</I><I>char</I><I>)</I>. I have yet to encounter a situation in C- where this makes a difference. Please let me know if you find one.<P>
<h4><FONT COLOR="#000080"><A name="0038_0020">A Step In The Right Direction<A name="0038_0020"></FONT></h4></P>
To a large extent, writing your C code so that it also compiles as C++ imposes no restrictions on the expressive power of C. Rather, it forces you to abandon poor coding practices, most of which are already considered obsolete by the C standard. The resulting code is just as efficient, but a little safer than Standard C, thanks to C++'s more rigorous type checking. By writing in C-, you are paving the road to the future. You can step up to a better C whenever you're ready.<P>
<h4>References</FONT></h4></P>
<a name="ref1">[1]</a>     Ellis, Margaret A. and Stroustrup, Bjarne, <I>The</I> <I>Annotated C++ Reference Manual</I>. Addison-Wesley, Reading, MA, 1990.<P>
<a name="ref2">[2]</a>     Gimpel, Jim, "C-," <I>The C Gazette</I>, 4:4, Summer 1990.<P>
<a name="ref3">[3]</a>     Ritchie, Dennis M. and Kernighan, Brian W., <I>The C Programming Language</I>. Prentice-Hall, Englewood Cliffs, NJ, 1978.<P>
<a name="ref4">[4]</a>     <I>AT&amp;T</I> <I>C</I>++ <I>Language System Release 2.1 Product Reference Manual</I>, AT&amp;T, 1989.<P>

<h4><a href="../../../source/1991/jan91/saks.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
