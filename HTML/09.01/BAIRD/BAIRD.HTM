


<HTML>
<HEAD>

<TITLE>January 1991/Using Large Arrays In Turbo C</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjan.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">Using Large Arrays In Turbo C<A name="0026_000B"><A name="0026_000B"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0026_0000"><A name="0026_0000">Stuart T. Baird</font></h3><hr><blockquote><P>
<P><i><A name="0026_0000"><A name="0026_0000">Stuart Baird first learned to program on an IBM 1620 in 1966, going on to study computer science at the University of Illinois. Now a General Electric employee, he has long since abandoned professional programming for administration, but remains an avid recreational programmer at home, using C.</i></P><P>
<h4><FONT COLOR="#000080"><A name="0026_000C">Declaration Of Large Arrays<A name="0026_000C"></FONT></h4></P>
Declaring large arrays within a function such as <I>main()</I> is something programmers brought up on other programming languages are used to doing without extra thought. For example,<P>
<pre>int a[20000],b[20000];</pre>
is the C equivalent of the DIM or DIMENSION statements that a programmer would use in BASIC or FORTRAN. It's a perfectly acceptable declaration in C, and it compiles in Turbo C (Borland International's C compiler) without comment. So, it comes as a shock when a simple program using that declaration doesn't work.<P>
Turbo C, of course, is written for the Intel 8086 and related microprocessors, which have a segmented memory architecture. These microprocessors normally address only one segment, 64K bytes of memory, at a time. The designer of a compiler that produces code to execute on such a machine must decide whether to insulate the programmer from the idiosyncrasies of the hardware or to cling closely to the architecture for greatest control and maximum speed. Given the nature of C, the latter is the natural choice. Unfortunately, that choice presents unexpected problems to the programmer using large arrays. ("Pointer Arithmetic at Memory Segment Boundaries" by Daniel and Nancy Saks, <I>The C Users Journal</I>, October 1989, discusses other aspects of this problem.)<P>
One way Turbo C solves the addressing problem is by using different models of the compiler and libraries, depending on the anticipated size of the program. Turbo C's documentation disccusses the models. The small model is recommended for most programs; it allows 64K bytes of code and 64K bytes of static data. This article refers to the small model unless it specifies otherwise. Since I discuss only large data, not large code, I will also use the term <I>small memory model</I> to refer to any model that limits data to 64K, namely the tiny, small, and medium models. The term <I>large memory model</I> will refer to any model that lifts that restriction, namely the compact, large, and huge models.<P>
In the array declarations at the beginning of this article, the Turbo C compiler assigns both arrays to the same data segment (of 64K bytes). This action is understandable, since in a small memory model a near pointer, only two bytes long, is used to address the data. It's impossible for two-byte pointers to represent more than 64K different addresses. However, if the declared arrays are large enough, they overlap, but the compiler issues no warning message. In the example, 40,000 two-byte integers cannot all fit into 64K (that is, 65,536) bytes. At some point, one of the arrays wraps around to the beginning of the data segment, so some of <I>b</I><I>'s</I> elements "share" memory locations with elements of <I>a</I>, which is not good. (Incidentally, you cannot assume that <I>b</I> is the array that wraps around, nor can you assume that you have a full 64K to work with.) Assignment to the same segment is true even in the large memory models, which seems to be a bug.<P>
The solution must be to use dynamic memory allocation. See <A href="list1.htm">Listing 1</a>.
<P>
It's clear that <I>near</I> pointers, which address only within 64K, are insufficient, hence the <I>far</I> modifiers. Alas, this doesn't work, either. The type of pointer <I>malloc()</I> returns in a small memory model is a <I>near</I> pointer. It may gladly return a non-<I>NULL</I> pointer, seemingly indicating memory is available, but the address space is still within 64K, and the arrays still overlap. Turbo C does remind you of the non-portable pointer assignment (that is, the conversion of <I>malloc ()</I>'s <I>near</I> pointer return value to the <I>far </I>pointer <I>a</I>) at compile time. You can eliminate the message with a cast, but the problem itself remains.<P>
In the <I>Compact</I> model (one of the large memory models), the previous example does work, with or without the <I>far</I> modifiers, which are the default pointer type. Other reasons for not using this model will be mentioned later.<P>
In a small memory model, I must use <I>farmalloc()</I> instead of <I>malloc ()</I>:<P>
<pre>int far *a, far *b;
if ((a = farmalloc(20000L*sizeof(int))) ... etc.</pre>
The library function <I>farmalloc()</I> returns a <I>far</I> pointer, and  everything now works fine. In particular, I can continue to  refer to these allocations as arrays, for example<P>
<pre>a[n] = b[n] + 1;</pre>
which of course means the same as<P>
<pre>*(a+n) = *(b+n) + 1;</pre>
A disadvantage of using <I>farmalloc()</I> is that allocations may fail if Turbo C is loaded into memory when you run the program. (The complier seems to occupy the area of memory where <I>farmalloc() </I>goes looking.) In that case, execution will have to be deferred until you exit Turbo C. Standalone execution forfeits Turbo C's useful run-time debugging features.<P>
<h4><FONT COLOR="#000080"><A name="0026_000D">Global Data<A name="0026_000D"></FONT></h4></P>
Global data (that is, data elements declared outside of and accessible to all functions in a program) seems to be restricted to 64K in all Turbo C's memory models - even huge, which, according to the documentation, lifts restrictions on static data. Yet it is often useful for a large array to be accessible throughout a program.<P>
Again, the solution is to allocate the large array(s) dynamically in <I>main()</I> as above, and keep only pointers to the data in the global area. For example, if you need a number of arrays with dimension 8,000, rather than depleting the global data area by a multiple of 8,000 bytes per array, store only the pointers (at two or four bytes apiece) in the global area. The memory allocated for the arrays will be somewhere else. See <A href="list2.htm">Listing 2</a>.
 (The error returns from <I>malloc()</I> and <I>farmalloc()</I> are not checked in <A href="list2.htm">Listing 2</a>
but should be in an actual program.) With 40,000 bytes allocated beforehand, the last array cannot possibly fit within the same 64K as the other arrays, so it needs to use <I>farmalloc()</I> and the modifier <I>far</I> (or <I>huge</I>).<P>
Global items, of course, make the programmer  honor-bound to use names and types consistently in all functions. Unintentional conflicts are difficult to catch. Furthermore a  function that uses global data can't be lifted out and used in another program without rework. A language such as BASIC  has no other choice, but C does. As an alternative to using global data, you can pass pointers as arguments to those  functions that need them. Although incurring some additional overhead, this method is often regarded as "cleaner" since the function is then self-contained.<P>
<h4><FONT COLOR="#000080"><A name="0026_000E">Scope Of Modifiers In Declarations<A name="0026_000E"></FONT></h4></P>
In the declaration<P>
<pre>extern int i,j,k;</pre>
all three variables are understood to be both external and integers. However, in a Turbo C declaration<P>
<pre>int far *p,*q,*r;</pre>
only <I>p</I> is a <I>far</I> pointer. <I>q</I> and <I>r</I> (if compiled in a small data model) have the default attribute <I>near</I>. If <I>q</I> and <I>r</I> are supposed to be <I>far</I> pointers to <I>int</I> as well, you must use<P>
<pre>int far *p, far *q, far *r;</pre>
as you've already done in previous examples, or use a <I>typedef</I>:<P>
<pre>typedef int far * fpi; 
fpi p,q,r;</pre>
This might seem to be a quirk of the non-standard modifiers <I>near</I>, <I>far</I>, and <I>huge</I>, but there is a precedent in Standard C. The indirection symbol * also binds to the variable.<I> </I><I>[So do the type qualifiers</I><I> const </I>and <I>volatile</I>. <I>-</I><I>pjp]</I> In the declaration<P>
<pre>int * p,q,r;</pre>
<I>p</I> is a pointer to <I>int</I><I>,</I> while<I> </I><I>q</I> and <I>r</I> are just <I>ints</I>.<P>
In general, the scope of the elements in a declaration (that is, to how much of the complete declaration they apply) does not seem to be well documented in C - the documentation, if it exists, is not obvious. I couldn't find this topic specifically addressed in K&amp;R, in Standard C, or in Turbo C's documentation. It's clear what syntax is legal, but it's not immediately clear just what the construction means, until you try it in a program. Lack of documentation is unfortunate, but the dialect resulting from having to use non-standard features (the modifiers) is the real culprit.<P>
<h4><FONT COLOR="#000080"><A name="0026_000F">Arrays Greater Than 64K<A name="0026_000F"></FONT></h4></P>
Allocating an array of greater than 64K bytes using <I>farmalloc()</I> is easy: allocate the memory using a <I>long</I> integer expression (for example <I>100000L</I>), assign the return value (the starting address) to a pointer, and use the pointer as an array name.<P>
What kind of pointer? Clearly not a <I>near</I> pointer, which can only address within a 64K segment. It is not a <I>far</I> pointer, either. While <I>far</I> pointers are capable of addressing anywhere in memory, <I>far</I> pointer arithmetic does not work beyond 64K. Suppose you have a large array and pointers to it named <I>a</I> and <I>b</I>, respectively:<P>
<pre>char far *a, far *b;
long count = 100000L;
a = farmalloc(count);</pre>
(Normally you would check for a <I>NULL</I> return indicating allocation failed, of course.) Suppose you try to initialize the array to blanks:<P>
<pre>b = a;
while (count- -) *b++ = ' ';</pre>
You would find that only the first 65,536 or so characters of array <I>a</I> were initialized properly; the remainder would be untouched. That is because when <I>b</I> has a value of <I>a+65535</I> and is then incremented, the next value becomes not <I>a+65536 </I>but <I>a+0</I>. In the interest of speed, <I>far</I> pointers are not checked for possible overflow, leading to wraparound and erroneous results such as this. Since Turbo C's documentation is clear on this point, the arithmetic error cannot be considered a bug. Less clear from the documentation is what happens if you use subscripting instead<P>
<pre>long i;
for (i=0L; i&lt;count; i++) a[i] = ' ';</pre>
Unfortunately, this works exactly the same as the pointer version above. The address of <I>a[65536]</I> is translated to the pointer <I>a</I><I>+</I><I>65536</I>, which (not checking for overflow, <I>long</I> arithmetic notwithstanding) becomes just <I>a</I> (or <I>&amp;a[0]</I>); <I>a[65537]</I> becomes <I>a[1]</I>, etc. All the elements beyond <I>65535</I> are therefore inaccessible. The same problem surfaces earlier with larger data types: a two-byte <I>int</I> array declared as <I>far</I> can't go beyond element 32767, for example.<P>
The numbers above have been quoted as though exactly 65,536 bytes are available. In practice, Turbo C seems to require a few bytes of overhead. The offset portion of the allocated addresses are 8, not 0. This implies that the wraparound takes place earlier: at element 65527 or 32763, for instance.<P>
The solution is to declare such pointers as <I>huge</I> rather than <I>far</I>. Both <I>far</I> and <I>huge</I> pointers are capable of representing the same range of addresses, and both take up the same amount of space (four bytes). The difference is that <I>huge</I> pointers are normalized after every arithmetic operation. Normalization yields correct results, though at some cost in speed. (<I>far</I> and <I>huge </I>pointers and normalization are discussed in Turbo C's documentation and need not be covered in detail here.)<P>
<h4><FONT COLOR="#000080"><A name="0026_0010">Piecemeal Allocation<A name="0026_0010"></FONT></h4></P>
Why allocate everything at once? In some applications, it makes sense to allocate memory only as it is required. Perhaps the program can be designed to be flexible. Accumulate data and fill as much memory as is available. Then if eventually an allocation request fails, process what is there and continue on. One might wish to use this approach for a word processor or sort utility, for example.<P>
There's a significant difference between piecemeal allocation and allocating everything at once, however. The single large allocation<P>
<pre>a = malloc(10000);</pre>
is guaranteed to give the address of a block of 10,000 bytes of memory in a row (unless there is an error return or wraparound, of course). That block can be treated as an array. Alas, there is no such guarantee with individual small allocations. Examine the following piece of code, which allocates memory one byte at a time and stores individual characters as they are read:<P>
<pre>char *a,*b;
int count=0;
a = b = malloc(1);
while ((*b = getchar()) != EOF) {
   b = malloc(1);
   count++;
}</pre>
So far, this ought to work (again assuming no error returns). Characters are read and stored. This subsequent code, however, would not work:<P>
<pre>for (i = 0; i&lt;count; i++)
   putchar (a [i ] );</pre>
This code would not work because it is a mistake to assume that the addresses that successive allocations assigned to<I> b</I> are contiguous. You could not blithely refer to the second character obtained by<I> getchar()</I> as <I>a[1]</I>, unless somehow you had ascertained that the second value that <I>malloc()</I> assigns to <I>b</I> were indeed larger than the first by exactly <I>sizeof(*a)</I>. In Turbo C, using either <I>malloc()</I> or <I>farmalloc()</I>, it definitely isn't.<P>
If what you really want is one large array, piecemeal allocation is not practical.<P>
<h4><FONT COLOR="#000080"><A name="0026_0011">Pointers To Pointers<A name="0026_0011"></FONT></h4></P>
Suppose you have an array <I>a</I> declared as a <I>huge</I> pointer:<P>
<pre>char huge *a;
a = farmalloc(100000L);</pre>
Perhaps it contains a number of strings with variable lengths. If you wanted to refer to one of those strings, you would need another <I>huge</I> pointer to do so:<P>
<pre>char huge *aptr;</pre>
You might want to refer to all of them as a set, for example to maintain an index:<P>
<pre>char huge *aindex[NSTRINGS];</pre>
Suppose that the first three elements of <I>aindex</I> refer to strings which begin at <I>a</I>, <I>a</I><I>+</I><I>47000L</I>, and <I>a</I><I>+</I><I>93333L</I>. With 100,000 elements allocated, and <I>huge</I> pointers, these are all valid addresses. Rather than make this example completely dry and numerical, let's say that the second of these strings is <I>Skipping</I> <I>rivulet</I> <I>and</I> <I>fountain.</I><P>
Now suppose you want to use a pointer to refer to the various elements of <I>aindex</I>, perhaps just to step through the index or (in a typical application) to sort it. What kind of pointer do you need? The array <I>aindex</I> could be quite small, perhaps even just the three elements previously defined. So in that case, an ordinary <I>near</I> pointer would suffice. The task at hand is to declare that pointer. While a compiler ought to be able to parse such a declaration, it would be confusing to the ordinary reader, since it would contain both the <I>huge</I> and <I>near</I> modifiers. (In a small memory model, only the <I>huge</I> modifier, even though the resulting pointer type is <I>near</I>.) I wouldn't even attempt it without using a <I>typedef</I>:<P>
<pre>typedef char huge * hugecp;
hugecp aindex[NSTRINGS];
hugecp near *pindex;</pre>
In a small memory model, the <I>near</I> modifier is unnecessary, but why not make things explicit for clarity?<P>
On the other hand, you might need <I>aindex</I> to contain very many elements. Since a <I>huge</I> pointer is four bytes long, any value of <I>NSTRINGS</I> over 16,383 (or so) would mean you have to declare <I>pindex</I> as<P>
<pre>hugecp huge *pindex;</pre>
In fact, declaring <I>aindex</I> as an array would no longer work, since it would be larger than 64K. You would need to allocate it dynamically:<P>
<pre>hugecp huge *aindex;
aindex = farmalloc((long)
        NSTRINGS*sizeof(hugecp));</pre>
(Again, better check for an error return in actual practice.) If you used this method of allocating <I>aindex</I> even if its size were <I>small</I>, you would still need to declare <I>pindex huge</I> (or <I>far</I>) just to allow it to point to the correct data segment, since the <I>far</I> heap where <I>aindex</I> is allocated is somewhere different from where automatic variables are allocated.<P>
Let us now look at the resulting pointer <I>pindex</I>. Suppose<P>
<pre>pindex = &amp;aindex[1];</pre>
What is <I>*</I><I>pindex</I>? It is the contents of element number <I>1</I> of <I>aindex</I>, which is the address <I>a</I><I>+</I><I>47000L</I>. Regardless of whether <I>pindex</I> is <I>near</I>, <I>far</I>, or <I>huge</I>, <I>*pindex</I> is a <I>huge</I> pointer, referring to the string <I>"Skipping rivulet and fountain."</I> How about <I>*</I><I>*pindex</I>? It is the contents of address <I>a</I><I>+</I><I>47000L</I>, the character <I>'S'</I>. The value of *(*<I>pindex</I> + <I>1</I>) would be <I>'k'</I>, etc. The type of <I>*</I><I>*pindex</I> is <I>char</I><I>.</I> Given all this, you'd think we could just declare <I>pindex</I> as follows:<P>
<pre>char **pindex;</pre>
but that would (presumably) make both <I>*pindex</I> and <I>pindex</I> the default type of <I>pointer</I>, namely near in the small data models. That wouldn't do, in our example. If you declared<P>
<pre>char huge **pindex;</pre>
then (presumably) <I>*pindex</I> would be a <I>huge</I> pointer, but <I>pindex</I> would still be <I>near</I> - or is it the other way around? This wouldn't do, either. Besides being unclear, it would probably not have the effect of making both of them <I>huge</I>.<P>
In summary, declarations for pointers to pointers need extra care when large arrays are involved. Though we haven't discussed it, arrays with double subscripts require the same care.<P>
<h4><FONT COLOR="#000080"><A name="0026_0012">Mixed Pointers<A name="0026_0012"></FONT></h4></P>
Turbo C allows you to mix <I>near</I>, <I>far</I>, and <I>huge</I> pointers in any of the memory models, with some restrictions noted in the documentation. Mixed pointers are perhaps slightly difficult to keep untangled in one's own code and functions, but with care it can be done. Using the standard library with mixed pointers, however, is much more of a problem.<P>
Some standard functions, such as <I>printf()</I>, have built-in ways to deal with <I>large</I> pointers in a small data model. For example, to print as an address the value of an ordinary (<I>near</I>) pointer in a small data model, you use the format specification <I>%p</I>, but it's possible to print the value of a <I>far </I>(or <I>huge</I>) pointer using <I>%Fp</I>. The options are limited, however, and it's easy to make mistakes. One such mistake is supplying pointers of one size when <I>printf()</I> is expecting pointers of a different size. There is generally no compile-time warning, and the mismatch between format specification and parameter list gives unpredictable results.<P>
Turbo C calls in separate libraries suitable for the different memory models, so that in a large data model, such as compact, the version of <I>strcpy()</I> contained in the library accepts <I>far</I> pointers, which are the default in that model. For most programs, which do not need to mix pointers, this is a boon. The programmer does not need to worry about a different set of standard functions with unique names, let alone write new ones. Most standard functions cannot cope with non-default pointers, however. If you need a capability provided by a standard function, you are forced to program around the limitation, such as by writing a new function or performing an intermediate conversion.<P>
In the huge memory model, <I>far</I> pointers (not <I>huge</I> pointers) are still the default. The standard library in that case also uses <I>far</I> pointers. A function that accepts <I>far</I> pointers will also accept <I>huge</I> pointers. The format is the same, and the value of a <I>huge</I> pointer is just one of many <I>far</I> pointer values that refer to a particular address. However, the limitations of <I>far</I> pointers previously discussed also apply to the internal workings of such functions. The standard library functions may not work properly with large arrays. The function <I>qsort()</I><I>,</I> for example, which works so beautifully most of the time, fails for arrays larger than 64K. You can provide it with<I> huge</I> pointers as arguments, but you can't make it use <I>huge</I> pointers internally.<P>
Incidentally, there seems to be a small bug in <I>printf()</I> in the <I>huge</I> model. Even though <I>far</I> pointers are the default, an obscure linker error message complains if you try to use <I>%p</I> to print a <I>far</I> pointer's value. Use <I>%Fp</I> and the message goes away.<P>
In other words, be wary of mixing <I>near</I>, <I>far</I>, and <I>huge</I> pointer types, especially when using the standard library. You may end up having to write functions for your particular pointer needs.<P>
<h4><FONT COLOR="#000080"><A name="0026_0013">Summary<A name="0026_0013"></FONT></h4></P>
Although my experience with C on an 8086-style microprocessor is limited to Borland's Turbo C, it seems reasonable to assume that other C compilers for segmented memory micros will have similar limitations when large arrays must be used. Arrays whose sizes are large enough to cross a segment boundary require much more understanding and planning on the part of the programmer. Those of us who need to use large arrays in C look forward to the time when improved software or hardware in personal computers makes the size of an array transparent!<P>

<h4><a href="../../../source/1991/jan91/baird.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
