



<HTML><HEAD>

<TITLE>October 1996/Standard C/C++/Listing 2</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4>Listing 2:	Template function sort</h4>

<pre>
        // TEMPLATE FUNCTION sort
template&lt;class RanIt&gt; inline
    void sort(RanIt first, RanIt last)
    {_Sort_0(first, last, _Val_type(first)); }
template&lt;class RanIt, class T&gt; inline
    void _Sort_0(RanIt first, RanIt last, T *)
    {if (last - first &lt;= _SORT_MAX)
        _Insertion_sort(first, last);
    else
        {_Sort(first, last, (T *)0);
        _Insertion_sort(first, first + _SORT_MAX);
        for (first += _SORT_MAX; first != last; ++first)
            _Unguarded_insert(first, T(*first)); }}
template&lt;class RanIt, class T&gt; inline
    void _Sort(RanIt first, RanIt last, T *)
    {for (; _SORT_MAX &lt; last - first; )
        {RanIt m = _Unguarded_partition(first, last,
            _Median(T(*first), T(*(first + (last - first) / 2)),
                T(*(last - 1))));
        if (last - m &lt;= m - first)
            _Sort(m, last, _Val_type(first)), last = m;
        else
            _Sort(first, m, _Val_type(first)), first = m; }}
template&lt;class RanIt, class T&gt; inline
    RanIt _Unguarded_partition(RanIt first, RanIt last, T priv)
    {for (; ; ++first)
        {for (; *first &lt; priv; ++first)
            ;
        for (; priv &lt; *--last; )
            ;
        if (last &lt;= first)
            return (first);
        iter_swap(first, last); }}
template&lt;class RanIt&gt; inline
    void _Insertion_sort(RanIt first, RanIt last)
    {_Insertion_sort_1(first, last, _Val_type(first)); }
template&lt;class BidIt, class T&gt; inline
    void _Insertion_sort_1(BidIt first, BidIt last, T *)
    {if (first != last)
        for (BidIt m = first; ++m != last; )
            {T val = *m;
            if (!(val &lt; *first))
                _Unguarded_insert(m, val);
            else
                {copy_backward(first, m, m + 1);
                *first = val; }}}
template&lt;class BidIt, class T&gt; inline
    void _Unguarded_insert(BidIt last, T val)
    {for (BidIt m = last; val &lt; *--m; last = m)
        *last = *m;
    *last = val; }

//End of File
</pre>
</body></html>
