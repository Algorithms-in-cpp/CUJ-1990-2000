



<HTML><HEAD>

<TITLE>October 1996/Standard C/C++/Listing 1</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4>Listing 1:	Partitioning template functions</h4>

<pre>

        // TEMPLATE FUNCTION partition
template&lt;class BidIt, class Pred&gt; inline
    BidIt partition(BidIt first, BidIt last, Pred pr)
    {for (; ; ++first)
        {for (; first != last &amp;&amp; pr(*first); ++first)
            ;
        if (first == last)
            break;
        for (; first != --last &amp;&amp; !pr(*last); )
            ;
        if (first == last)
            break;
        iter_swap(first, last); }
    return (first); }

        // TEMPLATE FUNCTION stable_partition
template&lt;class FwdIt, class Pred&gt; inline
    FwdIt stable_partition(FwdIt first, FwdIt last, Pred pr)
    {return (first == last ? first :
        _Stable_partition(first, last, pr,
            _Dist_type(first), _Val_type(first))); }
template&lt;class FwdIt, class Pred, class Diff, class T&gt; inline
    FwdIt _Stable_partition(FwdIt first, FwdIt last, Pred pr,
        Diff *, T *)
    {Diff n = 0;
    _Distance(first, last, n);
    _Temp_iterator&lt;T&gt; xb(n);
    return (_Stable_partition(first, last, pr, n, xb)); }
template&lt;class FwdIt, class Pred, class Diff, class T&gt; inline
    FwdIt _Stable_partition(FwdIt first, FwdIt last, Pred pr,
        Diff n, _Temp_iterator&lt;T&gt;&amp; xb)
    {if (n == 1)
        return (pr(*first) ? last : first);
    else if (n &lt;= xb.Maxlen())
        {FwdIt x = first;
        for (xb.Init(); first != last; ++first)
            if (pr(*first))
                *x++ = *first;
            else
                *xb++ = *first;
        copy(xb.First(), xb.Last(), x);
        return (x); }
    else
        {FwdIt m = first;
        advance(m, n / 2);
        FwdIt lastp = _Stable_partition(first, m, pr, n / 2, xb);
        FwdIt rp = _Stable_partition(m, last, pr, n - n / 2, xb);
        Diff d1 = 0;
        _Distance(lastp, m, d1);
        Diff d2 = 0;
        _Distance(m, rp, d2);
        return (_Buffered_rotate(lastp, m, rp, d1, d2, xb)); }}

//End of File
</pre>
</body></html>
