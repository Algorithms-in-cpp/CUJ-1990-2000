



<HTML><HEAD>

<TITLE>October 1996/Standard C/C++/Listing 4</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4>Listing 4:	Partial sorting template functions</h4>

<pre>

        // TEMPLATE FUNCTION partial_sort
template&lt;class RanIt&gt; inline
    void partial_sort(RanIt first, RanIt m, RanIt last)
    {_Partial_sort(first, m, last, _Val_type(first)); }
template&lt;class RanIt, class T&gt; inline
    void _Partial_sort(RanIt first, RanIt m, RanIt last, T *)
    {make_heap(first, m);
    for (RanIt i = m; i &lt; last; ++i)
        if (*i &lt; *first)
            _Pop_heap(first, m, i, T(*i), _Dist_type(first));
    sort_heap(first, m); }

        // TEMPLATE FUNCTION partial_sort_copy
template&lt;class InIt, class RanIt&gt; inline
    RanIt partial_sort_copy(InIt first1, InIt last1,
        RanIt first2, RanIt last2)
    {return (_Partial_sort_copy(first1, last1, first2, last2,
        _Dist_type(first2), _Val_type(first1))); }
template&lt;class InIt, class RanIt, class Diff, class T&gt; inline
    RanIt _Partial_sort_copy(InIt first1, InIt last1,
        RanIt first2, RanIt last2,
        Diff *, T *)
    {RanIt x = first2;
    if (x != last2)
        {for (; first1 != last1 &amp;&amp; x != last2; ++first1, ++x)
            *x = *first1;
        make_heap(first2, x);
        for (; first1 != last1; ++first1)
            if (*first1 &lt; *first2)
                _Adjust_heap(first2, Diff(0), Diff(x - first2),
                    T(*first1));
        sort_heap(first2, x); }
    return (x); }

        // TEMPLATE FUNCTION nth_element
template&lt;class RanIt&gt; inline
    void nth_element(RanIt first, RanIt nth, RanIt last)
    {_Nth_element(first, nth, last, _Val_type(first)); }
template&lt;class RanIt, class T&gt; inline
    void _Nth_element(RanIt first, RanIt nth, RanIt last, T *)
    {for (; _SORT_MAX &lt; last - first; )
        {RanIt m = _Unguarded_partition(first, last,
            _Median(T(*first), T(*(first + (last - first) / 2)),
                T(*(last - 1))));
        if (m &lt;= nth)
            first = m;
        else
            last = m; }
    _Insertion_sort(first, last); }

//End of File
</pre>
</body></html>
