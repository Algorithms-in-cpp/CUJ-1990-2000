






<HTML>
     
     <HEAD>


          
          <TITLE>October 1996/Memory Caching for Disk-Based Objects/Listing 3</TITLE>
     </HEAD>
     
     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          
          <h4>Listing 3: Container interface</h4>

<PRE>

/* genlist.h
 * Copyright (c) 1995 T.W. Nelson.  Permission
 * is hereby granted to use this code in any
 * manner provided the user display this
 * copyright notice in the source
 */

#if !defined( __GENLIST_H )
#define __GENLIST_H
#include "classlib\dlistimp.h"  /* BCC++ Container */

template &lt;class T,class Alloc&gt;
class TIGenDoubleListIterator;

template &lt;class T,class Alloc&gt;
class TIGenDoubleList    {
    TMIDoubleListImp&lt;T,Alloc&gt; *Lp;
  public:
    friend TIGenDoubleListIterator&lt;T,Alloc&gt;;
    TIGenDoubleList()
        { Lp = new TMIDoubleListImp&lt;T,Alloc&gt;; }
    ~TIGenDoubleList() { delete Lp; }
    int PutHead( T *t ) { return Lp-&gt;AddAtHead(t); }
    T *PeekHead() const { return Lp-&gt;PeekHead(); }
    T *PeekTail() const { return Lp-&gt;PeekTail(); }
    int Unlink( T *t, int del = 0 )
        { return Lp-&gt;Detach(t,del); }
    void Flush( int del = 0 ) { Lp-&gt;Flush(del); }
};

template &lt;class T,class Alloc&gt;
class TIGenDoubleListIterator {
    TMIDoubleListIteratorImp&lt;T,Alloc&gt; *Itp;
  public:
    TIGenDoubleListIterator
        ( const TIGenDoubleList&lt;T,Alloc&gt; &amp;p )
        { Itp = new TMIDoubleListIteratorImp&lt;T,Alloc&gt;
                                    ( *(p.Lp) );  }
    ~TIGenDoubleListIterator() { delete Itp; }
    void Restart() { Itp-&gt;Restart();    }
    T *operator ++ (int)
        { return Itp-&gt;operator ++ (1); }
    T *operator ++ ()
        { return Itp-&gt;operator ++ (); }
};
#endif
/* End of File */
</PRE>
     </BODY>
</HTML>
