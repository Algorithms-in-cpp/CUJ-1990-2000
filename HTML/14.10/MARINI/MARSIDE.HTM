



<HTML><HEAD>

<TITLE>October 1996/A Class Hierarchy for Random Number Generation/Sidebar</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<H3 align=center><FONT COLOR="#000080">Linear Congruential Generators</FONT></H3>
<hr>
<BLOCKQUOTE>

<p>The code in this article uses a common type of random number generator known
as the linear congruential generator (LCG). This generator produces random
numbers based on the recursive formula</p>

<pre>
Z<SUB>i</SUB> = (aZ<SUB>i-1</SUB> + c)mod m
</pre>
<p>where
m &gt; 0, 0 &lt; a &lt; m, 0 &lt;= c &lt; m, and 0= &lt; Z(0) &lt; m. In this
formula, a is referred to as the multiplier and c as the increment. A good
generator will produce each value in the range of 0 to m before a repeated
value occurs. This behavior is referred to as full cycle generation. Of course,
this algorithm, like any algorithm run on a computer, cannot generate truly
random numbers. This becomes clear when you realize that every Z(i) can be
determined from Z(0). However, through careful selection of m, a, and c, the
numbers generated will appear to be independent and identically distributed.
For an LCGto produce this sort of distribution, the following conditions must
hold <a href="marini.htm#ref2">[2]</a>:</p>
<p>1) The only positive integer that divides both m and c is 1.<br>
2) If q is a prime number that divides m, then q divides a-1.<br>
3) If 4 divides m, then 4 divides a-1.</p>
<p>Consider the case of m = 8 and select a = 5, c = 3, and Z(0) = 5. The random
number sequence generated would be 5, 4, 7, 6, 1, 0, 3, 2, 5.... Notice that
each integer is generated once before the pattern restarts. The seed value
determines the starting point in the pattern. In order to generate the variates
in a different order either a, c, or both must be modified. Finally, observing
the rules defined above does not guarantee that the generator will be
statistically acceptable. See reference <a href="marini.htm#ref1">[1]</a> for information on testing random
number generators.</p>

<h4>
<A name="HEADING1">Multiplicative LCGs</A></h4>

<p>The
multiplicative LCG (MLCG) is a special case of the LCG for which the increment
is assigned the value 0. Thus, the algorithm for random number generation
becomes</p>

<pre>
Z<SUB>i</SUB> = (aZ<SUB>i-1</SUB>)(mod m)
</pre>
<p>To
achieve a period of size m-1 for this algorithm, m must be a prime number. An
MLCG based on a prime modulus is known as a PMMLCG (prime modulus MLCG).o
</p>
</body></html>
