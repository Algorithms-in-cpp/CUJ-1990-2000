


<HTML><HEAD>

<TITLE>January 1998/The Learning C/C++urve/Listing 1</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4>
<A name="HEADING1">Listing 1: Class pointer implementation</A></h4>


<pre>
 
template&lt;class t&gt;
inline pointer::~pointer()
    {
    pointer_ = NULL; // debugging aid
    }
 
template&lt;class t&gt;
inline pointer::pointer(t * const pointer)
        :
        pointer_(pointer)
    {
    }
 
template&lt;class t&gt;
inline pointer::pointer(pointer&lt;t&gt; const &amp;that) 
        :
        pointer_(that.pointer_)
    {
    }
 
template &lt;class t&gt;
inline pointer&lt;t&gt;::pointer(class nil const &amp;)
        :
        pointer_(NULL)
    {
    }
 
template&lt;class t&gt;
inline pointer&lt;t&gt; &amp;pointer&lt;t&gt;::operator=
        (pointer&lt;t&gt; const &amp;that)
    {
    if ((void const *) this != (void const *) &amp;that)
        pointer_ = that.pointer_;
    return *this;
    }
 
template&lt;class t&gt;
inline pointer&lt;t&gt;::operator t *() const
    {
    return pointer_;
    }
 
template&lt;class t&gt;
inline t **pointer&lt;t&gt;::operator&amp;() const
    {
    if (pointer_ == NULL)
        {
        cerr &lt;&lt; "address-of NULL pointer" &lt;&lt; endl;
        throw invalid_argument;
        }
    return &amp;pointer_;
    }
 
template&lt;class t&gt;
inline t * const *pointer&lt;t&gt;::operator&amp;() const
    {
    if (pointer_ == NULL)
        {
        cerr &lt;&lt; "address-of NULL pointer" &lt;&lt; endl;
        throw invalid_argument;
        }
    return &amp;pointer_;
    }
 
template&lt;class t&gt;
inline t &amp;pointer&lt;t&gt;::operator*() const
    {
    if (pointer_ == NULL)
        {
        cerr &lt;&lt; "dereference NULL pointer" &lt;&lt; endl;
        throw invalid_argument;
        }
    }
 
template&lt;class t&gt;
inline t *pointer&lt;t&gt;::operator-&gt;() const
    {
    if (pointer_ == NULL)
        {
        cerr &lt;&lt; "dereference NULL pointer" &lt;&lt; endl;
        throw invalid_argument;
        }
    }
 
template &lt;class t&gt;
inline bool pointer&lt;t&gt;::operator==
        (pointer&lt;t&gt; const &amp;that) const
    {
    return pointer_ == that.pointer_;
    }
 
template &lt;class t&gt;
inline bool pointer&lt;t&gt;::operator!=
        (pointer&lt;t&gt; const &amp;that) const
    {
    return !(*this == that);
    }
 
template &lt;class t&gt;
inline pointer&lt;t&gt; &amp;pointer&lt;t&gt;::operator+=
        (size_t const increment)
    {
    pointer_ += increment;
    return *this;
    }
 
template &lt;class t&gt;
inline pointer&lt;t&gt; &amp;pointer&lt;t&gt;::operator-=
        (size_t const decrement)
    {
    return *this += -decrement;
    }
 
//End of File
</pre>
</body></html>
