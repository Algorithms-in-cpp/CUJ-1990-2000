





<HTML>
     
     <HEAD>

<TITLE>January 1998/Lambert Shading Of Large Irregular Surfaces</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<H2><A href="../tocjan.htm"><IMG src="../../toc.gif" ALT="Back to TOC" WIDTH="54" HEIGHT="54"></A>
<FONT COLOR="#FF0000">Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Lambert Shading Of Large Irregular Surfaces</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">R. E. Huss and M. A. Pumar</FONT></H3>
<blockquote>
<p>Here's a quick way to display a textured surface that nevertheless holds its own
against more time-consuming techniques.</p></blockquote><hr>

<blockquote>

<h4><FONT COLOR="#000080">Introduction</FONT></H4>

<p>Lambert Shading <a href="#1">[1]</a> is a technique traditionally applied to regular solids (cylinders,
spheres, tetrahedrons, etc.) or surfaces composed of collections of regular
solids (e.g. triangular meshed landscapes) to quickly generate images of these
objects. Lambert Shading (LS) is among the quickest and simplest methods used
for rendering simple 3-D objects into images. A Lambertian surface has the
property that the intensity at any point depends only on the direction of the
illumination and the surface slope. The intensity is independent of the
observer's location. More sophisticated methods such as ray tracing <a href="#1">[1]</a> are
usually employed for rendering complex objects or scenes containing elements
such as reflections and shadows. The disadvantage of ray-tracing and similar
techniques is the time required to render a scene. For complicated images, this
time can be on the order of hours or days, even when the fastest machines are
employed.<p>
Lambert Shading can provide a quick and very satisfactory alternative to the
more sophisticated rendering techniques in the case of large, complex,
irregular surfaces. The time required to render such a surface is on the order
of seconds or minutes. To utilize LS the surface should ideally be large and
digitized. A surface can be digitized if it is adequately represented by
sampling and storing its elevations at some (usually) regular interval. This
surface is considered large if its sampled dimensions are on the order of the
number of pixels used to display its rendered image. For such surfaces, the
results of LS rendering can be quite dramatic, yielding near-picture quality
images.<p>
A good example of surfaces that are irregular, large, and digitized is Digital
Terrain Elevation Data (DTED). Digital terrain data is available for free from
the United States Geological Survey (USGS) via their ftp site:
edcftp.cr.usgs.gov. USGS has digitized and stored almost all the United States;
each DTED image represents a one-square degree area of the earth's surface
sampled at 3 arc-seconds (about 100 meters). Each file is compressed in gzip
format. When uncompressed these ASCII formatted files expand to about 10MB.
Each database contains 1201 X 1201 terrain elevations measured in meters
relative to mean sea level.<p>
<A href="fig1.htm">Figure 1</a>
shows an LS rendered image of the DTED whose southwest corner is
located at 34&#186; N Latitude, 120&#186; W Longitude. This area contains
Camarillo California, the Oxnard Plain (lower right), and part of the Channel
Islands (lower left). The Pacific Ocean is colored black to provide sharper
definition of the California coast line.</p>

<h4><FONT COLOR="#000080">Lambert Shading Fundamentals</FONT></H4>

<p>Before presenting the coded algorithm, We'll review the fundamentals of LS.<p>
Lambert Shading uses surface gradient to determine the pixel shading at each
point. For digital surfaces, each elevation, z, is mapped to a pixel. In the
DTED case, the resulting image is therefore 1,201 X 1,201 pixels. The pixel
shading or intensity, I, at point (x,y) is calculated as the dot product of two
vectors: i, the illumination vector and n(x,y), the local surface normal
(gradient):</p>

<pre>
I(x,y) = n(x,y) * i     (Equation 1)
</pre>
<p>The source of illumination is assumed to be at infinity, so the direction to the
source is the same anywhere on the surface. This assumption allows the source
vector to be treated as constant in the calculation, significantly increasing
the rendering speed. This illumination vector is expressed in terms of an
elevation angle, <FONT FACE="Symbol" SIZE=3>l</FONT>, and azimuth, <FONT FACE="Symbol" SIZE=3>u</FONT>, which represent the
direction of the vector relative to the x-y plane. It may be helpful to think
of the light source as positioned on the surface of an infinitely large sphere,
at elevation <FONT FACE="Symbol" SIZE=3>l</FONT> and azimuth <FONT FACE="Symbol" SIZE=3>u</FONT>. The light source points toward the
center of the sphere, where the x-y plane resides. A normal through the origin
of the x-y plane passes through (0, 0).</p>

<h4><FONT COLOR="#000080">Calculating the Dot Product</FONT></H4>

<p>Calculating the dot product in Equation 1 requires that i and n(x,y) be expressed in the
same terms. The following equations express the illumination and surface-normal
vectors in terms of the Cartesian frame of elevations, where e<sub>1</sub>,
e<sub>2</sub>, and e<sub>3</sub> represent unit vectors in the x, y, and z
directions respectively.</p>

<pre>
i = e<sub>1</sub>os(<FONT FACE="Symbol" SIZE=3>l</FONT>)cos(<FONT FACE="Symbol" SIZE=3>u</FONT>) + e<sub>2</sub>cos(<FONT FACE="Symbol" SIZE=3>l</FONT>)sin(<FONT FACE="Symbol" SIZE=3>u</FONT>) + e<sub>3</sub>sin(<FONT FACE="Symbol" SIZE=3>l</FONT>)            (Equation 2)

n(x,y) = e<sub>1</sub>GRAD<sub>x</sub>z(x,y) + e<sub>2</sub>GRAD<sub>y</sub>z(x,y) - e<sub>3</sub>      (Equation 3)
</pre>
<p>The symbol GRAD is the gradient operator with the x and y subscripts indicating
direction.</p>
<p>Applying Equation 1 is now straightforward. The angles (<FONT FACE="Symbol" SIZE=3>l</FONT>, <FONT FACE="Symbol" SIZE=3>u</FONT>)
are often chosen as 45&#186;, representing illumination from the northeast
(upper right). The coordinates (x,y) are discrete and mapped directly to
pixels. In the DTED example, 0 <u>&lt;</u> x,y <u>&lt;</u> 1200. The gradients
GRAD<sub>x</sub>z(x,y) and GRAD<sub>y</sub>z(x,y) are approximated as the
difference between adjacent elevations. At this point, we introduce two scaling
factors, I<sub>o</sub> and S<sub>max</sub>, to take maximal advantage of the
range of display intensities (usually 0 - 255). The following equation is
equation 1 restated in terms of equations 2 and 3. It shows how to compute the
intensity at each pixel:</p>

<pre>
I(x,y) = I<sub>x</sub>[z(x+1,y) - z(x-1,y)] +
         I<sub>y</sub>[z(x,y+1) - z(x, y-1)] + I<sub>o</sub>      (Equation 4)
</pre>
<p>where</p>

<pre>

I<sub>x</sub> = (I<sub>max</sub> - I<sub>o</sub>)S<sub>max</sub>2<sup>0.5</sup>cos(<FONT FACE="Symbol" SIZE=3>l</FONT>)cos(<FONT FACE="Symbol" SIZE=3>u</FONT>),

I<sub>y</sub> = (I<sub>max</sub>-I<sub>o</sub>)S<sub>max</sub>2<sup>0.5</sup>cos(<FONT FACE="Symbol" SIZE=3>l</FONT>)sin(<FONT FACE="Symbol" SIZE=3>u</FONT>),

I<sub>o</sub> = I<sub>max</sub>2<sup>0.5</sup>sin(<FONT FACE="Symbol" SIZE=3>l</FONT>)/2,
</pre>
<p>I<sub>max</sub>is the maximum intensity, and the factor 2<sup>0.5</sup> insures
I<sub>o</sub> = I<sub>max</sub>/2 when <FONT FACE="Symbol" SIZE=3>l</FONT> = 45&#176; (see below).</p>
<p>Equation 4 can be directly implemented. All that remains is to determine
S<sub>max</sub> and I<sub>o</sub>. Since, on average, the slope of the surface
is expected to be neutral, we select I<sub>o</sub> as the mid-range intensity
(usually 127). Computing S<sub>max</sub> is more involved, since it depends on
the magnitude of the slopes. For a smooth surface, the slope magnitude range is
small and intensities cluster around a midpoint &#151; the lowest and highest
intensities remain unused. For rough surfaces the opposite is true; slope
magnitude variation is large and pixel intensities tend to the extremes of the
range. Therefore, S<sub>max</sub> should be chosen to evenly spread pixel
intensity through the available range of display intensities.<p>
S<sub>max</sub> will yield an even distribution if it is taken as the slope of
the line that best fits the normalized cumulative histogram of surface slopes.
(In this case, "best fits" means as computed by least squares, and the surface
slopes are basically elevation differences.) The normalized cumulative
histogram is represented by the symbol H<sub>z</sub>.<p>
Surface slopes are rarely greater than 45&#176;; this makes it simple to choose
the histogram bin size and maximum number of bins. We've found that it usually
works well to choose a bin size (<FONT FACE="Symbol" SIZE=3>D</FONT>) equal to elevation resolution (1
meter), and a maximum number of bins (N<sub>z</sub>) equal to twice the range
of the elevation spacing (100 meters). For different surfaces you may need to
adjust these values to better represent the data.<p>
<A href="fig2.htm">Figure 2</a>
illustrates how to calculate the best-fit line to the normalized
cumulative histogram; we can then use the slope of this line to determine the
best value for S<sub>max</sub>. The histogram in <A href="fig2.htm">Figure 2</a>
was computed from the
elevations in <A href="fig1.htm">Figure 1</a>.
 In calculating this best-fit line, we apply the
constraint that it must pass through the center of the histogram (bin index 0)
at a normalized elevation of 0.5. The equation for this line then becomes:</p>

<pre>

y(x) = (1 + sx)/2                           (Equation 5)
</pre>
<p>where
s/2 is the line's slope and 0 <u>&lt;</u> x <u>&lt;</u> N<sub>z</sub>. The line that best
fits the histogram has a slope such that</p>

<pre>
<FONT FACE="Symbol" SIZE=3>S</FONT> ((x) - H<sub>z</sub>[x])<sup>2</sup>
</pre>
<p>is a minimum.</p>
<p>The minimum of this expression is easily found by taking its
derivative with respect to s, setting the derivative equal to zero, and solving
for s/2. This is the desired value of S<sub>max</sub>. The details of computing
S<sub>max</sub> appear in <A href="list2.htm">Listing 2</a>,
 in the function surfaceFindSmax.</p>

<h4><FONT COLOR="#000080">Implementation</FONT></H4>

<p><A href="list1.htm">Listing 1</a>
contains the header for the CSurface base class used to render an irregular
surface using Lambert Shading. The class contains data members describing the
dimensions of the surface, pointers to the surface data, and the bitmap image
created by the LS process. CSurface also contains the cumulative elevation
difference histogram and S<sub>max</sub> as data members. We use typdefs to
define the surface elevation and bitmap data types; changing these typedefs
allows support for a variety of data types. For the DTED image, the surface
elevations are stored as short integers. Bitmaps are almost always stored as
characters or unsigned characters.<p>
The public member functions include a constructor for initializing data members
to zero, a destructor for freeing allocated memory, and virtual read and draw
functions. The read function takes as a single argument the name of the file
containing the surface data. The base-class implementation of this function
does nothing; you must override it in a derived class to read in the elevations
of the desired surface. At a minimum, this function should allocate memory for
the elevations and read the data into this storage. In addition it should
initialize the data dimensions and spacing members, allocate memory for the
bitmap, and initialize the bitmap buffer size. We've also made the draw member
function virtual, since it is obviously implementation dependent. We've
typedef'd the arguments to this function to support MS-Windows, X-Windows, and
Macintosh development. For MS-Windows development redefine _HANDLE as CDC*. For
X-Windows _HANDLE becomes Widget and _POINTER becomes XtPointer.<p>
In 16-bit Windows environments you should #define _HUGE as the keyword huge to
support large surfaces. In dealing with DTEDs this is a must since the
elevation and bitmap pointers refer to memory blocks well in excess of the 65K
far pointer limit.<p>
The private member functions perform the Lambert Shading of the surface
elevations. Function surfaceLSRender calls surfaceFindSmax to compute
S<sub>max</sub> and render the surface. Upon completion of surfaceLSRender the
image bitmap is filled and ready for display. The member function
surfaceFindSmax calls surfaceHistogram to compute the cumulative elevation
difference histogram required to compute S<sub>max</sub>. A more efficient
approach would be to compute this histogram while reading in the elevation
data.<p>
After computing S<sub>max</sub>, the intensity components I<sub>x</sub>,
I<sub>y</sub>, and I<sub>o </sub>are computed. These constants are scaled to
allow integer arithmetic in the nested for loops used to calculate the pixel
intensities of the image. This scaling operation greatly increases performance
when the elevations are integers. The while loop in the following code fragment
determines the integer scaling factor, FAC:</p>

<pre>

z = ( x &lt; y ? x : y);
FAC = 1;
while( z &lt; 1.0)
{
z  = 10.0*z;
FAC = 10*FAC;
}
</pre>
<p>In
the above snippet the local variable z is set to the minimum of I<sub>x</sub>
and I<sub>y</sub> (called x and y at this point) and the scale factor FAC is
set to one. The while loop increases both z and FAC by a factor of ten until z
is greater than one.<p>
The above procedure insures that precision is maintained by the scale factor.
The intensity components are then scaled by FAC. In calculating pixel
intensities, the algorithm effectively replaces the otherwise floating-point
multiplication of I<sub>x</sub>, I<sub>y</sub>, and I<sub>o</sub> by integer
multiplication and an integer divide, which can be significantly faster.<p>
Upon finishing the calculation of the intensity components, the algorithm sets
pointers to the first and third rows and columns of the elevations and enters
nested for loops to compute the pixel intensities of surface elevations.
Intensities are computed for all elevations except those on the edge; these
pixels are filled in later by copying the values of adjacent interior pixels.
Edge points are excluded since they lack surrounding elevation on either side
to compute a gradient. The gradient calculation could be modified and
intensities computed for the edge, but the result is not worth the effort since
copying the adjacent pixels is unnoticeable in the final image.</p>

<h4><FONT COLOR="#000080">How to Apply Lambert Shading</FONT></H4>

<p>In
implementing and applying the LS algorithm, you have a wide range of choices in
terms of what you select for parameter values, number of bits, etc. It's
worthwhile going over some of the choices and their implications.<p>
First, a few words on the general characteristics of LS images. Flat regions in
the image end up with intensity I<sub>o</sub>; very smooth surfaces will tend
to have the majority of their intensities near this value also. The contrast in
the resulting image will be poor. Rough surfaces tend to provide crisper and
sharper images, since the resulting intensities are naturally better
distributed. Low contrast effects are not always undesirable however. Since
Lambert Shading is essentially a derivative process and derivatives are very
sensitive to noise, "defects" or anomalies in the elevations become exaggerated
by the scale factor S<sub>max</sub> and are readily apparent in the final
image. For instance, USGS originally created DTEDs by digitizing paper contour
maps. Much of this data has subsequently been replaced with more accurate
satellite measurements. However, in some of these older paper map-derived
databases the contours are visible in the rendered image. Step-like areas show
up especially in smooth terrain. In some cases, quality control was poor and a
column of elevation data was missing (set to zero). This missing column is
easily visible in the LS image.<p>
Manipulating the illumination angles (<FONT FACE="Symbol" SIZE=3>l</FONT>,<FONT FACE="Symbol" SIZE=3>u</FONT>) creates both
interesting and subtle effects on the final image. The elevation angle,
<FONT FACE="Symbol" SIZE=3>l</FONT>, has little effect on the image except at very low (0&#176;) or very
high (90&#176;) incidences. At 90&#176;, for example, I<sub>x</sub> and
I<sub>y</sub> become zero and the image appears as a smooth flat surface. For
this reason, <FONT FACE="Symbol" SIZE=3>l</FONT> = 45&#176; is almost always the best choice; both the
cos(<FONT FACE="Symbol" SIZE=3>l</FONT>) and sin(<FONT FACE="Symbol" SIZE=3>l</FONT>) terms in I<sub>x</sub>, I<sub>y</sub>, and
I<sub>o</sub> become 2<sup>-0.5</sup>.who apply LS usually drop the
cos(<FONT FACE="Symbol" SIZE=3>l</FONT>) and sin(<FONT FACE="Symbol" SIZE=3>l</FONT>) terms from I<sub>x</sub>, I<sub>y</sub>, and
I<sub>o</sub>.<p>
The longitude angle, <FONT FACE="Symbol" SIZE=3>u</FONT>, creates more subtle effects in the image. If
two images are generated by illuminating the surface from opposite directions
(<FONT FACE="Symbol" SIZE=3>u</FONT>s 180&#176; apart) the results appear almost identical. However,
small concavities in the surface appear as bumps when the illumination is from
the upper right (<FONT FACE="Symbol" SIZE=3>u</FONT> = 45&#176;) and as depressions when the illumination
is from the lower left (<FONT FACE="Symbol" SIZE=3>u</FONT> = 225&#176;). This effect is an optical
illusion; it reflects the manner in which the mind has been conditioned to view
reality and is not an inherent flaw in the LS process.<p>
Although the code presented here utilizes the full range of intensity
available, you don't need to exploit the full intensity to produce good
imagery. The 256 or 8-bit intensity range is more than adequate. In fact, you
can generate good images with as little as 5 bits. <A href="fig1.htm">Figure 1</a>
is an example of
5-bit imagery. The remaining intensities can be utilized to color the image.
For example, in the case of terrain, you can color the image by elevation,
thereby overlaying contours on the surface in a natural, familiar, and visual
pleasing way.</p>

<h4><FONT COLOR="#000080">Reference</FONT></H4>

<p><a name="1"></a>[1]
C. Pokorny. Computer Graphics, an Object-Oriented Approach to the Art and
Science (Franklin, Beedle &amp; Associates Inc., Wilsonville, Oregon, 1994).
</p>

<p><i>Ronald E. Huss is a consultant and former employee of Hughes Aircraft
Company in El Seguendo, CA. He has a Ph.D. in bio-medical engineering. Ron is
the resident thaumaturge at Hughes. His research interests include solving
complex optimization problems involving the exploitation of digital terrain
data.<p>
Mark A. Pumar is a Senior Engineer/Programmer at COMPTEK Federal System in
Camarillo, CA. He has MS degrees in Physics and Electrical Engineering from
UCLA. Mark is a programmer by circumstance instead of choice, but has managed
through luck and good fortune to bluff his way, thus far, into remaining
employed as such. With the initials MAP he should, and is, interested in
digital mapping. Mark can be reached via e-mail at: MAPar@aol.com or
MPUMAR@COMPTEK.com or by phone at (805) 987-9739.
</i></p>

<h4><a href="../../../source/1998/jan98/pumar.zip">Get Article Source Code</a></h4>

</blockquote>
</body></html>
