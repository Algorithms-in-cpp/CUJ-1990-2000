


<HTML><HEAD>

<TITLE>January 1998/A Quick and Simple Memory Allocator/Listing 1</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4>
<A name="HEADING1">Listing 1: class MemoryAllocator</A></h4>


<pre>
class MemoryAllocator
    {
public:
    ~MemoryAllocator ();
    MemoryAllocator (uint unit_size, uint block_size =16); 
    MemoryAllocator (uint unit_size, uint block_size, bool debug); 
    void* allocate ();
    void deallocate (void*);
    bool  is_debug () const
        { return _debug; }
private:
    struct Free
        {
        Free* next;
        };
    uint _requested_size;    // memory units requested for allocation
    uint _allocated_size;    // memory units to be allocated
    uint _block_size;        // The number of units in blocks 
    void** _allocated_blocks;    // Array of pointers to blocks
    uint _num_allocated_blocks;  // Number of allocated blocks 
    Free* _free;                 // Linked list of free units
    bool _debug;
     
    void more() throw(char*);
    void* debug_check(void*&amp;) throw(char*); 
    void* debug_correct(void*&amp;);
    };
     
inline
void*
MemoryAllocator::allocate()
    {
    if (!_free)
        more();
    void* storage = _free;
    _free = _free-&gt;next;
    return _debug ? debug_correct(storage) : storage;
    }
     
inline
void
MemoryAllocator::deallocate(void* storage) 
    {
    if (_debug)
        debug_check(storage);
    Free* new_free = (Free*) storage;
    new_free-&gt;next = _free;
    _free = new_free;
    }
//End of File
</pre>
</body></html>
