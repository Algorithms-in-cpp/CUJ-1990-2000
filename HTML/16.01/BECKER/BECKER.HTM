


<HTML><HEAD>




<HTML>
     
     <HEAD>

<TITLE>January 1998/Questions &amp; Answers</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<H2><A href="../tocjan.htm"><IMG src="../../toc.gif" ALT="Back to TOC" WIDTH="54" HEIGHT="54"></A>
<FONT COLOR="#FF0000">Columns</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Questions &amp; Answers: The Complex Evolution of &lt;string&gt;</FONT></H4>
<H3 ALIGN="center"><FONT COLOR="#800000">Pete Becker</FONT></H3>
<blockquote>
<p>Pete describes how class string got that way, and how to avoid a few pitfalls in
writing C expressions.</p></blockquote><hr>
<blockquote>
<p><i>To ask Pete a question about C or C++, send e-mail to petebecker@acm.org,
use subject line: Questions and Answers, or write to Pete Becker, C/C++ Users
Journal, 1601 W. 23rd St., Ste. 200, Lawrence, KS 66046.</i></p>
<h4><FONT COLOR="#000080">Q</FONT></H4>
<p>I have some code from a current (1997) C++ college text that looks
like:</p>

<pre>
#include &lt;cstring.h&gt;
#include &lt;iostream.h&gt;
int main()
{
  string MyString;
  cout &lt;&lt; "Enter a string: "
       &lt;&lt; flush;
  while( cin &gt;&gt; MyString )
    cout &lt;&lt; MyString &lt;&lt; endl;
  return 0;
}
</pre>
<p>I have the VC++ 5.0 compiler and it complains about there not being a cstring.h,
so I changed it to &lt;string&gt; and it claims that string is an undeclared
identifier. The compiler doesn't seem to see that string is supposed to be a
type.<p>
Can you shed some more light on this? Is there now a string data type in C++,
or is this some sort of template thing? I have been trying to follow the
header-file follies related to the C++ Standard as best I can. I have yet to
hear anyone actually say that there will now a be a built-in type string. &#151;
Chris Meisenzahl</p>
<h4><FONT COLOR="#000080">A</FONT></H4>
<p>Hmm, your textbook writer hasn't been paying attention to the progress
of the C++ Standard. Borland and Rogue Wave used a header named cstring.h a few
years ago, but once the C++ standardization effort settled in on the name
&lt;string&gt; for the header, pretty much everyone switched. Also, the use of
the manipulator flush is not needed here; cin and cout are synchronized, so
your prompt will always appear before the program starts waiting for input.
string is a genuine type, but it lives in the namespace std. You can get at it
in either of two ways. The first is as follows:</p>

<pre>
#include &lt;string&gt;
#include &lt;iostream&gt;

int main()
{
  std::string MyString;
  std::cout &lt;&lt; "Enter a string: ";
  while( std::cin &gt;&gt; MyString )
    std::cout &lt;&lt; MyString
              &lt;&lt; std::endl;
  return 0;
}
</pre>
<p>In most cases this is the better way to go. Those std:: qualifiers may seem a bit
tedious, but when you're using several different libraries with several
different namespaces it helps you keep track of where things are coming from.
However, compilers and their runtime libraries today don't uniformly support
namespaces, so you may find that some compilers don't like the std:: qualifier.
They may want to see some of these names standing alone. The compilers will
tell you which names they aren't happy with. Over the short term you'll see a
lot of code that avoids that problem by doing this:</p>

<pre>
#include &lt;string&gt;
#include &lt;iostream&gt;
using namespace std;

int main()
{
  string MyString;
  cout &lt;&lt; "Enter a string: ";
  while( cin &gt;&gt; MyString )
    cout &lt;&lt; MyString &lt;&lt; endl;
  return 0;
}
</pre>
<p>This trick will work, but it defeats the purpose of namespaces. It's not a good
habit to get into, but it may be easier if you have to move back and forth
between compilers with varying support for the namespace std.<p>
A third approach is to use a macro:</p>

<pre>
#include &lt;string&gt;
#include &lt;iostream&gt;

#if HAS_NAMESPACES
#define STD std
#else
#define STD
#endif

int main()
{
  STD::string MyString;
  STD::cout &lt;&lt; "Enter a string: ";
  while( STD::cin &gt;&gt; MyString )
    STD::cout &lt;&lt; MyString
              &lt;&lt; STD::endl;
  return 0;
}
</pre>
<p>The idea here is to write code that looks like it's using namespaces appropriately,
even when they aren't actually supported. That way you get in the habit of
thinking about namespaces, rather than simply ignoring them as the previous
approach does. Yes, there's definitely a standard type string. Its full name is
std::string, and sometimes you have to be a bit formal and use its full name
instead of using its nickname.</p>
<h4><FONT COLOR="#000080">Q</FONT></H4>
<p>I've just started using the draft Standard string class. Is there a
standard method for reading data into a string? Currently, I'm using</p>

<pre>
str.resize(len);              // Allocate memory
file.read(str.begin(), len);  // Store bytes into buffer
</pre>
<p>This works (with Microsoft Visual C++ 5.0), but I don't think the Standard says it's
supposed to. I could read the data into a char array and then use str.assign,
but that throws me right back into the oversized array versus managing dynamic
memory problems that string was supposed to avoid. Am I the only person who
wants to be able to write into a string as if it were an array of char? &#151;
Christopher Madsen</p>
<h4><FONT COLOR="#000080">A</FONT></H4>
<p>As you've surmised, there are a couple of problems in your code.
There's a much simpler way to do this, but you're going to have to read through
a short lecture on the uses and abuses of containers before you get to it.
Unless, of course, you decide to skip to the end, but please don't do that. I
think you'll find this discussion useful.</p>
<p>The string class <a href="#1">[1]</a> in the Standard Library was originally designed to
provide the operations that the C library provides for null-terminated arrays
of char, but with the added benefit of automatic memory management. There was
also a wstring class, which was intended to do the same thing for
null-terminated arrays of wchar_t. Then someone added one and one and came up
with template, and suddenly there was a great deal more code involved in
implementing strings. Then someone else said that we ought to make strings into
STL containers &#151; after all, the principle of orthogonality demands that we be
able to random_shuffle a string, even if the principle of practicality says
that this functionality is pointless <a href="#2">[2]</a>.<p>
So today you can think of the string class as a collection of functions that
manipulate text, or you can think of it as an STL container. But don't try to
do both at once, or you'll end up with confused code. And don't think of it as
an array of char. It's not. It's just implemented that way.<p>
For any STL container, the member function begin gives you back an iterator
that points to the first element of that container. Iterators are designed to
work with STL algorithms, and shouldn't be used for anything else. Any sensible
implementation of the standard string class will use a pointer to char as its
iterator, but there's no requirement that begin actually return a pointer. All
that's required is that it return some type of object that can be used in the
somewhat stylized way that STL uses iterators.<p>
So your code works only by luck: your implementation happens to use a pointer
to its internal representation, and that internal representation happens to be
an array of char that's suitable for the call to file.read. That's not
guaranteed to be the case, though, so it's not a good habit to get into.<p>
The Standard Library is actually pretty well designed, aside from its excesses.
If you find that you're writing tricky code to do something that ought to be
simple, you're probably overlooking something. In this case you've overlooked a
somewhat confusing function named getline. The reason that it's confusing is
that it has one of the nastiest prototypes I've ever seen:</p>

<pre>
template&lt;class charT, class traits, class Allocator&gt;
  basic_istream&lt;charT,traits&gt;&amp;
getline(basic_istream&lt;charT,traits&gt;&amp; is,
  basic_string&lt;charT,traits,Allocator&gt;&amp; str)
</pre>
<p>Fortunately, you don't have to wade through all that in order to use it. What that prototype
says is that getline takes an input stream as its first argument and a string
as its second argument, and it returns an input stream. The prototype doesn't
tell you this, but the language definition says that it reads characters from
the stream into the string until it encounters a newline <a href="#3">[3]</a>. getline then
returns a reference to the input stream. You don't have to worry about figuring
out in advance how much space it needs: getline and string work together to
make sure that there's enough space to hold whatever you read in. Using
getline, your code would look like this:</p>

<pre>
getline( file, str );
</pre>
<p>The key to finding things like this is to forget about a string being like an array
of char. That's C, not C++. Instead, think in terms of its interface, and
assume that if you want to do something reasonable with the string, there's
probably a function that will do it. Then it's just a matter of finding that
function.</p>
<h4><FONT COLOR="#000080">Q</FONT></H4>
<p>I would like to comment on one of the items in October's issue of C/C++
Users Journal magazine. There was a question by Mr. M. Zeeshan in the article
"Post-Exception Promises and Uncertainties" on page 98:</p>
<p>I'm using Borland C++ 3.1 &amp; Trident VGA 1 MB, in mode 5D, which is
640x480 with 256 colors. I'm not able to put the pixel after offset address
65,535 (where a segment ends). I've tried both far and huge pointers. In the
far pointer it assumes 65,536 as 0 and puts the pixel on the (0,0). I defined
the pointer as (unsigned char far*) &amp; (unsigned char huge*). Please tell me
what I should do.<p>
VGA is an extension to EGA, so it has some limitations inherited from EGA. The
address space for VGA cards is from 0xA000:0x0000 to 0xA000:0xFFFF. As you can
see, this space is only 64 KB = 65,536 bytes. There are many VGA and SVGA modes
that require more than 64 KB per video page. So to enable use of more than 64
KB video memory, it is organized in bit-planes. VGA has four bit-planes and
each bit-plane consists of 64 KB. Thus, standard VGA has 256 KB video memory;
SVGA has more bit-planes (and more video memory).<p>
At any time the programmer can access only one bit-plane (no more than 64 KB).
You can switch between bit-planes by directly programming the video controller.
Mr. Zeeshan's problem is that he wants to use 640x480 with 256 colors mode.
This mode requires 640x480 = 307,200 bytes, which is more than 64 KB (one
bit-plane). So he has to program the video controller to switch between
bit-planes to access the entire video memory.<p>
I recommend that Mr. Zeeshan use a graphics library. He uses Borland C++;
Borland has a good graphics library. Its limitation is that it supports only
the standard VGA modes. For SVGA modes he can use another BGI driver called
SVGA256.BGI. I don't know Mr. Zeeshan's email address. So, if you can, forward
this message to him. &#151; Stefan Tchekanov</p>
<h4><FONT COLOR="#000080">A</FONT></H4>
<p>I received a similar note from Christopher Jennnings. If I were in a
bad mood I'd answer both of you by saying "yes, but he didn't ask how to use
the VGA card, he asked how to write beyond offset 65,535." And since it's my
column I could declare victory and that would be the end of it. But
unfortunately, you're right, I didn't read his mail carefully enough. I
answered the question that he asked instead of answering the question that he
should have asked. Thanks for catching that, and thanks for the lucid
explanation of the basics of VGA memory management. I don't have Mr. Zeeshan's
address any longer, but if he's still reading this column despite my bad
advice, I hope he sees this.<p>
<h4><FONT COLOR="#000080">Q</FONT></H4>
I may be missing the boat here but I'm not sure whether your interpretation
is correct. I'm refering to your October 1997 column, in which you discussed
order of evaluation of expressions. Consider the expression:</p>

<pre>
y = x + x + x++;
</pre>
<p>According to K&amp;R (I'm not sure if this is ANSI C or not), x++ should not increment x
until after the statement has executed; that is, it should execute it like this
:</p>

<pre>
y = x + x + x;
x = x + 1;
</pre>
<p>which doesn't contravene your C Standard clause. I thought that was the whole point
of having a post-decrement and pre-decrement operator! If that is truly the
case then the Borland compiler evaluated it correctly and all the others were
wrong. I'm not sure whether this is Standard C but it's the way I always
interpreted the pre/post increment/decrement operators. &#151; Michael Dennis</p>
<h4><FONT COLOR="#000080">A</FONT></H4>
<p>I wasn't able to find an analysis of this expression in K&amp;R. What
K&amp;R does say, along with every textbook that discusses increment operators,
is that the statement</p>

<pre>
y = x++;
</pre>
<p>executes like this:</p>

<pre>
y = x;
x = x + 1;
</pre>
<p>That doesn't help you understand what happens when you use x more than once in the
statement, however. The C language definition explicitly prohibits using x in
the way that the earlier example uses it. But that's the subject of my earlier
column.</p>
<p>Most people learn programming by developing general rules that tell
them how various operations in a programming language work, like the one you
cited &#151; that x++ should not increment x until after the statement has
executed. The problem that we all run into is that the rules we develop might
not actually be correct. In this example, your rule is often close enough, but
in fact it's not correct. The actual rule from the C language definition is
that the value of the expression x++ is the original value of x, and after that
value is used, x will be incremented. The key here is understanding that the
increment can happen any time after the compiler has copied the value out of x.
It doesn't say that the increment only happens after everything else in the
statement has been done. Let's take a different example:</u></b></p>

<pre>
#include &lt;stdio.h&gt;

int x = 0;

void show( int i )
{
  printf( "%d, %d\n", x, i );
}

int main()
{
  show( x++ );
  return 0;
}
</pre>
<p>One way a compiler could interpret this program would be to get the value from x,
increment x, and pass the old value to show. If the compiler did that the
output would be 1, 0. Another way to interpret this code would be to get the
value from x, pass the old value to show, then increment x. If the compiler did
that the output would be 0, 0. That's what your rule would require. Both of
these interpretations satisfy the rule that the increment is done only after
the value of x has been used. Each of them is reasonable.<p>
Only the first interpretation is valid in C, because there is a sequence point
prior to the function call. The presence of the sequence point mandates that
the increment, and any other side effects, must occur before making the
function call.<p>
It would certainly be possible to design a language that did things the way you
describe, and it would be a perfectly reasonable and consistent language. The
designers of C chose not to do that. There's not much point in debating which
approach is better, because the decision has already been made, and it won't be
changed. It might not fit the way you're used to thinking about things, and it
might not be what you'd have chosen if you were designing a language.
Nevertheless, it is the way the language works.<p>
Be very careful about applying rules that you've used for years: they might not
be right. Or, as they say in the army, if the map doesn't agree with the
terrain, trust the terrain. </p>
<h4><FONT COLOR="#000080">Q</FONT></H4>
<p>Aahhh! Now I'm beginning to understand a similar problem I first came
across in Windows programming; trying to alter a bit in an integer (e.g. a)
according to which radio button was clicked (e.g. b):</b></p>

<pre>
#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;

int main()
{
    int a = 7;
    int b = 6;

    // if (b == 6) set bit 1 else clear bit 1
    (b == 6) ? a |= 2 : a &amp;= ~2;
    // prints a = 5 (wrong)
    printf ("Test 1: a = %d\n", a);

    a = 7;
    // if (b == 5) set bit 1 else clear bit 1
    (b == 5) ? a |= 2 : a &amp;= ~2;
    // prints a = 5 (right)
    printf ("Test 2: a = %d\n", a);

    a = 7;
    // if (b == 6) set bit 1 else clear bit 1
    (b == 6) ? (a |= 2) : (a &amp;= ~2);
    // prints a = 7 (right)
    printf ("Test 3: a = %d\n", a);

    a = 7;
    // if (b == 5) set bit 1 else clear bit 1
    (b == 5) ? (a |= 2) : (a &amp;= ~2);
    // prints a = 5 (right)
    printf ("Test 4: a = %d\n", a);
}
</pre>
<p>The results are from the Borland C3 compiler. MS VC1.5 gave similar results and a
version of MS QuickC refused to compile it. If the if..else construct is used
instead of the conditional operator, there appears to be no ambiguity.<p>
I think this is a more subtle example than the x + x + x++ you quoted (October
1997 issue). The limited information I have on the conditional operator tends
to imply that it can be used as a direct replacement for if..else, which is
apparently not quite true. &#151; Tim Bolt</p>
<h4><FONT COLOR="#000080">A</FONT></H4>
<p>This is actually a different issue than the one presented by x + x +
x++. The problem here lies in misunderstanding how the conditional operator
works, which is a fairly common condition. Changing to if ... else fixes the
problem, not because the conditional operator produces an "ambiguity," but
because it is being used incorrectly. Please don't use the word "ambiguity"
indiscriminately. There is no ambiguity in your code &#151; it simply doesn't do
what you thought it would do.</p>
<p>The conditional operator is an expression, not a statement. It is evaluated
by the compiler, and it produces a result. The if ... else construct is a
control statement. It does not produce a value; it controls which of its two
statements gets executed. Keep this distinction clear in your mind and you'll
avoid many of the mistakes that result from attempts to use the conditional
operator. If you want to select which statement to execute, use if ... else.
Your code is most naturally written like this:</p>

<pre>
if( b == 6 )
    a |= 2;
else
    a &amp;= ~2;
</pre>
<p>You could also use the conditional operator in a straightforward way to do the same
thing, like this:</p>

<pre>
a = (b==6) ? a|2 : a&amp;~2;
</pre>
<p>Here, the conditional expression selects one of the two values, a|2 or a&amp;~2. The
resulting value is assigned to a.<p>
When you try to go a step further you can easily get into trouble, as you've
seen. That's because the conditional operator has higher precedence than the
assignment operator. That is, when there's an assignment operator to the right
of a conditional operator, the conditional operator grabs the expression up to
the assignment. That makes it useful for things like this:</p>

<pre>
(b == 6) ? a : c = 3;
</pre>
<p>This statement <a href="#4">[4]</a> assigns the value 3 to either a or c, depending on the value of
b. And that's exactly the reason you get unexpected results from your use of
the conditional operator. The compiler sees it as if you had written your
original statement like this:</p>

<pre>
((b == 6) ? a |= 2 : a) &amp;= ~2;
</pre>
<p>That is, if b has the value 6, it performs the operation a|=2, and uses the result
of that operation as the left operand for &amp;=~2. When a starts out as 7,
a|=2 has no effect, because bit two is already set. Then the compiler evaluates
a&amp;=~2, which clears bit two, resulting in the value 5 for a. If b does not
have the value 6, the conditional operator selects the part after the colon,
that is, a, and uses it as the left operand for &amp;=~2. Again, the result is
that a gets the value 5. Your tests 3 and 4 produce the result you expected
because the parentheses override the default precedence of the conditional
operator. But once you've written the fully parenthesized expression that's
needed here, you may as well write if ... else. It will be clearer.<p>
Finally, note that the above analysis changes if you're using C++. C++ changed
the binding of the conditional operator so that your tests 1 and 2 will do what
you expected them to do. That makes the operator more symmetrical, and avoids
this sort of surprise. However, if you're used to the C rule, this change will
be surprising. If you're in a situation where you write both C and C++ code
you'll probably find this difference in semantics rather confusing. That's yet
another reason to use if ... else here &#151; it means the same thing in both
languages.</p>

<h4><FONT COLOR="#000080">Notes</FONT></H4>

<p><a name="1"></a>[1] Please don't write to me to tell me that string isn't a class. I know it's a
typedef for a specialization for type char of the template basic_string, but
that's too long a name, so I'll just call it the string class. The difference
is rarely significant.<p>
<a name="2"></a>[2] This description of string's evolution might make you think I was opposed
to these changes. In fact I was, but now that I'm in the business of developing
libraries, the more complex the Standard Library is, the better. Ahhh, job
security.<p>
<a name="3"></a>[3] There's another version of getline that takes a third parameter whose type
is charT. If you use that version, the third parameter is the delimiter: the
function reads characters until it encounters that character.<p>
<a name="4"></a>[4] I know, I said that the conditional operator is not a statement. That's
correct, but any expression can be used as a statement. That's why an
expression like a=5 can stand on its own as a statement. The same thing applies
to the use of the conditional operator here.
</p>
<p><i>Pete Becker is Technical Project Leader for Dinkumware, Ltd. He spent
eight years in the C++ group at Borland International, both as a developer and
manager. He is a member of the ANSI/ISO C++ standardization commmittee. He can
be reached by email at petebecker@acm.org. 
</i></p>
</blockquote>
</body></html>
