<HTML><HEAD>
<TITLE>January 1999/Persistent Vector Iterators/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: Definition of pvector template</A></h4>
<pre>
//////////////////////////////////////////////////////
//  Copyright (c) 1998 Radoslav Getov               //
//                                                  //
//  Permission to use, copy, modify and distribute  //
//  this software is granted without fee, provided  //
//  that the above copyright notice and this        //
//  permission notice appear in the modified source //
//  and the source files that #include it.          //
//                                                  //
////////////////////////////////////////////////////// 
#ifndef PVECTOR_H
#define PVECTOR_H

#include &lt;vector&gt;

// -------------- template pvector&lt;&gt; -----------
template &lt;class T, class A = std::allocator&lt;T&gt; &gt;
class pvector : public std::vector &lt;T, A&gt; 
{
typedef std::vector&lt;T&gt; _BaseType;
typedef pvector&lt;T&gt;     _ThisType;

public:

// -------------- pvector::const_iterator -------
class const_iterator 
   : public std::iterator &lt; 
               std::random_access_iterator_tag, T &gt;
   {
   protected:
   // -------------- data members ---------------
   size_t           _itsInd;  // Index in its vector.
   const _ThisType* _itsVect; // Ptr to its vector.

   const_iterator (const _ThisType * v, size_t index)
      : _itsVect (v), _itsInd (index) {}

   _BaseType::const_iterator _getBaseConstIt() const
      {return((_BaseType*)_itsVect)-&gt;begin()+_itsInd;}

   friend pvector &lt;T&gt;;

   public:
   // -------------- ctors ----------------------
   const_iterator ()
      : _itsInd (0), _itsVect (0) {}

   // -------------- dereferencing --------------
   const_reference operator *() const
      { return (*_itsVect)[_itsInd]; }

   const T* operator -&gt;() const
      { return &amp; operator *(); }

   // -------------- iterator arithmetic --------
   #define DEFINE_ARITHMETIC(It)                     \
      /* binary */                                   \
      It operator + (int s) const                    \
         { return It (_itsVect, _itsInd + s); }      \
      It operator - (int s) const                    \
         { return It (_itsVect, _itsInd - s); }      \
      int operator - (It to) const                   \
         { return _itsInd - to._itsInd; }            \
      /* increment */                                \
      It&amp; operator += (int s)                        \
         { _itsInd += s; return *this; }             \
      It&amp; operator ++ ()                             \
         { _itsInd++; return *this; }                \
      It operator ++ (int)                           \
         { It t (*this); _itsInd++; return t; }      \
      /* decrement */                                \
      It&amp; operator -= (int s)                        \
         { _itsInd -= s; return *this; }             \
      It&amp; operator -- ()                             \
         { _itsInd -- ; return *this; }              \
      It  operator -- (int)                          \
         { It t (*this); _itsInd--; return t; }      \


   DEFINE_ARITHMETIC (const_iterator)

   // -------------- iterator comparisons -----------
   bool operator != (const const_iterator &amp; to) const
      { return _itsInd  != to._itsInd 
            || _itsVect != to._itsVect; }

   bool operator == (const const_iterator &amp; to) const
      { return _itsInd == to._itsInd 
            &amp;&amp; _itsVect == to._itsVect; } 

   bool operator &lt; (const const_iterator &amp; to) const
      { return _itsInd  &lt; to._itsInd  
            || _itsInd == to._itsInd 
            &amp;&amp; _itsVect &lt; to._itsVect; }

   bool operator &lt;= (const const_iterator &amp; to) const
       { return _itsInd  &lt; to._itsInd 
             || _itsInd == to._itsInd 
             &amp;&amp; _itsVect &lt;= to._itsVect; }

   bool operator &gt;= (const const_iterator &amp; to) const
      { return !(*this &lt; to); }

   bool operator &gt; (const const_iterator &amp; to) const
      { return (to &lt; *this); }
   }; // -------------- class const_iterator ----

// ------------- class pvector&lt;&gt;::iterator ----------
class iterator : public const_iterator
   {
   // --------------- private ctor --------------
   iterator (const _ThisType* v, size_t index)
      : const_iterator (v, index) {};

   _BaseType::iterator _getBaseIt() const
     {return ((_BaseType*)_itsVect)-&gt;begin()+_itsInd;}

   friend pvector &lt;T&gt;;
   
   public:
   // -------------- ctor ----------------------
   iterator () : const_iterator() {}

   // -------------- dereferencing --------------
   reference operator *() const
      { return (*(_BaseType*)_itsVect)[_itsInd]; }
                               
   T* operator-&gt;() const      
      { return &amp;this-&gt;operator *();}

   // ------------ arithmetic -------------------
   DEFINE_ARITHMETIC (iterator);
   }; // pvector&lt;&gt;::class const_iterator

#undef DEFINE_ARITHMETIC // cleanup 

// -------------- constructors ------------------
explicit pvector (const A&amp; a = A())
   : std::vector &lt;T&gt; (a) {}

explicit pvector (size_type n, 
                  const T&amp; v = T(), 
                  const A&amp; a = A())
   : std::vector &lt;T&gt; (n, v, a) {}

template &lt;class InIt&gt;   
pvector (InIt first, InIt last, const A&amp; a = A())
   : std::vector &lt;T&gt; (a) 
   { for (; first != last; first++) 
        push_back (*first); }

pvector (const pvector&amp; x)
   : std::vector &lt;T&gt; (x) {}

// -------------- iterator returns --------------
iterator begin() 
   { return iterator (this, 0); }
iterator end() 
   { return iterator (this, size());}

const_iterator begin() const
   { return const_iterator (this, 0);  }
const_iterator end() const
   { return const_iterator (this, size()); }

// -------------- reverse iterators -------------
typedef std::reverse_iterator &lt;iterator, T&gt;
   reverse_iterator;
reverse_iterator rbegin() 
   { return (reverse_iterator (end())); }
reverse_iterator rend() 
   { return (reverse_iterator(begin())); }

typedef std::reverse_iterator &lt;const_iterator, T&gt;
   const_reverse_iterator;
const_reverse_iterator rbegin() const
   { return (const_reverse_iterator (end())); }
const_reverse_iterator rend() const
   { return (const_reverse_iterator (begin())); }

// -------------- assign ------------------------
pvector &amp; operator = (const pvector &amp; from) 
   { (_BaseType &amp;) *this = from; return *this; }

// -------------- erases ------------------------
iterator erase (iterator it)
   { 
   _BaseType::erase (it._getBaseIt());
   if (2 * size() &lt; capacity()) 
      {  // deallocate some storage
      pvector copy (*this);
      swap (copy);
      }
   return it; 
   }

void pop_back ()
   { erase (end() - 1); }

iterator erase (iterator from, iterator to)
   { 
   _BaseType::erase (from._getBaseIt(),
                     to.  _getBaseIt());
   if (2 * size() &lt; capacity())
      {
      pvector copy (*this);
      swap (copy);
      }
   return from; 
   }
                 
void clear ()
   { erase (begin(), end()); }

// -------------- inserts -----------------------
iterator insert (iterator it, const T&amp; x = T())
   { _BaseType::insert (it._getBaseIt(), x);
      return it;  }
   
void insert (iterator it, size_type n, const T&amp; x)
   { _BaseType::insert (it._getBaseIt(), n, x); }

template &lt;class InIt&gt;    
void insert (iterator it, InIt first, InIt last)
   { for (; first != last; it++, first++)
        insert (it, *first);  }

}; // ------------ template pvector -------------

#else
#  error Multiple #included file!
#endif
/* End of File */
</pre>
</BODY>
</HTML>
