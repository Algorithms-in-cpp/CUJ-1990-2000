<HTML>
     
     <HEAD>
<TITLE>January 1999/Uncaught Exceptions</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjan.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Uncaught Exceptions: Party Like It's 1999</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Bobby Schmidt</FONT></H3>

<BLOCKQUOTE>

<p>Pete Becker could use a short Q as a springboard to a very long A. Now Bobby Schmidt proves he can rise to the same challenge.</p>
</BLOCKQUOTE>
<HR>
<BLOCKQUOTE>
<p><I>Copyright &copy; 1998 Robert H. Schmidt</I></p>

<p><I>To ask Bobby a question about C or C++, send email to </I><B>cujqa@mfi.com</B><I>, use subject line: Questions and Answers, or write to Bobby Schmidt, C/C++ Users Journal, 1601 W. 23rd St., Ste. 200, Lawrence, KS 66046.</I></p>

<p>I can hardly believe I'm writing for a 1999 magazine issue <a href="#1">[1]</a>. When I was a kid, I expected us to live like the Jetsons by 1999. Talk about diminished expectations: thanks to the infamous Millennium Bug, a.k.a. Y2K, I feel lucky to still get money out of my ATM and electricity out of my wall sockets. Maybe the "broken" programs are just foretelling the future. After all, if all the doom-and-gloom Y2K predictions come true, life really will resemble that of 1900. Time to break out my Barber dimes.</p>
<p>My uncle, an Internet newbie, ran across a couple of pessimistic Y2K sites <a href="#2">[2]</a>. Alarmed, he forwarded me the URLs and asked for my comments. While spelunking through the sites, I found an oblique reference to a pair of <I>Salon Magazine</I> articles written by Ellen Ullman <a href="#3">[3]</a>. In those articles she discusses the culture of programming from an insider's perspective. I found her articles a witty and engaging read &#151; highly recommended.</p>

<h4><FONT COLOR="#000080">Foreign Affairs</FONT></H4>

<h4><FONT COLOR="#000080">Q</FONT></H4>

<p>I am looking for information about the extensions of the C standard by ISO in 1995. I know that multibyte and wide characters are concerned but I don't know exactly how and if, in practice, these new features are of great importance and if they are included in most compilers. &#151; Claude Delannoy</p>

<h4><FONT COLOR="#000080">A</FONT></H4>

<p>The extensions are part of Amendment 1 to the original C Standard, and add support for non-US character sets. Most of the new features are concentrated in the headers</p>

<pre>
&lt;iso646.h&gt;<p>
&lt;wchar.h&gt;
&lt;wctype.h&gt;
</pre>

<p>and the libraries implementing them. Amendment 1 was approved in 1994. By now, several years later, I expect most decent compilers are supporting the Amendment, especially if they implement both C and C++. (Such internationalization is part of the C++ Standard.)</p>
<p>Are these features of great importance? If you want to make your programs maximally portable around the world, or if you want your compiler to understand someone else's internationalized code, then yes, they are important. But if you're content to restrict yourself to a US audience, or to use some other mechanism for internationalization, then no, they probably are not important.</p>
<p>C is "tuned" to American letters, numbers, and punctuation: the source code syntax is most streamlined and elegant in the ASCII world, and the runtime library interface is simplest for ASCII. Once you start using the Amendment 1 features &#151; especially if you restrict yourself to the ISO 646 subset of American characters &#151; your code becomes less elegant and harder to read. And thanks to C's loose type rules, you can accidentally mix traditional "narrow" characters with international "wide" characters.</p>
<p>In practice I suspect relatively few programmers make much use of these features. Those who are concerned with internationalization often opt for other quasi-standards (<B>TCHAR</B>s anyone?). Most projects I've done have assumed ASCII, often explicitly. With my Microsoft projects in particular, the process often went as follows:</p>
<p>1.  Finish an intentionally all-ASCII version, maybe with a token genuflection towards Unicode.</p>
<p>2.  Port the completed code to other languages as a distinct project.</p>
<p>3.  Fix all the bugs arising because of the original ASCII assumptions.</p>
<p>I think this approach is a mistake, much like retrofitting const correctness to a finished project. If you suspect you'll want to use your code outside the US, you should factor that into the design from the start. (To be fair, those MS project groups may have changed their wicked ways since.)</p>
<p>I'll also add that C is probably not the best language choice in this regard. C++ can do a better job, by making a character-like class that hides many of the internationalization concerns. Java is also good here, since Unicode is its native tongue.</p>

<h4><FONT COLOR="#000080">Sets-R-Us</FONT></H4>

<h4><FONT COLOR="#000080">Q</FONT></H4>

<p>I am writing to you in the hope that you can either (a) provide a solution to my problem or (b) tell me once and for all it is impossible! Either way it will be a relief!!</p>
<p>Basically, I am trying to find a way in C++ using templates (or anything else in the language!) where I can create "bitsets" that work identically to Pascal/Modula-2 sets. That is, the compiler will enforce rules about the range of valid bits that can be set. In Pascal a set can be created from an enumeration, and the compiler will ensure that any time an operation is applied to a variable of that set, only valid values are passed in.</p>
<p>The Standard C++ Library has a bitset template, but it takes general <B>size_t</B> values for indexing, and throws runtime exceptions if there is an out-of-range value.</p>
<p>By the way, the main reason I would like to achieve this is not really for out-of-range handling, but rather to stop errors (which have occurred in my company many times over the years) from people using the wrong "constant" value in a set operation. Pascal prevents these errors by not allowing the wrong types to be used in set operations. Can this be done in C++? &#151; Karl Lean</p>

<h4><FONT COLOR="#000080">A</FONT></H4>

<p>You can't exactly replicate Pascal's behavior here, since C++ does not support sets directly. However, by combining a class and an enumeration, you can get fairly close. A full-blown set implementation pulls in quite a number of design considerations, and could easily fill an entire column series on its own; I'll touch on just a few possibilities here.</p>
<p>As a first pass, consider</p>

<pre>
enum Element
    {
    A,
    B,
    C
    };
     
class Set
    {
public:
    Set &amp;insert(Element const &amp;);
    Set intersect(Set const &amp;) const;
    // ... and so on
    };
     
Set s1, s2, s3;
s1.insert(A);
s2.insert(B);
s3 = s1.intersect(s2);
</pre>

<p>In this example objects of type <B>Set</B> can hold <B>Element</B>s of value <B>A</B>, <B>B</B>, and <B>C</B>. Because <B>Element</B> is an enumeration type, calls like</p>

<pre>
s1.insert(7); // error, type mismatch
</pre>

<p>result in a compile-time error, as you desire. Unfortunately, there's nothing to stop an insistent programmer from inserting the nefarious</p>

<pre>
s1.insert((Element) 7);
</pre>

<p>Pascal supports several built-in operators for sets; in our C++ analogue, operator overloading can make the sets look more "native":</p>

<pre>
class Set
    {
public:
    Set &amp;operator+=(Element const &amp;);
    Set operator&amp;(Set const &amp;)const;
    // ...
    };
     
s1 += A;	// was s1.insert(A);
s2 += B;	// was s2.insert(B);
s3 = s1 &amp; s2;
       // was s3 = s1.intersect(s2);
</pre>

<p>Normally I find operator overloading among the most dangerous and overwrought features of C++. In this instance, though, I think considered use of operators can bring an elegance and utility.</p>
<p>To use an expression like</p>

<pre>
if (s1 &amp; s2)
</pre>

<p>define <B>Set::operator&amp;</B> to return a <B>bool</B> or something convertible to a <B>bool</B>. As written, <B>Set::operator&amp;</B> returns a <B>Set</B> reference. If that returned <B>Set</B> turned itself into a <B>bool</B> via <B>Set::operator bool</B>, then</p>

<pre>
if (s1 &amp; s2)
</pre>

<p>would really be</p>

<pre>
if ((s1.operator&amp;(s2)).
    operator bool())
</pre>

<p>In this scenario, you'd define <B>Set::operator bool</B> to return <B>false</B> for an empty set and <B>true</B> otherwise.</p>
<p>With an appropriate <B>operator|</B> representing set union, you can initialize sets by</p>

<pre>
Set s1(A | B | C);
</pre>

<p>You may find that <B>*</B> and <B>+</B> make a more logical representation for intersection and union; after all, these are the built-in set operators Pascal uses. In that case, define <B>operator*</B> and <B>operator+</B> instead of <B>operator&amp;</B> and <B>operator|</B>. In no event should you overload <B>operator&amp;&amp;</B> and <B>operator||</B>, since that could lead to sequence-point surprises <a href="#4">[4]</a>.</p>
<p>To make <B>Set</B> work for arbitrary element types, craft a template</p>

<pre>
template&lt;class Element&gt;
class Set
    {
    // ... same as before
    };
</pre>

<p>Managing the <B>Set</B> storage is a bit tricky: the template doesn't necessarily know the <B>Element</B>'s lower and upper bounds, and therefore can't know how many different <B>Element</B> values it could be asked to hold. Possible solutions:</p>

<UL><LI>Pick a fixed maximum <B>Set</B> size.</LI>
    <LI>Pick a starting <B>Set</B> size, and let the <B>Set</B> grow dynamically over time.</LI>
    <LI>Specialize the template for element types of known ranges.</LI>
    <LI>Require that element types be more sophisticated, with traits or properties  that <B>Set</B> can query.</LI></UL>

<p>Finally, as I'm sure many Diligent Readers are busting to tell me, you can adapt the <B>set</B> and <B>multiset</B> templates implemented in the Standard C++ library.</p>

<h4><FONT COLOR="#000080">Vertigo</FONT></H4>

<h4><FONT COLOR="#000080">Q</FONT></H4>

<p>First off let me tell you, I love reading your column in <I>CUJ</I>. It is very informative and teaches me a lot about the language I didn't know.</p>
<p>One thing I've been fooling around with is trying to make type-cast operators for smart pointers safer. One example is in Microsoft's ATL (Active Template Library) 3.0: the <B>CComPtr</B> class has an <B>operator-&gt;</B> that returns the interface pointer. Before version 3.0 you could call <B>AddRef</B> and <B>Release</B> on the object and screw up its reference count. They fixed this by doing something like this:</p>

<pre>
class NoRefCountInterface : public Interface
    {
    // ...
private:
    AddRef();
    Release();
    };
</pre>

<p>That way if you called the members via <B>CComPtr::operator-&gt;</B> the calls would fail to compile, since the member are private. So I thought that I could do that with <B>operator delete</B>:</p>

<pre>
class NoDeleteInterface :
    public Interface
    {
private:
    static void
    operator delete(void *);
    // ... is not implemented
    };
     
class NoDeletePtr
    {
public:
    operator NoDeleteInterface*();
    // ...
    };
</pre>

<p>I was expecting statements such as these would be illegal:</p>

<pre>
NoDeletePtr x;
// ...
delete x;
</pre>

<p>But they compile fine on Microsoft Visual C++ 6.0! In fact I get linker errors because <B>operator delete</B> has no body!</p>
<p>I understand there is an <B>operator delete</B> and a <B>delete</B> operator (thanks to Scott Meyers' book), but I don't understand what is going on in the above situation. Should I get a compile error? &#151; Justin Rudd</p>

<h4><FONT COLOR="#000080">A</FONT></H4>

<p>Remember how Alfred Hitchcock had a cameo role in many of the movies he directed? Even in <I>Lifeboat</I>, where he couldn't just stroll through the set, his picture appeared in a newspaper or magazine on screen. I've decided Scott Meyers is my column's Alfred Hitchcock. Even when he's not a guest star, he still manages to get his name mentioned. Maybe I should start wearing garlic to ward him off.</p>
<p>Anyway, took the liberty of de-Microsoftizing and otherwise changing the names in your code example, to make the role of each piece more obvious. I also pared down your example to something more succinct.</p>
<p>I've not used Microsoft's ATL, so I have to gloss over some details. In particular, I'm not sure if <B>CComPtr</B> is a template, or how it binds to an interface object. I'm guessing the proper usage is modeled on <B>auto_ptr</B> and looks something like</p>

<pre>
CComPtr&lt;NoRefCount&gt;
p(new NoRefCount); // ?
</pre>

<p>However the binding happens, when you try to compile</p>

<pre>
p-&gt;AddRef();
</pre>

<p>what you are probably getting is</p>

<pre>
(p.operator-&gt;())-&gt;AddRef();
</pre>

<p>The expression <B>p.operator-&gt;()</B> presumably returns a pointer to its interface object (<B>NoRefCount</B> here). Because <B>AddRef</B> is declared private in <B>NoRefCount,</B> the call won't compile.</p>
<p>In your second scenario, when you write the expression <B>delete x</B>, what really happens is this sequence:</p>
<p>1.  <B>x</B>'s destructor (<B>NoDeletePtr::~NoDeletePtr</B>) is called.</p>
<p>2.  Some <B>operator delete</B> is called, with <B>&amp;x</B> passed in as the argument.</p>
<p>You want to control which <B>operator delete</B> is called in the second step. In particular, you want <B>NoDeleteInterface::operator delete</B> to be called. For this to happen, the <B>x</B> in <B>delete x</B> must convert to a <B>NoDeleteInterface</B> object &#151; and you expect that to happen by <B>x</B> implicitly calling <B>operator NoDeleteInterface*</B>. The net result would then be</p>

<pre>
x.~NoDeletePtr();
(x.operator NoDeleteInterface *())-&gt;
    operator delete(x);
</pre>

<p>So here's the real question: does <B>x</B> implicitly convert itself to a <B>NoDeleteInterface</B> object this way? The real answer, as usual, is teased from the C++ Standard. In section 5.3.5 ("Delete") we read:</p>

<BLOCKQUOTE>
<p>The operand [of a <B>delete</B> expression] shall have a pointer type, or a class type having a single conversion function to a pointer type...</p>
<p>If the operand has a class type, the operand is converted to a pointer type by calling the above-mentioned conversion function, and the converted operand is used in place of the original operand...</p>
<p>The <B>delete</B>-expression will call a deallocation function [<B>operator delete</B>]...</p>
<p>Access and ambiguity control are done for both the deallocation function and the destructor.</p>
</BLOCKQUOTE>

<p>I've omitted other passages, but you should get the gist. The official answer seems to be yes, the implicit conversion will occur, and the converted-to type's private <B>operator delete</B> will be called. Just for yucks, I tried your code on four different translators. Two made the implicit conversion, two did not &#151; a draw.</p>
<p>I did find one interesting quirk with MSVC 5: if you add an explicit destructor to <B>NoDeleteInterface</B>, the above code compiles, even though the class's <B>operator delete</B> is still private. Check out your original sample on your version of MSVC, and see if you have an explicit destructor. By tracing through the debugger, I found the private <B>operator delete</B> was indeed being called.</p>

<h4><FONT COLOR="#000080">You Say Tomato&lt;&gt;</FONT></H4>

<h4><FONT COLOR="#000080">Q</FONT></H4>

<p>I read (and even reread) your <I>CUJ</I> columns with interest.</p>
<p>In your May 98 column on template metaprogramming you gave the following example (reformatted to my taste :-)):</p>

<pre>
template &lt; int x &gt;
struct f
{
   static const int value =
      x + f&lt;x-1&gt;::value;
};
     
struct f&lt;1&gt;
{
   static const int value = 1;
};
</pre>

<p>According to Stroustrup's <I>The C++ Programming Language,</I> 3rd Edition, the specialization should be written as</p>

<pre>
template &lt;&gt;
struct f&lt;1&gt;
{
   static const int value = 1;
     
};
</pre>

<p>This makes sense as the special case of the more general case where we have more than one template parameter, as in</p>

<pre>
template &lt; typename T, int N &gt;
class Array
{
   ...
   T _data[N];
};
     
template &lt; typename T &gt;
class Array&lt;T,0&gt;
{
   ...
   std::vector[T] _data;
};
</pre>

<p>Is the "<B>template &lt;&gt;</B>" optional in the standard, or is it just not yet required by the current compilers?</p>
<p>Thank you for an interesting column and for considering my question.</p>
<p>Regards &#151; Hans Salvisberg</p>

<h4><FONT COLOR="#000080">A</FONT></H4>

<p>Compiler writers, and the programs they write, are not infallible; but those writers spend a lot more time than I studying and interpreting the C++ Standard. So while I don't rely on a compiler's verdict as the sole arbiter of program correctness, I do compile my code examples as a sanity check before submitting them for publication. If my interpretation of the Standard varies wildly from my compilers' interpretations, I dig deeper to resolve the difference.</p>
<p>In this instance all my compilers accepted the <B>template&lt;&gt;</B>-less code, and I didn't notice the error, so I saw no interpretation difference to resolve. Ooops. As I researched your question, I found it strange that translators from four different vendors &#151; EDG, GNU, Metrowerks, and Microsoft &#151; all accepted my published version. That lead me to think that perhaps some loophole in the C++ Standard sanctioned this code, but I never found such a loophole. In short, I goofed in that column, and should not have omitted the <B>template&lt;&gt;</B> prefix.</p>
<p>I eventually learned from P.J. Plauger that the <B>template&lt;&gt;</B>-less syntax was permissible under earlier C++ incarnations. Towards the end of C++ standardization, some compiler implementers demanded the addition of the keyword <B>typename</B> and other aids, to help resolve template-parsing ambiguities. <B>template&lt;&gt;</B> is apparently one of those aids.</p>
<p>The code I published contained no such parsing ambiguities, so the compilers were able to understand my intent. Even so, I still should have used <B>template&lt;&gt;</B>, since my aim is to show you conforming and well formed code wherever I reasonably can. Thanks for helping to keep me honest.</p>

<h4><FONT COLOR="#000080">Notes</FONT></H4>

<p><a name="1"></a>[1]  Whenever I see that date, I expect to see the 9s lined up a little ragged, like the digits on a car odometer that's about to turn over.</p>
<p><a name="2"></a>[2]  Luckily for him, my family lives in Sedona, AZ. If the sky really falls after Y2K, he's already in the remote hills everyone else will be running to. Although come to think of it, life in Sedona is already in a time warp, so the post-Y2K world would seem normal.</p>
<p><a name="3"></a>[3]  <B>&lt;http://www.salonmagazine.com/21st/feature/1997/10/cov_09ullman.html&gt;</B></p>
<p><a name="4"></a>[4]  If you're not sure what I mean by "sequence-point surprises" then send me a question about it! That way I can answer in print, turning this column into a perpetual motion machine (each answer begetting a new question, ad infinitum). Just another form of job security for your Friendly Contributing Editor.</p>

<p><i>Bobby Schmidt is a freelance writer, teacher, consultant, and programmer. He is also an alumnus of Microsoft, a speaker at the Software Development and Embedded Systems Conferences, and an original "associate" of (Dan) Saks &amp; Associates. In other career incarnations, Bobby has been a pool hall operator, radio DJ, private investigator, and astronomer. You may summon him on the Internet via <B>rschmidt@netcom.com</B>.</i></p>


</BLOCKQUOTE>
</BODY>
</HTML>
