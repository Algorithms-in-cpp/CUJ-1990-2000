<HTML>
     
     <HEAD>
<TITLE>January 1999/Using C++ with Word97 COM Interfaces</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjan.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Using C++ with Word97 COM Interfaces</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Jim Langseth</FONT></H3>

<BLOCKQUOTE>

<p>Imagine packing all of MS Word 97 into a C++ class. You can do it with a little knowledge of COM.</p>
</BLOCKQUOTE>
<HR>
<BLOCKQUOTE>
<h4><FONT COLOR="#000080">Introduction</FONT></H4>

<p>While working on a recent project, I added a capability to my application to generate a report file. My first implementation simply generated a text file that the user saved or printed. For some time I considered the possibility that I could harness the text formatting power of Microsoft Word, which I had previously installed on the workstation as part of Office97. After all, COM was designed to provide just this sort of capability.</p>
<p>Since my application was based on MFC, I needed to find a way to use Word through C++ rather than the more common method of using Visual Basic for Applications, for which much documentation exists. Not surprisingly, using C++ is a bit trickier.</p>
<p>After finding little or no documentation or examples, I began piecing together the code to interface Word through COM. I had not programmed COM prior to this project, so it also seemed a good introduction.</p>
<p>Before too long, I found the proper formula for programmatically directing Word to format a document. (I had to install the Office Service Release 1 before I had any success.) However, due to the complexity and volume of the COM interfaces provided by Word (and the rest of Microsoft Office), I decided to define a class to wrap the needed functionality into a simple and usable package.</p>
<p>While Word possesses a huge assortment of capabilities, I was interested in a simple stream-like design that would allow me to create a document, append text (calling an API similar to C's <B>printf</B> or Pascal's <B>writeln</B>), and set characteristics such as font size, underlining, boldness, and italics. The finished document could be printed or saved to a file.</p>
<p>This article describes the wrapper class I developed and shows how easy it is to use. You can use this class without knowing how to do COM programming. To understand how this class works, however, you'll need to be familiar with COM concepts. Interested readers may wish to consult <a href="#1">[1]</a>.</p>

<h4><FONT COLOR="#000080">Using Word with C++</FONT></H4>

<p><B>CWordStream</B> is the name of the class I designed to hide the complexity of the Word interfaces (see <B>WordStream.hpp</B>, <A HREF="list1.htm">Listing 1</A>). If you examine the first section of the source file (<A HREF="fig1.htm">Figure 1</A>), you will see the <B>#import</B> statements that import the type libraries describing the following interfaces:</p>

<pre>
C:\Program Files\Microsoft Office\Office\MSO97.DLL
C:\Program Files\Common Files\Microsoft Shared\VBA\VBEEXT1.OLB
C:\WINNT\system32\VEN2232.OLB
C:\Program Files\Microsoft Office\Office\MSWORD8.OLB
</pre>

<p>When the compiler detects these <B>#import</B> statements, it generates header files based on the type library information. These header files can be seen in the build directory after compilation. Each file imported causes two header files to be generated, a <B>.tlh</B> and a <B>.tli</B>. The <B>.tli</B> header file contains wrapper definitions for various interfaces found in the type library. The <B>.tlh</B> file contains object and class definitions as well as any required enumerations <a href="#2">[2]</a>.</p>
<p>I found that there are approximately 77,000 lines of code included in these generated header files. Needless to say, you could probably make a career of learning all the aspects of Word's COM interfaces. Luckily, I was able to pick out the handful of items required to complete my document generator.</p>
<p>The <B>no_namespace</B> attribute is used to disable the namespace definition typically found in the type library. Removing this attribute will result in a failed compilation. The <B>rename</B> attribute is used to rename identifiers defined in the type library to avoid conflicts. Finally, the application code uses the Word namespace to make use of definitions from <B>MSWORD8.OLB</B>.</p>
<p>You can browse the header files to get a feel for what definitions are provided. For the discussion of my simple report generator I will focus on the following:</p>

<p><I>Objects</I><br>
<LI><B>Document</B> &#151; represents a Word document object</LI></p>

<p><I>Interfaces</I><br>
<LI><B>_Document</B> &#151; basic document interface</LI>
<LI><B>Range</B> &#151; represents a range of contiguous text in the document</LI>
<LI><B>_ParagraphFormat</B> &#151; similar to <B>Range</B></LI>
<LI><B>_Font</B> &#151; represents a text font</LI></p>

<p><I>Pointers to Interfaces</I><br>
<LI><B>RangePtr</B> &#151; pointer to a <B>Range</B> interface</LI>
<LI><B>_ParagraphFormatPtr</B> &#151; pointer to a <B>_ParagraphFormat</B> interface</LI>
<LI><B>_FontPtr</B> &#151; pointer to a <B>_Font</B> interface</LI></p>

<p>With the exception of <B>_Document</B>, all the listed interfaces are accessed via pointers to interfaces (e.g. <B>RangePtr</B> to use the <B>Range</B> interface). These pointers are defined in the type libraries using the <B>_COM_SMARTPTR_TYPEDEF</B> macro (defined in <B>comdef.h</B>). This macro defines the pointer type using a template called <B>com_ptr_t</B>. This so-called smart pointer provides simple access to interfaces by handling some of the more tedious details (such as calling COM's obligatory <B>AddRef</B>, <B>Release</B>, and <B>QueryInterface</B>).</p>
<p>Besides a no-argument constructor, <B>CWordStream</B> offers a small set of services for adding text, and setting text attributes such as font size, bold, italics, underline, and justification (see <A HREF="list1.htm">Listing 1</A>). Prior to adding text to the document, simply set the attributes using the constant values defined in the header file.</p>

<h4><FONT COLOR="#000080">Example</FONT></H4>

<p>The following example generates a Word document, <B>EXAMPLE.DOC</B>, containing two lines of text. The first line uses single underlining, is bold, centered, and does not use italics. The second line is left-justified, not bold, not italic, and not underlined.</p>

<pre>
CWordStream w;
w.SetUnderline(WSTR_UL_SINGLE);
w.SetBold(TRUE);
w.SetJustification(WSTR_JU_CENTER);
w.SetItalic(FALSE);
w.AddText(
 "Single underline, bold, centered, no italics\n\n");
     
w.SetUnderline( WSTR_UL_NONE);
w.SetBold(FALSE);
w.SetJustification(WSTR_JU_LEFT);
w.AddText("Left justified, not bold, not italic\n");
     
w.SaveAs("c:\\example.doc");
</pre>

<h4><FONT COLOR="#000080">Implementation Details</FONT></H4>

<p>The <B>CWordStream</B> constructor creates a <B>Document</B> object but saves a COM <B>IUnknown</B> interface for future reference. When needed, the <B>IUnknown</B> interface is used to fetch a <B>_Document</B> interface (in function <B>AddText</B>, for example). An alternative would be to store the <B>_Document</B> interface rather than <B>IUnknown</B>. I opted for the former so that the code using <B>CWordStream</B> does not need to know the definition for <B>_Document</B>.</p>
<p>The class members that set text attributes (e.g. <B>SetUnderLine</B>) simply set member variables that are used in subsequent calls to <B>AddText</B>.</p>
<p><B>CWordStream</B> uses the <B>Range</B> interface to set the italic, bold, and underline attributes of text added using <B>AddText</B>. Two <B>Range</B> interfaces are used in the <B>AddText</B> routine. Here are the basic steps employed by the routine:</p>
<p>1.  Get a <B>_Document</B> interface.</p>
<p>2.  Get a <B>Range</B> interface representing the entire document (all text inserted so far).<p>
<p>3.  Insert the text after the range.</p>
<p>4.  Get a <B>Range</B> interface representing the text just inserted.</p>
<p>5.  Set <B>Range</B> attributes (italics, boldness, underlining, font size).</p>
<p>6.  Set text alignment using <B>_ParagraphFormat</B>.</p>
<p>The only tricky part here is obtaining the <B>Range</B> interface representing the text that has just been inserted. The <B>_Document</B> interface provides a <B>Range</B> function that enables you to specify a beginning and ending offset. <B>CWordStream</B> must keep track of these offsets in order to get the necessary <B>Range</B>.</p>
<p>Notice that in function <B>CWordStream::PrintOut</B> a single parameter is passed to <B>_Document::PrintOut</B>. If you refer to the generated header files, you will see many more parameters available. In fact, these parameters appear to embody most (if not all) of the options available in Word's Print dialog.</p>
<p>If you have the Word application open while you execute the example code, you can actually see the documents created and the text being inserted. While this is not necessarily desirable behavior, there may be ways to circumvent it somewhere hidden in the type libraries.</p>

<h4><FONT COLOR="#000080">Conclusion</FONT></H4>

<p>Sifting through the type library information can be quite tedious, but the simple capabilities of <B>CWordStream</B> serve as a tribute to COM and Microsoft's dedication to supporting it through its applications.</p>
<p>I can only imagine what gems of capabilities are hidden away in the <B>.tlh</B> files. What about the other Office elements &#151; Excel, PowerPoint, and Access? This programming approach, while not lacking in complexity, offers a great deal of opportunity for developers to enhance their products.</p>

<h4><FONT COLOR="#000080">Notes and References</FONT></H4>
<p><a name="1"></a>[1]  Gregory Brill. "A Gentle Introduction to COM," <I>CUJ</I>, January 1998.</p>
<p><a name="2"></a>[2]  It is worth noting that when these header files are compiled, several warnings are issued by my compiler (MSVC++ 5.0 under NT and 95). The code works despite these warnings, so I did not endeavor to eliminate them &#151; probably a fruitless task, since the headers are generated from the type libraries.</p>

<p><i>Jim Langseth graduated from NDSU in 1988 with a BSCS. He currently is employed through his free-lance consulting business in Minneapolis and specializes in C++ development. Interests include language parsing, software test, and tool development.</i></p>

<h4><a href="../../../source/1999/jan99/langsret.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY>
</HTML>
