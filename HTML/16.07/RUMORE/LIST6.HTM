<HTML><HEAD>
<TITLE>July 1998/A Binary Search Tree with Iterators/Listing 6</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 6: Code for inorder iterator</A></h4>
<pre>// inorder iterator constructors and destructor
template &lt;class DataType&gt;
BinaryTreeIterator_InOrder&lt;DataType&gt;::BinaryTreeIterator_InOrder(
    const BinaryTreeIterator_InOrder&lt;DataType&gt; &amp;iter): 
    BinaryTreeIterator_PreOrder&lt;DataType&gt;(iter)
{
}

template &lt;class DataType&gt;
BinaryTreeIterator_InOrder&lt;DataType&gt;::BinaryTreeIterator_InOrder(
    const BinaryTree&lt;DataType&gt; &amp;bt): 
    BinaryTreeIterator_PreOrder&lt;DataType&gt;(bt)
{
    reset();
}

template &lt;class DataType&gt;
BinaryTreeIterator_InOrder&lt;DataType&gt;::~BinaryTreeIterator_InOrder()
{
}

// reset iterator to beginning
template &lt;class DataType&gt;
void BinaryTreeIterator_InOrder&lt;DataType&gt;::reset()
{
    stack.clear();
    for (BinaryTreeNode&lt;DataType&gt; *pn = tree-&gt;root; 
        pn != NULL; pn = pn-&gt;left)
    {
        stack.push(pn);
    }
    return;
}

// increment to next data item in list
template &lt;class DataType&gt;
int BinaryTreeIterator_InOrder&lt;DataType&gt;::operator++(int)
{
    // is iterator done
    if (stack.isEmpty()) return(NOTOK);

    // get next node from stack
    BinaryTreeNode&lt;DataType&gt; *btn;
    MustBeTrue(stack.pop(btn) == OK);

    // insert right node left links into stack
    if (btn-&gt;right != NULL)
    {
        for (BinaryTreeNode&lt;DataType&gt; *pn = btn-&gt;right;
            pn != NULL; pn = pn-&gt;left)
        {
            stack.push(pn);
        }
    }
    return(OK);
}
/* End of File */</pre>
</BODY>
</HTML>
