<HTML><HEAD>
<TITLE>July 1998/A Binary Search Tree with Iterators/Sidebar</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h3 align=center><FONT FACE="Garamond" COLOR="#000080">Supporting Inserts and Deletes</FONT></h3>
<HR>
<BLOCKQUOTE>
<p>The binary tree as implemented already allows inserting and deleting elements, but it doesn't promise that iterators will remain valid after an insertion or deletion. So the simplest way to use insertion and deletion is to avoid insert/delete while an iterator is defined for the tree. As the example code (<A HREF="list8.htm">Listing 8</A>) shows, you should always call <B>reset</B> on any existing iterator after insertion or deletion; this reinitializes the iterator to a valid state.</p>

<p>The second simplest method to support inserts/deletes with iterators is to block inserts and deletes whenever at least one iterator exists for the binary tree. To support this method, my binary tree class has an additional data member, a simple counter. This counter is incremented whenever an iterator for that binary tree is created, and decremented when an iterator is deleted. Both insert and delete operations check for a counter value of zero before they modify the binary tree. The insert code can throw an exception (it is declared <B>void</B>); the delete can also throw an exception or return failure whenever the operation is blocked.</p>

<p>My first attempt to support inserts and deletes used a strategy similar to the one in reference <a href="rumore.htm#4">[4]</a>. <A HREF="list9.htm">Listing 9</A> shows the changes made to the binary tree insert, remove, and clear functions. When an iterator is created, it registers itself with the underlying data structure, a binary tree in this case. Then every time an insert or delete is executed, the internal list of iterators (stored in the binary tree) is scanned and each iterator is updated to reflect the insert or delete. The update to an iterator consists of saving the current location (node) for the iterator, then resetting the iterator and stepping through the binary tree with the increment operator until the old location is found. If the old location was deleted, then the next node in the traversal is used.</p>

<p>At first this technique appears to work and it is fairly simple to implement. However, I ran into a problematic test case for postorder traversal. Consider the following binary tree before and after the letter <B>s</B> is deleted.

<pre>
    s                      i
   / \                    / \
  f   t                  f   t
 / \   \                / \   \
d   h   w              d   h   w
   / \   \                /     \
  g   i   z              g       z

before delete      after delete of s
</pre>

<p>The post order traversal of the tree before deleting the letter <B>s</B> is given by: <B>d g i h f z w t s</B>. After <B>s</B> is deleted the postorder traversal is: : d g h f z w t i. Now suppose a post-order iterator exists and it is currently pointing to the letter <B>h</B> in the tree before the delete. Next we delete the letter <B>s</B>. The iterator is modified to reflect the deletion of the letter <B>s</B> and it is reset to point to the letter <B>h</B> as before. Now if traversal is continued the letter <B>i</B> will be traversed twice! In the original tree, the letter <B>i</B> was visited just before the letter <B>h</B>. In the new tree, <B>i</B> is the last letter to be visited. If behavior such as this poses a problem, you should probably reject this strategy.</p>

<p>The final implementation I tried (not listed or provided on the ftp site) involves using reference-counted binary tree nodes. The implementation stores the complete traversal path in a linked list by storing pointers to the binary tree nodes in the order that they must be traversed. This circumvents the problem of inserts and deletes since once the path is generated and stored in a link list, it is never affected by inserts or deletes in the binary tree. The reference counted node prevents the data from being deleted until all references to it are deleted, that is, until the last iterator referring to it is deleted.</p>
</BLOCKQUOTE>
</BODY>
</HTML>
