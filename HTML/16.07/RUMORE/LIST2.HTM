<HTML><HEAD>
<TITLE>July 1998/A Binary Search Tree with Iterators/Listing 2</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2: Abstract tree class header</A></H4>
<pre>
#ifndef __ABSTRACT_TREE_H
#define __ABSTRACT_TREE_H
// abstract tree class definition

// required headers
#include &lt;stdlib.h&gt;
#include &lt;iostream.h&gt;

// local headers
#include "returns.h"
#include "debug.h"

// forward definitions
template &lt;class DataType&gt; class AbstractTree;

template &lt;class DataType&gt; 
ostream &amp;
operator&lt;&lt;(ostream &amp;, const AbstractTree&lt;DataType&gt; &amp;);

// abstract tree class
template &lt;class DataType&gt; class AbstractTree {
public:
    // destructor
    virtual ~AbstractTree() { }

    // binary tree operations
    virtual void insert(const DataType &amp;) = 0;
    virtual int remove(DataType &amp;) = 0;
    virtual int retrieve(DataType &amp;) const = 0;
    virtual int isInTree(const DataType &amp;) const = 0;
    virtual int isEmpty() const = 0;
    virtual void clear() = 0;

    // tree traversal functions
    virtual int preOrder(int (*)(DataType &amp;)) = 0;
    virtual int inOrder(int (*)(DataType &amp;)) = 0;
    virtual int postOrder(int (*)(DataType &amp;)) = 0;
    virtual int levelOrder(int (*)(DataType &amp;)) = 0;

    // output data
    virtual ostream &amp;dump(ostream &amp;) const = 0;
    friend ostream &amp;operator&lt;&lt;(ostream &amp;os,
        const AbstractTree&lt;DataType&gt; &amp;bt) {
        bt.dump(os);
        return(os);
    }
};

#endif
/* End of File */</pre>
</BODY>
</HTML>
