<HTML>
     
     <HEAD>
<TITLE>July 1998/A Binary Search Tree with Iterators</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjul.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">A Binary Search Tree with Iterators</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Mike Rumore</FONT></H3>

<BLOCKQUOTE>
<p>If you need to access the elements in a tree structure in more than one order, you need a tree that defines more than one kind of iterator.</p></BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<h4><FONT COLOR="#000080">Introduction</FONT></H4>

<p>Binary search trees are among some of the most important data structures used in computing. They form the basis for many data structures requiring a hierarchical ordered structure. This article describes an implementation of binary search trees I wrote about two years ago. The algorithms for creating and maintaining binary trees are described in many data structure books [<a href="#1">1</a>, <a href="#2">2</a>, <a href="#3">3</a>]. In addition, these sources describe algorithms for visiting and processing the data stored in a binary tree.</p>

<p>Some of the most important tree traversal algorithms are preorder (also known as depth-first), postorder, inorder, and level-order (also known as breadth-first). This article will primarily describe the implementation of these traversal algorithms using iterators [<a href="#4">4</a>, <a href="#5">5</a>].</p>

<h4><FONT COLOR="#000080">Binary Tree Data Model</FONT></H4>

<p>A binary search tree is a recursive data structure, each node of which contains a data item and two pointers. One pointer, called the left pointer, points to another node containing data that is "less than" the data in the current node. Similarly, the second pointer is called the right pointer, and it points to a node that is "greater than" the current node. When the nodes contain non-numeric data, the criterion for what is less-than or greater-than is typically determined by a programmer-provided function.</p>

<p>These left and right nodes, in turn, have pointers pointing to nodes that satisfy the same conditions as before: left-node data is less than current-node data, and right-node data is greater than the current-node data. This structure allows for efficient key-value searches.</p>

<p>Like other well-known data structures, the binary search type includes a small set of standard operations which help to define the data type. These operations include inserting a new data element, deleting an element, retrieving the data associated with a given key, checking whether the tree is empty, and deleting all data in the tree. These operations also include the various traversal methods listed above. They are defined recursively using the pseudo-code in <A HREF="list1.htm">Listing 1</A>.</p>

<p>Since these algorithms use recursion, they must use a stack to keep track of nodes visited. On the other hand, level-order traversal requires a queue, not a stack. In a level-order traversal the order that nodes are visited depends on their distance from the root node. That is, the root is visited first, then both left and right nodes of the root. Then the left and right nodes belonging to the root's left and right nodes are visited, and so on. All nodes at the same level are visited before visiting nodes on the next level.</p>

<h4><FONT COLOR="#000080">Implementation Approach</FONT></H4>

<p>The implementation presented here uses a different approach than that used in the Standard Template Library (STL). I use inheritance and virtual functions to define my binary search tree interface, and templates to allow the storing of different data types. STL, by constrast, standardizes the interface to the data structures. It makes very little, if any, use of virtual functions and inheritance (see reference <a href="#5">[5]</a>).</p>

<p>The STL defines const and non-const iterators. Const iterators do not allow the data in the underlying data structure to be modified via the iterator; they return data values by value (copies of the data). Non-const iterators return data by reference and thus allow modification directly to the data. This implementation supports const iterators since data is returned by value. Also, the STL allows deletes on the underlying data structure. Deleting items from a container can leave an iterator in an invalid state ([<a href="#6">6</a>, p. 133]). In the sidebar I discuss different approaches to solving this problem.</p>

<p>The major classes in this implementation are as follows:</p>

<UL><LI><B>AbstractTree</B> &#151; defines the interface to the binary tree class. The binary tree class is derived from this class (<A HREF="list2.htm">Listing 2</A>).</LI>
    <LI><B>AbstractIterator</B> &#151; defines the interface for all iterator classes. All iterators are derived from this class (<A HREF="list3.htm">Listing 3</A>).</LI>
    <LI><B>BinaryTree</B> &#151; contains all the algorithms for inserting, deleting, and retrieving data from a binary tree. This class (<A HREF="list4.htm">Listing 4</A>) is derived from <B>AbstractTree</B>.</LI>
    <LI><B>BinaryTreeNode</B> &#151; defines the actual structure used to construct the binary tree. It declares <B>BinaryTree</B> and all iterator classes as friend classes. Its internals are all declared <B>protected</B> (see <A HREF="list4.htm">Listing 4</A>).</LI>
    <LI><B>BinaryTreeIterator_PreOrder</B> &#151; derived from <B>AbstractIterator</B>, it defines the functions <B>operator++(int)</B>, <B>reset()</B>, etc. It is initialized from another preorder iterator or from a binary tree (see <A HREF="list4.htm">Listing 4</A>). This iterator uses a stack to track the nodes that still need visiting.</LI>
    <LI><B>BinaryTreeIterator_PostOrder</B> and <B>BinaryTreeIterator_InOrder</B> &#151; both are derived from class <B>BinaryTreeIterator_PreOrder</B>. Each class overrides the <B>operator++(int)</B> and <B>reset()</B> functions. Each inherits <B>done()</B>, <B>operator()()</B>, and <B>isEmpty()</B> from the base class (see <A HREF="list4.htm">Listing 4</A>).</LI>
    <LI><B>BinaryTreeIterator_LevelOrder</B> &#151; derived from <B>AbstractIterator</B>, it defines the functions <B>operator++(int)</B>, <B>reset()</B>, etc. It is initialized from another level-order iterator or from a binary tree (see <A HREF="list4.htm">Listing 4</A>). This iterator uses a queue to track which nodes still need visiting.</LI>
    <LI>The iterators require two other classes for their implementation: <B>Queue_List</B>, a queue, and <B>Stack_List</B>, a stack. Both are implemented using a doubly-linked list.</LI></UL>

<p>The code for the creating and maintaining a binary tree is available from the <I>CUJ</I> ftp site (see p. 3 for downloading instructions). See reference <a href="#1">[1]</a> for all the details on inserting and deleting data from a binary tree.</p>

<h4><FONT COLOR="#000080">Iterator Implementation</FONT></H4>

<p>Iterators are basically handler classes for collection classes. They provide a method for accessing the contents of a collection without exposing the collection's internal implementation. Also, iterators allow different access methods to be defined for a collection class. More than one iterator can be created at any one time, which allows for multiple and simultaneous traversals of a collection.</p>

<p>There are two basic questions to be answered when designing an iterator. The first question is whether elements in the collection can be added or deleted while an iterator exists. The second question is whether the data in the collection can be modified directly via the iterator. A simple way to restate the second question is: is an object accessed via an iterator returned by value (no direct modification) or by reference (direct modification possible)?</p>

<p>The iterators described in this article are read-only; they return the data by value. As shown in the example, it is possible to reset an iterator and start from the beginning again if the binary tree was modified (via inserts or deletes). The full source code contains sections (not shown here) that compile if the conditional <B>#define MUTABLE_ITERATOR</B> is defined. If this conditional is defined, the iterators track whether or not the underlying binary tree was modified. It is then possible to call the conditionally defined function <B>resetByValue</B> to reposition the iterator at the node it referenced prior to modification.</p>

<p><A HREF="list5.htm">Listing 5</A> presents the code for the preorder iterator. There are two constructors and a destructor. The first constructor is the copy constructor. The second one uses a <B>BinaryTree &amp;</B> as an initializer. The default constructor and the assignment operator are declared private and are not provided. <B>Reset</B> reinitializes the iterator to the beginning. <B>isDone</B> returns <B>true</B> if the iterator has completely traversed the tree, or <B>false</B> if not. <B>operator++(int)</B> advances the iterator to the next node in the binary tree, and <B>operator()</B> returns the node's value.</p>

<p><A HREF="list6.htm">Listing 6</A> presents the code for the inorder iterator. New constructors and a destructor are provided. The inorder iterator overrides the <B>reset</B> function and <B>operator++(int)</B> from the base preorder class. The postorder iterator (not listed) is implemented similarly.</p>

<p>Finally, <A HREF="list7.htm">Listing 7</A> presents the code for the level-order iterator. This iterator is not based on the preorder iterator since it requires a queue, not a stack. It provides the same functionality (<B>reset</B>, <B>operator++(int)</B>, etc.) as the other iterators.</p>

<h4><FONT COLOR="#000080">Iterator Performance</FONT></H4>

<p>STL iterators are required to allow access to a data item in O(constant) time (amortized), with N accesses for N data items <a href="#6">[6]</a>. The iterators described here provide the same performance. For example, access via the preorder iterator (<A HREF="list5.htm">Listing 5</A>) involves one call to the push, pop, and top stack operations once for each node in the binary tree. Since the push, pop, and top operations are O(constant) in time, access time is also O(constant).</LI>

<p>The inorder iterator has O(constant) performance, if the the total amount of push, pop, and top are amortized over all data accesses. The <B>for</B>-loop in the preorder <B>operator++(int)</B> can execute more than once on a given call, but in the long run, each node is still pushed, popped, and topped only once. The net result is an average of O(constant) for each access (amortized). The level-order traversal iterator also has O(constant) performance. The postorder iterator is the least efficient, but it still maintains an amortized O(constant) performance.</p>

<h4><FONT COLOR="#000080">An Example</FONT></H4>

<p><A HREF="list8.htm">Listing 8</A> shows an example of a binary tree used as a dictionary. The code inserts a few strings into the dictionary, and then uses an inorder iterator to print the strings alphabetically. Then, several strings are deleted, some new ones are inserted, and the inorder iterator is reset to start a new traversal of the binary tree. Again the strings are listed in alphabetical order.</p>

<p>The example code calls the increment <B>operator++(int)</B> every time it advances the iterator to the next element in the binary tree. It calls <B>IsDone</B> to determine whether the iterator has finished traversing the binary tree. At each node, the program calls <B>operator()</B> to get the current value through the iterator. Note the call to <B>reset</B> in the head of the second <B>for</B>-loop. This call reinitializes the iterator since nodes have been deleted and inserted, rendering it invalid.</p>

<h4><FONT COLOR="#000080">Changing the Implementation</FONT></H4>

<p>It's relatively easy to change the current implementation to support non-const iterators. The recommended changes are shown below. Supporting inserts and deletes is also possible but more difficult. If you're interested, see the <A HREF="sidebar1.htm">sidebar</A>.</p>

<p>To support non-const iterators:</p>

<p>1)   Referring to <A HREF="list3.htm">Listing 3</A>, change the return type of <B>operator()</B> from <B>DataType</B> (return by value) to <B>DataType &amp;</B> (return by reference).</p>

<p>2)   Referring to <A HREF="list4.htm">Listing 4</A>, note that all iterators contain a constructor of the form <B>BinaryTreeIterator_XXOrder(const BinaryTree&lt;DataType&gt; &amp;)</B>, where <B>XX</B> is <B>Pre</B>, <B>In</B>, <B>Post</B>, or <B>Level</B>. Remove the <B>const</B> modifier from the formal parameter. Next, change all return types of <B>operator()</B> from <B>DataType</B> to <B>DataType &amp;</B>. Last, in the constructors <B>BinaryTreeIterator_PreOrder</B> and <B>BinaryTreeIterator_LevelOrder</B>, change the data pointer from <B>const BinaryTree&lt;DataType&gt; *</B> to just <B>BinaryTree&lt;DataType&gt; *</B>.</p>

<h4><FONT COLOR="#000080">Summary</FONT></H4>

<p>In this article I've presented an implementation of a binary search tree that uses templates to support node data of any type. I've implemented iterators that perform standard tree traversal operations (namely preorder, postorder, in-order, and level-order). These iterators are implemented as a class hierarchy that uses inheritance and virtual functions. In this respect my implementation differs considerably from STL's way of doing things. However, like STL iterators, my iterators provide access in O(constant) time (amortized).</p>

<p>Since I wrote this binary tree class, I have added a height-balanced binary tree class to the library for those cases where a large and degenerate tree would be very expensive. I have found that this class is very useful as a dictionary when parsing large log files.</p>

<h4><FONT COLOR="#000080">References</FONT></H4>

<p><a name="1"></a>[1]  Alfred V. Aho, John E. Hopcroft, and Jeffery Ullman. <I>Data Structures and Algorithms</I> (Addison-Wesley, 1983).</p>

<p><a name="2"></a>[2]  Timothy A. Budd. <I>Classic Data Structures in C++</I> (Addison-Wesley, 1994).</p>

<p><a name="3"></a>[3]  Mark Allen Weiss. <I>Data Structures and Algorithm Analysis</I> (Benjamin/<br>Cummings, 1994).</p>

<p><a name="4"></a>[4]  Robert B. Murray. <I>C++ Strategies and Tactics</I> (Addison-Wesley, 1993).</p>

<p><a name="5"></a>[5]  Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. <I>Design Patterns: Elements of Reusable Object-Oriented Software</I> (Addison-Wesley, 1995).</p>

<p><a name="6"></a>[6]  David R. Musser and Atul Saini. <I>STL Tutorial and Reference Guide: C++ Programming with the Standard Template Library</I> (Addison-Wesley, 1996).</p>

<p><i>Mike Rumore has a Ph.D. in Nuclear Physics from the University of Colorado, Boulder. He has been working for Lucent Technologies (formerly AT&amp;T) Bell Labs for 11 years as a software engineer. He has been using C++ for over six years for tool generation. His current interests are data structures and numerical algorithms (linear inversion methods applied to radiation spectra).</i></p>

<h4><a href="../../../source/1998/jul98/rumore.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
