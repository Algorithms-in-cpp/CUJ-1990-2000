<HTML><HEAD>
<TITLE>July 1998/A Binary Search Tree with Iterators/Listing 7</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 7: Code for level-order iterator</A></h4>
<pre>
// levelorder iterator constructors and destructor
template &lt;class DataType&gt;
BinaryTreeIterator_LevelOrder&lt;DataType&gt;::
    BinaryTreeIterator_LevelOrder(
        const BinaryTreeIterator_LevelOrder&lt;DataType&gt; &amp;iter):
        tree(iter.tree), queue(iter.queue)
{
}

template &lt;class DataType&gt;
BinaryTreeIterator_LevelOrder&lt;DataType&gt;::
    BinaryTreeIterator_LevelOrder(
        const BinaryTree&lt;DataType&gt; &amp;bt): 
        tree(&amp;bt), queue()
{
    reset();
}

template &lt;class DataType&gt;
BinaryTreeIterator_LevelOrder&lt;DataType&gt;::
    ~BinaryTreeIterator_LevelOrder()
{
}

// reset iterator to beginning
template &lt;class DataType&gt;
void BinaryTreeIterator_LevelOrder&lt;DataType&gt;::reset()
{
    queue.clear();
    queue.enqueue(tree-&gt;root);
    return;
}

// is list empty
template &lt;class DataType&gt;
int BinaryTreeIterator_LevelOrder&lt;DataType&gt;::done() const
{
    return(queue.isEmpty());
}

// return current data
template &lt;class DataType&gt;
DataType BinaryTreeIterator_LevelOrder&lt;DataType&gt;::operator()()
{
    BinaryTreeNode&lt;DataType&gt; *btn;
    MustBeTrue(queue.front(btn) == OK);
    return(btn-&gt;data);
}

// increment to next data item in list
template &lt;class DataType&gt;
BinaryTreeIterator_LevelOrder&lt;DataType&gt;::operator++(int)
{
    // is iterator done
    if (queue.isEmpty()) return(NOTOK);

    // get next node from queue
    BinaryTreeNode&lt;DataType&gt; *btn;
    MustBeTrue(queue.dequeue(btn) == OK);

    // queue up left and right nodes, if any.
    if (btn-&gt;left != NULL)
        queue.enqueue(btn-&gt;left);
    if (btn-&gt;right != NULL)
        queue.enqueue(btn-&gt;right);
    return(OK);
}
/* End of File */</pre>
</BODY>
</HTML>
