<HTML><HEAD>
<TITLE>July 1998/A Binary Search Tree with Iterators/Listing 9</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 9:	Code for binary tree insert and remove</A></h4>
<pre>
// binary tree operations
template &lt;class DataType&gt;
void
BinaryTree&lt;DataType&gt;::insert(const DataType &amp;data)
{
    // insert new data
    insert(root, data);

#ifdef MUTABLE_ITERATOR
    // check if any iterators are traversing this tree
    if ( ! iterList.isEmpty())
    {
        // now update any iterators
        ListIterator&lt;AbstractIterator&lt;DataType&gt; * &gt; *piter = 
        new ListIterator&lt;AbstractIterator&lt;DataType&gt; * &gt;(iterList);
        MustBeTrue(piter != NULL);
        for ( ; ! (*piter).done(); (*piter)++)
        {
            // save current iterator
            AbstractIterator&lt;DataType&gt; *paiter = (*piter)();

            // get current value
            DataType current = (*paiter)();

            // update iterator
            (*paiter).resetByValue(current);
        }
        delete piter;
    }
#endif
    return;
}

template &lt;class DataType&gt;
int
BinaryTree&lt;DataType&gt;::remove(DataType &amp;data)
{
#ifdef MUTABLE_ITERATOR
    // check if any iterators are traversing this tree
    int status;
    if (iterList.isEmpty())
        return(remove(root, data));
    else
    {
        ListIterator&lt;AbstractIterator&lt;DataType&gt; * &gt; *piter = 
        new ListIterator&lt;AbstractIterator&lt;DataType&gt; * &gt;(iterList);
        for ( ; ! (*piter).done(); (*piter)++)
        {
            // save current iterator
            AbstractIterator&lt;DataType&gt; *paiter = (*piter)();

            // check of iterator is done
            if ((*paiter).done()) continue;

            // check if iterator is pointing to deleted node
            if (data == (*paiter)()) (*paiter)++;
        }

        // delete element
        int status = remove(root, data);
        if (status != OK) return(status);

        // reset all iterators
        for ((*piter).reset(); ! (*piter).done(); (*piter)++)
        {
            // save current iterator
            AbstractIterator&lt;DataType&gt; *paiter = (*piter)();

            // get current value
            DataType current = (*paiter)();

            // check if iterator is done
            if ( ! (*paiter).done())
                (*paiter).resetByValue(current);
        }
        delete piter;
        return(OK);
    }
#else
    return(remove(root, data));
#endif
}

template &lt;class DataType&gt;
void
BinaryTree&lt;DataType&gt;::clear()
{
    // clear binary tree
    clear(root);

#ifdef MUTABLE_ITERATOR
    // reset all iterators
    ListIterator&lt;AbstractIterator&lt;DataType&gt; * &gt; *piter = 
    new ListIterator&lt;AbstractIterator&lt;DataType&gt; * &gt;(iterList);
    for ( ; ! (*piter).done(); (*piter)++)
    {
        // current iterator
        AbstractIterator&lt;DataType&gt; *paiter = (*piter)();

        // reset iterator
        (*paiter).reset();
    }
#endif
    return;
}

/* End of File */
</pre>
</BODY>
</HTML>
