<HTML><HEAD>
<TITLE>July 1998/A Binary Search Tree with Iterators/Listing 4</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 4: Binary tree header</A></h4>
<pre>
#ifndef __BINARY_TREE2_H
#define __BINARY_TREE2_H
// binary search tree class definition using recursion

// headers
#include "absTree.h"
#include "absIterator.h"
#include "queue_List.h"
#include "stack_List.h"

// forward declarations
template &lt;class DataType&gt; class BinaryTreeNode;
template &lt;class DataType&gt; class BinaryTree;
template &lt;class DataType&gt; class BinaryTreeIterator_PreOrder;
template &lt;class DataType&gt; class BinaryTreeIterator_InOrder;
template &lt;class DataType&gt; class BinaryTreeIterator_PostOrder;
template &lt;class DataType&gt; class BinaryTreeIterator_LevelOrder;

// tree node class
template &lt;class DataType&gt; class BinaryTreeNode
{
public:
    // output
    friend ostream &amp;operator&lt;&lt;(ostream &amp;os, 
        const BinaryTreeNode&lt;DataType&gt; &amp;btn) {
        os &lt;&lt; btn.data;
        return(os);
    };

protected:
    // friend classes 
    friend class BinaryTree&lt;DataType&gt;;
    friend class BinaryTreeIterator_PreOrder&lt;DataType&gt;;
    friend class BinaryTreeIterator_InOrder&lt;DataType&gt;;
    friend class BinaryTreeIterator_PostOrder&lt;DataType&gt;;
    friend class BinaryTreeIterator_LevelOrder&lt;DataType&gt;;

    // constructors and destructor
    BinaryTreeNode(const DataType &amp;);
    BinaryTreeNode(const BinaryTreeNode &amp;);
    ~BinaryTreeNode();

    // assignment
    BinaryTreeNode &amp;operator=(const BinaryTreeNode &amp;);

    // internal data
    DataType data;
    BinaryTreeNode&lt;DataType&gt; *left;
    BinaryTreeNode&lt;DataType&gt; *right;
};

// binary search tree class
template &lt;class DataType&gt; class BinaryTree:
    public AbstractTree&lt;DataType&gt;
{
public:
    // friend classes 
    friend class BinaryTreeIterator_PreOrder&lt;DataType&gt;;
    friend class BinaryTreeIterator_InOrder&lt;DataType&gt;;
    friend class BinaryTreeIterator_PostOrder&lt;DataType&gt;;
    friend class BinaryTreeIterator_LevelOrder&lt;DataType&gt;;

    // constructors and destructor
    BinaryTree();
    BinaryTree(const BinaryTree &amp;);
    ~BinaryTree();

    // assignment
    BinaryTree &amp;operator=(const BinaryTree &amp;);

    // binary tree operations
    void insert(const DataType &amp;);
    int remove(DataType &amp;);
    int retrieve(DataType &amp;) const;
    int isInTree(const DataType &amp;) const;
    int isEmpty() const;
    void clear();
    .
    .
    .

protected:
    // utility functions
    .
    .
    .

protected:
    // internal data
    BinaryTreeNode&lt;DataType&gt; *root;
};

// pre-order tree iterator
template &lt;class DataType&gt; class BinaryTreeIterator_PreOrder:
    public AbstractIterator&lt;DataType&gt;
{
public:
    // constructors and destructor
    BinaryTreeIterator_PreOrder(
        const BinaryTree&lt;DataType&gt; &amp;);
    BinaryTreeIterator_PreOrder(
        const BinaryTreeIterator_PreOrder&lt;DataType&gt; &amp;);
    ~BinaryTreeIterator_PreOrder();

    // reset interator to start
    void reset();

    // check if at end of list
    int done() const;

    // return data 
    DataType operator()();

    // advance iterator to next link
    int operator++(int);

private:
    // not allowed
    BinaryTreeIterator_PreOrder();
    BinaryTreeIterator_PreOrder &amp;operator=(const 
        BinaryTreeIterator_PreOrder &amp;);

protected:
    // internal data
    const BinaryTree&lt;DataType&gt; *tree;
    Stack_List&lt;BinaryTreeNode&lt;DataType&gt; * &gt; stack;
};

// in-order tree iterator
template &lt;class DataType&gt; class BinaryTreeIterator_InOrder:
    public BinaryTreeIterator_PreOrder&lt;DataType&gt;
{
public:
    // constructors and destructor
    BinaryTreeIterator_InOrder(
        const BinaryTree&lt;DataType&gt; &amp;);
    BinaryTreeIterator_InOrder(
        const BinaryTreeIterator_InOrder&lt;DataType&gt; &amp;);
    ~BinaryTreeIterator_InOrder();

    // reset interator to start
    void reset();

    // advance iterator to next link
    int operator++(int);

private:
    // not allowed
    BinaryTreeIterator_InOrder();
    BinaryTreeIterator_InOrder &amp;operator=(const 
        BinaryTreeIterator_InOrder &amp;);
};

// post-order tree iterator
template &lt;class DataType&gt; class BinaryTreeIterator_PostOrder:
    public BinaryTreeIterator_PreOrder&lt;DataType&gt;
{
public:
    // constructors and destructor
    BinaryTreeIterator_PostOrder(
        const BinaryTree&lt;DataType&gt; &amp;);
    BinaryTreeIterator_PostOrder(
        const BinaryTreeIterator_PostOrder&lt;DataType&gt; &amp;);
    ~BinaryTreeIterator_PostOrder();

    // reset interator to start
    void reset();

    // advance iterator to next link
    int operator++(int);

private:
    // not allowed
    BinaryTreeIterator_PostOrder();
    BinaryTreeIterator_PostOrder &amp;operator=(const 
        BinaryTreeIterator_PostOrder &amp;);

protected:
    // internal data
    Stack_List&lt;int&gt; vstack;
};

// level-order tree iterator
template &lt;class DataType&gt; class BinaryTreeIterator_LevelOrder:
    public AbstractIterator&lt;DataType&gt;
{
public:
    // constructors and destructor
    BinaryTreeIterator_LevelOrder(
        const BinaryTree&lt;DataType&gt; &amp;);
    BinaryTreeIterator_LevelOrder(
        const BinaryTreeIterator_LevelOrder&lt;DataType&gt; &amp;);
    ~BinaryTreeIterator_LevelOrder();

    // reset interator to start
    void reset();

    // check if at end of list
    int done() const;

    // return data 
    DataType operator()();

    // advance iterator to next link
    int operator++(int);

private:
    // not allowed
    BinaryTreeIterator_LevelOrder();
    BinaryTreeIterator_LevelOrder &amp;operator=(const 
        BinaryTreeIterator_LevelOrder &amp;);

protected:
    // internal data
    const BinaryTree&lt;DataType&gt; *tree;
    Queue_List&lt;BinaryTreeNode&lt;DataType&gt; * &gt; queue;
};

#endif
/* End of File */</pre>
</BODY>
</HTML>
