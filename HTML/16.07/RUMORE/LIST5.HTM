<HTML><HEAD>
<TITLE>July 1998/A Binary Search Tree with Iterators/Listing 5</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 5: Code for preorder iterator</A></h4>
<pre>
// preorder iterator constructors and destructor
template &lt;class DataType&gt;
BinaryTreeIterator_PreOrder&lt;DataType&gt;::BinaryTreeIterator_PreOrder(
    const BinaryTreeIterator_PreOrder&lt;DataType&gt; &amp;iter): 
    tree(iter.tree), stack(iter.stack)
{
}

BinaryTreeIterator_PreOrder&lt;DataType&gt;::BinaryTreeIterator_PreOrder(
    const BinaryTree&lt;DataType&gt; &amp;bt): 
    tree(&amp;bt), stack()
{
    reset();
}


template &lt;class DataType&gt;
BinaryTreeIterator_PreOrder&lt;DataType&gt;::
    ~BinaryTreeIterator_PreOrder()
{
}

// reset iterator to beginning
template &lt;class DataType&gt;
void BinaryTreeIterator_PreOrder&lt;DataType&gt;::reset()
{
    stack.clear();
    stack.push(tree-&gt;root);
    return;
}

// is list empty
template &lt;class DataType&gt;
int BinaryTreeIterator_PreOrder&lt;DataType&gt;::done() const
{
    return(stack.isEmpty());
}

// return current data
template &lt;class DataType&gt;
DataType BinaryTreeIterator_PreOrder&lt;DataType&gt;::operator()()
{
    BinaryTreeNode&lt;DataType&gt; *btn;
    MustBeTrue(stack.top(btn) == OK);
    return(btn-&gt;data);
}

// increment to next data item in list
template &lt;class DataType&gt;
int BinaryTreeIterator_PreOrder&lt;DataType&gt;::operator++(int)
{
    // is iterator done
    if (stack.isEmpty()) return(NOTOK);

    // get next node from stack
    BinaryTreeNode&lt;DataType&gt; *btn;
    MustBeTrue(stack.pop(btn) == OK);

    // stack left and right nodes, if any.
    if (btn-&gt;right != NULL)
        stack.push(btn-&gt;right);
    if (btn-&gt;left != NULL)
        stack.push(btn-&gt;left);
    return(OK);
}
/* End of File */</pre>
</BODY>
</HTML>
