<HTML>
     
     <HEAD>
<TITLE>July 1998/Sending Email with an SMTP Class</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjul.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Sending Email with an SMTP Class</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Bob Fazio</FONT></H3>

<BLOCKQUOTE>
<p>Sometimes the easiest way to send a message is to drop it in the mail yourself.</p></BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>Simple Mail Transfer Protocol (SMTP) was developed to transfer email easily and reliably. It first appeared as Request For Comments (RFC) 821 in August 1982. Since then, SMTP has, with very few changes, become email's behind-the-scenes workhorse.</p>

<p>SMTP is independent of the particular transmission subsystem and requires only a reliable, ordered data-stream channel. On Unix systems, it has been implemented using the MAIL/SMTP service entry in the <B>/etc/services</B> file. The mail service is port 25 using the TCP protocol; hence, you can send email by simply connecting to a stream socket on a system that supports the SMTP Service. (I'll discuss sockets later.)</p>

<p>In this article I will show how easy it is to use the SMTP protocol to send email. I have implemented a class that inherits from Microsoft's MFC <B>Csocket</B> class to enable SMTP communication. I will also discuss reasons why you may or may not want to use SMTP as opposed to another mail API. (See the sidebar entitled <A HREF="sidebar1.htm">"Why Use SMTP?"</A>)</p>

<h4><FONT COLOR="#000080">How It Works</FONT></H4>

<p>SMTP's underlying transport uses sockets. Using a socket is analogous to using a telephone: pick up the phone, dial a number, and start talking when someone answers. There are two types of sockets, both of which are bi-directional: Stream (TCP) and Datagram (UDP). SMTP uses the TCP socket protocol. TCP sockets operate like a stream of bytes; they are guaranteed to be received exactly as they were sent. UDP sockets are the opposite of stream sockets; they are not guaranteed to be in order, unduplicated, or even to arrive at their destinations.</p>

<p>The sequence of events for sending an SMTP messages is:</p>

<p>1)  Say hello to the service.<br>
2)  Tell the service who is to receive the message.<br>
3)  Tell the service the message.<br>
4)  Say goodbye to the service.</p>

<p>You can communicate with the SMTP service using the commands <B>HELO</B>, <B>MAIL</B>, <B>RCPT</B>, <B>DATA</B>, and <B>QUIT</B>. In MFC, these commands are sent as character strings to <B>CSocket'</B>s<B> Send</B> method (inherited from <B>CAsynchSocket</B>). Service responses consist of a three-digit numeric response followed by a human-readable text message. If the numeric response is less than 400, the service encountered no problems with the request. If the numeric response is greater than 400, the service encountered problems that must be addressed.</p>

<p><A HREF="list1.htm">Listing 1</A> shows an example session with an SMTP service. Lines beginning with <B>"S:"</B> are sent messages; lines beginning with <B>"R:"</B> are returned messages. The communication begins by saying <B>HELO</B>. This tells the service that I will be using the SMTP language rather than the newer enhanced version of the mail service, ESMTP. (To activate ESMTP, you can say hello with <B>EHLO</B> instead of <B>HELO</B>.) The next step is to tell the service that I am about to construct a mail message using the <B>MAIL</B> command. See the SMTP Commands section for command syntax. After I've initiated the mail message, I list the recipients, state the message, then close the connection.</p>

<h4><FONT COLOR="#000080">SMTP Commands</FONT></H4>

<p>All commands are followed by replies from the server. Consult the Interpretation of Replies section below for a detailed explanation of reply structures.</p>

<p><B>HELO </B>usually appears on a line by itself. It identifies the sender to the server, and tells the SMTP service that the upcoming commands comply with SMTP, not ESMTP.</p>

<p><B>MAIL FROM: &lt;FROM_ADDRESS&gt;</B> initiates a new mail message, and can be used inside an existing message to signify an attachment.</p>

<p><B>RCPT TO: &lt;TO_ADDRESS&gt;</B> designates all message recipients, including CC: and BCC: addressees.</p>

<p><B>DATA</B> must be on a line by itself. After you send the <B>DATA</B> command, the SMTP service will send back a <B>"354 Enter mail, end with "." on a line by itself"</B> response. After reading this initial reply, you can start the actual message. However, you cannot read another response until you have finished the data section with a period on a line by itself. Within the <B>DATA</B> section, use the following subheadings to format the message: <B>FROM:, TO:</B>, <B>CC:</B>, <B>BCC:</B>, <B>DATE:</B>, and <B>SUBJECT:</B>.</p>

<p><B>QUIT</B> signifies that the server should send an <B>"250 OK"</B> response, then close the transmission channel. Your client program should not terminate the connection until it receives an <B>"250 OK" </B>response.</p>

<p><B>RSET</B> (Reset Session) resets the current message, and clears all sender, recipient, data, and state tables.</p>

<p>The <B>VRFY</B> string verifies an email address and returns the fully specified mailbox. This command does not add the recipients to the recipient list.</p>

<p>The <B>EXPN</B> string expands the address to a list of recipients. This command does not add the recipients to the recipient list.</p>

<p><B>HELP</B> explains command usage in a human-readable form.</p>

<p><B>NOOP</B> (No Operation) does nothing other than return an <B>"250 OK"</B> response.</p>

<h4><FONT COLOR="#000080">Interpretation of Replies</FONT></H4>

<p>After connecting to the SMTP service, expect a <B>"220"</B> reply from the service. After that, expect a reply for every command issued to the service. Each reply is in the format of three numeric digits succeeded by either a space or a hyphen, which is then followed by a human-readable text message. The three-digit code contains all the information necessary for coded response handling. As previously mentioned, a code that is less than 400 indicates success, and a code greater than 400 indicates a problem.</p>

<p>Replies are formatted as follows:</p>

<pre>XYZ&lt;space or hyphen&gt;Message</pre>

<p>signifies a good, bad or incomplete response, and can have the following values:</p>

<UL><LI><B>'1'</B>: positive preliminary reply (not used at all)</LI
    <LI><B>'2'</B>: positive completion reply</LI>
    <LI><B>'3'</B>: positive intermediate reply</LI>
    <LI><B>'4'</B>: transient negative completion reply</LI>
    <LI><B>'5'</B>: permanent negative completion reply</LI></UL>

<UL><LI><B>'Y'</B> signifies the reply category, and can have the following values:</LI>
    <LI><B>'0'</B>: syntax</LI>
    <LI><B>'1'</B>: information</LI>
    <LI><B>'2'</B>: connections</LI>
    <LI><B>'3'</B>: unspecified</LI>
    <LI><B>'4'</B>: unspecified</LI>
    <LI><B>'5'</B>: mail system</LI></UL>

<p><B>Z</B> - Signifies a reply subcategory.</p>

<p>A hyphen indicates that the response is part of a multi-line response. A space indicates that the response is the last line of the response. The text message is intended for informational purposes only, and can be ignored by your response handler.</p>

<h4><FONT COLOR="#000080">An SMTP Class</FONT></H4>

<p>I have covered everything necessary to send an email via Telnet. In this section, I will cover what you need to send an email via C++. My example uses Microsoft Visual C++ v5.0, but you can use any compiler and operating system that support socket communication. First, I customized an existing socket class for communication with the SMTP service. I simply derived a class, <B>CsendSMTP</B>, from the MFC's <B>CSocket</B> using a protected mask:</p>

<pre>
class CsendSMTP : protected CSocket
{
...
}
</pre>

<p><A HREF="list2.htm">Listing 2</A> contains the complete header file for <B>CsendSMTP</B>.</p>

<p>When deriving one class from another, you can choose from three possible protection masks: <B>public</B>, <B>protected</B>, and <B>private</B>. <B>public</B> allows any function (global or a member of another class) access to all of the base class's protected and public members, through use of the derived class. <B>private</B> allows the derived class to access public and protected members of its base class. No other class or function - not even a descendant of the derived class - can access members of the base class. <B>protected</B> is simliar to <B>private</B> except that descendants of the derived class have access to the base class's public and protected members.</p>

<p>For example:</p>

<pre>
class base1
{
  public:
    publicBase1();
  protected:
    protectBase1();
  private:
    privateBase1();
};

class thisClass : protected base1
{
};

class newClass : public thisClass
{
// access to public and protected
// members of base classes of thisClass
// the same as if thisClass inherited
// from base1 with a public protection
// mask
};

void Funct() //global function
{
// this function has no access to
// base classes of thisClass;
// It is as if thisClass inherited from
// base1 with a private protection mask

    thisClass MyClass; // MyClass has
                       // access
                       // to public and
                       // protected
                       // members of its
                       // base class
}
</pre>

<p>I chose this uncommon approach to protect base class functions from direct calls, while still allowing classes derived from the <B>CsendSMTP</B> class to access the base classes by using the <B>protected</B> mask. When outside functions call a member function of the <B>CsendSMTP</B> class, they probably don't need to access its base classes. However, derived classes might need to access the base classes directly.</p>

<p>Class <B>CsendSMTP</B> has three public functions:</p>

<pre>
BOOL OpenConnection (const char *szMailServerIPAddress);
const char * GetLastResponse();
BOOL SendLine (const char *szMessage);
</pre>

<p>OpenConnection</B> returns <B>true</B> when a connection to an SMTP service is successful with a given IP address. <B>GetLastResponse</B> simply returns the last retrieved message. <B>SendLine</B> sends the supplied message to the SMTP service, and retrieves the response from the service. If the response is positive it returns <B>true</B>, otherwise it returns <B>false</B>. <A HREF="list3.htm">Listing 3</A> contains the implementation file for class <B>CsendSMTP</B>.</p>

<p>The <B>OpenConnection</B> function performs three basic operations. First, it creates a socket and assigns it one of the free ports on your system. Next, that socket is connected to port 25 on the requested server system. Finally, <B>OpenConnection</B> analyzes the server response. If the response is positive, <B>OpenConnection</B> returns <B>true</B>; if the response is negative, it returns <B>false</B>. At this point, you can use <B>GetLastResponse</B> to view the service's actual response.</p>

<p>The <B>SendLine</B> function also performs three basic operations. First, it allocates a buffer large enough to hold a copy of the current message plus a newline character. Next, it sends the newline-terminated line to the SMTP service through the socket. Finally, <B>SendLine</B> receives the service's response.</p>

<p>There is one protected function worth mentioning: <B>ReceiveResponse</B>. <B>ReceiveResponse</B> receives an SMTP service response, and checks the first character. If that character is <B>1</B>, <B>2</B>, or <B>3</B>, the response is positive. If the first character is <B>4</B> or <B>5</B>, the response is negative.</p>

<h4><FONT COLOR="#000080">A Simple Example</FONT></H4>

<p><A HREF="list4.htm">Listing 4</A> demonstrates a Windows dialog box procedure that sends a static message. This function uses the <B>CsendSMTP</B> class to deliver the static message. The only items possibly needing clarification are the lines of text in the <B>DATA</B> section. Recall that when the <B>DATA</B> command is sent to the SMTP service, the service returns a response that indicates that you should continue with your message, and to terminate your message with a line containing a single period. More specifically, the service waits until a three-character sequence, newline, period, newline is sent back to the service. The service will only return after you send it a data line containing only a single period. Since <B>SendLine</B> checks for a response after each message issued, you must send the entire message body with one call to <B>SendLine</B>. The rest of the sample application sends the commands to the SMTP service, one line at a time, aborting out of the <B>for</B> loop when either it enounters either an error or a <B>NULL</B> pointer. (In my example, I chose to focus on making the code easy to read at the expense of error handling.) o</p>

<h4><FONT COLOR="#000080">Further Information</FONT></H4>

<p>RFC821, SIMPLE MAIL TRANSFER PROTOCOL, http://www.faqs.org/rfcs.</p>

<p>RFC1651, SMTP Service Extensions, http://www.faqs.org/rfcs.</p>

<p>RFC1893, Enhanced Mail System Status Codes, http://www.faqs.org/rfcs.</p>

<p>Bryan Costales and Eric Alman. <I>Sendmail (Nutshell Handbook),</I> 2nd ed. (O'Reilly &amp; Associates, 1997). ISBN 1565922220.</p>

<p>Bryan Costales and Eric Alman. <I>Sendmail Desktop Reference</I> (O'Reilly and Associates, 1997). ISBN 1565922786.</p>

<p><i>Bob Fazio works as a system administrator/database administrator for Danet, Inc. in Wexford, PA. Danet develops software for the cellular phone business. Fazio's development is primarily for internal applications. He has been writing code in C/C++ since the mid 80s.</i></p>

<h4><a href="../../../source/1998/jul98/fazio.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
