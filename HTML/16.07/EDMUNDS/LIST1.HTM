<HTML><HEAD>
<TITLE>July 1998/Template Classes for Color-Space Conversions/Listing 1</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: Part of the clrspace class hierarchy</A></h4>
<pre>
// clrspace.h

#if !defined(CLRSPACE_H)
#define CLRSPACE_H

#include &lt;math.h&gt; // for sqrt(), atan2(), and M_PI

// Some color spaces in current use including transformations
// between them. Type T is assumed to be a floating point type
// (float, double, or long double). This library can be extended
// to integer types by writing class specializations.

namespace clrspace {

template &lt;class T&gt;
class Color1 { // base class for 1-D color spaces
protected:
    T
    _zeta1; // coordinate value

public:
    Color1() {}
    Color1 (T izeta1) : _zeta1(izeta1) {}

    T // generic coordinate name (mostly for internal use)
    zeta1() const {return _zeta1;}
};

template &lt;class T&gt;
class Color2 : public Color1&lt;T&gt; { // base class for
protected:                        // 2-D color spaces
    T
    _zeta2; // second coordinate

public:
    Color2() {}
    Color2 (T izeta1, T izeta2) :
        Color1&lt;T&gt;(izeta1), _zeta2(izeta2) {}

    T // generic coordinate name (mostly for internal use)
    zeta2() const {return _zeta2;}
};

template &lt;class T&gt;
class Color3 : public Color2&lt;T&gt; { // base class for
protected:                        // 3-D color spaces
    T
    _zeta3; // third coordinate

public:
    Color3() {}
    Color3 (T izeta1, T izeta2, T izeta3) :
       Color2&lt;T&gt;(izeta1,izeta2), _zeta3(izeta3) {}

    T // generic coordinate name (mostly for internal use)
    zeta3() const {return _zeta3;}
};

// by definition, all "colorimetric" color spaces can be
// transformed to XYZ
template &lt;class T&gt;
class XYZ : public Color3&lt;T&gt; { // CIE (X,Y,Z) space
public:
    XYZ() {}
    XYZ (T ix, T iy, T iz) : Color3&lt;T&gt;(ix,iy,iz) {}

    T X() const {return _zeta1;}
    T Y() const {return _zeta2;}
    T Z() const {return _zeta3;}
};

// ~~~~~Brightness and Lightness Spaces~~~~~

template &lt;class T&gt;
class CIE_L; // forward reference

// two colors with equal Y values appear equally bright
template &lt;class T&gt;
class CIE_Y : public Color1&lt;T&gt; { // same as Y() from XYZ
public:
    CIE_Y() {}
    CIE_Y (T iY) : Color1&lt;T&gt;(iY) {}
    CIE_Y (const CIE_L&lt;T&gt; &amp;L, const CIE_Y&lt;T&gt; &amp;Yn); // Yn == 
                                                   // white ref.
    T  // read access to CIE Y coordinate
    Y() const {return _zeta1;}
};

// lightness is brightness judged in comparison to a
// white reference
template &lt;class T&gt;
class CIE_L : public Color1&lt;T&gt; { // CIE L* lightness metric
public:
    CIE_L() {}
    CIE_L (T iL) : Color1&lt;T&gt;(iL) {} 
    CIE_L (const CIE_Y&lt;T&gt; &amp;Y, const CIE_Y&lt;T&gt; &amp;Yn); // Yn ==
                                                   // white ref.
    T // read access to CIE L* coordinate
    L() const {return _zeta1;}
};

//~~~~~chromaticity coordinates~~~~~

// a chromaticity space is normalized so that the three
// coordinates add to 1
template &lt;class T&gt;
class ChromaticitySpace : public Color2&lt;T&gt; { // only two
                                             // coordinates are
                                             // stored
protected:
    T // compute the redundant third coordinate
    zeta3() const;

public:
    ChromaticitySpace() {}
    ChromaticitySpace (T izeta1, T izeta2) :
        Color2&lt;T&gt;(izeta1,izeta2) {}
};

// normalized XYZ space
template &lt;class T&gt;
class xy : public ChromaticitySpace&lt;T&gt; { // CIE xyz color space
public:
    xy() {}
    xy (T ix, T iy) : ChromaticitySpace&lt;T&gt;(ix,iy) {}
    xy (const uvPrime&lt;T&gt; &amp;); // convert from CIE u'v'w'
    xy (const XYZ&lt;T&gt; &amp;xyz); // convert from CIE XYZ

    XYZ&lt;T&gt; // convert to CIE XYZ
    toXYZ (const CIE_Y&lt;T&gt; &amp;Y) const; // argument means no
                                     // operator XYZ&lt;T&gt;
    T x() const {return _zeta1;} // read access to x
    T y() const {return _zeta2;} // read access to y
    T z() const {return zeta3();} // compute 1 - x - y
};

// more perceptually flat than xy&lt;T&gt;
template &lt;class T&gt;
class uvPrime : public ChromaticitySpace&lt;T&gt; { // CIE u'v'w'
                                              // color space
public:
    uvPrime() {}
    uvPrime (T iuPrime, T ivPrime) : 
        ChromaticitySpace&lt;T&gt;(iuPrime,ivPrime) {}
    uvPrime (const xy&lt;T&gt; &amp;); // convert from CIE xyz
    uvPrime (const XYZ&lt;T&gt; &amp;xyz); // convert from CIE XYZ

    XYZ&lt;T&gt; toXYZ (const CIE_Y&lt;T&gt; &amp;Y) const // convert to CIE XYZ
        {return xy&lt;T&gt;(*this).toXYZ(Y);}

    T uPrime() const {return _zeta1;} // read access to uPrime
    T vPrime() const {return _zeta2;} // read access to vPrime
    T wPrime() const {return zeta3();} // compute 1-uPrime-vPrime
};

// ~~~~~RGBBase family of color spaces~~~~~

// RGBBase means red, green, blue
template &lt;class T&gt;
class RGBBase : public Color3&lt;T&gt; { // uncalibrated (R,G,B) space
public:
    RGBBase() {}
    RGBBase (T ir, T ig, T ib) : Color3&lt;T&gt;(ir,ig,ib) {}

    T R() const {return _zeta1;}
    T G() const {return _zeta2;}
    T B() const {return _zeta3;}
};

// An RGBConv&lt;T,CONV&gt; is an RGBBase&lt;T&gt; having a static CONV
template &lt;class T, class CONV&gt; // CONV derived from ConvertRGB&lt;T&gt;
class RGBConv : public RGBBase&lt;T&gt; { // base class for RGBLinear
                                    // and RGBGamma
protected:
    static const CONV // XYZ and Gamma conversions
    _conv;

public:
    RGBConv() {}
    RGBConv (T ir, T ig, T ib) : RGBBase&lt;T&gt;(ir,ig,ib) {}
    RGBConv (const RGBBase&lt;T&gt; &amp;rgb) : RGBBase&lt;T&gt;(rgb) {}
};

template &lt;class T, class CONV&gt;
class RGBGamma; // forward reference

// RGBLinear&lt;T,CONV&gt; is a base class for a linear-light
// RGBBase space
template &lt;class T, class CONV&gt;
class RGBLinear : public RGBConv&lt;T,CONV&gt; {
protected:
    RGBLinear (const RGBBase&lt;T&gt; &amp;rgb) : // for internal use only
       RGBConv&lt;T,CONV&gt;(rgb.R(),rgb.G(),rgb.B()) {}

public:
    RGBLinear() {}
    RGBLinear (T ir, T ig, T ib) : RGBConv&lt;T,CONV&gt;(ir,ig,ib) {}
    RGBLinear (const RGBGamma&lt;T,CONV&gt; &amp;rgbgam) :
        RGBConv&lt;T,CONV&gt;(_conv.fromGamma(rgbgam)) {}
    RGBLinear (const XYZ&lt;T&gt; &amp;xyz) :
        RGBConv&lt;T,CONV&gt;(_conv.fromXYZ(xyz)) {}

    XYZ&lt;T&gt; // explicit conversion to XYZ
    toXYZ() const {return _conv.toXYZ(*this);}

    operator // implicit converstion to XYZ
    XYZ&lt;T&gt; () const {return toXYZ();}
};

// RGBLinear&lt;T,CONV&gt; is a base class for a gamma-corrected
// RGBBase space
template &lt;class T, class CONV&gt;
class RGBGamma : public RGBConv&lt;T,CONV&gt; { // gamma corrected
                                          // (R,G,B) space
protected:
    RGBGamma (const RGBBase&lt;T&gt; &amp;rgb) :
       RGBConv&lt;T,CONV&gt;(rgb.R(),rgb.G(),rgb.B()) {}

public:
    RGBGamma() {}
    RGBGamma (T ir, T ig, T ib) : RGBConv&lt;T,CONV&gt;(ir,ig,ib) {}
    RGBGamma (const RGBLinear&lt;T,CONV&gt; &amp;rgblin) :
        RGBConv&lt;T,CONV&gt;(_conv.toGamma(rgblin)) {}

    RGBGamma (const XYZ&lt;T&gt; &amp;xyz) :
        RGBConv&lt;T,CONV&gt;(_conv.toGamma(_conv.fromXYZ(xyz))) {}

    XYZ&lt;T&gt; toXYZ() const // explicit conversion to XYZ
        {return _conv.toXYZ(_conv.fromGamma(*this));}

    operator XYZ&lt;T&gt; () const // implicit conversion to XYZ
        {return toXYZ();} 
};

//~~~~~RGB709&lt;T&gt;: an example use of RGBLinear&lt;T&gt; and ~~~~~
//     RGBGamma&lt;T&gt;

// step 1: derive a conversion class with a default constructor
template &lt;class T&gt; // needs to be changed if T is an integer type
class Convert_RGB709 : public ConvertRGB&lt;T&gt; {
public:
    // RGB709 is a proposed HDTV standard (ITU.BT-709)
    Convert_RGB709() : ConvertRGB&lt;T&gt;
    (
        xy&lt;T&gt;(0.64,0.33), // red chromaticity
        xy&lt;T&gt;(0.30,0.60), // green chromaticity
        xy&lt;T&gt;(0.15,0.06), // blue chromaticity
        D65&lt;T&gt;(),         // white point chromaticity
        1.0/0.45,         // gamma
        0.018             // epsilon
    ) {}
};

template &lt;class T&gt;
class RGB709; // forward reference

// step 2: derive a new linear-light RGBBase space using the
// converter from step 1
template &lt;class T&gt;
class RGB709Linear : public RGBLinear&lt;T,Convert_RGB709&lt;T&gt; &gt; {
public:
    RGB709Linear() {}

    RGB709Linear (T ir, T ig, T ib) :
        RGBLinear&lt;T,Convert_RGB709&lt;T&gt; &gt;(ir,ig,ib) {}

    RGB709Linear (const RGB709&lt;T&gt; &amp;gamma) :
        RGBLinear&lt;T,Convert_RGB709&lt;T&gt; &gt;(gamma) {}

    RGB709Linear (const XYZ&lt;T&gt; &amp;xyz) :
        RGBLinear&lt;T,Convert_RGB709&lt;T&gt; &gt;(xyz) {}
};

// step 3: derive an associated gamma-corrected RGBBase space
template &lt;class T&gt;
class RGB709 : public RGBGamma&lt;T,Convert_RGB709&lt;T&gt; &gt; {
public:
    RGB709() {}

    RGB709 (T ir, T ig, T ib) :
        RGBGamma&lt;T,Convert_RGB709&lt;T&gt; &gt;(ir,ig,ib) {}

    RGB709 (const RGB709Linear&lt;T&gt; &amp;linear) :
        RGBGamma&lt;T,Convert_RGB709&lt;T&gt; &gt;(linear) {}

    RGB709 (const XYZ&lt;T&gt; &amp;xyz) :
        RGBGamma&lt;T,Convert_RGB709&lt;T&gt; &gt;(xyz) {}
};

#endif
/* End of File */</pre>
</BODY>
</HTML>
