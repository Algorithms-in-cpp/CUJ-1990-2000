<HTML><HEAD>
<TITLE>July 1998/Standard C/C++/Listing 1</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: Extracting time information</A></h4>

<pre>
#include &lt;iostream&gt;
#include &lt;locale&gt;
#include &lt;string.h&gt;
#include &lt;time.h&gt;
using namespace std;

        // FORMATTED TIME TYPES

class Time_fmt {
public:
    Time_fmt(time_t t = time(0), const char *fmt = "%c")
        : value(*localtime(&amp;t)), format(fmt) {}
    Time_fmt(tm v, const char *fmt = "%c")
        : value(v), format(fmt) {}
    const tm *valptr() const
        {return (&amp;value); }
    void setvalptr(const tm&amp; val)
        {value = val; }
    const char *fmt_first() const
        {return (format); }
    const char *fmt_last() const
        {return (format + strlen(format)); }
private:
    tm value;
    const char *format;
    };

class Time_dayname : public Time_fmt {
public:
    Time_dayname(Time_fmt x)
        : Time_fmt(*x.valptr(), "%A") {}
    };

        // Time INSERTER
template&lt;class _E, class _Tr&gt; inline
    basic_ostream&lt;_E, _Tr&gt;&amp; operator&lt;&lt;(
        basic_ostream&lt;_E, _Tr&gt;&amp; _O, Time_fmt _Y)
    {typedef ostreambuf_iterator&lt;_E, _Tr&gt; _Iter;
    typedef time_put&lt;_E, _Iter&gt; _Tput;

    ios_base::iostate _St = ios_base::goodbit;
    const typename basic_ostream&lt;_E, _Tr&gt;::sentry _Ok(_O);
    if (_Ok)
        {try
            {const _Tput&amp; _Fac =
                _USEFAC(_O.getloc(), _Tput);
            if (_Fac.put(_Iter(_O.rdbuf()),
                _O, _O.fill(), _Y.valptr(),
                _Y.fmt_first(), _Y.fmt_last()).failed())
                _St |= ios_base::badbit; }
        catch (...)
            {_O.setstate(ios_base::badbit, true); }}
    _O.setstate(_St);
    return (_O); }

        // Time EXTRACTOR
template&lt;class _E, class _Tr&gt; inline
    basic_istream&lt;_E, _Tr&gt;&amp; operator&gt;&gt;(
        basic_istream&lt;_E, _Tr&gt;&amp; _I, Time_fmt&amp; _X)
    {typedef istreambuf_iterator&lt;_E, _Tr&gt; _Iter;
    typedef time_get&lt;_E, _Iter&gt; _Mput;

    ios_base::iostate _St = ios_base::goodbit;
    const typename basic_istream&lt;_E, _Tr&gt;::sentry _Ok(_I);
    tm _V = {0};
    if (_Ok)
        {try
            {const _Tput&amp; _Fac =
                _USEFAC(_I.getloc(), _Tput);
            _Fac.get_date(_Iter(_I.rdbuf()), _Iter(0),
            _I, _St, &amp;_V); }
        catch (...)
            {_I.setstate(ios_base::badbit, true); }}
    if ((_St &amp; ios_base::failbit) == 0)
        _X.setvalptr(_V);
    _I.setstate(_St);
    return (_I); }

int main()
    {Time_fmt date;
    while (cin &gt;&gt; date)
        cout &lt;&lt; date &lt;&lt; endl;
    return (0); }
/* End of File */</pre>
</BODY>
</HTML>
