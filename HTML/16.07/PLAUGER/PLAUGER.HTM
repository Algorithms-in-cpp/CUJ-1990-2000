<HTML>
     
     <HEAD>
<TITLE>July 1998/Standard C/C++</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjul.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Standard C/C++: The Facet time_get</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">P. J. Plauger</FONT></H3>

<BLOCKQUOTE>

<p>Ever wish you could just read in a date or time without a lot of coding? Well now you can, possibly even in French.</p></BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<h4><FONT COLOR="#000080">Introduction</FONT></H4>

<p>Last month, I showed how you can display various components of a time using a locale facet in the Standard C++ library. Template class <B>time_put</B> converts members of a <B>struct tm</B> object, obtainable from various functions declared in the Standard C header <B>&lt;time.h&gt;</B>, to printable text. (See "Standard C/C++: The Facet <B>time_put</B>," <I>CUJ,</I> June 1998.) The template class is, in fact, a <I>locale facet,</I> a creature that works with iostreams classes (among other things) to help you perform culture-specific input and output. In this sense, <B>time_put</B> is primarily a convenient way to package the functionality long provided by the Standard C function <B>strftime</B>.</p>

<p>The Standard C library has no corresponding provision for reading times and dates, however. You can obtain the current time and date in encoded form, of scalar type <B>time_t</B>, by calling the function <B>time</B>. You can convert between this scalar encoding and the structured encoding, of type <B>struct tm</B> with various functions. And you can convert encoded times to text form with <B>strftime</B> and other functions. But the Standard C library offers no functions analogous to <B>scanf</B> for reading text and converting it to an encoded time.</p>

<p>This can be mildly annoying. I have often found the need to read in a date or time - either as a command-line argument, from the keyboard in response to a prompt, or from a field in a text file - and convert it to internal encoded form. To be nice to people, you'd like to support widespread custom, such as writing "December 2, 1979" instead of some barbarism such as "791202" (or "19791202" now that the millenium looms ever closer). The former is nicer to people, but much harder to code than the latter. To be even nicer, you'd like to support customs of other lands. If the function <B>strftime</B> can be coaxed into converting dates to French - and it can, at least on some implementations - it makes sense to have a date scanner also convert French dates to internal encoded form. We nevertheless elected not to add such a feature to the Standard C library.</p>

<p>The C++ Standard decided to correct this shortcoming. Its analogs to <B>printf</B> and <B>scanf</B>, for converting between text and numeric encodings are the locale facets <B>num_put</B> and <B>num_get</B>. It offers a similar pair of template classes for converting between text and monetary encodings, with the locale facets <B>money_put</B> and <B>money_get</B>. (I have described all these facets over the last several months.) You will not be surprised to learn that <B>time_put</B> has its corresponding template class <B>time_get</B>, which I describe this month.</p>

<h4><FONT COLOR="#000080">C++ Locale Facets</FONT></H4>

<p>As I have described more than once in past columns, the Standard C++ library provides for multiple active locales within a program, not just one global locale as in the Standard C library. Each locale is encapsulated within a <I>locale object.</I> Every input or output stream based on the iostreams classes is "imbued with" (contains) a locale object. A stream consults its stored locale object to determine any locale-dependent behavior. (See "Standard C/C++: Introduction to Locales," <I>CUJ,</I> October 1997.)</p>

<p>A locale in the Standard C library is divided up into half a dozen <I>categories.</I> The category <B>LC_TIME</B>, for example, controls the behavior of the function <B>strftime</B>. A locale facet in the Standard C++ library is an object of type <B>locale::facet</B>, as defined in the header <B>&lt;locale&gt;</B>. Each locale object actually consists of an open-ended set of references to objects of different facet types. A locale category in C is represented by one or more facets in C++.</p>

<p>Template class <B>time_get</B> is one such facet. An object of a class specialized from this template class converts text sequences, by locale-dependent rules, into one or more components of a <B>tm</B> object. Typically, the facet extracts characters from an input stream. Its <B>get</B> functions convert different components of a time or date. Every locale object contains references to objects of type <B>time_put&lt;char&gt;</B> and <B>time_put&lt;wchar_t&gt;</B>. These two objects differ only in the type of the sequence elements they extract.</p>

<p>How can you use <B>time_get</B> to advantage? <A HREF="list1.htm">Listing 1</A> shows a small example program. It should work with any compiler that includes some version of the Dinkum C++ Library, such as Microsoft Visual C++ V4.2 or later. I built upon the example I showed last month, for printing time components. It demonstrates how you can create a <I>time extractor,</I> by overloading <B>operator&gt;&gt;</B> for input streams. For simplicity in defining the extractor overload, I make use here of the class <B>Time_fmt</B> that I used last month for output. An object of this class stores a <B>tm</B> object and the <B>strftime</B> format string that should be used to convert its components to a text sequence. In this simple example, the extractor makes no use of the format string, however.</p>

<p>The extractor obtains a reference <B>_Fac</B> to the appropriate <B>time_get</B> object associated with the input stream. It then calls <B>_Fac.get</B> to extract a date from the input stream. Thus, the two lines:</p>

<pre>
Time_fmt date;
cin &gt;&gt; date;</pre>

<p>should read from the standard input stream the current date in the form favored by the <B>time_get</B> facet. In this case, the member function <B>date_order()</B> returns the enumeration value <B>mdy</B> to signal that the facet expects dates of the form "December 2, 1979."</p>

<p>The example program repeatedly reads a line of text as a date and prints it out. Running under Visual C++, I get:</p>

<pre>
December 2, 1979
2/12/79
Dec 02, 79
2/12/79</pre>

<p>As you can see, the conversion is tolerant of several popular alternate date formats.</p>

<p><A HREF="list1.htm">Listing 1</A> shows a template definition of <B>operator&gt;&gt;</B> for <B>Time_fmt</B> objects that works with any kind of input stream you care to contrive. (But please note that only the facets corresponding to the element types <B>char</B> and <B>wchar_t</B> occur in all locale objects.) As with earlier examples, I began with an existing template extractor from the header <B>&lt;istream&gt;</B> and reworked it as needed. You can write a simpler form if you're less ambitious, but I still recommend that you match an existing extractor closely, to get all the details right.</p>

<p>I remind you again that the macro <B>_USEFAC(loc, fac)</B> is peculiar to my implementation of the Standard C++ library. It paves over the dialect differences between compilers that support different generations of template processing. The macro expands either to <B>use_facet&lt;fac&gt;(loc)</B> or <B>use_facet(loc, (fac *)0)</B>, accordingly. Thus, the macro does what's needed to obtain a reference to a locale facet.</p>

<h4><FONT COLOR="#000080">Template Class time_get</FONT></H4>

<p>Template class <B>time_get</B> behaves much like template class <B>num_get</B>. (See "Standard C/C++: The Facet <B>num_get</B>," <I>CUJ,</I> February 1998.) It is a facet like many of the others I've described these past several months. (For the basics of locales and facets, see "Standard C/C++: Introduction to Locales," <I>CUJ,</I> October 1997.) I repeat here just the description of how the extractor in <A HREF="list1.htm">Listing 1</A> makes use of <B>time_get</B>:</p>

<UL><LI>The member function <B>ios_base::getloc</B> obtains a copy <br>of the locale object "imbued" into the object of class <br><B>basic_istreambuf&lt;_E, _Tr&gt;</B>.</LI>
    <LI>The template function <B>use_facet&lt;_Tget&gt;</B> obtains from its locale object argument a const reference to the facet <B>_Tget</B> (a typedef for <B>time_get&lt;_E, _Iter&gt;</B> here), which should always be present.</LI>
    <LI>The facet reference <B>_Fac</B> can be used to call any of the various versions of <B>_Fac.get</B> to extract a field (sequence of elements) from the input stream and convert it.</LI>
    <LI><B>_Fac.get</B> extracts elements from the stream buffer (obtained by calling <B>_Myios::rdbuf()</B>) using an input iterator of type <B>_Iter</B> (a typedef for <B>istreambuf_iterator&lt;_E, _Tr&gt;</B>) to assemble the input field.</LI>
    <LI><B>_Fac.get</B> obtains stored formatting information from the object of class <B>basic_istream&lt;_E, _Tr&gt;</B> (<B>_I</B>).</LI>
    <LI><B>_Fac.get</B> stores the converted field value in the object <B>_V</B> (of type <B>tm</B>). It can also throw an exception if anything goes wrong along the way.</LI>
    <LI>The extractor ensures that the converted value was obtained successfully, then stores the converted value in <B>_X</B> into an object of type <B>Time_fmt</B> by calling <B>setvalptr</B>.</LI></UL>

<p><A HREF="list2.htm">Listing 2</A> shows one way to implement (most of) template class <B>time_get</B>. As usual, I omit most of the implementation-specific magic code. Most of the interesting action, also as usual, occurs in the various virtual functions with names that begin with <B>do_</B>. (You override these virtual member functions, as needed, in a derived class to produce your own flavor of a <B>time_get</B> facet.)</p>

<p>I remind you, as usual, that the macro <B>_WIDEN</B> converts a member of the basic C character set, as type <B>char</B>, to the element type. Typically, this involves little or no work. Similarly, the macro <B>_NARROW</B> converts the other way, or to a null character if that is not possible.</p>

<p>Numeric input fields are converted by calling the private member function <B>_Getint</B>. It converts an integer by the usual rules, then checks to ensure that the result is in range. Text input fields are rather harder to convert. The code must accept either "Dec" or "December," for example. Obviously, it has to favor the longer match, or the shorter match will always queer the scan. But this template class is obliged to work with input iterators, which cannot back up. Moreover, the scan must stop on the first element that fails to match any of the candidate text patterns. It cannot overshoot.</p>

<p><A HREF="list3.htm">Listing 3</A> shows the template function <B>_Getloctxt</B> that does this tricky operation. The code is not easy to puzzle out, but it does the job. It is designed to take a sequence of alternative inputs, such as:</p>

<pre>
":Jan:January:Feb:February:Mar:March"
":Apr:April:May:May:Jun:June"
":Jul:July:Aug:August:Sep:September"
":Oct:October:Nov:November:Dec:December"
</pre>

<p>and return the index of the first colon-delimited field that matches. If no field matches, the function returns a negative value.</p>

<h4><FONT COLOR="#000080">Virtual Functions</FONT></H4>

<p>Here is a brief description of each of the virtual functions in template class <B>time_get</B>. As in the other facets, they do all the interesting work:</p>

<pre>time_get::do_date_order

virtual dateorder do_date_order() const;
</pre>

<p>The virtual protected member function returns a value of type <B>time_base::dateorder</B>, which describes the order in which date components are matched by <B>do_get_date</B>. In this implementation, the value is <B>time_base::mdy</B>, corresponding to dates of the form <B>December 2, 1979.</B></p>

<pre>time_get::do_get_date

virtual iter_type
do_get_date(iter_type first, iter_type last,
    ios_base&amp; x, ios_base::iostate&amp; st, tm *pt) const;
</pre>

<p>The virtual protected member function endeavors to match sequential elements beginning at <B>first</B> in the sequence <B>[first, last)</B> until it has recognized a complete, nonempty date input field. If successful, it converts this field to its equivalent value as the components <B>tm::tm_mon</B>, <B>tm::tm_day</B>, and <B>tm::tm_year</B>, and stores the results in <B>pt-&gt;tm_mon</B>, <B>pt-&gt;tm_day</B>, and <B>pt-&gt;tm_year</B>, respectively. It returns an iterator designating the first element beyond the date input field. Otherwise, the function sets <B>ios_base::failbit</B> in <B>st</B>. It returns an iterator designating the first element beyond any prefix of a valid date input field. In either case, if the return value equals <B>last</B>, the function sets <B>ios_base::eofbit</B> in <B>st</B>.</p>

<p>In this implementation, the date input field has the form <B>MMM DD, YYYY</B>, where:</p>

<UL><LI><B>MMM</B> is matched by calling <B>get_month</B>, giving the month.</LI>
    <LI><B>DD</B> is a sequence of decimal digits whose corresponding numeric value must be in the range [1, 31], giving the day of the month.</LI>
    <LI><B>YYYY</B> is matched by calling <B>get_year</B>, giving the year.</LI>
    <LI>The literal spaces and commas must match corresponding elements in the input sequence.</LI></UL>

<pre>
time_get::do_get_month

virtual iter_type
do_get_month(iter_type first, iter_type last,
    ios_base&amp; x, ios_base::iostate&amp; st, tm *pt) const;
</pre>

<p>The virtual protected member function endeavors to match sequential elements beginning at <B>first</B> in the sequence <B>[first, last)</B> until it has recognized a complete, nonempty month input field. If successful, it converts this field to its equivalent value as the component <B>tm::tm_mon</B>, and stores the result in <B>pt-&gt;tm_mon</B>. It returns an iterator designating the first element beyond the month input field. Otherwise, the function sets <B>ios_base::failbit</B> in <B>st</B>. It returns an iterator designating the first element beyond any prefix of a valid month input field. In either case, if the return value equals <B>last</B>, the function sets <B>ios_base::eofbit</B> in <B>st</B>.</p>

<p>The month input field is a sequence that matches the longest of a set of locale-specific sequences, such as: <B>Jan</B>, <B>January</B>, <B>Feb</B>, <B>February</B>, etc. The converted value is the number of months since January.</p>

<pre>
time_get::do_get_time

virtual iter_type
do_get_time(iter_type first, iter_type last,
    ios_base&amp; x, ios_base::iostate&amp; st, tm *pt) const;
</pre>

<p>The virtual protected member function endeavors to match sequential elements beginning at <B>first</B> in the sequence <B>[first, last)</B> until it has recognized a complete, nonempty time input field. If successful, it converts this field to its equivalent value as the components <B>tm::tm_hour</B>, <B>tm::tm_min</B>, and <B>tm::tm_sec</B>, and stores the results in <B>pt-&gt;tm_hour</B>, <B>pt-&gt;tm_min</B>, and <B>pt-&gt;tm_sec</B>, respectively. It returns an iterator designating the first element beyond the time input field. Otherwise, the function sets <B>ios_base::failbit</B> in <B>st</B>. It returns an iterator designating the first element beyond any prefix of a valid time input field. In either case, if the return value equals <B>last</B>, the function sets <B>ios_base::eofbit</B> in <B>st</B>.</p>

<p>In this implementation, the time input field has the form <B>HH:MM:SS</B>, where:</p>

<UL><LI><B>HH</B> is a sequence of decimal digits whose corresponding numeric value must be in the range [0, 24), giving the hour of the day.</LI>
    <LI><B>MM</B> is a sequence of decimal digits whose corresponding numeric value must be in the range [0, 60), giving the minutes past the hour.</LI>
    <LI><B>SS</B> is a sequence of decimal digits whose corresponding numeric value must be in the range [0, 60), giving the seconds past the minute.</LI>
    <LI>The literal colons must match corresponding elements in the input sequence.</LI></UL>

<pre>
time_get::do_get_weekday

virtual iter_type
do_get_weekday(iter_type first,
  iter_type last, ios_base&amp; x,
  ios_base::iostate&amp; st, tm *pt) const;
</pre>

<p>The virtual protected member function endeavors to match sequential elements beginning at <B>first</B> in the sequence <B>[first, last)</B> until it has recognized a complete, nonempty weekday input field. If successful, it converts this field to its equivalent value as the component <B>tm::tm_wday</B>, and stores the result in <B>pt-&gt;tm_wday</B>. It returns an iterator designating the first element beyond the weekday input field. Otherwise, the function sets <B>ios_base::failbit</B> in <B>st</B>. It returns an iterator designating the first element beyond any prefix of a valid weekday input field. In either case, if the return value equals <B>last</B>, the function sets <B>ios_base::eofbit</B> in <B>st</B>.</p>

<p>The weekday input field is a sequence that matches the longest of a set of locale-specific sequences, such as: <B>Sun</B>, <B>Sunday</B>, <B>Mon</B>, <B>Monday</B>, etc. The converted value is the number of days since Sunday.</p>

<pre>
time_get::do_get_year

virtual iter_type
do_get_year(iter_type first,
  iter_type last, ios_base&amp; x,
  ios_base::iostate&amp; st, tm *pt) const;
</pre>

<p>The virtual protected member function endeavors to match sequential elements beginning at <B>first</B> in the sequence <B>[first, last)</B> until it has recognized a complete, nonempty year input field. If successful, it converts this field to its equivalent value as the component <B>tm::tm_year</B>, and stores the result in <B>pt-&gt;tm_year</B>. It returns an iterator designating the first element beyond the year input field. Otherwise, the function sets <B>ios_base::failbit</B> in <B>st</B>. It returns an iterator designating the first element beyond any prefix of a valid year input field. In either case, if the return value equals <B>last</B>, the function sets <B>ios_base::eofbit</B> in <B>st</B>.</p>

<p>The year input field is a sequence of decimal digits whose corresponding numeric value must be in the range [1900, 2036). The stored value is this value minus 1900. In this implementation, a numeric value in the range [0, 136) is also permissible. It is stored unchanged.</p>

<h4><FONT COLOR="#000080">Conclusion</FONT></H4>

<p>I have my usual reservations about this facet as with several others I have described recently. It performs a complex job that many would consider esoteric. That wouldn't be so bad, except that it takes a heroic effort on the part of implementors to avoid the overheads it causes. Every program that uses the iostreams classes drags in all the code for template classes <B>time_get&lt;char&gt;</B> and <B>time_get&lt;wchar_t&gt;</B>. (VC++ avoids loading these classes, I hasten to report.)</p>

<p>On the other hand, I confess that writing the extractor in <A HREF="list1.htm">Listing 1</A> was remarkably easy. It was a real pleasure to be able to type in dates with very little coding and debugging. I could get used to having <B>time_get</B> around. I wouldn't be surprised to find that I use it more and more in the coming years. You just might too.</p>

<p><i>P.J. Plauger is Senior Editor of <I>C/C++ Users Journal</I> and President of Dinkumware, Ltd. He is the author of the Standard C++ Library shipped with Microsoft's Visual C++, v5.0. For eight years, he served as convener of the ISO C standards committee, WG14. He remains active on the C++ committee, J16. His latest books are <I>The Draft Standard C++ Library</I>, <I>Programming on Purpose</I> (three volumes), and <I>Standard C</I> (with Jim Brodie), all published by Prentice-Hall. You can reach him at <B>pjp@plauger.com</B>.</i></p>

<h4><a href="../../../source/1998/jul98/plauger.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY>
</HTML>
