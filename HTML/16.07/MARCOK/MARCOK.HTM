<HTML>
     
     <HEAD>
<TITLE>July 1998/Dynamic Arrays with Expression Templates</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjul.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Software Tools</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Dynamic Arrays with Expression Templates</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Zlatko Marcok</FONT></H3>

<BLOCKQUOTE>

<p>It's amazing what you can do with templates, once you learn a few basic techniques.</p></BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<h4><FONT COLOR="#000080">Motivation</FONT></H4>

<p>C/C++ provides support for arrays but requires that array dimensions be known at compile time. Often it is convenient to have support for arrays whose dimensions are run-time parameters. The straightforward solution (solution 1) for dynamic-array support is to create an array class which uses allocated memory to hold the elements. To access the elements, you create an indexing function that takes a value for each dimension of the array and calculates an offset from the start of the allocated memory, thereby determining where the array element of interest resides.</p>

<p>For example, consider a two-dimensional array class <B>A2D</B> and an instance <B>theArray</B>. Obtaining element <B>theArray[1][2]</B> might be accomplished using syntax such as <B>theArray(1,2)</B>. This approach becomes burdensome if you are replacing static arrays with dynamic ones, since the indexing syntax has to be altered throughout the code. In addition, such an ad hoc solution is hard to reuse.</p>

<p>A more general solution (solution 2) implements the two-dimensional array in the above example as an array of one-dimensional arrays (see <a href="#1">[1]</a>). This technique significantly reduces the changes required in your code because it uses <B>operator[]</B> to access the array elements just as with static arrays. Continuing with the above example, an element of <B>theArray</B> would be accessed as <B>theArray[1][2]</B>.</p>

<p>This works as follows. If <B>theArray</B> has dimensions 4 and 5, then <B>theArray</B> is really an array of four elements, each of which is an array of five elements. The expression <B>theArray[1]</B> returns the second five-element array, which is then indexed by <B>[2]</B> to return the third element. A set of class declarations for one-, two-, and three-dimensional arrays is shown in <A HREF="list1.htm">Listing 1</A>.</p>

<p>Note that in <A HREF="list1.htm">Listing 1</A>, <B>Array1D</B>, <B>Array2D</B>, and <B>Array3D</B> are very similar. Their most significant difference is in the number of parameters that their respective constructors each take. If the constructor of each <B>ArrayXD</B> takes a pointer to <B>X</B> elements, the differences would be eliminated and each array of dimension <B>X</B> would be implemented in terms of an array of dimension <B>X - 1</B>. This article refers to the lower dimension <B>(X - 1)</B> arrays as subarrays. The repetition of code required for this technique lacks esthetic appeal. It can also be quite tedious and error prone if arrays of higher dimensions are required. The solution to this repetition is template metaprogramming.</p>

<h4><FONT COLOR="#000080">Template Metaprogramming</FONT></H4>

<p>The technique of template metaprogramming uses the compiler as a C++ interpreter and code generator. Metaprogramming can be used to unroll loops and calculate constants <a href="#2">[2]</a>. It has even been used to improve the performance of linear-algebra class libraries <a href="#3">[3]</a>. A metaprogram is a pattern which the compiler follows to generate code. As an example, consider the metaprogram to generate factorials shown in <A HREF="list2.htm">Listing 2</A>.</p>

<p>In <A HREF="list2.htm">Listing 2</A>, the value of 5! is calculated at compile time. The class <B>Factorial&lt;5&gt;</B> is generated first using:</p>

<pre>
template&lt;int N&gt;
    class Factorial</pre>

<p>To complete class <B>Factorial&lt;5&gt;</B>, the compiler needs class <B>Factorial&lt;4&gt;</B> which it generates next. This process continues until the compiler needs class <B>Factorial&lt;1&gt;</B>, which you supply as an explicit specialization. This is the general method for metaprogramming - a general case involving a recursive definition, and a terminating case are supplied by the programmer. The compiler generates the intermediate code.</p>

<p>The application of this technique to defining multidimensional arrays is shown in <A HREF="list3.htm">Listing 3</A>. As suggested earlier, the data for the constructor is passed in via the array <B>pdimensions</B>, which is passed to all subarrays so that they may initialize themselves. As in <A HREF="list1.htm">Listing 1</A>, each <B>operator[]</B> returns a reference to an array of the next lower dimensionality <B>SPACE</B>. A three-dimensional array is an array in three space.</p>

<p>This solution creates another problem, however. To create an <B>Array&lt;T, SPACE&gt;</B>, the number of dimension should match <B>SPACE</B>. But this cannot be checked at compile time. It is easy to make a mistake and not provide enough dimension information, especially if code is being modified by someone other than the initial developer. To solve this problem, you can replace the pointer to <B>size_t</B> with an expression template <a href="#4">[4]</a>.</p>

<h4><FONT COLOR="#000080">Expression Templates</FONT></H4>

<p>Expression templates provide a means for passing expressions to functions. The expression itself is a template class with the template parameter indicating the expression type. The expression type is generated by the compiler - it is the type which gives the expression its functional properties. A basic expression template is shown in <A HREF="list4.htm">Listing 4</A> as:</p>

<pre>
template &lt;class E&gt;
    class Expr</pre>

<p>Template class <B>Expr</B> is a wrapper for more interesting expressions. They can be variables, numbers, binary expressions, etc. The parameter <B>E</B> indicates the expression type. Wrapping other expressions in this way allows you to pass them to a template function such as function <B>foo</B> shown in the listing. Because <B>foo</B> is a template function, the compiler generates a version of <B>foo</B> compatible with the expression being passed into it. Class <B>Expr&lt;E&gt;</B> overloads <B>operator()</B>, which is used to evaluate the expression.</p>

<p>As presented in <A HREF="list4.htm">Listing 4</A>, the evaluation of the expression does not produce anything useful. However it is instructive to see how a call to <B>foo</B> is compiled. In the case of <B>foo(IntExpr(10))</B>, the compiler needs an <B>Expr</B> object to satisfy the <B>foo</B> parameter, and infers that it can make an <B>Expr</B> object from an <B>IntExpr</B> object because the <B>Expr</B> constructor takes a single parameter which can be anything that is a valid template parameter.</p>

<p><A HREF="list4.htm">Listing 4</A> also introduces a touple expression (<B>ToupleExpr</B>) and overloads <B>operator&lt;&lt;</B> to create a <B>ToupleExpr</B> object given two <B>IntExpr</B> arguments. (<B>operator&lt;&lt;</B> was chosen as the one to be overloaded because it did not imply any mathematical semantics. You can overload practically any other operator just as well, except for the comma operator. ) The <B>ToupleExpr</B> object is wrapped in an <B>Expr</B> object and returned from the call to <B>operator&lt;&lt;</B>. The call occurs in the argument expression <B>foo(IntExpr(10) &lt;&lt; 20)</B>. Although there is no <B>operator&lt;&lt;(IntExpr, int)</B>, the compiler can make an <B>IntExpr</B> object from <B>20</B> and use the available <B>operator&lt;&lt;</B>.</p>

<p>The result of <B>operator&lt;&lt;</B> is an <B>Expr</B> object specifically of type <B>ToupleExpr</B>, which in this case is an aggregate of the two <B>IntExpr</B> objects. The types of the aggregates are template parameters, so the types could be anything, including the types of other <B>ToupleExpr</B> expressions. Evaluation of the expression via <B>operator()</B> involves evaluation of the aggregates, which, at the lowest level, are of type <B>IntExpr</B>. Evaluation of the <B>IntExpr</B> objects prints out the integer values.</p>

<h4><FONT COLOR="#000080">Implementation</FONT></H4>

<p><A HREF="list5.htm">Listing 5</A> shows the merging of the three ideas (subarrays, template metaprogramming, and expression templates) into a full implementation of the <B>Array</B> class. The <B>Dim</B> class is a wrapper for a <B>size_t</B> element which represents one dimension of an array. It is analogous to the <B>IntExpr</B> of the previous section. From <A HREF="list4.htm">Listing 4</A> to <A HREF="list5.htm">Listing 5</A>, the expression templates are enhanced in two ways. The class <B>Expr</B> has an additional template parameter called <B>SPACE</B> which is a count of the number of <B>Dim</B> classes nested in the <B>Expr</B>. It equals the dimensionality of the array.</p>

<p>An <B>operator&lt;&lt;(Expr, Dim)</B> is also added and used to create a touple of <B>Expr</B> and <B>Dim</B> so that constructs like:</p>

<pre>
Dim(d1) &lt;&lt; d2 &lt;&lt; d3</pre>

<p>can be handled. As discussed in the previous section, <B>Dim(d1) &lt;&lt; d2</B> creates an <B>Expr</B> of type <B>ToupleExpr</B>. This is then combined with <B>d3</B> to create another <B>ToupleExpr</B>. The resulting expression is shown in <A HREF="fig1.htm">Figure 1</A>.</p>

<p>Here, the <B>SPACE</B> template parameter of the <B>Expr</B> class is shown as the numbers 2 and 3. In the function <B>operator()&lt;&lt;(const Dim&amp;, const Dim&amp;)</B>, <B>SPACE</B> is set to 2. When a <B>Dim</B> is combined with an expression via <B>operator&lt;&lt;(const Expr&lt;&gt;&amp;, const Dim&amp; )</B>, <B>SPACE</B> is incremented, as shown by the return type of that operator. Once the dimension expression is created, it can be passed to the <B>Array</B> constructor.</p>

<p>The <B>Array</B> constructor is a template, parameterized on the type of expression holding the array dimensions, in this case the type is shown in <A HREF="fig1.htm">Figure 1</A>. The <B>Array</B> class is parameterized on <B>SPACE</B>, and the constructor is designed to accept only expressions with matching <B>SPACE</B> parameters. This ensures that compilation will pass only if you have provided the correct number of dimensions to the array you are trying to make.</p>

<p>In the <B>Array</B> constructor, the expression must be evaluated at runtime. The evaluation populates an array, called <B>dims</B>, of <B>size_t</B> elements representing the dimensions. Evaluation is done through <B>operator(size_t**)</B> of each of the expression types - <B>Expr</B>, <B>ToupleExpr</B>, and <B>Dim</B>. In the example shown in <A HREF="fig1.htm">Figure 1</A>, the outer <B>Expr</B> is evaluated first. This immediately passes evaluation to <B>ToupleExpr</B>, which evaluates its two aggregates. The first aggregate is <B>Expr&lt;ToupleExpr&lt;Dim, Dim&gt;&gt;</B> and the second is <B>Dim</B>. The process is repeated again. Eventually, <B>ToupleExpr&lt;Dim, Dim&gt;</B> evaluates its two aggregates, which are both <B>Dim</B>. In <B>Dim::operator()(size_t** x)</B>, the values of the dimension are placed in <B>**x</B>. Next the stack is unwound, and the third <B>Dim::operator()</B> places its value in <B>**x</B>.</p>

<p>Once the <B>dims</B> array is populated, construction of the <B>Array</B> proceeds with allocation of subarrays. This is done with <B>new</B> and the default constructor in the <B>Array</B> class. The subarrays are then initialized via <B>Array::init</B>. Dimension information for the subarrays is passed in via the <B>dims</B> array. The <B>dims</B> array is passed to subarrays as <B>&amp;dims[1]</B> so that each subarray will find its dimension at <B>dims[0]</B>.</p>

<p>The default constructor and the function <B>Array::init </B>are private, to protect users from invoking them. Furthermore, they are in an entirely different class from the executing constructor; the constructor of <B>Array&lt;T, SPACE&gt;</B> calls <B>Array&lt;T, SPACE-1&gt;::init</B>. To allow this call, <B>Array&lt;T, SPACE&gt;</B> declares <B>Array&lt;T, SPACE + 1&gt;</B> as its friend.</p>

<p>A sample array is created as shown in the function <B>main</B> of <A HREF="list5.htm">Listing 5</A>:</p>

<pre>
Array&lt;int, 3&gt;  A1(Dim(a)&lt;&lt; b &lt;&lt; c);</pre>

<p>It is used the same as any static array:</p>

<pre>
A1[a][b][c] = 0;</pre>

<h4><FONT COLOR="#000080">Conclusion</FONT></H4>

<p>The odd syntax of the array definition, especially the unconventional usage of <B>operator&lt;&lt;()</B>, is compensated for by the ease with which static arrays can be replaced by dynamic arrays. It also ensures that your compiler, and not your client, will find any problems in your dimension data. Some of the concepts described here are somewhat esoteric. However, once you reach the initial "ah-ha," they are not so daunting. Furthermore, the user does not have to know about them. Also, because much of the work is done at compile time, they do not pose any runtime overhead above that of the original solution 2.</p>

<p>A few caveats. There are compiler-imposed limits on generating templates. The compiler I used is the HP aC++ version A.01.06 . It has a template generation nesting limit of 255. For the curious, arrays of <B>SPACE</B> greater than 20 became impractical.</p>

<p>Not all compilers support template member functions or partial template specialization, such as the specialization of:</p>

<pre>
template&lt;class T, int S&gt;
    class MyClass
</pre>

<p>to:</p>

<pre>
template &lt;class T&gt;
    class MyClass&lt;T, 1&gt;
</pre>

<p>However, with the completion of the ANSI C++ Standard, such features should quickly become commonplace.</p>

<h4><FONT COLOR="#000080">Acknowledgments</FONT></H4>

<p>Thanks to Raj Persaud, Technical Writer, Oasis Technology, for his comments and suggestions.</p>

<h4><FONT COLOR="#000080">References</FONT></H4>

<p><a name="1"></a>[1]  Scott Meyers. <I>More Effective C++</I> (Addison-Wesley, 1996). Item 30.</p>

<p><a name="2"></a>[2]  Todd Veldhuizen. "Template Metaprograms," <I>C++ Report</I> Vol.7 No.4 (May 1995). Also available through <B>http://monet.uwaterloo.ca/blitz</B>.</p>

<p><a name="3"></a>[3]  Todd Veldhuizen. "Linear Algebra with C++ Template Metaprograms," <I>Dr. Dobb's Journal,</I> August 1996. Also available at <B>http://www.ddj.com/ddj/1996/1996_08/veld.htm</B>.</p>

<p><a name="4"></a>[4]  "Expression Templates," Todd Veldhuizen, <I>C++ Report</I> Vol.7 No.5 (June 1995). Also available through <B>http://monet.uwaterloo.ca/blitz</B>.

<p><i>Zlatko Marcok has a BASc in Computer Engineering from the University of Waterloo, Canada. He has been developing software for seven years and using object-oriented technology for the last two. His interests are in object-oriented software development and in teaching object technology. He can be reached at zlatko.marcok@bell.ca.</i></p>

<h4><a href="../../../source/1998/jul98/marcok.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE></BODY>
</HTML>
