<HTML><HEAD>
<TITLE>July 1998/Dynamic Arrays with Expression Templates/Listing 5</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 5: Merging subarrays, template metaprogramming, and expression templates into a full implementation of the Array class</A></h4>

<pre>
#include &lt;stddef.h&gt;
#include &lt;iostream.h&gt;
     
//Expressions//////////////////////
template &lt;class E, int SPACE&gt;
class Expr {
public:
  Expr(const E&amp; e): _e(e) {}
     
  void operator()(size_t** x)const
  { _e(x);}
     
private:
  E _e;
};
     
class Dim {
public:
  Dim(size_t x):_value(x) {}
  void operator()(size_t** x)const
  {
    **x = _value;
    (*x)++;
  }
  size_t operator()(void) const
  { return _value; }
     
private:
  size_t _value;
};
     
template &lt;class A, class B&gt;
class ToupleExpr {
public:
  ToupleExpr(const A&amp; a,
    const B&amp; b): _a(a), _b(b) {}
     
  void operator()(size_t** x)const
  { _a(x);_b(x);  }
     
private:
  A _a;  B _b;
};
     
template &lt;class A, int SPACE&gt;
Expr&lt;
  ToupleExpr&lt;Expr&lt;A, SPACE&gt;, Dim&gt;,
  SPACE+1 &gt;
operator&lt;&lt;
  (const Expr&lt;A, SPACE&gt;&amp;lhs,
  const Dim&amp; rhs)
{
  typedef
    ToupleExpr&lt;Expr&lt;A, SPACE&gt;, Dim&gt;
    ExprT;
     
  return Expr&lt;ExprT, SPACE+1&gt;
    (ExprT(lhs, rhs));
}
     
Expr&lt;ToupleExpr&lt;Dim, Dim&gt;, 2 &gt;
operator&lt;&lt;
  (const Dim&amp; lhs, const Dim&amp; rhs)
{
  typedef
    ToupleExpr&lt;Dim, Dim&gt; ExprT;
     
  return Expr&lt;ExprT, 2&gt;
    (ExprT(lhs, rhs));
}
     
//Array Classes////////////////////
template&lt;class T, int SPACE&gt;
class Array {
public:
  template &lt;class DE&gt;
    Array(Expr&lt;DE, SPACE&gt; expr)
  {
    size_t dims[SPACE];
    size_t *pdims = dims;
    expr(&amp;pdims);
     
    for(size_t i = SPACE; i--;)
      if (!dims[i])
      { /*handle error*/ }
     
    dim = dims[0];
     
    data = new
      Array&lt;T, SPACE-1&gt;[dim];
     
    for(i = dim; i--;)
      data[i].init(&amp;dims[1]);
  }
     
  ~Array(){ delete [] data; }
     
  Array&lt;T, SPACE-1&gt;&amp;
    operator[](size_t index)
  {
    if (index &gt;= dim)
    { /*handle error*/ }
    return data[index];
  }
     
  const Array&lt;T, SPACE-1&gt;&amp;
    operator[](size_t index)const
  {
    if (index &gt;= dim)
    { /*handle error*/ }
    return data[index];
  }
     
  size_t operator()(void) const
  { return dim; }
     
private:
  Array(): data(NULL), dim(0) {}
     
     
  void init(size_t* dims)
  {
    dim = dims[0];
     
    data = new
      Array&lt;T, SPACE-1&gt;[dim];
     
    for(size_t i = dim; i--;)
      data[i].init(&amp;dims[1]);
  }
     
private:
  size_t dim;
  Array&lt;T, SPACE-1&gt;* data;
friend class Array&lt;T, SPACE+1&gt;;
};
     
template&lt;class T&gt;class Array&lt;T, 1&gt;{
public:
  Array(Dim expr)
  {
    dim = expr();
    completeInit();
  }
     
  ~Array(){ delete [] data; }
     
  T&amp; operator[](size_t index)
  {
    if (index &gt;= dim)
    { /*handle error*/ }
    return data[index];
  }
     
  const T&amp;
  operator[](size_t index)const
  {
    if (index &gt;= dim)
    { /*handle error*/}
    return data[index];
  }
     
  size_t operator()(void) const
  { return dim; }
     
private:
  Array(): data(NULL), dim(0) {}
     
  void init(size_t* dims)
  {
    dim = dims[0];
    completeInit();
  }
  void completeInit(void)
  {  data = new T [dim];}
     
private:
  size_t dim;
  T* data;
friend class Array&lt;T, 2&gt;;
}
     
//Sample Main//////////////////////
int main (void)
{
  size_t a, b, c;
  cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;
     
  Array&lt;int, 3&gt;A1(Dim(a)&lt;&lt; b &lt;&lt; c);
     
  for(a=0; a&lt;A1(); a++)
    for(b=0; b&lt;A1[a](); b++)
      for(c=0; c&lt;A1[a][b](); c++)
        A1[a][b][c] = 0;
     
  Array&lt;float, 1&gt; A2(5);
  A2[2] = 3.14159;
       return 0;
}
     
/* End of File */</pre>
</BODY>
</HTML>
