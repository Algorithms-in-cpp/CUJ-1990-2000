<HTML><HEAD>
<TITLE>July 1998/Dynamic Arrays with Expression Templates/Listing 4</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 4: Creating an expression template</A></h4>

<pre>
#include &lt;iostream.h&gt;
template&lt;class E&gt; class Expr {
public:
  Expr(const E&amp; e): _e(e) {}
  void operator()(void) const
  { _e();}
private:
  E _e;
};
     
class IntExpr {
public:
  IntExpr(int x):_value(x) {}
  void operator()(void) const
  {
    cout &lt;&lt; "IntExpr "
      &lt;&lt; _value &lt;&lt; endl;
  }
private:
  int _value;
};
     
template &lt;class A, class B&gt; class
ToupleExpr {
public:
  ToupleExpr(const A&amp; a,
    const B&amp; b):_a(a), _b(b) {}
  void operator()(void) const
  {  _a(); _b();}
private:
  A _a;  B _b;
};
     
Expr&lt;ToupleExpr&lt;IntExpr, IntExpr&gt; &gt;
operator&lt;&lt;(const IntExpr&amp; lhs,
  const IntExpr&amp; rhs)
{
  typedef
    ToupleExpr&lt;IntExpr,IntExpr&gt;
    ExT;
  return Expr&lt;ExT&gt;(ExT(lhs, rhs));
}
     
template &lt;class Expr&gt;
void foo(Expr expr){
  expr();
}
     
int main()
{
  foo(IntExpr(10) &lt;&lt; 20);
  return 0;
}
/* End of File */</pre></BODY>
</HTML>
