<HTML>
<HEAD>

<TITLE>February 1990/Using 'Screen Machine'</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocfeb.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Development Tools</FONT></H2>

<hr><h2 align="center"><font color="#800000">Using 'Screen Machine'<A name="0053_0029"><A name="0053_0029"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0053_0000"><A name="0053_0000">Rick Knoblaugh</font></h3><hr><blockquote><P>
<P><i><A name="0053_0000"><A name="0053_0000">Rick Knoblaugh is a Systems Engineer specializing in systems programming for PCs. He is the coauthor of Screen Machine, a screen design/prototyping/code generation utility. He may be reached at 15014 River Park Dr., Houston TX 77070.</i></P><P>
Prototypes and code generators can significantly reduce development costs. In this article I'll discuss a recent consulting project and show how the "Screen Machine" &#151; a prototyping tool which I am making available to other programmers as shareware &#151; assisted in prototyping, generating C code for the user interface, and documenting the system.<P>
<h4><FONT COLOR="#000080"><A name="0053_002A">The Application<A name="0053_002A"></FONT></h4></P>
My project was a student grade tracking application for a high school. The software allows student names and grades to be scanned into a PC clone using an optical mark reader, a scanning device which reads forms which have been marked with a pencil. Student names and grades can also be manually entered or edited.<P>
The product enables teachers to maintain their grade books on a PC. Grade tracking and printing tasks, such as letters to parents, are all handled in a menu-driven environment. Thus, the application required menus, data entry screens and help screens.<P>
I began by planning the major components of the software, such as the scanner communications and the decoding of the scanned data. Next I needed to develop a user interface from which all program functions could be selected. For this phase the user interface prototyping software was invaluable.<P>
<h4><FONT COLOR="#000080"><A name="0053_002B">Benefits Of Prototyping<A name="0053_002B"></FONT></h4></P>
In the past programmers who have developed interactive programs, have painstakingly designed the appearance of screen displays on paper and then written the code for these user screens.<P>
Today, many developers are using some type of screen prototyping software. Most prototyping tools permit screen design using a powerful screen editor. Screen editors make it much easier to manipulate blocks of data, to center screen data, and to experiment with color and other aspects of screen appearance.<P>
In addition to a screen editor, prototyping packages usually include some control facility that allows branches to various screens to depend on user input. This allows the developer to create the "look and feel" of a user interface before any code is written. Prototyping also lets the user become more involved in the design of the user interface. More importantly, it allows the programmer to be more creative and to develop an interface that makes sense.<P>
Some prototyping tools also provide code generation for the screen displays. Once the screen design is finalized, the program automatically generates the associated source code.<P>
<h4><FONT COLOR="#000080"><A name="0053_002C">Screen Machine<A name="0053_002C"></FONT></h4></P>
Screen Machine runs under MS-DOS and consists of a screen editor/code generator, a mini-language for prototyping the flow of application screens, and a TSR screen capture program which allows any text mode screen to be imported into the screen editor.<P>
Screen Machine can generate source code for screens in your choice of C, BASIC, Turbo Pascal, 8086 assembler, and dbase. Screen Machine is limited to handling display portions of screens only; it does not handle data input. The prototyping module permits the input of single keystrokes, allowing screens to be displayed when the operator selects a menu option or presses a specific key.<P>
<h4><FONT COLOR="#000080"><A name="0053_002D">Designing Screens With SCREEN<A name="0053_002D"></FONT></h4></P>
I experimented with the appearance of the grade tracking application screens using Screen Machine's screen editor and code generator, SCREEN.EXE. As with most applications, I started with the main menu (<A href="fig1.htm">Figure 1</a>)
.<P>
The SCREEN box drawing feature makes it easy to put borders around menus and other screens. Text can be centered on a given line of the screen or within the graphics character borders of a drawn box. You can even shift the entire screen left or right to aid in centering screen data and attributes. Other screen editor features include: inserting and deleting lines, copying and moving blocks, selection of color, reverse video, undo of last editing function, key stroke macros, and online help.<P>
I saved my designed application screens in Screen Machine screen data files. (Screens can be saved with or without attributes). If no color or reverse video is needed, the screens can be saved as ASCII text files.<P>
<h4><FONT COLOR="#000080"><A name="0053_002E">Prototyping The Interface<A name="0053_002E"></FONT></h4></P>
Once the data files for all application screens are complete, the programmer develops an executable simulation of the application interface using the Screen Machine's mini-prototyping language module, SHOW.COM. The completed simulation will display the main menu, accept keystrokes, and based on these keystrokes, select other application screens for similar processing.<P>
The SHOW mini-language consists of display/keystroke input statements, <I>case</I> statements, and <I>goto</I> and <I>gosub</I> statements. The heart of these is the display/keystroke input statement, whose syntax is:<P>
<pre>Filespec [basekey max] [/Tn]
[/An] [/Xn]</pre>
<I>Filespec</I> names the screen data file to be displayed. (e.g. I saved my main menu screen data file in C:\GRADE\MAINMENU.SRN.) The <I>basekey</I> is optional and represents the lowest-valued key accepted as input from the user when the screen is displayed. The <I>basekey</I> is one of these:<P>
<UL><li>A specific key, enclosed in quotation marks (e.g. <I>"1"</I>).</li>
<li>A decimal scan code value (unquoted) (e.g. 59 for the <I>&lt;F1&gt;</I> key).</li>
<li>An unquoted asterisk (*), which is taken to mean "any key".</li></li></UL>
The <I>max</I> cannot be specified unless <I>basekey</I> is specified; it is the highest-valued key accepted as input. If input from a given screen falls neatly within a range of keystrokes (e.g. if on my main menu only <I>"1"</I> to <I>"9"</I> were used, and not <I>&lt;Alt&gt;&lt;H&gt;)</I>, specifying <I>basekey</I> and <I>max</I> eliminates all unwanted keystrokes.<P>
The <I>T</I> switch specifies a time value in seconds &#151; useful for creating timed "slide shows". SHOW will display the screen data file and then wait <I>n</I> seconds (0-255) before displaying the next screen.<P>
The <I>A</I> switch displays a screen data file in a certain attribute. This is generally only used if you have not saved attributes in your screen data files.<P>
The <I>X</I> switch is the key on which a "getout" is performed. <I>"n"</I> is specified in the same manner as <I>basekey</I> and <I>max</I>, i.e. either a quoted character or an unquoted scan code. A "getout" is accepted as a valid key press and performs any pending return or else returns to the operating system.<P>
<I>Case</I> statements allow branches to other portions of a <I>SHOW</I> command file to depend upon keystrokes input via the display/keystroke input statement. The syntax for the <I>case</I> statement is:<P>
<pre>case [key] [range] [S: G: R:]
[label name]</pre>
If a keystroke matches <I>key</I> or falls within <I>range</I>, control is transferred to <I>label name</I>. If S: is present, the transfer is executed as a<I> gosub</I>, meaning the address of the next display/keystroke input statement is put onto the "stack" and control is transferred to the label. <I>G:</I> does a <I>goto</I> transfer to the label. <I>R:</I> returns to the label (similar to BASIC).<P>
The syntax for labels is the same as in MS-DOS batch files (i.e. a "<I>:</I>" followed by a label name).<P>
The grade tracking <I>SHOW</I> command file appears in <A href="list1.htm">Listing 1</a>.
 The top of the command file displays the main menu which is stored in the Screen Machine screen data file, MAINMENU.SRN. The asterisk after the file name instructs the SHOW program to wait after displaying the main menu until some key is pressed. The /<I>X</I> indicates that if a <I>9</I> is pressed, the SHOW command file should terminate and return to MS-DOS. The <I>case</I> statements perform <I>gosubs</I> to other labels in the command file. For example, if the user presses a <I>6, SHOW</I> will <I>gosub</I> to the label <I>otherprint</I> where the print options menu is displayed and processed.<P>
The strange looking <I>NUL</I> screen data file name followed by the <I>case * G:top</I> is necessary because the limited <I>SHOW</I> command set only allows unconditional branching to be initiated in <I>case</I> statements. Case statements can only be performed after a screen data file has been displayed by a display/keystroke input statement. The reserved screen data file <I>NUL</I> only satisfies the <I>case</I> statement by simulating a screen display and a key stroke entry.<P>
The asterisk indicates that if any key is pressed, a <I>goto</I> should be performed to the label <I>top</I>. After the appropriate <I>gosub</I> is processed from the main menu, control transfers back to the top of the command file.<P>
<h4><FONT COLOR="#000080"><A name="0053_002F">Generating The Source Code<A name="0053_002F"></FONT></h4></P>
A SCREEN program configuration option allows you to select the language to be generated.<P>
When SCREEN generates C code, it declares a structure _<I>scrn</I> and defines a global array of structures of type _<I>scrn</I> (<A href="list2.htm">Listing 2</a>)
. Notice that the array of structures is named with <I>screen_</I> followed by the name of the screen data file to prevent naming conflicts.<P>
After including these statements in your program, you can either write a routine to display the arrays of structures, or include the routine supplied with Screen Machine in your program as in <A href="list3.htm">Listing 3</a>.
<P>
The routine uses the BIOS software interrupt <I>10h</I> function <I>9</I> to display the arrays of structures. Function <I>9</I> writes a character and attribute at the current cursor position. The Microsoft C library function _<I>settextposition</I> is used to position the cursor.<P>
The function <I>disp_screen</I> is called passing the name of the array of structures to be displayed and a flag indicating whether the screen should be cleared prior to displaying the data. <I>disp_screen</I> clears the screen using the background color defined in the variable <I>color_back_grnd</I>. This should be set to the desired background color.<P>
<h4><FONT COLOR="#000080"><A name="0053_0030">Data Entry<A name="0053_0030"></FONT></h4></P>
Because Screen Machine handles only display portions of screens, I used my own general-purpose data entry routines for those portions of the application where data entry was required.<P>
<h4><FONT COLOR="#000080"><A name="0053_0031">Screen Capture<A name="0053_0031"></FONT></h4></P>
A third Screen Machine module CAPTURE.COM is a TSR program that allows text mode screen displays to be captured and stored on disk. This utility makes it easy to include application screens, complete with sample data in the users manual.<P>
CAPTURE takes over the shift print screen function (interrupt <I>5</I>). When the program is invoked and becomes resident, command line options specify the file name under which screen data files are to be stored and whether or not attributes should be included in the screen data files. If attributes are not desired, screen data is stored in ASCII text files.<P>
Captured screens can also be used as input into the screen editor/code generator. This means that any text mode screen can be translated into source code which will display that screen in one or all five supported programming languages. This capability can be used when translating an application from one language to another or if you want to generate source code for screens created with a prototyping tool that doesn't support source code generation.<P>
<h4><FONT COLOR="#000080"><A name="0053_0032">Conclusion<A name="0053_0032"></FONT></h4></P>
Screen Machine does several things satisfactorily. Its lack of support for input fields may preclude your using it for some applications. Certainly, if you need really detailed simulations of your programs such as sound effects and emulation of disk I/O, you should use a more full-featured commercial prototyping program. Also, if you require a graphics interface then Screen Machine will not help you.<P>

<h4><a href="../../../source/1990/feb90/knoblaug.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
