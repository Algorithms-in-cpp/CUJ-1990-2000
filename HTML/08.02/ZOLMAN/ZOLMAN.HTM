<HTML>
<HEAD>

<TITLE>February 1990/Tools For MS-DOS Directory Navigation</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocfeb.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">Tools For MS-DOS Directory Navigation<A name="005F_0033"><A name="005F_0033"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="005F_0000"><A name="005F_0000">Leor Zolman</font></h3><hr><blockquote><P>
<P><i><A name="005F_0000"><A name="005F_0000">Leor Zolman wrote "BDS C", the first C compiler designed exclusively for personal computers. Since then he has designed and taught programming workshops and has also been involved in personal growth workshops as both participant and staff member. He STILL doesn't hold any degrees. His latest incarnation is as a CUJ staff member.</i></P><P>
As an MS-DOS user with a large amount of hard disk space to manage, I frequently find myself cd-ing all over the system in pursuit of source files and data. The standard MS-DOS command processor COMMAND.COM's repertoire of options for facilitating system navigation is bare-bones and full of idiosyncrasies. For instance, to change directly to an arbitrary drive <I>and</I> user area, the user must enter the drive selector and path specification as two separate commands. Switching from the root directory of drive C: to the \<I>work</I> directory on drive D: requires the command sequence:<P>
<pre>C:\&gt;d:            (select D:)
D:\&gt;cd work       (change to the desired directory)
D:\WORK&gt;...</pre>
(All examples assume the PROMPT environment variable is set to <I>$p$g</I> so that COMMAND.COM will display the current path as part of the system prompt.)<P>
If the user attempts to select a different drive and a path with one command, he will find that apparently nothing has happened:<P>
<pre>C:\&gt;cd d:\work
C:\&gt;...</pre>
Actually, the system <I>has</I> selected the specified path to be active on the specified drive, but the specified drive is not selected to be current! The system maintains a current working directory for each logical drive. If the user were then to select that other drive, i.e.,<P>
<pre>C:\&gt;d:
D:\WORK&gt;...</pre>
then the selected path would show up as the current directory.<P>
Another "missing" feature in the standard command environment is a simple directory-name aliasing mechanism, so that one can switch quickly to commonly-used directories even if the path name happens to be lengthy. MS-DOS does provide a simplistic facility (the <I>subst</I> command) to relate an arbitrary path to a new drive designator, but <I>subst</I> isn't really adequate: the alias name is limited to a single letter and there is no facility for viewing all active assignments. I would prefer to have the ability to assign arbitrary mnemonics to arbitrary paths, and to have those mnemonics be recognized when specified in <I>cd</I> commands.<P>
I would also like some clean mechanism for instantly switching to the previous directory &#151; even if I've forgotten what it was.<P>
<h4><FONT COLOR="#000080"><A name="005F_0034">The Answer<A name="005F_0034"></FONT></h4></P>
To address these needs, I wrote an extended <I>CD</I> command that supports combined drive <I>and</I> path specifications and a companion command that returns the user to the previous directory (taking the directory specification from information recorded in an environment variable by the extended <I>cd</I> command). The <I>cd</I>-replacement stores the old full path name in an environment variable before switching to a new specified path, and the companion command reads this environment variable and returns to the original directory upon request. Since the extended <I>cd</I> must modify its parent's environment, it uses the functions for modifying the master environment which appeared in the July 1989 issue of CUJ.<P>
<I>CDE</I> (for <I>CD Extended</I>) works similarly to MS-DOS's <I>cd</I> command, except for the following special cases:<P>
<UL><li>When both a drive designator and a path name are specified, the specified drive is immediately selected together with the path.</li>
<li>When the argument is identified as the name of an existing MS-DOS environment variable, the named variable is assumed to contain a path name to be substituted as the path to switch to.</li></UL>
In support of the "return to previous directory" feature, I decided to implement a "directory stack" mechanism. This stack is maintained via environment variables, and the user may select the naming convention for those variables by customizing the <I>#define</I> statements in CDERET.H. (See <A href="list1.htm">Listing 1</a>.
)<P>
One master environment variable (I call it <I>CHAINS</I>) specifies the maximum size of the directory stack. When <I>CDE</I> is first invoked, <I>CDE</I> checks to see if the <I>CHAINS</I> variable has been previously defined in the environment; if so, its current value is used. If not, <I>CDE</I> initializes <I>CHAINS</I> to a default value (also specified by a definition in the header file). Thus, the user has the option of setting the value of <I>CHAINS</I> explicitly (using the standard built-in command <I>set</I>) or allowing <I>CDE</I> to handle the initialization of <I>CHAINS</I> automatically. (See <A href="list2.htm">Listing 2</a>.
)<P>
A "stack" of size <I>CHAINS</I> is represented by a set of environment variables named by a common base name (I use <I>CHAIN</I>) with position numbers appended. Thus, with <I>CHAINS=3</I>, after several <I>CDE</I>s the environment variables <I>CHAIN1, CHAIN2</I> and <I>CHAIN3</I> would be created to store the pertinent path names in the environment.<P>
Every time <I>CDE</I> is used to change directories, it "pushes" the old current working directory "on the stack" by reassigning all the relevant environment variables. <I>CHAIN1</I> is always the top of the stack, <I>CHAINn</I> (where <I>n</I> = <I>CHAINS</I>) is the base. Since there is no disk activity involved, this process is quite fast.<P>
The <I>RET</I> command (<A href="list3.htm">Listing 3</a>)
 "returns" to the previous directory (either specified by <I>CHAIN1</I> or undefined), then "pops" the stack by reassigning all the active environment variables in reverse order.<P>
As long as <I>CHAINS</I> is greater than <I>1,</I> then the directory stack behaves as described above and successive uses of <I>RET</I> unravel the stack.<P>
When <I>CHAINS</I> is set to <I>1, RET</I> considers this a special case: after returning to the directory specified by <I>CHAIN1, CHAIN1</I> is reset to the name of the directory that was current at the time of the <I>RET</I> call. Thus, repeated uses of <I>RET</I> with <I>CHAINS</I> equal to <I>1</I> effect a "toggle" between two directories. Depending on the way your system is organized, this toggling mechanism may be more useful to you than the directory stack mechanism.<P>
<h4><FONT COLOR="#000080"><A name="005F_0035">Icing<A name="005F_0035"></FONT></h4></P>
The directory aliasing feature is activated by simply setting an environment variable to the full path desired, then using that environment variable name as a parameter to <I>CDE</I>. For example,<P>
<pre>C:\&gt;set WORK=d:\project\subproj\
                new\testing
C:\&gt;cde work
D:\PROJECT\SUBPROJ\NEW\TESTING&gt;...</pre>
As a special case, for convenience, giving the <I>CDE</I> command without any arguments will cause <I>CDE</I> to look for a special environment variable (I call it <I>HOME</I>) and switch to the directory it specifies. If you spend much of your time headquartered at one particular directory, this is an easy way to go back to it from anywhere in the system, regardless of the state of the directory stack. The current directory at the time this special form of <I>CDE</I> is given will, as usual, be recorded in the environment by <I>CDE</I> in case you want to use <I>RET </I>from the <I>HOME</I> directory.<P>
When setting environment variables in general, be careful not to type spaces between the end of the variable name and the = sign. DOS would keep the space as part of the variable name, and things wouldn't work. The <I>CDE</I> program will handle spaces after the = sign (and before the text) with no problem, but it's probably safer to be consistent and use no spaces whatsoever.<P>
<h4><FONT COLOR="#000080"><A name="005F_0036">Implementation<A name="005F_0036"></FONT></h4></P>
Both CDE.C and RET.C have two phases of operation: the first phase performs the required drive/directory selection, and the second phase updates the related environment variables. If the first phase fails, then the programs exit immediately; there's no need to update environment variables if the current directory wasn't changed.<P>
To obtain the name of the target directory in phase one, <I>RET</I> simply accesses the <I>CHAIN1</I> environment variable. If the variable does not exist, then <I>CDE</I> has never been run and an appropriate message is displayed. If <I>CHAIN1</I> exists, it specifies the target path. CDE.C gets its target path name from the command line. If the name happens to be the name of an active environment variable, then the value of the variable with that name is used to obtain the target path.<P>
The directory selection process itself is identical for both commands and takes two steps: the selection of the logical drive and the selection of the desired directory. The drive is selected first; if that fails, we quit and no harm has been done. Once the new drive has been selected, then the new path is selected. If <I>that</I> fails, we have to go back and reinstate the original drive. If it succeeds, we're done with phase one.<P>
Phase two for RET.C is relatively straightforward. If <I>CHAINS</I> is equal to <I>1,</I> then the <I>CHAIN1</I> environment variable is set to the original current directory name (before phase one) in order to support the toggling feature. For other values of <I>CHAINS</I>, the directory stack is "popped" by looping to reassign each <I>CHAINn</I> variable to the value of its next higher counterpart.<P>
<I>CDE</I>'s phase two begins by making sure the <I>CHAINS</I> environment variable, used to specify the stack size, is present and initialized. If it exists, its value is assigned to the program variable <I>chaincnt</I>. If <I>CHAINS</I> does not exist, then it is initialized to the default value (specified by the symbolic string constant <I>DEFAULT_CHAINS</I>).<P>
Finally the directory stack is "pushed" by copying each <I>CHAINn</I> variable (for <I>n</I> = <I>1</I> to <I>CHAINS-1</I>) to its next higher counterpart. <I>CHAIN1</I> is a special case; it is assigned to the name of the current directory before phase one was completed.<P>
<h4><FONT COLOR="#000080"><A name="005F_0037">Configuration<A name="005F_0037"></FONT></h4></P>
The following symbolic constants may be changed to suit your own preferences:<P>
<I>CHAINS_VAR</I> The master directory chain size control variable<P>
<I>CHAIN_BASE</I> The "base" name of directory stack variables<P>
<I>DEFAULT_CHAINS</I> The default value for <I>CHAINS_VAR</I> (in quotes)<P>
<I>HOME_NAME</I> The name of the <I>env. </I>variable for home directory<P>
The CDE.EXE and RET.EXE commands should be placed in a directory that is somewhere in your system search path. (I use <I>c:\bin</I> for all my personal utilities.)<P>
<h4><FONT COLOR="#000080"><A name="005F_0038">System-Dependent Functions<A name="005F_0038"></FONT></h4></P>
The two areas of high compiler-dependency in this application, direct console I/O and DOS logical drive selection, have been isolated in a separate utility library named UTIL.C (<A href="list4.htm">Listing 4</a>)
. The only support function required by the functions in UTIL.C is the <I>bdos</I> function typically supplied with most popular compiler libraries.<P>
If you need to write the <I>bdos</I> function yourself, the prototype is shown at the top of the UTIL.C source file. It takes an interrupt (<I>int 21h</I>) function number, a <I>DX</I> register value, and an AL register value as parameters (although the <I>AL</I> parameter is not needed for this application). The <I>bdos</I> function can easily be written in terms of any of the more general operating system interface functions (<I>int86()</I>, <I>intdos()</I>, etc) you may have available.<P>
To keep the commands' .EXE file sizes as short as possible, all messages are displayed on the console using direct console I/O calls (through <I>bdos</I> facilities) so as not to require the file I/O support to be dragged into the linkages. The UTIL.C functions <I>cputs ()</I> and <I>putch ()</I> are similar to their namesakes in the Microsoft library and are provided here for the benefit of users of compiler packages that do not include these functions.<P>
The <I>setdrive()</I> function I provide is cleaner   than   Microsoft's <I>_dos_setdrive()</I>.<P>
The library functions <I>chdir()</I> and <I>getcwd()</I> are used by the commands and should be available in your compiler's standard library.<P>
When compiled with optimization, both CDE.EXE and RET.EXE weigh in at just over 6K, so their load-and-run time is negligible.<P>
<h4><FONT COLOR="#000080"><A name="005F_0039">Caveats<A name="005F_0039"></FONT></h4></P>
The following line in your CONFIG.SYS file will insure plenty of environment space for the CHAIN variables:<P>
<pre>shell = c:\command.com /p /e:1500</pre>
Due to an as-of-yet inexplicable MS-DOS anomaly, specifying too small a value for the environment (<I>xxxx</I> in <I>/e:xxxx</I>) may cause the system to hang up after <I>CDE</I> or <I>RET</I> completes execution. The message I've gotten says something about COMMAND.COM being "invalid". While this has never been destuctive, it has required a re-boot of the system. The only way I've found (so far) to avoid this problem is to allocate plenty of extra environment space. If anyone has a more "bulletproof" solution, please let us know here at CUJ.<P>
I recommend highly that one modification be made to the Master Environment package as listed in the 7/89 CUJ: the environment variable name should be converted to upper case both in the <I>m_getenv()</I> and <I>m_delenv()</I> functions. As written, only the <I>m_putenv()</I> function converts the name to upper case, and this causes failure when either <I>m_getenv()</I> or <I>m_delenv</I> are called with lower-case variable names. To make this change, alter the lines reading:<P>
<pre>n = name;</pre>
to:<P>
<pre>n = strupr(name);</pre>
There is one such line near the beginning of both the <I>m_getenv()</I> and <I>m_putenv()</I> functions.<P>
<h4><FONT COLOR="#000080"><A name="005F_003A">Linking<A name="005F_003A"></FONT></h4></P>
The commands to compile and link CDE.C and RET. C using Microsoft C are shown at the top of the source file listings. I arbitrarily named the master environment package ENVLIB.OBJ, so including <I>envlib</I> on the <I>qcl</I> command line links in the object module.<P>
<h4><FONT COLOR="#000080"><A name="005F_003B">Summary<A name="005F_003B"></FONT></h4></P>
The <I>CDE</I> and <I>RET</I> commands provide a clean, quick and convenient mechanism for alleviating some of MS-DOS's command processor limitations. Although there are plenty of full-blown command processor replacements, shells and special-purpose TSRs out there (even for free) that offer alternative ways to "get around" your DOS system, few (if any) of these can offer 100% compatibility with all other packages and TSRs, zero bytes of system RAM overhead (unless you count the few extra bytes of environment space required), and virtually instantaneous gratification. And you even get the source code!<P>

<h4><a href="../../../source/1990/feb90/zolman.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>

