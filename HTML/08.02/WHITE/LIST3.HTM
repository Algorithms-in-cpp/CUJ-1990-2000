<HTML><HEAD><TITLE>February 1990/Object-Oriented Programming As A Programming Style/Listing 3</TITLE></HEAD><BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4><A name="005D_004A"><A name="005D_004A">Listing 3<A name="005D_004A"></h4><P>
<pre>001  #include &lt;stdlib.h&gt;
002  #include &lt;stdarg.h&gt;
003  #include &lt;stdio.h&gt;
004  #include "utility.h"
005  #include "obj.h"
006
007  void new_class(CLASS *class, CLASS *super_class,
008    int nbr_methods, int size)
009  {
010      int x;
011      class-&gt;nbr_methods = nbr_methods;
012      class-&gt;size = size;
013      class-&gt;method =
014        (void (**)())malloc
015          ((unsigned)(nbr_methods * sizeof (void (*)())));
016      for (x = 0; x &lt; nbr_methods; ++x)
017          class-&gt;method[x] = (void *)NULL;
018      if (super_class != NULL)
019          for (x = 0; x &lt; super_class-&gt;nbr_methods &amp;&amp;
020            x &lt; class-&gt;nbr_methods; ++x)
021              class-&gt;method[x] = super_class-&gt;method[x];
022  }
023
024  void free_class(CLASS *class)
025  {
026      free(class-&gt;method);
027  }
028
029  /* register a method with a class */
030  void reg_method(CLASS *class, int mth, void (*fcn)())
031  {
032      if (mth &lt; 0 || mth &gt;= class-&gt;nbr_methods)
033          fatal("attempting to register an invalid method");
034      class-&gt;method[mth] = fcn;
035  }
036
037  /* initialize an object */
038  void new_object(OBJECT *obj, CLASS *class)
039  {
040      void *v;
041      obj-&gt;class = class;
042      v = malloc((unsigned)class-&gt;size);
043      if (v == NULL)
044          fatal("smalloc failed");
045      obj-&gt;data = (void *)((unsigned char *)v);
046  }
047
048  /* send a message to an object */
049  void message(OBJECT *obj, int msg, ...)
050  {
051      va_list arg_ptr;
052      va_start(arg_ptr, msg);
053      if (obj-&gt;class-&gt;method[msg) == NULL)
054          fatal("no method for this class");
055      (*obj-&gt;class-&gt;method[msg])(obj, arg_ptr);
056      va_end(arg_ptr);
057  }
058
059  /* free the data allocated for an object */
060  void free_object(OBJECT *obj)
061  {
062      free(obj-&gt;data);
063  }
</pre>
</BODY>
</HTML>
