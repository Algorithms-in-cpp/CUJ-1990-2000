

<HTML>
<HEAD>

<TITLE>March 1993/Stepping Up To C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmar.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Stepping Up To C++<A name="00CA_0051"><A name="00CA_0051"></font></h2><P>
<h3 align="center"><A name="00CA_0000"><A name="00CA_0000">Inheritance, Part 1</h3><P>
<h3 align="center"><font color="#800000">Dan Saks</font></h3><hr><blockquote><P>
<P><i><A name="00CA_0000"><A name="00CA_0000">Dan Saks is the founder and principal of Saks &amp; Associates, which offers consulting and training in C++ and C. He is secretary of the ANSI and ISO C++ committees, and contributing editor for the Windows/DOS Developer's Journal. Dan is coauthor of C++ Programming Guidelines, and codeveloper of the Plum Hall Validation Suite for C++ (both with Thomas Plum). You can reach him at 393 Leander Dr., Springfield OH, 45504,4906, by phone at (513)324-3601, or electronically at dsaks@wittenberg.edu.</i></P><P>
Although they don't always agree on the exact meaning of the terms, most people who know something about object-oriented programming agree that it employs at least three techniques:<P>
<UL><li>Data abstraction</li>
<li>Inheritance</li>
<li>Polymorphism</li></UL>
Thus far in my column, I've only covered C++ features that support data abstraction &#151; namely, classes, access specifiers, constructors and destructors, and features such as references and operator overloading that help you build more intuitive abstractions. In this article, I'll introduce inheritance.<P>
Some of you may be wondering why I've waited so long to deal with inheritance. I think inheritance is useful, but not nearly as useful as classes and access specifiers. Many programmers overrate its value and consequently misuse it. I use inheritance sparingly in my own work.<P>
The other reason I've postponed discussing inheritance is that inheritance is a technique for defining new classes from existing classes. As such, understanding inheritance requires an understanding of all of those features I listed above. Now that I've covered them, I'll take on inheritance.<P>
<h4><FONT COLOR="#000080"><A name="00CA_0052">The Basics<A name="00CA_0052"></FONT></h4></P>
Inheritance is a technique for creating a new class, called the <I>derived class</I>, from an existing class, called the <I>base class</I>. The derived class definition looks like any other base class definition, except for the presence of a base class specifier appearing immediately after the derived class name. For example, the definition<P>
<pre>class D : public B
{
//...
};</pre>
includes the base class specifier <I>: public B</I>, so that <I>class D</I> is derived from (a previously defined) base class <I>B</I>. The keyword <I>public</I> after the colon (<I>:</I>) indicates that <I>B</I> is a public base class of <I>D</I>, or conversely, that <I>D</I> is publicly-derived from <I>B</I>. Base classes can also be private or protected. For the moment, I will only consider public base classes.<P>
The derived class inherits nearly all the members (data and functions) of the base class even though the derived class definition doesn't even mention the inherited members. You add more members to a derived class by simply declaring them inside the class body. For example, if you define class <I>B</I> as<P>
<pre>class B
{
public:
   int f();
   void g(int);
private:
   int i, j;
};</pre>
then<P>
<pre>class D : public B
{
public:
   double h(double);
private:
   double x;
};</pre>
defines class <I>D</I> inheriting the members of <I>B</I> aing a public member function <I>h(double)</I> and a private data member <I>x</I>. The inherited public members &#151; functions <I>f()</I> and <I>g</I>(<I>int</I>) &#151; become public members of <I>D</I>. The inherited private members &#151; data members <I>i</I> and <I>j</I> &#151; become part of class <I>D</I>, but remain private to the <I>B</I> part of <I>D</I>. A <I>D</I> member function, like <I>h</I>(<I>double</I>), can only access <I>i</I> and <I>j</I> via public members (and friends, if any) of <I>B</I>. You may be surprised by this restriction, but if derived classes could directly access private base class members, then anyone could violate the encapsulation of a class by simply deriving another class from it.<P>
A derived class can be a base class for further derived classes. For example,<P>
<pre>class F : public D
{
public:
   char *p;
};</pre>
derives class <I>F</I> from <I>D</I>, adding a public data member <I>p</I> to <I>F</I>.<P>
<h4><FONT COLOR="#000080"><A name="00CA_0053">Is-A Relationships<A name="00CA_0053"></FONT></h4></P>
Inheritance provides a simple, explicit notation for creating specialized versions of broader classes. Inheritance defines an Is-A relationship (some people prefer Is-A-Kind-Of for added clarity): an object of a derived class <I>is</I> an object of the base class. A derived class object has everything that a base class object has, and usually more. It never has less.<P>
For example, Stroustrup (1991) introduces inheritance by sketching an example dealing with employees and their managers. Class <I>employee</I> defines the representation for each employee, with data such as name, age, and salary. Since a manager is an employee (with additional powers and responsibilities), Stroustrup derives class <I>manager</I> from class <I>employee:</I><P>
<pre>class manager : public employee
{
   // additional members that
   // distinguish managers from
   // other employees
};</pre>
Since a manager is an employee, any function <I>f</I> with a formal parameter of type <I>employee</I> or <I>employee</I> &amp; will accept an actual argument of type <I>manager.</I> For example, given<P>
<pre>void f(employee &amp;e);
manager m;</pre>
the call <I>f(m)</I> binds the formal parameter <I>e</I> to actual argument <I>m</I>. Inside <I>f, e</I> appears to refer to an employee, which it does. It just happens that in this particular call, <I>e</I> refers to an employee that is also a manager. But <I>f</I> can't tell that <I>e</I> actually refers to a manager; it can only access the employee part of the object.<P>
As a general rule, whenever class <I>B</I> is a public base of class <I>D</I>, you can:<P>
1.     Convert a <I>D</I> * to a <I>B</I> * (a pointer to a derived object to a pointer to a base object)<P>
2.     Convert a <I>D &amp;</I> to a <I>B &amp;</I> (a reference to a derived object to a reference to a base object)<P>
3.     Initialize a <I>B &amp;</I> to refer to a <I>D</I><P>
These conversions are transitive. That is, if class <I>D</I> is a public base of class <I>F</I>, then you can convert an <I>F</I> * to either a <I>D</I> *or a <I>B</I> *, or an <I>F &amp;</I> to either a <I>D &amp;</I> or a <I>B &amp;</I>. For example, given<P>
<pre>class B {...};
class D : public B {...};
class F : public D {...};
B b;
D d;
F f;</pre>
then all of the following operations are valid:<P>
<pre>B *pb = &amp;d;   // ok, a D* is a B*
D *pd = &amp;f;   // ok, an F* is a D*
pb = &amp;f;      // ok, an F* is a D*, which is a B*
D &amp;rd = f;    // ok, an F is a D
B &amp;rb1 = rd;  // ok, a D is a B
B &amp;rb2 = f;   // ok, an F is a D, which is a B</pre>
Although an object of a derived class is an object of its base class, the opposite is not true. Thus, you cannot convert a pointer (or reference) to a base object to a pointer (or reference) to a derived object, unless you use a cast. For example, given the immediately preceding declarations, then<P>
<pre>pd = pb;       // error, a B* is not a D*
pd = (D *)pb;  // ok, but suspect
F &amp;f = b;      // error, a B is not an F</pre>
In general, C++ also lets you initialize a base class object with a derived class object, as in<P>
<pre>D d;
//...
B b(d);</pre>
or simply assign a derived class object to a base class object, as in<P>
<pre>b = (d);</pre>
(I detailed the differences between initialization and assignment in "Initialization vs. Assignment," <I>CUJ</I>, September 1992.) Both the initialization and the assignment copy only the inherited <I>B</I> members from <I>d</I> to <I>b</I>.<P>
The <I>ARM</I> (Ellis &amp; Stroustrup 1990) doesn't specifically permit conversion from a derived class object to a base class object, but it falls out from the reference conversions. When you write<P>
<pre>B b(d);</pre>
C++ translates this to a call to <I>B</I>'s copy constructor, typically declared as<P>
<pre>B::B(const B &amp;br);</pre>
The constructor call binds formal parameter <I>br</I> (a reference to a base object) to actual argument <I>d</I> (a derived class object), as permitted by in rule 3 previously mentioned. Similarly, when you write the assignment<P>
<pre>b = d;</pre>
C++ translates this to a call to <I>B</I>'s assignment operator:<P>
<pre>B &amp;B::operator=(const B &amp;br);</pre>
Again, calling this assignment operator binds <I>br</I> to <I>d</I>, employing the same reference conversion.<P>
<h4><FONT COLOR="#000080"><A name="00CA_0054">How It Works<A name="00CA_0054"></FONT></h4></P>
Some insight into how C++ implements inheritance may help you understand and remember the conversion rules a bit better. Although C++ imposes some restrictions on the storage layout for derived class objects, it doesn't require that an implementation use any particular layout strategy.<P>
<A href="fig1.htm">Figure 1</a>
shows a simple base class <I>B</I> and a typical storage layout for an object of class <I>B</I>. Notice that only the data fields occupy storage in the object. C++ resolves <I>B</I>'s member function calls at translation time, so it need not store any information about the member functions in the object.<P>
<A href="fig2.htm">Figure 2</a>
shows a typical layout for a class <I>D</I> derived from class <I>B</I> in <A href="fig1.htm">Figure 1</a>.
 The <I>B</I> sub-object (the <I>B</I> part) occupies the beginning (the lowest addresses) of a <I>D</I> object. Thus, converting a pointer (or reference) to a <I>D</I> into a pointer (or reference) to a <I>B</I> doesn't require any generated code; it's strictly a compile-time transformation.<P>
Calling a function,<P>
<pre>void f(B &amp;br);</pre>
with an actual argument <I>d</I> of type <I>D</I> binds <I>br</I> to the <I>B</I> part of <I>d</I>. Typical generated code simply assigns the address of <I>d</I> to the pointer that implements <I>br</I>. No pointer arithmetic or indirection is needed.<P>
The body of the function can't tell whether <I>br</I> is bound to a <I>B</I> or to an object of a class derived from <I>B</I>. But, since all classes derived from <I>B</I> have at least everything that <I>B</I> has, <I>f</I> can safely access all members of <I>br</I>. That there might be more members beyond the fringes of <I>B</I> is not a concern.<P>
This model also illustrates why you generally can't convert in the opposite direction, that is, from pointer (or reference) to base to pointer (or reference) to derived. For example, calling a function,<P>
<pre>void g(D &amp;dr);</pre>
with an actual argument <I>b</I> of type <I>B</I> attempts to bind <I>dr</I> to <I>b.</I> But, referring to <A href="fig1.htm">Figure 1</a>
and <A href="fig2.htm">Figure 2</a>,
 a <I>B</I> object doesn't have an <I>x</I> member, so accessing <I>dr.x</I> inside <I>g</I> would reach beyond the end of <I>b</I> into uncharted territory. Thus, converting from base to derived violates the type safety rules in C++. You can't make the call without casting the actual argument <I>b</I> to type <I>D</I>.<P>
<h4><FONT COLOR="#000080"><A name="00CA_0055">Overriding<A name="00CA_0055"></FONT></h4></P>
A derived class can redefine a function inherited from a base case, as shown in <A href="list1.htm">Listing 1</a>.
 Here, the base class <I>B</I> defines two functions, <I>f</I> and <I>g</I>. The derived class <I>D</I> inherits both functions from <I>B</I>, but then replaces <I>g</I> with a definition of its own. This replacement is called <I>overriding</I>.<P>
<A href="fig3.htm">Figure 3</a>
shows the output from the program in <A href="list1.htm">Listing 1</a>.
 Calling <I>d.f</I> calls the <I>f</I> inherited from <I>B</I>. The translator need not generate any new code for <I>D</I>'s <I>f</I>; it can simply invoke the code already generated for <I>B</I>'s <I>f</I>, passing the address of <I>d</I>'s <I>B</I> sub-object as the value of <I>this</I>. However, since <I>D</I>'s <I>g</I> overrides the <I>g</I> inherited from <I>B</I>, calling <I>d.g</I> calls a different function than calling <I>b.g.</I><P>
When a derived class overrides an inherited public function, that function is hidden, but not completely inaccessible. The derived class can still access the hidden member by using the scope resolution operator, <I>::</I>, and explicitly qualifying the member name with the base class name, as shown in <A href="list2.htm">Listing 2</a>.
 In this example, derived class <I>D</I> overrides inherited functions and <I>g</I> and <I>h</I>. The call to <I>B::g</I> inside <I>D</I>'s <I>g</I> calls <I>B</I>'s <I>g</I>, as shown in the program output in <A href="fig4.htm">Figure 4</a>.
 Without the qualifier <I>B::</I>, a call to <I>g</I> inside <I>D</I>'s <I>g</I> would be a recursive call to <I>D</I>'s<I> g.</I><P>
The body of <I>D::h </I>in <A href="list2.htm">Listing 2</a>
shows another technique for calling an overridden member function using a cast. Remember that, inside the body of a member function, a call to a member function like <I>h</I> is actually a call to <I>this-&gt;h</I>. In a <I>D</I> member function, the type of is <I>D const</I> *. By casting <I>this</I> to <I>B</I> * (which is a valid conversion from pointer to derived to pointer to base) inside <I>D::h</I>, I forced the translator to look for <I>h</I> in the scope of <I>B</I>, and bypass looking in the scope of <I>B</I>. It works, but I recommend avoiding the cast and using the scope resolution operator as I did in <I>D::g</I>.<P>
A derived class can override inherited data members as well as function members. For example, consider<P>
<pre>class B
   {
public:
   int n;
   // ...
   };

class D : public B
   {
public:
   long n;
   void f();
   // ...
   };</pre>
An object <I>d</I> of class <I>D</I> has storage for both an <I>int n</I> and a <I>long n</I>. Inside <I>D::f, a</I>n unqualified reference to <I>n</I> refers to <I>D::n</I> (the <I>long); B::n</I> refers to the inherited <I>int n</I>.<P>
A derived class cannot delete inherited members.<P>
<h4><FONT COLOR="#000080"><A name="00CA_0056">An Example<A name="00CA_0056"></FONT></h4></P>
In my last two articles I described and implemented several versions of class <I>float_array</I>, an array of <I>float</I> for which you can set the number of elements at runtime. (See "Dynamic Arrays," <I>CUJ</I>, November 1992, and "The Function operator[]", <I>CUJ</I>, January 1993.) <A href="list3.htm">Listing 3</a>
shows the class definition for the climactic version, which grows automatically to keep subscript references in bounds.<P>
<I>float_arrays</I>, like all other arrays in C and C++, have the lowest subscript fixed at zero. This is less than ideal for some applications. Programming languages like Pascal, and its descendents Modula-2 and Ada, let you declare arrays with low bounds other than zero.<P>
In C++, you can fill the need by creating a class that I'll call <I>float_vector</I>, for which you specify not the number of elements but the low and high bounds of the subscript. For example,<P>
<pre>float_vector fv(1, 10);</pre>
declares <I>fv</I> as an array of <I>float</I> whose subscript range is 1 to 10, inclusive. <I>float_array</I> already embodies much of the functionality for <I>float_vector</I>, so let's consider implementing <I>float_vector</I> by deriving it from <I>float_array</I>.<P>
<A href="list4.htm">Listing 4</a>
shows the class definition for <I>float_vector</I>. <I>float_vector</I> adds a new private data member, <I>_low</I>, that records the vector's low bound. A <I>float_vector</I> need not store the high bound as a data member because it can determine the high bound from the low bound and length (inherited from <I>float_array</I>). <I>float_vector</I> defines a constructor, <I>float_vector(int lo, int hi)</I>, that builds a vector with subscripts from <I>lo</I> to <I>hi</I>, inclusive. It also adds two query functions, <I>low</I> and <I>high</I>, that return the values of the current low and high subscripts, respectively.<P>
The <I>float_vector</I> constructor is extremely terse, so I defined it as an inline function in the header, as<P>
<pre>inline float_vector::float_vector(int lo, int hi)
   : _low(lo), float_array(hi - lo + 1)
   { }</pre>
The constructor's member-initializers do all the work. The first initializer, <I>_low(lo)</I>, fills in the private data member <I>_low</I>. The second initializer, <I>float_array(hi - lo</I> + <I>1)</I>, invokes the base class constructor to initialize the inherited data members <I>array</I> and <I>len.hi - lo</I> + <I>1</I> is the number of elements in a <I>float_vector</I> whose subscript range is from <I>lo</I> to <I>hi</I>.<P>
Remember, inherited private members are not directly accessible in the derived class. The derived class must use the public interface provided by the base class, which in this case, is a public constructor. Unlike member initializers that I've used in the past, the leading identifier in the initializer <I>float_array(hi - lo + 1)</I> is the name of a type, not the name of a data member. There's no named member for the <I>float_array</I> sub-object in the <I>float_vector</I>, so you must refer to it using its type name.<P>
<I>float_vector</I> overrides both inherited <I>operator[]</I> functions with new implementations that work when the low subscript bound is nonzero. Notice that the formal parameters for both the <I>const</I> and non-<I>const float_vector::operator[]</I> are <I>int</I>, and not <I>size_t</I>, as they are in class <I>float_array</I>, because a <I>float_vector's</I> low bound may be negative.<P>
<A href="list5.htm">Listing 5</a>
contains the non-inline <I>float_vector</I> member functions, namely, both forms of <I>operator[]</I>. The function bodies are identical; they both rely on the inherited (overridden) versions of <I>operator[]</I> to do most of the work. The expression <I>i - low</I> shifts the subscript <I>i</I> into a subscript range whose low bound is zero. The statement<P>
<pre>return float_array::operator[] (i - low);</pre>
calls the inherited <I>operator[]</I> to select the desired element from the inherited <I>float_array</I> sub-object, and extend the array if necessary.<P>
<A href="list6.htm">Listing 6</a>
shows a test program for <I>float_vectors</I>. Notice that the display function (brought over from my previous two articles) still accepts a second argument of type <I>const</I> <I>float_array</I> &amp;. I did not change it to <I>const float_vector &amp;</I>. I also left a <I>float_array</I> in the test program to show that the display function accepts arguments of both the base and derived types.<P>
A sample output from the program appears in <A href="fig5.htm">Figure 5</a>.
 The abnormal termination is intentional. I planted a subscripting error just to show that the assertions work.<P>
<h4><FONT COLOR="#000080"><A name="00CA_0057">Food for Thought<A name="00CA_0057"></FONT></h4></P>
I was forced to make a simplifying assumption in my <I>float_vector</I> class, namely, that you can only extend the high bound of a vector. The low bound must remain fixed. That's why both <I>float_vector::operator[]</I> functions include the assertion<P>
<pre>assert(i &gt;= low());</pre>
The problem is that my design for <I>float_arrays</I> did not anticipate that I might want to extend the arrays in both directions. I'm not sure that I want to extend the low bound, but given this design, it's out of the question.<P>
Inheritance is often advertised as a wonderful technique for reusing existing code. But the reuse doesn't always work out the way you want. The reality is that you must decide for each class that you build whether you intend to use it as a base class for further derivation, and if so, how you or others might wish to use it.<P>
My design also raises another question. I said earlier that public inheritance defines Is-A relationships. You might reasonably ask if <I>float_vector</I> really is a <I>float_array</I>, or if I just used a convenient implementation trick.<P>
I'll ponder this and other questions in the next part of this series.<P>
<h4>References</FONT></h4></P>
Ellis, Margaret A. and Bjarne Stroustrup. 1990. <I>The Annotated C++ Reference Manual</I>. Reading, MA: Addison-Wesley.<P>
Stroustrup, Bjarne. 1991. <I>The C++ Programming Language</I>, 2nd. ed. Reading, MA: Addison-Wesley.<P>

<h4><a href="../../../source/1993/mar93/saks.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
