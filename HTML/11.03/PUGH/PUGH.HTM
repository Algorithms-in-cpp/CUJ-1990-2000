

<HTML>
<HEAD>

<TITLE>March 1993/Questions & Answers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmar.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Questions &amp; Answers<A name="00C6_004D"><A name="00C6_004D"></font></h2><P>
<h3 align="center"><A name="00C6_0000"><A name="00C6_0000">Function Return Values</h3><P>
<h3 align="center"><font color="#800000">Kenneth Pugh</font></h3><hr><blockquote><P>
<P><i><A name="00C6_0000"><A name="00C6_0000">Kenneth Pugh, a principal in Pugh-Killeen Associates, teaches C and C+ + language courses for corporations. He is the author of C Language for Programmers and All On C, and was a member on the ANSI C committee. He also does custom C programming for<I></I> <I></I>communications, graphics, image databases, and hypertext. His address is 4201 University Dr., Suite 102, Durham, NC 27707. You may<I></I> <I></I>fax questions for Ken to (919) 489-5239. Ken also receives email at kpugh@dukemvs.ac.duke.edu (Internet) and on Compuserve<I></I> <I></I>70125,1142.</i></P><P>
<B>Q</B><P>
First of all I want to thank you for a wonderful magazine and informative answers to a lot of good programming questions. I have two easy ones for you.<P>
Why do most of the Standard C library string functions (<I>strcpy, strcat</I>) return a <I>char</I> * when they already modify the string through formal parameters? I have seen:<P>
<pre>s2 = strcpy(s2, s1);</pre>
a lot less than I have seen:<P>
<pre>strcpy(s2, s1);</pre>
I remember your saying something about return values screwing up the stack if they are not captured, and this seems like a major offender.<P>
The second question is geared towards C++. I have never seen a constructor or destructor declared with a return value. Are we assuming they return <I>void</I> or <I>int</I>, either of which would be better style to specifically declare?<P>
Thanks in advance for your time and useful information, and keep up the great column.<P>
Andrew Tucker<br>
Seattle Pacific University<P>
<B>A</B><P>
Let's take your questions in order. I can't ever remember saying anything about not using the return value. It usually gets passed back in a register and if you do not use it, the value simply disappears when the register is reused.<P>
One reason for the <I>char</I> * return value is to allow the functions to be nested. You could specify a series of operations as:<P>
<pre>strcpy(a,"");
strcat(a, b);
strcat(a, c);</pre>
or as:<P>
<pre>strcat(strcat(strcpy (a,""), b), c);</pre>
I cannot say I particularly prefer the latter. Of course, if you were using C++ and a String class, the point becomes moot. String classes overload the <I>operator</I> + to mean concatenation. The assignment operator is also usually overloaded to mean string copying. So the set of operations can be expressed as:<P>
<pre>a = "" + b + c;</pre>
or<P>
<pre>a = b + c;</pre>
Functions such as <I>fgets</I> also return a character pointer, probably for the same reason. Although this is consistent with the <I>str</I>__ functions, it is inconsistent with the return type of most of the other file functions.<P>
As for your second question, constructors and destructors do not return any value. They are implicitly called in declarations, so there is no opportunity for them to return a value. You might call this a <I>void</I> return value, but that implies to me that the function actually is called normally.<P>
For example, suppose you coded:<P>
<pre>#include "string.hpp"
a_function()
    {
    String a_string;
    ...
    }</pre>
The constructor <I>String(void)</I> is implicitly called when <I>a_string</I> is declared. At the terminating brace (when <I>a_string</I> goes out of scope), the destructor ~<I>String(void)</I> is implicitly called.<P>
The lack of return value relates to the problem of what to do if there is an error in the constructor or destruct. For example, the initialization values might be out of range. You cannot return an error code. You have several choices. They include aborting the program, issuing a message alternative to the standard error output, or simply substituting in valid values. Just to be complete, let me note that a constructor can be called explicitly as a normal function. For example, if you had a string = string ("abc"), the constructor string (char*) is called and creates an object of class string. However, there is still no way to return an error code. A destructor can also be called explicitly, but the use for that is fiarly obscure. (KP)<P>
<h4><FONT COLOR="#000080"><A name="00C6_004E">Check Digits<A name="00C6_004E"></FONT></h4></P>
This is in partial response to your answer to a question by Brendan O'Haire in the November 1992 issue of <I>The C Users Journal</I>. I came across this in reading sometime early in my career, 1958-1964 perhaps. If you would like proofs of the mathematical assertions, I will supply them on request. I remember the source where I read this claimed it was a technique widely-used in the business world. I cannot argue for or against that nor can I cite the original source.<P>
This procedure inserts a check "digit" into a number in such a way that all single transpositions of adjacent digits can be detected. It can actually detect single transposition at odd distance, but the adjacent transposition is the more probable keying error. The mathematical algorithm used to compute the check digit is actually an algorithm for computing the remainder upon division by 11.<P>
I'll use an example. Suppose the number to be encoded is 34781 and you wish to make the check digit the third digit from the right. Let <I>Y</I> represent the check digit. The new number will have the form 347<I>Y</I>81. Form a sum alternately adding and subtracting the digits in the number:<P>
<pre>1 - 8 + <I>Y</I> - 7 + 4 - 3 = -13 + <I>Y</I></pre>
If the numeric part of this, -13 in this case, is not between -10 and 10 repeat the process:<P>
<pre>-13 + <I>Y</I> -&gt; -(3 - 1) + <I>Y </I>= -2 + <I>Y</I></pre>
At this point pick a single digit for <I>Y</I> so the sum is either zero or eleven. <I>Y</I> is 2 in this case. It is possible <I>Y</I> might be 10 in some cases. The Roman numeral <I>X</I> is used as the "digit" in this case. The original number with the check digit inserted is now 347281. When the alternate addition and subtraction is performed:<P>
<pre>1 - 8 + 2 - 7 + 4 - 3 = -11 -&gt; -(1 - 1) = 0</pre>
then the ultimate value should be zero. If two digits are transposed, 342781 for example, the algorithm produces -1 for the example. A non-zero value indicates the number is not correct.<P>
The mathematical argument depends on the fact that any integer, in decimal notation, can be represented as a sum of two terms, <I>A+B</I>, where <I>A</I> is the alternating sum and difference of the digits and <I>B</I> is an exact multiple of 11. This latter fact is derived from two assertions which can be proved by mathematical induction.<P>
<pre>(10 ** (2<I>k</I> + 1)) + 1 and (10**2<I>k</I>) - 1, <I>k</I> = 0, 1, 2,...</pre>
are each divisible by 11. All the terms in <I>B</I> have a factor of one or the other of these forms.<P>
Walter Beck<P>
I read with some interest the letter from Brendan O'Haire in your column in the November <I>CUJ</I> regarding check digits. I'm no mathematician nor a theorist, so I don't know the reasons why these things are done the way they are. However, I have recently run into a couple of algorithms for calculation of check digits in real-world programs, which differ significantly from the simple algorithm you gave in your response.<P>
The first one I tripped over was in doing some database conversion for a client. Part of the data were bank routing numbers, used for Electronic Funds Transfers (these numbers are, apparently, assigned by the Federal Reserve Bank). They are eight-digit numbers with a ninth digit appended, which is the check digit. The algorithm I was given to use for calculating these numbers is shown in the code in <A href="list1.htm">Listing 1</a>.
<P>
Also, I am currently involved in attempting to understand the specifications from HL-7. (HL-7 is a standard for data messages to be used in Health Care settings.) Some of the data types specified in the standard are short text strings with a check digit calculated either as <I>mod 10</I> or <I>mod 11</I>. After some digging I was given the following description of the algorithm:<P>
Assume you have an identifier equal to 12345. Take the odd digit positions, counting from the right, i.e., 531, multiply this number by 2 to get 1062. Take the even digit positions, starting from the right, i.e., 42, append these to the 1062 to get 421062. Add all of these six digits together to get 15. Subtract this number from the next highest multiple of 10, i.e., 20 - 15 to get 5. The Mod10 check digit is 5. The Mod10 check digit for 401 is 0, for 9999, it's 4, for 9999999, it's 7.<P>
<A href="list2.htm">Listing 2</a>
is my (possibly simplistic, and certainly not terribly efficient) implementation of this algorithm.<P>
I always enjoy reading your column. Keep up the good work!<P>
Fred Smith<P>
Thank you both for your contribution. I had an encoding course about twenty years ago, but the algorithms I recall were mainly for correction of binary values. They help in detecting and/or correcting binary digit errors (1 for 0 or 0 for 1). The parity bit on memory bytes is an example of a single error detection code. It could not detect a transposition error (switching two binary digits). Cyclic redundancy codes (CRC) can be used to correct multiple errors, such as might be found on magnetic disks.<P>
A single check digit for a decimal number can be used to detect single transposition errors or a single digit error. Since the digit is usually included as part of the number, it would be interesting to see if any of these algorithms fail if the check digit is transposed with a normal digit. When I used the check digit, it was set off as a separate character with a hyphen, so that mistake was less likely. Too bad telephone numbers don't include a check digit. The old rotary switches couldn't handle them, but computerized switches should be able to. I wonder if the saving in the amount of time spent dialing wrong numbers would compensate for the time spent dialing an extra digit. (KP)<P>
<h4><FONT COLOR="#000080"><A name="00C6_004F"><I>gotos<A name="00C6_004F"></I></FONT></h4></P>
In response to the letter from Raymond Lutz in the November <I>CUJ</I> I would like to point out the following useful feature of <I>goto</I>. I use <I>goto</I>s to consolidate the error-handling code near the bottom of the routine. This can be particularly useful when the normal path also includes most (or all) of the error-handling code as well (as in the case of cleanup code). See <A href="list3.htm">Listing 3</a>
for an example.<P>
If I had used <I>return</I> instead of <I>goto</I> I would have had three copies of the free code for <I>buf1</I>, two copies of the free code for <I>buf2</I>, and four different exit points in the routine. This way I only have one copy of the free code and one exit point which makes maintaining the code easier.<P>
In brief, I believe that <I>gotos</I>, just like handguns, can be misused/abused but that is not a reason to avoid them altogether. You just have to make sure you use the right tool for the right job.<P>
James Brown<br>
Orem, UT<P>
I agree with your sentiments regarding <I>gotos</I>, as I have stated before in this column. Your particular example of memory allocations is of particular interest. A major program that I am helping out with has rather large dynamic memory requirements. It also has the need for exiting gracefully if memory runs out. The compiler vendor's allocation algorithms have created some interesting problems in this application. Memory was getting fragmented more than expected, so some tracing capabilities were needed.<P>
Instead of using <I>malloc</I> and <I>free</I>, I made up two wrapper functions called <I>memory_allocate(unsigned int size, char * name) </I>and <I>memory_free(void *address, char * name)</I>. The name parameter is a string that describes the variable that is being allocated or freed.<P>
It is used for debugging and error reporting purposes. I can't give you the exact code, as it is for a proprietary project, but the pseudo-code looks something like <A href="fig1.htm">Figure 1</a>.
 (KP)<P>

<h4><a href="../../../source/1993/mar93/pugh.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
