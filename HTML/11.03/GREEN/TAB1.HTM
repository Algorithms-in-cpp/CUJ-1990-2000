<HTML><HEAD>
<TITLE>March 1993/SSX -- Stack Swap eXecutive/Table 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Table 1<I> SSX Function Calls</A></I></h4>
<pre>-----------------------------------------------------------------------
<I>int ssx_alert(wait_q</I>       <I>ssx_alert</I> sends a message to a task waiting
<I>*wqptr)</I>                    on the specified <I>wait_q</I>. If there is already
                           a message waiting on the specified <I>wait_q</I>,
                           then a <I>MW_ERR</I> (see <I>ssx.h</I>) is returned. If
                           there are any tasks waiting on the <I>wait_q</I>,
                           the first task is scheduled if it has a high
                           enoughpriority. If no task is waiting then a
                           message is left on the <I>wait_q</I>.

<I>int ssx_init(void)</I>         <I>ssx_init</I> is called before creating tasks or
                           running the SSX executive. This initializes
                           SSX executivedata.

<I>int ssx_task_create</I>        <I>ssx_task_create</I> is called to create a task to
<I>(unsigned char task_pri</I>,   run with the SSX executive. Following is list
<I>unsigned char task_id</I>,     of parameters passed to <I>ssx_task_create</I>:
<I>fptr task_ptr, unsigned</I>    <I>name</I> &#151; an eight-character name for the
<I>int stack_size, char</I>       task. This is useful in debugging SSX
*<I>name</I>)                     applications. The size of <I>name</I> is setup in
                           <I>ssx_conf.h</I>. <I>stack_size</I> &#151; the size of the
                           stack for this task in bytes. In our demo
                           application we are using 0x200. This will
                           depend on your application. Start high if you
                           think you will be deeply nested or you are
                           using a lot of automatic variables.
                           <I>task_id</I> &#151; the ID for the task being created.
                           IDs range from 1 to 0xfe. ID 0xff is reserved
                           for a background task that SSX creates. ID 0
                           is used in some SSX calls when a task wants
                           to refer to itself.
                           <I>task_pri</I> &#151; the task priority. Tasks with the
                           highest priority are scheduled to run first.
                           Priorities range from 0 (highest priority) to
                           0xff (lowest priority).
                           <I>task_ptr</I> &#151; a pointer to a function. (Its
                           typedef is in <I>ssx.h</I>.) Pass a pointer to the C
                           function that is to be used as a task. A
                           function used as a task must have no
                           parameters passed and return no value. A task
                           function is generally a loop without exit.

<I>int ssx_task_delete</I>        <I>ssx_task_delete</I> deletes the task with the
<I>(unsigned char task_id)</I>    task_id passed. If you pass in ID 0, the
                           calling task is deleted.

<I>int ssx_wait_with_alarm</I>    <I>ssx_wait_with_alarm</I> causes a task to wait for
<I>(wait_q *wqptr, long</I>       a message for the number of ticks passed. If
<I>timeout)</I>                   no message is received within the timeout
                           number of ticks, a <I>TO_ERR</I> is returned (see
                           <I>ssx.h</I>). <I>ssx_wait_with_alarm</I> returns <I>SUCCESS</I>
                           (see <I>ssx.h</I>) if the task gets a message on the
                           <I>wait_q</I>.

<I>long ssx_get_time(void)</I>    <I>ssx_get_time</I> gets the current clock ticks in
                           SSX.

<I>unsigned char</I>              <I>ssx_change_priority</I> changes the priority of
<I>ssx_change_priority</I>        the calling task, but does not immediately
<I>(unsigned char)            </I>reschedule tasks.
<I>new_priority</I>

<I>void ssx_clock_tick(void)</I>  <I>ssx_clock_tick</I> is called to inject a clock
                           tick into SSX. This is usually called by a
                           timer interrupt handler.

<I>void ssx_lock(void)</I>        <I>ssx_lock</I> disables task switching. Called
                           either at the entry to an interrupt handler
                           to prevent the interrupt handler from getting
                           switched out or from task code to reserve
                           control of the CPU for a while. Note: a task
                           cannot wait, delay, or otherwise cause itself
                           to become unrunnable while it has task
                           switching locked.

<I>void ssx_run(void)</I>         <I>ssx_run</I> is called after you have created at
                           least one task and started the executive
                           running.

<I>void ssx_set_time(long</I>     <I>ssx_set_time</I> sets the number of clock ticks
<I>ticks)</I>                     in SSX to the number passed in.

<I>void ssx_stop(void)</I>        <I>ssx_stop</I> is called to shutdown the SSX
                           executive. It returns where ssx_run was
                           called.

<I>void ssx_switch(void)</I>      <I>ssx_switch</I> forces rescheduling of tasks by
                           SSX. <I>ssx_switch</I> is usually called from within
                           the executive. It schedules the highest
                           priority task in the front of the ready
                           queue.

<I>void ssx_task_delay(long</I>   <I>ssx_task_delay</I> delays the calling task for
<I>ticks)</I>                     the number of ticks passed. It will be
                           scheduled back in after the number of ticks
                           have passed and when it is highest priority
                           on the ready queue.

<I>void ssx_unlock(void)</I>      <I>ssx_unlock</I> re-enables task switching. A
                           matching call to <I>ssx_lock</I> must already have
                           been made. Called at the exit of an interrupt
                           handler, or from task level code to release
                           the CPU to other tasks.

<I>void ssx_wait(wait_q</I>       <I>ssx_wait</I> causes a task to wait for a message
*<I>wqptr)</I>                    on the passed <I>wait_q</I>. The typedef for a
                           <I>wait_q</I> data structure is in the file <I>ssx.h</I>.
                           If there is a message waiting, <I>ssx_wait</I>
                           returns immediately. Ifthere is no message
                           waiting, <I>ssx_wait</I> schedules a new task while
                           the calling task waits for a message.</pre>
</BODY>
</HTML>
