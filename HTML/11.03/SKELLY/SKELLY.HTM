

<HTML>
<HEAD>

<TITLE>March 1993/Pointer Power in C and C++, Part 2</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmar.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">Pointer Power in C and C++, Part 2<A name="00BB_0047"><A name="00BB_0047"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="00BB_0000"><A name="00BB_0000">Christopher Skelly</font></h3><hr><blockquote><P>
<P><i><A name="00BB_0000"><A name="00BB_0000">Christopher Skelly has been a teacher of C and C++ for the past<I></I> <I></I>ten years, first for Plum Hall Inc., and then for his own company,<I></I> <I></I>Insight Resource Inc. Insight Resource also developed the<I></I> <I></I>best-selling help utility, "KO-PILOT for WordPerfect," which Brit<I></I> <I></I>Hume called "the best add-in ever written." Chris has served on<I></I> <I></I>both the C and C++ ANSI committees, and was the Technical<I></I> <I></I>Chairman for this year's "CPlusC++" and "C++ in Action"<I></I> <I></I>conferences, presented by Boston University. He writes regularly<I></I> <I></I>for the C User's Journal and the C++ Journal, and can be<I></I> <I></I>reached at Insight Resource Inc., 914-631-5032, or at <I>71005.771@compuserve.com.</I></i></P><P>
This article extends and continues the techniques presented<B> </B>last month in Part 1 of "Pointer Power in C and C++." At the<B> </B>end of this article I will repeat and then solve the pointer puzzle presented in Part 1. Just in case you don't happen to have<B> </B>last month's issue immediately available, here are the eight<B> </B>Key Facts from Part 1:<P>
1.     A pointer is a variable whose contents is an address.<P>
2.     A pointer always "knows" the type of thing it addresses. It<B> </B>can be properly used only to access something of the correct type.<P>
3.     Pointer values are address/type pairs, just like pointer variables. However, pointer values are not storable lvalues.<P>
4.     Every pointer has three fundamental attributes. These<B> </B>attributes are the location, the contents, and the indirect<B> </B>value of the pointer.<P>
5.     The three attributes of a pointer represent three distinct address levels. These address levels can also be called levels of<B> </B>indirection.<P>
6.     Pointer space is organized into a series of planes or levels.<B> </B>Every pointer expression can be assigned to one of these<B> </B>planes. The plane of a pointer expression is a measure of<B> </B>how much potential for indirection there is in that pointer<B> </B>expression.<P>
7.     The name of an array usually behaves as if the array name<B> </B>were a pointer value.<P>
8.     The name of an array, in almost every context, evaluates to<B> </B>the address of the array's own "zeroth" element.<P>
Armed with these Key Facts, you are ready to learn the<B> </B>next set of techniques, a game informally called Pointer<B> </B>Dominos.<P>
<h4><FONT COLOR="#000080"><A name="00BB_0048">Pointer Dominoes<A name="00BB_0048"></FONT></h4></P>
The key to mastering pointers is to learn to play Pointer<B> </B>Dominos. The game of pointer dominos is simply the game of<B> </B>using operators in expressions involving pointers. Each of the<B> </B>allowable operators does something very specific, and the<B> </B>operators are always to be played, or really evaluated, in a very<B> </B>precise order. If you know exactly what each operator does,<B> </B>and if you know how to determine the order of evaluation, you<B> </B>can play pointer dominos.<P>
<B>Key Fact #9 &#151; Only a small number of operations are ever performed on pointers. If you know exactly what each operation does, and what the right order to apply the operations is, you can understand and create any pointer expression in C.</B><P>
Each pointer has three attributes and each attribute is at a<B> </B>different level of indirection. You know that certain operators<B> </B>actually change the level of indirection of an expression using<B> </B>a pointer. Specifically, you have already seen that <I>&amp;</I> takes you<B> </B><I>up</I> one level and * takes us <I>down</I> a level when applied to a<B> </B>pointer in an expression. Note that in declarations the * builds<B> </B>in one level of indirection, as does the <I>[]</I>. The rules of pointer<B> </B>dominos apply only to expressions, not to declarations.<P>
<pre>int i = 0;   /* i is declared at level 0 */
int *p;    /* p is declared at level 1 */
p = &amp;i;    /* &amp;i is level 1, so is p */
x = *p;    /* * on p takes us down from level 1 to level 0 */</pre>
This leads to the first two rules of Pointer Dominos. When<B> </B>used in pointer expressions:<P>
<UL><li><I>&amp;</I> takes the type of the expression up one level of indirection.</li>
<li>* takes the type of the expression down one level of<B> </B>indirection.</li></UL>
Several other operators affect the overall level of indirection of an expression. But all the operators do one of a small number of things. They take us up, down, or sometimes even sideways on the Ladder. Fortunately, each allowable operation has a precise, well-defined meaning. Only six moves appear in expressions involving pointers. These moves form our next key fact.<P>
<B>Key Fact #10 &#151; The six moves of pointer dominos are:</B><P>
<B>1. Go up one level of indirection using </B><I><B>&amp;</I></B><P>
<B>2. Go down one level of indirection using *</B><P>
<B>3. Go down one level of indirection using </B><I><B>[]</I></B><P>
<B>4. Increase an address using + or ++</B><P>
<B>5. Decrease an address using - or </B><I><B>--n</I></B><P>
<B>6. Change the type of the pointer's window on memory with a cast.</B><P>
Structures and their members are not included here, but are easy to add to the fundamentals of the model.<P>
Each move corresponds to one or two C language operators. The first move to consider is the <I>&amp;</I>, the unary address-of operator. <I>&amp;</I> always lifts you up one level of indirection. Generating the address of something is the equivalent of moving up to the next plane in pointer space. As I've said, this process is known as <I>referencing</I>, and involves a relative move up to the next higher address plane.<P>
Two operators move you down one level of indirection. First the *, or unary indirection operator, means go down to the plane immediately below the plane you start on. If <I>x</I> lives on plane 5, *<I>x</I> is an expression that lives on plane 4. Most typically, if <I>p</I> lives on plane 1, *<I>p</I> is a non-pointer living on plane 0. This move is called <I>dereferencing</I>, and it is a relative move. *<I>x</I> is one level below <I>x</I>. You can't say anything about what level this actually is, until you know what level <I>x</I> itself resides on.<P>
The <I>[]</I> operator is also a dereferencing operator. <I>a[n]</I> lives on the plane below <I>a</I>, where <I>a</I> is any address expression. An important principle of pointer dominos is the fact that both * and <I>[]</I> bring an expression down one level of indirection from what they are applied to. The formula which relates how * and <I>[]</I> are related is the important formula:<P>
<pre>a[n] == *(a + n)</pre>
This master formula in C and C++ shows that a subscript is syntactically equivalent to dereferencing an offset from a pointer. The <I>a</I> in the formula represents any address. The address may come from a pointer, or from an array name, or from <I>a</I> casted expression. It doesn't matter. The subscript can always be applied to an address, just like the *, and the relation between the two forms comes from this formula.<P>
The fourth and fifth moves involve operations of addition and substraction, including +, ++, -, and --. These operators produce no change in level of indirection. They move you sideways on the same plane, either toward higher or lower memory and always by a scaled offset. <I>p</I> + <I>1</I> is the address of one object higher in memory than the object <I>p</I> points to. <I>p - 2</I> is the address of an object two objects below the object addressed by <I>p. p, p</I> + <I>1</I>, and <I>p - 2</I>, however, all exist on the same plane and have the same level of indirection.<P>
The final pointer domino move is the cast. Casting a pointer usually produces no change on the level of indirection. Casting a pointer to <I>int</I> to a pointer to <I>double</I>, for example, does not change the level of the pointer. What does change is the size and format of the "window on memory" that this pointer accesses. A pointer to <I>char</I> accesses one byte of integer data. A pointer to <I>double</I> accesses eight bytes of floating-point formatted data. There are special cases, however, where a cast does affect the level of indirection of an expression. Consider:<P>
<pre>char *p = malloc(1000);
char **p2;
p2 = (char **)p;</pre>
Here the cast, <I>(char **)</I>, does indeed produce a level change from level one up to level two. The real rule is this: the level of an expression with a cast is the level of indirection of the cast. Casts are the wild-cards of pointer dominos. Any expression can be cast to have some new level and type. The declaration inside the cast determines the level of the newly-casted expression.<P>
Summarizing the rules of pointer dominos in terms of operators, you have:<P>
<UL><li><I>&amp;</I> &#151; move up one level</li>
<li>* &#151; move down one level</li>
<li><I>[n]</I><I> </I>&#151; move down one level, with an offset of n elements</li>
<li>+ ++ &#151; add a scaled offset on the same level</li>
<li>- --<I> </I>&#151; subtract a scaled offset on the same level</li>
<li><I>(type) </I>&#151; change the size, format, and possible level of the expression to that of the type in the cast</li></UL>
This set of six rules forms the guts of the game. All you need now is one additional rule, which tells you which order to apply the moves when more than one operator are present in the same expression.<P>
For instance, in the expression:<P>
<pre>*++p</pre>
two operations, * (indirection) and ++ (pre-increment) are being applied to the pointer <I>p</I>. Which operation should you do first, the increment or the indirection? The resulting value will be very different depending on what you decide. If you did the * first, you would take the indirect value of <I>p</I>, and then increment that indirect value. In fact, this is just the opposite of what you are really supposed to do.<P>
The rules of precedence state that unary operators, like both pre-increment ++ and *, group right to left. This means that the ++ binds with <I>p</I> before the * is even considered. You must increment the pointer and then take the indirect value. The point here is that the rules of precedence always determine the proper order of evaluation. This is our last key fact.<P>
<B>Key Fact #11 &#151; If more than one operator is applied in an expression, apply the operators in order of precedence.</B><P>
A quick glance at the precedence table reveals that primary operators include both <I>[]</I> and <I>()</I>, while the * and <I>&amp;</I> are weaker-binding unary operators. Furthermore, primary operators group left to right and unaries group right to left. In effect, this means that you will deal with the primary <I>[]</I> and <I>()</I> first in left to right order, and then handle the unary *s or <I>&amp;</I>s in right to left order.<P>
For example, the expression<P>
<pre>*p[n]</pre>
contains two operators, one primary <I>[]</I> and one unary *. The <I>[]</I> binds first followed by the *, so the interpretation is "locate the array element <I>p[n]</I>, then dereference this element."<P>
A more complex expression may have lots of operators to consider:<P>
<pre>*(char *)p2[n][m]</pre>
Here both subscripts bind first, in left to right order. Then comes the cast, <I>(char *)</I>, which changes the type of the value in <I>p2[n][m]</I> to be a pointer to <I>char</I><I>.</I> Finally, the * on the left dereferences this casted pointer.<P>
Showing each step in order:<P>
1.     <I>p2</I>&#151;starting with <I>p2</I><P>
2.     <I>p2[n]</I>&#151;access the <I>n</I>th element offset from <I>p2</I><P>
3.     <I>p2[n] [m]</I>&#151;access the <I>m</I>th element offset from <I>p2[n]</I><P>
4.     <I>(char *)p2[n][m]</I>&#151;cast to the type pointer to <I>char</I><P>
5.     <I>*(char *)p2[n][m]</I>&#151;dereference the resulting <I>char</I><I> </I>pointer<P>
The rules are simple. Apply each pointer move in the proper order of precedence. Keep track of levels as you go. Now you are thinking just like the C compiler!<P>
<h4><FONT COLOR="#000080"><A name="00BB_0049">Solving the Puzzle<A name="00BB_0049"></FONT></h4></P>
It's time to solve the puzzle presented at the beginning of this article. Though the puzzle has inordinately complex expressions, the rules of pointer dominos will make short work of the task. <A href="list1.htm">Listing 1</a>
contains the puzzle again.<P>
What kind of data structures are you working with in this puzzle? <A href="fig1.htm">Figure 1</a>
contains a picture of the data.<P>
As you can see in <A href="fig1.htm">Figure 1</a>,
 <I>ap</I> is an array of pointers to <I>chars</I>, each pointer aimed at one of five character strings. <I>ap</I> is a level two object. Why? First, because <I>ap</I> is an array, it has intrinsically one level of indirection. But the elements of <I>ap</I> are all pointers, each holding their own level one address. So <I>ap</I> evaluates to the address of a pointer, hence <I>ap</I> is a level two expression.<P>
<I>app</I> is similarly a level three expression. An array of level two pointers evaluates to the address of a level two pointer, hence <I>app</I> lives on level three. <I>ppp</I> is a level 3 pointer, and <I>pppp</I> is a level four pointer. The relationships between the pointers are illustrated in <A href="fig1.htm">Figure 1</a>.
<P>
Here is the first expression to be printed:<P>
<pre>printf("%.*s", 2, *--**pppp);</pre>
Do the easy part first. The %.*<I>s</I> format specifier means to fill in the * with the first argument in the argument list following the format string. So you are really asking for %.<I>2s</I>, that is, print the first two characters of the string *--**<I>pppp</I>. How do you unravel *--**<I>pppp</I>? With the rules of pointer dominos!<P>
Start at the identifier, <I>pppp</I>, and apply the operators in order of precedence. Both * and -- are unary operators so they group right to left, as follows:<P>
1.     <I>pppp</I>&#151;first the identifier <I>pppp</I><P>
2.     *<I>pppp</I>&#151;right-most * dereference <I>pppp</I><P>
3.     **<I>pppp</I>&#151;second right-most * dereference <I>*pppp</I><P>
4.     --**<I>pppp</I>&#151;unary -- pre-decrement the result<P>
5.     *--**<I>pppp</I> left-most * dereference again<P>
Reading off the quoted strings gives a comprehensible formula for solving this part of the puzzle.<P>
To find the answer, start at the top of the diagram of the puzzle's data, at <I>pppp</I>, and move down two levels, following the arrows. You should be at <I>app[0]</I>, the zeroth element in the <I>app</I> array of <I>char</I> ** pointers. <I>app[0]</I> holds the address of <I>ap[4]</I>, the last element in the array of <I>char</I> * pointers. But now, the rules say you must apply the unary &#151; operator to <I>app[0]</I>. Instead of pointing at <I>ap[4]</I>, <I>app[0]</I> will now hold the address of <I>ap[3]</I>! This change, by the way, persists, and changes the diagram slightly from that shown in <A href="fig1.htm">Figure 1</a>.
 After decrementing <I>app[O]</I>, you apply the final dereference or *, and arrive at the contents of <I>ap[3]</I>. This is what you will print with the first expression. Actually, the program prints only the first two characters of the string <I>PORTABLE</I>. So <I>PO</I> appears on the output.<P>
What does the second expression print?<P>
<pre>printf("%.*s", 3, *(++*pppp[0] - 4));</pre>
This complex expression again uses the %.*<I>s</I> mechanism to pick up the 3 as the number of <I>chars</I> to be printed. In effect, you will print three <I>chars</I> from the address given by the complex expression *<I>(++*pppp [0] - 4))</I>.<P>
This one breaks down as follows:<P>
1.     <I>pppp</I>&#151;start at <I>pppp</I><P>
2.     <I>pppp[0]</I>&#151;dereference to access <I>[0]</I> <I>th</I> element<P>
3.     *<I>pppp[0]</I>&#151;dereference <I>pppp[0]</I><P>
4.     ++*<I>pppp[0]</I>&#151;pre-increment the result<P>
5.     ++*<I>pppp[0] - </I>4&#151;subtract 4<P>
6.     *(++*<I>pppp[0] - </I>4)&#151;dereference again<P>
Handling each operator one step at a time gives you the solution.<P>
The only new trick here is the translation between <I>[]</I> and *. Remember the all-important <I>a[n]</I> == *<I>(a + n)</I> formula and you'll zip through the steps.<P>
Accessing the zeroth element of <I>pppp</I> is the same as dereferencing <I>pppp. a[0]</I> is always the same object as *<I>a</I>. So the subscript <I>[0]</I> and the right-most * bring you down two levels, just as before. Only now you are told to increment the result, namely <I>app[0]</I>. So <I>app[0]</I> now pops back right back to where it started in the first place, namely to point to <I>ap[4]</I>, the string <I>TOWER!</I>.<P>
Now what? Now, you have to subtract 4 from this pointer. This is where it can get tough. But remember, <I>app</I> is an array of <I>char</I> ** pointers, so <I>app[0]</I> acts like a pointer to a pointer to a <I>char</I>. Decrementing means subtracting the space for four <I>char</I> * pointers. So <I>app[0]</I> - <I>4</I> points to <I>ap[0]</I>, the very first string in the puzzle, <I>INTEGER</I>. You have to print three characters from this string. So <I>INT</I> appears on the display right after the <I>PO</I>. The screen says <I>POINT</I>.<P>
The third expression prints the whole of the expression:<P>
<pre>++*--*++pppp[0] + 5</pre>
This whopper breaks down according to the precedence rules as follows:<P>
1.     <I>pppp</I><P>
2.     <I>pppp[0]</I><P>
3.     ++<I>pppp[0]</I><P>
4.     *++<I>pppp[0]</I><P>
5.     -- *++<I>pppp[0]</I><P>
6.     *--*++<I>pppp[0]</I><P>
7.     ++*--*++<I>pppp[0]</I><P>
8.     ++*--*++<I>pppp[0]</I> + <I>5</I><P>
Here's the explanation.<P>
Again <I>[0]</I> means move down one level, to <I>ppp</I>. Now increment <I>ppp</I>, so <I>ppp</I> points to <I>ppp[1]</I>, not <I>ppp[0]</I> anymore. Dereference with * means move down to <I>app[1]</I>. Now decrement <I>app[1]</I>, so <I>app[1]</I> points to <I>ap[2]</I> from now on, rather than <I>ap[3]</I>. Dereferencing with * brings you down to <I>ap[2]</I>. Now increment <I>ap[2]</I>, so the pointer to <I>char</I>, <I>ap[2]</I>, points to the <I>E</I> rather than the <I>D</I> of <I>DEBUGGER</I>. Finally, add 5. Since you are now down at level one, the contents of <I>ap[2]</I>, adding 5 means add the size of five <I>chars</I> to the pointer. Hence you are finally left pointing at the second <I>E</I> in <I>DEBUGGER</I>. Printing the resulting string, along with a space as the puzzle requires, gives us <I>ER</I>.<P>
The screen now says <I>POINTER</I>.<P>
Only two more. By the time you're done you'll never forget how to do this! The fourth <I>printf</I> statement looks like this:<P>
<pre>printf("%.*s", 2, *++pppp[0][3] + 3);</pre>
You are asked to print two characters from the expression:<P>
<pre>*++pppp[0][3] + 3</pre>
Here's the break down of the steps.<P>
1.     <I>pppp</I><P>
2.     <I>pppp[0]</I><P>
3.     <I>pppp[0][3]</I><P>
4.     ++<I>pppp[0][3]</I><P>
5.     *++<I>pppp[0][3]</I><P>
6.     *++<I>pppp[0][3]</I> + <I>3</I><P>
Now just read through this break down, supplying the interpretation for each step.<P>
<I>[0]</I> again moves down to <I>ppp</I>. Adding a <I>[3]</I> to <I>ppp</I> means two things; go down to the next level, and offset by three elements. So while <I>pppp[0][0]</I> is <I>app[1]</I> (remember, you incremented <I>ppp</I> in the last step), pppp[0][3] is <I>app[4]</I>! Now increment this result, <I>app[4]</I>, so <I>app[4]</I> points at <I>ap[1]</I>, rather than <I>ap[0].</I> Dereferencing with the * brings you down to the contents of <I>ap[1]</I>. Adding 3, skips the first three characters of <I>PROPORTION</I> so you print the <I>PO</I> substring from the middle of <I>PROPORTION</I>.<P>
Now the screen reads <I>POINTER PO</I>.<P>
Time for the last one! See if you can get this one without an explanation. If you get to <I>WER</I><I>!</I>, you're right. Remember to consider the changes that -- and ++ created in the earlier expressions. Here's how.<P>
<pre>printf("%s\n",  (*pppp + 2)[-2][2] + 2);</pre>
1.     <I>pppp</I><P>
2.     *<I>pppp</I><P>
3.     *<I>pppp + 2</I><P>
4.     (*<I>pppp + 2)[-2]</I><P>
5.     (*<I>pppp + 2)[-2][2]</I><P>
6.     (*<I>pppp + 2)[-2][2] + 2</I><P>
Dereference <I>pppp</I> to <I>ppp</I>, now still pointing at <I>app[1]</I>. Adding 2 creates a pointer value pointing at <I>app[3]</I>. What does the <I>[-2]</I> subscript do? First it moves you down to the level of <I>app[3]</I>, but the <I>-2</I> means two objects lower in memory, so you move down to <I>app[1]</I>, not <I>app[3]</I>. <I>app[1]</I> is still pointing at <I>ap[2]</I>, where the &#151; in the third expression left <I>app[1]</I>. Applying the <I>[2]</I> subscript to this value of <I>app[1]</I> moves us down and over to <I>ap[4]</I>, two pointers offset from <I>ap[2]</I>. The last + <I>2</I> skips over the first two <I>chars</I> in <I>TOWER</I><I>!</I>, so you see the last part of the puzzle, <I>WER</I><I>!</I> on the display.<P>
The screen says <I>POINTER POWER</I><I>!</I> and you had better believe it!<P>
You may want to work the steps of this puzzle over several times, perhaps drawing some intermediate diagrams as the pointers change. If you can work this puzzle correctly, you have indeed acquired pointer power as a long-term resource for your future C and C++ programs!<P>
Remembering to carefully distinguish the Three Attributes, following the levels on the Ladder of Indirection, and applying the rules of Pointer Dominos will get you to the solution every time. Furthermore, understanding complex pointer behavior will give you the confidence to create your own sophisticated data-handling mechanisms, when and where appropriate. The examples in the puzzle, of course, are not designed to be "good code." They are designed to show that this most powerful part of C is indeed governed by straight-forward rules which can always be applied to understand and work with complex pointer declarations and expressions in C.<P>
Now it's on to C++, where <I>void</I> isn't quite so void anymore, where references are not pointers, but sometimes act like them, and where pointers to members are not even addresses in the standard C sense at all!<P>

<h4><a href="../../../source/1993/mar93/skelly.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
