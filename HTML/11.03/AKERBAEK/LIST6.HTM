<HTML><HEAD>
<TITLE>March 1993/C++, Coroutines, and Simulation/Listing 6</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 6 <I>A library implementation for the clinic simulation</I></A></h4>
<pre>// SIM.CPP
#include "sim.hpp"
#include ...

extern coroutine* CURRENT;
extern coroutine* MAINC;
process* MAINP=NULL;
chain SQS;

void initProcesses(void)
{       if (MAINP == NULL)
       {   MAINP=newprocess();
          SQS.put(MAINP,0);
          delete MAINC;
          MAINC=CURRENT=(coroutine*)MAINP;
       }
}

process* mainProcess(void)
{       return(MAINP); }

process* currentProcess(void)
{       return((process *) CURRENT); }

float currentTime(void)
{   return( ((process*)CURRENT)-&gt;time); }

void hold(float interval)
{       if (interval &gt; 0)
       {   SQS.get(CURRENT);
          ((process *)CURRENT)-&gt;time+=interval;
          SQS.put(CURRENT,
             ((process *)CURRENT)-&gt;time);
          resume((coroutine*)SQS.first());
       }
}

void passivate(void)
{       SQS.get(CURRENT);
       if (SQS.first() == NULL)
          FATAL("Sequence Set is empty");
       resume((coroutine *)SQS.first());
}

void activate(process *p,float time)
{       if (p == CURRENT)
          hold(time - currentTime());
       else
       {   SQS.get(p);
          p-&gt;time= ((time &gt; currentTime())?
              time : currentTime());
          SQS.put(p,p-&gt;time);
       }
}

void cancel(process *p)
{       SQS.get(p);
       if (p == CURRENT)
       {   if (SQS.first() == NULL)
              FATAL("Sequence Set is empty");
          resume((coroutine *)SQS.first());
       }
}

void process::superMain(void)
{       main();
       passivate();
       FATAL("terminated process activated");}

// End of File</pre>

</BODY>
</HTML>
