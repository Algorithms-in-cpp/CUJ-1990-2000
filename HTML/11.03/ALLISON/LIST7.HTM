<HTML><HEAD>
<TITLE>March 1993/Code Capsule/Listing 7</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 7 <I>Implements the binary minus operator</I></A></h4>
<pre>// date6.cpp
#include &lt;assert.h&gt;
#include "date6.h"

inline int isleap(int y)
  {return y%4 == 0 &amp;&amp; y%100 != 0 || y%400 == 0;}

static int dtab[2][13] =
{
  {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},
  {0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
};

Date Date::operator-(const Date&amp; d2) const
{
   int months, days, years, prev_month, order;
   const Date * first, * last;

   // Must know which date is first
   if (compare(d2) &lt;= 0)
   {
      // this &lt;= d2
      order = -1;
      first = this;
      last = &amp;d2;
   }
   else
   {
      order = 1;
      first = &amp;d2;
      last = this;
   }

   // Compute the interval; first &lt;= last
   years = last-&gt;year - first-&gt;year;
   months = last-&gt;month - first-&gt;month;
   days = last-&gt;day - first-&gt;day;
   assert(years &gt;= 0 &amp;&amp; months &gt;= 0 &amp;&amp; days &gt;= 0);

   // Do obvious corrections (days before months!)
   // This is a loop in case the previous month is
   // February, and days &lt; -28.
   prev_month = last-&gt;month - 1;
   while (days &lt; 0)
   {
      // Borrow from the previous month
      if (prev_month == 0)
         prev_month = 12;
      --months;
      days += dtab[isleap(last-&gt;year)][prey_month--];
   }

   if {months &lt; 0)
   {
      // Borrow from the previous year
      --years;
      months += 12;
   }

   // Return a date object with the interval
   if (order == -1)
      return Date(-months,-days,-years);
   else
      return Date(months, days, years);
}

int Date::compare(const Date&amp; d2) const
{
    // same as in Listing 2
}
// End of File
</pre>
</BODY>
</HTML>
