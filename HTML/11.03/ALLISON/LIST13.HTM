<HTML><HEAD>
<TITLE>March 1993/Code Capsule/Listing 13</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 13 <I>Final implementation of the</I> Date <I>class</I></A></h4>
<pre>// date8.cpp

#include &lt;iostream.h&gt;
#include &lt;time.h&gt;
#include &lt;assert.h&gt;
#include "date8.h"

// Must initialize statics outside the class definition
int Date::dtab[2][13] =
{
  {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},
  {0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
};

Date Date::operator-(const Date&amp; d2) const
{
   int months, days, years, prev_month, order;
   const Date * first, * last;

   // Must know which date is first
   if (compare(d2) &lt;= 0)
   {
      // this &lt;= d2
      order= -1;
      first = this;
      last = &amp;d2;
   }
   else
   {
      order = 1;
      first = &amp;d2;
      last = this;
   }

   // Compute the interval; first &lt;= last
   years = last-&gt;year - first-&gt;year;
   months = last-&gt;month - first-&gt;month;
   days = last-&gt;day - first-&gt;day;
   assert(years &gt;= 0 &amp;&amp; months &gt;= 0 &amp;&amp; days &gt;= 0);

   // Do obvious corrections (days before months!)
   //
   // This is a loop in case the previous month is
   // February, and days &lt; -28.
   prev_month = last-&gt;month - 1;
   while (days &lt; 0)
   {
      // Borrow from the previous month
      if (prev_month == 0)
         prev_month = 12;
      -months;
      days += dtab[isleap(last-&gt;year)][prev_month-];
   }

   if (months &lt; 0)
   {
      // Borrow from the previous year
      -years;
      months += 12;
   }

   // Return a date object with the interval
   if (order == 1)
      return Date(-months,-days,-years);
   else
      return Date(months,days,years);
}

int Date::compare(const Date&amp; d2) const
{
   int months, days, years, order;

   years = year - d2.year;
   months = month - d2.month;
   days = day - d2.day;

   // return &lt;0, 0, or &gt;0, like strcmp()
   if (years == 0 &amp;&amp; months == 0 &amp;&amp; days == 0)
      return 0;
   else if (years == 0 &amp;&amp; months == 0)
      return days;
   else if (years == 0)
      return months;
   else
      return years;
}

ostream&amp; operator&lt;&lt;(ostream&amp; os, const Date&amp; d)
{
   os &lt;&lt; d.month &lt;&lt; '/' &lt;&lt; d.day &lt;&lt; '/' &lt;&lt; d.year;
   return os;
}

istream&amp; operator&gt;&gt;(istream&amp; is, Date&amp; d)
{
   char slash;
   is &gt;&gt; d.month &gt;&gt; slash &gt;&gt; d.day &gt;&gt; slash &gt;&gt; d.year;
   return is;
}

Date::Date()
(
   // Get today's date
   time_t tval = time(0);
   struct tm *tmp= localtime(&amp;tval);

   month = tmp-&gt;tm_mon+1;
   day = tmp-&gt;tm_mday;
   year = tmp-&gt;tm_year + 1900;
}
// End of File
</pre>
</BODY>
</HTML>
