

<HTML>
<HEAD>

<TITLE>March 1993/Code Capsule</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmar.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Code Capsule<A name="00C8_004F"><A name="00C8_004F"></font></h2><P>
<h3 align="center"><A name="00C8_0000"><A name="00C8_0000">A C++ Date Class, Part 2</h3><P>
<h3 align="center"><font color="#800000">Chuck Allison</font></h3><hr><blockquote><P>
<P><i><A name="00C8_0000"><A name="00C8_0000">Chuck Allison is a software architect for the Family History Department of Jesus Christ of Latter Day Saints Church Headquarters in Salt Lake City. He has a B.S. and M.S. in mathematics, has been programming since 1975, and has been teaching and developing in C since 1984. His current interest object-oriented technology and education. He is a member of X3J16, the ANSI C++ Standards Committee. Chuck can be reached on the Internet at <I>allison@decus.org, or</I> at (801) 240-4510.</i></P><P>
In last month's capsule I presented the beginnings of a simple date class. In addition to providing a member function to calculate the interval between two dates, this class illustrated the following features of C++:<P>
<UL><li>inline functions</li>
<li>references</li>
<li>constructors</li>
<li>controlled access to private data members</li></UL>
In this month's installment I will add relational operators, input/output operations, and the capability to get the current date, while demonstrating these features:<P>
<UL><li>operator overloading</li>
<li>streams</li>
<li>friend functions</li>
<li>static members</li></UL>
When using dates you often need to determine if one precedes another. I will add the member function<P>
<pre>int compare(const Date&amp; d2) const;</pre>
to the date class (see <A href="list1.htm">Listing 1</a>)
.<P>
Date::compare behaves like <I>strcmp</I> &#151; it returns a negative integer if the current object (*<I>this</I>) precedes <I>d2</I>, 0 if both represent the same date, and a positive integer otherwise (see <A href="list2.htm">Listing 2</a>
for the implementation and <A href="list3.htm">Listing 3</a>
for a sample program). For those of you familiar with <I>qsort</I> from the Standard C library, you can use <I>Date::compare</I> to sort dates just like you use <I>strcmp</I> to sort strings. Here is a compare function to pass to <I>qsort</I>:<P>
<pre>#include "date.h"
int datecmp(const void *p1, const void *p2)
{
   const Date
   *d1p = (const Date *) p1,
   *d2p = (const Date *) p2;
   return d1p-&gt;compare(*d2p);
}</pre>
(Next month's CODE CAPSULE will cover <I>qsort</I>).<P>
<h4><FONT COLOR="#000080"><A name="00C8_0050">Operator Overloading<A name="00C8_0050"></FONT></h4></P>
Most of the time, it is more convenient to have relational operators, for example<P>
<pre>if (d1 &lt; d2)
  // do something appropriate..</pre>
Adding a less-than operator is trivial using <I>Date::compare</I> &#151; just insert the following in-line member function into the class definition:<P>
<pre>int operator&lt;(const Date&amp; d2) const
{return compare(d2) &lt; 0);</pre>
The compiler translates each occurrence of an expression such as<P>
<pre>d1 &lt; d2</pre>
into the function call<P>
<pre>d1.operator&lt;(d2)</pre>
<A href="list4.htm">Listing 4</a>
has the class definition with all six relational operators and the updated sample program is in <A href="list5.htm">Listing 5</a>.
<P>
Since the functionality of <I>Date::interval</I> is like a subtraction (it gives us the difference between two dates), it would seem natural to rename it as <I>Date::operator</I>-. Before doing this, take a closer look at the semantics of the statement<P>
<pre>a = b - c;</pre>
No matter the type of the variables, the following should hold:<P>
<I>a</I> is a distinct object created by the subtraction, and <I>b - c</I> == - (<I>c - b</I>)<P>
I will use the convention that a "positive" <I>Date</I> object has all positive data members, and conversely for a "negative" date (mixed signs are not allowed). In <A href="list7.htm">Listing 7</a>,
 I have replaced <I>Date::interval</I> with <I>Date::operator- (const Date&amp;</I>), which affixes the proper signs to the data members and returns a newly-constructed <I>Date</I> object. The new class definition in <A href="list6.htm">Listing 6</a>
also contains a unary minus operator, which also has the name <I>Date::operator</I>-, but takes no arguments. The compiler will transform the statements<P>
<pre>d1 - d2;
-d1;</pre>
respectively into<P>
<pre>d1.operator-(d2); // Calls Date::operator-(const Date&amp;)
d1.operator-();   // Calls Date::operator-()</pre>
A sample program using these new member functions is in <A href="list8.htm">Listing 8</a>.
<P>
<h4><FONT COLOR="#000080"><A name="00C8_0051">Stream I/O<A name="00C8_0051"></FONT></h4></P>
One thing remains before I can say that a <I>Date</I> object has the look and feel of a built-in type<I></I> &#151; input/output support. C++ supplies stream objects that handle I/O for standard types. For example, the output from the program<P>
<pre>#include &lt;iostream.h&gt;

main()
{
  int i;
  cout &lt;&lt; "Enter an integer: ";
  cin &gt;&gt; i;
  cout &lt;&lt; "You typed " &lt;&lt; i &lt;&lt; endl;
  return 0;
}</pre>
will be something like<P>
<pre>Enter an integer: 5
You typed 5</pre>
<I>cout</I> is an output stream (class <I>ostreom</I>) supplied by the C++ streams library and <I>cin</I> is an input stream (class <I>istream</I>), which are associated by default with standard output and standard input, respectively. When the compiler sees the expression<P>
<pre>cout &lt;&lt; "Enter an integer: "</pre>
it replaces it with<P>
<pre>cout.operator&lt;&lt;("Enter an integer: ")</pre>
which calls the member function <I>ostream::operator&lt;&lt;(const char</I> *). Likewise, the expression<P>
<pre>cout &lt;&lt; i</pre>
where <I>i</I> is an integer calls the function<P>
<pre>ostream::-operator&lt;&lt;(int).</pre>
<I>endl</I> is a special stream directive (called a manipulator) which outputs a newline and flushes the output buffer. Output items can be chained together:<P>
<pre>cout &lt;&lt; "You typed " &lt;&lt; i</pre>
because <I>ostream</I>::<I>operator</I>&lt;&lt; returns a reference to the stream itself. The above statement becomes<P>
<pre>(cout.operator&lt;&lt;("You typed ")).operator&lt;&lt;(i)</pre>
To accommodate output of <I>Date</I> objects, then, you will need a global function that sends the printed representation to a given output stream, and then returns a reference to that stream:<P>
<pre>ostream&amp; operator&lt;&lt;(ostream&amp; os, const Date&amp; d)
{
   os &lt;&lt; d.get_month() &lt;&lt; '/'
   &lt;&lt; d.get_day() &lt;&lt; '/'
   &lt;&lt; d.get_year();
   return os;
}</pre>
This of course can't be a member function, since the stream (not the object being output) always appears to the left of the stream insertion operator.<P>
<h4><FONT COLOR="#000080"><A name="00C8_0052">Friends<A name="00C8_0052"></FONT></h4></P>
For efficiency, it is customary to give <I>operator</I>&lt;&lt; access to the private data members of an object. (Most implementations of a class provide the associated I/O operators too, so it seems safe to break the encapsulation boundary in this case.) To bypass the restriction on access to private members, you need to declare <I>operator</I>&lt;&lt; to be a <I>friend</I> of the <I>Date</I> class by adding the following statement to the class definition:<P>
<pre>friend ostream&amp; operator&lt;&lt;(ostream&amp;, const Date&amp;);</pre>
This declaration appears in the new class definition in <A href="list9.htm">Listing 9</a>,
 along with the corresponding friend declaration for the input function, <I>operator</I>&gt;&gt;. The implementation for these functions is in <A href="list10.htm">Listing 10</a>,
 and <A href="list11.htm">Listing 11</a>
has a sample program.<P>
<h4><FONT COLOR="#000080"><A name="00C8_0053">Static Members<A name="00C8_0053"></FONT></h4></P>
A class in C++ defines a scope. This is why the function <I>Date::compare</I> would not conflict with a global function named <I>compare</I> (even if the arguments and return value were of the same type). Now consider the array <I>dtab[]</I> in the implementation file. <I>dtab</I>'s static storage class makes it private to the file, but it really belongs to the class, not to the file. If I chose to spread the <I>Date</I> member functions across multiple files, I would be forced to group those that needed access to <I>dtab</I> together in the same file.<P>
A better solution is to make <I>dtab</I> a static member of the <I>Date</I> class. Static members belong to the whole class, not to a single object. This means that only one copy of <I>dtab</I> exists, and is shared by all objects of the class. Making the function <I>isleap</I> static allows you to call it without an associated object, i.e., you just need to say<P>
<pre>isleap(y);</pre>
instead of<P>
<pre>d.isleap(y);</pre>
To make <I>isleap</I> available to any caller, place it in the public section of the class definition, and call it like this:<P>
<pre>Date::isleap(y);</pre>
As a finishing touch, I will redefine the default constructor to initialize its object with the current date. The final class definition, implementation and sample program are in <A href="list12.htm">Listing 12</a>, <A href="list13.htm">Listing 13</a>, and
 <A href="list14.htm">Listing 14</a>
respectively.<P>
<h4><FONT COLOR="#000080"><A name="00C8_0054">Summary<A name="00C8_0054"></FONT></h4></P>
In these last two installments I've tried to illustrate how C++ supports data abstraction &#151; the creation of user-defined types. Constructors cause objects to be initialized automatically when you declare them. You can protect class members from inadvertent access by making them private. Overloading common operators makes your objects look and feel like built-in types<I></I> &#151; a plus for readability and maintenance.<P>

<h4><a href="../../../source/1993/mar93/allison.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
