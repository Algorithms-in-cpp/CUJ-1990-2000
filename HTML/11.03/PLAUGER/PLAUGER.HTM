

<HTML>
<HEAD>

<TITLE>March 1993/Standard C</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmar.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Standard C<A name="00C4_004B"><A name="00C4_004B"></font></h2><P>
<h3 align="center"><A name="00C4_0000"><A name="00C4_0000">Time Formatting Functions</h3><P>
<h3 align="center"><font color="#800000">P.J. Plauger</font></h3><hr><blockquote><P>
<P><i><A name="00C4_0000"><A name="00C4_0000">P.J. Plauger is senior editor of The C Users Journal. He is convenor of the ISO C standards committee, WG14, and active on the<I></I> <I></I>C++ committee, WG21. His latest books are The Standard C Library,  published by Prentice-Hall, and ANSI and ISO Standard C (with Jim Brodie), published by Microsoft Press. You can reach him at <I>pjp@plauger.com</I>.</i></P><P>
This is the last of three installments on the functions declared in <I>&lt;time.h&gt;</I>. (See "The Header <I>&lt;time.h&gt;</I>," <I>CUJ</I> January 1993 and "Time Conversion Functions ," <I>CUJ</I> February 1993.) I conclude by describing the functions that convert encoded times to human-readable text strings.<P>
Standard C provides an extraordinary ability to capture times and dates. It also lets you convert freely between scalar and component forms. That lets you do arithmetic on components such as days or months, leaving to the library the hard work of correcting for calendar irregularities. The Standard C library even lets you switch between local and universal (UTC or GMT) time zones, correcting as needed for Daylight Savings Time. (All that assumes that the library has some way of learning time zone information from the environment, of course.)<P>
The icing on the cake is the ability to convert times to human-readable form. C has long had the functions <I>ctime</I> and <I>asctime</I> to perform this useful service. Committee X3J11 added the more general function <I>strftime</I>. It lets you pick the time and date components you wish to include. It also adapts to the current locale. Thus Standard C now encourages programs that print time information in the most useful form for each culture. (Again, that assumes that the library has a nontrivial implementation of the locale machinery.)<P>
The topic for this month is the remaining functions declared in <I>&lt;time.h&gt;</I> &#151; those that convert times to text strings. They are not as hairy as the conversion functions I described last month, but they have their own complexities.<P>
<h4><FONT COLOR="#000080"><A name="00C4_004C">What the C Standard Says<A name="00C4_004C"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="00C4_004D">7.12.3 Time conversion functions<A name="00C4_004D"></FONT></h4></P>
Except for the <I>strftime</I> function, these functions return values in one of two static objects: a broken-down time structure and an array of <I>char</I>. Execution of any of the functions may overwrite the information returned in either of these objects by any of the other functions. The implementation shall behave as if no other library functions call these functions.<P>
<h4><FONT COLOR="#000080"><A name="00C4_004E">7.12.3.1 The <B><I>asctime</I></B> function<A name="00C4_004E"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="00C4_004F">Synopsis<A name="00C4_004F"></FONT></h4></P>
<pre>#include &lt;time.h&gt;
char *asctime(const struct tm *timeptr);</pre>
<h4><FONT COLOR="#000080"><A name="00C4_0050">Description<A name="00C4_0050"></FONT></h4></P>
The <I>asctime</I> function converts the broken-down time in the structure pointed to by <I>timeptr</I> into a string in the form<P>
<pre>Sun Sep 16 01:03:52 1973\n\0</pre>
using the equivalent of the following algorithm.<P>
<pre>char *asctime(const struct tm *timeptr)
{
   static const char wday_name[7][3] = {
   "Sun", "Mon", "Tue", "Wed",
   "Thu", "Fri", "Sat"
};
static const char mon_name[12][3] = {
   "Jan", "Feb", "Mar", "Apr", "May", "Jun",
   "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
};
static char result[26];

sprintf(result, "%.3s %.3s%3d %.2d:%.2d:%.2d %d\n",
    wday_name[timeptr-&gt;tm_wday], mon_name[timeptr-&gt;tm_mon],
    timeptr-&gt;tm_mday, timeptr-&gt;tm_hour, timeptr-&gt;tm_min, timeptr-&gt;tm_sec,
    1900 + timeptr-&gt;tm_year);
return result;
}</pre>
<h4><FONT COLOR="#000080"><A name="00C4_0051">Returns<A name="00C4_0051"></FONT></h4></P>
The <I>asctime</I> function returns a pointer to the string.<P>
<h4><FONT COLOR="#000080"><A name="00C4_0052">7.12.3.2 The <B><I>ctime</I></B> function<A name="00C4_0052"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="00C4_0053">Synopsis<A name="00C4_0053"></FONT></h4></P>
<pre>#include &lt;time.h&gt;
char *ctime(const time_t *timer);</pre>
<h4><FONT COLOR="#000080"><A name="00C4_0054">Description<A name="00C4_0054"></FONT></h4></P>
The <I>ctime</I> function converts the calendar time pointed to by <I>timer</I> to local time in the form of a string. It is equivalent to<P>
<pre>asctime (localtime(timer))</pre>
<h4><FONT COLOR="#000080"><A name="00C4_0055">Returns<A name="00C4_0055"></FONT></h4></P>
The <I>ctime</I> function returns the pointer returned by the <I>asctime</I> function with that broken-down time as argument. <B>Forward references:</B> the <I>localtime</I><I> </I>function (7.12.3.4).<P>
....<P>
<h4><FONT COLOR="#000080"><A name="00C4_0056">7.12.3.5 The <B><I>strftime</I></B> function<A name="00C4_0056"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="00C4_0057">Synopsis<A name="00C4_0057"></FONT></h4></P>
<pre>#include &lt;time.h&gt;
size_t strftime(char *s, size_t maxsize, const char *format, 
   const struct tm *timeptr);</pre>
<h4><FONT COLOR="#000080"><A name="00C4_0058">Description<A name="00C4_0058"></FONT></h4></P>
The <I>strftime</I> function places characters into the array pointed to by <I>s</I> as controlled by the string pointed to by <I>format</I>. The format shall be a multibyte character sequence, beginning and ending in its initial shift state. The <I>format</I> consists of zero or more conversion specifiers and ordinary multibyte characters. A conversion specifier consists of a <I>%</I> character followed by a character that determines the behavior of the conversion specifier. All ordinary multibyte characters (including the terminating null character) are copied unchanged into the array. If copying takes place between objects that overlap, the behavior is undefined. No more than <I>maxsize</I> characters are placed into the array. Each conversion specifier is replaced by appropriate characters as described in the following list. The appropriate characters are determined by the <I>LC_TIME</I> category of the current locale and by the values contained in the structure pointed to by <I>timeptr</I>.<P>
"<I>%a</I>" is replaced by the locale's abbreviated weekday name.<P>
"<I>%A</I>" is replaced by the locale's full weekday name.<P>
"<I>%b</I>" is replaced by the locale's abbreviated month name.<P>
"<I>%B</I>" is replaced by the locale's full month name.<P>
"<I>%c</I>" is replaced by the locale's appropriate date and time representation.<P>
"<I>%d</I>" is replaced by the day of the month as a decimal number (<I>01-31</I>).<P>
"<I>%H</I>" is replaced by the hour (24-hour clock) as a decimal number (<I>00-23</I>).<P>
"<I>%I</I>" is replaced by the hour (12-hour clock) as a decimal number (<I>01-12</I>).<P>
"<I>%j</I>" is replaced by the day of the year as a decimal number (<I>001-366</I>).<P>
"<I>%m</I> is replaced by the month as a decimal number (<I>01-12</I>).<P>
"<I>%M</I>" is replaced by the minute as a decimal number (<I>00-59</I>).<P>
"<I>%p</I>" is replaced by the locale's equivalent of the AM/PM designations associated with a 12-hour clock.<P>
"<I>%S</I>" is replaced by the second as a decimal number (<I>00-61</I>).<P>
"<I>%U</I>" is replaced by the week number of the year (the first Sunday as the first day of week 1) as a decimal number (<I>00-53</I>).<P>
"<I>%w</I>" is replaced by the weekday as a decimal number (<I>0-6</I>), where Sunday is <I>0</I>.<P>
"<I>%W</I>" is replaced by the week number of the year (the first Monday as the first day of week 1) as a decimal number (<I>00-53</I>).<P>
"<I>%x</I>" is replaced by the locale's appropriate date representation.<P>
"<I>%X</I>" is replaced by the locale's appropriate time representation.<P>
"<I>%y</I>" is replaced by the year without century as a decimal number (<I>00-99</I>).<P>
"<I>%Y</I>" is replaced by the year with century as a decimal number.<P>
"<I>%Z</I>" is replaced by the time zone name or abbreviation, or by no characters if no time zone is determinable.<P>
"<I>%%</I>" is replaced by <I>%</I>.<P>
If a conversion specifier is not one of the above, the behavior is undefined.<P>
<h4><FONT COLOR="#000080"><A name="00C4_0059">Returns<A name="00C4_0059"></FONT></h4></P>
If the total number of resulting characters including the terminating null character is not more than <I>maxsize</I>, the <I>strftime</I> function returns the number of characters placed into the array pointed to by <I>s</I> not including the terminating null character. Otherwise, zero is returned and the contents of the array are indeterminate.<P>
<h4><FONT COLOR="#000080"><A name="00C4_005A">The Function <B><I>strftime</I><A name="00C4_005A"></B></FONT></h4></P>
The one complicated function declared in <I>&lt;time.h&gt;</I> (from the outside, at least) is <I>strftime</I>. You use it to generate a text representation of a time and date from a <I>struct tm</I> under control of a format string. In this sense, it is modeled after the print functions declared in <I>&lt;stdio. h&gt;</I>. It differs in two important ways:<P>
<UL><li><I>strftime</I> does <I>not</I> accept a variable argument list. It obtains all time and date information from one argument.</li>
<li>The behavior of <I>strftime</I> can vary considerably among locales. The locale category <I>LC_TIME</I> can, for example, specify that the text form of all dates follow the conventions of the French culture.</li></UL>
For example, the code fragment:<P>
<pre>char buf[100];
strftime(buf, sizeof buf, "%A, %x", localtime(&amp;t0));</pre>
might store in <I>buf</I> any of:<P>
<pre>Sunday, 02 Dec 1979
dimanche, le 2 decembre 1979
Weekday 0, 02/12/79</pre>
If your goal is to display times and dates in accordance with local custom, then <I>strftime</I> gives you just the flexibility you need. You can even write multi-byte-character sequences between the conversion specifiers. That lets you convert dates to Kanji and other large character sets.<P>
Here are the conversion specifiers defined for <I>strftime</I>. I follow each with an example of the text it produces. The examples are all from P.J. Plauger and Jim Brodie, <I>ANSI and ISO Standard C</I>, Microsoft Press, 1992. All assume the <I>"C"</I> locale and the date and time Sunday, 2 December 1979 at 06:55:15 AM EST:<P>
<UL><li><I>%a</I>   &#151; the abbreviated weekday name (<I>Sun</I>)</li>
<li><I>%A</I>   &#151; the full weekday name (<I>Sunday</I>)</li>
<li><I>%b</I>   &#151; the abbreviated month name (<I>Dec</I>)</li>
<li><I>%B</I>  &#151; the full month name (<I>December</I>)</li>
<li><I>%c</I>  &#151; the date and time (<I>Dec  2 06:55:15 1979</I>)</li>
<li><I>%d</I>  &#151; the day of the month (<I>02</I>)</li>
<li><I>%H</I> &#151; the hour of the 24-hour day (<I>06</I>)</li>
<li><I>%I</I>   &#151; the hour of the 12-hour day (<I>06</I>)</li>
<li><I>%j</I>   &#151; the day of the year, from 001 (<I>335</I>)</li>
<li><I>%m</I> &#151; the month of the year, from 01 (<I>12</I>)</li>
<li><I>%M</I> &#151; the minutes after the hour (<I>55</I>)</li>
<li><I>%p</I>  &#151; the AM/PM indicator (<I>AM</I>)</li>
<li><I>%S</I>  &#151; the seconds after the minute (<I>15</I>)</li>
<li><I>%U</I>  &#151; the Sunday week of the year, from 00 (<I>48</I>)</li>
<li><I>%w</I>  &#151; the day of the week, from 0 for Sunday (<I>0</I>)</li>
<li><I>%W</I> &#151; the Monday week of the year, from 00 (<I>47</I>)</li>
<li><I>%x </I>  &#151; the date (<I>Dec  2 1979</I>)</li>
<li><I>%X</I>  &#151; the time (<I>06:55:15</I>)</li>
<li><I>%y</I>   &#151; the year of the century, from 00 (<I>79</I>)</li>
<li><I>%Y</I>  &#151; the year (<I>1979</I>)</li>
<li><I>%Z</I>  &#151; the time zone name, if any (<I>EST</I>)</li>
<li><I>%%</I> &#151; the per cent character (%)</li></UL>
<h4><FONT COLOR="#000080"><A name="00C4_005B">Using the Formatting Functions<A name="00C4_005B"></FONT></h4></P>
Note that the two functions that return a value of type <I>pointer to char</I> return a pointer to a static data object. Thus, a call to one of these functions can alter the value stored on behalf of an earlier call to another (or the same) function. Be careful to copy the value stored in one of these shared data objects if you need the value beyond a conflicting function call.<P>
<I>asctime</I> &#151; (The <I>asc</I> comes from <I>ASCII</I>, which is now a misnomer.) Use this function to generate the text form of the date represented by the argument (which points to a broken-down time). The function returns a pointer to a null-terminated string that looks like <I>"Sun Dec  2 06:55:15 1979\n"</I>. This is equivalent to calling <I>strftime</I> with the format <I>"%a %c\n" in the</I> "C" <I>locale</I>. Call <I>asctime</I> if you want the English-language form regardless of the current locale. Call <I>strftime</I> if you want a form that changes with locale. See the warning about shared data objects, above.<P>
<I>ctime</I> &#151; <I>ctime(pt)</I> is equivalent to the expression <I>asctime(localtime(pt))</I>. You use it to convert a calendar time directly to a text form that is independent of the current locale. See the warning about shared data objects, above.<P>
<I>strftime</I> &#151; This function generates a null-terminated text string containing the time and date information that you specify. You write a format string argument to specify a mixture of literal text and converted time and date information. You specify a broken-down time to supply the encoded time and date information. The category <I>LC_TIME</I> in the current locale determines the behavior of each conversion.<P>
<h4><FONT COLOR="#000080"><A name="00C4_005C">Implementing the Conversion Functions<A name="00C4_005C"></FONT></h4></P>
These functions convert encoded times to text strings in various ways. All depend, in the end, on the internal function <I>_Strftime</I> to do the actual conversion. What varies is the choice of locale. The function <I>asctime</I> (and, by extension, the function <I>ctime</I>) convert times by a fixed format, following the conventions of the <I>"C"</I> locale regardless of the current state of the locale category <I>LC_TIME.</I> The function <I>strftime,</I> on the other hand, lets you specify a format that directs the conversion of a broken-down time. It follows the conventions of the current locale. Thus, one of the arguments to <I>_Strftime</I> specifies the locale-specific time information (of type<I>_Tinfo</I>) to use.<P>
<A href="list1.htm">Listing 1</a>
shows the file <I>asctime.c</I>. It defines the function <I>asctime</I> that formats a broken-down time the same way irrespective of the current locale. The file also defines the data object <I>_Times</I> that specifies the locale-specific time information. And it defines the internal data object <I>ctinfo,</I> which replicates the time information for the <I>"C"</I> locale.<P>
<A href="list2.htm">Listing 2</a>
shows the file <I>ctime.c.</I> The function <I>ctime</I> simply calls <I>localtime</I>, then <I>asctime</I>, to convert its <I>time_t</I> argument. Thus, it always follows the conventions of the <I>"C"</I> locale.<P>
<A href="list3.htm">Listing 3</a>
shows the file <I>strftime.c.</I> The function <I>strftime</I> calls <I>_Strftime,</I> using the locale-specific time information stored in<I>_Times.</I> Thus, its behavior changes with locale.<P>
<A href="list4.htm">Listing 4</a>
shows the file <I>xstrftim.c.</I> It defines the internal function <I>_Strftime</I> that does all the work of formatting time information. <I>_Strftime</I> uses the macro <I>PUT,</I> defined at the top of the file <I>xstrftim.c,</I> to deliver characters. The macro encapsulates the logic needed to copy generated characters, count them, and limit the number delivered.<P>
The internal function <I>_Mbtowc,</I> declared in <I>&lt;stdlib.h&gt;,</I> parses the format as a multibyte string using state memory of type <I>_Mbstate</I> that you provide on each call.<P>
<A href="list5.htm">Listing 5</a>
shows the file <I>xgentime.c</I> It defines the function <I>_Gentime</I> that performs the actual conversions for <I>_Strftime.</I> The function <I>_Gentime</I> consists primarily of a large <I>switch</I> statement that processes each conversion separately.<P>
Each conversion determines a pointer <I>p</I> to a sequence of characters that gives the result of the conversion. It also stores a signed integer count at <I>*pn.</I> A positive count instructs <I>_Strftime</I> to generate the designated sequence of characters.<P>
One source of generated characters is the function <I>_Get_time,</I> which selects a field from one of the strings in the locale-specific time information. Another is the internal function <I>getval,</I> also defined in the file <I>xgentime.c,</I> which generates decimal integers. <I>getval</I> stores characters in the accumulator provided by <I>_Strftime.</I><P>
Note that <I>_Gentime</I> includes a nonstandard addition. The conversion specifier <I>%D</I> converts the day of the month with a leading space in place of a leading <I>0.</I> That's what <I>asctime</I> insists on.<P>
<I>_Gentime</I> returns a negative count to instruct <I>_Strftime</I> to "push down" a format string for a locale-specific conversion. Three conversions change with locale: <I>%c, %x</I>, and <I>%X.</I> (The conversion <I>%x,</I> for example, becomes the format string <I>"%b %d %Y"</I> in the <I>"C"</I> locale.) You express these conversions as format strings that invoke the other conversions. Note that the function<I>_Strftime</I> supports only one level of format stacking.<P>
The other internal function in the file <I>xgentime.c</I> is <I>wkyr.</I> It counts weeks from the start of the year for a given day of the year. The week can begin on Sunday (<I>wstart</I> is 0) or Monday (<I>wstart</I> is 1). The peculiar logic avoids negative arguments for the modulus and divide operators.<P>
<h4><FONT COLOR="#000080"><A name="00C4_005D">Conclusion<A name="00C4_005D"></FONT></h4></P>
For over two and a half years, I have used this column for a single purpose &#151; to provide a guided tour of the Standard C library. Along the way, I got out a book of the same name. About half these installments have been excerpts from the completed book. With this installment, I bring to a close that guided tour.<P>
Starting next month, I'll pick up on other standards activities in the C community. That's more than you might think. When I started this column, I was a member of one ANSI standards committee. Now I find myself attending meetings for two ANSI committees and three ISO committees. Don't think I do it because it's unmitigated fun. I just think standards activities are too important these days to ignore. I'll do my best to keep you informed too.<P>
<I>This article is excerpted in part from P.J. Plauger,</I> The Standard C Library, <I>(Englewood Cliffs, N.J.: Prentice-Hall, 1992).</I><P>

<h4><a href="../../../source/1993/mar93/plauger.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
