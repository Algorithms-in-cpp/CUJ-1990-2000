<HTML><HEAD>
<TITLE>October 1998/Compound Iterators for STL/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: Defining a compound iterator</A></h4>
<pre>
#ifndef __COMPOUND_ITERATOR_H__
#define __COMPOUND_ITERATOR_H__
     
#include &lt;utility&gt;
     
template &lt;class T, 
    class outer_iter = T**, 
    class offset_type = ptrdiff_t&gt;
class compound_iterator : 
    public std::iterator&lt;std::random_access_iterator_tag, T&gt;
{
public:
    typedef T *pointer;
    typedef T &amp;reference;
    compound_iterator()
    {
    }
    compound_iterator(const compound_iterator &amp;a)
        : State(a.State)
    {
    }
    compound_iterator(outer_iter i, offset_type d)
        : State(i, d)
    {
    }
    compound_iterator &amp;operator++()
    {
        ++State.first;
        return *this;
    }
    compound_iterator &amp;operator--()
    {
        --State.first;
        return *this;
    }
    compound_iterator operator++(int)
    {
        compound_iterator old(*this);
        ++*this;
        return old;
    }
    compound_iterator operator--(int)
    {
        compound_iterator old(*this);
        --*this;
        return old;
    }
    pointer operator-&gt;()
    {
        return &amp;State.first[0][State.second];
    }
    reference operator*()
    {
        return *operator-&gt;();
    }
    compound_iterator &amp;operator+=(int n) 
    {
        State.first += n;
        return *this;
    }
    compound_iterator operator+(int n)
    {
        return compound_iterator(State.first + n, State.second);
    }
    compound_iterator &amp;operator-=(int n) 
    {
        State.first -= n;
        return *this;
    }
    compound_iterator operator-(int n)
    {
        return compound_iterator(State.first - n, State.second);
    }
    reference operator[](int n)
    {
        return State.first[n][State.second];
    }
    bool operator==(compound_iterator &amp;a) 
    {
        return State == a.State;
    }
    bool operator!=(compound_iterator &amp;a) 
    {
        return State != a.State;
    }
    bool operator&lt;(compound_iterator &amp;a) 
    {
        return State &lt; a.State;
    }
protected:
    std::pair&lt;outer_iter, offset_type&gt; State;
};
     
#endif //__COMPOUND_ITERATOR_H__

//End of File
</pre>
</BODY>
</HTML>
