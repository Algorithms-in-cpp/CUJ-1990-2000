<HTML><HEAD>
<TITLE>October 1998/Writing COM Clients with Late and Early Binding/Sidebar</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h3 align=center><FONT FACE="Garamond" COLOR="#000080">The #import Statement in Visual C++</FONT></h3>
<HR>
<BLOCKQUOTE>

<p><B>#import</B> is new in Visual C++ v5.0. It is more like a supercharged macro than any real extension of the language. It simply reads the type library file you reference and generates header files with <B>.TLI</B> and <B>.TLH</B> extensions, placing them in the output directory of your project. VC really uses the <B>.TLI</B> and <B>.TLH</B> files to resolve early binding references. (It also uses them with RPC proxy functions, to make DCOM work.)</p>
<p><B>#import</B> has a number of optional arguments. Two that I almost always use are:</p>

<pre>
#import "sometypelib.tlb" no_namespace named_guids
</pre>

<p>These ask <B>#import</B> not to wrap the classes created from the type library in a C++ namespace, and that the <B>GUID</B>s be given programmer-friendly names, respectively. There are a number of other documented arguments as well.</p>
<p>There is one other interesting thing about <B>#import</B> and type libraries in general. In many, perhaps, most cases, a type library is not distributed as a standalone <B>.TLB</B> file at all. Rather, the type library is actually incorporated into the resources of the <B>.EXE</B> or <B>.DLL</B> file itself. So, don't be surprised if you see a line that looks like the following:</p>

<pre>
#import "myactivexserver.dll"
</pre>

ActiveX controls always come with their type libraries included in the resources of the server's DLL. In this case, <B>#import</B> extracts the type library from the resources of the DLL or EXE and then creates the TLI and TLH files.</p>
</BLOCKQUOTE>
</BODY>
</HTML>
