<HTML>
     
     <HEAD>
<TITLE>October 1998/We Have Mail</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tococt.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Departments</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">We Have Mail</FONT></H2>

<HR>

<BLOCKQUOTE>

<p><I>Letters to the editor may be sent via email to </I>cujed@mfi.com<I>, or via the postal service to Letters to the Editor, </I>C/C++ Users Journal<I>, 1601 W. 23rd St., Ste 200, Lawrence, KS 66046-2700.</I></p>

<HR>

<p>Dear PJP:</p>
<p>I just read Randy Astle's letter in the August 1998 <I>CUJ</I> and your response and would like to make a few clarifying comments. The internal compiler error in Randy's code is due to a known bug in Microsoft VC++ 5.0 that shows up when a string literal is used as a default argument in a parameter list. The easiest workaround is to define a <B>std::string</B> variable prior to the class declaration. His code would then be:</p>

<pre>
#include &lt;string&gt;
std::string strDflt("");

class AClass
    {
public:
    AClass(int anArg,
        std::string
        aString = strDflt);
    };

void AFunction ()
{
    AClass aClass(7);
}
</pre>

<p>This bug only happens if no definition of a <B>std::string</B> variable exists prior to the use of <B>std::string</B> as a default argument type. The problem has since been fixed in Visual C++ 6.0.</p>
<p>Regards,</p>
<p>Kerry Loynd<br>
Visual C++ compiler team</p>
<p>
<p><I>Thanks for the information. &#151; pjp</I></p>

<HR>
<p>Dear Mr. Editor,</p>
<p>The <B>switch</B> statement is one of a few areas that were not revised when we moved from C to C++. In C, the operand to the <B>switch</B> statement and the <B>case</B> labels should always be integers (or integer convertibles) and we seem to have copied the same limitation to C++ for no reason. For example, If I have the following class:</p>

<pre>
class CMyString
{
    .....
    .....
    // Copy Constructors:
    CMyString(
        const CMyString&amp; other);
    CMyString(const char* other);

    // Assignment Operator:
    CMyString&amp; operator=
    (const CMyString&amp; other);

    // Equivalence Operator:
    bool operator==
    (const CMyString&amp; other);
    ....
};
</pre>

<p>the following code does not compile:</p>

<pre>
int main()
{
    CMyString str1  = "SomeString";
    CMyString str2 =
        "SomeOtherString";
    CMyString str3 = "AnotherString";
    switch(str1)
    {
    case str2 :
        // Do Something ...
        break ;
    case str3 :
        // Do Something else ...
        break ;
    }
    return 0 ;
}
</pre>

<p>In the above code, logically there is no reason why the <B>case</B> labels cannot be of type <B>CMyString</B>. If I have to make it work, I will have to rewrite it as:</p>

<pre>
int main()
{
    CMyString str1  = "SomeString";
    CMyString str2 =
        "SomeOtherString";
    CMyString str3 = "AnotherString";
    if (str1 == str2)
        {
        // Do Something ...
        }
    else if (str1 == str3)
        {
        // Do Something else ...
        }
}
</pre>

<p>The simplicity of the <B>switch</B> statement is quite apparent. Logically, it should be possible to construct a <B>switch-case</B> statement for any two objects that have an equivalence operator (<B>operator==</B>) defined. This operator can then be used to make comparisons by <B>switch</B> statement.</p>
<p>Is it something that the designers of C++ have overlooked or something that they considered but decided not to touch for some reason?</p>
<p>Regards,</p>
<p>Kishore Meduri<br>
Senior Software Developer<br>
Electronic Data Systems Inc.<br>
Atlanta GA</p>

<p><I>Many things could be "fixed" when overhauling C, not the least of which is the </I><B>switch </B><I>statement. The C++ standards committees chose not to try to fix everything, wisely in my opinion. Note that even Java, which is more of a departure from C than C++, retains the </I><B>switch</B><I> statement in all its idiosyncratic glory. But you're basically correct &#151; there's no reason why the </I><B>switch</B><I> statement could not be generalized along the lines you suggest. &#151; pjp</I></p>

<HR>

<p><I>CUJ,</I></p>
<p>Perhaps I am taking too liberal an interpretation of the following sentence from your editorial guidelines: "Though we may accept a story on any C or C++ related topic, check first for our immediate story needs." But I thought it might be worth a punt to suggest the following idea for an article in your magazine.</p>
<p>I am a keen Java and C++ developer but it struck me of late that rather than inventing an entirely new language and foisting it on the world at large, the team who conceived of Java would have done far better to have written a C++ virtual machine. This would have greatly saved on the resources that have been expended (wasted perhaps) on the great Java migration that is taking place.</p>
<p>C++ is a far superior, though more complex, programming language than Java, and there are a vast numbers of developers out there skilled over many years in its usage. Although the principles of Java are the same, it seems absolutely idiotic to sacrifice the progress that has been made with C++ because of the hype that surrounds Java and its Internet applicability. The bottom line is that interpreted C++ would have been an all-round better choice for a platform-neutral programming language.</p>
<p>It's not too late by any means. Were an organisation like the Free Software Foundation to develop the C++ virtual machine, the sense of restoring C++ to its former pre-eminent position would be clear. Because of the vast legacy of C++ tools and software that currently exists, ease of integration with such a replacement for Java would be guaranteed. Computer developers and businesses world-wide could then go back to concentrating on more worthwhile ventures than some follow-the-herd-mentality migration to Java.</p>
<p>I won't at this point delve much further into the idea, as, naturally, I would prefer to get some feedback as to its suitability before I labour in vain. I am a developer myself, with oodles of Java and C++ experience. I have written for several publications on various topics including PC World Australia. I can send you samples should you require them.</p>
<p>Please let me know your interest. I would be happy to further outline and detail my research intentions if you are unsure about its feasability.</p>
<p>Thank you.</p>
<p>Liam O'Duibhir</p>

<p><I>Java as we know it today is the result of many forces, not the least of which was the desire by James Gosling to invent his own little programming language. (It's not so little now, of course, but then neither is Unix.) Java is also simple enough to give a JVM a chance at catching misuse of references, and other practices that can be either stupid or malicious. It's rather harder to do the same for C++. Still, it would be interesting to see what sort of support you can muster for such a project. &#151; pjp</I></p>

<HR>

<p>Mr. Briand,</p>
<p>While in college, I was told a third variable was needed to swap two numbers, and like a dolt, I took it as fact. I thought of this the other day while showering and wonder if anybody else has. </p>
<p>The swap routine is unreadable and only slightly faster then the normal method of swapping two numbers, so there is no real reason to use it, but here it is anyway.</p>

<pre>
// Compiled with Turbo C++ Version 3.0
// One line swap routine for C++
// programmers by Tredd Barton
     
#include "stdio.h"
     
inline void swap(int&amp; x, int&amp; y)
    {
    x ^= y = (x ^= y) ^ y;
    }
     
void main (void)
    {
    int a, b;
    printf("\nEnter integer A to"
        "swap with B: ");
    scanf("%d", &amp;a);
    printf("\nEnter integer B to"
        "swap with A: ");
    scanf("%d", &amp;b);
    printf("\nInteger A = %d\n"
        "Integer B = %d", a, b);
    swap(a, b);
    printf("\nInteger A = %d\n"
        "Integer B = %d\n", a, b);
    }
</pre>

<p>Tredd Barton<br>
<B>tbarton@voltec-inc.com</B><br>
Voltec Inc.</p>

<p><I>That's cute. It reminds me of something I read in </I>The Armchair Universe<I>, by A. K. Dewdney (W. H. Freeman and Company, 1988). He describes an imaginary world of only two dimensions; all living beings and objects are infinitely flat and live within a 2-D infinite plane. The inhabitants of this world wish to build a computer, and in so doing one of the problems they must solve is how to cross an X and a Y logic path without interference. They can't route one line under the other because in their world there is no such thing as "under." They manage to simulate crossed lines with a system of 12 NAND gates. It's extremely cumbersome, but it works.</I></p>
<p><I>If Java had macros, we could put your single line of obfuscated code into a swap macro. This would be useful because it is impossible to write a Java swap function with raw integer parameters &#151; Java passes them by value, and there's no way to coax them into pointers. But then, Java has no macros and that's probably a good thing. I'll file your trick under solutions looking for problems. &#151; mb</I></p>

<HR>

<p>Hi <I>CUJ</I>,</p>
<p>I have a few comments on Mike Rumore's "A Binary Search Tree with Iterators" (July 1998). There is another way of iterating through binary trees that requires only a single class for in-order, pre-order, and post-order traversals. You define a very simple state machine that tells the iterator what to do when it comes to a node. For simplicity's sake, I will represent the state machine as an array of characters. Each character will be one of the following:</p>

<pre>
1 = Go left
2 = Visit the node
3 = Go right
4 = Finished
</pre>

<p>This means that a state machine sequence of <B>"1234"</B> is an in-order traversal (Left, Visit, Right, Finish). While <B>"1324"</B> is a post-order traversal (Left, Right, Visit, Finish).</p>
<p>The stack needs to be modified to store the current "state" of the node (a simple integer will do). The <B>operator++()</B> function will get the state and determine what to do next. In pseudo C++, the function will look something like <A HREF="fig1.htm">Figure 1</A>.</p>
<p>With this iterator you can now iterate through all three types of traversals with a single iterator class. You can also iterate with the reverse of the above three traversals: reverse in-order, reverse pre-order, and reverse post-order. They simply visit the right side of the tree then the left side. Just use a different state sequence.</p>
<p>The level-order iterator still requires a separate class because it uses a queue instead of a stack.</p>
<p>Another interesting side note is that if you use a state sequence of: <B>"12234"</B>, then you will visit the nodes twice in an in-order traversal.</p>
<p>In answer to a question from Mike Rumore, the implementation of the iterator does not allow for removing or inserting elements. The iterator would become unstable and might result in visiting nodes that have already been visited or worse. The STL has the same restriction on collections. Any attempt to insert or remove an element invalidates all iterators to that collection.</p>
<p>I have also provided source code; I've compiled it on MSVC 5 with Service Pack 3. The code isn't as pretty as I would have liked, but I didn't have a lot of time. It also uses Rogue Wave classes (<B>RWStack</B> and <B>RWCString</B>). But any suitable implementation would work just fine. I've also included a very simple little test case. The key point of the code is the <B>operator++</B> function.</p>
<p>Thanks,</p>
<p>John<br>
<B>hinke@roguewave.com</B></p>

<p><I>Thanks for sharing that with us. Since we're kind of short on space, I can't show the extra code you so graciously provided. It will be available via ftp as files </I><B>tree.h</B><I> and </I><B>main.cpp</B><I> in the letters zip file. (Readers can find downloading instructions on p. 3.) I will also put your code in our Code Review section on our website (www.cuj.com/forum/). &#151; mb</I></p>

<HR>

<p>Dear <I>CUJ</I>,</p>
<p>In the July 1998 issue, mb said: I'd like to hear from someone who can argue the pro-reference side of things.</p>
<p>When I teach Data Structures and C++, we develop a lot of template classes. The specific use for references is, as mentioned by David Tribble in the Letters section, when combined with <B>const</B> as an efficient equivalent for pass by value. When using pass by value, the copy constructor gets called. For non-trivial data types this can be overwhelmingly significant. The time spent doing the copying can easily outweigh the time spent doing useful computing. The constant reference technique avoids this problem very nicely, without the user of the function having to worry about it at all.</p>
<p>I don't recommend the use of references for any other purpose though, for the reasons already mentioned by other writers.</p>
<p>Bill Rausch<br>
Software Development, Unix, Mac, Windows<br>
Numerical Applications, Inc.<br>
<B>bill@numerical.com</B></p>

<HR>

<p>Hi,</p>
<p>My 5 cents pro references. Consider the callee:</p>

<pre>
void foo1(theArg&amp; a)
{
   a.value = some_other_value;
}
</pre>

<p>this much simpler and strightforward than</p>

<pre>
void foo2(theArg *p)
{
   if (p != 0)
   {
      thaArg&amp; a = *p;
      a.value = some_other_value;
   }
   else
   {
      /* silently ignore? */
   }
}
</pre>

<p>The second function conveniently aliases the pointed-to value to avoid frequently changing all <B>"."</B>s with <B>"-&gt;"s</B> depending on the variable being local or passed as an argument.</p>
<p>I use references for any function, except when managing memory is the issue.</p>
<p>Ciao</p>
<p>Ale</p>

<p><I>There's no question programmers love a good argument (no pun intended). For the benefit of readers who tuned in late, the argument was whether it was better to use pointers or references as function parameters. The short answer is: it depends.</I></p>
<p><I>Last month's letters section contains numerous points for consideration. But this really is the end of it. Thanks to everyone for writing. &#151; mb </I>o</p>

<h4><a href="../../../source/1998/oct98/letters.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
