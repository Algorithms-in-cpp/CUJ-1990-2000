<HTML><HEAD>
<TITLE>October 1998/An SQL Client Class/Figure 4</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Figure 4: Record-oriented data structures</A></FONT>
<pre>
//  Record buffer element
struct DbRecordField {
public :
    long length;
    short nullind;
    short reserved;
    char text[1];
    DbRecordField&amp; operator=(SQLVAR* var);
};

class DbRecord : public Dump {
public :
    int nField;

    DbRecord() { nField = 0; used = 0; }
    void create(SQLDA* sqlda);
    DbRecordField* get(int i);
    DbRecord&amp; operator&lt;&lt;(SQLVAR* var);
    void clear();

    int used;
    DbRecordField* extend(int delta);
};


#define AVG_FIELD_SIZE \
        (sizeof(DbRecordField)+8)
#define FIELD_GRAN  16

DbRecordField&amp; 
DbRecordField::operator=(SQLVAR* var) {
    length = 
        sizeof(DbRecordField) + 
            var-&gt;sqllen;
    if (var-&gt;sqlind)
        nullind = *var-&gt;sqlind;
    else
        nullind = 0;
    if (var-&gt;sqldata &amp;&amp; nullind != 
            Query::nullind)
        memcpy(text,var-&gt;sqldata,
            var-&gt;sqllen);
    text[var-&gt;sqllen] = 0;
    return *this;
}

DbRecordField* 
DbRecord::extend(int delta) {
    int last = used;
    used += delta;
    if (used &lt;= size) {}
    else if (size &gt; 0) {
        Dump swap(*this);
        Dump::create(
          used +
          FIELD_GRAN*AVG_FIELD_SIZE);
        memcpy(data,swap.data,swap.size);
    }
    else
        Dump::create(
          used +
          FIELD_GRAN*AVG_FIELD_SIZE);
    return (DbRecordField*)(data+last);
}

void DbRecord::create(SQLDA* sqlda) {
    nField = sqlda-&gt;sqld;
    int size = 
        sizeof(DbRecordField)*sqlda-&gt;sqld;
    for (int i = 0; i &lt; sqlda-&gt;sqld; i++)
        size += sqlda-&gt;sqlvar[i].sqllen;
    extend(size);
    int offset = 0;
    for (i = 0; i &lt; sqlda-&gt;sqld; i++) {
        SQLVAR* var = &amp;sqlda-&gt;sqlvar[i];
        DbRecordField* field = 
            (DbRecordField*)(data+offset);
        *field = var;
        offset += field-&gt;length;
    }
}

DbRecordField* DbRecord::get(int i) {
    int offset = 0, count = 0;;
    while (count &lt; nField) {
        DbRecordField* field = 
            (DbRecordField*)(data+offset);
        if (count == i)
            return field;
        offset += field-&gt;length;
        count++;
    }
    return 0;
}

DbRecord&amp; 
DbRecord::operator&lt;&lt;(SQLVAR* var) {
    int need = 
        sizeof(DbRecordField) + 
            var-&gt;sqllen;
    DbRecordField* field = extend(need);
    nField++;
    *field = var;
    return *this;
}

void DbRecord::clear() {
    destroy();
    used = 0;
    nField = 0;
}

/* End of File */
</pre>
</BODY>
</HTML>
