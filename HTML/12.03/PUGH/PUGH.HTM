

<HTML>
<HEAD>

<TITLE>March 1994/Questions & Answers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmar.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Questions &amp; Answers<A name="00A0_0043"><A name="00A0_0043"></font></h2><P>
<h3 align="center"><A name="00A0_0000"><A name="00A0_0000">Run-Time Type Checking in C++</h3><P>
<h3 align="center"><font color="#800000">Kenneth Pugh</font></h3><hr><blockquote><P>
<P><i><A name="00A0_0000"><A name="00A0_0000">Kenneth Pugh, a principal in Pugh-Killeen Associates, teaches C and C++ language courses for corporations. He is the author of All On C, C for COBOL Programmers, and UNIX for MS-DOS Users, and was a member of the ANSI C committee. He also does custom C/C++ programming and provides SystemArchitectonics services. His address is 4201 University Dr., Suite 102, Durham, NC 27707. You may fax questions for Ken to (919) 489-5239. Ken also receives email at kpugh@allen.com (Internet) and on Compuserve 70125,1142.</i></P><P>
<h4><FONT COLOR="#000080"><A name="00A0_0044">Run-Time Typing<A name="00A0_0044"></FONT></h4></P>
I have taught myself C++ and am comfortable with most of its concepts. There is one aspect that I am unsure about. Bjarne Stroustrup, in his book <I>The C++ Programming Language</I> states: "using run-time type inquiries ... destroys all modularity in a program and negates the aims of object-oriented programming." I attempt to adhere to this suggestion, but there is a situation in which I don't know how to apply the rule: reading and writing objects to data files. As an example, let's suppose we are writing a simple checkbook balancing program. The base object is an <I>Entry</I>, which corresponds to something you would enter in your checkbook. Derived from base class <I>Entry</I> are three classes which can be instantiated: <I>Check</I> (a written bank draft), <I>Deposit</I> (a bank window deposit), and Withdrawal (a window withdrawal). Keeping track of the type of objects in memory is easy, since when one of the three derived classes is created, it is done through a constructor which builds in type information. There are many ways to write the checkbook entries to a data file, so let's assume we just write a character-based representation to the file. The question is how can we write the data so that we can read the information back into memory? The only way I can think of is to include type information, such as an integer coded for each class type. This method violates Mr. Stroustrup's rule, though. Any thoughts you have on this matter would be greatly appreciated.<P>
Paul Waldo<br>
Forest, VA<P>
<B>A</B><P>
One reason Bjorne was against run-time checking was because it enables programmers to avoid derivation. For example, suppose you have a <I>type_of</I> function that can identify the <I>Entry</I> type of a pointer. To post an entry, you might code something that looks like <A href="list1.htm">Listing 1</a>.
 If you need to add an additional type of <I>Entry</I>, then you have to add another case to the switch statement.<P>
However, there's a cleaner way to handle this problem. Suppose you give <I>Entry</I> a pure virtual <I>post</I> function. Each class derived from <I>Entry</I> now supplies its own <I>post</I> function. The <I>post_entry</I> function could look like <A href="list2.htm">Listing 2</a>.
 When adding a new derived class, you do not need to change the <I>post_entry</I> function. You just provide a <I>post</I> function for the new class.<P>
As you have suggested, virtual functions only work while objects are in memory. Each object of a class with virtual functions contains a pointer to a table of function pointers (the vtable, as it is sometimes referred to). All objects of a particular class contain a pointer to the same table. When the program calls a virtual member function it uses the pointer to the corresponding function in the vtable. In a sense, this vtable pointer uniquely identifies the class type of an object. In fact, some compilers have non-standard extensions that can use this pointer to provide a form of run-time type identification. Other vendors provide alternative methods for run-time identification. Microsoft has a <I>CRuntimeClass</I> object associated with each class that is used with the <I>IsKindOf</I> function. With this function, you can determine if an object belongs to a particular class or if it is derived from a class. (The class must be derived from the Microsoft <I>CObject</I> class to work with <I>IsKindOf</I>.) To use the <I>IsKindOf</I> function, you include a <I>DECLARE_DYNAMIC</I> macro in the class definition and an <I>IMPLEMENT_DYNAMIC</I> macro in the class implementation. <I>CRuntimeClass</I> is the data type used to store class information. You can obtain a pointer to an object of this type with:<P>
<pre>CRuntimeClass * pclass = RUNTIME_CLASS(Your_class);</pre>
Typically you do not use the information in <I>CRuntimeClass</I> directly, but instead pass it to <I>IskindOf</I>. For example, as shown in the following code fragment, you might want to cast a base class pointer to a pointer to a real object. To be logically correct, you need to be sure the object pointed to belongs to a particular class.<P>
<pre>CObject * pyour_object = new Your_class;
...
if ( pyour_object-&gt;IsKindOf( RUNTIME_CLASS(Your_class) ) )
    {
    // Cast it
    Your_class * p_this_object = (Your_class *) pyour_object;
    }</pre>
You can use this type information to create objects of a given class, The <I>CRuntimeClass</I> class provides a member function <I>CreateObject</I> for dynamically creating objects. The use of <I>CreateObject</I> is demonstrated as follows:<P>
<pre>CRuntimeClass * p_your_class = RUNTIME CLASS(Your_class);
// Create it
CObject * pyour_object = p_your_class-&gt;CreateObject();
// Cast it to the class
Your_class * p_this_object = (Your_class *) pyour_object;</pre>
In your question, you have run across one area of programming that requires some form of type identification: permanent or persistent storage. You cannot use the address of a vtable as the identification means for an object. When the contents of an object are read back into memory, the chances are that the vtable will be in a different memory location. You will need to store some form of type identification with the object. This identification could either be an integer value or the string name of the class. If your program stores objects in a known sequence and retrieves them by the same known sequence, then you do not need any type identification stored with the object. For example, if you always store <I>Checks</I> starting at the first position in the file, followed by <I>Deposits</I> and then <I>Withdrawals</I>, you can determine the type of an object by its position in the file. In your example, you cannot assume this kind of ordering exists, so you <I>must</I> store a class identifier. There are lots of ways to store this identifier, depending on how your classes are organized. Let's assume you have some unique identifier for each account entry type, such as:<P>
<pre>enum Entry_type {Entry_check, Entry_deposit, Entry_withdrawal};</pre>
One of these values would be stored away with each object. For example, if your compiler provides run-time type identification with <I>type_of</I>, you might code:<P>
<pre>Entry::save()
    {
    if ( this-&gt;type_of() == Check )
        // Store Entry_check
    else if (this-&gt;type_of() ==
           Deposit )
        // Store Entry_deposit
    else if (this-&gt;type_of() ==
           Withdrawal )
        // Store Entry_withdrawal)
    ...
    // Store remaining contents in an account
    }</pre>
Before I get too much mail regarding this "hidden switch statement," let me explain that this function is complementary to the retrieval function, which I will show shortly. You could use a virtual function for <I>save</I> in each of the derived classes. The function would store the appropriate <I>Entry_type</I> value, call a <I>save</I> function in the <I>Entry</I> class to store the data members in that class, and then save its own data members. If you were using the Microsoft compiler, this type checking code might look like the following fragment. However, Microsoft provides other functions that make this code unnecessary, as we shall see shortly.<P>
<pre>Entry::save()
    {
    CRuntimeClass * pcheck_class
        = RUNTIME_CLASS(Check);
    CRuntimeClass * pdeposit_class
        = RUNTIME_CLASS(Deposit);
    CRuntimeClass * pwithdrawal_class
        = RUNTIME_CLASS(Withdrawal );
    if ( this-&gt;IsKindOf(pcheck) )
        // Store Entry_check
    else if (this-&gt;IsKindOf(pdeposit) )
        // Store Entry_deposit
    else if (this-&gt;IsKindOf(pwithdrawal) )
        // Store Entry_withdrawal)
    ...
    // Store remaining contents in an account
    }</pre>
The basic dilemma comes in retrieving the objects. You cannot use a <I>retrieve</I> function for each derived class, as you do not know the type of entry for the next object stored in the file. Thus you can only retrieve an <I>entry</I> as a base class object. For example, the caller might use something that looks like:<P>
<pre>Entry *pentry;
Account account;
...
account.retrieve_next(&amp;pentry);</pre>
The <I>retrieve_next</I> function could look like the following:<P>
<pre>int Account::retrieve_next(Entry **pentry_in)
    {
    // Get rid of old pointer
    Entry *pentry = *pentry_in;
    if (*pentry != NULL)
        delete pentry;
    // Read the record off disk
    // Then check the type of the record ready
    if (type == Entry_check)
        *pentry = new Check;
    else if (type == Entry_deposit)
        *pentry = new Deposit;
    else if (type == Entry_withdrawal)
        *pentry = new Withdrawal;
    // Move associated data into the type
    ...
    // Then return the pointer
    *pentry_in = pentry;
    }</pre>
The caller passes this function a pointer to pointer to the <I>Entry</I> class. The function deletes the <I>Entry</I> that was pointed to by <I>pentry_in</I>. The <I>Entry</I> class should provide a virtual destructor, so that any additional data members in the derived classes are deallocated. Based on the <I>Entry_type</I> value stored in the file, the function allocates the appropriate pointer. The function moves the necessary data from the file into the new object and returns the value of the pointer. If necessary, each derived class can include a function that reads any additional data members from the file.<P>
The Microsoft archive retrieval function <I>(CArchive::operator&gt;&gt;)</I> does not require this if-else structure. The storage function <I>(CArchive::operator&lt;&lt;)</I> stores a run-time class identifier (the name of the class) in the file. When the retrieval function reads the file, it dynamically creates an object of the stored class and loads the information from the file into that object. Microsoft's multi-pronged approach to run-time typing eliminates worries about the details of persistent object storage and retrieval. All you have to do is to include the necessary macros in your object header file and your object implementation file.<P>
<h4><FONT COLOR="#000080"><A name="00A0_0045">C++ Problems<A name="00A0_0045"></FONT></h4></P>
I am an agricultural economist at the U.S. Department of Agriculture and am trying to learn C and C++. I have bought over ten books on C, and am reading them and keying in the exercises to practice the concepts. One of the books I have bought is <I>Learning</I> C++, by Neil Graham. I began keying in one of the exercises (in C++) and the program gave me a bunch of iostream declaration errors when I attempted to compile the source code using Borland Turbo C++, 1991 (<A href="list3.htm">Listing 3</a>)
. I saw your column in <I>The C Users Journal</I> and thought that you might be willing to suggest what is wrong, and how I might fix it. Also, do you have any recommendations for textbooks and/or diskette tutorials that may be useful in learning C and C++?<P>
Kenneth W. Erickson<br>
Washington, D.C.<P>
<B>A</B><P>
Reading several books and trying their examples is an excellent way to learn a new language. You can get a good feel for alternative ways of approaching problems. However, when you use only books for learning, you often run into problems for which a book has no answer. Many times I've been in the same quandary when using vendor-supplied manuals. In some cases the solution to my problem was simple but the manual just didn't deal with the problem.<P>
In your case, what appears to be an unexplainable error is caused by a simple glitch. You named the program with a ".c" extension. The compiler took this to mean that your program was to be compiled as a C program. Inside the <I>iostream.h</I> file are several C++ syntactic constructs (such as <I>class</I>). The compiler reported error messages for these constructs since they do not exist in C. If you had named the program with a .cpp extension, the compiler would have cleanly compiled the program. You might have been confused if you compiled other C++ programs without errors and therefore you thought there was something wrong with this program. Many compilers (such as Borland), have a switch that compiles .c files as C++ programs. If this option was set in your configuration file for previous programs, then other C++ programs with .c extensions would have compiled properly. If you switched around directories or reinstalled the compiler, the switch may have been reset.<P>
There are numerous books out on C. Many are based on your knowledge of other languages. My book <I>C Language for Programmers</I> (QED) gives comparisons of C constructs with COBOL, PASCAL, PL/1, BASIC, and FORTRAN. My new book <I>C Language for COBOL Programmers</I> (QED) presents very detailed comparisons between COBOL language statements and C. <I>All on C</I> (Harper Collins) explains C without comparisons to other languages, but with numerous examples. In the C++ arena, I suggest C++ <I>Programming and Fundamental Concepts</I> by Anderson and Heinze (Prentice-Hall). I use that book as a supplementary book for my C++ courses.<P>
<h4><FONT COLOR="#000080"><A name="00A0_0046">User interface<A name="00A0_0046"></FONT></h4></P>
<B><B>Q</B></B><P>
I am new to the C language and am having a problem that you might help me with. I am writing a football card data base, and need help with the user interface. What I am trying to do is let the user of my program enter required information without pressing the enter key. I also want the user to be able to move from one data entry field to another using the arrow and home keys of the key pad. If the user presses the arrow keys the highlighted field would move up or down as required, but if a letter key or a number key was pressed, the letter or number would be concatenated to the appropriate char string variable. The concatenating part I can handle. It's getting the input that's giving me the problem. I've tried many different approaches to make this work, but still no luck. If you could help me with this problem I would be very grateful. I'm a subscriber to the <I>C Users Journal</I>, and will be checking the Questions &amp; Answers section to see if you can solve my problem. I am using Borland C++ version 3.0 (DOS).<P>
Randy Jones<br>
Ruther Glen, VA<P>
<B>A</B><P>
As you have discovered, data-field entry functions are not included in the Standard C libraries. Numerous shareware and commercially-available libraries will perform the operations you list. For a listing of available shareware consult <I>The C User's Group Public Domain Catalog</I> [available for free upon request from R&amp;D Publications, 1601 W. 23rd St., Lawrence, KS 66046. Ph: (913)-841-1631. Fax: (913)-841-2624. e-mail: <I>cujsub@rdpub.com.</I> Perusing The <I>C Users' Journal</I> itself will reveal a number of the major vendors of display packages. Since for the past year I have been programming almost exclusively in Microsoft Windows using Visual C++, I haven't kept up with all the different features of the commercial packages. Many of these packages have integrated screen designers/code generators. With such a system, you can layout your screens with a mouse or cursor keys, rather than by writing individual function calls for each field. In case you can't find what you want in either the catalog or the ads, my book <I>All on C</I> shows a sample implementation of a package of display functions providing most of the features you requested.<P>

<h4><a href="../../../source/1994/mar94/pugh.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
