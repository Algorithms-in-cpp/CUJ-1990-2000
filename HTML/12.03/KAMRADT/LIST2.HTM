<HTML><HEAD>
<TITLE>March 1994/Weight Reduction Techniques in C++/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2 <I>Memory pool member functions</I></A></h4>
<pre>#include "mempool.h"

MemoryPoolLink::
  MemoryPoolLink(
    size_t size,
    MemoryPoolLink *_next)
  : bits(0l),
    data(new
      char[size*PoolSize]),
    next(_next)
{
  ;
}

MemoryPoolLink::
  ~MemoryPoolLink()
{
  delete[] data;
}
void *MemoryPoolLink::malloc(
  size_t size)
{
static char lookup[] = {
  0,     1,     0,     2,
  0,     1,     0,     3,
  0,     1,     0,     2,
  0,     1,     0,     4,
  };
  int shift = 0;
  unsigned long b = bits;
  if((b&amp;0xFFFF) == 0xFFFF)
  {
    shift = 16;
    b &gt;&gt;= 16;
  }
  if((b&amp;0xFF) == 0xFF)
  {
    shift += 8;
    b &gt;&gt;= 8;
  }
  if((b&amp;0xF) == 0xF)
  {
    shift += 4;
    b &gt;&gt;= 4;
  }
  shift += lookup[b&amp;0xF];
  bits |= (1l &lt;&lt; shift);
  return data +
    (shift * size);
}

void MemoryPoolLink::free(
  void *ptr,
  size_t size)
{
  bits &amp;=
    ~(1l &lt;&lt;
    ((char *)ptr-data)/size);
  }

MemoryPool::MemoryPool(
  size_t_size)
  : size(_size),
    freeHead(0,NULL),
    usedHead(0,NULL)
{
}

void *MemoryPool::add()
{
  MemoryPoolLink *temp = new
    MemoryPoolLink(size,
    freeHead.next);
  if(temp == NULL)
    return NULL;
  freeHead.next = temp;
  return
    freeHead.next-&gt;
    malloc(size);
}

void *MemoryPool::malloc()
{
  if(freeHead.next)
  {
    void *ret =
      freeHead.next-&gt;
      malloc(size);
    if(freeHead.next-&gt;bits ==
      0xFFFFFFFFL)
    {
      MemoryPoolLink *temp =
        freeHead.next;
      freeHead.next =
        temp-&gt;next;
      temp-&gt;next =
        usedHead.next;
      usedHead.next = temp;
    }
    return ret;
  }
  return add();
}

void MemoryPool::free(
  void *ptr)
{
  MemoryPoolLink *temp =
    freeHead.next;
  MemoryPoolLink *prev =
    &amp;freeHead;
  while(temp)
  {
    ptrdiff_t diff =
      temp-&gt;data -
      (char *)ptr;
    if(diff &gt; 0 &amp;&amp;
      diff &lt; size*PoolSize)
    {
      temp-&gt;free(ptr, size);
      if(temp-&gt;bits == 01)
      {
        prev-&gt;next =
          temp-&gt;next;
        delete temp;
      }
      return;
    }
    prev = temp;
    temp = temp-&gt;next;
  }
  temp = usedHead.next;
  prev = &amp;usedHead;
  while(temp)
  {
    ptrdiff_t diff =
      temp-&gt;data -
      (char *)ptr;
    if(diff &gt; 0 &amp;&amp;
      diff &lt; size*PoolSize)
    {
      temp-&gt;free(ptr, size);
      prev-&gt;next =
        temp-&gt;next;
      temp-&gt;next =
        freeHead.next;
      freeHead.next =
        temp;
      return;
    }
    prev = temp;
    temp = temp-&gt;next;
  }
}

// End of File
</pre>
</BODY>
</HTML>
