<HTML><HEAD><TITLE>March 1994/ROMLDR, an Embedded System Program Locator/Sidebar</TITLE></HEAD><BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h3 align="center"><FONT FACE="Garamond" COLOR="#000080">Startup Code for Embedded Systems</FONT></h3><hr>
<BLOCKQUOTE>
Startup code consists of code to setup and to terminate an application program. Startup code is typically written in assembly language and the source code is sometimes provided with the C compiler. Replacement libraries often include replacement startup code that can be used when the normal C compiler library functions are not used.<P>
Startup code for EPROM-based systems must provide additional functionality which depends on the specifics of the system.<P>
Embedded system startup code usually performs the following steps:<P>
1.     Establish order of segment classes.<P>
2.     Set up the program stack.<P>
3.     Transfer initialized values to RAM from EPROM.<P>
4.     Zero uninitialized RAM values.<P>
5.     Set up error interrupt vectors.<P>
6.     Call necessary library initialization routines.<P>
7.     Call the application.<P>
The startup code must also provide the following components:<P>
8.     Error shut-down code to terminate or restart.<P>
9.     Exit shut-down code to terminate or restart.<P>
10.     Any error and miscellaneous routines.<P>
11.     Initialization of application before calling main function.<P>
12.     A reset vector for standalone applications.<P>
There are two approaches to creating a custom startup module. You can start with the original library or compiler code and modify it to handle the added embedded requirements, or you can start with a minimal embedded system startup module and extend it as required.<P>
Custom startup code may not provide all features described in a compiler's documentation. Environment, <I>argv</I> and <I>argc</I>, and even common option variables may not be implemented. For example, Borland C allows you to set stack size by initializing a far variable, <I>_stklen</I>. This variable is created by the Borland startup code and may be replaced in custom startup code by a simple stack-size definition.<P>
Startup code defines segments and segment classes and their order. While compilers often allow these names to be changed for modules, the compiled libraries are still expecting certain module names to exist. Warnings abound over changing the basic segment order so extreme care should be used if that appears to be necessary. The addition of segments and classes is much less critical. As shown in <A href="list4.htm">Listing 4</a>,
 you can even add them virtually to make the MAP more descriptive.<P>
<A href="list4.htm">Listing 4</a>
is a simple example of startup code. I provide it as a template rather than a complete example since some portions are compiler dependent. You may still need to add several code sections for an application. Refer to your compiler's startup code module for specific details.<P>
</BLOCKQUOTE>
</BODY>
</HTML>
