

<HTML>
<HEAD>

<TITLE>March 1994/CUG Product Focus</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmar.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">CUG Product Focus<A name="00A8_004B"><A name="00A8_004B"></font></h2><P>
<h3 align="center"><A name="00A8_0000"><A name="00A8_0000">C++ SIM</h3><P>
<h3 align="center"><font color="#800000">Victor R. Volkman</font></h3><hr><blockquote><P>
<P><i><A name="00A8_0000"><A name="00A8_0000">Victor R. Volkman received a BS in Computer Science from Michigan Technological University. He has been a frequent contributor to The C Users Journal since 1987. He is currently employed as Senior Analyst at H.C.I.A. of Ann Arbor, Michigan. He can be reached by dial-in at the HAL 9000 BBS (313) 663-4173 or by Usenet mail to <I></I>sysop@hal95.com.<I></I></i></P><P>
<h4><FONT COLOR="#000080"><A name="00A8_004C">Introduction<A name="00A8_004C"></FONT></h4></P>
This month's product focus is derived from documentation written by M.C. Little and D.L. McCue. Little and McCue have provided this documentation, which describes their C++ SIM simulation class library, expressly for reprint in The <I>C Users Journal</I>.<P>
C++ SIM is a class library which provides discrete process-based simulation similar to that provided by SIMULA <a href="#birt">[Birtwhistle 73]</a><a href="#dahl">[Dahl 70]</a> and has been used in the work presented in <a href="#mccue">[McCue 92]</a>. Based on the facilities provided in SIMULA, C++ SIM provides active objects (instances of C++ classes) as the units of simulation using the type-inheritance facilities of C++ to convey the notion of "activity."<P>
C++ SIM is designed to be used with a user-supplied threads package. C++ SIM's authors use Sun Microsystem's lightweight process (thread) package; however, they have added this package to the simulation class hierarchy through an abstract class definition so that other lightweight process packages can be used instead with very little modification. Users of this framework can replace existing classes as long as the replacements conform <a href="#black">[Black 86]</a> to the original class definition.<P>
This article describes the C++ SIM class hierarchy, and shows how it can be used to further refine the simulation package <a href="#1">[1]</a>.<P>
<h4><FONT COLOR="#000080"><A name="00A8_004D">The Class Hierarchy<A name="00A8_004D"></FONT></h4></P>
<A href="fig2.htm">Figure 2</a>
illustrates the main class hierarchy within the simulation package. The base class is <I>Thread</I>, which provides the minimum functionality required of a threads library. Two classes, <I>GNU-Thread</I> and <I>LWP_Thread</I>, derive from the <I>Thread</I> class to support the threads packages that were available to C++ SIM's authors at the time of this writing. These classes are Sun's own lightweight process package, and the GNU threads library. Class <I>Thread_Type</I> provides a (relatively) transparent way to change from one thread implementation to another. Class <I>Process</I> provides all operations required by the simulator to control execution of all processes in the simulation. These classes are described in the following sections.<P>
<h4><FONT COLOR="#000080"><A name="00A8_004E">The Threads Base Class<A name="00A8_004E"></FONT></h4></P>
In keeping with the C++ programming model, classes obtain the thread characteristic, necessary to convey the notion of "activity" within the simulation environment, by inheriting an appropriate base class (in simulation terms they become processes). In C++ SIM, all classes that provide the abstraction of threads must be derived from the <I>Thread</I> base class. This base class forces the derived class to provide a minimum set of operations required for the management of threads. (The base class defines these operations as pure virtual functions, and C++ requires that a deriving class define such functions before an instance of the class can be declared.) These operations are shown in the <I>Thread</I> class as follows:<P>
<pre>class Thread
{
public:
    virtual void Suspend() = 0; // pure virtual function
    virtual void Resume() = 0;
    
    virtual void Body() = 0;
    virtual long Current_Thread() = 0;
    
    virtual long Identity();
    static Thread* Self();
};</pre>
When defined, the <I>Suspend</I> and <I>Resume</I> methods will give the thread package specific ways of suspending and resuming execution of a thread respectively.<P>
<I>Body</I> represents the controlling code for each object, i.e., the scope within which the controlling thread will execute.<P>
<I>Current_Thread</I> must be defined by the derived class, since it returns the identity of the currently executing thread, which is specific to the thread package used.<P>
The base class itself implements the operations <I>Identity</I> and <I>Self</I> because some threads packages do not provide similar functionality. <I>Identity</I> returns the unique identity of the thread associated with a given object, and <I>Self</I> returns the currently executing thread. Because <I>Self</I> is a static member function programs can invoke it without creating an instance of the Thread class, i.e., programs may call <I>Thread::Self()</I>.<P>
<h4><FONT COLOR="#000080"><A name="00A8_004F">The Class <B><I>LWP_Thread<A name="00A8_004F"></B></I></FONT></h4></P>
User classes which require separate threads of control using the Sun thread package can be derived from the <I>LWP_Thread</I> class shown as follows:<P>
<pre>class LWP_Thread : public Thread
{
public:
    virtual void Suspend();
    virtual void Resume();
    virtual void Body() = 0;

    virtual long Current_Thread();
    
    thread_t Thread_ID();
    static void Initialize();
    
protected:
    static const int MaxPriority;
    LWP_Thread(int priority = MaxPriority);
};</pre>
The <I>MaxPriority</I> constant represents the maximum priority at which a thread may execute (by default all threads derived from this class execute at this priority). Class <I>LWP_Thread</I> defines all of the pure virtual functions declared in <I>Thread</I> except <I>Body,</I> which must be defined by the deriving class.<P>
<I>Initialize</I> initializes the threads package prior to use. (Obviously the operations performed within this method are thread package specific.)<P>
<I>Thread_ID</I> returns more detailed (package-specific) information about the associated thread.<P>
<h4><FONT COLOR="#000080"><A name="00A8_0050">The Process Class<A name="00A8_0050"></FONT></h4></P>
Applications could derive from the <I>Thread</I> base class to provide active objects in C++ outside of the simulation package. However, to become a process in the simulation environment, a class must be derived from the <I>Process</I> base class.<P>
This class is shown as follows:<P>
<pre>class Process : public LWP_Thread
{
public:
    virtual ~Process ();
    
    static double CurrentTime ();
    
    void ActivateBefore (Process&amp;);
    void ActivateAfter (Process&amp;);
    void ActivateAt (double AtTime = CurrentTime());
    void ActivateDelay (double AtTime = CurrentTime());
    void Activate();

    void ReActivateBefore (Process&amp;);
    void ReActivateAfter (Process&amp;);
    void ReActivateAt (double AtTime = CurrentTime());
    void ReActivateDelay (double AtTime = CurrentTime());
    void ReActivate ();
    
    void Cancel ();
    double evtime ();
    void set_evtime (double);
    
    boolean idle ();
    boolean terminated ();
    
    virtual void Body () = 0;
    
protected:
    Process ();
    
    void Hold (double t);
    void Passivate ();
};</pre>
<I>idle</I> returns either TRUE or FALSE depending upon whether the process is currently in the simulation queue.<P>
<I>terminated</I> returns either TRUE or FALSE depending upon whether the process is terminated.<P>
<I>evtime</I> returns the simulation time at which a process is due to be reactivated; <I>set_evtime</I> enables a program to change this time.<P>
The <I>Hold</I> method removes the active process from the head of the event queue and schedules it to become active a specified number of time units later.<P>
<I>Passivate</I> removes the currently active process from the event queue altogether. If the process is to execute again the program must recreate it.<P>
<I>Cancel</I> removes the process from the simulation queue or simply suspends it indefinitely if it is currently not in the queue.<P>
At any point in time, a process can be in one (and only one) of the following states:<P>
<UL><li>active: the process is at the head of the queue maintained by the scheduler (to be described shortly) and its actions are being executed.</li>
<li>suspended: the process is in the queue maintained by the scheduler, scheduled to become active at a specified time in the future.</li>
<li>passive: the process is not in the scheduler's queue. Unless another process brings it back into the queue, it will not execute any further.</li>
<li>terminated: the process is not in the scheduler's queue and has no further actions to execute.</li></UL>
There are five ways to activate a process, and similarly five ways to reactivate a waiting process:<P>
<UL><li>before another process (<I>ActivateBefore</I> and <I>ReActivateBefore</I>);</li>
<li>after another process (<I>ActivateAfter</I> and <I>ReActivateAfter</I>);</li>
<li>at a specified (simulated) time (<I>ActivateAt</I> and <I>ReActivateAt</I>);</li>
<li>after a specified (simulated) delay (<I>ActivateDelay</I> and <I>ReActivateDelay</I>);</li>
<li>activate now (at the current simulated time) (<I>Activate</I> and <I>ReActivate</I>).</li></UL>
(Note that if a process is already scheduled, reactivation will simply re-schedule the process.)<P>
The <I>Current Time</I> method returns the current simulation time; programs typically call <I>Curren time</I> to control action relative to a given time period.<P>
<h4><FONT COLOR="#000080"><A name="00A8_0051">The Simulation Scheduler<A name="00A8_0051"></FONT></h4></P>
As in SIMULA, simulation processes (entities) execute at their assigned simulation time, which is typically determined by an appropriate distribution function. Only one process executes in any instance of real time, but many processes may execute at any instance of simulation time. Programs place currently inactive processes in a simulation queue (the event queue), which is arranged in order of increasing simulation time.<P>
To coordinate the execution of these processes, the scheduler manages the simulation queue as follows: when no process is currently active, the scheduler selects a process to run from the head of the queue and (re-) activates it. When no processes are left to execute, i.e., the queue is empty, the simulation ends.<P>
The simulation queue is organized as a tree to improve the efficiency of the scheduling algorithm. All nodes (processes) at the same level of the tree are assigned to the same simulation time, as shown in <A href="fig1.htm">Figure 1</a>.
<P>
Because the scheduler manages processes in the simulation environment it cannot itself be a simulation process. Like the main thread to be described later, the scheduler is a priority thread within the environment and as such must be controlled in a slightly different manner than the other simulation entities. The structure of the scheduler is extremely simple and is shown as follows:<P>
<pre>class Scheduler : public LWP_Thread
{
public:
    Scheduler ();
    ~Scheduler ();
    void Body ();
    double CurrentTime ();
};
</pre>
Every simulation application must start one scheduler before the simulation can begin. The example to be described near the end of this article illustrates use of the scheduler.<P>
<h4><FONT COLOR="#000080"><A name="00A8_0052">Priority Threads<A name="00A8_0052"></FONT></h4></P>
C++ SIM executes two "priority" threads which cannot be derived from the <I>Process</I> base class and therefore must be activated and deactivated separately. These threads are as follows:<P>
<UL><li>the simulation scheduler: this thread must be activated via the <I>Resume</I> method of the thread base class from which it is derived (e.g., <I>LWP_Thread</I>);</li>
<li>the thread associated with <I>main</I>. A program must suspend this thread to allow other threads to run since this thread has the highest priority in the system. Calling the <I>Thread</I> class <I>Initialize</I> method within the main body of the simulation code adds this thread to the thread queue maintained by class <I>Thread</I>. The thread's presence in the queue allows the <I>Suspend</I> method to act on it when the program requirs it to become inactive (using the <I>Thread::Self()-&gt;Suspend()</I> operation).</li></UL>
<h4><FONT COLOR="#000080"><A name="00A8_0053">Distribution Functions<A name="00A8_0053"></FONT></h4></P>
Simulations often require distribution functions of various events (e.g., the rate of arrivals of jobs at a processor, or the time between failures for a node). C++ SIM provides a set of classes which give access to various useful distribution functions, including the following: <I>RandomStream, UniformStream, Draw, Exponentialstream, ErlangStream, HyperExponentialStream</I>, and <I>NormalStream</I>. By creating instances of these classes the simulation processes can gain access to the appropriate distribution function. <A href="fig3.htm">Figure 3</a>
shows the class hierarchy of the distribution functions.<P>
<h4><FONT COLOR="#000080"><A name="00A8_0054"><I>RandomStream </I><B>and</B><I> NormalStream<A name="00A8_0054"></I></FONT></h4></P>
Classes <I>RandomStream</I> and <I>NormalStream</I> illustrate how the distribution functions are derived and show how further functions could be built. <I>RandomStream</I> (from which all other distribution functions are derived) is shown as follows:<P>
<pre>class RandomStream
{
public:
    RandomStream (long MGSeed = 772531L.
                long LCGSeed = 1878892440L);
    virtual double operator() () = 0;
    double Error ();

protected:
    double Uniform ();

private:
    double MGen ();
    double series[128];
    long MSeed, LSeed;
};</pre>
The <I>Error</I> method returns a chi-square error measure on the uniform distribution function. The <I>Uniform</I> method generates random numbers; <I>Uniform</I> uses the linear congruential generator based on the algorithm from <a href="#knuth">[Knuth Vol2]</a>, and shuffles the results of the linear generator with the multiplicative generator as suggested by <a href="#knuth">[Knuth Vol2]</a> <a href="#3">[3]</a> to obtain a sufficiently uniform random distribution.<P>
Class <I>NormalStream</I> is defined as follows:<P>
<pre>class NormalStream : public RandomStream
{
public:
    NormalStream (double Mean, double StandardDeviation);
    virtual double operator() ();

private:
    double Mean, StandardDeviation;
    double z;
};</pre>
The <I>operator()</I> uses the polar method in <a href="#knuth">[Knuth Vol2]</a> <a href="#4">[4]</a> to implement the <I>NormalStream</I> by making use of the <I>Uniform</I> method of <I>RandomStream</I>.<P>
<h4><FONT COLOR="#000080"><A name="00A8_0055">SIMSET<A name="00A8_0055"></FONT></h4></P>
C++ SIM also provides entity and set manipulation facilities similar to those provided by the <I>SIMSET</I> classes of SIMULA. These facilities break down into two classes:<P>
<UL><li><I>Link</I>: the <I>Link</I> class provides elements of a doubly linked list;</li>
<li><I>Head</I>: the <I>Head</I> class maintains doubly linked lists of <I>Link</I> elements.</li></UL>
Class link is defined as follows:<P>
<pre>class Link
{
public:
    virtual Link ();
    
    Link* Suc () const;
    Link* Pred () const;
    
    Link* Out ();
    void InTo (head*);
    
    void Precede (Link*);
    void Precede (Head*);
    void Follow (Link*);
    void Follow (Head*);

protected:
    Link ();
};</pre>
Because it makes no sense to create instances of <I>Link</I> objects, the constructor for <I>Link</I> is protected &#151; programs must derive a class from <I>Link</I> to benefit from its functionality.<P>
<I>Suc</I> and <I>Pred</I> return the successor and predecessor of this list element respectively. These functions return <I>0</I> if no such element exists.<P>
<I>Out</I> removes the object to which it currently belongs (if any) from the linked list. <I>InTo</I> makes this object the last element in a linked list if the list exists; If the list doesn't exist <I>Out</I> attempts to remove the object from any linked list to which it may belong.<P>
<I>Precede</I> also places an object in a linked list. If <I>Precede</I> is passed another <I>Link</I> element, say <I>L</I>, then if <I>L</I> is a member of a linked list, this object is placed into the same linked list and immediately preceding <I>L</I>. If <I>L</I> isn't a member of a linked list, the result is the same as for <I>Out.</I> If <I>Precede</I> is passed a Head object it produces the same result as <I>InTo</I>.<P>
<I>Follow</I> acts similarly to <I>Precede,</I> except that <I>L.Follow(L1)</I> inserts L immediately after <I>L1,</I> and <I>L.Follow(H),</I> places <I>L</I> as the first element in <I>H</I>, where <I>H</I> is a Head object.<P>
Note that as in SIMULA, Link elements can only belong to one linked list at a time.<P>
Class <I>Head</I> is defined as follows:<P>
<pre>class Head
{
public:
    Head ();
    virtual ~Head ();
    
    Link* First () const;
    Link* Last () const;
    
    long Cardinal () const;
    boolean Empty () const;
    
    void Clear ();
}</pre>
<I>First</I> and <I>Last</I> return references to the first and last Link objects in the list respectively. If the list is empty then these functions return <I>0</I>.<P>
<I>Cardinal</I> returns the number of <I>Link</I> objects in the list, and <I>Empty</I> returns TRUE if the list is empty, FALSE otherwise. <I>Clear</I> removes all <I>Link</I> objects from the list.<P>
<h4><FONT COLOR="#000080"><A name="00A8_0056">Example: Job Service Simulation<A name="00A8_0056"></FONT></h4></P>
This example is taken from <a href="#mitra">[Mitrani 82]</a> and simulates a process scheduler for a machine which attempts to execute as many process (jobs) as possible. The machine can only process one job at a time and queues job requests until it can deal with them. The machine is prone to failures, so started jobs will be interrupted by such failures and delayed until the machine has been repaired (reactivated), at which point it is forced to restart execution from the beginning (i.e., it is placed at the head of the job queue). The main processes within this example are:<P>
<UL><li><I>Arrivals</I>: this process controls the rate at which jobs arrive at the service (Machine).</li>
<li><I>Breaks:</I> this process controls the availability of the Machine by "killing" it and restarting it at intervals drawn from a <I>Uniform</I> distribution.</li>
<li><I>Job</I>: this process represents the jobs that the Machine must process.</li>
<li><I>Machine:</I> this is the machine on which the service resides. <I>Machine</I> obtains <I>Jobs</I> from the job queue for the service and then attempts to execute them. The machine can fail and so the response time for <I>Jobs</I> is not guaranteed to be the same every time the job is performed.</li></UL>
<h4><FONT COLOR="#000080"><A name="00A8_0057">Arrivals<A name="00A8_0057"></FONT></h4></P>
The Arrivals class definition is relatively simple since none of the other processes invoke operations on it. <I>Arrivals</I> is defined as follows:<P>
<pre>class Arrivals : public Process
{
public:
    Arrivals (double);
    ~Arrivals ();

    void Body ();

private:
    Exponential Stream* InterArrival Time;
};</pre>
The constructor initializes the stream from which the rate of <I>Job</I> arrivals is drawn and the destructor simply cleans up before the object is destroyed:<P>
<pre>Arrivals::Arrivals (double mean)
{
    InterArrivalTime = new ExponentialStream(mean);
}
Arrivals::~Arrivals () { delete InterArrivalTime; }</pre>
The main body of <I>Arrivals</I> (shown below) simply waits for an amount of time dictated by the rate of arrivals stream and then creates another <I>Job.</I> This procedure is repeated until the simulation ends.<P>
<pre>void Arrivals::Body ()
{
    for (;;)                         // inifinite loop
    {
        Hold((*InterArrivalTime) ());
        Job* work = new Job();
    }
}</pre>
<h4><FONT COLOR="#000080"><A name="00A8_0058">Job<A name="00A8_0058"></FONT></h4></P>
Unlike <I>Arrivals,</I> which is an active entity within the simulation, the <I>Job</I> class does not need to be a separate process, since it is simply enqueued when it is created and dequeued by the <I>Machine</I> when it can be executed. All a given <I>Job</I> must do is calculate how long it took to be "processed":<P>
<pre>class Job
{
public:
    Job ();
    ~Job ();

private:
    double ArrivalTime;
    double ResponseTime;
};</pre>
Because no operations are invoked on instances of the Job class, its constructor and destructor perform all of its work:<P>
<pre>Job::Job ()
{
    boolean empty;
    
    ResponseTime = 0;
    ArrivalTime = sc-&gt;CurrentTime();
    empty = JobQ.IsEmpty();
    JobQ.Enqueue(this);  // place this Job on to the queue
    Total Jobs++;
    
    if (empty &amp;&amp; !M-&gt;Processing() &amp;&amp; M-&gt;IsOperational())
        M-&gt;Activate();  // Machine idle as no Jobs in queue
                     // and not broken
}

Job::~Job ()
{
    ResponseTime = sc-&gt;CurrentTime() - ArrivalTime;
    TotalResponseTime += ResponseTime;
}</pre>
<h4><FONT COLOR="#000080"><A name="00A8_0059">Queue<A name="00A8_0059"></FONT></h4></P>
The program places jobs which are not being serviced in a job queue. As with the <I>Job</I> class, an instance of <I>Queue</I> is not required to be active, and as such <I>Queue</I> is not derived from the <I>Process</I> class.<P>
<I>Queue</I> is defined as follows:<P>
<pre>class Queue
{
public:
    Queue ();
    ~Queue ();
    
    boolean IsEmpty ();
    // returns TRUE if no Jobs in queue
    long QueueSize ();
    // returns number of Jobs in queue
    Job* DeQueue ();
    // returns head of queue
    void Enqueue (Job*);
    // places Job at tail of queue
};</pre>
<h4><FONT COLOR="#000080"><A name="00A8_005A">Machine<A name="00A8_005A"></FONT></h4></P>
The <I>Machine</I> process obtains <I>Jobs</I> from the queue and processes them. Since <I>Machine</I> is prone to failures <I>Jobs</I> can take extended periods of time to complete. Other simulation processes invoke various operations on the machine (for example to determine whether or not it has failed):<P>
<pre>class Machine : public Process
{
public:
    Machine (double);
    ~Machine ();
    
    void Body ();
    
    void Broken ();
    void Fixed ();
    boolean IsOperational ();
    boolean Processing ();
    double ServiceTime ();

private:
    ExponentialStream* STime;
    boolean operational;
    boolean working;
};</pre>
As with the <I>Breaks</I> and <I>Arrivals</I> processes, <I>Machine's</I> constructor and destructor initialize and delete the stream that dictates the time required to process a <I>Job</I>.<P>
<I>Processing</I> returns the current status of the machine, i.e., whether or not it is executing a job:<P>
<pre>boolean Machine::Processing () { return working; }</pre>
<I>Broken</I> and <I>Fixed</I> de-activate (crash) and re-activate the machine respectively:<P>
<pre>void Machine::Broken () { operational = false; }
void Machine::Fixed () { operational = true; }</pre>
<I>IsOperational</I> indicates whether or not the machine is currently active (i.e., whether it has "crashed"):<P>
<pre>boolean Machine::IsOperational () { return operational; }</pre>
<I>ServiceTime</I> returns the time required to service a given job based on the relevant distribution function initialized within the constructor:<P>
<pre>double Machine::ServiceTime () { return (*STime)(); }</pre>
The main body of the <I>Machine</I> gets a <I>Job</I> from the job queue (if one is available) and attempts to process it before looping again:<P>
<pre>void Machine::Body ()
{
    for(;;)
    {
       working = true;

       while (!JobQ.IsEmpty())
       // continue as long as Jobs are available
       {
          Hold(ServiceTime());
          Job* J = JobQ.Dequeue();
          
          ProcessedJobs++;
          // keep track of number of completed Jobs
          delete J;             // remove finished Job
       }
       
       working = false;
       // no Jobs in queue so become idle
       Cancel();
    }
}</pre>
<h4><FONT COLOR="#000080"><A name="00A8_005B">Breaks<A name="00A8_005B"></FONT></h4></P>
The Breaks class defines a process which simply waits for a specific period of time before "killing" the <I>Machine</I> process. This process then waits again before re-activating the machine. The <I>Breaks</I> class definition is relatively simple:<P>
<pre>class Breaks : public Process
{
public:
    Breaks ();
    ~Breaks ();
    
    void Body ();

private:
    UniformStream* RepairTime;
    UniformStream* OperativeTime;
    boolean interrupted_service;
};</pre>
The constructor and destructor simply initialize and delete the streams used by the <I>Breaks</I> process respectively.<P>
The main body of the <I>Breaks</I> process activates and deactivates the <I>Machine</I> process. The <I>Machine</I> fails and recovers according to the <I>OperativeTime</I> and <I>RepairTime</I> distribution functions respectively. The body is defined as follows:<P>
<pre>extern Machine* M; // This is the machine used to
                // service requests
extern Queue JobQ; // This is the queue from which
                // Jobs are drawn

void Breaks::Body ()
{
    for(;;)
    {
       Hold((*OperativeTime)());
       M-&gt;Broken();
       // de-activate the Machine
       M-&gt;Cancel();
       // remove Machine from Scheduler queue

       if (!JobQ.IsEmpty())
           interrupted_service = true;
       
       Hold((*RepairTime)());
       M-&gt;Fixed();    // re-activate the Machine
       if (interrupted_service)
       {
           interrupted_service = false;
           M-&gt;ActivateAt(M-&gt;ServiceTime() +
                        CurrentTime());
       }
       else
           M-&gt;ActivateAt();
    }
}</pre>
<h4><FONT COLOR="#000080"><A name="00A8_005C"><I>MachineShop<A name="00A8_005C"></I></FONT></h4></P>
The <I>MachineShop</I> class is the core of the simulation; it starts up all of the main processes involved, and when the simulation ends it prints out the results.<P>
<pre>class MachineShop : public Process
{
public:
    MachineShop ();
    ~MachineShop ();

    void Body ();
    void Await ();
};</pre>
The <I>Body</I> method starts up the other processes, such as the <I>Machine</I>, and then waits until the number of processed <I>Jobs</I> is at least 100,000:<P>
<pre>void MachineShop::Body ()
{
    sc= new Scheduler();       // create the simulation
                          // queue scheduler
    Arrivals* A = new Arrivals(10);
    M = new Machine(8);
    Job* J = new Job;
    Breaks* B = new Breaks;
    
    // activate the relevant simulation processes
    
    B-&gt;Activate();
    A-&gt;Activate();
    sc-&gt;Resume();             // start up the scheduler
                          // <B>-</B> it is not a process
    
    while (ProcessedJobs &lt; 100000)
        Hold(10000);

cout &lt;&lt; "Total number of jobs processed"
&lt;&lt; TotalJobs &lt;&lt; endl;
cout &lt;&lt; "Total response time" &lt;&lt; TotalResponseTime &lt;&lt; endl;
cout &lt;&lt; "Avge response" &lt;&lt;
(TotalResponseTime/ProcessedJobs) &lt;&lt; endl;
cout &lt;&lt; "Avge number jobs present"
&lt;&lt; (JobsInQueue/CheckFreq) &lt;&lt; endl;

    // end simulation by suspending processes
    
    sc-&gt;Suspend();
    A-&gt;Suspend();
    B-&gt;Suspend();
}</pre>
It isn't necessary to explicitly activate the <I>Machine</I> process because the <I>Breaks</I> or <I>Jobs</I> process will do this.<P>
The <I>Await</I> method suspends the thread associated with <I>main</I>, thus allowing the other simulation threads to execute:<P>
<pre>void MachineShop::Await()
{
    Resume();
    Thread::Self()-&gt;Suspend();
}</pre>
<h4><FONT COLOR="#000080"><A name="00A8_005D">Main<A name="00A8_005D"></FONT></h4></P>
The main part of the simulation code initializes the various thread-specific variables used (e.g., the maximum priority of a thread), creates the main body of the simulation code (in this case <I>MachineShop</I>) and then suspends the thread associated with main:<P>
<pre>void main ()
{
    LWP_Thread::Initialize();
    
    MachineShop m;
    m. Await();        // Suspend main's thread
                    // (NOTE: this MUST be done by all applications).
}</pre>
<h4><FONT COLOR="#000080"><A name="00A8_005E">Conclusions<A name="00A8_005E"></FONT></h4></P>
The authors of C++ SIM have endeavoured to provide a simulation package which provides similar functionality to that of SIMULA, since SIMULA has fulfilled the needs of users over many years. From their experiences of using SIMULA, both as a general programming language and as a simulation tool, they believe they have been successful. As a result of using C++ they also believe that they have produced a simulation package having several advantages over SIMULA, for example:<P>
<UL><li>performance &#151; C++ compilers typically generate code that is several times more efficient than similar SIMULA code, and as a result, simulations execute correspondingly faster;</li>
<li>C++ provides more extensive object-oriented features than SIMULA, allowing, for example, class instance variables to be either publicly or only privately available. In SIMULA, every thing is public, affecting the way code is written and providing extra problems during debugging.</li>
<li>C++ SIM incorporates inheritance throughout its design to an even a greater extent than is already provided in SIMULA. For example, C++ SIM's I/O facilities, random number generators, and probability distribution functions are entirely object-oriented, relying on inheritance to specialize their behavior. Hence, users can add new functionality (e.g., new random number generators) with little effect on the overall system structure.</li></UL>
<h4><FONT COLOR="#000080"><A name="00A8_005F">Acknowledgements<A name="00A8_005F"></FONT></h4></P>
The authors would like to thank Professor Isi Mitrani for the help he has given them in the development of this simulation package and the time he has devoted to listening to their thoughts and problems. They would also like to thank Ron Kerr for his help with the SIMULA language, and Dr. Graham Partington for his comments on drafts of this article. The work reported here has been supported by SERC/MOD Grant GR/H81078 and Esprit Broadcast (Basic Research Project Number 6360).<P>
<h4>References</FONT></h4></P>
<a name="birt"></a>[Birtwhistle 73] G. M. Birtwhistle, O-J. Dahl, B. Myhrhaug, K. Nygaard, <I>Simula Begin,</I> Academic Press, 1973.<P>
<a name="black"></a>[Black 86] A. Black et al, "Object Structure in the Emerald System", <I>Proceedings of the ACM Conference on Object-Oriented Programming Systems, Languages, and Applications,</I> October 1986.<P>
<a name="dahl"></a>[Dahl 70] O-J. Dahl, B. Myhrhaug, K. Nygaard, "SIMULA Common Base Language," Technical Report S-22, Norwegian Computing Centre, 1970.<P>
<a name="knuth"></a>[Knuth Vol2] Knuth Vol2, <I>Seminumerical Algorithms,</I> Addison-Wesley: p. 117.<P>
<a name="mccue"></a>[McCue 92] D. L. McCue and M. C. Little, "Computing Replica Placement in Distributed Systems," <I>Proceedings of the 2nd Workshop on the Management of Replicated Data,</I> November 1992: pp. 58-61.<P>
<a name="mitra"></a>[Mitrani 82] I. Mitrani, <I>Simulation Techniques for Discrete Event Systems,</I> Cambridge University Press, Cambridge, 1982: p. 22.<P>
<a name="sedge"></a>[Sedgewick 83] R. Sedgewick, <I>Algorithms,</I> Addison-Wesley, Reading MA, 1983: pp. 36-38.<P>
<a name="strous"></a>[Stroustrup 86] B. Stroustrup, <I>The C++ Programming Language,</I> Addison Wesley: 1986.<P>
<h4>Footnotes</FONT></h4></P>
<a name="1"></a>[1]     The software to be described in this paper is available via anonymous ftp from <I>arjuna. ncl. ac. uk</I><P>
<a name="2"></a>[2]     The authors would like to thank Professor I. Mitrani for his help in developing the multiplicative generator used in the simulation. It is based on the following algorithm: <I>Y[i+1] = Y[i] * 5^5 mod 2^26, where the period is 2^24,</I> and the initial seed must be odd.<P>
<a name="3"></a>[3]     As suggested by Maclaren and Marsaglia.<P>
<a name="4"></a>[4]     Due to Box, Mullers and Marsaglia<P>
</BLOCKQUOTE>
</BODY>
</HTML>
