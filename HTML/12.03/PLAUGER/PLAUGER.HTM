

<HTML>
<HEAD>

<TITLE>March 1994/Standard C</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmar.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Standard C<A name="009E_0041"><A name="009E_0041"></font></h2><P>
<h3 align="center"><A name="009E_0000"><A name="009E_0000">C++ Language Support Library</h3><P>
<h3 align="center"><font color="#800000">P.J. Plauger</font></h3><hr><blockquote><P>
<P><i><A name="009E_0000"><A name="009E_0000">P.J. Plauger is senior editor of The C Users Journal. He is convenor of the ISO C standards committee, WG14, and active on the C++ committee, WG21. His latest books are The Standard C Library, and Programming on Purpose (three volumes), all published by Prentice-Hall. You can reach him at pjp@plauger.com.</i></P><P>
<h4><FONT COLOR="#000080"><A name="009E_0042">Introduction<A name="009E_0042"></FONT></h4></P>
I conclude my discussion of the language support portion of the library specified by the draft C++ standard. (See "Standard C: The Header <I>&lt;exception&gt;," </I><I>CUJ,</I> February 1994, "The C Library in C++," <I>CUJ,</I> December 1993, "C++ Library Ground Rules," <I>CUJ,</I> November 1993, and "Developing the Standard C++ Library," <I>CUJ,</I> October 1993.)<P>
"Language support" consists of those functions that can be called implicitly by C++ code, even when the code apparently contains no function calls. It also consists of the types required to declare and use those functions, as well as a few other related functions and types not directly needed to support the C++ language proper.<P>
Standard C has few such creatures (if any). You can argue that several type definitions are part of language support. The types <I>ptrdiff_t, size_t,</I> and <I>wchar_t</I> are defined in various headers so you can declare objects that have the same types as certain expressions. They are a way to convey otherwise unknowable (or hard to learn) information about these types from the translator to the program.<P>
You can also argue that function <I>exit</I> is part of language support. The execution of any C program effectively occurs by evaluating the expression <I>exit(main(argc, argv)).</I> Saying such a thing simplifies descriptions &#151; it ties together the effects of calling <I>exit</I> and returning from <I>main,</I> for example. But it doesn't have a dramatic effect on how you actually write C programs. You cannot, for example, provide your own version of <I>exit</I> and expect it to be called when <I>main</I> returns. (And many implementations don't really call <I>exit</I> when <I>main</I> returns, but some other underlying function instead.)<P>
C++, on the other hand, offers numerous opportunities along these lines. You can trot up all sorts of functions that get control, either directly or indirectly, when one of the language support functions gets called. For example, in last month's discussion of exceptions I identified three functions that let you register <I>handlers</I><I>,</I> or functions that get control under some circumstances:<P>
<UL><li><I>set_terminate</I>, to specify a handler for calls to<I> terminate() set_unexpected</I>, to specify a handler for calls to <I>unexpected()</I></li>
<li><I>xmsg::set_raise_handler</I>, to specify a handler for calls to <I>xmsg::raise()</I></li></UL>
You can also derive a class from <I>xmsg</I> and override the virtual <I>xmsg::do_raise</I> to get control when certain exceptions get reported by executing code.<P>
Thus, the draft C++ standard is a bit harder to write than the C Standard. In C, the implementation provides all library functions and you the programmer cannot displace them. The C Standard only has to describe a single interface between implementation and program. In C++, however, the program can displace functions otherwise supplied by the library. The draft C++ standard must spell out the environment promised to such a displacing function. And it must spell out what is expected of the displacing function so the program doesn't get surprised.<P>
A handler for <I>terminate()</I>, for example, is not supposed to return to its caller. If you provide one that prints a message and returns, you can cause the library severe problems. The draft C++ standard says so. So when you read the descriptions that follow, remember that the "treaty" between programmer and implementor can be multifaceted. The extra complexity of the draft C++ standard is one of the prices we pay for extra flexibility in this area.<P>
<h4><FONT COLOR="#000080"><A name="009E_0043">Storage Allocation<A name="009E_0043"></FONT></h4></P>
Exceptions can be thought of as a way to structure the use of <I>setjmp</I> and <I>longjmp.</I> Similarly, the addition of <I>new</I> and <I>delete</I> to C++ essentially structure the use of <I>malloc</I> and <I>free.</I> By writing:<P>
<pre>Thing *p = new Thing;</pre>
you are assured that the object of type <I>Thing</I> is properly constructed after it is successfully allocated and before it can be accessed through <I>p.</I> Similarly, the expression statement:<P>
<pre>delete p;</pre>
ensures that the object is destroyed before its storage is deallocated.<P>
You don't have to include any headers before writing expressions like these &#151; <I>new</I> and <I>delete</I> are indeed built right into the language. But you can also play a variety of games with storage allocation if you choose. To do so, you begin by including the header <I>&lt;new&gt;.</I> <A href="list1.htm">Listing 1</a>
shows a representative version of this header. I omit the extra superstructure required by namespaces, because it is distracting and still in a state of flux.<P>
The simplest game you can play is to gain control when space for the heap is exhausted. The function <I>set_new_handler</I> lets you register a handler for this condition. In principle, the draft C++ standard says you can "make more storage available for allocation and then return," but it fails to describe a portable way to do so. Calling <I>free</I> to liberate storage may help, but there is no requirement that storage be actually allocated by calling <I>malloc.</I> Deleting one or more allocated objects may also help, but even that is not guaranteed. More likely, you will want to throw an exception or terminate execution at this point.<P>
<h4><FONT COLOR="#000080"><A name="009E_0044"><I>xalloc</I><B> Exceptions<A name="009E_0044"></B></FONT></h4></P>
The default "new handler" does, in fact, throw an exception now. As I described last month, all library exceptions are derived from the base class <I>xmsg.</I> Moreover, all exceptions are thrown by calling <I>ex.raise(),</I> for some object <I>ex</I> of class <I>xmsg.</I> Unless you seize control of the process in one of the ways I described last month, the eventual outcome is that a failed allocation will throw an exception, which will in turn terminate execution of the program.<P>
This is a significant change from universal past practice, which has been to quietly yield a null pointer as a result of the <I>new</I> expression. The Library Working Group of X3J16/WG21, the joint ANSI/ISO standards committee for C++, anguished quite a bit before recommending this change. The joint committee anguished a bit more in turn. But eventually, the predominant wisdom was that the Standard C++ library had bloody well better use the full language in this case, not just the bits that were available when <I>new</I> and <I>delete</I> were first added to C++.<P>
A persuasive argument is that very few programs truly check <I>all</I><I> new</I> expressions for null pointers. Those that don't may well stumble about when the heap is exhausted &#151; they're almost certainly better off dying a clean death. Those that do check all such expressions often simply abort &#151; the path to abnormal termination is now just slightly different. It is only those few sophisticated programs that try to do something nontrivial when heap is exhausted that need a bit of rewriting. Most of the joint committee felt this was a necessary price to pay to introduce exceptions at this critical juncture.<P>
Even so, some sympathy remains for being able to revert to the old behavior. For a variety of reasons, the Library Working Group has not spelled out a portable way to do so. But the group has identified what it thinks should be a common extension. Calling <I>set_new_handler</I> with a null pointer argument is otherwise undefined behavior. It seems natural to use this nonportable call as a way for implementations to know that they should revert to the older behavior.<P>
<h4><FONT COLOR="#000080"><A name="009E_0045">Replacing <B><I>operator new(size_t)</I><A name="009E_0045"></B></FONT></h4></P>
If you want more certain control over the business of allocating storage, your best bet is to provide your own versions of <I>operator new(size_t)</I> and/or <I>operator delete(void *)</I>. These functions have a peculiar dispensation &#151; the library provides a version of each, but you can "knock out" those versions by defining your own. (Only the array versions of these two operators, described below, also enjoy this special status within the Standard C++ library.)<P>
Before I go into details, please note an important distinction here. When you write:<P>
<pre>Thing *p = new Thing;</pre>
the <I>new Thing</I> part is called a <I>"new</I> expression." It calls <I>operator new(size_t)</I> to allocate storage, but it also does other things, such as constructing the newly allocated object. All that <I>operator new(size_t)</I> has to worry about is providing the number of requested bytes, suitably aligned, or dealing with heap exhaustion. <A href="list3.htm">Listing 3</a>
shows one way to write this function.<P>
Similarly, when you write:<P>
<pre>delete p;</pre>
the <I>delete p</I> part is called a <I>"delete</I> expression." It calls <I>operator delete(void *)</I> to free storage, but it first destroys the object (only if the pointer is not null, of course). All that <I>operator delete(void *)</I> has to worry about is freeing storage for the object. <A href="list4.htm">Listing 4</a>
shows one way to write this function.<P>
So one thing you might do is replace <I>operator delete(void *)</I> with a function that doesn't really free the storage. That could be handy while you're debugging a program, provided of course that you have enough heap to run your test cases.<P>
Or you might replace both <I>operator new(size_t)</I> and <I>operator delete(void *)</I> with versions that are simpler, or faster, or more sophisticated than the library versions. It is important to replace both, because the latter function in the library only knows how to free storage for objects allocated by the former.<P>
In either case, you probably don't have to bother with <I>set_new_handler.</I> You are at liberty to do whatever you want when you run out of heap. No need to call the new handler, which you can't easily do portably anyway.<P>
<h4><FONT COLOR="#000080"><A name="009E_0046">Placement Syntax<A name="009E_0046"></FONT></h4></P>
Yet another latitude granted by the C++ language is to provide an arbitrary set of additional arguments in a <I>new</I> expression, as in:<P>
<pre>Thing *get_special(T1 stuff, T2 more_stuff)
   {
   return (new (stuff, more_stuff) Thing);
   }</pre>
This form implicitly calls the function:<P>
<pre>void *operator new(size_t, T1, T2);</pre>
which you are obliged to supply. I leave it to your imagination what extra parameters might be useful when you're allocating some of your more sophisticated objects.<P>
It doesn't take too much imagination, however, to see a very common need. Sometimes you know exactly where you want a C++ object to be constructed &#151; you have reason to believe that the storage area <I>X</I> is large enough and suitably aligned to hold an object of type <I>Thing</I>. Moreover, you're confident that no object has been constructed there already for which a destructor will later be called. (Whew!)<P>
To deal with this twilight zone between C and C++ programming, you can write:<P>
<pre>Thing *p = new ((void *)&amp;X) Thing;</pre>
This, naturally enough, calls the function:<P>
<pre>void *operator new(size_t, void *);</pre>
which can simply return its second argument, as shown in <A href="list4.htm">Listing 4</a>.
 The Standard C library provides this one version of a placement <I>operator new.</I> (Don't forget to include the header <I>&lt;new&gt;</I> to be sure it is properly declared.) Any fancier placement variants are up to you to provide.<P>
<h4><FONT COLOR="#000080"><A name="009E_0047">Member <B><I>operator new</I><A name="009E_0047"></B></FONT></h4></P>
Yet another way exists for controlling how objects get allocated. For any class, you can overload all the variants of <I>operator new</I> and/or <I>operator delete</I> that I've mentioned so far. Perhaps you want to write your own versions of:<P>
<pre>void *Thing::operator new(size_t);
void Thing::operator delete(void *);</pre>
that does a really fast job of allocating and freeing objects of class <I>Thing.</I> It can, for example, maintain a list of previously freed objects and hand them back quickly for future allocation requests. Unless you really get tricky, you can even ignore the <I>size_t</I> first argument to all variants of <I>operator new,</I> since you know how big a <I>Thing</I> is likely to be. (How do you get tricky? Well, you can make <I>operator new</I> virtual in the base class and fail to override it in a derived class. But thinking about things like that gives me a headache.)<P>
So you see that you can exercise pretty fine control over how all objects, or even individual objects, get allocated.<P>
<h4><FONT COLOR="#000080"><A name="009E_0048">Allocating Arrays<A name="009E_0048"></FONT></h4></P>
But that leads to one last residual problem, regarding the allocation and freeing of arrays. You can, for example, write:<P>
<pre>Thing *p = new Thing[N];</pre>
to allocate an array of <I>N</I> elements each of type <I>Thing</I>. Each of the elements is constructed in order, starting with the first (element zero). In this case, you <I>must</I> write the expression statement:<P>
<pre>delete[] p;</pre>
to delete the array, not just a simple:<P>
<pre>delete p;</pre>
as before. Why? Because the "array <I>new</I> expression" above has to somehow memorize how many elements <I>N</I> it has allocated. It needs to know to locate this memorized information and use it to destroy the appropriate number of elements and free the appropriate amount of storage. Yes, some existing implementations of C++ let you be cavalier about deleting arrays the wrong way, but don't count on that license in a portable program.<P>
This requirement presents another problem. What happens if you've provided a member <I>operator new(size_t)</I> for class <I>Thing</I>, as above? It cannot, in general, know whether it's being asked to allocate storage for a single element or a whole array. (Remember the potential trickery I mentioned above.) So what C++ has done in the past is to ignore any such member functions and call the global <I>operator new(size_t)</I> for all array allocations. This has been a less than satisfactory solution.<P>
The joint committee has plugged this control gap by permitting you to define functions such as the members <I>operator[] new(size_t)</I> and <I>operator delete(void *)</I>. Defining these functions gives you control over the allocation and freeing of arrays of class objects as well as the class objects themselves. You can't necessarily tell how many array elements are being allocated, by the way. An array <I>new</I> expression can ask for extra storage for its own bookkeeping, so you'd better honor the <I>size_t</I> argument blindly. But at least you can maintain private storage pools now for array objects.<P>
For completeness, the draft C++ standard also includes global versions of:<P>
<pre>void *operator new(size_t);
void operator delete(void *);</pre>
The library versions of these functions just turn around and call the non-array library versions, so I won't show you the code for them. And you can indeed knock these functions out with your own definitions, but I'm not sure why you'd bother. Doubtless, someone more clever or perverse than I can make a case for <I>any</I> feature added to C++.<P>
<h4><FONT COLOR="#000080"><A name="009E_0049">Type Information<A name="009E_0049"></FONT></h4></P>
There is one last aspect to the language support library. It is rather small compared to exceptions (all of last month's installment) or storage management (most of this month's). I tack it on here for completeness.<P>
Another relatively recent significant addition to the draft C++ standard is "run-time type identification" (or RTTI, for short). Basically, it adds the operator <I>typeid</I> for obtaining various bits of information on the type of an object (or expression). The operator yields an object of class <I>typeinfo</I>, defined in the header <I>&lt;typeinfo&gt;</I>. <A href="list5.htm">Listing 5</a>
shows one way to write this header.<P>
The exception <I>badtypeid</I> is reported in those cases where the type cannot be determined statically at translation time. If, in the process of chasing down the actual object, the program encounters a null pointer, you can guess what happens.<P>
(If you're put off by all these names made from words run together, you're not alone. There's a good chance that the joint committee will approve a new naming convention that involves a more liberal use of underscores to separate component words in names. So don't be surprised if many of these compound names change in the coming months.)<P>
What can you do with an object of class <I>typeinfo</I>? Well, you can obtain some sort of name for the type, for one thing. <I>typeinfo::name()</I> yields a null-terminated multibyte string (or NTMBS, in the jargon of the draft C++ standard) that presumably says something meaningful about the type. There are no standard names defined, so far, not even for the builtin types.<P>
You can also compare two objects of class <I>typeinfo</I> for equality or inequality. Within any given program, you can expect two such objects to compare equal only if they derive from two expressions of the same type. Don't expect to be able to remember these critters in files, however, and check for type equality across programs. Even running the same program twice doesn't promise to yield the same representation of a <I>typeinfo</I> object for the same type each time. (I have indicated that the type information can be represented as an <I>int,</I> but that is just illustrative, not a requirement.)<P>
Finally, you can impose an ordering on all the types within a program. <I>typeinfo::before(const typeinfo&amp;)</I> returns nonzero for an object that represents a type earlier in the pecking order than the argument object. Once again, however, no promises are made about the rules for determining this order, or whether they're even the same each time you run the program.<P>
I'm sure far more can be said about the uses of RTTI, but I'm not the one to say it at this point in my career. Even if I were, this is not the place to say it. For now, you know what the standard C++ library has to know about RTTI.<P>
<h4><a href="list2.htm">Listing 2: <I>The function</I> operator new(size_t)</I></a></h4>

<h4><a href="../../../source/1994/mar94/plauger.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
