

<HTML>
<HEAD>

<TITLE>March 1994/Enhancing the UNIX Korn Shell Using Predictor Techniques</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmar.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">Enhancing the UNIX Korn Shell Using Predictor Techniques<A name="009A_003D"><A name="009A_003D"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="009A_0000"><A name="009A_0000">Philip Thomas and Shmuel Rotenstreich</font></h3><hr><blockquote><P>
<P><i><A name="009A_0000"><A name="009A_0000">Philip K. Thomas received the B.S. degree in Physics from the California Polytechnic State University and is currently in the process of defending his Ph.D. dissertation in Computer Science at the George Washington University. Philip also serves as Director of System Architecture at PRC corporation in Mclean, Virginia and can be reached at philip@rsi.prc.com.</i></P><P>
<P><i>Shmuel Rotenstreich received the B.S. degree in Computer Science from the Tel Aviv University and the Ph.D. degree also in Computer Science from the University of California at San Diego. Shmuel is currently Professor of Engineering and Applied Sciences at the George Washington University and can be reached at shmuel@sparko.gwu.edu.</i></P><P>
<h4><FONT COLOR="#000080"><A name="009A_003E">Introduction<A name="009A_003E"></FONT></h4></P>
On most computer systems, users interact with the system through command-language interpreters called shells. These shells accept user input and interpret them as commands for the system. There are three major UNIX shells: Bourne, C and Korn (kshell). Other shells include command.com for MS-DOS and for OS/2.<P>
The Korn Shell, which we consider here, offers sophisticated management of past commands (history). We have enhanced this functionality to include a learning automaton that predicts the next command. This command prediction often allows the user to avoid entering the command sequence in its entirety. In most of the computing environments we considered, this enhanced shell predicted the next command with a high degree of accuracy.<P>
This article describes our shell enhancements and details some of the methods we used to implement them. Although the Korn Shell was our target shell, we have applied these same enhancements to the C Shell. We believe this article will show that our enhancements are applicable to other shells as well.<P>
<h4><FONT COLOR="#000080"><A name="009A_003F">Attaining Command Cycle Consciousness<A name="009A_003F"></FONT></h4></P>
In our research we have found that most users exhibit cyclic behavior when interacting with an operating system. For example, to create and execute a program, users may produce the following:<P>
1.     Command: Evoke editor &#151; create the source file.<P>
2.     Command: Create executable &#151; compile &amp; link the source file.<P>
3.     Command: Execute the file created in (2) &#151; examine the results.<P>
The user typically repeats this sequence until he or she has completed and thoroughly debugged the program.<P>
If a shell can recognize such cyclical behavior (we say it has <I>cycle consciousness</I>) it can predict the user's next command at any point in the sequence. We incorporate cycle consciousness into the shell by integrating it with the Predictor module outlined in the next section.<P>
<h4><FONT COLOR="#000080"><A name="009A_0040">The Predictor Module<A name="009A_0040"></FONT></h4></P>
To incorporate cycle-based knowledge into various operating system facilities, we have developed an abstract data type module called a Predictor (<A href="list1.htm">Listing 1</a>)
. The Predictor is a learning automation representative of the learning-from-analogy class of learning strategies. In learning-from-analogy strategies, the learner reaches a conclusion about the current case by considering previously processed cases bearing strong similarities to the current case. For the predictor module, the previously processed cases are the sequences of commands already encountered from the command stream.<P>
The Predictor module incorporates an abstract component as well as several concrete components. The abstract component is the prediction algorithm, which we describe shortly. The concrete components consist of three major classes:<P>
1.     Control Class: The two instances of this class supply entry points for initializing and terminating the Predictor Module.<P>
2.     Input Class: This class obtains the next command from external modules.<P>
3.     Predict Class: This class makes predictions for the Predictor module. <I>predictor</I> can make two types of predictions:<P>
1)     The next command<P>
2)     When a particular command will next occur<P>
By creating a <I>predictor</I> class, we encapsulate all cycle-dependent code and data, making it easier to modify. This method of encapsulation also permits the coexistence of multiple predictors. (Environments where multiple command streams exist require multiple predictors.) We describe the <I>predictor</I> class in detail later in this article.<P>
<h4><FONT COLOR="#000080"><A name="009A_0041">The Algorithm<A name="009A_0041"></FONT></h4></P>
For this discussion we say that a command stream <I>C</I> is a sequence of <I>N</I> commands composed of <I>M unique</I> commands. These commands arrive at the predictor one at a time via the input interface. These commands determine the current state of the cycle (command stream).<P>
The predictor module maintains a weighted adjacency matrix <I>A. A</I> is an <I>M x M</I> matrix which represents a command stream <I>C</I> (this command stream dynamically increases in length as each subsequent command arrives), where the <I>ij</I>th element <I>A[i,j]</I> is 0 if command <I>j</I> never follows command <I>i</I>, or some positive integer indicating the number of times command <I>j</I> follows command <I>i</I>. (Some readers may recogonize this implementation as part of a <I>semantic network</I>.)<P>
To predict the next command, the algorithm locates the corresponding row for the latest command <I>n</I> in the adjacency matrix <I>A</I>. The algorithm then selects command <I>i</I> such that command <I>i</I> is: <I>MAX(A[n,i]) i=1,2..M</I> (index of command <I>i</I>) and <I>A[n,i]</I> &gt;1<P>
If such a command exists, the algorithm returns command i as the best prediction of the next command to occur. If no such command exists, the algorithm returns indicating that the predictor module cannot predict the next command given its current state.<P>
The algorithm performs the following steps to predict <I>when</I> a particular command will next occur:<P>
1.     Save the current state of the predictor module.<P>
2.     Set <I>count</I>=<I>0</I>.<P>
3.     Call the predict-the-next-command interface repeatedly until the return value command <I>i</I> is<P>
<pre> a)     Equal to the specified command
 b)     A value indicating that the predictor cannot make a prediction
 c)     A value previously returned by the predict-the-next-command interface (this implies that the predictor assumes the command stream will cycle without an occurrence of the specified command). For each time the predict-the-next-command interface is called, increment <I>count</I>.</pre>
4.     Restore the original state of the predictor module.<P>
5.     Return <I>count</I> if step 3 terminated because of condition 3.a, otherwise return a value indicating that the predictor cannot predicting when the specified command will next occur.<P>
<h4><FONT COLOR="#000080"><A name="009A_0042">The <B><I>Predictor</I></B> Class<A name="009A_0042"></FONT></h4></P>
The <I>predictor</I> class contains three publicly accessible functions to perform input and output:<P>
<I>PutNextCommand </I>&#151; This function registers commands occurring on the system. We modified the main control loop of the kshell to call this function whenever the kshell assembled a command and registered it to provide "history" functionality. This function returns values corresponding to internal fatal errors and success.<P>
<I>GetNextCommand </I>&#151; This function passes the next predicted command to the system, if it can be predicted. We augmented the kshell source to recognize when the user types ESC-p (in emacs mode) at the prompt, and to call <I>GetNextCommand</I>. As a result, the kshell produces either a beep (to indicate the inability to predict the next command) or a command string adjacent to the prompt, which the user may execute by typing a carriage return.<P>
<I>WhenNextCommand </I>&#151; As its name implies, this function predicts when a particular command will occur. We do not use this function in the kshell. We have included it in the <I>predictor</I> module because it is invaluable in other systems that require this kind of prediction. (e.g. in a file caching system &#151; when a file needs "flushing," information about when a file will next be used is advantageous.) This function returns zero to indicate that the command stream will cycle before it encounters the specified command. This function returns a value of less than zero to signal an internal error.<P>
These last two functions maintain and manipulate the adjacency matrix mentioned previously.<P>
<h4><FONT COLOR="#000080"><A name="009A_0043">Results<A name="009A_0043"></FONT></h4></P>
To show how well the predictor works, we have derived the following examples from a command stream in a programming environment. <A href="fig1.htm">Figure 1</a>
shows the first example. The first column shows the actual command stream. The second column, with the prefix <I>p:</I> shows the predicted command stream. The last two columns show the current percentile of successful predictions and the maximum percentile of successful predictions, respectively. The second example (<A href="fig2.htm">Figure 2</a>)
 differs from the first only by one command; we have removed this command, ls, from the stream in example 2</a>.
 This command represents an "exception" to the cyclical nature of the command stream. Thus, example 2</a>
shows the effect of filtering out exceptions.<P>
<h4><FONT COLOR="#000080"><A name="009A_0044">Open Issues:<A name="009A_0044"></FONT></h4></P>
To keep this article consice several items have not been sufficiently developed. The following are a few points that we believe require further clarification.<P>
<h4><FONT COLOR="#000080"><A name="009A_0045">How are command parameters handled?<A name="009A_0045"></FONT></h4></P>
Commands can be classified as either tightly coupled or loosely coupled with their parameters. The degree of coupling is context dependent. For instance, when the predictor is used in a file caching subsystem, predicting the sequence of parameters (e.g. file names) is more important than predicting the sequence of the commands themselves. We say the commands are loosely coupled. In the case of tightly coupled commands, we treat parameters and their commands as one predictor unit, that is, the predictor considers the same command with different parameters as distinct and dissimilar commands. (The predictor outlined in this article works this way.) In the loosely coupled scenario, we either parse the parameters out and use them as distinct predictor units, or, as is usually more beneficial, we still treat command-parameter sets as tightly coupled and treat them as single predictor units.<P>
<h4><FONT COLOR="#000080"><A name="009A_0046">Are command cycles common?<A name="009A_0046"></FONT></h4></P>
Yes. When we remove a lot of the "noise" from command streams, we find that most of the commands are members of command cycles. The "noise," we have discovered, comes in many forms. Many commands streams are sprinkled with commands we isolate as "exceptions." These exceptions would be commands like ls, dir, who etc. Users tend to use commands like these with enough randomness that it is easy to filter these commands out of otherwise perfectly healthy command streams. Another form of noise is the partial cycle. The partial cycle is best illustrated using the example session. In the edit-compile-execute cycle mentioned above, evoking the compiler sometimes results in errors that require the user to re-visit the editor without completing the cycle. Partial cycles are much harder to deal with than exceptions and, consequently, our success rate with these tends to be lower.<P>
<h4><FONT COLOR="#000080"><A name="009A_0047">GUI Environments<A name="009A_0047"></FONT></h4></P>
We have also begun investigations into incorporating cycle consciousness into graphical user interface (GUI) environments. The essential problem here is defining a command primitive. In a command-oriented interface a command primitve is well defined, but in a modern GUI a command primitive is more loosely defined and may incorporate several user actions, such as mouse moves and button clicks. User activity is hard to partition into distinct commands.<P>
<h4><FONT COLOR="#000080"><A name="009A_0048">Conclusion<A name="009A_0048"></FONT></h4></P>
As is any article of this nature, we had to summarize a large body of work both theoretical and experimental to present here. The algorithm presented here is a first-degree learning automation. We have added several filters and general enhancements to this automation resulting in several different predictors that, depending on the situation, are selected and evoked at run time (late binding &#151; virtual functions). Our work leveraged the <I>predictor</I> across several operating-system elements including memory management, schedulings and disk allocation. Overall, we think our assertions for incorporating cycle consciousness have been well founded. We have had favorable results in the areas we have studied.<P>
<h4>References:</FONT></h4></P>
Peterson, James L.; Silberschatz, Abraham, <I>Operating System Concepts</I>, Addison-Wesley Publishing Co, 1985.<P>
Tanimoto, Steven L., <I>The Elements of Artificial Intelligence</I>, Computer Science Press, 1990.<P>
Thomas, Philip K., Rotenstreich, Shmuel, "Command Cycles," Ph. D. Dissertation, George Washington University, 1993.<P>
<h4>Sidebar: <a href="sidebar1.htm">"Anatomy of a Command Shell"</a></h4>
<h4>Sidebar: <a href="sidebar2.htm">"Patching the Korn Shell"</a></h4>

<h4><a href="../../../source/1994/mar94/thomas.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
