

<HTML>
<HEAD>

<TITLE>March 1994/Code Capsules</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmar.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Code Capsules<A name="00A4_0047"><A name="00A4_0047"></font></h2><P>
<h3 align="center"><A name="00A4_0000"><A name="00A4_0000">The Preprocessor</h3><P>
<h3 align="center"><font color="#800000">Chuck Allison</font></h3><hr><blockquote><P>
<P><i><A name="00A4_0000"><A name="00A4_0000">Chuck Allison is a regular columnist with CUJ and a software architect for the Family History Department of the Church of Jesus Christ<I></I> <I></I>of Latter Day Saints Church Headquarters in Salt Lake City. He has a B.S. and M.S. in mathematics, has been programming since 1975,<I></I> <I></I>and has been teaching and developing in C since 1984. His current interest is object-oriented technology and education. He is a member<I></I> <I></I>of X3J16, the ANSI C++ Standards Committee. Chuck can be reached on the Internet at <I></I>allison@decus.org<I></I>, or at (801)240-4510.</i></P><P>
To use C effectively you really have to master two languages: the C language proper and the preprocessor. Before a compiler begins the usual chores of syntax checking and instruction translation, it submits your program to a preliminary phase called preprocessing, which alters the very <I>text</I> of the program according to your instructions. The altered text that the compiler sees is called a <I>translation unit</I>. In particular, the preprocessor performs the following three functions for you:<P>
1)     header/source file inclusion<P>
2)     macro expansion<P>
3)     conditional compilation<P>
In this article I will illustrate these features of the preprocessor.<P>
<h4><FONT COLOR="#000080"><A name="00A4_0048">The Include Directive<A name="00A4_0048"></FONT></h4></P>
One of the first source lines any C programmer sees or composes is this:<P>
<pre>#include &lt;stdio.h&gt;</pre>
Take a moment right now and jot down everything you know about this statement.<P>
Let's see how you did. <I>stdio.h</I> is of course a standard library header, so called because such include directives usually appear near the beginning of a source file so that their definitions will be in force throughout the rest of the compilation. We commonly think of it as a header <I>file</I>, but there is no requirement that the definitions and declarations pertaining to standard input and output reside in a file. The C Standard only requires that these definitions and declarations replace the include directive in the text of the program before translation. They could reside in tables internal to the preprocessor. Most compiler implementations do supply header files for the standard library, however. MS-DOS compilers install header files in a suitable subdirectory. Here is a sampling:<P>
<pre>\BC4\INCLUDE           /* Borland C++ 4.0 */
\MSVC\INCLUDE          /* Microsoft Visual C++ */
\WATCOM\H              /* Watcom C/C++ */</pre>
On UNIX systems you will find header files in /<I>usr/include</I>.<P>
Since an implementation is not even obliged to supply headers<B> </B>in the form of physical files, it's no surprise that those<B> </B>implementations providing files don't always give them the same name as<B> </B>the include directive. After all, how<B> </B>could a compiler supply a file named<B> </B><I>stdio.h</I> on a platform whose file system<B> </B>didn't allow periods in a file name? On<B> </B>MS-DOS systems there can be no file<B> </B>that exactly matches the C++ header<B> </B>&lt;<I>strstream.h</I>&gt;, because the file system<B> </B>only allows up to eight characters before<B> </B>the period.<P>
Most MS-DOS implementations map header names into file names by truncating the base part (the portion before the period) to eight characters, and the extension to three (so the definitions for &lt;<I>strstream.h</I>&gt; reside in the file <I>STRSTREA.H</I>). A standard-conforming implementation must supply a mapping to the local file system for user-defined header names having at least six characters before the period and one character after.<P>
Conforming compilers also support include directives with string-like arguments, as in:<P>
<pre>#include "mydefs.h"</pre>
The string must represent a name recognized by the local file system. The file must be a valid C/C++ source file and, like the standard headers, usually contains function prototypes, macro definitions, and other declarations. An implementation must specify the mechanism it uses to locate the requested source file. On platforms with hierarchical file systems, the compiler usually searches the current directory first. If that fails, it then searches the subdirectory reserved for the standard headers. Because standard header names are special preprocessing tokens and not strings, any backslashes in a header name are not interpreted as escape characters. In the following directive, a double backslash is not needed.<P>
<pre>#include &lt;sys\stat.h&gt;                /* \, not \\ */
#include "\project\include\mydefs.h"</pre>
Included files may themselves contain other include directives, nested up to eight levels deep. Since some definitions (like typedefs) must only appear once during a compilation, you must guard against the possibility of a file being included more than once. The customary technique defines a symbol associated with the file. Exclude the text of the file from the compilation if the symbol has already been seen by the compiler, as in the following:<P>
<pre>/* mydefs.h */
#ifndef MYDEFS_H
#define MYDEFS_H

&lt;declarations/definitions go here&gt;

#endif</pre>
<h4><FONT COLOR="#000080"><A name="00A4_0049">Macros<A name="00A4_0049"></FONT></h4></P>
As you can see, there's more to the<B> </B>#<I>include</I> directive than meets the eye. C<B> </B>provides eleven other preprocessor directives you can use to alter<B> </B>your source text in meaningful  ways (see <A href="tab1.htm">Table 1</a>)
. (All begin with<B> </B>the '#' character, which must be the first non-space character on<B> </B>its source line.) In this section I elaborate on one of the other<B> </B>directives, the <I>#define</I> directive, to introduce a very useful<B> </B>construct called a <I>macro</I>.<P>
The <I>#define</I> directive creates macro definitions. A macro is a<B> </B>name for a sequence of zero or more preprocessing tokens. (Valid<B> </B>preprocessing tokens include valid C language tokens such as<B> </B>identifiers, strings, numbers and operators; and any single<B> </B>character). For example, the line<P>
<pre>#define MAXLINES 500</pre>
associates the text <I>500</I> with the symbol <I>MAXLINES</I>. The<B> </B>preprocessor keeps a table of all symbols created by the <I>#define</I> directive,<B> </B>along with the corresponding replacement text. Whenever the<B> </B>preprocessor encounters the token <I>MAXLINES</I> outside of a quoted string<B> </B>or comment, it replaces <I>MAXLINES</I> with the token <I>500</I>. In later<B> </B>phases of compilation it appears as if you actually typed <I>500</I><B> </B>instead of <I>MAXLINES</I>. It is important to remember that this operation<B> </B>consists of mere <I>text replacement.</I> No semantic analysis occurs<B> </B>during preprocessing.<P>
A macro without parameters, such as <I>MAXLINES</I>, is sometimes called an <I>object-like</I> macro because it defines a program constant that looks like an object. Because object-like macros are often constants, it is customary to type them in upper case as a hint to the reader. You can also define <I>function-like</I> macros with zero or more parameters, as in the following code fragment:<P>
<pre>#define beep()   putc('\a' ,stderr)
#define abs(x)   ((x) &gt;= 0 ? (x) : (-(x)))
#define max(x,y) (((x) &gt; (y)) ? (x) : (y))</pre>
There must be no whitespace between the macro name and the first left parenthesis. The expression<P>
<pre>abs(-4)</pre>
expands to<P>
<pre>((-4) &gt;= 0 ? (4) : (-(4)))</pre>
You should always parenthesize macro parameters (such as <I>x</I>) in the replacement text. This practice prevents surprises from unexpected precedence in complex expressions. For example, if you had used the following naive mathematical definition for absolute value:<P>
<pre>x &gt;= 0 ? x : -x</pre>
then the expression <I>abs(a - 1)</I> would expand to<P>
<pre>a - 1 &gt;= 0 ? a - 1 : -a - 1</pre>
which is incorrect when <I>a - 1 &lt; 0</I> (it should be -<I>(a - 1))</I>.<P>
Even if you put parentheses around all arguments, you should<B> </B>usually parenthesize the entire replacement expression as well to<B> </B>avoid surprises with respect to the surrounding text. To see this,<B> </B>define <I>abs()</I> without enclosing parens, as in:<P>
<pre>#define abs(x) (x) &gt;= 0 ? (x) : (-x)</pre>
Then <I>abs(a) - 1</I> expands to<P>
<pre>(a) &gt;= 0 ? (a) : -(a) - 1</pre>
which is incorrect for non-negative values<B> </B>of <I>x</I><I>.</I><P>
It is also dangerous to use expressions<B> </B>with side effects as macro arguments. For<B> </B>example, the macro call <I>abs(i++)</I> expands to<P>
<pre>((-i++) &gt;= 0 ? (i++) : (-(i++)))</pre>
No matter what the value of <I>i</I> happens to be,<B> </B>it gets incremented twice, not once, which<B> </B>probably isn't what you had in mind.<P>
<h4><FONT COLOR="#000080"><A name="00A4_004A">Pre-defined Macros<A name="00A4_004A"></FONT></h4></P>
Conforming implementations supply<B> </B>the five built-in object-like macros shown<B> </B>in <A href="tab2.htm">Table 2</a>.
 The last three macros remain<B> </B>constant during the compilation of a<B> </B>source file. Any other pre-defined macros<B> </B>that a compiler provides must begin with a<B> </B>leading underscore followed by either an<B> </B>uppercase letter or another underscore.<P>
You may not redefine any of these five<B> </B>macros with the #<I>define</I> directive, nor<B> </B>remove them with the #<I>undef</I> directive.<B> </B>Most compilers support multiple modes,<B> </B>some of which are not<B> </B>standard-conforming. (To guarantee that the sample<B> </B>program in <A href="list1.htm">Listing 1</a>
will run correctly under<B> </B>Borland C, for example, you need to run<B> </B>in "ANSI mode" via the "-A"<B> </B>commandline option.)<P>
Conforming compilers also provide a<B> </B>function-like macro, <I>assert</I><I>,</I> which you<B> </B>can use to put diagnostics in programs. If<B> </B>its argument evaluates to zero, <I>assert</I><B> </B>prints the argument along with source file<B> </B>name and line number (using <I>__FILE__</I><I><B> </I></B>and <I>_LINE_)</I> to the standard error device<B> </B>and aborts the program (see <A href="list2.htm">Listing 2</a>)
.<B> </B>For more information on using the <I>assert</I><B> </B>macro, see the Code Capsule "File<B> </B>Processing, Part 2" in the June 1993 issue of<B> </B><I>CUJ</I><I>.</I><P>
A compiler is allowed to provide<B> </B>macro versions for any functions in the<B> </B>standard library (<I>getc</I> and <I>putc</I> usually<B> </B>come as macros for efficiency). With the<B> </B>exception of a handful of required<B> </B>function-like macros (<I>assert, setjmp, va_arg,</I><I><B> </I></B><I>va_end</I>, and <I>va_start</I>), an implementation<B> </B>must also supply true function versions for<B> </B>all functions in the standard library. A<B> </B>macro version of a library function in<B> </B>effect hides its prototype from the compiler,<B> </B>so its arguments are not type-checked<B> </B>during translation. To force the true function<B> </B>to be called, remove the macro definition<B> </B>with the #<I>undef</I> directive, as in<P>
<pre>#undef getc</pre>
Alternatively, you can surround the<B> </B>function name in parentheses when you<B> </B>call it, as in:<P>
<pre>c = (getc)(stdin);</pre>
There's no danger of this expression<B> </B>matching the macro definition since a left<B> </B>parenthesis does not immediately follow<B> </B>the function name.<P>
<h4><FONT COLOR="#000080"><A name="00A4_004B">Conditional Compilation<A name="00A4_004B"></FONT></h4></P>
You can selectively include or exclude<B> </B>segments of code with conditional<B> </B>directives. For example, you can embed the<B> </B>following excerpt in your code to<B> </B>accommodate different syntaxes of the <I>delete</I><B> </B>operator in earlier versions of C++:<P>
<pre>#if VERSION &lt; 3
    delete [strlen(p) + 1] p;
#else
    delete [] p;
#endif</pre>
Your compiler probably supplies a macro similar to <I>VERSION</I> (Borland C++ defines __<I>BCPLUSPLUS</I><I>__</I> , Microsoft _<I>MSCVER</I>). The argument of an <I>#if</I> directive must evaluate to an integer constant, and obeys the usual C rule of non-zero means true, zero false. You cannot use casts or the <I>sizeof</I> operator in such expressions.<P>
C++ implementations also pre-define the macro __cplusplus, which you can use to customize your code for mixed C/C++ environments. For example, if you want to link with existing C code in a C++ environment, you need to use the extern "C" linkage specification (which of course is not valid in a C environment). The following excerpt will do the right thing in either environment:<P>
<pre>#ifdef __cplusplus
extern "C"
{
#endif

&lt;put C declarations here&gt;

#ifdef __cplusplus
#endif</pre>
The <I>#if</I> directive is handy when you want to comment out long passages of code. You can't just wrap such sections in a single, enclosing comment because there are likely to be comments in the code itself (right?), causing the outer comment to end prematurely. It is better to enclose the code in question in the body of an <I>#if</I> directive that always evaluates to zero:<P>
<pre>#if 0
&lt;put code to be ignored here&gt;
#endif</pre>
<h4><FONT COLOR="#000080"><A name="00A4_004C">Preprocessor Operators<A name="00A4_004C"></FONT></h4></P>
Sometimes you just want to know if a macro is defined, without using its value. For example, if you only support two compilers, you might have something like the following in your code:<P>
<pre>#if defined _MSCVER
&lt;put Microsoft-specific statements here&gt;
#elif defined __BCPLUSPLUS__
&lt;put Borland-specific statements here&gt;
#else
#error Compiler not supported.
#endif</pre>
<I>defined</I> is one of three preprocessor operators (see <A href="tab3.htm">Table 3</a>)
. The<I> defined</I> operator evaluates to 1 if its argument is present in the symbol table, meaning that the macro was either defined by a previous <I>#define</I> directive or the compiler provided it as a built-in macro. The <I>#error</I> directive prints its argument as a diagnostic and halts the translator.<P>
It isn't necessary to assign a value to a macro. For example, to insert debug trace code into your program, you can do the following:<P>
<pre>#if defined DEBUG
fprintf(stderr,"x = %d\n",x);
#endif</pre>
To define the DEBUG macro, just insert the following statement before the first use of the macro:<P>
<pre>#define DEBUG</pre>
The following equivalences are recognized by the preprocessor:<P>
<pre>#if defined X    &lt;==&gt;      #ifdef X
#if !defined X   &lt;==&gt;      #ifndef X</pre>
Using the <I>defined</I> operator is more flexible than the equivalent directives on the right because you can combine multiple tests as a single expression, as in:<P>
<pre>#if defined _cplusplus &amp;&amp; !defined DEBUG</pre>
The operator<I> #,</I> the "stringizing" operator, effectively encloses a macro argument in quotes. As the program in <A href="list3.htm">Listing 3</a>
illustrates, stringizing can be useful for debugging. The <I>trace()</I> macro encloses its arguments in quotes so they become part of a <I>printf</I> format statement. For example, the expression <I>trace(i,d)</I> becomes<P>
<pre>printf("i" " = %" "d" "\n",i);</pre>
and, after the compiler concatenates adjacent string literals it sees this:<P>
<pre>printf("i = %d\n",i);</pre>
There is no way to build quoted strings like this without the stringizing operator because the preprocessor ignores macros inside quoted strings.<P>
The token-pasting operator, <I>##</I>, concatenates two tokens together to form a single token. The call<I> trace2(1)</I> in <A href="list4.htm">Listing 4</a>
is translated into<P>
<pre>trace(x1,d)</pre>
Any space surrounding these two operators is ignored.<P>
<h4><FONT COLOR="#000080"><A name="00A4_004D">Implementing <B><I>a s s e r t ( )</I><A name="00A4_004D"></B></FONT></h4></P>
Implementing <I>assert</I> reveals an important fact about using macros. Since the action of <I>assert</I> depends on the result of a test, you might first try an <I>if</I> statement, as in:<P>
<pre>#define assert(cond) \
  if (!(cond)) __assert(#cond,__FILE__,__LINE__)</pre>
where the function __<I>assert</I> prints the message and halts the program. This implementation causes a problem, however, when <I>assert</I> finds itself within an <I>if</I> statement, as in:<P>
<pre>if (x &gt; 0)
    assert(x != y)
else
    /* whatever */</pre>
because the preceding code expands into<P>
<pre>if (x &gt; 0)
    if (!(x != y))_assert("x != y","file.c",7);
else
    /* whatever */</pre>
The indentation that results from expanding <I>assert</I> in place is misleading because it's actually the second <I>if</I> that intercepts the <I>else</I>. Rewriting the expanded code to represent the actual flow of control produces:<P>
<pre>if (x &gt; 0)
    if (!(x != y))
        __assert("x != y","file.c",7)
    else /* OOPS! New control flow! */
        /* whatever */</pre>
The usual fix for nested if problems such as this is to use braces, as in:<P>
<pre>#define assert(cond) \
{if (!(cond))_assert
    (#cond,__FILE,__LINE__)   }</pre>
but this code expands into<P>
<pre>if (x &gt; 0)
    {if (!(x != y)) _assert
        ("x != y","file.c",7)};
else
    /* whatever */</pre>
and the combination <I>}</I>; in the second line creates a null statement<B> </B>that completes the outer <I>if</I>, leaving a dangling <I>else</I>, which is a<B> </B>syntax error. A correct way to define <I>assert</I> is shown in <A href="list5.htm">Listing 5</a>.
<B> </B>(This simple version does not recognize the macro <I>NDEBUG.</I>)<B> </B>(<A href="list6.htm">Listing 6</a>
shows the implementation of the support function<B> </B>__<I>assert()</I>). In general, when a macro must make a choice, it is good<B> </B>practice to write it as an expression and not as a statement.<P>
<h4><FONT COLOR="#000080"><A name="00A4_004E">Macro Magic<A name="00A4_004E"></FONT></h4></P>
It's important to understand precisely what steps the<B> </B>preprocessor follows to expand macros, otherwise you can be in for some<B> </B>mysterious surprises. For example, if you insert the following line<B> </B>near the beginning of <A href="list4.htm">Listing 4</a>:
<P>
<pre>#define x1 SURPRISE!</pre>
then <I>trace2(1)</I> <I>expands</I> into<P>
<pre>trace(x ## 1,d)</pre>
which in turn becomes<P>
<pre>trace(x1,d)</pre>
But the preprocessor doesn't stop there. It <I>rescans</I> the line to<B> </B>see if any other macros need expanding. The final state of the<B> </B>program text seen by the compiler is shown in <A href="list7.htm">Listing 7</a>.
<P>
To further illustrate, consider the text in <A href="list8.htm">Listing 8</a>.
 <A href="list8.htm">Listing 8</a>
is<B> </B>not a complete program, by the way, but is for preprocessing only<B> </B>&#151; don't try to compile it all the way. (If you have Borland C use<B> </B>the CPP command.) The output from the preprocessor appears in<B> </B><A href="list9.htm">Listing 9</a>.
 The <I>str()</I> macro just puts quotes around its argument.<B> </B>It might appear that <I>xstr()</I> is redundant, but there is an important<B> </B>difference between <I>xstr()</I> and <I>str()</I>. The output of the statement<B> </B><I>str(VERSION)</I> is of course<P>
<pre>"VERSION"</pre>
but <I>xstr(VERSION)</I> expands to<P>
<pre>str(2)</pre>
because arguments not connected with a <I>#</I><I><B> </I></B>or<B> </B><I>##</I>are <I>fully expanded</I><B> </B>before they replace their respective parameters. The preprocessor<B> </B>then rescans the statement, providing <I>"2"</I>. So in effect, <I>xstr()</I> is a<B> </B>version of <I>str()</I> that expands its argument before quoting it.<P>
The same relationship exists between <I>glue()</I> and <I>xglue()</I>. The<B> </B>statement <I>glue(VERSION,3)</I> concatenates its arguments into the<B> </B>token <I>VERSION3</I>, but <I>xglue(VERSION,3)</I> first expands <I>VERSION</I>,<B> </B>producing<P>
<pre>glue(2,3)</pre>
which in turn rescans into the token 23.<P>
The next two statements are a little trickier:<P>
<pre>       glue(VERS,ION)
       == VERS ## ION
       == VERSION
       == 2</pre>
and<P>
<pre>       xglue(VERS,ION)
       == glue(VERS,ATILE)
       == VERS ## ATILE
       == VERSATILE</pre>
Of course, if <I>VERSATILE</I> were a defined macro it would be furher<B> </B>expanded.<P>
The last four statements in <A href="list8.htm">listing 8</a>
expand as follows:<P>
<pre>       ID(VERSION)
       == "This is version "xstr(2)
       == "This is version "str(2)
       == "This is version ""2"
       
       INCFILE(VERSION)
       == xstr(glue(version,2)) ".h"
       == xstr(version2) ".h"
       == "version2" ".h"
       
       str(INCFILE(VERSION))
       == #INCFILE(VERSION)
       == "INCFILE(VERSION)"
       
       xstr(INCFILE(VERSION))
       == str("version2" ".h")
       == #"version2" ".h"
       == "\"version2\" \".h\""</pre>
For obvious reasons, the <I># </I>operator effectively inserts escape<B> </B>characters before all embedded quotes and backslashes.<P>
The macro replacement facilities of the preprocessor clearly<B> </B>offer you an incredible amount of flexibility (too much, some would<B> </B>say). There are two limitations to keep in mind:<P>
1)     If at any time the preprocessor encounters the current macro in<B> </B>its own replacement text, no matter how deeply nested in the<B> </B>process, the preprocessor does not expand it but leaves it as-is<B> </B>(otherwise the process would never terminate!). For example,<B> </B>given the definitions<P>
<pre>   #define F(f) f(args)
   #define args a,b</pre>
<I>F(g)</I> expands to <I>g(a,b)</I>, but what does <I>F(F) expand to? (Answer: F(a,b))</I>.<P>
2)     If a fully-expanded statement resembles<B> </B>a preprocessor directive, (e.g., if<B> </B>expansion results in an <I>#include</I> directive),<B> </B>the directive is <I>not</I> invoked, but is left<B> </B>verbatim in the program text. (Thank<B> </B>goodness!).<P>
<h4><FONT COLOR="#000080"><A name="00A4_004F">Character Sets and Trigraphs<A name="00A4_004F"></FONT></h4></P>
The character set you use to compose<B> </B>your program doesn't have to be the same<B> </B>as the one in which the program executes.<B> </B>These two character sets often differ in<B> </B>non-English applications. A C translator<B> </B>only understands the <I>source character set</I><B> </B>&#151; English alphanumerics, the graphics<B> </B>characters used for operators and<B> </B>punctuators (there are 29 of them), and a few<B> </B>control characters (newline, horizontal tab,<B> </B>vertical tab, and form-feed). Any other<B> </B>characters presented to the translator may<B> </B>appear only in quoted strings, character<B> </B>constants, header names or comments. The<B> </B><I>execution character set</I> is the set of<B> </B>characters that the program uses in its literals,<B> </B>and to input and output data. This set is<B> </B>implementation-defined, but must at least<B> </B>contain characters representing alert<B> </B>('\<I>a</I>'), backspace ('\<I>b</I>'), carriage return<B> </B>('\<I>r</I>'), newline ('\<I>n</I>'), form feed ('\<I>f</I>'),<B> </B>vertical tab ('\v'), and horizontal tab ('\t').<P>
Many non-U.S. environments use different graphics for some<B> </B>of the elements of the source character set, making it impossible<B> </B>to write readable C programs. To overcome this obstacle, standard<B> </B>C defines a number of <I>trigraphs</I>, which are triplets of characters<B> </B>from the Invariant Code Set (ISO 646-1983) found in virtually<B> </B>every environment in the world. Each trigraph corresponds to a<B> </B>character in the source character set which is not in ISO 646 (see<B> </B><A href="tab4.htm">Table 4</a>)
. For example, whenever the preprocessor encounters the<B> </B>token <I>??=</I> anywhere in your source text (even in strings), it replaces<B> </B>this token with the '#' character code from the source character set. The program in <A href="list11.htm">Listing 11</a>
shows how to write the "Hello, world!"<B> </B>program from <A href="list10.htm">Listing 10</a>
using trigraphs. (Borland users: you have<B> </B>a separate executable, <I>trigraph.exe</I>, for procesing trigraphs.)<P>
In an effort to enable more readable programs world-wide, the<B> </B>C++ draft standard defines a set of digraphs and new keywords<B> </B>for non-ASCII developers (see <A href="tab5.htm">Table 5</a>)
. <A href="list12.htm">Listing 12</a>
shows what<B> </B>"Hello, world" looks like using these new tokens. Perhaps you<B> </B>will agree that the symmetric look of the bracketing operators is easier on the eye.<P>
<h4><FONT COLOR="#000080"><A name="00A4_0050">Phases Of Translation<A name="00A4_0050"></FONT></h4></P>
The C standard defines eight distinct phases of translation. An implementation doesn't make eight separate passes through the code, of course, but the result of translation must behave as if it had. The eight phases are:<P>
1.     Physical source characters are mapped into the source character set. This includes trigraph replacement and things like mapping a carriage return/line feed to a single newline character in MS-DOS.<P>
2.     All lines that end in a backslash are merged with their continuation line, and the backslash is deleted.<P>
3.     The source is parsed into preprocessing tokens and comments are replaced with a single space character. The C++ digraphs are recognized as tokens.<P>
4.     Preprocessing directives are invoked and macros are expanded. Steps 1 through 4 are repeated for any <I>included</I> files.<P>
5.     Escape sequences in character constants and string literals that represent characters in the execution set are converted (e.g., '\<I>a</I><I>'</I> would be converted to a byte value of 7 in an ASCII environment).<P>
6.     Adjacent string literals are concatenated.<P>
7.     Traditional compilation occurs: lexical and semantic analysis, and translation to assembly or machine code.<P>
8.     Linking occurs: external references are resolved and a program image is made ready for execution.<P>
The preprocessor performs steps 1 through 4.<P>
<h4><FONT COLOR="#000080"><A name="00A4_0051">C++ And The Preprocessor<A name="00A4_0051"></FONT></h4></P>
C++ preprocessing formally differs from that of C only in the tokens it recognizes. A C++ preprocessor must recognize the tokens in <A href="tab5.htm">Table 5</a>
as well as <I>.*, -&gt;*</I>, and <I>::</I>. It must also recognize //-style comments and replace them with a single space. Though C++'s preprocessor isn't much different than C's, you may want to <I>use</I> it a lot differently. For example, as far as I can tell, there is no good reason to define object-like macros anymore. You should use <I>const</I> variable definitions instead. The statement<P>
<pre>const int MAXLINES = 500;</pre>
has a couple of advantages over<P>
<pre>#define MAXLINES 500</pre>
Since the compiler knows the semantics of the object, you get stronger compile-time type checking. You can also reference <I>const</I> objects like any other with a symbolic debugger. Global <I>const</I> objects have internal linkage unless you explicitly declare them <I>extern</I>, so you can safely replace all your object-like macros with <I>const</I> definitions.<P>
Function-like macros are <I>almost</I> unnecessary in C++. You can replace most function-like macros with inline functions. For example, replace the <I>max</I> macro as shown previously with<P>
<pre>inline int max(int x, int y)
{
    return x &gt;= y ? x : y;
}</pre>
Note that you don't have to worry about parenthesizing to avoid precedence surprises, because this code defines a real function, with scope and type checking. You also don't have to worry about side effects like you do with macros, such as in the call<P>
<pre>max(x++,y++)</pre>
The macro version may seem superior to the inline function because it accepts arguments of any type. No problem. Define <I>max </I>as a template, as in the following code; now the inline function will accept arguments of any type:<P>
<pre>template&lt;class T&gt;
inline int max(const T&amp; x, const T&amp; y)
{
    return x &gt; y ? x : y;
}</pre>
Do keep in mind, however, that <I>inline</I> is a only <I>hint</I> to the compiler. Not all functions are amenable to inlining, especially those with loops and complicated control structures. Your compiler may tell you that it can't inline a function. Still, in many cases it is better to define a function out-of-line than to define it as a macro and lose the type safety that a real function affords.<P>
There is still room in C++ for function-like macros that use the stringizing or token-pasting operators. The program in <A href="list13.htm">Listing 13</a>
uses stringizing and an inline function to test the new string class available with Borland C++ 4.0.<P>
<h4><FONT COLOR="#000080"><A name="00A4_0052">Conclusion<A name="00A4_0052"></FONT></h4></P>
The preprocessor doesn't know C or C++. It is a language all its own. Many library vendors have used the preprocessor intelligently to simplify the installation and use of their products. I encourage you to use it, but to use it prudently. It has some dark corners, which I've purposely avoided. It is good practice, especially with C++, to do as much as you can in the programming language, and use the preprocessor only when you need to.<P>

<h4><a href="../../../source/1994/mar94/allison.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
