<HTML><HEAD>
<TITLE>March 1994/Stepping Up To C++/Listing 4</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 4<I> The</I> shape <I>class hierarchy with virtual cloning functions employing the relaxed return type rules</I></A></h4>
<pre>#include &lt;iostream.h&gt;
#include &lt;math.h&gt;
#include &lt;stddef.h&gt;

//
// base class 'shape'
//
class shape
   {
public:
   enum palette { BLUE, GREEN, RED };
   shape(palette c);
   virtual double area() const = 0;
   virtual shape *clone() const = 0;
   palette_color() const;
   virtual const char *name() const = 0;
   virtual ostream &amp;put(ostream &amp;os) const;
private:
   palette_color;
   static const char *color_image[RED - BLUE + 1];
   };

const char *shape::color_image[shape::RED - shape::BLUE + 1] =
   { "blue", "green", "red" };
   
shape::shape(palette c) : _color(c) { }

ostream &amp;shape::put(ostream &amp;os) const
   {
   return os &lt;&lt; color_image[color()] &lt;&lt; ' ' &lt;&lt; name();
   }

shape::palette shape::color() const
   {
   return_color;
   }

//
// class 'circle' derived from 'shape'
//
const double pi = 3.1415926;

class circle : public shape
   {
public:
   circle(palette c, double r);
   double area() const;
   circle *clone() const;
   const char *name() const;
   ostream &amp;put(ostream &amp;os) const;
private:
   double radius;
   };

circle::circle(palette c, double r) : shape(c), radius(r) { }

double circle::area() const
   {
   return pi * radius * radius;
   }
   
const char *circle::name() const
   {
   return "circle";
   }

ostream &amp;circle::put(ostream &amp;os) const
   {
   return shape::put(os) &lt;&lt; "with radius = " &lt;&lt; radius;
   }

circle *circle::clone() const
   {
   return new circle(*this);
   }

//
// class 'rectangle' derived from 'shape'
//
class rectangle: public shape
   {
public:
   rectangle(palette c, double h, double w);
   double area() const;
   rectangle *clone() const;
   const char *name() const;
   ostream &amp;put(ostream &amp;os) const;
private:
   double height, width;
   };

rectangle::rectangle(palette c, double h, double w)
   : shape(c), height(h), width(w) { }

double rectangle::area() const
   {
   return height * width;
   }

const char *rectangle::name() const
   {
   return "rectangle";
   }

ostream &amp;rectangle::put(ostream &amp;os) const
   {
   return shape::put(os) &lt;&lt; "with height = " &lt;&lt; height
      &lt;&lt; " and width = " &lt;&lt; width;
   }

rectangle *rectangle::clone() const
   {
   return new rectangle(*this);
   }

//
// class 'triangle' derived from 'shape'
//
class triangle : public shape
   {
public:
   triangle(palette c, double s1, double s2, double a);
   double area() const;
   triangle *clone() const;
   const char *name() const;
   ostream &amp;put(ostream &amp;os) const;
private:
   double side1, side2, angle;
   };

triangle::triangle(palette c, double s1, double s2, double a)
   : shape(c), side1(s1), side2(s2), angle(a) { }
   
double triangle::area() const
   {
   return side1 * sin(angle) * side2 / 2;
   };

const char *triangle::name() const
   {
   return "triangle";
   }

ostream &amp;triangle::put(ostream &amp;os) const
   {
   return shape::put(os) &lt;&lt;" with one side =" &lt;&lt; side1
      &lt;&lt; ", another side =" &lt;&lt; side2
      &lt;&lt;" and angle = " &lt;&lt; angle;
   }
   
triangle *triangle::clone() const
   {
   return new triangle(*this);
   }

ostream &amp;operator&lt;&lt;(ostream &amp;os, const shape &amp;s)
   {
   return s.put(os);
   }

// End of File
</pre>
</BODY>
</HTML>
