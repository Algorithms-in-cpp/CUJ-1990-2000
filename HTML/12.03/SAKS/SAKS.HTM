

<HTML>
<HEAD>

<TITLE>March 1994/Stepping Up To C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmar.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Stepping Up To C++ <A name="00A2_0045"><A name="00A2_0045"></font></h2><P>
<h3 align="center"><A name="00A2_0000"><A name="00A2_0000">The Return Types of Virtual Functions</h3><P>
<h3 align="center"><font color="#800000">Dan Saks</font></h3><hr><blockquote><P>
<P><i><A name="00A2_0000"><A name="00A2_0000">Dan Saks is the president of Saks &amp; Associates, which offers consulting and training in C++ and C.  He is secretary of the ANSI and ISO C++ committees. Dan is coauthor of C++ Programming Guidelines, and codeveloper of the Plum Hall Validation Suite for C++ (both with Thomas Plum). You can reach him at 393 Leander Dr., Springfield OH, 45504-4906, by phone at (513)324-3601, or electronically at dsaks<I>@wittenberg.edu</I>.<I></I></i></P><P>
WG21+X3J16, the joint ISO ANSI C++ technical committee, is now in its fifth year of work on a standard definition for the C++ programming language and its accompanying library. Over the years, the committee has added more than a dozen new features to the language. I described several of them:<P>
<UL><li>templates</li>
<li>exception handling</li>
<li>new keywords and digraphs to support European translation environments</li>
<li><I>wchar_t</I> as a keyword</li>
<li>function and operator overloading for enumeration types</li>
<li><I>operator new[]</I> and <I>operator delete[]</I> for array allocation</li></UL>
in "Recent Language Extensions to C++", <I>CUJ</I>, June 1993, and described one other:<P>
<UL><li>forward declaration of nested classes in "Nested Classes", <I>CUJ</I>, July 1993. This month, I'll explain another extension:</li>
<li>relaxed restrictions on the return types for virtual functions</li></UL>
This feature enhances the language's support for object-oriented programming. In particular, it extends the set of valid conversions within a type hierarchy that you can write without casting. I assume you are familiar with virtual function in C++, which I described in my last three columns (see "Virtual Functions," "How Virtual Functions Work," and "Overloading and Overriding" in <I>CUJ</I>, December, 1993 through February, 1994).<P>
<h4><FONT COLOR="#000080"><A name="00A2_0046">What the ARM Says<A name="00A2_0046"></FONT></h4></P>
According to the <I>The Annotated C</I>++ <I>Reference Manual</I> (ARM) (<a href="#1">Ellis and Stroustrup [1990])</a>, a member function declared in a derived class <I>D</I> overrides a virtual function in its base class <I>B</I> only if that function in <I>D</I> has the same name and signature (sequence of parameter types) as the function it overrides. Clearly, if the name of a function, say <I>f</I>, declared in <I>D</I> differs from the name of every function declared in <I>B</I>, then <I>f</I> doesn't override anything. <I>f</I>'s declaration adds a new name to the scope of <I>D</I>. If <I>D</I> declares a function with the same name, again say <I>f</I>, as one or more functions inherited from <I>B</I>, but <I>D</I>'s <I>f</I> has a signature that differs from the signatures of every <I>f</I> function in <I>B</I>, then again <I>D</I>'s <I>f</I> doesn't override anything. In this case, <I>D</I>'s <I>f</I> hides all of <I>B</I>'s <I>f</I> functions while in the scope of <I>D</I>. This is not an error, but as I explained last month, the resulting behavior might surprise you. Consequently, many C++ compilers issue a warning when this sort of hiding occurs.<P>
What about differing return types? According to Section 10.2 of the ARM: "It is an error for a derived class function to differ from a base class virtual function in the return type only." For example, in<P>
<pre>class B
    {
public:
    virtual int vf(int);
    ...
    };

class D : public B
    {
    ...
    void vf(int); // error
    ...
};</pre>
the declaration of <I>D::vf</I> is an error because it has the same name and signature as a function declared in <I>B</I>, but <I>B::vF</I> and <I>D::vF</I> have different return types.<P>
Consider the consequences of allowing different return types in this situation. A function <I>g</I> that accepts a formal parameter of type <I>B *</I> or <I>B &amp;</I> can apply <I>vf</I> to that <I>B</I> object, as in<P>
<pre>void g(B *bp)
    {
    ....
    if (bp-&gt;vf(0) &gt; 1)
       ...
    }</pre>
When compiling this function, the compiler considers only the definition for class <I>B</I>. None of the classes derived from <I>B</I> need to be declared when compiling <I>g</I>. Based on the static type of <I>B::vf</I>, the call <I>bp-&gt;vf(0)</I> in <I>g</I> should be just fine; it returns an <I>int</I>, as the <I>if</I> statement in <I>g</I> apparently expects.<P>
Since <I>D</I> is publicly derived from <I>B</I>, you can pass a <I>D</I> * to <I>g</I>, as in<P>
<pre>D d;
...
g(&amp;d);</pre>
But now if <I>D::vf</I> has a void return, how can the call <I>bp-&gt;vf(0)</I> possibly return an <I>int?</I> It can't, which is why the ARM insists that an overriding virtual function must have the same return type as the function it overrides.<P>
<h4><FONT COLOR="#000080"><A name="00A2_0047">Cloning Objects<A name="00A2_0047"></FONT></h4></P>
Some members of the standards committee suggested that this rule is more restrictive than it needs to be. There are, in fact, legitimate circumstances where the return types of the overridden and overriding functions need not be absolutely identical. Clone functions are one such circumstance.<P>
Some applications need to be able to clone an object, that is, create an object that's an exact copy of another object. Typically, you implement a class <I>X</I> with a cloning function as something like<P>
<pre>class X
    {
public:
    X *clone() const
        { return new X(*this); }
    ...
    };</pre>
Inside <I>X::clone, *this</I> is an expression of type <I>X</I> that designates the object being cloned. The expression <I>new X(*this)</I> allocates a new <I>X</I> object and initializes it using <I>X</I>'s copy constructor (the <I>X</I> constructor that takes an argument of type <I>X</I>). <I>clone</I> is a <I>const</I> member function because it does not alter <I>*this,</I> and should thus apply to const as well as non-const objects.<P>
<I>new X</I> returns an <I>X *</I>. Although you could write a clone function that returns an <I>X</I> or an <I>X &amp;</I>, I suggest returning <I>X *</I> to emphasize that <I>clone</I> returns a dynamically-allocated object that should be deleted eventually. In general, for any class <I>X</I>, the return type of <I>X::clone</I> should be <I>X</I> *. For example, in a library of geometric shapes, <I>circle::clone</I> should return a <I>circle *</I> and <I>rectangle::clone</I> should return a <I>rectangle</I> <I>*</I>.<P>
When used in a class that's the root of a polymorphic hierarchy, clone functions should be <I>virtual,</I> and often <I>pure virtual</I>. This lets you clone an object without knowing its exact type. For example, <A href="list1.htm">Listing 1</a>
shows a polymorphic hierarchy of shapes similar to the one I presented three months ago (see "Virtual Functions", <I>CUJ</I>, December 1993). Classes <I>circle, rectangle</I>, and <I>triangle</I> are all derived from base class <I>shape. shape</I> declares a <I>pure virtual</I> clone function as:<P>
<pre>virtual shape *clone() const = 0;</pre>
Each of the derived classes overrides the clone function with an impure definition. For instance, class <I>circle</I> declares<P>
<pre>virtual shape *clone() const;</pre>
in the class definition, and later defines<P>
<pre>shape *circle::clone() const
    {
    return new circle(*this);
    }</pre>
Not long ago I said that, in general, a clone function for a class <I>X</I> should have a return type of <I>X</I> *. But here the return type of <I>circle::clone</I> is <I>shape *</I>, not <I>circle *</I>. According to ARM, <I>circle::clone</I> must return a <I>shape *</I> because that is the return type of the function it overrides. Nonetheless, this clone function is still quite useful.<P>
<I>circle::clone</I> returns the result of <I>new circle,</I> which is indeed a <I>circle *</I>. Since <I>circle</I> is publicly derived from <I>shape</I>, a <I>circle</I> is a <I>shape</I>, so the <I>circle</I> * in the return expression converts safely and quietly to the return type <I>shape</I> *. A similar conversion occurs in the clone functions for <I>rectangle</I> and <I>triangle</I> shown in <A href="list1.htm">Listing 1</a>.
 An application can clone an arbitrary shape with code such as:<P>
<pre>shape *s;
...
shape *cs = s-&gt;clone();</pre>
which leaves <I>cs</I> pointing to an object that has the same dynamic type and value as <I>*s</I>.<P>
<A href="list2.htm">Listing 2</a>
shows a more elaborate example dealing with collections of shapes implemented as arrays of pointers. The <I>clone_all</I> function replicates an entire collection of shapes. First, it allocates a new array to hold the pointers to the shape clones. Then, for each shape in the original collection, it clones that shape (using its virtual clone function) and places the pointer to the copy into the new array. As is always the case with polymorphic objects, it doesn't matter to <I>clone_all</I> how many different shapes there are; each shape knows how to clone itself.<P>
<h4><FONT COLOR="#000080"><A name="00A2_0048">Unnecessary Downcasting?<A name="00A2_0048"></FONT></h4></P>
The ARM's requirement that the return type of an overriding function must be the same as the return type of the function it overrides apparently doesn't pose any problems when dealing with pointers (or references) to objects at the root of the hierarchy, as in <A href="list2.htm">Listing 2</a>.
 However, it often necessitates using casts when dealing with pointers to objects of other types in the hierarchy. For example, you cannot write<P>
<pre>rectangle *r;
...
rectangle *cr = r-&gt;clone();</pre>
because <I>r-&gt;clone()</I> returns a <I>shape *.</I> Even though a <I>rectangle</I> is a <I>shape</I>, a <I>shape</I> is not necessarily a <I>rectangle.</I> Therefore, you must add a cast, as in<P>
<pre>rectangle *cr = (rectangle *)r-&gt;clone();</pre>
Casts are dangerous things. They tell the compiler to stop complaining and let you do what you want to do, or at least, what you think you want to do. But compilers are right more often than we care to admit. Casts indicate that you are doing something that is generally unsafe. Thus, you really should avoid casts in your C++ programs, probably even more so than in C programs. When casts are rare, the few casts you really do need will stand out and draw more scrutiny, which they deserve. (For more about avoiding casts, see <a href="#2">Plum and Saks [1991]</a>.)<P>
Of course, you don't really need a cast in the previous example, because you don't really need to call <I>clone</I> to replicate a <I>shape</I> that you know is a <I>rectangle</I>. Rather, you can simply <I>clone *r</I> with<P>
<pre>rectangle *cr = new rectangle(*r);</pre>
But consider what happens if <I>rectangle</I> and <I>triangle</I> (and any other polygons) are derived from an abstract base class <I>polygon</I> derived from <I>shape,</I> rather than directly from <I>shape,</I> as outlined in <A href="list3.htm">Listing 3</a>.
 (An abstract base class is a class with at least one <I>pure virtual</I> function. An abstract base class can be a derived class.)<P>
To satisfy the ARM, all the clone functions in <A href="list3.htm">Listing 3</a>
return a <I>shape</I> *. (The declaration of <I>polygon's</I> clone function is inside a comment because you don't really need it. A function declared <I>pure virtual</I> in a base class remains <I>pure virtual</I> in the derived class unless overridden with an impure declaration.) When you clone a <I>polygon,</I> you get a pointer of type <I>shape *,</I> even though you know that pointer specifically addresses a <I>polygon.</I> Thus, you cannot clone a <I>polygon</I> and copy the result to a <I>polygon *</I> without a cast. That is, you cannot omit the cast in<P>
<pre>polygon *p;
...
polygon *cp = (polygon *)p-&gt;clone();</pre>
All of the casts in the previous examples cast pointers to base class objects into pointers to derived class objects. These casts are commonly called "downcasts" because most people draw class hierarchies with the base classes above their derived classes. Remember, when a class <I>D</I> is publicly derived from <I>B</I>, a <I>D</I> is a <I>B</I>, so you can safely convert a <I>D</I> * to a <I>B</I> * without a cast. But a <I>B</I> * is not necessarily a <I>D</I> *, so you can't convert a <I>B</I> * downward to a <I>D</I> * without a cast. Thus, like all other casts, downcasts are generally unsafe unless you're absolutely, positively sure that your <I>B</I> * actually points to a <I>D</I>.<P>
But the downcast in<P>
<pre>polygon *cp = (polygon *)p-&gt;clone();</pre>
is actually quite safe because we do know that <I>p-&gt;clone()</I> returns a <I>polygon</I> *. In fact, there's a whole family of similarly safe downcasts that occur commonly in object-oriented systems. The problem is that, on the surface, the safe casts look just like the unsafe ones. The cure is to augment the rules for virtual overriding so that you can write the safe conversions without casts.<P>
For example, you should be able to declare each virtual clone function in a hierarchy so that it returns a pointer whose static type is the same as its dynamic type. That is, <I>circle::clone </I>should return<I> </I>a<I> circle *</I> and <I>rectangle::clone</I> should return a <I>rectangle</I> *, even though <I>shape::clone</I> returns a <I>shape</I> *. Then you can clone any <I>shape,</I> or anything derived from <I>shape,</I> without a cast. For instance, given<P>
<pre>shape *s;
circle *c;</pre>
you can write<P>
<pre>shape *cs = s-&gt;clone();</pre>
to clone a <I>shape,</I> and<P>
<pre>circle *cc = c-&gt;clone();</pre>
to clone a <I>circle.</I><P>
In a sense, declaring<I> </I><I>circle::clone</I> to return a <I>circle *</I> doesn't introduce any new conversions. It merely shifts the exact point where the conversions occur, or eliminates the conversions altogether. For example, when you write <I>circle::clone</I> as<P>
<pre>shape *circle::clone() const
    {
    return new circle(*this);
    }</pre>
a conversion from <I>circle</I> * to <I>shape</I> * occurs as part of the return statement. Then there's no conversion at all in a calling expression like<P>
<pre>shape *s;
...
shape *cs = s-&gt;clone();</pre>
In contrast, when you write <I>circle::clone</I> as<P>
<pre>circle *circle::clone() const
    {
    return new circle(*this);
    }</pre>
no conversion occurs inside the function, but an implicit conversion from <I>circle</I> *(or <I>rectangle</I> *or <I>triangle</I> *) to <I>shape</I> * occurs in the calling expression. The net effect is the same. <P>
<h4><FONT COLOR="#000080"><A name="00A2_0049">The New, Relaxed Rules<A name="00A2_0049"></FONT></h4></P>
The C++ standards committee agreed that the ARM's requirement on the return type of virtual functions is a bit too restrictive. Thus, the current draft of the Working Paper (the standard-to-be) relaxes the original rule. The new rule as it appears in the Working Paper is jargon-rich and seems to change with each new draft, so I'll spare you the exact words. Here's more-or-less what it says:<P>
For all classes <I>B</I> and <I>D</I> defined as<P>
<pre>class B
    {
    ...
    virtual BT f();
    ...
    };
    
class D : public B
    {
    ...
    DT f();
    ...
    };</pre>
types <I>BT</I> and <I>DT</I> must be identical, or they must satisfy either of the following conditions:<P>
1.     <I>BT</I> is <I>BB</I> * and <I>DT</I> is <I>DD</I> *where <I>DD</I> is derived from <I>BB</I>.<P>
2.     <I>BT</I> is <I>BB &amp;</I> and <I>DT</I> is <I>DD &amp;</I> where <I>DD</I> is derived from <I>BB</I>.<P>
In either case (1) or (2),<P>
3.     class <I>D</I> must have the access rights to convert a <I>BB</I> *(or <I>BB &amp;</I>) to a <I>DD</I> *(or <I>DD &amp;</I>, respectively).<P>
In most common applications, <I>BB</I> is a public base class of <I>DD, so D</I> can perform the conversions. But, for example, if <I>BB</I> is a private base class of <I>DD</I> then the conversions are not valid, and <I>BT</I> and<I> </I><I>DT</I> will not satisfy condition (3).<P>
The above rules apply even if <I>D</I> is derived indirectly from <I>B</I>. Or, <I>BB</I> might be <I>B</I> and <I>DD</I> might be <I>D</I>. The latter, in fact, is the case with clone functions.<P>
<A href="list4.htm">Listing 4</a>
shows the shape hierarchy of <A href="list1.htm">Listing 1</a>
rewritten using the new relaxed rules for the return type of virtual functions. For completeness, I've included all the member function bodies so you can use them to build and execute the test code in <A href="list2.htm">Listing 2</a>.
<P>
Although the committee adopted these relaxed rules in March, 1992, I believe most vendors have yet to release a C++ compiler that supports them. As of early 1994, only two of the six PC-based compilers I own (Borland 4.0 and Watcom 9.5) can compile <A href="list4.htm">Listing 4</a>
without error.<P>
<h4><FONT COLOR="#000080"><A name="00A2_004A">cv-qualifiers in Return Types<A name="00A2_004A"></FONT></h4></P>
According to the current (September 1993) Working Paper, the cv-qualifiers <I>(const</I> and <I>volatile)</I> in the return types of the overriding and overridden functions need not be identical. My understanding is that the overriding function's return type cannot have any cv-qualifiers that are not also in the overridden function's return type. <A href="list5.htm">Listing 5</a>
shows some examples.<P>
Class <I>B</I> in <A href="list5.htm">Listing 5</a>
declares virtual function <I>f</I> with a return type <I>const BB</I> *, but class <I>D</I> overrides it with a function that returns <I>DD</I> * (where <I>DD</I> is publicly derived from <I>BB</I>). Hence, if <I>bp</I> is a <I>B</I> * that actually points to a <I>D</I>, then<P>
<pre>const BB *bbp = bp-&gt;f();</pre>
invokes <I>D::f</I> applied to <I>*b. D::f</I> returns a pointer to a non-const <I>DD</I> object, which the expression <I>bp-&gt;f() </I>quietly converts to <I>const BB</I> *.<P>
Pointer conversions that add cv-qualifiers are always safe, but conversions that strip off cv-qualifiers are not. Thus, given<P>
<pre>char *cp;
const char *ccp;</pre>
then<P>
<pre>ccp = cp;</pre>
is safe, but<P>
<pre>cp = ccp;</pre>
is not. Similarly, as you convert derived types to their base types, adding cv-qualifiers to pointer types should not make the conversions any less safe.<P>
<A href="list5.htm">Listing 5</a>
also shows that derived class <I>D</I> has a virtual function <I>g</I> returning a <I>const DD</I> &amp; that overrides a function returning a <I>const volatile BB &amp;</I>. This is also valid. However, if you omit <I>volatile</I> from the return type of <I>B::g</I>, then <I>D::f</I> is erroneous.<P>
None of the compilers I own support this feature yet.<P>
<h4><FONT COLOR="#000080"><A name="00A2_004B">More to Come<A name="00A2_004B"></FONT></h4></P>
Over the past two years, the standards committee has added several other new features to C++:<P>
<UL><li>run-time type identification</li>
<li>mutable members for <I>const</I> objects</li>
<li>namespaces</li>
<li>a predefined boolean type</li>
<li>new syntax for casts</li></UL>
I will explain them all in upcoming columns.<P>
<h4><FONT COLOR="#000080"><A name="00A2_004C">Meeting Dates, Etc.<A name="00A2_004C"></FONT></h4></P>
WG21+X3J16 will meet three times in 1994:<P>
<UL><li>March 6-11 in San Diego, CA USA</li>
<li>July 10-15 in Waterloo, Ontario Canada</li>
<li>November 6-11 in Valley Forge, PA USA</li></UL>
If all goes as scheduled, the draft standard should be available for public review and comment shortly after the July meeting.<P>
If you would like to participate in the standards process as a member of X3J16, contact the vice-chair:<P>
Jose Lajoie<br>
IBM Canada Laboratory<br>
844 Don Mills Rd.<br>
North York, Ontario M3C 1V7 Canada<br>
(416)448-2734<br>
<I>josee@vnet.ibm.com</I><P>
<h4>References</FONT></h4></P>
<a name="1">Ellis and Stroustrup [1990]</a>. Margaret A. Ellis and Bjarne Stroustrup. <I>The Annotated C</I>++ <I>Reference Manual</I>. Addison- Wesley.<P>
<a name="2">Plum and Saks [1991]</a>. Thomas Plum and Dan Saks. <I>C</I>++ <I>Programming Guidelines</I>. Plum Hall.<P>

<h4><a href="../../../source/1994/mar94/saks.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
