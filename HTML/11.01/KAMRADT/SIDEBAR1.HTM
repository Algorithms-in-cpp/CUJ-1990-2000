<HTML><HEAD><TITLE>January 1993/Template Classes for the iostreams Library/Sidebar</TITLE></HEAD><BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h3 align="center"><FONT FACE="Garamond" COLOR="#000080">iostreams Hierarchy</FONT></h3><hr>
<BLOCKQUOTE>
To provide seamless integration with existing code you need to create new classes that fit in with the existing <I>iostreams</I> hierarchy. To illustrate some of the relationships, <A href="fig1.htm">Figure 1</a>
contains a diagram of the <I>ifstream</I> path of the <I>iostreams</I> class hierarchy.<P>
At the bottom of the hierarchy is the <I>ifstream, ofstream</I>, and <I>fstream</I> classes. You would normally use these classes when dealing with files as streams. These classes provide no new functions or data members, and each is completely dependent on its base classes for its abilities. They are derived multiply from <I>fstreambase</I> and one of the <I>istream, ostream</I>, or <I>iostream</I> classes.<P>
The <I>istream</I> class gives <I>ifstream</I> all of its formatted input functionality. The &gt;&gt; operator is defined for all basic types, and <I>get, getline</I>, and <I>read</I> are also defined for reading. In addition, the control functions <I>gcount, ignore, peek, putback, seekg</I>, and <I>tellg</I> are defined. You should use the <I>istream</I> class whenever you create input functions for your user-defined types. The <I>ostream</I> class is similar but for output streams. The <I>ostream</I> class defines the functions <I>flush, put, seekp, tellp</I>, and <I>write</I> along with the &lt; &lt; operator. The <I>iostream</I> class is a "shell" class that simply inherits <I>istream</I> and <I>ostream</I>. All of these classes are virtually derived from the <I>ios</I> class. I will explain more on this later.<P>
<I>fstreambase</I> gives <I>fstream</I> the ability to open and close a file. <I>fstreambase</I> defines the functions <I>attach, close, open, rdbuf</I>, <I>and setbuf</I>. It also contains a single data member, a <I>filebuf type. </I>This<I> filebuf type gives fstream</I> the ability to read and write, though not directly. The read/write capability is given to <I>istream/ostream</I> through the virtual base class <I>ios</I>.<P>
Both <I>fstreambase</I> and <I>istream/ostream</I> are derived from <I>ios</I>. Since it is a virtual derivation, both of the classes share the same copy of <I>ios's</I> data members. Among these members are a pointer to a <I>streambuf</I> type. <I>fstreambase</I> gives <I>ios</I> a pointer to its <I>filebuf</I> object during initialization. During use, <I>istream/ostream</I> uses this pointer to access the <I>filebuf</I> for reading and writing. The <I>ios</I> class also has various format and state flags and numerous functions for setting and reading these flags.<P>
The <I>filebuf</I> class is the workhorse of the hierarchy. It is the one that actually calls for reads and writes from the file. It also handles opening, closing, seeking, and buffering. When an <I>fstream</I> is opened, the <I>fstream-base open</I> function calls<I> filebuf's open</I> which calls the global <I>open</I>. The <I>filebuf</I> class is derived from <I>streambuf</I>.<P>
The <I>streambuf</I> class is an abstract type that allows <I>ios</I> to communicate with different types of buffer classes. Since <I>ios</I> contains a pointer to a <I>streambuf</I> type it can communicate with <I>filebuf</I> through virtual functions. The virtual functions over<I>flow, underflow, seekoff, setbuf</I>, and <I>sync</I> provide <I>ios</I> and <I>istream/ostream</I> the ability to read, write, and seek.<P>
</BLOCKQUOTE>
</BODY>
</HTML>
