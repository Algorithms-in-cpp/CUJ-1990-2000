

<HTML>
<HEAD>

<TITLE>January 1993/Questions & Answers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjan.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Questions &amp; Answers<A name="0034_0015"><A name="0034_0015"></font></h2><P>
<h3 align="center"><A name="0034_0000"><A name="0034_0000">Linked Lists, Strings, and Internationalization</h3><P>
<h3 align="center"><font color="#800000">Ken Pugh</font></h3><hr><blockquote><P>
<P><i><A name="0034_0000"><A name="0034_0000">Kenneth Pugh, a principal in Pugh-Killeen Associates, teaches C and C++ language courses for corporations. He is the author of C Language for Programmers and All On C, and was a member on the ANSI C committee. He also does custom C programming for communications, graphics, image databases, and hypertext. His address is 4201 University Dr., Suite 102, Durham, NC 27707. You may fax questions for Ken to (919) 489-5239. Ken also receives email at kpugh@dukemvs.ac.duke.edu (Internet).</i></P><P>
<B>Q</B><P>
Just got the August <I>CUJ</I>, so please excuse the response delay. To sort a linked list quickly, count the elements, allocate an array to hold them all, then sort the array. Pick off the elements to rebuild the list. Or else use a <I>radix</I> ("Postman's") sort, if possible. Or use a merge sort.<P>
Any sort not relying on element exchange will serve to sort a linked list, though it will of course need minor modifications. Quicksort becomes a merge sort, except that partitioning is based on a pivot rather than being blind (half the elements go in each sublist).<P>
Next, in your "array of strings" answer you have the statement:<P>
<pre>printf(get_string(1));</pre>
SHAME! If there are any % characters in the string, nasty things may happen. Use:<P>
<pre>puts(get_string(i)); /*adds \n */</pre>
or<P>
<pre>printf ("%s", get_string(1));</pre>
Keep up the (otherwise) good work.<P>
David Chapman<br>
San Jose, CA<P>
<B>A</B><P>
Thanks for your reply. As I suggested in my original article, if one needs to sort a linked list, it might be just as simple to keep an array of pointers to the data items and sort that instead.<P>
Thanks also for pointing out the potential problem with the format specifier. Most likely, the percent character (<I>%</I>) will not appear in text followed by any character other than a space. This will be an invalid conversion specifier whose behavior is undefined by the ANSI standard. This is another "little gotcha" of the type described in the answer to the next question.<P>
On some machine/compiler combinations, the percent sign will show up on the output. On others, it will disappear. Of course if <I>%</I> is followed by a legitimate conversion character, garbage will appear on the output or the program may bomb.<P>
If the specifier was for a <I>float</I> number (e.g. <I>%f</I>), then it is possible that the value picked up will be an invalid floating-point number and a <I>floating-point exception</I> will occur.<P>
In practice, the return value of <I>get_string</I> will not usually be passed to <I>printf</I>. Instead, it will be a parameter to some display function that will display it with an attribute and/or in some window.<P>
For those further interested in making programs portable, you might want to investigate the internationalization functions that are specified under the Xopen Portability Guidelines (XPG). These functions are available under OSF UNIX, and probably are available on several other systems. Xopen is a consortium of European computer vendors.<P>
A brief description of the design of the functions may help you develop your own if you are on a system that does not support them.<P>
The functions use a message catalog file that is specific to a single language. The catalog file contains all strings that need to be translated to another language. The files for each language are kept in a separate directory. The strings in the catalog are arranged in sets. Each set has an identifying number and each string within the set has a unique number within that set.<P>
The initial function, <I>catopen</I>, opens the appropriate file corresponding to the filename passed to it. The directory for the file (i.e. the language of the file) is derived using the environment variables <I>NLSPATH</I> and <I>LANG</I>. <I>catopen</I> returns a catalog identifier used by the remainder of the functions.<P>
The function corresponding to the <I>get_string</I> example is <I>catgets</I>. Its four parameters are the catalog identifier, a set number within the catalog, a string number with the set, and a default string. It returns a pointer to the corresponding string. If the routine is unable to access the particular string, it returns a pointer to the default string.<P>
<A href="list1.htm">Listing 1</a>
and <A href="list2.htm">Listing 2</a>
give an example of the use of the file. The example code produces:<P>
<pre>   String to output</pre>
on standard output if the file is accessible and<P>
<pre>   I can't find it</pre>
if the file is not accessible.<P>
The message catalog is actually composed of two files. The first file is an ASCII file. A compilation program uses the ASCII file as input and creates the actual file read by the program. This makes the lookup quicker as either a single or double seek is all that is required. The compiled file can be read in as a whole if it is not too large.<P>
The catalog can use symbolic names, rather than absolute numbers. The compilation program generates a header file for use by the calling functions. Obviously this is a far superior method, as it is easier to match the strings with their intended usage. <A href="list3.htm">Listing 3</a>
and <A href="list4.htm">Listing 4</a>
give an example of the use of symbols.<P>
<h4><FONT COLOR="#000080"><A name="0034_0016">Variable Argument Lists, Portability, and Gotchas<A name="0034_0016"></FONT></h4></P>
<B>Q</B><P>
Regarding the answer you gave to reader Willi Fleischer of Moerfelden, Germany (<I>CUJ</I>, September 1992, page 114) on the use of variable parameter list, I have tried to solve a problem of the same kind: to pass the variable arguments from a function to a function (which can be nested). The solution I found, though it needs to be verified on different platforms (I tested on SGI and IBM UNIX workstations), is to call the function that needs the variable argument list and to prevent it from adding any element to the calling function's stack.<P>
For example, in <A href="list5.htm">Listing 5</a>,
 <I>Msg</I> will call <I>PrintString</I> in order to convert the <I>printf</I> argument list into a static string. As you can see, <I>PrintString</I> is the first function/statement to be executed in <I>Msg</I> after declaring <I>line</I>. If not, you will fail (try <I>if(1) line = PrintString;</I>).<P>
I understand this is somewhat restrictive, but it can be handled easily in many cases. Its advantages are: making <I>PrintString</I> syntax simple (no need for <I>_direct</I> and <I>_va_list</I> functions of the same kind), and making the functions that call it not have to deal with <I>va_start</I> and so on.<P>
Joseph Z. Wang<br>
White Plains, NY<P>
<B>A</B><P>
I consider this in the land of serendipitous trouble. A particular set of operations works on a couple of computers, but is not really part of ANSI standard. The dead giveaway is the fact that it does not work if another statement is inserted into the code.<P>
<I>PrintString</I> is only being passed one parameter (<I>fmt</I>). The way the parameters are passed on this particular set of machines, the <I>va_start</I> macro coincidentally sets up <I>args</I> to point to the first parameter after <I>fmt</I>. If the stack pointer is altered by the calling function (such as you suggested), the coincidence disappears.<P>
Unfortunately (or fortunately, depending on how you look at it), the only portable ways to pass the variable parameter list is by the method suggested or one that follows along a similar line.<P>
I teach a class in how to make C portable. It turns out there are a few "gotchas" that can appear while using the language. Code appears portable, as it works on a few machines, but in reality, it is not. Your code is one example. The previous question regarding the % in a string passed to <I>printf</I> is another example of non-portable behavior.<P>
The C standard lists nine pages of unspecified, undefined, or implementation-defined behavior. Many of the items concern situations that a good C programmer would avoid anyway. Some others are of the "gotcha" variety. For example, the order of two equal members in an array sorted by <I>qsort</I> is unspecified. Some implementations may leave equal members in the original order. Going to an implementation that does not may produce some unexpected surprises if your programming was counting on the original behavior.<P>
Many of the portability problems can be pointed out by a good lint. For those new to C, this program is a source-code analysis program that comes with many UNIX systems and is available separately on PC systems. I have used PC-Lint by Gimpel and found it very satisfactory, in many cases superior to UNIX lints I have tried.<P>
For example, the following loop may set each element of the array to the value of its index:<P>
<pre>int array[10];
int i;
for (i = 0; i &lt; 10;)
    {
    array[i] = i++;
    }</pre>
Then again, it may not. The value of <I>i</I> may be incremented before or after it is used as the index value for array. The order of evaluation of the assignment operator is not specified by the language. Nor is the time specified that the increment will take place except that it is after the value of <I>i</I> on the right hand side is obtained and before the semicolon is reached. Any of the lint programs should point out this error of dependence on order of evaluation.<P>
My suggestion for writing portable code is to keep it simple. Another author suggests that "well written code is portable." In a paper by A. Dolenc, A. Lemmke, D. Keepl and G.V. Reilly, "Notes on Writing Portable Programs in C," the authors state that the expression <I>f(p=&amp;a, p=&amp;b, p=&amp;c)</I> is ambiguous. The standard permits it to be interpreted as <I>f(&amp;a, &amp;b, &amp;c)</I> or <I>f(&amp;c, &amp;c, &amp;c)</I> [or many others &#151; pjp]. My immediate response is that one should have coded it in whichever of the forms was really required, followed by the appropriate assignment for <I>p</I>.<P>
By the way, the paper includes some excellent suggestions for making your program portable. They would permit your program to be backfitted to old K&amp;R compilers, if you need to do that.<P>
I will admit that I do not code in an absolute portable fashion. It takes a lot of hard work. The one facet which I ignore entirely is the limitation of six characters of significance in an external name. Although the ANSI C library must adhere to this limitation, I find it difficult to obey it while writing a maintainable program. If I come across that odd system that requires it, I will simply make up some header files that look like:<P>
<pre>#define my_reasonably_named_function(a,b,c) IHE345(a,b,c)
#define another_useful_function(d,e) IHE346(d,e)</pre>
<h4><FONT COLOR="#000080"><A name="0034_0017">Truncating a File in Place and Portability<A name="0034_0017"></FONT></h4></P>
Is it possible to truncate a file in place using ANSI C? Currently, I am copying the truncated data to a temporary file, removing the original file, and renaming the temporary file to the original file's name. Is there a more sophisticated method? BSD4.3 UNIX provides the (non-portable) system function calls <I>truncate</I> and <I>ftruncate</I>. Do these implement the method described above?<P>
Jeff Dragovich<br>
Urbana, Illinois<P>
<B>A</B><P>
The answer is as you have just described it. The BSD functions can play games with the <I>inode</I> (which contains the length of the file and data block-allocation information). Obviously you can run out of space when you truncate the file, as you will be making a copy of it.<P>
Since our theme is portability this month, let me suggest how to make functions like these portable. You can create a compatibility library of functions that you commonly use. For example, instead of using <I>ftruncate</I>, you might make up functions as:<P>
<pre>int file_truncate_by_fd(int file_descriptor, unsigned int size);
int file_truncate_by_name(char *file_name, unsigned int size);</pre>
These functions would be kept in a package of file functions whose implementation might vary from machine to machine. A header file, say <I>file.h</I> would be used for the function prototypes and any other <I>#defines</I> or <I>typedefs</I> required by your functions.<P>
In your BSD version of the library, these functions could call <I>truncate</I> and <I>ftruncate</I>. Alternatively, you could <I>#define</I> them in the header file to be the appropriate call, so the functions will be called inline, without an extra function call layer. For the MS-DOS version, the functions would perform the operations you listed.<P>
For all versions, the functions should return an error indication if the truncation was unable to be performed. Note that it is logically impossible for the BSD version to fail to truncate, while the MS-DOS version may fail if there is insufficient disk space.<P>
<h4><FONT COLOR="#000080"><A name="0034_0018"><I>scanf</I><B> and ANSI<A name="0034_0018"></B></FONT></h4></P>
I have some comments about the <I>sscanf</I> question in the September 1992 <I>CUJ</I>. I realize this is probably the thousandth letter you've received about this, but I've run into similar <I>sscanf</I> problems in the past and have a vested interest in these questions.<P>
According to my reading of Harbison and Steele, (I don't have a copy of the ANSI Standard document), <I>sscanf</I> should return 4 on <I>string[0]</I>, and 5 on <I>string[1]</I>. I suspect the return of 4 may be the result of an error in the code as published (should <I>string[0]</I> b e <I>garbageR A 3 0 4</I> ?), but, as you pointed out, <I>string[1]</I> scanning using the <I>[^PR]</I> conversion operator will stop immediately upon seeing the <I>R</I>; no conversion will take place. Since the assignment-suppression operator is involved, this won't affect the rest of the conversion. No pointers would be consumed in either case. Conversion will then pick up at the first <I>%c</I>, and continue with the other <I>char</I> and the three <I>ints</I>, all of which are present in <I>string[1]</I>. Am I correct in this, or am I missing yet one more subtlety in <I>sscanf</I> formatting?<P>
By the way, <I>sscanf</I> behaves this way in Borland C++ version 3.1; previous versions of Turbo C/C++ would, believe it or not, cause a null-pointer error with this usage of <I>sscanf</I>.<P>
Thanks for your attention in this.<P>
Dan Rempel<br>
Victoria, B.C. Canada<P>
<B>A</B><P>
Thank you for your sharp eye in catching the code error. I'll repeat the relevant code here, so our readers won't have to go back. The strings (with your correction) are:<P>
<pre>char *string[] = {
   "some garbageR A 3 0 4",
   "R A 3 0 4"
   };</pre>
The <I>sscanf</I> with its format looked like:<P>
<pre>const char *format = "%*[^PR]%c %c %d %d %d";
ret = sscanf (string[i], format, &amp;l, &amp;q, &amp;k, &amp;m, &amp;n);</pre>
When scanning <I>string[0]</I>, the * suppresses the assignment of any set of characters which match the <I>[^PR]</I> specifier. That specifier matches any nonempty sequence of characters that are not <I>P</I> or <I>R</I>. This directive eats up the characters "some garbage" in <I>string[0]</I>. The value <I>R</I> is then assigned to 1, and the remaining assignments take place normally.<P>
For <I>string[1]</I>, there is no sequence of characters that match the initial <I>[^PR]</I> specifier. The directive fails with a matching failure (inappropriate input, according to the standard). When that directive fails, <I>sscanf</I> returns with a zero value as no assignments have taken place.<P>
As I read the C Standard, if a match to a directive fails, even if there is assignment suppression, the function terminates at that point. The order of the operations as specified by the C Standard is to match the specifier and convert it to the corresponding type. It then checks for assignment suppression.<P>

<h4><a href="../../../source/1993/jan93/pugh.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
