


<HTML>
<HEAD>

<TITLE>January 1993/Designing an Extensible API in C</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjan.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Portability</FONT></H2>

<hr><h2 align="center"><font color="#800000">Designing an Extensible API in C<A name="001C_0003"><A name="001C_0003"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="001C_0000"><A name="001C_0000">Charles Mirho</font></h3><hr><blockquote><P>
<P><i><A name="001C_0000"><A name="001C_0000">Charles Mirho is a consultant in New Jersey, specializing in Multimedia. He holds a Masters Degree in Computer Engineering from Rutgers University. He can be reached on CompuServe at: 70563,2671.</i></P><P>
<h4><FONT COLOR="#000080"><A name="001C_0004">Definition of an Extensible API<A name="001C_0004"></FONT></h4></P>
An application program interface is the set of function calls that a software library exports to applications. These functions, along with their parameters, are usually prototyped in a header, or include file. In addition to prototypes, the header file also contains definitions for structures used by the functions, and <I>#defines</I> for flags and return values. All these components of the header file make up the complete definition of the API.<P>
An extensible API can accomodate growth in the library without requiring changes to existing applications (beyond a possible recompile). <A href="list1.htm">Listing 1</a>
contains a simple, extensible API.<P>
The function in <A href="list1.htm">Listing 1</a>
is useful in GUI APIs. It defines a region of the display where a mouse click can be trapped. A typical call to the function might look something like<P>
<pre>#define ID_HELP_BUTTON 10
int vertices[] = {10,20, 50,20, 50,40, 10,40};
REGION HelpButton = {sizeof(vertices)/sizeof(int)/2,
                  &amp;vertices[0]};
.
.
.
DefineHotSpot (ID_HELP_BUTTON, &amp;HelpButton);</pre>
The value of <I>ID_HELP_BUTTON</I> varies depending on the application. <I>ID_HELP_BUTTON</I> also provides a unique ID for the region. The second parameter, <I>&amp;HelpButton</I>, defines the boundary of the region as a set of vertices. Notice that the <I>REGION</I> structure is defined in <I>API.H</I>, the header file for the API. <I>REGION</I> contains a field for the number of vertices in the region, and a pointer to a list of vertices (coordinate pairs). Early versions of the library might only support rectangular hot spots (four vertices), but the API is extensible because more complex shapes can be used in the future without altering the prototype for <I>DefineHotSpot</I>. Compare <A href="list1.htm">Listing 1</a>
to a non-extensible version of the same API in <A href="list2.htm">Listing 2</a>.
<P>
Since the region is always rectangular, only two vertices are required, specifying the upper-left and lower-right corners of the rectangle. While this function may seem cleaner and more intuitive at first glance, it is extremely confining. If future versions of the library must support regions with more than four vertices, then you must choose one of two undesirable alternatives:<P>
<UL><li>You can create an extensible version of <I>DefineHotSpot</I>. Now developers must learn two functions, since the old version of <I>DefineHotSpot</I> must be retained for compatibility. The result is a cluttered API.</li>
<li>You must modify existing applications that use <I>DefineHotSpot</I> to support the new function API.</li></UL>
<h4><FONT COLOR="#000080"><A name="001C_0005">Structured Parameters<A name="001C_0005"></FONT></h4></P>
The extensible version of <I>DefineHotSpot</I> (<A href="list1.htm">Listing 1</a>)
 uses a structured parameter, while the non-extensible version (<A href="list2.htm">Listing 2</a>)
 passes all the parameters through the function prototype. Using structured parameters is one of the best ways to design an API that is more extensible. As the capabilities of the library expand, fields can be added to the structures without changing the function prototype. A good application of this technique is in functions that return information, such as<P>
<pre>int GetSystemInfo (SYSTEM_INFO * sinfo);</pre>
This function is used to get information about devices in the computer system.<P>
The <I>SYSTEM_INFO</I> structure:<P>
<pre>typedef struct tagSYSTEM_INFO
{
 int num_displays;   /* number of attached displays */
 int num_printers;   /* number of attached printers */
 int num_drives;  /* number of attached disk drives */
} SYSTEM_INFO;</pre>
has fields to hold the important properties of the system. (I kept it short for clarity.)<P>
Later versions of the API can expand the structure to accomodate new additions to the system, such as tape drives, as in:<P>
<pre>typedef struct tagSYSTEM_INFO
{
 int_num displays;   /* number of attached displays */
 int_num_printers;   /* number of attached printers */
 int_num_drives;  /* number of attached disk drives */
 int_num_tapes;   /* number of attached tape drives */
} SYSTEM_INFO;</pre>
Because the features of the system are passed through the API in the form of a structure, rather than as separate parameters, it is easy to add a field for tape drives.<P>
<h4><FONT COLOR="#000080"><A name="001C_0006">The Size Field<A name="001C_0006"></FONT></h4></P>
You can add even more flexibility to structured parameters with the <I>size</I> field. The <I>size</I> field holds the size, in bytes, of the structure containing it. When using a <I>size</I> field, you must make it the first field in the structure, as in<P>
<pre>typedef struct tagSYSTEM_INFO
{
 int size;                /* size of this structure */
 int num_displays;   /* number of attached displays */
 int num_printers;   /* number of attached printers */
 int num_drives;  /* number of attached disk drives */
 int num_tapes;   /* number of attached tape drives */
} SYSTEM_INFO;</pre>
The <I>size</I> field makes it possible for existing applications to use newer versions of the library without performing a recompile. This is especially useful on platforms that use dynamic linking, because dynamic link libraries are often packaged separately and sold directly to customers. Application developers often have no control over which version of the library customers are using.<P>
To see how the <I>size</I> field can save a recompile, look at the <I>SYSTEM_INFO</I> structure again. When the <I>num_tapes</I> field is added, the size of the structure changes. It would normally be necessary to recompile applications that use the structure so that static and dynamic allocations reserve the correct amount of storage. Otherwise, the newer library would write too much data into the structure parameter, corrupting memory. However, if the first field of the structure contains the structure's size, and you are careful to add fields only to the end of the structure, then the structure can be extended without the need to recompile existing applications. The library simply examines the <I>size</I> field to determine which version of the structure the application is passing. If the application is passing the older structure, the size will be smaller, and the library knows not to fill the extended fields. <A href="list3.htm">Listing 3</a>
contains an example.<P>
In <A href="list3.htm">Listing 3</a>,
 the library keeps the declaration of the old <I>SYSTEM_INFO</I> structure as <I>oSYSTEM_INFO</I>. The <I>oSYSTEM_INFO</I> structure does not appear in the header file that applications use.<P>
<h4><FONT COLOR="#000080"><A name="001C_0007">Interpretation Flag<A name="001C_0007"></FONT></h4></P>
Suppose the <I>GetSystemInfo</I> function is extended in the future to report details about particular devices in the system. You can use the same function to get the number of displays in the system, and details about the displays the system is using, as in:<P>
<pre>typedef struct tagDISPLAY_INFO
{
 int size;           /* size of this structure */
 int displayno;      /* display to get info on */
 int xpixels;        /* display width in pixels */
 int ypixels;        /* display height in pixels */
 int bits_per_pixel; /* bits per pixel */
 int planes;         /* video planes */
} DISPLAY_INFO;</pre>
You can insure that the <I>GetDisplayInfo</I> function will support this and any other device-specific structures that come along by changing the original prototype to<P>
<pre>int GetSystemInfo(int flag, unsigned char *info);</pre>
<I>GetDisplayInfo</I> now accepts a byte-aligned pointer instead of a pointer to a specific structure. The function interpretes the pointer differently, depending of the value of the flag parameter. You call the function for general system information with<P>
<pre>/* API.H */
#define GET_SYSTEM_INFO 1
#define GET_DISPLAY_INFO 2
.
.
/* application */
SYSTEM_INFO sinfo = { sizeof(SYSTEM_INFO), 0, 0, 0 };
.
.
GetSystemInfo (GET_SYSTEM_INFO, (unsigned char *) sinfo);</pre>
For details on display devices, you call the function with
<pre>/* application */
DISPLAY_INFO dinfo = { sizeof (DISPLAY_INFO), 1, 0, 0, 0, 0};
.
.
GetSystemInfo (GET_DISPLAY_INFO, (unsigned char *) dinfo);</pre>
Inside, the <I>GetSystemInfo</I> function would look something like <A href="list4.htm">Listing 4</a>.
<P>
Different structures describing entirely different things evolve differently, and so it is entirely possible for them to be the same size by coincidence. When different structures (as opposed to different versions of the same structure) are passed through the API as in <A href="list4.htm">Listing 4</a>,
 the <I>size</I> field alone is not sufficient. The interpretation flag resolves any ambiguity.<P>
<h4><FONT COLOR="#000080"><A name="001C_0008">Variable-Sized Structures<A name="001C_0008"></FONT></h4></P>
Variable-sized structures typically have a fixed-sized <I>header</I> portion and a variable-sized <I>data</I> portion. The header usually defines or limits the data in some way. The header and data are stored contiguously in memory, so that the data can be referenced as elements of the structure. This often makes the C code that manipulates the data easier to write and read. A variable-sized structure is also extensible because the data portion can be any size.<P>
The <I>REGION</I> structure in <A href="list1.htm">Listing 1</a>
can be made variable-length by changing its definition to<P>
<pre>/* api.h */
typedef struct tagREGION {
 int vertex_count;
 int vertices[1];
} REGION;
int DefineHotSpot (int id, REGION *pRegion);</pre>
Suppose you want the user to decide the shape of the region in which to trap mouse events. The number and values of the vertices in the region are not known at compile time. You first prompt the user for the number of vertices, then allocate a region of the proper size, as in<P>
<pre>/* application */
REGION *pRegion;

printf ("Enter the number of vertices:\n");
scanf {"%d", &amp;cnt);
pRegion = (REGION *) malloc(sizeof (REGION) + (2*cnt-1)*sizeof(int));</pre>
The pointer <I>pRegion</I> points to a region large enough to hold <I>cnt</I> vertices. In the <I>malloc</I> statement, <I>sizeof(REGION)</I> allocates enough space for the header (the field <I>vertex_count</I>) and one vertex, since the <I>typedef</I> for <I>REGION</I> contains one vertex. Since each vertex is a pair of integers, <I>cnt</I> vertices requires <I>2*cnt</I> integers. You thus allocate space for <I>2*cnt-1</I> integers in addition to the space already allocated for the base structure. You then cast the return value of <I>malloc</I> to a pointer to a <I>REGION</I> structure. From then on, you can refer to the vertices as members of the structure. A loop is used to read the vertex pairs, as in<P>
<pre>pRegion-&gt;vertex_count = cnt;
for (i=0;i&lt;cnt;i++)
{
 fflush (stdin);
 printf ("Enter X,Y of vertex %d\n", i+1);
 scanf ("%d , %d", &amp;pRegion-&gt;vertices [2*i],
        &amp;pRegion-&gt;vertices [2*i+1]);
}</pre>
The region with all its vertices is now passed cleanly to the <I>DefineHotSpot </I>function<P>
<pre>DefineHotSpot (ID_HELP_BUTTON, pRegion);</pre>
<h4><FONT COLOR="#000080"><A name="001C_0009">Templates<A name="001C_0009"></FONT></h4></P>
Sometimes the arguments to a function are so unpredictable that even structured parameters are limiting. The classic example of this is the Standard C library function <I>printf</I>. The prototype  for <I>printf</I> declares a single parameter, a string that acts as a template for optional arguments. The <I>printf</I> function scans the template for clues to the number and size of the optional arguments. This is an extremly powerful technique, since it allows the function to accept any number of arguments of any size, in any order. Consider, for example, a function that draws an arbitrary set of line segments. Each segment has its own attribute for width and color. Segments may or may not be connected. We create a simple language to tell the function how to draw one or more segments. The language describes the motion and attributes of an imaginary pen which moves across the drawing surface. <A href="tab1.htm">Table 1</a>
describes the Simple Drawing Language. <A href="fig1.htm">Figure 1</a>
shows sample output from the Simple Drawing Language. <A href="fig2.htm">Figure 2</a>
shows pen styles. <A href="list5.htm">Listing 5</a>
contains an example of the <I>Draw</I> function using the Simple Drawing Language.<P>
Extending the API is as simple as extending the drawing language. For example, to support different line styles, the language is extended to include an <I>s</I> (for style) followed by a number 1-5.<P>
<h4><FONT COLOR="#000080"><A name="001C_000A">Callback Functions<A name="001C_000A"></FONT></h4></P>
Callback functions provide a useful way for developers to enter the API. They provide developers with a means of extending the API without altering it. Suppose, for example, that an API included a function for copying one file to another, with optional compression, such as<P>
<pre>int zcopy (char *szSourceFile, char *szDestFile,
          int (*fnCompress)());</pre>
This function takes two files as arguments. The first file is the source to copy from and the second is the destination to copy to. The third argument specifies an optional callback function to perform compression, so that the destination file takes up less space than the source. The callback function, if used, is provided by the developer who uses the library. The <I>zcopy</I> function calls the callback function repeatedly during the file copy. Developers are free to use any compression algorithm they desire. This makes the API extensible, since better compression algorithms can be developed and inserted without altering the API. Not only that, developers who use the library have a means of differentiating their products by offering better compression. The callback function resembles<P>
<pre>int fnCompress (unsigned char *pData, int *iSize)
{
 //code to perform compression here
}</pre>
The <I>zcopy</I> function passes to the function a buffer, <I>pData</I>, which contains the raw data from the source file and the size of the buffer. Function <I>fnCompress</I> is expected to compress the data in <I>pData</I> (possibly using intermediate buffers) and return the buffer and new size to the <I>zcopy</I> function.<P>
This example is slightly oversimplified. A commercial version of <I>zcopy</I> would require additional (possibly structured) parameters to specify things like the compression block size. This example is meant only to illustrate the utility of callback functions in extending the API.<P>
<h4><FONT COLOR="#000080"><A name="001C_000B">Conclusion<A name="001C_000B"></FONT></h4></P>
Following simple guidelines when designing an API can save headaches down the road as the API expands to accomodate new features. Structured parameters, variable-sized structures, <I>size</I> fields, interpretation flags, templates, and callback functions are some of the ways to prepare an API for future growth.<P>

<h4><a href="../../../source/1993/jan93/mirho.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
