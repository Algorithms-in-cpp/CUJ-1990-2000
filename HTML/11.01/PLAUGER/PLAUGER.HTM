

<HTML>
<HEAD>

<TITLE>January 1993/Standard C</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjan.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Standard C<A name="0030_0011"><A name="0030_0011"></font></h2><P>
<h3 align="center"><A name="0030_0000"><A name="0030_0000">The Header &lt;time.h&gt;</h3><P>
<h3 align="center"><font color="#800000">P.J. Plauger</font></h3><hr><blockquote><P>
<P><i><A name="0030_0000"><A name="0030_0000">P.J. Plauger is senior editor of The C Users Journal. He is secretary of the ANSI C standards committee, X3J11, and convenor of<I></I> <I></I>the ISO C standards committee, WG14. His latest books are The Standard C Library, published by Prentice-Hall, and ANSI and ISO Standard C (with Jim Brodie), published by Microsoft Press. You can reach him at pjp@plauger.com.</i></P><P>
<h4><FONT COLOR="#000080"><A name="0030_0012">Background<A name="0030_0012"></FONT></h4></P>
Time and date calculations achieved a new level of sophistication under the UNIX operating system. Several of the developers of that system were amateur astronomers. They were sensitive to the need for representing times over a span of decades, not just years. They automatically reckoned time as Greenwich Mean Time (once GMT, now UTC), not just by the clock on the wall. They were, in short, more finicky than most about measuring and representing time on a computer.<P>
That same attention to detail has spilled over into the Standard C library. Its scope is basically whatever was available in C under UNIX that didn't depend on the peculiarities of UNIX. As a consequence, you can do a lot with times and dates in Standard C. The functions declared in <I>&lt;time. h&gt;</I> provide the relevant services.<P>
It stretches the truth a bit to say that these functions don't depend on the peculiarities of UNIX. Not all operating systems distinguish between local time and UTC. Even fewer allow different users to display times relative to different time zones. Some of the smallest systems can't even give you the time of day. Yet all implementations of C must take a stab at telling time wisely if they want to claim conformance to the C Standard.<P>
The C Standard contains enough weasel words to let nearly everybody off the hook. A system need only provide its "best approximation" to the current time and date, or to processor time consumed, to conform to the C Standard. A vendor could argue that 1 January 1980 is always the best available approximation to any time and date. A customer can rightly quarrel about the low quality of such an approximation, but not whether it satisfies the C Standard.<P>
What this means in practice is that a program should never take times too seriously. It can enquire about the current time (by calling <I>time</I>) and display what it gets in a variety of attractive formats. But it can't know for sure that the time and date are meaningful. If you have an application that depends critically upon accurate time stamps, check each implementation of Standard C closely.<P>
There are too many functions declared in <I>&lt;time.h&gt;</I> to cover in one installment. So I've divided the presentation into three parts:<P>
<UL><li>the basic time functions &#151; those that yield results of type <I>clock_t, time_t</I>, or <I>double</I></li>
<li>the conversion functions &#151; those that convert times between scalar and structured forms</li>
<li>the formatting functions &#151; those that yield text representations of encoded times</li></UL>
The topic for this month is the basic functions.<P>
<h4><FONT COLOR="#000080"><A name="0030_0013">What the C Standard Says<A name="0030_0013"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0030_0014">7.12 Date and time &lt;<B><I>time.h</I></B>&gt;<A name="0030_0014"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0030_0015">7.12.1 Components of time<A name="0030_0015"></FONT></h4></P>
The header<I> &lt;time.h&gt;</I> defines two macros, and declares four types and severalufunctions for manipulating time. Many functions deal with a <I>calendar time</I> that represents the current date (according to the Gregorian calendar) and time. Some functions deal with <I>local time</I>, which is the calendar time expressed for some specific time zone, and with <I>Daylight Saving Time</I>, which is a temporary change in the algorithm for determining local time. The local time zone and Daylight Saving Time are implementation-defined.<P>
The macros defined are <I>NULL</I> (described in 7.1.6); and<P>
<pre>CLOCKS_PER_SEC</pre>
which is the number per second of the value returned by the <I>clock</I> function.<P>
The types declared are <I>size_t</I> (described in 7.1.6);<P>
<pre>clock t</pre>
and<P>
<pre>time_t</pre>
which are arithmetic types capable of representing times; and<P>
<pre>struct tm</pre>
which holds the components of a calendar time, called the <I>broken-down time</I>. The structure shall contain at least the following members, in any order. The semantics of the members and their normal ranges are expressed in the comments.137<P>
<pre>int tm_sec;
/* seconds after the minute- [0, 61] */
int tm_min;
/* minutes after the hour- [0, 59] */
int tm_hour;
/* hours since midnight- [0, 23] */
int tm_mday;
/* day of the month- [1, 31] */
int tm_mon;
/* months since January- [0, 11] */
int tm_year;
/* years since 1900 */
int tm_wday;
/* days since Sunday- [0, 6] */
int tm_yday;
/* days since January 1- [0, 365] */
int tm_isdst;
/* Daylight Saving Time flag */</pre>
The value of <I>tm_isdst</I> is positive if Daylight Saving Time is in effect, zero if Daylight Saving Time is not in effect, and negative if the information is not available.<P>
<h4><FONT COLOR="#000080"><A name="0030_0016">7.12.2 Time manipulation functions<A name="0030_0016"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0030_0017">7.12.2.1 The <B><I>clock</I></B> function<A name="0030_0017"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0030_0018">Synopsis<A name="0030_0018"></FONT></h4></P>
<pre>   #include &lt;time.h&gt;
   clock_t clock(void);</pre>
<h4><FONT COLOR="#000080"><A name="0030_0019">Description<A name="0030_0019"></FONT></h4></P>
The <I>clock</I> function determines the processor time used.<P>
<h4><FONT COLOR="#000080"><A name="0030_001A">Returns<A name="0030_001A"></FONT></h4></P>
The <I>clock</I> function returns the implementation's best approximation to the processor time used by the program since the beginning of an implementation-defined era related only to the program invocation. To determine the time in seconds, the value returned by the <I>clock</I> function should be divided by the value of the macro <I>CLOCKS_PER_SEC</I>. If the processor time used is not available or its value cannot be represented, the function returns the value (<I>clock_t) -1</I>.138<P>
<h4><FONT COLOR="#000080"><A name="0030_001B">7.12.2.2 The <B><I>difftime</I></B> function<A name="0030_001B"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0030_001C">Synopsis<A name="0030_001C"></FONT></h4></P>
<pre>   #include &lt;time.h&gt;
   double difftime(time_t time1, time_t time0);</pre>
<h4><FONT COLOR="#000080"><A name="0030_001D">Description<A name="0030_001D"></FONT></h4></P>
The <I>difftime</I> function computes the difference between two calendar times: <I>time1 - time0</I>.<P>
<h4><FONT COLOR="#000080"><A name="0030_001E">Returns<A name="0030_001E"></FONT></h4></P>
The <I>difftime</I> function returns the difference expressed in seconds as a <I>double</I>.<P>
.....<P>
<h4><FONT COLOR="#000080"><A name="0030_001F">7.12.2.4 The <B><I>time</I></B> function<A name="0030_001F"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0030_0020">Synopsis<A name="0030_0020"></FONT></h4></P>
<pre>   #include &lt;time.h&gt;
   time_t time(time_t *timer);</pre>
<h4><FONT COLOR="#000080"><A name="0030_0021">Description<A name="0030_0021"></FONT></h4></P>
The <I>time</I> function determines the current calendar time. The encoding of the value is unspecified.<P>
<h4><FONT COLOR="#000080"><A name="0030_0022">Returns<A name="0030_0022"></FONT></h4></P>
The <I>time</I> function returns the implementation's best approximation to the current calendar time. The value (<I>time_t</I>)-<I>1</I> is returned if the calendar time is not available. If <I>timer</I> is not a null pointer, the return value is also assigned to the object it points to.<P>
Footnotes<P>
137. The range [0, 61] for <I>tm_see</I> allows for as many as two leap seconds.<P>
138. In order to measure the time spent in a program, the <I>clock</I> function should be called at the start of the program and its return value subtracted from the value returned by subsequent calls.<P>
<h4><FONT COLOR="#000080"><A name="0030_0023">Using the Basic Time Functions<A name="0030_0023"></FONT></h4></P>
The functions declared in &lt;<I>time.h</I>&gt; determine elapsed processor time and calendar time. They also convert among different data representations. You can represent a time as:<P>
<UL><li>type <I>clock_t</I> for elapsed processor time, as returned by the primitive function <I>clock</I></li>
<li>type <I>time_t</I> for calendar time, as returned by the primitive function <I>time</I> or the function <I>mktime</I></li>
<li>type <I>double</I> for calendar time in seconds, as returned by the function <I>difftime</I></li>
<li>type <I>struct tm</I> for calendar time broken down into separate components, as returned by the functions <I>gmtime</I> and <I>localtime</I></li>
<li>a text string for calendar time, as returned by the functions <I>asctime</I>, <I>ctime</I>, and <I>strftime</I></li></UL>
You have a rich assortment of choices. The hard part is often identifying just which data represention, and which functions, you want to use for a particular application. For this installment, I ignore functions that produce a <I>struct tm</I> or a text string.<P>
Here is a brief description of the individual types and macros defined in &lt;<I>time.h</I>&gt;. It is followed by brief notes on how to use the basic time functions declared in &lt;<I>time.h</I>&gt;.<P>
<I>NULL</I> &#151; See "The Header &lt;<I>stddef. h</I>&gt;," <I>CUJ</I> December 1991.<P>
<I>CLOCKS_PER_SEC</I> &#151; The expression <I>clock() / CLOCKS_PER_SEC</I> measures elapsed processor time in seconds. The macro can have any arithmetic type, either integer or floating point. Type cast it to <I>double</I> to ensure that you can represent fractions of a second as well as a wide range of values.<P>
<I>clock_t</I> &#151; This is the arithmetic type returned by <I>clock</I>, described below. It represents elapsed processor time. It can have any integer or floating-point type, which need <I>not</I> be the same type as the macro <I>CLOCKS_PER_SECOND</I>, above.<P>
<I>size_t</I> &#151; See "The Header &lt;<I>stddef.h</I> &gt;," <I>CUJ</I> December 1991.<P>
<I>time_t</I> &#151; This is the arithmetic type returned by <I>time</I>, described below. Several other functions declared in &lt;<I>time.h</I>&gt; also manipulate values of this type. It represents calendar times that span years, presumably to the nearest second (although not necessarily). Don't attempt to perform arithmetic on a value of this type.<P>
<I>tm</I> &#151; A structure of type <I>struct tm</I> represents a "broken-down time." Several functions declared in &lt;<I>time.h</I>&gt; manipulate values of this type. You can access certain members of <I>struct tm</I>. Its definition looks something like:<P>
<pre>struct tm {
   int tm_sec;
/* seconds after the minute (from 0) */
   int tm_min;
/* minutes after the hour (from 0) */
   int tm_hour;
/* hour of the day (from 0) */
   int tm_mday;
/* day of the month (from 1) */
   int tm_mon;
/* month of the year (from 0) */
   int tm_year;
/* years since 1900 (from 0) */
   int tm_wday;
/* days since Sunday (from 0) */
   int tm_yday;
/* day of the year (from 0) */
   int tm_isdst;
/* DST flag */</pre>
The members may occur in a different order, and other members may also be present. The DST flag is greater than zero if Daylight Savings Time (DST) is in effect, zero if it is not in effect, and less than zero if its state is unknown. The unknown state encourages the functions that read this structure to determine for themselves whether DST is in effect.<P>
<I>clock</I> &#151; This function measures elapsed processor time instead of calendar time. It returns -1 if that is not possible. Otherwise, each call should return a value equal to or greater than an earlier call during the same program execution. It is the best measure you can get of the time your program actually consumes. See the macro <I>CLOCKS_PER_SEC</I>, above.<P>
<I>difftime</I> &#151; The only safe way compute the difference between two times <I>t1</I> and <I>t0</I> is by calling <I>difftime</I>(<I>t1, t0</I>). The result, measured in seconds, is positive if <I>t1</I> is a later time than <I>t0</I>.<P>
<I>time</I> &#151; This function determines the current calendar time. It returns -1 if that is not possible. Otherwise, each call should return a value at the same time or later than an earlier call during the same program execution. It is the best estimate you can get of the current time and date.<P>
<h4><FONT COLOR="#000080"><A name="0030_0024">Implementing the Basic Time Functions<A name="0030_0024"></FONT></h4></P>
The functions declared in &lt;<I>time.h</I>&gt; are quite diverse. Many wrestle with the bizarre irregularities involved in measuring and expressing times and dates. Be prepared for an assortment of coding techniques (at least in future installments).<P>
<A href="list1.htm">Listing 1</a>
shows the file <I>time.h</I>. As usual, it inherits from the internal header &lt;<I>yvals.h</I>&gt; definitions that are repeated in several standard headers. I discuss the implementation of both the macro <I>NULL</I> and the type definition <I>size_t</I> in "The Header &lt;<I>stddef. h</I>&gt;," <I>CUJ</I> December 1991.<P>
&lt;<I>yvals.h</I>&gt; also defines two macros that describe properties of the primitive functions <I>clock</I> and <I>time</I>:<P>
<UL><li>The macro _<I>CPS</I> specifies the value of the macro <I>CLOCKS_PER_SECOND</I>.</li>
<li>The macro_<I>TBIAS</I> gives the difference, in seconds, between values returned by <I>time</I> and the time measured from 1 January 1900. (This macro name does not appear in &lt;<I>time.h</I>&gt;.)</li></UL>
The values of these macros depend strongly on how you implement <I>clock</I> and <I>time</I>. This implementation represents elapsed processor time as an <I>unsigned int</I> (type <I>clock_t</I>). It represents calendar time as an <I>unsigned long</I> (type <I>time_t</I>) that counts UTC seconds since the start of 1 January 1900. That represents dates from 1900 until at least 2036. You have to adjust whatever the system supplies to match these conventions.<P>
The macro _<I>TBIAS</I> is a kludge. Normally, you want to set it to zero. The version of time you supply should deliver calendar times with the appropriate starting point. UNIX, however, measures time in seconds since 1 January 1970. Many implementations of C offer a function <I>time</I> that matches this convention. If you find it convenient to use such a time function directly, then &lt;<I>yvals.h</I>&gt; should contain the definition:<P>
<pre>#define _TBIAS ((70 * 365LU + 17) * 86400</pre>
That counts the 70 years, including 17 leap days, that elapsed between the two starting points. In several places, the functions declared in &lt;<I>time.h</I>&gt; adjust a value of type <I>time_t</I> by adding or subtracting _<I>TBIAS</I>.<P>
<A href="list2.htm">Listing 2</a>
shows the file <I>time.c.</I> It defines the function <I>time</I> for a UNIX system. As usual, I assume the existence of a C-callable function with a reserved name that peforms the UNIX system service. For this version of <I>time</I>, the header &lt;<I>yvals.h</I>&gt; can define the macro _<I>TBIAS</I> to be zero.<P>
UNIX also provides an exact replacement for the function <I>clock</I>. So do many implementations of C modeled after UNIX. Thus, you may not have to do any additional work. Just define the macro _<I>CPS</I> appropriately. For a PC-compatible computer, for example, the value is approximately 18.2.<P>
<A href="list3.htm">Listing 3</a>
shows the file <I>clock.c</I>. It defines a version of <I>clock</I> you can use if the operating system doesn't provide a separate measure of elapsed processor time. The function simply returns a truncated version of the calendar time. In this case, the header &lt;<I>yvals.h</I>&gt; defines the macro _<I>CPS</I> to be 1.<P>
<A href="list4.htm">Listing 4</a>
shows the file <I>difftime.c</I>. It is careful to correct the biases of both times before comparing them. It is also careful to develop a signed difference between two unsigned integer quantities. Note how the function negates the difference <I>t1 - t0</I> only after converting it to <I>double</I>.<P>
The remaining functions all include the internal header "<I>xtime.h</I>". <A href="list5.htm">Listing 5</a>
shows the file <I>xtime.h</I>. It includes the standard header &lt;<I>time.h</I>&gt; and the internal header "<I>xtinfo.h</I>". That internal header defines the type _<I>Tinfo</I>. It also declares the data object _<I>Times</I>, defined in the file <I>asctime.c</I>. _<I>Times</I> specifies locale-specific information on the category <I>LC_TIME</I>. <A href="list6.htm">Listing 6</a>
shows the file <I>xtinfo.h</I>.<P>
The header "<I>xtime.h</I>" defines the macro <I>WDAY</I> that specifies the weekday for 1 January 1900 (Monday). It defines the type <I>Dstrule</I> that specifies the components of an encoded rule for determining Daylight Savings Time. And it declares the various internal functions that implement this version of &lt;<I>time.h</I>&gt;.<P>
<h4><FONT COLOR="#000080"><A name="0030_0025">Conclusion<A name="0030_0025"></FONT></h4></P>
The basic time functions I have shown so far meet a number of needs. You can measure execution times, obtain time and date stamps, and compare those stamps. That's more time support than many programming languages offer. For Standard C, however, it's only the beginning.<P>
<h4>References</FONT></h4></P>
W.M. O'Neil. 1975. <I>Time and the Calendars</I>. Sydney, N.S.W.: Sydney University Press. Calendars are notoriously idiosyncratic. This book tells you more than you probably want to know about the history of measuring calendar time. It also explains why days and dates are named and determined the way they are today.<P>
<I>This article is excerpted in part from P.J. Plauger,</I> The Standard C Library,<I> (Englewood Cliffs, N.J.: Prentice-Hall, 1992).</I><P>

<h4><a href="../../../source/1993/jan93/plauger.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
