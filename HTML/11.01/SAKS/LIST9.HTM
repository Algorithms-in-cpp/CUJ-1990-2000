<HTML><HEAD>
<TITLE>January 1993/Stepping Up To C++/Listing 9</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 9 <B><I></B>Implementation of</I><B></B> float_array <B><I></B>using a subscripting object</I></A></h4>
<pre>// fa5.cpp - a dynamic array of float using a
// subscripting object

#include "fa5.h"
#include &lt;assert.h&gt;

fa_index::fa_index(float_array *f, size_t i)
   : fa(f), ix(i) { }

fa_index &amp;fa_index:: operator=(float f)
   {
   if (ix &gt;= fa-&gt;len)
      fa-&gt;extend(ix);
   fa-&gt;array[ix] = f;
   return *this;
   }

fa_index::operator float()
   {
   if (ix &gt;= fa-&gt;len)
      fa-&gt;extend(ix);
   return fa-&gt;array[ix];
   }

fa_index float_array::operator[](size_t i)
   {
   return fa_index(this, i);
   }

float float_array::operator[](size_t i) const
   {
   assert(i &lt; len);
   return array[i];
   }

ffloat_array::float_array(size_t n)
   {
   if ((len = n) == 0)
      array = 0;
   else
      {
      array = new float[n];
      assert(array != 0);
      for (int i = 0; i &lt; n; ++i)
         array[i] = 0;
      }
   }

float_array::float_array (const float_array &amp;fa)
   {
   if ((len = fa.len) == 0)
      array = 0;
   else
      {
      array = new float[len];
      assert(array != 0);
      for (int i = 0; i &lt; len; ++i)
         array[i] = fa.array[i];
      }
   }

float_array::~float_array()
   {
   delete [] array;
   }

float_array &amp;float_array::operator=(const float_array &amp;fa)
   {
   if (this != &amp;fa)
      return *this;
   if (len != fa.len)
      {
      delete [] array;
      if ((len = fa.len) == 0)
         array = 0;
      else
         {
         array = new float[len];
         assert(array != 0);
         }
      }
   for (size_t i = 0; i &lt; len; ++i)
      array[i] = fa.array[i];
   return *this;
   }

ostream &amp;operator&lt;&lt;(ostream &amp;os, const float_array &amp;fa)
   {
   os &lt;&lt; '{';
   size_t i;
   for (i = 0; i &lt; fa.length(); ++i)
      os &lt;&lt; ' ' &lt;&lt; fa[i];
   return os &lt;&lt; " }";
   }

void float_array::extend(size_t i)
   {
   float *new_array = new float[i + 1];
   assert(new_array ! = 0);
   size_t j;
   for (j = 0; j &lt; len; ++j)
      new_array [j] = array [j];
   for (; j &lt; i + 1; ++j)
      new_array[i] = 0;
   delete [] array;
   array = new_array;
   len = i + 1;
   }

/* End of File */</pre>

</BODY>
</HTML>
