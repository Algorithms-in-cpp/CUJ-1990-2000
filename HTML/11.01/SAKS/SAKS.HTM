

<HTML>
<HEAD>

<TITLE>January 1993/Stepping Up To C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjan.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Stepping Up To C++<A name="0032_0013"><A name="0032_0013"></font></h2><P>
<h3 align="center"><A name="0032_0000"><A name="0032_0000">The Function operator[]</h3><P>
<h3 align="center"><font color="#800000">Dan Saks</font></h3><hr><blockquote><P>
<P><i><A name="0032_0000"><A name="0032_0000">Dan Saks is the owner of Saks &amp; Associates, which offers consulting and training in C and C++. He is secretary of the ANSI and ISO C++ standards committees, and also contributing editor for Windows/DOS Developer's Journal. Dan recently finished his first book, C++ Programming Guidelines, written with Thomas Plum. You can write to him at 393 Leander Dr., Springfield, OH 45504, or dsaks@wittenberg.edu (Internet), or call (513)324-3601.</i></P><P>
<B>Dynamic</B> array classes let you create arrays for which you can delay choosing the number of elements until runtime. In my last column, I described reasons why you might want to use such things in your programs (see "Dynamic Arrays", <I>CUJ,</I> November, 1992). I also presented a fairly typical implementation for class <I>float_array</I><I>,</I> a simple dynamic array of <I>float.</I><P>
Each <I>float_array</I> has two data members: <I>array</I><I>,</I> a pointer to the first element of an actual array of <I>float</I> allocated from the free store, and <I>len</I><I>,</I> the number of elements in that array. <A href="list1.htm">Listing 1</a>
shows the class definition. It has two constructors, a destructor, an assignment operator, a subscript operator, and a function that returns the number of elements.<P>
<h4><FONT COLOR="#000080"><A name="0032_0014"><I>const</I><B> Member Functions Revisited<A name="0032_0014"></B></FONT></h4></P>
Last time I also introduced <I>const</I> member functions. For the most part, you can think of a <I>const</I> member function as one that promises not to change the object addressed by its <I>this</I> pointer. Although you can call a <I>const</I> member function for both <I>const</I> and non-<I>const</I> objects, you can call a non-<I>const</I> member function only for non-<I>const</I> objects.<P>
You declare a member function as <I>const</I> by placing the keyword <I>const</I> after the parameter list in the member function declaration. Class <I>float_array</I> in <A href="list1.htm">Listing 1</a>
has two <I>const</I> member functions: <I>operator[]</I> and <I>length</I><I>.</I> You must also use the keyword <I>const</I> when you write the function definitions, as shown in <A href="list2.htm">Listing 2</a>.
<P>
If you accept my belief that you should declare objects <I>const</I> whenever feasible, then clearly the <I>length</I> function should be <I>const</I><I>. </I><I>length</I> simply returns the number of elements in the array without changing anything.<P>
It also appears that <I>operator[]</I> should be <I>const</I><I>.</I> If you don't declare it <I>const</I><I>,</I> you can't subscript a <I>const</I> <I>float_array</I><I>.</I> The operation appears to be perfectly safe. After all, it doesn't change anything. It simply returns a reference to the selected element. But, when I concluded last time, I said that the <I>operator[]</I> in <A href="list2.htm">Listing 2</a>
is an accident waiting to happen. It lets you write an expression, without a cast, that inadvertently modifies a <I>const float_array</I><I>.</I> For example, given<P>
<pre>const float_array fb(fa);</pre>
you can write<P>
<pre>fb[0] = 0;</pre>
which overwrites the value of the <I>fb</I>'s first element. This is valid C++. The assignment statement compiles and executes without error. But that assignment is probably an accident, and you might find the results surprising.<P>
<h4><FONT COLOR="#000080"><A name="0032_0015"><I>const</I><B>ness is Shallow<A name="0032_0015"></B></FONT></h4></P>
To see how the accident can happen, let's take a closer look at what it means for a member function to be <I>const</I><I>.</I> In a non-<I>const</I>, non-<I>static</I> member function for class <I>X</I><I>,</I> the type of <I>this</I> is <I>X</I><I> </I><I>*const</I><I>.</I> That is, the function cannot change the value of its <I>this</I> pointer, but it can modify each non-<I>const</I> data member of the object addressed by <I>this</I><I>.</I><P>
In a <I>const</I> member function of class <I>X</I><I>, </I><I>this</I> has type <I>const</I><I> </I><I>X *const</I><I>.</I> Not only is the <I>this</I> pointer <I>const</I>, but so is the object it points to. Each data member of a <I>const</I> object is in turn <I>const</I>. This applies recursively to any data members that are objects of a class type. Thus, a <I>const</I> member function cannot change the value of any data members in the object addressed by <I>this</I><I>.</I> (A <I>const</I> member function must be non-static because the <I>const</I> qualifier modifies the object addressed by the <I>this</I> pointer. A static member function has no <I>this</I> pointer, so it cannot be <I>const</I>.)<P>
Aye, there's the rub: <I>const</I>ness is shallow. A pointer member in a <I>const</I> object is a <I>const</I> pointer, but it is not pointer to <I>const</I> unless explicitly declared so. In other words, inside <I>operator[]</I>, the object's array data member (that is, <I>this&gt;array</I>) has type <I>float_array</I><I> </I><I>*const</I>, not the desired <I>const float_array</I> *. You cannot change the pointer, but you can change the values of the array elements. This violates the intuitive notion that the elements of a <I>const</I> array are themselves <I>const</I>.<P>
<I>operator[]</I> in <A href="list2.htm">Listing 2</a>
is a <I>const</I> member function. Inside the function, the array member is <I>const</I>, but the element <I>array[i]</I> is not. The function returns a <I>float &amp;</I>, not a <I>const</I> <I>float &amp;</I>. Thus, even though <I>operator[]</I> doesn't change any values, it returns a modifiable reference to an array element that the caller might accidentally use to change a value in a <I>const float_array</I><I>.</I><P>
From the programming language's standpoint, this is not an error. The behavior of the <I>float_array</I> class, even with this questionable <I>operator[]</I>, is well-defined. For a non-class type <I>T</I><I>,</I> writing over a <I>const T</I> object (or a part thereof) yields undefined behavior because you might be writing into ROM (read-only memory). But C++ only places a <I>const</I> class object in ROM if that class has neither constructors nor a destructor. Since class <I>float_array</I> has constructors and a destructor, the translator will never put <I>const</I><I> </I><I>float_array</I> objects in ROM. In this case, <I>const float_array</I> objects behave at runtime just like non-<I>const</I> objects. However, if class <I>float_array</I> had neither constructors nor a destructor, the translator might place <I>const float_array</I> objects in ROM, and calling <I>operator[]</I> for a <I>const float_array</I> would have undefined behavior.<P>
C++ has no notation for specifying "deep" <I>const</I>ness. That is, in a class <I>X</I> with pointer member <I>T *p</I><I>,</I> you can't make the <I>p</I> member of a <I>const X</I> object have type <I>const </I><I>T</I> *. However, you can design <I>X</I> to simulate "deep" <I>const</I>ness.<P>
<h4><FONT COLOR="#000080"><A name="0032_0016">Overloading with <B><I>const</I><A name="0032_0016"></B></FONT></h4></P>
Let's consider correcting the problem in <I>operator[]</I> (<A href="list2.htm">Listing 2</a>)
 by changing the function's return type from <I>float &amp;</I> to <I>const float &amp;</I> in both <A href="list1.htm">Listing 1</a>
and <A href="list2.htm">Listing 2</a>.
 Then when you declare<P>
<pre>const float_array fb(fa);</pre>
and write<P>
<pre>fb[0] = 0;</pre>
you will get a compilation error because the expression <I>fb[0]</I> refers to a <I>const float</I> object, which you cannot modify. Unfortunately, now every <I>float_array</I> subscripting expression is <I>const</I>, so you cannot do that assignment even if <I>fb</I> were non-<I>const</I><I>.</I><P>
What you need is two different subscripting operators: one for <I>const float_arrays</I><I>,</I> and another for non-<I>const float_arrays</I>. C++ lets you overload a member function as <I>const</I> and non-<I>const</I>. That is, you can declare two member functions in a given class with identical names and parameter lists, provided one of the functions is <I>const</I> and the other is not. In this case, you overload <I>operator[]</I> as a <I>const</I> function returning a <I>const float &amp;</I><I>,</I> and as a non-<I>const</I> function returning a (plain) <I>float &amp;</I><I>.</I> <A href="list3.htm">Listing 3</a>
shows the <I>float_array</I> class definition with both declarations for <I>operator[]</I>. <A href="list4.htm">Listing 4</a>
shows the corresponding function definitions.<P>
When the compiler encounters a <I>float_array</I> subscripting expression like <I>fb[i]</I>, it chooses an <I>operator[]</I> by the <I>const</I>ness of <I>fb</I>. It does not matter whether <I>fb[i]</I> appears as an lvalue or rvalue. For example, given<P>
<pre>float_array fa(fx);
const float_array fb(fy);</pre>
then<P>
<pre>fa[i] = fb[i];</pre>
calls the non-<I>const operator[]</I> on the left of the assignment, and calls the <I>const operator[]</I> on the right. Everything works fine. However, the assignment<P>
<pre>fb[i] = fa[i];</pre>
calls the <I>const operator[]</I> on the left side and calls the non-<I>const operator[]</I> on the right. But the <I>const</I><I> </I><I>operator[]</I> returns a non-modifiable lvalue (a<I> </I><I>const float &amp;</I>), so it cannot appear as the destination of the assignment, and you get a compile-time error.<P>
Furthermore, the compiler selects the <I>operator[]</I> based on the <I>const</I>ness of the <I>float_array</I> expression that refers to the object, and not the <I>const</I>ness of the object itself. For example,<P>
<pre>const float_array *p = &amp;fa;</pre>
binds <I>p</I>, a pointer to <I>const</I>, to a non-<I>const</I> object, <I>fa</I>. Then <I>(*p) [i]</I> calls the <I>const</I> <I>operator[]</I> because <I>*p</I> has type <I>const float_array</I>, even though <I>p</I> points to a <I>float_array</I> that's declared non-<I>const</I>.<P>
<h4><FONT COLOR="#000080"><A name="0032_0017">Arrays That Grow<A name="0032_0017"></FONT></h4></P>
When I first introduced <I>operator[]</I> in my previous column, I suggested that the function could handle a subscript out-of-bounds in a number of ways. Thus far, my <I>float_array</I> class has treated subscripts out of bounds as an error caught by <I>assert</I>. Now let's consider rewriting <I>operator[]</I> to automatically extend the array so that the subscript is in bounds.<P>
For example, if you declare<P>
<pre>float_array fa(4);</pre>
then <I>fa</I> has four elements whose indices are 0 through 3. Now if you write<P>
<pre>fa[6] = 1.0;</pre>
then <I>operator[]</I> adds three more elements to <I>fa</I> at indices 4, 5, and 6, so the assignment operator has some place to store the 1.0.<P>
Rewrite only the non-<I>const operator[]</I>. Extending an array changes the array (by making it bigger), and a <I>const</I> member function should not change the object addressed by its <I>this</I> pointer. Subscripting out of range in a <I>const float_array</I> should remain a runtime error.<P>
<A href="list5.htm">Listing 5</a>
shows my revised implementation for the non-<I>const operator[]</I>. If the function determines that the subscript is out of bounds, it allocates a new, larger array. It copies the values of the elements of the old array into their corresponding positions in the new array, and fills the remaining elements in the new array with zeros. Then it deletes the old array, thus returning that storage to the free store.<P>
<A href="list6.htm">Listing 6</a>
shows a trivial test program that uses <I>operator[]</I> to extend an array. <A href="fig1.htm">Figure 1</a>
shows output from that program. The second <I>for</I> loop in <I>main</I> (<A href="list6.htm">Listing 6</a>)
 overwrites the values in <I>fb</I> and then adds new elements. The output expression just before the <I>return</I> statement forces a subscripting error on the <I>const</I><I> </I><I>float_array fc</I>. I added that expression just to reinforce that <I>operator[]</I> is different for <I>const</I> and non-<I>const</I> <I>float_arrays</I>.<P>
The subscripting error makes the assertion in <I>operator[]</I> fail. <I>assert</I> displays an error message and aborts the program. Unlike the <I>exit</I> function, <I>abort</I> does not flush and close the standard output stream, <I>cout</I>. Thus I changed the body of the display function from<P>
<pre>cout &lt;&lt; s &lt;&lt; " = " &lt;&lt; fa &lt;&lt; '\n';</pre>
(as it was in my previous column), to<P>
<pre>cout &lt;&lt; s &lt;&lt; " = " &lt;&lt; fa &lt;&lt; endl;</pre>
<I>endl</I> is a special kind of function called a manipulator. It's defined in <I>iostream.h</I><I>.</I> The expression<P>
<pre>cout &lt;&lt; endl;</pre>
writes a newline to <I>cout</I> and flushes <I>cout</I>'s output buffer to standard output. Typically, you won't see the difference between <I>\n</I> and <I>endl</I> unless you redirect standard output to a file.<P>
You might recognize an opportunity to use<I> </I><I>realloc</I> in the non-<I>const operator[]</I>. <I>realloc</I> is a Standard C library function that changes the size of a dynamically-allocated block of memory. However, <I>realloc</I> only works with storage previously allocated by <I>calloc</I><I>, </I><I>malloc</I>, or <I>realloc</I>. Many C++ environments implement the new operator in terms of <I>malloc</I>, so <I>realloc</I> might work with <I>new</I>. But there is no guarantee that it always will.<P>
For <I>float_arrays</I>, you could simply abandon the <I>new</I> operator and use <I>malloc</I> and <I>realloc</I>. The code for class <I>float_array</I> will still be portable. However, using <I>malloc</I> and <I>realloc</I> only works for arrays of objects without constructors and destructors. The new operator applies a default constructor to each element of the array it allocates. <I>malloc</I> just grabs storage.<P>
On occasion, members of the C++ standards committee have suggested adding a <I>renew</I> operator that works with <I>new</I> as <I>realloc</I> works with <I>malloc</I>. So far, nothing has come of it.<P>
<h4><FONT COLOR="#000080"><A name="0032_0018">Dangling Pointers and References<A name="0032_0018"></FONT></h4></P>
A dangling pointer or reference is one that remains bound to an address after the program deallocates the object at that address. The potential occurrence of a dangling pointer or reference is an ever present fact of life for C++ programmers, as it is for C programmers. <I>operator[]</I> offers yet another opportunity for the unwary to get bitten.<P>
Consider, for example, the following code fragment:<P>
<pre>float_array fa, fb;
...
float *p = &amp;fa[i];
...
fa = fb;
...
*p = 1.0;</pre>
<I>p</I>'s declaration binds it to the address of an element of <I>fa</I>. (Remember, <I>fa[i]</I> is a reference to an element, and so <I>&amp;fa[i]</I> is the address of the referenced element.) If <I>fb</I> and <I>fa</I> have a different number of elements, the assignment <I>fa</I> = <I>fb</I> deletes the old elements of <I>fa</I> with new ones at a different address. This leaves <I>p</I> dangling.<P>
An even subtler problem occurs in the test program in <A href="list7.htm">Listing 7</a>
when using the (non-<I>const</I>) <I>operator[]</I> that may extend a <I>float_array</I> (<A href="list5.htm">Listing 5</a>)
. If you run the program with 4 as the input value for size, it initializes <I>fa</I> with four elements { <I>0</I><I> </I><I>1</I><I> </I><I>2</I><I> </I><I>3</I> }. The subsequent statements<P>
<pre>size_t n = fa.length();
fa[n] = fa[n - 1] = 123;</pre>
look like they extend <I>fa</I> by one element and copy <I>123</I> into the last two elements, so that<P>
<pre>fa = { 0 1 2 123 123}</pre>
I tested the assignment against three MS-DOS C++ compilers (Borland, Comeau, and Zortech), and they all produced that result.<P>
The next two statements<P>
<pre>n = fa.length();
fa[n - 1] = fa[n] = 456;</pre>
look like they should extend <I>fa</I> by one more element, and store <I>456</I> in the last two elements, so that<P>
<pre>fa = { 0 1 2 123 456 456 }</pre>
Interestingly, only Borland and Zortech produced that result; Comeau produced<P>
<pre>fa = { 0 1 2 123 123 456 }</pre>
Apparently, Comeau evaluates<P>
<pre>fa[n - 1] = fa[n] = 456;</pre>
more or less as follows:<P>
<pre>float &amp;t1 = fa[n - 1];
float &amp;t2 = fa[n];
t2 = 456;
t1 = t2;</pre>
But the call to <I>fa[n]</I> in the second step extends <I>fa</I> and moves its elements to a different place in the free store. Unfortunately, <I>t1</I> has already been bound to the original location of <I>fa[n - 1]</I>, and the call to <I>fa[n]</I> leaves <I>t1</I> dangling. Thus, the final step <I>(t1 = t2)</I>, copies <I>456</I> from <I>fa[n]</I> into the original location of <I>fa[n - 1]</I>, not the current one.<P>
The Comeau compiler is generating correct code. C++ compilers, like C compilers, have considerable freedom about the order in which they evaluate operands between sequence points, and the Comeau compiler is merely exercising its freedom. The problem is in the test program, because the expression depends on a particular evaluation order for success.<P>
<h4><FONT COLOR="#000080"><A name="0032_0019">Subscripting Objects<A name="0032_0019"></FONT></h4></P>
<I>operator[]</I> opens the door for dangling pointers and references because it returns a reference to part of a <I>float_array</I>'s internal representation. That representation tends to move around, but the references don't rebind to the new locations. You can eliminate many opportunities for dangling references by rewriting <I>operator[]</I> to return a subscripting object instead of a reference.<P>
A reference to a <I>float</I> can only keep track of a single <I>float</I> element in a <I>float_array</I>. The reference has no way of knowing if the value it's referring to has moved. A subscripting object keeps track of both the <I>float_array</I> and the value of the subscript, so it always subscripts using the current location of the array.<P>
<A href="list8.htm">Listing 8</a>
is the header for class <I>float_array</I> using a subscripting class, <I>fa_index</I><I>. </I><I>fa_index</I> has two data member: <I>fa</I>, a pointer to a <I>float_array</I>, and <I>ix</I>, a subscript for an element of that <I>float_array</I><I>. </I><I>fa_index</I> has a two-argument constructor that fills in values for members <I>fa</I> and <I>ix</I>.<P>
Notice that the constructor is <I>private</I>. Thus, clients (users) of <I>fa_index</I> can't create <I>fa_index</I> objects. How, then, does the program ever create an <I>fa_index</I><I>? </I><I>fa_index</I> declares <I>float_array</I> as a <I>friend</I> class. Hence, every member function of class <I>float_array</I> is a friend of class <I>fa_index</I>. <I>float_array</I> member functions has access rights so they can construct <I>fa_index</I> objects.<P>
<A href="list9.htm">Listing 9</a>
presents the implementations for both the <I>fa_index</I> and <I>float_array</I> member functions. (The listing includes all the <I>float_array</I> member functions for completeness.) The only <I>float_array</I> member function that changes to use <I>fa_index</I> is the non-<I>const operator[]</I>. Rather than return a <I>float &amp;</I> as before, it returns an <I>fa_index</I><I> </I>object.<P>
The <I>fa_index</I> class has a conversion operator that converts an <I>fa_index</I> to a <I>float</I>. When you use an expression like <I>fa[i]</I> as an rvalue in a context expecting an arithmetic expression, the program implicitly calls operator <I>float</I> to convert the <I>fa_index</I> object into the value of element that the object designates. That is, the compiler translates the assignment in<P>
<pre>float x;
...
x = fa[i];</pre>
into something like<P>
<pre>fa_index t1(fa[i]);
x = float(t1);</pre>
The program constructs a temporary <I>fa_index</I><I> </I><I>t1</I> to hold the result of <I>fa[i]</I>. Then it applies <I>fa_index::operator float</I> to <I>t1</I> to get the value of the array element.<P>
When <I>fa[i]</I> appears to the left of an assignment, the program calls <I>fa_index::operator=(float)</I> to write through the <I>fa_index</I> object and into the <I>float_array</I> element it designates. For example, an assignment like<P>
<pre>fa[i] = 1;</pre>
translates into<P>
<pre>fa_index t1(fa[i]);
t1.operator=(float(1));</pre>
Using this new implementation for <I>float_array</I> with the test program in <A href="list7.htm">Listing 7</a>
eliminates the dangling reference. It enables all three compilers to produce the same (intended!) result.<P>
But you pay for subscripting objects. They slow down every subscripting operation on a non-<I>const</I><I> </I><I>float_array</I>. Furthermore, you lose some functionality that you have to reconstruct by writing more member functions for <I>fa_index</I>. For example, <I>fa_index::operator</I>= only lets you use an expression like <I>fa[i]</I> as the left side of an = operator. It doesn't cover any other uses as an lvalue, such as <I>fa[i]</I> *= <I>10</I> or ++<I>fa[i]</I>. If you want these operators, you must define them for class <I>fa_index</I>.<P>
<h4><FONT COLOR="#000080"><A name="0032_001A">Other Uses for <B><I>operator[]</I><A name="0032_001A"></B></FONT></h4></P>
Some C++ applications use <I>operator[]</I> as a file positioning operator, replacing explicit calls to a function like <I>lseek</I>. For example,<P>
<pre>File f("myfile");
...
f[10] = 'X';</pre>
writes an <I>X</I> into the tenth character position of <I>File f</I><I>.</I> Coplien (1992, 49-52) outlines a simple implementation for this scheme using subscripting objects.<P>
Cargill (1992, 91-112) provides an excellent description of what goes wrong with poorly-designed subscripting objects. His example uses a file object similar to Coplien's. Cargill also provides some thoughtful discussion on whether using <I>operator[]</I> this way is just too clever. The pitfalls may out-weigh the notational advantages.<P>
<h4>References</FONT></h4></P>
Cargill, Tom. 1992. <I>C++ Programming Style</I>. Reading, MA: Addison-Wesley.<P>
Coplien, James O. 1992. <I>Advanced C++ Programming Styles and Idioms</I>. Reading, MA: Addison-Wesley.<P>

<h4><a href="../../../source/1993/jan93/saks.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
