<HTML><HEAD>
<TITLE>December 1995/An lostream Class for the GPIB/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1 <I>Header file for GPIB stream classes</I></A></h4>
<pre>// gpibio.h
#ifndef GPIBIO
#define GPIBIO
#include "decl.h" // NI-488.2(TM) prototypes

// GENERIC Stream Class
class gstream
{
protected:
       char * base_;     // start of get buffer area
       char * ebuf_;     // end+1 of get buffer area
       char * pbase_;    // start of put area
       char * pptr_;     // next put location
       char * epptr_;    // end+1 of put area
       char * gptr_;     // next get location
       char * egptr_;    // end+1 of filled part of get buffer
       int gleng_;       // Current length of get area
public:
          gstream();     // constructor
          ~gstream();    // destructor
       void sputc(char c);
       void sput(char *);

       char sgetc();
       char sbumpc();
       virtual int underflow()=0; // fill empty buffer
       virtual void overflow()=0; // flush buffer and make more room
       void gets(char *s);
       void flush_input() {gptr_ = egptr_;}
};

// GPIB BOARD CLASS
class gpibdvr
{
   int bhandle;
public:
   gpibdvr(int b=0);
   int open_device(int d);
};

// GPIB Interface Class
class gpibio
{
   static int     rep_cnt[2];
protected:
   static gpibdvr *dvr[2];
public:
   int board;
   int device;
   int radix;
   int status;
   gpibio(int b=0);  // Constructor
   ~gpibio(); // Destructor
   int operator !(){return (status&amp;(ERR|TIMO))!=0;}
};

// OUTPUT CLASS
class gpibout: public gpibio , public gstream
{
public:
       gpibout(int d=5,int b=0);
       gpibout &amp; operator &lt;&lt;(char *s);
       gpibout &amp; operator &lt;&lt;(char);
       gpibout &amp; operator &lt;&lt;(short);
       gpibout &amp; operator &lt;&lt;(int);
       gpibout &amp; operator &lt;&lt;(long);
       gpibout &amp; operator &lt;&lt;(float);
       gpibout &amp; operator &lt;&lt;(double);
       gpibout &amp; operator&lt;&lt; (gpibout &amp; (*_f)(gpibout &amp;));
       virtual void overflow();  // flush buffer and make more room
       virtual int underflow();  // dummy
};

// INPUT CLASS
class gpibin: public gpibio , public gstream
{
public:
       gpibin(int d=5,int b=0);
       int srqwait();
       gpibin&amp; operator &gt;(char *s);
       gpibin&amp; operator &gt;(float &amp;);
       gpibin&amp; operator &gt;(double &amp;);
       gpibin&amp; operator &gt;(char &amp;);
       gpibin&amp; operator &gt;(short &amp;);
       gpibin&amp; operator &gt;(int &amp;);
       gpibin&amp; operator &gt;(long &amp;);
       gpibin &amp; operator&gt; (gpibin &amp; (*_f)(gpibin &amp;));
       virtual int underflow();  // fill empty buffer
       virtual void overflow();  // dummy
};

// Manipulators
gpibout &amp; flush(gpibout &amp;x);
gpibout &amp; endl(gpibout &amp;x);
gpibout &amp; dec(gpibout &amp;x);
gpibout &amp; hex(gpibout &amp;x);
gpibout &amp; oct(gpibout &amp;x);
gpibout &amp; bin(gpibout &amp;x);
gpibin &amp; dec(gpibin &amp;x);
gpibin &amp; hex(gpibin &amp;x);
gpibin &amp; oct(gpibin &amp;x);
gpibin &amp; bin(gpibin &amp;x);
gpibin &amp; flush(gpibin &amp;x);

#endif
/* End of File */
</pre>
</BODY>
</HTML>
