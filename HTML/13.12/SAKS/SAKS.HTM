

<HTML>
<HEAD>

<TITLE>December 1995/Stepping Up to C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocdec.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Stepping Up to C++<A name="01E3_0112"><A name="01E3_0112"></font></h2><P>
<h3 align="center"><A name="01E3_0000"><A name="01E3_0000">Understanding C++ Declarations</h3><P>
<h3 align="center"><font color="#800000">Dan Saks</font></h3><hr><blockquote><P>
<P><i><A name="01E3_0000"><A name="01E3_0000">Dan Saks is the president of Saks &amp; Associates, which offers consulting and training in C++ and C. He is secretary of the ANSI and ISO C++ committees. Dan is coauthor of C++ Programming Guidelines, and codeveloper of the Plum Hall Validation Suite for C++ (both with Thomas Plum). You can reach him at 393 Leander Dr., Springfield OH, 45504-4906, by phone at (513)324-3601, or electronically at dsaks@wittenberg.edu.</i></P><P>
Last month, I looked at different notations for describing the syntactic structure of programming languages such as C and C++. (See "The Column That Needs a Name: A Sensible Grammar Notation," <I>CUJ</I>, November, 1995.) Along the way, I explained why I prefer EBNF (Extended Backus-Naur Form) to the notation employed in both the C Standard and the C++ Draft Standard. Now I will use EBNF to help explain one of the most misunderstood aspects of both C and C++ &#151; the structure of declarations.<P>
As I mentioned last month, I've found that few C and C++ programmers really understand the syntax of declarations and their associated semantics. While most programmers have little trouble creating and interpreting simple declarations, their understanding breaks down when confronted with declarations that have too many *s, &amp;s, ( )s, []s or const qualifiers.<P>
I'm not concerned about programmers' abilities to decipher overly-complicated declarations contrived for "see if you can figure this one out" puzzles. My concern is with their abilities to handle even mildly-complicated declarations that occur in the normal course of C++ (and even C) programming. For example, I find that I can't teach a C++ course at any level without pausing at some point to review the differences among C declarations such as<P>
<pre>const char *x[N];
char const *y[N];
char *const z[N];</pre>
and then why<P>
<pre>x[i] = z[i];</pre>
is valid, while<P>
<pre>z[i] = x[i];</pre>
is not.<P>
As if C declarations weren't rich enough by themselves, C++ thickens the stew by throwing in other ingredients such as reference types, qualified names, cv-qualified member functions, and pointers to members. Although a C++ declaration such as<P>
<pre>const X::N *((X::*f)(void *, size_t) const);</pre>
isn't commonplace, it's not unreasonably complicated either. I've seen declarations such as this in production code and it behooves you to understand them.<P>
C++ adds even more complexity by using minor variations of the declaration syntax in each of several different contexts: <I>declaration-statements, member-declarations, new-expressions</I> and <I>parameter-declarations</I>. At its simplest, the type specification in a <I>new-expression</I> looks just like the type specification in a declaration. However, <I>new-expressions</I> have special rules for more complicated types which invite little surprises. For example,<P>
<pre>p1 = new char *[2];
p2 = new (char *)[2];</pre>
are both valid and have remarkably different meanings.<P>
Mastering the structure of declarations is even more important in C++ than it is in C. C++ offers you more ways to make mistakes, and so compilers have a harder time telling you exactly what you did wrong. (Sometimes they can't even tell you approximately what you did wrong.) You'll be able to make more sense of error messages if you can parse a declaration properly.<P>
Most of the confusion surrounding declarations stems from the part called a <I>declarator.</I> So that's where we'll focus our attention.<P>
<h4><FONT COLOR="#000080"><A name="01E3_0113">Type Specifers vs. Declarators<A name="01E3_0113"></FONT></h4></P>
Declarations in C++ take various forms. In addition to the basic forms inherited from C for declaring objects, constants, types, and functions, there are additional forms for templates, namespaces, and linkage specifications. However, none of these additional forms contain declarators, so I'll ignore them for the time being.<P>
In C++, the non-terminal corresponding to object and function declarations is ironically called a <I>simple-declaration.</I> The EBNF production (syntax rule) for a <I>simple-declaration</I> is<P>
<pre>simple-declaration =
    { decl-specifier } [ init-declarator-list ] ";".</pre>
In other words, a <I>simple-declaration</I> is a sequence of zero or more <I>decl-specifiers</I> followed by an optional <I>init-declarator-list,</I> followed by a semicolon. (I explained EBNF in detail last month. A summary of EBNF appears in <A href="tab1.htm">Table 1</a>.
)<P>
A <I>decl-specifier</I> can be any of a number of things. It can be a <I>type-specifier</I> (a keyword such as int or double, or an identifier that names a type). It can be a <I>storage-class-specifier</I> such as extern, static, or register. It can be a function specifier, such as inline or virtual. It can also be the keyword friend or typedef, which don't seem to fit into any category. For example, the sequence<P>
<pre>const unsigned long int</pre>
is a <I>decl-specifier</I> sequence. The order doesn't matter, so<P>
<pre>int long const unsigned</pre>
is also a <I>decl-specifier</I> sequence denoting the same type. <A href="tab2.htm">Table 2</a>
shows a partial grammar for a <I>decl-specifier</I>.<P>
An <I>init-declarator-list</I> is sequence of one or more <I>init-declarators</I> separated by commas:<P>
<pre>init-declarator-list =
   init-declarator { "," init-declarator } .</pre>
An <I>init-declarator</I> is a declarator followed by an optional initializer.<P>
<pre>init-declarator =
   declarator [ initializer ] .</pre>
A declarator is the identifier being declared, along with all the *s, ( )s, []s and (in the case of C++) &amp;s that modify that identifier. For example, *p is a declarator indicating that p is a pointer. A pointer to what? A pointer to the type specified by the <I>decl-specifiers.</I> For example,<P>
<pre>const unsigned long int *p</pre>
declares p as a pointer to a const unsigned long int.<P>
Thus an <I>init-declarator</I> is a declarator with an initializer. For example, in<P>
<pre>unsigned int *p = &amp;ui;</pre>
*p = &amp;u is the init-declarator.<P>
You can string several declarators (without or without initializers) in a single declaration, as in<P>
<pre>unsigned int *p, &amp;r = u, n;</pre>
The declaration contains three declarators: (1) *p, (2) &amp;r, and (3) n. The declaration declares that p is a pointer to an unsigned int,r is a reference to an unsigned int, and n is just an unsigned int.<P>
<h4><FONT COLOR="#000080"><A name="01E3_0114">Syntax and Style (Again)<A name="01E3_0114"></FONT></h4></P>
This brings me to another point about the relationship between syntax and style. I'm not suggesting that cramming more than one declarator on a line is good style, but the syntax does allow it. I really don't think there's anything wrong with a declaration such as<P>
<pre>int i, j, k;</pre>
or even<P>
<pre>char *s1, *s2;</pre>
However, I can certainly understand why you might find<P>
<pre>char c, *p, buf[BUFSIZ];</pre>
to be too busy, and want to split it up. Whatever you choose, you should understand that the *s, &amp;s, []s and ()s are part of a declarator, not part of the <I>decl-specifier</I> sequence.<P>
I bring this up because some programmers prefer to write<P>
<pre>const char* p;
int&amp; r;</pre>
rather than<P>
<pre>const char *p;
int &amp;r;</pre>
That is, they use a space to group the * and &amp; with the <I>decl-specifiers</I> rather than with the <I>declarator</I>. This is no help. It leads to misunderstandings about the meaning of declarations. It's easy to misread<P>
<pre>char* s1, s2;</pre>
as declaring s1 and s2 both with type "pointer to char." No matter how you space them, the *s and &amp;s are part of the <I>declarator,</I> not the <I>decl-specifier.</I> Thus the declaration is really<P>
<pre>char *s1, s2;</pre>
or, more explicitly,<P>
<pre>char *s1;
char s2;</pre>
To their credit, many programmers who put the *s and &amp;s with the <I>decl-specifier</I> consistently write only one declarator per declaration, and thus avoid this confusion.<P>
I believe most C++ programmers put the *s and &amp;s with the <I>decl-specifiers</I> because that's the way Bjarne Stroustrup (the inventor of C++) has always done it.. This, in fact, is usually the way you can tell a "real" C++ programmer from a C hack using C++. "Real" C++ programmers do it Stroustrup's way. Too bad he does it wrong. (I guess you now know what that makes me.)<P>
There is a third style, which is to place a space on both sides of a * or &amp;, as in<P>
<pre>const char * p;
int &amp; r;</pre>
This is certainly reasonable. However, I would argue that if you lay out declarations this way, you should also put a space in expressions between a unary operator and its operand. For example, expressions such as<P>
<pre>p = &amp; x;
* s1 ++ = * s2 ++;</pre>
are consistent with the above declarations, while<P>
<pre>p = &amp;x;
*s1++ = *s2++;</pre>
are not. Then again, you might agree with Ralph Waldo Emerson that "a foolish consistency is the hobgoblin of little minds."<P>
<h4><FONT COLOR="#000080"><A name="01E3_0115">The "Maximal Munch" Rule<A name="01E3_0115"></FONT></h4></P>
The <I>decl-specifiers</I> may include a type name. A type name may be a class name, an enumeration name, or a typedef name. Most programmers habitually write the type name as the last (rightmost) <I>decl-specifier,</I> but it need not be so. For example, you can write<P>
<pre>static const T *p;</pre>
as<P>
<pre>const T static *p;</pre>
or<P>
<pre>T static const *p;</pre>
and they all mean the same thing.<P>
A declarator might not have any operators in it &#151; it might be just an identifier. For example, in<P>
<pre>static const size_t MAX = 1000;</pre>
the declarator is just MAX. If declarators always began with an operator such as * or &amp;, it would be pretty easy to tell where the <I>decl-specifiers</I> ended and the first declarator began. But, since the <I>decl-specifier</I> sequence is just a stream of unordered keywords and identifiers, and the declarator might be just another identifier, finding the boundary is not always that easy. This also makes it harder for compilers to provide precise error messages for errors in declarations. Many compilers just announce they've found a "declaration syntax error."<P>
Other aspects of the syntax combine to make error detection even harder. In C++, as in C, you can omit the <I>type-specifier</I> from the <I>decl-specifier</I> sequence, and the type defaults to int. For example, you can write<P>
<pre>const MAX = 1000;</pre>
and the compiler assumes MAX is an int. This is called the "implicit int" rule.<P>
The other complicating factor is that the <I>init-declarator-list</I> might be completely empty in some contexts. For example, consider the function declaration<P>
<pre>int f(unsigned int u);</pre>
Here we have a declaration within a declarator. At the outermost level, int is the <I>decl-specifier</I> and<P>
<pre>f(unsigned int u)</pre>
is the declarator. But f's declarator contains a declaration in which unsigned int is the <I>decl-specifier</I> sequence, and u is the declarator.<P>
Since the function declaration does not include a function body, the compiler simply parses the formal parameter name in the declarator and then ignores it. Thus, you can omit the name. If the declarator is just an identifier, and you omit it, then you have a declaration which has no declarator at all; it's just a <I>decl-specifier</I> sequence. For example,<P>
<pre>int f(unsigned int);</pre>
declares f as a function with a single (unnamed) parameter of type unsigned int.<P>
Given all these syntactic complications, how then can a C++ compiler tell where the <I>decl-specifiers</I> end and the declarators begin? It applies the "maximal munch" rule, stated in section 7.1 (page 96) of the ARM<a href="#1">[1]</a> as:<P>
The longest sequence of <I>decl-specifiers</I> that could possibly be a type name is taken as the <I>decl-specifiers</I> of a declaration.<P>
In other words, the parser will "munch" as many symbols as it can as part of the <I>decl-specifiers</I> in a declaration before it starts parsing the first declarator. (I looked up "munch" and it means "to chew steadily with a crunching sound.")<P>
To see how this applies, consider the formal parameter list in<P>
<pre>int f(const T);</pre>
Is T part of the <I>decl-specifier</I> sequence or it is the declarator? In other words, does f have a unnamed parameter of type const T, or a named parameter T of type const int? Well, it depends on the context of the declaration.<P>
Suppose T has been defined as type name, such as<P>
<pre>typedef int T;</pre>
or<P>
<pre>class T;</pre>
If this case, the compiler munches T as part of the <I>decl-specifier</I> sequence because that produces the longest possible sequence. The <I>init-declarator-list</I> is then empty. That is, f has an unnamed argument of type const T.<P>
If T has not been defined as a type name, then T could not possibly be part of the <I>decl-specifier</I> sequence. The longest sequence is just const (meaning const int implicitly), and T is the declarator. In this case, f has a named parameter T of type const int.<P>
Late in 1993, the C++ standards committee passed a resolution which we all referred to as "banning implicit int." (That's also the way I described it a few months ago in "Stepping Up to C++: Other Assorted Changes, Part 3," <I>CUJ</I><I>,</I> September, 1995.) The resolution modified the draft to say that:<P>
Only in <I>function-definitions</I> and in function declarations for constructors, destructors, and type conversions can the <I>decl-specifier-seq</I> be omitted.<P>
This says that you can no longer write function declarations that completely omit the return type specifier, except in constructors, destructors, and conversion operators. For instance, a function declaration such as<P>
<pre>f();</pre>
will not be standard C++ (when there is a Standard). You must supply a return type, as in<P>
<pre>int f();</pre>
This is the case for member as well as non-member functions (except for constructors, destructors, and conversion operators).<P>
The "implicit int" ban also states that:<P>
At least one <I>type-specifier</I> is required in a typedef declaration. At least one <I>type-specifier</I> is required in a function declaration unless it declares a constructor, destructor, or type conversion operator.<P>
This says that<P>
<pre>extern f();</pre>
will not be standard C++ because, even though extern is part of the <I>decl-specifier</I> sequence, it is not a <I>type-specifier.</I> You must write the declaration as<P>
<pre>extern int f();</pre>
Unfortunately, the current C++ draft considers <I>cv-qualifiers</I> (the keywords const and volatile) to be type-specifiers. (See the production for <I>type-specifier</I> in <A href="tab2.htm">Table 2</a>.
) Thus, the draft still allows implicit int in some declarations. For example, the draft still allows<P>
<pre>const MAX = 1000;</pre>
which defines MAX as a const int. It also allows<P>
<pre>int f(const T);</pre>
even when T is not a previously defined type name, in which parameter T has type const int.<P>
Apparently the ban was not a complete ban. I'm not sure this is what the standards committees intended, but that's the way it is. Therefore, maximal munch is still very much alive, and we must all contend with it when we see vague error messages emanating from compilers. Sigh.<P>
I'll continue next month with a detailed look at the syntax of declarators.<P>
<h4><FONT COLOR="#000080"><A name="01E3_0116">Syntax and Style, Once More<A name="01E3_0116"></FONT></h4></P>
As P.J. Plauger warned me, my article on "Syntax and Style" (<I>CUJ,</I> October, 1995) generated more mail than any other article I've written. (All of it was electronic.) I was pleasantly surprised to find that even those who did not agree with all that I wrote still enjoyed the article.<P>
My managing editor also forwarded me this interesting little note:<P>
<I>My flabber never so gasted! Dan Saks writes "Straker calls this the Allman style. Even though I haven't the foggiest notion where the name comes from, I'll use it anyway."</I><P>
<I>Is Dan being sarcastic, or is he genuinely unaware of _Eric_ Allman's many achievements, notably his work at UCB with BSD UNIX (esp. SENDMAIL and the [in]famous trapdoor that let in the giant worm) and, whence the eponymy, his long-running columns on C style/usage in UNIX Review?</I><P>
<I>PAX etc.</I><P>
<I>Stan Kelly-Bootle</I><br>
<I>Mill Valley, CA\skb@crl.com</I><P>
I haven't the foggiest notion who this Stan Kelly-Bootle is, but I'd like to thank him for setting me straight. No, I wasn't being sarcastic, nor am I genuinely unaware of Eric Allman. I just never made the connection, and apparently none of my editors did either. Sorry Eric, no offense intended.<P>
Another reader, Marty Leisner (leisner@sdsp.mc.xerox.com) confirmed the origin of the Allman style. He also explained that the Allman style for the switch statement is not as I explained. He showed me this snippet from Allman's sendmail program:<P>
<pre>switch (up-&gt;udb_type)
{
  case UDB_DBFETCH:
        /* get the default case for this database */
        if (up-&gt;udb_default == NULL)
        {</pre>
I had suggested the code would look like:<p>
<pre>switch (up-&gt;udb_type)
{
case UDB_DBFETCH:
        /* get the default case for this database */
        if (up-&gt;udb_default == NULL)
        {</pre>
The difference is that the "genuine" Allman code indents the case label two spaces from the enclosing braces. If this is indeed the style, then the rules for the Allman style are more complicated than I supposed.<P>
Two readers wrote to tell me that they've gotten good results from the Free Software Foundation's indent program, a source code reformatter. I'll try to dig up a copy and let you know what I think.<P>
<h4><FONT COLOR="#000080"><A name="01E3_0117">Our T1 Lines are Still Open!<A name="01E3_0117"></FONT></h4></P>
Last month I invited you to submit a new name for my column that reflects my new(?) focus on more advanced C++ topics. That invitation is still open. Send your suggestion(s) to cujed@rdpub.com. The winner (if any) will receive a free copy of the first ever <I>CUJ</I> CD-ROM, plus a free <I>CUJ</I> t-shirt.<P>
<h4><FONT COLOR="#000080"><A name="01E3_0118">Reference<A name="01E3_0118"></FONT></h4></P>
<a name="1"></a>[1]     Margaret A. Ellis and Bjarne Stroustrup, <I>The Annotated C++ Reference Manual</I> (Addison-Wesley, 1990).<P>

<h4><a href="../../../source/1995/dec95/saks.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
