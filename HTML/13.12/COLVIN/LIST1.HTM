<HTML><HEAD>
<TITLE>December 1995/Smart Pointers for C++ Garbage Collection/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1 <I>Portable interface to garbage collection classes</I></A></h4>
<pre>////////////////////////////////////////////////////////////
// gc.h
//
// Smart pointers to garbage collected objects.
#ifndef GC_H
#define GC_H

#include "gc_imp.h"

// Allocator for garbage collected objects.
template&lt;class T&gt; struct gc {
   static void* allocate(size_t n) throw(bad_alloc) {
      void* p= ::operator new(gc_data::min()+n);
      return &amp;(new(p) gc_value&lt;T&gt;())-&gt;data;
   }
   static void deallocate(T*) throw() {}
};

// Smart pointers to collectable objects.
template&lt;class X&gt; struct gc_ptr : gc_link {
   gc_ptr() : gc_link() {}
   gc_ptr(X* p) : gc_link(p) {}
   gc_ptr(const gc_ptr&amp; r) : gc_link(r) {}
   gc_ptr&amp; operator=(const gc_ptr&amp; r) {
      mark_or_copy(r);
      return *this;
   }
   gc_ptr&amp; operator=(X* p) {
      set_ptr(p);
      return *this;
   }
   operator X*()          const { return (X*)ptr; }
   X* operator-&gt;()        const { return (X*)ptr; }
   X&amp; operator[](size_t i)      { return *((X*)ptr+i); }
   X operator[](size_t i) const { return *((X*)ptr+i); }
};

// Do garbage full or partial collection.
void gc_all();
void gc_min();
void gc_handler() throw(bad_alloc);

#endif

/* End of File */
</pre>
</BODY>
</HTML>
