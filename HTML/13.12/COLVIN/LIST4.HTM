<HTML><HEAD>
<TITLE>December 1995/Smart Pointers for C++ Garbage Collection/Listing 4</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 4 <I>Header for runtime library</I></A></h4>
<pre>////////////////////////////////////////////////////////////
// runtime.h
//
// Runtime library with patches to track working papers.

#ifndef RUNTIME_H
#define RUNTIME_H

#include &lt;assert.h&gt;
#include &lt;errno.h&gt;
#include &lt;limits.h&gt;
#include &lt;malloc.h&gt;
#include &lt;stddef.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;time.h&gt;
#include &lt;iostreams.h&gt;

// Boolean type.
typedef int bool;

// Exceptions.
struct exception { virtual ~exception(){} };
struct bad_alloc : exception {};

// Low level memory allocation functions.
void* allocate(size_t) throw();
void deallocate(void*) throw();

// Installable new handler.
typedef void (*new_handler)();
new_handler set_new_handler(new_handler) throw();

// Standard memory allocation operators.
void* operator new(size_t) throw(bad_alloc);
void* operator new[](size_t) throw(bad_alloc);
void operator delete(void*);
void operator delete[](void*);

// Default allocator.
template&lt;class T&gt; struct allocator {
   void* allocate(size_t size) throw(bad_alloc) {
      return ::operator new(n);
   }
   void deallocate(T* p) throw() { :: operator delete(p); }
};

// Allocate via an allocator.
template&lt;class Allocator&gt; inline void*
operator new(size_t n,Allocator&amp; r) throw(bad_alloc) {
   return r.allocate(n);
};
template&lt;class Allocator&gt; inline void*
operator new[](size_t n,Allocator&amp; r) throw(bad_alloc) {
    return r.allocate(n);
};

// Allocate in place.
inline void* operator new(size_t n,void* p) throw() {
   return p;
}
inline void* operator new[](size_t n,void* p) throw() {
   return p;
}

#endif

/* End of File */
</pre>
</BODY>
</HTML>
