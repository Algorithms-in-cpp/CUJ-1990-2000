



<HTML><HEAD>

<TITLE>May 1996/Standard C/C++/Listing 5</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4>
<A name="HEADING1">Listing 5: &lt;iterator&gt;, part 9</A></h4>


<pre>

        // TEMPLATE CLASS istreambuf_iterator
template&lt;class E, class T = ios_traits&lt;E&gt; &gt;
    class istreambuf_iterator
        : public input_iterator&lt;E, T::off_type&gt; {
public:
    typedef istreambuf_iterator&lt;E, T&gt; Mytype;
    typedef E char_type;
    typedef T traits_type;
    typedef T::int_type int_type;
    typedef basic_streambuf&lt;E, T&gt; streambuf_type;
    typedef basic_istream&lt;E, T&gt; istream_type;
    istreambuf_iterator(streambuf_type *sb = 0)
        : Sbuf(sb), Got(sb == 0) {}
    istreambuf_iterator(istream_type&amp; is)
        : Sbuf(is.rdbuf()), Got(is.rdbuf() == 0) {}
    E operator*()
        {return (Got ? Val : Peek()); }
    const T *operator-&gt;() const
        {return (&amp;**this); }
    Mytype&amp; operator++()
        {Inc();
        return (*this); }
    Mytype operator++(int)
        {if (!Got)
            Peek();
        Mytype tmp = *this;
        Inc();
        return (tmp); }
    bool equal(const Mytype&amp; x) const
        {if (!Got)
            ((Mytype *)this)-&gt;Peek();
        if (!x.Got)
            ((Mytype *)&amp;x)-&gt;Peek();
        return (Sbuf == 0 &amp;&amp; x.Sbuf == 0
            || Sbuf != 0 &amp;&amp; x.Sbuf != 0); }
private:
    void Inc()
        {if (Sbuf == 0 || T::is_eof(Sbuf-&gt;sbumpc()))
            Sbuf = 0, Got = true;
        else
            Got = false; }
    E Peek()
        {int_type Cont;
        if (Sbuf == 0 || T::is_eof(Cont = Sbuf-&gt;sgetc()))
            Sbuf = 0;
        else
            Val = T::to_char_type(Cont);
        Got = true;
        return (Val); }
    streambuf_type *Sbuf;
    bool Got;
    E Val;
    };

        // istreambuf_iterator OPERATORS
template&lt;class E, class T&gt; inline
    bool operator==(const istreambuf_iterator&lt;E, T&gt;&amp; x,
        const istreambuf_iterator&lt;E, T&gt;&amp; y)
    {return (x.equal(y)); }

        // TEMPLATE CLASS ostreambuf_iterator
template&lt;class E, class T = ios_traits&lt;E&gt; &gt;
    class ostreambuf_iterator : public output_iterator {
    typedef ostreambuf_iterator&lt;E, T&gt; Myt;
public:
    typedef E char_type;
    typedef T traits_type;
    typedef basic_streambuf&lt;E, T&gt; streambuf_type;
    typedef basic_ostream&lt;E, T&gt; ostream_type;
    ostreambuf_iterator(streambuf_type *sb) throw()
        : Failed(false), Sbuf(sb) {}
    ostreambuf_iterator(ostream_type&amp; os) throw()
        : Failed(false), Sbuf(os.rdbuf()) {}
    Myt&amp; operator=(E x)
        {if (Sbuf == 0 || Sbuf-&gt;sputc(x) == T::eof())
            Failed = true;
        return (*this); }
    Myt&amp; operator*()
        {return (*this); }
    Myt&amp; operator++()
        {return (*this); }
    Myt&amp; operator++(int)
        {return (*this); }
    bool failed() const throw()
        {return (Failed); }
private:
    bool Failed;
    streambuf_type *Sbuf;
    };
};    // end of namespace std
#endif /* _ITERATOR_ */
/* End of File */
</pre>
</body></html>
