






<HTML>
     
     <HEAD>


          
          <TITLE>May 1996/Standard C/C++ </TITLE>
     </HEAD>
     
     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          
          <H2><A href="../tocmay.htm"><IMG src="../../toc.gif" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#ff0000">
          Columns</FONT></H2>
          
          <HR>
          
          <H2 ALIGN="center"><FONT COLOR="#800000">Standard C/C++ </FONT></H2>
          
          <H3 ALIGN="center"><FONT COLOR="#800000"> P. J. Plauger</FONT></H3>
          
          <H3 ALIGN="center"><FONT COLOR="#800000">The Header &lt;iterator&gt;,
          Part 2</FONT></H3>
          
          <BLOCKQUOTE>
               
               <p>As you progress in C++, you'll
                    naturally want to use iterators, and even create your own.
                    The header &lt;iterator&gt; provides excellent models for
                    you to imitate and elaborate upon.</p></BLOCKQUOTE>
          <HR>
          <BLOCKQUOTE>
               
               <h4><FONT COLOR="#000080">Introduction</FONT></H4>
               
               <p>Last month, I introduced the header &lt;iterator&gt;.
                    It supplies considerable machinery for manipulating
                    iterators within the Standard Template Library (or STL). So
                    far, I have shown the template functions:</p>

<PRE>

iterator_category
value_type
distance_type
advance
distance
</PRE>
               
               <p></p>
               
               <p>along with the classes that they work
                    with. The algorithms in STL make extensive use of these
                    template functions to gloss over differences among the five
                    categories of iterators. By suitably overloading on each of
                    these template functions, STL can generate the best tailored
                    C++ code for the actual iterators you use in your code.</p>
               
               <p>I continue this month with the
                    remainder of the header &lt;iterator&gt;. What's left are a
                    number of iterators, in the form of template classes, and a
                    handful of template functions that go with them.</p>
               
               <h4><FONT COLOR="#000080">Reverse Iterators</FONT></H4>
               
               <p>A reverse iterator, as its name
                    implies, steps backward through a sequence when you step the
                    iterator forward. Equally, it steps forward through a
                    sequence when you step the iterator backward. It is a handy
                    tool when you find it useful to sometimes operate on a
                    sequence in reverse order &#151; no need to actually reverse the
                    sequence, then reverse it again later, just to perform the 
                    backward operation.</p>
               
               <p> <A href="listing1.htm">Listing 1</A>
                    shows the chunk of header &lt;iterator&gt; that defines the
                    template class reverse_iterator and its related template
                    operators. It is a random-access iterator. The template
                    class has a whole slew of type parameters:</p>
               <UL><LI> RanIt is the underlying random-access iterator type
                         that you want to run backwards.</LI>
                    <LI> T is the type of elements designated by a RanIt
                         object.</LI>
                    <LI> Ref is the type of a reference to T.</LI>
                    <LI> Ptr is the type of a pointer to T.</LI>
                    <LI> Dist is the type of the difference between two RanIt
                         objects.</LI>
               </UL>
               
               <p>So you might define:</p>

<PRE>

typedef random_iterator&lt;char *,
    char, char&amp;, char*, ptrdiff_t&gt;
Revptr;
</PRE>
               
               <p>to define an iterator type Revptr that
                    walks backward through an array of char.</p>
               
               <p>I discussed the relationship between
                    RanIt, T, and Dist last month. The template function
                    value_type helps you determine T for an iterator, while the
                    template function distance_type helps you determine Dist.
                    Sadly, the tricks that these template functions use don't
                    quite meet the needs of default values for template type
                    parameters. You have to spell them out when you specialize 
                    the template class reverse_iterator.</p>
               
               <p> Less obvious are the template
                    parameters Ref and Ptr. You'd think that Ref should always
                    be T&amp; and Ptr should always be T *. That's almost true,
                    but not exactly. STL permits remarkable latitude in how you
                    store the elements of a sequence. I'll get into that topic
                    in more detail next month, when I present the header &lt;memory&gt;.
                    For now, just know that the default parameter values shown
                    usually do the job, unless you're being very tricky in how
                    you implement RanIt.</p>
               
               <p> The template class stores just one
                    object, the underlying iterator of class RanIt. Anyone can
                    obtain the value of this object by calling the member
                    function base(). A class derived from reverse_iterator can
                    access it as the protected object current. None of the
                    remaining code is particularly tricky once you understand
                    the essential design principle behind reverse iterators. It 
                    is captured in the member function operator*():</p>

<PRE>

Ref operator*() const
    {return (*(current - 1)); }
</PRE>
               
               <p><BR>
                     Put simply, a reverse iterator returns the element just
                    before the one designated by current. The reason why is
                    simple, once you think about it. You typically designate a
                    sequence by the range of iterators [first, last). The
                    half-open interval notation means that first is part of a
                    non-empty sequence but last is just past the end.</p>
               
               <p> You designate a range of reverse
                    iterators by the range of current values [last, first). For
                    last to work as the value stored in current, it has to
                    designate the element at current - 1 in a non-empty
                    sequence. Once you make this shift, all the other properties
                    of iterators follow pretty naturally.</p>
               
               <p> The template class reverse_iterator
                    is an excellent prototype for any random-access iterator
                    class you choose to develop. It supplies all the needed
                    member functions. It is also accompanied, in
                    <A href="listing1.htm">Listing 1</a>,
 by all the template
                    operators you need to define as well. You will see more of
                    this particular iterator when we discuss the container
                    template classes vector and deque.</p>
               
               <p> Of course, you can also run a
                    bidirectional iterator backward. <A href="listing2.htm">Listing
                         2</a>
shows the chunk of header &lt;iterator&gt; that
                    defines the template class reverse_bidirectional_iterator
                    and its related template operator. It is a bidirectional
                    iterator, naturally enough. That's why its first parameter
                    is called BidIt, as an aide memoire. Its parameters are
                    otherwise the same as for template class reverse_iterator.</p>
               
               <p> Once again, the template class
                    reverse_bidirectional_iterator is an excellent prototype for
                    any bidirectional iterator class you choose to develop. You
                    will see it again when we discuss the container template
                    classes list, map, multimap, set, and multiset.</p>
               
               <h4><FONT COLOR="#000080">Insertion Iterators</FONT></H4>
               
               <p>You often have occasion to generate a
                    sequence of elements in one pass from beginning to end. An
                    output iterator is the ideal agent for disposing of the
                    generated elements. It has the weakest semantic requirements
                    of any of the iterator categories that let you write a
                    sequence. Those weak requirements permit considerable
                    latitude in writing output iterators.</p>
               
               <p> Say, for example, you want to insert
                    the generated sequence in some container object C of type
                    Cont. The container template classes defined in STL have a
                    number of uniform properties you can exploit. In particular:</p>
               <UL><LI> Any container that supports constant-time insertions
                         at the end of its controlled sequence defines the
                         member function C.push_back(Cont::value_type&amp;),
                         where Cont::value_type is the type of an element of the
                         sequence.</LI>
                    <LI> Any container that supports constant-time insertions
                         at the beginning of its controlled sequence defines the
                         member function C.push_front(Cont::value_type&amp;).</LI>
                    <LI> Any container that supports constant-time insertions
                         before an arbitrary element designated by an iterator
                         defines the member function C.insert(Cont::value_type&amp;,
                         Cont::iterator), where Cont::iterator is the type of an
                         iterator over the sequence. The function returns an
                         iterator that designates the inserted element.</LI>
               </UL>
               
               <p>Of course, nothing prevents you from
                    defining your own containers that follow these rules. On the
                    contrary STL encourages you to follow its models so that
                    your additions integrate well with the rest of STL.</p>
               
               <p> <A href="listing3.htm">Listing 3
                    </A>shows the chunk of &lt;iterator&gt; that defines several
                    template classes:</p>
               <UL><LI> back_insert_iterator&lt;Cont&gt; is an output iterator
                         that appends generated elements to a container object
                         of type Cont.</LI>
                    <LI> front_insert_iterator&lt;Cont&gt; is an output
                         iterator that prepends generated elements. (Yes, the
                         generated elements end up in reverse order at the
                         beginning of the controlled sequence.)</LI>
                    <LI> &#160;insert_iterator&lt;Cont,Iter&gt; is an output
                         iterator that inserts generated elements before an
                         element that you specify with an iterator.</LI>
               </UL>
               
               <p>Each of these template classes stores
                    a reference to the container object, with the protected name
                    container. The last one also stores the insertion point in
                    an object with the protected name iter.</p>
               
               <p> On the face of it, the member
                    operator definitions in each of these template classes are
                    outrageous. They do not supply the semantics normally
                    associated with their operators. Remember, however, that an
                    output iterator next is meant to be used in just one or two
                    stylized ways:</p>

<PRE>

for (; &lt;not done&gt;; ++next)
    *next = &lt;whatever&gt;;
</PRE>
               
               <p></p>
               
               <p>or:</p>

<PRE>

while (&lt;not done&gt;)
    *next++ = &lt;whatever&gt;;
</PRE>
               
               <p><BR>
                     Walk through these template class definitions for the two
                    stylized loops above. You will see that they supply the
                    absolute minimum functionality needed to behave like output
                    iterators. Thus, they serve as good models for any output
                    iterators you might choose to write.</p>
               
               <p> <A href="listing3.htm">Listing 3</A>
                    also defines three template functions:</p>
               <UL><LI> &#160;back_inserter(Cont&amp;) returns a
                         back_insert_iterator for the container argument.</LI>
                    <LI> &#160;front_inserter(Cont&amp;) returns a
                         front_insert_iterator for the container argument.</LI>
                    <LI> &#160;inserter(Cont&amp;, Iter) returns an
                         insert_iterator for the container and iterator
                         arguments.</LI>
               </UL>
               
               <p> These provide a handy way to concoct
                    insertion iterators on the fly.</p>
               
               <h4><FONT COLOR="#000080">Stream Iterators</FONT></H4>
               
               <p>If you can deliver a generated
                    sequence to a container, using some clever form of output
                    iterator, you should certainly be able to insert it into an
                    output stream, using some other clever form. Equally, you
                    should be able to obtain a sequence of elements from an
                    input stream, using some clever form of input iterator.
                    Indeed, that is the case.</p>
               
               <p> Say you have elements of type T for
                    which are defined a stream extractor:</p>

<PRE>

istream&amp; operator&gt;&gt;(istream&amp;, T&amp;);
</PRE>
               
               <p><BR>
                     That's all you need to read characters from an input stream
                    such as cin, convert them to a value of type T, and store
                    the value in an object X, just by writing:</p>

<PRE>

cin &gt;&gt; X;
</PRE>
               
               <p><BR>
                     The template class istream_iterator&lt;T, Dist&gt; does
                    this for you, in the guise of obtaining an element from a
                    sequence using an input iterator. If you write:</p>

<PRE>

typedef istream_iterator&lt;int, ptrdiff_t&gt;
    Int_init;
Int_init int_in(cin);
</PRE>
               
               <p></p>
               
               <p>then the expression *int_in++ extracts
                    an int from cin and delivers it as the value of the
                    expression.</p>
               
               <p>You should, of course, first test that
                    such a value is available in the input stream. The proper
                    way to do so is to compare int_it for equality with the
                    singular value that signals end of file. (See "Standard
                    C/C++: Iterators," CUJ, February 1996.) The default
                    constructor always yields an object with this singular
                    value. Thus, you can write:</p>

<PRE>

Int_init first(cin), last;
</PRE>
               
               <p></p>
               
               <p>and proceed to extract elements from a
                    stream until you reach end of file, by writing either the
                    stylized loop:</p>

<PRE>

for (p= first; p != last; ++p)
    &lt;process&gt;(*p);
</PRE>
               
               <p></p>
               
               <p>or its variant:</p>

<PRE>

while (first != last)
    &lt;process&gt;(*first++);
</PRE>
               
               <p><BR>
                    <A href="listing4.htm">Listing 4</a>
shows the chunk of &lt;iterator&gt;
                    that defines the template class istream_iterator and its
                    equality operator. You should once again study how its
                    bizarre member operators work in the stylized loops above to
                    deliver proper behavior for an input iterator. Note that
                    such an iterator object has to squirrel away a "lookahead"
                    value, of type T, to meet all its semantic requirements.</p>
               
               <p> <A href="listing4.htm">Listing 4</A>
                    also defines the template class ostream_iterator&lt;T&gt;.
                    It defines an output iterator for inserting elements into an
                    output stream. Say you have elements of type T for which are
                    defined a stream inserter:</p>

<PRE>
ostream&amp;operator&lt;&lt;(ostream&amp;,T);
</PRE>
               
               <p><BR>
                     That's all you need to convert a value of type T to a
                    character sequence and write the sequence to an output
                    stream such as cout, just by writing:</p>
               
               <p></p>

<PRE>
cout &lt;&lt; X;
</PRE>
               
               <p><BR>
                     The template class ostream_iterator&lt;T&gt; does this for
                    you, in the guise of storing a generated element into a
                    sequence using an output iterator. If you write:</p>

<PRE>

typedef ostream_iterator&lt;int&gt;
    Int_outit;
Int_outit int_out(cout);
</PRE>
               
               <p></p>
               
               <p>then the expression *int_out++ = X
                    inserts the int value X into cout. Even better, the
                    declaration:</p>

<PRE>

Int_outit int_out(cout, " ");
</PRE>
               
               <p></p>
               
               <p>appends a space to each inserted
                    value, so they don't all run together.</p>
               
               <h4><FONT COLOR="#000080">Stream Buffer
               Iterators</FONT></H4>
               
               <p>A late addition to STL is a pair of
                    iterators for inserting and extracting elements of type E
                    (typically of type char) directly to and from a stream
                    buffer. The template class basic_streambuf&lt;E, T&gt;
                    defines the stream-buffer objects that mediate transfers
                    between an actual stream, such as a file, and computer
                    memory. It is a templatized version of the older iostreams
                    class streambuf, which performs a function analogous to the
                    Standard C library type FILE. Here, T stands for a
                    "traits" class, which supplies assorted information about
                    the element type E.</p>
               
               <p> I won't delve into all the
                    intricacies of iostreams as it has been standardized.
                    Suffice it to say that the template class
                    istreambuf_iterator&lt;E, T&gt; plays a crucial role in this
                    new machinery. Every character read from an input stream is
                    obtained through the intermediary of an input iterator of
                    this type. Similarly, every character written to an output
                    stream is delivered through the intermediary of an output
                    iterator of type ostreambuf_iterator&lt;E, T&gt;.</p>
               
               <p> <A href="listing5.htm">Listing 5</A>
                    shows the last chunk of the header &lt;iterator&gt;. It
                    defines these two template classes and an accompanying
                    template operator. Compare these definitions closely with
                    those in Listing 4 &#151; they are highly parallel. The major
                    difference is that istreambuf_iterator endeavors to perform
                    "lazy input." It defers actually obtaining an element from
                    the input stream until it is actually needed. Otherwise, the
                    two sets of classes are more alike than different.</p>
               
               <h4><FONT COLOR="#000080">Conclusion</FONT></H4>
               
               <p>The machinery defined in the header &lt;iterator&gt;
                    is used throughout STL. You should cultivate enough
                    familiarity with it to use it comfortably. It is hard to
                    write good algorithms without leaning heavily on
                    iterator_category and the other utilitarian template
                    functions I covered last month. It is amazing how often the
                    insertion iterators come in handy when you muck about with
                    containers. And if you perform truly serious work with
                    iostreams, you can't avoid working with the stream-buffer
                    iterators at the very least.</p>
               
               <p> But this header has an equally
                    important use, as I emphasize one last time. Of the five
                    categories of iterators, only forward iterators have no
                    prototype defined within this header. All the others have
                    excellent models for you to imitate and elaborate upon. Use
                    them.o</p>
               
               <p><I>P.J. Plauger is senior editor of
                    C/C++ Users Journal. He is convener of the ISO C standards
                    committee, WG14, and active on the C++ committee, WG21. He
                    developed Lib Suite ++, the Plum-Hall validation suite for
                    the Standard C++ library. His latest books are The Draft
                    Standard C++ Library, Programming on Purpose (three
                    volumes), and Standard C (with Jim Brodie), all published by
                     Prentice-Hall. You can reach him at pjp@plauger.com.</I></p><I>
               </I>
               
               <p></p> 

<h4><a href="../../../source/1996/may96/plauger.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
     </BODY>
</HTML>
