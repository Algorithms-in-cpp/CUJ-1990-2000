



<HTML><HEAD>

<TITLE>May 1996/Standard C/C++/Listing 1</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4>
<A name="HEADING1">Listing 1: &lt;iterator&gt;, part 5</A></h4>

<p></p>

<pre>

          // TEMPLATE CLASS reverse_iterator
template&lt;class RanIt, class T, class Ref = T&amp;,
    class Ptr = T *, class Dist = ptrdiff_t&gt;
    class reverse_iterator
        : public random_access_iterator&lt;T, Dist&gt; {
public:
    typedef reverse_iterator&lt;RanIt, T, Ref, Ptr, Dist&gt; Mytype;
    reverse_iterator()
        {}
    explicit reverse_iterator(RanIt x)
        : current(x) {}
    RanIt base() const
        {return (current); }
    Ref operator*() const
        {return (*(current - 1)); }
    Ptr operator-&gt;() const
        {return (&amp;**this); }
    Mytype&amp; operator++()
        {--current;
        return (*this); }
    Mytype operator++(int)
        {Mytype tmp = *this;
        --current;
        return (tmp); }
    Mytype&amp; operator--()
        {++current;
        return (*this); }
    Mytype operator--(int)
        {Mytype tmp = *this;
        ++current;
        return (tmp); }
    Mytype&amp; operator+=(Dist n)
        {current -= n;
        return (*this); }
    Mytype operator+(Dist n) const
        {return (Mytype(current - n)); }
    Mytype&amp; operator-=(Dist n)
        {current += n;
        return (*this); }
    Mytype operator-(Dist n) const
        {return (Mytype(current + n)); }
    Ref operator[](Dist n) const
        {return (*(*this + n)); }
protected:
    RanIt current;
    };

        // reverse_iterator OPERATORS
template&lt;class RanIt, class T, class Ref, class Ptr,
    class Dist&gt; inline
    bool operator==(
        const reverse_iterator&lt;RanIt, T, Ref, Ptr, Dist&gt;&amp; x,
        const reverse_iterator&lt;RanIt, T, Ref, Ptr, Dist&gt;&amp; y)
    {return (x.base() == y.base()); }
template&lt;class RanIt, class T, class Ref, class Ptr,
    class Dist&gt; inline
    bool operator&lt;(
        const reverse_iterator&lt;RanIt, T, Ref, Ptr, Dist&gt;&amp; x,
        const reverse_iterator&lt;RanIt, T, Ref, Ptr, Dist&gt;&amp; y)
    {return (y.base() &lt; x.base()); }
template&lt;class RanIt, class T, class Ref, class Ptr,
    class Dist&gt; inline
    Dist operator-(
        const reverse_iterator&lt;RanIt, T, Ref, Ptr, Dist&gt;&amp; x,
        const reverse_iterator&lt;RanIt, T, Ref, Ptr, Dist&gt;&amp; y)
    {return (y.base() - x.base()); }
template&lt;class RanIt, class T, class Ref, class Ptr,
    class Dist&gt; inline
    reverse_iterator&lt;RanIt, T, Ref, Ptr, Dist&gt; operator+(Dist n,
        const reverse_iterator&lt;RanIt, T, Ref, Ptr, Dist&gt;&amp; y)
    {return (reverse_iterator&lt;RanIt, T, Ref, Ptr, Dist&gt;(
        y.base() - n)); }
/* End of File */
</pre>
</body></html>
