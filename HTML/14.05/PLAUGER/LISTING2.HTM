



<HTML><HEAD>

<TITLE>May 1996/Standard C/C++/Listing 2</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4>
<A name="HEADING1">Listing 2: &lt;iterator&gt;, part 6</A></h4>


<pre>

        // TEMPLATE CLASS reverse_bidirectional_iterator
template&lt;class BidIt, class T, class Ref = T&amp;,
    class Ptr = T *, class Dist = ptrdiff_t&gt;
    class reverse_bidirectional_iterator
        : public bidirectional_iterator&lt;T, Dist&gt; {
public:
    typedef reverse_bidirectional_iterator&lt;BidIt,
        T, Ref, Ptr, Dist&gt; Mytype;
    reverse_bidirectional_iterator()
        {}
    explicit reverse_bidirectional_iterator(BidIt x)
        : current(x) {}
    BidIt base() const
        {return (current); }
    Ref operator*() const
        {BidIt tmp = current;
        return (*--tmp); }
    Ptr operator-&gt;() const
        {return (&amp;**this); }
    Mytype&amp; operator++()
        {--current;
        return (*this); }
    Mytype operator++(int)
        {Mytype tmp = *this;
        --current;
        return (tmp); }
    Mytype&amp; operator--()
        {++current;
        return (*this); }
    Mytype operator--(int)
        {Mytype tmp = *this;
        ++current;
        return (tmp); }
protected:
    BidIt current;
    };

        // reverse_bidirectional_iterator OPERATORS
template&lt;class BidIt, class T, class Ref, class Ptr,
    class Dist&gt; inline
    bool operator==(const reverse_bidirectional_iterator&lt;BidIt,
            T, Ref, Ptr, Dist&gt;&amp; x,
        const reverse_bidirectional_iterator&lt;BidIt,
            T, Ref, Ptr, Dist&gt;&amp; y)
    {return (x.base() == y.base()); }
/* End of File */
</pre>
</body></html>
