



<HTML><HEAD>

<TITLE>May 1996/Standard C/C++/Listing 3</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4>
<A name="HEADING1">Listing 3: &lt;iterator&gt;, part 7</A></h4>


<pre>

        // TEMPLATE CLASS back_insert_iterator
template&lt;class Cont&gt;
    class back_insert_iterator : public output_iterator {
public:
    explicit back_insert_iterator(Cont&amp; x)
        : container(x) {}
    back_insert_iterator&lt;Cont&gt;&amp; operator=(
        const Cont::value_type&amp; val)
        {container.push_back(val);
        return (*this); }
    back_insert_iterator&lt;Cont&gt;&amp; operator*()
        {return (*this); }
    back_insert_iterator&lt;Cont&gt;&amp; operator++()
        {return (*this); }
    back_insert_iterator&lt;Cont&gt; operator++(int)
        {return (*this); }
protected:
    Cont&amp; container;
    };

        // TEMPLATE FUNCTION back_inserter
template&lt;class Cont&gt; inline
    back_insert_iterator&lt;Cont&gt; back_inserter(Cont&amp; x)
    {return (back_insert_iterator&lt;Cont&gt;(x)); }

        // TEMPLATE CLASS front_insert_iterator
template&lt;class Cont&gt;
    class front_insert_iterator : public output_iterator {
public:
    explicit front_insert_iterator(Cont&amp; x)
        : container(x) {}
    front_insert_iterator&lt;Cont&gt;&amp; operator=(
        const Cont::value_type&amp; val)
        {container.push_front(val);
        return (*this); }
    front_insert_iterator&lt;Cont&gt;&amp; operator*()
        {return (*this); }
    front_insert_iterator&lt;Cont&gt;&amp; operator++()
        {return (*this); }
    front_insert_iterator&lt;Cont&gt; operator++(int)
        {return (*this); }
protected:
    Cont&amp; container;
    };

        // TEMPLATE FUNCTION front_inserter
template&lt;class Cont&gt; inline
    front_insert_iterator&lt;Cont&gt; front_inserter(Cont&amp; x)
    {return (front_insert_iterator&lt;Cont&gt;(x)); }

        // TEMPLATE CLASS insert_iterator
template&lt;class Cont&gt;
    class insert_iterator : public output_iterator {
public:
    insert_iterator(Cont&amp; x, Cont::iterator p)
        : container(x), iter(p) {}
    insert_iterator&lt;Cont&gt;&amp; operator=(
        const Cont::value_type&amp; val)
        {iter = container.insert(iter, val);
        ++iter;
        return (*this); }
    insert_iterator&lt;Cont&gt;&amp; operator*()
        {return (*this); }
    insert_iterator&lt;Cont&gt;&amp; operator++()
        {return (*this); }
    insert_iterator&lt;Cont&gt;&amp; operator++(int)
        {return (*this); }
protected:
    Cont&amp; container;
    Cont::iterator iter;
    };

        // TEMPLATE FUNCTION inserter
template&lt;class Cont, class Iter&gt; inline
    insert_iterator&lt;Cont&gt; inserter(Cont&amp; x, Iter p)
    {return (insert_iterator&lt;Cont&gt;(x, Cont::iterator(p))); }
/* End of File */
</pre>
</body></html>
