<HTML><HEAD>
<TITLE>August 1992/A Quadcode Class for Mapping/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1 (QC.H)</A></h4>
<pre>///////////////////////////////////////////////////////
// Header file for quadcodes
//  by Kenneth Van Camp
///////////////////////////////////////////////////////
typedef unsigned char BYTE;
typedef long          COORD;

// The following should be defined on computers that
// store their most-significant byte first in integers:
// #define MSB_FIRST

// Store (I,J) coordinates in long integers, so this is
// the only limitation on the accuracy of storage:
#define NBITS_COORD sizeof(COORD) * 8

// Define the following to use static-length QuadCodes.
// If not defined, dynamic allocation is used:
#define STAT_QC

#ifdef STAT_QC
# define NBYTE_QC   8    // # bytes to store a quadcode
# define MAXQUITS   (min (NBITS_COORD, 4*NBYTE_QC))
#else
# define MAXQUITS  NBITS_COORD
#endif

// class QuadCode: Store a single quadcode
// (2 bits per quit).
class QuadCode
{
  protected:
#ifdef STAT_QC
    BYTE qca[NBYTE_QC];    // storage area for quadcode
    void FreeMem (void)    // free dynamic memory
       { nquits=0; }
#else
    BYTE *qca;             // storage area for quadcode
    void FreeMem (void);   // free dynamic memory
#endif
    void Init              // initializer from string
       (const char *chqc);

  public:
    int nquits;            // # of quits in qc
    QuadCode (void)        // default constructor
       { nquits = 0; }
    QuadCode               // constructor from (I,J)
       (COORD i, COORD j, int nq);
    QuadCode               // constructor from string
       (const char *chqc)
       { Init (chqc); }
#ifndef STAT_QC
    ~QuadCode (void)       // destructor
       { FreeMem(); }
#endif
    int GetQuit            // extract single quit
       (int quit);
    void SetQuit           // set single quit
       (int quit, int val);
    void ToIJ              // convert to (I,J)
       (COORD &amp;i, COORD &amp;j, int &amp;nq);
    int Compare            // compare two quadcodes
       (QuadCode &amp;qc);
    int Sibling            // is qc a sibling?
       (const QuadCode *qc);
    int Contains           // does one qc contain other?
       (QuadCode &amp;qc);
    void MakeParent        // make qc into its parent
       (void);
    QuadCode &amp;operator= (QuadCode &amp;qc);
    int operator&lt; (QuadCode &amp;qc)
      { return (this-&gt;Compare (qc) &lt; 0); }
    int operator&gt; (QuadCode &amp;qc)
      { return (this-&gt;Compare (qc) &gt; 0); }
    int operator&lt;= (QuadCode &amp;qc)
      { return (this-&gt;Compare (qc) &lt;= 0); }
    int operator&gt;= (QuadCode &amp;qc)
      { return (this-&gt;Compare (qc) &gt;= 0); }
    int operator== (QuadCode &amp;qc)
      { return (this-&gt;Compare (qc) == 0); }
    int operator!= (QuadCode &amp;qc)
      { return (this-&gt;Compare (qc) != 0); }

    friend ostream &amp;operator&lt;&lt;
      (ostream &amp;stream, QuadCode &amp;qc);
    friend istream &amp;operator&gt;&gt;
      (istream &amp;stream, QuadCode &amp;qc);
}; // class QuadCode

// class QCNode: A node in a linked list of quadcodes.
class QCNode: public QuadCode
{
  private:
    QCNode *next;         // next node in linked list
    // Friend classes for access to 'next'.
    friend Region, RegionDisplay;
    // Same for its "put to" operator.
    friend ostream &amp;operator&lt;&lt;
      (ostream &amp;stream, Region &amp;reg);

  public:
    QCNode (void)         // default constructor
       { next = NULL; }
    QCNode                // constructor from (I,J)
       (COORD i, COORD j, int nq):
       QuadCode (i, j, nq)  // calls qc constr first
       { next = NULL; }
}; // class QCNode

// struct Point: One point on outline of region.
struct Point
{
  COORD i, j;
};

// struct PointListHeader: An array of points.
struct PointListHeader
{
  int length;             // # of points in array
  COORD ndiv;             // # (I,J) divisions in grid
  struct Point *pointptr; // array of points
};

// class Region: A linked list of QuadCodes
class Region
{
  protected:
    QCNode *first_qcnode; // start of linked list
    COORD ndiv;           // # (I,J) divisions in grid
    void ScanOutAET       // create qc's along one row
       (COORD i_to_scan, int &amp;nqc_compress, int nquits);
    void AddRow           // add row of qc's
       (COORD i, COORD j1, COORD j2, int nquits);
    void AddQC            // add a single qc
       (COORD i, COORD j, int nquits);
    int MaxQuits (void);  // find max #quits in a qc

  public:
    Region (void)         // default constructor
      { first_qcnode = NULL; ndiv = 0; }
    Region                // constructor from outline
       (PointListHeader &amp;vertext_list);
    ~Region (void);       // destructor
    int Compress (void);  // region compressor
    int InRegion          // is qc in region?
       (QuadCode &amp;qc);
    int NumQC (void);     // count quadcodes in region
    friend ostream &amp;operator&lt;&lt;
      (ostream &amp;stream, Region &amp;reg);
}; // class Region
/* End of File */
</pre>
</BODY>
</HTML>
