<HTML><HEAD>
<TITLE>August 1992/Smart Pointers in C++/Listing 6</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 6 (main2.cpp)</A></h4>
<pre>// main2.cpp
// A demonstration of a database buffer
// made simpler by smart pointers.

#define DEBUG

#include "anyclass.hpp"

class BufferedDatabase
 {
  public:
    BufferedDatabase (void) {};
    ~BufferedDatabase (void);
    
    void getRecPtr (
       int recNum,
       RefCntPtr(anyClass)&amp; ptr);
  
  private:
    enum {bfrSize=3};
    
    RefCntPtr(anyClass) bfr[bfrSize];
    
    // these functions would actually
    // read from the disk DB.
    // for now, we'll just pretend
    void getRecWithNew (
       int recNum,
       RefCntPtr(anyClass)&amp; ptr);
    
    void putRec (
       RefCntPtr(anyClass)&amp; ptr);
};

void BufferedDatabase::getRecPtr (
       int recNum,
       RefCntPtr(anyClass)&amp; ptr)
  {
    // first, see if it is in the buffer
    
    for (int i = 0; i &lt; bfrSize; ++i)
        if ( bfr[i]
           &amp;&amp; (bfr[i]-&gt;intVal == recNum)
           )
          {
            ptr = bfr[i];
            return;
          };
    
    // if we made it to here, then it
    // is not in the buffer, so get it
    // from disk;
    
    RefCntPtr(anyClass) tmp;
    getRecWithNew (recNum, tmp);
    
    // return if not found
    if (0 == tmp)
      {
       ptr = 0;
       return;
      };
    
    // see if it can be inserted
    // into buffer
    for (i = 0; i &lt; bfrSize; ++i)
       if (0 == bfr[i])
         {
          bfr[i] = tmp;
          ptr = tmp;
          return;
         };
         
    ptr = 0;
    
    // if it didn't return, then there
    // is no space - will have to find
    // some.
    for (i = 0; i &lt; bfrSize; ++i)
      
      // reference count of 1 means the
      // only pointer to this object
      // is bfr[i]. Since nothing
      // outside this routine is pointing
      // to it, we can get rid of it.
      
        if (bfr[i]-&gt;refCnt() == 1)
          {
           putRec (bfr[i]);
           bfr[i] = tmp;
           ptr = tmp;
           return;
          };
    
    // if still didn't return,
    // out of space
    
    cout &lt;&lt; "BUFFER FULL\n\n";
    // obviously, running out of space
    // is a bad thing - a real-world
    // scheme wouldn't use as array,
    // but some form of dynamic
    // allocation
  
  };

void BufferedDatabase::getRecWithNew (
       int recNum,
       RefCntPtr(anyClass)&amp; ptr)
  {
    // would get record from database
    // again, we'll just fake it
    
    // pretend that records 1000
    // and above don't exist
    
    if (recNum &gt;= 1000)
      {
       ptr = 0;
       return;
      };
    
    ptr = new anyClass;
    
    // pretend that it's
    // getting a record from disk
    ptr-&gt;intVal = recNum;
    ptr-&gt;string = "something";
    
    cout &lt;&lt; "getting from disk - rec # "
        &lt;&lt; ptr-&gt;intVal &lt;&lt; "\n\n";
  };

void BufferedDatabase::putRec (
       RefCntPtr(anyClass)&amp; ptr)
  {
    cout &lt;&lt; "putting to disk - rec # "
        &lt;&lt; ptr-&gt;intVal &lt;&lt; "\n\n";
  };

BufferedDatabase::~BufferedDatabase(void)
  {
   for (int i = 0; i &lt; bfrSize; ++i)
       if (bfr[i])
         {
          putRec (bfr[i]);
          bfr[i] = 0;
         };
  };

void main (void)
  {
   cout &lt;&lt; "start of main\n\n";
   BufferedDatabase db;
   
   RefCntPtr(anyClass) ptrA, ptrB,
                    ptrC, ptrD;
  
   db.getRecPtr (1, ptrA);
   ptrA-&gt;show();
   
   db.getRecPtr (2, ptrA);
   db.getRecPtr (3, ptrA);
   db.getRecPtr (4, ptrA);
   
   db.getRecPtr (2, ptrA);
   db.getRecPtr (3, ptrB);
   db.getRecPtr (4, ptrC);
   db.getRecPtr (5, ptrD);
   if (!ptrD)
     cout &lt;&lt; "getRecFailed\n\n";
   
   db.getRecPtr (1005, ptrD);
   ptrD-&gt;show();//an error
   
   cout &lt;&lt; "end of main\n\n";
  };
// End of File</pre>

</BODY>
</HTML>
