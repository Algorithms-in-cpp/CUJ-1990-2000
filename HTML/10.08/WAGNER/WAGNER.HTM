


<HTML>
<HEAD>

<TITLE>August 1992/Smart Pointers in C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocaug.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">Smart Pointers in C++<A name="018E_00C2"><A name="018E_00C2"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="018E_0000"><A name="018E_0000">Alan Wagner-Krankel</font></h3><hr><blockquote><P>
<P><i><A name="018E_0000"><A name="018E_0000">Alan Wagner-Krankel has his bachelors degree in computer science from the University of Texas, and currently works for a firm developing software in C++ for electrical engineering. He welcomes questions and comments at 1017 S. Bowie Drive, Abilene, Tx, 79605. Daytime phone is (915) 695-1642.</i></P><P>
Consider what happens when you set a pointer to some memory allocated from the heap or free store, but forget to free the memory before the pointer goes out of scope. The block becomes inaccessible, and the pointer just sits there, doing nothing, while your program runs out of memory.<P>
With C++, it is possible to program a pointer to recognize itself as the last reference to a block when going out of scope, and then to free the space. A C++ object called a <I>smart pointer</I> adds this and other capabilities to pointers by doing some work in addition to storing an address.<P>
This article describes a set of smart pointer classes that maintain a count of the number of pointers which reference an item. The <I>RefCntPtr</I> classes use the reference count to provide memory management that frees unused memory, and avoids more complex memory-maintenance problems. The <I>RefCntPtr</I> classes are also used to build a simple database buffer, where the pointers help maintain a shared pool of memory.<P>
<h4><FONT COLOR="#000080"><A name="018E_00C3">Functionality<A name="018E_00C3"></FONT></h4></P>
The <I>RefCntPtr</I> classes do three basic things: they act like pointers, maintain the reference count, and free unused memory.<P>
<h4><FONT COLOR="#000080"><A name="018E_00C4">Acting like Pointers<A name="018E_00C4"></FONT></h4></P>
The <I>RefCntPtr</I> classes act like pointers through operator overloading. The overloaded operators work on <I>RefCntPtrs</I> in a way similar to normal pointers.<P>
The most important of these operators is the class/structure member-access operator -&gt;. If <I>X</I> is a smart pointer to a class, and <I>Y</I> is a normal pointer, both <I>X-&gt;member</I> and <I>Y-&gt;member</I> should refer to the same thing. Fortunately, in C++ the -&gt; operator is specifically defined to do this. <I>X-&gt;member</I> is interpreted as <I>(X.operator-&gt;())-&gt;member.</I> By defining <I>operator-&gt;()</I> to return a normal pointer, we get the exact same result as <I>Y-&gt;member.</I><P>
Another necessary operator is the pointer dereference operator *. Again, if <I>X</I> is a smart pointer to a class, and <I>Y</I> is a normal pointer, *<I>X</I> and *<I>Y</I> should both refer to the class. To accomplish this, <I>operator *()</I> is defined to return a reference (<I>&amp;</I>) to the item pointed to by the <I>RefCntPtr.</I><P>
To allow testing the pointer in conditional statements, <I>operator int()</I> is defined to return <I>0</I> if the pointer is <I>0</I>, and <I>1</I> if it is not. Thus, tests such as <I>while(ptr)</I> and <I>if(!ptr)</I> can be used.<P>
There are other operators which can be defined for smart pointers in general, but which are not useful for <I>RefCntPtr.</I> The subscripting operator, <I>[]</I>, is one. For a smart pointer <I>X</I>, <I>X[0]</I> could be defined to be the same as *<I>X</I>, as it is with normal pointers. However, <I>X[1]</I> has no meaning for the <I>RefCntPtr</I>, so subscripting is not defined here. Similarly, the increment and decrement operators ++ and -- can be used with some smart pointers, but do not make sense here.<P>
<h4><FONT COLOR="#000080"><A name="018E_00C5">Maintaining Reference Count<A name="018E_00C5"></FONT></h4></P>
The <I>RefCntPtr</I> point to instances of classes derived from <I>RefCntItem</I> (see <A href="list1.htm">Listing 1</a>)
, and the counts are stored within the instances. <I>RefCntPtr</I> uses the <I>incRefCnt</I> and <I>decRefCnt</I> functions to change the counts.<P>
Other functions keep the reference counts updated by the operations that change what the pointers are referencing. Thus, some of the constructors increment the count of the item that the pointer is now referencing, and the destructor decrements the reference count. The assignment operators decrement the count of the old item, copy the address, and increment the count of the new item.<P>
The reference count can be stored somewhere other than within the item, if that is a problem. Gorlen et al. (1990, p. 361) describes the classes needed for such a scheme.<P>
<h4><FONT COLOR="#000080"><A name="018E_00C6">Freeing Unused Memory<A name="018E_00C6"></FONT></h4></P>
When the reference count of an instance reaches <I>0</I>, no <I>RefCntPtr</I> point at that item. The item, now unused, can be deleted, thus returning its memory to the free store.<P>
<h4><FONT COLOR="#000080"><A name="018E_00C7">The Code<A name="018E_00C7"></FONT></h4></P>
<A href="list2.htm">Listing 2</a>,
 <I>refptr.hpp,</I> contains macros for the declaration and definition of <I>RefCntPtr.</I> The macros help solve a problem with these pointers - a separate class must be defined for every type that needs a smart pointer. These smart pointer classes differ only in their own name and the name of the class upon which they act. Rather than copying an existing class and changing the names with an editor, these macros let the preprocessor change the names.<P>
These classes could be implemented with class templates, as described in Stroustrup and Ellis (1990). If you have access to a compiler that implements templates, you can replace these macros that only simulate templates with the real thing.<P>
To declare a <I>RefCntPtr</I> class for class <I>ABCD,</I> the macro call <I>RefCntPtrDECLARE(ABCD)</I> should be placed in a header file. The macro call <I>RefCntPtrDEFINE(ABCD)</I> should be put in a corresponding source file. These macros will expand to the class declaration and definition. The resulting class is described throughout the program as <I>RefCntPtr(ABCD)</I> (see <A href="list3.htm">Listing 3</a>,
 <A href="list4.htm">Listing 4</a>,
 and <A href="list5.htm">Listing 5</a>,
 <I>anyclass.hpp, anyclass.cpp,</I> and <I>main1.cpp).</I><P>
<A href="list5.htm">Listing 5</a>,
 <I>main1.cpp</I>, contains a small test program which shows how the <I>RefCntPtr</I> works. Note that <I>delete</I> is never called in <I>main.</I> Instead, <I>RefCntPtr</I> handles garbage collection.<P>
All of the code was tested with Borland C++ v2.0. There should not be anything compiler-specific in it.<P>
<h4><FONT COLOR="#000080"><A name="018E_00C8">A Simple Database Buffer<A name="018E_00C8"></FONT></h4></P>
<A href="list6.htm">Listing 6</a>,
 <I>main2.cpp,</I> keeps all records in memory in a pool. When the program makes a request for a record, it receives a <I>RefCntPtr</I> to that record. If the record is not currently in the pool, it is fetched from the disk. If there is not enough space in the pool, a candidate for removal is found by checking the reference counts, and removing a record which does not have any outstanding pointers.<P>
The use of <I>RefCntPtr</I> has simplified communication between the function <I>getRecWithNew</I> and the rest of the world. The function can allocate space with <I>new,</I> and then let the smart pointer take care of deleting it. The function no longer depends on an error-prone outsider deleting things.<P>
The fact that a program must use <I>RefCntPtr</I> exclusively presents a potential problem. If you use normal pointers also, the reference counts will not be correct.<P>
<h4><FONT COLOR="#000080"><A name="018E_00C9">Extending the Buffer<A name="018E_00C9"></FONT></h4></P>
The simple buffering scheme can be extended to provide more involved memory-management capabilities. In this version, records are swapped in and out of memory only when a request for a record is made. Consider what becomes possible if the smart pointer could swap the records. Then, when data is accessed through the -&gt; and * operators, the smart pointer could check to see if the record is in memory and read it in, if necessary.<P>
One way to implement this would be to have an extra layer of indirection, with pointers similar to <I>RefCntPtr</I>. These pointers would reference a class which maintains a pointer to the actual record and information on how to retrieve that record, if necessary. The external user would not see this internal class.<P>
The result would be something very close to virtual memory, with records paged in on demand. Like any good memory-management scheme, it would be almost transparent to the user outside of the buffer handler.<P>
<h4><FONT COLOR="#000080"><A name="018E_00CA">Other Smart Pointer Possibilities<A name="018E_00CA"></FONT></h4></P>
Smart pointers are not limited to buffering schemes and garbage collection. They could also manage:<P>
<UL><li>Usage counts &#151; Every time an item is accessed, the pointer could increment a usage count for that item. The resulting data could be used to eliminate items that are never used, and for other tuning.</li>
<li>Pointer comparisons &#151; In segmented addressing, such as on Intel/MS-DOS machines, pointer comparisons do not always work as expected. The comparison operators could be overloaded to normalize the pointers before comparing them.</li>
<li>Debugging &#151; The <I>RefCntPtr</I> already prints a message if a zero pointer is used. This simple debugging could be extended to include range checking, and printing out addresses and other information whenever an item is accessed.</li>
<li>Arrays &#151; The subscripting, increment, and decrement operators could be used to help build self-describing arrays with bounds checking.</li>
<li>Other reference count problems &#151; Such as list representations.</li></UL>
Smart pointers are yet another example of the encapsulation that C++ allows and encourages. They can be an extremely useful addition to a programmer's bag of tricks.<P>
<h4>References</FONT></h4></P>
Gorlen, Keith, Sanford Orlow, and Perry Plexico. 1990. <I>Data Abstraction and Object-Oriented Programming in</I> C++. John Wiley &amp; Sons, New York, NY.<P>
Stroustrup, Bjarne and Margaret Ellis. 1990. <I>The Annotated C++ Reference Manual</I>, Addison-Wesley. Reading, MA.<P>

<h4><a href="../../../source/1992/aug92/krankel.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
