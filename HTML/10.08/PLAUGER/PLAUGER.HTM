


<HTML>
<HEAD>

<TITLE>August 1992/Standard C</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocaug.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Standard C<A name="0195_00C6"><A name="0195_00C6"></font></h2><P>
<h3 align="center"><A name="0195_0000"><A name="0195_0000">C and the Environment</h3><P>
<h3 align="center"><font color="#800000">P.J. Plauger</font></h3><hr><blockquote><P>
<P><i><A name="0195_0000"><A name="0195_0000">P.J. Plauger is senior editor of The C Users Journal. He is secretary of the ANSI C standards committee, X3J11, and convenor of the ISO C standards committee, WG14. His latest book is The Standard C Library, published by Prentice-Hall. You can reach him at cujed@rpub.com.</i></P><P>
<h4><FONT COLOR="#000080"><A name="0195_00C7">Introduction<A name="0195_00C7"></FONT></h4></P>
The messiest part of any programming language is where it meets the outside world. Standard C leaves essentially all such issues to the Standard C library:<P>
<UL><li>The header <I>&lt;stdio.h&gt;</I> declares all functions that perform input and output to files and devices.</li>
<li>The header <I>&lt;time.h&gt;</I> declares the functions that obtain elapsed or calendar time.</li>
<li>The header <I>&lt;stdlib.h&gt;</I> declares essentially all other functions that interface with the containing environment.</li></UL>
This episode discusses the last category. The header <I>&lt;stdlib.h&gt;</I> contains an odd assortment of functions. Those that communicate with the environment are probably the oddest of the lot. They tend to be very system dependent in the bargain. That makes it a challenge to present much portable code to illustrate how they work.<P>
<h4><FONT COLOR="#000080"><A name="0195_00C8">What the C Standard Says<A name="0195_00C8"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0195_00C9">7.10.4 Communication with the environment<A name="0195_00C9"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0195_00CA">7.10.4.1 The <B><I>abort</I></B> function<A name="0195_00CA"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0195_00CB">Synopsis<A name="0195_00CB"></FONT></h4></P>
<pre>#include &lt;stdlib.h&gt;
void abort(void);</pre>
<h4><FONT COLOR="#000080"><A name="0195_00CC">Description<A name="0195_00CC"></FONT></h4></P>
The <I>abort</I> function causes abnormal program termination to occur, unless the signal <I>SIGABRT</I> is being caught and the signal handler does not return. Whether open output streams are flushed or open streams closed or temporary files removed is implementation-defined. An implementation-defined form of the status <I>unsuccessful termination</I> is returned to the host environment by means of the function call <I>raise</I>.<P>
<h4><FONT COLOR="#000080"><A name="0195_00CD">Returns<A name="0195_00CD"></FONT></h4></P>
The <I>abort</I> function cannot return to its caller.<P>
<h4><FONT COLOR="#000080"><A name="0195_00CE">7.10.4.2 The <B><I>atexit</I></B> function<A name="0195_00CE"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0195_00CF">Synopsis<A name="0195_00CF"></FONT></h4></P>
<pre>#include &lt;stdlib.h&gt;
int atexit(void (*func)(void));</pre>
<h4><FONT COLOR="#000080"><A name="0195_00D0">Description<A name="0195_00D0"></FONT></h4></P>
The <I>atexit</I> function registers the function pointed to by <I>func</I>, to be called without arguments at normal program termination.<P>
<h4><FONT COLOR="#000080"><A name="0195_00D1">Implementation limits<A name="0195_00D1"></FONT></h4></P>
The implementation shall support the registration of at least 32 functions.<P>
<h4><FONT COLOR="#000080"><A name="0195_00D2">Returns<A name="0195_00D2"></FONT></h4></P>
The <I>atexit</I> function returns zero if the registration succeeds, nonzero if it fails.<P>
<B>Forward references:</B> the <I>exit</I> function (7.10.4.3).<P>
<h4><FONT COLOR="#000080"><A name="0195_00D3">7.10.4.3 The <B><I>exit</I></B> function<A name="0195_00D3"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0195_00D4">Synopsis<A name="0195_00D4"></FONT></h4></P>
<pre>#include &lt;stdlib.h&gt;
void exit(int status);</pre>
<h4><FONT COLOR="#000080"><A name="0195_00D5">Description<A name="0195_00D5"></FONT></h4></P>
The <I>exit</I> function causes normal program termination to occur. If more than one call to the <I>exit</I> function is executed by a program, the behavior is undefined.<P>
First, all functions registered by the <I>atexit</I> function are called, in the reverse order of their registration.128<P>
Next, all open streams with unwritten buffered data are flushed, all open streams are closed, and all files created by the <I>tmpfile</I> function are removed.<P>
Finally, control is returned to the host environment. If the value of <I>status</I> is zero or <I>EXIT_SUCCESS</I>, an implementation defined form of the status <I>successful termination</I> is returned. If the value of <I>status</I> is <I>EXIT_FAILURE</I>, an implementation-defined form of the status <I>unsuccessful termination</I> is returned. Otherwise the status returned is implementation-defined.<P>
<h4><FONT COLOR="#000080"><A name="0195_00D6">Returns<A name="0195_00D6"></FONT></h4></P>
The <I>exit</I> function cannot return to its caller.<P>
<h4><FONT COLOR="#000080"><A name="0195_00D7">7.10.4.4 The <B><I>getenv</I></B> function<A name="0195_00D7"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0195_00D8">Synopsis<A name="0195_00D8"></FONT></h4></P>
<pre>#include &lt;stdlib.h&gt;
char *getenv(const char *name);</pre>
<h4><FONT COLOR="#000080"><A name="0195_00D9">Description<A name="0195_00D9"></FONT></h4></P>
The <I>getenv</I> function searches an <I>environment list</I>, provided by the host environment, for a string that matches the string pointed to by <I>name</I>. The set of environment names and the method for altering the environment list are implementation-defined.<P>
The implementation shall behave as if no library function calls the <I>getenv</I> function.<P>
<h4><FONT COLOR="#000080"><A name="0195_00DA">Returns<A name="0195_00DA"></FONT></h4></P>
The <I>getenv</I> function returns a pointer to a string associated with the matched list member. The string pointed to shall not be modified by the program, but may be overwritten by a subsequent call to the <I>getenv</I> function. If the specified <I>name</I> cannot be found, a null pointer is returned.<P>
<h4><FONT COLOR="#000080"><A name="0195_00DB">7.10.4.5 The <B><I>system</I></B> function<A name="0195_00DB"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0195_00DC">Synopsis<A name="0195_00DC"></FONT></h4></P>
<pre>#include &lt;stdlib.h&gt;
int system(const char *string);</pre>
<h4><FONT COLOR="#000080"><A name="0195_00DD">Description<A name="0195_00DD"></FONT></h4></P>
The <I>system</I> function passes the string pointed to by <I>string</I> to the host environment to be executed by a <I>command processor</I> in an implementation-defined manner. A null pointer may be used for <I>string</I> to inquire whether a command processor exists.<P>
<h4><FONT COLOR="#000080"><A name="0195_00DE">Returns<A name="0195_00DE"></FONT></h4></P>
If the argument is a null pointer, the <I>system</I> function returns nonzero only if a command processor is available. If the argument is not a null pointer, the <I>system</I> function returns an implementation-defined value.<P>
Footnote<P>
128. Each function is called as many times as it was registered.<P>
<h4><FONT COLOR="#000080"><A name="0195_00DF">Using the Functions<A name="0195_00DF"></FONT></h4></P>
The header <I>&lt;stdlib.h&gt;</I> defines two macros for determining program termination status:<P>
<I>EXIT_FAILURE</I> &#151; Use this macro as the argument to <I>exit</I> or the return value from <I>main</I> to report unsuccessful program termination. Any other non-zero value you use instead may have different meanings for different operating systems.<P>
<I>EXIT_SUCCESS</I> &#151; Use this macro as the argument to <I>exit</I> or the return value from <I>main</I> to report successful program termination. You can also use zero. Any other value you use may have different meanings for different operating systems.<P>
The header <I>&lt;stdlib.h&gt;</I> also declares several functions that communicate with the environment:<P>
<I>atexit</I> &#151; Use this function to register another function to be called when the program is about to terminate. You may, for example, create a set of temporary files that you wish to remove before the program terminates. Write the function <I>void tidy(void)</I> to remove the files. Call <I>atexit(&amp;tidy)</I> once you store the name of the first file to remove. When <I>main</I> returns or a function calls <I>exit</I>, the library calls all functions registered with <I>atexit</I> in reverse order of registry. The library flushes streams, closes files, and removes temporary files only after it calls all registered functions. You can register up to 32 functions with <I>atexit</I>.<P>
<I>exit</I> &#151; Call <I>exit</I> to terminate execution from anywhere within a program. Within function <I>main</I> you can either call <I>exit</I> or write a <I>return</I> statement. The argument to <I>exit</I> (or the return value for <I>main</I>) should be zero or <I>EXIT_SUCCESS</I>, described above, to report successful termination. Otherwise it should be <I>EXIT_FAILURE</I>, also described above.<P>
If you plan to migrate to C++ in the future, you should probably avoid calling <I>exit</I>. Calling this function initiates program termination without calling the destructors for objects with dynamic storage duration. (These include arguments to function calls and declarations with storage class <I>auto</I>, either explicit or implicit.) That can subvert some of the tidiness, and type safety, engineered into certain classes. Get in the habit of returning from <I>main</I> instead. (The new exception machinery makes it easier for you to get back to <I>main</I> in a hurry, <I>without</I> bypassing the destructors.)<P>
<I>getenv</I> &#151; Use this function to obtain a pointer to the value string associated with an <I>environment variable</I>. (Most systems now support some form of environment variables that you can set and inspect with the command processor.) If you name an environment variable that has no definition, you get a null pointer as the value of the function. Don't alter the value string. A subsequent call to <I>getenv</I> can alter the string, however. To allocate a private copy, write something like:<P>
<pre>#include &lt;stdlib.h&gt;

char *copyenv(const char *name)
   {  /*  get and copy environment variable */
   char *s1 = getenv(name);
   char *s2 = s1 ? malloc(strlen(s1) + 1) : NULL;
   
   return (s2 ? strcpy(s2, s1) : NULL);
   }</pre>
<I>system</I> &#151; An implementation is not obliged to have <I>system</I> do anything useful. If the call <I>system(NULL)</I> returns a nonzero value, you know that the function invokes some sort of command processor. But the C Standard imposes no requirements on what such a creature does. The only portable use for <I>system</I> is to provide uncritical access to a command processor. An editor, for example, may accept a line that begins with an exclamation point. It passes the remainder of the line as the string argument to <I>system</I>. How the local command processor interprets the line is of no concern to the Standard C library proper.<P>
<h4><FONT COLOR="#000080"><A name="0195_00E0">Implementing the Functions<A name="0195_00E0"></FONT></h4></P>
As I explained above, the C Standard permits each system to specify two preferred argument values for <I>exit</I> (or return values from <I>main</I>). The macro <I>EXIT_FAILURE</I> reports unsuccessful termination. The macro <I>EXIT_SUCCESS</I> reports successful termination. For historical reasons, the value zero also reports successful termination. Thus, I chose to tailor only the code for unsuccessful termination. The macro <I>_EXFAIL</I> typically has the value 1. This macro is defined in the internal header (for this implementation) <I>"yvals.h"</I>.<P>
Three functions deal with program termination &#151; <I>abort</I> (<A href="list1.htm">Listing 1</a>)
, <I>atexit</I> (<A href="list2.htm">Listing 2</a>)
, and <I>exit</I> (<A href="list3.htm">Listing 3</a>)
. <I>abort</I> simply reports the signal <I>SIGABRT</I>. Should the handler for that signal return, the function exits with unsuccessful status. <I>atexit</I> is almost as simple. It just pushes a function pointer on the stack defined by the data objects <I>_Atcount</I> and <I>_Atfuns</I>. A call to <I>exit</I> pops this stack and calls the corresponding functions.<P>
<I>exit</I> also closes any open files before it terminates program execution. How a program terminates is system dependent. You can usually call some function to do so, however. As with several other interface primitives, I stuff that problem into the internal header <I>"yfuns.h"</I>. It either declares a function or defines a macro called <I>_Exit</I> that accepts the exit status and terminates execution. In a UNIX system, for example, <I>_Exit</I> can be just an alternate name for the <I>exit</I> system service.<P>
<A href="list4.htm">Listing 4</a>
shows the file <I>getenv.c</I>. It must know how to access the environment list that defines all the environment variables. It must also know how to walk that list to scan for an environment variable with the requested name. The version I show here works under UNIX. It also works under a variety of other operating systems. (The MS-DOS version depends on the memory model you choose, or you must use an occasional far pointer.)<P>
<I>getenv</I> assumes that <I>_Envp</I> points to the first of a sequence of null-terminated strings. An empty string terminates the sequence. Each string in the sequence has the form <I>name=value</I>. If the argument string matches all characters before the equal sign, the function returns a pointer to the first character past the equal sign. Once again, I leave it to the internal header <I>"yfuns.h"</I> to define or declare <I>_Envp</I>.<P>
Some operating systems support an environment list, but not of this form. Others support an environment list that is not directly addressable as a C data object. Either case may require that you copy the value string to a static buffer that is private to <I>getenv</I>. You must then introduce a function such as <I>_Getenv</I> that lets you supply your own static buffer to hold the value string. I chose to omit that layer of protection against future changes.<P>
<A href="list5.htm">Listing 5</a>
shows the file <I>system.c</I>. It shows how a UNIX version of the function <I>system</I> might invoke a command processor from a C program. As usual, the function assumes the existence of several UNIX system services with suitable reserved names. And as usual, the version I show here can be improved. Wiring in the pathname <I>"/bin/sh"</I> as the name of the command processor is at best naive, at worst bad manners. Several more sophisticated schemes are in common use for specifying an assortment of command processors. The function can also return more useful status information to programs that care.<P>
<I>This article is excerpted from P.J. Plauger</I>, The Standard C Library, <I>(Englewood Cliffs, N.J.: Prentice-Hall, 1992)</I>.<P>

<h4><a href="../../../source/1992/aug92/plauger.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
