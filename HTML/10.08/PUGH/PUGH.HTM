


<HTML>
<HEAD>

<TITLE>August 1992/Questions and Answers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocaug.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Questions and Answers<A name="019F_00D0"><A name="019F_00D0"></font></h2><P>
<h3 align="center"><A name="019F_0000"><A name="019F_0000">Speeding Up Access Time When Using Linked Lists</h3><P>
<h3 align="center"><font color="#800000">Ken Pugh</font></h3><hr><blockquote><P>
<P><i><A name="019F_0000"><A name="019F_0000">Kenneth Pugh, a principal in Pugh-Killen Associates, teaches C language courses for corporations. He is the author of C Language for Programmers and All On C, and was a member on the ANSI C committee. He also does custom C programming for communications, graphics, image databases, and hypertext. His address is 4201 University Dr., Suite 102, Durham, NC 27707. You may fax questions for Ken to (919) 489-5239. Ken also receives email at kpugh@dukemvs.ac.duke.edu(Internet).</i></P><P>
For those on the West Coast, I'll be speaking at C plus C++ in Action September 21-25 at the Santa Clara Marriott. P.J. Plauger will be giving one of the keynote speeches.<P>
<B>Q</B><P>
I use a linked list to hold a list of selections that the user will choose from. There is a noticeable delay when paging up and down through the list. How can this be improved?<P>
Miles Brenton<br>
New York, NY<P>
<B>A</B><P>
Your speed problem probably has nothing to do with the linked list itself, but with what else you are doing in your program. An example of the speed difference can be seen on Macintoshes. The Mac uses a linked list for strings that are choices in list boxes and for lists of files that are displayed as folders. As a test, make up two folders, one with fifty files of the same type and one with two hundred files of the same type. You can use the <I>Save As</I> command from one of your application programs to do this.<P>
Open up the folders in the Finder. Choose a view that lists the icons by name, such as <I>View by Name</I>. When you scroll up and down a page at a time in each folder on a common processor, such as the MacPlus, you will notice a distinct difference in time in the response. The scroll box in the smaller folder will be able to keep up with your clicks. The scroll box in the larger folder will have some time lag.<P>
Start the application and select <I>Open</I> and then each test folder in turn. When you scroll up and down by a page, you will hardly notice any difference between the two folders.<P>
The list operations in the Finder may be making additional system calls for every file on the list as it pages up and down the list. Or it may simply output every name and let the system do the clipping or names that are outside the list window. Otherwise one would expect that that there would be no time difference between the large and small folder. Perhaps a reader who is a Mac expert might be able to explain what is going on.<P>
When you have these folders open in the Finder, especially the larger one, you may notice the wait cursor (the clock) up for a long time. On my MacPlus, a folder with fifty files takes about a second to display. A folder with one hundred can take up to fifteen seconds. A folder with two hundred can take up to a minute or so. (If you don't notice this time difference, try viewing the the folders with a different option such as <I>By Kind</I>) The discrepancy in times can be attributed to a number of factors.<P>
First, one would expect a linear increase in time, simply due to the number of files. Second, the file information may be more scattered across the disk for large folders. This increase may not necessarily be linear. Third, there appears to be a large sort time that is proportional to the square of the number of files. This third factor brings us a comparison of linked lists versus arrays of pointers for storing and accessing list items.<P>
Let's start with a review of linked lists versus arrays. Linked lists have two advantages over arrays for storing data. First, the size does not have to be fixed in advance. Second, it is easy to insert and delete an item by simply manipulating a couple of pointers.<P>
There is one main disadvantage. It takes time to access a particular element. <A href="list1.htm">Listing 1</a>
provides a concrete example. To keep it simple, I used a singly-linked list.<P>
To get to the third node in the list, you need to go around a loop twice and do one assignment and one indirection per loop. If the list were long (say 100 elements) and you needed to get to an element in the middle (say the fiftieth one), you would go around the loop 49 times.<P>
The nodes were declared and initialized in reverse order, since each one needs the address of the next one. The <I>structs</I> were declared as <I>static</I> as older compilers do not support initialization of automatic aggregates (arrays, <I>structs</I>, and unions).<P>
Let's contrast this with the array approach. This version will use an array of pointers.<P>
<pre>#include &lt;stdio.h&gt;
#define SIZE_STRINGS 4
void main()
    {
    static char *strings[SIZE_STRINGS] = {
        "First",
        "Second",
        "Third",
        "Fourth"
        };
    printf("Third string value is %s", strings [2] );
    }</pre>
Accessing the third string is simply a matter of using a subscript. Regardless of the number of strings, the time to access a particular element is constant.<P>
You can easily extend the list or insert a new node into the list. For example:<P>
<pre>static struct s_node new_node = { NULL, "Fifth"};
fourth_node.next_node = &amp;new_node;</pre>
Arrays cannot be extended. Their size is fixed at compile time. However you could use a pointer whose memory is <I>malloc</I>'ed and which would be <I>realloc</I>'ed if extension was necessary. That gets into a couple of matters that would complicate the current comparison.<P>
Although it took longer with the linked list to get to the third node, you can delete it quickly. You simply rearrange the pointers:<P>
<pre>second_node.next_node = &amp;fourth_node;</pre>
Now <I>third_node</I> is no longer in the list. To delete an element from the array, you need to move the elements down.<P>
<pre>for (counter = 2; counter &lt; SIZE_STRINGS - 1;
counter++)
    {,
    strings[counter] = strings[counter + 1];
    }
string[SIZE_STRINGS - 1] = NULL;</pre>
It will take a little bit of time to do the move. You could decrease the time at the expense of clarity by using the <I>memmove</I> function instead of the loop:<P>
<pre>memmove(&amp;strings [counter], &amp;strings [counter + 1],
    sizeof(char *) * ( (SIZE_STRINGS - 1) - 2) )
);</pre>
The time difference between the two approaches for accessing a particular value can be significant - a factor of three to ten, depending on the compiler. This difference for accessing the elements may not be noticeable for a fast processor, but for slow processors with long lists, it may be a factor.<P>
The preceding is not the only factor in a slow down. With linked lists, you typically allocate the memory for each value on the list, rather than retrieve it from some fixed area in memory. For example, you probably have some statements in your code as:<P>
<pre>new = malloc(sizeof(struct s_node);
new-&gt;string_value = malloc(strlen(string) + 1);
strcpy(new_string_value, string_to_be_added_to_list);</pre>
With arrays, one typically creates a large array for storage of the strings (or allocates an entire block of memory at a time):<P>
<pre>static char strings_array[SIZE_STRINGS] [MAX_STRING];
strings[i] = strings_array[i];
strncpy(strings[i], string_to_be_added_to_list,
          MAX_STRING);</pre>
The <I>malloc</I>s will take some initialization time for the list, but will not affect the paging up and down time. However, if you are working in a multi-tasking environment, you are probably using handles (pointers to pointers), rather than simple pointers. Each handle should be locked before it is used and unlocked afterwards. The additional system calls required to do this for each element on the list may add considerable time to paging your way through the list. With the array version, you might simply lock the entire block at the beginning of the list selection routine and unlock it at the end.<P>
You could speed up the linked list version by allocating a large block of memory once and doing your linked list allocations from it. That way you would only need to lock and unlock a single handle.<P>
The difference in sort times of a linked list versus an array can be a significant factor in initially displaying a list. To sort the array version, you can simply call <I>qsort</I> with the array of pointers. I'm not familar with techniques for sorting a linked list, but no speedy way pops to mind. Perhaps one of our readers might have a fast linked-list sort routine. (KP)<P>
<B>Q</B><P>
I want to be able to read in arguments from the command line and use them to control my program. How do I do this? Also why is <I>main</I> sometimes declared as returning <I>void</I> and sometimes as returning <I>int</I>? Also, how can I pass values between programs that I call using <I>system</I>?<P>
<B>A</B><P>
The <I>main</I> function actually receives two arguments, which are not always listed. These two arguments are a count of command-line tokens and an array of pointers to these tokens. When a C program is executed, the first instruction to be executed is not the first line of <I>main</I>. It is the first instruction in a startup routine.<P>
This startup routine, usually written in assembly language, accesses a buffer in which the operating system has copied the command line that you typed to execute the program. It parses the line into tokens that are strings of characters separated by white space (spaces or tabs). The count of tokens and pointers to each null-terminated token are passed to <I>main</I>. The first token is the name by which the program is executed. If that is not available, it is set to <I>""</I>.<P>
By convention, <I>main's</I> parameters are declared as <I>argc</I> and <I>argv</I>. You are at liberty to name them whatever you want, but I have never seen them called anything else. Also, you can interpret the tokens however you like. Operating system convention suggests that you use a hyphen (-) or a forward slash (/) as a prefix to any options other than filenames.<P>
<A href="list2.htm">Listing 2</a>
illustrates how this might work. It simply checks for a single option after each dash or slash prefix. Some conventions suggest that multiple single-letter options be permitted after a prefix. Some also differentiate between lower and upper case options.<P>
This program expects one filename plus the following options:<P>
<pre><I>-d or/d</I>    turn on debug
<I>-t or/t</I>    turn on tracing
<I>-nX or/nX</I>  do something X times</pre>
The second part of your question is an interesting one. <I>main</I> is like every other function. If the execution of the function reaches the closing brace, the function implicitly returns to the calling function with a garbage return value. If you have a return statement with a value after it, it will return with that value. The calling function is the startup function. The value that <I>main</I> returns to it is passed back to the operating system as the condition code (or error level or program-termination code). It is that value that can be tested in a <I>.bat</I> file, shell script, or executable.<P>
If you call <I>exit</I>, the value that you pass it is treated as the return value from <I>main</I>. You could specify and code <I>main</I> in a number of ways. If you had a valid return value, you could use:<P>
<pre>int main()
   {
   ...
   return 1;
   }</pre>
or<P>
<pre>int main()
   {
   ...
   exit(1);
   }</pre>
Some compilers will complain with warnings that you failed to return a value in a function whose header designates it as returning an <I>int</I>. The ANSI standard states that the prototype for <I>main</I> can be either <I>int main</I>; or <I>int main(int argc, char *argv[])</I>.<P>
To avoid the warning, many programmers code <I>main</I> as returning <I>void</I>. This is not ANSI standard, but appears to be commonplace. To eliminate the warning, you might code:<P>
<pre>int main()
   {
   ...
   exit(1);
   return 1;
   }</pre>
The return would never be reached. This is inelegant, but the only way I know to avoid the warning and leave <I>main</I> as returning an <I>int</I>.<P>
As for the third part of your question, there is an easy way to pass values between programs. Suppose you have a program such as <I>a_prog</I> which outputs values to <I>stdout</I>. You want to use the output in another program. You could redirect the output to a file and then open this file. For example:<P>
<pre>FILE *input;

system("a_prog &gt; temp_out");
input = fopen ("temp_out", "r");</pre>
Of course you could reverse the process and send data to a program that processed input from <I>stdin</I>.<P>
<pre>FILE *output;

output = fopen("temp_in","w);
    /* Do writes here */
fclose(output);
system("b_prog &lt; temp_in");</pre>
If you were on UNIX, you could use <I>popen</I>, but that is not as portable as this method. You could use the command-line pipe (|) on UNIX and MS-DOS (e.g. <I>a_prog</I> | <I>b_prog</I>) if the design of your programs permitted it. With this pipe example, <I>a_prog</I> is only executed once and its output is available to <I>b_prog</I>. If <I>b_prog</I> needed to execute <I>a_prog</I> several times within itself, then the pipe would not be an alternative.<P>
If you only had a few values, then you could place them on the command line (assuming the other program is written to accept them in this manner).<P>
<pre>char command_line[100];
int one, two, three;
sprintf("c_prog %d %d %d", one, two, three);
system (command_line);</pre>
The <I>c_prog</I> program would need access to those parameters.<P>
A third way of passing values is much less portable, but will work if programs are executed in the same address space. You could pass the addresses of variables - in particular of structures. For example, in the calling program, you might have:<P>
<pre>struct s_some_structure
   {
   /* Lots of members to pass */
   };
struct s_some_structure structure_to_pass;
char command_line [100]

sprintf("d_prog %p",&amp;structure_to_pass);
system(command_line);</pre>
The called program would look something like:<P>
<pre>main(int argc, char *argv[])
    {
    struct s_some_structure *pstructure_to_receive;
    sscanf(argv [1],"%p",&amp;pstructure_to_receive);
    ...
    }</pre>
Okay, it's not pretty, but it is a lot faster than writing to a file. And I repeat &#151; it works only if all programs run in the same address space. One such case is MS-DOS using far pointers operating in real mode in the same DOS session. It does have the one advantage of saving space if you are using large structures. You do not need a copy of the structure data in both environments.<P>
If you come across a different environment on which this does not work, you can always write the structure to a binary file in the calling program and read it in the called program. This assumes that both programs are running on the same type of processor or ones which represent numbers and characters in the same manner.<P>
<B>Q</B><P>
Why does this code set the array properly with one compiler, but not with another? I want to set each element of the array to the value of its subscript.<P>
<pre>main()
   {
   int array[10];
   int i;
   for (i = 0; i &lt; 10;)
       {
       array[i] = i++;
       }
   }</pre>
<B>A</B><P>
This is due to the old undefined order of evaluation problem plus the post-increment evaluation time. The standard states that for the post-increment and post-decrement operators, the variable will be changed anytime after it is used in the expression and by the time the next sequence point is reached. There is a large list of sequence points, but the most common is the statement terminator.<P>
Either the element reference on the left hand side is evaluated first or the value on the right hand side may be evaluated first. If it is the former, then you will get the value of <I>i</I> into <I>array[i]</I>. If it is the latter and if the increment operation is delayed until the end of the statement, you will get the same result. If it is the latter and the increment operation takes place immediately after the evaluation of <I>i</I>, then you will get the value of <I>i</I> into <I>array[i+1]</I>.<P>
The ANSI standard permits the increment to take place anytime from the access time of the variable to the sequence point. This leads to a wide variety of potential orders of operations. For example, the increment could take place after the right-hand side is evaluated and after the value of <I>i</I> is retrieved for the array subscript calculation, but before the assignment operation is completed.<P>
I always recommend using the increment and decrement operators as stand-alone operators. There is little, if any, additional execution time. If you are using it on a register variable and the compiler actually puts it into a register, then there is no extra execution time. The above loop would be written as:<P>
<pre>    for (i = 0; i &lt; 10;)
        {
        array[i] : i;
        i++;
        }</pre>
If you wanted to try to save time, then you might use:<P>
<pre>for {i = -1; i++ &lt; 10;)
    {
    array[i] = i;
    }</pre>
but it would be ugly.<P>
<B>Q</B><P>
Kicking around on USENET is a question on how to handle an array of strings that are needed by the program in many places. The problem was posed starting with:<P>
<pre>#define STRING0 "Zero"
#define STRING1 "First"
#define STRING2 "Second"
    ...
#define STRING100 "One hundredth"</pre>
What is the best way to handle this situation?<P>
<B>A</B><P>
Using <I>#define</I>s will cause the contents of the string to be repeated at least once in every object file in which it is used. With a single file, the compiler may merge all repetitions of use to a single storage area, but that is not guaranteed. For example, if File One contains<P>
<pre>printf(STRING1);
printf(STRING1);</pre>
and File Two contains<P>
<pre>printf(STRING1);</pre>
<I>"First"</I> will be stored in memory at least twice and probably three times in the linked program.<P>
An initial way to overcome this is to use a global array of pointers to strings. This is the solution that was proposed on USENET.<P>
<pre>char *string[] = {"Zero","First", "Second", ...
"One hundredth"};</pre>
File One<P>
<pre>printf(string[1]);
printf(string[1]);</pre>
File Two<P>
<pre>printf(string[1]);</pre>
In order to avoid the problem of having a large global array, and to ease portability problems, one could use a function to access these strings. This would look like<P>
<pre>char *get_string(int index)
    {
    static char *string[] = {"Zero","First",
"Second",
        ... "One hundredth"};
    return string[index];
    }</pre>
File One<P>
<pre>printf(get_string(1);
printf(get_string(1));</pre>
File Two<P>
<pre>printf(get_string(1));</pre>
Now all strings that may need to be changed in a program are gathered in one function. To make this even more portable and dynamically changeable, it could be written as shown in <A href="list3.htm">Listing 3</a>.
<P>
This reads in the strings from a file called <I>string.fil</I>. They are new-line terminated strings. You can easily change the value of any of the strings with a text editor without recompiling the program. The strings will sit in memory from the heap, rather than static memory.<P>
You could make up <I>#defines</I> as<P>
<pre>#define INITITAL_STRING 1
#define BUTTON_LABEL 2</pre>
and in your code use<P>
<pre>printf(get_string[INITIAL_STRING]);
printf(get_string[BUTTON_LABEL]);</pre>
Each line of the file could contain a label as well as a string value, such as:<P>
1 Initial string<br>
2 Button string<P>
This way it would be possible to reorder the strings in the file in a logical manner. Now the system starts to look a lot like a Windows resource source file.<P>

<h4><a href="../../../source/1992/aug92/pugh.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
