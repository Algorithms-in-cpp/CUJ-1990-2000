


<HTML>
<HEAD>

<TITLE>August 1992/Ray Tracing for Rendering 2-D Cross-Sections of 3-D Objects</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocaug.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Graphics</FONT></H2>

<hr><h2 align="center"><font color="#800000">Ray Tracing for Rendering 2-D Cross-Sections of 3-D Objects<A name="0178_00BC"><A name="0178_00BC"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0178_0000"><A name="0178_0000">William Smith</font></h3><hr><blockquote><P>
<P><i><A name="0178_0000"><A name="0178_0000">William Smith is the engineering manager at Montana Software, a software development company specializing in custom applications for MS-DOS and Windows. You may contact him by mail at P.O. Box 663, Bozeman, MT 59771-0663.</i></P><P>
I was grappling with a problem of how to display and present 3-D surface topography data as contour maps. I had mountains of data (pun intended) generated using the Global Positioning System (GPS) satellites &#151; not your typical land survey data. The data was not equidistant, had no order, and presented a formidable graphics display challenge. Unexpectedly, while skiing, I met someone who works in the optical-instrumentation field. In the ten minutes it takes to ride the chairlift to the top of the ski run, my new skiing acquaintance introduced me to ray tracing and how I might use it to solve my graphics display problem.<P>
Imagine a row of archers shooting arrows at an object. The object is a group of surfaces. The archers shoot arrows straight out parallel to one another and all in the same plane (a flat trajectory). The arrows are special. They do not stop or get deflected when they encounter the object. They penetrate every surface and layer of the object. Each place where an arrow penetrates a surface leaves a little hole. If the density of the arrows is high, they leave holes that are very close together. The holes form an outline of the intersection of the surfaces that compose the 3-D object with the plane in which the arrows are fired. Connecting adjacent holes in the same surface with lines yields a complete outline.<P>
You can think of the holes as pixels on a display screen or dots on a printed image. The arrows are rays and the holes are ray-surface intercepts. Connect the dots and you have a contour line. Moving the archers up and down orthogonal to the plane of the arrows generates numerous contours lines. This was exactly what I needed. You get better coverage by having two rows of archers firing arrows at the object. Just orient the two rows in the same plane but at 90 degrees to each other.<P>
What is simple in concept can be complex to implement. To make this work, you need to enter the world of 3-D space, coordinate transformations, surface geometry, and ray tracing. I am going to at least get you started. I will present the code to calculate ray-surface intercepts for first and second order surfaces and the code for transforming first- and second-order surfaces from one coordinate system to another.<P>
<h4><FONT COLOR="#000080"><A name="0178_00BD">Ray Tracing<A name="0178_00BD"></FONT></h4></P>
Rigorously, ray tracing models the behavior of light. A ray is a discrete vector representation of radiation. The physics of optics controls the magnitude and direction of the ray as it propagates through different materials and encounters different surfaces. In simplest terms, the ray is reflected when it encounters an opaque surface or refracted when it encounters a transparent surface. More complete modeling can require a myriad of combinations that dictate splitting rays to account for reflection, transmission, absorption, scatter, and diffraction. The ray tracing I am going to do here is non-optical. When a ray encounters a surface, the location of the surface is tabulated, but the ray continues on in the same direction as if the surface were not there. I will use ray tracing as a tool to compute surface intercepts.<P>
I define a ray as a location and a direction. The location is the origin of the ray. The direction is a vector of direction cosines for the ray. I implement the location and direction as individual arrays of three floating-point numbers each. The location array consists of the <I>x, y</I>, and <I>z</I> coordinates of the ray origin. The direction array consists of the <I>x, y</I>, and <I>z</I> direction cosines.<P>
Direction cosines are the dot product of the ray direction vector with the coordinate-system unit vectors. The dot product between two vectors is the cosine of the angle between the vectors. Hence the name direction cosine.<P>
<h4><FONT COLOR="#000080"><A name="0178_00BE">Coordinate Rotation<A name="0178_00BE"></FONT></h4></P>
When working in three-dimensional space, eventually you will have to deal with coordinate systems. While it is logical to define a global coordinate system, unfortunately, it is sometimes inconvenient to describe objects in this global coordinate system. Surfaces are usually easier to describe in a local coordinate system specific to the surface. But, depending upon the orientation between the local and global coordinate systems, describing a surface in global coordinates can be difficult. Fortunately, transforming from one coordinate system to another is straightforward.<P>
Before you can calculate a surface and ray intersection, you must define both the surface and the ray in the same coordinate system. When working with both local and global coordinates, you have two options to accomplish this. First, you can describe the surface in a convenient local coordinate system and transform the ray from global coordinates into the local surface coordinates. You solve for the surface intercept in the local surface coordinate system. You then transform this value back into the global coordinates. This option requires two coordinate transformations for every ray and surface intercept. For a system of many surfaces and many rays, this can chew up a lot of CPU cycles. A second, more efficient method requires transforming the surface into global coordinates. This option requires only one transformation for each ray and surface intercept.<P>
If you define surfaces in a local system, you also need to know the relationship between the local and global coordinate systems. This relationship consists of a rotation matrix and a translation vector. The rotation matrix converts between two coordinate systems that are rotated with respect to one another. The translation vector is just the vector distance between the two coordinate systems' origins.<P>
The rotation matrix is a three by three matrix. I find it convenient to create matrices dynamically and define a matrix type as <I>(double **)</I>. In the May 1992 issue of <I>C Users Journal</I>, my article "Number Crunching in C" presents code for creating dynamic two-dimensional matrices. You can access the elements of this matrix type with array notation <I>A[i][j]</I>.<P>
The rotation matrix between coordinate systems results from knowing the orientation of one system with respect to the other. This orientation can be either three direction vectors or a series of three rotation angles. If you have the direction cosines of the <I>x, y</I> and <I>z</I> axes of one coordinate system as described in the other you know the rotation matrix. The three columns of the rotation matrix are the three direction-cosine vectors of the three coordinate axes.<P>
If you know the three rotation angles of one coordinate system with respect to another and also know the order of the rotations you can compute the rotation matrix. I call the three rotations angles: <FONT FACE="Symbol">q</FONT><SUB><I>x</I></SUB>, <FONT FACE="Symbol">q</FONT><SUB><I>y</I></SUB> and <FONT FACE="Symbol">q</FONT><SUB><I>z</I></SUB>. <FONT FACE="Symbol">q</FONT><SUB><I>x</I></SUB> is the rotation about the <I>x</I> axis, q<I>y </I>the <I>y</I> axis and q<I>z</I>the <I>z</I> axis. The order of the rotations is important. Changing the order will change the rotation matrix. Since there are three rotations there are 3! or six possible orders.<P>
Since matrix multiplication is not associative, you must be careful with the orders. To generate a rotation matrix, you multiply the first rotation matrix, <I>A</I><SUB>1</SUB>, by the second, <I>A</I><SUB>2</SUB>, and then this result is multiplied by the third, A<SUB>3</SUB>. In vector math this is <I>R=A</I><SUB>3</SUB>(<I>A</I><SUB>2</SUB><I>A</I><SUB>1</SUB>)<P>
For the case of the rotation order being <I>x, y, z</I>, the three individual rotation matrices become<P>
<IMG SRC="equat1.gif"><P>
<A href="fig1.htm">Figure 1</a>
contains the resulting total rotation matrix. (Space does not permit listing the other five possible rotation orders). A rotation matrix converts a vector from one coordinate system to another with the following expression.<P>
<pre>   <I>V' = [A]V</I></pre>
<I>V'</I> is the vector in the new coordinate system. [<I>A</I>] is the rotation matrix of the new coordinate system with respect to the old. <I>V</I> is the vector in the old coordinate system.<P>
<h4><FONT COLOR="#000080"><A name="0178_00BF">Coordinate Translation<A name="0178_00BF"></FONT></h4></P>
Besides a rotational relationship between coordinate systems, if two coordinate systems do not share the same origin there is a translation. Translation of coordinate systems does not affect direction vectors that are pure direction cosines. The direction does not change. A point or location will change. Consequently, you will have to adjust a point described by <I>x, y</I>, and <I>z</I> coordinates by adding the translation vector.<P>
<pre>   <I>V' = T + V</I></pre>
<I>T</I> is the location of the original coordinate system origin with respect to the translated coordinate system origin. For this to work, the two coordinate systems must be oriented the same way. That is, if both a rotation and a translation exist between coordinate systems, the rotation transformation must be done first.<P>
<h4><FONT COLOR="#000080"><A name="0178_00C0">Surface Types<A name="0178_00C0"></FONT></h4></P>
For my problem, I was able to get by using first-order surfaces (planes) to represent the survey data. I let every unique set of three adjacent points define a plane. I bounded the plane by the three orthogonal planes that intersected with the three line segments joining the three points. The data formed a surface composed of a lattice of triangular planes. The algorithms presented here are for either first- or second- order surfaces.<P>
A first- order surface is a plane and is defined in local coordinates as:<P>
<pre>   <I>z</I> = 0</pre>
In global coordinates a general equation is:<P>
<pre>   <I>C</I><SUB>01</SUB><I>X</I> + <I>C</I><SUB>02</SUB><I>Y</I> + <I>C</I><SUB>03</SUB><I>Z</I> + <I>C</I><SUB>00</SUB> = 0</pre>
A plane is just a special case of a second-order surface. In global coordinates, the general equation for a second-order surface is<P>
<pre>   <I>C</I><SUB>11</SUB><I>X</I><SUP>2</SUP> + <I>C</I><SUB>22</SUB><I>Y</I><SUP>2</SUP> + <I>C</I><SUB>33</SUB><I>Z</I><SUP>2</SUP> + <I>C</I><SUB>12</SUB><I>XY</I> <I>C</I><SUB>23</SUB><I>YZ</I> + <I>C</I><SUB>13</SUB><I>XZ C</I><SUB>01</SUB><I>X</I> + <I>C</I><SUB>02</SUB><I>Y</I> + <I>C</I><SUB>03</SUB><I>Z</I> + <I>C</I><SUB>03</SUB><I>Z</I> + <I>C</I><SUB>00</SUB> = 0</pre>
Familiar second-order surfaces are conic surfaces of revolution. The following equation defines conic surfaces.<P>
<pre>   <I>C</I><I><SUB>v</SUB></I><I>X</I><SUP>2</SUP> + <I>C</I><I><SUB>v</SUB></I><I>Y</I><SUP>2</SUP> + <I>C</I><I><SUB>k</SUB></I><I>C</I><I><SUB>v</SUB></I><I>Z</I><SUP>2</SUP> + 2<I>Z</I> = 0</pre>
<I>C</I><I><SUB>v</SUB></I> is the vertex curvature and <I>C</I><I><SUB>k</SUB></I> is the conic constant. For this special case, <I>C</I><SUB>11</SUB> = <I>C</I><SUB>22</SUB> = <I>C</I><I><SUB>v</SUB></I>, <I>C</I><SUB>33</SUB> = <I>C</I><I><SUB>k</SUB></I><I>C</I><I><SUB>v</SUB></I><I>, C</I><SUB>12</SUB> = <I>C</I><SUB>23</SUB> = <I>C</I><SUB>13</SUB> = <I>C</I><SUB>01</SUB> = <I>C</I><SUB>02</SUB> = <I>C</I><SUB>00</SUB> = 0 and <I>C</I><SUB>03</SUB> = 2. <A href="tab1.htm">Table 1</a>
lists the different types of conic surfaces and the corresponding conic constants.<P>
The code stores surface coefficients in 4x4 matrices. Since the surface matrix is symmetric, there is some duplication of data. From the standpoint of generalization and efficiency of the algorithms, the matrix representation is convenient.<P>
<h4><FONT COLOR="#000080"><A name="0178_00C1">Surface Rotation<A name="0178_00C1"></FONT></h4></P>
Rotation of a surface from one coordinate system to another is a bit more complex than rotation of a vector. The expressions for the variables <I>x, y</I>, and <I>z</I> in the new coordinates must be plugged back into the surface equation. After some algebraic manipulation and gathering of like terms you can solve for the new coefficients. This becomes a tedious exercise in algebra, especially as the order of the surface equation increases. Here are the resulting expressions for a second-order surface. Since a plane is a special case of a second-order surface, these expressions work for planes.<P>
If <I>A</I> is the rotation matrix, the coefficients for the surface in the rotated (primed) coordinate system are given by the following equations. The function, <I>srf_rotate</I> in <A href="list1.htm">Listing 1</a>,
 <I>SRF_TRNS.C</I>, is the C code implementation of these expressions. <A href="list2.htm">Listing 2</a>,
 <I>SRF_TRNS.H</I>, is the <I>include</I> file for <A href="list1.htm">Listing 1</a>.
<P>
<IMG SRC="equat2.gif"><P>
for the squared terms,<P>
<IMG SRC="equat3.gif"><P>
for the mixed second-order terms with <I>C</I><I><SUB>ij</SUB></I> = <I>C</I><I><SUB>ij</SUB></I> and<P>
<IMG SRC="equat4.gif"><P>
for the linear terms. The symbol <FONT FACE="Symbol">d</FONT><SUB>km</SUB> is the delta function defined as<P>
<IMG SRC="equat5.gif"><P>
<h4><FONT COLOR="#000080"><A name="0178_00C2">Surface Translation<A name="0178_00C2"></FONT></h4></P>
Translation of a surface expression into another coordinate system is not quite as complex as rotation. This is another exercise in algebra by replacing the variables <I>x, y</I> and <I>z</I> in the surface equation with expressions for <I>x, y,</I> and <I>z</I> in the translated coordinate system. The result is the following expression for a second-order surface.<P>
<I>T</I><I><SUB>i</SUB></I> is the translation vector between coordinate systems with <I>T</I><I><SUB>0</SUB></I> = 1. The coefficients for a second order surface in a new translated coordinates system are:<P>
<IMG SRC="equat6.gif"><P>
<pre>   <I>C</I><SUB>12</SUB>' = <I>C</I><SUB>12</SUB>
   <I>C</I><SUB>23</SUB>' = <I>C</I><SUB>23</SUB>
   <I>C</I><SUB>13</SUB>' = <I>C</I><SUB>13</SUB>
   <I>C</I><I><SUB>ii</SUB></I>' = <I>C</I><I><SUB>ii</SUB></I> for <I>i</I>=1,2,3</pre>
<A href="list1.htm">Listing 1</a>,
 <I>SRF_TRNS.C</I>, contains the function <I>srf_trans</I>. You can use this function to translate either a first- or second- order surface into a new coordinate system.<P>
<h4><FONT COLOR="#000080"><A name="0178_00C3">Surface-Ray Intercepts<A name="0178_00C3"></FONT></h4></P>
Once both a ray and a surface are in the same coordinate system, you can determine the ray and surface intersection points in that coordinate system. There can be as many inter-sections as the order of the surface.<P>
Starting from a location <I>L</I> the ray direction is the vector <I>D</I> and the distance to the next closest intercept is <I>S.</I> To solve for the next intercept, you solve the equation <I>f</I>(<I>L + DS</I>). <I>f</I>(<I>x, y, z</I>) is the equation for the surface. The unknown in the equation is the distance <I>S</I>. You determine the individual <I>x,y,z</I> components of the intercept by vectorially evaluating <I>L = DS</I>.<P>
The second-order surface equation in vector form is<P>
<IMG SRC="equat7.gif"><P>
Substituting <I>L=DS</I> into this equation yields<P>
<IMG SRC="equat8.gif"><P>
Setting <I>f</I>=0 and using the quadratic formula, you can solve for up to two values of S,<P>
<IMG SRC="equat9.gif"><P>
where<P>
<IMG SRC="equat10.gif"><P>
<A href="list3.htm">Listing 3</a>,
 <I>SRF_INCP.C</I>, contains the function <I>srf_intrcpt</I>. <A href="list4.htm">Listing 4</a>,
 <I>SRF_INCP.H</I>, is the <I>include</I> file for <A href="list3.htm">Listing 3</a>.
 You can use this function to calculate ray-surface intercepts. The function returns the number of intercepts. The function stores the values of the intercepts in a vector that you pass to the function. In the case of a first-order surface, there will be either zero or one intercept. A second-order surface can have zero, one, or two intercepts. The intercept calculated by the function <I>srf_intrcpt</I> is a displacement value. To get coordinates of the intercept point in space, multiply the direction vector by this displacement value and then add it to the original ray origin location. In most situations, you will be interested in surfaces that have finite boundaries. After a surface intercept is determined you will have to check whether this location is within the boundaries.<P>
In some situations, obtaining the expression for the surface and plane intersection will be more convenient that just a set of points. If your graphics display driver supports a line draw primitive this will be the case for intersections with first-order surfaces. Intersections with second-order surfaces yields a curve. Graphics display drivers that support a curve-drawing primitive are rare and the ray-tracing method has great value.<P>
<h4><FONT COLOR="#000080"><A name="0178_00C4">Example<A name="0178_00C4"></FONT></h4></P>
<A href="list5.htm">Listing 5</a>,
 <I>EXAMPLE.C</I>, contains an example of generating contour lines from a 3-D surface. In this case, the 3-D surface is a simple sphere. The example defines the coefficients in local coordinates. A call to <I>srf_tran</I> translates the surface coefficients into the global coordinates. The code starts rays along the <I>x</I> and <I>y</I> axis for three different elevations in <I>z</I>. This generates three contour lines. The code lists the surface-ray intercepts to standard out. If you define <I>GRAPHICS_ON</I> and link with the Microsoft C graphics library the intercepts are mapped into pixels on the display screen.<P>

<h4><a href="../../../source/1992/aug92/smith.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
