

<HTML>
<HEAD>

<TITLE>June 1994/Code Capsules</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjun.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Code Capsules<A name="0125_0092"><A name="0125_0092"></font></h2><P>
<h3 align="center"><A name="0125_0000"><A name="0125_0000">Control Structures</h3><P>
<h3 align="center"><font color="#800000">Chuck Allison</font></h3><hr><blockquote><P>
<P><i><A name="0125_0000"><A name="0125_0000">Chuck Allison is a regular columnist with CUJ and a software architect for the Family History Department of the Church of Jesus Christ of Latter Day Saints Church Headquarters in Salt Lake City. He has a B.S. and M.S. in mathematics, has been programming since 1975, and has been teaching and developing in C since 1984. His current interest is object-oriented technology and education. He is a member of X3J16, the ANSI C++ Standards Committee. Chuck can be reached on the Internet at allison@decus.org, or at (801)240-4510.</i></P><P>
It has been 26 years since Edsger Dijkstra wrote his famous letter entitled "GOTO Statement Considered Harmful," which, as the title suggests, made a strong case for never using a branching construct in a program <a href="#1">[1]</a>. In another letter he wrote, "... for some time I knew that, as a programmer, I could live quite happily without any form of the <I>goto</I> statement, but ... in the meantime my considered opinion is that I cannot live happily with the <I>goto</I> statement." <a href="#2">[2]</a> There followed a notorious movement to eliminate the <I>goto</I> construct altogether. Professors refused to accept students' programming assignments if they contained a <I>goto.</I> Languages were designed without a <I>goto</I> construct. The upside of all this upheaval was that as an industry we learned to think "structured," that is, to organize our software in a more logical and maintainable fashion. The downside is that we abandoned a potentially useful construct &#151; sometimes a <I>goto</I> is just what the doctor ordered. (By the way, almost all current programming languages in widespread use support some form of <I>goto</I>).<P>
In this article I will discuss the mechanisms available to you in C to structure the logic of your programs. These mechanisms include not only the <I>goto</I>-less constructs of structured programming, but also branching techniques that range from the simplistic to the sophisticated: <I>break</I>, <I>goto</I>, non-local jumps (with <I>setjmp/longjmp</I>), and signals.<P>
<h4><FONT COLOR="#000080"><A name="0125_0093">Structured Programming<A name="0125_0093"></FONT></h4></P>
In 1966 Bohm and Jacopini proved mathematically that it is possible to express any algorithm in terms of only three constructs, along with an arbitrary number of boolean flags <a href="#3">[3]</a>. The three constructs are:<P>
1.     sequences of statements<P>
2.     alternation (e.g., <I>if-else, switch</I>)<P>
3.     repetition (e.g., <I>while, for, do</I>)<P>
We usually call programs that use only these mechanisms <I>structured programs</I>. Unfortunately, when structured-design gurus began their hard-sell to the industry, most programming professionals were making a living with COBOL, FORTRAN IV, and assembly language, while BASIC was gaining popularity in educational settings. Of these languages, only COBOL had the <I>else</I> construct. Telling a FORTRAN programmer (such as me) that he shouldn't use a <I>goto</I> usually resulted in him telling <I>you</I> where to go. Besides, we were proud of our expert ability to cram complex logic into as few lines as possible &#151; who cared if the lame-brains couldn't decipher code of such "elegance?" We couldn't have done this Great Work without the <I>goto</I> P.J. Plauger has said, speaking of the structured programming revolution, "Us converts waved this interesting bit of news under the noses of the unreconstructed assembly-language programmers who kept trotting forth twisty bits of logic and saying, 'I betcha can't structure <I>this</I>.' Neither the proof by Bohm and Jacopini nor our repeated successes at writing structured code brought them around one day sooner than they were ready to convince themselves." <a href="#4">[4]</a><P>
<A href="list1.htm">Listing 1</a>
shows a vintage BASIC program that plays the game of "Hi-lo." You think of a number between 1 and 100, and just tell the computer whether its guesses are high, low, or right on. As long you give honest responses, the binary search algorithm will find your number in seven guesses or less (because <I>ceil(log2(100)) == 7)</I>. Compare this program to the C version in <A href="list2.htm">Listing 2</a>.
 The BASIC version is one-third the size of the C version, but is it more readable? Is it as maintainable? Is the structure of the logic evident from the shape of the program? No, no, no!<P>
As a consequence of Bohm and Jacopini's work, it became natural to use alternation and repetition as the basic tools of thought when designing a logical process. It soon was quite popular to describe procedures in structured prose, or <I>pseudocode</I>, a terse, verbal description governed by loops and conditions. With pseudocode, you describe conditionals much the same as in any of the languages that support the <I>if-else </I>construct:<P>
<pre>if &lt;condition&gt;
   do this...
else
   do that</pre>
To choose from a group of related values, you can use the <I>case</I> statement:<P>
<pre>case x of
   1: do this...
   2: do that...
   3: do the other thing...</pre>
Structured programming allows separate controls for the various flavors of loops. Most of the time you need a control that tests its condition before entering the loop body:<P>
<pre>while &lt;condition&gt;
   do this...</pre>
A <I>for</I> loop is good for processes that must execute a specific number of times, as in<P>
<pre>for i = 1 to n
   do something dependent on i</pre>
or for processing a sequence of items:<P>
<pre>for each student on the roster
   calculate something...</pre>
On rare occasion you might need a loop that tests its controlling condition after executing the loop body:<P>
<pre>repeat
   get user input
until input is in the range [1..5]</pre>
<A href="list3.htm">Listing 3</a>
shows a pseudocode description of a process to merge two sorted text files. This code reads a line from each file and prints to standard output the line that lexicographically precedes the other. The process repeats until it empties one of the files, at which point it just outputs the rest of the other file.<P>
<h4><FONT COLOR="#000080"><A name="0125_0094">Careful Conditioning<A name="0125_0094"></FONT></h4></P>
It is important that you relate a loop's condition clause to your code's design in a direct and understandable way. To convince yourself that you have correctly coded the condition clause, insert a comment at the beginning of the loop body that states what the condition of the loop means in terms of the task to be completed or problem to be solved. If the comment clearly expresses the solution you had in mind, you've crafted an effective loop. Do the same thing at the end of the loop.<P>
The implementation of the merge procedure in <A href="list5.htm">Listing 5</a>
shows an example of this practice. (The input data is in <A href="list4.htm">Listing 4</a>.
) You can easily extend the merge algorithm to process a larger number of files. At first glance you might think that the loop control statement<P>
<pre>while (neither file has been exhausted)</pre>
should become<P>
<pre>while (no file has been exhausted)</pre>
But if you have <I>n</I> files, when that loop finishes you will still have <I>n-1</I> active files to continue merging. You need to stay inside the merge loop until only one file is still active:<P>
<pre>while (number of active files &gt; 1)
   etc.</pre>
This condition clause requires that you keep a list of active files, from which you will delete an entry when its file runs out of input lines. The design now looks like this:<P>
<pre>while (number of active files &gt; 1)
{
   determine which line comes next
   print that line
   if (the corresponding file
      is now empty)
      delete it from the list
      of active files
   else
      get a fresh line from the file
}
empty the remaining file</pre>
Since you have introduced a mechanism to track the active files, you might as well stay in the loop until the last file is empty, and there is nothing else to do. The pseudocode in <A href="list6.htm">Listing 6</a>
reflects this change, as do the invariants in the implementation in <A href="list7.htm">Listing 7</a>.
<P>
<h4><FONT COLOR="#000080"><A name="0125_0095">Branching<A name="0125_0095"></FONT></h4></P>
Even if it is possible to program without <I>goto</I>s, it is often convenient to branch out of the middle of a loop (a special case of a <I>goto</I>). Using C's <I>break</I> statement can help you avoid littering your code with extraneous loop control variables. For example, the variables <I>done</I> and <I>found</I> in <A href="list2.htm">Listing 2</a>
exist only to terminate their loops. Most C programmers do without them (see <A href="list8.htm">Listing 8</a>,
 where I use a <I>break</I> instead).<P>
Suppose you decide to rewrite the <I>if-else</I> statements under the comment <I>/* Narrow the search range */ </I>as a <I>switch</I> statement:<P>
<pre>/* Narrow the search range */
switch(response)
{
   case 'L':
      lo = guess + 1;
      break;
   case 'H':
      hi = guess - 1;
      break;
   case 'Y':
      puts("What? Try again...");
      break;
   default:
      break;
     /* This doesn't work! */
}</pre>
Unfortunately the <I>break</I> under the default case exits the switch, not the loop. In this case you can use a <I>goto</I> or use the <I>if-else</I> construct as before.<P>
Exiting deeply nested loops with a <I>goto</I> can be much clearer than the boolean flag approach the purists advocate. Consider this excerpt that searches a 3-dimensional array for a certain value:<P>
<pre>for (i = 0; i &lt; n; ++i)
   for (j = 0; j &lt; m; ++j)
      for (k = 0; k &lt; s; ++k)
         if (a[i][j][k] == x)
            goto found;</pre>
found:<P>
<pre>/* use i, j, and k here */</pre>
A naive attempt at a non-branching version gives:<P>
<pre>for (done = 0, i = 0; !done &amp;&amp; i &lt; n; ++i)
   for (j = 0; !done &amp;&amp; j &lt; m; ++j)
      for (k = 0; !done &amp;&amp; k &lt; s; ++k)
         if (a[i][j][k] == x)
            done = 1;

/* Fix indexes (yuck!) */
--i, --j, --k;</pre>
Even if you don't mind the way this code looks, it's poorly designed because it increments the loop variables beyond the correct values, since it passes control to the enclosing loops all the way to the top level, instead of exiting immediately.<P>
Using the <I>goto</I> as a multi-level loop exit can help restore things to a stable state after a serious error, as in:<P>
<pre>main()
{
/* Some one-time initialization here */

recover:

   for (;;)
   {
/* Some more initialization here  */

/* Things get deeply nested...  */

        if (&lt;things go crazy&gt;)
           goto recover;
   }
}</pre>
This is a common technique in hardware control programs.<P>
<h4><FONT COLOR="#000080"><A name="0125_0096">Non-Local Branching<A name="0125_0096"></FONT></h4></P>
What if you encounter an exceptional condition deep within a set of nested function calls and your recovery point is back in a function higher up in the call chain (like <I>main</I>)? What you need is a "super <I>goto</I>" that branches across functions. That's what the <I>setjmp/longjmp</I> mechanism is for. You record a point to return to with <I>setjmp</I>, and branch to it with <I>longjmp</I>. Here's the syntax:<P>
<pre>#include &lt;setjmp.h&gt;

jmp_buf recover;

main()
{
   volatile int i = 0;
   for(;;)
   {
      if (setjmp(recover) != 0)
      {
         /* Recover from error in f() */
      }

      /* Get deeply nested... */
   }
   return 0;
}

...

void f()
{
   /* Do some risky stuff */

   if (&lt;things go crazy&gt;)
      longjmp(recover,1);

   /* else carry on */
}</pre>
A <I>jmp_buf</I> is an array that holds the system information necessary to restore execution at the <I>setjmp</I> point. (Obviously, a jump buffer must be global or passed as a pointer argument). When you call <I>setjmp</I>, the system stores the <I>calling environment</I> (such as the contents of the stack and instruction pointer registers, etc.)<I> in recover</I>. <I>setjmp</I> always returns zero when called directly. A call to <I>longjmp</I> restores the calling environment, so execution continues back at the point of the <I>setjmp</I> call. At this point, the program appears to return yet again from <I>setjmp</I>, with one difference from before: it now appears as if <I>setjmp</I> has returned the second argument from the <I>longjmp</I> call (in this case a 1). Note however that if you give <I>longjmp</I> a second argument of 0, <I>setjmp</I> still returns a 1 because C forbids <I>setjmp</I> to return a 0 upon return from a <I>longjmp</I>. In this one case the compiler drops in a "hard-wired" return value. Since a <I>longjmp</I> performs an alternate return from a function, it interrupts the normal flow of a program, so you should use it only to handle unusual conditions.<P>
You need to take a few precautions when using <I>setjmp/longjmp</I>. For one thing, the function containing the <I>setjmp</I> target must still be active (i.e., must not yet have returned to its caller), otherwise the calling environment will no longer be valid. And of course, it is a bad idea to have more than one <I>setjmp</I> target with the same <I>jmp_buf</I> variable (now that would be confusing!). Since calling environments typically involve registers, and since a compiler is free to store automatic variables in registers, you have no idea if an automatic object will have the correct value when you return from a <I>longjmp</I>. You should declare automatics in any function containing a <I>setjmp</I> with the <I>volatile</I> qualifier, which guarantees that the inner workings of <I>longjmp</I> will leave them undisturbed.<P>
There is another consequence of not being able to trust automatic storage during a <I>longjmp</I>: the <I>setjmp</I> call itself must not appear in an expression that may generate a temporary object, such as an intermediate computation. For this reason a call to <I>setjmp</I> may only appear as the sole controlling expression in an <I>if</I> or <I>switch</I> statement, or as an operand in an equality expression. You cannot reliably assign the result of <I>setjmp</I> to another variable. The program in <A href="list9.htm">Listing 9</a>,
 which deletes subdirectory trees, calls <I>setjmp</I> from within a switch statement. (If you're interested in the details of this algorithm, see "Code Capsules: File Processing, Part 2," <I>CUJ</I>, June 1993.).<P>
<h4><FONT COLOR="#000080"><A name="0125_0097">Signals<A name="0125_0097"></FONT></h4></P>
A <I>signal</I> occurs when an unusual event interrupts the normal execution of a program, such as a divide-by-zero error or when the user presses the attention key (e.g., Control-C or DEL). The header <I>&lt;signal.h&gt;</I> defines the following "standard" signals:<P>
<pre><I>SIGABRT  </I>abnormal termination
       (raised by <I>abort())</I>
<I>SIGFPE   </I>computational exception
       (e.g., overflow)
<I>SIGILL   </I>invalid function image
       (e.g., illegal instruction)
<I>SIGINT   </I>interactive attention
       (e.g., Control-C)
<I>SIGSEGV  </I>attempt to access
       protected memory
<I>SIGTERM</I>  termination request</pre>
These signals originated on the PDP=11 architecture under UNIX, and may not all apply to your environment. An implementation may also define other signals, or may ignore signals altogether, so signal handling is by nature non-portable.<P>
Signals come in two flavors: <I>synchronous</I> and <I>asynchronous</I>. A synchronous signal is one that your program raises, such as by dividing by zero, overflowing a floating-point operation, or issuing a call to the <I>abort</I> function. You can raise a signal explicitly with a call to <I>raise</I><I>,</I> for example:<P>
<pre>raise(SIGABRT);</pre>
An asynchronous signal occurs due to forces external to your program, such as a user pressing the attention key.<P>
The default response to most signals is usually to abort the program, but you can either arrange for signals to be ignored or provide your own custom <I>signal handlers</I>. The following statement from <A href="list10.htm">Listing 10</A><P>
<pre>signal(SIGINT,SIG_IGN);</pre>
tells the environment to ignore any keyboard interrupt requests (Control-C on my machine). The keyboard input process still echoes the ^C token on the display, but it does not pass control to the default signal-handling logic that terminates the program. The statement<P>
<pre>signal (SIGINT, SIG_DFL)</pre>
restores the default behavior, so you can halt the program from the keyboard.<P>
The program in <A href="list11.htm">Listing 11</a>
invokes the library function <I>signal</I> to install a function (<I>abort_handler</I>) to respond to <I>SIGABRT</I>. A signal handler must take an integer argument and return <I>void</I>. The first call to <I>abort</I> transfers control to <I>abort_handler</I>, passes <I>SIGABRT</I> as the integer argument (which I don't happen to use in this case), and prints the message<P>
<pre>Abort signal intercepted</pre>
When execution enters a signal handler, the environment considers the associated signal "handled" before the very first statement executes. This breaks any subsequent association between your handler and the signal, and restores the default handling. This means that if your handler returns, it will not get control back the next time that signal is raised. That is why when control resumes where it was interrupted in <I>main</I>, and it calls <I>abort</I> the second time, the program actually terminates. In practice an abort handler should not return but should terminate the program with a call to <I>exit</I> instead (in this example you certainly shouldn't call <I>abort</I>!). Likewise, if you return from a <I>SIGFPE</I> handler the results are undefined.<P>
If you want to handle a signal every time it occurs, your handler should reinstall itself every time it executes. As the <I>SIGINT</I> handler (<I>ctrlc</I>) in <A href="list12.htm">Listing 12</a>
illustrates, you should do this at the beginning of an asynchronous signal handler. If you put it off until later in the function, the same signal can occur before you've reinstalled it, causing you to lose the signal to the system default handler. In fact, there is very little an asynchronous signal can do safely. The signal you're processing could have occurred during the execution of a library function. Since the Standard C library is not reentrant, it would be a bad idea to call that library function from your handler. The rule of thumb is: Don't call library functions from within a function that handles an asynchronous signal. Nor should you call any function that might raise another signal. As the <I>ctrlc</I> function shows, there are only two safe things you can do before returning from an asynchronous handler:<P>
1.     Call <I>signal</I> to reinstall the handler, and<P>
2.     Assign a value to a static object of type <I>volatile sig_atomic_t</I>.<P>
<I>sig_atomic_t</I> is an integral type that is guaranteed not to be interrupted by a signal while it is being accessed. You can use such a value as a flag or counter when normal execution resumes. Although redundant, it is a good practice to place an explicit <I>return</I> statement at the end of a handler that returns, to distinguish it from one that halts the progam.<P>
In spite of what the preceding paragraph says about using library functions, it is nevertheless routine practice in many environments to <I>longjmp</I> out of an asynchronous signal handler. It works fine under DOS and most of the time under UNIX. As a common example, <A href="list13.htm">Listing 13</a>
shows the outline of a command-line interpreter, a program that reads a sequence of text commands and performs the indicated functions (similar to <I>sh</I> in UNIX or DOS's <I>COMMAND.COM</I>). If you press the attention key from deep within the logic of an internal command, you want to return to the command loop, not terminate the program. <I>longjmp</I> allows you to do this.<P>
<h4><FONT COLOR="#000080"><A name="0125_0098">Exit Handlers<A name="0125_0098"></FONT></h4></P>
This is as good a time as any to talk about <I>exit handlers</I>. With the <I>atexit</I> function you can register up to 32 functions which will be called when a program exits normally (i.e., not via <I>abort</I>). The functions execute in the reverse order that you registered them. The program in <A href="list15.htm">Listing 15</a>
(pseudocode shown in <A href="list14.htm">Listing 14</a>)
 is an <I>external sort</I>, a program that sorts files larger than can fit in memory. It does this by breaking the large file into smaller subfiles that do fit in memory. After sorting all subfiles the program merges them to standard output using the algorithm from <A href="list6.htm">Listing 6</a>.
 If the program halts prematurely due to some external error, it may fail to delete some of the temporary subfiles from memory. To clean up the mess, the exit handler, <I>remove_temps</I>, removes any left over subfiles from memory (<I>atexit</I> appears near the beginning of <I>sort</I> in the listing). Note the <I>goto</I> in the loop that processes the command-line options. This program allows you to mix options in a single argument as in:<P>
<pre>vsort -ir file (same as vsort -i -r file)</pre>
but expects any numeric characters to appear last in a token, as in:<P>
<pre>vsort -n8 file</pre>
The program ignores any options that follow a numeric string; for example, it ignores <I>v</I> in:<P>
<pre>vsort -n8v file</pre>
The <I>goto</I> serves as a multi-level <I>break</I> and <I>continue</I> at the same time, since it exits the loop that traverses a single argument to cycle on the loop that visits each argument. This program also illustrates the following concepts from previous Code Capsule articles:<P>
November 1992:<br>
Variable-length formatting<br>
In-core formatting<P>
April 1993:<br>
Sorting with <I>qsort</I><P>
May 1993:<br>
Command-line arguments<br>
Temporary file names<br>
I/O redirection<br>
Deleting files<P>
August 1993:<br>
Pointer arithmetic<P>
<h4><FONT COLOR="#000080"><A name="0125_0099">Summary<A name="0125_0099"></FONT></h4></P>
The C language supports structured programming as follows:<P>
<UL><li>Alternation: <I>if-else</I><I>, </I><I>switch</I>, conditional (ternary) expression</li>
<li>Repetition: <I>while</I><I>, </I><I>for</I><I>, </I><I>do</I></li></UL>
Clarity and economy sometimes require you to use the branching constructs:<P>
<UL><li>Branching: <I>break</I>, <I>continue</I>, <I>return</I>, <I>goto</I></li></UL>
And once in a great while, you need the non-traditional control mechanisms that the C library provides:<P>
<UL><li>Non-local branching: <I>setjmp</I>, <I>longjmp</I></li>
<li>Signals: <I>signal</I>, <I>raise</I></li></UL>
The further you progress down the list, the more careful you have to be. Next month I'll explore C++'s contribution to flow control: exceptions.<P>
<h4>References</FONT></h4></P>
<a name="1"></a>1.     E. Dijkstra, <I>"</I><I>goto</I> Statement Considered Harmful," <I>Communications of the ACM</I> 11:3, p. 147, March 1968.<P>
<a name="2"></a>2.     E. Dijkstra, "Stepwise Program Construction," printed in <I>Selected Writings on Computing: A Personal Perspective</I>, Springer-Verlag, 1982, p. 2.<P>
<a name="3"></a>3.     C. Bohm &amp; G. Jacopini, "Flow Diagrams, Turing Machines, and Languages with Only Two Formation Rules," <I>Communications of the ACM</I> 9:5, p. 266, May 1966.<P>
<a name="4"></a>4.     P. J. Plauger, <I>Programming on Purpose, Essays on Software Design,</I> Prentice-Hall, 1993, p. 25.<P>

<h4><a href="../../../source/1994/jun94/allison.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
