

<HTML>
<HEAD>

<TITLE>June 1994/Standard C</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjun.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Standard C<A name="0118_008C"><A name="0118_008C"></font></h2><P>
<h3 align="center"><A name="0118_0000"><A name="0118_0000">The Header &lt;streambuf&gt;</h3><P>
<h3 align="center"><font color="#800000">P.J. Plauger</font></h3><hr><blockquote><P>
<P><i><A name="0118_0000"><A name="0118_0000">P.J. Plauger is senior editor of The C Users Journal. He is convenor of the ISO C standards committee, WG14, and active on the C++ committee, WG21. His latest books are The Standard C Library, and Programming on Purpose (three volumes), all published by Prentice-Hall. You can reach him at pjp@plauger.com.</i></P><P>
For the past two months, I have been discussing that part of the Standard C++ library known collectively as iostreams. (See "Standard C: Introduction to Iostreams," <I>CUJ</I>, April 1994, and "Standard C: The Header <I>&lt;ios&gt;</I><I>, CUJ</I>, May 1994.) The topic this month is the header <I>&lt;streambuf)</I>. Its primary focus is the class <I>streambuf</I>, which serves as the driving engine for all iostreams operations. But there are one or two other critters of interest in this header that I will discuss first.<P>
<A href="list1.htm">Listing 1</a>
shows one way to write the header <I>&lt;streambuf&gt;</I>. As with the header <I>&lt;ios&gt;</I> I discussed last month, I feel obliged to warn you of some potential surprises:<P>
<UL><li>If you think you know iostreams as it is commonly practiced, be prepared for a few changes. These are a result of the standardization process.</li>
<li>If you know next to nothing about iostreams, be prepared for more confusing detail. This package is huge, and not easily grasped a bit at a time.</li>
<li>Note that the implementation presented here doesn't always follow traditional lines. As usual, I implement the draft standard as it currently reads, not as it evolved historically.</li></UL>
For now, just take a pass over <A href="list1.htm">Listing 1</a>.
 We'll be revisiting it in detail.<P>
<h4><FONT COLOR="#000080"><A name="0118_008D">Living with <B><I>&lt;stdio.h&gt;</I><A name="0118_008D"></B></FONT></h4></P>
The first thing you might notice is an old friend from the Standard C library. Macro <I>EOF</I> has exactly the same definition, and meaning, as in the header <I>&lt;stdio. h&gt;</I>. It is an integer value distinguishable from any value representable as type <I>unsigned char</I>. And, as in the Standard C library, it is used here to signal either end-of-file when reading or some other kind of input/output failure.<P>
Another borrowing from Standard C is the type <I>streamoff</I>. It is used to represent signed offsets for positioning operations within a stream controlled by a <I>streambuf</I> object. That, of course, includes C-style streams controlled by objects of type <I>FILE</I>. A <I>streamoff</I> object must thus be able to represent the offsets used by the functions <I>fseek</I> and <I>ftell</I>, both declared in <I>&lt;stdio.h&gt;</I>. Hence, the type is pretty much constrained to have the same representation as type <I>long</I>.<P>
Sadly, type <I>streamoff</I> shares the same double meaning with its Standard C counterpart:<P>
<UL><li>It can be a signed displacement relative to some position within a file. All values are meaningful.</li>
<li>It can be an absolute position within some file. Negative values are nonsensical. (And a file may be so large that it has positions not representable as values of type <I>streamoff</I>.)</li></UL>
It is not always clear from context which meaning is intended.<P>
I have found it convenient in this implementation to define the secret constant <I>_BADOFF</I>. As in Standard C, it is the standard way to indicate an invalid absolute position. Unfortunately, it sometimes also is used to indicate an invalid relative position, for which the value &#151;1 is a less compelling choice.<P>
The Standard C I/O model also influences the iostreams machinery in more subtle ways. In particular, the remainder of header <I>&lt;streambuf&gt;</I> defines two classes:<P>
<UL><li><I>     streampos</I>, for describing arbitrary positions within a stream</li>
<li><I>     streambuf</I>, for controlling input and output to a stream</li></UL>
Both strive in many ways to be abstract data types. The "streams" they control can be files in the Standard C sense, or text strings that grow and shrink dynamically in memory, or an open-ended set of user-defined sources and sinks.<P>
Nevertheless, an important use for both these classes is to interface with their Standard C counterparts. Hence, class <I>streampos</I> is shaped internally by the needs of the Standard C functions <I>fgetpos</I><I> </I>and<I> </I><I>fsetpos</I>, declared in <I>&lt;stdio.h&gt;</I>. And class <I>streambuf</I> is obliged to work well with the streams of Standard C. Like it or not (and many C++ purists definitely <I>do not</I> like it), you will find artifacts of Standard C popping up in both these classes.<P>
<h4><FONT COLOR="#000080"><A name="0118_008E">The Class <B><I>streampos</I><A name="0118_008E"></B></FONT></h4></P>
The next major item in <A href="list1.htm">Listing 1</a>
is the definition of class <I>streampos</I>. As you might guess by now, it is an attempt to improve upon the type <I>fpos_t</I>, defined in<I> &lt;stdio.h)</I>. And in many ways it succeeds:<P>
<UL><li>You can add a <I>streamoff</I> value to a <I>streampos</I> object, or subtract a <I>streamoff</I> value from a <I>streampos</I> object to determine a new stream position.</li>
<li>You can subtract a <I>streampos</I> object from another <I>streampos</I> object to obtain a <I>streamoff</I> difference.</li>
<li>You can compare two <I>streampos</I> objects for equality or inequality.</li></UL>
By comparison, an <I>fpos_t</I> value is just a magic cookie. All you can do is obtain a current file position by calling <I>fgetpos</I>, copy the value about, and use that value to restore the same file position by calling <I>fsetpos</I> (for the same open stream, of course).<P>
For an in-memory stream, a <I>streamoff</I> value stored inside a <I>streampos</I> object probably suffices to represent all sensible stream positions. All this arithmetic makes sense and is easy to perform. But for a C-style stream, you have to rely in the end on the Standard C file-positioning functions. If they can't do what you ask, all this flexibility is for naught.<P>
I encourage you to indulge in as little file positioning as possible. When you must, try to confine yourself to revisiting positions that you've visited earlier. If you're more ambitious, expect occasional surprises, and positioning failures.<P>
The implementation I chose endeavors to succeed as often as possible, even in the teeth of possible failure. It stores within each <I>streampos</I> object two private member objects:<P>
<UL><li><I>_Pos</I>, of type <I>streamoff</I>, to keep track of the simple offset arithmetic described above</li>
<li><I>_Fp</I>, of type <I>fpos_t</I>, to keep track of a C-style file position when working with actual files</li></UL>
The actual declared type of the latter is <I>_Fpost</I> because the name <I>fpos_t</I> is not necessarily defined at this point. (The draft C++ Standard pays lip service to the need for this component of class <I>streampos</I>, but is intentionally mealy mouthed about whether it is actually present.)<P>
This implementation declares the structure <I>fpos_t (_Fpost)</I> with the members:<P>
<UL><li><I>_Off</I>, for the absolute position within a stream (<I>_BADOFF</I> if undefined)</li>
<li>_<I>Wstate</I>, for the state memory when parsing a wide-oriented stream (See "Standard C: Wide Character Streams," <I>CUJ</I> July 1993.)</li></UL>
The state memory, in turn, has the elements:<P>
<UL><li>_<I>State</I>, for the current parse and shift state within a multibyte stream</li>
<li>_<I>Wchar</I>, for the current wide-character accumulator used by the multibyte stream parser</li></UL>
For all but wide-oriented streams, both these components are always zero.<P>
I don't have the space here to describe all the subtleties of class <I>streampos</I>. For now, I'll just show the code that goes with the class definition in <A href="list1.htm">Listing 1</a>.
 <A href="list2.htm">Listing 2</a>
shows the class constructor. I've augmented the required definition with an optional second argument, to ease interfacing with the Standard C library.<P>
<A href="list3.htm">Listing 3</a>
shows the function <I>streampos::offset()</I>. Note that it ignores the algebraic offset _<I>Pos</I> if the absolute position <I>_Fp._Off</I> is invalid. (Yes, the names are backwards.)<P>
Similarly, <A href="list4.htm">Listing 4</a>
shows the function <I>streampos::operator-(const   streampos&amp;</I>). It too yields _<I>BADOFF</I> if either file position is undefined. Sadly, there is no easy way to distinguish an invalid return from the very sensible difference &#151;1.<P>
Finally, <A href="list5.htm">Listing 5</a>
shows the function <I>streampos::operator==(const   streampos&amp;</I>). Note that an invalid file position always compares equal to another invalid file position, and never compares equal to a valid one. The equality check for valid file positions may be too exacting, but I don't think so.<P>
<h4><FONT COLOR="#000080"><A name="0118_008F">The Class <B><I>streambuf</I><A name="0118_008F"></B></FONT></h4></P>
I could devote multiple columns to class <I>streambuf</I>, and I probably will. But I intend to save many of the details for columns that describe classes <I>derived</I> from <I>streambuf</I>. For now, I focus on what you need to know to understand how this class functions as a base class for more interesting offspring. That's a hard enough tale to tell in this limited space.<P>
Conceptually, every <I>streambuf</I> object controls an input stream and an output stream. Often, one of the two streams doesn't really exist. All operations on the nonexistent stream simply fail. If there are indeed two streams, there need be no connection between them, but usually there is. Each stream can maintain a separate position indicator, but they can also be tied together and move in concert.<P>
Class <I>streambuf</I> describes a very general engine for managing input and output character sequences. The class offers a public interface for civilian use. Typically, the inserters associated with an <I>ostream</I> object, such as <I>cout</I>, call on parts of this public interface to "insert characters into an output sequence." And the extractors associated with an <I>istream</I> object, such as <I>cin</I>, call on other parts of this public interface to "extract characters from an input sequence."<P>
You may never have occasion to use this interface yourself. Even if you write your own inserters and extractors, you often do the low-level work by calling on existing inserters and extractors. In fact, I'd discourage you from making direct calls on a <I>streambuf</I> object, at least until you've had time to study some existing inserters and extractors and really understand the protocol. Any abstract description you read will never compare to first-hand practical experience. For now, I'll characterize the public interface to class <I>streambuf</I> in the briefest of terms.<P>
When extracting from a sequence:<P>
<UL><li>Peek at the next character by calling <I>sgetc()</I>, extract (and point past) it by calling <I>sbumpc()</I>, or put back the last character <I>ch</I> you extracted by calling <I>sputbackc(ch)</I>.</li>
<li>Read up to <I>n</I> characters into a buffer <I>buf</I> by calling <I>sgetn(buf, n)</I>. The return value tells you how many characters you actually read.</li>
<li>For various reasons of performance or reliability, avoid calling <I>snextc()</I> or <I>sungetc()</I>. Also avoid calling <I>sputbackc(ch)</I> except as I described above.</li></UL>
When inserting into a sequence:<P>
<UL><li>Write a character <I>ch</I> by calling <I>sputc(ch)</I>.</li>
<li>Write up to <I>n</I> characters from a buffer <I>buf</I> by calling <I>sputn(buf, n)</I>. The return value tells you how many characters you actually wrote, which should always be <I>n</I>.</li></UL>
To position within a sequence, you use the functions <I>pubseekoff</I> and <I>pubsetpos</I>. An argument of type <I>ios::seekdir</I> (or <I>ios::seek_dir,</I> as I discussed last month) can take the values <I>ios::beg, ios::cur</I>, or <I>ios::end</I>. If you know how to call <I>fseek</I>, you can quickly guess what these mean. (And if you don't, you probably shouldn't try to guess.) An argument of type <I>ios::openmode</I> (yet another misnomer) has <I>ios::in</I> set to affect the input sequence, and <I>ios::out</I> set to affect the output sequence. The effect of various combinations of arguments depends very strongly on the actual type derived from the base <I>streambuf</I>.<P>
Similarly, the functions <I>pubsetbuf</I> and <I>pubsync </I>are really just hooks into virtual functions that are specialized for derived classes. The default behavior for the base class is to do nothing.<P>
<h4><FONT COLOR="#000080"><A name="0118_0090">Underground <B><I>streambuf</I><A name="0118_0090"></B></FONT></h4></P>
So much for the public interface. Class <I>streambuf</I> also offers a protected interface which is even more sophisticated. You care about this interface, naturally enough, only if you derive your own class from a <I>streambuf</I> base. (That's the only way you can even <I>access</I> this interface.)<P>
The first part of the protected interface you can, and should, pretty much ignore. It is used by the public members to conduct their business. Here again you will find a number of funny names and irregularities. But that should be of no concern to the typical user of a class derived from <I>streambuf</I>. Look at the public member functions, nearly all of which are inlined, to get a feel for what they do, if you care.<P>
You might note, in passing, that the constructors for class <I>streambuf</I> are protected. That keeps you from constructing an object of this class outside captivity. The idea is to derive from the base class and specialize it to perform useful operations. (I discussed the special magic about constructors with argument type <I>_Uninitialized</I> last month.)<P>
The second part of the protected interface is where the action is. Class <I>streambuf</I> is built around a set of virtual member functions that allow you to tailor behavior over a very wide range. Here is where insertions get turned into actual writes to some physical sink for characters. Here is where extractors get turned into actual reads from some physical source of characters. Here is where positioning operations get real, or those other hooks get something hung upon them. In short, the art of specializing <I>streambuf</I> is the art of writing virtual member functions that honor the basic protocol of the base class.<P>
Until the draft C++ Standard came along, there was only one way to specialize a <I>streambuf</I>. Find some code for another specialization that more or less worked, and that you could more or less understand, and crib like crazy. Having access to the source for <I>streambuf</I> proper also helped.<P>
Now you have a little help. You can read the draft C++ Standard to learn the protocol that must be honored by these virtual member functions. <I>Then</I> you can go look at some specialization that works and that you can more or less understand, and crib like crazy. I can't honestly recommend any other way to proceed.<P>
Why is this so? Because describing the protocol for the <I>streambuf</I> virtual member functions is the hardest piece of standardese I've ever essayed. Jerry Schwarz, the original author of iostreams, is still not happy with what I wrote. I think it's getting reasonably accurate and precise, but I'd never accuse this part of the draft of being a decent tutorial. Learning by imitation &#151; and by doing &#151; is still the safest route.<P>
Having said that, I'll give you just the briefest of hints about what the four most critical virtual member functions do:<P>
<UL><li><I>overflow(ch)</I> either writes the character <I>ch</I> to the physical sink of characters, somehow, or it "makes a write position available" (creates an in-memory buffer with a space available for writing a character) and puts the character in it.</li>
<li><I>pbackfail(ch)</I> either writes the character <I>ch</I> back to the physical source of characters, somehow, or it "makes a putback position available" (creates an in-memory buffer with a space available for putting back a character) and puts the character in it.</li>
<li><I>underflow()</I> either reads a character from the physical source of characters without consuming it, somehow, or it "makes a read position available" (creates an in-memory buffer with a character available for reading) and reads the character from it without consuming it.</li>
<li><I>uflow()</I> either reads a character from the physical source of characters and consumes it, somehow, or it "makes a read position available" (creates an in-memory buffer with a character available for reading) and reads and consumes a character from it.</li></UL>
<h4><FONT COLOR="#000080"><A name="0118_0091">Implementing <B><I>streambuf</I><A name="0118_0091"></B></FONT></h4></P>
In principle, an object of class <I>streambuf</I> stores six pointers. These point at the beginning, current character, and just past the end of the input and output buffers. In practice, I found it desirable to add a level of indirection. You will notice in <A href="list1.htm">Listing 1</a>
that the class indeed has six private pointer members. It also has six private pointers to pointers to <I>char.</I> And it is these indirect pointers that the protected member functions use to access characters in in-memory buffers.<P>
I chose this more ornate implementation to permit a very important optimization. Remember, I said earlier that a principal use for <I>streambuf</I> objects is to work in concert with C-style streams controlled by objects of type <I>FILE</I>. The obvious way to do so is to derive a class whose virtual member functions call <I>fgetc, fputc</I>, etc. for the corresponding <I>FILE</I>. But that is terribly inefficient. A better way, when possible, is to have both the <I>streambuf</I> and <I>FILE</I> objects control exactly the same set of pointers into exactly the same buffers.<P>
This I have been able to do with my implementation of the Standard C library. The cost is this extra level of indirection within class <I>streambuf</I>. The payoff is substantially improved performance for C++ iostreams when reading and writing files. I consider it a good tradeoff.<P>
So the six indirect pointers point directly inside a <I>FILE</I> object, whenever possible, as I will show at a later date. In this case, the six character pointers are ignored. Otherwise, the six indirect pointers point at the six character pointers.<P>
<A href="list6.htm">Listing 6</a>
shows the file <I>streambu.c.</I> It contains all the functions needed to implement the base class <I>streambuf</I>. Most are dummy functions that either fail or do something innocuous. The two flavors of the secret function <I>_Init</I> give you some hint of the two ways to use the six pointers that I just described.<P>
If you don't understand <I>streambuf</I> yet, don't worry. Its use will become clearer as you see some of the ways it is specialized later in the Standard C++ library.<P>

<h4><a href="../../../source/1994/jun94/plauger.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
