<HTML><HEAD>
<TITLE>June 1994/Multi-Precision Integer Arithmetic Using C++/Listing 4</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 4 <I>Overloading of </I>operator&lt;</A></h4>
<pre>/*  signed comparison : lint1 &lt; lint2
   (assumes normalized operands)
   --------------------------------- */
int LargeInt::operator&lt;(const LargeInt&amp; lint) const {
   if (sign &lt; lint.sign)
      return 1;
   if (sign &gt; lint.sign)
      return 0;
// at this point, the signs are the same
   if (sign == 0)
      return 0;
   if ((sign == -1 &amp;&amp; len &gt; lint.len) ||
      (sign == 1 &amp;&amp; len &lt; lint.len))
      return 1;
   if ((sign == -1 &amp;&amp; len &lt; lint.len) ||
      (sign == 1 &amp;&amp; len &gt; lint.len))
      return 0;
// here the signs and the lengths are both the same
   int compare = memcmpInt(adr, lint.adr, len);
   if ((sign == 1 &amp;&amp; compare &lt; 0) ||
      (sign == -1 &amp;&amp; compare &gt; 0))
      return 1;
   return 0;
}

/* signed comparison : lint &lt; 123
   ------------------------------- */
int LargeInt::operator&lt;(int num) const {
   LargeInt test;
   test = num;
   return *this &lt; test;
}
/* End of File */
</pre>
</BODY>
</HTML>
