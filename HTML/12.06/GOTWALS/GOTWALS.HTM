

<HTML>
<HEAD>

<TITLE>June 1994/Multi-Precision Integer Arithmetic Using C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjun.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Scientific/Numerical Applications</FONT></H2>

<hr><h2 align="center"><font color="#800000">Multi-Precision Integer Arithmetic Using C++<A name="0112_0086"><A name="0112_0086"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0112_0000"><A name="0112_0000">John K. Gotwals</font></h3><hr><blockquote><P>
<P><i><A name="0112_0000"><A name="0112_0000">The author has a Ph.D. in physics, and has worked with computers for 30 years. He is an associate professor of computer technology at Purdue University. His current interests are object-oriented programming using C++, and Windows programming using Visual C++. You may contact him by mail at CPT Dept., Knoy 242, Purdue University, W. Lafayette, IN 47907 or by e-mail at gotwal s@vm.cc.purdue.edu.</i></P><P>
<h4><FONT COLOR="#000080"><A name="0112_0087">Introduction<A name="0112_0087"></FONT></h4></P>
In the last few years a need has developed for programming packages that can carry out integer arithmetic involving hundreds or thousands of digits. The advent of the RSA public-key crypto-system has contributed to this need by creating interest in factorization and testing for primality. Multi-precision arithmetic also allows researchers to observe patterns that appear in calculations, formulate conjectures about the patterns, and perhaps find counter-examples to others' erroneous conjectures.<P>
This article describes the implementation and usage of a multi-precision integer arithmetic package on a 32-bit computer running Windows NT. I've written the high-level portions of the package in C++; I've found a clear and compelling reason for using C++ when operator overloading leads to a simplified programming interface. The system can perform arithmetic with integers of any reasonable length. For reasons to be discussed shortly, I've written the low-level routines in assembly language, but the interfaces to these routines are fully documented in the complete package. I've built and tested this package with Microsoft's 32-bit Visual C++, version 1.0, and I've made the full version, including assembly language source, available on the <I>CUJ</I> monthly code disk. I've also included a program (<A href="list1.htm">Listing 1</a>)
 to demonstrate the capabilities of this package.<P>
<h4><FONT COLOR="#000080"><A name="0112_0088">Design Issues and Implementation Choices<A name="0112_0088"></FONT></h4></P>
This design uses the signed-magnitude representation for numbers, in which negative and positive numbers of the same magnitude receive identical representation except in their signs. The implementation represents negative, zero, and positive numbers by sign values of -1, 0, and +1 respectively. Furthermore, the implementation assumes that at the end of every arithmetic operation the result will be normalized. With the exception of zero, a normalized number is one that does not have any leading zero digits. Zero is a special case and consists of one digit which contains zero.<P>
The design process always involves tradeoffs between such things as performance, portability, size, ease of implementation and ease of use. In any extended-precision system it is necessary to detect overflow or underflow before applying a carry or borrow to the next most-significant digit. Since C doesn't provide a standard and efficient way to detect overflow in computations involving unsigned operands, I decided to implement the low-level arithmetic routines in assembly language. (I also used assembly language for performance reasons.)<P>
The use of assembly language threatens to make a good portion of the system non-portable, and to throw me into the nefarious intricacies of extended-precision arithmetic at the CPU register level. To avoid this scenario in my particular implementation, I "wrap" a multiple-precision integer as an object of the <I>LargeInt</I> class. As shown in <A href="list2.htm">Listing 2</a>,
 just below the access specifier <I>private:</I>, each object of this class contains a pointer (<I>adr</I>) to the most significant digit of a radix-2<SUP>32</SUP> multi-precision integer, a count (<I>len</I>) of the number of radix-2<SUP>32</SUP> digits, and the sign of the <I>LargeInt</I> object.<P>
My implementation allocates memory for multi-precision integers from the heap. Since the arithmetic and assignment operations will always result in the creation and deletion of <I>LargeInt</I> objects, a large amount of heap activity occurs during program execution. I made no attempt to provide for a custom memory manager, since preliminary measurements made while running under Windows NT indicated a performance hit of only about 10% from the system memory manager.<P>
<h4><FONT COLOR="#000080"><A name="0112_0089">Constructing a Multi-Precision Integer<A name="0112_0089"></FONT></h4></P>
<A href="list2.htm">Listing 2</a>
shows the header file for the <I>LargeInt</I> class and lists the five <I>LargeInt</I> constructors available for creation of multi-precision integers. The following example invokes all five contractors to create and initialize <I>n1</I> through <I>n5</I>. In this code fragment the default constructor initializes <I>n1</I> to zero and the copy constructor is used to initialize <I>n5</I> with the value contained in <I>n4</I>:<P>
<pre>LargeInt nl, n2 = -123, n3 = 1234u;
LargeInt n4 = "12345678901234567890";
LargeInt n5 = n4;</pre>
Note that although<I> n4</I> has been initialized with a string constant, it could have been initialized from a file input buffer. The only upper limit on the string initializer's length (assuming adequate virtual memory) is the maximum length that can be returned by <I>strlen</I>. The string initializer is converted from decimal to radix-2<SUP>32</SUP> binary via the C function <I>strtoul</I>, which converts blocks of nine decimal digits (starting at the left of the string) at a time to binary. The constructor adds each converted block to the radix-2<SUP>32</SUP> multiple-precision integer, and multiplies the resultant integer by 10<SUP>9</SUP>. The <I>LargeInt</I> member function <I>decToBin</I> carries out the conversion. A portion of this code is presented in <A href="list3.htm">Listing 3</a>.
<P>
<I>decToBin</I> uses Homer's method to evaluate a polynomial whose coefficients are formed from blocks of nine decimal digits each. (Note that the listing does not include the code which picks off the optional sign from the front of the string, gets rid of any leading zeros, and tests for the special case of zero.) <I>str</I> is the address of the string to be converted, <I>PackFactor</I> is a constant with a value of 9 for a 32-bit system, and the implicit <I>this</I> pointer points to the <I>LargeInt</I> object, which contains the result of the conversion.<P>
<h4><FONT COLOR="#000080"><A name="0112_008A">Comparing Multi-Precision Integers<A name="0112_008A"></FONT></h4></P>
Almost any calculation creates a need to perform arithmetic comparisons. Because C++ has provisions for overloading operators, a multi-precision comparison of <I>lint1</I> with <I>lint2</I> can be as simple as writing the code<P>
<pre>if (lint1 &lt; lint2)
// do this
else
// do this</pre>
As currently written the <I>LargeInt</I> package overloads only the <I>==</I> and <I>&lt;</I> operators, but additional comparison operators could be easily added. In this implementation, the left operand must be a <I>LargeInt</I> object, but the right operand can be either another <I>LargeInt</I> object or the built-in <I>int</I> type. <A href="list4.htm">Listing 4</a>
contains the code for the overloading of the operator <I>&lt;</I>.<P>
The routine begins by checking the signs and number of radix-2<SUP>32</SUP> digits of each operand. Only if the signs and lengths are the same is it necessary to perform a digit-by-digit compare. Although the code is fairly simple, I endured a fair amount of mental anguish while testing until I realized that I could not use the system <I>memcmp</I> function to compare digits, since it compares bytes instead of 32-bit words. See the bottom of <A href="list2.htm">Listing 2</a>
for the definition of the <I>memcmpInt</I> function.<P>
<h4><FONT COLOR="#000080"><A name="0112_008B">Multi-Precision Arithmetic<A name="0112_008B"></FONT></h4></P>
As shown in <A href="list2.htm">Listing 2</a>,
 <I>LargeInt </I>objects can participate in the standard signed arithmetic operations of addition, subtraction, multiplication and division by using the overloaded operators <I>+, -</I>, <I>*</I>, and /. In addition, I've also overloaded the modulus, multiply assignment, and unary minus operators <I>%</I>, <I>*=</I>, and -, although the <I>*=</I> operator requires the right operand to be of type <I>int</I>. The code for the overloading of the <I>*</I> operator is given in <A href="list5.htm">Listing 5</a>.
<P>
The <I>* </I>routine performs three steps:<P>
1.     Check whether either operand is zero (in which case, the routine is essentially finished).<P>
2.     Create a <I>LargeInt</I> result with sufficient space to hold the product.<P>
3.     Determine the sign of the result, and call the low-level <I>multiply</I> routine.<P>
As shown by <I>multiply'</I>s prototype at the top of the listing, <I>multiply</I> takes five parameters. Pointers <I>u</I> and <I>v</I> point to the multipliers, <I>w</I> points to their product, and <I>n</I> and <I>m</I> are the number of radix-2<SUP>32</SUP> digits for <I>u</I> and <I>v</I> respectively.<P>
The low-level <I>multiply</I> routine is shown in <A href="list9.htm">Listing 9</a>.
 (The full assembly language source for all routines is provided on the code disk.) The <I>LargeInt</I> package includes several additional useful functions such as <I>powerTwo, sqrt, divRem,</I> and <I>evalFrac</I>. These functions' prototypes are given in <A href="list2.htm">Listing 2</a>.
 The <I>friend</I> function <I>divRem</I> performs division between <I>LargeInt</I> variables, but unlike the division operator, <I>divRem</I> generates both the quotient and the remainder. The <I>friend</I> function <I>evalFrac</I> evaluates the fraction <I>u/v</I>, where <I>u</I> and <I>v</I> are both multi-precision integers, to any desired precision. This function is useful when you want to approximate some quantity with the rational number <I>u/v</I>.<P>
<h4><FONT COLOR="#000080"><A name="0112_008C">Binary to Decimal Conversion<A name="0112_008C"></FONT></h4></P>
In the factorial calculation program shown in <A href="list1.htm">Listing 1</a>,
<I> LargeInt</I> variable <I>result</I> contains the factorial of a number that was entered by the user. To convert this result to a decimal number, the statement<P>
<pre>result.binToDec(buf, bufSize)</pre>
calls the <I>binToDec </I>function with parameter <I>buf</I> pointing to an output string buffer and <I>bufSize</I> equal to the size of the string buffer. The function<I> binToDec</I> converts the radix-2<SUP>32</SUP> integer into a decimal integer string and stores the string in the buffer. The function returns <I>buf</I> if the conversion is successful, but if there is insufficient string buffer space, the conversion process is halted and <I>binToDec</I> returns <I>NULL</I>.<P>
A description of the binary to decimal conversion procedure is as follows: The routine creates blocks of nine decimal integers at a time by dividing<I> result</I> repeatedly by 10<SUP>9</SUP> and stopping when the final quotient is zero. After each division the routine calls <I>sprintf</I> to convert the remainder from the division to a string of nine decimal digits. Each string of nine digits is stored at successive positions in the string buffer, and the quotient from the division becomes the dividend for the next division. Since this conversion procedure generates the least-significant block of digits first and the most-significant block last, the output string must be reversed, in blocks of nine.<P>
<A href="list6.htm">Listing 6</a>
contains the code for the binary to decimal conversion. (Code to remove leading zeros from the result string and possibly insert a minus sign has been omitted from this listing.) <I>PackFactor</I> is a constant with a value of <I>9</I> for a 32-bit system. Since the <I>Largelnt</I> object to be converted may not be changed, the routine must create a copy (stored in variable <I>copy</I> in the listing). The low-level division routine <I>divrem</I> carries out the real work of the conversion process. <I>divrem'</I>s prototype is shown at the top of <A href="list6.htm">Listing 6</a>.
<P>
This routine divides the m-place integer pointed at by <I>u</I> by the single-precision integer <I>v</I>. When the function has finished the division, the dividend has been replaced by the quotient and the remainder is returned on the stack.<P>
<h4><FONT COLOR="#000080"><A name="0112_008D">Testing<A name="0112_008D"></FONT></h4></P>
Testing a package of this type is difficult. As an example, the low-level <I>divide</I> function is quite complex and consists of over 200 lines of assembly language code with a fair number of conditional branches. The code is a derivative of a program by Knuth which was written for his fictional MIX computer. Knuth has written that "some portions of that program would probably never get tested even if a million random test cases were tried." Since I developed this package for "recreational computing," my main method of testing was to run some programs which have known results.<P>
For very basic debugging and testing, the function <I>lintDump</I> displays the sign and hex contents of each radix-2<SUP>32</SUP> digit. The following code fragment provides an example; the output can be checked by using a scientific calculator.<P>
<pre>LargeInt n1 = "-12345678901234567890";
printf ("n1 = ");
n1.lintDump();
// n1: sign = -1 AB54A98C EB1F0AD2</pre>
At a more advanced level of testing, a test program can use the <I>sqrt</I> function to take the square root of a large integer, square the result and compare it with the original. <A href="list7.htm">Listing 7</a>
shows a surprisingly simple function from this package which uses Newton's method to compute the square root of an integer. Using this function will exercise the add, multiply, and divide operations.<P>
A CPU resource-intensive test is the Lucas-Lehmer algorithm for testing primality of a Mersenne number. Mersenne numbers are those of the form 2p - 1. The Lucas-Lehmer test determines if for a particular prime number <I>p</I>, the corresponding Mersenne number is also prime. <A href="list8.htm">Listing 8</a>
shows a program which asks the user to enter a prime number and then determines if 2p - 1 is prime. This program calls the <I>timer</I> function to measure execution time, and the <I>if</I> statement inside the <I>for</I> loop displays information about the progress of the calculation.<P>
<h4><FONT COLOR="#000080"><A name="0112_008E">Performance<A name="0112_008E"></FONT></h4></P>
A program which can calculate and display the factorial of any reasonably sized number is given in <A href="list1.htm">Listing 1</a>.
 (The <I>bufSize</I> constant will have to be adjusted if the result contains 50,000 or more digits.)<P>
Although this package performs signed arithmetic on integers of almost any length, as the precision increases the processing time will also increase, and probably in a nonlinear fashion. This time increase is illustrated by the program in <A href="list1.htm">Listing 1</a>.
 <A href="tab1.htm">Table 1</a>
summarizes the data obtained from several different runs on a 33Mhz 486DX computer under Windows NT. Note the significant amount of time needed to perform the binary to decimal conversions.<P>
The Lucas-Lehmer primality test is another CPU-intensive process. Although the algorithm is simple, the program processes large numbers. <A href="tab2.htm">Table 2</a>
shows some representative times.<P>
<h4><FONT COLOR="#000080"><A name="0112_008F">Conclusion<A name="0112_008F"></FONT></h4></P>
Using C++ to overload the arithmetic operators and to create a <I>LargeInt</I> class of extended precision integer objects provides an easy-to-use package for multi-precision integer arithmetic. A package of this type allows the user to carry out calculations that are simply not feasible with most standard languages.<P>
Be forewarned that your calculation results may sometimes be challenged. After calculating and printing all 1,512,852 digits of 300,000 factorial, I proudly showed the results to my neighbor. After looking at several pages of the output, he stopped on page 367 and circled one of the numbers with his pen. He then informed me that my output was wrong, because the digit he circled should be a "4" and not a "3" as was represented by my calculations. We had quite a heated exchange of words, and he told me that I could only make him change his mind by redoing the calculations by hand!<P>
<h4>References</FONT></h4></P>
Bressoud, D., <I>Factorization and Primality Testing</I>, SpringerVerlag, 1989.<P>
Knight, D., "An Ada Package for Multi-Precision Integer Arithmetic," <I>SIGSMALL/PC Notes</I>, ACM Press, Nov. 1993.<P>
Knuth, D., <I>The Art of Computer Programming, Volume 2</I>, Addison-Wesley, 1981.<P>
Nievergelt, J., Farrar, J., Reingold E., <I>Computer Approaches to Mathematical Problems</I>, Prentice-Hall, 1974.<P>

<h4><a href="../../../source/1994/jun94/gotwals.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY>
</HTML>
