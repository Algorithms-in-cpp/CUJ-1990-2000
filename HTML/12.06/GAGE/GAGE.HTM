

<HTML>
<HEAD>

<TITLE>June 1994/Divided-Difference Interpolation</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjun.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Scientific/Numerical Applications</FONT></H2>

<hr><h2 align="center"><font color="#800000">Divided-Difference Interpolation<A name="010C_0084"><A name="010C_0084"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="010C_0000"><A name="010C_0000">Philip Gage</font></h3><hr><blockquote><P>
<P><i><A name="010C_0000"><A name="010C_0000">Philip Gage is a software engineer in Colorado Springs, currently developing Ada graphics software with X Windows. He has a BS degree in computer science from the University of Colorado and eleven years programming experience developing FORTRAN, BASIC, Pascal, C, and Ada programs on a variety of platforms. His programming interests include data compression, algorithms, graphics, and compiler design. He has written an article, "A New Algorithm for Data Compression," in the February 1994 issue of The C Users Journal.</i></P><P>
<h4><FONT COLOR="#000080"><A name="010C_0085">Introduction<A name="010C_0085"></FONT></h4></P>
Interpolation is the process of estimating values between known values, and has many practical uses. The same process is called extrapolation if the estimated value lies outside the range of known values.<P>
This article describes an algorithm that generates interpolation functions using Newton's method of divided differences. The algorithm inputs a set of (<I>x,y</I>) data points and outputs a polynomial function <I>y = f(x)</I> of any desired degree which defines a curve through or near the points.<P>
The method of divided differences can be extended to generate other useful classes of functions, including the exponential and factorial. These techniques form a powerful set of tools for interpolation, extrapolation, curve fitting, and numerical analysis. Such techniques are well known to mathematicians but may be new to most programmers.<P>
The method of finite differences was first described centuries ago by the famous mathematician Sir Isaac Newton. The Difference Engine, an early computer built by Charles Babbage and programmed by Lady Ada Lovelace, used the difference method to print tables of values for many kinds of functions.<P>
Differences can also be used for differentiation, integration, correcting errors in tables, and other purposes. Such difference techniques were widely used for their power and efficiency before modern computers became available.<P>
Most of us have faced this type of problem, "Given the numbers 1, 3, 6, 10, what is the next number in the series ?" After some thought, we realize that the differences between the numbers are increasing 2, 3, 4. Therefore, the next difference should be 5 and the next number should be 15.<P>
This example illustrates a profound mathematical law, that subtracting adjacent values can reduce data complexity to a simple relationship that allows backtracking to fill in additional data values. This is actually a form of numerical differentiation, but you don't need to know any calculus to understand the method, just a little algebra.<P>
<h4><FONT COLOR="#000080"><A name="010C_0086">Polynomials<A name="010C_0086"></FONT></h4></P>
The method of differences is associated with an important class of functions called polynomials. Recall from high school algebra that a polynomial <I>y = f(x)</I> has the following form:<P>
<pre><I>c</I><SUB>0</SUB> + <I>c</I><SUB>1</SUB><I>x</I> + <I>c</I><SUB>2</SUB><I>x</I><SUP>2</SUP> + <I>c</I><SUB>3</SUB><I>x</I><SUP>3</SUP>+ ... + <I>c</I><SUB>n</SUB><I>x</I><I><SUP>n</SUP></I></pre>
where <I>c</I><SUB>0</SUB>, <I>c</I><SUB>1</SUB>, ... are constant numbers called coefficients. The degree of each term is the exponent of <I>x</I>, and the degree of the polynomial is that of the highest degree term.<P>
The first difference (usually denoted by <FONT FACE="Symbol" SIZE=2>D</FONT>, the Greek letter delta) of a set of (<I>x,y</I>) values with evenly spaced <I>x</I> coordinates is obtained by subtracting adjacent <I>y</I> values. Using C array notation, the <I>y</I> values are<I> y[0], y[1]</I>, ...<P>
Higher-order differences are calculated similarly by subtracting previous differences, as shown for the function <I>y = x</I><SUP>2</SUP> in <A href="tab1.htm">Table 1</a>.
 Each entry in a triangular matrix is computed as the difference of the two entries to its left, starting with the original y values as the zeroth difference.<P>
First difference of <I>y[n]</I>:<P>
<pre>y[n+1] - y[n]</pre>
Second difference of <I>y[n]</I>:<P>
<pre>(y[n+2] - y[n+1]) - (y[n+1] - y[n])</pre>
Assuming the set of data points follows a polynomial distribution, each difference operation reduces the degree of the polynomial by one. The first difference of an <I>n</I>-th degree polynomial is a polynomial of degree <I>n</I>--1, the second difference is a polynomial of degree <I>n</I>--2, and so on. The <I>n</I>-th difference is a constant, and all higher differences are zero. The difference interpolation method thus has the advantage that an underlying polynomial distribution in the data is easily detected by the presence of a constant difference.<P>
<h4><FONT COLOR="#000080"><A name="010C_0087">Babbage's Method<A name="010C_0087"></FONT></h4></P>
Additional (<I>x,y</I>) values can be derived easily from a difference table by reversing the process. In <A href="tab1.htm">Table 1</a>,
 the second difference is a constant 2. Therefore, the next first difference value is 9 + 2 = 11. The next y value is 25 + 11 = 36. This is precisely the method used by Babbage's Difference Engine to print tables of polynomial values efficiently, using only addition.<P>
If the <I>n</I>-th difference of a data set is constant, the data can be represented by a polynomial of degree <I>n</I>. Every set of <I>n</I>+1 points can be generated by a polynomial with degree of at most <I>n,</I> since the last difference column has only one entry and is therefore a constant difference.<P>
The <I>n</I>-th degree polynomial term can be determined from this constant difference. All other terms of degree <I>n</I>--1 and lower have been reduced to zero and filtered out of the data. Only the effect of the highest order term remains. If the <I>n</I>-th difference is a constant <I>c</I> and the <I>x</I> values are uniformly spaced a distance <I>h</I> apart, the high-order term is given by:<P>
<pre><I>(cx</I><I><SUP>n</SUP></I><I>)/(h</I><I><SUP>n</SUP></I><I>n!)</I></pre>
Once the high-order term is identified, it can be removed from the data set by evaluating the term at each <I>x</I> point and subtracting it from the corresponding <I>y</I> value, reducing the polynomial order of the data by one. This process is then repeated, solving each high order term and removing it from the data, until the <I>y</I> values are reduced to zero and the complete solution is known. There are other ways of determining the interpolating polynomial from a table of differences, but this method is simple and intuitive.<P>
To illustrate the overall solution method, consider the arithmetic series 1, 3, 6, 10. Assuming x values beginning at 1, we can build a simple difference table. The first differences are 2, 3, 4, ... Thus, the second difference is a constant 1, and the high-order term is given by:<P>
<pre>(cx<SUP>n</SUP>) / (h<SUP>n</SUP>n!) = (1x<SUP>2</SUP>) / (1<I><SUP>2</SUP></I>2!) = 0.5x<SUP>2</SUP></pre>
Evaluating the term 0.5 <I>x</I><SUP>2</SUP> at each <I>x</I> value and subtracting from the original y values gives a difference table with a constant first difference of 0.5. So the high-order term is given by:<P>
<pre>(cx<SUP>n</SUP>) / (h<SUP>n</SUP>n!) = (0.5x<SUP>1</SUP>) / (1<I><SUP>1</SUP></I>1!) = 0.5x</pre>
Subtracting 0.5 <I>x </I>from the remaining <I>y </I>values leaves all zeros, so the complete solution is<P>
<pre>0.5x<SUP>2</SUP> + 0.5x</pre>
<h4><FONT COLOR="#000080"><A name="010C_0088">Divided Differences<A name="010C_0088"></FONT></h4></P>
One limitation of the difference method is that the <I>x</I> values must be ordered and evenly spaced. This restriction can be removed by using divided differences. If each difference value is divided by the <I>x</I> interval it spans, the result is called a divided difference. See <A href="tab2.htm">Table 2</a>.
 First divided difference of <I>y[n]</I>:<P>
<pre>(y[n+1] - y[n]) / (x[n+1] - x[n])</pre>
Second divided difference of <I>y[n]</I>:<P>
<pre>((y[n+2] - y[n+1]) - (y[n+1] - y[n]))
    / (x[n+2] - x[n])</pre>
If the <I>n</I>-th divided difference is a constant <I>c</I>, the high-order term is<I> c x</I><I><SUP>n</SUP></I>.<P>
<h4><FONT COLOR="#000080"><A name="010C_0089">Exponentials<A name="010C_0089"></FONT></h4></P>
The method of differences can be extended from polynomial to exponential functions by a process I call the method of quotients, using division instead of subtraction. Similar to polynomials, but using different operators, this class of exponential functions has the form:<P>
<pre>c<SUB>0</SUB> * c<SUB>1</SUB><SUP>x</SUP> * c<SUB>2</SUB><SUP>x<I><SUP>2</SUP></I></SUP> * c<SUB>3</SUB><SUP>x<I><SUP>3</SUP></I></SUP> * ... * c<SUB>n</SUB><SUP>x<I><SUP>n</SUP></I></SUP></pre>
The first quotient is obtained by dividing adjacent <I>y</I> values. Higher-order quotients are calculated similarly by dividing previous quotients. Once a constant value is reached, all further quotients will be 1, as illustrated in <A href="tab3.htm">Table 3</a>.
<P>
First quotient of <I>y[n]</I>:<P>
<pre>y[n+1] / y[n]</pre>
Second quotient of <I>y[n]</I>:<P>
<pre>(y[n+2] / y[n+1]) / (y[n+1] / y[n])</pre>
If the <I>n</I>-th quotient is a constant <I>c</I>, with <I>x</I> values evenly spaced a distance<I> h</I> apart, the high order term is given by<P>
<pre>c<SUP>(x<I><SUP>n</SUP></I>)/(n!h<I><SUP>n</SUP></I>)</SUP></pre>
Each high-order term is removed from the <I>y</I> data values by division, instead of subtraction as with polynomials. When the data values are reduced to 1, the complete solution is known. The quotient method has the disadvantage that <I>y</I> values must be either all positive or all negative, since it is based on exponentials. If necessary, a constant can be manually added to the <I>y</I> values to normalize them to a positive or negative range before applying the algorithm.<P>
In the same manner as divided differences, a method I call root quotients can be used to remove the limitation that the <I>x</I> coordinates be uniformly spaced. Instead of division, the operation used is taking a root, as shown in <A href="tab4.htm">Table 4</a>.
 Taking the <I>n</I>-th root is equivalent to raising to the 1/<I>n</I> power.<P>
First root quotient of <I>y[n]</I>:<P>
<pre>(y[n+1] / y[n]) ^ 1/(x[n+1] - x[n])</pre>
If the <I>n</I>-th root quotient is a constant <I>c</I>, the high order term is given by<P>
<pre>c<SUP>x<SUP>n</SUP></SUP></pre>
<h4><FONT COLOR="#000080"><A name="010C_008A">Other functions<A name="010C_008A"></FONT></h4></P>
Besides polynomial and exponential, other classes of functions can be handled by similar methods. Performing one quotient operation followed by differences solves a class of factorial expressions. Doing differences before quotients handles the sum of an exponential and a polynomial function, by filtering out the polynomial terms without affecting the exponential terms.<P>
These methods can also be extended to handle functions of more than one variable, such as <I>z = f</I>(<I>x,y</I>), by a process equivalent to partial differentiation. This requires using multi-dimensional arrays for each difference or quotient, but is straightforward to program.<P>
<h4><FONT COLOR="#000080"><A name="010C_008B">Implementation<A name="010C_008B"></FONT></h4></P>
Pseudocode for the divided-difference and root quotient algorithms is shown in <A href="list1.htm">Listing 1</a>
and <A href="list2.htm">Listing 2</a>.
 <A href="list3.htm">Listing 3</a>
contains an interactive C program which generates both polynomial and exponential interpolation functions using these algorithms. For simplicity, error checking is minimal. You may want to add checks for dividing by zero and <I>pow</I> function errors. <A href="list4.htm">Listing 4</a>
shows the output from a typical run.<P>
The program prompts the user for a set of (<I>x,y</I>) points, asks whether a polynomial or exponential function is wanted, and requests the desired degree of the solution. Output is the interpolation function and a table of results comparing the original and interpolated values.<P>
To generate an exact solution which goes through all <I>n</I> points, use degree <I>n</I>--1. Lower-degree solutions will be approximations with some error, but may be accurate enough for many applications, such as curve fitting. To improve low-degree approximations, each coefficient is computed using the average of all the difference values assumed to be constant.<P>
The maximum number of data points is set to only ten since high-order interpolation functions tend to oscillate wildly and can produce bad results. Large data sets should be split into smaller ranges and interpolated separately. However, the difference and quotient algorithms cannot join segments together smoothly like some spline techniques.<P>
Function <I>interpolate</I> implements the divided-difference and root-quotient algorithms and returns an array of coefficients for the generated function. Since the code for both methods is very similar, it is combined, using a polynomial/exponential flag to control execution of the few expressions that differ. This program does not need to check for the appearance of a constant set of difference values, but simply generates a polynomial of the requested degree (or lower, since some coefficients may be zero).<P>
Function <I>evaluate</I> uses Horner's rule to evaluate a polynomial or exponential function at any <I>x</I> value, using the coefficient array returned by <I>interpolate</I>. This function can be called by applications to interpolate new data points.<P>
There are two print functions to print results for informational purposes, <I>print_function</I> prints the symbolic interpolation function term by term, while <I>print_table</I> prints a table of results comparing the original data with the interpolated values.<P>
<h4><FONT COLOR="#000080"><A name="010C_008C">Summary<A name="010C_008C"></FONT></h4></P>
The divided-difference algorithm is an effective method for generating polynomial solutions or approximations to a set of data points. The root quotient method works similarly for exponential functions. These methods can be extended to other classes of functions, such as factorial and functions of more than one variable, providing a flexible methodology for interpolation and extrapolation.<P>
<h4>References</FONT></h4></P>
1.     Levy, H., Lessman, F., F<I>inite Difference Equations,</I> Macmillan 1961.<P>
2.     Maron, M., <I>Numerical Analysis</I>, Macmillan 1982.<P>

<h4><a href="../../../source/1994/jun94/gage.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
