<HTML><HEAD>
<TITLE>June 1994/float-Precision Math Library/Listing 7</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 7 logf <I>and</I> loglof</A></h4>
<pre>/* logf function */
#include "xmath.h"

double _Logf(double x)
{                                /* compute ln(x) */
  int xexp;
  _Dvar xx;
  double r, r2;
  static const double rthalf = M_SQRT1_2;
  xx._D = X;
  /* Convert to double eliminates underflow */

  /* Test for special codes */
  if (x != x) {
       errno = EDOM;
       return x;
  }

  /* Start working before done looking for exceptions (will
   * throw away if x was not finite positive ) */
/* Pick out exponent field, such that value is normalized
between sqrt(.5) and sqrt(2) */
  xx._W[_D0] -= xexp = (xx._W[D0] &amp; _DMASK) -
       ((xx._W[_D0] &amp; _DFRAC) &lt; (((long *) &amp;rthalf)[_DO] &amp; DFRAC) ?
        (1 + _DBIAS) &lt;&lt; _DOFF:_DBIAS &lt;&lt; _DOFF);
  /* Assume Finite and positive */
  r = (xx._D - 1) / (xx._D + 1);

  if (x &lt;= 0) {
       if (x == 0) {
              errno = ERANGE;
              return -DBL_MAX;/* normally becomes -Inf */
       }
       errno = EDOM;
       return(float) DBL_MAX *0:       /* NaN */
  }
  xexp &gt;&gt;= _DOFF;

  if (x &gt; FLT_MAX) {           /* Inf */
       errno = ERANGE;
       return x;
  }
  r2 = r * r;
  /* Leave result in double to avoid losing significance; 32 bits
   * required according to IEEE extended single precision */
  /* Chebyshev economized fit log(x) = 2*(x-1)/(x+l)+ .... */
  return r + r + xexp * M_LN2 +
       (.66666816 + r2 * (.399748 + r2 * .29925)) * (r * r2);
}

float (logf) (float x) {
  return(float)_Logf(x);
}

float (log10f) (float x) {
  return(float) (M_LOG10E * _Logf (x));
}

/* End of File */
</pre>
</BODY>
</HTML>
