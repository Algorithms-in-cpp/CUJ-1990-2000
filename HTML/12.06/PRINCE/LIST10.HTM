<HTML><HEAD>
<TITLE>June 1994/float-Precision Math Library/Listing 10</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 10 sqrtf<I> function</I></A></h4>
<pre>/* sqrtf function */
#include "xmath.h"
#include &lt;limits.h&gt;

float (sqrtf) (float x) {    /* compute sqrt(x) */
  int xexp, big;
  _Dvar xd;
  double y, xxx, yy;
  union {
       float f;
       long 1;
  } xx;
  const static float c[] = {.415, .59, .83};

  xd._D = x;
  if (x != x || x &gt; FLT_MAX) return x; /* Nan arg */
  xexp = (xd._W[_D0] &gt;&gt; _DOFF) - _DBIAS;
  if (x &lt;= 0) {
       if (x == 0) return x;   /* +- 0 */
       errno = EDOM;
       return(float) DBL_MAX *0;  /* NaN result */
  }

  /* Frexp(x) */
  xd._W[_D0] = (xd._W[_D0] &amp; _DFRAC) | (_DBIAS &lt;&lt; _DOFF);
  big = xexp &amp; 1;               /* odd exponent adjustment */
  xx.f = c[big + 1] * (float) xd._D + c[big];
  /* Xx.f=ldexpf(xx.f,(exp-(exp&lt;0))/2) */
  xx.l += (xexp &gt;&gt; 1) &lt;&lt; _FOFF;
#if -INT_MAX == INT_MIN
#error "adjust right shift to simulate 2's complement"
#endif
  /* First iteration occasionally required for IEEE rounding */
  yy = xx.f;
  y = (x + yy * yy) * .5; /* sqrt(x)*yy approx to 4 sig digs */
  xxx = yy * yy * x;
  /* Heron's formula 2 more times */
  return((y * y + xxx) * (y * y + xxx) * .25 + y * y * xxx) /
     (yy * y * (y * y + xxx));
}

/* End of File */
</pre>
</BODY>
</HTML>
