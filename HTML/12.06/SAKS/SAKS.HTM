

<HTML>
<HEAD>

<TITLE>June 1994/Stepping Up To C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjun.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Stepping Up To C++<A name="011A_008E"><A name="011A_008E"></font></h2><P>
<h3 align="center"><A name="011A_0000"><A name="011A_0000">Designing Generic Container Classes, Part 1</h3><P>
<h3 align="center"><font color="#800000">Dan Saks</font></h3><hr><blockquote><P>
<P><i><A name="011A_0000"><A name="011A_0000">Dan Saks is the president of Saks &amp; Associates, which offers consulting and training in C++ and C. He is secretary of the ANSI and ISO C++ committees. Dan is coauthor of C++ Programming Guidelines, and codeveloper of the Plum Hall Validation Suite for C++ (both with Thomas Plum). You can reach him at 393 Leander Dr., Springfield OH, 45504-4906, by phone at (513)324-3601, or electronically at dsaks@wittenberg.edu.</i></P><P>
A container (or collection) is a data structure that holds other objects. Containers can be threaded data structures, like lists or trees, or tabular structures like vectors and matrices. More elaborate containers, such as hash tables, use a combination of tabular and threaded structures. Although different types of containers employ different storage and retrieval algorithms, they share many similar design and implementation problems.<P>
All but the simplest C or C++ programs use at least one container. Larger programs typically use an assortment of containers. For example, the cross-reference generator I presented in my two previous articles (which is hardly a large program) uses both a binary tree and linear lists. That program uses the tree to alphabetize the words in the cross-reference, along with one list for each word in the tree to hold the text line numbers on which that word occurred. Some systems use the same type of container for different purposes. For example, an operating system typically uses some queues to hold processes, and other queues to hold messages that are in transit between processes.<P>
Implementing a simple container, such as a queue, for a particular element type is not all that difficult. You can always look up how to do it in any of the numerous books on data structures available today. (In fact, the study of algorithms and data structures is one of the few areas where computing is truly a science rather than a black art.) However, by the time you implement a queue for a third or fourth different element type, you'll probably notice that the source code for all these queues is nearly identical, and that you may be wasting your time as you duplicate both source and object code. It would be nice to avoid that waste and duplication by implementing just one generic queue &#151; a queue that holds elements of any type &#151; and use that queue for all applications.<P>
C++ programmers tried for nearly a decade to write generic container classes using available language features, namely:<P>
<UL><li>void pointers</li>
<li>macros</li>
<li>inheritance and virtual functions</li></UL>
Unfortunately, these features cannot do the job satisfactorily. Consequently, Bjarne Stroustrup (the inventor of C++) proposed adding templates to C++ as a better tool for crafting generic container classes. Templates first appeared in commercially-available C++ compilers circa 1991 and are now generally available. Despite the sometimes frustrating dialectic variations across platforms that come with new language features, templates are indeed a better tool for writing generic containers.<P>
Of course, templates are not a panacea, and like most of C++, they aren't fool proof either. You may find that using templates increases compile and link times and produces surprisingly large executables. Fortunately, most of these problems have solutions, and discovering them is what makes life interesting.<P>
However, this series of articles is not just about templates; it's about the issues that arise in designing and implementing generic container classes. Using templates is only part of that picture. Many issues, such as time-space tradeoffs or preserving the abstractness of a container, transcend using templates. In fact, introducing templates into the discussion prematurely only clouds some of these issues.<P>
I've also found that understanding the past attempts to write generic containers without templates provides real insights into what templates can and cannot do for you. The earlier attempts were not total failures. Some of the techniques that evolved in the absence of templates are still useful, and work even better with templates.<P>
Thus, this series of articles presents an evolutionary approach to designing generic container classes. Starting with a rudimentary container class, I'll demonstrate a progression of techniques for repackaging that container as a generic. Each technique yields some useful results, but each also has flaws that motivate the search for improvements. In the end, I hope you'll find some useful insights and techniques that will help you use templates very effectively.<P>
<h4><FONT COLOR="#000080"><A name="011A_008F">A FIFO Queue<A name="011A_008F"></FONT></h4></P>
I'll use as my example a simple class that implements a FIFO (first-in-first-out) queue of elements of arbitrary type T. The queue provides the following operations:<P>
<UL><li><I>queue()</I> &#151; create an empty queue.</li>
<li><I>~queue()</I> &#151; discard all elements in a queue.</li>
<li><I>void append(const T &amp;e)</I> &#151; append element <I>e</I> to the end of a queue.</li>
<li><I>void clear()</I> &#151; discard all elements in a queue.</li>
<li><I>void print(ostream &amp;os) const</I> &#151; print all the elements in a queue to output stream <I>os</I>.</li>
<li><I>int remove(T &amp;e)</I> &#151; for a non-empty queue, remove an element from the head of the queue, place it in <I>e</I>, and return non-zero; for an empty queue, simply return zero without changing <I>e</I>.</li></UL>
As with most containers, the abstract notion of a queue has a variety of implementations. I've chosen a threaded implementation, as illustrated in <A href="fig1.htm">Figure 1</a>.
 Each cell object holds a queued element and a pointer to the next cell in the queue. The queue object itself is just a pair of pointers &#151; a pointer to each the first and last cell in the queue.<P>
Throughout, I'll consider two specific applications for the queue:<P>
1.     a queue of <I>int</I> (the primitive type)<P>
2.     a queue of <I>str</I> (a class for variable-length strings)<P>
Always remember that C++ tries to avoid arbitrary distinctions between user-defined types and built-in types. That is, it offers most of the features you need to fashion user-defined types that look and act very much like built-in types. (These features account for much of the complexity in C++.) Well designed generic containers should work equally well for all types, user-defined as well as pre-defined. Thus, I'll test the generic container against both.<P>
<A href="list1.htm">Listing 1</a>
shows the header that defines the first version of class <I>intq,</I> a queue of <I>int.</I> <A href="list2.htm">Listing 2</a>
shows <I>intq's</I> non-inline member function definitions.<P>
<I>intq_cell</I> is the auxiliary class for cell objects inside an <I>intq. intq_cell</I> has no public members. The keyword <I>private</I> is actually redundant because all members of a class (declared with the keyword <I>class</I> rather than <I>struct</I>) are private by default. In this case, I think the redundancy adds clarity. The <I>friend</I> declaration in <I>intq_cell</I> does not declare a member and is not subject to access control (declaring it <I>public</I> or <I>private</I> has no effect). <P>
The reason that <I>intq_cell</I> has no public members is so that applications using <I>intq</I> can't access <I>intq_cell</I> directly. An application that includes the <I>intq</I> header adds both <I>intq</I> and <I>intq_cell</I> to its global namespace. But applications should not manipulate <I>intq_cell</I> objects directly because <I>intq_cell</I> is an implementation artifact, not part of the <I>intq</I> interface.<P>
Since it has only private members, <I>intq_cell</I> is essentially unusable to all but its friends. In particular, <I>intq_cell's</I> constructor is private, so applications cannot call it. An application cannot create an <I>intq_cell</I> object directly (such as by a declaration or a <I>new</I>-expression) because that would invoke the <I>intq_cell</I> constructor, which is inaccessible.<P>
The <I>intq</I> class can create and use <I>intq_cell</I> objects because <I>intq_cell</I> declares <I>intq</I> as a friend, which means that every <I>intq</I> member function is a friend of <I>intq_cell</I>. Thus, <I>intq's </I>members can invoke the (private) <I>intq_cell</I> constructor when creating <I>intq_cell</I> objects.<P>
As I explained in an earlier column on nested classes (see "Stepping Up to C++: Nested Classes," <I>CUJ,</I> July 1993), I think nested classes are usually the better way to keep implementation classes like <I>intq_cell</I> out of the application's reach. Using forward-declared nested classes is even better. However, many good C++ programmers and authors still use private contructors and friend declarations. Furthermore, templates and nested classes don't always mesh together well. You may find that private constructors and friend declarations are the best solution to some awkward packaging problems.<P>
<A href="list3.htm">Listing 3</a>
shows the header that defines a first version of class <I>strq,</I> a queue of strings. <A href="list3.htm">Listing 3</a>
is identical to <A href="list1.htm">Listing 1</a>
(which defines class <I>intq</I>) except that <A href="list3.htm">Listing 3</a>
uses <I>str</I> instead of <I>int</I> nearly everywhere. The one place where <I>strq</I> does not use <I>str</I> instead of <I>int</I> is in the return type of the <I>remove</I> function. The <I>int</I> return type represents a boolean indicating whether <I>remove</I> successfully removed an element from the queue.<P>
I could have declared the <I>append</I> function in both <A href="list1.htm">Listing 1</a>
and <A href="list3.htm">Listing 3</a>
with a value parameter, of the form<P>
<pre>void append(T e);</pre>
rather than with a reference-to-const parameter of the form:<P>
<pre>void append(const T &amp;e);</pre>
Either way, append has the same outward behavior. Passing by value is probably faster when <I>T</I> is a primitive type like <I>int</I>, and passing by reference may be faster when <I>T</I> is a user-defined type with a constructor and destructor. (Binding a reference to an <I>lvalue</I> avoids creating a temporary which must later be destroyed.) I elected to write both <I>intq</I> and <I>strq</I> in the same style to make it easier to transform both into a single generic. I don't believe the performance penalty for passing an <I>int</I> by reference is much cause for concern in this instance.<P>
Just as <I>strq's</I> header is nearly identical to <I>intq's</I>, so are the corresponding member function definitions. Consequently, I did not list the<I> </I><I>strq</I><I> </I>member function definitions. You can produce them by simply replacing all occurrences of<I> </I><I>int</I> in <A href="list2.htm">Listing 2</a>
with <I>str</I> (except for the return type of <I>remove</I>).<P>
The class and inline member function definitions for my variable-length string class appear as <I>str.h</I> in <A href="list4.htm">Listing 4</a>,
 and the corresponding member function definitions appear as <I>str.cpp</I> in <A href="list5.htm">Listing 5</a>.
 A <I>str</I> object stores the text of a string in a character array allocated from the free store, as illustrated in <A href="fig2.htm">Figure 2</a>.
 Each <I>str</I> has a data member <I>ptr</I> that holds the address of the first character in the array, and another data member <I>len</I> that holds the length of the string. The text in the array is null terminated, so the length of the string is one less than the length of the array.<P>
Improperly designed containers may work fine when used to hold objects of a primitive type or of a class type with trivial constructors and destructors, but they can fail miserably when used to hold objects with non-trivial constructors and destractors. That's why I chose to test my container with both <I>int</I> (a primitive type) and <I>str</I> (a class with a non-trivial constructor and destractor).<P>
<A href="list6.htm">Listing 6</a>
contains a program for testing the queue operations. The program creates an array, <I>q</I>, of four queues, all initially empty. It then repeatedly reads simple commands from the standard input that specify operations on a numbered queue. For example, the command "a 2 xxx" appends a string with the value "<I>xxx</I>" to <I>q[2]</I>. The command "c 1" clears <I>q[1]</I>, and "r 0" removes an element from <I>q[0]</I> (if such an element exists). You can rewrite this program to test <I> intqs</I> by simply changing <I>str</I> to <I>int</I> as needed.<P>
The <I>showheap</I> function is a crude tool for monitoring the heap storage. The test program uses <I>showheap</I> to demonstrate that it destroys every object it creates. Strictly speaking, the free store and the heap are logically distinct memory pools. However, most implementations use the heap (managed by <I>malloc</I> and <I>free) as the</I> default free store.<P>
<I>showheap</I> is very platform-specific. <A href="list7.htm">Listing 7</a>
shows a version of <I>showheap</I> that conditionally compiles for either the Borland, Microsoft, or Watcom C++ compilers running under MS-DOS.<P>
<h4><FONT COLOR="#000080"><A name="011A_0090">A First Attempt at a Generic Queue<A name="011A_0090"></FONT></h4></P>
The initial problem in building a queue for objects of any type is defining a queue cell that can accomodate objects of any type. Thus far, <I>intq</I> and <I>strq</I> copy each queued object into a fixed-type data member of a queue cell. But in a generic queue, a queued object can have any type, and thus any size. Storing objects of any type and size in a fixed-type data member can get pretty awkward. It's much easier to leave the queued objects outside the queue cells and simply store the address of a queued object as a <I>void</I> * element in a queued cell. <A href="fig3.htm">Figure 3</a>
illustrates the structure of a generic queue using this design.<P>
<A href="list8.htm">Listing 8</a>
shows a class definition for <I>genq,</I> a generic queue of <I>void</I> *. <I>genq</I> defines the cell type as a private nested class, thus completely removing the cell type from the global namespace. <I>genq::cell</I> is similar to <I>strq_cell</I> (in <A href="list3.htm">Listing 3</a>)
 except for using <I>void</I> * instead of <I>str</I> as the element data member's type and as the type of the cell constructor's first parameter. Class <I>genq</I> itself is nearly identical to class <I>strq,</I> again except for an occasional <I>void</I> * instead of <I>str</I>.<P>
<A href="list9.htm">Listing 9</a>
shows the member function definitions for <I>genq</I> corresponding to the class definition in <A href="list8.htm">Listing 8</a>.
 Most of the function bodies are nearly identical to the corresponding <I>intq</I> functions in <A href="list2.htm">Listing 2</a>.
 The most significant change is the additional statement <I>delete p-&gt;element;</I> inside the loop in <I>genq::clear. intq::clear</I> (and <I>strq::clear</I>) need only <I>delete p;</I> to discard the queue cell addressed by <I>p</I>. When the queue object is inside the cell (as the element member), deleting <I>p</I> destroys the queued object as well. Now that the queued object is in separately-allocated storage addressed by <I>p-&gt;element. clear</I> must explicitly destroy that object (by deleting<br> <I>p-&gt;element</I>) as well as destroy the queue cell (by deleting <I>p</I>).<P>
<h4><FONT COLOR="#000080"><A name="011A_0091">Iteration Functions<A name="011A_0091"></FONT></h4></P>
If this transformation to a generic queue seems too simple, that's because it is. <I>genq::print</I> has a serious problem: it displays the queue elements in the wrong format.<P>
The body of <I>genq::print</I> is a single loop:<P>
<pre>for (p = first; p != 0; p = p-&gt;next)
   cout &lt;&lt; ' ' &lt;&lt; p-&gt;element;</pre>
which visits each cell in a queue and prints the element in the cells. The output statement in the loop body is actually two separate function calls equivalent to<P>
<pre>cout &lt;&lt; ' ';
cout &lt;&lt; p-&gt;element;</pre>
The first output expression calls <I>ostream::operator&lt;&lt;(char)</I> to display a single space. The second call selects an <I>ostream::operator&lt;&lt;</I> based on the static type of <I>p-&gt;element</I>. When <I>p-&gt;element</I> is an <I>int</I> (as in <I>intq::print</I>), the output expression <P>
<pre>cout &lt;&lt; p-&gt;element;</pre>
invokes <I>ostream::operator&lt;&lt;(int)</I>, which displays <I>p-&gt;element</I> in the equivalent of <I>printf's %d</I> format. When <I>p-&gt;element</I> is a <I>str</I> (as in <I>strq::clear</I>), the output expression invokes <I>operator&lt;&lt;(ostream &amp;, const str &amp;)</I> defined in <I>str.cpp</I> (<A href="list5.htm">Listing 5</a>)
, which invokes <I>ostream::operator&lt;&lt;(const char *)</I>, which in turn displays<br> <I>p-&gt;element</I> in the equivalent of <I>%s</I> format. But when <I>p-&gt;element</I> has type <I>void</I> *, the output expression invokes <I>ostream::operator&lt;&lt;(const void *)</I>, which displays the value in <I>p-&gt;element</I> (the pointer), not the object its points to. The output appears in the equivalent of <I>%p</I> format, which on most systems is some hexadecimal format.<P>
A generic queue of <I>void</I> * lacks the compile-time type information it needs to print the queued objects in the right format. Since a single copy of <I>genq::print</I> must work for all types of objects, <I>genq::print</I> needs an additional argument that conveys formatting information. Passing a format string, like <I>"%d,"</I> might be adequate for queue elements of built-in types, but not for user-defined types, like <I>str</I> or <I>complex</I>. Passing <I>genq::print</I> a pointer to a user-supplied function that "knows" how to print a queued object is a much more general solution.<P>
For example, when using a <I>genq</I> as a queue of <I>int</I>, the application defines a function <P>
<pre>void print_int(void *p)
   {
   cout &lt;&lt; ' ' &lt;&lt; *(int *)p;
   }</pre>
that writes the object addressed by <I>p</I> (assumed to be an <I>int</I>) to cout using <I>ostream::operator&lt;&lt;(int)</I>. The application can then print the <I>int</I> objects in queue <I>qi</I> by calling<P>
<pre>qi.print(print_int);</pre>
which invokes <I>print_int</I> for each element in the queue.<P>
The definition for this new <I>genq::print</I> function is:<P>
<pre>void genq::print(void (*f)(void *))
   {
   cell *p = first;
   for (p = first; p != 0; p = p-&gt;next)
      (*f)(p-&gt;element);
   }</pre>
The parameter <I>f</I> has type "pointer to function with parameter <I>void</I> * returning <I>void</I>," which is the same type as <I>print_int</I> above. <I>genq::print</I> simply visits each cell in the queue and applies the function addressed by <I>f</I> to the element in that cell.<P>
As written above, you can use <I>genq::print</I> for more than just printing. <I>genq::print</I> is actually a general-purpose tool for applying any function with the appropriate type to each element in a queue. For example, you can define<P>
<pre>static int total = 0;

void sum(void *p)
   {
   total += *(int *)p;
   }</pre>
so that<P>
<pre>qi.print(sum);</pre>
computes the sum of the <I>int</I> values in queue <I>qi</I>.<P>
As such, the name <I>print</I> is really inappropriate. I think <I>apply</I> is a better name. Others prefer the name <I>foreach</I>. (The container classes supplied with Borland C++ 4.0 use <I>foreach</I>.) Whatever its name, a function that applies another function to each object in a container is generally known as an iteration function.<P>
<h4><FONT COLOR="#000080"><A name="011A_0092">Many Problems Yet to Solve<A name="011A_0092"></FONT></h4></P>
<A href="list10.htm">Listing 10</a>
shows the test program from <A href="list6.htm">Listing 6</a>
adapted to test <I>genq</I> (with an iteration function) used as a queue of <I>int</I>. This program shows that this version of <I>genq</I> is not nearly as convenient to use as the single-purpose <I>intq</I> and <I>strq</I> classes.<P>
When using a special-purpose queue (as in <A href="list6.htm">Listing 6</a>)
, you add element <I>qe</I> to queue <I>q[qn]</I> by simply calling<P>
<pre>q[qn].append(qe);</pre>
With a generic queue, you must dynamically allocate a copy of the object and pass the address of the copy to the queue, as in<P>
<pre>q[qn].append(new int(qe));</pre>
Removing an element from a generic queue is even more complicated. In <A href="list10.htm">Listing 10</a>
the code looks like: <P>
<pre>if (q[qn].remove(pv))
   {
   pqe = (int *)pv;
   cout &lt;&lt; "removed "&lt;&lt; *pqe &lt;&lt; '\n';
   delete pqe;
   }</pre>
<I>genq::remove'</I>s formal pararmeter has type <I>void *&amp;</I>. That is, it has type "reference to pointer to <I>void.</I>" (C++ permits references to pointers but not pointers to references.) Thus, the argument <I>pv</I> passed to <I>remove</I> must be a <I>void</I> *. In essence, all objects come out of the generic container with their compile-time type information stripped away. The application must restore that type information by casting <I>pv</I> back to its original type, which in <A href="list10.htm">Listing 10</a>,
 is <I>int</I> *. The application must also delete the pointer to discard the object removed from the queue. The <I>delete</I> after each remove corresponds to the <I>new</I> invoked with each append.<P>
In addition to its cumbersome user interface this generic queue has other problems associated with the loss of type information that comes from using <I>void</I> *. First, a generic queue is a heterogeneous queue. That is, a single generic queue can hold objects of more than one type. For example, an application can place objects of type <I>int, str, complex</I>, and whatever in the same queue, because all it really stores is their addresses. In my experience, though an application may need to support several types of queued objects, it's almost always better for each queue to be homogeneous. That is, all the elements in any one queue should have the same type. Unfortunately, this generic queue class cannot enforce homogeneity at compile-time.<P>
The second problem is that this queue may leak memory when releasing objects that have a non-trivial destructor. The leaks occur despite the addition of<P>
<pre>delete p-&gt;element;</pre>
to the <I>genq::clear</I>. Again the problem is that <I>p-&gt;element</I> has type <I>void</I> *, so this expression lacks the information it needs to call the appropriate destructor. This is not a problem when the queued objects are primitive types, like <I>int</I>, but is a problem when they are types that use additional dynamically allocated resources (<I>str</I> is such a type).<P>
But all hope is not lost. These problems have solutions which are the topic of next month's column.<P>
<h4><FONT COLOR="#000080"><A name="011A_0093">Errata Errata<A name="011A_0093"></FONT></h4></P>
In an addendum to my article "Rewriting and Reconsidering" (<I>CUJ</I>, September 1993), I posted errata for a string class I presented in an earlier column "Function Name Overloading" (<I>CUJ</I>, November 1991). Well, I didn't quite get it right. R. Seshadri from Madras, India caught the bug and suggested a repair.<P>
The string class in question had much the same structure as the one I used in this article (<A href="fig2.htm">Figure 2</a>
and <A href="list4.htm">Listing 4</a>
and <A href="list5.htm">Listing 5</a>)
. My error was a classic "off by one" error. I forgot that the <I>len</I> data member in a string represents the conceptual length of the string (the number of characters excluding the terminating null), rather than the actual length of the array. My catenation functions left the <I>len</I> data member too long by one. <A href="list11.htm">Listing 11</a>
shows the necessary corrections.<P>
Upon further reflection, I think my real offense was inconsistent coding style. (Gasp!) Everywhere in the string class, except the <I>cat</I> functions, the memory allocations are in the form<P>
<pre>new char[len + 1]</pre>
(possibly inside a call to <I>strcpy</I>). In the <I>cat</I> functions, the allocations are in the form<P>
<pre>new char[len]</pre>
<A href="list12.htm">Listing 12</a>
shows the same <I>cat</I> functions rewritten in a style consistent with the rest of the string class.<P>

<h4><a href="../../../source/1994/jun94/saks.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
