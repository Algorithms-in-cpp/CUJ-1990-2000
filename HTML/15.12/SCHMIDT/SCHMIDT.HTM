





<HTML>
     
     <HEAD>


          
          <TITLE>December 1997/The Learning C/C++urve</TITLE>
     </HEAD>
     
     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          
          <H2><A href="../tocdec.htm"><IMG src="../../toc.gif" ALT="Back to TOC" WIDTH="54" HEIGHT="54"></A>
          <FONT COLOR="#FF0000">Columns</FONT></H2>
          
          <HR>
          
          <H2 ALIGN="center"><FONT COLOR="#800000">The Learning C/C++urve</FONT></H2>
          
          <H3 ALIGN="center"><FONT COLOR="#800000"> Bobby Schmidt</FONT></H3>
          
          <H3 ALIGN="center"><FONT COLOR="#800000">NULL and void *</FONT></H3>
          
          <BLOCKQUOTE>
               
               <P>Bobby works hard to make nothing out of something.</P></BLOCKQUOTE>
               
               <HR>
          <BLOCKQUOTE>
               <P><b><i>Copyright &copy; 1997 Robert H. Schmidt</i></b></P>
               
               <p>This month we resume exploring
                    auto_pointer, left dangling since September. And while I had
                    intended to bring NULL into play this month anyway, I've
                    received added incentive from Diligent Readers objecting to
                    the loose semantics of null pointers. One such reader (David
                    R. Tribble) even mentioned the September column in his
                    posting to comp.std.c++.</p>
               
               <p> My original motivation for crafting
                    auto_pointer was to overcome deficiencies in real C++
                    pointers. By analogy, I'll create a "null"
                    auto_pointer to overcome deficiencies in real C++ null
                    pointers. As those deficiencies originate with C, we'll
                    start by tracing the etymology of C's NULL.</p>
               
               <h4><FONT COLOR="#000080">ints and Pointers</FONT></H4>
               
               <p>To begin, consider int, C's most basic
                    type. Fundamentally, an int object always hold some int
                    value:</p>

<PRE>
int i = 123; // i holds 123
</PRE>
               
               <p>even if that value is implicit:</p>

<PRE>
// i holds whatever was passed in
void f(int i)
</PRE>
               
               <p>or undefined:</p>

<PRE>
// i holds some random value
auto int i;
</PRE>
               
               <p>Every value you can give an int object
                    is a genuine int value. Whether or not that value makes
                    sense in the current program context is a different
                    question.</p>
               
               <p>Now consider pointers. You may be
                    tempted to extrapolate from int and decide pointer objects
                    always hold some pointer value; or, more precisely, that
                    pointer objects always hold the address of some other
                    object:</p>

<PRE>
int i;
/* OK, p holds address of i */
int *p = &amp;i;
</PRE>
               
               <p>But what about an uninitialized
                    pointer:</p>

<PRE>
/* p holds the address of...what? */
auto int *p;
</PRE>
               
               <p>Does it contain the address of some
                    object, perhaps a "default" object?</p>
               
               <p>In the world of int, an uninitialized
                    object always holds some int value. That value may be
                    unknown, but it is always an int:</p>

<PRE>
auto int a;
cout &lt;&lt; a; /* dubious but OK */
</PRE>
               
               <p>By comparison, in the world of
                    pointers an uninitialized object most likely contains a
                    value that is not a genuine pointer (i.e., not the address
                    of any existing object):</p>

<PRE>
auto int *leeloo;
/* may go badaboom! */
cout &lt;&lt; *leeloo;
</PRE>
               
               <p>As a solution, you could create a
                    dummy object:</p>

<PRE>
extern void *dummy = &amp;dummy_;
// OK, i contains a real pointer */
int *i = dummy;</PRE>
               
               <p>But if you happen to accidentally
                    dereference such a dummy pointer:</p>

<PRE>
int *i = dummy;
int j = *i; // OK but probably unwise
</PRE>
               
               <p>the translator might not catch the
                    error at run time (the behavior is undefined).</p>
               
               <h4><FONT COLOR="#000080">floats and Pointers</FONT></H4>
               
               <p>Instead of ints, perhaps floats are a
                    better inspiration for pointers. Unlike integer objects,
                    real number objects can contain values that correspond to no
                    genuine number. For example,</p>

<PRE>
#include &lt;math.h&gt;
float f = log(-2);
</PRE>
               
               <p>cannot correctly yield a genuine real
                    number, since taking the logarithm of a negative number is a
                    mathematical no-no. But since f has to contain something,
                    what value should be stored? For just such occasions, math.h
                    has special implementation-defined values corresponding to
                    no actual real numbers. In this example, f is often set to
                    the special value NAN, or "not-a-number" [<A href="#NOTE1">1</a>]
.</p>
               
               <p>By analogy, pointers need a peaceful
                    NAP, or "not-a-pointer," some expression that is
                    of pointer type but not an actual pointer (address) value.
                    Fortunately, as we all learned in CS 101, Standard C has
                    such not-a-pointers, formally known as null pointers.</p>
               
               <h4><FONT COLOR="#000080">Null Pointers</FONT></H4>
               
               <p>According to the C9X Draft Standard [<A href="#NOTE2">2</a>]
:</p>
               
               <p>An integral constant expression with
                    the value 0, or such an expression cast to type void *, is
                    called a null pointer constant. If a null pointer constant
                    is assigned to or compared for equality to a pointer, the
                    constant is converted to a pointer of that type. Such a
                    pointer, called a null pointer, is guaranteed to compare
                    unequal to a pointer to any object or function.</p>
               
               <p> Two null pointers, converted through
                    possibly different sequences of casts to pointer types,
                    shall compare equal.</p>
               
               <p> The macro NULL is defined in &lt;stddef.h&gt;
                    as a null pointer constant.</p>
               
               <p>Possible null pointer constants
                    include</p>
               
               <p>
               <UL><LI>0</LI>
                   <LI>0L</LI>
                   <LI>0LL (C9X long long)</LI>
                   <LI>(void *) cast of the above</LI></UL></p>
               
               <p>The (in)famous macro NULL is defined
                    to be one of the possible null pointer constants. Which one
                    is up to the implementation, although in practice C vendors
                    typically define NULL as a void *. Why? Two possible
                    motivations spring to mind.</p>
               
               <p> First, such a definition keeps NULL
                    away from non-pointers:</p>

<PRE>
int n;
n = 0;          /* OK (well *duh*) */
n = (void *) 0; /* error, type mismatch */
</PRE>
               
               <p>preventing mysterious compile-time
                    flags.</p>
               
               <p>Second, void * is usually the correct
                    size for an unchecked pointer argument:</p>

<PRE>
printf("%p", 0);          /* possible size error */
printf("%p", (void *) 0); /* OK, correct size */
</PRE>
               
               <p>In fact, you may wonder how NULL could
                    ever be defined as an integer. Remember, the Standard says
                    that a null pointer constant such as 0 converts to a null
                    pointer &#151; not that 0 is a pointer, but that it converts to
                    one. The distinction is subtle but real. Keep this point in
                    mind, for I'll refer to it again shortly.</p>
               
               <h4><FONT COLOR="#000080">Null Pointers in C++</FONT></H4>
               
               <p>Standard C++ generally adopts C's
                    definition of null pointer constants and null pointers. One
                    exception: NULL cannot be defined as a void *.</p>
               
               <p> In C a void * is assignment
                    compatible with other pointer types:</p>

<PRE>
void *v = NULL;
int *i = v; /* OK, v converts to int * */
</PRE>
               
               <p></p>
               
               <p>This allows NULL to be a void * and
                    still work:</p>

<PRE>
int *i = NULL;       /* OK */
int *j = (void *) 0; /* equivalent */
</PRE>
               
               <p>In C++, such an assignment draws a
                    compile-time diagnostic:</p>

<PRE>
int *i = NULL;       // error, type mismatch
int *j = (void *) 0; // equivalent
</PRE>
               
               <p>since C++'s void * won't convert to
                    other pointer types. Were NULL so defined, you'd have to use
                    a cast:</p>

<PRE>
int *i = (int *) NULL; // OK
</PRE>
               
               <p>breaking ported C code and defying
                    programmer intuition. To circumnavigate this problem, the
                    C++ Standard requires that NULL be a plain integer:</p>

<PRE>
int *i = 0; // OK
</PRE>
               
               <h4><FONT COLOR="#000080">Why Null Pointers are
               Evil</FONT></H4>
               
               <p>Remember that for an arbitrary type t,
                    the statement</p>

<PRE>
t *p = NULL;
</PRE>
               
               <p>requires that the null pointer
                    constant (defined by NULL) must convert to type t *. Because
                    0 is a possible value for NULL, this implies the statement</p>

<PRE>
t *p = 0; // OK
</PRE>
               
               <p>will work. By implication, constructs
                    like</p>

<PRE>
void f(t *);
// OK, 0 converts to t *
// during call */
f(0);
</PRE>
               
               <p>work too. Such conversion leads to
                    confusion in overload resolution:</p>

<PRE>
void f(void *);
void f(long);
f(f);    // OK, converts argument to void *
f(1);    // OK, converts argument to long
f(NULL); // error, ambiguous conversion from 0
</PRE>
               
               <p>Also note a subtle point that confuses
                    many: when null pointer constants (like 0) convert to null
                    pointers, the representation may no longer be a machine
                    zero. That is, after the statement</p>

<PRE>
char *p = 0;
</PRE>
               
               <p>the bit pattern inside p may not be
                    that of the original integer 0. This implies that
                    zeroing-out a pointer is not necessarily the same as
                    nulling-out that pointer.</p>
               
               <p>As an example,</p>

<PRE>
int **p = (int **) calloc(100, sizeof(*p));
</PRE>
               
               <p>and the equivalent</p>

<PRE>
int **p = (int **) malloc(100 * sizeof(*p));
memset(p, 0, 100 * sizeof(*p));
</PRE>
               
               <p>dynamically allocate an array of 100
                    pointers to int, setting each member of that array to 0. But
                    since integer 0 is not necessarily the same encoding as a
                    null pointer, this array may not be properly initialized.</p>
               
               <p>A more portable initialization is</p>

<PRE>
int **p = (int **) malloc(100 * sizeof(*p));
for (int i = 0; i &lt; 100; ++i)
    p[i] = 0; // tantamount to p[i] = (int *) 0;
</PRE>
               
               <p>allowing the proper conversion of 0 to
                    a null pointer before assignment to p[i].</p>
               
               <p>Diligent Reader David Tribble's
                    quandary was especially perverse. In compiling the
                    POSIX-compliant call</p>

<PRE>
if (gmtime_r(&amp;t, &amp;s) != 0)
    return -1; /* failed */
</PRE>
               
               <p>he found one implementation declaring
                    gmtime_r as</p>

<PRE>
int gmtime_r(const time_t *, struct tm *);
/* returns 0 on success */
</PRE>
               
               <p>and another declaring it as</p>

<PRE>
struct tm *gmtime_r(const time_t *, struct tm *);
/* returns null pointer on failure */
</PRE>
               
               <p>Note the difference in return type and
                    return value semantics: in the former declaration, a 0
                    integer implies success, while in the latter a null pointer
                    implies failure. Both versions of the call compile, but
                    clearly, only the first runs correctly. Because logical
                    false, null pointers, and arithmetic zero morph into one
                    another so easily, C and C++ offer many opportunities for 
                    such type mischief.</p>
               
               <p> As I mentioned in September's column,
                    were it up to me, NULL would act like Pascal's nil, a true
                    null pointer constant convertible only to pointers. Believe
                    it or not, we can create such a nil look-alike that gets
                    remarkably close to this goal.</p>
               
               <h4><FONT COLOR="#000080">Null Pointers
               Redeemed</FONT></H4>
               
               <p>In that column I disabled
                    NULL-initialized auto_pointers:</p>

<PRE>
template&lt;class t&gt;
class auto_pointer
    {
    // ...
private:
    auto_pointer(void *);
    };
auto_pointer&lt;int&gt; p = NULL; // error
</PRE>
               
               <p>Remember, NULL is either a void *
                    matching auto_pointer(void *), or an integer 0 converting to
                    a void * that matches auto_pointer(void *). In either case,
                    the matched member is private and inaccessible, leading to a
                    compile-time flag.</p>
               
               <p> But if NULL and null pointers are no
                    longer assignable to auto_pointers, how do we indicate an
                    auto_pointer is not bound to anything? That is, how do we
                    get the benefits of NULL without the unpleasant after-taste?
                    The same way we code ourselves out of most jams: we write a
                    new class.</p>
               
               <p> Departing from my usual style, I'll
                    show my version of such a class first, then explain the
                    rationale behind it:</p>

<PRE>
//
//  header nil.h
//
class nil
    {
public:
    ~nil();
    nil(int, int);
    };
inline nil::~nil()
    {
    }
     
inline nil::nil(int, int)
    {
    }
     
static nil const nil(0, 0);
 
//
//  modified header auto_pointer.h
//
template&lt;class t&gt;
class auto_pointer
    {
    // ...
protected:
    auto_pointer(class nil const &amp;);
    };
// ...
     
template &lt;class t&gt;
inline auto_pointer&lt;t&gt;::auto_pointer(class nil const &amp;)
        :
        is_owner_(true),
        pointer_(NULL)
    {
    }
</PRE>
               
               <h4><FONT COLOR="#000080">nil Dissected</FONT></H4>
               
               <p>I've adopted the name of Pascal's nil,
                    my inspiration for this class. Java-come-latelys may opt to
                    call this class null. I avoid that name to reduce confusion
                    with C++'s use of the term "null."</p>
               
               <p> Note the lookup tricks I play in
                    nil.h:</p>
               
               <p>
               <UL><LI>nil is a class, meaning the name nil appears in both the
                       tagged and untagged namespaces. I can reference the class as
                       either class nil or plain nil.</LI>
                   <LI>I want the name nil to represent the conceptual
                       not-a-pointer value, not the nil class. I therefore declare
                       an object nil of type class nil. This means plain nil now
                       refers to the object, hiding the implicit use as a class. To
                       reference the class, I must explicitly use class nil.</LI>
                   <LI>I also want it to appear as if one object of this nil
                       class exists in the whole program. To ensure this nil object
                       is available to other static objects at initialization, I
                       declare a static copy of nil in each translation unit [<A href="#NOTE3">3</a>]
.
                       Because class nil has no data members and its member
                       functions have empty inline bodies, such object duplication
                       should be fairly benign.</LI>
                   <LI>At the same time, I don't want users minting other
                       objects of type nil. By declaring class nil(int, int), I
                       prevent the compiler from synthesizing nil default and copy
                       constructors. This gives me a non-obvious constructor for my
                       use, while eliminating the constructors others might use by
                       accident.</LI></UL></p>
               
               <p>To use nil with auto_pointer:</p>

<PRE>
auto_pointer&lt;int&gt; p = nil; // same as p(nil)
auto_pointer&lt;char&gt; q;
q = nil;
</PRE>
               
               <p>Because nil does not convert to NULL
                    or some other null pointer constant, you can't treat it as a
                    real pointer or pointer constant:</p>

<PRE>
int *p = nil;    // error
int i = nil;     // error
if (nil == NULL) // error
</PRE>
               
               <p>nil is compatible only with
                    auto_pointer.</p>
               
               <p>In fact, the only current use of nil
                    is as a dummy argument for an auto_pointer constructor. To
                    further mimic the behavior of real pointers and NULL, we can
                    allow equality comparisons to nil:</p>

<PRE>
template&lt;class t&gt;
class auto_pointer
    {
    // ...
protected:
    bool operator==
        (auto_pointer const &amp;);
    bool operator!=
        (auto_pointer const &amp;);
    };
auto_pointer&lt;int&gt; p;
if (p == nil)
    // ...
</PRE>
               
               <p>You may wonder how this works, since
                    operator== and operator!= accept auto_pointer, not nil. The
                    secret is the auto_pointer conversion constructor that turns
                    nil into an auto_pointer. The compiler constructs a
                    temporary auto_pointer object, which it then passes into the
                    comparison operator.</p>
               
               <p> Thus, the expression</p>

<PRE>
p == nil
</PRE>
               
               <p>is really</p>

<PRE>
p.operator==(nil)
</PRE>
               
               <p>which in turn becomes</p>
               
               <p></p>

<PRE>
p.operator==(auto_pointer&lt;int&gt;(nil))
</PRE>
               
               <p>This definition of operator== and
                    operator!= allows comparison with all the types acceptable
                    to auto_pointer single-argument constructors:</p>

<PRE>
auto_pointer&lt;int&gt; p;
int *q = NULL;
// #1, OK, no conversion
p == p
// #2, OK, converts from int *
p == q;
// #3, OK, converts from class nil
p == nil;
</PRE>
               
               <p>For your designs, you must decide if
                    comparing auto_pointers to real pointers (#2 above) is
                    desirable. I find such comparisons do not wantonly violate
                    my sense of auto_pointer's meaning.</p>
               
               <p> You may also object to constructing
                    temporary objects this way. You could create specialized
                    operator== and operator!= overloads tuned to real pointers
                    and nil, but I leave that as an exercise for the student [<A href="#NOTE4">4</a>]
.</p>
               
               <h4><FONT COLOR="#000080">Going Once, Going
               Twice...</FONT></H4>
               
               <p>Next month's bacchanalia promises the
                    latest C committee gossip, a new Mac OS development
                    environment, a core dump of SD '97 East, and my odyssey into
                    the Internet's Wayback Machine. All this, and your normal
                    dosage of programming nostrum. Tell your family, tell your
                    friends: as they say in the local phone ads, life's better
                    here. Well, certainly better here than in that other guy's 
                    decl-spec column.</p>
               
               <h4><FONT COLOR="#000080">Notes</FONT></H4>
               
               <p><A name="NOTE1">1</a>.
 Today's koan:
                    a number that is not a number. See there, you can now add "path
                    of enlightenment" to this magazine's portfolio of
                    virtues.</p>
               
               <p> <A name="NOTE2">2</a>.
 Section
                    6.2.2.3 (titled "Pointers"), paragraphs 3-4 and
                    footnote 44.</p>
               
               <p> <A name="NOTE3">3</a>.
 I could use
                    the Standard Library's trick for similarly making cout and
                    company available for static initialization, but that's too
                    complex for this exercise.</p>
               
               <p> <A name="NOTE4">4</a>.
 These same
                    comments apply to operator=, which also relies on
                    construction of a temporary. </p>
               <p><i>Bobby Schmidt is a freelance writer, teacher, consultant, and programmer. He
                    is also a member of the ANSI/ISO C standards committee, an alumnus of
                    Microsoft, and an original "associate" of (Dan) Saks &amp; Associates. In other
                    career incarnations, Bobby has been a pool hall operator, radio DJ, private
                    investigator, and astronomer. You may summon him at 14518 104th Ave NE Bothell
                    WA 98011; by phone at +1-425-488-7696, or via Internet e-mail as
                    rschmidt@netcom.com.</i></p>
</BLOCKQUOTE>
     </BODY>
</HTML>
