





<HTML>
     
     <HEAD>


          
          <TITLE>December 1997/C++ Theory and Practice</TITLE>
     </HEAD>
     
     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          
          <H2><A href="../tocdec.htm"><IMG src="../../toc.gif" ALT="Back to TOC" WIDTH="54" HEIGHT="54"></A>
          <FONT COLOR="#FF0000">Columns</FONT></H2>
          
          <HR>
          
          <H2 ALIGN="center"><FONT COLOR="#800000">C++ Theory and Practice</FONT></H2>
          
          <H3 ALIGN="center"><FONT COLOR="#800000">Dan Saks</FONT></H3>
          
          <H3 ALIGN="center"><FONT COLOR="#800000">Storage Classes and
          Language Linkage</FONT></H3>
          
          <BLOCKQUOTE>
               
               <P>Ever wonder what extern "C" really means? Here's
                    your chance to find out.</P>
               
          </BLOCKQUOTE>
          <HR>
          <BLOCKQUOTE>
               <P><B><I>Copyright &copy; 1997 by Dan Saks</I></B></P>     

               <p>C++ is a popular today largely because
                    it piggybacked on C's existing popularity. Bjarne Stroustrup
                    designed C++ with this in mind [<A href="#REF1">1</a>]
, and
                    it was a pretty smart decision. C programmers can start to
                    use C++ as just a "better" C with little loss of
                    productivity. They can grow into using data abstraction and
                    object-oriented programming as project schedules permit.</p>
               
               <p> Although you can translate a hefty C
                    program into C++ in just weeks or even days, you may find it
                    more practical to rewrite only those parts of your program
                    that you are actively maintaining. If that's your
                    preference, you can translate your existing C code into C++
                    one header or source file at a time. You may never get
                    around to translating all the files, but that's okay.</p>
               
               <p> The ability to mix C++ and C code is
                    not just a migration tool. C++ programs built from the
                    ground up may need to call upon functions that are available
                    only from C libraries.</p>
               
               <p> C++ makes it pretty easy, though not
                    effortless, to mix C with C++ code. The principle mechanism
                    is called a linkage-specification, which many programmers
                    refer to as an extern "C" declaration. This month,
                    I will try explain the need for linkage-specifications, as
                    well as what you need to know to use them.</p>
               
               <h4><FONT COLOR="#000080">A Brief Look Ahead</FONT></H4>
               
               <p>Before I get mired in the details, let
                    me just show you a few examples of linkage specifications in
                    the event you haven't seen them before.</p>
               
               <p> A C++ program can call a standard C
                    function such as</p>

<PRE>
char *strcpy(char *, char const *);
</PRE>
               
               <p>If that C++ program declares the
                    function as above, it will fail to link with the C library's
                    version of that function. The C++ code must declare the
                    function in a linkage specification such as</p>

<PRE>
extern "C"
    char *strcpy(char *, char const *);
</PRE>
               
               <p>This declaration can appear in source
                    files, but it really should be in a header file. This
                    particular function declaration appears in the standard C
                    header &lt;string.h&gt; along with many companions. Rather
                    than specify extern "C" linkage for each function
                    individually, the header can specify extern "C"
                    linkage for the entire group using a linkage block, such as:</p>

<PRE>
extern "C"
    {
    char *strcpy(char *, char const *);
    char *strlen(char const *);
    ...
    }
</PRE>
               
               <p>In the past, libraries implemented the
                    C++ version of each C header by wrapping an #include of the
                    C header inside a linkage block. A typical library
                    implementation might place the C headers in one directory,
                    say /c/include, and place the C++ headers somewhere else.
                    Then the C++ header &lt;string.h&gt; would contain simply:</p>

<PRE>
extern "C"
    {
    #include "/c/include/string.h"
    }
</PRE>
               
               <p>These days, most libraries implement
                    both the C and C++ versions of each header as one file that
                    uses conditional compilation. For example, a version of &lt;string.h&gt;
                    that compiles as either C or C++ looks something like:</p>

<PRE>
#ifdef __cplusplus
extern "C"
    {
#endif
    char *strcpy(char *, char const *);
    char *strlen(char const *);
    ...
#ifdef __cplusplus
    }
#endif
</PRE>
               
               <p>The preprocessor of a C++ compiler
                    predefines the macro __cplusplus (with two leading
                    underscores) to indicate that it's compiling the code as C++
                    rather than as C. If you look in the headers for your
                    compiler, you'll probably see similar conditional
                    compilation directives buried somewhere in each of the C
                    library headers.</p>
               
               <h4><FONT COLOR="#000080">A Brief Look Back</FONT></H4>
               
               <p>Last month, I explained the syntax of
                    storage class specifiers and two aspects of their semantics:
                    how they affect when a declaration is also a definition, and
                    how they affect linkage. (See "C++ Theory and Practice:
                    Storage Classes and Linkage," CUJ, November 1997.)
                    Since I will refer to some of those concepts again, here's a
                    quick recap.</p>
               
               <p> A declaration introduces a name into
                    a program, and specifies attributes for that name. If the
                    declarator-id (the name being declared) in the declaration
                    designates an object or function, and the declaration
                    reserves storage for that object or function, then that
                    declaration is also a definition.</p>
               
               <p> The linkage of a name is the extent
                    to which a name might refer to a name declared elsewhere.
                    C++ provides for three levels of linkage:</p>
               
               <p><UL><LI>A name with external linkage
                    denotes an entity that can be referenced via names declared
                    in other scopes in the same or different translation units.</LI>
                   <LI>A name with internal linkage denotes an entity that can
                    be referenced via names declared in other scopes in the same
                    translation unit.</LI>
                   <LI>A name with no linkage denotes an entity that cannot be
                    referenced via names from other scopes.</LI></UL></p>
               
               <p><A href="tab1c.htm">Tables 1 </A>and
                    <A href="tab2c.htm">2</a>
summarize how the storage class
                    specifiers and scope of a declaration determine linkage.
                    <A href="tab1c.htm">Table 1</a>
shows linkage for function
                    names. <A href="tab2c.htm">Table 2</a>
shows linkage for
                    object names. Empty table entries indicate invalid
                    combinations of scope and storage class.</p>
               
               <p> <A href="tab2c.htm">Table 2</A>
                    contains some information about objects that I did not cover
                    last month, but added to the table to complete the picture.
                    In particular, <A href="tab2c.htm">Table 2</a>
also lists
                    the storage duration of declared objects.</p>
               
               <p> The storage duration of an object
                    defines the lifetime of the storage containing the object.
                    The storage duration of an object can be:</p>
               
               <p>
               <UL><LI>static</LI>
                   <LI>automatic</LI>
                   <LI>dynamic</LI></UL></p>
               
               <p>An object with static storage duration
                    has storage allocated at program startup. The memory remains
                    in place for the duration of program execution. An object
                    with automatic storage duration has storage allocated by a
                    function call, and deallocated by the corresponding function
                    return. An object with dynamic storage duration has storage
                    allocated by a call to an allocation function (operator new
                    or operator new[]) and deallocated by a corresponding call
                    to a deallocation function (operator delete or operator
                    delete[]).</p>
               
               <p> Neither table includes a row for the
                    storage class specifier mutable. The mutable specifier
                    affects neither the linkage not storage duration of a name.
                    mutable can appear only on a data member declaration (in
                    class scope), and it specifies that the declared members are
                    never const.</p>
               
               <h4><FONT COLOR="#000080">Overloading and
               Linkage</FONT></H4>
               
               <p>C++ supports function name
                    overloading. That is, a C++ program can declare two or more
                    different functions with the same name in the same scope.
                    For a given call that names an overloaded function, the
                    compiler selects (at compile and link time) the function
                    whose formal parameters are the best match for the actual
                    arguments in the call. The selection process is called
                    overload resolution.</p>
               
               <p> Each function in a set of overloaded
                    functions must have a signature sufficiently distinct so
                    that overload resolution can tell the functions apart. A
                    function's signature is the information about that function
                    that participates in resolving calls. Among other things,
                    the signature includes the types of the function's
                    parameters (but not their names). For instance, the 
                    signature of</p>

<PRE>
char *strcpy(char *, char const *);
</PRE>
               
               <p>is the sequence { char *, char const *
                    }.</p>
               
               <p>In C++, as in C, declarations in one
                    translation unit may declare functions that are defined in
                    other units. Therefore, a particular call expression might
                    (and often does) call a function defined in another unit.
                    Since C doesn't allow overloaded function names, a C linker
                    only needs function names to resolve calls across
                    translation units. Since C++ allows overloading, a C++ 
                    linker needs to see signatures as well as function names.</p>
               
               <p> Early C++ compilers, notably AT&amp;T's
                    cfront, used a technique called name mangling to encode a
                    function's signature as a character string and attach it to
                    the function name. Using this scheme, cfront mangled the
                    declaration</p>

<PRE>
char *strcpy(char *, char const *);
</PRE>
               
               <p>into strcpy__FPcPCc, or something very
                    similar. (The details of this scheme aren't crucial to this
                    discussion. If you're really intrigued, see the ARM [<A href="#REF2">2</a>]

                    for details.) cfront mangled all function names, not just
                    those of overloaded functions. The mangled names are what
                    appeared in generated object modules.</p>
               
               <p>C doesn't allow function name
                    overloading, so C compilers have no need to encode function
                    names and signatures into mangled names. C compilers just
                    use the function names in the source as the names in the
                    object modules. Some compilers adorn the names by adding a
                    leading underscore, but no more. For example, those
                    compilers turn the function name strcpy into the linker
                    symbol _strcpy.</p>
               
               <p> Name mangling presents a problem for
                    C++ programs linked with C code. If you compile a function
                    definition using C, the compiler won't mangle the function
                    name. If you declare and call that function from C++, the
                    compiler will mangle the name. The linker will see the
                    mangled and unmangled names as different (because they are)
                    and won't be able to resolve the calls. Linkage 
                    specifications were designed to solve this problem.</p>
               
               <p> Though originally conceived to solve
                    the problem of linking C++ programs with C code, the draft
                    C++ Standard presents linkage specifications as a more
                    general mechanism with the potential to allow linking with
                    code written in any language.</p>
               
               <h4><FONT COLOR="#000080">Language Linkage</FONT></H4>
               
               <p>The draft C++ Standard never says that
                    linkage specifications turn name mangling off. In fact, the
                    draft never mentions name mangling or any other name
                    encoding scheme. Rather, it simply states that all function
                    types, function names, and object names have a property
                    called language linkage.</p>
               
               <p> Language linkage is a bundle of
                    implementation-dependent properties. The language linkage of
                    function and object names probably involves some name
                    encoding, but the draft only suggests this might be so. The
                    language linkage of function types might involve calling
                    conventions for placing arguments in registers or on the
                    stack.</p>
               
               <p> Not surprisingly, names with linkage
                    declared outside a linkage specification have C++ linkage by
                    default.</p>
               
               <h4><FONT COLOR="#000080">Linkage
               Specifications</FONT></H4>
               
               <p>A linkage-specification has two forms,
                    a linkage-block and a linkage-declaration, as shown in the
                    grammar in <a href="tab3.htm">Table 3</a>. Both forms begin with the keyword extern
                    followed by a string literal. A linkage-block ends with a
                    sequence of zero or more declarations enclosed in braces. A
                    linkage-declaration ends with a single declaration.</p>
               
               <p> The string literal specifies the
                    language linkage of names declared within the linkage
                    specification. All C++ implementations must recognize "C++"
                    and "C" as language linkage strings. For example,</p>

<PRE>
extern "C++"
    float sqrt(float);   // C++ linkage
extern "C"
    double sqrt(double); // C linkage
complex sqrt(complex);   // C++ linkage by default
</PRE>
               
               <p>Beyond "C++" and "C",
                    the set of language linkage strings is
                    implementation-defined. That is, an implementation might
                    recognize other strings, such as "Fortran" or "Pascal",
                    or it might not. The exact meaning of any language
                    specification string is also implementation-defined, except
                    that a linkage specification with an unrecognized string is
                    an error requiring a diagnostic message.</p>
               
               <p> Linkage specifications can occur only
                    at namespace scope (which includes file scope). The
                    brace-enclosed region of a linkage-block does not constitute
                    a distinct scope.</p>
               
               <p> A program can nest one linkage
                    specification inside another. The name(s) declared in a
                    linkage specification get the language linkage of the
                    innermost linkage specification enclosing the declaration.
                    For example,</p>

<PRE>
extern "C++"
    {
    extern "C" int f(int);
    int g(int);
    }
</PRE>
               
               <p>declares f with C linkage and g with
                    C++ linkage. More precisely, f has type "function with
                    C linkage with parameter of int returning int".
                    Whenever I think the meaning is clear, I prefer writing "X
                    function" instead of "function with X linkage".
                    For example, g has type "C++ function with parameter of
                    int returning int".</p>
               
               <p>Any declaration that can appear at
                    namespace scope can appear inside a linkage specification.
                    Even declarations for names with no linkage can appear
                    inside linkage specifications. For example,</p>
               
               <p></p>

<PRE>
extern "C"
    {
    enum color { red, green, blue };
    typedef int index;
    }
</PRE>
               
               <p>declares types color and index, and
                    constants red, green, and blue. None of these names has
                    linkage, and therefore none has language linkage.</p>
               
               <p>The specified language linkage applies
                    to the function names and function types of all function
                    declarators declared within a linkage specification. The
                    draft illustrates this rule with examples similar to the
                    following:</p>

<PRE>
extern "C"
    {
    void f1(void (*pf)(int));
    extern "C" typedef void FUNC();
    }
</PRE>
               
               <p>Here, f1 names a function, so the C
                    linkage specified in the enclosing linkage specification
                    applies to f1. Neither pf nor FUNC names a function, so the
                    specified C linkage does not apply to them. However, f1,
                    *pf, and FUNC are all declarators with function types, so
                    the specified C linkage applies to all these function types.</p>
               
               <p> In summary, the effect is:</p>
               
               <p>
               <UL><LI>The name f1 has C linkage and its type is "C
                    function with parameter of (pointer to C function with
                    parameter of int returning void) returning void".</LI>
                   <LI>The name FUNC itself has no linkage, but it has type "C
                    function with no parameters returning void".</LI></UL></p>
               
               <p>The declaration</p>

<PRE>
FUNC f2;
</PRE>
               
               <p>is not in a linkage specification, so
                    the name f2 has C++ linkage by default. However, f2's
                    function type has C linkage because FUNC's type has C
                    linkage.</p>
               
               <p>The declaration</p>

<PRE>
extern "C" FUNC f3;
</PRE>
               
               <p>gives C linkage to both the name f3
                    and its function type. Finally,</p>

<PRE>
void (*pf2)(FUNC*);
</PRE>
               
               <p>declares the name pf2 with C++ linkage
                    by default. pf2's type is "pointer to C++ function with
                    parameter of (C function with no parameters returning void)
                    returning void".</p>
               
               <p>C++ ignores language linkage for the
                    names of class members and for the function type of class
                    member function declarators. For example,</p>

<PRE>
extern "C"
    {
    class T
        {
    public:
        void f();
        ...
        };
    }
</PRE>
               
               <p>declares the name T::f and its
                    function type with C++ linkage.</p>
               
               <p>As another example, consider</p>

<PRE>
class X
    {
    FUNC f;
    void g(FUNC *);
    };
</PRE>
               
               <p>where FUNC is the typedef declared
                    above as a function type with C linkage. C++ ignores the
                    linkage of FUNC's type in declaring X::f; both the name and
                    type of X::f have C++ linkage. On the other hand, C++ does
                    not ignore the language linkage of a type used in forming
                    the parameter type of a member function. Thus, the name and
                    type of X::g have C++ language linkage, but its parameter 
                    has type "pointer to C function ...".</p>
               
               <p>The functions in a set of overloaded
                    functions with the same name need not have the same language
                    linkage. However, at most one function in a given set can
                    have C linkage.</p>
               
               <p>A linkage specification can contain
                    declarations with explicit storage class specifiers. For
                    example,</p>

<PRE>
extern "C"
    {
    int f(int);
    extern int g(int);
    static int h(int i)
        {
        ...
        }
    }
</PRE>
               
               <p>Here, all three functions, f, g, and h
                    have C language linkage. However, only f and g have external
                    linkage. h has internal linkage.</p>
               
               <p> As I explained last month,</p>

<PRE>
extern int i;
</PRE>
               
               <p>is a declaration, but</p>

<PRE>
int i;
int i = 0;
extern int i = 0;
</PRE>
               
               <p>are all definitions.</p>
               
               <p>Placing a declaration in a
                    linkage-block (with braces) doesn't affect whether that
                    declaration is also a definition. On the other hand, placing
                    a declaration in a linkage-declaration (without braces)
                    behaves as if it had an extern specifier for the purpose of
                    determining whether the declaration is also a definition.
                    For example,</p>

<PRE>
extern "C" int i; // declaration
extern "C"
    {
    extern int j; // declaration
    int k;        // definition
    }
</PRE>
               
               <h4><FONT COLOR="#000080">Language Linkage in
               the Library</FONT></H4>
               
               <p>Two function types with different
                    language linkages are distinct types even if they are
                    otherwise identical. For example, given</p>

<PRE>
typedef void (*handler)();
extern "C"
    typedef void (*c_handler)();
</PRE>
               
               <p>handler and c_handler are function
                    types with identical parameter and return types, but
                    different language linkages. Thus, they are distinct types.
                    This poses a problem for C++ programs that call certain
                    functions in the C library.</p>
               
               <p>Several functions in the C library
                    have parameters of type "pointer to function",
                    such as</p>

<PRE>
int atexit(void (*f)(void));
</PRE>
               
               <p>and</p>

<PRE>
void (*signal(int s, void (*f)(int)))(int);
</PRE>
               
               <p>as well as bsearch and qsort. As I
                    explained earlier, the function declarators in parameter
                    declarations have language linkage. Any pointer you pass as
                    an argument must point to a function with the same linkage
                    as its corresponding parameter.</p>
               
               <p>Declaring a function with the same
                    language linkage as a function parameter in the library
                    shouldn't be much of problem. But, until recently, it was.
                    The current C++ draft (November, 1996 as of this writing)
                    states that:</p>
               
               <p>It is unspecified whether a name from
                    the Standard C library declared with external linkage has
                    either extern "C" or extern "C++"
                    linkage.</p>
               
               <p>Thus, the C++ library header &lt;cstdlib&gt;
                    might declare</p>

<PRE>
extern "C"
    {
    int atexit(void (*f)(void));
    ...
 			}

</PRE>
               
               <p>so that both atexit and its pointer
                    parameter have function types with C linkage. On the other
                    hand, the header might omit the linkage specification so
                    that both types have C++ linkage. Then again, it might
                    declare</p>

<PRE>
typedef void (*__atfunc)(void));
extern "C"
    int atexit(__atfunc f);
</PRE>
               
               <p>so that atexit has C linkage, but the
                    parameter points to a function with C++ linkage.</p>
               
               <p>The C++ committee realized that this
                    left programmers with no way to know whether to declare
                    atexit function, signal handlers, and other such functions
                    as C++ or C functions. This past July, the committee
                    tentatively agreed to pin down language linkage more
                    precisely. In particular:</p>
               
               <p>
               <UL><LI>Signal handlers must have C linkage.</LI>
                   <LI>Other C library functions with "pointer to function"
                    parameters must be overloaded to accept functions with
                    either C or C++ linkage.</LI></UL></p>
               
               <p>I expect this agreement will make it
                    into the eventual C++ Standard and the libraries you will
                    use.</p>
               
               <h4><FONT COLOR="#000080">References</FONT></H4>
               
               <p>[<A name="REF1">1</a>]
 Bjarne
                    Stroustrup. The Design and Evolution of C++ (Addison-Wesley,
                    1994).</P>
               <p>[<A name="REF2">2</a>]
 Margaret A. Ellis and Bjarne
                    Stroustrup. The Annotated C++ Reference Manual
                    (Addison-Wesley, 1990). </p>

               <p><i>Dan Saks is the president of Saks &amp; Associates, which offers training
                    and consulting in C++ and C. He is active in C++ standards, having served
                    nearly seven years as secretary of the ANSI and ISO C++ standards committees.
                    Dan is coauthor of C++ Programming Guidelines, and codeveloper of the Plum Hall
                    Validation Suite for C++ (both with Thomas Plum). You can reach him at 393
                    Leander Dr., Springfield, OH 45504-4906 USA, by phone at +1-937-324-3601, or
                    electronically at dsaks@wittenberg.edu.</i></p>
</BLOCKQUOTE>
</BODY>
</HTML>
