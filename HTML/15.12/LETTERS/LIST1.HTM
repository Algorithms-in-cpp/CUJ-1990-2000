



<HTML><HEAD>

<TITLE>December 1997/We Have Mail/Listing 1</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4>Listing 1:	Penton's callback technique</h4>

<pre>
// callback.cpp : example of using a template
//                object to simplify calling
//                class member functions from
//                'C' callback API's
//
/////////////////////////////////////////////
     
#include &lt;windows.h&gt;
#include &lt;iostream.h&gt;
#include &lt;process.h&gt;
     
// define a template class for timer callbacks
     
template &lt;class T&gt;
class timer_callback {
     
public:
     
   typedef void (T::* Tpmf)();
      // a useful typedef for pointers to member
      // variables
     
   timer_callback() { }
      // constructor
     
   ~timer_callback() { }
      // destructor
     
   MMRESULT create(
      T *      pobj,
      Tpmf     pmf,
      UINT     delay,
      UINT     resolution
   )
      // create a timer callback
      // called with a pointer to the instance
      // of the class and
      // a pointer to the relevant member
      // function for the callback.
   {
      // remember the class instance
      _pobj = pobj;
      _pmf = pmf;
      _delay = delay;
      _resolution = resolution;
     
      // create a timer event
      _timer_id = timeSetEvent(
         _delay, _resolution,
         timer_callback_stub, (DWORD)this,
         TIME_PERIODIC);
      return _timer_id;
   }
     
   static void __stdcall timer_callback_stub(
      UINT  timer_id,
      UINT  msg,
      DWORD user,
      DWORD dw1,
      DWORD dw2
   )
   {
      // get back the pointer to the
      // callback object 
      timer_callback * p =
        (timer_callback *)user;
     
      // call the member function
      ((p-&gt;_pobj)-&gt;*(p-&gt;_pmf))();
   }
     
   UINT delay() const
      // get the timer delay
   {
      return _delay;
   }
     
     
private:
     
   T *      _pobj;        // pointer to object
                         // instance 
   Tpmf     _pmf;         // pointer to member
                         // function 
   UINT     _timer_id;    // timer identifier
   UINT     _delay;       // timer delay
   UINT     _resolution;  // timer resolution
     
};
     
// example class using the timer_callback template
     
class myobject {
     
public:
     
   myobject()
   {
      // create the timer event
      _t1.create(this, timer1, 1000, 500); 
      _t2.create(this, timer2, 500, 250);
   }
      // constructor
     
   ~myobject() { }
      // destructor
     
   void timer1()
      // react to timer callback
   {
      cout &lt;&lt; "Tick 1: " &lt;&lt; _t1.delay()
           &lt;&lt; " ms" &lt;&lt; endl;
   }
     
   void timer2()
      // react to timer callback
   {
      cout &lt;&lt; "Tick 2: " &lt;&lt; _t2.delay()
           &lt;&lt; " ms" &lt;&lt; endl;
   }
     
private:
     
   timer_callback&lt;myobject&gt;   _t1; // callbk obj 
   timer_callback&lt;myobject&gt;   _t2; // callbk obj
     
};
     
int main()
{
   // create an object with a timer callback 
   myobject o;
     
//
// do application stuff . . .
//
   Sleep(10000);
     
   return 0;
}
//End of File
</pre>
</body></html>
