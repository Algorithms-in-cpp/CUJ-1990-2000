



<HTML><HEAD>

<TITLE>August 1997/Standard C/C++/Listing 9</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4>Listing 9:	Assignment and Subscripting</h4>

<pre>
        // slice_array TEMPLATE FUNCTIONS
template&lt;class Ty&gt; inline
    valarray&lt;Ty&gt;&amp; valarray&lt;Ty&gt;::operator=(
        const slice_array&lt;Ty&gt;&amp; Sl)
    {Grow(Sl.size(), &amp;Sl.Data(Sl.start()),
        Sl.stride(), true);
    return (*this); }
template&lt;class Ty&gt; inline
    valarray&lt;Ty&gt; valarray&lt;Ty&gt;::operator[](slice Sl) const
    {return (valarray&lt;Ty&gt;(slice_array&lt;Ty&gt;(Sl, Ptr))); }
template&lt;class Ty&gt; inline
    slice_array&lt;Ty&gt; valarray&lt;Ty&gt;::operator[](slice Sl)
    {return (slice_array&lt;Ty&gt;(Sl, Ptr)); }

        // gslice_array TEMPLATE FUNCTIONS
template&lt;class Ty&gt; inline
    valarray&lt;Ty&gt;&amp; valarray&lt;Ty&gt;::operator=(
        const gslice_array&lt;Ty&gt;&amp; Gs)
    {Grow(Gs.Totlen(), 0, 0, true);
    Sizarray Idx((size_t)0, Gs.Nslice());
    VALGOP(= Gs.Data(Gs.Off(Idx))); }
template&lt;class Ty&gt; inline
    valarray&lt;Ty&gt; valarray&lt;Ty&gt;::operator[](
        const gslice&amp; Gs) const
    {return (valarray&lt;Ty&gt;(gslice_array&lt;Ty&gt;(Gs, Ptr))); }
template&lt;class Ty&gt; inline
    gslice_array&lt;Ty&gt; valarray&lt;Ty&gt;::operator[](
        const gslice&amp; Gs)
    {return (gslice_array&lt;Ty&gt;(Gs, Ptr)); }

        // mask_array TEMPLATE FUNCTIONS
template&lt;class Ty&gt; inline
    valarray&lt;Ty&gt;&amp; valarray&lt;Ty&gt;::operator=(
        const mask_array&lt;Ty&gt;&amp; Ma)
    {Grow(Ma.Totlen(), 0, 0, true);
    size_t N = 0;
    for (size_t I = 0; I &lt; size(); ++N)
        if (Ma.Mask(N))
            Ptr[I++] = Ma.Data(N);
    return (*this); }
template&lt;class Ty&gt; inline
    valarray&lt;Ty&gt; valarray&lt;Ty&gt;::operator[](
        const Boolarray&amp; Ba) const
    {return (valarray&lt;Ty&gt;(mask_array&lt;Ty&gt;(Ba, Ptr))); }
template&lt;class Ty&gt; inline
    mask_array&lt;Ty&gt; valarray&lt;Ty&gt;::operator[](
        const Boolarray&amp; Ba)
    {return (mask_array&lt;Ty&gt;(Ba, Ptr)); }

        // indirect_array TEMPLATE FUNCTIONS
template&lt;class Ty&gt; inline
    valarray&lt;Ty&gt;&amp; valarray&lt;Ty&gt;::operator=(
        const indirect_array&lt;Ty&gt;&amp; Ia)
    {Grow(Ia.Totlen(), 0, 0, true);
    VALGOP(= Ia.Data(Ia.Indir(I))); }
template&lt;class Ty&gt; inline
    valarray&lt;Ty&gt; valarray&lt;Ty&gt;::operator[](
        const Sizarray&amp; Ia) const
    {return (valarray&lt;Ty&gt;(indirect_array&lt;Ty&gt;(Ia, Ptr))); }
template&lt;class Ty&gt; inline
    indirect_array&lt;Ty&gt; valarray&lt;Ty&gt;::operator[](
        const Sizarray&amp; Ia)
    {return (indirect_array&lt;Ty&gt;(Ia, Ptr)); }
//End of File
</pre>
</body></html>
