






<HTML>
     
     <HEAD>


          
          <TITLE>August 1997/Standard C/C++</TITLE>
     </HEAD>
     
     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          
          <H2><A href="../tocaug.htm"><IMG src="../../toc.gif" ALT="Back to TOC" WIDTH="54" HEIGHT="54"></A>
          <FONT COLOR="#FF0000">Columns</FONT></H2>
          
          <HR>
          
          <H2 ALIGN="center"><FONT COLOR="#800000">Standard C/C++</FONT></H2>
          
          <H3 ALIGN="center"><FONT COLOR="#800000"> P. J. Plauger</FONT></H3>
          
          <H3 ALIGN="center"><FONT COLOR="#800000">The Header &lt;valarray&gt;</FONT></H3>
          
          <BLOCKQUOTE>
               
               <P>C++ has arrays and strings, much like C. STL adds vectors,
                    lists, deques, and trees. But template class valarray
                    supplies yet another way to implement a sequence of
                    elements.</P></BLOCKQUOTE>
          <HR>
          <BLOCKQUOTE>
               
               <h4><FONT COLOR="#000080">Introduction</FONT></H4>
               
               <p>I continue my wrapup of the draft
                    Standard C++ library with a peek into one of its darker
                    corners. The header &lt;valarray&gt; defines the template
                    class valarray, and a host of supporting templates and
                    classes. As the name loosely implies, a valarray object
                    stores an array of "value" elements &#151; specific numeric
                    values. </p>
               
               <p> Even more specifically, the values
                    are assumed to be of some floating-point type, or at least a
                    type that behaves very much like floating point. For
                    example, the type complex&lt;float&gt;, which specializes
                    the template class complex defined in the header of the same
                    name, meets the requirements for the valarray type
                    parameter. If you want to specialize valarray for a class of
                    your own devising, however, be careful to define all the
                    operators you're likely to use, inadvertently or otherwise.
                    </p>
               
               <p> The C++ language inherits arrays from
                    C, of course. The draft Standard C++ library also has the
                    template classes basic_string and vector, not to mention
                    several other ways to represent sequences. So why does the
                    library also need valarray? </p>
               
               <p> One easy answer is that it doesn't.
                    valarray was proposed before the Standard Template Library
                    was voted into the draft, way back in 1993. It was tabled at
                    the time on the (proper) grounds that it was a major
                    addition to the library, with only limited field experience,
                    rather late in the standardization process. Then in July
                    1994 STL was voted in &#151; a substantially larger and later
                    addition to the draft. At the same meeting, the Library
                    Subcommittee voted to untable the valarray proposal and toss
                    it in as well, almost as an afterthought and with hardly any
                    discussion. </p>
               
               <p> The people who care about valarray
                    are the numerical programming types. In its current form,
                    the template class is largely based on experience at Sandia
                    Labs. The idea is to provide a generic numeric array that is
                    easily resized and that predefines all the common
                    mathematical operators on corresponding pairs of elements.
                    Thus:</p>

<PRE>
valarray&lt;float&gt; x1, x2;
.....
x1 += x2;
</PRE>
               
               <p>would add each element x2[i] into x1,
                    assuming the two arrays have the same number of elements.</p>
               
               <p>What's more, a valarray object can be
                    easily sliced and diced in the various ways numerical
                    programmers are wont to do. And operations on such objects
                    should be easily "vectorized" &#151; C++ compilers extended to
                    support parallel-processing architectures should be able to
                    take advantage of vector arithmetic units when implementing
                    valarray operations. </p>
               
               <p> The draft C++ Standard explicitly
                    relaxes the usual sequencing and aliasing rules for accesses
                    to elements of a valarray object. You as programmer have to
                    assume that operations on multiple elements of such an
                    object can occur in arbitrary order. </p>
               
               <p> Some people believe that valarray is
                    in the Standard for the sole purpose of permitting compilers
                    to generate special code. They see no use for a "vanilla"
                    implementation of this template class, other than to satisfy
                    some abstract conformance requirement, perhaps. </p>
               
               <p> I disagree. I believe that valarray
                    offers indexing (slicing) operations that are of interest
                    even without any compiler or hardware performance boost. It
                    was a real challenge to write this template class. I've
                    stressed several compilers to the breaking point in the
                    process of proving it in and making it portable. </p>
               
               <p> It is a very difficult template class
                    to understand. Don't worry if you can't understand much of
                    it on the first few readings. I know I couldn't. It also
                    involves a lot of repetitious code, most of which I've
                    omitted from the presentation here. And I've made heavy use
                    of macros to keep the repetition to a minimum. See the
                    header shipped with Microsoft VC++ V4.2 or V5.0 for the
                    whole story.</p>
               
               <h4><FONT COLOR="#000080">Template Class
               valarray</FONT></H4>
               
               <p><A href="list1.htm">Listing 1</A>
                    shows the definition of template class valarray. The
                    template class describes an object that controls a
                    varying-length sequence of elements of type T. The sequence
                    is stored as an array of T. It differs from template class
                    vector in two important ways:</p>
               <UL><LI>It defines numerous arithmetic
                         operations between corresponding elements of valarray&lt;T&gt;
                         objects of the same type and length, such as x = cos(y)
                         + sin(z). </FONT></LI>
                    <LI> It defines a variety of
                         interesting ways to subscript a valarray&lt;T&gt;
                         object, by overloading operator[].</FONT></LI>
               </UL>
               
               <p>In many ways, valarray resembles
                    template class vector. (See "Standard C/C+: The Header &lt;vector&gt;,"
                    CUJ, January 1997.) The most distinctive addition is the
                    appearance of four auxiliary template classes: slice_array,
                    gslice_array, mask_array, and indirect_array. They provide
                    various ways of slicing a valarray object, through the magic
                    of constructors, the assignment operator, and the subscript
                    operator. We'll examine each of these funny creatures in
                    turn. </p>
               
               <p> Note the use of several macros as
                    shorthand for various kinds of loops over the elements of a
                    valarray object. You see a few examples of their use within
                    the template class definition proper. They occur many times
                    in the header &lt;valarray&gt;, at least the way I've
                    implemented it. </p>
               
               <p><A href="list2.htm"> Listing 2</A>
                    provides a small sample. It shows all the template function
                    definitions required just for multiplication. And it shows
                    one math function overloaded for valarray. You can imagine
                    the real estate consumed in the header &lt;valarray&gt;
                    defining all the other operators and math functions this
                    way. </p>
               
               <p> Not all the member functions for
                    valarray are defined within the template class definition.
                    Some really nasty forward referencing problems make it
                    essentially impossible to define all of valarray in one
                    lump. We will revisit the more interesting assignment and
                    subscripting operators later.</p>
               
               <h4><FONT COLOR="#000080">Simple Slicing</FONT></H4>
               
               <p>The simplest way to slice an array
                    follows the pattern of a Fortran DO loop. You specify</p>
               <UL><LI> a starting index </FONT></LI>
                    <LI> a total length </FONT></LI>
                    <LI> a stride, or distance between
                         subsequent indices</FONT></LI>
               </UL>
               
               <p> <A href="list3.htm">Listing 3 </A>shows
                    the class slice, which stores these three items. There's not
                    much to it.</p>
               
               <p>If you use a slice object as a
                    subscript to a valarray object, the result is an object of
                    template class slice_array. <A href="list4.htm">Listing 4</A>
                    shows the definition of this template class. The class
                    describes an object that stores a reference to an object x
                    of class valarray&lt;T&gt;, along with an object sl of class
                    slice which describes the sequence of elements to select
                    from the valarray&lt;T&gt; object. </p>
               
               <p> You construct a slice_array&lt;T&gt;
                    object only by writing an expression of the form x[sl]. The
                    member functions of class slice_array then behave like the
                    corresponding function signatures defined for valarray&lt;T&gt;,
                    except that only the sequence of selected elements is
                    affected. </p>
               
               <p> The sequence consists of sl.size()
                    elements, where element i becomes the index sl.start() + i *
                    sl.stride() within x. For example:</p>

<PRE>
// x[slice(2, 5, 3)] selects elements with
//   indices 2, 5, 8, 11, 14
</PRE>
               
               <p>You can also make a more general
                    slice, consisting of multiple triples of the slice variety.
                    This is not the same as defining a slice through a
                    multidimensional array &#151; it is much more general &#151; but it
                    can be made to look like such a slice with careful attention
                    to the indexing arithmetic. </p>
               
               <p><A href="list5.htm"> Listing 5</A>
                    shows the class gslice. The class stores the parameters that
                    characterize a gslice_array when an object of class gslice
                    appears as a subscript for an object of class valarray&lt;T&gt;.
                    The stored values include:</p>
               <UL><LI> a starting index </FONT></LI>
                    <LI> a length vector of class
                         valarray&lt;size_t&gt; </FONT></LI>
                    <LI> a stride vector of class
                         valarray&lt;size_t&gt; </FONT></LI>
               </UL>
               
               <p> The two vectors must have the same
                    length.</p>
               
               <p><A href="list6.htm">Listing 6</A>
                    shows the template class gslice_array. The class describes
                    an object that stores a reference to an object x of class
                    valarray&lt;T&gt;, along with an object gs of class gslice
                    which describes the sequence of elements to select from the
                    valarray&lt;T&gt; object. </p>
               
               <p> You construct a gslice_array&lt;T&gt;
                    object only by writing an expression of the form x[gs]. The
                    member functions of class gslice_array then behave like the
                    corresponding function signatures defined for valarray&lt;T&gt;,
                    except that only the sequence of selected elements is
                    affected. </p>
               
               <p> The sequence is determined as
                    follows. For a length vector gs.size() of length N,
                    construct the index vector valarray&lt;size_t&gt; idx(0, N).
                    This designates the initial element of the sequence, whose
                    index k within x is given by the mapping:</p>

<PRE>
k = start;
for (size_t i = 0; i &lt; gs.size()[i]; ++i)
    k += idx[i] * gs.stride()[i];
</PRE>
               
               <p></p>
               
               <p>The successor to an index vector value
                    is given by:</p>

<PRE>
for (size_t i = N; 0 &lt; i--; )
    if (++idx[i] &lt; gs.size()[i])
        break;
    else
        idx[i] = 0;
</PRE>
               
               <p>For example:</p>

<PRE>
const size_t lv[] = {2, 3};
const size_t dv[] = {7, 2};
const valarray&lt;size_t&gt; len(lv, 2), str(dv, 2);
// x[gslice(3, len, str)] selects elements with
//   indices 3, 5, 7, 10, 12, 14
</PRE>
               
               <h4><FONT COLOR="#000080">Masking and
               Indirection</FONT></H4>
               
               <p>Yet another way of selecting elements
                    from an object of class valarray&lt;T&gt; involves the use
                    of a mask array. Each bit in the mask array selects whether
                    to include the corresponding element of the underlying
                    valarray&lt;T&gt; object. </p>
               
               <p><A href="list7.htm"> Listing 7</A>
                    shows the template class mask_array, which performs this
                    service. The class describes an object that stores a
                    reference to an object x of class valarray&lt;T&gt;, along
                    with an object ba of class valarray&lt;bool&gt; which
                    describes the sequence of elements to select from the
                    valarray&lt;T&gt; object. </p>
               
               <p> You construct a mask_array&lt;T&gt;
                    object only by writing an expression of the form x[ba]. The
                    member functions of class mask_array then behave like the
                    corresponding function signatures defined for valarray&lt;T&gt;,
                    except that only the sequence of selected elements is
                    affected. </p>
               
               <p> The sequence consists of at most
                    ba.size() elements. An element j is included only if ba[j]
                    is true. Thus, there are as many elements in the sequence as
                    there are true elements in ba. If i is the index of the
                    lowest true element in ba, then x[i] is element zero in the
                    selected sequence. For example:</p>

<PRE>
const bool vb[] = {false, false, true, true, false, true};
// x[valarray&lt;bool&gt;(vb, 56)] selects elements with
//   indices 2, 3, 5
</PRE>
               
               <p>Still another selection technique
                    involves indirection. You specify a vector of indexes which
                    in turn select the corresponding elements to include from
                    the underlying valarray&lt;T&gt; object.</p>
               
               <p><A href="list8.htm">Listing 8</A>
                    shows the template class indirect_array, which performs this
                    service. The class describes an object that stores a
                    reference to an object x of class valarray&lt;T&gt;, along
                    with an object xa of class valarray&lt;size_t&gt; which
                    describes the sequence of elements to select from the
                    valarray&lt;T&gt; object. </p>
               
               <p> You construct an indirect_array&lt;T&gt;
                    object only by writing an expression of the form x[xa]. The
                    member functions of class indirect_array then behave like
                    the corresponding function signatures defined for valarray&lt;T&gt;,
                    except that only the sequence of selected elements is
                    affected. </p>
               
               <p> The sequence consists of xa.size()
                    elements, where element i becomes the index xa[i] within x.
                    For example:</p>

<PRE>
const size_t vi[] = {7, 5, 2, 3, 8};
// x[valarray&lt;size_t&gt;(vi, 5)] selects elements with
//   indices 7, 5, 2, 3, 8
</PRE>
               
               <h4><FONT COLOR="#000080">Subscripting</FONT></H4>
               
               <p>With those elaborate preliminaries out
                    of the way, we can now revisit assignment and subscripting
                    in template class valarray. <A href="list9.htm">Listing 9</A>
                    shows the definitions of the member function operators.
                    These operators, the constructors for valarray, and the
                    auxiliary templates and classes described earlier all work
                    together to provide the clever subscripting tricks described
                    earlier. Here is a brief summary of what you can do with
                    operator[]:</p>

<PRE>
T&amp; operator[](size_t n);
</PRE>
               
               <p>The member operator selects element n.
                    For example:</p>

<PRE>
valarray&lt;char&gt; v0("abcdefghijklmnop", 16);
v0[3] = 'A';
// v0 == valarray&lt;char&gt;("abcAefghijklmnop", 16)
slice_array&lt;T&gt; operator[](slice sa);
</PRE>
               
               <p>The member operator selects those
                    elements of the controlled sequence designated by sa. For
                    example:</p>

<PRE>
valarray&lt;char&gt; v0("abcdefghijklmnop", 16);
valarray&lt;char&gt; v1("ABCDE", 5);
v0[slice(2, 5, 3)] = v1;
// v0 == valarray&lt;char&gt;("abAdeBghCjkDmnEp", 16)

gslice_array&lt;T&gt; operator[](const gslice&amp; ga);
</PRE>
               
               <p>The member operator selects those
                    elements of the controlled sequence designated by ga. For
                    example:</p>

<PRE>
valarray&lt;char&gt; v0("abcdefghijklmnop", 16);
valarray&lt;char&gt; v1("ABCDEF", 6);
const size_t lv[] = {2, 3};
const size_t dv[] = {7, 2};
const valarray&lt;size_t&gt; len(lv, 2), str(dv, 2);
v0[gslice(3, len, str)] = v1;
// v0 == valarray&lt;char&gt;("abcAeBgCijDlEnFp", 16)

mask_array&lt;T&gt; operator[](const valarray&lt;bool&gt;&amp;ba);
</PRE>
               
               <p>The member operator selects those
                    elements of the controlled sequence designated by ba. For
                    example:</p>

<PRE>
valarray&lt;char&gt; v0("abcdefghijklmnop", 16);
valarray&lt;char&gt; v1("ABC", 3);
const bool vb[] =
    {false, false, true, true, false, true};
v0[valarray&lt;bool&gt;(vb, 6)] = v1;
// v0 == valarray&lt;char&gt;("abABeCghijklmnop", 16)

indirect_array&lt;T&gt; operator[](const valarray&lt;size_&gt;&amp; xa);
</PRE>
               
               <p>The member operator selects those
                    elements of the controlled sequence designated by ia. For
                    example:</p>

<PRE>
valarray&lt;char&gt; v0("abcdefghijklmnop", 16);
valarray&lt;char&gt; v1("ABCDE", 5);
const size_t vi[] = {7, 5, 2, 3, 8};
v0[valarray&lt;size_t&gt;(vi, 5)] = v1;
// v0 == valarray&lt;char&gt;("abCDeBgAEjklmnop", 16)
</PRE>
               
               <p>A second group of five member
                    operators each construct an object that represents the
                    value(s) selected. The selected elements must exist.</p>

<PRE>
T operator[](size_t n) const;
</PRE>
               
               <p>The member operator returns the value
                    of element n. For example:</p>

<PRE>
valarray&lt;char&gt; v0("abcdefghijklmnop", 16);
// v0[3] returns 'd'

valarray&lt;T&gt; operator[](slice sa) const;
</PRE>
               
               <p>The member operator returns an object
                    of class valarray&lt;T&gt; containing those elements of the
                    controlled sequence designated by sa. For example:</p>

<PRE>
valarray&lt;char&gt; v0("abcdefghijklmnop", 16);
// v0[slice(2, 5, 3)] returns valarray&lt;char&gt;("cfilo", 5)

valarray&lt;T&gt; operator[](const gslice&amp; ga) const;
</PRE>
               
               <p>The member operator selects those
                    elements of the controlled sequence designated by ga. For
                    example:</p>

<PRE>
valarray&lt;char&gt; v0("abcdefghijklmnop", 16);
const size_t lv[] = {2, 3};
const size_t dv[] = {7, 2};
const valarray&lt;size_t&gt; len(lv, 2), str(dv, 2);
// v0[gslice(3, len, str)] returns
//    valarray&lt;char&gt;("dfhkmo", 6)

valarray&lt;T&gt; operator[](const valarray&lt;bool&gt;&amp; ba) const;
</PRE>
               
               <p>The member operator selects those
                    elements of the controlled sequence designated by ba. For
                    example:</p>

<PRE>
valarray&lt;char&gt; v0("abcdefghijklmnop", 16);
const bool vb[] = {false, false, true, true, false, true};
// v0[valarray&lt;bool&gt;(vb, 6)] returns
//    valarray&lt;char&gt;("cdf", 3)

valarray&lt;T&gt; operator[](const valarray&lt;size_t&gt;&amp; xa) const;
</PRE>
               
               <p>The member operator selects those
                    elements of the controlled sequence designated by ia. For
                    example:</p>

<PRE>
valarray&lt;char&gt; v0("abcdefghijklmnop", 16);
const size_t vi[] = {7, 5, 2, 3, 8};
// v0[valarray&lt;size_t&gt;(vi, 5)] returns
//    valarray&lt;char&gt;("hfcdi", 3)
</PRE>
               
               <p>If you can understand these ten
                    examples, you will understand valarray. You might even be
                    inspired to think of some clever uses for it. o </p>
               
               <p><I>P.J. Plauger is Senior Editor of
                    C/C++ Users Journal and President of Dinkumware, Ltd. He is
                    the author of the Standard C++ Library shipped with
                    Microsoft's Visual C++, v5.0. For eight years, he served as
                    convener of the ISO C standards committee, WG14. He remains
                    active on the C++ committee, WG21. His latest books are The
                    Draft Standard C++ Library, Programming on Purpose (three
                    volumes), and Standard C (with Jim Brodie), all published by
                    Prentice-Hall. You can reach him at pjp@plauger.com. </I></p>
     
<h4><a href="../../../source/1997/aug97/plauger.zip">Get Article Source Code</a></h4>

          </BLOCKQUOTE>
     </BODY>
</HTML>
