



<HTML><HEAD>

<TITLE>August 1997/Standard C/C++/Listing 7</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4>Listing 7:	Template class mask_array</h4>

<pre>
        // MACROS
#define MOP(RHS) \
    size_t N = 0; \
    size_t M = Totlen(); \
    for (size_t I = 0; I &lt; M; ++N) \
        if (Mask(N)) \
            Ptr[N] RHS, ++I;
#define MOP2(RHS) \
    size_t N = 0; \
    size_t M = L.Totlen(); \
    for (size_t I = 0; I &lt; M; ++N) \
        if (L.Mask(N)) \
            L.Data(N) RHS, ++I;

        // TEMPLATE CLASS mask_array
template&lt;class Ty&gt;
    class mask_array {
public:
    typedef Ty value_type;
    void operator=(const valarray&lt;Ty&gt;&amp; R)
        {MOP(= R[I]); }
    void operator=(const Ty&amp; R)
        {MOP(= R); }
    Ty&amp; Data(size_t I) const
        {return (Ptr[I]); }
    bool Mask(size_t I) const
        {return (Marr[I]); }
    size_t Totlen() const
        {size_t N = 0;
        for (size_t I = 0; I &lt; Marr.size(); ++I)
            if (Marr[I])
                ++N;
        return (N); }
private:
    friend class valarray&lt;Ty&gt;;
    mask_array(const Boolarray&amp; Ma, Ty *Pd)
        : Marr(Ma), Ptr(Pd) {}
    Boolarray Marr;
    Ty *Ptr;
    };

        // mask_array MEMBER TEMPLATE OPERATORS
template&lt;class Ty&gt; inline
    void operator*=(const mask_array&lt;Ty&gt;&amp; L,
        const valarray&lt;Ty&gt;&amp; R)
    {MOP2(*= R[I]); }
// etc.
//End of File
</pre>
</body></html>
