



<HTML><HEAD>

<TITLE>August 1997/Standard C/C++/Listing 1</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4>Listing 1:	Template class valarray</h4>

<pre>
        // MACROS
#define VALOP(TYPE, LENGTH, RHS) \
    valarray&lt;TYPE&gt; Ans(LENGTH); \
    for (size_t I = 0; I &lt; Ans.size(); ++I) \
        Ans[I] = RHS; \
    return (Ans)
#define VALGOP(RHS) \
    for (size_t I = 0; I &lt; size(); ++I) \
        Ptr[I] RHS; \
    return (*this)
#define VALGOP2(RHS) \
    for (size_t I = 0; I &lt; L.size(); ++I) \
        L[I] RHS; \
    return (L)

        // TEMPLATE CLASS valarray
template&lt;class Ty&gt;
    class valarray {
public:
    typedef Ty value_type;
    explicit valarray(size_t N = 0)
        {Tidy(), Res = N, Grow(N); }
    valarray(const Ty&amp; X, size_t N)
        {Tidy(), Grow(N, &amp;X); }
    valarray(const Ty *S, size_t N)
        {Tidy(), Grow(N, S, 1); }
    valarray(const valarray&lt;Ty&gt;&amp; X)
        {Tidy(), Grow(X.size(), X.Ptr, 1); }
    valarray(const slice_array&lt;Ty&gt;&amp; Sl)
        {Tidy();
        *this = Sl; }
    valarray(const gslice_array&lt;Ty&gt;&amp; Gs)
        {Tidy();
        *this = Gs; }
    valarray(const mask_array&lt;Ty&gt;&amp; Ma)
        {Tidy();
        *this = Ma; }
    valarray(const indirect_array&lt;Ty&gt;&amp; Ia)
        {Tidy();
        *this = Ia; }
    ~valarray()
        {Tidy(true); }
    valarray&lt;Ty&gt;&amp; operator=(const valarray&lt;Ty&gt;&amp; R)
        {if (this == &amp;R)
            return (*this);
        Grow(R.size(), 0, 0, true);
        VALGOP(= R[I]); }
    valarray&lt;Ty&gt;&amp; operator=(const Ty&amp; R)
        {VALGOP(= R); }
    void resize(size_t N)
        {resize(N, Ty()); }
    void resize(size_t N, const Ty C)
        {Grow(N, &amp;C, 0, true); }
    valarray&lt;Ty&gt;&amp; operator=(const slice_array&lt;Ty&gt;&amp; Sl);
    valarray&lt;Ty&gt;&amp; operator=(const gslice_array&lt;Ty&gt;&amp; Gs);
    valarray&lt;Ty&gt;&amp; operator=(const mask_array&lt;Ty&gt;&amp; Ma);
    valarray&lt;Ty&gt;&amp; operator=(const indirect_array&lt;Ty&gt;&amp; Ia);
    size_t size() const
        {return (Len); }
    Ty operator[](size_t I) const
        {return (Ptr[I]); } 
    Ty&amp; operator[](size_t I)
        {return (Ptr[I]); }
    valarray&lt;Ty&gt; operator[](slice Sl) const;
    slice_array&lt;Ty&gt; operator[](slice Sl);
    valarray&lt;Ty&gt; operator[](const gslice&amp; Gs) const;
    gslice_array&lt;Ty&gt; operator[](const gslice&amp; Gs);
    valarray&lt;Ty&gt; operator[](
        const Boolarray&amp; Ba) const;
    mask_array&lt;Ty&gt; operator[](
        const Boolarray&amp; Ba);
    valarray&lt;Ty&gt; operator[](const Sizarray&amp; Ia) const;
    indirect_array&lt;Ty&gt; operator[](const Sizarray&amp; Ia);
    Ty sum() const
        {Ty Sum = Ptr[0];
        for (size_t I = 0; ++I &lt; size(); )
            Sum += Ptr[I];
        return (Sum); }
    Ty min() const
        {Ty Min = Ptr[0];
        for (size_t I = 0; ++I &lt; size(); )
            if (Ptr[I] &lt; Min)
                Min = Ptr[I];
        return (Min); }
    Ty max() const
        {Ty Max = Ptr[0];
        for (size_t I = 0; ++I &lt; size(); )
            if (Max &lt; Ptr[I])
                Max = Ptr[I];
        return (Max); }
    valarray&lt;Ty&gt; shift(int N) const
        {static Ty Def;
        VALOP(Ty, size(),
            0 &lt; N &amp;&amp; size() - I &lt;= N
                || N &lt; 0 &amp;&amp; I  &lt; -N
                    ? Def : Ptr[I + N]); }
    valarray&lt;Ty&gt; cshift(int N) const
        {if (size() == 0)
            ;
        else if (N &lt; 0)
            {if ((N += size()) &lt; 0)
                N = size() - (-N) % size(); }
        else if (size() &lt;= N)
            N %= size();
        VALOP(Ty, size(),
            size() - I &lt;= N
                ? Ptr[I - size() + N] : Ptr[I + N]); }
    valarray&lt;Ty&gt; apply(Ty F(Ty)) const
        {VALOP(Ty, size(), F(Ptr[I])); }
    valarray&lt;Ty&gt; apply(Ty F(const Ty&amp;)) const
        {VALOP(Ty, size(), F(Ptr[I])); }
private:
    void Grow(size_t N, const Ty *S = 0, size_t D = 0,
        bool Trim = 0)
        {size_t Os = Ptr == 0 ? 0 : Res;
        if (N == 0)
            {if (Trim)
                Tidy(true); }
        else if (N == Os || N &lt; Os &amp;&amp; !Trim)
            ;
        else
            {size_t I, M = Ptr == 0 &amp;&amp; N &lt; Res ? Res : N;
            Ty *Np = new Ty[M];
            if (Np == 0)
                Nomemory();
            size_t Nm = N &lt; Len ? N : Len;
            for (I = 0; I &lt; Nm; ++I)
                Np[I] = Ptr[I];
            if (S != 0)
                for (; I &lt; M; ++I, S += D)
                    Np[I] = *S;
            Tidy(true), Ptr = Np, Res = M; }
        Len = N; }
    void Tidy(bool Constructed = 0)
        {if (Constructed &amp;&amp; Ptr != 0)
            delete[] Ptr;
        Len = 0, Ptr = 0, Res = 0; }
     Ty *Ptr;
    size_t Len, Res;
    };
//End of File
</pre>
</body></html>
