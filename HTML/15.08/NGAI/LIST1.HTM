



<HTML><HEAD>

<TITLE>August 1997/A Template for Reference Counting/Listing 1</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4>Listing 1:	Reference count template</h4>

<pre>
#ifndef __RefCount_h__
#define __RefCount_h__

template&lt;class DATA&gt;
class CHReferenceCount
{
public:
    CHReferenceCount();
    CHReferenceCount(const CHReferenceCount&lt;DATA&gt;&amp; objRefCount);
    ~CHReferenceCount();
    CHReferenceCount&lt;DATA&gt;&amp;
      operator=(const CHReferenceCount&lt;DATA&gt; &amp;robjRefCount);
    void Reset();

protected:
    inline const DATA* const GetData() const;
    inline DATA* const GetData();

private:
    // Reference counting implementation
    void CopyOnWrite();
    void CopyReference(const CHReferenceCount&lt;DATA&gt;&amp; robjRefCount);
    void NewReference();
    void ReleaseReference();
    
    inline int ReferenceCount();

    DATA*  m_pRefData;  // pointer to shared data structure
    int*  m_pnRefCount; // pointer to reference counter
};

///////////////////////////////////////////////////////////////////
// inline functions

template&lt;class DATA&gt;
inline const DATA* const CHReferenceCount&lt;DATA&gt;::GetData() const
{
    return m_pRefData;
}

template&lt;class DATA&gt;
inline DATA* const CHReferenceCount&lt;DATA&gt;::GetData()
{
    if (ReferenceCount() &gt; 1)
        CopyOnWrite();
    return m_pRefData;
}

template&lt;class DATA&gt;
inline int CHReferenceCount&lt;DATA&gt;::ReferenceCount()
{
    return *m_pnRefCount;
}

///////////////////////////////////////////////////////////////////
// out-of-line functions
template&lt;class DATA&gt;
CHReferenceCount&lt;DATA&gt;::CHReferenceCount()
{
    NewReference();
}

template&lt;class DATA&gt;
CHReferenceCount&lt;DATA&gt;::CHReferenceCount
    (const CHReferenceCount&lt;DATA&gt;&amp; robjRefCount)
{ 
    CopyReference(robjRefCount);
}

template&lt;class DATA&gt;
CHReferenceCount&lt;DATA&gt;::~CHReferenceCount()
{
    ReleaseReference();
}

template&lt;class DATA&gt;
CHReferenceCount&lt;DATA&gt;&amp;
CHReferenceCount&lt;DATA&gt;::operator=
    (const CHReferenceCount&lt;DATA&gt;&amp; robjRefCount)
{
    if (robjRefCount.m_pRefData != m_pRefData)
    {
        ReleaseReference();
        CopyReference(robjRefCount);
    }

    return(*this);
}

template&lt;class DATA&gt;
void CHReferenceCount&lt;DATA&gt;::CopyReference
    (const CHReferenceCount&lt;DATA&gt;&amp; robjRefCount)
{
    ASSERT(robjRefCount.m_pRefData &amp;&amp; robjRefCount.m_pnRefCount);
    
    m_pRefData = robjRefCount.m_pRefData;
    m_pnRefCount = robjRefCount.m_pnRefCount;
    ++*m_pnRefCount;
}

template&lt;class DATA&gt;
void CHReferenceCount&lt;DATA&gt;::NewReference()
{
    m_pRefData = new DATA;
    m_pnRefCount = new int(1);
}

template&lt;class DATA&gt;
void CHReferenceCount&lt;DATA&gt;::ReleaseReference()
{
    --*m_pnRefCount;
    
    if (*m_pnRefCount == 0)
    {
        delete m_pnRefCount;
        m_pnRefCount=NULL;

        delete m_pRefData;
        m_pRefData=NULL;
    }
}

template&lt;class DATA&gt;
void CHReferenceCount&lt;DATA&gt;::CopyOnWrite()
{
    DATA* pRefData = new DATA(*m_pRefData);

    ReleaseReference();
    
    m_pRefData = pRefData;
    m_pnRefCount = new int(1);
}

template&lt;class DATA&gt;
void CHReferenceCount&lt;DATA&gt;::Reset()
{
    ReleaseReference();
    m_pRefData =  new DATA;
    m_pnRefCount = new int(1);
}

#endif
//End of File
</pre>
</body></html>
