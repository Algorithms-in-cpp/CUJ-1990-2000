



<HTML><HEAD>

<TITLE>August 1997/Named Pipes Under Windows 95/Listing 3</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4>Listing 3:	A logging example using CommsChannel</h4>

<pre>
#include &lt;iostream.h&gt;
#include "channel.hpp"
#include &lt;string.h&gt;

#define LOG_BUFFER   255

class LogServer {
   public:
      LogServer();
      void run();

   private:
      CommsChannel   server;
      bool           ok;
   };

class Logger {
   public:
      Logger();
      void log(string message);

   private:
      CommsChannel   client;
      bool           ok;
   };


// Log server implementation

LogServer::LogServer () : server("ExampleLogger", LOG_BUFFER) {
   if ( server.status() == CommsChannel::ok ) {
      ok = true;
      }
   else {
      ok = false;
      cout &lt;&lt; "CommsChannel could not be opened." &lt;&lt; endl;
      }
   }

void
LogServer::run() {
   char buffer[LOG_BUFFER+1];
   int bytes;
   char pause;

   cout &lt;&lt; "Log server started" &lt;&lt; endl;

   while (ok) {
      bytes = server.readBlocking(buffer, 1);
      if (bytes == 1) {
         bytes = buffer[0];
         bytes = server.readBlocking(buffer, bytes);
         if (bytes &gt; 0) {
            buffer[bytes] = '\0';
            cout &lt;&lt; buffer &lt;&lt; endl;
            }

         cin &gt;&gt; pause;
         }

      if (server.status() != CommsChannel::ok) {
         ok = false;
         }
      }

   cout &lt;&lt; "Log server stopping. Last status was: ";
   cout &lt;&lt; server.status() &lt;&lt; endl;
   }

// Log client implementation

Logger::Logger () : client("ExampleLogger") {
   if ( client.status() == CommsChannel::ok ) {
      ok = true;
      }
   else {
      ok = false;
      cout &lt;&lt; "CommsChannel could not be opened." &lt;&lt; endl;
      }
   }

void
Logger::log(string word) {
   char buffer[LOG_BUFFER+1];
   int bytes = word.length();
 
   if (bytes-2 &gt; LOG_BUFFER) {
      cout &lt;&lt; "Error while logging. Data too long" &lt;&lt; endl;
      }

   buffer[0] = bytes;
   strcpy(&amp;buffer[1], word.c_str());

   if (client.writeBlocking(buffer, bytes+2) &lt; 0) {
      cout &lt;&lt; "Error while logging. Last status was: ";
      cout &lt;&lt; client.status() &lt;&lt; endl;
      }
   }

// Testing - run with an argument in one process for a server,
// without an argument in another process as the client
void main(int argc) {
   if (argc &gt; 1) {      // server
      LogServer s;
      s.run();
      }
   else {               // client
      string word;
      Logger l;
      while(true) {
         cout &lt;&lt; "Log word: ";
         cin &gt;&gt; word;
         l.log(word);
         }
      }
   }

//End of File
</pre>
</body></html>
