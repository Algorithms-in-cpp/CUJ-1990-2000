



<HTML><HEAD>

<TITLE>August 1997/A Portable Multithreading Framework/Listing 5</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4>Listing 5:	Example of test program</h4>

<pre>
#include &lt;kfThread.h&gt;
#include "list.h"

// pool of resources
list pool;


//---------------------------------------------
// producer class
//
class producer: public CKFMT::CRunnable {
public:
    producer(long howmany, list *lst);

    void run();

private:
    long  m_max;
    list *m_lst;
};

producer::producer(long howmany, list *lst)
{
    m_max = howmany;
    m_lst = lst;
}

void
producer::run()
{
    for(int i=0; i &lt; m_max; i++) {
    long *rs = new long;
    *rs = i;
    m_lst-&gt;insert((void *)rs);

    for(int j=0; j &lt; 3000; j++);
    }
    cerr &lt;&lt; "Produced " &lt;&lt; m_max &lt;&lt; " resources.\n";
}

//---------------------------------------------
// consumer class
//
class consumer : public CKFMT::CRunnable {
public:
    consumer(list *lst);

    void run();

    long count() { return m_count; };

private:
    list *m_lst;
    long  m_count;

};

consumer::consumer(list *lst)
{
    m_lst = lst;
    m_count = 0;
}

void 
consumer::run()
{
    for(;;) {
    long *rv = (long *)m_lst-&gt;get();
    if (rv == NULL) {
        cerr &lt;&lt; "Consumed " &lt;&lt; m_count &lt;&lt; " resources.\n";
        return;
    }
    else {
         delete rv;
         m_count++;
         if ((m_count % 50) == 0)
        cerr &lt;&lt; "Consumed " &lt;&lt; m_count &lt;&lt; " resources.\n";
    }
    }
}

int 
main(int argc, char **argv)
{

    // start consumer
    consumer *con = new consumer(&amp;pool);
    con-&gt;increment();
    CKFMT::CThread *cont = new CKFMT::CThread(con);
    cont-&gt;make_runnable();

    // start 2 producers
    // start producer # 1
    producer *prod1 = new producer(200, &amp;pool);
    prod1-&gt;increment();
    CKFMT::CThread *prodt1 = new CKFMT::CThread(prod1);
    prodt1-&gt;make_runnable();

    // start producer #2
    producer *prod2 = new producer(100, &amp;pool);
    prod2-&gt;increment();
    CKFMT::CThread *prodt2 = new CKFMT::CThread(prod2);
    prodt2-&gt;make_runnable();

    prod1-&gt;wait_for_completion();
    prod2-&gt;wait_for_completion();
    con-&gt;wait_for_completion();
}

//End of File
</pre>
</body></html>
