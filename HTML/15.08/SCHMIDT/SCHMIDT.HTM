






<HTML>
     
     <HEAD>


          
          <TITLE>August 1997/The Learning C/C++urve</TITLE>
     </HEAD>
     
     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          
          <H2><A href="../tocaug.htm"><IMG src="../../toc.gif" ALT="Back to TOC" WIDTH="54" HEIGHT="54"></A>
          <FONT COLOR="#FF0000">Columns</FONT></H2>
          
          <HR>
          
          <H2 ALIGN="center"><FONT COLOR="#800000">The Learning C/C++urve
          </FONT></H2>
          
          <H3 ALIGN="center"><FONT COLOR="#800000"> Bobby Schmidt</FONT></H3>
          
          <H3 ALIGN="center"><FONT COLOR="#800000">Me And My Arrow</FONT></H3>
          
          <BLOCKQUOTE>
               
               <P>Lots of people want an auto-pointer template class, but
                    agreeing on what it should do is not so easy.</P>
               
               </BLOCKQUOTE>
          <HR>
          <BLOCKQUOTE>
               <P><B><I>Copyright &copy; 1997 Robert H. Schmidt</I></B></P> 
               <p> I continue with variations on
                    auto_ptr, wrought by my dissatisfaction with pointers in
                    general and MAPI in particular. Last month I referred you to
                    the July 1996 CUJ for auto_ptr's class definition. Upon
                    reflection, I have decided to list the class this month,
                    better enabling comparisons between this "base"
                    auto_ptr version and the alternatives I'll be suggesting.
                    The base auto_ptr appears in <A href="list1.htm">Listing 1</a>.

                    </p>
               
               <p> This listing comes from the Draft
                    Standard [<A href="#NOTE1">1</a>]
. If you are not used to
                    reading STL code you may find the definition a bit daunting.
                    I certainly find a lot there that is at best tangential, and
                    at worst distracting, to this discussion. I will therefore
                    do us all a simplifying favor by moving the template from
                    namespace std to global scope, and removing the throw
                    clauses, STLish typedef, and explicit support for
                    inheritance. </p>
               
               <p> I will also add two private members
                    that don't show up in the Standard, members representing a
                    typical auto_ptr implementation:</p>
               <UL><LI> pointer_ holds the real address
                         of the contained, pointed-to object. </FONT></LI>
                    <LI> is_owner_ indicates whether or
                         not the containing auto_ptr object owns the pointed-to
                         object. is_owner_ is declared mutable, so that const
                         auto_pointers can silently exchange object ownership.</FONT></LI>
               </UL>
               
               <p>I'm making the destructor the first
                    declared function member. This is a recent stylistic change
                    for me, one that I'm still evaluating. </p>
               
               <p> Each class must have exactly one
                    destructor, while it may have any number of constructors. In
                    the presence of inheritance, that destructor should probably
                    be declared virtual, while constructors can never be
                    declared virtual. By always putting the destructor at the
                    top, I am reminded to declare it correctly. </p>
               
               <p> Also, I often find parallel structure
                    between my constructors and assignment operators, so that
                    declaring them contiguously, or even intermingled, gives a
                    clearer view of a class's object copying semantics. </p>
               
               <p> Since the class is no longer the real
                    STL auto_ptr, I've changed the name to the related
                    auto_pointer. With a few other minor tweaks, the combined
                    effect is</p>

<PRE>
template&lt;class t&gt;
class auto_pointer
    {
public:
    ~auto_pointer();
    explicit auto_pointer(t * = NULL);
    auto_pointer
        (const auto_pointer &amp;);
    auto_pointer &amp;operator=
        (const auto_pointer &amp;);
    t&amp; operator*() const;
    t* operator-&gt;() const;
    t* get() const;
    t* release() const;
private:
    mutable bool is_owner_;
    t *pointer_;
    };
</PRE>
               
               <p>You should find most of the public
                    members fairly intuitive:</p>
               <UL><LI> ~auto_pointer deletes the
                         contained object if the containing object owns it
                         (i.e., if is_owner_ is true).</FONT></LI>
                    <LI> auto_pointer creates a new
                         object, initializing the contained pointer_ to NULL,
                         the value of an existing real pointer, or the pointer_
                         contained in another auto_pointer object.</FONT></LI>
                    <LI> operator= copies from an
                         existing real pointer or auto_pointer.</FONT></LI>
                    <LI> operator* and operator-&gt; act
                         on auto_pointers just as the built-in operators unary *
                         and -&gt; act on real pointers. operator* returns a
                         reference to the pointed-to object (*pointer_), while
                         operator-&gt; returns pointer_.</FONT></LI>
               </UL>
               
               <p>The last two public members &#151; get and
                    release &#151; bear more explanation.</p>
               
               <h4><FONT COLOR="#000080">get</FONT></H4>
               
               <p>get returns the same thing as
                    operator-&gt;, offering a more convenient notation for
                    places where infix operator syntax is awkward or impossible.
                    Consider the following statements using real pointers:</p>

<PRE>
char *p = "Rock Me, Amadeus";
char *q = p;
</PRE>
               
               <p>Change the code so that p is an
                    auto_pointer. What you'd like to write is</p>

<PRE>
auto_pointer&lt;char&gt; p = "Rock Me, Amadeus";
char *q = p;
</PRE>
               
               <p>Unfortunately, with our current
                    definition of auto_pointer, the line</p>

<PRE>
char *q = p; // error
</PRE>
               
               <p>doesn't compile &#151; an auto_pointer
                    does not implicitly convert to a real pointer. You could use
                    operator-&gt; to solve this problem, since that function
                    does return a real pointer. However, you must use the
                    function form</p>
               
               <p></p>

<PRE>
char *q = p.operator-&gt;(); // OK
</PRE>
               
               <p>since the infix equivalent</p>

<PRE>
char *q = p-&gt;; // error
</PRE>
               
               <p>won't compile. Because the functional
                    notation is rather unaesthetic, auto_pointer provides the
                    more normal looking</p>

<PRE>
char *q = p.get(); // OK
</PRE>
               
               <p>get is a const member function, which
                    may surprise you. Remember, a real pointer can stay const
                    while the thing it points to can change:</p>

<PRE>
char * const p = "abc";
*p = 'x'; // OK, what p points to can change
p = "x"   // error, p itself cannot change
</PRE>
               
               <p>Similarly, by yielding a non-const
                    pointer, an auto_pointer can stay the same while the
                    pointed-to object can change. This same reasoning explains
                    the const-ness of operator-&gt;.</p>
               
               <p>Speaking of operator-&gt;, I should
                    give you an extra word of warning here. A real C++ pointer
                    allows -&gt; only when that pointer well and truly points to
                    a class, struct, or union. When you call auto_pointer's
                    operator-&gt; with traditional infix notation in</p>

<PRE>
auto_pointer&lt;t&gt; p;
p-&gt;m = 123;
</PRE>
               
               <p>p must obey these same rules; that is,
                    it must point to something that has members. If you use the
                    more explicit operator syntax</p>

<PRE>
p.operator-&gt;();
</PRE>
               
               <p>then p doesn't have to point to
                    something with members. Note that you can't do this with
                    real C++ pointers:</p>

<PRE>
t *p;
p.operator-&gt;(); // error
</PRE>
               
               <p>since they are not class objects, and
                    thus don't have operator class members.</p>
               
               <p>Because the compiler can't force
                    auto_pointer to always reference something with members, it
                    may give you a warning like "you are defining operator-&gt;
                    for pointers that may not be able to call it infix." I
                    remember getting such a warning with Microsoft Visual C++
                    4.x; my current Macintosh compiler gives no such warning.
                    You may be able to use template specialization to deflect
                    the warning, but that's a topic well beyond this series.</p>
               
               <h4><FONT COLOR="#000080">release</FONT></H4>
               
               <p>release is equivalent to a get that
                    yields ownership of the pointed-to object. Such releasing
                    action is implicit when you copy or assign an auto_pointer.
                    By calling release, you make the ownership transfer
                    explicit. This technique offers a solution to one of the
                    problems I cited last month:</p>

<PRE>
auto_pointer&lt;char&gt; p1 = new char;
if (true)
    auto_pointer&lt;char&gt; p2 = p1;
*p1 = 'a'; // run-time error
</PRE>
               
               <p>where p2's destructor deletes the
                    pointed-to object out from under p1. If you change the code
                    to</p>

<PRE>
auto_pointer&lt;char&gt; p1 = new char;
if (true)
    {
    auto_pointer&lt;char&gt; p2 = p1;
    p2.release(); // p2 is no longer owner
    }
*p1 = 'a'; // OK
</PRE>
               
               <p>p2's destructor no longer deletes the
                    pointed-to object. Inconviently, neither does p1's. In fact,
                    the object is an orphan &#151; nobody owns it, so nobody deletes
                    it.</p>
               
               <p>As a work-around, you could explicitly
                    delete the pointed-to object:</p>

<PRE>
// ... same as before
delete p1.get();
</PRE>
               
               <p>You could also hand off ownership to
                    another auto_pointer:</p>

<PRE>
// ... same as before
auto_pointer p3 = p1;
// p3's destructor will delete object
</PRE>
               
               <p>although this is an admitedly
                    over-engineered solution. I leave it as an exercise for the
                    student to surmise the effect of</p>

<PRE>
// ... same as before
p1 = p1;
</PRE>
               
               <p>In practice, I suspect you'll most use
                    release to hand object ownership from an auto_pointer to a
                    real pointer:</p>

<PRE>
// p1 is owner
auto_pointer&lt;char&gt; p1 = new char;
// p2 is now owner
char *p2 = p1.release();
// ...
// no longer deleted automatically
delete p2;
</PRE>
               
               <h4><FONT COLOR="#000080">Pointers vs.
               auto_pointers</FONT></H4>
               
               <p>In their current incarnation,
                    auto_pointers can't always mix with real pointers. As I
                    discussed above, declarations like</p>

<PRE>
auto_pointer&lt;char&gt; p;
char *q = p;
</PRE>
               
               <p>won't compile. The moral opposite</p>

<PRE>
char *q;
auto_pointer&lt;char&gt; p = q;
</PRE>
               
               <p>does compile, but the variations</p>

<PRE>
auto_pointer&lt;char&gt; p;
char *q;
p = q;
</PRE>
               
               <p>and</p>

<PRE>
auto_pointer&lt;char&gt; p;
char *q;
q = p;
</PRE>
               
               <p>do not.</p>
               
               <p>As is typically the case with any type
                    conversion involving classes, the place to look for answers
                    is in the single-argument constructors (a.k.a. conversion
                    constructors) and the conversion operators. In general, if
                    you are turning type A into type B, it must be true that
                    either A can turn itself into a B, or B can turn an A into a
                    B [<A href="#NOTE2">2</a>]
. More precisely, there typically
                    must be either a conversion operator of the general form
                    A::operator B(), or a conversion constructor of the general
                    form B::B(A) [<A href="#NOTE3">3</a>]
. </p>
               
               <p> In the case of moving a char * to an
                    auto_pointer&lt;char&gt;, this means that either char * must
                    have the equivalent of a conversion operator returning
                    auto_pointer&lt;char&gt;, or that auto_pointer&lt;char&gt;
                    must have a conversion constructor accepting a char *. The
                    first suggestion is clearly invalid &#151; pointers have no
                    innate knowledge of classes and cannot turn themselves into
                    class types. On the other hand, the second suggestion seems
                    quite plausible, given the existence of</p>

<PRE>
explicit auto_pointer(T * = 0)
</PRE>
               
               <p>in the auto_pointer type definition.
                    This constructor allows the sequence</p>

<PRE>
char *q;
auto_pointer&lt;char&gt; p = q;
</PRE>
               
               <p>But why then does the related sequence</p>

<PRE>
char *q;
auto_pointer&lt;char&gt; p;
p = q;
</PRE>
               
               <p>fail?</p>
               
               <h4><FONT COLOR="#000080">This Program Contains
               Explicit Language</FONT></H4>
               
               <p>The answer lies in the keyword
                    explicit. Were you to change the constructor declaration to</p>

<PRE>
auto_pointer(t * = 0);
</PRE>
               
               <p>the previous example would compile. As
                    its name suggests, explicit means that the constructor must
                    be called explicitly, not implicitly. In the statements</p>

<PRE>
char *q;
auto_pointer&lt;char&gt; p = q;
</PRE>
               
               <p>the second line is equivalent to</p>

<PRE>
auto_pointer&lt;char&gt; p(q);
</PRE>
               
               <p>This rewrite more clearly shows the
                    explicit call to the single-argument constructor. In the
                    apparently similar construct</p>

<PRE>
char *q;
auto_pointer&lt;char&gt; p;
p = q;
</PRE>
               
               <p>the compiler wants to turn q into an
                    auto_pointer&lt;char&gt; by implicitly changing the code to</p>

<PRE>
char *q;
auto_pointer&lt;char&gt; p;
p = auto_pointer&lt;char&gt;(q);
</PRE>
               
               <p>(Note how much this implicit
                    constructor call looks like the explicit call from the
                    previous example.) However, because of the keyword explicit
                    attached to the constructor's declaration, the compiler is
                    not permitted such implicit constructor calls. Were the
                    keyword explicit removed, the above would work, since the
                    restriction against implicit conversions would be gone.</p>
               
               <p>As I have mentioned a few times in
                    this series, MAPI loves pointers. It seems reasonable, then,
                    that MAPI must perceive our pointer replacement to be a real
                    pointer; otherwise, the interfacing problems could overwhelm
                    other considerations. Such a strategy argues against the
                    keyword explicit, since that prevents real pointers from
                    seamlessly turning into auto_pointers.</p>
               
               <h4><FONT COLOR="#000080">Plays Well With
               Others</FONT></H4>
               
               <p>To make the illusion more complete, we
                    need to support the other direction, allowing auto_pointers
                    to seamlessly turn into pointers. In other words, any object
                    of type auto_pointer&lt;T&gt; must have a conversion
                    operator returning the T * equivalent of that object. This
                    conversion function obviates need for the get member, which
                    we can now remove. </p>
               
               <p> In addition to accepting objects via
                    pointer, MAPI also returns objects via pointer, requiring
                    callers to pass in pointer addresses:</p>

<PRE>
SomeMAPIObject *x;
if (ERROR(SomeMAPICall(&amp;x)))
    {
    // ...
    }
</PRE>
               
               <p>As written, we cannot pass
                    auto_pointer this way:</p>

<PRE>
auto_pointer&lt;SomeMAPIObject&gt; x;
if (ERROR(SomeMAPICall(&amp;x))) // error
    {
    // ...
    }
</PRE>
               
               <p></p>
               
               <p>since the type of &amp;x is not
                    SomeMAPIObject * (which MAPI expects) but rather
                    auto_pointer&lt;SomeMAPIObject&gt; *.</p>
               
               <p>As a possible solution, we could
                    override the &amp; operator to return SomeMAPIObject *, but
                    this leads to an interesting design dilemma: do we have the
                    &amp; operator return the real address of the object (as it
                    would for built-in types), or do we have it return the
                    address of the object we're trying to emulate? One strategy
                    is more consistent with general C++ object usage, the other
                    more interoperable with C++ pointer usage.</p>
               
               <p> For this series I have elected to
                    override the built-in &amp; operator, reasoning that I
                    almost never will want to take the address of a genuine
                    auto_pointer object, but often will want to get the address
                    of its underlying pointer. This is consistent with the
                    earlier addition of a conversion constructor and conversion
                    operator, further enhancing the illusion that auto_pointers
                    act like real pointers. </p>
               
               <p> To pull off the illusion correctly,
                    we need two overloads of operator&amp;, one for const
                    objects, and one for non-const objects. For const objects,
                    the returned address cannot be written to; for non-const
                    objects, it can be written to, so that the auto_pointer
                    object can point to something new. </p>
               
               <p> The latter version should make you
                    nervous. Why? Consider the sequence</p>

<PRE>
{
auto_pointer&lt;char&gt; x = new object;
SomeMAPICall(&amp;x);
}
</PRE>
               
               <p>When it's constructed, x owns the new
                    object it points to. The call to SomeMAPICall may change
                    what x points to, so that the original object is orphaned.
                    When x goes out of scope, instead of deleting x's original
                    object, the x destructor deletes the object SomeMAPICall
                    gave it. </p>
               
               <p> As I suggested last month, object
                    ownership is not fool-proof. To effect a partial remedy, I
                    recommend you pass the address of a pointer (real or
                    auto_pointer) only if at least one of these conditions is
                    true:</p>
               <UL><LI> The pointer is set to NULL (so
                         there's no object to orphan). </FONT></LI>
                    <LI> The pointer does not own its
                         pointed-to object. </FONT></LI>
                    <LI> Whatever agent accepts the
                         address (SomeMAPICall in our example) takes ownership
                         of the pointed-to object.</FONT></LI>
               </UL>
               
               <p>For auto_pointers, my preference is a
                    test in the non-const operator&amp;: if the auto_pointer
                    owns a non-NULL object, </p>
               
               <p>operator&amp; throws an exception. Of
                    course, this does nothing to help the more general problem
                    of object ownership with real pointers. You could spend time
                    engineering a more robust solution, say with garbage
                    collection, but I leave that as an exercise for the student.
                    </p>
               
               <p> Combining these changes leads to the
                    class shown in<A href="list2.htm"> Listing 2</a>.
 While I
                    normally abhor removing type safety, I feel the engineering
                    tradeoffs justify the change. Given the choice of real
                    pointers, or less-than-ideal but still stronger
                    auto_pointers, I'll take the latter wherever I can.</p>
               
               <h4><FONT COLOR="#000080">Point Counterpoint</FONT></H4>
               
               <p>Moving beyond this latest version, we
                    face a significant design challenge: how much do we want or
                    need auto_pointers to act like, and interact with, real
                    pointers? Since auto_pointer behavior already is not a
                    strict superset of real pointer behavior, perhaps we need
                    not be too slavish in preserving all pointer-like nature. At
                    the same time, the class requires enough pointer-like nature
                     to supplement and enhance MAPI. </p>
               
               <p> When I first started adapting
                    auto_ptr, I decided to step back and look at first
                    principles. That real pointers have certain features doesn't
                    mean I find those features desirable. The general behavior
                    of C++ pointers, which are for most practical intents C
                    pointers, goes back a generation now. Assumptions that may
                    have seemed airtight and rational then do not necessarily 
                    appear so now, especially when mixed in the same bag as C++
                    features C's creators could not have anticipated. </p>
               
               <p> I believe the pointer abstraction
                    model I'm unveiling allows good interoperability with MAPI
                    while omitting pointer features counter to either C++'s
                    strengths or my own design prejudices. Even so, please bear
                    this in mind: programming is ultimately the objective
                    manifestation of one's subjective experience. Take none of
                    this as absolute truth. Think of it as C++'s equivalent of 
                    quantum phenomena &#151; what I show here is but one of many
                    possible paths.</p>
               
               <h4><FONT COLOR="#000080">Coming Attractions</FONT></H4>
               
               <p>Next month I'll restrict some
                    undesired pointer aspects, add variants that understand
                    MAPI's memory management, and show the implementation for
                    auto_pointer's members. </p>
               
               <p> A disturbingly large number of
                    Diligent Readers replied to my June ponderings about syntax
                    colo(u)ring vs. Hungarian notation. I'll summarize their
                    thoughts in the next month or two. </p>
               
               <p> Dan Saks and I make our yearly
                    pilgrimage to the Software Development East conference in
                    Washington DC. We'll be there from 1 - 3 October with new
                    talks, including one we may even share. Also, Miller Freeman
                    always gives away free copies of CUJ, just in time for
                    trick-or-treat, so mark your calendars.</p>
               
               <h4><FONT COLOR="#000080">Notes</FONT></H4>
               
               <p>[<A name="NOTE1">1</a>]
 ISO C++ CD
                    (Committee Draft) 2, section 20.4.5. See my June column for
                    URLs of sites containing this draft. </p>
               
               <p> [<A name="NOTE2">2</a>]
 Unless these
                    are blood types, in which case you need a type O. </p>
               
               <p> [<A name="NOTE3">3</a>]
 Note for the
                    compulsively picky: To simplify discussion, I'm purposely
                    ignoring member variations involving references, CV
                    qualifiers, inheritance, and so on. I am also temporarily
                    ignoring the strategy of overloading A members to accept a
                    B, again for simplicity. </p>
               
               <p><I>Bobby Schmidt is a freelance
                    writer, teacher, consultant, and programmer. He is also a
                    member of the ANSI/ISO C standards committee, an alumnus of
                    Microsoft, and an original "associate" of (Dan)
                    Saks &amp; Associates. In other career incarnations, Bobby
                    has been a pool hall operator, radio DJ, private
                    investigator, and astronomer. You may summon him at 14518
                    104th Ave NE Bothell WA 98011; by phone at +1-425-488-7696,
                    or via Internet e-mail as rschmidt@netcom.com. </I></p>
     
<h4><a href="../../../source/1997/aug97/schmidt.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
     </BODY>
</HTML>
