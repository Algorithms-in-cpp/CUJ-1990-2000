



<HTML><HEAD>

<TITLE>November 1997/Rolling Your Own Input Iterators/Listing 6</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4>Listing 6:	refcnt_ptr.h</h4>

<pre>
//This is modified from code originally posted to 
//the genstl mailing list by John Maxwell Skaller.
     
template &lt;class T&gt;
class refcnt_ptr {
public:
  typedef T element_type;
  typedef refcnt_ptr&lt;T&gt; self;
     
  explicit refcnt_ptr(T *t = 0) : ptr(t) { inc(); } 
  ~refcnt_ptr()  { dec(); }
  refcnt_ptr(self const &amp;pt) : ptr(pt.ptr) { inc(); }
     
  self&amp; operator=(self const &amp;pt) {
    if (pt.ptr != ptr) { // nothing to do if same pointer
      dec();  ptr = pt.ptr; inc();
    }
    return *this;
  }
     
  T &amp; operator* () const { return * ptr; } 
  T * operator~ () const { return ptr; }
  T * get () const { return ptr; }
  T * operator-&gt;() const {  return ptr; } 
  bool operator!() const { return ptr == 0; }
  friend bool operator == (self const &amp;pt1, self const &amp;pt2)
    { return pt1.ptr == pt2.ptr; }
  friend bool operator != (self const &amp;pt1, self const &amp;pt2)
    { return pt1.ptr != pt2.ptr; }
     
private:
     
  T *ptr;
  void inc() { if (ptr) ptr-&gt;refcnt++; }
  void dec() { if (ptr &amp;&amp; --ptr-&gt;refcnt==0) delete ptr; }
};
     
template &lt;class Int&gt;
class refcnt_base {
protected:
  refcnt_base() : refcnt(0) { }
  refcnt_base(refcnt_base&lt;Int&gt; const &amp;) : refcnt(0) { } 
  void operator=(refcnt_base&lt;Int&gt; const &amp;) { } 
  ~refcnt_base() 
    { if (refcnt) throw "Deleted object with nonzero refcnt"; }
private:
  Int refcnt;
  template &lt;class T&gt; friend class refcnt_ptr;
};
//End of File
</pre>
</body></html>
