



<HTML><HEAD>

<TITLE>November 1997/Rolling Your Own Input Iterators/Listing 5</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4>Listing 5:	input_iterator.h </h4>

<pre>
#ifndef INPUT_ITERATOR_H
#define INPUT_ITERATOR_H
     
#include &lt;iterator&gt;
#ifndef NO_PARTIAL_SPECIALIZATION
#include "pointer_traits.h"
#endif
#include &lt;stddef.h&gt;
     
#ifndef NO_PARTIAL_SPECIALIZATION
template &lt;class P, class Distance = ptrdiff_t&gt; 
#else
template &lt;class P, class Val, class Der, class Distance&gt; 
#endif
     
class input_iter_adapter :
     
#ifndef NO_PARTIAL_SPECIALIZATION
  public std::iterator&lt;
    std::input_iterator_tag,
    typename pointer_traits&lt;P&gt;::element_type::value_type, 
    Distance
  &gt;
#else
   public input_iterator&lt;Val, Distance&gt;
#endif
     
{
public:
  typedef input_iter_adapter self;
#ifndef NO_PARTIAL_SPECIALIZATION
  typedef
    typename pointer_traits&lt;P&gt;::element_type::deref_type 
    deref_type;
#else
  typedef Der deref_type;
#endif
     
  class PIR {
  public:
    typedef typename input_iter_adapter::value_type value_type; 
    PIR(value_type const &amp; x) : value(x) { }
    // Default ctor, dtor, assign
    value_type operator*() const { return value; }
  private:
    value_type value;
  };
     
  explicit input_iter_adapter(P const &amp; pg)
    : p(pg) { inc(); }
     
  input_iter_adapter() // past-the-end value; non-dereferenceable
    : p(0) { }
     
  // Default copy ctor, assignment, dtor.
     
  bool valid() const  // *this != self()
    { return p != P(0); }
  deref_type operator*() const
    { return p-&gt;value(); }
  value_type const * operator-&gt;() const
    { return &amp;(p-&gt;value()); }
  self&amp; operator++()
    { inc(); return *this; }
  PIR operator++(int)
    { PIR tmp( p-&gt;value() ); inc(); return tmp; }
  bool operator==(self const &amp; x) const
    { return p == x.p; }
  bool operator!=(self const &amp; x) const
    { return p != x.p; }
     
private:
     
  P p;
  void inc() { if (!p-&gt;next()) p = P(0); }
};
     
#endif
//End of File
</pre>
</body></html>
