



<HTML><HEAD>

<TITLE>November 1997/Error Handling with C++ Exceptions, Part 1/Listing 1</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4>Listing 1:	A program that deletes an entire directory subtree</h4>

<pre>
/* ddir.c:  Remove subdirectory tree */

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;io.h&gt;
#include &lt;string.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;dirent.h&gt;
#include &lt;dir.h&gt;

main(int argc, char **argv)
{
    char *old_path = getcwd(NULL,64);
    void rd(char *);

    /* Delete the directories */
    while (--argc)
        rd(*++argv);

    /* Restore directory */
    chdir(old_path);
    return 0;
}

void rd(char* dir)
{
    void erase_dir(void);

    /* Log onto the directory to be deleted */
    chdir(dir);

    /* Delete all normal files via OS shell (DOS version) */
    system("del /q *.* &gt; nul");

    /* Delete any remaining directory entries */
    erase_dir();

    /* Remove the directory from its parent */
    chdir("..");
    rmdir(dir);
}

void erase_dir()
{
    DIR *dirp;
    struct dirent *entry;
    struct stat finfo;
    
    /* Erase the current directory */
    dirp = opendir(".");
    while ((entry = readdir(dirp)) != NULL)
    {
        if (entry-&gt;d_name[0] == '.')
            continue;
        stat(entry-&gt;d_name,&amp;finfo);
        if (finfo.st_mode &amp; S_IFDIR)
            rd(entry-&gt;d_name);      /* Subdirectory */
        else
        {
            /* Enable delete of file, then do it */
            chmod(entry-&gt;d_name,S_IWRITE);
            unlink(entry-&gt;d_name);
        }
    }
    closedir(dirp);
}
//End of File
</pre>
</body></html>
