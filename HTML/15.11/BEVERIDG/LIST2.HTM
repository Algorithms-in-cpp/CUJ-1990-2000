



<HTML><HEAD>

<TITLE>November 1997/Moving Templates Out of Header Files/Listing 2</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4>Listing 2:	Set.cpp: Implementation of Set template class</h4>

<pre>
//
// Developed by Jim Beveridge, May, 1997
//

#include &lt;stdlib.h&gt;
#include "Set.h"

// Use explicit instantiation to create the various
// versions of the template that will be used by the
// rest of the program.
template Set&lt;int&gt;;
template Set&lt;double&gt;;

//////////////////////////////////////////////////////
// template class Set function implementations
//////////////////////////////////////////////////////

template&lt;class T&gt; 
Set&lt;T&gt;::Set()
{
    m_Values = NULL;
    m_Count = 0;
}

template&lt;class T&gt; 
Set&lt;T&gt;::~Set()
{
    Empty();
}

template&lt;class T&gt; 
void Set&lt;T&gt;::Add(const T&amp; val)
{
    // Don't add if a duplicate
    if (!Lookup(val))
    {
        // Growth size of one is extremely inefficient,
        // but works for illustration purposes.
        T* pT = new T[m_Count+1];
        for (int i=0;i&lt;m_Count;i++)
            pT[i] = m_Values[i];
        delete [] m_Values;
        m_Values = pT;
        pT[m_Count++] = val;
    }
}

template&lt;class T&gt;
bool Set&lt;T&gt;::Lookup(const T&amp; val) const
{
    for (int i=0;i&lt;m_Count;i++)
        if ( m_Values[i] == val )
            return true;
    return false;
}

template&lt;class T&gt; 
Set&lt;T&gt;&amp; Set&lt;T&gt;::operator= (const Set&lt;T&gt;&amp; s)
{
    Empty();
    m_Values = new T[s.m_Count];
    for (int i=0;i&lt;s.m_Count;i++)
        m_Values[i] = s.m_Values[i];
    m_Count = s.m_Count;
    return *this;
}

template&lt;class T&gt; 
void Set&lt;T&gt;::Empty()
{
    delete [] m_Values;
    m_Values = NULL;
    m_Count = 0;
}

//End of File
</pre>
</body></html>
