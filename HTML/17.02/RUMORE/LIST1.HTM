<HTML><HEAD>
<TITLE>February 1999/LUP Matrix Decomposition Using Templates/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: vector.h</A></h4>
<pre>
#ifndef __VECTOR_H
#define __VECTOR_H
// vector class

// headers
#include &lt;stdlib.h&gt;
#include &lt;iostream.h&gt;
#include &lt;math.h&gt;
#include &lt;errno.h&gt;

// local headers
#include "returns.h"
#include "debug.h"

// forward declarations
template &lt;class T&gt; class Vector;
template &lt;class T&gt; Vector&lt;T&gt; conj(const Vector&lt;T&gt; &amp;);
template &lt;class T&gt; T dot(const Vector&lt;T&gt; &amp;, const Vector&lt;T&gt; &amp;);
template &lt;class T&gt; T norm(const Vector&lt;T&gt; &amp;);

// vector class definition
template &lt;class T&gt; class Vector
{
public:
    // constructors and destructor
    Vector(unsigned int);
    Vector(const T *, unsigned int);
    Vector(const Vector&lt;T&gt; &amp;);
    ~Vector();

    // assignment
    Vector&lt;T&gt; &amp;operator=(const Vector&lt;T&gt; &amp;);
    T &amp;operator[](unsigned int);
    T &amp;operator[](unsigned int) const;

    // vector operations
    Vector&lt;T&gt; &amp;operator+=(const Vector&lt;T&gt; &amp;);
    Vector&lt;T&gt; &amp;operator-=(const Vector&lt;T&gt; &amp;);
    Vector&lt;T&gt; operator+(const Vector&lt;T&gt; &amp;) const;
    Vector&lt;T&gt; operator-(const Vector&lt;T&gt; &amp;) const;

    // arithmetic operations
    Vector&lt;T&gt; &amp;operator*=(const T &amp;);
    Vector&lt;T&gt; &amp;operator/=(const T &amp;);
    Vector&lt;T&gt; operator*(const T &amp;) const;
    Vector&lt;T&gt; operator/(const T &amp;) const;
    friend Vector&lt;T&gt; operator*(const T &amp;n, const Vector&lt;T&gt; &amp;v) {
        return(Vector&lt;T&gt;(v) *= n);
    }

    // logical operators
    int operator==(const Vector&lt;T&gt; &amp;) const;
    int operator!=(const Vector&lt;T&gt; &amp;) const;

    // vector products
    friend Vector&lt;T&gt; conj(const Vector&lt;T&gt; &amp;);
    friend T dot(const Vector&lt;T&gt; &amp;, const Vector&lt;T&gt; &amp;);
    friend T norm(const Vector&lt;T&gt; &amp;);

    // miscellaneous 
    inline unsigned int getDimension() const { 
        return(dimension);
    }
    void dump(ostream &amp;) const;
    friend ostream &amp;operator&lt;&lt;(ostream &amp;os, const Vector&lt;T&gt; &amp;v) {
        v.dump(os);
        return(os);
    }

protected:
    // data
    unsigned int dimension;
    T *vector;
};

#endif
//End of File
</pre>
</BODY>
</HTML>
