<HTML><HEAD>
<TITLE>February 1999/LUP Matrix Decomposition Using Templates/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2: matrix.h</A></h4>
<pre>
#ifndef __MATRIX_H
#define __MATRIX_H

// matrix class definitions

// headers
#include &lt;stdlib.h&gt;
#include &lt;iostream.h&gt;
#include &lt;math.h&gt;

// local headers
#include "returns.h"
#include "debug.h"
#include "vector.h"
#include "epsilon.h"

// forward declarations
template &lt;class T&gt; class Matrix;
template &lt;class T&gt; Vector&lt;T&gt;
operator*(const Vector&lt;T&gt; &amp;, const Matrix&lt;T&gt; &amp;);
template &lt;class T&gt; Matrix&lt;T&gt;
operator*(const T &amp;, const Matrix&lt;T&gt; &amp;);
template &lt;class T&gt; Matrix&lt;T&gt; operator*(T, const Matrix&lt;T&gt; &amp;);
template &lt;class T&gt; ostream
&amp;operator&lt;&lt;(ostream &amp;, const Matrix&lt;T&gt; &amp;);

// matrix class definition
template &lt;class T&gt; class Matrix
{
public:
    // constructors and destructor
    Matrix(unsigned int, unsigned int);
    Matrix(const Matrix&lt;T&gt; &amp;);
    ~Matrix();

    // assignment operators and accessors
    Matrix&lt;T&gt; &amp;operator=(const Matrix&lt;T&gt; &amp;);
    T &amp;operator[](unsigned int);
    T &amp;operator[](unsigned int) const;
    T &amp;operator()(unsigned int, unsigned int);
    T &amp;operator()(unsigned int, unsigned int) const;

    // matrix operations
    Matrix&lt;T&gt; &amp;operator+=(const Matrix&lt;T&gt; &amp;);
    Matrix&lt;T&gt; &amp;operator-=(const Matrix&lt;T&gt; &amp;);
    Matrix&lt;T&gt; &amp;operator*=(const Matrix&lt;T&gt; &amp;);
    Matrix&lt;T&gt; operator+(const Matrix&lt;T&gt; &amp;) const;
    Matrix&lt;T&gt; operator-(const Matrix&lt;T&gt; &amp;) const;
    Matrix&lt;T&gt; operator*(const Matrix&lt;T&gt; &amp;) const;

    // matrix and vector operations
    Vector&lt;T&gt; operator*(const Vector&lt;T&gt; &amp;) const;
    friend Vector&lt;T&gt; operator*(const Vector&lt;T&gt; &amp;, const Matrix&lt;T&gt; &amp;);

    // matrix and scalar operations
    Matrix&lt;T&gt; &amp;operator*=(const T &amp;);
    Matrix&lt;T&gt; &amp;operator/=(const T &amp;);
    Matrix&lt;T&gt; operator*(const T &amp;) const;
    Matrix&lt;T&gt; operator/(const T &amp;) const;
    friend Matrix&lt;T&gt; operator*(const T &amp;, const Matrix&lt;T&gt; &amp;);

    // logical operators
    int operator==(const Matrix&lt;T&gt; &amp;) const;
    int operator!=(const Matrix&lt;T&gt; &amp;) const;

    // other functions
    inline unsigned int getRows() { return(nrows); }
    inline unsigned int getCols() { return(ncols); }
    void dump(ostream &amp;) const;
    friend ostream &amp;operator&lt;&lt;(ostream &amp;, const Matrix&lt;T&gt; &amp;);

    // get epsilon 
    T getEpsilon() {
        return(epsilon);
    }

protected:
    // internal data
    T *matrix;
    unsigned int nrows, ncols;
    T epsilon;
};

#endif
//End of File
</pre>
</BODY>
</HTML>
