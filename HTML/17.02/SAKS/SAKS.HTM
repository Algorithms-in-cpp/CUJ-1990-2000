<HTML>
     
     <HEAD>
<TITLE>February 1999/C++ Theory and Practice</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocfeb.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">C++ Theory and Practice: Partitioning with Classes</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Dan Saks</FONT></H3>

<BLOCKQUOTE>

<p>Dan is back, continuing where he left off, concerning the relative merits of namespaces and classes in structuring code.</p>
</BLOCKQUOTE>
<HR>
<BLOCKQUOTE>
<p><I>Copyright &copy; 1998 by Dan Saks</I></p>

<p>Hi. I'm back from my sabbatical. Although I haven't appeared in <I>CUJ</I> for a while, I didn't disappear completely from the C++ scene. I continued to present on-site seminars and put in my regular appearances at conferences such as Software Development, Embedded Systems, and the European C &amp; C++ Developers Forum. I also kept writing my column for <I>Embedded Systems Programming</I> magazine. (It's not that my <I>ESP</I> column is more important than my <I>CUJ</I> column, but that my <I>ESP</I> articles are typically less than half as long as my <I>CUJ</I> articles.)</p>
<p>I also attended the C++ standards committee meeting last October. Yes, the C++ Standard is done, but the committee's work isn't. We're dealing with defect reports and pondering future directions for the language and library.</p>
<p>Despite my continued professional activities, my hiatus from <I>CUJ</I> gave me a little extra time for other parts of my life. Among other things, I coached my son Jeremy's soccer team to a 6-1-1 record. In true Buckeye fashion, we dominated our competition all season, only to lose our last game.</p>
<p>Over the past several months, a number of you wrote to me or approached me at a conference to tell how much you enjoy reading this column and look forward to its return. Thanks, I needed that. It gave me added incentive to come back. Now that I am back, I hope I can live up to your expectations.</p>

<h4><FONT COLOR="#000080">Where Were We?</FONT></H4>

<p>Nearly a year ago, I embarked on a series of articles about namespaces. (See "C++ Theory and Practice: Partitioning with Namespaces, Part 1," <I>CUJ,</I> April 1998.) I tried to see how far I could get using namespaces, in combination with separate compilation and incomplete types, to decompose a C++ program into simpler discrete components. In the end, I concluded that, although namespaces may be useful, they do not replace classes as the primary tool for implementing data abstractions in C++. (See "C++ Theory and Practice: Classes vs. Namespaces," <I>CUJ,</I> July 1998.)</p>
<p>Throughout that series on namespaces, I experimented with namespaces by applying them in a sample program. This month, I'll start rewriting that program to show you how and why I'd use classes to reorganize the program. I'm aiming this discussion primarily at experienced C++ programmers. I'll assume you are already familiar with the basic concepts of classes, access specifiers, member functions, constructors, destructors, inlining, and maybe more. Although I may throw in occasional bits of remedial C++, my focus will be more on when and how to use classes, rather than on what classes are.</p>
<p>My programming example is xr, a cross-reference generator. I'm not sure how much detail about this example I should expect you to retain from the last time I wrote about it, so here's the summary once again. If you remember all this from before, just skim ahead.</p>
<p>xr reads text from standard input and writes a cross-reference to standard output. The cross-reference output is an alphabetized list of the words (identifiers as in C++) that appeared in the input. Each line in the output contains one word followed by the sequence of unique line numbers on which that word appeared in the input.</p>
<p>For example, if you use the source code for xr (<A HREF="list1.htm">Listing 1</A>) as input to itself, the cross-reference output should contain the following line for the identifier <B>token</B>:</p>

<pre>
token:   35   37   38   39   40
</pre>

<p><B>token</B> actually appears twice on line 38, but the output only mentions 38 once.</p>
<p><A HREF="list1.htm">Listing 1</A> is nearly identical to the program I started with way back when. It's a single source file written in "Typesafe C," C that also compiles as C++. The program contains just four functions:</p>

<UL><LI><B>main</B> </LI>
    <LI><B>get_token</B>: get a token from standard input.</LI>
    <LI><B>add_tree</B>: add an entry to the cross-reference for a word and its corresponding line number.</LI>
    <LI><B>put_tree</B>: write the alphabetized cross-reference listing to standard output.</LI></UL>

<p>xr uses a binary tree to maintain the words in alphabetical order. Each <B>tree_node</B> in the tree holds a word and its corresponding sequence of line numbers. xr stores each word as a null-terminated character array and each line number sequence as a singly linked list. Each <B>list_node</B> in the list contains one line number.</p>
<p>More precisely, each <B>tree_node</B> contains three pointers: <B>word</B>, <B>first</B>, and <B>last</B>. <B>word</B> points to the first character in the null-terminated spelling of a word. <B>first</B> and <B>last</B> point to the first and last <B>list_node</B>, respectively, in the singly-linked list containing the line numbers for that word. The program doesn't really need to store <B>last</B> as well as <B>first</B>, but having <B>last</B> handy simplifies the code that adds a new line number.</p>
<p>Each call to <B>add_tree(w, n)</B> searches the tree to determine if some <B>tree_node</B> already contains a match for word <B>w</B>. If such a node exists, and its list doesn't already contain line number <B>n</B>, <B>add_tree</B> adds <B>n</B> to that list. If no such node exists, <B>add_tree</B> creates a brand new node containing word <B>w</B> and a list containing just line number <B>n</B>.</p>
<p>In my last column before I took my leave, I added the const qualifier where I thought it appropriate. (See "C++ Theory and Practice: <B>const</B> in Parameter Lists," <I>CUJ,</I> September 1998.) Those const qualifiers appear in <A HREF="list1.htm">Listing 1</A>.</p>

<h4><FONT COLOR="#000080">Improving the Design</FONT></H4>

<p>The <B>main</B> function's job is to track input line numbers, decide when to place a word and its line number into the cross-reference table, and decide when to print the table. <B>main</B> should be able to do all this without knowing that the table is actually a binary tree. Unfortunately, it does know. It "knows" in the sense that it declares the cross-reference table as:</p>

<pre>
tree_node *xr = NULL;
</pre>

<p>and it passes <B>xr</B> an argument to functions named <B>add_tree</B> and <B>put_tree</B>.</p>
<p>In the lingo of design methodology, we say that <B>main</B> is too tightly coupled to the tree implementation of the cross-reference table. That is, evidence that the table is a tree clutters <B>main</B> with unnecessary details that make the program just a little harder to read, and thus a little harder to get right and keep right. The tight coupling makes maintenance harder because, if you change the table's implementation, you will almost certainly have to change <B>main</B> as well.</p>
<p>The best way to reduce the coupling between <B>main</B> and the cross-reference table facilities is to encapsulate the table as an object of a class type. That class should hide the tree structure so that <B>main</B> need not, and cannot, mention anything about trees. <B>main</B> should see the cross-reference table as an abstraction that does useful things without revealing any of its internal machinery.</p>
<p>Transforming the Typesafe C program in <A HREF="list1.htm">Listing 1</A> into a well- written object-oriented C++ program will take me several steps. At each step you should notice improvement, but you might also notice problems that remain to be solved. Please be patient.</p>

<h4><FONT COLOR="#000080">A Cross-Reference Class</FONT></H4>

<p>Let's start by defining a class called <B>cross_reference_table</B> as an abstract type for cross-reference tables. At the very least, the class must provide members so that the application can:</p>

<UL><LI>create an empty cross-reference table, </LI>
    <LI>store words and corresponding line numbers in the table, and </LI>
    <LI>write the table to standard output.</LI></UL>

<p>The <B>cross_reference_table</B> class definition appears in the header file <B>table.h</B>, shown in <A HREF="list2.htm">Listing 2</A>. It declares three public member functions:</p>

<UL><LI><B>cross_reference_table()</B> (the default constructor), which initializes a table so that it's empty; </LI>
    <LI><B>void add(char const *w, unsigned n)</B>, which adds an entry to the cross-reference for a word <B>w</B> occurring at line number <B>n</B> (if no such entry is already there); </LI>
    <LI><B>void put() const</B>, which writes the alphabetized cross-reference listing to standard output.</LI></UL>

<p>The class hides the root of the tree as a private member, declared as:</p>

<pre>
tree_node *root;
</pre>

<p>This declaration requires a prior declaration for <B>tree_node</B>. Since it declares <B>root</B> as a "pointer to <B>tree_node</B>" rather than as a <B>tree_node</B>, it does not require the complete type definition for <B>tree_node</B>. The incomplete type declaration:</p>

<pre>
struct tree_node;
</pre>

<p>is sufficient for the header. (See "C++ Theory and Practice: Partitioning with Namespaces, Part 2", <I>CUJ,</I> May 1998 for more on incomplete types.)</p>
<p>Every one of the member functions has a body containing only a single statement. It seems appropriate to declare them as inline functions. Their definitions appear in the header just after the <B>cross_reference_table</B> class definition.</p>
<p>The <B>add</B> member function calls <B>add_tree</B>, and the <B>put</B> member function calls <B>put_tree</B>. Thus, declarations for <B>add_tree</B> and <B>put_tree</B> must also appear in the header. The declarations for <B>add_tree</B> and <B>put_tree</B> refer to <B>tree_node</B>, but only through a pointer. Again, declaring <B>tree_node</B> as an incomplete type is sufficient.</p>
<p>The remainder of the class implementation appears in the source file <B>table.cpp</B>, shown in <A HREF="list3.htm">Listing 3</A>. This includes the complete type definitions for <B>list_node</B> and <B>tree_node</B>, as well as the function definitions for <B>add_tree</B> and <B>put_tree</B>.</p>
<p>Functions <B>main</B> and <B>get_token</B> remain in source file <B>xr.cpp</B>, shown in <A HREF="list4.htm">Listing 4</A>. Looking at the body of <B>main</B>, you can no longer tell that the cross-reference table is a tree. This is good.</p>
<p>In <B>main</B>, the declaration that was:</p>

<pre>
tree_node *xr = NULL;
</pre>

<p>in <A HREF="list1.htm">Listing 1</A> has been replaced by the more abstract declaration:</p>

<pre>
cross_reference_table table;
</pre>

<p>in <A HREF="list4.htm">Listing 4</A>. This declares <B>table</B> as an empty <B>cross_reference_table</B> object.</p>
<p>Since a <B>cross_reference_table</B> object has a single data member of type <B>tree_node *</B> and no virtual functions, <B>table</B> occupies no more nor less storage than variable <B>xr</B> did before. The object declaration invokes the default constructor, but that constructor expands inline. Thus, the expansion produces code equivalent to:</p>

<pre>
table.root = NULL;
</pre>

<p>which generates the same code as the original pointer initialization in <A HREF="list1.htm">Listing 1</A>.</p>
<p>Also in <B>main</B>, the call:</p>

<pre>
xr = add_tree(xr, token, ln);
</pre>

<p>from <A HREF="list1.htm">Listing 1</A> has been replaced by the member function call:</p>

<pre>
table.add(token, ln);
</pre>

<p>in <A HREF="list4.htm">Listing 4</A>. This call expands inline as:</p>

<pre>
table.root = add_tree(table.root, token, ln);
</pre>

<p>which yields code identical to that which it replaces. Similarly, the call:</p>

<pre>
put_tree(xr);
</pre>

<p>has been replace by the member function call:</p>

<pre>
table.put();
</pre>

<p>which also expands inline yielding code identical to what it replaces.</p>

<h4><FONT COLOR="#000080">And Now, a Word About const</FONT></H4>

<p>The keyword <B>const</B> appears in two places among the public members in the definition for class <B>cross_reference_table</B>. It appears in the declaration of the first parameter of the <B>add</B> member function:</p>

<pre>
void add(char const *w, unsigned n);
</pre>

<p>because <B>add</B> has no business modifying the characters in a word that it adds to a cross-reference table. It also appears in the declaration of the <B>put</B> member function:</p>

<pre>
void put() const;
</pre>

<p>thus declaring <B>put</B> as a const member function. A const member function is one that cannot alter its receiver object (the object that <B>this</B> points to). That strikes me as a reasonable restriction on <B>put</B>. Writing a cross-reference table to <B>cout</B> shouldn't change the table's contents.</p>

<h4><FONT COLOR="#000080">Further Refinement</FONT></H4>

<p>Earlier, I said that the <B>cross_reference</B> class should hide the tree structure so that <B>main</B> need not, and cannot, mention anything about trees. <B>main</B> (in <A HREF="list4.htm">Listing 4</A>) does not mention anything about trees, so the class as defined in the header (in <A HREF="list2.htm">Listing 2</A>) apparently satisfies the "need not" part. However, the header still contains accessible declarations for <B>tree_node</B>, <B>add_tree</B> and <B>put_tree</B>, so it does not satisfy the "cannot" part.</p>
<p>You can make <B>tree_node</B>, <B>add_tree</B>, and <B>put_tree</B> inaccessible from <B>main</B> simply by declaring them as private members of the <B>cross_reference_table</B> class. <A HREF="list5.htm">Listing 5</A> shows header <B>table.h</B> with these additional members. <B>tree_node</B> is still an incomplete type, but now it's a member of class <B>cross_reference_table</B> rather than a global type. An incompletely defined member type is also known as a <I>forward-declared nested class.</I> (A struct is a class in C++.)</p>
<p>The complete definition for <B>tree_node</B> still appears in the source file <B>table.cpp</B>, shown in <A HREF="list6.htm">Listing 6</A>. Now that <B>tree_node</B> is a member type, the complete definition must refer to <B>tree_node</B> by its fully-qualified name:</p>

<pre>
struct cross_reference_table::tree_node
    {
    char *word;
    list_node *first, *last;
    tree_node *left, *right;
    };
</pre>

<p>The definitions for <B>add_tree</B> and <B>put_tree</B> must also use fully- qualified names for the function names and return types. For example <B>add_tree</B>'s definition looks like:</p>

<pre>
cross_reference_table::tree_node *
cross_reference_table::add_tree
    (tree_node *t, char const *w,
     unsigned n)
    {
    ...
    }
</pre>

<p>The function heading is so long that I had to break it into three lines to get it to fit with this text. The first line is the function return type, the second is the function name, and the third is the parameter list.</p>
<p>Notice that the return type uses the fully-qualified name <B>cross_reference_table::tree_node</B>, but the parameter list uses just the unqualified name <B>tree_node</B>. When a function definition appears outside the definition of its class or namespace, the compiler looks up names appearing in the function's return type in the current scope (surrounding the function definition). It looks up names appearing in the parameter list and function body in the class or namespace scope before looking in the current scope. (I described this lookup rule in slightly greater detail in "C++ Theory and Practice: Partitioning with Namespaces, Part 2," <I>CUJ,</I> May 1998.)</p>
<p>Some C++ compilers, particularly older ones, may have trouble with the definition for <B>cross_reference_table::add_tree</B>. The return type refers to <B>tree_node</B>, which is now a private member of class <B>cross_reference_table</B>, but the return type appears before the function's declarator and therefore outside the class scope. Although <B>tree_node</B> and <B>add_tree</B> are members of the same class, some compilers might deny <B>add_tree</B> access to <B>tree_node</B> in this context. However, the C++ standard is now pretty clear that this function definition is okay. It says:</p>
<BLOCKQUOTE>
<p>In particular, access controls apply as usual to member names accessed as part of a function return type, even though it is not possible to determine the access privileges of that use without first parsing the rest of the function declarator.<p>
</BLOCKQUOTE>
<p>Declaring <B>add_tree</B> and <B>put_tree</B> as class members introduces a little unnecessary overhead into the program. You might try finding it. I'll show you where it is, and what you can do about it in an upcoming article. And there's a whole bunch more to do after that.</p>

<p><i>Dan Saks is the president of Saks &amp; Associates, which offers training and consulting in C++ and C. He is active in C++ standards, having served nearly seven years as secretary of the ANSI and ISO C++ standards committees. Dan is coauthor of <I>C++ Programming Guidelines</I>, and codeveloper of the Plum Hall Validation Suite for C++ (both with Thomas Plum). You can reach him at 393 Leander Dr., Springfield, OH 45504-4906 USA, by phone at +1-937-324-3601, or electronically at <B>dsaks@wittenberg.edu</B>.</i></p>

<h4><a href="../../../source/1999/feb99/saks.zip">Get Article Source Code</a></h4>



</BLOCKQUOTE>
</BODY>
</HTML>
