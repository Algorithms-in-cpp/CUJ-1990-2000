<HTML><HEAD>
<TITLE>February 1999/C++ Theory and Practice/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1:	The initial "classless" implementation of xr</A></h4>
<pre>
// xr.cpp - generate a cross-reference of words

#include &lt;ctype.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

struct list_node
    {
    unsigned number;
    list_node *next;
    };

struct tree_node
    {
    char *word;
    list_node *first, *last;
    tree_node *left, *right;
    };

int get_token(char *s, size_t n);

tree_node *
add_tree(tree_node *t, char const *w, unsigned n);

void put_tree(tree_node const *t);

#define MAX_TOKEN 256

int main()
    {
    tree_node *xr = NULL;
    char token[MAX_TOKEN];
    unsigned ln = 1;
    while (get_token(token, MAX_TOKEN))
        if (isalpha(token[0]) || token[0] == '_')
            xr = add_tree(xr, token, ln);
        else // if (token[0] == '\n')
            ++ln;
    put_tree(xr);
    return 0;
    }

int get_token(char *s, size_t n)
    {
    int c;
    while ((c = fgetc(stdin)) != EOF)
        if (isalpha(c) || c == '_' || c == '\n')
            break;
    if (c == EOF)
        {
        *s = '\0';
        return 0;
        }
    *s++ = c;
    n -= 2;
    if (c != '\n')
        {
        while (isalnum(c = fgetc(stdin)) || c == '_')
            if (n &gt; 0)
                {
                *s++ = c;
                --n;
                }
        ungetc(c, stdin);
        }
    *s = '\0';
    return 1;
    }

tree_node *add_tree
    (
    tree_node *t,
    char const *const w,
    unsigned const n
    )
    {
    int cmp;
    if (t == NULL)
        {
        t = new tree_node;
        t-&gt;word = new char [strlen(w) + 1];
        strcpy(t-&gt;word, w);
        t-&gt;first = new list_node;
        t-&gt;first-&gt;number = n;
        t-&gt;first-&gt;next = NULL;
        t-&gt;last = t-&gt;first;
        t-&gt;left = t-&gt;right = NULL;
        }
    else if ((cmp = strcmp(w, t-&gt;word)) &lt; 0)
        t-&gt;left = add_tree(t-&gt;left, w, n);
    else if (cmp &gt; 0)
        t-&gt;right = add_tree(t-&gt;right, w, n);
    else if (n != t-&gt;last-&gt;number)
        {
        t-&gt;last-&gt;next = new list_node;
        t-&gt;last = t-&gt;last-&gt;next;
        t-&gt;last-&gt;number = n;
        t-&gt;last-&gt;next = NULL;
        }
    return t;
    }

void put_tree(tree_node const *const t)
    {
    list_node const *p;
    if (t != NULL)
        {
        put_tree(t-&gt;left);
        printf("%12s:", t-&gt;word);
        for (p = t-&gt;first; p != NULL; p = p-&gt;next)
            printf(" %4d", p-&gt;number);
        printf("\n");
        put_tree(t-&gt;right);
        }
    }
/* End of File */
</pre>
</BODY>
</HTML>
