<HTML>
     
     <HEAD>
<TITLE>February 1999/Date Compression Formats for Y2K Remediation</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocfeb.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Date Compression Formats for Y2K Remediation</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Leon Iofin</FONT></H3>

<BLOCKQUOTE>

<p>Wondering where to stuff that extra century information in your current date fields? Here are a few candidate hiding places.</p>
</BLOCKQUOTE>
<HR>
<BLOCKQUOTE>
<p>Date compression is a technique that enables legacy data and software to handle dates beyond the year 2000. This technique is used when expanding the size of a non-compliant date field (typically, a field with two-digit year representation) is not an option. Many compression formats have been proposed earlier which present different degrees of compression and readability. Here I introduce a family of formats enabling storage of dates in a form equivalent to MMDDCCYY format. The major advantage of these formats is that they require a space equal to or less than six characters. They accomplish this by using numbers with a base larger than 10 (e.g., hexadecimal); and by using information hidden in the day of the week (Sunday, Monday, etc.) to calculate the centuries digit (CC) missing in MMDDYY format. The algorithms associated with these formats are based on a property of the Gregorian Calendar &#151; its 400-year period. That is, dates separated by a multiple of 400 years fall on the same day of the week.</p>
<p>The problems associated with calendar date processing are not language specific. So, although I discuss only a C/C++ interface here, a similar approach can be applied in any other language environment, such as COBOL, Fortran, and so on. C/C++ implementations typically represent dates as long integers or as character arrays. The long integer format does not present a problem because it can hold dates in MMDDCCYY format or its equivalents. If it is possible to use a long variable to hold this date then conversion becomes a trivial task. The problem with date overflow appears when it is stored as a six-symbol character array. The most challenging task is to convert a date stored in MMDDYY format to a date in a format convertible to MMDDCCYY without expansion of the date variable. The length of the converted date must be equal to or shorter than the original. This is the problem I consider in this article.</p>

<h4><FONT COLOR="#000080">Compression Formats and Algorithms</FONT></H4>

<p>The formats and algorithms presented here are based on the 400-year period of the Gregorian Calendar. (See the sidebar, <A HREF="sidebar1.htm">"The 400-year Period of the Gregorian Calendar"</A>.) The periodic property enables calculation of the missing century (CC) value given the month (MM), day (DD), year (YY), and a day of the week (W). The formats also make use of numbers with a base larger than 10. For example, the MM fields can be replaced by a single-character M field with a base of 16 or higher; DD fields can be replaced by a single-character D field with a base of 32 or higher.</p>

<h4><FONT COLOR="#000080">(Mh)(Wh)DDYY Format</FONT></H4>

<p>This format represents dates with a hexadecimal month field, a hexadecimal day-of-week field, and decimal day-of-month and year fields. To convert a MMDDYY date to this format I first replace the MM field with a single hexadecimal character. This frees up one character for storage of the day-of-week (W) value. The resulting format becomes (Mh)WDDYY. Here (Mh) stands for a month represented as a hexadecimal number; W is a day-of-week number where Sunday is 0, Monday is 1, and so on. Suppose I substitute the missing CC field with an assumed value (17, 18, 19, or 20) and calculate the corresponding set of Ws. The periodic property of the calendar ensures there is only one CC in any given 400-year interval that produces a day-of-week equal to the W value in the (Mh)WDDYY format.</p>
<p>This format works for any 400-year interval. To expand date storage to an 800-year interval the format uses two different offsets for the W field. Numbers from 0h to 6h represent days of the week in the interval 1600 to 1999. Numbers from 7h to Dh serve for the 2000 - 2399 interval. The format becomes (Mh)(Wh)DDYY. If I select an offset for (Mh) of 1, thus representing January as 2h, February as 3h, ..., and December as Ch, then use of the (Mh)(Wh)DDYY format becomes detectable via software. The first M digit in the original format is always 0 or 1 while it is equal to 2 or greater in the new one. For a definition of detectability see the sidebar, <A HREF="sidebar2.htm">"Evaluating Date Compression Formats."</A> <A HREF="fig1.htm">Figure 1</A> shows routines to convert six-character dates to and from this format.</p>

<h4><FONT COLOR="#000080">(PDDDDD)h Format</FONT></H4>

<p>A widely used format in the fields of astronomy and chronology is the continuous day counting method. This format uses six decimal digits (DDDDDD) to count days past 01/01/4713 BC. This so-called Julian Period was introduced in 1583 by the French scientist Joseph Scaliger. The start of the Julian Day (JD) is a median midday at the 0th (Greenwich) meridian. The median Greenwich midnight preceding this median midday defines the beginning of the considered calendar date.  To convert this format to (DDDDD)h I first divide the JD into periods of 400 years. Then any date can be represented as a period number (P) and a number of days between the period start and the considered date. The starting date for a period is arbitrary, so my format uses convenient dates such as January 1st, 1600 and January 1st, 2000.</p>
<p>This date format is essentially equivalent to JD. The only difference is an offset equal to the Julian Day of a period's starting date (2,305,447 for January 1st, 1600; and 2,451,068 for January 1st, 2000). Each 400-year period consists of 146,097 days <a href="#3">[3]</a>, so it takes six decimal characters to represent any date in a 400-year interval.</p>
<p>To free space for a period number I convert this six-digit number to a hexadecimal number. Decimal 146097 is equal to 23ab1h, so it takes only five characters to represent such a date in (DDDDD)h format. Conversion between MMDDYY dates and (DDDDD)h is simple, and is presented in <A HREF="fig2.htm">Figure 2</A>. It is now possible to use the first character in a six-character array to store P. Years from 1600 through 1999 are in the first period; years from 2000 through 2399 are in the second period, and so on. (Note that the Gregorian calendar is valid only after year 1582.) Thus we come to a derived format (PDDDDD)h.  If you use the (DDDDD)h or (PDDDDD)h format there are several ways you can detect whether a given date is stored in the conventional format (MMDDYY) or compressed. If you stick to the (DDDDD)h format, which is valid for only 400 years, you can use the fact that it is only five characters long to distinguish it from the six-character MMDDYY. If you use the (PDDDDD)h format you can use the fact that MM fields always start with either 0 or 1. Then let 2 represent the first 400-year period in (PDDDDD)h, 3 represent the second, etc. If the first digit is 2 or more the date is compressed. This format is also detectable because its first digit P is also equal to 2 or greater.</p>

<h4><FONT COLOR="#000080">(DDD)<SUB>64</SUB> Format</FONT></H4>

<p>Just as hexadecimal numbers can be used to represent dates in a more compressed format, larger bases can bring even higher degrees of compression. A numeric system with a base of 64 is very convenient, for example. The relationship between this system and octal numbers is similar to the relationship between binary and hexadecimal numbers. A binary number can be converted to hexadecimal by dividing it into blocks of four binary digits (starting with the least significant bit) and in each block substituting the hexadecimal number equivalent to these four digits. Similarly, to convert an octal number to base 64, first divide the number into blocks of two octal digits (starting with the least significant octal digit). Each two-digit block can then be replaced by a single base-64 digit.</p>
<p>To convert a MMDDYY date to base 64 I first convert it to a decimal number of days past January 1, 1600. I then convert number of days to an octal number of six digits. Finally, I divide these six digits into three two-digit blocks and convert each of them to an index into a table of base 64 digits. The table is organized as follows:</p>

<pre>
<U>Index</U>		<U>Base 64 Digit</U>
0 - 9		'0'-'9'
10 - 35		'A'-'Z'
36 - 61		'a'-'z'
62 - 63		'#'-'$'
</pre>

<p>This process converts the date to a three-character string in which each D symbol represents a number in base 64. This format can represent dates only from 01/01/1600 through 09/23/2317, which satisfies virtually all practical needs. <A HREF="fig3.htm">Figure 3</A> shows the high-level code to convert from MMDDYYYY to (DDD)<SUB>64</SUB>. The full source code for date conversion is available from the <I>CUJ</I> ftp site (see p. 3 for downloading instructions).  The remaining three bytes can be used to store other information, such as time-of-day. Only one base-64 digit is needed to store each of hours (hh), minutes (mm), and seconds (ss) that represent time-of-day. Combining the (DDD)<SUB>64</SUB> format with the compressed time format results in (hmsDDD)<SUB>64</SUB>. If I select an offset of 2 for the h field; this format also becomes detectable.</p>

<h4><FONT COLOR="#000080">Test Driver</FONT></H4>

<p><A HREF="fig4.htm">Figure 4</A> presents a brief test program that prompts the user for a MMDDYY date and calls the conversion routines to convert the date to the formats described above. The program also prompts the user for two century digits (e.g., "17," "18," etc.), since it doesn't have enough information to represent the equivalent of a MMDDYYYY date.</p>

<h4><FONT COLOR="#000080">Recommendations</FONT></H4>

<p>The sidebar <A HREF="sidebar2.htm">"Evaluating Date Compression Formats"</A> presents some criteria that you can use to evaluate the formats I have presented in this article, as well as other formats. In general, you can use the (Mh)(Wh)DDYY and (PDDDDD)h formats to represent the equivalent of a MMDDCCYY date in six characters. The (Mh)(Wh)DDYY is easier to read, but the (PDDDDD)h is more compatible with the DDDDDD format used in many scientific applications. (DDD)<SUB>64</SUB> is useful for "squeezing" extra data into a six-character space.</p>
<p>The (DDDDD)h format without a period specifier (P) cannot be recommended because dates related to the first 400-year period (1600 - 1999) and the second (2000 - 2399) will both be in wide use for 110 years or more. You could still use (DDDDD)h if you selected a starting date other than January 1, 1600. For example, if you use January 1, 1800 as the starting date, (DDDDD)h will cover a range up to December 31, 2199.</p>

<h4><FONT COLOR="#000080">Notes and References</FONT></H4>

<p><a name="1"></a>[1]  Daniel Zwillinger, Editor-In-Chief. <I>CRC Standard Mathematical Tables and Formulae,</I> 30th Edition (CRC Press, 1996). See page 737, "Day of Week for Any Given Day."</p>
<p><a name="2"></a>[2]  I. A. Klimishin. <I>Kalendar I Hronologia</I> (Calendar and Chronologie). (Nauka, Moscow, 1985). Text is in Russian.</p>
<p><a name="3"></a>[3]  400 Gregorian years = (365 x 400) + (24 x 3) &lt;number of leap years in centuries starting with a non-leap year&gt; + (25 x 1) &lt;number of leap years in centuries starting with a leap year&gt; = 146,097 days. So it takes six decimal digits to represent the day count in a 400-year interval.</p>

<p><i>Leon Iofin has a Ph.D. in Applied Mechanics from St. Petersburg Polytechnic Institute, Russia. He has been working for EER Systems, Inc. for three years as a Senior Systems Engineer. He has been using C++ for seven years for Windows programming. His current interests are image processing, biometrics, pattern recognition, and computational mathematics. You can reach him at <B>liofin@erols.com</B>.</i></p>

<h4><a href="../../../source/1999/feb99/iofin.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY>
</HTML>
