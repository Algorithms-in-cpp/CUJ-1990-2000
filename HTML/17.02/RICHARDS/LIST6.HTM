<HTML><HEAD>
<TITLE>February 1999/Adding Level-2 Thread Safety to Existing Objects/Listing 6</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 6: Test driver for use with sample object in <A HREF="list5.htm">Listing 5</A></A></h4>
<pre>
// File : test.cpp"

#include &lt;windows.h&gt;
#include &lt;process.h&gt;
#include &lt;conio.h&gt;
#include &lt;iostream&gt;

using namespace std;

#include "CMonitor.h"  
#include "Foo.h"

typedef CMonitor&lt;Foo&gt;      FooMonitor;

void MonitorThreadFunction1( void* pVoid )  // uses monitor
{
   FooMonitor*     pMonitor = (FooMonitor*)pVoid;

   try 
   {
      for( int i = 0; i &lt; 100; i++ )
      {
         pMonitor-&gt;Safe().element().inc(10);
         Sleep( 100 );
      }
   }

   catch(MutexException e)
   {
      if( e == TIMEOUT )
      {
         cout &lt;&lt; "Timeout on wait !" &lt;&lt; endl;
      }
   }
}

void MonitorThreadFunction2( void* pVoid )  // uses monitor
{
   FooMonitor* pMonitor = (FooMonitor*)pVoid;

   try 
   {
      for( int i = 0; i &lt; 100; i++ )
      {
         cout &lt;&lt; "The value is : "
              &lt;&lt; pMonitor-&gt;Safe().element().value() &lt;&lt; endl;
         Sleep( 100 );
      }
   }

   catch(MutexException e)
   {
      if( e == TIMEOUT )
      {
         cout &lt;&lt; "Timeout on wait !" &lt;&lt; endl;
      }
   }
}

void ThreadFunction1( void* pVoid )    // no monitor
{
   Foo* pFoo = (Foo*)pVoid;

   for( int i = 0; i &lt; 100; i++ )
   {
      pFoo-&gt;inc(10);
      Sleep( 100 );
   }
}

void ThreadFunction2( void* pVoid )   // no monitor
{
   Foo* pFoo = (Foo*)pVoid;

   for( int i = 0; i &lt; 100; i++ )
   {
      cout &lt;&lt; "The value is : " &lt;&lt; pFoo-&gt;value() &lt;&lt; endl;
      Sleep( 100 );
   }
}

int main( int argc, char** argv )
{
   Foo               foo;
   FooMonitor        monitor(foo);


   if( (argc == 1) || (argv[1][0] != 'M' &amp;&amp; argv[1][0] != 'm') )
   {
      _beginthread( ThreadFunction1, 0, (void*)&amp;foo);
      _beginthread( ThreadFunction2, 0, (void*)&amp;foo);
   }
   else
   {
      _beginthread( MonitorThreadFunction1, 0, (void*)&amp;monitor);
      _beginthread( MonitorThreadFunction2, 0, (void*)&amp;monitor);
   }

   _getch();

   return 0;
}
//End of File
</pre>
</BODY>
</HTML>
