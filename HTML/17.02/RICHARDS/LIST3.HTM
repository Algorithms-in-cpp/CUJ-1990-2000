<HTML><HEAD>
<TITLE>February 1999/Adding Level-2 Thread Safety to Existing Objects/Listing 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 3: The monitor class definition</A></h4>
<pre>
#include &lt;assert.h&gt;
#include "CMonMutex.h"

template&lt;class T&gt; class CMonitor
{
public:

   template&lt;class T&gt; class CShield
   {
   public:
      CShield(T&amp; rElement, IMutex* pMutex,
         unsigned short usTimeOut = INFINITE)
      {
         m_pElement  = &amp;rElement;
         m_pMutex    = pMutex;
         m_usTimeOut = usTimeOut;
         m_bCopy     = false;
      }

      CShield(const CShield&amp; shield)
      {
         assert( shield.m_bCopy != true );

         m_pElement  = shield.m_pElement;
         m_pMutex    = shield.m_pMutex;
         m_usTimeOut = shield.m_usTimeOut;
         m_bCopy     = true;

         m_pMutex-&gt;wait(m_usTimeOut);
      }

      ~CShield()
      {
         if( m_bCopy )
         {
            m_pMutex-&gt;release();
         }
      }

      T&amp; element() const
      {
         return *m_pElement;
      }

   protected:
      T*             m_pElement;  // pointer to protected object
      IMutex*        m_pMutex;    // pointer to the mutex used
      unsigned short m_usTimeOut; // timeout value for mutex
      bool           m_bCopy;     // indicates if this is a copy

   private:
      // these methods are hidden here so that the complier
      // wont generate them
      CShield();
      CShield&amp; operator=(const CShield&amp; shield);
   };
   // --- end of CShield class ---

   CMonitor(T&amp; rElement, unsigned short usTimeOut = INFINITE)
   {
      m_usTimeOut = usTimeOut;
      m_pElement  = &amp;rElement;

      m_pShield =
         new CShield&lt;T&gt;(*m_pElement, &amp;m_Mutex, m_usTimeOut);
   }

   virtual ~CMonitor()
   {
      delete m_pShield;
   }

   CShield&lt;T&gt; Safe()
   {
      return *m_pShield;
   }

protected:
   unsigned short m_usTimeOut; // timeout to use when waiting
   T*             m_pElement;  // pointer to protected element
   CMonMutex      m_Mutex;     // mutex to use for synchronization
   CShield&lt;T&gt;*    m_pShield;   // pointer to internal shield object

private:
};

#endif //end of file
</pre>
</BODY>
</HTML>
