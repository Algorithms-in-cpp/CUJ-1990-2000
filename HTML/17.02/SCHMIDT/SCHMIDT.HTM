<HTML>
     
     <HEAD>
<TITLE>February 1999/Uncaught Exceptions</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocfeb.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Uncaught Exceptions: September Song</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Bobby Schmidt</FONT></H3>

<BLOCKQUOTE>

<p>Bobby deals with time warps, from some news that's old hat to old songs that are news to some.</p>
</BLOCKQUOTE>
<HR>
<BLOCKQUOTE>
<p><I>Copyright &copy; 1999 Robert H. Schmidt</I></p>

<p><i>To ask Bobby a question about C or C++, send email to </I><B>cujqa@mfi.com</B><I>, use subject line: Questions and Answers, or write to Bobby Schmidt, C/C++ Users Journal, 1601 W. 23rd St., Ste. 200, Lawrence, KS 66046.</i></p>


<p>When I worked at Microsoft, what was brand new to the customers was old to technical support (since they had endured the beta), and older still to the developers, who were already coding up the next version. This made for some cognitive dissonance: when asked about a "new" bug in the (customers') "current" version, developers would often say it was an old bug already fixed in the (developers') "current" version. Besides, the developers often had long forgotten how the customers' code worked, since to them it was ancient history.</p>
<p>Users think in terms of discrete product versions like 2.0, which to them is very distinct from last year's version 1.32 and stays current until the next version comes out. But to the product's developers, version 2.0 is really a marketing label for internal version 512, which is one point in the continuum of daily builds. By the time a customer asks a question about version 2.0 (a.k.a. daily build 512), the developer is working on daily build 784.</p>
<p>I'm just like those Microsoft developers. Most of this month's questions arise from last September's column &#151; which for me is really last June's column, since that's when I first wrote it. Thus, I'm responding to a column written about seven months before you are reading this. As I've said before, time is not linear in the column-writing world.</p>
<p>(If you're counting, this column is monthly build 38 for me, and version 2.0 release 3 for you.)</p>

<h4><FONT COLOR="#000080">Horseshoes and Hand Grenades</FONT></H4>

<h4><FONT COLOR="#000080">Q</FONT></H4>

<p>I've got a question about a topic covered in your September 1998 column in <I>C/C++ Users Journal.</I> I apologize if this seems late, but the office copy just now was routed to me...</p>
<p>Okay, so the template function <B>LengthOf&lt;&gt;</B> is pretty cool, but I've run into some situations where it just plain doesn't work like the macro version.</p>
<p>The template function implies a run-time evaluation, so I can't use it to declare arrays of a given size on the stack. For example:</p>

<pre>
// Example #1
//
void FooBar ()
{
    int array1[10];
    bool array2[LengthOf(array1)];
    // Do stuff...
}
</pre>

<p>The second situation where the template function fails is when I try to use it on a locally-declared (e.g., inside a function) type. I can work around this problem by moving the declaration of the type outside the function, but that's not very satisfying:</p>

<pre>
// Example #2
//
void MoreFooBar ()
{
    struct MyType
    {
    int one;
    bool two;
    };
 
    MyType array[10];
 
    For (int i = 0;
         i &lt; LengthOf(array); ++i)
        {
        // do stuff...
        }
}
</pre>

<p>I tried to devise a workable solution that would always allow compile-time evaluation, but I couldn't quite come up with one. The idea that I have is to somehow convert the dimension to an enumerated value, which would allow me to access the value directly at compile time (I wouldn't have to evaluate a function). I tried things along the following lines:</p>

<pre>
template &lt;class T, size_t dim&gt;
class DimensionOf
{
    enum { dimension = dim };
};
</pre>

<p>But I could never get anything along these lines to work, because I have to explicitly name the template arguments to access the enumeration. So, are there any variations that also work under the above scenarios? (Apologies if this has been covered in a recent issue; I just haven't seen it yet.) &#151; Matt Hainje</p>

<h4><FONT COLOR="#000080">A</FONT></H4>

<p>What a delicious irony: after a column prologue discussing Microsoft developers, my first question comes from... a Microsoft developer!</p>
<p>For those who tuned in late, the template in question is</p>

<pre>
template&lt;class T, size_t N&gt;
inline size_t lengthof(T (&amp;)[N])
    {
    return N
    }
</pre>

<p>As an example,</p>

<pre>
int main()
    {
    int a[10];
    cout &lt;&lt; lengthof(a) &lt;&lt; endl;
    }
</pre>

<p>when run should yield</p>

<pre>
10
</pre>

<p>I offered <B>lengthof</B> as an alternative to the familiar C idiom</p>

<pre>
#define LENGTHOF(a) (sizeof(a) / sizeof(*a))
</pre>

<p>in large part because <B>LENGTHOF</B> can't tell real arrays from pointers:</p>

<pre>
int a[10];
int *p = a;
cout &lt;&lt; LENGTHOF(a); // yields 10
cout &lt;&lt; LENGTHOF(p); // probably yields 1 or 2, typically
</pre>

<p>As you have unfortunately discovered, there are places where <B>lengthof</B> does not work:</p>

<UL><LI>Example #1 fails because an array dimension requires a constant expression. Even though the value yielded by <B>lengthof</B> might be resolved at compile time, it is still not considered a constant expression.</LI>
    <LI>Example #2 fails because local types (like <B>MyType</B>) cannot be template parameters. In practice, this should be a minor limitation &#151; in my experience, almost nobody uses local <B>struct/class</B> types.</LI></UL>

<p>You can fix Example #1 with the variation</p>

<pre>
int *a2 = new int[lengthof(a1)]; //OK
</pre>

<p>You must of course remember to use</p>

<pre>
delete [] a2;
</pre>

<p>once you are done with <B>a2</B>. To eliminate this bookkeeping chore, write an <B>auto_ptr</B>-like class that calls <B>delete []</B> in its destructor, allowing</p>

<pre>
AutoArrayPtr&lt;int&gt;
    a2(new int[lengthof(a1)]);
</pre>

<p>Now the allocated array will self-delete when <B>a2</B> goes out of scope.</p>
<p>To fix both examples, you need the macro solution:</p>

<pre>
MyType a1[10];
MyType a2[LENGTHOF(a1)]; // OK
</pre>

<p>To make this solution more palatable, give the macro a little intelligence:</p>

<pre>
#define LENGTHOF(a) sizeof(a) == sizeof(&amp;*a) ? 0 : sizeof(a) / sizeof(*a)
</pre>

<p>If the argument <B>a</B> has the same size as a pointer to <B>*a</B>, <B>a</B> is probably itself a pointer and not an array. I say "probably" because, in the rare event that <B>a</B> is an array that happens to be the same size as a pointer, the macro will yield a false positive. This won't lead to run-time bugs; rather, it means the macro is slightly conservative, flagging code that is actually okay.</p>
<p>In any event, if the macro believes <B>a</B> is a pointer, it yields <B>zero</B> &#151; an expression the compiler diagnoses as an invalid array size. I pick <B>zero</B> here arbitrarily; you can use any expression that will fail to compile.</p>
<p>Otherwise, if <B>a</B> and <B>&amp;*a</B> have different sizes, <B>a</B> is an array and the macro yields <B>a</B>'s length as desired <a href="#1">[1]</a>.</p>
<p>Examples:</p>

<pre>
int a1[100];
int a2[1];
int *p;
int b1[LENGTHOF(a1)]; // OK
int b2[LENGTHOF(a2)]; // maybe error
int b3[LENGTHOF(p)]; // error, but...
int n = LENGTHOF(p); // ...OK, sadly
</pre>

<p>I have not found a simple way to make <B>LENGTHOF</B> reject all pointers in all contexts. If any Diligent Reader has a superior solution &#151; or can fix the original <B>lengthof</B> template to better meet Matt's requirements &#151; please let me know.</p>

<h4><FONT COLOR="#000080">The Truth is Out There</FONT></H4>

<h4><FONT COLOR="#000080">Q</FONT></H4>

<p>In the latest <I>C/C++ Users Journal</I> I just received you had a question as to why the <B>this</B> pointer is an rvalue. I think one reason you can't do</p>

<pre>
T *const p = &amp;this;
</pre>

<p>or similar is that it's up to the compiler where the <B>this</B> pointer actually resides.</p>
<p>For instance if the <B>this</B> pointer was in a register during a member function call then there would be no address available (although I think some processors map the register set onto the first few addresses in memory). &#151; Scot Shinderman</p>

<h4><FONT COLOR="#000080">A</FONT></H4>

<p>While yours is certainly an argument for making <B>this</B> an rvalue, I'm not convinced it's a compelling argument.</p>
<p>Remember, <B>this</B> had been an lvalue for many years. Presumably implementations that kept <B>this</B> in a register got around the conflict by copying <B>this</B> to addressable storage when needed. Because <B>this</B> was considered a const pointer, the addressable copy couldn't be changed, and the two versions &#151; one register original, one addressable copy &#151; would stay in sync.</p>
<p>Until I see a rationale for the C++ Standard, or otherwise hear from committee members who know the truth, I'll remain agnostic about the real reason behind <B>this</B> becoming an rvalue.</p>

<h4><FONT COLOR="#000080">What's the Vector, Victor?</FONT></H4>

<h4><FONT COLOR="#000080">Q</FONT></H4>

<p>I have always enjoyed your column and find the insights it brings to me on C++ are often remarkable. However, I did have trouble understanding the part of your column in September under the heading "What If..." and even noted a few mistakes.</p>
<p>First, <B>v1.insert(v2.begin(), 1)</B> is invalid since the first parameter to <B>insert</B> must be an iterator for the vector you are inserting into. I presume you meant <B>v1.insert(v1.begin(), 1)</B>.</p>
<p>Second, you cannot use an iterator after it has been possibly invalidated, for example by an intervening call to <B>insert</B>. In your example, <B>p1a</B> and <B>p2a</B> will be the same and will compare as equal if <B>p1a</B> is valid; you cannot compare them at all if <B>p1a</B> is invalid. You can ensure that <B>p1a</B> is valid by using function <B>reserve</B> &#151; see below.</p>
<p>Third, the whole idea of freezing or taking a snapshot is complicated and unnecessary. You can make sure that an iterator remains valid by reserving enough storage before saving the iterator and performing the insertion (or any operation that may force the array to be reallocated). For example:</p>

<pre>
vector&lt;int&gt; v1;
// ...
 
// Ensure there is space for 3 more
// elements without reallocation
v1.reserve(v1.size() + 3);
vector&lt;int&gt;::iterator p1a = v1.begin();
 
// Insert 3 elements (with value 1)
v1.insert(v1.begin(), 3, 1);
 
// You can still safely use p1a
// (eg. compare p1a and p1b)
vector&lt;int&gt;::iterator p1b = v1.begin();
</pre>

<p>Alternatively, and probably much better, don't use any iterator values from before an operation that possibly caused a reallocation. You can usually reevaluate the iterator or use an index into the vector (<B>operator[]</B>) rather than an iterator.</p>
<p>Fourth, I find the idea of limiting vector sizes to 65,535 bytes for portability rather poor. There is a lot of software written that is ported to many implementations, none of which have a 64K limit on array sizes.</p>
<p>Even if you do need to port to such an environment I do not see that the software for all environments should be encumbered by the restrictions of the one. This limitation could be handled at run time at least by catching <B>bad_alloc</B>. A better way would be to check the maximum number of elements by calling <B>vector::max_size</B> before any operation that may cause a reallocation.</p>
<p>I hope this makes sense and I apologise if I have made a major blunder or misunderstood your article. As I said before, I find most of you columns very informative and useful, but felt I should mention these points.</p>
<p>Yours sincerely &#151; Andrew Phillips</p>

<h4><FONT COLOR="#000080">A</FONT></H4>

<p>I'll answer your four points with four of my own:</p>
<p>Point 1: I meant <B>v1.insert(v1.begin(), 1)</B>. In fact, I don't know why I even declared <B>v2</B> at all here.</p>
<p>Point 2: Upon reflection, I think we are saying the same thing in different ways. In my example I say that <B>p1a</B> (the pre-insert iterator) and <B>p2a</B> (the post-insert iterator) "conceptually" reference the same place. That is, in the programmer's mind, <B>p1a</B> subjectively references the container's start &#151; even though, after the insertion, <B>p1a</B> may objectively reference outer space.</p>
<p>I was trying to draw a distinction between the user's interpretation of <B>p1a</B> and the language's implementation of same. I think the gist of your argument is, regardless of what the programmer is thinking, vector semantics require that programmer to consider <B>p1a</B> a dead iterator, Q.E.D.</p>
<p>As a programmer I adopt your perspective. If an interface spec says an iterator becomes invalid under certain conditions, and those conditions arise, it doesn't matter what my brain tells me ought to be happening, or whether I think the restriction is ridiculously conservative. I code to the spec, not to my wishful thinking.</p>
<p>But as a writer I have to take my readers' mindset into account. Less-experienced programmers often create bugs by coding to their mental model. (Whether they ought to do this or not is a different matter.) I can easily imagine an STL newbie holding on to <B>p1a</B> for the vector's entire lifetime, as if the vector acted just like an array.</p>
<p>Further, if I were in my readers' place, I'd want to know why the spec had such a restriction, and why my mental model was in dissonance with the implemented programming model. Rather than just write "don't do this because the Standard says not to," I prefer to also give some rationale for why the Standard says not to. That way, the mental model has a chance to align with the Standard's reality.</p>
<p>Point 3: For what it's worth, I knew the freezing example was horrid when I published it. I actually got my inspiration from MFC a few years ago. I believe the container was a <B>CString</B> or some similar string analogue; to get an iterator (<B>char const *</B>) to the <B>CString</B>, I had to freeze the contents so they couldn't change. As you rightly show, vectors support much saner alternatives <a href="#2">[2]</a>.</p>
<p>Point 4: As Diligent Readers know, I try to bring up portability concerns where I can. The C and C++ Standards committees have done a lot of work promoting portability, and I'd feel remiss assuming all my readers have implementations exceeding the Standard-specified minima.</p>
<p>The 64K portable limit for a single C++ array is my extrapolation from the C Standard. I expect that some conforming C or C++ implementations &#151; especially for embedded systems &#151; are limited to single arrays/vectors of size 64K. How many of my readers have systems so-constrained I can't know.</p>
<p>Yes, you can ask a vector for its maximum size, and can catch exceptions. But these are run-time checks that may cause a behavior fork: the same source code can have one limit on System A, another limit on System B. If the code is to behave consistently and have the same published properties on all systems, I believe such run-time checks are insufficient.</p>
<p>I would rather say that, if you reliably want a container &gt; 64K and care about portable behavior across systems, use something other than an array or <B>vector</B>. Otherwise, exploit your system's particular implementation limits. Regardless, I'll continue to favor portability considerations when writing my columns.</p>

<h4><FONT COLOR="#000080">White Rabbit</FONT></H4>

<h4><FONT COLOR="#000080">Q</FONT></H4>

<p>When I saw "Life is change" at the beginning of your September 1998 column, I immediately went to the end-note to read the source credit, thinking, "Wow, here's a kinsman who quotes arcane song lyrics to make universal points!" I was a bit disappointed to find only a reference to the current husband of an ex-wife.</p>
<p>Anyway, I recall that truism from the following:</p>

<BLOCKQUOTE>
<p><I>Life is change<br>
How it differs <br>
From the rocks.<br>
I've seen their ways <br>
Too often for my liking: <br>
New worlds to gain.<br>
My life is to survive <br>
And be alive <br>
For you.</I></p>
</BLOCKQUOTE>

<p>From: "Crown of Creation" (postlude), Jefferson Airplane, September, 1968</p>
<p>(I've not seen the stanzas in writing; the line breaks above suggest the meter present in the music.)</p>
<p>Thanks for a useful and interesting column. &#151; S.L. Sander</p>

<h4><FONT COLOR="#000080">A</FONT></H4>

<p>I had just turned seven when this song came out. At that age I was listening to what my parents listened to &#151; mainly jazz, "old" country, and folk songs. To this day, I doubt that either of my parents has heard (or heard of) Jefferson Airplane.</p>
<p>I probably didn't hear them until I was in high school. I certainly don't remember the song you cite. I do sometimes quote arcane song lyrics, but they tend to come from my college DJ years ('79-'85).</p>
<p>Sorry my reference to "life is change" was so prosaic &#151; next time I'll conjure up something both witty and obscure!</p>

<h4><FONT COLOR="#000080">And This One Belongs to the Reds</FONT></H4>

<h4><FONT COLOR="#000080">Q</FONT></H4>

<p>I have a function definition:</p>

<pre>
void
Func(long lErrorCode, const char * szFormat, ...);
</pre>

<p>In this function I want to call <B>sprintf</B> with <B>szFormat</B> and the ellipsis parameters from <B>Func</B>. Now I want a short way to write the function call. I found a way, but then I have to code all possible numbers of arguments. I think there must be a better way.</p>
<p>Any suggestions?</p>
<p>Thanks &#151; Volker Grimm</p>

<h4><FONT COLOR="#000080">A</FONT></H4>

<p>Woo-hoo, I get to end the game fielding an easy grounder.</p>
<p>Volker, the secret is contained in the Standard C header files <B>&lt;stdarg.h&gt;</B> and <B>&lt;stdio.h&gt;</B>. There you'll find macros, types, and functions that let you access the unnamed (ellipsis) arguments and feed them to <B>printf</B>-type functions:</p>

<pre>
#include &lt;stdarg.h&gt;
#include &lt;stdio.h&gt;
 
void
Func(long lErrorCode,
    char const *szFormat, ...)
    {
    if (lErrorCode != 0)
        {
        char buffer[1000]; // magic #
        va_list va;
        va_start(va, szFormat);
        vsprintf(buffer, szFormat, va);
        va_end(va);
        }
    }
</pre>

<p>The <B>va_list</B> object holds unspecified context information used by subsequent macros and routines. In effect, the <B>va_list</B> "captures" the values contained in the unnamed arguments.</p>
<p><B>va_start</B> fills in this context, based on the position of the last named parameter (<B>szFormat</B> in this example). You must match <B>va_start</B> with <B>va_end</B>, using the same <B>va_list</B> object.</p>
<p><B>vsprintf</B> behaves just like <B>sprintf</B>, except it picks its values from the <B>va_list</B> rather than from an explicit list of arguments. You can also use <B>vfprintf</B> and <B>vprintf</B>, which are analogous to "normal" <B>fprintf</B> and <B>printf</B>.</p>
<p><B>va_list</B>, <B>va_start</B>, and <B>va_end</B> are declared in <B>&lt;stdarg.h&gt;</B>, while the <B>printf</B>-style functions come from <B>&lt;stdio.h&gt;</B>. All of these declarations are part of both Standard C and Standard C++.</p>

<h4><FONT COLOR="#000080">Notes</FONT></H4>

<p><a name="1"></a>1.  This all assumes you are using built-in <B>*</B> and <B>&amp;</B>. If you feed <B>LENGTHOF</B> a class object with those operators trumped, all bets are off.</p>
<p><a name="2"></a>2.  If you are an <I>MSJ</I> junkie, or have <B>@microsoft.com</B> in your email address, please please please resist your primal urge to write me about alternative <B>CString</B> strategies. The project was long ago, and now serves only as an inspiration.</p>

<p><i>Bobby Schmidt is a freelance writer, teacher, consultant, and programmer. He is also an alumnus of Microsoft, a speaker at the Software Development and Embedded Systems Conferences, and an original "associate" of (Dan) Saks &amp; Associates. In other career incarnations, Bobby has been a pool hall operator, radio DJ, private investigator, and astronomer. You may summon him on the Internet via <B>rschmidt@netcom.com</B>.</i></p>


</BLOCKQUOTE>
</BODY>
</HTML>
