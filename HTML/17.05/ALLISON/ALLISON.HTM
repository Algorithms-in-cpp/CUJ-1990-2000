<HTML>   
     <HEAD>
<TITLE>May 1999/import java.*</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocmay.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">import java.*: Control Flow &#151; The Bad, The Good, The Exceptional</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Chuck Allison</FONT></H3>

<BLOCKQUOTE>
<p>Java provides more ways to alter flow of control than C, but it's still a very structured language.</p>
</BLOCKQUOTE>
<hr>
<BLOCKQUOTE>
<p>In 1968, industry luminary Edsgar Dijkstra wrote a now-famous letter entitled "GOTO Statement Considered Harmful" <a href="#1">[1]</a> in which he made a case for programming without branching constructs. He and many others have commented over the years that you can express algorithms more clearly without them, and educators and language designers have labored to usher in a <B>goto</B>-less programming world.</p>
<p>Have they succeeded? It depends. Their efforts have certainly raised the bar of structured programming, with <B>goto</B>-filled languages like FORTRAN and BASIC giving way to better structured languages such as Fortran-77, Pascal, Modula, C, and Visual BASIC. More programmers certainly think structured nowadays. When is the last time you saw a <B>goto</B> in a technical article (besides this one, of course?) Yet all popular languages have always had <B>goto</B> as trap door, just in case you "needed" it.</p>
<p>Until now, that is. Java has no <B>goto</B> and does very well, thank you very much. In this article I'll explain why, as well as look at all the issues pertaining to control of program flow, including use of exceptions.</p>

<h4><FONT COLOR="#000080">The Bad</FONT></H4>

<p>So what's the matter with <B>goto</B>? Like anything else in life, the problem is not in the construct itself, but rather in how it is used/abused. My first language was FORTRAN-IV, which had no <B>else</B> nor the notion of a compound statement. Here's a sample:</p>

<pre>
      IF (X .LT. 0) GOTO 10
      IF (X .EQ. 0) GOTO 20
      N = 1
      Y = F(N)
      GOTO 30
   10 N = -1
      Y = H(N)
      GOTO 30
   20 N = 0
      Y = G(N)
   30 CONTINUE
</pre>

<p>Okay, quick! What does this code do? Can't you see the logic at a glance? If you can, I don't know if that's a good thing or not! Here's how you might write it in C or Java:</p>

<pre>
if (x &lt; 0)
{
    n = -1;
    y = f(n);
}
else if (x == 0)
{
    n = 0;
    y = g(n);
}
else
{
    n = 1;
    y = h(n);
}
</pre>

<p>Ah, much better! Of course seasoned C hackers might get carried away and do the following:</p>

<pre>
n = (x &lt; 0) ?
    (f(-1), -1) : (x == 0) ?
        (f(0), 0) : (f(-1), -1);
</pre>

<p>which is not pretty, I'll admit, but even this atrocity is easier to follow than the FORTRAN version because you don't have to jump all over the place. Don't try the line above in Java, though: it doesn't have a comma operator.</p>
<p>I liken the move from branching to structured logic to the jump from assembly language to a high-level language. You can do anything in assembler, but programming in C is clearer and less error-prone. Likewise, you can express any logic by littering a sequence of statements with <B>goto</B>s, but higher-level constructs make your code more readable and easier to get right the first time.</p>
<p>I realize that in 1999 I might be preaching to the proverbial choir, but let's look at one more example to prove the point. What does the following BASIC program do?</p>

<pre>
140 lo = 1
150 hi = 100
160 if lo &gt; hi then
    print "You cheated!" : goto 240
170 g = int((lo + hi) / 2)
180 print "Is it";g;" (L/H/Y)?"
190 input r$
200 if r$ = "L" then
    lo = g+1 : goto 160
210 if r$ = "H" then
    hi = g-1 : goto 160
220 if r$ &lt;&gt; "Y" then
    print "What? Try again..." :
        goto 190
230 print "What fun!"
240 print "Wanna play again?"
250 input r$
260 if r$ = "Y" then 140
</pre>

<p>Since I used reasonably named variables, you probably guessed that this program plays the game of "Hi-Lo": it uses binary search to guess a number between 1 and 100. The user responds to each guess by telling whether it is too high or too low. If the variables <B>lo</B> and <B>hi</B> ever cross (i.e., <B>lo &gt; hi</B>), then the user gave erroneous input. But again, it is difficult to infer the logic without careful study. Can you readily see how many loops there are, and where they begin and end?</p>

<h4><FONT COLOR="#000080">The Good</FONT></H4>

<P>It is one thing to say "don't use <B>goto</B>," but quite another to say what you can and should use to express algorithms well. Two years before Dijkstra's paper mentioned above, Bohm and Jacopini <a href="#2">[2]</a> proved mathematically that it is possible to express any algorithm in terms of only three constructs, along with an arbitrary number of boolean flags. The three constructs are:</P>

<UL><LI>1)  sequences of statements</LI>
    <LI>2)  alternation (e.g., <B>if-else</B>, <B>switch</B>)</LI>
    <LI>3)  repetition (e.g., <B>while</B>, <B>for</B>, <B>do</B>)</LI></UL>

<p>We usually call programs that use only these mechanisms structured programs. Loops and <B>if</B> statements work the same in Java as they do in C++. <A HREF="list1.htm">Listing 1</A> shows a Java version of the Hi-Lo program that obeys the rules of structured programming. I'll explain the expression <B>throws IOException</B> later; for now, notice the logic. There are two loops: the outer loop allows multiple plays, and the inner loop plays a single game. Note also the two <B>boolean</B> loop control variables: <B>done</B> for the outer loop, and <B>found</B> for the inner. When it's time to terminate a loop, I just change the state of its control. This is the type of programming style Bohm and Jacopini had in mind.</p>
<p>But what if you need to terminate a loop from within, that is, before the last statement of its body? Somehow you need to skip the statements that follow. Following the rules of structured programming, you'd need to nest the remainder of the loop body in an <B>if</B> statement, like this:</p>

<pre>
boolean done = false;
while (!done)
{
    // &lt;a bunch of statements here&gt;
    if (&lt;you DON'T need to exit
         the loop now&gt;)
    {
        // &lt;the rest of the loop
        //  body goes here&gt;
    }
    else
        done = true;
}
</pre>

<p>If you need to exit the loop in more than spot, you have a whole lot of nesting going on! To reflect the logic more directly, Java, like C, includes the <B>break</B>, <B>continue</B>, and <B>return</B> statements, which are just a restricted form of <B>goto</B>. The <B>break</B> statement exits the immediately enclosing loop or <B>switch</B>, whereas <B>continue</B> iterates on the enclosing loop. Using <B>break</B> in the loop above obviates the need for the control variable and makes the logic more self-evident:</P>

<pre>
for (;;)
{
    // &lt;a bunch of statements here&gt;
    if (&lt;you NEED to exit
         the loop now&gt;)
        break;
    // &lt;the rest of the loop
    //    body goes here&gt;
}
</pre>

<p>So a little bit of <B>goto</B> ain't so bad. This is especially true with nested loops. The structured program in <A HREF="list2.htm">Listing 2</A> has three loops, nested sequentially, and it wants to break out of all three loops when <B>k == 1</B> in the innermost loop. To make this happen, this program needs to set all loop control variables <B>false</B>. Java provides a better way via the labeled <B>break</B>, which allows you to say, in effect, "I want to break out of the loop at such and such a level of nesting." As the program in <A HREF="list3.htm">Listing 3</A> illustrates, you place a label (an identifier followed by a colon, as in C) immediately before the loop(s) you want to directly break out of, and then make that label the target of a <B>break</B> statement. Isn't it nice not to have to use extraneous Boolean flags that have no direct bearing on the meaning of your program? <A HREF="list4.htm">Listing 4</A> shows a version of Hi-Lo that uses a labeled break to allow the user to quit the game prematurely by typing the letter <B>'Q'</B>. (In case you're wondering what a <B>BufferedReader</B> is, I'm not going to explain the I/O in this article. Trust me and stay tuned.)</p>
<p>Java also supports a labeled <B>continue</B>, which breaks out of any intermediate loops to iterate on the loop specified by the label. For example, if you replace <B>break</B> with <B>continue</B> in <A HREF="list3.htm">Listing 3</A>, the output is</p>

<pre>
0,0,0
0,0,1
1,0,0
1,0,1
</pre>

<p>The branching constructs, <B>break</B>, <B>continue</B>, and <B>return</B>, along with labeled <B>break</B> and <B>continue</B>, make an unbridled <B>goto</B> capability unnecessary, so Java doesn't support it.</p>

<h4><FONT COLOR="#000080">The Exceptional</FONT></H4>

<p>In real programs, not only do you need sometimes to exit deeply nested loops; you also need to exit a deeply nested function call stack. If a catastrophic error should occur, you need to return to a safe place, which is usually at an outer level of logical nesting in your program. In traditional programming languages like C you usually just use return values from a function to indicate an error condition. This requires you to generate and check return values through every function in the chain of function calls, which fills your source code with clutter that obscures the logic of what you're trying to accomplish.</p>
<p>As an illustration, suppose you have functions <B>f</B>, <B>g</B>, and <B>h</B>, which execute in a nested fashion (see <A HREF="list5.htm">Listing 5</A>). These functions produce side effects and do not need to return any value. Suppose further that during the execution of <B>h</B> a particular error might occur, in which case you want to return to the main program and start over. The return-value technique requires <B>h</B> to return a code to <B>g</B>, then <B>g</B> to <B>f</B> and <B>f</B> to <B>main</B>. In this case you must alter your functions' signatures to accommodate the error handling, and error handling code is scattered throughout your program (see <A HREF="list6.htm">Listing 6</A>). In this example, I use Java's random number generator in <B>h</B> to return a one to simulate an error, zero otherwise. The static variable <B>seed</B> holds a number you type on the command line to seed the random number generator.</p>
<p>What a mess! Why not just <I>jump</I> from <B>h</B> to <B>main</B>? With exceptions you can. In <A HREF="list7.htm">Listing 7</A> I restored <B>f</B> and <B>g</B> to their original form. Now if an error occurs in <B>h</B>, I throw an exception of type <B>MyError</B>, which is caught in <B>main</B>.</p>
<p>As you can see, exception-handling syntax in Java is virtually identical to C++: you wrap code to be exception-tested in a <B>try</B> block at whatever level suits you, followed by one or more exception handlers that catch objects of a specified class. To raise an exception you use the <B>throw</B> keyword. When an exception is thrown, execution retraces its way back up the stack until it finds a handler that takes a parameter of the same type (or of a supertype). The key differences between Java and C++ exception handling are as follows:</p>

<UL><LI>1.  All exceptions must be objects of classes derived from <B>java.lang.Exception</B>. (Actually, there are a couple of other classes you could derive from, but those are generally reserved for the Java runtime implementation. You should use <B>Exception</B>.) Since exceptions are objects, you must use <B>new</B>; you can't throw primitive types.</LI>
    <LI>2.  Java doesn't have destructors, so there is no concept of unwinding the stack when exceptions occur as there is in C++.</LI>
    <LI>3.  Exception specifications (e.g., <B>throws MyError</B>) are not optional for exception objects that derive from <B>Exception</B>. Every function must specify the types of exceptions it may throw. Furthermore, a function without an exception specification may not throw any exceptions. In C++, a function without exception specifications can throw any exception.</LI>
    <LI>4.  Java has a <B>finally</B> clause that facilitates program cleanup in the presence of exceptions (see below).</LI></UL>

<p>Any exception class derived from <B>Exception</B> is called a <I>checked exception</I>, because the compiler checks to ensure that the only such exceptions thrown by a function are the ones you advertise in its exception specification. If you call a function with an exception specification, you must either handle that type of exception locally, or you must add it to the exception specification of the enclosing function. I used the latter course in <A HREF="list1.htm">Listing 1</A>. Since <B>BufferedReader.readLine</B> can throw an <B>IOException</B> (that's what its specification says) I can propagate this to the specification of the function I'm in (<B>main</B> in this case). The alternative would be to handle each call to <B>readLine</B> as follows:</p>

<pre>
char r;
try {        
    r = in.readLine().toUpperCase().charAt(0);
}
catch (IOException x) {
    // Abort after read error:
    System.out.println("read error " + x);
    System.exit(-1);
}
</pre>

<p><I>Unchecked exceptions</I> include things that are difficult to detect at compile-time, such as an array index out of bounds. These exceptions can occur almost anywhere, and it would be ridiculous to force the developer to specify all such exceptions in all method specifications. Unchecked exceptions derive from either <B>RuntimeException</B> or <B>Error</B>.</p>

<h4><FONT COLOR="#000080">Exceptions and Resource Management</FONT></H4>

<P>When using exceptions it is important to ensure that you deallocate any local resources in case an exception occurs. Consider, for example, a function that copies a file to standard output. A first attempt might look like this:</p>

<pre>
static void copy(String file) {
    FileReader r = new FileReader(file);
    int c;
    while ((c = r.read()) != -1)
        System.out.write(c);
    r.close();
}
</pre>

<p>This won't compile because the <B>FileRead</B> constructor as well as <B>read</B>, <B>write</B>, and <B>close</B> throw checked exceptions. The easy way to make the compiler happy is to add <B>IOException</B> to <B>copy</B>'s throw specification:</p>

<pre>
static void copy(String file)
throws IOException {
    FileReader r = new FileReader(file);
...
</pre>

<p>Using this technique any I/O exception will propagate to the caller, and the caller will know something went wrong. So the compiler is happy, but if <B>read</B> or <B>write</B> throw an exception the file doesn't get closed. One solution is to catch the exception and close the file, but you have to rethrow the exception so the caller still gets the exception, like this:</p>

<pre>
static void copy(String file)
throws IOException {
    FileReader r = new FileReader(file);
    int c;

    try {
        while ((c = r.read()) != -1)
            System.out.write(c);
    }
    catch (IOException x) {
        r.close();
        throw x;    // rethrow
    }
    if (open)
        r.close();
}
</pre>

<p>It's a pain to have to have two calls to <B>close</B>, and in a complicated program where many exceptions can be thrown this technique is too tedious and error-prone to be acceptable. The C++ solution is to wrap the lifetime of the file in an object and have the destructor close the file. Well, Java doesn't have destructors, but it does has the <B>finally</B> clause, which is an even better solution:</p>

<pre>
static void copy(String file)
throws IOException {
    FileReader r = new FileReader(file);
    int c;

    try {
        while ((c = r.read()) != -1)
            System.out.write(c);
    }
    finally {
        r.close();
    }
}
</pre>

<p>Any code in a <B>finally</B> clause is executed no matter what, whether an exception occurs or not, or even if a <B>return</B> statement occurs within the <B>try</B> block or any of its handlers. As the example above shows, you don't need to have a catch clause to use finally. Since all I want to do in this case is to close the file and let the exception pass back to the caller, I don't need one. A complete program that uses the <B>copy</B> method to print a file you specify on the command line is in <A HREF="list8.htm">Listing 8</A>. Note that when you print an exception object with <B>System.out.println</B>, it gives the type of the exception with an explanatory message.</p>

<h4><FONT COLOR="#000080">Under Control</FONT></H4>

<P>I think Dijkstra would have liked Java. It has done away with the dreaded <B>goto</B>, but gives the programmer enough flexibility to write readable and convenient structured code. Java's enforced exception specifications finesse surprise exceptions, and the <B>finally</B> clause helps guarantee proper resource management with minimum hassle. Nice.</p>

<h4><FONT COLOR="#000080">References</FONT></H4>

<p><a name="1"></a>1.  E. Dijkstra. "GOTO Statement Considered Harmful," <I>Communications of the ACM</I>, 11:3, p. 147, March 1968.</p>
<p><a name="2"></a>2.  C. Bohm &amp; G. Jacopini. "Flow Diagrams, Turing Machines, and Languages with Only Two Formation Rules," <I>Communications of the ACM</I>, 9:5, p. 266, May 1966.</p>

<p><i>Chuck Allison is Consulting Editor and a columnist with <I>CUJ</I>. He is the owner of Fresh Sources, a company specializing in object-oriented software development, training, and mentoring. He has been a contributing member of J16, the C++ Standards Committee, since 1991, and is the author of <I>C and C++ Code Capsules: A Guide for Practitioners</I>, Prentice-Hall, 1998. You can email Chuck at <B>cda@freshsources.com</B>.</i></p>

<h4><a href="../../../source/1999/may99/allison.zip">Get Article Source Code</a></h4>



</BLOCKQUOTE>
</BODY>
</HTML>
