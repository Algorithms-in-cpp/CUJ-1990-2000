<HTML>   
     <HEAD>
<TITLE>May 1999/We Have Mail</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocmay.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">We Have Mail</FONT></H2>

<HR>

<BLOCKQUOTE>

<p><I>Letters to the editor may be sent via email to </I><B>cujed@mfi.com</B><I>, or via the postal service to Letters to the Editor, </I>C/C++ Users Journal<I>, 1601 W. 23rd St., Ste 200, Lawrence, KS 66046-2700.</I></p>

<hr>

<p><I><B>Correction:</B> In Etienne Richards' article, "Adding Level-2 Thread Safety to Existing Objects" (February 1999, p. 61), an erroneous statement was made about the manner in which threads are activated. The correct statement is: "If there are multiple threads performing a wait they will be queued according to the operating system strategy." (The article text on page 61 used the word "signal" instead of "wait.") We apologize for any confusion this may have caused. &#151; mb</I></p>
<HR>

<p>Dear CUJ,</p>
<p>You probably have already received feedback, but just in case:</p>
<p>Chuck Allison's "Using Primitive Types and Wrappers" (<I>CUJ,</I> March 1999) has an error in his description of operators and short-circuit evaluation. He statues that "For example, if <B>i</B> is less than <B>N</B> in the following expression, then <B>a[i]</B> is not even evaluated:</p>

<pre>
if (i &lt; N &amp;&amp; a[i] != 0)
</pre>

<p>I would guess that he meant the expression to be:</p>

<pre>
if (i &lt; N || a[i] != 0)
</pre>

<p>or, perhaps he meant:</p>

<pre>
if (i &gt; N &amp;&amp; a[i] != 0)
</pre>

<p>At any rate, his is incorrect because of course with <B>i</B> being less than <B>N</B>, <B>i &lt; N</B> is true, and <B>a[i] != 0</B> must be evaluated to resolve the logical and.</p>
<p>While I'm here &#151; I too subscribed to the <I>C Users Journal,</I> now the <I>C/C++ Users Journal,</I> primarily to follow C/C++. However, I program in other languages, so anytime that you include information on those other languages (Java being the recent diversion), especially when it is related to C/C++, I welcome it! Keep up the good work.</p>

<p>G.Durham<br>
gdurha1@erols.com</p>

<p><I>That Chuck Allison. He's such an honest guy that when he makes a simple mistake no one here catches it. I believe he meant to say "if </I><B>i</B><I> is greater than or equal to </I><B>N</B><I> in the following expression, then </I><B>a[i]</B><I> is not even evaluated:"</i></p>

<pre>
if (i &lt; N &amp;&amp; a[i] != 0)
</pre>

<p><I>which would make a lot of sense if </I><B>a</B><I> were an array of size </I><B>N</B><I>.</p>
<p>I'm glad you enjoy the Java coverage. But we'll make sure to keep it related to C/C++. Thanks for writing. &#151; mb</i></p>

<HR>

<p>Mr. Plauger,</p>
<p>I'll get straight to the point.</p>
<p>Why go through the effort of making an embedded C++ when one can simply mimic objects in C?</p>
<p>I was once an avid C++ follower, spending many hours learning the language as best I could. However, the more I understood it the more complicated it became. At the end of it all, I was disenchanted with C++'s usability due to its added complexity for anything but the largest of software systems.</p>
<p>I am a true believer in object-based programming. I'm a believer in encapsulation, interface inheritance, and polymorphic behavior. So why not just mimic these features in C and forget about embedded C++?</p>
<p>I'm sure your a very busy person and probably can't answer everyone's questions. But maybe you have already have written something about the justification of embedded C++ (or can in the future :). If so, where could I find it. Or maybe you could just forward it to me.</p>
<p>Thanks in advance for your time, and thanks again for the great articles in the <I>C/C++ Users Journal.</I></p>
<p>Kurt Ottaway<br>
Sr. Software Engineer<br>
Identix Corp.</p>
<p><I>"Simply" is in the eye of the beholder. C++ performs stronger type checking than C. It also supplies nice notation for calling virtual functions, passing "this" pointers to member functions, and encapsulating member functions in a hierarchical name space. Embedded C++ retains all these demonstrably useful features while avoiding some of the more abstruse, and less efficient, features that have been piled onto C++ over the past several years.</p>
<p>On the other hand, I confess that I had to write a nontrivial program in C a year or two ago. (It was a Java to C translator.) I can't say that I missed much from C++. But then, I consider myself a pretty practiced and disciplined C programmer. C++ would still have been a better choice, were it not for some marketing considerations. &#151; pjp</i></p>

<hr>

<p>Dear <I>CUJ,</I></p>
<p>I have recently read your article entitled "Using C++ with Word97 COM Interfaces," by Jim Langseth, in your January 1999 issue. In the article, Langseth mentions that significant documentation exists for manipulating Word with Visual Basic for Applications, and that "using C++ is a bit trickier."</p>
<p>I have come to the same conclusion as Langseth, and have found that it is much easier to write code that drives Word using VBA COM Objects, and then calling the VBA COM objects from C++ through custom interfaces.</p>
<p>One could convert Langseth's <B>WordStream</B> class to a COM interface as shown in <A HREF="fig1.htm">Figure 1</A>.</p>
<p>In Visual Basic the <B>IWordStream</B> interface could be implemented in a class module as shown in <A HREF="fig2.htm">Figure 2</A>.</p>
<p>Once the VB code is working, one can extract the CLSID for the VB COM object from the registry, or use the COM-Object viewer to get it. In C++ one simply has to create the object, get the interface, and use it.</p>

<pre>
static const CLSID
CLSID_WordStream = {....};
     
HRESULT DoReport()
{
   HRESULT hr;
   IWordStream* ws = 0;
   hr = CoCreateInstance(
           CLSID_WordStream,
           NULL,
           CLSCTX_ALL,
           IID_IWordStream,
           (void**)&amp;ws );

   if (FAILED(hr)) {
      // handle failure
   }
   // do interesting things now...
   hr = ws-&gt;put_FontSize(10);
   if (FAILED(hr))
   { // do something }
     
   hr = ws-&gt;AddText("A Text String");
   if (FAILED(hr))
   { // do something }
     
   if (ws) {
      ws-&gt;Release();
      ws = 0;
   }
   // finished
}
</pre>

<p>As a final note, if <B>CLSCTX_ALL</B> is used for creation of the object, one can debug the VB code in the VB Debugger. Alternatively, one can compile the VB DLL with Codeview debug info.</p>
<p>I have found it much easier to drive Word, Excel, or whatever, using VB COM objects, simply because of the wealth of documentation available.</p>
<p>Craig Funk<br>
PanTechnica Corporation<br>
Eden Prairie, MN<br>
cfunk@pantechnica.com</p>

<p><I>I never thought I'd see the day we printed so much VB code in CUJ, but you've given us a good reason. Thanks for presenting an interesting approach. &#151; mb</i></p>

<hr>

<p>Dear pjp,</p>
<p>I read with interest both your column on EC++ and the message by Rick Tillery, in the February issue. I'd like to thank both of you.</p>
<p>Personally, I often do switch on strings, as in:</p>

<pre>
for (i = 0;
   i &lt; sizeof X/sizeof X[0]; ++i)
   if (strcmp(str, X[i].str) == 0)
   { treat_case(i); break; }
</pre>

<p>When I'm in a better mood, I define the <B>X</B> array in sorted order, either by hand or by invoking sort from the makefile, so that I can do:</p>

<pre>
char **r = (char**) bsearch(&amp;str, X,
      sizeof X/sizeof X[0],
      sizeof X[0],
      my_compare_X_str);
if (r)
   treat_case(r - (char**)X);
</pre>

<p>where <B>my_compare_X_str</B> just dereferences its arguments and calls <B>strcmp</B>.</p>
<p>Yet another alternative is to use a C++ <B>map</B>, which requires heavier initialization.</p>
<p>I think Rick's idea, to switch on the first letter of the keyword, may be more efficient than using <B>bsearch</B>. However, it is much easier to generate an ordered array <B>X</B> than to generate the code that switches on the first letter.</p>
<p>In this respect, I deem Rick's argument as self-contradictory. Building a jump table based on the first letter (well, why not on the integer value that results taking the first four chars?) of each token, is <I>exactly</I> the kind of job that one would expect from a good optimizing compiler. Hence, his argument should only be mentioned by those who sustain the opposite thesis.</p>
<p>Then, lots of compilers degrade the switch statement into an if-else cascade. (Some are known to require the values to be spelled out in ascending order.) I would suggest that a programmer considers the compiler and the machine as a whole, where the lack of optimizations can be compensed by a faster processor. Programmers should be happy when they have written some clear code which can be maintained by humans and optimized by compilers.</p>
<p>Since processors are now so fast, most software buyers don't consider efficiency very important. Yet, efficiency is a good razor for discriminating language features. Your discussion on EC++ is much more enlightening than your answer to Rick. Or should I interpret the latter as a compressed version of the former?</p>
<p>I always dreamt that I wrote an algorithm to compute the first few digits of PI, without calling external functions except for the <B>printf</B> that finally displayed the result. Since the program took no input, it computed a fixed number of digits. I then compiled it and run it. And I was surprised to find out that the program executable was binary the same as the hello-world program</p>

<pre>
#include &lt;stdio.h&gt;
     
int main()
{
   printf("%s\n", "3.1415926536");
   return 0;
}
</pre>

<p>Thanks again for maintaining a balanced global vision of language evolution. (And I'm looking forward for your column on C9X.)</p>
<p>Regards</p>
<p>Alessandro Vesely</p>
<p><I>Yes, good compilers optimize switch statements aggressively. But sometimes it is the mark of a good programmer to write code that doesn't depend on a good compiler to run fast enough. The hard part is knowing whether your more elaborate code is really going to make a difference in the field. &#151; pjp </I>o</p>

<h4><a href="../../../source/1999/may99/letters.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY>
</HTML>
