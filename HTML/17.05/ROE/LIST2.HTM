<HTML><HEAD>
<TITLE>May 1999/A Wrapper Class for Dynamically Linked Plug-Ins/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2: DynamicLibrary.cpp &#151; Wraps dynamic linking capabilities of Win32, Solaris, and Linux</A></h4>
<pre>
#ifdef _WIN32
#define NOGDI
#define WIN32_LEAN_AND_MEAN
#include &lt;windows.h&gt;
#else
#include &lt;dlfcn.h&gt;
#endif

#include "DynamicLibrary.h"


DynamicLibrary::DynamicLibrary(const char *libName)
    : libHandle(0)
{
    Load( libName );
}

DynamicLibrary::~DynamicLibrary( void )
{
    Unload();
}

bool DynamicLibrary::Load(const char *libName)
{
    if (libName != NULL &amp;&amp; ::strlen(libName) &gt; 0)
    {
        if (libHandle == NULL)
        {
#ifdef _WIN32
            libHandle = ::LoadLibrary( libName );
#else
            libHandle = ::dlopen( libName, RTLD_LAZY );
#endif
        }
    }

    return (libHandle != NULL);
}

bool DynamicLibrary::Unload( void )
{
    if (libHandle != NULL)
    {
#ifdef _WIN32
        ::FreeLibrary( libHandle );
#else
        ::dlclose( libHandle );
#endif
    }

    libHandle = NULL;

    cache.clear();

    return true;
}

DLPROC DynamicLibrary::GetProcAddr(const char *procName) const
{
    DLPROC proc = NULL;

    if (libHandle != NULL)
    {
#ifdef _WIN32
        proc = (DLPROC) ::GetProcAddress(libHandle, procName);
#else
        proc = (DLPROC) ::dlsym(libHandle, procName);
#endif
    }

    return proc;
}

DLPROC DynamicLibrary::GetProcAddrCached(const char *procName,
                                         unsigned int procId)
{
    DLPROC proc = NULL;

    if (libHandle != NULL)
    {
        if ((procId &gt;= cache.size()) || (cache.size() &lt; 1))
            cache.resize(procId + 1, cache_info());

        cache_info &amp;ci = cache[ procId ];

        if (ci.procAddr == NULL &amp;&amp; !ci.testFlag)
        {
            ci.testFlag = true;
            ci.procAddr = GetProcAddr(procName);
        }

        proc = ci.procAddr;
    }

    return proc;
}

#ifdef _WIN32
DLPROC DynamicLibrary::GetProcAddr(int ordinal) const
{
    DLPROC proc = NULL;

    if (libHandle != NULL)
    {
        proc = (DLPROC) ::GetProcAddress(libHandle,
                                 MAKEINTRESOURCE(ordinal));
    }

    return proc;
}

DLPROC DynamicLibrary::GetProcAddrCached(int ordinal)
{
    return GetProcAddrCached(MAKEINTRESOURCE(ordinal),
                             ordinal);
}
#endif


</pre>
</BODY>
</HTML>
