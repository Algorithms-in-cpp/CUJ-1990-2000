<HTML>
<HTML><HEAD>
<TITLE>May 1999/A Wrapper Class for Dynamically Linked Plug-Ins/Listing 9</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 9: COMLikeMath.cpp &#151; Defines class COMLikeMath, which implements IBase, IDoMath, and INamed interfaces. Applications that use these interfaces know nothing about the underlying COMLikeMath object.</A></h4>
<pre>
#include &lt;stdio.h&gt;
#include &lt;iostream&gt;
#include &lt;string.h&gt;
#include &lt;iomanip&gt;
#include "IDoMath.h"
#include "INamed.h"


#ifdef _WIN32
#define LINKAGE     __declspec(dllexport)
#else
#define LINKAGE
#endif


class COMLikeMath : IDoMath, INamed
{
private:

    int         refCount;
    char    myName[100];

public:

    COMLikeMath(void);
    ~COMLikeMath(void);

    virtual bool QueryInterface(const char *iid,
                                IBase **iface);
    virtual void Destroy(void);

    virtual int Add(int x, int y);
    virtual int Sub(int x, int y);
    virtual int Mul(int x, int y);
    virtual int Div(int x, int y);

    virtual void Who(char *name, int len);
};


// function required to support creation of interface
// provider (i.e. COMLikeMath) by ClassFactory object

extern "C" bool LINKAGE cf_create_interface(const char *iid,
                                            IBase **iface)
{
    *iface = NULL;

    COMLikeMath *ptr;

    try
    {
        ptr = new COMLikeMath;

        if (!ptr-&gt;QueryInterface(iid, iface))
        {
            ptr-&gt;Destroy();
            ptr = NULL;
        }
    }
    catch(...)
    {
        ptr = NULL;
    }

    return ptr != NULL;
}

COMLikeMath::COMLikeMath(void) : refCount(0)
{
    ::sprintf(myName, "COMLikeMath:0x%X", (int)this);
}

COMLikeMath::~COMLikeMath(void)
{
    std::cout &lt;&lt; "COMLikeMath is destroyed."
              &lt;&lt; std::endl;
}

///////////////////////////////////////////////////////
//  IBase implementation
///////////////////////////////////////////////////////

bool COMLikeMath::QueryInterface(const char *iid,
                                 IBase **iface)
{
    *iface = NULL;

    if (::strcmp(iid, "IDoMath") == 0)
        *iface = static_cast&lt;IDoMath*&gt;(this);
    else if (::strcmp(iid, "IBase") == 0)
        *iface = static_cast&lt;IDoMath*&gt;(this);
    else if (::strcmp(iid, "INamed") == 0)
        *iface = static_cast&lt;INamed*&gt;(this);

    if (*iface != NULL)
        refCount++;

    return *iface != NULL;
}

void COMLikeMath::Destroy(void)
{
    if (--refCount == 0)
        delete this;
}

///////////////////////////////////////////////////////
//  IDoMath implementation
///////////////////////////////////////////////////////

int COMLikeMath::Add(int x, int y)
{
    return x + y;
}

int COMLikeMath::Sub(int x, int y)
{
    return x - y;
}

int COMLikeMath::Mul(int x, int y)
{
    return x * y;
}

int COMLikeMath::Div(int x, int y)
{
    if (y != 0)
        return x / y;

    return 0;
}

///////////////////////////////////////////////////////
//  INamed implementation
///////////////////////////////////////////////////////

void COMLikeMath::Who(char *name, int len)
{
    int myNameLen = ::strlen(myName);

    len = (len &lt;= myNameLen ? len - 1: myNameLen);

    for (int i = 0; i &lt; len; i++)
        name[i] = myName[i];

    name[len] = '\0';
}

</pre>
</BODY>
</HTML>
