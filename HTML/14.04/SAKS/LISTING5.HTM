



<HTML><HEAD>

<TITLE>April 1996/The Column that Needs a Name/Listing 5</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4>
<A name="HEADING1">Listing 5: The decl parser with error recovery using<BR>exception handling</A></h4>


<pre>

//
// decl3.cpp - translate C++ declarations into English
//
// Copyright (C) 1996 by Dan Saks.
// May be copied for private, non-commercial use,
// provided this copyright notice remains intact.
// All other rights reserved.
//

#include &lt;iostream&gt;

#include "scanner.h"

//
// a bool type for compilers that don't have one
//
typedef int bool;
const int false = 0;
const int true = 1;

class parser
    {
public:
    parser(istream &amp;, ostream &amp;);
private:
    scanner input;
    ostream &amp;output;
    struct recoverable_error { };

    void error(const string &amp;);
    void must_be(token::category);
    string array_suffix();
    string cv_qualifier_seq();
    string declarator();
    string decl_specifier_seq();
    string direct_declarator();
    string function_suffix();
    string ptr_operator();
    string simple_declaration();

    parser(const parser &amp;);
    parser &amp;operator=(const parser &amp;);
    };

void parser::error(const string &amp;why)
    {
    output &lt;&lt; "error: " &lt;&lt; why &lt;&lt; '\n';
    input.reset();
    throw recoverable_error();
    }

//
// See Listing 4 for the other parser member functions
//

//
// parser =
//     { simple-declaration ";" } .
//
parser::parser(istream &amp;is, ostream &amp;os)
    : input(is), output(os)
    {
    for (;;)
        try
            {
            while (input.get().kind() != token::NO_MORE)
                {
                string s = simple_declaration();
                if (input.current().kind() != token::SEMICOLON)
                    error("';' expected");
                else
                    output &lt;&lt; s;
                }
            break;
            }
        catch (const recoverable_error &amp;re)
            {
            }
    }

int main()
    {
    parser declarations(cin, cout);
    return 0;
    }
</pre>
</body></html>
