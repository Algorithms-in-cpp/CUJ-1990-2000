



<HTML><HEAD>

<TITLE>April 1996/Shared Memories as Files/Listing 3</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4>
<A name="HEADING1">Listing 3: A "hello world" app that uses shared memory</A></h4>


<pre>

/*  protocol.h:  */
#include  &lt;stdio.h&gt;

#define  MSG_LEN  80

#define  NOP_OPCODE              0
#define  PRINT_OPCODE          1
#define  TERMINATE_OPCODE  2

typedef  struct  {
    int        opcode;
    char      message[MSG_LEN];
    int        result;
}  Protocol_td;

/*  server.c:  */

#include  &lt;stdio.h&gt;
#include  &lt;string.h&gt;  
#include  &lt;stdlib.h&gt;  

#include  "shm_pack.h"  
#include  "protocol.h"

int  process(Protocol_td  *pProtocolBlock,  SMEM  *smd)
{
    int  nchars_printed;  
    switch(pProtocolBlock-&gt;opcode)
    {
        case  PRINT_OPCODE  :  
            if  (pProtocolBlock-&gt;message[0]  !=  '\n')    
                nchars_printed  =  printf("Received:  &lt;%s&gt;\n", pProtocolBlock-&gt;message);
            else
                nchars_printed  =  printf("Received:  Hello  World!\n");  
            break;
        case  TERMINATE_OPCODE  :  
        default:  
            nchars_printed  =  -1;  
            break;
      }

    return  nchars_printed;
}

void  server(int  key)
{
    Protocol_td  ProtocolBlock;  
    SMEM  *smd;
    int    result  =  0;  

    memset(&amp;ProtocolBlock,  '\0',  sizeof(Protocol_td));  
    smd  =  shm_open(key,  "w");  
    shm_write(&amp;ProtocolBlock,  sizeof(Protocol_td),  1,  smd);  
    shm_close(smd);  

    smd  =  shm_open(key,"rp+");  
    while  (-1  !=  result)
    {
        shm_rewind(smd);  
        shm_read(&amp;ProtocolBlock,  sizeof(Protocol_td),  1,  smd);  

        if  (ProtocolBlock.opcode)  
        {            
            result  =  process(&amp;ProtocolBlock,  smd);    
            ProtocolBlock.result  =  result;  
            ProtocolBlock.opcode  =  0;  
            shm_rewind(smd);  
            shm_write(&amp;ProtocolBlock,  sizeof(Protocol_td),  1,  smd);
        }
    }      
    shm_close(smd);  
}

void  main(int  argc,  char  *argv[])  
{
    char  *ptr;  
    int    key;  

    if  ((argc  !=  2)  ||  (strncmp(argv[1],"-key=",5)  !=  0))
    {
        printf("Synopsis:  %s  -key=&lt;n&gt;  &amp;\n",argv[0]);  
        exit(0);  
    }

    ptr  =  strchr(argv[1],'=');  
    key  =  atoi(&amp;ptr[1]);  

    server(key);      
    sleep(1);  
    shm_delete(key);  
}

/*  client.c:  */

#include  &lt;stdio.h&gt;
#include  &lt;string.h&gt;  
#include  &lt;stdlib.h&gt;  

#include  "shm_pack.h"  
#include  "protocol.h"

void  client(int  key)
{
    Protocol_td  ProtocolBlock;  
    SMEM  *smd;

    ProtocolBlock.opcode  =  NOP_OPCODE;  
    smd  =  shm_open(key,  "rp+");  
    if  (!smd)  
    {
          printf("Cannot  connect  to  key  %d\n",  key);  
          exit(0);  
    }

    printf("Enter  a  message  and  press  ENTER\n");  
    printf("Enter  a  single  dot  '.'  and  press  ENTER  to  terminate\n");  

    while  (TERMINATE_OPCODE  !=  ProtocolBlock.opcode)
    {
        char  message[MSG_LEN];  

        fgets(message,  MSG_LEN,  stdin);  

        if  ('.'  ==  message[0])
            ProtocolBlock.opcode  =  TERMINATE_OPCODE;
        else
        {
            ProtocolBlock.opcode  =  PRINT_OPCODE;  
            strncpy(ProtocolBlock.message,  message,  MSG_LEN);  
        }
      
        shm_rewind(smd);  
        shm_write(&amp;ProtocolBlock,  sizeof(Protocol_td),  1,  smd);  
    }
    shm_close(smd);  
}

void  main(int  argc,  char  *argv[])  
{
    char  *ptr;  
    int    key;  

    if  ((argc  !=  2)  ||  (strncmp(argv[1],"-key=",5)  !=  0))
    {
        printf("Synopsis:  %s  -key=&lt;n&gt;  &amp;\n",argv[0]);  
        exit(0);  
    }

    ptr  =  strchr(argv[1],'=');  
    key  =  atoi(&amp;ptr[1]);  

    client(key);      
}

/* End of File */
</pre>
</body></html>
