



<HTML><HEAD>

<TITLE>April 1996/Standard C/C++/Listing 5</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4>
<A name="HEADING1">Listing 5: &lt;iterator&gt;, part 3</A></h4>


<pre>

        //  TEMPLATE  FUNCTION  value_type
template&lt;class  T,  class  Dist&gt;  inline
    T  *value_type(const  input_iterator&lt;T,  Dist&gt;&amp;)
    {return  ((T  *)0);  }
template&lt;class  T,  class  Dist&gt;  inline
    T  *value_type(const  forward_iterator&lt;T,  Dist&gt;&amp;)
    {return  ((T  *)0);  }
template&lt;class  T,  class  Dist&gt;  inline
    T  *value_type(const  bidirectional_iterator&lt;T,  Dist&gt;&amp;)
    {return  ((T  *)0);  }
template&lt;class  T,  class  Dist&gt;  inline
    T  *value_type(const  random_access_iterator&lt;T,  Dist&gt;&amp;)
    {return  ((T  *)0);  }
template&lt;class  T&gt;  inline
    T  *value_type(const  T  *)
    {return  ((T  *)0);  }

        //  TEMPLATE  FUNCTION  distance_type
template&lt;class  T,  class  Dist&gt;  inline
    Dist  *distance_type(const  input_iterator&lt;T,  Dist&gt;&amp;)
    {return  ((Dist  *)0);  }
template&lt;class  T,  class  Dist&gt;  inline
    Dist  *distance_type(const  forward_iterator&lt;T,  Dist&gt;&amp;)
    {return  ((Dist  *)0);  }
template&lt;class  T,  class  Dist&gt;  inline
    Dist  *distance_type(const  bidirectional_iterator&lt;T,  Dist&gt;&amp;)
    {return  ((Dist  *)0);  }
template&lt;class  T,  class  Dist&gt;  inline
    Dist  *distance_type(const  random_access_iterator&lt;T,  Dist&gt;&amp;)
    {return  ((Dist  *)0);  }
template&lt;class  T&gt;  inline
    ptrdiff_t  *distance_type(const  T  *)
    {return  ((ptrdiff_t  *)0);  }
//End of File
</pre>
</body></html>
