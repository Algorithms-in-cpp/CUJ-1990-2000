


<HTML>
<HEAD>

<TITLE>December 1992/Code Capsules</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocdec.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Code Capsules<A name="02B4_013A"><A name="02B4_013A"></font></h2><P>
<h3 align="center"><A name="02B4_0000"><A name="02B4_0000">Text Processing III: Substrings</h3><P>
<h3 align="center"><font color="#800000">Chuck Allison</font></h3><hr><blockquote><P>
<P><i><A name="02B4_0000"><A name="02B4_0000">Chuck Allison is a software architect for the Family History Department of the Church of Jesus Christ of Latter Day Saints Church Headquarters in Salt Lake City. He has a B.S. and M.S. in mathematics, has been programming since 1975, and teaching and developing in C since 1984. His current interest is object-oriented technology and education, and he is a member of X3J16, the ANSI C + + Standards Committee. Chuck can be reached on the Internet at allison @decus. org, or at (801)240-4510.</i></P><P>
Much of text processing concerns itself with substrings, that is, finding or extracting strings embedded within lines of text. The program <I>find1.c</I> (<A href="list1.htm">Listing 1</a>)
 prints all lines from a text file that contain a given string.<P>
Applying <I>find1</I> to its own source file with "search" as the search string <I>(argv[1])</I> gives the output<P>
<pre>char *search_str;
search_str= argv[l];
if (strstr(line,search_str))</pre>
<I>find1</I> calls the function <I>strstr</I> to determine if one string is a substring of another. <I>strstr(s1,s2)</I> returns a pointer to the first occurrence of <I>s2</I> in <I>s1</I>, if it exists, or <I>NULL</I> if it doesn't. Only exact matches succeed (so the line with the comment containing <I>Search</I> didn't print).<P>
To ignore case in the search, convert copies of the strings to the same case, as the program <I>find2. c</I> (<A href="list2.htm">Listing 2</a>)
 illustrates. Processing <I>find1. c</I> with <I>find2</I> now gives all occurrences of the search string, regardless of case:<P>
<pre>char *search_str;
return 1;  /* Search string required */
search_str= argv[1];
if (strstr(1ine,search_str))</pre>
Some compilers provide <I>strlwr</I>, a function not in the standard library. (It originated with UNIX). However, you can easily write it yourself with <I>tolower</I> as demonstrated in <A href="list3.htm">Listing 3</a>.
<P>
<h4><FONT COLOR="#000080"><A name="02B4_013B">Tokens<B><A name="02B4_013B"></B></FONT></h4></P>
Many programs are command driven. That is, they sequentially process lines of text representing user instructions. (This is how command interpreters like the MS-DOS and UNIX shells work, of course, and how the line-oriented text editors of yore worked, remember?) A program will parse each line into its components, usually called tokens. The library function <I>strtok</I> recognizes tokens as substrings scattered among separators (sometimes called break characters). It skips any leading separators, and then collects characters as a substring until another separator is encountered. The program in <A href="list4.htm">Listing 4</a>
extracts tokens by ignoring space and punctuation characters. <A href="fig1.htm">Figure 1</a>
contains sample input and <A href="fig2.htm">Figure 2</a>
contains output from <I>token1. c.</I><P>
The program <I>token1</I> first calls <I>strtok</I> with a pointer to the beginning of the line to be parsed. <I>strtok</I> inserts a null character directly into the string to delimit the first token (overwriting the space after the <I>s</I> in <I>This</I>). Then it sets its internal pointer to the character after that null character (the <I>i</I> in <I>is</I>), and returns a pointer to the beginning of the first token (the <I>T</I> in <I>This</I>), as illustrated in <A href="fig3.htm">Figure 3</a>.
<P>
When we call <I>strtok</I> with a <I>NULL</I> first argument, it picks up where it left off (the <I>i</I> in <I>is</I>). When it can no longer find any tokens, <I>strtok</I> itself returns <I>NULL</I>. Note that you can change the break set with each call to <I>strtok</I>. That makes this parsing scheme somewhat more flexible than using <I>sscanf</I>, although inserting null bytes into the string can be awkward in some instances. (See the Code Capsule "Text Processing I" in <I>CUJ</I> October 1992, for <I>sscanf</I> examples). <P>
To ignore digits as well as space and punctuation, you merely add them to the break-set string. It doesn't take long, however, to realize that break sets can become quite unwieldy. It is often easier to specify the characters that comprise tokens rather than those that separate them. <A href="list5.htm">Listing 5</a>
introduces such a function, <I>strtokf</I>, similar to <I>strtok</I>, except that it recognizes tokens via a user-supplied function that identifies acceptable characters. The program in <A href="list6.htm">Listing 6</a>
uses <I>strtokf</I> to extract alphabetic tokens from the same input as in the previous example. This time the output is:<P>
<pre>This
is
just
a
test
Good
bye</pre>
<h4><FONT COLOR="#000080"><A name="02B4_013C">Parsing Delimited Input<A name="02B4_013C"></FONT></h4></P>
Another common parsing practice is to locate specific delimiting characters in a string. (This is especially useful for parsing filenames.) The standard library provides this capability via the two functions<P>
<pre>char *strchr(char *s, char c);
char *strrchr(char *s, char c);</pre>
<I>strchr</I> returns a pointer to the first occurrence of <I>c</I> in <I>s</I> and <I>strrchr</I> returns a pointer to the last occurrence (the extra <I>r</I> in its name signals that it searches from the rightmost or rearmost). Both functions return <I>NULL</I> if the character is not found. The program in <A href="list7.htm">Listing 7</a>
uses <I>strchr</I> to extract fields separated by commas (see <A href="fig4.htm">Figure 4</a>
and <A href="fig5.htm">Figure 5</a>
for the input and output, respectively).<P>
<I>strchr</I> is particularly useful in cases like this where the delimiters can occur adjacent to one another. For example, the input line <P>
<pre>,,,</pre>
would be passed over by <I>strtok</I> as a stream of separators.<P>

<h4><a href="../../../source/1992/dec92/allison.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
