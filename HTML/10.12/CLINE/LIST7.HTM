<HTML><HEAD>
<TITLE>December 1992/Build Applications Faster with State Transition Automatons/Listing 7</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 7 <B><I></B>DFAFCNS.C</I></A></h4>
<pre>/* Collection of functions to support the DFA     */

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;ctype.h&gt;
#include "dfa.h"

/****************************************************/
/* The first few routines are support routines for  */
/*      the state machine.                          */
/* The second set are default target routines       */
/* The third set are default action routines        */
/****************************************************/

/****************************************************/
/* STATE-MACHINE-SPECIFIC SUPPORT ROUTINES          */
/****************************************************/

// Init the state machine object so tokenizer can be
//      extracted. Setup a DFA_CLASS to allow tokenizer
//  to run without the state machine.
void InitStateMachine(
   DFA_CLASS *p,       // user class to init
   void *statetbl,     // user's state table
   char *tokenizer,    // user-defined tokenizer
   FILE *infile,       // input file
   char *tokelims)     // token delimiters
{
   // Set the user's state table address
   p-&gt;tbl = statetbl;

   // Set the input file
   p-&gt;infile = infile;

   // Set default, or user's override, as tokenizer
   if (tokenizer == NULL) {
      p-&gt;get_token = get_token;
   }
   else {
      p-&gt;get_token = tokenizer;
   }

   // Set the tokenizer's delimiters
   p-&gt;delim = tokelims;

   // Set the internal working variables
   p-&gt;movest = move;   // state transition fcn
   p-&gt;ndx = 0;         // initial state
   p-&gt;oflag = 0;       // init to clear

   memset(p-&gt;workbuf, 0, MAXBUFLEN);
   p-&gt;wp = &amp;(p-&gt;workbuf[0]);
   p-&gt;cp = 0;

   return;
}

// Update state table index as the machine moves
//      to the next state.
short move(
   DFA_CLASS *o,       // ptr to current dfa
   short value)        // GOOD or BAD to next state
{
   CURRENT_STATE = value ? GOODSTATE : BADSTATE;
   return(CURRENT_STATE);
}

/***************************/
/* DEFAULT TARGET ROUTINES */
/***************************/
// Check if end of buffer (record) has been reached
short isEOF(
   char *token)
{
    return(token[0] == '\0');
}

// Check if end of buffer (record) has been reached
short isEOR(
   char *token)
{
    return(token[0] == EOR);
}

// Check if a Field Separator has been found

short isFS(
   char *token)
{
    return(token[0] == FS);
}

// Check if a Group Separator has been found
short isGS(
   char *token)
{
    return(token[0] == GS);
}

// Check if a Left Brace has been found
short isLBR(
   char *token)
{
    return(token[0] == LBR);
}

// Check if a Group Separator has been found
short isRBR(
   char *token)
{
    return(token[0] == RBR);
}

/***************************/
/* DEFAULT ACTION ROUTINES */
/***************************/

// Print out an error message
short errmsg(
   char *token)
{
    fprintf(stderr,
       "Error in state machine for token '%s'\n",
          token);
    return(ERR);
}

// Function that does nothing;
// Allows moving to next state
short skip(
   char *token)
{
    IGNORE(token);
    return(1);
}
// Block tokenizer so same token can be reused
short block(
   char *token)
{
    IGNORE(token);
    need_token = NO;
    return(1);
}
/* End of File */</pre>

</BODY>
</HTML>
