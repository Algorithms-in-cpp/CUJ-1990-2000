


<HTML>
<HEAD>

<TITLE>December 1992/Build Applications Faster with State Transition Automatons</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocdec.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">Build Applications Faster with State Transition Automatons<A name="02A6_0136"><A name="02A6_0136"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="02A6_0000"><A name="02A6_0000">Alan Cline</font></h3><hr><blockquote><P>
<P><i><A name="02A6_0000"><A name="02A6_0000">Alan Cline has a B.S. in mathematics and an M.S. in physics. His 19 years experience includes systems design, telecommunications, applications development, and project management. He is currently working in object-oriented design and GUI projects. He can be reached at his systems consulting company, Carolla Development in Columbus, Ohio (614-764-8923).</i></P><P>
<h4><FONT COLOR="#000080"><A name="02A6_0137">Introduction<A name="02A6_0137"></FONT></h4></P>
Software development has always been a tedious and time-consuming task, situated somewhere between an art and a science on the productivity spectrum. In many cases programmers can shorten development time and convert abstract designs into workable code more concisely, almost mechanically, by using state transitional automatons, especially if they "layer" their automations in a way that reflects the natural layers of abstraction within the problem.<P>
The technique described in this article helps the programmer design and code an application using a language-independent and easy-to-follow, step-by-step method based on state transition theory. Programmers, who can describe their problem solution as a series of independent states and transitions, can better organize their data and functions. Each design step of the method follows from the preceding one. The application is easily maintainable because it is composed of small, reusuable modules, and often only header files need to be changed.<P>
This article will show how to develop applications with the the usual state transition theory and explain the problems encountered. The initial examples solve the problem at a very low level of abstraction. The closing section shows how the solution can be improved by constructing a separate automation that operates at a higher level of abstraction. Each point is illustrated with specific C source code examples, and the code for the automaton and its support routines are shown at the end.<P>
<h4><FONT COLOR="#000080"><A name="02A6_0138">State Transition Method<A name="02A6_0138"></FONT></h4></P>
Historically, state transition theory has been most commonly applied to parsing applications. I will use a simple parsing example to illustrate the following five steps of developing a state transition application.<P>
1.     Find a parsing rule for the input.<P>
2.     Draw a state transition diagram.<P>
3.     Construct a table of states and target tokens (Sparse Table).<P>
4.     Normalize the Sparse Table into a State Transition Table.<P>
5.     Optimize and generalize the State Transition Table to improve efficiency for implementation.<P>
I'll illustrate the method with the somewhat trivial example of a routine to parse and validate a standard MS-DOS filename. Later I show how the same technique can be modified to handle more diverse applications.<P>
<h4><FONT COLOR="#000080"><A name="02A6_0139">1. Find a Parsing Rule<A name="02A6_0139"></FONT></h4></P>
Define an MS-DOS filename as a letter followed by zero or more alphanumeric characters (up to a limit of seven characters), followed by an optional period or dot, followed by zero to three alphanumeric characters.<P>
The parsing rule is written as a series of single-character tokens:<P>
<pre>a x* [.x [x [x] ] ] {e}</pre>
using the notation:<P>
<pre><I>a</I>   := any alphabetic character A-Z or a-z;
<I>x</I>   := any alphanumeric character A-Z, a-z, 0-9;
*   := zero or more occurrences of the preceding token;
+   := one or more occurrences of the preceding token;
[ ] := encloses optional tokens;
{e} := termination of input, or terminating character.</pre>
The possible values of <I>a</I> and <I>x</I>, the dot and the <I>terminator</I>, comprise the alphabet of our input.<P>
According to the parsing rule, if a dot is present, at least one alphanumeric character must follow. Under the parsing rule <I>freddy.dat</I>, <I>R2D2.rbt</I>, <I>foo.bar</I> and just <I>m</I> are all acceptable filenames.<P>
Note that no information is contained in the parsing rule about how many <I>x</I>'s are permitted. This information is handled better in the transition from state to state.<P>
<h4><FONT COLOR="#000080"><A name="02A6_013A">2. Draw a State Transition Diagram<A name="02A6_013A"></FONT></h4></P>
The parsing rule is analyzed syntactically, that is, letter by letter, to produce a State Transition Diagram (shown in <A href="fig1.htm">Figure 1</a>)
.<P>
Starting at initial state <I>A</I>, the state machine jumps to state <I>B</I> only when an alphabetic character <I>a</I> is read. The state machine gets another character and cycles back to state <I>B</I> if the character was a dot, or to state <I>C</I> if it was an alphanumeric <I>x</I>, or jumps out if no more input is encountered (or the <I>terminator</I> is found). As more input characters are read, the diagram's paths are traversed accordingly.<P>
A path of all possible allowable states, representing all possible allowable filenames, can be traced along the routes from the initial state to the final <I>OUT</I> state. If an input occurs such that no path is available, then the input stream contains as error.<P>
<h4><FONT COLOR="#000080"><A name="02A6_013B">State Transition Rules<A name="02A6_013B"></FONT></h4></P>
To build a proper State Transition Diagram (STD), the following rules must be obeyed:<P>
Rule 1: Each path from a node must be unique (deterministic).<P>
Rule 2: All possible valid paths must be shown; paths not shown represent input parsing errors.<P>
Rule 3: Each transition must be determinable by a Boolean test.<P>
I find it easiest to build STDs by first creating a "backbone" from the longest path and then adding the optional paths and variations. <A href="fig1.htm">Figure 1</a>
shows a backbone path of <I>a x .x x x</I> {<FONT FACE="Symbol">e</FONT>} from initial to final state. I based all other paths in the STD on this backbone. Check the STD against the rules above. Each transition occurs as the result of an unambiguous test of an input character; all possible valid filenames are represented (invalid filenames are blocked by being omitted from any path); and each node connection results from a unique Boolean test for the target character, i.e., the proper member of the alphabet is input at the proper time.<P>
<h4><FONT COLOR="#000080"><A name="02A6_013C">3. Build the Sparse Table<A name="02A6_013C"></FONT></h4></P>
To represent the states and transitional flow as a table, chart the token alphabet against the possible states. Each position in the table represents the next state that the input token would produce. For the MS-DOS filename example, the STD yields the sparse table in <A href="tab1.htm">Table 1</a>.
<P>
From the table, the state machine jumps from state <I>A</I> only to state <I>B</I>, only if an alphabetic token <I>a</I> is received. However, state <I>B</I> can transition to states <I>B</I>, <I>C</I>, or <I>OUT</I>, if the token was <I>x</I>, dot (.), or {<FONT FACE="Symbol">e</FONT>}, respectively. These and all other paths of the STD in <A href="fig1.htm">Figure 1</a>
are reflected in the sparse table of <A href="tab1.htm">Table 1</a>.
<P>
<h4><FONT COLOR="#000080"><A name="02A6_013D">4. Normalize the Sparse Table<A name="02A6_013D"></FONT></h4></P>
Each state of the sparse table may precede one or more states depending on the token received. Each jumped-to state can be treated as a substate of the jumped-from state. In other words, state <I>A</I> has one substate (<I>B</I>); state <I>B</I> has three substates (<I>B</I>, <I>C</I>, and <I>OUT</I>); state <I>E</I> has two substates (<I>F</I> and <I>OUT</I>), etc.<P>
Each state has an associated target token, a substate to jump to if the received token matches the target token (<I>True</I> transition), and a substate to jump to if the received token does not match (<I>False</I> transition). With each substate transition, an action can be performed on that token. In <A href="tab2.htm">Table 2</a>,
 the sparse table has been rearranged to show the substates and the target to form a "normalized" sparse table.<P>
The path of state transitions always starts at substate zero and progresses through valid states until reaching <I>OUT</I>, or an error, which is indicated in the normalized sparse table as state <I>ERR</I>. For example, only an alpha token is allowed from state <I>A</I>, substate zero. If a numeral is received, the input is unacceptable and no further state transitions can take place.<P>
<h4><FONT COLOR="#000080"><A name="02A6_013E">Build the State Transition Table<A name="02A6_013E"></FONT></h4></P>
The state machine, or Deterministic Finite Automaton (DFA), performs actions at each state transition. An action is associated with each of the <I>True</I> and <I>False</I> transitions. The actions are performed typically on the token last received. The DFA also contains a routine to provide tokens to be tested, and perhaps the testing routines as well. The DFA will be discussed in more detail later.<P>
At this point in the application development process, the programmer should associate token-consuming functions with the particular states. For our example, assume four routines that comprise a filename validation program:<P>
<UL><li><I>pushchar</I>: Concatenate the last token into the work buffer.</li>
<li><I></I>savetoken<I>: Move the concatenated tokens of the work buffer into an output area, considering it fully validated. Reset the buffer for new input.</I></li>
<li><I></I>errmsg<I>: Output an error message describing an invalid filename.</I></li>
<li><I></I>skip<I>: Jump to next state without getting a new token.</I></li></UL>
Assume the DFA contains a routine to remove one character from the input (call it "tokenizer"), a routine that jumps from state to state ("movestate"), and any routines needed to check if a received token is the target token.<P>
Add the token-consuming functions to the normalized sparse table to get the state transition table (STT) of <A href="tab3.htm">Table 3</a>.
 The error message function <I>errmsg</I> is associated with each <I>ERR</I> state, and <I>skip</I> is called each time the current token must be tested for a different state.<P>
<h4><FONT COLOR="#000080"><A name="02A6_013F">5. Optimize and Generalize<A name="02A6_013F"></FONT></h4></P>
<A href="tab3.htm">Table 3</a>
shows that substates <I>6</I><I>, </I><I>8</I>, and <I>9</I> have the same target, the same <I>True</I> and <I>False</I> transition states, and the same <I>True</I> and <I>False</I> routines. These substates are identical, and can be optimized into a single transition substate. The new optimized STT is shown in <A href="tab4.htm">Table 4</a>.
<P>
Substates <I>3</I> and <I>6</I> are not identical, and cannot be removed, because they have different Action routines. The Boolean nature of the STD and target tests tends to grow the number of substates in the STT's exponentially. However, because of redundancy in the tables, and allowing generalizations among routines, optimized STT's reduce to a manageable size.<P>
Optimizing and generalizing STT's are common sense, a matter of searching for duplicates and eliminating them. Optimized and unoptimized state tables are topologically the same, as would be expected.<P>
<h4><FONT COLOR="#000080"><A name="02A6_0140">Implementation<A name="02A6_0140"></FONT></h4></P>
In C, the STT can be a header file, a text file read in at runtime, explicit in the code, or linked with the DFA. The names of the targets, <I>True</I> routines, and <I>False</I> routines become pointers to functions that the DFA will evoke when it sees the proper substate. The next example illustrates these details.<P>
<h4><FONT COLOR="#000080"><A name="02A6_0141">Further Example: Restricted MS-DOS Pathname<A name="02A6_0141"></FONT></h4></P>
A more complicated example shows some of the other details that affect application development. Suppose you need to parse a string into a validated drive letter, MS-DOS path segment(s), filename, and file extension. The file path is the concatenation of one or more path segments, and occurs between the drive colon and the filename. A path segment is the concatenation of letters delimited by backslashes. The pathname is called "restricted" because MS-DOS allows more flexibility than shown in the parsing rule, but the rule is sufficient as an example. In the rule, a disk drive letter followed by a colon is required, and a backslash as part of the filename is required. Legal restricted MS-DOS filenames are <I>a:\sample3.dat</I><I>, </I><I>c:\doc\article.tex</I> and <I>c:\doc\tbls\stt3.tbl</I><I>.</I><P>
The Parsing Rule for restricted MS-DOS pathnames is:<P>
<pre>a: (\ a x*)+ [.x [ x [ x ] ] ] {<FONT FACE="Symbol">e</FONT>}</pre>
using the notation as before.<P>
<h4><FONT COLOR="#000080"><A name="02A6_0142">Tables and Diagrams for Restricted MS-DOS Pathname<A name="02A6_0142"></FONT></h4></P>
The State Transition Diagram for the Parsing rule is shown in <A href="fig2.htm">Figure 2</a>.
 It is similar to <A href="fig1.htm">Figure 1</a>
with one important exception: each time a backslash is encountered, the state machine jumps to state <I>D</I> to begin a new path segment or the filename. When the dot is seen, the state machine moves on; no lookahead is required to know if the machine is parsing a path segment or a filename as it processes.<P>
With the addition of the backslash to our alphabet, and a few more states, we can parse a much more complicated string. The sparse table for the restricted pathname (and <A href="fig2.htm">Figure 2</a>)
 is shown in <A href="tab5.htm">Table 5</a>.
<P>
The State Transition Table, shown in <A href="tab6.htm">Table 6</a>,
 uses the same action routines as <A href="tab3.htm">Table 3</a>,
 with the addition of:<P>
<UL><li><I></I>savedrive<I></I>:<I> Copy the work buffer to the drive name variable.</I></li>
<li><I></I>reset<I></I>:<I> Clear the output buffer and reset to beginning.</I></li>
<li><I></I>appendpath<I></I>:<I> Append the current string of tokens to the path.</I></li>
<li><I></I>savefile<I></I>:<I> Copy the work buffer to the filename variable.</I></li>
<li><I></I>saveext<I></I>:<I> Copy the work buffer to the file extension variable.</I></li>
<li><I></I>cleanup<I></I>:<I> Display the parsed input.</I></li></UL>
(The previous routine "savetoken" was replaced with the more specific save routines.)<P>
Substates <I>10</I> and <I>12</I> are identical and can be optimized away, but substate <I>7</I> uses a different action routine and must remain.<P>
<h4><FONT COLOR="#000080"><A name="02A6_0143">Calling the DFA from the Application<A name="02A6_0143"></FONT></h4></P>
The state table is implemented as a function pointer table <I>dostbl1.h</I> (<A href="list1.htm">Listing 1</a>)
, and the application calling the state machine that uses the table is shown in <I>syndos.c</I> (<A href="list2.htm">Listing 2</a>)
.<P>
I declared a state machine <I>syndos_dfa</I> of type <I>DFA_CLASS</I>, which is defined in <I>dfa.h</I> (<A href="list5.htm">Listing 5</a>)
. Once the input file is open, I loop through each record of the file, parsing and storing the validated MS-DOS filenames. <I>InitStateMachine</I> must be passed the address of the particular instance of the DFA, the address of the state table, the tokenizer function pointer, the input file pointer, and the string of delimiters the tokenizer will use. In this case, <I>NULL</I> is passed so the default tokenizer <I>get_token</I> will be used.<P>
The automaton <I>StateMachine</I> is passed only the address of the DFA declared. The function <I>StateMachine</I> will return <I>ERR</I> or <I>OUT</I>, as defined in the state transition table.<P>
The tokenizer <I>get_token</I> is shown below the main program, along with each of the target and action functions.<P>
<h4><FONT COLOR="#000080"><A name="02A6_0144">More Powerful Techniques<A name="02A6_0144"></FONT></h4></P>
The state transition application can be more powerful if the target and action functions are abstracted up to the semantic level. Certain ambiguity problems inherent in the syntactical level also disappear. Recasting the MS-DOS filename parsing rule semantically yields<P>
<pre>[drive] [root] [path]* fname [ext]</pre>
where<P>
<pre>drive := a ':'
root  : = '\'
path  := ax* '\'
fname := ax*
ext   := .x [x [x]]
{e}   := '\n'</pre>
This parsing rule is equivalent to the syntactical one used earlier, but allows the target and action routines to be more substantial. Fewer states result in a more efficient application.<P>
The state transition diagram for the semantic case is shown in <A href="fig3.htm">Figure 3</a>,
 and its corresponding sparse table in <A href="tab7.htm">Table 7</a>.
 The state transition table and header implementation <I>dostbl2.h</I> is shown in <A href="tab8.htm">Table 8</a>
and <A href="list3.htm">Listing 3</a>,
 respectively.<P>
The program, <I>semdos.c</I> (<A href="list4.htm">Listing 4</a>)
, which calls the state machine, is the same as the one used for the syntactic case (<A href="list2.htm">Listing 2</a>)
, with the exception of the DFA variable and the state table name used in <I>InitStateMachine</I> and <I>StateMachine</I>. Different target and action functions are included, of course.<P>
<h4><FONT COLOR="#000080"><A name="02A6_0145">Implementing the State Machine<A name="02A6_0145"></FONT></h4></P>
The state machine and constants are defined in <I>dfa.h</I> (<A href="list5.htm">Listing 5</a>)
. The state machine source code is shown in <I>dfa.c</I> (<A href="list6.htm">Listing 6</a>)
. The state machine's standard set of target functions and action functions are shown in <I>dfafcns.c</I> (<A href="list7.htm">Listing 7</a>)
.<P>
A sample input file and its corresponding output is shown in <A href="fig4.htm">Figure 4</a>.
<P>
<h4><FONT COLOR="#000080"><A name="02A6_0146">Conclusion<A name="02A6_0146"></FONT></h4></P>
Usually a state machine application can be written by specifying a group of small target and action routines, perhaps a customized tokenizer, and initializing and invoking the state machine. Application development using this technique is methodical, involves writing only small routines, and is easily modifiable within the state transition table. Using this technique, I have implemented applications in half the time of other techniques. State machine technique, or finite state automatons, are especially well-suited to applications that involve data-flow tranformations (e.g, parsers or data converters), or ones where control flow is tightly sequenced (e.g., transaction processing applications).<P>
Variations on the technique, e.g., non-Boolean testing and selective searching, yield more power and speed for application development. Even more power can be coaxed from the DFA by tweaking some of the built-in parameters, but those are topics for a different article.<P>

<h4><a href="../../../source/1992/dec92/cline.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
