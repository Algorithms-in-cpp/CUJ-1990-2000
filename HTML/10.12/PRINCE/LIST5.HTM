<HTML><HEAD>
<TITLE>December 1992/Tuning Up Math Functions/Listing 5</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 5 <B></B>pow<B><I></B> using the </I><B></B>_Dtest<B><I></B> macro to isolate the special cases</A></I></h4>
<pre>/* pow function */
#include "xmath.h"
double logt();
#define log(x) logt(x)

double (pow) (double x, double y) {     /* compute x^y */
   double yi, yx = y, z;
   int n, xexp, zexp, neg = 0, errx = _Dtest(x), inc;
#define shuge HUGE_EXP
#define dhuge (double)HUGE_EXP
#define ln2 0.69314718055994530942
   static const double rthalf = 0.70710678118654752440;
   const int erry = _Dtest(yx);
   long x0, y0 = ((unsigned long *) &amp;rthalf)[_D0];
   _Dvar xx;

   xexp = 0;
   if (x &lt; DBL_MIN) {
   /* shift up into normalized range */
      x *= 1 / DBL_EPSILON;
      xexp = -DBL_MANT_DIG;
   }
   xx._D = x;
   xexp += ((xx._W[_DO] &amp;_DMASK) &gt;&gt; _DOFF) - _DBIAS;
   if (0 &lt;= errx || 0 &lt; erry) {
      /* x == 0, INF, NAN; y == INF, NAN */
      if (errx == NAN || erry == NAN)
         z = errx == NAN ? x : y, errx = NAN;
      else if (erry == INF)
         if (errx != INF)    /* 0^INF, finite^INF */
            errx = xexp &lt;= 0 ? (y &lt; 0 ? INF : 0) : (x == 1 || x == -1) ? 
               NAN : (y &lt; 0 ? 0 : INF);
         else if (y == 0.0)
            return (1.0); /* x^0, x not a NaN */
         else if (errx == INF) {
            /* INF^finite */
            errx = y &lt; 0.0 ? 0 : INF;
            neg = x &lt; 0 &amp;&amp; erry == 0 &amp;&amp; ((int) y &amp; 1);
         } else              /* 0^finite */
            errx = y &lt; 0 0 ? INF : 0;
      if (errx == 0)
         return (0.0);
      else if (errx == INF) { /* return -INF or INF */
         errno = ERANGE;
         return x;
      } else {                /* return NaN */
         errno = EDOM;
         return (z);
      }
   }
   neg = 0;
   if (0.0 &gt;= x) {
      x = -x, neg = (int) y &amp; 1;
      if (y != (int) y) {    /* negative^fractional */
         y = (int) y;
         /* assume it's a small error */
         errno = EDOM;
      }
   }
   /* On some architectures, inc can be obtained
    * efficiently from "&lt;" but this was the fastest
    * version on HP720 */
   xx._D = x;
   xexp -= inc = (unsigned long)
      ((x0 [_ = xx._W[_D0] &amp; ~_DMASK |
         (_DBIAS &lt;&lt; _DOFF)) - y0) &gt;&gt; 31;
   xx._W[_D0] = x0 + (inc &lt;&lt; _DOFF);
   /* if xx &lt; sqrt(1/2) shift up by factor 2 */
   x = xx._D;
   n = 0, yx = 0;
   if (y &lt;= -dhuge)
      zexp = xexp &lt; 0 ? shuge : xexp == 0 ? 0 : -shuge;
   else if (dhuge &lt;= y)
      zexp = xexp &lt; 0 ? -shuge : xexp == 0 ? 0 : shuge;
   else {
      /* y*log2(x) may be reasonable */
      double dexp;
      long zl;

      /* Form yx = y*xexp-zl carefully */
      yi = (2 &lt;&lt; 16) / DBL_EPSILON;
      yi = y &gt; 0 ? (y + yi) - yi : yi - (yi - y);
      dexp = xexp;
      yi = ((yi * dexp - (zl = y * dexp)) + (y - yi) *
         dexp) * ln2;
      zexp = zl &lt;= -shuge ? -shuge : zl &lt; shuge ?
         zl : shuge;
      if ((n = (int) y) &gt; SAFE_EXP || n &lt; -SAFE_EXP)
         n = 0;
   }
   {                           /* compute z = xfrac^n *
                           * 2^yx * 2^zexp */
      yx = yi + log(x) * (y - n);
      if (n &lt; 0)
         n = -n;
      /* Z *= xfrac^n */
      z = (n &amp; 1) ? x : 1.0;
      for (yi = x; n &gt; 1; z *= yi)   /* scale by x^2^n */
         do
             yi *= yi;
         while (((n &gt;&gt;= 1) &amp; 1) == 0);
      if (0 &lt;= _Exp(&amp;yx, zexp)) {     /* 2^yx*2^zexp */
         errno = ERANGE;   /* underflow or overflow */
         z = yx;
      } else
         /* either n==0 or there is no chance of
          * under/overflow */
         yi = yx;
         z = y &lt; 0 ? yi / z : z * yi;
      /* don't invert and multiply */
      return (neg ? -z : z);
   }
}
/* End of File */
</pre>
</BODY>
</HTML>
