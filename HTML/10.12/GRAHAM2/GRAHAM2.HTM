


<HTML>
<HEAD>

<TITLE>December 1992/An Easy Road to Windows?</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocdec.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   User Reports</FONT></H2>

<hr><h2 align="center"><font color="#800000">An Easy Road to Windows?<A name="02BC_0142"><A name="02BC_0142"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="02BC_0000"><A name="02BC_0000">Steven K. Graham</font></h3><hr><blockquote><P>
<P><i><A name="02BC_0000"><A name="02BC_0000">Steven K. Graham has worked for Hewlett-Packard, served on the Faculty at UMKC, and is currently a Senior Engineer with CSI.</i></P><P>
WinDosIO 2.0, from Graubert-Cervone Software (and one of this month's C Users' Group volumes), provides a shareware dynamic link library (DLL) that hides many of the details of manipulating Microsoft Windows behind a familiar mask. When properly compiled and linked, some C programs can be transferred from MS-DOS to Windows without changing a single line of code. WinDosIO version 2.0 provides over 200 functions for standard terminal-style I/O and Borland/Microsoft graphics under Microsoft Windows 3.0 and 3.1, along with an online user manual, a reference guide, and several example programs. WindosIO must be used with a compiler that includes the Windows Software Development Toolkit. The simpler coding and the possibility of easy ports from MS-DOS to Windows make WinDosIO appealing, particularly since the full Windows API is always available.<P>
<h4><FONT COLOR="#000080"><A name="02BC_0143">An Overview of Functionality<A name="02BC_0143"></FONT></h4></P>
WinDosIO's strength is the large number of functions it supports. Not once did I encounter a function that I had used in a test program that wasn't supported by WinDosIO. Functions provide access to colors, pixels, coordinates, graphics figures, fonts, and text. The few functions listed later, from the first few pages of the reference manual, may give the flavor of the extent of operations provided.<P>
<h4><FONT COLOR="#000080"><A name="02BC_0144">Conditions<A name="02BC_0144"></FONT></h4></P>
The author, Jeff Graubert-Cervone, provides WinDosIO as "FreeWare" and states that "Everything on this disk can be given away for free." However, applications that use the WinDosIO DLL include a shareware message presented in an initial window. The message indicates that programs using WinDosIO can be distributed free, but may not be sold unless the developer has obtained a key generator and password from Graubert-Cervone Software (which will allow them to remove the message). Developers can obtain a key generator, password, update notices, and support for $69 from Graubert-Cervone Software, 5801 N. Sheridan Road, Suite #20B, Chicago, IL 60660-3811; CIS: [70761,2707]; Prodigy: WPJX24A.<P>
<h4><FONT COLOR="#000080"><A name="02BC_0145">WinDosIO Files and Installation<A name="02BC_0145"></FONT></h4></P>
WinDosIO v2.0 contains the following files:<P>
<UL><li><I>using.doc</I> &#151; a user guide that describes WinDosIO 2.0 and discusses the example programs provided.</li>
<li><I>reference.doc</I> &#151; a reference manual that describes the C functions provided by WinDosIO (and prototyped in <I>windosio.h</I>). It includes sections on WinDosIO errors, TermIO styles, and notification messages.</li>
<li><I>exampl1.c</I> through <I>exampl7.c</I>, example programs illustrating WinDosIO.</li>
<li><I>windosio.dll</I>, the dynamic link library that contains all the functions.</li>
<li><I>windosio.lib</I>, the import library that is linked with your code.</li>
<li><I>windosio.h</I>, a header file to be included in C and C++ modules which use WinDosIO.</li>
<li><I>testdos</I>, a makefile that will build the examples (if everything is setup correctly).</li>
<li><I>read.me</I>, a very short description of WinDosIO and its components.</li></UL>
Despite the 70 or so pages of documentation in the online user guide and reference manual, there are some crucial omissions. First, there are no installation instructions. Working with Borland's C+ + 3.0, and Windows 3.1, I began by creating a <I>C:\windosio</I> directory and copying all the files into it. However, I found a number of additional steps are necessary that are not documented. The <I>testdos</I> makefile expects the example programs to be used with two subdirectories, <I>src</I> and <I>obj</I>, for the source and object files, respectively. The include file <I>windosio.h</I> needs to be somewhere the compiler can find it (perhaps simplest is copying it to the include directory), and the DLL has to be somewhere Windows can find it, such as the <I>\WINDOWS\SYSTEM</I> subdirectory. Additionally, the online documentation provides no information regarding necessary compilation and linking options. Information for the subdirectories and compilation and linking has to be extracted from the makefile. See the following section on the "Hello, World" program for options used for the examples.<P>
To use WinDosIO, simply add the include file, <I>WinDosIO.h,</I> to your program. You may need to remove some existing include files, in particular: <I>stdio.h, conio.h</I>,<I> graphics.h (graph.h)</I>. All functions in the DLL are <I>far</I> and all pointers must also be <I>far</I>, compiling with the large memory model. This shouldn't be a problem, but for other memory models the prototypes in <I>windosio.h</I> are necessary. Jeff Graubert-Cervone, the author, warns that "This only leaves the problem of arguments that cannot be prototyped such as the second and subsequent arguments in <I>printf</I> and <I>scanf</I>. MAKE SURE YOU EITHER DECLARE ANY POINTERS USED AS <I>FAR</I> OR CAST THEM AS <I>FAR</I>. There is no way the compiler can warn you about this problem." Another suggestion from Mr. Graubert-Cervone was that the large model should be used for development, followed by a switch to a more efficient model (if needed) later in the cycle.<P>
<h4><FONT COLOR="#000080"><A name="02BC_0146">A Familiar Example<A name="02BC_0146"></FONT></h4></P>
A familiar example, the "Hello, World" program is included with WinDosIO, as <I>exampl2.c.</I> The code contrasts markedly with other versions for Windows. (The <I>whello.cpp</I> example Borland includes with their compiler runs 273 lines.) The program statements were<P>
<pre>#include &lt;WinDosIO.h&gt;

main()
{
   printf("Hello, Windows\n");
   getch();
   return 0;
}</pre>
After some initial difficulties with the makefile, this program ran fine under Windows, creating a <I>termI0</I> window, writing the string, and then waiting for a keystroke. The window could be moved, maximized, minimized, resized, and closed. To test the claim that MS-DOS programs could run without change, I removed the line<P>
<pre>   #include &lt;WinDosIO.h&gt;</pre>
and replaced it with<P>
<pre>   #include &lt;stdio.h&gt;</pre>
After the change, the program ran under both MS-DOS and Windows, depending on the compiler and link options selected. The options used for Windows were<P>
<pre> bcc -ml -Ihdr -nobj/ -c -w -y -v src/exampl2.c</pre>
and<P>
<pre> tlink /Tw /c /C /v /l @exampl2.mln</pre>
where <I>exampl2.mln</I> contained:<P>
<pre> c0wM obj\windosio.obj obj\exampl2.obj
 exampl2.exe,exampl2.map
 windosio cwM cM import
 exampl2.def</pre>
and <I>exampl2.def</I> contained:<P>
<pre> NAME  Example2
 DESCRIPTION  'Hello, World'
 EXETYPE  WINDOWS
 CODE  PRELOAD MOVEABLE DISCARDABLE
 DATA  PRELOAD MOVEABLE
 HEAPSIZE  2048
 STACKSIZE  16000</pre>
When <I>stdio.h</I> was included rather than <I>WinDosIO.h</I>, it was necessary to compile the program under the large memory model for it to work under Windows. The <I>printf</I> function is supplied by the WinDosIO DLL, and is always <I>far</I> (a four-byte address). <I>WinDosIO.h</I> includes appropriate prototypes, while <I>stdio.h</I> does not.<P>
<h4><FONT COLOR="#000080"><A name="02BC_0147">Some Additional Testing<A name="02BC_0147"></FONT></h4></P>
Printing "Hello, World" doesn't constitute much of a test. The example files provided with WinDosIO ran, not surprisingly. But there was a quirk or two. When maximizing a <I>termIO</I> window, the black background remained at its original size, with a band of white background surrounding it. When I moved a simple example from a color monitor running Windows 3.1 to a monochrome VGA monitor with Windows 3.0 (without recompiling) one of the buttons disappeared, but otherwise the program continued to work.<P>
In programs designed for MS-DOS, it isn't unusual for there to be command-line arguments (<I>argc</I> and <I>argv</I>). There is a provision built in to <I>windosio.c</I> to transfer such arguments to your main routine. Unfortunately, none of the example programs illustrated such a use &#151; but virtually every MS_DOS program of mine that I looked at was using such arguments. When I tried to compile and link as did the example files, the following errors resulted:<P>
<pre>Error: Undefined symbol __COargc in library file
cm.lib in module SETARGV

Error: Undefined symbol __COargv in library file
cm.lib in module SETARGV</pre>
I took a closer look at the libraries included in the response file (e.g., <I>exampl1.mln</I>), both <I>cwm.lib</I> and <I>cm.lib</I> were specified. <I>cwm.lib</I> is the runtime libary for executables under Windows, while <I>cm.lib</I> is the runtime library for MS-DOS. (Both are for the medium memory model.) While including both libraries worked with the examples, with my test program (which used <I>argc</I> and <I>argv</I>), I was unable to link without errors until I removed the <I>cm.lib</I> library.<P>
For an additional test, I took a small graphics program, to see if it would run with minimal changes. I had to remove the include files as described above, and add the <I>windosio.h</I> file. After removing the other include files, but before adding <I>windosio.h</I>, I compiled the file &#151; resulting in 21 errors from undefined functions. On compiling with <I>windosio.h</I> added, there was a single error &#151; I'd declared <I>main</I> as type <I>void</I>, while WinDosIO prototypes it as type <I>int.</I> After changing that line of my program (and adding a <I>return 0;</I> statement to avoid a warning) the program compiled without errors. While linking, I again had to remove the <I>cm.lib</I>, and also add a <I>mathm.lib</I>. With these changes the program compiled, linked, and ran &#151; almost. The MS-DOS version drew various colored lines, but WinDosIO produced only black and white, and using <I>XOR</I> to erase existing lines didn't seem to work in Windows.<P>
<h4><FONT COLOR="#000080"><A name="02BC_0148">Conclusions<A name="02BC_0148"></FONT></h4></P>
There is one clear shortcoming to WinDosIO v2.0; the user documentation is inadequate. The file that should address use of the system largely consists of listings of the example programs along with limited discussion. The poor user documentation is exacerbated by the fact that potential WinDosIO users may be looking for an "easy" route to Windows programming &#151; going from MS-DOS to Windows without changing their programs. The reference manual is better, with its alphabetical listing of functions, but it is long enough that an index or table of contents would be handy &#151; and I'd almost prefer a topical organization of the functions to the alphabetical listing. With appropriate compilation and link commands, WinDosIO appears to produce working programs, but, as in the case of the graphics program above, I expect that it will seldom be a case of re-compile, re-link, and run. WinDosIO provides a programming interface. WinDosIO is much closer to MS-DOS than to Windows, but it will be best exploited by programmers who are willing to learn its details.<P>
I'm less confident than when I began looking at WinDosIO that it makes a good intermediate step between Windows and MS-DOS programming. The potential is definitely there, and with the large library of functions, a great deal of effort has gone into functionality. With some corresponding effort on documentation, or even with just the accumulation of Frequently Asked Questions (FAQ) and responses into a file to accompany the package, WinDosIO could be a worthwhile tool for those who take the time to learn its use.<P>
</BLOCKQUOTE>
</BODY>
</HTML>
