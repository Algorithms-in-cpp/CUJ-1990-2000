<HTML>
<HEAD>

<TITLE>April 1995/Code Capsules</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocapr.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Code Capsules<A name="008C_0052"><A name="008C_0052"></font></h2><P>
<h3 align="center"><A name="008C_0000"><A name="008C_0000">A Better C</h3><P>
<h3 align="center"><font color="#800000">Chuck Allison</font></h3><hr><blockquote><P>
<P><i><A name="008C_0000"><A name="008C_0000">Chuck Allison is a regular columnist with CUJ and a Senior Software Engineer in the Information and Communication Systems Department of the Church of Jesus Christ of Latter Day Saints in Salt Lake City. He has a B.S. and M.S. in mathematics, has been programming since 1975, and has been teaching and developing in C since 1984. His current interest is object-oriented technology and education. He is a member of X3J16, the ANSI C++ Standards Committee. Chuck can be reached on the Internet at 72640.1507@compuserve.com.</i></P><P>
Bjarne Stroustrup, the inventor of C++, has suggested three ways to look at C++:<P>
1)     as a better C<P>
2)     as a language that supports data abstraction, and<P>
3)     as an object-oriented programming language<P>
Because C++ truly is all of these things, it is somewhat more complex than most popular programming languages, especially the other object-oriented ones. The proponents of SmallTalk, Eiffel and CLOS (object-oriented Common LISP) engage in much religious debate about purity, simplicity, and the "true" definition of the term "object-oriented." But C++ is in fact a <I>multi-paradigm</I> language &#151; it supports the traditional procedural style of programming, like C and Pascal do; like Ada it supports data abstraction and generics (templates); and it supports inheritance and polymorphism, like all the other object-oriented languages. All this may make for somewhat of an impure programming language, but it also makes C++ the more practical choice for production programming. C++ unquestionably gives the best performance, functions well in mixed-language environments (not just with C, but with FORTRAN, COBOL, and other languages, as well), and does not require the enormous resources that Smalltalk, Eiffel and LISP do (the latter being <I>environments,</I> not just compile-and-link processes).<P>
In this article I explore the non-object-oriented features of C++ that make it "a Better C." Remember, however, that C++ came about by adding classes to C &#151; in other words, by adding data abstraction support to C. It is difficult to motivate some of the Better-C features without showing their class-based origins. I therefore use the class mechanism of C++ liberally.<P>
<h4><FONT COLOR="#000080"><A name="008C_0053">The Type System<A name="008C_0053"></FONT></h4></P>
Perhaps the most important thing to understand about C++ is its devotion to <I>type safety.</I> The OO languages mentioned above are very weakly typed, if at all, because they perform error-checking mainly during execution. C++, on the other hand, requires you to declare the type of every variable, and the types of the parameters and the return types of every function. It fastidiously checks your usage of these objects at <I>compile time.</I> It is type safety, more than anything else, that makes C++ a Better C, and the most reasonable choice for most programming tasks.<P>
<h4><FONT COLOR="#000080"><A name="008C_0054">Function Prototypes<A name="008C_0054"></FONT></h4></P>
ANSI-C-style function prototypes are not optional in C++. In fact, the prototype mechanism was invented for C++ before the ANSI C committee adopted it. You must either declare or fully define each function before its first use. The compiler will check each function invocation for the correct number and type of arguments. In addition, it will perform automatic conversions where they apply. The program in <A href="list1.htm">Listing 1</a>
shows a common error that occurs in C when you don't use prototypes. The function <I>dprint</I> expects a <I>double</I> argument. Without knowing <I>dprint's</I> prototype, the compiler doesn't know that the call <I>dprint(123)</I> is an error. When you provide the prototype for <I>dprint</I>, the compiler automatically converts <I>123</I> to a <I>double</I> for you (see <A href="list2.htm">Listing 2</a>)
.<P>
Since C++ allows types that you define to behave like built-in types, it allows implicit conversions for user-defined types as well. Since the constructor for <I>struct A</I> in <A href="list3.htm">Listing 3</a>
expects a <I>double</I> argument, the compiler automatically converts the integer 1 to a <I>double</I> in the definition for <I>a.</I> The call <I>f(2)</I> generates the equivalent of the following actions:<P>
1.     convert 2 to a <I>double</I><P>
2.     initialize a temporary <I>A</I> object with the value <I>2.0</I><P>
3.     pass that object to <I>f</I><P>
In other words, the compiler generates code equivalent to:<P>
<pre>f(A(double(2)) );</pre>
Note C++'s function-style cast syntax. The expression<P>
<pre>double(2)</pre>
is equivalent to<P>
<pre>(double) 2</pre>
Only one implicit user-defined conversion is allowed in any expression, however. The program in <A href="list4.htm">Listing 4</a>
requires you to provide a <I>B</I> object to initialize an <I>A</I> object. A <I>B</I> object in turn requires a <I>double,</I> because its only constructor is <I>B::B(double)</I>. The expression<P>
<pre>A a(1)</pre>
becomes:<P>
<pre>A a(B(double(1)))</pre>
which has only one user-defined conversion. The expression <I>f(3)</I>, however, is invalid, because it would require the compiler to provide two automatic user-defined conversions:<P>
<pre>// Can't do both an A and a B
// conversion implicitly
f(A(B(double(3)))   // invalid</pre>
The expression <I>f(B(3))</I> is okay, because you explicitly requested the conversion <I>B(double(3))</I>, so the compiler provides only the remaining conversion to <I>A</I>.<P>
<h4><FONT COLOR="#000080"><A name="008C_0055">Type-Safe Linkage<A name="008C_0055"></FONT></h4></P>
C++ can even detect improper function calls across compilation units. The program in <A href="list5.htm">Listing 5</a>
calls a function in <A href="list6.htm">Listing 6</a>.
 When compiled as a C program, the situation is analogous to <A href="list1.htm">Listing 1</a>,
 giving the output:<P>
<pre>f:0.000000</pre>
C has no way of knowing that the <I>f's</I> are different. The conventional work-around is to put the correct prototype in a header file that all compilation units include. In C++, a function call will only link with a function that has the same <I>signature,</I> which is the combination of the function name and its sequence of argument types. When compiled as a C++ program, the output of <A href="list5.htm">Listing 5</a>
and <A href="list6.htm">Listing 6</a>
from Borland C++ is<P>
<pre>Error: Undefined symbol f(int) in module safe1.cpp</pre>
Most compilers achieve this <I>type-safe linkage</I> by encoding the function's signature along with its name, a technique often referred to as <I>function name encoding, name decorating</I>, or my favorite, <I>name mangling.</I> For example, the function <I>f(int)</I> might appear to the linker as<P>
<pre>f__Fi  // f is a function
      // taking an int</pre>
but <I>f(double)</I> would be<P>
<pre>f__Fd  // f is a function
      // taking a double</pre>
Since the names are different, the linker can't find <I>f(int)</I> in this example, and reports an error.<P>
<h4><FONT COLOR="#000080"><A name="008C_0056">References<A name="008C_0056"></FONT></h4></P>
Since C passes function parameters by value, passing large structures to functions can waste a lot of time and stack space. The typical work-around is to pass a pointer. For example, if struct <I>Foo</I> is a large record structure, you can do something like the following:<P>
<pre>void f(struct Foo *fp)
{
    /* Access the structure
      through fp */
    fp-&gt;x=...
    etc.
}</pre>
You have to pass the address of a struct <I>Foo</I> in order to use this function, of course:<P>
<pre>struct Foo a;
...
f(&amp;a);</pre>
The C++ reference mechanism is a notational convenience that saves you the bother of providing explicit indirection of pointer variables. In C++, you can render the above code as:<P>
<pre>void f(Foo &amp;fr)
{
    /* Access members directly */
    fr.x = ...
    etc.
}</pre>
You can now call <I>f</I> without using the address-of operator, like this:<P>
<pre>Foo a;
...
f(a);</pre>
The ampersand in the prototype for <I>f</I> instructs the compiler to pass its argument by reference, which in effect takes care of all the indirection for you. For you Pascal programmers, reference parameters are equivalent to <I>VAR</I> parameters.<P>
Call-by-reference means that any changes you make to a function parameter affect the original argument in the calling program. Thus, you can write a swap function (not a macro) that actually works (see <A href="list7.htm">Listing 7</a>)
. If you don't plan on modifying a reference argument, declare it a <I>reference-to-const</I>, like I did in <A href="list4.htm">Listing 4</a>.
 A reference-to-const argument has the safety and notational convenience of call-by-value, and the efficiency of call-by-reference.<P>
As <A href="list8.htm">Listing 8</a>
illustrates, you can also return an object from a function by reference. It may look strange to have a function call on the left-hand side of an assignment, but this comes in handy when overloading operators (especially <I>operator=</I> and <I>operator[]</I> when used as member functions).<P>
<h4><FONT COLOR="#000080"><A name="008C_0057">Type-Safe I/O<A name="008C_0057"></FONT></h4></P>
I'm sure every C programmer has been bitten by using incorrect format descriptors in <I>printf. printf</I> has no way to check if the data items you pass it match your format string. How often have you done something like the following, only to discover the problem at run time:<P>
<pre>double d;
...
printf("%d\n",d); /* should've used
                 %f */</pre>
The C++ IOStreams library, on the other hand, uses the object's type to determine the proper formatting:<P>
<pre>double d;
...
cout &lt;&lt; d &lt;&lt; endl;  // can't fail</pre>
There is no way for the output stream to misinterpret your value, If you want to print floating-point numbers with a fixed precision, you can say so just once:<P>
<pre>double x = 1.5, y = 2.5;
cout.precision(2);            // Show 2 decimals
cout.setf(ios::showpoint);    // Preserve trailing 0's
cout &lt;&lt; x &lt;&lt; endl;            // prints 1.50
cout &lt;&lt; y &lt;&lt; endl;            // prints 2.50</pre>
The token <I>endl</I> is a <I>manipulator</I>, a special object you insert into a stream to create a side effect &#151; in this case, to start a new line and flush the output buffer. For more information on IOstreams, see the Code Capsule in the July 1993 issue of <I>CUJ.</I><P>
<h4><FONT COLOR="#000080"><A name="008C_0058">Function Overloading and Templates<A name="008C_0058"></FONT></h4></P>
The swap function in <A href="list7.htm">Listing 7</a>
is useful only if you want to swap integers. What if you want to swap two objects of any built-in type? C++ allows you to define multiple functions of the same name, as long as their signatures are different. Therefore you can define a swap for all built-in types:<P>
<pre>void swap(char &amp;, char &amp;);
void swap(int &amp;, int &amp;);
void swap(long &amp;, long &amp;);
void swap(float &amp;, float &amp;);
void swap(double &amp;, double &amp;);
etc.</pre>
You can then call <I>swap</I> for any two objects of the same built-in type. If you were to implement each of these functions, however, before long you would discover that you were doing the same thing over and over &#151; the only thing that changes is the type of the objects you want to swap. To save tedium and the chance of making a silly mistake, you can define a <I>function template</I> instead. As <A href="list9.htm">Listing 9</a>
demonstrates, you preface the function with the phrase<P>
<pre>template&lt;class T&gt;</pre>
which says that in the code that follows, the token <I>T</I> stands for an arbitrary data type, either built-in or user-defined. You then replace all occurrences of the data type of the objects to be swapped with the template parameter <I>T.</I> When the compiler sees a call to <I>swap,</I> it <I>instantiates</I> the appropriate function, inferring the type from the type of the operands. In other words, when the compiler sees<P>
<pre>swap(i ,j);</pre>
it actually generates the code for <I>swap(int &amp;, int &amp;)</I>, as if you had created it yourself (but without human error).<P>
<h4><FONT COLOR="#000080"><A name="008C_0059">Operator Overloading<A name="008C_0059"></FONT></h4></P>
You can also overload operators in C++. For example, suppose you define a complex number data type as:<P>
<pre>struct complex
{
   double real, imag;
};</pre>
It would be quite convenient if you could use infix notation for adding complex numbers, such as:<P>
<pre>complex c1, c2;
...
complex c3 = c1 + c2;</pre>
Operator overloading enables you to do just this. When the compiler encounters an expression such as <I>c1 + c2</I>, it looks for one of the following two functions:<P>
<pre>operator+(const complex &amp;, const complex &amp;);
complex::operator+(const complex &amp;);</pre>
The <I>operator</I> keyword is part of the function name. You could define a global <I>operator+</I> for adding two complex numbers like this:<P>
<pre>complex operator+(const complex &amp;c1, const complex &amp;c2)
{
   complex r;
   r.real = c1.real + c2.real;
   r.imag = c1.imag + c2.imag;
   return r;
}</pre>
The compiler will not allow you to overload built-in operations, such as addition of two <I>ints</I>, therefore at least one of the operands must be of a user-defined type.<P>
The IOStreams library uses operator overloading to determine how to format the various built-in types. For example, the <I>ostream</I> class, of which <I>cout</I> is an instance, overloads <I>operator&lt;&lt;</I> for all the built-in types. When the compiler sees the expression<P>
<pre>cout &lt;&lt; i;        // where i is an int</pre>
it generates the following function invocation<P>
<pre>cout.operator&lt;&lt;(i);</pre>
which formats the number correctly.<P>
<A href="list10.htm">Listing 10</a>
shows how to extend IOStreams by overloading <I>operator&lt;&lt;</I> for complex numbers (sample output in <A href="list11.htm">Listing 11</a>)
. The compiler transforms the expression<P>
<pre>cout &lt;&lt; c    // c is a complex number</pre>
into the function call<P>
<pre>operator&lt;&lt;(cout, c)</pre>
which invokes <I>operator&lt;&lt;(ostream&amp;, const complex&amp;).</I> This function in turn breaks the operation down into formatting objects of built-in types. This function also returns the stream so that you can chain multiple stream insertions in a single statement. For example, the expression<P>
<pre>cout &lt;&lt; c1 &lt;&lt; c2</pre>
becomes<P>
<pre>operator&lt;&lt;(operator&lt;&lt;(cout,c1), c2)</pre>
which requires that <I>operator&lt;&lt;(ostream&amp;, const complex&amp;)</I> return the stream. The operator returns the stream by reference for efficiency.<P>
<h4><FONT COLOR="#000080"><A name="008C_005A">Inline Functions<A name="008C_005A"></FONT></h4></P>
The <I>inline</I> keyword, seen in <A href="list10.htm">Listing 10</a>,
 tells the compiler that you want the code "inlined" for efficiency. Each call to an inline function inserts the appropriate code inline, avoiding the usual overhead of an actual function call. This mechanism is different from a function-like macro, which performs text substitution before program translation. Inline functions have all the type checking and semantics of true functions, without the sensitivity to side effects that macros have. For example, you might define a macro to find the smaller of two numbers as follows:<P>
<pre>#define min(x,y) ((x) &lt; (y) ? (x) : (y))</pre>
which fails miserably with an incremented argument, such as<P>
<pre>min(x++,y++)</pre>
Inline functions don't have this problem, since they behave like real functions.<P>
Not all functions can or should be inlined, however. Certainly a recursive function doesn't qualify for inlining. Large functions can increase code size substantially when inlined. Inlining is mainly for small, simple functions.<P>
<h4><FONT COLOR="#000080"><A name="008C_005B">Default Arguments<A name="008C_005B"></FONT></h4></P>
Default arguments allow a function to infer values from its prototype. The program in <A href="list12.htm">Listing 12</a>
has a function with the prototype:<P>
<pre>int minutes(int hrs, int min = 0);</pre>
The "= 0" after the last parameter instructs the compiler to supply the value 0 for the second argument when you omit it in a program. This mechanism is essentially a shorthand for defining related overloaded functions. In this case, it is a short cut for the following:<P>
<pre>int minutes(int hrs, int min);
int minutes(int hrs);     // ignores minutes</pre>
The complex constructor in <A href="list10.htm">Listing 10</a>
uses default arguments to allow you to define a complex number with 0, 1, or 2 arguments, as in<P>
<pre>complex c1;        // (0,0)
complex c2(1);     // (1,0)
complex c3(2,3)    // (2,3)</pre>
The third form is the one used in the <I>return</I> statement of <I>operator+</I> in <A href="list10.htm">Listing 10</a>.
<P>
<h4><FONT COLOR="#000080"><A name="008C_005C"><I>new </I><B>and </B><I>delete<A name="008C_005C"></I></FONT></h4></P>
To use the heap in C, you need to compute the size of the object you want to create:<P>
<pre>struct Foo *fp = malloc(sizeof(struct Foo));</pre>
In C++,the <I>new</I> operator computes the size of an object for you:<P>
<pre>Foo *fp = new Foo;</pre>
To allocate an array in C, you call a different function:<P>
<pre>struct Foo *fpa = calloc(n,sizeof(struct Foo));</pre>
In C++, <I>new</I> knows about arrays:<P>
<pre>Foo *fpa = new Foo[n];</pre>
In addition, the <I>new</I> operator automatically invokes the appropriate constructor to initialize the object(s) before it returns you the pointer. For example, creating complex numbers on the heap automatically initializes them, as in<P>
<pre>complex *cp1 = new complex;        // -&gt; (0,0)
complex *cp2 = new complex(1);     // -&gt; (1,0)
complex *cp3 = new complex(2,3);   // -&gt; (2,3)</pre>
To return dynamic memory to the heap, you use the <I>delete</I> operator, which comes in two forms. For singleton objects you use this one:<P>
<pre>delete fp;
delete cp1;</pre>
but deleting arrays requires the second form, with the following syntax:<P>
<pre>delete [] fpa; // array-delete syntax</pre>
Like other C++ features, <I>new</I> and <I>delete</I> improve the type safety of your programs &#151; you aren't just asking for an amount of memory, you are requesting objects, with the appropriate type-checking and initialization.<P>
<h4><FONT COLOR="#000080"><A name="008C_005D">Declaration Statements<A name="008C_005D"></FONT></h4></P>
In C++, a declaration can appear anywhere a statement can. Instead of having to group declarations at the beginning of a block, you can declare objects at their point of first use. For example, in <A href="list13.htm">Listing 13</a>
the array <I>a</I> is visible throughout the function body, but <I>n</I> is not valid until its declaration, and <I>i</I> not until the next line. With current compilers all three objects persist until the end of the block, which is why <I>i</I> is not redeclared in the second <I>for</I>-loop. The C++ standard now states, however, that the scope of variables declared in a control loop is the loop itself. In the future, therefore, you will have to redeclare <I>i</I> in the second loop, as in<P>
<pre>for (int i = n-1; i &gt;= 0; --i)</pre>
<h4><FONT COLOR="#000080"><A name="008C_005E">Static Initialization<A name="008C_005E"></FONT></h4></P>
In C, variables of <I>static</I> storage duration (those declared at file scope or with the <I>static</I> keyword) are initialized at program startup and remain active throughout program execution. Since such objects can only use constant expressions as initializers, this isn't a challenge for compiler writers to implement. Because objects in C++ usually require constructors, however, static objects must be able to call functions in their initialization. For this reason, C++ allows statements at file scope such as<P>
<pre>double x = sqrt(5);</pre>
<h4><FONT COLOR="#000080"><A name="008C_005F">C Compatibility<A name="008C_005F"></FONT></h4></P>
To accommodate strong type-checking and object-orientation, C++ has had to part ways with C on a few language issues. If you are going to use C++ as a better C, you should be aware of those features that behave differently in the two languages.<P>
First of all, C++ has more keywords than C. You must avoid using any of the tokens in <A href="tab1.htm">Table 1</a>
as identifiers in your programs.<P>
You can use <I>const</I> integer objects and enumerated constants in array declarations in C++, as in<P>
<pre>const int SIZE = 100;
enum {BIGGER = 1000};
int a[SIZE], b[BIGGER];</pre>
Global <I>const</I> declarations have internal linkage by default, whereas in C they have external linkage. As a result, you can use <I>const</I> definitions at file scope in C++, in place of <I>#define</I> macros in header files. If you want a <I>const</I> object to have external linkage, you must use the <I>extern</I> keyword.<P>
In C, you can assign a pointer to any type to and from a <I>void *</I>. This allows you to use <I>malloc</I> without a cast, as in<P>
<pre>#include &lt;stdlib.h&gt;
...
char *p = malloc(strlen*s) + 1);</pre>
The C++ type system will not allow you to assign from a void pointer without a cast. For the example above, you should use the <I>new</I> operator anyway.<P>
If you omit arguments in a function definition in C, the compiler does not check how you use that function (i.e., you can pass any number and type of arguments to it). In C++, the prototype <I>f()</I> is equivalent to <I>f(void).</I> If you insist upon the unsafe C behavior, use <I>f(...)</I>.<P>
And finally, single-quoted character constants are of type <I>char </I>in C++, not <I>int.</I> Otherwise, the expression<P>
<pre>cout &lt;&lt; 'a'</pre>
would print the internal character code (e.g., 97 for ASCII) instead of the letter <I>a</I>.<P>
<h4><FONT COLOR="#000080"><A name="008C_0060">Summary<A name="008C_0060"></FONT></h4></P>
You might think that the key distinction between C and C++ is support for object-oriented programming, but even more crucial is the issue of type safety. Not all programs are object-oriented programs. Even if you don't use classes and other object-oriented mechanisms, using C++ as a type-safe C will help make you a safer programmer.<P>

<h4><a href="../../../source/1995/apr95/allison.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
