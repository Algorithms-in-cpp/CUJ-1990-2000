

<HTML>
<HEAD>

<TITLE>April 1995/An Error Manager With Message Text Replacement</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocapr.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   User Interfaces</FONT></H2>

<hr><h2 align="center"><font color="#800000">An Error Manager With Message Text Replacement<A name="007D_0048"><A name="007D_0048"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="007D_0000"><A name="007D_0000">David Chapman</font></h3><hr><blockquote><P>
<P><i><A name="007D_0000"><A name="007D_0000">David Chapman is a Software Consultant specializing in VLSI CAD tools, compilers, and language design. He has a BSCS from California Polytechnic State University, San Luis Obispo, and an MSEE from Stanford University. He is currently working on a research project in VLSI layout synthesis. He may be reached at dchapman@netcom.com.</i></P><P>
<h4><FONT COLOR="#000080"><A name="007D_0049">Introduction<A name="007D_0049"></FONT></h4></P>
Library developers often face a difficult problem: the need to report errors without knowing what kind of environments the library routines will be used in. For example, VLSI ComputerAided Design (CAD) software often runs under a graphical user interface (GUI), based on the X-Window system. My code usually does straight number crunching with little user interaction. However, VLSI CAD software sells worldwide, wherever there is a local semiconductor industry. I want to be able to translate my software to the language used by my customers even though I don't speak any languages other than English (so far). Thus my code needs a simple way to translate the error messages it prints.<P>
The more commonly-used techniques for making programs configurable don't support this need very well. Macintosh and Windows programmers are familiar with resource files, which contain the printable text and some of the graphics used by a program. Resource editors allow users to change the text associated with error messages and prompts. Resource files exemplify a "heavyweight" system, requiring a fair amount of source code and auxiliary files. Such a system requires editing and checking in of both the source code and the message file. On a project with only one message file being maintained by multiple programmers, updates may be lost unless extreme care is taken.<P>
I've maintained code based on other message systems that export the text, but I've found them difficult to manage. Here's a sample message from one of those systems:<P>
<pre>raiseWarning(runOutShape,baseName,cellName);</pre>
Since the original author didn't comment this particular message, I had to go look up the text so I could understand the code that used it.<P>
Finally, in a CAD environment, the same code may run within a GUI or as a non-graphical program, selected at run-time, so even conditional compilation isn't enough. In such an environment, it's a good idea to pass all messages through a single centralized location. This makes it easier to enforce message presentation standards as well as to redirect error messages: I don't want to print to <I>stderr</I> while a GUI is running!<P>
<h4><FONT COLOR="#000080"><A name="007D_004A">Designing an Error Manager<A name="007D_004A"></FONT></h4></P>
My CAD software is destined for a UNIX environment, so Windows and Macintosh resource tools won't help. Also, I'm working alone, so I need a system that's easy to develop and use. My design goals are as follows:<P>
1.     easy replacement of message text<P>
2.     multiple replacement dictionaries (for partial replacement or subsystems)<P>
3.     automatic error checking of replacement strings<P>
4.     100% reliability and functionality even in the absence of replacement dictionaries<P>
5.     easy re-use of low-level library code that prints error messages<P>
6.     code readability during maintenance<P>
<h4><FONT COLOR="#000080"><A name="007D_004B">General Approach<A name="007D_004B"></FONT></h4></P>
I route all error and warning messages through a single error manager. I don't try to handle dialogues here, because graphical and text-based interfaces often differ substantially, and my software isn't very interactive. However, I can replace prompts as well.<P>
My system stores the default messages in the source code, so they can document some of its intent (after all, the user must be able to understand the message). Linking the program incorporates the messages into the program directly, so there are no resource files to get lost. (However, performing a <I>translation</I> requires a message dictionary, which is a separate file containing replacement text.)<P>
Keyed error messages in the source code begin with a '$' followed by an alphanumeric message name and a colon. The error manager strips off these keys before printing the message (See <A href="list1.htm">Listing 1</a>
for an example of a keyed message). If the error manager finds a message corresponding to the key name in the message dictionary, and the dictionary's parameter order is compatible with the original, then the error manager uses the replacement message from the dictionary. If it finds any errors in the replacement text, the manager prints a warning and uses the original text from the source code.<P>
I based the system on <I>fprintf</I> because it's very difficult to modify streams-based I/O to fit this approach. Every string constant in an output statement would require its own key, and formatting could not be changed. If you despise <I>fprintf</I> and switched to streams as soon as you learned C++, you're probably better off with a resource editor.<P>
<h4><FONT COLOR="#000080"><A name="007D_004C">Message Dictionaries<A name="007D_004C"></FONT></h4></P>
Message or complaint dictionaries store replacement text for the keyed error messages. If a message has a keyed name, the dictionary manager retrieves the replacement text and the error manager compares it with the program text. The error manager then walks down both message bodies comparing the format specifications. If the two disagree, the error manager assumes the program text is correct and prints a warning message. The error manager also lists the key name so that the user can fix the dictionary text.<P>
This process demonstrates the advantage of storing the original message in the source code: even if the dictionary files are damaged or deleted, the program can still print the original message text. The user might complain about messages suddenly appearing in English, but I consider this better than crashing with no message whatsoever.<P>
Some <I>fprintf</I> format specifiers are equivalent, or at least read same-size objects from the argument list. The function <I>format_specifier</I> in <I>errmgr.cpp</I> returns a "canonical" format character for each type. For example, <I>format_specifier</I> converts all floating-point numbers to <I>double</I> for <I>fprintf,</I> so the 'e', 'f', and 'g' types all map to the same letter. The user can change the way values are printed (more digits of precision), but the type ordering is fixed in the program.<P>
Each logical line in a message dictionary contains one message. Newlines are quoted with '\' and comment lines begin with '#'. The dictionary format is the same as the message format except that the leading '$' is omitted. (This is not program text, so you don't need to quote special characters.)<P>
Note that an implicit newline resides at the end of each message, even if the program text does not contain one. If you use this system to retrieve prompt text using <I>err_mgr.message</I>, you'll want to strip off this newline or else the user's input will be on the next line.<P>
<h4><FONT COLOR="#000080"><A name="007D_004D">Message Handlers<A name="007D_004D"></FONT></h4></P>
The error manager handles four message types:<P>
1)     Fatal &#151; the program prints the message and exits.<P>
2)     Serious &#151; the program asks for permission to continue.<P>
3)     Warning &#151; the message is printed and the program continues.<P>
4)     Posting &#151; the message is simply printed.<P>
The error manager routes all messages through a handler, which can be replaced at run time. For example, the startup code of a GUI would install a graphical error reporter (printing to a pop-up box, for example) and the termination code would restore the previous handler. All error handlers are based on the <I>failure_handler</I> class (see <A href="list2.htm">Listing 2</a>)
.<P>
The default <I>failure_handler</I> prints to <I>stderr</I> except for the <I>post</I> routine, which prints to <I>stdout</I>. The routines themselves are fairly simple (see <A href="list3.htm">Listing 3</a>)
. The other routines in <I>failure_handler</I> appear on this month's source code disk.<P>
The class <I>error_mgr</I> defines the error manager. Application code calls the member functions of this class's one-and-only instance, <I>err_mgr. err_mgr</I> then directs the message to the handler currently defined. (See <A href="list4.htm">Listing 4</a>.
)<P>
Handlers stack; <I>define_handler</I> returns the previously defined handler to allow a sort of run-time inheritance. For example, an instance of the class <I>counting_failure_handler</I>, when created, will install itself in the handler stack and then tally each serious error or warning before passing the message to the previous handler. The <I>counting_failure_handler</I> will remove itself from the handler stack when it is destroyed. <A href="list5.htm">Listing 5</a>
shows how <I>counting_failure_handler</I> installs and removes itself from the stack.<P>
The <I>error_mgr</I> class uses <I>counting_failure_handler</I> when reading dictionaries. The <I>complaint_dict</I> constructor (<A href="list9.htm">Listing 9</a>)
 parses the dictionary file, reporting errors through the <I>warn</I> function. Class <I>complaint_dict</I> is shown in <A href="list8.htm">Listing 8</a>.
 If <I>complaint_dict</I> reports any problems the error manager knows the dictionary is invalid. This technique gets around the "constructor returns no value" problem. Of course, if another <I>failure_handler</I> is stacked on top of a <I>counting_failure_handler</I>, errors won't be tallied unless that handler also passes its messages downward. Only the topmost handler receives messages. <A href="list7.htm">Listing 7</a>
shows class <I>ptr_stack</I>, which manages the handler stack.<P>
A program can use multiple error dictionaries. <I>define_dictionary</I> parses the named dictionary and returns 1 if it finds no errors. If <I>define_dictionary</I> finds errors the error manager ignores that dictionary. I pass in a filename rather than an open file because file descriptors are a precious commodity. To replace a message, the dictionary manager reopens the file and rereads the message using the stored file offset. If a message appears in more than one dictionary the last one defined takes precedence. <A href="list6.htm">Listing 6</a>
shows function <I>define_dictionary</I>, as well as other member functions of class <I>error_mgr</I>.<P>
There are two <I>error_mgr</I> routines for each type of error. The second, similar to <I>vfprintf</I>, accepts a <I>va_list</I> argument. I found out the hard way that it's not a good idea to overload these names; if <I>va_list</I> resolves to <I>(char *)</I> (e.g. in Borland C++), then the call<P>
<pre>err_mgr.warn("Can't open %s\n", filename);</pre>
may be routed to the <I>va_list</I> version of the function instead! (ARM section 13.2 says "sequences that involve matches with the ellipsis are worse than all others.")<P>
The <I>message</I> function searches for the replacement text for the <I>fmt</I> argument and, if found, stores it into the buffer passed along. <I>message</I> then returns a pointer to the start of this buffer or within the <I>fmt</I> argument if no such message is found so that the result can be used within an <I>fprintf</I> call (e.g. a prompt). In this demonstration version, the buffer length is passed in; for robustness all routines of this sort should use a buffer object that grows when text is added instead.<P>
<h4><FONT COLOR="#000080"><A name="007D_004E">Debugging Features<A name="007D_004E"></FONT></h4></P>
Last but not least this error manager provides an assertion capability. Assertions are always compiled into the code; the macro <I>NDEBUG</I> controls only the default value of the <I>assertions_off</I> function. The <I>ASSERT</I> macro is similar to <I>assert</I> except that it first checks <I>err_mgr.assertions_off</I>. An assertion failure is a serious but not necessarily fatal error in this system.<P>
<I>err_mgr.set_assert_flag(0)</I> sets <I>err_mgr.assertions_off</I>, short-circuiting all assertion evaluations. Since it's an inline function returning the value of a static member value, <I>set_assert_flag</I> doesn't slow down assertion evaluation. In the worst case assertions can slow execution up to 20%, so users might not want assertions on unless the program is prone to crashes.<P>
Note that all of the private variables are all static integers or pointers. In <I>errmgr.cpp</I> these variables are all initialized to zero, because the ARM states that assignments to zero are performed first. Global constructors are called in an implementation-specific order, so if an error occurs in a constructor that executes prior to the <I>err_mgr</I> constructor, <I>err_mgr</I> must set itself up. Thus every routine in <I>errmgr.cpp</I>, including the constructor, calls <I>setup</I> first, directly or indirectly.<P>
<I>setup</I> allocates all of the non-simple variables off the heap to ensure they are properly initialized as well.<P>
<h4><FONT COLOR="#000080"><A name="007D_004F">Automated Message Extraction<A name="007D_004F"></FONT></h4></P>
Once you've completed your application, you'll want to build the message dictionaries automatically. This month's code disk contains source code for a scanner written for flex, the fast replacement for the UNIX lex program. The scanner searches for string constants (merging adjacent string constants, of course) that appear to be keyed error messages.<P>
I didn't try to write a C++ parser, or even to locate all <I>err_mgr</I> calls, because some of my mid-level utility routines implement their own error logging systems on top of <I>err_mgr</I>. For example, a parser will often print the language context in addition to the error message. Thus I'd have to analyze the program to determine that calls such as<P>
<pre>lexer-&gt;complain("$illegal_char:" "Illegal character. \n");</pre>
were in fact calls to <I>err_mgr.</I> At worst the scanner will find a few extra "messages." Note that the scanner won't find keyed messages constructed at run time; they would be difficult for users to translate anyway.<P>
The scanner in its current form requires flex because it uses some features that only flex provides. [A public-domain version of flex that can be compiled under both MS-DOS and UNIX is available from the C User's Group Library. See ordering information at the end of this article. &#151;mb] I've included the output C file as well so that you can at least compile the program. The code that actually generates the dictionaries is in <I>findmsgs.c,</I> so if you want to change the format of the messages or dictionaries you won't need to edit the scanner itself.<P>
<h4><FONT COLOR="#000080"><A name="007D_0050">Message Database Management<A name="007D_0050"></FONT></h4></P>
With every release of your software you will probably need to rebuild the message dictionaries, because you will most likely add new messages and modify old messages. If your customers (or a group within your company) have translated all of the messages into another language, you'll need to help them with the update. I recommend building a new set of dictionaries for the release, then comparing them message-by-message with the previous release. This process will result in a list of messages added or changed by the programmer. Customers must then write or edit translations for these messages into another language, you'll need to help them with the update. I recommend building a new set of dictionaries of the release then comparing them message-by-message with the previous release. This process will result in a list of messages added or changed by the programmer. Customers must then write or edit translations for these messages.<P>
If your documentation or support groups are modifying message text (for example, to ensure consistent wording), then you'll need to compare the source code messages in the current release with the edited dictionaries. This step will give you a list of messages that the support groups have modified, to merge with the programmers' modifications.<P>
<h4><FONT COLOR="#000080"><A name="007D_0051">Limitations<A name="007D_0051"></FONT></h4></P>
Naturally, any system based on <I>fprintf</I> is subject to parameter typing problems. Without a full C++ parser, plus program knowledge to determine which calls will be routed to the error manager, you can't guarantee against printing occasional garbage. Streams have an obvious advantage here, but again text replacement is a problem with them.<P>
Currently, you can't edit messages in a way that rearranges the order of the parameters. At most you can rearrange the text around the parameters. You would have to define a whole new <I>fprintf-</I>styleformat and write routines to extract the parameters from the argument list in their original order, then shuffle them to meet the new requirements. It's not a simple task, so I didn't even try.<P>
My CAD software is rather large, straining the limits of MSDOS, so I don't keep the replacement text in memory. You could modify the dictionary manager very easily to keep the message text around so that it wouldn't have to re-open the file every time a message was requested.<P>
<h4><FONT COLOR="#000080"><A name="007D_0052">Limitations in This Version<A name="007D_0052"></FONT></h4></P>
My production error manager uses a managed buffer that grows in length automatically as text is added to it. This demonstration implementation uses fixed-length (usually 512 characters) buffers instead. For safety you should use some kind of expanding buffer. I've marked the source code to show where the fixedlength buffers are used. Look for variables named <I>linelen</I> and the associated comments.<P>
For speed, keyword lookup should use a hash table. I've used a singly-linked list here for simplicity.<P>
This month's code disk contains the following:<P>
<UL><li>fully commented source for all modules and the C++ scanner</li>
<li>test programs for <I>error_mgr,</I> <I>complaint_dict, ASSERT</I></li>
<li>makefiles for Zortech C++ 3.l, Symantec C++ 6.00, Borland C++ 4.00, and UNIX (the latter untested)</li>
<li><I>findmsgs.exe</I> (the scanner) compiled using Zortech C++</li></UL>
All code described in this article is placed in the public domain. You may use it as you wish.<P>
<h4><FONT COLOR="#000080"><A name="007D_0053">Acknowledgements<A name="007D_0053"></FONT></h4></P>
The flex scanner is based on one that Tony Sanders (once upon a time at <I>cs.utexas.edu!ibmaus!auschs!sanders.austin. ibm.com!sanders</I>) wrote in 1990. I've extended it to support floating-point numbers and quoted characters within string constants.<P>
<h4><FONT COLOR="#000080"><A name="007D_0054">Obtaining a Version of Flex<A name="007D_0054"></FONT></h4></P>
Daniel R. Haney (MA) has ported flex to MS-DOS. Flex is available in CUJ Library volume 290. The disk contains a complete set of source code, documentation, a makefile, and a word count program as an example. Haney's implementation of flex can be compiled under MSDOS and UNIX. An OS/2 executable is included.<P>
Also check out Flex++, CUJ volume 405. For more information, contact:<P>
R&amp;D Publications<br>
1601 W 23rd, Suite 200<br>
Lawrence, KS 66046<br>
(913)-841-1631. FAX: (913)-841-2624<br>
e-mail: <I>michelle@rdpub.com.</I><P>

<h4><a href="../../../source/1995/apr95/chapman.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
