

<HTML>
<HEAD>

<TITLE>April 1995/Standard C/C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocapr.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Standard C/C++<A name="008A_0050"><A name="008A_0050"></font></h2><P>
<h3 align="center"><A name="008A_0000"><A name="008A_0000">The Header &lt;fstream&gt;</h3><P>
<h3 align="center"><font color="#800000">P.J. Plauger</font></h3><hr><blockquote><P>
<P><i><A name="008A_0000"><A name="008A_0000">P.J. Plauger is senior editor of C/C++ Users Journal. He is convener fo the ISO C standards committee, WG14, and active on the C++ committee, WG21. His latest books are The Draft Standard C++ Library, and Programming on Purpose (three volumes), all published by Prentice-Hall. You can reach him at pjp@plauger.com.</i></P><P>
<h4><FONT COLOR="#000080"><A name="008A_0051">Introduction<A name="008A_0051"></FONT></h4></P>
I've been working my way through the iostreams portion of the draft Standard C++ library, lo these many months. Interestingly enough, I've yet to get to the part that programmers probably use the most &#151; reading and writing streams of text connected to external files and devices. This installment still doesn't get as far as <I>cin</I> and <I>cout</I>, those ubiquitous standard streams we all know and love. But it does lay some important groundwork for them. At last we will see how to specialize a stream buffer for controlling input and output.<P>
The header <I>&lt;fstream&gt;</I> defines half a dozen classes. Three of these cooperate to help you read and write files that you open by name:<P>
<UL><li><I>filebuf</I>, derived from <I>streambuf</I> to mediate access to an external stream of characters read from or written to a file</li>
<li><I>ifstream</I>, derived from <I>istream</I> to construct a <I>filebuf</I> object and to assist in extracting from the stream</li>
<li><I>ofstream</I>, derived from ostream to construct a <I>filebuf</I> object and to assist in inserting into the stream</li></UL>
The other three classes defined in <I>&lt;fstream&gt;</I> cooperate to help you read and write files controlled by an object of type <I>FILE</I>, declared in <I>&lt;stdio.h&gt;</I>:<P>
<UL><li><I>stdiobuf</I>, derived from streambuf to mediate access to a stream of characters read from or written to an external stream under control of a <I>FILE</I> object</li>
<li><I>istdiostream</I>, derived from <I>istream</I> to construct a <I>stdiobuf</I> object and to assist in extracting from the stream</li>
<li><I>ostdiostream</I>, derived from <I>ostream</I> to construct a <I>stdiobuf</I> object and to assist in inserting into the stream</li></UL>
<A href="list1.htm">Listing 1</a>
shows the way I chose to implement the header <I>&lt;fstream&gt;</I>. I present it here, without explanation, for those of you who feel better looking at concrete code. Next month, I discuss in more detail how to implement this header.<P>
Reading and writing files is an important part of iostreams. For many C++ programs, it is the sole means of communication between a program and the outside world. The standard stream objects, such as <I>cin</I> and <I>cout</I>, are conventionally associated with external streams. Even in this era of window-oriented interfaces, reading and writing files remains important. Communication between two programs, between a program and a window, or between a program and a special device are all often made to look like conventional file reads and writes. The classes defined in <I>&lt;fstream&gt;</I> are the preferred agents for controlling such file operations.<P>
You do not, in principle, need two sets of classes for accessing files with iostreams. The Standard C library function <I>fopen</I>, declared in <I>&lt;stdio.h&gt;</I>, associates a named file with a <I>FILE</I> object. The same header declares <I>fclose</I>, for removing the association. You can associate a <I>FILE</I> object with a <I>stdiostream</I> object, as described above, and you're in business. Why the extra machinery?<P>
<h4><FONT COLOR="#000080"><A name="008A_0052">A Bit of History<A name="008A_0052"></FONT></h4></P>
The answer is largely historical. The iostreams package evolved <I>alongside</I> the Standard C library more than atop it. Both spent their earliest days hosted on the UNIX operating system, a particularly friendly environment for reading and writing files. As they have spread to other systems, both have also profited from the influence of UNIX on more modern opeaating systems. Thus, iostreams and the Standard C library have common heritage, and many common architectural features, but they nevertheless grew up separately.<P>
As a consequence, mixing iostreams and C stream operations has often led to an uneasy alliance. A <I>filebuf</I> object often performs reads and writes directly, using low-level operating system calls and managing an in-memory buffer directly. A <I>stdiobuf</I> object, by contrast, typically calls on the higher-level functions declared in <I>&lt;stdio.h&gt;</I>. The overhead per character can be <I>much</I> higher and buffering can occur in two different places within the program.<P>
C++ programmers habitually favor the former over the latter, if only for better performance. They introduce <I>stdiobuf</I> objects only when obliged to mix iostreams and C stream reads or writes to the same file. And <I>then</I> they fret over the uncertainties that inevitably arise with double buffering. Input can be consumed in greater chunks than you expect, by the two agents. Or output from the two agents can get pasted together in bigger chunks than you intend. Often, the only safe fix is to make <I>stdiobuf</I> operations completely unbuffered. And <I>that</I> often penalizes performance even more.<P>
The draft C++ Standard addresses these historical problems:<P>
<UL><li>It defines the semantics of class <I>filebuf</I> as if it performs reads and writes through a <I>FILE</I> object. The draft C++ Standard thus rides atop the detailed descriptions of file operations from the C Standard. And it gives quick answers to many questions about the effect of mixing iostreams and C stream operations.</li>
<li>It defines class <I>filebuf</I> in such a way that no <I>FILE</I> object is directly visible. The draft C++ Standard thus permits an implementation of <I>filebuf</I> atop the Standard C library, without mandating it.</li>
<li>It retains class <I>stdiobuf</I>, which is defined explicitly in terms of a visible <I>FILE</I> object. Operations are <I>unbuffered</I> by default, so programs have no synchronization surprises.</li>
<li>It nevertheless provides member functions to control whether <I>stdiobuf</I> operations can be buffered, if performance is more important to you than tight synchronization between iostreams and C stream operations.</li>
<li>It specifies that the standard objects <I>cin</I>,<I> cout</I>,<I> cerr</I>, and <I>clog</I> behave as if they designate unbuffered <I>stdiostream</I> objects, without requiring exactly that implementation.</li></UL>
The basic idea is to better define the relationship between iostreams and C stream operations, and to provide as a default less surprising semantics for mixed operations. Nevertheless, the draft C++ Standard does <I>not</I> require that existing implementations of iostreams be rewritten purely in terms of calls to Standard C library functions.<P>
One example of shared semantics is the way you open a file by name. The <I>filebuf</I> member function <I>open(const char *, ios::openmode)</I> is the agent that does the job. It effectively calls <I>fopen</I>, declared in <I>&lt;stdio.h&gt;</I>. To do so, it must map its second argument to the kind of mode string acceptable to <I>fopen</I>. Thus, for example, <I>ios::in</I> becomes <I>"r"</I>. The member function is obliged to accept only those combinations of <I>ios::openmode</I> elements for which a corresponding mode string is defined.<P>
Another example is the semantics of stream positioning. The Standard C library permits a <I>FILE</I> object to mediate both reads and writes, but only in a rather stylized way. At any given time, the input stream may be readable or the output stream may be writable, but not both. (Of course, it is also possible that <I>neither</I> stream is available.) Typically, you have to perform a stream-positioning operation to switch between reading and writing. Equally, only one stream position is maintained for both reading and writing. And an arbitrary stream position requires the unspecified information stored in an <I>fpos_t</I> object, not just a <I>streamoff</I> value.<P>
Iostreams implicitly acknowledges these limitations in several ways. By inheritance, it has the same semantic limitations on switching between extracting and inserting. (Opinions differ on this point within the Committee, however.) If you attempt to position either stream in a <I>filebuf</I> object, you position both at once. And the semantics of class <I>streampos</I> reflect the realities of the restrictions on <I>fpos_t</I> objects. (See "Standard C: The Header <I>&lt;streambuf&gt;</I>,<I>" </I><I>CUJ</I>, June 1994.)<P>
I don't want to paint too rosy a picture, however. Several Committee members begrudge almost any concession to the Standard C library in the area of file operations. They may accept the narrow need for defining the semantics of the two libraries when they work together. But some feel that the Standard C++ library is better off being defined <I>de novo</I> in this area. I personally don't see how to introduce new semantics for iostreams without massively complicating the description of, say, <I>stdiobuf</I>. Others, however, may find a way over time.<P>
<h4><FONT COLOR="#000080"><A name="008A_0053">Recent Changes<A name="008A_0053"></FONT></h4></P>
The description of <I>&lt;fstream&gt;</I> depends heavily on references to functions and types declared in <I>&lt;stdio.h&gt;</I>, for reasons I indicated above. Please note once more, however, that such language makes no promises about how classes in this header are actually implemented. The draft C++ Standard often says, for example, that function <I>A</I> calls function <I>B</I>. Generally, this means only that <I>A</I> behaves <I>as if</I> it calls <I>B</I>. If you can write a portable program that can detect whether the call occurs &#151; such as to a virtual member function that you can override &#151; the call may be obligatory. Otherwise, don't be surprised if an interactive debugger fails to detect an actual call.<P>
As I mentioned in conjunction with the header <I>&lt;streambuf&gt;</I> class <I>streambuf</I> has an added virtual member function. The public access function for it is called <I>showmany</I>. It endeavors to tell you how many characters you can safely extract with no fear of blocking while waiting for additional input. The derived classes <I>filebuf</I> and <I>stdiobuf</I> should have nontrivial overrides for this virtual member function, on systems that can supply the needed information.<P>
Once again, I note that a major change to all of iostreams is the addition of wide-character streams. The classes <I>filebuf</I> and <I>stdiobuf</I> become template classes parameterized by the type of the stream element. One instantiation, for type <I>char</I>, has essentially the same functionality as described here. Another, for type <I>wchar_t</I>, supports streams of elements from some large character set. Classes <I>ifstream</I>, <I>ofstream</I>, <I>istdiostream</I>, and <I>ostdiostream</I> change along similar lines.<P>
As before, I continue to present an implementation written just to handle <I>char</I> streams. It illustrates all the basic issues, without the additional complexity of templates.<P>
Finally, I must report that the classes <I>stdiobuf</I>, <I>istdiostream</I>, and <I>ostdiostream</I> have been voted out of the draft C++ Standard. Since they occur widely in existing practice, however, I suspect that many vendors will still choose to supply them. I, for one, am not quick to burn this useful bridge between the worlds of C and C++.<P>
<h4><FONT COLOR="#000080"><A name="008A_0054">Using <B><I>&lt;fstream&gt;</I><A name="008A_0054"></B></FONT></h4></P>
You include the header <I>&lt;fstream&gt;</I> to make use of any of the classes <I>ifstream</I>, <I>ofstream</I>, <I>filebuf</I>, <I>istdiostream</I>, <I>ostdiostream</I>, or <I>stdiobuf</I>. Objects of these classes let you read and write conventional files. You can open files by name and control them, or control files already opened under control of objects of type <I>FILE</I>. For each approach, you can choose among three patterns of access:<P>
<UL><li>read only</li>
<li>write only</li>
<li>read/write</li></UL>
I deal with each of these options in turn, first for files you open by name.<P>
<h4><FONT COLOR="#000080"><A name="008A_0055">Read Only, By Name<A name="008A_0055"></FONT></h4></P>
If all you want to do is open and read an existing text file whose name you know, construct an object of class <I>ifstream</I>. If you know at construction time what null-terminated file name <I>s</I> you wish to use, you can write:<P>
<pre>ifstream fin(s);
if (fin.is_open())
<I>&lt;file opened successfully&gt;</I></pre>
If the file is not opened successfully, subsequent extractions will fail. Note, however, that the conventional tests for failure, <I>!fin</I> or <I>fin != 0</I>, will <I>not</I> be false until after you essay such an extraction. That's why I encourage you to make the explicit test <I>fin. is_open()</I> immediately after the object is constructed.<P>
The resultant stream buffer (pointed at by <I>fin.rdbuf()</I>) does not support insertions. You can, however, close any currently open file, then open the file <I>s2</I> for reading with the two calls:<P>
<pre>fin.close(), fin.open(s2);</pre>
Naturally, you should once again test whether the open succeeded, as above. The stream position is reset to the beginning of the newly opened stream. (And the resultant stream buffer <I>still</I> does not support insertions.)<P>
You can also construct an <I>ifstream</I> object with no open file, using the default constructor. Presumably, you would later open an existing text file for reading, as in:<P>
<pre>ifstream fin;
fin.open(s);
if (fin.is_open())
<I>&lt;file opened successfully&gt;</I></pre>
Destroying an <I>ifstream</I> object closes any open file associated with it.<P>
The code I have shown so far always opens a <I>text</I> file, for reading only. A text file can be subject to a certain amount of interpretation, such as mapping the sequence carriage return/line feed to just line feed (newline). A <I>binary</I> file, on the other hand, delivers each byte from the file unchanged as a <I>char</I> value. To read a binary file, to make a file writable as well, or to invoke various other options when you open a file, you have to specify an explicit <I>open-mode</I> argument. (Naturally enough, it has type <I>ios::openmode</I>.) For all member functions that take a file-name argument <I>s</I>, the open-mode <I>mode</I> immediately follows. The first example, above, is actually equivalent to:<P>
<pre>ifstream fin(s, ios::in);
if (fin.is_open())
<I>&lt;file opened successfully&gt;</I></pre>
You have a number of options for the value of <I>mode</I>:<P>
<UL><li><I>ios::in</I>, to open an existing text file for reading</li>
<li><I>ios::out</I> / <I>ios::trunc</I>, to create a text file or to open and truncate an existing text file for writing</li>
<li><I>ios::out</I> / <I>ios::app</I>, to create a text file or to open an existing text file for writing, where each write occurs at the end of the file</li>
<li><I>ios::in</I> / <I>ios::binary</I>, to open an existing binary file for reading</li>
<li><I>ios::out</I> / <I>ios::trunc</I> / <I>ios::binary</I>, to create a binary file or to open and truncate an existing binary file for writing</li>
<li><I>ios::out</I> / <I>ios::app</I> / <I>ios::binary</I>, to create a binary file or to open an existing binary file for writing, where each write occurs at the end of the file</li>
<li><I>ios::in</I> / <I>ios::out</I>, to open an existing text file for reading and writing</li>
<li><I>ios::in</I> / <I>ios::out</I> / <I>ios::trunc</I>, to create a text file or to open and truncate an existing text file for reading and writing</li>
<li><I>ios::in</I> / <I>ios::out</I> / <I>ios::app</I>, to create a text file or to open an existing text file for reading and writing, where each write occurs at the end of the file</li>
<li><I>ios::in</I> / <I>ios::out</I> / <I>ios::binary</I>, to open an existing binary file for reading and writing</li>
<li><I>ios::in</I> / <I>ios::out</I> / <I>ios::trunc</I> / <I>ios::binary</I>, to create a binary file or to open and truncate an existing binary file for reading and writing</li>
<li><I>ios::in</I> / <I>ios::out</I> / <I>ios::app</I> / <I>ios::binary</I>, to create a binary file or to open an existing binary file for reading and writing, where each write occurs at the end of the file</li></UL>
If you also set <I>ios::ate</I> in <I>mode</I>, the file is positioned at end-of-file immediately after it is opened.<P>
<h4><FONT COLOR="#000080"><A name="008A_0056">Write Only, By Name<A name="008A_0056"></FONT></h4></P>
If all you want to do is create a new text file &#151; or truncate an existing text file &#151; then open it for writing, construct an object of class <I>ofstream</I> to control insertions into it. You can write:<P>
<pre>ofstream fout(s);
if (fout.is_open())
<I>&lt;file opened successfully&gt;</I></pre>
then insert into <I>fout</I> just like any other output stream. As with class <I>ifstream</I>, you can follow the file name <I>s</I> with a <I>mode</I> argument. If you omit the <I>mode</I> argument, as above, it defaults to <I>ios::out</I>.<P>
You can also construct an <I>ofstream</I> object with the default constructor and later create it for writing, as in:<P>
<pre>ofstream fout;
fout.open(s);
if (fout.is_open())
<I>&lt;file opened successfully&gt;</I></pre>
In either case, the resultant stream buffer (pointed at by <I>fout. rdbuf()</I>) does not support extractions. And, of course, destroying an <I>ofstream</I> object closes any open file associated with it.<P>
<h4><FONT COLOR="#000080"><A name="008A_0057">Read/Write, By Name<A name="008A_0057"></FONT></h4></P>
If you want to open a file that you can read as well as write, you need two objects to control the input and output streams. The classes <I>ifstream</I> and <I>ofstream</I> are highly symmetric, at least in this regard. Thus, you have three equally valid ways to do the job. If you don't want to open a file initially, you can write:<P>
<pre>ifstream ifile;
ostream ofile(ifile.rdbuf());</pre>
or:<P>
<pre>ofstream ofile;
istream ifil e(ofile.rdbuf());</pre>
or:<P>
<pre>filebuf fb;
istream ifile(&amp;fb);
ostream ofile(&amp;fb);</pre>
All approaches cause <I>ifile</I> to control the input stream and <I>ofile</I> to control the output stream.<P>
You can also open a file <I>s</I> in each of these three cases. Since the default values for the <I>mode</I> argument rarely make sense here, I show the argument explicitly in each case:<P>
<pre>ifstream ifile(s, mode);
ostream ofile(ifile.rdbuf());
if (ifile.is_open())
<I>&lt;file opened successfully&gt;</I></pre>
or:<P>
<pre>ofstream ofile(s, mode);
istream ifile(ofile.rdbuf());
if (ofile.is_open())
<I>&lt;file opened successfully&gt;</I></pre>
or:<P>
<pre>filebuf fb;
istream ifile(&amp;fb);
ostream ofile(&amp;fb);
if (fb.open(s, mode))
<I>&lt;file opened successfully&gt;;</I></pre>
Note that the last test for a successful open differs from the earlier ones. As usual, when the <I>filebuf</I> object is destroyed, any open file associated with it is closed.<P>
<h4><FONT COLOR="#000080"><A name="008A_0058">Controlling C Streams<A name="008A_0058"></FONT></h4></P>
The classes <I>istdiostream</I>, <I>ostdiostream</I>, and <I>stdiobuf</I> provide additional capability within the header <I>&lt;fstream&gt;</I>. They let you control files already opened under control of an object of type <I>FILE</I>. For example, the function <I>fopen</I>, declared in <I>&lt;stdio.h&gt;</I>, returns a non-null pointer to <I>FILE</I> when it successfully opens a file. Numerous other functions, declared in the same header, support C stream reads and writes to the opened file.<P>
The same header also declares three well known objects of type pointer to <I>FILE</I> that control the three standard streams:<P>
<UL><li><I>stdin</I>, controlling the standard input stream</li>
<li><I>stdout</I>, controlling the standard output stream</li>
<li><I>stderr</I>, controlling the standard error stream</li></UL>
The header <I>&lt;iostream&gt;</I> declares several <I>istream</I> and <I>ostream</I> objects that work in concert with these objects to support iostreams operations on the standard streams. You can nevertheless use the facilities in <I>&lt;fstream&gt;</I> to control, say, <I>stdout</I> with an additional object you construct.<P>
As usual, there are three patterns of access to discuss: read only, write only, and read/write. I cover them in order.<P>
<h4><FONT COLOR="#000080"><A name="008A_0059">Read Only<A name="008A_0059"></FONT></h4></P>
If all you want to do is read a stream controlled by a <I>FILE</I> object, construct an object of class <I>istdiostream</I>. You must know at construction time the argument value <I>pf</I>, of type <I>pointer to</I><I> FILE</I>. You can write:<P>
<pre>istdiostream fin(pf);</pre>
If <I>pf</I> is a null pointer, or if the stream it controls cannot be read, all subsequent insertion operations will fail. You cannot, however, test whether <I>fin</I> is associated with an open file.<P>
When <I>fin</I> is destroyed, the stream <I>*pf</I> is <I>not</I> closed. Nor should you close the stream, by calling <I>fclose(pf)</I>, before <I>fin</I> is destroyed. The call discredits <I>pf</I>, so even a subsequent attempt to <I>access</I> the pointer itself can cause a program to terminate abnormally. Worse, subsequent attempts to control the file may do all sorts of insane things that are <I>not</I> diagnosed.<P>
You can control the degree of buffering within <I>fin</I>. Initially, <I>fin.buffered()</I> returns zero, indicating that no buffering occurs. Put simply, you can alternate the calls <I>fin.get()</I> and <I>fgetc(pf)</I> and read alternate characters from the file.<P>
Once you call <I>fin.buffered(1)</I>, however, <I>fin.buffered(1)</I> returns a nonzero value. Thereafter, buffering <I>may</I> occur. Put simply, the call <I>fin.get()</I> may encourage the stream buffer associated with <I>fin</I> to gobble an arbitrary number of characters, not just the one you requested. A subsequent call to <I>fgetc(pf)</I> will not necessarily deliver the next character you would expect.<P>
If you resist the temptation to access <I>*pf</I> directly, buffering causes no problems. On the contrary, it offers the controlling stream buffer the opportunity to improve performance, sometimes considerably. A wise rule of thumb, therefore, is <I>never</I> to enable buffering for a file accessed both via a stream buffer and via C stream function calls. If the stream buffer is the sole agent accessing the file, <I>always</I> enable buffering.<P>
<h4><FONT COLOR="#000080"><A name="008A_005A">Write Only<A name="008A_005A"></FONT></h4></P>
If all you want to do is write a stream controlled by a <I>FILE</I> object, construct an object of class <I>ostdiostream</I>. You must know at construction time the argument value <I>pf</I>, of type <I>pointer to</I><I> FILE</I>. You can write:<P>
<pre>ostdiostream fout(pf);</pre>
If <I>pf</I> is a null pointer, or if the stream it controls cannot be written, all subsequent insertion operations will fail. As with an <I>istiodstream</I> object, you cannot test whether <I>fout</I> is associated with an open file. The same remarks also apply about not closing the file until <I>fout</I> is destroyed. Equally, the same considerations apply about when to buffer, or not to buffer, a stream associated with an <I>ostdiostream</I> object.<P>
<h4><FONT COLOR="#000080"><A name="008A_005B">Read/Write<A name="008A_005B"></FONT></h4></P>
Finally, if you want to both read and write a stream controlled by a <I>FILE</I> object, you need two objects to control the input and output streams. The classes <I>istdiostream</I> and <I>ostdiostream</I> are highly symmetric. Thus, you have three equally valid ways to do the job:<P>
<pre>istdiostream ifile(pf);
ostream ofile(ifile.rdbuf());</pre>
or:<P>
<pre>ostdiostream ofile(pf);
istream ifile(ofile.rdbuf());</pre>
or:<P>
<pre>stdiobuf sb(pf);
istream ifile(&amp;sb);
ostream ofile(&amp;sb);</pre>
In the third case, you enable buffering by calling <I>sb. buffered(1)</I>.<P>
<h4><FONT COLOR="#000080"><A name="008A_005C">File Positioning<A name="008A_005C"></FONT></h4></P>
Earlier, I discussed the limitations on positioning within files. Your safest bet, as always, is to memorize a file position you want to return to, as an object of type <I>streampos</I>. Later on in the program, while the file is still open, you can use the value stored in this object to return to the memorized file position.<P>
For a binary file that is not too large, you can represent a stream position as an object of type <I>streamoff</I>. You can thus perform arithmetic, on byte displacements from the beginning of a file, to determine new stream positions. The UNIX operating system represents text files the same as binary. Hence, it extends the same latitude in stream positioning to all files, not just binary. But few other systems share this simplicity. Don't write portable code that counts on it.<P>
A file opened both for reading and writing requires intervening stream-positioning requests when switching from reading to writing, or back. Again, some systems may relax this requirement, but don't count on it in a portable program.<P>
Finally, the <I>streambuf</I> virtual member functions <I>setbuf</I> and <I>sync</I> are given non-trivial semantics in the derived class <I>filebuf</I>. The former, however, is defined in terms of the function <I>setvbuf</I>, declared in <I>&lt;stdio.h&gt;</I>, which does not itself promise much. And the latter is generally called as often as necessary in the normal course of business. I recommend, therefore, that you not call either <I>pubsetbuf</I> or <I>pubsync</I>, the public member functions that call these virtual member functions on your behalf.<P>
<I>This article is excerpted in part from P.J. Plauger</I>, The Draft Standard C++ Library,<I> (Englewood Cliffs, N.J.: Prentice-Hall, 1995)</I>.<P>

<h4><a href="../../../source/1995/apr95/pjp.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
