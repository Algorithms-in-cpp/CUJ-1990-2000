

<HTML>
<HEAD>

<TITLE>April 1995/Designing a Cross-Platform GUI</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocapr.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   User Interfaces</FONT></H2>

<hr><h2 align="center"><font color="#800000">Designing a Cross-Platform GUI<A name="007F_004A"><A name="007F_004A"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="007F_0000"><A name="007F_0000">Laszlo Zeke</font></h3><hr><blockquote><P>
<P><i><A name="007F_0000"><A name="007F_0000">Laszlo Zeke has been supervising, designing, and developing GUI-based applications over 12 years. He has an M.A. in mathematics. He resides in Herndon, Virginia, and is the Director of Kernel Product Engineering for INCODE Corporation. Laszlo can be reached via e-mail at incode@netcom.com or via CompuServe at 76667,1776.</i></P><P>
<h4><FONT COLOR="#000080"><A name="007F_004B">Introduction<A name="007F_004B"></FONT></h4></P>
Sooner or later you're bound to meet a customer who likes your GUI-based application but wants it to run in his own GUI environment, different from yours. You may wish to accomodate customers such as this, but find it too expensive to maintain different code sets on different platforms.<P>
A common solution is to package the GUI-dependent pieces into an object library; the application will then use the objects implemented in this GUI library only, instead of the native GUI interfaces.<P>
You have two basic choices in implementing this type of object library: either purchase a third-party multi-platform toolkit (there are plenty), or develop your own, using the native APIs. Both approaches have their merits, as well as proponents.<P>
In this article I demonstrate the latter approach by implementing a GUI library using the native APIs of Windows/NT, OS/2, and X-Windows. This is just a sample library since the source code of a full-blown, commercial-strength library would run well over 10,000 lines &#151; obviously beyond the space available here.<P>
This article presents the class design for the platform-independent portion of the GUI, plus a sample application. I also briefly describe the platform-specific parts of the code. The platform-dependent code is included on this month's code disk, and is available from the on-line sources listed on page 3.<P>
<h4><FONT COLOR="#000080"><A name="007F_004C">Overall Library Features<A name="007F_004C"></FONT></h4></P>
An application that uses this library will have the following capabilities:<P>
<UL><li>It can have a number of windows.</li>
<li>Each window may have a different background color and frame decorations.</li>
<li>Each window can have a number of "children:" static text elements, buttons, entry fields, lines, and ellipses.</li>
<li>If a window is resized, its children are automatically resized.</li>
<li>The activation of every button and entry field causes the execution of an application-defined function.</li></UL>
<h4><FONT COLOR="#000080"><A name="007F_004D">Library Design<A name="007F_004D"></FONT></h4></P>
Ideally, I might have based my design solely on its ability to meet a given set of criteria, such as the features presented above. In reality, any design will be influenced by the tools at hand, in this case, the compilers available for the various platforms.<P>
<h4><FONT COLOR="#000080"><A name="007F_004E">Tools<A name="007F_004E"></FONT></h4></P>
I selected the following tools for these three target environments:<P>
<UL><li>Windows NT/Window 3.1: Visual C++, plus Win32s 1.2 (Win32s 1.2 is required to run applications built with this library under Windows 3.1)</li>
<li>OS/2: Borland C++ 1.5</li>
<li>AIX: Motif 1.2, X11R5: XL C++, the C++ compiler for the AIX/RISC-6000 machines</li></UL>
(Note: I am not suggesting that these tools are better than others; they are simply the tools I'm familiar with.)<P>
The code presented in this article will compile and run on each of these platforms. Since error checking would double the size of the code, I have left it out entirely.<P>
<h4><FONT COLOR="#000080"><A name="007F_004F">The General Application Framework<A name="007F_004F"></FONT></h4></P>
The library tries to make use of the common elements in the native toolkits. When there is nothing in common, the library tries to bridge the differences with the least possible effort.<P>
Although each toolkit is different, any application that uses such a toolkit will follow the same general pattern, or framework:<P>
1.     some initialization of the toolkit<P>
2.     creation of one or more windows along with their children<P>
3.     processing messages in a loop that retrieves and dispatches different messages to the different windows and to their children based upon the user's actions<P>
4.     termination with some possible cleanup<P>
To encapsulate this initialize-message loop-cleanup model, I introduce a class,<I> </I><I>GUI_APPLICATION</I> (See <A href="list1.htm">Listing 1</a>,
 a GUI-independent header file for the library). The application will create an object of this class; this object should be created first, and destroyed last in any application.<P>
The main entities an application creates are windows. These are implemented in the class <I>GUI_WINDOW</I>. A window in this context has a frame, with some possible decorations (title, maximize button, sizable-border, etc.), and usually has one or more children. This library implements the child types static text, button, entry field, line, and ellipse. The corresponding classes are <I>GUI_TEXT, GUI_BUTTON, GUI_ENTRY, GUI_LINE</I>, and <I>GUI_ELLIPSE</I>.<P>
These classes naturally fall into two groups: those implemented in the native toolkit as special native windows, and those that must be created by some drawing APIs. The two groups descend from two different base classes, since they behave differently in many respects. (For instance, most of the native windows are repainted automatically as needed, the other type are not.)<P>
The two base classes are <I>GUI_WINDOW_OBJECT</I> and <I>GUI_GRAPHICS_OBJECT. GUI_WINDOW_OBJECT</I> is the common base class for <I>GUI_TEXT, GUI_BUTTON, GUI_ENTRY</I>, and <I>GUI_WINDOW</I>, whose objects are native windows. <I>GUI_GRAPHICS_OBJECT</I> is the common base class for <I>GUI_LINE</I> and <I>GUI_ELLIPSE</I>, whose objects must be drawn explicitly by the application.<P>
Though they behave differently, these two base classes share some common elements. For instance, all of them have x and y coordinates, they have width and height, etc. To extract these and some other common characteristics, I introduce a common base class, <I>GUI_OBJECT</I>. <A href="fig1.htm">Figure 1</a>
shows the class heirarchy just described.<P>
<h4><FONT COLOR="#000080"><A name="007F_0050">Processing User Input<A name="007F_0050"></FONT></h4></P>
Most of the objects mentioned above must be able to accept user input and execute some functions based upon it. For instance, the button objects must accept a LEFT MOUSE BUTTON SINGLE CLICK event and execute an application-defined function. There are two ways to accomplish this.<P>
The first way is to store event-handler function pointers in the above-mentioned objects. The application will call the desired function through one of these pointers when a given event takes place. The other way to provide event responses is to create some virtual functions in the base class, to be overridden by an application-derived class. I chose the second approach, since it seems more modular and cleaner to me.<P>
I provide a default <I>LeftButtonSingleClick</I> function for every class, which function does nothing. Thus, a mouse click on a button of type <I>GUI_BUTTON</I> causes no harm, but not much excitement either. If you derive a class <I>MY_BUTTON</I> from <I>GUI_BUTTON</I>, and override <I>LeftButtonSingleClick</I>, then this new overridden function will be called whenever a <I>MY_BUTTON</I> is clicked. I do not use C++'s virtual function call mechanism to determine which button was pushed. To do so would require a new derived button class for practically every button in the program. Rather, I find out which button was activated by introducing a numeric ID field for every <I>GUI_OBJECT</I>, enabling a <I>switch</I> statement to be based upon this ID.<P>
These user input functions could be implemented in the <I>GUI_OBJECT</I> class, but I decided to implement them in a base class for <I>GUI_OBJECT</I>, <I>CALLABLE_OBJECT</I>. (If my class hierarchy were to grow, a new object class may not necessarily be derived from <I>GUI_OBJECT</I>, but I still might want to be able to process user input for that class.)<P>
<h4><FONT COLOR="#000080"><A name="007F_0051">Display Features<A name="007F_0051"></FONT></h4></P>
My library assumes a window-relative <I>MAX_X</I> by <I>MAX_Y</I> coordinate system, with the upper left corner as (0,0). In such a coordinate system, a window with a width of <I>MAX_X</I> spans the whole width of the screen, while a button with a width of <I>MAX_X</I> spans the whole width of its parent window. The particular values for <I>MAX_X</I> and for <I>MAX_Y</I> are not really important but they should be finer than the actual display resolution. This library uses 10,000 for both <I>MAX_X</I> and <I>MAX_Y</I>, which is a safe choice for most contemporary displays.<P>
Matching appropriate colors among the different GUI environment is a subject worth a book in itself. Therefore, I chose a very simple approach and implemented the 16 VGA colors. Font handling is another issue that naturally arises, but its complexity is beyond the scope of this article. (However, a subset of available fonts could be easily managed in all of the mentioned environments.)<P>
<h4><FONT COLOR="#000080"><A name="007F_0052">Description of Classes<A name="007F_0052"></FONT></h4></P>
In this section I describe the platform-independent portion of the class library. <A href="fig1.htm">Figure 1</a>
shows the class hierarchy. The top three layers of the hierarchy consist of abstract classes. The <I>CALLABLE_OBJECT</I> class declares several functions for responding to user input, but these are all virtual functions, hence they must be overridden and "filled in" in descendant classes. The next lower class, <I>GUI_OBJECT</I>, introduces a data member <I>id</I>, which stores an ID number for each object. Every <I>GUI_OBJECT</I> must have a unique ID. I also briefly describe class <I>GUI_APPLICATION</I> here, though it is not a member of the hierarchy.<P>
<h4><FONT COLOR="#000080"><A name="007F_0053"><I>GUI_APPLICATION<A name="007F_0053"></I></FONT></h4></P>
The <I>GUI_APPLICATION</I> class has no descendants. It serves as a wrapper around the application and maintains the main message loop. A <I>GUI_APPLICATION</I> object has four basic functions: a constructor to initialize the GUI toolkit, a destructor to clean up, a <I>MainLoop</I> function to handle the main message loop, and a <I>Terminate</I> function which breaks the message loop. This class maintains a single-linked list of <I>GUI_WINDOW</I> objects, the windows of the application.<P>
<h4><FONT COLOR="#000080"><A name="007F_0054"><I>GUI_WINDOW_OBJECT<A name="007F_0054"></I></FONT></h4></P>
<I>GUI_WINDOW_OBJECT</I> serves as an abstract base class for <I>GUI_WINDOW. A GUI_WINDOW</I> object maintains a handle to its own native window, in protected member <I>window</I> of <I>GUI_WINDOW_OBJECT.</I> Each <I>GUI_WINDOW</I> object also maintains a single-linked list of <I>GUI_OBJECT</I> objects comprising its children, such as buttons, text elements, lines, etc. (Note that these "children" are not descendants of <I>GUI_WINDOW</I>; rather, they are children in the sense that they are owned by a <I>GUI_WINDOW</I> object.) When a <I>GUI_WINDOW</I> object is created it does not appear immediately, therefore the application has a chance to create its children first. Calling <I>GUI_WINDOW</I>'s <I>Show</I> function finally makes it appear. <I>GUI_WINDOW</I> also has a function <I>Message</I> to put up a message box, and a function <I>Question</I> to ask the user a yes/no question. <I>GUI_WINDOW</I>'s <I>GetText</I>/<I>SetText</I> function pair enables an application to dynamically get/set the title of its window.<P>
<I>GUI_TEXT, GUI_BUTTON</I>, and <I>GUI_ENTRY</I> are descendants of <I>GUI_WINDOW_OBJECT</I> whose objects function as children of <I>GUI_WINDOW</I> objects. A <I>GUI_TEXT</I> object contains a non-modifiable piece of text to be displayed in the window. The user cannot change its contents. A <I>GUI_BUTTON</I> object represents a pushbutton. A <I>GUI_ENTRY</I> object represents a single-line, specified-text-length, autoscrolling entry field. These are the only two classes in this library that override the user-input functions declared in <I>CALLABLE_OBJECT</I>.<P>
Specifically, a <I>GUI_BUTTON</I> object calls the following functions:<P>
<UL><li><I>Activate</I>. The button object calls this function if the user activates the button, either through the mouse or through the keyboard</li>
<li><I>LeftClick</I>. Called when the <I>GUI_BUTTON</I> is clicked with the left mouse button</li>
<li><I>LeftDoubleClick</I>. Called when the <I>GUI_BUTTON</I> is double-clicked with the left mouse button</li>
<li><I>RightClick</I>. Called when the <I>GUI_BUTTON</I> is clicked with the right mouse button</li>
<li><I>RightDoubleClick</I>. Called when the <I>GUI_BUTTON</I> is double-clicked with the right mouse button</li></UL>
A <I>GUI_ENTRY</I> object calls the <I>Activate</I> function if the entry field is losing its focus.<P>
Supplying a <I>height</I> parameter of zero to a <I>GUI_TEXT, GUI_BUTTON</I>, or <I>GUI_ENTRY</I> object will cause it to be created with the default font height. It is also possible to dynamically get/set these objects' text via the <I>GetText</I>/<I>SetText</I> function pair.<P>
<h4><FONT COLOR="#000080"><A name="007F_0055"><I>GUI_GRAPHICS_OBJECT<A name="007F_0055"></I></FONT></h4></P>
A <I>GUI_GRAPHICS_OBJECT</I> is an abstract base class for objects that can't be represented as native windows. It has two descendants, <I>GUI_ELLIPSE</I> and <I>GUI_LINE</I>. A <I>GUI_ELLIPSE</I> object represents a filled/outlined color-specified ellipse. A <I>GUI_LINE</I> object represents a color-specified straight line.<P>
<h4><FONT COLOR="#000080"><A name="007F_0056">Class Implementations<A name="007F_0056"></FONT></h4></P>
I've divided the source for this class library (about 750 lines on every platform) into two parts: <I>gui.c</I> (<A href="list2.htm">Listing 2</a>)
 contains functions that don't use native APIs; <I>native.c</I>, provided separately for each platform, contains functions that do use native APIs. Due to space limitations, the three <I>native.c</I> files are not shown here, but are available on this month's code disk and <I>CUJ</I> online sources (see p. 3 for more information on online sources).<P>
At a structural level, each native implementation shares some common features. For example, each implementation must perform some sort of registration of a window or application with the operating system. Each implementation must interact with a main message loop and respond to messages from the system. Finally, each implementation must explicitly draw graphic objects of type <I>GUI_LINE</I> and <I>GUI_ELLIPSE</I>, rather than rely upon the native system to do the work.<P>
The greatest difference in implementations occurs between the Windows look-alikes (Windows 3.1, Windows NT, and OS/2) and X-Window. For example, X-Window requires an application to register callback functions for painting and resizing windows, while the look-alikes do this in response to system messages (e.g. <I>WM_PAINT</I>). Another significant difference appears in the way the two implementations manage to catch all mouse events for nongraphical windows. The Windows look-alikes do so by "subclassing the window," overriding the built-in window procedure for buttons. The X implementation catches such events by registering an event handler with the system.<P>
More details, as well as documentation, are provided on this month's code disk.<P>
<h4><FONT COLOR="#000080"><A name="007F_0057">A Short Demo<A name="007F_0057"></FONT></h4></P>
The application presented here (<A href="list3.htm">Listing 3</a>)
, while not extremely "useful," demonstrates how easy it is to build an application using the library. <A href="fig2.htm">Figure 2</a>
is a screen capture of the demo running on AIX/X-Windows. The application window's Exit button terminates the application, while its Next button creates an identical window, shifted a little to the upper left and displayed in a different color. The application window's entry field determines the title of the window. Both of the window's buttons react to right-mouse-button clicks with popup messages.<P>
<h4><FONT COLOR="#000080"><A name="007F_0058">Conclusion<A name="007F_0058"></FONT></h4></P>
Constructing a multi-platform GUI is not a simple task. Many problems will naturally arise that this article does not address: drawing optimization; creation of menu bars, accelerator keys, and popup menus; implementation of drag and drop operations, and z-order for children of a window; font management and national language support, just to mention a few. Some of these features can be added with relative ease (menus, optimized drawing, z-order), while others may require considerable effort (font management, drag and drop). However, if you're the kind of programmer who likes to experiment, or "roll your own," this class library should give you a good place to start.<P>
<h4><FONT COLOR="#000080"><A name="007F_0059">Information Sources<A name="007F_0059"></FONT></h4></P>
<I>Borland C</I><I>++ </I><I>for 0S/2</I> Ver 1.5, on CD-ROM. Produced by Borland International, 1994.<P>
<I>Microsoft Development Platform</I>, on CD-ROM. Produced by Microsoft Corp., 1995.<P>
O'Reilly, Tim, ed. <I>X series</I>, Release 4 and Release 5, vols. 0 - 8. O'Really &amp; Associates, 1990-1994.<P>

<h4><a href="../../../source/1995/apr95/zeke.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
