

<HTML>
<HEAD>

<TITLE>April 1995/Two Wildcard Matching Utilities</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocapr.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   User Interfaces</FONT></H2>

<hr><h2 align="center"><font color="#800000">Two Wildcard Matching Utilities<A name="0086_004C"><A name="0086_004C"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0086_0000"><A name="0086_0000">Mike Cornelison</font></h3><hr><blockquote><P>
<P><i><A name="0086_0000"><A name="0086_0000">Mike Cornelison is a systems programmer and occasional consultant working in Santa Clara, CA. He may be reached through the internet at micro@Ix.netcom.com, by phone at 408<I>-</I>970<I>-</I>5294, or by fax at 408<I>-</I>942<I>-</I>9180.</i></P><P>
<h4><FONT COLOR="#000080"><A name="0086_004D">Introduction<A name="0086_004D"></FONT></h4></P>
Have you ever had to switch to a new software development environment, only to find that some of your favorite tools were missing in the new environment? This has happened to me several times (I have been programming since 1966). Most recently, I moved from VAX/VMS to Microsoft Windows and Windows/NT, and I found myself missing the powerful VMS string matching and file searching functions.<P>
The VMS string compare function (<I>str$match_wild</I>) can handle any number of wildcard characters, and find any possible match with a candidate string. This function recognizes the wildcard character '*', which matches any number of characters (including zero), and '%', which matches any single character. For example, the wildcard string "*abc*def*gh%" would match all of the following candidate strings: "abcdefghi", "XXabcXXdefXXXghX", and "abcXdefXXghiXXXabcdefghi" (the last one is subtle).<P>
The VMS directory search function (<I>lib$find_file</I>) can handle the same wildcard notation, in both the directory tree being searched (the path), and in the file name being searched for within the path. In addition, the notation "..." may be used to indicate an arbitrary number of subdirectories within the path. For example, the directory and file specification "[aa*...*bb...]ccc.*" means: search all directories with names begining with "aa", and their subdirectory trees, for directories with names ending in "bb". Search these directories, and their subdirectory trees, for file names matching "ccc.*".<P>
As it turns out, it is not very difficult to make similar tools for the Windows and NT environments. That is the subject of this article.<P>
<h4><FONT COLOR="#000080"><A name="0086_004E"><I>MatchWild</I><B> Function<A name="0086_004E"></B></FONT></h4></P>
This function compares a candidate string to a wildcard string &#151; one containing any number of the wildcard characters '*' and '?'. The function returns <I>TRUE</I> if a match is found, or <I>FALSE</I> if not (See <A href="list1.htm">Listing 1</a>)
. <I>MatchWild</I> makes no use of system libraries, hence it will work in any system having a C compiler.<P>
The logic works as follows: the two strings are scanned in parallel. For each segment between '*'s in the wildcard string, <I>MatchWild</I> must be able to find a corresponding matching segment in the candidate string. If a given comparison fails, and the wild segment began with '*', then the function may still search for a matching segment later in the candidate string. This fairly simple logic will discover any possible match.<P>
My first version of <I>MatchWild</I> used recursion and avoided the unfashionable <I>goto</I>. It was, however, no simpler than the current version, and likely much slower. Some benchmark execution times are included in <A href="list1.htm">Listing 1</a>.
<P>
<h4><FONT COLOR="#000080"><A name="0086_004F">The <B><I>SearchWild</I></B> Function<A name="0086_004F"></FONT></h4></P>
This function (<A href="list2.htm">Listing 2</a>)
 searches a directory tree for a desired file or set of files. The directory tree is specified as a path name, using the traditional notation of DOS, Windows, and Windows/NT. <I>SearchWild</I>'s objective is to find all possible files in all possible paths that match a given path and file name, where both the path and file names may contain the wildcards '*' and '?'. This function also allows a third wildcard notation, the VMS<I>-</I>style "..." to indicate any number of nested subdirectories. The path and file name notation is best clarified with an example:<P>
<pre>   d :\aaa*...\*bbb...\cc*.d??</pre>
This means: disk drive d, all top level directories matching "aaa*", all underlying subdirectories matching "*bbb" (with any number of in-between subdirectories), all underlying files matching "cc*.d??" (again with any number of in-between subdirectories). The following two files would match this specification:<P>
<pre>   d:\aaa\bbb\cc.d12
   d:\aaaxx\xxxx\yyyy\xxbbb\xxx\ccxx.d23</pre>
At first glance, <I>SearchWild</I> seems simple to implement. After all, DOS, Windows, and Windows/NT all offer basic directory search functions (<I>FindFirstFile</I> and <I>FindNextFile</I>) which are capable of some wildcard handling. Specifically, these functions accept wildcards in the last name of a path, which may be a file name or another directory name. A program could use these functions to iteratively search down several levels of directory names containing wildcards, one level at a time. Using the above example, the search would start with "d:\aaa*" to find the desired top-level directories. Within each directory found (e.g. "aaaxx"), the search would then progress to directories and files at the next level down, (e.g. "d:\aaaxx\*") and these could be matched to the next desired name "*bbb", and so on. It would all be easy, if not for the "..." notation. Implementing this last feature requires a more sophisticated approach.<P>
<I>SearchWild</I> uses recursion to make the messy logic into something almost simple. It's entire logic is summarized as follows:<P>
1.     Replace any "\xxx...\" notation with the equivalent "\xxx\...A" ("xxx") may also contain the simpler wildcards '*' and '?')<P>
2.     If no wildcards are found except in the last name (file name), then use the OS-provided search function to find the files and return all of them to caller. Done.<P>
3.     Truncate the path name after the first name having any of the wildcards '*' or '?' or "\...\"<P>
4.     If the wildcard is not "\...\"<P>
<pre> a.     Call the OS search function to get all matching file names at this level
 b.     Substitute each of these names for the wildcard name, and append remaining path\file names truncated from step #3 above
 c.     Call <I>SearchWild</I> with each of these path\file names, return all found files to caller. This is a recursive call, since <I>SearchWild</I> calls itself</pre>
5.     If the wildcard is "\...\"<P>
<pre> a.     Replace "\...\" with "\". ("\...\" can mean zero or more levels of subdirectories)
 b.     Call <I>SearchWild</I> (recursively) with this name, return all found files to caller
 c.     Replace "\...\" with "\*\...\"
 d.     Call <I>SearchWild</I> (recursively) with this name, return all found files to caller</pre>
<I>SearchWild</I> returns one file per call until no more files are found, then it returns <I>NULL</I>. The logic depicted above is realized by going back to the current position in the code, after each new entry from the caller.<P>
The recursive calls to <I>SearchWild</I> result in efficient execution since only the necessary directories are searched, and no others.<P>
I have tested the code in <A href="list2.htm">Listing 2</a>
for Windows/NT. It should work for DOS or Windows 3.1, with only minor adjustments. Note that the OS functions <I>FindFirst/Next</I> support multiple search contexts, which is necessary for this method to work. <I>SearchWild</I> does not support multiple contexts. This could be done, using dynamic allocation of memory for each new context. If the caller abandons a search before it is completed, memory can be lost. Hence, another call type is needed, to allow the caller to abandon a search and recover the dynamic memory.<P>
I welcome your questions or suggestions. Please contact me at the phone number or e-mail address shown in my bio.<P>

<h4><a href="../../../source/1995/apr95/cornel.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
