<HTML>   
     <HEAD>
<TITLE>July 1999/We Have Mail</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjul.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Departments</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">We Have Mail</FONT></H2>

<hr>
<BLOCKQUOTE>

<I>Letters to the editor may be sent via email to </I>cujed@mfi.com<I>, or via the postal service to Letters to the Editor, </I>C/C++ Users Journal<I>, 1601 W. 23rd St., Ste 200, Lawrence, KS 66046-2700.</I></p>

<hr>
<p>Editor,</p>
<p>I have a program that uses <B>&lt;string&gt;</B> class to construct SQL statements on the fly. Performance is very important as we are creating millions of these at a time. In benchmarks I've created it appears that <B>basic_string</B> is quite a bit slower (greater than 10X) than using <B>char[]</B> and standard library functions like <B>strcat</B>. I suspect the problem is that memory is getting allocated/deallocated every time an assignment is performed on the string.</p>
<p>My question is, is there anything you can do with <B>basic_string</B> to specify a maximum size so that new/deletes don't get done all the time? In other words, can you declare an arbitrary size not to exceed? Or should I not be using <B>basic_string</B> for things like this? I've tried going to the source (MS VC++ v6.0) but I'm still in the process of learning/understanding the subtleties of the STL programming style. Your thoughts?</p>
<p>efisher4@csc.com</p>

<p><I>Template class </I><B>basic_string</B><I> does indeed have a </I><B>reserve</B><I> member function that preallocates storage. But the class tends to trim storage on an assignment, so it may not give you what you want, unless you replace assignment with an erase plus an insert (kind of a kludge). You can also try a </I><B>vector&lt;char&gt;</B><I>, which tends not to trim quite so often. In any case, you'll have to experiment. Good luck. &#151; pjp</I></p>

<hr>

<p>Hello,</p>
<p>I read your article in the April 1999 <I>C/C++ Users Journal</I> about Unicode files. It was a pretty good introduction, and considering how most college grads never get exposed to this material, I'm glad someone addressed the issue.</p>
<p>However, I did notice a problem with your description of the Unicode byte order mark. The Unicode Standard Version 2.0, Section 2.4 defines the byte order mark as <B>0xfeff</B>, not <B>0xfffe</B>. Stream implementations should always write out the character <B>0xfeff</B>, letting the byte order on disk define the endianness of the file. So the rule is if a reader sees <B>0xfffe</B> then bytes should be swapped, but seeing <B>0xfeff</B> requires no byte swapping, allowing stream implementations to use <B>memcpy</B> for any internal buffer copying. The performance gains are generally worth the added code complexity.</p>
<p>Interestingly, <B>0xfeff</B> is also defined as a non-breaking space character that can occur in the middle of a stream, although I hear this usage has been deprecated in version 3 of the Unicode Standard.</p>
<p>Brian Grunkemeyer<br>
Software Design Engineer</p>

<p><I>That'll teach me to write code from memory, instead of looking up the details of a specification once again. Thanks for pointing out the error. &#151; pjp</i></p>

<hr>
<p>Sir,</p>
<p>For information on the various methods for encoding Japanese characters, you and your readers might find the following book to be of value:</p>
<p>Ken Lunde. <I>Understanding Japanese Information Processing</I> (O'Reilly, 1993), ISBN: 1-56592-043-0.</p>
<p>Best regards,</p>
<p>Jim Butler<br>
Cimetrics Inc.<br>
jimbutler@cimetrics.com</p>

<p><I>Thanks &#151; pjp</I></p>

<hr>
<p>Dear <I>CUJ,</I></p>
<p>I really liked Mr. Stroustrup's article on learning C++ (<I>CUJ,</I> May 1999). I totally agree with his thesis. However, his example is a bit poor. Reading a string into a variable using the <B>scanf</B> function is horrible. Does anybody do this? I use <B>fgets</B> simply to avoid the buffer overrun that he mentions. I would hope that most C programmer do. My code, for his example, would be:</p>

<pre>
#include &lt;stdio.h&gt;
int main(int argc, char *argv[])
{
  const int max=20; /* max length */
  char name[max];
  printf
    ("Please enter your name: \n");
  fgets(name,max,STDIN);
  printf("Hello %s\n",name);
  return 0;
}
</pre>

<p>The only "problem" with this code is that the variable <B>name</B> may or may not contain a newline and/or a terminating null. So I guess to be totally fair, the code might be:</p>

<pre>
#include &lt;stdio.h&gt;
int main(int argc, char *argv[])
{
  const int max=20; /* max length */
  int name2len;
  char name[max];
  char name2[max+1];
  printf
    ("Please enter your name: \n");
  fgets(name,max,STDIN);
  strncpy(name2,name1,max);

  /* make sure there's a null */
  name2[max+1]=0x00;
  name2len = strlen(name2);
  if ('\n'==name2[name2len] {
    name2[name2len]=0x00;
  }
  printf("Hello %s\n",name2);
  return 0;
}
</pre>

<p>Again, I really liked the article. Actually, I like all the articles that I understand. I'm a hobbist, not a professional C programmer.</p>
<p>John McKown</p>

<hr>
<p>Dear <I>CUJ,</I></p>
<p>In the article "Learning Standard C++ as a New Language" By Bjarne Stroustrup, <I>C/C++ User Journal,</I> May 1999, it is nice to see that even the experts can make mistakes. Even though he claims that "Thanks to long experience, I didn't make any of the obvious off-by-one or allocation errors." There are still a few beginner's errors in the program in the text of the article.</p>
<UL><p>1.  When checking for <B>EOF</B>, it will always break the way the code is written.</p>
<p>2.  The memory allocated is never freed before calling <B>quit</B>.</p>
<p>3.  <B>i</B> will never be incremented because of a typo at the end of the while loop.</p></UL>
<p>It is nice to know that even the experts are not perfect when it comes to these little typos and mistakes.</p>
<p>Gary Krone<br>
GK Software<br>
gkrone@execpc.com</p>

<hr>
<p>Dear <I>CUJ,</I></p>
<p>The core of Bjarne Stroustrup's article in the May issue is excellently done; but the frayed edges were more interesting.</p>
<p>When I was learning my third dialect of Fortran in 1957, a programmer could expect to know: the machine instructions generated by any Fortran statement, the effect of any machine instruction on every gate in the computer, the exact functionality, buffering, and timing of all I/O drivers, the function and timing of every part of the storage devices, and the details of all error detection, correction, and reporting mechanisms of all hardware and software. About 30% of my time went to coding and 70% was focused on helping engineers understand the effects of Xenon accumulation on the power output of a nuclear reactor during any series of submarine maneuvers.</p>
<p>Nothing changed very much over the decades until the day I switched from C and DOS to C++ and Windows and MFC and STL. I still love programming and C++ is a hoot, but now 70% of my time is spent on coding.</p>
<p>Before I continue with this diatribe, I want to digress to make two points. Abstraction is not necessarily simplicity. Show me it is easy to get a good grasp on the proof of Godel's theorem before you try to persuade me otherwise. Effective abstraction requires coherent, reliable, fully documented components. Is this your descriptions of Windows?</p>
<p>Mr. Stroustrup says there is no decent graphical environment for learning C++. Since virtually all C++ programs use graphics, do you sense a small dissonance? Articles warn us not to use double underscores in variable names because the experts who write the really tough internals can't succeed using normal C++ syntax and have compilers put in special hacks based on the names of variables. C++ can't really do the abstractions for essential libraries so the horrendous, arcane templates were added to allow STL. The most trivial syntax error can get you a 500-character error message from unwound templates that defies analysis. Mr. Stroustrup made four errors writing a 24-line C++ program, starting from a debugged C program! Is this the great language he is talking about?</p>
<p>Finally, an attack from a different direction. Pretend for the moment that C++ has a clean, elegant design and syntax and includes all the functionality for writing good objects. Such a paragon would be part of the problem, not of the solution, for a programmer today. A programmer often occupies the role of a politician, negotiating a set of compromises among competing constituencies. Must a program be multilingual, run on Windows 98 and NT and Unix? How much Internet, maybe have a Java version? Are all files on one computer, should we use multitasking? You can easily add 20 items to this list. Magazines are full of dozens of special technologies you can buy to cope with this chaos. We have begot a horde of Frankensteins!</p>
<p>That often deprecated Cobol never caused a fraction of this mess. Clothes or no clothes, C++ is not an emperor; it is a pet cat. Aloof, house broken, untamable, fun to play with, nice purr, and a lesser member of the household.</p>
<p>Richard Smith<br>
Spokane, WA 99202<br>
rdsmith@cet.com</p>

<p><I>Bjarne Stroustrup replies:</p>
<p>Thanks to McKown for the compliments, and yes, people do use </I><B>scanf</B><I> in the way I outlined. See for example Kernighan &amp; Pike, </I>The Practice of Programming<I>. For early stages of teaching/learning, </I><B>fgets</B><I> exposes about as much mechanism as </I><B>scanf</B><I> but it handles arrays of characters only, so you'll soon have to introduce several more functions &#151; or </I><B>scanf</B><I>. As they relate to my main thesis, </I><B>scanf</B><I> and </I><B>fgets</B><I> are roughly equivalent. They lead students directly into problems of pointers, memory management, terminating zeros, etc.</p>
<p>In reply to Gary Krone:</p>
<UL><p>1.  Fortunately, the </I><B>if (c = EOF)</B><I> error was introduced by the typesetter. It does not occur in my code or in my original text. But, sorry, I should have caught it in the galley proof.</p>
<p>2.  I relied on the free store being implicitly freed when a C or C++ program exits. Had I written a library routine, I would have had to be more careful. Similarly, I would have had to close the file in the later C style examples (the C++ style examples implicitly release all resources). On the other hand, I thought that being explicit about the resource management would have led some people to think that I was unfairly stacking the cards against the C style.</p>
<p>3.  Again the </I><B>itt;</B><I> error was introduced by the typesetter. It does not occur in my code or in my original text. Again, sorry, I should have caught it in the galley proof.</p></UL>
<p>And yes, experts make mistakes, even silly mistakes. That is one reason why I strongly prefer to work at a level of abstraction where there are fewer "silly mistakes" to make and in a language that provides good compile-time checking.</p>
<p>Finally, Richard Smith's letter covers a number of topics, many of which have nothing to do with C++. But let me respond to what I see as the two main threads &#151; comments on templates and comments on Windows.</p>
<p>Templates are integral to C++ and essential. They were envisioned early in the design of C++ rather than "added to allow STL." Without templates, users of containers would have to resort to inefficient type tests and/or potentially unsafe type conversions &#151; as they did in early C++ and as they do in languages with insufficiently expressive type systems. The elegance and efficiency of the STL demonstrate the utility of templates as they appear in C++.</p>
<p>In the context of teaching and learning C++, poor error messages relating to templates can indeed be a serious problem. Providing much better error reporting is not hard, though. I hope to see significant improvements next year when the main effort to reach ISO conformance will be complete.</p>
<p>I'm the designer of C++, not the designers of Windows and MFC. If you have problems with Windows, please take your complains to Redmond rather than to me.</p>
<p>I'm quite aware of the problems of producing real-world software, but the article addressed approaches to C++ and programming. It is not an attempt to exhaustively enumerate the problems faced by software developers. One of the problems with some current environments is exactly that abstraction techniques have not been effectively applied. I agree that abstraction isn't a panacea. However, my paper demonstrates how abstraction supported by effective language constructs can package concepts (such as strings, vectors, and sorts) for ease of use. Anyone who claims to have a panacea is IMO peddling snake oil.</p>
<p>Bjarne Stroustrup<br>
http://www.research.att.com/~bs</I></p>

<hr>
<p>Hi,</p>
<p>I just want to make a comment regarding the use of the <B>finalize</B> method as a substitute for destructors in Java. I agree with what Chuck Allison said, and indeed the <B>finalize</B> method cannot be depended on to do any kind of important cleanup. But it should not be written off completely, because the <B>finalize</B> method is a useful debugging/checking tool.</p>
<p>Instead of relying on the <B>finalize</B> method, one should do the cleaning of any resources manually, but the <B>finalize</B> method can be used to check for conditions under which the cleanup was not done properly.</p>
<p>For example, suppose we have the following class:</p>

<pre>
public class XYZ {
     
protected SomeIOStream stream;
. ....
public void closeXYZ() {
   stream.close()
   stream = null;
}
     
public void finalize() {
   Assert.check( null == stream );
}
     
} // XYZ
</pre>

<p>On a JVM that has <B>finalize</B> implemented "correctly," it will do some checking to see if the user of the class has forgotten to call <B>closeXYZ</B> to clean things up.</p>
<p>Regards</p>
<p>Sheng-Te Tsao</p>

<p><I>Chuck Allison replies:</p>
<p>Thank you for your insight. I added a statement to that effect in my July article, since I speak of finalize again.</p>
<p>Chuck Allison<br>
cda@freshsources.com</I></p>

<hr>
<p>Dear Dr. Plauger,</p>
<p>When I pass a C string contained in the STL <B>string</B> class to a function accepting a <B>const char*</B>, I use <B>c_str()</B>:</p>

<pre>
void func(const char* cstr)
{/*does something*/}
     
string str="my string";
func(str.c_str());
</pre>

<p>It will be more intuitive to have user-defined conversion operator in <B>basic_string</B>:</p>

<pre>
template&lt;class _E,
    class _Tr = char_traits&lt;_E&gt;,
    class _A = allocator&lt;_E&gt; &gt;
class basic_string {
 public:
...
operator const _E* () const
{return c_str();}
...
};
</pre>

<p>In this case I can rewrite call to <B>func</B> from above as:</p>

<pre>
func(str);
</pre>

<p>What was the reason not to include it in the <B>basic_string</B> class? I'm using MS Visual C++ 5.0, and STL files have your copyright. Maybe it is different from other versions of STL?</p>
<p>Respectfully,</p>
<p>Leonid Tochinski<br>
leonid@enter.net</p>

<p><I>It is generally a dangerous practice to have implicit conversions both to and from a common data type, such as </I><B>int</B><I> or </I><B>const char *</B><I>. It's too easy to create ambiguities and unexpected conversions. The designers of the string class in the C++ Standard were well aware of this danger. Thus, they took the conventional prudent course of omitting the free conversion to a </I><B>char</B><I> pointer. &#151; pjp </I>o</p>

</BLOCKQUOTE>
</BODY>
</HTML>
