<HTML>   
     <HEAD>
<TITLE>July 1999/A Java Skeleton Code Generator</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjul.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Software Tools</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">A Java Skeleton Code Generator</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Pat Paternostro</FONT></H3>

<BLOCKQUOTE>
<p>Maybe Java isn't as portable as advertised, but this handy generator makes it more so.</p>
</BLOCKQUOTE>

<hr>
<BLOCKQUOTE>

<p>If you program in Java, it is not unusual for you to have multiple versions of the JDK (Java Development Kit) installed on your computer. If you are like me, you probably use certain JDK versions for specific projects. When I am working on a new project I usually start out with the basic "skeleton" code necessary for that specific project. For example, I might be working on a Java GUI application written in JDK 1.1.x that uses Swing components. I might also be working on a combination Java applet and GUI application written in JDK 1.0.2 that uses AWT (Abstract Window Toolkit) components and contains a standard menu. Either way, I find myself writing the same skeleton code or copying existing code from another project. I decided to create a Java GUI application, written in JDK 1.1.x, that generates the minimal skeleton code necessary for the different Java program types. I call it, appropriately enough, Skeleton.</p>

<h4><FONT COLOR="#000080">The Skeleton User Interface</FONT></h4>

<p>I have identified four basic Java program types: a console application, a GUI application, an applet, and a combination of an applet and a GUI application. The last program type is possibly the most desirable and functional of the four, since it will run as an applet and as a GUI application from the same source code. (Note: you must take care not to add methods specific to either the applet or GUI program type; that would break the duality of the code.) I include support for both the AWT and Swing components and all the major versions of the JDK (1.0.2, 1.1.x, and 1.2.x) as well as adding menu support for the GUI program types.</p>
<p>I chose a simple design for the application's user interface. As you can see from <a href="fig1.htm">Figure 1</a> the application is pretty intuitive. You select the desired functionality from the provided choices and click on the Generate button to generate the skeleton code.</p>

<h4><FONT COLOR="#000080">Code Generation Specifics</FONT></H4>

<p>A partial listing of the skeleton code generator appears in <a href="fig2.htm">Figure 2</a>. (The function bodies are not shown. The full source code is available from the <I>CUJ</I> ftp site. See p. 3 for downloading instructions.) The Skeleton application is made up of three classes, <B>Skeleton</B>, <B>SkeletonFrame</B>, and <B>MessageBox</B>, located in <B>Skeleton.java</B></p>
<p>The <B>Skeleton</B> class contains only one method, <B>main</B>, which is the entry point for all Java applications. The <B>main</B> method simply instantiates the <B>SkeletonFrame</B> class, where the heart of the application resides.</p>
<p>The <B>SkeletonFrame</B> class extends the <B>java.awt.Frame</B> class and implements three event listeners: <B>java.awt.event.ActionListener</B>, <B>java.awt.event.TextListener</B>, and <B>java.awt.event.ItemListener</B>. All the application's components, except for the label components, are declared as instance variables for easier referencing later in the code. There is one instance variable that is worth mentioning. It is the <B>java.lang.String</B> instance variable <B>newLine</B>. This variable contains the string representation of the operating-system-specific line separator, which is used to separate lines of generated code. This instance variable makes the Skeleton application platform-independent; different operating systems (e.g., Unix, MacOS, Win 95/98/NT) represent the line separator differently.</p>
<p>The <B>itemStateChanged</B> method enables and disables components based on selections made to the user interface. For instance, the Add Standard Menu to GUI Program checkbox is enabled only when selecting a GUI program type (GUI or Applet/GUI) or when selecting an Applet using Swing components. Also, the Swing Components radio button is enabled only when selecting either the JDK 1.1.x or JDK 1.2.x radio buttons, since Swing components are not supported in a JDK 1.0.2 applet or GUI program.</p>
<p>The <B>textValueChanged</B> method enables and disables the Generate button based on the length of text in the Java Source File Name field. This prevents the user from clicking on the Generate button without first typing something in for a filename.</p>
<p>Clicking the Generate button causes the generator to check if the filename typed in contains a <B>.java</B> extension. If no <B>.java</B> extension is given, one is appended to the filename. The generator then determines whether the file already exists, and displays a warning dialog box if it does. If the file already exists the application does not progress past this point; otherwise, the file is created and one of the code generating methods is called based on the program type selection made.</p>
<p>The <B>generateConsoleApp</B> method is called when you select the Console program type and click on the Generate button. The generated code for this program type is minimal. An example appears in <a href="fig3.htm">Figure 3</a> <a href="#1">[1]</a>.</p>
<p>The <B>generateApplet</B> method is called when you select the Applet program type and click on the Generate button. If the user has elected to use Swing components for the applet, this method adds a menu bar to the applet if the Add Menu to GUI Program checkbox is checked. Unlike AWT applets, Swing applets support the addition of a menu bar.</p>
<p>The <B>generateAppletGUI</B> method is called when you select the GUI or Applet/GUI program types and click on the Generate button. This method's code determines the JDK version chosen as well as if the Swing Components radio button is selected. The only difference you will notice between choosing JDK 1.1.x using Swing components versus choosing JDK 1.2.x using Swing components is that the <B>import</B> statement is different (<B>com.sun.java.swing.*;</B> vs. <B>javax.swing.*;</B> respectively). The code generated from this method takes into account the Java version selected, ensures that the generated code uses the proper event-handling model, and uses non-deprecated methods. For example, if JDK version 1.0.2 is selected, this method generates hierarchical event model code; otherwise it generates delegation event model code. Also, when viewing the generated code for the Applet/GUI program type you will notice that it determines if an AppletContext exists. This prevents the <B>System.exit</B> method from executing in the context of an applet, which should never be allowed to happen. An example of code generated via this method appears in <a href="fig4.htm">Figure 4</a> <a href="#1">[1]</a>.</p>
<p>The <B>MessageBox</B> class is a helper class that extends the <B>java.awt.Dialog</B> class and is used to display both error and informational messages.</p>

<h4><FONT COLOR="#000080">Conclusion</FONT></H4>

<p>The application presented here can be a great time saver when starting a new Java project. You can extend and enhance the code as changes to the JDK occur or to fit your individual needs.</p>

<h4><FONT COLOR="#000080">Note</FONT></H4>

<p><a name="1"></a>[1]  In <a href="fig3.htm">Figures 3</a> and <a href="fig4.htm">4</a>, the class names are automatically generated based on the filename typed in by the user.</p>

<p><i>Pat Paternostro is the Director of Education for Tri-Com Consulting Group, located in Rocky Hill, CT. Tri-Com provides programming services for a wide variety of development tasks. You can reach Pat at <B>ppaternostro@tricomgroup.com</B>.</i></p>

<h4><a href="../../../source/1999/jul99/paternos.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY>
</HTML>
