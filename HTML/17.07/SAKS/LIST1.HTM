<HTML><HEAD>
<TITLE>July 1999/C++ Theory and Practice/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1:	A class template for deeply-const pointers, with constructors, conversion operators, and -&gt; operators</A></h4>
<pre>
// deep.h

#ifndef DEEP_H_INCLUDED
#define DEEP_H_INCLUDED

template &lt;typename T&gt;
class deep_pointer
    {
public:
    deep_pointer();
    deep_pointer(T *p);
    operator T *&amp;();
    operator T const *const &amp;() const;
    T *operator-&gt;();
    T const *operator-&gt;() const;
private:
    T *actual_pointer;
    };

template &lt;typename T&gt;
inline
deep_pointer&lt;T&gt;::deep_pointer()
    {
    }

template &lt;typename T&gt;
inline
deep_pointer&lt;T&gt;::deep_pointer(T *p)
    : actual_pointer(p)
    {
    }

template &lt;typename T&gt;
inline
deep_pointer&lt;T&gt;::operator T *&amp;()
    {
    return actual_pointer;
    }

template &lt;typename T&gt;
inline
deep_pointer&lt;T&gt;::operator T 
    const *const &amp;() const
    {
    return actual_pointer;
    }

template &lt;typename T&gt;
inline
T *deep_pointer&lt;T&gt;::operator-&gt;()
    {
    return actual_pointer;
    }

template &lt;typename T&gt;
inline
T const *deep_pointer&lt;T&gt;::operator-&gt;() const
    {
    return actual_pointer;
    }

#endif

</pre>
</BODY>
</HTML>
