<HTML>   
     <HEAD>
<TITLE>July 1999/Uncaught Exceptions</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjul.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Uncaught Exceptions: Building Sand Castles</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Bobby Schmidt</FONT></H3>

<BLOCKQUOTE>
<p>A plea for writing Standard C++ instead of (even very popular) dialects, followed by an assortment of clever Standard C++ tricks.</p>
</BLOCKQUOTE>

<hr>
<BLOCKQUOTE>

<p><I>Copyright &copy; 1999 Robert H. Schmidt</i></p>

<p>I'm in the midst of an e-debate with Scott Meyers over virtual base classes. Like the proverbial blind wise men describing an elephant, Scott and I each see different "truths" depending on which part of the C++ Standard elephant we grab. I hope to have a resolution next month; if so, I'll summarize the debate here.</p>
<p>The C++ Standard captures the collective experience and wisdom of many people over many years, yet the work is still under-specified and fallible. This is not a slam on the Standard or its authors, but rather is a testament to the complexity of what's being standardized. In some ways the C++ language might be mankind's most complex logical invention yet.</p>
<p>I'm left wondering how much we can trust other software technologies of less deliberate pedigree. For example, I first learned Windows version 2.1 in 1989. Even then I found the program interface specification to be woefully inadequate. Now, if the popular press is to be believed, the source for Windows 2000 numbers into the tens of millions of lines. Can the collateral specification possibly be even close to complete?</p>
<p>Consider: in the time since <I>The Annotated C++ Reference Manual</I> (a.k.a. The ARM) first appeared, Microsoft has released no fewer than six major Windows versions, significantly expanding the breadth and depth of the program interface each time. Many features of Standard C++ are still largely compatible with the original ARM. In contrast, how much of today's Windows programming is still compatible with the contemporary Windows 3.0 SDK?</p>
<p>This is the principle reason I stopped being a Windows-only programmer years ago, and started writing for a Standards-oriented magazine like <I>CUJ.</I> I tired of building sand castles, spending time and energy mastering a technology, only to watch the next commercial release wash it away. The language standardization pace may rival that of continental drift, but the end result will stand long after the next Windows tsunami.</p>

<h4><FONT COLOR="#000080">Chicken and Egg</FONT></H4>

<h4><FONT COLOR="#000080">Q</FONT></H4>

<p> Dear Bobby,</p>
<p>I've been trying to write a function that returns a pointer to itself. I can't figure out how to declare it. So far, I've been able to do the following:</p>
<pre>
typedef void * (*PFPV)();
     
void *f()
    {
    /* ... */
    return f;
    }
     
int main(void)
    {
    PFPV p = f;
    while (p = (PFPV) p())
        ;
    return 0;
    }
</pre>

<p>I'd like to get rid of the cast in <B>main</B> so that the <B>while</B> loop is:</p>

<pre>
while (p = p())
    ;
</pre>

<p>I thought up this piece of code one day while experimenting with functors and wondered what it could be used for. I think I could implement a state machine with it, using functions to implement the different states.</p>
<p>Anyway, every time I try to figure out how to declare the return type of <B>f</B>, my mind seems to go into a recursive loop: <B>f</B> is a function that returns a pointer to a function that returns a pointer to a function that returns ...</p>
<p>Can you help?</p>
<p>Thanks. &#151; Marlon Nelson</p>

<h4><FONT COLOR="#000080">A</FONT></H4>

<p> This is an intriguing problem, one I've not thought about before. To better see the dilemma, consider the C or C++ function:</p>

<pre>
T f()
    {
    return f;
    }
</pre>

<p>If <B>T</B> is to truly represent a pointer to <B>f</B> &#151; that is, if <B>T</B> is to be a pointer to a function returning itself &#151; then it needs a definition like</p>

<pre>
typedef T (*T)();
</pre>

<p>Sadly, such a self-referential definition won't compile. To get around this, you might be tempted to introduce a second definition:</p>

<pre>
typedef U (*T)();
</pre>

<p><B>T</B> now references <B>U</B> instead of itself, apparently resolving the self-reference problem. But what is <B>U</B>? Well, if <B>T</B> is supposed to be a pointer to <B>f</B>, <B>U</B> represents what <B>f</B> returns. Since <B>f</B> returns a <B>T</B>, we are led to</p>

<pre>
typedef T U;
typedef U (*T)();
</pre>

<p>This is hardly an improvement.</p>
<p>You can try other detours &#151; a pointer to a pointer, an out parameter instead of a return value, a reference instead of a pointer &#151; but you'll wind up in the same dead end: <B>T</B> can't be a pointer to <B>f</B>. In fact, <B>T</B> can't even be another function pointer type that converts from a pointer to <B>f</B> <a href="#1">[1]</a>.</p>
<p>Well then, can you convert a pointer to <B>f</B> into a non-function pointer? As you found, the apparent answer is "yes":</p>

<pre>
typedef void *T;
</pre>

<p>Regrettably, this solution has two principle flaws:</p>
<UL><LI>Once <B>f</B> converts itself to a <B>void *</B>, all of its type information is lost. <B>p</B> has no clue that it holds the address to a function, let alone that the function has <B>f</B>'s signature.</LI>
<LI>According to the language Standards, <B>void *</B> can hold any object pointer <a href="#2">[2]</a> &#151; but the address of <B>f</B> is a function pointer, not an object pointer. As a result, the above code is not conforming, although it might still work on your implementation <a href="#3">[3]</a>.</LI></UL>
<p>If any Diligent Reader has a portable and robust solution to this problem, please let me know.</p>

<h4><FONT COLOR="#000080">Scoped Enumerations</FONT></H4>

<h4><FONT COLOR="#000080">Q</FONT></H4>

<p> I recently discovered a problem with the following code. I think it's valid C++ code; someone else said it isn't, but we are not sure. Perhaps you could enlighten me a bit, and I would like to hear your opinion about this:</p>

<pre>
class foo
    {
public:
    enum button
        {
        ADD = 1024
        };
    enum test
        {
        test1 = button::ADD + 1024
        };
    };
     
int main()
    {
    int x = foo::button::ADD;
    // ...
    }
</pre>

<p>The question: is the <B>button::ADD</B> usage as an enumerator definition correct or not? And can I use the code shown in <B>main</B>? I think yes, the other guy thinks no. He says that this usage is only valid as a <I>nested-name-specifier,</I> I think the <B>::</B> scope operator can be used to qualify type-names.</p>
<p>Who is right? The code above is accepted by VC++ but other compilers fail. &#151; Robert M. Muench</p>

<h4><FONT COLOR="#000080">A</FONT></H4>

<p>What interesting timing &#151; this same question recently made the rounds on <B>comp.lang.c++</B>. I'm sorry to tell you, but "the other guy" is right. According to the C++ Standard in 3.4.3p1 ("Qualified name lookup"):</p>

<BLOCKQUOTE><p>The name of a class or namespace member can be referred to after the <B>::</B> scope resolution operator applied to a <I>nested-name-specifier</I> that nominates its class or namespace. During the lookup for a name preceding the <B>::</B> scope resolution operator, object, function, and enumerator names are ignored. If the name found is not a <I>class-name</I> or <I>namespace-name,</I> the program is ill-formed.</p></BLOCKQUOTE>

<p>Translation: what comes before <B>::</B> must name either a class or a namespace. Since an enumeration type is neither of those things, an enumeration type name cannot come before <B>::</B>. This implies that C++ enumeration types do not form their own scopes, an admittedly confusing and inconsistent rule inherited from C.</p>
<p>As was the case last month, the fact that Microsoft's compiler accepts this does not imply that the code is well-formed <a href="#4">[4]</a>. Instead of relying on vendor-specific behavior, try</p>

<pre>
class foo
    {
public:
    struct button
        {
        enum
            {
            ADD = 1024
            };
        };
    // ... rest same as before
    };
     
int main()
    {
    // ... same as before
    }
</pre>

<p>Now <B>button</B> is a class name that can &#151; and in fact typically must &#151; appear before <B>::</B> as you desire.</p>

<h4><FONT COLOR="#000080">Better Mousetrap</FONT></H4>

<h4><FONT COLOR="#000080">Q</FONT></H4>
<p> Hi Bobby,</p>
<p>I just read your column in the February issue of <I>CUJ</I> (yeah, your monthly build 38 :-). Just as you asked for, here is a better <B>lengthof</B> template that yields a compile-time constant.</p>
<p>The basic idea is simple &#151; if you apply <B>sizeof</B> to a function call, the call is resolved but the function is not called, and the result is the size of the return type as a compile-time constant. Example:</p>

<pre>
template&lt; int N &gt; struct Sized
    {
    char x[ N ] ;
    } ;
     
template&lt; class T, int N &gt; Sized&lt; N &gt;
        lengthof( T (&amp;)[ N ] )
    {
    Sized&lt; N &gt; x ;
    return( x ) ;
    }
     
// use: sizeof( lengthof( a ) )
// examples:
int main()
    {
    int a[ 10 ] ;
    // in compile-time constant:
    int b[2*sizeof(lengthof( a ))];
    std::cout &lt;&lt; sizeof(lengthof(b))
              &lt;&lt; std::endl ;
    return( 0 ) ;
    }
</pre>

<p>You can easily turn this into a macro:</p>

<pre>
#define LENGTHOF( a ) sizeof( lengthof( a ) )
</pre>

<p>or if you are on the "no macro" side, you can try to find a name for <B>lengthof</B> that makes the whole expression readable, like <B>sizeof( thearray( a ) )</B>. I would probably use a macro.</p>
<p>This technique is still not good for local types, which is unfortunate since the type <B>T</B> is useless for the template; but as you said, local types are not the most commonly used feature in C++.</p>
<p>Now this could be extended to multidimensional arrays, with functions to get the rank and the dimension along each axis as compile-time constants, but hey, it's your column, not mine :-).</p>
<p>Have fun. &#151; Carlo Pescio</p>

<h4><FONT COLOR="#000080">A</FONT></H4>

<p> Thanks for this technique. I don't know that I would have ever thought it up on my own.</p>
<p>Like you, I would favor the macro. With such a design, I'd change the name of the function template to <B>lengthof_</B> or something similar. This would help users avoid referencing the template directly, yet would provide a meaningful name in the intermediate code emitted by the preprocessor.</p>
<p>As for the multidimensional variation, I leave that as the dreaded Exercise for the Student.</p>

<h4><FONT COLOR="#000080">Two Great Tastes</FONT></H4>

<h4><FONT COLOR="#000080">Q</FONT></H4>

<p> Dear Bobby:</p>
<p>I have a project that I am working on. I want to know if you can mix macros and templates. For example, is this code legal:</p>

<pre>
#include &lt;iostream.h&gt;
using namespace std;
     
#define _ntostr(name) #name
     
template &lt;class T&gt;
void printout(const T &amp;t)
    {
    cout &lt;&lt; _ntostr&lt;T&gt; &lt;&lt; " value: "
         &lt;&lt; t &lt;&lt; endl;
    }
     
int main()
    {
    int x = 5;
    // Should print "int value: 5"
    // if this technique works
    printout(x);
    return 0;
    }
</pre>

<p>and will it print the desired result? Why or why not? &#151; Paul Drees</p>

<h4><FONT COLOR="#000080">A</FONT></H4>

<p> No and no. And as Mama taught me, two wrongs don't make a right.</p>
<p>You define the macro <B>_ntostr</B> to accept one parameter, yet invoke it with no corresponding arguments. I'm guessing that you expect <B>_ntostr&lt;T&gt;</B> to treat <B>T</B> as the macro argument. Lamentably, the preprocessor doesn't know about templates, and doesn't "see" arguments between <B>&lt;&gt;</B>. You have to use <B>()</B> instead, and invoke the macro as <B>_ntostr(T)</B>.   Once you make this change, the code will compile and run &#151; but the result will not be what you desire. Instead of writing</p>

<pre>
int value: 5
</pre>

<p><B>printout</B> will instead write</p>

<pre>
T value: 5
</pre>

<p>Again, the preprocessor knows nothing of templates. When it scans the sequence <B>_ntostr(T)</B> in your original program source, the preprocessor naively substitutes the string literal <B>"T"</B>. Accordingly, in the code stream emitted by the preprocessor, your source has become</p>

<pre>
template &lt;class T&gt;
void printout(const T &amp;t)
    {
    cout &lt;&lt; "T" &lt;&lt; " value: "
            &lt;&lt; t &lt;&lt; endl;
    }
</pre>

<p>If your translator lets you capture the preprocessor's output, you can see this effect more clearly <a href="#5">[5]</a>.</p>
<p>I want to add two more unrelated notes:</p>

<UL><LI>For reasons I've explained in earlier columns, I strongly recommend you avoid identifiers (like <B>_ntostr</B>) with leading underscores, especially when those identifiers are global-scope or macros <a href="#6">[6]</a>.</LI>
<LI>You should use the header <B>&lt;iostream&gt;</B> instead of <B>&lt;iostream.h&gt;</B>. The latter is no longer part of the C++ Standard.</LI></UL>

<h4><FONT COLOR="#000080">No Temps Allowed</FONT></H4>

<h4><FONT COLOR="#000080">Q</FONT></H4>

<p> Can you help prevent a common mistake? I frequently create handy little classes that save and restore current state information. I call them stack-based classes. Some people use them to prevent resource leaks, others for avoiding resource locks. The problem I have with them is that I often misuse them.</p>
<p>Consider the following class that saves and restores the current working directory:</p>

<pre>
class StDir
{
public:
   StDir( std::string inNewDir )
   {
      _getcwd(_PreviousDir, _MAX_DIR);
      _chdir( inNewDir.c_str() );
   }
   ~StDir()
   {
       _chdir( _PreviousDir );
   }
private:
   char _PreviousDir[_MAX_DIR];
};
</pre>

<p>along with the common use:</p>

<pre>
if( a==b )
{
    StDir theDirRestorer("\\temp");
    ...
}
</pre>

<p>and the common misuse:</p>

<pre>
if( a==b )
{
    StDir( "\\temp");
    ...
}
</pre>

<p>The problem in the misuse case is that the object is created and destroyed in a single statement. The intention is to have the object exist until the <B>{}</B> block exits. While I understand there may be situations where a single statement create and destroy may be meaningful, these stack-based classes are not among them.</p>
<p>This common misuse has proven to be a stumbling block for me over and over again. Do you know of any way to prevent it?</p>
<p>Thanks. &#151; Bob Boylan</p>

<h4><FONT COLOR="#000080">A</FONT></H4>

<p> What you really want are constructors that work for named objects (like <B>theDirRestorer</B>) but not for unnamed objects. If there's a way to write such constructors, I sure can't figure it out. About the closest I can come is to declare the constructor explicit, thereby preventing the related</p>

<pre>
StDir theDirRestorer = "\\temp"; // error
</pre>

<p>Fortunately for you, I was inspired by reader Drees' macro question and finally hit upon</p>

<pre>
#define StDir(x) unnamed_StDir
</pre>

<p>where <B>unnamed_StDir</B> is never defined. When you compile the undesired</p>

<pre>
StDir("");
</pre>

<p>the preprocessor snags this as a reference to the macro <B>StDir(x)</B>, replacing your original source with</p>

<pre>
unnamed_StDir
</pre>

<p>As <B>unnamed_StDir</B> is undefined, you should get a reasonably useful compile-time message like</p>

<pre>
undefined identifier 'unnamed_StDir'
</pre>

<p>pointing you to the real error.</p>
<p>Conversely, when you compile the desired</p>

<pre>
StDir theDirRestorer("");
</pre>

<p>all works as before. The macro is expecting a single argument; but as this usage of <B>StDir</B> has no arguments, the preprocessor ignores it.</p>
<p>Net result: "good" usage stays intact, while "bad" usage maps to meaningful compile-time errors.</p>
<p>Finally, before a certain someone sends me nag mail suggesting I haven't read his book well enough, I must recommend you change</p>

<pre>
StDir( std::string inNewDir )
</pre>

<p>to</p>

<pre>
StDir( std::string const &amp;inNewDir )
</pre>

<p>thereby avoiding the unnecessary creation of a temporary string object.</p>

<h4><FONT COLOR="#000080">Notes</FONT></H4>

<p><a name="1"></a>[1]  C++ Standard section 13.4 paragraph 7 ("Address of overloaded function").</p>
<p><a name="2"></a>[2]  Were this not true, the pointers returned by <B>malloc</B> and <B>operator new</B> could not be used for dynamic object creation.</p>
<p><a name="3"></a>[3]  The C Standard explicitly describes conversions between object pointers and function pointers, or between <B>void *</B> and function pointers, as a non-portable extension (section F.5.7).</p>
<p><a name="4"></a>[4]  Last month I speculated on reasons for MSVC's non-conformance. To read an illuminating and relevant interview with one of Microsoft's own, check out <B>http://msdn.microsoft.com/visualc/headlines/joninterview.asp</B>.</p>
<p><a name="5"></a>[5]  I know that both EDG's front end and Microsoft's VC++ support <B>-E</B> and <B>-P</B> switches to generate preprocessor output. I don't know if, or how, other translators achieve the same result.</p>
<p><a name="6"></a>[6]  See section 17.4.3.1.2 ("Global names") of the C++ Standard for supporting evidence.</p>

<p><i>Bobby Schmidt is a freelance writer, teacher, consultant, and programmer. He is also an alumnus of Microsoft, a speaker at the Software Development and Embedded Systems Conferences, and an original "associate" of (Dan) Saks &amp; Associates. In other career incarnations, Bobby has been a pool hall operator, radio DJ, private investigator, and astronomer. You may summon him on the Internet via <B>rschmidt@netcom.com</B>.</i></p>

</BLOCKQUOTE>
</BODY>
</HTML>
