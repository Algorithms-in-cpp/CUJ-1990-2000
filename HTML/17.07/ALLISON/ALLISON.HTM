<HTML>   
     <HEAD>
<TITLE>July 1999/import java.*</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjul.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">import java.*: Thinking in Objects</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Chuck Allison</FONT></H3>

<BLOCKQUOTE>
<p>Classes are unavoidable in Java, but instances of classes &#151; a.k.a. objects &#151; are just a plain good idea.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>You can't avoid classes in Java; they are the stuff that Java programs are made of. Every class definition is compiled into byte code in its own <B>.class</B> file. When you invoke a Java program, <B>.class</B> files load automatically as needed. But what are classes for? So far in this column I have used classes merely as containers for a static <B>main</B> method to illustrate basic language features such as primitive data types, operators, and control structures. But the power of object-oriented programming comes from objects, which are instances of a class. This month I'll introduce objects in Java.</p>

<h4><FONT COLOR="#000080">Handles and the Heap</FONT></H4>

<p>Suppose you're writing an application that deals with employees of a company, such as a personnel or payroll system. Somehow you need to represent the concept of an employee in your program. How would you do it? A C programmer would probably define an employee record with a struct that holds the pertinent data types, and then write functions that process variables of the struct type. Here's a sample definition of such a struct:</p>

<pre>
struct Employee {
    char last[20];
    char first[20];
    char title[15];
    int age;
};
</pre>

<p>and here's how you might use it in a program:</p>

<pre>
void process_employee
    (struct Employee* ep) {

    printf("{%s,%s,%s,%d}\n",
        ep-&gt;last, ep-&gt;first,
        ep-&gt;title, ep-&gt;age);
}

int main() {
    struct Employee e;
    strcpy(e.last, "Malone");
    strcpy(e.first, "Karl");
    strcpy(e.title, "Forward");
    e.age = 36;
    process_employee(&amp;e);
    return 0;
}
</pre>

<p>Compare this to the equivalent Java code in <a href="fig1.htm">Figure 1</a>. Aside from syntactic differences such as pointer indirection, using the <B>class</B> keyword instead of <B>struct</B>, and there being no semicolon after the class definition, the first important feature to note in the Java program is the <B>public</B> keyword. In Java, as in C++, you must specify the access level of class members. Java requires the access specification to accompany each member definition; you can't have sections where you implicitly define members of equal access as you do in C++. Java has four different access level specifications, listed below in decreasing amount of visibility:</p>
<UL><p>1.  Public access, denoted by the keyword <B>public</B>. Public members can be accessed anywhere.</p>
<p>2.  Protected access, denoted by the keyword <B>protected</B>. Protected members are not only accessible in derived-class methods, as in C++, but are also have package access. (See the next item &#151; I'll discuss packages in the September 1999 issue.)</p>
<p>3.  Package access, denoted by the absence of any accompanying keyword. Members with package access are visible anywhere in the package they appear. (You can think of a package as a directory.)</p>
<p>4.  Private access, denoted by the keyword <B>private</B>. As in C++, private members are visible only within their class. There is no concept of friends in Java. Instead of breaking encapsulation you use package access (more on this in September).</p></UL>
<p>The more crucial difference between the two code examples is in the declaration of the <B>Employee</B> object itself. In the C version this object resides on the stack, although I could have made it static or could have allocated it on the heap. In Java you have no choice: all objects reside on the heap. Only primitive data items and object handles live on the program stack. Whenever you create an object in Java, you must use the <B>new</B> operator, which allocates the object on the heap, and returns a <I>handle</I> to that object for local use. Some people call what the <B>new</B> operator returns a <I>pointer</I> or a <I>reference,</I> but since it behaves only partially like a C++ pointer (you can't apply any operators to it), and not like a C++ reference at all (they don't exist in Java), I along with many others prefer the term <I>handle.</I> When <B>processEmployee</B> executes in <a href="fig1.htm">Figure 1</a>, it receives a copy of the handle of the <B>Employee</B> object from <B>main</B> (which is similar to passing a pointer in C, except the indirection is automatic).</p>
<p>C++ programmers will be quick to notice something "wrong" in <a href="fig1.htm">Figure 1</a>: there is no evidence that the <B>Employee</B> object's heap memory is ever freed. Hunting for memory leaks is common sport in the C++ world, and one of the first things a C++ developer gets used to is ensuring that there is a <B>delete</B> for every <B>new</B> in a program. Java has no <B>delete</B> because it has garbage collection, which means that the JVM (Java Virtual Machine) is responsible for detecting if an object is no longer referenced and freeing its heap memory. Hurray! We don't have to worry about it! But wait a minute. What does this mean with respect to performance? Well, there is a cost, and that is still a subject of debate between advocates of the two languages. If performance is super-critical, then C++ is still probably a better choice, but for a large class of applications, especially GUI-based ones, Java is quite acceptable. Many people find that the freedom from worrying about memory leaks more than compensates for the performance gap between Java and C++, and that gap seems to be narrowing all the time.</p>

<h4><FONT COLOR="#000080">From Records to Objects</FONT></H4>

<p>The C example above is of course woefully out of date. Practically no one uses plain <B>struct</B>s anymore. Instead they use C++ so they can define methods within the <B>Employee</B> class itself. It is also usually a bad idea to give your data members public access, so the object-smart programmer makes them private and provides methods to control how data members are accessed by users. I have done this very thing in <a href="fig2.htm">Figure 2</a>. I declared the <B>get</B> and <B>set</B> methods non-static, because they operate on behalf of an <B>Employee</B> object. You invoke these methods with the dot-operator, as I did here in <B>EmployeeTest2.main</B>. As in C++, all non-static methods have a hidden <B>this</B> parameter, which is a handle to the object associated with the current invocation. Were you to call the <B>getLast</B> method, for example, the statement</p>

<pre>
return last;
</pre>

<p>would resolve to</p>

<pre>
return this.last; // same thing
</pre>

<p>because the compiler looks in the scope of the class to find a match for the identifier <B>last</B>. In the set methods I have to use the <B>this</B> keyword because I have named the input parameter identically to the associated field name. Some people really object to the extra typing and prefer something like the following instead:</p>

<pre>
public void setlast(String lst) {
    last = lst;
}
</pre>

<p>I have also removed the definition of <B>processEmployee</B> and added a <B>toString</B> method. Since all I want to do is print out a representation of an <B>Employee</B>'s data, I decided to take advantage of this special method name for convenience. When you pass <B>System.out.println</B> any object other than a <B>String</B>, it looks for a method named <B>toString</B> to convert it to a <B>String</B>.</p>
<p>You may have noticed that making the data fields private hasn't accomplished much here, since the user can still change an <B>Employee</B>'s attributes at will. Well, use your imagination. You could easily insert processing into the set methods to control the changes a user can make. The point is that the object's state is separated from its interface (i.e., its public methods), so I can change the former without affecting the latter, and users are none the wiser. This technique of hiding implementation is called encapsulation, and is crucial for creating well-behaved classes.</p>

<h4><FONT COLOR="#000080">Object Initialization and Destruction</FONT></H4>

<p>What would have happened in <a href="fig2.htm">Figure 2</a> if I had tried to print the <B>Employee</B> object before I had called the set methods for the data members? In C or C++ there's no telling what would happen, since there is always garbage in uninitialized (non-static) objects. Java, on the other hand, always initializes the fields of an object to default values before anything else happens. Primitive values are initialized to the appropriate flavor of zero and object handles are initialized to a special value represented by the keyword <B>null</B>. This initialization applies only to fields in an object, not to local variables defined in methods. If you try to use an uninitialized local variable the compiler will issue a diagnostic.</p>
<p>Default initialization is a good thing, but what you really want is a way to do your own initialization automatically when an object is created. You do this in Java the same way you do in C++, via constructors. A constructor is a method with the same name as the class, and can be overloaded, just like regular methods can. The program in <a href="fig3.htm">Figure 3</a> has two constructors, a default (i.e., no-argument) constructor and a constructor that expects one argument for each object field, respectively. These constructors execute for the variables <B>e0</B> and <B>e</B>, respectively, in the <B>main</B> method. You can see evidence of default initialization when <B>e0</B> prints.</p>
<p>The effect of defining the fields <B>last</B>, <B>first</B>, <B>title</B>, and <B>age</B> without the <B>static</B> keyword is that each <B>Employee</B> object has its own copy of those fields. For this reason, non-static fields are sometimes called instance fields (or data members, or attributes, whatever) because they apply to each instance. Likewise, non-static methods always execute on behalf of an object of their class, and are called instance methods. Sometimes you want to have a field or method that applies to an entire class, not just a particular object. These members, called class members, are defined with the <B>static</B> keyword. Since this column commenced in the beginning of this year we have seen one particular static method over and over again: <B>main</B>. When you invoke the virtual machine with a command such as</p>

<pre>
$ java Foo
</pre>

<p>the JRE (Java Runtime Environment) loads the class <B>Foo</B> from the file <B>Foo.class</B> and invokes <B>Foo.main</B>. If you leave the <B>static</B> keyword off in <B>main</B>'s definition the JRE won't find it and will report an error.</p>
<p>Likewise, if <B>Foo</B> has a static method named <B>f</B>, you can call it with the syntax <B>Foo.f()</B>.</p>
<p>The program in <a href="fig4.htm">Figure 4</a> has a static field, <B>count</B>, which keeps track of the number of <B>Employee</B> objects currently in use, and a static method, <B>getCount</B>, which yields the value of <B>count</B> on demand. Note that you can initialize a field right in its definition. If static fields require more complex initialization than can easily be put in a single expression, you can do the work in a static initialization block, as follows:</p>

<pre>
class Employee {
    static {
        &lt;do some complex stuff&gt;
        count = &lt;whatever&gt;;
    }
}
</pre>

<p>Of course you can only access static fields and methods in a static initialization block (there is no <B>this</B>). Static initialization occurs when a class is first loaded. You can also have a non-static initialization block (just remove the <B>static</B> keyword), which is called whenever any object of its class is created, no matter what constructor ultimately executes. Such a block acts as a <I>shared constructor</I> (see <a href="fig4.htm">Figure 4</a>): it executes first, followed by the particular constructor that matches the new expression. You can have multiple initialization blocks, and they execute in the order written (static first of course, as explained above).</p>
<p>Java has no concept of a destructor that executes when an object goes out of scope. This presents a problem for my object count scheme, since there is no implicit way to mark an object <I>unused.</I> The only sure way to get the job done is to do it yourself, so I've defined a <B>release</B> method to call explicitly to decrement the <B>count</B>. Of course, this simple example isn't very robust &#151; nothing will stop you from using an object after you call <B>release</B>. The only sure-fire alternative would be to define a state field that indicates whether an object is usable, and which you must manage yourself. This is definitely an inconvenience for C++ programmers using Java.</p>
<p>It is tempting to use Java's <B>finalize</B> method for a destructor. When an object is about to be garbage-collected, <B>finalize</B> will run on its behalf, if you have defined one, so you can have it do the cleanup. There are a number of problems to consider though:</p>
<UL><p>1.  Objects can be garbage-collected in any order, so you have no control over the order of object cleanup via <B>finalize</B>.</p>
<p>2.  Objects are not guaranteed to be garbage-collected at all.</p>
<p>3.  Any objects that are awaiting garbage collection when a program exits are not cleaned up.</p></UL>
<p>There is a static method in the <B>System</B> class, <B>System.gc</B>, that will invoke the garbage collector; but again, there are no guarantees. The program in <a href="fig5.htm">Figure 5</a> moves the decrement of <B>count</B> in the <B>Employee</B> class from <B>release</B> to <B>finalize</B>, and sets each object to <B>null</B> (which marks it as unreferenced and hence available for garbage collection) before invoking the garbage collector, and everything seems to work fine. But the following example, contributed by an Astute Reader, shows that you can't rely on finalize:</p>

<pre>
public class Dummy {
    public static void main(String[] args) {
        int count = (new Integer(args[0])).intValue();
        for (int i = 0; i &lt; count; i++) {
            jimbo j = new jimbo(i);
        }
        System.gc();
    }
}

class jimbo {
    private int i;
    public jimbo(int i) {
        this.i = i;
    }
    protected void finalize() {
        System.out.println(i);
    }
}
</pre>

<p>This program creates a number of <B>jimbo</B> objects, which hold consecutive integers. After these objects go out of scope, it invokes <B>System.gc</B>, but every time I run this program, regardless of the number I enter for <B>args[0]</B> on the command line, the last two objects are not cleaned up. Go figure. Bottom line, if you must deallocate resources on an object basis, do it explicitly. A practical use for <B>finalize</B> would be to verify that an object had been previously cleaned up by inspecting a flag that the clean-up routine sets, and perhaps throwing an exception or otherwise logging an error if the flag was not set.</p>

<h4><FONT COLOR="#000080">Class Relationships</FONT></H4>

<p>The usual way to express simple relationships between objects is to have them store handles to each other as needed. Consider the relationship between an employee and a <B>Department</B>. If each employee belongs to only one <B>Department</B>, then you can place a non-static <B>Department</B> field in the <B>Employee</B> class and initialize it with a <B>Department</B> object. This is also sufficient to express that a <B>Department</B> has many employees &#151; there is no need to place a list of <B>Employee</B>s in a <B>Department</B> object. (You can just traverse all the <B>Employee</B> objects looking for a particular Department.) You may, however, want to record who is the manager of each <B>Department</B>. The program in <a href="fig6.htm">Figure 6</a> defines a <B>Department</B> class and implements these relationships by defining the appropriate fields and get/set methods in each class. As you look at <B>EmployeeTest6.main</B>, remember that the arguments to the set methods and the return values from the get methods are just handles. This is why I don't need to use the <B>new</B> operator in the statement</p>

<pre>
Department d = e.getDepartment();
</pre>

<p>Objects are always referred to through handles, while the corresponding data on the heap stays put.</p>

<h4><FONT COLOR="#000080">Summary</FONT></H4>

<p>The virtues of objects are no longer confined to the research laboratory or SmallTalk shop. In fact, it's very difficult to find developers nowadays who aren't object-savvy. But whereas C++ supports different programming paradigms, you just can't use Java effectively without thinking in objects. In the next article I'll talk more about objects and how to package them.</p>

<p><i>Chuck Allison is Consulting Editor and a columnist with <I>CUJ</I>. He is the owner of Fresh Sources, a company specializing in object-oriented software development, training, and mentoring. He has been a contributing member of J16, the C++ Standards Committee, since 1991, and is the author of <I>C and C++ Code Capsules: A Guide for Practitioners</I>, Prentice-Hall, 1998. You can email Chuck at <B>cda@freshsources.com</B>.</i></p>

<h4><a href="../../../source/1999/jul99/allison.zip">Get Article Source Code</a></h4>



</BLOCKQUOTE>
</BODY>
</HTML>
