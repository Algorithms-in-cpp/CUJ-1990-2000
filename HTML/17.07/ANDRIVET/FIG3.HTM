<HTML><HEAD>
<TITLE>July 1999/A Simple XML Parser/Figure 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Figure 3:	Enumerating elements and sub-elements</A></h4>
<pre>
#include "..\..\XmlReader.h"
using namespace SimpleXMLParser;
     
char* OpenXmlFile(char* szFileName, long&amp; nSize) 
{
    ...
}
     
void ShowElemAndChilds(const Element&amp; elem, int nIndent = 0) 
// ---------------------------------------------
// Enumerate childs of elem, recursivly and 
// display their name (with identation)
//
// elem:    [in] element to display
// nIndent: [in] number of identation
// --------------------------------------------- 
{
    // Indentation (2 characters per indentation) 
    for(int i = 0; i &lt; 2 * nIndent; ++i)
        cout &lt;&lt; ' ';
    // Display the name of the element
    cout &lt;&lt; elem.GetName() &lt;&lt; endl;
     
    const Elements* pChilds = elem.GetChilds(); 
    if(pChilds == 0)
        return;
     
    // For each child
    for(Elements::const_iterator it = pChilds-&gt;begin(); 
        it &lt; pChilds-&gt;end(); ++it)
    {
        // Display the child and its sub-childs 
        ShowElemAndChilds(**it, nIndent + 1);
    }
}
     
int main()
// --------------------------------------------- 
// Entry point
// --------------------------------------------- 
{
    // Get the content of the XML file
    long nSize = 0;
    char* pBuffer = OpenXmlFile("sample.xml", nSize); 
    if(pBuffer == 0)
        return(false);
     
    try
    {
        // Parse the XML document
        Parser parser;
        const Element&amp; root = parser.Parse(pBuffer, nSize); 
        // Display the elements, starting at the root 
        ShowElemAndChilds(root);
    }
    catch(Exception e)
    {
        // Parsing error
        cout &lt;&lt; "Parsing error at line " 
             &lt;&lt; e.GetLine() &lt;&lt; endl;
    }
     
    // Delete the buffer
    delete[] pBuffer;
    return(1);
}

</pre>
</BODY>
</HTML>
