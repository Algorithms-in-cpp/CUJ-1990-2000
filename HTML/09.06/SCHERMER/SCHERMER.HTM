


<HTML>
<HEAD>

<TITLE>June 1991/Word Counting</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjun.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">Word Counting<A name="0153_00AC"><A name="0153_00AC"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0153_0000"><A name="0153_0000">L.J.G. Schermerhorn</font></h3><hr><blockquote><P>
<P><i><A name="0153_0000"><A name="0153_0000">L. J. G. Schermerhorn is a retired professor of geochemistry. A recent convert to C++, he is involved in scientific programming. Readers may contact him at Camminghalaan 10, 3981 GH, Bunnik, The Netherlands.</i></P><P>
Counting words is one of the chores that would-be authors frequently undertake. Editors, when reviewing papers submitted for publication, generally want to know the number of words in the paper. Occasionally, they also want to know the number of printable characters as well. In pre-computer days, before submitting a typescript you would count the number of words in an average page by hand and extrapolate. Modern word processors usually include a word counting utility, so it is easy to arrive at exactly the number of words in a given text. Well, maybe not always exactly.<P>
After upgrading to WordPerfect 5.1, I noticed that sometimes the word counting utility would count words and sometimes it would not, for no discernible reason. So I wrote my own word counting utility in C++, using the Zortech compiler (version 2.1). The utility also countslines, printable non-whitespace characters, and bytes. See <A href="list1.htm">Listing 1</a>.
<P>
The code is practically self-explanatory. The algorithm defines a word as a sequence of printable characters followed by white space or end-of-file. Here, white space is defined as a blank space, horizontal tab, vertical tab, line feed, carriage return, or form feed. When the program encounters white space, a control character, or EOF, it then checks the preceding character. If the preceding character is not whitespace or a control character, the program advances the word counter by one. Control codes at the beginning or at the end of a file tend to upset the score, so they are filtered out.<P>
You call the program from the command line by typing <I>wcount &lt;file name&gt;</I>. You could easily recode this in C, taking into account that I/O in C++ relies on the <I>istream</I> and <I>ostream</I> classes.<P>
I urgently needed a word counter, but after I had written and used <I>wcount,</I> I realized that I might have unintentionally reinvented the wheel. In fact, <I>K&amp;R</I> <a href="#ref1">[1]</a> present a program that flags words and counts their first characters. Leafing through the Zortech Compiler Reference, I came across the <I>wc.c</I> utility, a K&amp;R-type program, which only needs compiling (but is not quite accurate). <I>Turbo Algorithms</I> <a href="#ref2">[2]</a> shows a word counting utility that counts words by adding leading and trailing spaces to the text string, and then counting how many times a space character is followed by a non-space character.<P>
Each program this article mentions has a different definition for words in a text string: a sequence of non-space characters that is (1) unbroken (<I>K&amp;R</I>), (2) preceded by a blank (<I>Turbo Algorithms</I>), or (3) followed by a blank or EOF (as presented in this article).<P>
Zortech's <I>wc</I> and my <I>wcount</I> produce identical line and byte tallies, but <I>wc</I> is sometimes one word off the mark. (In files starting with a non-whitespace character, <I>wc</I> fails to score the first word. In other files it may register one word extra.) WordPerfect's word counting efforts are a different story. Taking the file of a recent column on dynamic file management, WordPerfect counted 3,302 words, <I>wcount</I> counted 3,840 words, and <I>wc</I> counted 3,841 words.<P>
These discrepancies worried me, so I devised a program, <I>textgen</I>, to create text files of known size in order to test <I>wcount</I>. See <A href="list2.htm">Listing 2</a>.
<P>
In C++, <I>new</I> allocates memory (here to the character array <I>text</I>), which is later freed by <I>delete</I>. (In C, <I>calloc</I> and <I>free </I>would carry out these tasks.)<P>
The random number generator, <I>rand</I>, is tricked into yielding only numbers between 33 and 126 inclusive, to be used as ASCII codes. <I>rand</I> returns an <I>int</I> that ranges from 0 to 32,767. The division <I>rand()/32768.0</I> produces the range 0.0 to 1.0 (exclusive). <I>rand</I> is not purely random, simply pseudo-random. (Knuth <a href="#ref3">[3]</a> elaborates on methods for generating pseudo-random sequences.) This program produces a sequence of ASCII codes that reappear unchanged every time the program is started<P>
This program is sufficient for creating a text string of known length. This string is segmented into words of varying length by calling <I>rand()</I> a second time, now constrained to inserting blanks at irregular intervals, and counting the blanks. The result is very cryptic, but serves the purpose. The program <I>textgen.cpp</I> can also be adjusted to insert control codes in a file.<P>
Using <I>textgen</I>, I created two text files &#151; one 10,000 bytes long and including 1,672 blank spaces, and the other 50,000 bytes long with 8,306 blanks. According to <I>wordcount</I>, they contained 1,516 and 7,544 words, respectively. According to <I>wc</I>, they contained 1515 and 7543 words. WordPerfect, after I recast the files in its format, tallied 2,336 and 11,627 words, respectively. Obviously, a text cannot contain more words than blanks plus one. I have no explanation for this inconsistency. The moral, I suppose, is never to take anything for granted that the computer tells you, in hard numbers or otherwise.<P>
<h4><FONT COLOR="#000080"><A name="0153_00AD">References<A name="0153_00AD"></FONT></h4></P>
<a name="ref1">[1]</a> Kernighan, Brian W. &amp; Ritchie, Dennis M., 1978, <I>The C Programming Language</I>. Prentice-Hall.<P>
<a name="ref2">[2]</a> Weiskamp, Keith, Shammas, Namir &amp; Pronk, Ron, 1989, <I>Turbo Algorithms, A Programmer's Reference</I>. John Wiley &amp; Sons.<P>
<a name="ref3">[3]</a> Knuth, Donald E., 1981, <I>Seminumerical Algorithms</I>, 2nd Ed., Vol. 2 of <I>The Art of Computer Programming</I>. Addison-Wesley.<P>

<h4><a href="../../../source/1991/jun91/schermer.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
