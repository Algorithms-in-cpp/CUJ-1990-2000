


<HTML>
<HEAD>

<TITLE>June 1991/Questions & Answers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjun.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Questions &amp; Answers<A name="015B_00B4"><A name="015B_00B4"></font></h2><P>
<h3 align="center"><A name="015B_0000"><A name="015B_0000">Problems With <I>float</I></h3><P>
<h3 align="center"><font color="#800000">Ken Pugh</font></h3><hr><blockquote><P>
<P><i><A name="015B_0000"><A name="015B_0000">Kenneth Pugh, a principal in Pugh-Killeen Associates, teaches C language courses for corporations. He is the author of C Language for Programmers and All On C, and was a member on the ANSI C committee. He also does custom C programming for communications, graphics, image databases, and hypertext. His address is 4201 University Dr., Suite 102, Durham, NC 27707. You may fax questions for Ken to (919) 493-4390. When you hear the answering message, press the * button on your telephone. Ken also receives email at kpugh@dukemvs.ac.duke.edu (Internet).</i></P><P>
<B>Q</B><P>
I have been programming in C for more than three years. I thought I understood the language fairly well, until I encountered this nasty problem. Could you explain to me what is happening in the following program? I compiled everything with Microsoft C 5.1, without any options.<P>
The program consists of a main program and two small subroutines: one that writes a floating point number at the starting position of a file and one that reads a floating point number at the same position in the same file. The writing routine receives its only parameter (the floating point number to write) by value. The reading routine has no arguments, and returns the floating point number read.<P>
In the main program (<A href="list1.htm">Listing 1</a>)
, I open an (existing) file, write a floating point number at the starting position, and read it again with the reading routine. Everything OK. Then I call the writing routine to write the same floating point number, and the reading routine to read it out again. This does not seem to work. The value read does not equal the value written (see program <I>test1.c</I>).<P>
In a second version, <I>test2.c</I>, (<A href="list2.htm">Listing 2</a>)
 I could work around the problem, by changing the writing routine a little. I first copied the function argument to a local variable, which I then wrote to the file. This works correctly, although I do wonder why I get 123.449997 instead of 123.450000. (One would expect that the variable read contains exactly the same bitpattern as the variable written, so that it prints the same way, too.)<P>
I thought something might be wrong with the way in which the writing routine receives its parameter, so I declared the function with an argument list, <I>test3.c</I> (not shown here). When compiling this program, I got a warning at line 86 (the header of the writing routine): "parameter 1 declaration different".<P>
Then I split the program into two parts: <I>test4.c</I> (not shown here) and <I>test4a.c</I> (<A href="list3.htm">Listing 3</a>)
, one containing the main program and the function declarations, the other containing the two subroutines. This compiled without warnings, and the floating point number was read correctly. However, I could not print the value of the floating point number in the writing routine (although it was correctly written to the file).<P>
In my last test I replaced all<I> </I><I>floats</I><I> </I>with<I> </I><I>doubles</I>. All four versions worked well.<P>
I look forward to reading your answers in <I>CUJ</I> (which, by the way, I recommend to any C programmer I meet).<P>
Hugo Calleens<br>
Deinze, Belgium<P>
<B>A</B><P>
This is an example of float to <I>double</I> parameter conversion. In the K&amp;R version of C, all floating point parameters were passed as <I>doubles</I>. Even if you declared the parameter as a <I>float</I>, it was treated as a <I>double</I>. This simplified the life of the compiler. Prior to prototypes, it had no idea of the type (<I>float</I> or <I>double</I>) the parameter was declared in the called function. (This also happened with <I>char</I> parameters that were treated as <I>ints</I>).<P>
You could have declared:<P>
<pre>int w(f)
float f;</pre>
as<P>
<pre>int w(f)
double f;</pre>
and the same eight bytes would be allocated for <I>f</I>. When you wrote out the value of <I>f</I>, you wrote <I>sizeof(float)</I> bytes, which only wrote the first four bytes out. That was not the most-significant part of the eight-byte number. (If it had been, you would have just had a slight rounding problem, rather than a complete error). If you had specified <I>sizeof(f)</I>, you would have written eight bytes.<P>
ANSI C does not require that the values of function parameters declared <I>floats</I> (in both the function and the prototype) be passed as <I>floats</I>. Similarly, it does not require that calculations involving <I>floats</I> be done as <I>floats.</I><P>
One solution is to do just as you mentioned &#151; use <I>doubles</I> everywhere. When I teach my courses, I usually don't mention the<I> float</I> type until the very end of the course. The only reason I use the <I>float</I> type is to save room if I have a large array of floating-point numbers. It is actually faster in many cases to use <I>doubles</I> rather than <I>floats</I>. Many math co-processors require eight-byte values. <I>floats</I> must be converted to <I>doubles</I> before they can be used in those processors. And the result must be reconverted back to a <I>float</I>.<P>
If you add the function <I>print_hex</I> (<A href="list4.htm">Listing 4</a>)
, your problems will be more apparent. Try calling it in various places with:<P>
<pre>print_hex(&amp;f, sizeof(float));
print_hex(&amp;f, sizeof(double));
print_hex(&amp;f, sizeof(f));</pre>
<B>Q</B><P>
I began reading your column about two years ago when I started teaching myself C. After initial struggles, I decided that the best method would be to use K&amp;R (second edition) as a course text, and solve all the exercises throughout the book. Although I have now finished the problems in Chapter 1, Exercise 1-18 has given some rather unusual warning messages upon compilation. The code (<A href="list5.htm">Listing 5</a>)
 was compiled using Quick C v2.5 with the small memory model and the warning level set to 1.<P>
All the warnings surround the function <I>remove</I> and appear to refer to the number of parameters. However, my inspection of the code reveals that all references to <I>remove</I> involve three parameters. The solution may by obvious, but I just don't see it. Can you help?<P>
Joseph S. Alessi<br>
Morristown, NJ<P>
<B>A</B><P>
This is a subtle problem. QuickC has defined a function <I>remove</I> in its library and included the prototype for it in &lt;<I>stdio.h</I>&gt;. It has a prototype of:<P>
<pre>int _CDECL remove(const char *)</pre>
Its purpose is to delete the file specified by filename. Your function conflicts with that function prototype.<P>
This is not strictly ANSI compatible. The Standard states that "each header declares and defines only those identifiers listed in its associated section." The section in this case refers to the input and output functions in the Standard C library. It may contain identifiers for compiler internal functions (whose names begin with an underscore).<P>
The fix? Rename your function or remove the prototype from <I>&lt;stdio.h&gt;</I>. Your choice. (KP)<P>
<h4><FONT COLOR="#000080"><A name="015B_00B5">Readers' Replies<A name="015B_00B5"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="015B_00B6">Capturing Video Screen<A name="015B_00B6"></FONT></h4></P>
In the February issue of <I>The C Users Journal</I> there was a question from a Matt Nowicki of Millersville, MD regarding how to capture a video screen. I have several answers for him.<P>
1. Unless you are using this as a learning exercise, why write a screen-capture program? With the software which came with the DAK Soul Snatcher, there are two programs which will capture screens, the Scan functions of PC PAINTBRUSH and the TSR which comes with PC PAINTBRUSH called FRIEZE. Directions for using both come with the manuals. If you don't wish to use either one of these, there are several good VGA screen-capture utilities available on your local BBS or Compuserve.<P>
2. I have a set of routines for capturing images from the Soul Snatcher available as shareware. These routines are predominantly C with some assembler for time-critical functions. There are three packages available.<P>
The first package includes just the executables for a replacement for VID, which will capture multiple screens, print dithered images directly to a Laserjet or compatible, and save files in .VID (32 shade of grey) or .<I>PCX</I> formats. It also includes a frame grabber that can grab as many frames of 32 or 64 shades of grey as your conventional and EMS memory can hold, and a viewer to play these video images back. (The grabber can grab images at about 2 frames/second on a 20MHz 386 AT clone).<P>
The second package includes the source to the programs listed above as well as a Large Model Microsoft C 5.1 library, which contains the interface routines to the Soul Snatcher. The source for the interface library is not included.<P>
The third package includes the source to the programs as well as the source to the library routines.<P>
If Matt really wants to write a screen-save routine, a good source of information is Micheal Abrash's ON Graphics columns in <I>The Programmer's Journal</I> &#151; in particular, his column in Volume 6.6 which appeared sometime in 1988. I believe he also discusses screen-capture routines in his book, which I think is also called <I>On Graphics</I>.<P>
Ken Graham<br>
Hanover Park, IL<P>
The packages are available from Ken Graham, 4715 Zeppelin Drive, Hanover Park, IL 60103 for $10, $25, and $35 respectively. (KP)<P>
<h4><FONT COLOR="#000080"><A name="015B_00B7">Debugging Problems<A name="015B_00B7"></FONT></h4></P>
In response to the letter form Mark Petrovic (September 1990, p. 111) and the reply from Janet Price (January 1991, p. 89):<P>
I phoned Mark back in September because I have experienced exactly the problem he describes. From your response, and Ms. Price's, I'd say that neither of you have had the pleasure. Mark's description of the problem is both precise and definitive. Like the pointer problems which you mention in your reply, Mark's problem is so troubling because its effect and its apparent solution are so disparate. Everybody knows that adding a <I>printf</I> statement can't prevent your code from locking up.<P>
Like Mark, however, I have defeated the lockup bug on occasion by adding a <I>printf</I> (or <I>mprintf</I>) here and there in my code. The purpose of adding such statements is to observe the values of the variables. It is frustrating when the values are as expected, and the lockup bug vanishes. It's even more frustrating when I remove the <I>printf</I> and the bug returns.<P>
This is not a frequent occurrence. I've been aware of it perhaps four or five times in as many years. That just makes it all the more difficult to resolve. I'm writing now because it has happened to me again. This time I've been able to duplicate the problem, and to solve it.<P>
While I was making changes in some new code, I got a <I>malloc</I> error in a routine I've used for six months. I hadn't made changes to the old code, so I felt the problem was in the new material. I added a <I>printf </I>which would report the size of the allocation, and recompiled. The <I>malloc</I> error disappeared. Further, I could toggle the error by adding or removing the <I>printf</I> in the new routine.<P>
I examined my new code for calls to the old routine. There were four calls. Two of these took the return value, an <I>int</I> (my old routine frees its own allocation before returning), and made use of it. The other two ignored the return value. The toggling <I>printf</I> was located after one of the calls that ignored the return value. I added local variables to receive this return value, even though the code didn't need it. This solved the problem. I could remove the toggling <I>printf</I>.<P>
Turbo C v1.5 provides a great deal of help by way of error messages and warnings during the compile and link. One of those warnings is: "<I>VarName</I> is assigned a value which is never used in function <I>FuncName</I>." Because of this warning I have often in the past removed the unused variable without a thought, while looking for more serious problems. I believe it is this subtle change in the code, intended to eliminate a warning, that causes the mysterious appearance of the problem which Mark describes.<P>
I have a new rule for my <I>Nature of C</I> collection: if a function returns a value, take it. If I don't need the value, I assign it to a variable with an obviously pointed name, like <I>TakeValue</I>. Then I know not to remove this variable when Turbo C warns me about it.<P>
I don't know if this is a bug in Turbo C. It could be, but I wouldn't make the accusation. I don't even know what compiler Mark uses, and I don't know anyone else who has experienced this problem. It could just be that I've failed to provide function declarations at some point, though I'm usually pretty careful about that.<P>
Also, I don't know how many people would feel that I've found the real problem. Adding an unnecessary local variable may appear just as irrelevant as printing an unnecessary value, equally foreign to the real problem. But I believe the problem has to do with leaving return values on the stack. If that's it, then taking those values off the stack really is the solution to the problem.<P>
Art Shipman<br>
Westbrookville, NY<P>
I wish that I'd "never have had the pleasure." I probably have it about once every two years. But when it strikes, I cringe. Experience is the best teacher &#151; the more mistakes you make in C, the better a debugger you become.<P>
The last time was about six months ago, so maybe I can rest easy for a while. It was the same sort of subtle bug. When the <I>printf</I> was put in, the program worked. When it was out, it didn't. The <I>#ifdef DEBUG</I> statements were being stuffed all over the place. The job needed to get done by the end of the day. You know the scenario. <P>
As I mentioned in my original reply to Mark, the potential source of the error is either a pointer problem or a compiler bug. Although the latter is rare, it does crop up sometimes. However I tend to blame myself first. <P>
There are at least three things that are affected by the insertion of the <I>printf</I>. The first is that the location of the remainder of the code is shifted down by some bytes. The second is that the code generation itself may be affected, as you suggest. The third is the position of static data. The string itself is stored in the initialized data section. <P>
An obvious overrun (at least it was obvious in the end) of the index into a static array was the culprit. With the <I>printf</I> in there, a trivial static variable was altered. Without it, a less trivial one was being changed. <P>
I'm reminded of one of my quirkiest debugging experiences. I had a function called <I>xxx</I> and an external variable called <I>xxx</I> (in another source file). These weren't their real names. My memory fails me on this one, but it was well before the days of 32-character names, and abbreviated names tended to look alike. <P>
The linker did not report a double definition of this identifier when the files were linked. It linked the two names together. The external variable was placed at the same address as the beginning of the function. The first time I called the function, everything was okay. In another part of the program, I assigned something to the external variable, <I>xxx = 5</I>. Guess what happened the next time I called the function?<P>
I agree with you on your statement of the Nature of C. Except for the return from <I>printf</I> and a few other functions, I make it a rule to always retrieve the return value from any function. If it gives something back, it is for a reason. (KP)<P>

<h4><a href="../../../source/1991/jun91/pugh.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
