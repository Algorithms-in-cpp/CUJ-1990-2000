<HTML><HEAD>
<TITLE>June 1991/A Universal C++ Data Type/Listing 9</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 9 (th_list.cpp)</A></h4>
<pre>//  class ThingList  -- a list of things
//
//  Version 1.0-- 2/25/91
//
//  Michael Kelly -- Author
//
#pragma warn -pia  //  nix "Possibly incorrect assignment"
#include "th_list.hpp"

static Thing dummy_thing;

ThingList::~ThingList()
{
    while( head ) {
   rover = head;
   head = head-&gt;next;
   delete rover;
   rover = NULL;
    }
}

int ThingList::add( Thing &amp;some_thing )
{
    if( ! ( rover = head ) ) {
   if( ! ( head = new thing_node ) )
       return 0;
   head-&gt;this thing = &amp;some_thing;
   head-&gt;next = NULL;
    }
    else {
   while( rover-&gt;next )
       rover = rover-&gt;next;
   if( ! ( rover-&gt;next = new thing_node ) )
       return 0;
   rover = rover-&gt;next;
   rover-&gt;this thing = &amp;some_thing;
   rover-&gt;next = NULL;
    }

    ++nodes;
    return 1;
}

Thing* ThingList::operator[]( unsigned index )
{
    if(
   ( ! ( rover = head ) ) ||
   (index &gt;= nodes )
    )
   return &amp;dummy_thing;

    while( index-- ) {
   if( ! rover-&gt;next )
       return &amp;dummy_thing;
   rover = rover-&gt;next;
    }
    return rover-&gt;this_thing;
}

unsigned ThingList::iterate( void ( Thing::*funcptr )() )
{
    if( ! ( rover = head ) )
   return 0;

    do {

      if( rover-&gt;this_thing )
     (rover-&gt;this_thing-&gt;*funcptr)();

    }
    while( rover = rover-&gt;next );
    return nodes;
}

unsigned ThingList::iterate( int ( Thing::*funcptr )() )
{
    unsigned successes = 0;

    if( ! ( rover = head ) )
   return 0;

    do {

      if( rover-&gt;this_thing )
     successes += (rover-&gt;this_thing-&gt;*funcptr)();

    }
    while( rover = rover-&gt;next );

    return successes;
}

#pragma warn .pia  //  restore warning to default state

// End of File
</pre>
</BODY>
</HTML>
