<HTML><HEAD>
<TITLE>June 1991/A Universal C++ Data Type/Listing 13</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 13 (th_struc.cpp)</A></h4>
<pre>//   class StructThing -- a struct thing derived from
//              class Thing.
//
//  Version 1.01  -- 2/25/91
//
//  Michael Kelly -- Author
//
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include "th_struc.hpp"

void StructThing::print()
{
    printf(
      "%d %s\n",
      ((a_struct)*this).id,
      ((a_struct)*this).key
    );
}

StructThing::operator == (Thing &amp;some_thing)
{
    return (type() == some_thing.type() ) ?
      ( strcmp( ((a_struct *)ptr())-&gt;key,
    ((a_struct *)some_thing.ptr())-&gt;key) == 0 ) : 0;
}

StructThing::operator !=(Thing &amp;some_thing)
{
    return !( *this :: some_thing );
}

StructThing::operator &lt; (Thing &amp;some_thing)
{
    return (type() == some_thing.type() ) ?
      ( strcmp( ((a_struct *)ptr())-&gt;key,
    ((a struct *)some_thing.ptr())-&gt;key) &lt;  0 ) : 0;
}

StructThing::operator &lt;=(Thing &amp;some_thing)
{
    return ( type() == some_thing.type() ) ?
      ( strcmp( ((a_struct *)ptr())-&gt;key,
    ((a_struct *)some_thing.ptr())-&gt;key) &lt;= 0 ) : 0;
}

StructThing:: operator &gt; (Thing &amp;some_thing)
{
    return ( type() == some_thing.type() ) ?
      ( strcmp( ((a_struct *)ptr())-&gt;key,
    ((a_struct *)some_thing.ptr())-&gt;key) &gt;  0 ) : 0;
}

StructThing::operator &gt;=(Thing &amp;some_thing)
{
    return ( type() == some_thing.type() ) ?
      ( strcmp( ((a_struct *)ptr())-&gt;key,
    ((a_struct *)some_thing.ptr())-&gt;key) &gt;= 0 ) : 0;
}

// End of File
</pre>
</BODY>
</HTML>
