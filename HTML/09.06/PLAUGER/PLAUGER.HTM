


<HTML>
<HEAD>

<TITLE>June 1991/Standard C</TITLE></HEAD>
<body bgcolor="#ffffff">

<H2><A HREF="../tocjun.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Standard C<A name="0155_00AE"><A name="0155_00AE"></font></h2><P>
<h3 align="center"><A name="0155_0000"><A name="0155_0000">Formatting Monetary Values</h3><P>
<h3 align="center"><font color="#800000">P.J. Plauger</font></h3><hr><blockquote><P>
<P><i><A name="0155_0000"><A name="0155_0000">P.J. Plauger is senior editor of The C Users Journal. He is secretary of the ANSI C standards committee, X3J11, and convenor of the ISO C standards committee, WG14. His latest book is Standard C, which he co-authored with Jim Brodie. You can reach him at <I>pjp@plauger.uunet</I>.</i></P><P>
This is my fourth and last column in a series on the header <I>&lt;locale.h&gt;</I>. I have spent a lot of time on this topic because locales are new to many C programmers. You may have little use for them now, perhaps, but varying locales will become more and more important in the coming years. The pressures of competition in the international marketplace will see to that.<P>
Supporting locales also requires a non-trivial amount of code. I spent one whole column describing the code that switches among locales already in memory. (See "Implementing Locales," <I>Standard C, CUJ</I> April 1991.) I devoted last month's column to describing one way to specify a new locale in a text file. (See "Build Your Own Locales," <I>Standard C, CUJ</I> May 1991.) I never got around to showing the code that reads and parses a locale file and I never will, in this column at least. It involves a lot of tedious detail.<P>
Another bit of tedious detail becomes apparent when you actually try to <I>use</I> information from a locale. You call the function <I>localeconv</I> to get a pointer to a data object of type <I>struct lconv</I>. It tells you all sorts of interesting things about how you should format monetary values. (See "The Header <I>&lt;locale.h&gt;</I>," <I>Standard C, CUJ</I> March 1991.) It even tells you a thing or two about formatting non-monetary amounts. It does not, however, put all these details together for you in one convenient package.<P>
I set about constructing an example of how to use the locale-specific information on formatting values. It turned out to be a non-trivial exercise. Hence, the result may prove of value to anyone who wants to format values by locale-specific rules. That's what this column is about.<P>
<h4><FONT COLOR="#000080"><A name="0155_00AF">Formatting Values<A name="0155_00AF"></FONT></h4></P>
Two locale categories tell you how to format numbers to match local usage:<P>
<UL><li>Category <I>LC_MONETARY</I> <I>suggests</I> how to format monetary amounts, both by local custom and in accordance with international standards (ISO 4217).</li>
<li>Category <I>LC_NUMERIC</I> <I>dictates</I> the decimal point character used by the Standard C library and <I>suggests</I> how to format non-monetary amounts.</li></UL>
Committee X3J11 put all this stuff in the C Standard because IBM said that's what the world needed. Shawn Elliott, the IBM representative to the C standards committee, showed us a report that was truly mind-boggling. It showed all the ways that people write monetary and non-monetary values around the world. I didn't know whether to be more impressed by the variety that the IBM researchers unearthed or by the effort they made to unearth it.<P>
<A href="list1.htm">Listing 1</a>
shows the various ways you can format the monetary amount $-3.00 by local custom, depending upon the values stored in three members of <I>struct lconv</I>.<P>
The example assumes that the member <I>currency_symbol</I> points at "<I>$</I>", <I>mon_decimal_point</I> points at ".", <I>negative_sign</I> points at "<I>-</I>", and <I>frac_digits</I> has the value 2. The example does not show the effect of the members <I>mon_grouping</I> and <I>mon_thousands_sep</I>, which describe how to group and separate digits to the left of the decimal point.<P>
Three additional members describe how to format positive monetary amounts. These are <I>p_sep_by_space</I>, <I>p_sign_posn</I>, and <I>p_cs_precedes</I>. For international monetary amounts, the member <I>int_curr_symbol</I> determines the currency symbol (instead of <I>currency_symbol</I>) and <I>int_frac_digits</I> determines the number of decimal places to display (instead of<I> frac_digits</I>). And if you want to format non-monetary amounts, you care about the members <I>decimal_point</I>, <I>grouping</I>, and <I>thousands_sep</I>.<P>
That's a lot of complexity to keep track of. Conceivably, you can use this information throughout an application, but probably not. The individual pieces are at a low level of detail. What you really want is some way to format numeric data that applies <I>all</I> of the relevant information in one place. Unfortunately, the C Standard does not define such a function.<P>
<h4><FONT COLOR="#000080"><A name="0155_00B0">Function _<B><I>Fmtval</I><A name="0155_00B0"></B></FONT></h4></P>
I decided to define the missing function. After several false starts, I ended up with the declaration:<P>
<pre>char *_Fmtval (char *buf, double val, int frac_digs);</pre>
You provide the character buffer <I>buf</I> to hold the formatted value. (The modern trend is to specify a maximum length for any such buffer. I found the function quite complicated enough without such checking, desirable as it may be.) As a convenience, the function returns the value of <I>buf</I>, which then holds the formatted value as a null-terminated string.<P>
You also specify <I>val</I>, the value to be formatted, as a <I>double</I>. That provides for a fractional part and at least 16 decimal digits of precision. For a non-monetary value, <I>frac_digits</I> specifies the numer of fraction digits to include in the formatted value. The members of <I>struct Iconv</I> offer no guidance on this parameter.<P>
Here's where the design gets clever. (I am willing to concede that it may be overly clever.) The locale information suggests four distinct formats for a value:<P>
<UL><li>an international monetary amount</li>
<li>a local monetary amount</li>
<li>a non-monetary amount with no decimal point or fraction </li>
<li>a non-monetary amount with decimal point and fraction</li></UL>
Only in the fourth case do you need to provide a (non-negative) value for the number of fraction digits. You can set aside distinct negative values for the argument <I>frac_digits</I> to signal these other cases.<P>
<A href="list1.htm">Listing 1</a>
shows the code for the function_<I>Fmtval</I>. It distinguishes the four formats by examining the value of <I>frac_digits</I>:<P>
<UL><li>A value of -2 (the macro <I>FN_INT_CUR</I>) tells the function to format an international monetary amount.</li>
<li>A value of -1 (the macro <I>FN_LCL_CUR</I>) tells the function to format a local monetary amount. </li>
<li>Any other value tells the function to format a non-monetary amount. The number of fraction digits, however determined, must be a non-negative value other than <I>CHAR_MAX</I> for the function to include a decimal point and fraction. So if you call <I>_Fmtval</I> with the value <I>CHAR_MAX</I>, or with any negative value other than -1 or -2, you tell it to format a non-monetary amount with no decimal point or fraction.</li>
<li>By elimination, any non-negative value other than <I>CHAR_MAX</I> tells the function to format a non-monetary amount with a decimal point and fraction. The value specifies the number of fraction digits.</li></UL>
The function is straightforward, but it contains a lot of tedious detail. The first half gathers the appropriate set of parameters for the requested formatting case. It selects a format string <I>fmt</I> to drive the generation of characters into the buffer <I>buf</I>. Note that the code doesn't trust that members of <I>struct lconv</I> have sensible values, since locales can change. I use the function <I>sprintf</I>, declared in &lt;<I>stdio.h</I>&gt;, to convert the <I>double</I> value <I>d</I> into the buffer. The funny format string in <I>sprintf</I> ensures that a decimal point appears in the buffer, followed by the appropriate number of fraction digits (if any).<P>
The remaining logic then determines how many separators to insert between characters to the left of the decimal point and proceeds to do so. It uses the function <I>memmove</I>, declared in &lt;<I>string.h</I>&gt; to move characters further along in the buffer. That guarantees a correct copy even if the source and destination areas overlap. Note that the function replaces the decimal point generated by <I>sprintf</I> (which itself can vary with locale) with a decimal point that depends on the format selected.<P>
<h4><FONT COLOR="#000080"><A name="0155_00B1">Using <B><I>_Fmtval</I><A name="0155_00B1"></B></FONT></h4></P>
To use <I>_Fmtval</I>, you must first declare it and define its associated macros in your program. You write something like:<P>
<pre>#define FV_INTEGER -3
#define FV_INT_CUR -2
#define FV_LCL_CUR -1
char *_Fmtval(char *, double, int);</pre>
Put these lines at the top of your program, or in a separate header file that you include in your program. Now you are in a position to call the function in various ways. For example, the code in <A href="list2.htm">Listing 2</a>
might produce the output:<P>
<pre>You ordered 1,340,000 sheets, each 1,204.787 square cm.
Please remit USD 18,279 to New York office,
   (that's $18,278.85).</pre>
Imagine trying to produce this result by inspecting the contents of <I>struct lconv</I> directly. Function <I>_Fmtval</I> obviously has its uses, at least for people who care about locales.<P>
<h4><FONT COLOR="#000080"><A name="0155_00B2">Everyday Uses<A name="0155_00B2"></FONT></h4></P>
You don't have to sell software to Serbo-Croatians to care about readability. I don't know about you, but I have trouble reading messages like:<P>
<pre>12 File(s) 2459648 bytes free</pre>
I tend to carve my MS-DOS disks into 20-25 Mb chunks. Then I tend to fill them up. When I see the above message, I have to think thrice about what it means. Is it 24 Mb, 2.4 Mb, or 240 Kb? Untrained civilians have enough sense to write values like this as 2,459,648. One of the most successful software companies in the world persists in leaving out the commas.<P>
An obvious use for <I>_Fmtval</I> is to drop the commas in the right places in a value that you want to display. Compared to matching monetary conventions around the world, this operation is pretty lightweight. The job is just messy enough that you want to package it as a function.<P>
Packaging it as a locale-dependent function has an added advantage. Not everyone in the world uses commas to separate digits to the left of the decimal point. Those who use commas as a decimal point occasionally use dots. Some folks use spaces. And despite the names <I>thousands_sep</I> and <I>mon_thousands_sep</I>, not everyone groups digits by threes.<P>
There is one small problem with using <I>_Fmtval</I> more widely. In the <I>"C"</I> locale, it doesn't do anything. The value of <I>thousands_sep</I> in the <I>"C"</I> locale is <I>CHAR_MAX</I>. That is the code for an unspecified value. Ask <I>_Fmtval</I> to reformat a non-monetary value and it leaves it unchanged. Ask the function to reformat a monetary value, for that matter, and it doesn't do much that is useful. In the <I>"C"</I> locale, the currency symbols <I>currency_symbol</I> and <I>int_curr_symbol</I> both point at the empty string <I>""</I>.<P>
I can mostly understand why. Remember that locales were added to Standard C as a way to appease the international community. These folks were unhappy that C contained so many cultural assumptions peculiar to the USA. They were prepared to alter the ISO C Standard in significant ways to accommodate the needs of other cultures. Those of us who wanted a common standard acceptable to all were not in a position to be presumptuous. It was hard to insist that the <I>"C"</I> locale contain <I>any</I> assumptions about a specific culture. We agreed on requiring the dot as a decimal point only because so much existing code depended on that assumption.<P>
What I am hoping for, as a consequence, is a widespread use of the default locale. Perhaps one day it will be commonplace to put the statement <I>set_locale(LC_ALL, ""</I>); at the top of <I>main</I>. It should then also be commonplace that the default locale defines sensibly the various members of <I>struct</I> <I>Iconv</I>. In the English-speaking world, that generally means that the member <I>thousands_sep</I> will have the value 3.<P>
Programs that start off on this foot are in an excellent position to use <I>_Fmtval</I> (or its equivalent) to advantage. I can even hope that programmers will take pity on those of us who like to see commas in large values. Such programmers will make a habit of formatting displayed values by locale-specific rules. Maybe then I can tell how much disk space I have left.<P>
<h4><a href="list3.htm">Listing 3</a></h4>

<h4><a href="../../../source/1991/jun91/plauger.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>

