


<HTML>
<HEAD>

<TITLE>June 1991/Illustrated C</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjun.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Illustrated C<A name="0159_00B2"><A name="0159_00B2"></font></h2><P>
<h3 align="center"><A name="0159_0000"><A name="0159_0000">A Portable Journal Manager</h3><P>
<h3 align="center"><font color="#800000">Leor Zolman</font></h3><hr><blockquote><P>
<P><i><A name="0159_0000"><A name="0159_0000">Leor Zolman bought his first microcomputer (an IMSAI 8080) while in high school in L.A., carried it to M.I.T., withdrew, and wrote the BDS C compiler with it in assembly language. That was enough assembly language hacking to last a lifetime, so now he enjoys UNIX/Xenix system administration, article writing and raising his newborn daughter Katelyn. You can reach him at leor@rdpub.com or uunet!bdsoft!rdpub!leor.</i></P><P>
Once upon a time I kept a regular written journal. Although I did have a personal computer (of the CP/M persuasion) then, it just didn't feel "personal" enough for automated journal-keeping, so I chose the venerable spiralbound notebook as my medium.<P>
More recently, I again felt a stirring of the old journal-keeping urge. This time, however, taking advantage of my SuperSport 286 laptop seemed decidedly preferable to writing out all the entries in longhand. And (as if further rationalization were really necessary) a program to maintain a personal journal would provide an excellent opportunity to illustrate some handy C techniques.<P>
My first two requirements for such a journal program were that it be as simple as possible to use (no new user interface to learn, for example) and that it maintain journal entries in a structured, easy-to-access manner for subsequent perusal and/or compression into archive files.<P>
I wrote the initial version exclusively for DOS, then my wife Lisa expressed interest in using the program for herself, but not on the laptop. She wanted to use our main machine with the big VGA monitor. That system is now running SCO Xenix 24 hours a day and I've never really gotten VP/ix, the Xenix-based DOS emulator, to work for me in a satisfactory manner. So I decided to re-code the program with conditional defines to work under both DOS and Xenix.<P>
To avoid confusion, I'll begin by describing the program from the DOS point of view only. Near the end of the column, I'll explain what differs when compiling under Xenix.<P>
<h4><FONT COLOR="#000080"><A name="0159_00B3">The User Design<A name="0159_00B3"></FONT></h4></P>
To keep the usage simple, I named the program <I>j</I> and designed it to take only one optional parameter to support multiple users and/or subject classifications. All journal text is kept either in a master journal directory, defined as <I>JOURN_DIR</I> in the program, or in a subdirectory of <I>JOURN_DIR.</I><P>
To initiate a new journal entry, just type the command<P>
<pre>j</pre>
or<P>
<pre>j &lt;subdir&gt;</pre>
If you omit the <I>&lt;subdir&gt;</I> parameter, the journal entry will be stored immediately in <I>JOURN_DIR</I>.<P>
If <I>&lt;subdir&gt;</I> is specified, then <I>j</I> tests for the existence of a subdirectory under <I>JOURN_DIR</I> having the specified name, and creates it if necessary (subject to the user's approval). The new journal entry will be placed into that subdirectory.<P>
Next, <I>j</I> creates a temporary three-line ASCII file consisting of a leading blank line, a line containing the current date and time, and a trailing blank line. Then <I>j</I> invokes your favorite text editor on that temporary file, allowing you to compose the text of your journal entry.<P>
The symbolic constant <I>ED_INVOKE</I> specifies how to invoke the text editor of choice via a call to the library function <I>system.</I> I use Lugaru's Epsilon, renamed as "e," and have therefore included some code specific to the DOS version of Epsilon (controlled by the symbolic constant EPSILON.)<P>
When you have finished editing your journal entry, <I>j</I> checks to see if you have actually saved your changes by comparing the size of the temporary file before and after the editing session. If the size has not changed, <I>j</I> assumes you have intentionally scrapped your work, and terminates with a message to that effect. If not saving your work was unintentional, there's nothing <I>j</I> could really do about it, at that point anyway.<P>
If <I>j</I> finds changes, it appends the new entry onto the end of the file containing the cumulative text of the current month's entries. All of these monthly files are kept in either the journal directory or its specified subdirectory. <I>j</I> creates new monthly files as necessary whenever it makes the first entry of a new month.<P>
<h4><FONT COLOR="#000080"><A name="0159_00B4">A Debugging Trick<A name="0159_00B4"></FONT></h4></P>
When writing the <I>j</I> program, I knew it would be necessary to use the <I>system</I> library function for invoking the desired text editor. The process of building an appropriate command string to pass to the <I>system</I> function might require some debugging. Rather than insert statements for printing and pausing before each system call, I chose instead to create a generalized conditional macro definition to perform system calls, with optional built-in support for debugging the system-call text strings.<P>
Lines 46-48 of <A href="list1.htm">Listing 1</a>
show the <I>DBSYS</I> parameterized macro definition used when the <I>DEBUG</I> constant is defined as true (non-zero). The macro, taking advantage of the comma operator, expands into a four-part compound expression. The first sub-expression is a call to <I>printf</I> displaying the value of the system-call command string supplied as the parameter. The second asks the user to press <I>Return</I>, the third waits for the user to press return, and the last sub-expression actually submits the command string to the <I>system</I> function for DOS to execute.<P>
Once I was satisfied with the way <I>j</I>'s system calls were constructed, I was able to turn off all debugging of system calls by changing the value of <I>DEBUG</I> to 0 (in line 27.) In this case, the definition of <I>DBSYS</I> turns into a straight call to <I>system</I> as defined in line 50.<P>
<h4><FONT COLOR="#000080"><A name="0159_00B5">Epsilon Specifics<A name="0159_00B5"></FONT></h4></P>
The DOS version of Epsilon's shell-escape command maximizes available RAM for the subordinate shell by shuffling both itself and all text being edited out of main RAM and into either expanded memory or onto the hard disk. The annoying side effect of this feature, however, is that Epsilon refuses to start up again if invoked from the subordinate shell. Epsilon tests for a previous invocation of itself by looking in the environment for a line reading<P>
<pre>EPSRUNS=Y</pre>
If it finds such a line, Epsilon complains and quits. Rather than let Epsilon discover this condition, <I>j</I> checks for it on startup and terminates immediately if the environment line is found. Lines 78-83 accomplish this by iterating through the environment list (supplied by the DOS C runtime initialization code via the envp parameter to the <I>main</I> function) in search of the magic entry.<P>
A less troublesome feature of Epsilon I take advantage of is the option to start an editing session on a specific line of the existing text file by specifying the <I>+n</I> option on the command line. When compiled under DOS, <I>j</I> invokes Epsilon with the +<I>3</I> option, to place the cursor on line 3, in the generalized editor invocation string <I>ED_INVOKE</I> defined in line 34.<P>
<h4><FONT COLOR="#000080"><A name="0159_00B6">Testing For Subdirectories<A name="0159_00B6"></FONT></h4></P>
After checking for an active Epsilon session, <I>j</I> checks for existence of both the master directory (line 95) and any named subdirectory (lines 97-102) by calling the <I>testdir</I> function. <I>testdir</I> calls the <I>stat</I> function to get information about the supplied pathname parameter. If it exists and is a directory, no problem. If it exists and is not a directory, the program prints a message and terminates.<P>
If the supplied pathname does not exist at all (the <I>stat</I> call returned 0), then lines 172-178 ask if the user wants to create a directory with the given name. If the response is negative, the program terminates. Otherwise, the program creates the directory.<P>
<h4><FONT COLOR="#000080"><A name="0159_00B7">Creating The Journal Entry<A name="0159_00B7"></FONT></h4></P>
<I>j</I> creates a temporary file (lines 107- 110) to hold the text of the new journal entry. The program uses the <I>time</I>, <I>localtime</I>, and <I>asctime</I> functions to obtain a time/date string that is written into the temporary file in line 114. It calls <I>fstat</I> to obtain the size in bytes of the resulting text file. Note that <I>fflush</I> must be called before <I>fstat</I> to guarantee that the information returned by <I>fstat</I> reflects the results of the most recent buffered output operations.<P>
After closing the temporary file, <I>j</I> creates the command string for invoking the text editor in line 121. With all preparations made, <I>j</I> now invokes the text editor on the temporary file.<P>
Upon return from a successful editor invocation, the program reopens the temporary file (line 126) and calls <I>fstat</I> once again to obtain the file's new size. If the size has not changed, the program terminates. Otherwise, the program constructs the name of the current month's cumulative text file and executes a system command to concatenate the temporary file onto the end of the cumulative file, using the <I>cat</I> command (line 146).<P>
I chose to use <I>cat</I> here, instead of doing all the file I/O via function calls, because <I>cat</I> is both ideally suited to this application and much easier to use. The <I>cat</I> command is standard on UNIX-compatible systems. For those who haven't written or obtained a version for DOS, mine is shown in <A href="list2.htm">Listing 2</a>.
<P>
<h4><FONT COLOR="#000080"><A name="0159_00B8">The Xenix Version<A name="0159_00B8"></FONT></h4></P>
The main difference between running <I>j</I> under DOS and under Xenix is in the location of the master journal directory. Under DOS, this directory is in a fixed location on the hard disk. Under Xenix, the location is always relative to the invoking user's home directory path, typically specified by the shell variable <I>$HOME</I>. To obtain the value of <I>$HOME</I>, the Xenix version of <I>j</I> uses the <I>getenv</I> function.<P>
Because all file I/O is performed in directories under the user's home directory, any number of users may invoke <I>j</I> simultaneously. No one user should start more than a single <I>j</I> session at a time, however.<P>
The character used to delimit directories in pathnames is / for UNIX-compatibles and \ for DOS. To generalize the code, the symbolic constant <I>DIR_DELIM</I> is set to a string containing the appropriate character. I use a string constant, instead of a character constant, to support functions such as <I>strcat</I> and <I>sprintf</I>.<P>
Finally, I used "old style" function headers and "type-only" prototypes to keep the Xenix C compiler happy. For some reason, the Xenix C compiler accepts prototypes of the form<P>
<pre>int foo(char *, char *);</pre>
while choking on<P>
<pre>int foo(char *str1, char *str2);</pre>
<h4><FONT COLOR="#000080"><A name="0159_00B9">Exercises<A name="0159_00B9"></FONT></h4></P>
1. As written, the text-editor invocation string (<I>ED_INVOKE</I>) is hard-wired into the program. Different people using the program may have different editor they would prefer to use. Add support for individualized editor specifications. Here are some ideas:<P>
Under UNIX-compatible systems, you might have each user's <I>.profile/.login</I> file define an environment variable to serve as a customized <I>ED_INVOKE</I> string. j can then access the value of that string using the <I>getenv</I> function.<P>
Under DOS, you can do something similar with shell variables &#151; in conjunction with my "Login" program presented in an earlier column, for example. (See <I>CUJ</I>, February, 1991.) Or you might make the &lt;<I>subdir</I>&gt; parameter mandatory and hard-code different <I>ED_INVOKE</I> strings for different specific values of &lt;<I>subdir</I>&gt;.<P>
2. As mentioned above, the Xenix version makes the assumption that no single user has more than one <I>j</I> session active at any one time. To get around this limitation, the name of the temporary file used for the editing session could be constructed with help from the <I>tmpnam</I> system call. Modify the code to have <I>j</I> place the temporary file in the system <I>/tmp</I> directory, using a unique filename obtained via <I>tmpnam</I>.<P>

<h4><a href="../../../source/1991/jun91/zolman.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
