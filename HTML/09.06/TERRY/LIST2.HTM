<HTML><HEAD>
<TITLE>June 1991/Optimizing Binary Trees/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2 (showtree.c)</A></h4>
<pre>#include &lt;stdio.h&gt;
#include &lt;graph.h&gt;

/* tree struct */
typedef struct tnode {          /* Standard binary tree node for storage */
  struct tnode *left, *right;   /* of integer values                     */
  int num;
} TREENODE;

/* Display printing/spacing constants */
#define NUMWID        4         /* Width of a number shown in a binary tree */
#define WIDSTR  "%4d\n"         /* Format string for number in binary tree  */
#define ROWSPC        3         /* Row spacing in showing binary tree       */

/* Function prototypes */
static
int width(TREENODE *);               /* Determine width of a subtree        */

void printtree(TREENODE *),          /* Print contents of tree              */
    showtree(TREENODE *, int, int); /* Draw the tree                       */

/* Recursive function to graphically display the tree.
   Usage: void showtree(node, r, c)
           TREENODE *node;   /* Pointer to a local root
           int r,            /* Row coordinate to print the node value
              c;             /* Column coordinate to print the node value
   Returns:  Nothing
*/
void showtree(node, r, c)
  TREENODE *node;
  int r, c;
{
  if (node != NULL) {
    /* Position graphics line pointer only if within an 80 x 25 screen */
    if ((r &gt; 0) &amp;&amp; (r &lt; 26) &amp;&amp; (c &gt; 0) &amp;&amp; (c &lt; 81)) {
      _lineto((c &lt;&lt; 3) + 13, (r &lt;&lt; 3) - 10);
      _moveto((c &lt;&lt; 3) + 13, r &lt;&lt; 3);
    }

    /* Show left subtree */
    if (node-&gt;left)
     showtree(node-&gt;left, r + ROWSPC, c - (NUMWID + width(node-&gt;left-&gt;right)));

    /* Print value only if within 80 x 25 screen */
    if ((r &gt; 0) &amp;&amp; (r &lt; 26) &amp;&amp; (c &gt; 0) &amp;&amp; (c &lt; 76)) {
      _settextposition(r, c);
      printf("%4d", node-&gt;num);
      _moveto((c &lt;&lt; 3) + 13, r &lt;&lt; 3);
    }
    /* Show right subtree */
    if (node-&gt;right)
      showtree(node-&gt;right, r + ROWSPC, c + NUMWID + width(node-&gt;right-&gt;left));
  }
}

/* Recursive function to determine the width of a local root. Used in the
   graphic display of the tree.
   Usage:  int width(node)
           TREENODE *node;   /* Pointer to a local root
   Returns:  The width of the local root.
*/
int width(node)
  TREENODE *node;
{
  return(node != NULL ? NUMWID + width(node-&gt;left) + width(node-&gt;right) : 0);
}

/* Recursive function to perform a simple traversal of the tree in numerical
   order while printing the node values.
   Usage: void printtree(node)
           TREENODE *node;    /* A pointer to a local root
   Returns:  Nothing
*/
void printtree(node)
  TREENODE *node;
{
  if (node != NULL) {
    printtree(node-&gt;left);
    printf("%d\n", node-&gt;num);
    printtree(node-&gt;right);
  }
}
</pre>
</BODY>
</HTML>
