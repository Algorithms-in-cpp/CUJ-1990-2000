


<HTML>
<HEAD>

<TITLE>June 1991/Doctor C's Pointers&reg;</TITLE></HEAD>
<body bgcolor="#ffffff">

<H2><A HREF="../tocjun.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>
<hr><h2 align="center"><font color="#800000">Doctor C's Pointers&reg;<A name="0157_00B0"><A name="0157_00B0"></font></h2><P>
<h3 align="center"><A name="0157_0000"><A name="0157_0000">Data Structures, Part 3</h3><P>
<h3 align="center"><font color="#800000">Rex Jaeschke</font></h3><hr><blockquote><P>
<P><i><A name="0157_0000"><A name="0157_0000">Rex Jaeschke is an independent computer consultant, author and seminar leader. He participates in both ANSI and ISO C<I></I> <I></I>Standards meetings and is the editor of The Journal of C Language Translation, a quarterly publication aimed at implementors of C<I></I> <I></I>language translation tools. Readers are encouraged to submit column topics and suggestions to Rex at 2051 Swans Neck Way, Reston,<I></I> <I></I>VA 22091 or via UUCP at rex@aussie.com.</i></P><P>
This month I'll continue looking at the tradeoffs between arrays of pointers and multi-dimensional arrays.<P>
<h4><FONT COLOR="#000080"><A name="0157_00B1">Dynamically Allocated Arrays<A name="0157_00B1"></FONT></h4></P>
As you saw in Part 1 (Doctor C's Pointers, <I>CUJ,</I> Volume 9, Number 4) you can allocate memory at runtime for any data structure you can declare at compile-time. Allocating memory for one-dimensional arrays is trivial &#151; you define a pointer, assign it the value returned from <I>malloc</I>, and subscript it to get at the underlying elements. It is not much more difficult for <I>n</I>-dimensional arrays. The only trick is that you must use a pointer to an array, <I>not</I> a pointer to the first element in an array. (For a detailed discussion on pointers to arrays, see Doctor C's Pointers, <I>CUJ</I>, Volume 8, Number 5.) For example, the program in <A href="list1.htm">Listing 1</a>
allocates an <I>n x 10</I> array of <I>ints</I> where <I>n</I> is specified by the user.<P>
This approach has limitations. To subscript <I>pl</I> to 2 levels, you must declare <I>pl</I> as a pointer to an array of 10 columns. That is, the number of columns must be hard-coded in the pointer declaration. Therefore, you must create a new pointer type for each possible row size needed in a program. (Alternatively, you could use void pointers and explicitly cast them to pointers to arrays of a given type. However, since the casts must have the array sizes hard-coded in them, you still don't have a general solution.)<P>
The example in <A href="list2.htm">Listing 2</a>
uses arrays of pointers instead. The version in <A href="list2.htm">Listing 2</a>
could be easily enhanced to handle a variable row size and, therefore, be much more useful. However, both versions are limited to handling a specific base data type, in this case <I>long int</I>. It would be nice to have a way to allocate a 2D array of arbitrary size and any base data type. The code in <A href="list3.htm">Listing 3</a>
achieves this, although it is not maximally portable. By displaying the addresses of each element, the program reveals that each row is not necessarily contiguous with the logically adjacent one.<P>
This solution should work on most implementations. It is not maximally portable because it assumes that all pointers have the same size and representation. When the rows are allocated, an expression of the form:<P>
<pre>aryadr[i] = malloc(...);</pre>
is used. However, <I>aryadr</I> is declared as a pointer to pointer to <I>void</I>. As such, the expression <I>aryadr[i] </I>(which is equivalent to <I>*(aryadr + i))</I> involves pointer arithmetic. The offset i is scaled by the size of the underlying element, in this case a pointer to <I>void</I>. When <I>aryadr</I> is returned to the calling function it is assigned to a different type. For example, in<P>
<pre>pl = alloc2da(...);</pre>
the pointer to pointer to <I>void</I> returned is assigned to a pointer to pointer to <I>long int, pl</I>. If you then subscript <I>pl</I> (as in <I>pl[i]</I>), the scaling factor for the offset <I>i</I> is the size of a pointer to <I>long int.</I> Because C permits each pointer type to have its own unique size and representation, subscripting <I>pl</I> can produce a different result than subscripting <I>aryadr</I>.<P>
As I stated earlier, this solution is not maximally portable. However, unless you are running on a word architecture or a segmented memory architecture you should be safe. Even on the Intel segmented architecture it will work if you don't mix memory models. All word-architecture-based compilers I've used also make all pointer types the same size and representation. In reality then, the code will be highly portable.<P>
<h4><FONT COLOR="#000080"><A name="0157_00B2">Shuffling Data Vs. Pointers<A name="0157_00B2"></FONT></h4></P>
Thus far, you have been dealing with lists composed of constant data. Of course, this is not always the case. If you are sorting a list of objects, the list entries must be modified at runtime. You can have a default list at program startup, but based on events that occur, you wish to substitute different values for one or more list nodes. You might also wish to replace a node with some null value indicating that option is not currently available.<P>
<A href="list4.htm">Listing 4</a>
shows a simple sort of a list of strings. In this case, the list is an array of pointers. While you must go through those pointers to compare the underlying strings, when you need to reorder the list, you can swap the two pointers. This is a very cheap exercise &#151; the cost of the swap is independent of the length of the strings being compared. Essentially, you are pretending the strings have been swapped. Because the strings themselves are never moved, they need not be stored in writable memory. <A href="list5.htm">Listing 5</a>
shows a 2D array version of this.<P>
Because there are no pointer objects, you cannot simply swap pointers around. Instead, you must swap two whole rows. Swapping two whole rows is considerably more expensive because you must allocate a temporary array instead of just a pointer, and you must call <I>strcpy</I> three times to make the swap. The cost of the swap at runtime is directly proportional to the length of the strings &#151; the longer the strings, the more time it takes. You also have the overhead of the three function calls. Because the strings themselves are moved, they must be stored in writable memory.<P>
<h4><FONT COLOR="#000080"><A name="0157_00B3">Conclusion<A name="0157_00B3"></FONT></h4></P>
You can use arrays of pointers to achieve the same effect as multi-dimensional arrays. However, because of their ability to "bait and switch" the underlying data by swapping pointers, arrays of pointers are more flexible. The amount of memory used by each approach depends on whether rows are variable length or not. In any event, even if arrays of pointers require more space, their flexibility often outweighs this cost.<P>

<h4><a href="../../../source/1991/jun91/jaeschke.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
