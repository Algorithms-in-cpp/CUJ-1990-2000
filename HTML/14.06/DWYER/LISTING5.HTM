



<HTML><HEAD>

<TITLE>June 1996/Testing Random Number Generators/Listing 5</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4>
<A name="HEADING1">Listing 5: The serial correlation test</A></h4>


<pre>
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++  */
/* Repeat Step 1 through Step 4 N times, then proceed to Step 5:    */
/*                                                                  */
/*   Step 1: Generate T variates, Xk, 0 &lt;= Xk &lt;= 32767, 1 &lt;= k &lt;= T.*/
/*                                                                  */
/*   Step 2: Calculate NumCorr correlation coefficients as follows: */
/*                                                                  */
/*           err = bjcorr(X, T, Corr, NumCorr);                     */
/*                                                                  */
/*           where                                                  */
/*                                                                  */
/*               Corr      receiving area for correlation           */
/*             coefficients                                         */
/*               NumCorr   User-specified number &lt;= T - 3           */
/*                                                                  */
/*   Step 3: Calculate a test statistic, Ut:                        */
/*                                                                  */
/*           Ut = T * (T + 2) * Sum{Corr[j]^2 / (T-j), j = 1, J}    */
/*                                                                  */
/*           where                                                  */
/*               J = NumCorr                                        */
/*                                                                  */
/*                                                                  */
/*   Step 4: Calculate a chi-square probability (Pt) associated     */
/*      with Ut, with J degrees of freedom ; save it in an          */
/*      array of size N,                                            */
/*                                                                  */
/*           When N probabilities, Pt, have been computed,          */
/*           go  to  Step  5.                                       */
/*                                                                  */
/*   Step 5: Run a KS analysis on Pt(j), 1 &lt;= j &lt;= N.               */
/*                                                                  */
/*  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++  */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;math.h&gt;
#include &lt;mconf.h&gt;
#include &lt;srcrdefs.h&gt;
#include &lt;miscdefs.h&gt;

#define LOW_PROB        1.0e-8

int     Variates[32768u];
double  CorCoefs[32768u];
/* ============================================================== */
/* CalcSerCorChiSq - Gets Chi-square p-value for NumCorr          */
/* Coefficients                                                   */
/* ============================================================== */
void
CalcSerCorChiSq(SERCOR_DATA_STRU * SerCorData)
{
    UINT    k;
    UINT    NumCoefs = SerCorData-&gt;NumCoefs,
            NumVar   = SerCorData-&gt;NumVarPerPass;

    double  ChiSqProb, ChiSqStat;
    double  CoefSos = 0, CoefSum = 0, RmsCoefs, Sum = 0;
    double  LoLimit, HiLimit;

    /* ----------------------------------------- */
    /* Step 1: Generate Array of Random Deviates */
    /* ----------------------------------------- */
    for (k = 0; k &lt; NumVar; ++k)
    {
        Variates[k] = SerCorData-&gt;RandFun();
    }

    /* ------------------------------------------ */
    /* Step 2: Calculate Correlation Coefficients */
    /* ------------------------------------------ */
    SerCorData-&gt;CallStatus =
        BJCoef(Variates, NumVar, CorCoefs, NumCoefs);

    if (SerCorData-&gt;CallStatus == OK)
    {
        /* ---------------------------------------------------- */
        /* Calculate Limits on Acceptable Chi-Square Statistics */
        /* ---------------------------------------------------- */
        ChiSqDist(LOW_PROB, NumCoefs, &amp;LoLimit, &amp;HiLimit);

        /* -------------------------------- */
        /* Step 3: Calculate Test Statistic */
        /* -------------------------------- */
        for (k = 0; k &lt; NumCoefs; ++k)
        {
            double  SqrCoef = SQR(CorCoefs[k]);

            /* ------------------- */
            /* Sum of Coefficients */
            /* ------------------- */
            CoefSum += CorCoefs[k];

            /* ------------------------------ */
            /* Sum of Squares of Coefficients */
            /* ------------------------------ */
            CoefSos += SqrCoef;

            /* ------------------------- */
            /* Accumulate Test Statistic */
            /* ------------------------- */
            Sum += SqrCoef / (double) (NumVar - (k+1));
        }

        /* ----------------------------- */
        /* Finish Step 3: Test Statistic */
        /* ----------------------------- */
        ChiSqStat = Sum * (double)NumVar * (double)(NumVar + 2);

        /* ---------------------------------------- */
        /* Step 4: Calculate Chi-Square Probability */
        /* ---------------------------------------- */
        if (ChiSqStat &lt; LoLimit)
        {
              ChiSqProb = LOW_PROB;
        }       else if (ChiSqStat &gt; HiLimit)
        {
              ChiSqProb = 1.0 - LOW_PROB;
        }
        else
        {
             ChiSqProb = chdtr(NumCoefs, ChiSqStat);
        }
        SerCorData-&gt;ChiSqProb = ChiSqProb;

        /* --------------------------------------------------- */
        /* Maintain Counts of Numbers of Variates and Outliers */
        /* --------------------------------------------------- */
        SerCorData-&gt;TotCoefs += NumCoefs;
        SerCorData-&gt;TotSos   += CoefSos;
        SerCorData-&gt;TotSum   += CoefSum;

        RmsCoefs = sqrt(CoefSos / (double)NumCoefs);

        for (k = 0; k &lt; NumCoefs; ++k)
        {
            if (fabs(CorCoefs[k]) &gt; 2*RmsCoefs)
            {
                ++SerCorData-&gt;NumOutliers;
            }
        }
    }
                                  /* End of if */
}
/* End of File */
</pre>
</body></html>
