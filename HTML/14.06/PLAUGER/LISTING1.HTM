



<HTML><HEAD>

<TITLE>June 1996/Standard C/C++/Listing 1</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4>
<A name="HEADING1">Listing 1: &lt;memory&gt;, part 1</A></h4>


<pre>

--------------- Listing 1: &lt;memory&gt;, part 1 -------------
&lt;f&gt;// memory standard header
#ifndef _MEMORY_
#define _MEMORY_
#include &lt;cstdlib&gt;
#include &lt;iterator&gt;
#include &lt;new&gt;
#include &lt;utility&gt;
///namespace std {

#ifndef _FARQ    /* specify standard memory model */
 #define _FARQ
 #define _PDFT    ptrdiff_t
 #define _SIZT    size_t
#endif

        // TEMPLATE FUNCTION _Allocate
template&lt;class T&gt; inline
    T _FARQ *_Allocate(_PDFT n, T _FARQ *)
    {if (n &lt; 0)
        n = 0;
    return ((T _FARQ *)operator new((_SIZT)n * sizeof (T))); }

        // TEMPLATE FUNCTION _Construct
template&lt;class T1, class T2&gt; inline
    void _Construct(T1 _FARQ *p, const T2&amp; val)
    {new ((void _FARQ *)p) T1(val); }

        // TEMPLATE FUNCTION _Destroy
template&lt;class T&gt; inline
    void _Destroy(T _FARQ *p)
///    {p-&gt;~T(); }
    {p-&gt;T::~T(); }    ///

inline void _Destroy(char _FARQ *_P)
    {}
inline void _Destroy(wchar_t _FARQ *_P)
    {}

        // (TEMPLATE) CLASS allocator
template&lt;class T&gt;
    class allocator {
public:
    typedef _SIZT size_type;
    typedef _PDFT difference_type;
    typedef T _FARQ *pointer;
    typedef const T _FARQ *const_pointer;
    typedef T _FARQ&amp; reference;
    typedef const T _FARQ&amp; const_reference;
    typedef T value_type;
    pointer address(reference x) const
        {return (&amp;x); }
    const_pointer address(const_reference x) const
        {return (&amp;x); }
///    template&lt;class U&gt;
///        struct rebind {
///            typedef allocator&lt;U&gt; other;
///            };
///    allocator()
///        {}
///    template&lt;class _U&gt;
///        allocator(const allocator&lt;_U&gt;&amp;)
///        {}
///    template&lt;class _U&gt;
///        allocator&lt;_T&gt;&amp; operator=(const allocator&lt;_U&gt;&amp;)
///        {}
    pointer allocate(size_type n, const void *)    ///
        {return (_Allocate((difference_type)n,    ///
            (pointer)0)); }    ///
    char _FARQ *Charalloc(size_type _N)    ///
        {return (_Allocate((difference_type)_N,    ///
            (char _FARQ *)0)); }    ///
    void deallocate(void _FARQ *p)
        {operator delete(p); }
    void construct(pointer p, const T&amp; val)
        {_Construct(p, val); }
    void destroy(pointer p)
        {_Destroy(p); }
    _SIZT max_size() const
        {_SIZT n = (_SIZT)(-1) / sizeof (T);
        return (0 &lt; n ? n : 1); }
    };

        // CLASS allocator&lt;void&gt;
class allocator&lt;void&gt; {
public:
    typedef void T;
    typedef T _FARQ *pointer;
    typedef const T _FARQ *const_pointer;
    typedef T value_type;
///    template&lt;class U&gt;
///        struct rebind {
///            typedef allocator&lt;U&gt; other;
///            };
    };

        // OPERATORS FOR allocator
template&lt;class T, class U&gt;
    bool operator==(const allocator&lt;T&gt;&amp;, const allocator&lt;U&gt;&amp;)
    {return (true); }
///template&lt;class _T, class _U&gt;
///    bool operator!=(const allocator&lt;T&gt;&amp;, const allocator&lt;U&gt;&amp;)
///       {return (false); }&lt;d&gt;
</pre>
</body></html>
