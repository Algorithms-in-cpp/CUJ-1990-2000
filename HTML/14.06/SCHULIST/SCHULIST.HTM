






<HTML>
     
     <HEAD>


          
          <TITLE>June 1996/A Simple Matrix Class</TITLE>
     </HEAD>
     
     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          
          <H2><A href="../tocjun.htm"><IMG src="../../toc.gif" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#ff0000">
          Scientific/Numerical Programming</FONT></H2>
          
          <HR>
          
          <H2 ALIGN="center"><FONT COLOR="#800000">A Simple Matrix Class</FONT></H2>
          
          <H3 ALIGN="center"><FONT COLOR="#800000">Stephen Schulist</FONT></H3>
          
          <BLOCKQUOTE>
               
               <p>Matrices occur throughout mathematics,
                    and pop up often in engineering computations. A simple
                    template matrix class lets you manipulate matrix objects
                    with a safe and convenient notation.</p>
          </BLOCKQUOTE>
          <HR>
          <BLOCKQUOTE>
               
               <h4><FONT COLOR="#000080">Introduction</FONT></H4>
               
               <p>I build scientific, mathematically
                    intense programs for a living, and I find that matrices,
                    like integers, floats, and complex numbers, are
                    indispensable building blocks. I prefer matrices
                    (rectangular, two-dimensional collections of scalars) over
                    vectors (one-dimensional collections of scalars) because
                    matrices are more robust. Row and column vectors can be
                    viewed as merely degenerate matrices.</p>
               
               <h4><FONT COLOR="#000080">The Matrix Class</FONT></H4>
               
               <p>The Matrix class is based on a
                    templatized Array class. <A href="listing1.htm">Listing 1</A>
                    shows Array's definition and part of its implementation. The
                    Matrix class (<A href="listing2.htm">Listing 2</a>)

                    declares a private member which is an Array.<BR>
                     Using the Matrix class, I can write code in a syntax that
                    mimics standard math notation. Thus, the matrix</p>
               
               <p></p>
               <BLOCKQUOTE><IMG src="schul_01.gif" WIDTH="79" HEIGHT="39"></BLOCKQUOTE>
               
               <p> becomes</p>

<PRE>
Matrix&lt;float&gt; A(2,2);
A(0,0) = 1; A(0,1) = 2;
A(1,0) = 3; A(1,1) = 4;
</PRE>
               
               <p></p>
               
               <p>in C++, and the column vector<BR>
                    </p>
               <BLOCKQUOTE> <IMG src="schul_02.gif" WIDTH="59" HEIGHT="39"><BR>
                     </BLOCKQUOTE> becomes

<PRE>
Matrix&lt;float&gt; x(2,1);
x(0,0) = 1;
x(1,0) = 2;
</PRE> 
               
               <p><BR>
                     Note that the constructor's arguments are the number of
                    rows and columns, not element values. To set element values,
                    I use the parentheses operator (<A href="listing2.htm">Listing
                         2</a>)
. Matrix's parenthesis operator calls Array's
                    operator[]. Array's operator[] takes a single index, so
                    Matrix's operator() must translate rows and columns to this
                    single index. Also, the Matrix elements' indices are zero
                    based.<BR>
                     Perhaps the initializations don't look too much like
                    standard notation, but the resemblance improves when I use
                    the overloaded math operators. The Matrix class supplies
                    overloaded operators for some of the most common matrix
                    operations. First, matrices may be multiplied and divided by
                    scalars. So, for example, the matrix equation</p>
               
               <p>y = x/2</p>
               
               <p>becomes</p>

<PRE>
Matrix&lt;float&gt; y = x/2;
</PRE>
               
               <p>Second, matrices with equal dimensions
                    may be added and subtracted. The equation</p>
               
               <p><BR>
                     C = A - B<BR>
                     becomes</p>

<PRE>
Matrix&lt;float&gt; C = A - B;
</PRE>
               
               <p><BR>
                     Third, two matrices may be multiplied if the number of
                    columns of the first matrix equals the number of rows of the
                    second. The equation</p>
               
               <p><BR>
                     y = A x x<BR>
                     becomes</p>

<PRE>
y = A * x
</PRE>
               
               <p>This is the inner product of linear
                    algebra. <A href="listing2.htm">Listing 2</a>
shows the
                    implementation of operator*() with two Matrix agruments.</p>
               
               <p>The Matrix class also defines negation
                    and transpose operators. The statement</p>
               
               <p><BR>
                     y = -x<BR>
                     becomes</p>

<PRE>
y = -x;
</PRE>
               
               <p>and equals</p>
               
               <P></P>
               <BLOCKQUOTE><IMG src="schul_03.gif" WIDTH="31" HEIGHT="39"></BLOCKQUOTE>
               
               <p> The statement</p>
               
               <p> y = x<SUP>T</SUP></p>
               
               <p> becomes</p>

<PRE>
y= ~x;
</PRE>
               
               <p><BR>
                     and equals</p>
               
               <P></P>
               <BLOCKQUOTE> <IMG src="schul_04.gif" WIDTH="37" HEIGHT="21"></BLOCKQUOTE>
               
               <p> Comparing this row vector with its
                    conjugate column vector, you may think that because they
                    have the same elements they are equal. They are not. Two
                    matrices are equal only if they have the same element in
                    each position, which also implies that they must have the
                    same number of rows and the same number of columns.</p>
               
               <p>The Matrix class defines equality and
                    inequality operators, as well as the assignment operator.
                    Matrix's operator==() and operator=() both appear in
                    <A href="listing2.htm">Listing 2</a>.
 Note that while
                    Matrix's operator=() simply calls Array's, Matrix's
                    operator==() does not call Array's operator==().<BR>
                     The matrix class also provides a few utility functions. For
                    example, I can get the number of rows and columns:</p>

<PRE>

int nRows = A.Rows();
int nCols = A.Columns();
</PRE>
               
               <p>I also can get individual rows and
                    columns:</p>

<PRE>
Matrix&lt;float&gt; row = A.Row(0);
Matrix&lt;float&gt; col = A.Column(1);
</PRE>
               
               <p>Last, I can set individual rows and
                    columns:</p>

<PRE>
A.SetRow(0, row);
A.SetColumn(1, col);
</PRE>
               
               <h4><FONT COLOR="#000080">Conclusion</FONT></H4>
               
               <p>I have used matrices to solve systems
                    of equations. I have also used tables of matrices to define
                    missile trajectories. I have even used the Matrix class as a
                    base class for image processing. In short, the Matrix class
                    is one of the most valuable members of my software toolbox.
                    I hope you'll use it too.</p>
               
               <p><I>Stephen O. Schulist has an M.S. in
                    Physics from UCLA and is a Staff Scientist at Aero Optics,
                    an aerospace consulting firm in Los Angeles. He has been
                    programming C++ for three years and may be reached at
                    sos@aero-optics.com.</I></p> 

<h4><a href="../../../source/1996/jun96/schulist.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
     </BODY>
</HTML>
