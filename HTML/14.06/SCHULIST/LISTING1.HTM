



<HTML><HEAD>

<TITLE>June 1996/A Simple Matrix Class/Listing 1</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4>
<A name="HEADING1">Listing 1: The underlying Array class</A></h4>


<pre>

// Stephen O. Schulist - 29 October 1995

#ifndef _SOS_ARRAY_H
#define _SOS_ARRAY_H

#include "assert.h"
#include &lt;iostream.h&gt;

template&lt;class T&gt; class Array
{
public:

   Array(int length = 0);
   Array(int length, const T&amp; value);
   Array(const Array&lt;T&gt;&amp; array);
  ~Array();

  Array&lt;T&gt;&amp; operator=(const Array&lt;T&gt;&amp; array);

  int operator==(const Array&lt;T&gt;&amp; array) const;
  int operator!=(const Array&lt;T&gt;&amp; array) const;

  void NewLength(int length, const T&amp; value = 0);

  int Length() const { return m_nLength; }

  const T&amp; operator[](int index) const;
        T&amp; operator[](int index);

private:

  int m_nLength;
  T*  m_pValue;
};

template&lt;class T&gt; inline Array&lt;T&gt;::Array(int length) :
  m_nLength(length)
{
  ASSERT( m_nLength &gt;= 0 );

  m_pValue = new T[m_nLength];
}

template&lt;class T&gt; inline Array&lt;T&gt;::Array(int length, const T&amp; value) :
  m_nLength(length)
{
  ASSERT( m_nLength &gt;= 0 );
  m_pValue = new T[m_nLength];
  for ( int n = 0; n &lt; m_nLength; n++ )
    m_pValue[n] = value;
}

template&lt;class T&gt; inline Array&lt;T&gt;::Array(const Array&lt;T&gt;&amp; array) :
  m_nLength(array.m_nLength)
{
  ASSERT( m_nLength &gt;= 0 );
  m_pValue = new T[m_nLength];
  for ( int n = 0; n &lt; m_nLength; n++ )
    m_pValue[n] = array.m_pValue[n];
}

template&lt;class T&gt; inline Array&lt;T&gt;::~Array()
{
  delete [] m_pValue;
}

template&lt;class T&gt; inline Array&lt;T&gt;&amp; Array&lt;T&gt;::operator=(const Array&lt;T&gt;&amp; array)
{
  if ( this != &amp;array )
  {
    delete [] m_pValue;

    m_nLength = array.m_nLength;

    m_pValue  = new T[m_nLength];
    for ( int n = 0; n &lt; m_nLength; n++ )
    {
      m_pValue[n] = array.m_pValue[n];
    }
  }

  return *this;
}

template&lt;class T&gt; inline int Array&lt;T&gt;::operator==(const Array&lt;T&gt;&amp; array) const
{
  int equal = ( m_nLength == array.m_nLength );
  for ( int n = 0; equal &amp;&amp; ( n &lt; m_nLength ); n++ )
  {
    equal = ( m_pValue[n] == array.m_pValue[n] );
  }

  return equal;
}

template&lt;class T&gt; inline int Array&lt;T&gt;::operator!=(const Array&lt;T&gt;&amp; array) const
{
  return !operator==(array);
}

template&lt;class T&gt; inline void Array&lt;T&gt;::NewLength(int length, const T&amp; value)
{
  T* pTmp = new T[length];
  const int limit = ( length &lt; m_nLength ) ? length : m_nLength;
  for ( int n = 0; n &lt; limit; n++ )
  {
    pTmp[n] = m_pValue[n];
  }
  for ( int n = limit; n &lt; length; n++ )
  {
    pTmp[n] = value;
  }
  delete [] m_pValue;
  m_nLength = length;
  m_pValue  = pTmp;
}

template&lt;class T&gt; inline const T&amp; Array&lt;T&gt;::operator[](int index) const
{
  ASSERT( index &gt;= 0 );
  ASSERT( index &lt; m_nLength );

  return m_pValue[index];
}

template&lt;class T&gt; inline T&amp; Array&lt;T&gt;::operator[](int index)
{
  ASSERT( index &gt;= 0 );
  ASSERT( index &lt; m_nLength );
  return m_pValue[index];
}

template&lt;class T&gt; inline ostream&amp; operator&lt;&lt;(
  ostream&amp; stream, const Array&lt;T&gt;&amp; array)
{
  for ( int n = 0; n &lt; array.Length(); n++ )
  {
    stream &lt;&lt; array[n] &lt;&lt; endl;
  }
  return stream;
}

#endif

</pre>
</body></html>
