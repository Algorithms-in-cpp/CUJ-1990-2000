



<HTML><HEAD>

<TITLE>June 1996/A Simple Matrix Class/Listing 2</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4>
<A name="HEADING1">Listing 2: The Matrix class</A></h4>


<pre>

// Stephen O. Schulist - 1 September 1995

#ifndef _SOS_MATRIX_H
#define _SOS_MATRIX_H

#include "array.h"

template&lt;class T&gt; class Matrix
{
public:

   Matrix(int nRows = 0, int nCols = 0);
   Matrix(const Matrix&lt;T&gt;&amp; matrix);
  ~Matrix();

  Matrix&lt;T&gt;&amp; operator=(const Matrix&lt;T&gt;&amp; matrix);

  int operator==(const Matrix&lt;T&gt;&amp; matrix) const;
  int operator!=(const Matrix&lt;T&gt;&amp; matrix) const;

  int    Rows() const { return m_nRows; }
  int Columns() const { return m_nCols; }

  Matrix&lt;T&gt; operator-() const;
  Matrix&lt;T&gt; operator~() const;
  Matrix&lt;T&gt; operator+(const Matrix&lt;T&gt;&amp; m) const;
  Matrix&lt;T&gt; operator-(const Matrix&lt;T&gt;&amp; m) const { return *this + -m; }
  Matrix&lt;T&gt; operator*(const T&amp; t) const;
  Matrix&lt;T&gt; operator/(const T&amp; t) const { return *this * (1/t); }

  Matrix&lt;T&gt;&amp; operator+=(const Matrix&lt;T&gt;&amp; m) { return *this = *this + m; }
  Matrix&lt;T&gt;&amp; operator-=(const Matrix&lt;T&gt;&amp; m) { return *this = *this - m; }
  Matrix&lt;T&gt;&amp; operator*=(const T&amp; t)         { return *this = *this * t; }
  Matrix&lt;T&gt;&amp; operator/=(const T&amp; t)         { return *this = *this / t; }

  friend Matrix&lt;T&gt; operator*(const T&amp; t, const Matrix&lt;T&gt;&amp; m) { return m * t; }

  Matrix&lt;T&gt; operator*(const Matrix&lt;T&gt;&amp; m) const;

  Matrix&lt;T&gt;    Row(int nRow) const;
  Matrix&lt;T&gt; Column(int nCol) const;

  void SetRow   (int nRow, const Matrix&lt;T&gt;&amp; matrix);
  void SetColumn(int nCol, const Matrix&lt;T&gt;&amp; matrix);

  const T&amp; operator()(int nRow, int nCol) const;
        T&amp; operator()(int nRow, int nCol);

private:

  int m_nRows;
  int m_nCols;
  Array&lt;T&gt; m_data;
};

template&lt;class T&gt; inline Matrix&lt;T&gt;::Matrix(int nRows, int nCols) :
  m_nRows(nRows), m_nCols(nCols), m_data(nRows*nCols)
{
}

template&lt;class T&gt; inline Matrix&lt;T&gt;::Matrix(const Matrix&lt;T&gt;&amp; matrix) :
  m_nRows(matrix.m_nRows), m_nCols(matrix.m_nCols), m_data(matrix.m_data)
{
}

template&lt;class T&gt; inline Matrix&lt;T&gt;::~Matrix()
{
}

template&lt;class T&gt; inline Matrix&lt;T&gt;&amp; Matrix&lt;T&gt;::operator=(
  const Matrix&lt;T&gt;&amp; matrix)
{
  if ( this != &amp;matrix )
  {
    m_nRows = matrix.m_nRows;
    m_nCols = matrix.m_nCols;
    m_data  = matrix.m_data;
  }
  return *this;
}

template&lt;class T&gt; inline int Matrix&lt;T&gt;::operator==(
  const Matrix&lt;T&gt;&amp; matrix) const
{
  int equal = ( m_nRows == matrix.m_nRows ) &amp;&amp; ( m_nCols == matrix.m_nCols );
  for ( int m = 0; equal &amp;&amp; ( m &lt; m_nRows ); m++ )
  for ( int n = 0; equal &amp;&amp; ( n &lt; m_nCols ); n++ )
    equal = ( (*this)(m,n) == matrix(m,n) );
  return equal;
}

template&lt;class T&gt; inline int Matrix&lt;T&gt;::operator!=(
  const Matrix&lt;T&gt;&amp; matrix) const
{
  return !operator==(matrix);
}

template&lt;class T&gt; inline Matrix&lt;T&gt; Matrix&lt;T&gt;::operator-() const
{
  Matrix&lt;T&gt; matrix(m_nRows, m_nCols);
  for ( int m = 0; m &lt; m_nRows; m++ )
  for ( int n = 0; n &lt; m_nCols; n++ )
    matrix(m, n) = -(*this)(m, n);
  return matrix;
}

template&lt;class T&gt; inline Matrix&lt;T&gt; Matrix&lt;T&gt;::operator~() const
{
  Matrix&lt;T&gt; matrix(m_nCols, m_nRows);
  for ( int m = 0; m &lt; m_nRows; m++ )
  for ( int n = 0; n &lt; m_nCols; n++ )
    matrix(n, m) = (*this)(m, n);
  return matrix;
}

template&lt;class T&gt; inline Matrix&lt;T&gt; Matrix&lt;T&gt;::operator+(const Matrix&lt;T&gt;&amp; matrix) const
{
  ASSERT(m_nRows == matrix.m_nRows);
  ASSERT(m_nCols == matrix.m_nCols);
  Matrix&lt;T&gt; tmp(m_nRows, m_nCols);
  for ( int m = 0; m &lt; m_nRows; m++ )
  for ( int n = 0; n &lt; m_nCols; n++ )
    tmp(m, n) = (*this)(m, n) + matrix(m, n);
  return tmp;
}

template&lt;class T&gt; inline const T&amp; Matrix&lt;T&gt;::operator()(
  int nRow, int nCol) const
{
  ASSERT(nRow &lt; m_nRows);
  ASSERT(nCol &lt; m_nCols);

  return m_data[nRow*m_nCols + nCol];
}

template&lt;class T&gt; inline T&amp; Matrix&lt;T&gt;::operator()(int nRow, int nCol)
{
  ASSERT(nRow &lt; m_nRows);
  ASSERT(nCol &lt; m_nCols);

  return m_data[nRow*m_nCols + nCol];
}

template&lt;class T&gt; inline Matrix&lt;T&gt; Matrix&lt;T&gt;::operator*(const T&amp; t) const
{
  Matrix&lt;T&gt; matrix(m_nRows, m_nCols);
  for ( int m = 0; m &lt; m_nRows; m++ )
  for ( int n = 0; n &lt; m_nCols; n++ )
    matrix(m, n) = (*this)(m, n) * t;
  return matrix;
}

template&lt;class T&gt; inline Matrix&lt;T&gt; Matrix&lt;T&gt;::operator*(const Matrix&lt;T&gt;&amp; matrix) const
{
  ASSERT(m_nCols == matrix.m_nRows);

  Matrix tmp(m_nRows, matrix.m_nCols);

  for ( int m = 0; m &lt;        m_nRows; m++ )
  for ( int n = 0; n &lt; matrix.m_nCols; n++ )
  {
    tmp(m, n) = 0;
    for ( int i = 0; i &lt; m_nCols; i++ )
      tmp(m, n) += (*this)(m, i) * matrix(i, n);
  }

  return tmp;
}

template&lt;class T&gt; inline Matrix&lt;T&gt; Matrix&lt;T&gt;::Row(int nRow) const
{
  ASSERT(nRow &lt; m_nRows);
  Matrix&lt;T&gt; matrix(1, m_nCols);
  for ( int n = 0; n &lt; m_nCols; n++ )
    matrix(0, n) = (*this)(nRow, n);
  return matrix;
}

template&lt;class T&gt; inline Matrix&lt;T&gt; Matrix&lt;T&gt;::Column(int nCol) const
{
  ASSERT(nCol &lt; m_nCols);
  Matrix&lt;T&gt; matrix(m_nRows, 1);
  for ( int m = 0; m &lt; m_nRows; m++ )
    matrix(m, 0) = (*this)(m, nCol);
  return matrix;
}

template&lt;class T&gt; inline void Matrix&lt;T&gt;::SetRow(
  int nRow, const Matrix&lt;T&gt;&amp; matrix)
{
  ASSERT(nRow &lt; m_nRows);
  ASSERT(matrix.Rows() == 1);
  ASSERT(matrix.Columns() == m_nCols);
  for ( int n = 0; n &lt; m_nCols; n++ )
    (*this)(nRow, n) = matrix(0, n);
}

template&lt;class T&gt; inline void Matrix&lt;T&gt;::SetColumn(
  int nCol, const Matrix&lt;T&gt;&amp; matrix)
{
  ASSERT(nCol &lt; m_nCols);
  ASSERT(matrix.Rows() == m_nRows);
  ASSERT(matrix.Columns() == 1);
  for ( int m = 0; m &lt; m_nRows; m++ )
    (*this)(m, nCol) = matrix(m, 0);
}

template&lt;class T&gt; inline ostream&amp; operator&lt;&lt;(
  ostream&amp; stream, const Matrix&lt;T&gt;&amp; matrix)
{
  for ( int m = 0; m &lt; matrix.Rows(); m++ )
  {
    for ( int n = 0; n &lt; matrix.Columns(); n++ )
    {
      stream &lt;&lt; matrix(m,n) &lt;&lt; " ";
    }
    stream &lt;&lt; endl;
  }
  return stream;
}

#endif // MATRIX_H
</pre>
</body></html>
