<HTML><HEAD>
<TITLE>October 1991/Debugging Instrumentation Wrappers For Heap Functions/Listing 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 3</A></h4>
<pre>#include &lt;stdio.h&gt;

#define DEBUG
#include "heaptst1.h"

#define MAX_LINE 256

struct node {
       struct node * left;
       struct node * right;
       char * data;
};

struct node * insert(struct node *, struct node *);
struct node * build_node(char *);
char * getnext(void);
void walk_tree(struct node *);
void free_tree(struct node *);

void main()
{
       char * word;
       struct node *root, *new;
       
       root = NULL;
       free(root);                 /* error */
       
       do {
              word = getnext();
              new = build_node(word);
              root = insert(new,root);
       } while (word != NULL);
       
       walk_tree(root);
       free_tree(root);
       exit(0);
}

struct node * insert(struct node * new, struct node * tree)
{
       if (tree==NULL) return new;
       if (new == NULL) return tree;
       if (strcmp(new-&gt;data,tree-&gt;data) &lt; 0)
          tree-&gt;left = insert(new,tree-&gt;left);
       else
          tree-&gt;right = insert(new,tree-&gt;right);
       return tree;
}
struct node * build_node(char * word)
{
       struct node * new;
       
       if (word == NULL) return NULL;
       new = (struct node *) malloc( sizeof(struct node));
       new-&gt;right = new-&gt;left = NULL;
       new-&gt;data = word;
       return new;
}

char * getnext(void)
{
       char * new;
       char buffer[MAX_LINE];
       if (gets(buffer) == NULL) return NULL;
       new = (char *) malloc( strlen(buffer)+1);
       strcpy(new,buffer);
       return new;
}

void walk_tree(struct node * tree)
{
       if (tree == NULL) return;
       if (tree-&gt;left != NULL) walk_tree(tree-&gt;left);
       if (tree-&gt;data != NULL) printf("%s\n",tree-&gt;data);
       if (tree-&gt;right != NULL) walk_tree(tree-&gt;right);
}

void free_tree(struct node * tree)
{
       if (tree == NULL) return;
       if (tree-&gt;left != NULL)
            free_tree(tree-&gt;left);
       if (tree-&gt;right != NULL)
            free_tree(tree-&gt;right);
       if (tree-&gt;data != NULL)
            free(tree-&gt;data);
       free(tree);
       free(tree);                 /* error */
}
/* End of File */
</pre>
</BODY>
</HTML>
