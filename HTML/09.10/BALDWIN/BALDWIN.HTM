


<HTML>
<HEAD>

<TITLE>October 1991/Debugging In C &#151; An Overview</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tococt.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Debugging</FONT></H2>

<hr><h2 align="center"><font color="#800000">Debugging In C &#151; An Overview<A name="0220_0114"><A name="0220_0114"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0220_0000"><A name="0220_0000">Wahhab Baldwin</font></h3><hr><blockquote><P>
<P><i><A name="0220_0000"><A name="0220_0000">Wahhab has 25 years' experience in software development and is currently owner of Baldwin Software Services, a small company specializing in helping large companies apply new technology and improve their software development process. He can be reached at 1011 Union St., Manchester, NH 03104.</i></P><P>
Despite the advantages C offers in the way of flexibility, expressiveness, portability, and broad library support, debugging must be counted as one of its disadvantages. Every C programmer has experienced the hours of frustration trying to find a bug that would never have occurred in a language such as BASIC or Modula-2.<P>
There are four fundamental approaches to debugging:<P>
<UL><li>Avoid creating bugs.</li>
<li>Use tools to analyze a program.</li>
<li>Instrument a program with debugging code.</li>
<li>Use an external debugger.</li></UL>
In this article I will cover each approach in turn.<P>
<h4><FONT COLOR="#000080"><A name="0220_0115">Avoiding Bugs<B><A name="0220_0115"></B></FONT></h4></P>
While avoiding creating bugs sounds like a platitude, it is probably the most effective form of debugging. The best method of bug avoidance is to know what is expected of your program and to develop clearly written specifications before writing the code. In addition, writing a comment block for each function &#151; that describes its input, output, and assumptions &#151; will not only prevent bugs, but will make them much easier to find, not only now, but three years in the future.<P>
A second technique for avoiding bugs is to use function prototypes. A common cause of pernicious bugs is disagreement between the parameters passed to a function and those the function expects. The problem might be a <I>long-short</I> mismatch, a <I>signed-unsigned</I> mismatch, or forgetting to take a variable's address. In any case, using fully specified prototypes in a header file will catch or correct all these.<P>
The Microsoft C compiler offers a switch, <I>/Zg</I>, which will generate function prototypes from an existing C program. If you have inherited some program without prototypes, creating header files using this option is an excellent first step.<P>
Hungarian notation can prevent bugs. Named after the nationality of its inventor, Microsoft employee Charles Simonyl, this technique involves placing a prefix in front of a variable name to indicate its type. Examples would be <I>n</I> for count, <I>a</I> for array, <I>p</I> for pointer, <I>s</I> for short, <I>l</I> for long, <I>b</I> for boolean, <I>ch</I> for character, <I>sz</I> for null-terminated strings, or <I>h</I> for handle. These are combined, as in<P>
<pre>unsigned short *pusVar;</pre>
Since each variable carries its own type information, you are less likely to inadvertently use a variable of the wrong type.<P>
Another frequent cause of bugs is uninitialized data. In C, <I>auto</I> variables and memory allocated by calls to <I>malloc</I> are uninitialized. The programmer himself must make a point of initializing all <I>auto</I> variables. Using <I>calloc</I> (which clears its returned memory) or <I>memset</I> will help avoid problems that arise from uninitiated allocated memory.<P>
<h4><FONT COLOR="#000080"><A name="0220_0116">Using Tools To Analyze Your Program<B><A name="0220_0116"></B></FONT></h4></P>
<I>lint</I> is a excellent tool for both preventing and finding bugs. I use PC-Lint by Gimpel. Born of the UNIX environment, <I>lint</I> is a program that scans your program, looking for any conceivable semantic error. You may be shocked at the sheer volume of error messages it produces (though PC-Lint allows you to disable certain messages or classes of message). Developing the habit of writing code that passes <I>lint's</I> scrutiny will prevent many a bug. Using function prototypes in a header, as I discussed earlier, will catch some of the errors for which C programmers used to rely on <I>lint</I>. Still, there are many other situations in which <I>lint</I> is invaluable.<P>
One of the simplest tools for program analysis is <I>cb</I>, the UNIX C Beautifier, and its DOS offspring. I use Source Print, by Powerline Laboratories. This product not only indents your source code rationally (in your choice of three styles), but prints output with structure blocks marked. It also provides boldfaced keywords, a table of contents and an index to your functions and/or globals. Aside from making other people's source code easier to read, Source Print has found bugs such as<P>
<pre>if (a)
   if (b)
      funb();
else
   fun_noa ();</pre>
where the <I>else</I> clause is actually applied to the <I>if (b)</I> line, not the first line as intended.<P>
There are several tools available that can build cross-reference listings, structure charts, etc. Stewart Nutter's <I>cp</I> program in the August, 1988, <I>Dr. Dobb's Journal</I> draws a tree diagram of function calls within your C program. [<I>Also see Eric Bergman-Terrell's article on page 33 of this issue. </I><I></I>&#151;<I> pjp</I>] CLEAR+ for C, from CLEAR Software, constructs flow charts, tree charts, formatted source listings, and function cross references. Source Doc by Intelligent Solutions not only provides documentation reports, but also prepares function comments which it inserts into your code.<P>
On another level, you compiler's assembly language output is the ultimate documentation of what your program does. Even the best compilers have bugs themselves. Occasionally, it is only by following the assembly code that a program's performance becomes comprehensible. Most compilers have a switch for producing a mixed C-assembly listing. The F3 key in Codeview will let you toggle between source, assembly, and both.<P>
<h4><FONT COLOR="#000080"><A name="0220_0117">Instrumenting Your Source Code<A name="0220_0117"></FONT></h4></P>
Probably the best known and still one of the most useful techniques for debugging C is the venerable <I>printf</I> statement. <I>printf</I> statements placed at various points in your code will indicate where execution has reached in your program and will display the values of suspect variables as your program runs. In many cases, this information will show which variable is creating a wrong choice or value, leading you to a quick fix, or to the next routine which must be inspected.<P>
Many tools and techniques can improve your use of <I>printfs</I>. ANSI C provides the __<I>LINE</I>__ and  __<I>FILE</I>__ macros, which will indicate the location of the debug statement in your code. You can best use these identifiers by combining them in a macro, such as<P>
<pre>#define DEBUGSTR(var) {if (debugstr) \
   printf("DEBUGSTR Module:\n%s Line: %d String "\
   #var "= '%s'\n", __FILE__, __LINE__, var);}</pre>
This macro definition uses the new ANSI "stringizing" operator # to put the variable name into the debug statement, and will produce output such as<P>
<pre>DEBUGSTR Module:
DEMO.C Line: 162 String szName =
   'Jones, Bill'</pre>
This macro demonstrates another feature useful in instrumenting your program &#151; the use of switches to turn debugging statements on and off. Typing command line parameters can control the use of the debugging statements. It's best to leave your debugging code in place until your program is fully debugged.<P>
The <I>assert</I> macro, also a part of ANSI C, is a powerful tool in your debugging arsenal. Written as<P>
<pre>assert (expression)</pre>
<I>assert</I> will print a debugging message if <I>expression</I> is false, such as<P>
<pre>Assertion failed: expression,
file xxx, line nnn</pre>
and then abort the program. The <I>assert</I> macro also adds the nice touch that if you define <I>NDEBUG</I>, either at the command line or through a <I>#define</I> statement, no assert code is generated.<P>
Assertions are best used to catch "impossible" cases. For example, say that <I>flag</I> always carries the value '<I>T</I>' or '<I>F</I>'. You might write<P>
<pre>if (flag == 'T')
   process_true();
else {
   assert(flag == 'F');
   process_false();
}</pre>
Developing the habit of using <I>assert</I> will catch those "impossible" conditions that are so hard to find otherwise.<P>
By the way, programs that run in a windowing environment give you a choice of directing debugging information. Debug output can be directed to a file or to a debug window. Each method has its benefits and can be specified on the command-line. If you direct output to a file, use unbuffered file output to ensure you get the last message in case of a program crash.<P>
<h4><FONT COLOR="#000080"><A name="0220_0118">Managing Memory<A name="0220_0118"></FONT></h4></P>
There are probably three key causes of bugs endemic to C:<P>
<UL><li>data mismatches</li>
<li>invalid pointers</li>
<li>memory errors</li></UL>
Memory errors can arise since C allows you to allocate and free your own memory.<P>
Writing your own front-end to <I>malloc, calloc, realloc</I>, and <I>free</I> can be a great help in debugging memory errors. The sample code in <A href="list1.htm">Listing 1</a>
serves this purpose. [<I>Also see Robert Ward's article on page 40 of this issue. </I><I></I>&#151;<I> pjp</I>] By adding <I>CDEBUG.0BJ</I> to a library you are using, you can modify your program's behavior with a command-line switch. By defining <I>DEBUG</I> (in Microsoft C, type the /<I>DDEBUG</I> switch at the command line), the debugging versions of <I>malloc, calloc</I>, etc., will be invoked. When your code has been thoroughly debugged, you can recompile without this switch and all debugging code will be deleted.<P>
To use the code in <A href="list1.htm">Listing 1</a>,
 place the line<P>
<pre>#include "memdebug.h"</pre>
in your source code. When <I>DEBUG</I> is defined, all calls to <I>malloc, calloc, realloc</I>, and <I>free</I> will refer to your debug versions, and will pass the __<I>LINE</I>__ and __<I>FILE</I>__ variables. You can leave the <I>#include "memdebug.h"</I> in your program even when <I>DEBUG</I> is no longer defined, since the statement will generate no code. The real work is done by the replacement functions in <I>memdebug.c</I> (see <a href="list2.htm">Listing 2</A>).<P>
The modified <I>malloc</I> checks that the request is not for zero bytes. It will exit the program with a message if sufficient memory is not available. It also adds the allocated memory address to a linked list of memory allocations. The new <I>free</I> checks that it is not being passed a <I>null</I> pointer, and also that the address to <I>free</I> is in the linked list built by <I>malloc</I>. A call to <I>d__memlist</I> at the end of your program shows what memory has not been freed. Additional protection is given by placing two-byte sentinels at the beginning and end of requested memory. The <I>free</I> request checks that these bytes have not been overwritten. This catches common errors such as<P>
<pre>char *str1 = "A string";
char *str2;
str2 = malloc(strlen(str1));
strcpy(str2, str1);</pre>
Here, <I>malloc</I> requests one too few bytes, since <I>strlen</I> does not include the length of the <I>null</I> terminator on the string. Such a bug can cause problems that are stubbornly intermittent and that show up somewhere completely unrelated in the program.<P>
Another useful instrumentation technique is to insert a macro call at the beginning and end of every function. For example:<P>
<pre>my_func(int i, char *str)
{
   char *fn = "my_func";
      BEGIN_FUNC (fn);
      ... /* Code goes here */
      END_FUNC(fn);
}</pre>
These macros can be eliminated by using<P>
<pre>#define BEGIN_FUNC(x)
#define END_FUNC (x)</pre>
Or they can be converted into function calls. You can use this technique not only to provide a backtrace from some point in your program, but to generate counts for each function call. Sherlock, by Edward K. Ream, a commercial tool (now available in the CUG Library), helps you instrument your programs. Sherlock provides a variety of C macros and support routines called by those macros. It places macro calls at the beginning and end of your functions as described above.<P>
<h4><FONT COLOR="#000080"><A name="0220_0119">External Debuggers<A name="0220_0119"></FONT></h4></P>
The last fundamental approach to debugging involves using an external debugger. There are two types: hardware and software. Hardware debuggers (or emulators) can debug code that normal software debuggers can't reach, such as device drivers, interrupt handlers, real-time programs, memory-resident utilities, and non-MS-DOS programs. They offer speed advantages when watching for changes to a location in memory. By using a breakout switch, you can debug a program after it has locked up the computer. Because hardware debuggers often use their own memory space, you can use them where there is no room to fit a conventional debugger. On the down side, they tend to be expensive. Also, my experience with them indicates they are harder to use than a software debugger.<P>
I have used the Atron Source Probe debugger with its optional support for PLINK86 Plus-linked files. I was unable to use a software debugger because of MS-DOS's 640K barrier. However, I later switched to Microsoft's Codeview under OS/2. While Atron is now out of business, Periscope offers a range of hardware debuggers that support source-level debugging, including local variables for Microsoft C, support for popular linkers, and support for Microsoft Windows applications.<P>
The most ancient of software debuggers for MS-DOS is of course Debug, included with MS-DOS until version 4. Since Debug does not provide source-level support for C, Microsoft developed Symdeb. Later, Microsoft developed Codeview, which provides full-screen debugging. Grafted on top of its predecessors, Codeview was a great step forward at the time. To use Codeview at the source level requires compiling and linking your program with special options. Special debugging information is placed in the <I>.EXE</I> file.<P>
Programmers debugging very large programs may find MagicCV, by Nu-Mega Technologies, to be valuable. MagicCV lets Codeview run in a separate virtual machine, taking only 4-8K from the address space of your application. Nu-Mega Technologies also makes a special Windows version that is less significant since the release of Windows 3.0. MagicCV runs on 80386s and can coexist with programs like ramdrive or vdisk, but not with DOS extenders like QEMM-386 or 386^Max. However, MagicCV provides its own memory manager with a Load High facility so that drivers and TSRs can be hidden above 640K.<P>
NuMega Technologies also offer SoftIce, which uses the virtual 8088 capabilities of the 80386 to provide many of the same features as a hardware debugger. It works well with Codeview and MagicCV. While slightly weak in ease of use, I found SoftIce invaluable in debugging TSRs. The company's most recent product is Bounds-Checker, which catches invalid memory use in MS-DOS programs.<P>
Other vendors of C compilers offer their own source debuggers, the most noteworthy of which is probably Borland's Turbo Debugger. Using a more modern and friendlier user interface than Codeview, Turbo Debugger offers a number of additional features such as 80386 Virtual Machine support, remote debugging, and special support for hardware debuggers. Borland also offers a utility, TDCONVRT, which converts programs with Microsoft Codeview debugging information to work with its debugger.<P>
Another notable debugger is Logitech's Multiscope Debugger for OS/2 (requires Release 1.1 or above). This modern, window- oriented debugger runs either in text mode or under Presentation Manager. It also includes a post-mortem debugger, in which a special monitor program creates a memory-dump file if your program crashes. The file can then be investigated to discover what went wrong. This feature is especially valuable if users in the field are testing your program. They can send you the dumps they encounter if the program should crash. Multiscope Debugger versions for MS-DOS and Windows are also available.<P>
As I mentioned earlier, I have found the OS/2 environment very helpful for debugging programs which I intend to deliver under MS-DOS. OS/2's protected memory mode automatically catches invalid pointers. Instead of locking up the machine, as it does under MS-DOS, Codeview will highlight the line in error and display a message &#151; Segmentation Violation, for example. Another OS/2 advantage is the lack of MS-DOS's 640K memory space limitation. MS-DOS must hold both the debugger and program in that relatively small space. Finally, I was able to purchase OS/2 versions of the add-on libraries I used in my programs, or I could recompile the source code for them under OS/2 and get them to work.<P>
Another software approach towards debugging is to use a C interpreter. I have worked with C-terp, by Gimpel Software, and Instant-C, by Rational Systems. Both products provide an integrated development environment, support the Microsoft C libraries, support third-party libraries, and support powerful debugging commands. Instant-C includes a DOS extender, making a 16Mb address space available for the interpreter.<P>
Interpreters offer clear benefits over debuggers. Each function you write can be immediately tested with a variety of parameters, to make sure all the boundary cases work properly. Programs can be modified on the fly and tested again without a lengthy compile-link-test cycle. However, for both of the interpreters mentioned, using third-party libraries requires some set-up time, and in some cases I have been unable to get library functions to work. Another minor gripe is that the interpreter environment restricts you to using its editor, which you may not like. However, if you are writing for a vanilla environment or doing a lot of work in a stable environment, a C interpreter may be the debugging environment of choice.<P>
<h4><FONT COLOR="#000080"><A name="0220_011A">Products Mentioned<A name="0220_011A"></FONT></h4></P>
Bounds-Checker, by Nu-Mega Technologies, P.O. Box 7607, Nashua, NH 03060-7607. $249.<P>
C-terp, by Gimpel Software, 3207 Hogart Lane, Collegeville, PA 19426. (215) 584-4261. DOS $298, UNIX $398.<P>
CLEAR+ for C, by CLEAR Software, Inc., 385 Elliot St., Newton, MA 02164. (617) 965-6755. $199.95.<P>
Codeview, by Microsoft. Packaged with Microsoft C Compiler and other language products.<P>
Instant-C, by Rational Systems, 220 N. Main St., Natick, MA 01760. (508) 653-6006. $495.<P>
MagicCV, by Nu-Mega Technologies, P.O. Box 7607, Nashua, NH 03060. (603) 888-2386. $199. Also Windows version, $199, or $298 for both.<P>
Multiscope Debuggers, by Logitech, 1235 Pear Ave., Suite 111, Mountain View, CA 94043-1444. (800) 999-8846 or (415) 968-4892. FAX (415) 968-4622. DOS version, $179. OS/2 version, $449. Windows version, $379.<P>
PC-Lint, by Gimpel Software, 3207 Hogart Lane, Collegeville, PA 19426. (215) 584-4261. $139.<P>
Periscope Debuggers, by Periscope, 1197 Peachtree St. Atlanta, GA 30361. (800) 722-7006. From $195 to $4,000.<P>
Sherlock, by Edward K. Ream, was until recently a commercial product. It is now available in the C Users Group Library.<P>
SoftIce, by Nu-Mega Technologies, P.O. Box 7607, Nashua, NH 03060. (603) 888-2386. $386; $300 with MagicCV.<P>
SourceDoc, by Intelligent Solutions, Suite 17E, 10740 Lyndale, Minneapolis, MN 55420. (612) 884-0200. $345 single user.<P>
Source Print, by Powerline Software, Inc., 826 Douglass St., San Francisco, CA 94114. (800) 257-5773. $99.<P>
Turbo Debugger, by Borland, International, P.O. Box 660001, Scotts Valley, CA 95066. (800) 331-0877. Included with Turbo C and other compilers.<P>

<h4><a href="../../../source/1991/oct91/baldwin.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
