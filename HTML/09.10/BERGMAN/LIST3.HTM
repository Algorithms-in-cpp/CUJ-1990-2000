<HTML><HEAD>
<TITLE>October 1991/A Call-Tree Generator For C Programs/Listing 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 3</A></h4>
<pre>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include "c_calls.h"

void insert_cell(LIST *list, const char *name)

/*
Insert a new cell in the list with the specified name and return a
pointer to the head of the list. The new cell is inserted in
alphabetical order.
*/

{
LIST new_cell;

if ((*list == NULL) || (namecmp(name, (*list)-&gt;name) &lt; 0))
    {
    if ((new_cell = malloc(sizeof(CELL))) == NULL)
        error("out of memory");
    
    new_cell-&gt;calls = new_cell-&gt;called_from = NULL;
    strcpy(new_cell-&gt;name, name);
    
    if (*list == NULL)
        new_cell-&gt;next = NULL;
    else
        new_cell-&gt;next = *list;
    
    *list = new_cell;
    }
else
    if (stricmp(name, (*list)-&gt;name) != O)
        insert_cell((&amp;(*list)-&gt;next), name);
}
void delete_cell (LIST *list, const char *name)

/* Delete the cell with the specified name from the list. */

{
LIST ptr;

/* If cell to be deleted is at head of list... */
if ((*list != NULL) &amp;&amp; (stricmp{name, (*list)-&gt;name) == 0))
    {
    /* Delete the cell. */
    ptr = *list;
    *list = (*list)-&gt;next;
    free(ptr);
    }

else
    /* Try to delete the cell from the rest of the list. */
    if (*list != NULL)
        delete_cell(&amp;(*list)-&gt;next, name);
}

LIST find_cell(LIST list, const char *name)

/*
Return a pointer to the cell containing the specified name
if it is found in the list. Otherwise return NULL.
*/

{
for (; list != NULL; list = list-&gt;next)
    if (stricmp(name, list-&gt;name) == 0)
        return list;

return NULL;
}
/* End of File */
</pre>
</BODY>
</HTML>
