<HTML><HEAD>
<TITLE>October 1991/A Call-Tree Generator For C Programs/Listing 4</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 4</A></h4>
<pre>#include &lt;stdio.h&gt;
#include "c_calls.h"

void print_calls(LIST list, const char *name, int depth, LIST *fcns)

/*
Print out the name of the current fcn, and recursively print the names
of all fcns called by the current fcn (i.e. "expand" the current fcn).
*/

{
LIST tmp;
int i;

for (i = 1; i &lt;= depth; i++)
    printf("%1d   ", (i - 1) % 10);  /* Print name of current fcn. */

if (find_cell{*fcns, name) != NULL)   /* Don't continue recursive call. */
    printf("%s...\n", name);
else
    {
    printf("%s\n", name);
    
    /* Save the name of the current fcn to avoid infinite expansion. */
    insert_cell(fcns, name);
    
    /* Print out names of all fcns called by the current fcn. */
    tmp = find_cell(list, name);
    
    for (tmp = tmp-&gt;calls; tmp != NULL; tmp = tmp-&gt;next)
        print_calls(list, tmp-&gt;name, depth + 1, fcns);

    /* Delete name of current fcn after completely expanding it. */
    delete_cell(fcns, name);
    }
}

void print_all_calls(LIST list)

/* Print the fcn call tree. */

{
LIST tmp1, tmp2, fcns = NULL;

for (tmp1 = list; tmp1 != NULL; tmp1 = tmp1-&gt;next)
    {
    print_calls(list, tmp1-&gt;name, 0, &amp;fcns);
    printf("\n%s is called by:\n", tmp1-&gt;name);
    
    for (tmp2 = tmp1-&gt;called_from; tmp2 != NULL; tmp2 = tmp2-&gt;next)
        printf(" %s\n", tmp2-&gt;name);
    printf("\n\n");
    }
}
/* End of File */
</pre>
</BODY>
</HTML>
