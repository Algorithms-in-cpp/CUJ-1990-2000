


<HTML>
<HEAD>

<TITLE>October 1991/A Call-Tree Generator For C Programs</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tococt.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Debugging</FONT></H2>

<hr><h2 align="center"><font color="#800000">A Call-Tree Generator For C Programs<A name="0212_0110"><A name="0212_0110"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0212_0000"><A name="0212_0000">Eric Bergman-Terrell</font></h3><hr><blockquote><P>
<P><i><A name="0212_0000"><A name="0212_0000">Eric Bergman-Terrell is an author of astronomy software and articles<I></I> <I></I>about astronomy and computer science. You may contact him at Personal<I></I> <I></I>MicroCosms, 8547 E. Arapahoe Rd., Suite J-147, Greenwood Village, CO<I></I> <I></I>80112.</i></P><P>
<h4><FONT COLOR="#000080"><A name="0212_0111">Introduction<A name="0212_0111"></FONT></h4></P>
A call tree shows the hierarchy of function calls in a program. For example, the call tree in <A href="fig1.htm">Figure 1</a>
shows:<P>
<UL><li><I>main</I> calling functions <I>one, two</I>, and <I>three</I></li>
<li><I>function </I>one<I> calling </I>three<I> and </I>four<I></I></li>
<li><I>two</I> calling itself, <I>four</I> and <I>six </I>and so on.</li></UL>
While graphic dispays of call trees, such as <A href="fig1.htm">Figure 1</a>,
 are clearest, call trees can also be displayed using text and indentation, as in <A href="tab1.htm">Table 1</a>.
 Note that <A href="fig1.htm">Figure 1</a>
and <A href="tab1.htm">Table 1</a>
give the same information.<P>
<h4><FONT COLOR="#000080"><A name="0212_0112"><I>C_CALLS<A name="0212_0112"></I></FONT></h4></P>
Since call trees can clarify the function interaction of complex programs, a utility to generate call trees belongs in every programmer's toolbox. This article describes a program named <I>C_CALLS</I> that generates text call trees for Turbo C or Microsoft C programs. <I>C_CALLS</I> can be compiled by either the Turbo C or the Microsoft C compiler.<P>
<I>C_CALLS</I> uses the assembly output from the compiler, so if you don't use the Turbo C or the Microsoft C compiler you may need to modify <I>C_CALLS</I> to work with your compiler's output. The section on customizing <I>C_CALLS</I> provides further details.<P>
<h4><FONT COLOR="#000080"><A name="0212_0113">Recursive Function Calls<A name="0212_0113"></FONT></h4></P>
When a function calls itself either directly or indirectly, that call is said to be "recursive." In <I>C_CALLS</I> output, recursive calls are marked by an ellipsis ("..."). In <A href="tab1.htm">Table 1</a>,
 function <I>three</I> (line 8) calls itself directly on line 13, and indirectly (through function <I>one</I>) on line 11.<P>
When a program runs, recursive calls bottom out with some base case (arguments that don't require a recursive call), but the static call tree contains a loop back to a previous node, creating an infinite branch in the tree (since the call tree doesn't have access to any arguments). So, when a function makes a recursive call (such as in line 13 of <A href="tab1.htm">Table 1</a>)
, that branch of the function call tree is abandoned and an ellipsis is printed.<P>
<h4><FONT COLOR="#000080"><A name="0212_0114">How <B><I>C_CALLS</I></B> Works<A name="0212_0114"></FONT></h4></P>
The following sections present the <I>C_CALLS</I> source code and discuss its implementation and use.<P>
<h4><FONT COLOR="#000080"><A name="0212_0115">A Directed Graph<A name="0212_0115"></FONT></h4></P>
When you compile a program using Turbo C or Microsoft C, you can specify an option that saves the assembly language translation of the program to a disk file. Using the assembly language file as input, <I>C_CALLS</I> builds a directed graph representing the function calls in the program.<P>
<h4><FONT COLOR="#000080"><A name="0212_0116"><I>C_CALLS.H<A name="0212_0116"></I></FONT></h4></P>
The data structures used for the directed graph (<I>CELL</I> and <I>LIST</I>) are defined in the <I>C_CALLS.H</I> header file shown in <A href="list1.htm">Listing 1</a>.
 Note that "function" is abbreviated as "fcn" in the code.<P>
<h4><FONT COLOR="#000080"><A name="0212_0117"><I>BLD_GRA.C<A name="0212_0117"></I></FONT></h4></P>
Function <I>build_graph</I> creates the directed graph by parsing the assembly language file. <I>build_graph</I> is defined in file <I>BLD_GRA.C</I> shown in <A href="list2.htm">Listing 2</a>.
<P>
<h4><FONT COLOR="#000080"><A name="0212_0118"><I>LISTS.C<A name="0212_0118"></I></FONT></h4></P>
The directed graph structure uses several linked lists. These lists are manipulated by functions <I>insert_cell</I>, <I>delete_cell</I>, and <I>find_cell</I>, which are defined in file <I>LISTS.C</I> shown in <A href="list3.htm">Listing 3</a>.
<P>
<h4><FONT COLOR="#000080"><A name="0212_0119"><I>PRINT.C<A name="0212_0119"></I></FONT></h4></P>
Once the directed graph has been built, the call tree is printed by calling <I>print_all_calls</I>, defined in <I>PRINT.C</I>.<P>
<I>C_CALLS</I> "expands" a function, say <I>main</I>, by printing the function name "<I>main</I>" followed by the names of all functions called by that function (<I>one, three, two</I>).<P>
To avoid infinite loops while expanding recursive functions, a list named <I>fcns</I> is used. <I>fcns</I> contains the names of the functions currently being expanded. If <I>print_calls</I> is called for a function already in <I>fcns</I>, that function name is printed followed by an ellipsis ("...") and that function is not expanded further. See <A href="list4.htm">Listing 4</a>.
<P>
<h4><FONT COLOR="#000080"><A name="0212_011A"><I>C_CALLS.C<A name="0212_011A"></I></FONT></h4></P>
The main program, <I>C_CALLS</I> (defined in <I>C_CALLS.C</I>), takes one command-line argument, the name of an assembly language file. <I>C_CALLS</I> parses the file, builds the directed graph, and prints out the call tree. See <A href="list5.htm">Listing 5</a>.
<P>
<h4><FONT COLOR="#000080"><A name="0212_011B">Compiling <B><I>C_CALLS</I><A name="0212_011B"></B></FONT></h4></P>
The following commands show the appropriate options for compiling the <I>C_CALLS</I> modules (when they are the only.<I>c </I>files in the current directory).<P>
<pre>Turbo C: tcc -mh -N *.c
Microsoft C: cl /AH /F 8000
/Fec_calls.exe *.c</pre>
<h4><FONT COLOR="#000080"><A name="0212_011C">Using <B><I>C_CALLS</I><A name="0212_011C"></B></FONT></h4></P>
To generate a call tree with <I>C_CALLS</I> first compile the target program using an option to create an assembly language file, then run <I>C_CALLS</I> with the assembly language filename as an argument.<P>
The MS-DOS batch files shown in <A href="list6.htm">Listing 6</a>
and <A href="list7.htm">Listing 7</a>
generate the assembly language file and run <I>C_CALLS</I>. Turbo C users can use <I>TC_CALLS.BAT</I>, and Microsoft C users can use <I>MS_CALLS.BAT</I>. The batch files expect only the target files in the current directory. For further details on generating assembly language files, see your compiler's user guide.<P>
<h4><FONT COLOR="#000080"><A name="0212_011D">Customizing <B><I>C_CALLS</I><A name="0212_011D"></B></FONT></h4></P>
Users may want to customize <I>C_CALLS</I>. Possible extensions include excluding standard library functions from call trees or supporting additional compilers. To support another compiler, the first step requires studying the format of assembly language files generated by the compiler. The remaining step is to modify the function <I>build_graph</I>, adjusting its parsing process to the new format.<P>
<h4><FONT COLOR="#000080"><A name="0212_011E">Caveats<A name="0212_011E"></FONT></h4></P>
Since optimizing compilers can change the function calling hierarchy of a program by removing or changing function calls, you should disable optimization when generating assembly language files for <I>C_CALLS</I>. For details on optimization and possible interaction with call trees, see your compiler's user guide.<P>
If your compiler's assembly-language file format changes in subsequent releases, function <I>build_graph</I> may need to be modified.<P>
<I>C_CALLS</I> has been tested with Turbo C v1.5 and Microsoft C v5.1.<P>

<h4><a href="../../../source/1991/oct91/terrell.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
