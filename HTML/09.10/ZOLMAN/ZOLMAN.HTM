


<HTML>
<HEAD>

<TITLE>October 1991/Illustrated C</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tococt.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Illustrated C<A name="0232_0126"><A name="0232_0126"></font></h2><P>
<h3 align="center"><A name="0232_0000"><A name="0232_0000">Processing Code Listings For Publication, Part 2</h3><P>
<h3 align="center"><font color="#800000">Leor Zolman</font></h3><hr><blockquote><P>
<P><i><A name="0232_0000"><A name="0232_0000">A long time ago, Leor Zolman wrote and distributed the BDS C Compiler for CP/M (what's that?). Following a several-year hiatus<I></I> <I></I>from computer-compulsiveness to learn some people skills, he got married, dragged his disbelieving wife to Kansas and joined the staff of<I></I> <I></I>R&amp;D Publications, Inc. Two years later his wife has almost forgiven him. You can reach him at leor@rdpub.com or<I></I> <I></I>uunet!bdsoft!rdpub!leor.</i></P><P>
Last time, I introduced <I>plist</I>, a program to translate tabs into spaces and right-justify comments in C source listings. While <I>plist</I> effectively reduces the column width required to display a listing, it is actually the second of two programs I typically employ in order to fit the listing more comfortably into one of the more narrow columnar magazine formats. This month I'll describe <I>plist</I>'s companion program, <I>maxl</I>, a tool that finds the longest lines in any text file. With the longest lines of a file identified, you are then in the best position to decide how to achieve the largest reduction in code girth with the least amount of editing.<P>
<h4><FONT COLOR="#000080"><A name="0232_0127">The Strategy<A name="0232_0127"></FONT></h4></P>
I started with the premise that input lines will remain below a reasonable maximum length, 300 characters, then tabulated the lengths of all lines in a file by using the value of each line's length as an index into an array of counters.<P>
After scanning an entire input file, the information I wanted included the complete text of the longest line(s), the location (line number) of those lines, and a frequency count for each of the largest line lengths encountered.<P>
The fact that several pieces of information might need to be saved relating to each input line suggested the use of an array of structures (rather than an array of simple counter variables) for storing the required information. I've assigned a tag name of <I>line</I> to the structure definition and defined an array named <I>lines</I> to contain <I>MAXLINE</I> instances of this structure type (lines 34-38 of <A href="list1.htm">Listing 1</a>.
) Each element of the <I>lines</I> array therefore holds information pertaining to lines of a particular length (equal to the array element's index). This arrangement will support lines ranging anywhere from zero to 298 characters in length. Note that two character positions are lost due to the need for both a terminating newline and a null byte at the end of each line read in through the use of the <I>fgets ()</I> function.<P>
<h4><FONT COLOR="#000080"><A name="0232_0128">The Variables<A name="0232_0128"></FONT></h4></P>
The <I>line</I> structure contains three elements:<P>
<UL><li><I>first</I> records the line number of the earliest occurrence of a particular line length in the input file.</li>
<li><I>text</I> stores a pointer to a copy of the text corresponding to that first occurrence.</li>
<li><I>how_many</I> counts the total number of lines found with a similar length.</li></UL>
Unlike the <I>plist</I> program, <I>maxl</I> can operate on only one file at a time. <I>maxl</I> is designed for repeated use upon a single file, until that file is narrow enough for further processing with <I>plist</I>.<P>
<I>maxl</I> takes three optional command line parameters:<P>
<UL><li>-<I>t</I> allows you to enter the hard tab setting used in the creation of the input file (where the default is specified by the <I>DEFAULT_TAB </I>symbol).</li>
<li>-<I>d</I> tells how many distinct line lengths to report on (default is <I>DIFF_SIZES</I>).</li>
<li>-<I>f</I> causes any lines longer than a specified length to be flagged (default is 79).</li></UL>
For example, you can write<P>
<pre>maxl maxl.c</pre>
or its equivalent, with the default option values written out,<P>
<pre>maxl -t4 -d3 -f79 maxl.c</pre>
The result is shown in <A href="fig1.htm">Figure 1</a>.
 Note that <I>maxl.c</I> refers in this example to the original C source file, <I>not</I> the listing file created by <I>plist</I> shown in <A href="list1.htm">Listing 1</a>.
 Therefore, the line of length 70 that shows up in the <I>maxl</I> output does not actually affect the width of the final printed listing, because the comment-alignment feature of <I>plist</I> removes enough of the whitespace between the code and the comment to keep the line from standing out.<P>
<h4><FONT COLOR="#000080"><A name="0232_0129">Scanning A File<A name="0232_0129"></FONT></h4></P>
After processing command-line parameters and opening the input file, <I>maxl</I> initializes the <I>how_many</I> counter for each index position in the <I>lines</I> array (lines 95-96.) This isn't strictly necessary, since external data is supposed to get automatically initialized to zero, but it can't hurt to make sure. In the last preparatory step, the line number counter <I>lineno</I> is initialized to <I>1</I>.<P>
Lines 99-141 comprise the main processing loop. Each time through, the program reads a new line of input text into the <I>buf</I> character buffer. It calculates the length of that line by keeping track of a "virtual" column number in the local variable <I>v_col</I>, adjusting for hard tabs and carriage returns as the text is scanned from left to right in lines 104-119. When a tab character is found, <I>v_col</I> is incremented as necessary to simulate an advance to the next logical tab position according to the current logical hard-tab setting, <I>tabstop</I>.<P>
Either a newline or a null byte terminate the line scanning loop. Carriage returns are not usually seen in the middle of normal lines of text. Under DOS, the <I>fgets</I> function returns a line of text where the CR of CR-LF pairs has been stripped out, leaving only the LF, otherwise known as a newline. Under UNIX-like systems, CRs are not part of the normal text file line-termination sequence anyway. So, <I>maxl</I> displays a warning (line 113) when a CR is encountered, and sets the virtual column number back to <I>1</I>.<P>
All other characters cause <I>v_col</I> to simply be incremented to the next column (line 118.)<P>
After the line has been fully scanned, a test is made to see if the line exceeds the maximum allowed length. If it does, a warning is issued (lines 121-124.)<P>
Now we have all the information necessary to characterize this line in the data structures. The value of <I>v_col</I> provides the index into the <I>lines</I> array of the length structure we are interested in. Therefore, the expression<P>
<pre>lines [v_col]</pre>
evaluates to the structure containing information about all lines of length <I>v_col.</I> The member <I>how_many</I> of that structure tells how many lines of that length have been previously encountered. The expression in line 126 tests whether a previous line had been found by returning a value of 1 (true) if the value of the <I>how_many</I> element is <I>0</I>. <I>how_many</I> is then incremented (regardless of its previous value.)<P>
If this is the first instance of a line of length <I>v_col</I>, then the statements in lines 128-136 save the line number and complete text of the line in the structure <I>lines [v_col]</I>.<P>
<h4><FONT COLOR="#000080"><A name="0232_012A">And The Winners Are...<A name="0232_012A"></FONT></h4></P>
After all input text has been processed, lines 142-154 display the results. The loop iterates through the structures in the <I>lines</I> array, from last (largest index value) backward. Any entry with a zero <I>how_many</I> value is skipped over completely (lines 145-146.) Every time a non-zero value of <I>how_many</I> is found, all required information is displayed and the counter <I>j</I> is incremented. If <I>j</I> reaches the value of <I>diffsizes</I> (the number of different sizes to display), we're done.<P>
The <I>putline()</I> function displays a line of text, performing tab expansion in the process. <I>putline()</I> calls <I>putrule()</I> before and after the line is displayed, to provide a visual reference for the exact physical length of the line. <I>putrule()</I> displays a line made up of exactly the supplied number of = characters. That way, if the trailing characters of a given line are spaces or tabs, the rule line will extend beyond the apparent end of the text line and thereby reveal the superfluous trailing spaces.<P>
<h4><FONT COLOR="#000080"><A name="0232_012B">Errata<A name="0232_012B"></FONT></h4></P>
After publication of August's column describing the <I>plist</I> program, I realized there were some cases when the behavior of <I>plist</I> might not yield exactly the expected results (i.e., bugs). I'd like to mention them now just for closure.<P>
First, <I>plist</I> assumes that all tab characters appearing on a line of text always <I>precede</I> the text. In most of my C source files that is in fact the case, but other styles of C programming involve more liberal use of tabs. The most obvious case involves writing a series of symbolic definitions where the symbols being defined have greatly varying lengths. Then, tabs are often used to align the text to be substituted. Take the following code fragment for example:<P>
<pre>#define FOO                 100
#define A_LONG_NAME_INDEED  50
#define X                   25</pre>
If tabs were used after <I>F00</I> and after <I>X</I>, then tab translation might alter the vertical alignment of the values in the right "column." Since I could find no <I>easy</I> (i.e., non-kludgy) fix for this problem, the only way to preserve alignment in these cases is to write the lines without tabs after the identifier name.<P>
Second, <I>plist</I> as published issues a warning message when the length of a line containing a comment exceeds the line length specified in the <I>-c</I> option (the right-most column for comment justification), but ignores lines <I>without</I> comments that exceed that specified length. This, at least, has an easy fix:<P>
Find the following section in August's  of <I>plist.c</I>:<P>
<pre>235:  if (!(cmnt_start =
       strstr(line, "/*")) ||
236:     !(cmnt_end =
        strstr(line, "*/")))
237:   return;</pre>
and change it to read as follows:<P>
<pre>if (!(cmnt_start =
        strstr(line, "/*")) ||
   !(cmnt_end = strstr(line, "*/")))
{     /* If no complete comment,
        just check length: */
   if (strlen(line) &gt; cmnt_col)
      fprintf(stderr,
   "\aWarning: line %d too long.\n",
              lineno);
   return;
}</pre>
This concludes a short series on processing C program listings for publication. With these tools at hand, I'm hoping contributors to technical journals such as <I>CUJ</I>, and the editorial personnel of those journals, may get a bit of relief from the "fat C code" syndrome.<P>

<h4><a href="../../../source/1991/oct91/zolman.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
