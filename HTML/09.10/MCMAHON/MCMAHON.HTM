


<HTML>
<HEAD>

<TITLE>October 1991/A Generic Command-Line Switch</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tococt.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Debugging</FONT></H2>

<hr><h2 align="center"><font color="#800000">A Generic Command-Line Switch<A name="0224_0118"><A name="0224_0118"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0224_0000"><A name="0224_0000">William McMahon</font></h3><hr><blockquote><P>
<P><i><A name="0224_0000"><A name="0224_0000">William McMahon has been programming professionally for 10 years, and programming in C for six years on various microcomputer platforms. He is currently unemployed.</i></P><P>
<h4><FONT COLOR="#000080"><A name="0224_0119">Introduction<A name="0224_0119"></FONT></h4></P>
C programs frequently use command-line parameters to override default values, display help, and control special options. Whatever their use, command-line parameters are almost always pre-defined &#151; for the command line to be parsed, the program must know what to expect. This hard-wired rigidity is appropriate for switches that control the main features of a program since these features aren't likely to change materially during the program's life. But, especially for controlling debugging options, a more flexible method would be nice.<P>
To monitor variables, for instance, programmers often add a <I>print</I> statement at a certain place in the code. Combining a special switch variable, (<I>debug</I> in this example), with a simple test disables the <I>print</I> statement during normal execution and activates it during test runs. For example:<P>
<pre>if (debug)
   print("\n %s hashes into %d ", key, hash);</pre>
The program examines the command line, looking for a special flag. If the flag exists, it sets debug to <I>TRUE</I>. However, in a large system where you may need to control independent switches, an explicitly-coded test for each switch becomes quite cumbersome. In such environments you need a more systematic approach.<P>
The most commonly used approaches pre-define a fixed number of switches. For example, using bit operations you could pack several switches into one switched variable:<P>
<pre>if (debug &amp; BIT_MASK_1)
   printf ("Whatever");</pre>
This approach conserves memory and simplifies the command-line processing since a single numeric parameter can represent many switch settings. While such approaches are more flexible, ultimately they are still limited to some pre-determined, finite number of switches. Moreover, they require the programmer to keep track of the relationship between each switch and the statement it controls.<P>
<h4><FONT COLOR="#000080"><A name="0224_011A">Multiple Command-Line Switches<A name="0224_011A"></FONT></h4></P>
Instead, I use a straightforward method that can control an unlimited number of switches from the command line, and that automatically identifies each statement by its location in the source code. With this method you'll never run out of switches. As long as the source code is available, you can readily identify which switch you need to set for a particular test.<P>
<h4><FONT COLOR="#000080"><A name="0224_011B">Overview<A name="0224_011B"></FONT></h4></P>
While this method is more complicated than using a bit field, it requires just two functions: one to parse the command line, the other to serve as the switch. Instead of defining individual switches for each statement, I identify areas of code to be switched on or off. Determining whether a switch is on becomes a matter of identifying its location in the code and then determining if that location is within the bounds of an "enabled" area.<P>
A three-field structure identifies each area. The fields are the source filename, the area's first line of code, and the area's last line of code. To minimize memory requirements, only enabled areas are actually stored; the remaining code is implicitly "disabled." Because this process is more complex than evaluating a simple variable, I use a function call rather than a simple expression for the switch.<P>
<h4><FONT COLOR="#000080"><A name="0224_011C">Determining Switch Status<A name="0224_011C"></FONT></h4></P>
This scheme depends on two new pre-defined ANSI C macros: <I>__FILE__</I> and <I>__LINE__</I>. The preprocessor replaces <I>__FILE__</I> with the source filename and <I>__LINE__</I> with an integer line number. These macros allow each switch call to use the same arguments regardless of location. For example,<P>
<pre>csw__ison(__FILE__, __LINE__)</pre>
(The function prefix, <I>csw</I>, identifies it as part of the "Command-Line Switch" subsystem.) The switch function returns Boolean value <I>TRUE</I> (nonzero &#151; see the <I>typedef</I> in <A href="list1.htm">Listing 1</a>)
 only if the specified file and line number fall within any of the "enabled" program areas.<P>
The switch function first tests for the most frequently encountered special case &#151; normal execution, in which no areas are enabled. The next test supports a special use of the switch function. By passing a <I>NULL</I> pointer instead of a filename, the programmer can ask if <I>any</I> area is enabled. In the general case, the switch function first strips path information, if any, from the filename parameter and then iteratively compares the resulting filename with the filename of each "enabled" code area. If the filenames match, the switch function will check the line number parameter to determine whether it is within the specified range. Using a line number parameter of zero invokes another special behavior. It asks, in effect, if any line within the specified source file is "enabled."<P>
A simple linear search of "enabled" areas may seem inefficient, but since the number of these areas in use at any one time will be small, search speed isn't a problem.<P>
<h4><FONT COLOR="#000080"><A name="0224_011D">Parsing The Command Line<A name="0224_011D"></FONT></h4></P>
The function <I>csw_parse</I> loads the array of structures which <I>csw_ison</I> searches. The <I>csw_parse</I> call should be one of the very first executable statements in <I>main</I>. Like <I>main</I>, <I>csw_parse</I> accesses the command line through the standard <I>argc, argy </I>mechanism:<P>
<pre>main( int argc, char *argv[])
{
   /* Declare variables ... */
   csw_parse(argc, argv);
   /* Remaining code ... */
}</pre>
The switch functions do not modify the arguments, and thus will not affect the behavior of other code that uses <I>argc</I> and <I>argv</I>. The switch functions identify arguments by key words, allowing them to appear anywhere on the command line. Before processing, each argument is copied into a working buffer and converted to upper case, so that all comparisons will be case insensitive.<P>
Enabled areas are specified by a string of comma-separated fields following the keyword <I>SW</I>. The <I>csw</I> option syntax does not require the line numbers in area specifications; missing line number ranges default to the first and last line of the file. For example:<P>
<I>SW,myprog</I> &#151; sets all switches in the source file <I>MYPROG.C</I><P>
<I>SW,myprog, 50</I> &#151; sets switches from line 50 to the end of the file<P>
<I>SW, myprog, 50, 50</I> &#151; sets switch on line 50 only<P>
The parsing function loops once for each command-line argument. If first copies the argument to a working buffer, converts the argument to uppercase, and then uses <I>sscanf</I> to compare the argument with the <I>csw</I> keyword. The <I>sscanf</I> function will search through each argument string until it finds a match for the format specification. It will then convert the appropriate arguments, returning the count of converted arguments. When no match is found, <I>sscanf</I> returns zero, causing that command-line argument to be ignored.<P>
<h4><FONT COLOR="#000080"><A name="0224_011E">A Useful Macro<A name="0224_011E"></FONT></h4></P>
The <I>csw</I> package is most conveniently invoked through a macro. For example, to conditionally execute any statement in your program:<P>
<pre>#ifdef NO_CSW
#define CSW_EXEC(x) ((void)0)
#else
#define CSW_EXEC (x) \
   ( csw_ison(_FILE_,_LINE_) ?
(x) : (void)0))
#endif</pre>
This macro could also have been written:<P>
<pre>#define CSW_EXEC(x) \
   if (csw_ison(_FILE_,_LINE_)) {x}</pre>
This version resolves to a statement, however, while the ternary operator version resolves to an expression. It is syntactically better for macros to resolve into expressions. Macros then are more general.<P>
The original debug example can now be written as:<P>
<pre>CSW_EXEC( printf("\n TESTING: %s hashes into %d ", key, hash));</pre>
The macro hides the repetitive details of the switch function call and automatically removes the switchable statements from the program when <I>NO_CSW</I> is defined. (With many compilers <I>NO_CSW</I> can be defined from the command line (<I>DNO_CSW</I> for Microsoft C), eliminating the need to edit the source file. However, if code size is not a major issue, you should consider leaving the switchable debug statements in the production release &#151; the information they generate can be very valuable in diagnosing problems reported from the field.<P>
<h4><FONT COLOR="#000080"><A name="0224_011F">Conclusion<A name="0224_011F"></FONT></h4></P>
Once you create and install this sub-system, you can easily add switchable statements to any program. The code size will be increased only by the statements themselves. If that is a problem, you can remove the statements from compiled code by defining <I>NO_CSW</I>.<P>
While the command-line interface may not be user-friendly, it is more than adequate for programmers who occasionally need to invoke special program features. While I have focused on debugging, there may well be many other applications for switchable statements as well.<P>
<h4><a href="list2.htm">Listing 2 (cswitch.c)</a></h4>

<h4><a href="../../../source/1991/oct91/mcmahon.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
