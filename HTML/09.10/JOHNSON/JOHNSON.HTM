


<HTML>
<HEAD>

<TITLE>October 1991/X Window Programming</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tococt.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">X Window Programming<A name="0228_011C"><A name="0228_011C"></font></h2><P>
<h3 align="center"><A name="0228_0000"><A name="0228_0000">Part 4: Making Odd-Shaped Windows</h3><P>
<h3 align="center"><font color="#800000">Eric F. Johnson and Kevin Reichard</font></h3><hr><blockquote><P>
<P><i><A name="0228_0000"><A name="0228_0000">Johnson and Reichard are<I></I> <I></I>authors of X Window Applications Programming Advanced X Window Applications Programming and Power Programming Motif (all<I></I> <I></I>MIS:Press, 1-800-MAN<I></I> <I></I>UALS). Johnson can be reached at<I></I> <I></I>erc@pai.mn.org via UUCP mail. Reichard's<I></I> <I></I>Compuserve address is 73670,3422.</i></P><P>
When you look at an X Window screen, usually you see a screen covered with rectangles &#151; the windows. These rectangular windows tend to blur together after awhile, since they all look the same. The windows that stand out have odd shapes, such as round clocks or company logos.<P>
Until the X11 Release 4, all windows in the X Window System were rectangles. Unlike the Macintosh or NeWS windowing systems, you couldn't have round clocks and rounded-corner calculators and so on. This article continues our X Window series by showing how to make windows that have odd shapes. You should be familiar with the concepts introduced in the last two installments of our X Window series, since this article concentrates on the SHAPE extension.<P>
<h4><FONT COLOR="#000080"><A name="0228_011D">The SHAPE Extension<A name="0228_011D"></FONT></h4></P>
The SHAPE extension is probably the most popular add-on to the X Window System. You can create a window and set the window's shape to anything you can properly describe that fits within the bounding rectangle the window was created under. Extensions (in X terminology) extend the base X Window network protocol to add features. Other extensions (and planned extensions) include 3D PHIGS support (called PEX for the PHIGS Extension to X), video (VEX), and Display Postscript.<P>
The first hurdle you face is finding a system that provides the SHAPE extension, the mechanism that allows X to handle odd-shaped windows (officially called "nonrectangular" windows). If you have a Sun workstation, you could try writing NeWS PostScript code, but that's another matter entirely. Since this article is on X, we'll stick to the SHAPE extension.<P>
<h4><FONT COLOR="#000080"><A name="0228_011E">Is The SHAPE Extension Available?<A name="0228_011E"></FONT></h4></P>
Since the SHAPE extension is so popular, almost every Release 4 system has it. You can tell by running the standard X program <I>xdpyinfo</I>. This utility prints out a host of information, much of it confusing, about the X server. What you look for is something like<P>
<pre>number of extensions: 4
  SHAPE
  MIT-SHM
  Multi -Buffering
  MIT-SUNDRY-NONSTANDARD</pre>
If you see "SHAPE," then the extension is there.<P>
Running the <I>xdpyinfo</I> program is fine for users, but for robust code, an X Window application needs to determine if the SHAPE extension is available. The function <I>XShapeQueryVersion</I> can be used to check for the SHAPE extension (see <a href="list1.htm">Listing 1</A>). As in the example, most SHAPE-based programs require the include file <I>&lt;X11/extensions/shape.h&gt;</I>.<P>
To use <I>XShapeQueryVersion</I>, open the connection to the X server. If you've read the earlier articles in our series, this should be old hat. If it isn't, check out an X Window programming book or look up our previous articles in <I>The C Users Journal</I>.<P>
<I>XShapeQueryVersion</I> returns a non-zero status if the SHAPE extension is available.<P>
Once we have checked for the SHAPE extension, the next step is to create a window following the window-creation process described in the last two articles. This window will be a normal rectangular window. The initial size of this window (width and height) becomes the bounding rectangle for whatever shape we select for our window.<P>
<h4><FONT COLOR="#000080"><A name="0228_011F">Window Shapes<A name="0228_011F"></FONT></h4></P>
With the SHAPE extension, you can define a new shape for a window. You must describe this shape in a manner that the SHAPE extension can understand. Your can create a shape based on:<P>
<UL><li>a bitmap &#151; that is, any bit pattern</li>
<li>a set of rectangles</li>
<li>a region &#151; a special X Window structure</li>
<li>or a combination of the above </li></UL>
We'll use a set of rectangles, since this is the easiest method. (You can look up <I>Advanced X Window Applications Programming</I> for an example using a bit map).<P>
We need to create a set of rectangles to define the new window shape. To do this, we need to declare an array of <I>X</I>-<I>Rectangle</I> structures.<P>
<h4><FONT COLOR="#000080"><A name="0228_0120">The <B><I>XRectangle</I></B> Structure<A name="0228_0120"></FONT></h4></P>
The <I>XRectangle</I> structure looks like:<P>
<pre>typedef struct
   {
     short    x, y;
     unsigned short width, height;
   } XRectangle;</pre>
We need to fill in an array of arbitrary rectangles and then call the function <I>XShapeCombineRectangles</I> as in <A href="list2.htm">Listing 2</a>.
<P>
<I>XShapeCombineRectangles</I> is a complex function, so bear with us. First, we pass the X display connection and the window we want to change. Then, we pass which shape we want to set. The choices are:<P>
<UL><li><I>ShapeBounding</I>, to set the shape of the window itself (this window's border or bounding area)</li>
<li><I>ShapeClip</I>, to set the shape of the clip area inside of the window</li></UL>
In most cases, you'll use <I>ShapeBounding</I>.<P>
The x-offset and y-offset are the offset for the start of the shape from the window's origin (upper left corner). We want to set the whole window to the new shape, so the offsets are zero.<P>
The operation is one of <I>ShapeSet, </I><I>ShapeUnion, ShapeIntersect</I>, or <I>ShapeSubtract,</I> which define how the rectangles are interpreted. You can combine several shapes to make very complex window shapes. You could take the intersection of one shape with a previous shape using <I>ShapeIntersect</I> and so on. For the example, we just set a new shape using <I>ShapeSet</I>.<P>
<A href="list3.htm">Listing 3</a>
shows the code to create a number of rectangles and then set the shape of a window to be those rectangles. The window will effectively have holes &#151; areas that are within the window's bounding rectangle but aren't part of the window. Keyboard input in those holes will be sent to whatever window is underneath our window, not to our window.<P>
<h4><FONT COLOR="#000080"><A name="0228_0121">Trying Out The SHAPE Extension<A name="0228_0121"></FONT></h4></P>
That's all you really have to do. From now on, the window will have a different shape, a shape made up of rectangles, with empty "gutters" between the rectangles. This task can be more complex, and there are plenty of extra options, but these steps are all you really need. You can now start writing those logo-shaped X clocks or rounded-corner pushbuttons or whatever your heart desires.<P>
In <I>shape1.c</I> (<A href="list4.htm">Listing 4</a>)
, we've put together a program that uses the X SHAPE extension. If you've been following our X Window series, use the Xlib-based program from the July 1991 <I>C Users Journal</I> ("Introduction to X Window Programming, Part 3: More Xlib Programming") as a starting point. Just type in the changes we made for this issue &#151; you'll save a lot of work over typing in the whole program. You can also order <I>CUJ</I> listings on disk. See The C Users Order Form near the center of this magazine.<P>
The program starts by connecting to the default X server (named in the UNIX environment variable <I>DISPLAY</I>). We then create a window, register information with the window manager, load a font, and create a graphics context, just as we did in the last two articles. After creating the window, we check for the presence of the SHAPE extension with <I>XShapeQueryVersion</I>. If the SHAPE extension is supported, then the program creates several rectangles and calls <I>ShapeCombineRectangles.</I> After that, the program enters an event loop, writing a text string containing the SHAPE extension version numbers on every <I>Expose</I> event. Click a mouse button, generating a <I>ButtonPress</I> event in the window to exit the program. Note that the window will only be the interior rectangles (that is, the window does not cover all the area within its boundaries).<P>
<h4><FONT COLOR="#000080"><A name="0228_0122">Compiling the Example Program<A name="0228_0122"></FONT></h4></P>
Programs that use the SHAPE extension need to link in the X Window extensions library, usually called <I>Xext</I> (<I>/usr/lib/libXext.a</I> on most systems). You can compile the shape program with a UNIX command something like<P>
<pre>cc -o shape1 shape1.c -lXext -lX11</pre>
<h4><FONT COLOR="#000080"><A name="0228_0123">For More Information<A name="0228_0123"></FONT></h4></P>
The official reference for the SHAPE extension is the document titled <I>X11 Nonrectangular Window Shape Extension</I>, that comes with the MIT X Consortium Release 4 of X. Therecugnews is an example SHAPE program in our book, <I>Advanced X Window Applications Programming</I> (MIS: Press, 1990), starting on page 547. We haven't seen any other examples described. You can also look in the demos directory of the X Window sources for <I>xaquarium</I>. Some Athena widget programs, like <I>xmh</I> (a mail program) and <I>xclipboard</I> use rounded-corner button windows when the SHAPE extension is available. If you have these sources you can study these examples as well. We'll cover the Athena widget set in our next X Window installment.<P>

<h4><a href="../../../source/1991/oct91/johnson.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
