


<HTML>
<HEAD>

<TITLE>October 1991/A Generic Search Routine</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tococt.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">A Generic Search Routine<A name="0226_011A"><A name="0226_011A"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0226_0000"><A name="0226_0000">Matt Weisfeld and Michael J. Gilson</font></h3><hr><blockquote><P>
<P><i><A name="0226_0000"><A name="0226_0000">Matt Weisfeld and Michael J. Gilson are both currently employed by the Allen-Bradley Company as senior system test engineers and are responsible for the development of test software on VAX/VMS, DOS and UNIX platforms. Matt has ten years of programming experience and has taught computer programming and software design at two universities. Michael Gilson has five years of experience as a C developer, and worked for four years as a test engineer developing assembly code for production test equipment at Honeywell Industrial Programmable Controls Division. </i></P><P>
Because of the way the internal master structure of the database is built, text books on database development using C typically include code for more than one search routine. Each transaction read into the database conforms to this structure, which may contain any number of fields. Since most database programs allow a user to query all of these fields, a search mechanism must be in place to handle all possibilities. This problem is usually solved by writing separate code to search each field in the master structure array, but this results in redundant code and unwanted maintenance headaches.<P>
In this article, we'll show how to use void pointers and pointer arithmetic to implement a single search routine that will handle all variables, regardless of scalar data type. By taking advantage of these tools, a programmer can save time, reduce code, and simplify program maintenance. We'll illustrate this generic search solution with a sample database application.<P>
<h4><FONT COLOR="#000080"><A name="0226_011B">Intended Application<A name="0226_011B"></FONT></h4></P>
Suppose that a database application requires a master record with four fields: <I>id</I> (an integer), <I>number</I> (an integer), <I>price</I> (a floating point) and <I>code</I> (a string of 10 characters). The master structure declaration is as follows: <P>
<pre>struct record {
   int   id;
   int   number;
   float price;
   char  code[10];
};</pre>
Also assume that the database program can perform a query on all of these fields.<P>
For example, one legal query could be <P>
<pre>find a price = 33.3</pre>
You could satisfy this query by creating a separate search routine to loop through all master records looking for a <I>price</I> of <I>33.3.</I> In the same vein, you could write a separate search routine to handle the other fields in the structure &#151; <I>id, number</I>, and <I>code</I>. This approach would be reasonable if all master structures were this small. However, imagine the amount of code necessary for a master structure of 50 fields? Worse still is the fact that a code change is required every time a new field is added or an existing one is modified. How can this query, or any other query be satisfied with one search routine?<P>
The query must be parsed and the information it contains extracted. How the parsing is done is not a major concern for this discussion. It is part of the user interface, not the database system. However, the information that the line contains is crucial. The search is interested in two pieces of information: the keyword <I>price</I> and the value <I>33.3.</I> First, you must determine if this information is valid. If <I>price</I> is not a field in the master structure, there is nothing with which to compare it. Second, it must be predetermined that, at least in this case, <I>price</I> is a floating-point number. Under no circumstances can <I>price</I> represent more than one scalar data type in the same application. Third, keyword <I>price</I> in the master structure must be located such that the search can operate on the proper field.<P>
In short, you must define whether a keyword is valid, define its scalar data type, and determine where it is located in the master  structure.<P>
<h4><FONT COLOR="#000080"><A name="0226_011C">Data Definition Structure<A name="0226_011C"></FONT></h4></P>
All of the information needed to solve this problem can reside in a data definition structure. For example, a structure called <I>field_definition</I> is defined as <P>
<pre>struct field_definition {
   char keyword[20];
   int type;
   struct record *position_ptr;
};</pre>
In essence, a <I>field_definition</I> defines a legal keyword, the data type that is assigned to it, and the position in the array where to commence the search for that keyword.<P>
The field keyword defines a legal field name. By using the master structure as a guide, the valid keywords acceptable to this application are <I>id, number, price</I>, and <I>code</I>. The field type defines what scalar data type the keyword is. The example master structure contains keywords that are integers, floating-point numbers, and character strings. (These are not the only scalar data types available to the programmer.) Finally, the pointer <I>position_ptr</I> locates the keyword in the first master record. This field specifies where the search will begin. For example, if the current task is to search all records to find a <I>price</I> of <I>33.3</I>, this pointer would contain the address of the field <I>price</I> in the first transaction of the master record array. <A href="list1.htm">Listing 1</a>
presents the file <I>common.h</I> that contains the structure definitions and program constants.<P>
<h4><FONT COLOR="#000080"><A name="0226_011D">Generic Search Algorithm<A name="0226_011D"></FONT></h4></P>
Now that the two main structures are defined, it is possible to construct samples for both. Because this article centers around the search algorithm, the structures are built internally. In any practical application, all the information loaded into the master record array would be read in from a file. A basic linear search will search the arrays in this program, but any search algorithm would suffice.<P>
The sample <I>field_definition</I> structure is listed below, the array is called <I>definitions</I>: <P>
<pre>struct field_definition definitions[] = {
   "id",   INT,     &amp;tran_record [0].id,
   "number", INT,   &amp;tran_record [0].number,
   "price", FLOAT, &amp;tran_record[0].price,
   "code",  STRING, &amp;tran_record[0].code,
};</pre>
The structure that follows shows what a transaction looks like. Each entry of the sample master structure array contains four fields: <I>id, number, price</I>, and <I>code</I>. Each field has two attributes associated with it, a scalar data type and an address. To relate this sample <I>field_definition</I> to a sample master structure array consider the following: <P>
<pre>struct record tran_record[]= {
   0, 0, 0.0, "zero",
   1, 11, 11.1, "one"
   2, 22, 22.2, "two",
   3, 33, 33.3, "three",
   4, 44, 44.4, "four",  };</pre>
The first transaction of the <I>tran_record</I> array contains the <I>id</I> (<I>int</I>) <I>0</I>, the <I>number</I> (<I>int</I>) <I>0</I>, the <I>price</I> (<I>float</I>) <I>0.0</I>, and the <I>code</I> (string) "<I>zero</I>". Notice that this transaction conforms to the rules for valid keywords and scalar data type in the <I>field_definition</I> structure. The other rule in <I>field_definition</I> concerns the pointer. This rule generates the most interest and perhaps the most confusion.<P>
<A href="fig1.htm">Figure 1</a>
illustrates how the pointer field is used. Notice that this field points to the corresponding keyword in the first transaction.<P>
In effect, the pointer field in <I>definitions</I> is the address of the starting point of the search. The fact that it is defined as a structure pointer represents the key to this algorithm. When a structure pointer is incremented, it is bumped up by the size of the structure itself. Thus, if a pointer is assigned to the following address: <P>
<pre>struct record *tran_ptr;
tran_ptr = &amp;tran_record[0].price;</pre>
the next value of price can be accessed by executing the command:<P>
<pre>tran_ptr++;</pre>
To illustrate further, assume that the search is for a keyword <I>price</I> with the value of <I>22.2</I>. The address of the first value of <I>price</I> is already known by inspecting the initial address. See <A href="fig2.htm">Figure 2</a>.
 A comparison reveals that <I>tran_record[0]</I> has a price of <I>0.0</I>, not <I>22.2</I>.<P>
Now the following command is executed: <P>
<pre>tran_ptr++;</pre>
The pointer has been incremented by the size of the structure record, keeping it on the same word boundary. See <A href="fig3.htm">Figure 3</a>.
 Another comparison reveals that <I>tran_record[1]</I> does not have a price of <I>22.2</I>.<P>
By incrementing the pointer once more the correct value is found. See <A href="fig4.htm">Figure 4</a>.
 <P>
The listings that accompany this article demonstrate how this algorithm is implemented with code.<P>
<h4><FONT COLOR="#000080"><A name="0226_011E">Determining The Type<A name="0226_011E"></FONT></h4></P>
There are two routines at the heart of the search algorithm. The actual search function is <I>lookup</I>. Because <I>lookup</I> has no knowledge of the scalar data type that is passed to it, the function <I>type_check</I> provides the information.<P>
The prototype for <I>type_check</I> is <P>
<pre>FUNC type_check(
   struct field_definition *definitions,
   struct record *tran_ptr,
   int transaction_size,
   char *user_keyword,
   char *user_value);</pre>
The new items here are <I>transaction_size, user_keyword</I>, and <I>user_value</I>. The integer <I>transaction_size</I> in this case is 5 (five records in the array) and is calculated as<P>
<pre>transaction_size =
   sizeof (tran_record)/sizeof (tran_record[0]);</pre>
In essence, this line divides the size of the entire array by the size of one <I>tran_record</I>, thus providing the number of members of the array.<P>
The two character pointers make up the user-supplied key. For example, if the search criterion was to find all prices that are equal to <I>33.0</I>, then <I>33.0</I> would be the <I>user_value</I> and <I>price</I> would be the <I>user_keyword</I>. A user query such as<P>
<pre>find all price = 33.0</pre>
could be parsed to supply this information. Again, because the search algorithm is the primary focus here, this information will be generated internally, relieving us of the user interface.<P>
<I>type_check</I> performs two functions. It determines whether the <I>user_keyword</I> passed to it actually exists in the structure definitions. If it does not exist, an error occurs. For example, the following query would be illegal:<P>
<pre>find all amounts = 33.3</pre>
because <I>amounts</I> is not a valid keyword. When a match is made, the second function is performed. With the keyword known, the type is easily determined and can be converted to its proper format. For example,<P>
<pre>integer = atoi (user_value);
floater = atof (user_value);
string = user_value;</pre>
Notice that the <I>user_value</I> was already a string.<P>
At this point, all the information necessary to call <I>lookup</I> has been determined.<P>
<A href="list2.htm">Listing 2</a>
shows the complete <I>type_check</I> routine.<P>
<h4><FONT COLOR="#000080"><A name="0226_011F">Performing The Lookup<A name="0226_011F"></FONT></h4></P>
The <I>lookup</I> routine is straightforward. It only requires a compact switch statement.<P>
The prototype for <I>lookup</I> is<P>
<pre>FUNC lookup (int type,
   struct record *position_ptr,
   struct record *tran_start,
   int transaction_size,
   void *user_value);</pre>
The two structure pointers reference the same array, but at different addresses. As explained previously, <I>position_ptr </I>addresses the proper keyword in the first member of <I>tran_record</I>. The second pointer addresses the beginning of the <I>tran_record</I> array. The second pointer has nothing to do with the search itself, but after a match is made, another routine is called to process the information. The <I>lookup</I> routine passes this pointer to the other routine. The processing routine is discussed in the next section.<P>
The void pointer <I>user_value</I> represents the search key and provides the mechanism that makes this program independent of scalar data type.<P>
When a variable is declared, it is assigned an address that points to a memory location containing a value. An integer pointer points to an integer value, etc. However, it is the size of the memory location that varies among different scalar data types. The address takes up much the same space regardless of what it points to. In most languages, the type of pointer must be declared at compile time. For example, an <I>int</I> pointer cannot be used as a <I>float</I> pointer at any time. However, C allows the programmer to declare a pointer to <I>void</I>. This directs the compiler to provide the space for a generic data pointer and allows the programmer to decide at a later time what to use it for. Of course the memory associated with the value must be allocated by the programmer.<P>
<A href="list3.htm">Listing 3</a>
provides a sample case statement that illustrates how the search algorithm works in the case of an integer.<P>
The statement in the <I>for</I> loop:<P>
<pre>integer = *((int *) position_ptr);</pre>
casts <I>position_ptr</I> to an <I>int</I> pointer. At first glance this may seem improper, because <I>position_ptr</I> is actually defined as a structure pointer. However, remember that the structure begins with an <I>int</I> member. This statement directs that the memory location addressed by <I>position_ptr</I> be treated as an <I>int</I>. In this case <I>position_ptr</I> was loaded with the address of <I>number</I>. By casting <I>position_ptr</I> to an <I>int</I> pointer, the integer value it holds can be accessed. You should understand why the * is present to the left of the first left parenthesis. If the following instruction had been executed:<P>
<pre>integer = (int *) position_ptr;</pre>
<I>integer</I> would have been assigned the address of <I>position_ptr</I>, not its value. The * is needed to extract the actual value residing at that address.<P>
The <I>if</I> statement:<P>
<pre>if (integer == *( (int *) user_value) )</pre>
performs the same function as the statement in the <I>for</I> loop. In this case, <I>user_value</I> is a void pointer and must be cast to the appropriate type. Again the * is needed because you are extracting the actual value.<P>
Finally, after a loop iteration is complete, the <I>for</I> loop performs<P>
<pre>position_ptr++;</pre>
This increments <I>position_ptr</I> by the size of the master record structure, which in effect, points it to the corresponding keyword in the next member of the array.<P>
If a match is made within the loop, a separate routine is called to process the information. In this program the search is for all matches, not just the first occurrence. A print routine is called in this example to print the matched transactions.<P>
<A href="list4.htm">Listing 4</a>
shows the complete <I>lookup </I>routine.<P>
<h4><FONT COLOR="#000080"><A name="0226_0120">Processing The Information<A name="0226_0120"></FONT></h4></P>
Calling a separate routine to process the information provides more flexibility for the <I>lookup</I> routine. In this way, <I>lookup</I> need not be changed, if, for example, a change is made in the structure of a report. The report function is called <I>lookup_print</I>. This routine is passed the address of each matched transaction and prints it to a file (or the screen). <A href="list5.htm">Listing 5</a>
shows the <I>lookup_print</I> program. This independence issue leads to the question of what the <I>lookup</I> routine should return to <I>type_check</I>. With simplicity in mind, the <I>lookup</I> routine in this example passes back a Boolean variable signifying whether or not a match was made. Because it is desirable to have <I>lookup</I> and <I>type_check</I> perform only their basic functions, any further activity is done in the routine that initiates the search.<P>
The complete test program is shown in <A href="list6.htm">Listing 6</a>,
 and the output it produces is in <A href="list7.htm">Listing 7</a>.
<P>
<h4><FONT COLOR="#000080"><A name="0226_0121">Conclusion<A name="0226_0121"></FONT></h4></P>
This generic search program can be adapted to suit individual applications. For example, the sample program never actually calls <I>lookup</I>, only <I>type_check</I>. This was done to illustrate the sequence of events that take place. However, it may be more logical to have the application call a routine named <I>lookup</I> that performs both the type checking and searching functions. Also, individual needs may dictate that the value returned to the application differ.<P>

<h4><a href="../../../source/1991/oct91/weisfeld.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
