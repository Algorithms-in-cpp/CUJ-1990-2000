


<HTML>
<HEAD>

<TITLE>October 1991/Doctor C's Pointers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tococt.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Doctor C's Pointers&reg;<A name="022C_0120"><A name="022C_0120"></font></h2><P>
<h3 align="center"><A name="022C_0000"><A name="022C_0000">Data Structures, Part 7</h3><P>
<h3 align="center"><font color="#800000">Rex Jaeschke</font></h3><hr><blockquote><P>
<P><i><A name="022C_0000"><A name="022C_0000">Rex Jaeschke is an independent computer consultant, author and seminar leader. He participates in both ANSI and ISO C<I></I> <I></I>Standards meetings and is the editor of The Journal of C Language Translation, a quarterly publication aimed at implementors of C<I></I> <I></I>language translation tools. Readers are encouraged to submit column topics and suggestions to Rex at 2051 Swans Neck Way, Reston,<I></I> <I></I>VA 22091 or via UUCP at rex@aussie.com.</i></P><P>
Last month, Part 6 included the first half of a program to implement a doubly-linked list in dynamically allocated memory. This installment contains the remainder of that example. In addition, it shows a way to allow the user to enter commands as case-insensitive text, bypassing the numeric menu options used so far.<P>
<A href="list1.htm">Listing 1</a>, <A href="list2.htm">Listing 2</a>, <A href="list3.htm">Listing 3</a>, <A href="list4.htm">Listing 4</a>, <A href="list5.htm">Listing 5</a>, and
<A href="list6.htm">Listing 6</a>
contain the code. <A href="fig1.htm">Figure 1</a>
shows an example of some output.<P>
<h4><FONT COLOR="#000080"><A name="022C_0121">A Better Command Interface<A name="022C_0121"></FONT></h4></P>
Selecting option numbers from a menu is not particularly exciting. Besides, the numbers corresponding to each option are not at all intuitive. A better approach would be to allow users to enter a command name. An even better solution would be to allow them to enter any leading part of that command name so abbreviations would be possible. <A href="list7.htm">Listing 7</a>
shows the modifications necessary for this support. (The previous version is changed little except for <I>main</I> and <I>help</I>.)<P>
All <I>main</I> does is to get the command from input, pass it to the <I>lookup</I> function, and call the function that <I>lookup</I> tells it to. To make the program even more tolerant, the commands may be entered using either uppercase or lowercase letters or both. Words in multi-word commands must, however, be separated by exactly one space (although that restriction could easily be eliminated too).<P>
The declaration (and definition) of the function <I>lookup</I> is pretty tricky. It looks like the following:<P>
<pre>void (*lookup(const char *pcmd))
     void)</pre>
<I>lookup</I> takes one argument (of type <I>char</I><I> *</I>) and returns a pointer to a function that will be called to process the command passed to it. The function this pointer points to has no arguments and no return value. Since <I>lookup</I> has no business modifying the command string sent to it, the argument has the <I>const</I> qualifier.<P>
The call to <I>lookup</I> is also fairly tricky. It looks like:<P>
<pre>(*lookup(command)) ();</pre>
The command is passed to <I>lookup</I> which returns a function pointer. That pointer is dereferenced and the underlying function is called. Note that command validation has been relegated to the <I>lookup</I> function which is defined in <A href="list8.htm">Listing 8</a>.
<P>
<I>cmd_table</I> is an array of structures each of which contains a command string and a corresponding processing function's address. This table is searched to find the matching command. Note that the commands are sorted alphabetically, in order to detect if a command is invalid without necessarily searching the whole table. (If the table were much larger, a binary search could have been used instead.)<P>
If a command is invalid, the obvious thing to do would be to return a <I>NULL</I> pointer and test for it in <I>main</I>. However, this is unnecessary. Instead of treating invalid commands as something special we simply treat them as commands that are processed by a special "command" function. That is, when an invalid command is detected, we return the address of an error handling function:<P>
<pre>void bad_cmd (void)
{
   printf("\nInvalid command. Please try again.\n");
}</pre>
The <I>main</I> function is now completely ignorant of whether a command is valid or not.<P>
Since <I>main</I> won't call <I>lookup</I> for an empty string, we know the command consists of at least one character. By using <I>strncmp</I> for the comparison, we compare the whole input string with the leading part of each command in the table. Thus, the input commands <I>a</I>,<I> </I><I>add</I>,<I> </I><I>Add n</I>, and <I>Add</I><I> </I><I>Node</I> are all recognized as requesting the <I>add</I><I> </I><I>node</I> option. In fact, all commands can be uniquely identified in one character except for the dump ascending and descending orders. In this case, a command of <I>d</I> or <I>dump</I> would be interpreted as <I>dump</I><I> </I><I>ascending</I> since that command would be matched first. A command of at least <I>dump</I> <I>d</I> is needed to get the descending order. If you want to complain that a command such as <I>d</I> is ambiguous, you could have a third member in each structure containing the minimum length needed to make the command strings distinct and use that when doing the comparison.<P>
The <I>help</I> function has now been modified as shown in <A href="list9.htm">Listing 9</a>.
 For completeness, here then is the string conversion function as well.<P>
<pre>void stolower(char *pstring)
{
   while ((*pstring = tolower(*pstring)) != '\0') {
      ++pstring;
   }
}</pre>
<h4><FONT COLOR="#000080"><A name="022C_0122">What Goes Around Comes Around<A name="022C_0122"></FONT></h4></P>
Oftentimes it is possible to use a recursive technique to traverse a list or tree. However, in many cases, the recursive solution is no more efficient. (It is probably less efficient, since it spends a good deal of its life calling and returning from functions.) Typically, the recursive solution is no more readable. In any event, <A href="list10.htm">Listing 10</a>
shows a recursive version of <I>dump_des_nodes</I>. You can compare it to the earlier non-recursive version and judge for yourself.<P>
<h4><FONT COLOR="#000080"><A name="022C_0123">Reader Exercises<A name="022C_0123"></FONT></h4></P>
The doubly-linked list program did not allow a node's string value to be modified. Think about what it would take to add this option. Here are some tips on what to consider.<P>
1) If the new string value already exists, you need to add the old string value occurrence count to the new string value count and free up the old node and the old string.<P>
2) If a node does not exist with the new string's value, allocate memory for the new string, make the current node point to it, copy the new string out there, free the old string space, remove the node from the current location in the list, and add it back according to the new string value. Don't free up old space, however, until you are guaranteed you have gotten the space for the new string.<P>
3). You could look for short cuts. For example, if the new location is the same as the old there is no point in removing and reinserting the node in the same place. (One special case of this is modifying the only node in the list.)<P>
4). Since duplicates are stored as one string with an occurrence count, when you change one "occurrence" you change them all. If you wanted, however, you could just change one and leave the original node alone with a decremented count.<P>
A more interesting problem has to do with making the alphabetical order case-insensitive. That is, the strings <I>ABC</I>, <I>abcd</I>, and <I>DEF</I> should be stored in that order. However, the strings <I>RED</I><I>, </I><I>Red</I>, and <I>red</I> must be stored as distinct (and adjacent) strings <I>not</I> as duplicates.<P>
At a first glance, it appears all you have to do is to write a case-insensitive version of <I>strcmp</I> and call that from <I>locate_node</I> instead of <I>strcmp</I>. However, this isn't the whole story. For example, if the list contained the string entry <I>Red</I> but not one for <I>red</I> and you tried to add the string <I>red</I><I>, </I><I>locate_node</I> would report that you got an exact match. Case would be ignored. However, this is incorrect since the new string is not a duplicate of the existing one. They differ in case. So you need a <I>case-insensitive</I> match when looking for the place to insert a new node, but you want a <I>case-sensitive</I> search when checking if a node already exists with a given string value.<P>
To help you out, <A href="list11.htm">Listing 11</a>
contains a case-insensitive version of <I>strcmp</I>. Note that it does not actually change either of its input strings. Rather, it makes uppercase copies of each character pair just before it compares them.<P>

<h4><a href="../../../source/1991/oct91/jaeschke.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
