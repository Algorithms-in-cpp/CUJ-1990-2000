


<HTML>
<HEAD>

<TITLE>October 1991/Standard C</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tococt.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Standard C<A name="022A_011E"><A name="022A_011E"></font></h2><P>
<h3 align="center"><A name="022A_0000"><A name="022A_0000">The Header &lt;setjmp.h&gt;</h3><P>
<h3 align="center"><font color="#800000">P.J. Plauger</font></h3><hr><blockquote><P>
<P><i><A name="022A_0000"><A name="022A_0000">P.J. Plauger is senior editor of The C Users Journal. He is secretary of the ANSI C standards committee, X3J11, and convenor of the ISO C standards committee, WG14. His latest book is The Standard C Library, published by Prentice-Hall. You can reach him at PJP%plauger@.uunet.uu.net, uunet!plauger! pjp.</i></P><P>
<h4><FONT COLOR="#000080"><A name="022A_011F">Introduction<A name="022A_011F"></FONT></h4></P>
The C programming language does not let you nest functions. You cannot write a function definition inside another function definition, as in: <P>
<pre>int f(void)
   {  /* outer function */
   int g(void)
      {  /* NOT PERMITTED */
      .....</pre>
The major effect of this restriction is that you cannot hide function names inside a hierarchy. All the functions that you declare within a given translation unit are visible to each other. That is not a major drawback &#151; you can limit visibility by grouping functions within separate C source files that belong to different translation units.<P>
C does, however, suffer in another way because of this design decision. It provides no easy way to transfer control out of a function except by returning to the expression that called the function. For the vast majority of function calls, that is a desirable limitation. You want the discipline of nested function calls and returns to help you understand flow of control through a program. Nevertheless, on some occasions that discipline is too restrictive. The program is sometimes easier to write, and to understand, if you can jump out of one or more function invocations at a single stroke. You want to bypass the normal function returns and transfer control to somewhere in an earlier function invocation. That's often the best way to handle a serious error.<P>
<h4><FONT COLOR="#000080"><A name="022A_0120">Nonlocal <B><I>goto</I><A name="022A_0120"></B></FONT></h4></P>
You can do this sort of thing in Pascal. A nested function can contain a <I>goto</I> statement that transfers control to a label outside that function. (A <I>void</I> function in C is called a procedure in Pascal. I use "function" here to refer to Pascal procedures as well.) The label can be in any of the functions containing the nested function definition, as in: <P>
<pre>function x: integer; {a Pascal
goto example}
   label 99;
   function y(val: integer):
integer;
      begin
      if val &lt; 0 then
         goto 99;
      .....</pre>
You must declare the labels in a Pascal function before you declare any nested functions so the translator can recognize a nonlocal <I>goto</I>.<P>
A <I>goto</I> within the same function can often simply transfer control to the statement with the proper label. A nonlocal <I>goto</I> has more work to do. It must terminate execution of the active function invocation. That involves freeing any dynamically allocated storage and restoring the previous <I>calling environment</I>. Pascal even closes any files associated with any <I>file</I> variables freed this way. The function that called the function containing the <I>goto</I> statement is once again the active function. If the label named in the <I>goto</I> statement is not in the now-active function, the process repeats. Eventually, the proper function is once again active and control transfers to the statement with the proper label. The expression that invoked the function containing the <I>goto</I> never completes execution.<P>
Pascal uses the nesting of functions to impose some discipline on the nonlocal <I>goto</I> statements you can write. The language won't let you transfer control into a function that is not active. You have no way of writing a transfer of control to an unknown function. Here is one of the ways that Pascal is arguably better than C.<P>
<h4><FONT COLOR="#000080"><A name="022A_0121">Label Variables<A name="022A_0121"></FONT></h4></P>
The older language PL/I has a different solution to the problem. That language lets you declare <I>label</I> variables. You can assign a label to such a variable in one context, then use that variable as the target of a <I>goto</I> statement in another context. What gets stored in the <I>label</I> variable is whatever information the program needs to perform a nonlocal <I>goto</I>. (The <I>goto</I> need not be nonlocal &#151; it can transfer control to a label within the current invocation of the current function.)<P>
The PL/I approach is rather less structured than the one used by Pascal. You can write a <I>goto</I> statement that names an uninitialized <I>label</I> variable. Or the label assigned to the variable may be out of date &#151; it may designate the invocation of a function that has terminated. In either case, the effect can be disastrous. Unless the implementation can validate the contents of a label variable before it transfers control, it will make a wild jump. Such errors are hard to debug.<P>
C implements nonlocal transfers of control by using library functions. The header <I>&lt;setjmp.h&gt;</I> provides the necessary machinery: <P>
<UL><li>the type <I>jmp_buf</I>, which you can think of as a label data-object type</li>
<li>the function <I>longjmp</I>, which performs the nonlocal transfer of control</li>
<li>the macro <I>setjmp</I> which stores information on the current calling context in a data object of type <I>jmp_buf</I> and which marks where you want control to pass on a corresponding <I>longjmp</I> call </li></UL>
In this regard, the C mechanism is even more primitive than the unstructured <I>goto</I> of PL/I. All you can do is memorize a place that flow of control has reached earlier in the execution of the program. You can return to that place by executing a call to <I>longjmp</I> using the proper <I>jmp_buf</I> data object. If the data object is uninitialized or out of date, you invite disaster.<P>
<I>longjmp</I> and <I>setjmp</I> are delicate functions. They do violence to the flow of control and to the management of dynamic storage. Both of those arenas are the province of a portion of the translator that is extremely complex and hard to write. That part must generate code that is both correct and optimized for space and speed. Optimizations often involve subtle changes in flow of control or the use of dynamic storage. Yet the code generator often works in ignorance of the properties and actions of <I>longjmp</I> and <I>setjmp</I>.<P>
<h4><FONT COLOR="#000080"><A name="022A_0122">Subtleties<A name="022A_0122"></FONT></h4></P>
The C Standard addresses two areas where subtleties often lurk:<P>
<UL><li>the expression that contains the <I>setjmp</I> macro</li>
<li>the dynamic storage declared in the function that executes <I>setjmp</I></li></UL>
In both cases, you will find language in the C Standard that is puzzling. That's because the C Standard attempts to circumscribe dangerous behavior without spelling out the dangers.<P>
One of the dangers lies in expression evaluation. A typical computer has some number of registers that it uses to hold intermediate results while evaluating an expression. Write a sufficiently complex expression, however, and you may exhaust the available registers. You then force the code generator to store intermediate results in various bits of dynamic storage.<P>
Here is where the problem comes in. <I>setjmp</I> must guess how much "calling context" to store in the <I>jmp_buf</I> data object. It is a safe bet that certain registers must be saved. A register that can hold intermediate results across a function call is a prime candidate, since the <I>longjmp</I> call can be in a called function. Once the program evaluates <I>setjmp</I>, it needs these intermediate results to complete evaluation of the expression. If <I>setjmp</I> fails to save all intermediate results, a subsequent return stimulated by a <I>longjmp</I> call will misbehave.<P>
The C Standard legislates the kind of expressions that can contain <I>setjmp</I> as a subexpression. The idea is to preclude any expressions that might store intermediate results in dynamic storage that is unknown (and unknowable) to <I>setjmp</I>. Thus you can write forms such as:<P>
<UL><li><I>switch</I> (<I>setjmp</I>(<I>buf</I>)) .....</li>
<li><I>if </I>(<I>2 </I>&lt;<I> setjmp</I>(<I>buf</I>)) .....</li>
<li><I>if</I> (<I>!setjmp</I>(<I>buf</I>)) .....</li>
<li>the expression statement <I>setjmp(buf)</I></li></UL>
You can write no forms more complex than these. Note that you <I>cannot</I> reliably assign the value of <I>setjmp</I>, as in<P>
<pre>n = setjmp(buf)</pre>
The expression may well evaluate properly, but the C Standard doesn't require it.<P>
The second danger concerns the treatment of dynamic storage in a function that executes <I>setjmp</I>. Such storage comes in three flavors:<P>
<UL><li>the parameters you declare for the function</li>
<li>any data objects you declare with the <I>auto</I> storage-class specifier, </li>
<li>any data objects you declare with the <I>register</I> storage-class specifier</li></UL>
The problem arises because the code generator can elect to store some of these data objects in registers. This set of registers is often indistinguishable from the set that can hold temporary intermediate values in an expression evaluation. Hence, <I>setjmp</I> is obliged to save all such registers and restore them to an earlier state on a <I>longjmp</I> call. That means that certain dynamic data objects revert to an earlier state on a subsequent return from <I>setjmp</I>. Any changes in their stored values between returns from <I>setjmp</I> get lost.<P>
Such behavior would be an annoying anomaly if it were predictable. The problem is that it is <I>not</I> predictable. You have no way of knowing which parameters and <I>auto</I> data objects end up in registers. Even data objects you declare as <I>register</I> are uncertain. A translator has no obligation to store any such data objects in registers. Hence, any number of data objects declared in a function have uncertain values if the function executes <I>setjmp</I> and a <I>longjmp</I> call transfers control back to the function. This is hardly a tidy state of affairs.<P>
X3J11 addressed the problem by adding a minor kludge to the language. Declare a dynamic data object to have a <I>volatile</I> type and the translator knows to be more cautious. Such a data object will never be stored in a place that is altered by <I>longmp</I>. This usage admittedly stretches the semantics of <I>volatile</I>, but it does provide a useful service.<P>
<h4><FONT COLOR="#000080"><A name="022A_0123">What The C Standard Says<A name="022A_0123"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="022A_0124">Nonlocal jumps &lt;<B><I>setjmp.h</I></B>&gt;<A name="022A_0124"></FONT></h4></P>
The header &lt;<I>setjmp.h</I>&gt; defines the macro <I>setjmp</I>, and declares one function and one type, for bypassing the normal function call and return discipline.106<P>
The type declared is<P>
<pre>jmp_buf</pre>
which is an array type suitable for holding the information needed to restore a calling environment.<P>
It is unspecified whether <I>setjmp</I> is a macro or an identifier declared with external linkage. If a macro definition is suppressed in order to access an actual function, or a program defines an external identifier with the name <I>setjmp</I>, the behavior is undefined.<P>
<h4><FONT COLOR="#000080"><A name="022A_0125">Save calling environment<A name="022A_0125"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="022A_0126">The <B><I>setjmp</I></B> macro<A name="022A_0126"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="022A_0127">Synopsis<A name="022A_0127"></FONT></h4></P>
<pre>#include &lt;setjmp.h&gt;
int setjmp(jmp_buf env);</pre>
<h4><FONT COLOR="#000080"><A name="022A_0128">Description<A name="022A_0128"></FONT></h4></P>
The <I>setjmp</I> macro saves its calling environment in its <I>jmp_buf</I> argument for later use by the <I>longjmp</I> function.<P>
<h4><FONT COLOR="#000080"><A name="022A_0129">Returns<A name="022A_0129"></FONT></h4></P>
If the return is from a direct invocation, the <I>setjmp</I> macro returns the value zero. If the return is from a call to the <I>longjmp</I> function, the <I>setjmp</I> macro returns a nonzero value.<P>
<h4><FONT COLOR="#000080"><A name="022A_012A">Environmental constraint<A name="022A_012A"></FONT></h4></P>
An invocation of the <I>setjmp</I> macro shall appear only in one of the following contexts:<P>
<UL><li>the entire controlling expression of a selection or iteration statement;</li>
<li>one operand of a relational or equality operator with the other operand an integral constant expression, with the resulting expression being the entire controlling expression of a selection or iteration statement;</li>
<li>the operand of a unary <I>!</I> operator with the resulting expression being the entire controlling expression of a selection or iteration statement; or </li>
<li>the entire expression of an expression statement (possibly cast to <I>void</I>).</li></UL>
<h4><FONT COLOR="#000080"><A name="022A_012B">Restore calling environment<A name="022A_012B"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="022A_012C">The <B><I>longjmp</I></B> function<A name="022A_012C"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="022A_012D">Synopsis<A name="022A_012D"></FONT></h4></P>
<pre>#include &lt;setjmp.h&gt;
void longjmp(jmp_buf env, int val);</pre>
<h4><FONT COLOR="#000080"><A name="022A_012E">Description<A name="022A_012E"></FONT></h4></P>
The <I>longjmp</I> function restores the environment saved by the most recent invocation of the <I>setjmp</I> macro in the same invocation of the program, with the corresponding <I>jmp_buf</I> argument. If there has been no such invocation, or if the function containing the invocation of the <I>setjmp</I> macro has terminated execution107 in the interim, the behavior is undefined.<P>
All accessible objects have values as of the time <I>longjmp</I> was called, except that the values of objects of automatic storage duration that are local to the function containing the invocation of the corresponding <I>setjmp</I> macro that do not have volatile-qualified type and have been changed between the <I>setjmp</I> invocation and <I>longjmp</I> call are indeterminate.<P>
As it bypasses the usual function call and return mechanisms, the <I>longjmp</I> function shall execute correctly in contexts of interrupts, signals and any of their associated functions. However, if the <I>longjmp</I> function is invoked from a nested signal handler (that is, from a function invoked as a result of a signal raised during the handling of another signal), the behavior is undefined.<P>
<h4><FONT COLOR="#000080"><A name="022A_012F">Returns<A name="022A_012F"></FONT></h4></P>
After <I>longjmp</I> is completed, program execution continues as if the corresponding invocation of the <I>setjmp</I> macro had just returned the value specified by <I>val</I>. The <I>longjmp</I> function cannot cause the <I>setjmp</I> macro to return the value 0; if <I>val</I> is 0, the <I>setjmp</I> macro returns the value 1.<P>
<B>Footnotes:</B><P>
106. These functions are useful for dealing with unusual conditions encountered in a low-level function of a program.<P>
107. For example, by executing a <I>return</I> statement or because another <I>longjmp</I> call has caused a transfer to a <I>setjmp</I> invocation in a function earlier in the set of nested calls.<P>
<h4><FONT COLOR="#000080"><A name="022A_0130">Using <B><I>&lt;setjmp.h&gt;</I><A name="022A_0130"></B></FONT></h4></P>
You use <I>&lt;setjmp.h&gt;</I> whenever you need to bypass the normal function call and and return discipline. The nonlocal <I>goto</I> that <I>&lt;setjmp.h&gt;</I> provides is a delicate mechanism. Use it only where you must and only a few stylized ways. I recommend that you build on a standard pattern:<P>
<UL><li>Isolate each call to <I>setjmp</I> in a separate (small) function. That minimizes any issues about which dynamically declared data objects get rolled back on a <I>longjmp</I> call.</li>
<li>Call <I>setjmp</I> from the controlling expression of a <I>switch</I> statement.</li>
<li>Perform all the actual processing in a function (call it <I>process</I>) that you call from <I>case</I> zero of the <I>switch</I> statement.</li>
<li>Report an error and restart <I>process</I> at any point by executing the call <I>longjmp(1)</I>.</li>
<li>Report an error and terminate <I>process</I> at any point by executing the call <I>longjmp(2)</I>.</li></UL>
You can also add additional <I>case</I> labels to handle other argument values that <I>longjmp</I> can expect.<P>
Here is what the top-level function might look like:<P>
<pre>#include &lt;setjmp.h&gt;

static jmp_buf jmpbuf;

void top_level(void)
   { /* the top-level function */
   for (; ; )
      switch (setjmp(jmpbuf))
         {  /* switch on alternate returns */
      case 0:  /* first time */
         process();
         return;
      case 1:  /* restart */
         &lt;report error&gt;
         break;
      case 2:  /* terminate */
         &lt;report error&gt;
         return;
      default: /* unknown longjmp argument */
         &lt;report error&gt;
         return;
         }
}</pre>
I assume here that all references to <I>jmpbuf</I> are within this translation unit. If not, you must declare <I>jmpbuf</I> with external linkage. (Drop the storage class keyword <I>static</I>.) Alternatively, you must pass a pointer to <I>jmpbuf</I> to those functions that must access it.<P>
Note in this regard that <I>jmp_buf</I> is an array type. If you write the argument <I>jmpbuf</I>, the translator alters it to a pointer to the first element of the array. That's what <I>setjmp</I> and <I>longjmp</I> expect. So even though <I>jmpbuf</I> appears to be passed by value, it is actually passed by reference. That's how <I>setjmp</I> can store the calling environment in <I>jmpbuf</I>.<P>
For consistency, you should declare each parameter as <I>jmp_buf</I> <I>buf</I> and write the corresponding argument as <I>jmpbuf</I>. Don't declare the parameter as <I>jmp_buf *pbuf</I> or write the argument as <I>&amp;jmpbuf</I>. The latter form is clearer but at odds with the long-standing conventions for calling <I>setjmp</I> and <I>longjmp</I>.<P>
If you choose an alternate form for using <I>setjmp</I>, execute the macro in the smallest possible function you can write. If the translator does not treat <I>setjmp</I> specially, it has less opportunity to surprise you. If it is aware that <I>setjmp</I> is troublesome, it has less code to deoptimize for safety.<P>
Additional caveats apply if you call <I>longjmp</I> from within a signal handler. I will discuss them next month.<P>
<h4><FONT COLOR="#000080"><A name="022A_0131">Implementing <B><I>&lt;setjmp.h</I></B>&gt;<A name="022A_0131"></FONT></h4></P>
The only reliable way to implement <I>setjmp</I> and <I>longjmp</I> requires functions written in assembly language. You need an intimate knowledge of how the translator generates code. You also need to perform several operations that you cannot express safely in C, if at all.<P>
<A href="list1.htm">Listing 1</a>
shows the file <I>setjmp.h</I>. It has proved adequate for a variety of Standard C implementations. It assumes that the calling context can be stored as an <I>array of int</I>. That is usually the case even when the stored context includes data objects of diverse types. I use the internal header &lt;<I>yvals.h</I>&gt; to define the macro _<I>NSETJMP</I> that determines the number of elements in <I>jmp</I>_<I>buf</I>. As an example, the Borland Turbo C++ compiler for PC-compatibles requires that &lt;<I>yvals.h</I>&gt; contain the definition:<P>
<pre>#define _NSETJMP 10</pre>
Note that &lt;<I>setjmp.h</I>&gt; declares a function named <I>setjmp</I>. It then masks this declaration with a macro that merely calls the function. The only reason for this silly exercise is to keep programs honest. A program should assume that <I>setjmp</I> is a macro. Hence the program cannot redeclare it in a translation unit that includes &lt;<I>setjmp.h</I>&gt;. A program should also assume that the Standard C library defines the name <I>setjmp</I> with external linkage. Hence the program cannot also provide such a definition even if it never includes &lt;<I>setjmp.h</I>&gt;. This implementation of &lt;<I>setjmp.h</I>&gt; endeavors to generate diagnostics for programs that are not maximally portable.<P>
I will not show implementations of <I>setjmp</I> and <I>longjmp</I> here. Believe it or not, I have written working versions of these two functions in C for the VAX architecture. The idea was to illustrate their basic workings for those not schooled in assembly language. Upon reflection, however, I'm not sure that any good purpose was served by such a perverse exercise. Kids, don't try this at home.<P>
<I>This article is excerpted from P.J. Plauger</I>, The Standard C Library, (<I>Englewood Cliffs, N.J.: Prentice-Hall, 1992</I>).<P>

<h4><a href="../../../source/1991/oct91/plauger.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
