


<HTML>
<HEAD>

<TITLE>October 1991/Questions & Answers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tococt.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Questions &amp; Answers<A name="0230_0124"><A name="0230_0124"></font></h2><P>
<h3 align="center"><A name="0230_0000"><A name="0230_0000">Using TLIB, The Turbo C Librarian</h3><P>
<h3 align="center"><font color="#800000">Ken Pugh</font></h3><hr><blockquote><P>
<P><i><A name="0230_0000"><A name="0230_0000">Kenneth Pugh, a principal in Pugh-Killeen Associates, teaches C language courses for corporations. He is the author of C Language for Programmers and All On C, and was a member on the ANSI C committee. He also does custom C programming for<I> </I>communications, graphics, image databases, and hypertext. His address is 4201 University Dr., Suite 102, Durham, NC 27707. You may fax<I> </I>questions for Ken to (919) 489-5239. Ken also receives email at kpuqh@dukemvs.ac.duke.edu (Internet).</i></P><P>
<B>Q</B><P>
I am a recreational novice Turbo C user and reader of<I> </I>your column in <I>The C Users Journal</I>. Occasionally, I use<I> </I>Turbo C to write small utility<I> </I>programs for my work. In so doing, I<I> </I>have managed to develop some<I> </I>specialized calculating and graphics<I> </I>functions that I use over and over. I can do<I> </I>this easily enough by either<I> </I>incorporating them in the text of my particular<I> </I>project or linking them as OBJ files.<I> </I>However, for strictly educational<I> </I>reasons (and maybe a touch of<I> </I>stubbornness) I would like to incorporate<I> </I>them into a library.<P>
My problem is that I don't know<I> </I>how to do that, and the user manuals<I> </I>that I have are not making things click<I> </I>for me. Can you please elaborate on<I> </I>what I need to be thinking about to<I> </I>prepare functions for inclusion in<I> </I>libraries. Most of my functions make<I> </I>use of each other and of routines used<I> </I>in Turbo C's libraries.<P>
Thank you for your assistance.<P>
Sam LeFevre<br>
Idaho Falls, Idaho<P>
<B>A</B><P>
The librarian is the solution to<I> </I>your problems. Each compiler or<I> </I>operating system has its own version of this program. It<I> </I>gathers multiple object files into a single library file. Options<I> </I>usually include the ability to add, remove, replace, extract, and<I> </I>list the object modules.<P>
Turbo C's librarian is named <I>TLIB</I>. A simple way to run it is<P>
<pre>tlib libname + onefile
   + twofile + threefile</pre>
This creates a library called <I>libname </I>with three object files in it:<I> onefile.obj, twofile.obj</I>, and<I> threefile.obj</I>.<P>
Alternatively you could list the names of the object files in a text file. Suppose <I>libfiles</I> contained<P>
<pre>+ onefile
+ twofile
+ threefile</pre>
Then<P>
<pre>tlib libname @libfiles</pre>
would create the same library. You can get elaborate in updating libraries. Usually I make up one file that lists all the modules to be included in the library and rebuild the library every time a module changes.<P>
Creating a package or a set of functions that is usable takes a slight bit of work. Let me list some guidelines. Not all of these may be applicable if you are only creating the libraries for yourself.<P>
1. Name the functions with understandable function names. If there are several functions in a package, they should each have a common suffix or prefix.<P>
2. The functions should receive all the values they need from the parameter list. There may be a need for the functions to communicate with each other. Use static global variables for values that need to be accessed by more than one function.<P>
3. Keep related functions together in a single source file. This is required if they communicate via static global variables. This simplifies the maintenance issues. When a program requires one of the functions, the whole object module will be loaded. This will increase the size of the executable. However chances are the program will require most of the functions in the file anyway.<P>
4. Create a header file that contains prototypes for all functions in a package. This file should include any structure templates and <I>#defines</I> required by the user to access the functions.<P>
To illustrate these, I'll use an example from my talk on <I>Data and Function Abstraction &#151; The First Step to Object-Oriented Programming</I>. Suppose you wanted to create a printer package that would allow you to print text in a number of fonts. You might have the files in <A href="list1.htm">Listing 1</a>.
<P>
The suffix for the package is <I>pr</I>. The header file <I>print.h</I> contains everything necessary for the user. Related subroutines (<I>pt_set_format</I> and <I>pr_output_string</I>) communicate through <I>current_print_font</I>. There are no global variables that are settable by the user.<P>
<B>Q</B><P>
I recently learned that the ANSI C standard requires a compiler to be able to generate code for recursive calls to <I>main</I>. I developed a trivial example of recursive calls to <I>main</I> (<A href="list2.htm">Listing 2</a>
with output in <A href="list3.htm">Listing 3</a>)
, using VAX-C v3.1, to satisfy my curiosity. This is an interesting requirement yet, I cannot readily see any use for this functionality. Can you give some examples where this recursion might be beneficial.<P>
I enjoy reading your articles in <I>The C Users Journal</I>. Thank you for your time.<P>
Jason B. Mawhinney,<br>
Fredericksburg, VA<P>
<B>A</B><P>
I can't think of any example where this might be used, unless you were implementing a recursive algorithm that you wanted to be able to call from the command line. As far as I can figure, it just shows that <I>main</I> is like every other function. Note that you can also have a return statement in <I>main</I>, which works just like calling <I>exit</I>.<P>
Perhaps our readers have some ideas on this.<P>
<B>Q</B><P>
I am a new convert from Microsoft QuickBasic to Microsoft QuickC and also a new user of <I>The C Users Journal</I> (which I find most helpful).<P>
One of the few things from QuickBasic that I miss using in QuickC is the <I>ON KEY</I> interrupt functions which allow for softkeys to be used within the program.<P>
Is it possible to perform a similar function with QuickC and, if so, is it also possible to prioritize the function of various keys from the selection available?<P>
I have attempted to implement this function by hooking the keyboard interrupt and returning the function to call next to the executing program. This works in a limited manner however, it eventually gives a stack overflow and locks the system. This happens with the listed software after a few rapid keystrokes, however on a program with a non-trivial main loop, it overflows the stack almost immediately.<P>
I am using the CXL libraries for the windowing output and compiling in Quick V2.5 in the <I>small</I> mode.<P>
I need to have these keyboard interrupts for process control applications involving mechanical testing equipment.<P>
Peter Nunn<br>
Victoria, Australia<P>
<B>A</B><P>
I've simplified the code you provided, since I don't have the CXL libraries. The code as modified with most of your original flow is shown in <A href="list4.htm">Listing 4</a>.
 It is shown all in a single file, to simplify the listing, although you originally had it broken out to several files, as good programming practice dictates.<P>
There was one item that was an interesting slip of the keyboard. Originally you had <I>off_key</I> looking like<P>
<pre>void off_key(void) {
   ....
   _disable;
   _dos_setvect(PJN_INTER, old_handler);
   _enable; }</pre>
Note that those are not calls to the functions, but simply evaluation of the addresses themselves. A good <I>lint</I> would have solved the problem.<P>
The basic problem with your code is using the interrupt incorrectly. You used the keyboard interrupt and then tried calling the BIOS routines to read the keyboard. However you did not chain the keyboard interrupt to the old handler, so the keyboard buffer will never get filled up.<P>
The keyboard interrupt (0X9) is the one that the keyboard itself uses to tell the processor a key has been struck. The interrupt vector for this has to go get the scan codes from the keyboard and process them.<P>
A better method is to use the software interrupt (0x1C), that is called by the BIOS code that services the timer. It invokes the user routine at that vector location every clock tick. You can then call the <I>_bios_keybrd</I> routine to see if there is a key waiting in the buffer.<P>
You could have simplified the code by having the interrupt routine simply return the key that was pressed. The main program would compare the new key to the current key and switch the function pointers around if necessary. That keeps the interrupt routine more general and reusable.<P>
I'm not sure what you meant by prioritizing the keys. The flow which you used will simply switch the function whenever a key is pressed. If you want to interrupt one of the functions whenever another key is pressed, you could set up everything to work off software interrupts. But that gets a little bit complicated under MS-DOS.<P>
<h4><FONT COLOR="#000080"><A name="0230_0125">Readers' Replies<A name="0230_0125"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0230_0126">Placement of <B><I>main</I><A name="0230_0126"></B></FONT></h4></P>
Not to pick nits, but in the "Questions &amp; Answers" column of the July <I>CUJ</I><I>,</I> regarding the placement of the procedure <I>main</I> as the first or last procedure in the source file, your answer was only 99.44 percent correct: "It doesn't matter to the compiler...the order in which you list your functions" <I>unless</I> the procedures are not of type <I>integer</I>! If <I>main</I> appears at the top of the source, you may have to declare some of the functions it calls, which you could omit if <I>main</I> were last. (Me, I always put it first unless I put it last <I></I>&#151; depends on my mood.)<P>
J. Laurino<P>
I always declare functions that return non-integers, regardless of their placement in the source file. I try to avoid any other return type for functions, so it's fairly easy to do this. (KP).<P>
<h4><FONT COLOR="#000080"><A name="0230_0127">Extended Keys<A name="0230_0127"></FONT></h4></P>
Concerning Mr. Richard Jodoin's letter about the extended keys and how to use them. The enclosed function (<A href="list5.htm">Listing 5</a>)
 and include file (portion shown in <A href="list6.htm">Listing 6</a>)
 should be useful for what he wants. The function gets a single key and returns it as an integer. The <I>include</I> file defines all of the extended keys, along with some of the "normal" keys.<P>
Geoffrey Probert Jr.<br>
Broomfield, CO<P>
In the April 1991 issue of The C Users Journal, Mr. Tim Riley submitted a C program, <I>all_true</I>, which seemed to defy reasonable operation. Mr. Riley's desire was to always return an exit status of 0 so that the calling program would not report an error.<P>
The coding and operation of the <I>all_true</I> program is correct. The mystery lies in the action of the Bourne shell. The Bourne shell is designed to detect the interrupt key (UNIX signal 2) and perform an interrupt processing routine that sets a bit in the exit status only if the exit status is 0!<P>
The following code illustrates how to control the internal interrupt processing features of <I>/bin/sh</I><I>:</I><P>
<pre>$ trap " 2</pre>
This <I>trap</I> command instructs the shell to do nothing when it receives an interrupt (signal 2).<P>
<pre>$ all_true sleep 5
^C
$ echo $?
0</pre>
The <I>all_true</I> processing will run normally, and if interrupted, the shell will report an exit status of <I>0</I>.<P>
<pre>$ trap 2</pre>
This <I>trap</I> command restores the Bourne shell's default interrupt processing.<P>
If the program being used by Mr. Riley does not permit execution of more than a single shell command, this arrangement will work as well:<P>
<pre>$ trap " 2 ; all_true sleep 5 ; trap 2</pre>
James A. Capp<br>
Harrisburg, PA<P>
Thanks for your suggestion. That explains the reason for the exit status. (KP)<P>

<h4><a href="../../../source/1991/oct91/pugh.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
