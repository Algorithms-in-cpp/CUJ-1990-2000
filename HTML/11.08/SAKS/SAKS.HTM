

<HTML>
<HEAD>

<TITLE>August 1993/Stepping Up To C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocaug.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Stepping Up To C++<A name="0281_00CA"><A name="0281_00CA"></font></h2><P>
<h3 align="center"><A name="0281_0000"><A name="0281_0000">Looking Up Names</h3><P>
<h3 align="center"><font color="#800000">Dan Saks</font></h3><hr><blockquote><P>
<P><i><A name="0281_0000"><A name="0281_0000">Dan Saks is the founder and principal of Saks &amp; Associates, which offers consulting and training in C++ and C. He is secretary of the<I></I> <I></I>ANSI and ISO C++ committees. Dan is coauthor of C++ Programming Guidelines, and codeveloper of the Plum Hall Validation Suite for C++ (both with Thomas Plum). You can reach him at 393 Leander Dr., Springfield OH, 45504-4906, by phone at (513)324-3601, or electronically at dsaks@wittenberg.edu.</i></P><P>
Last month I introduced nested classes (see "Stepping Up to C++: Nested Classes", <I>CUJ</I>, July 1993). A nested class is one declared inside another class. Early C++ implementations treated nested classes just as C treats nested <I>structs</I>, namely, as if they were not nested. The <I>ARM</I> (Ellis and Stroustrup, 1990) revised the C++ language definition so that each class defines a full-fledged scope. Now, every identifier declared inside a class is in the scope of that class.<P>
With the advent of nested classes, the name lookup rules for C++ programs became much more complicated. Name lookup is the process by which a translator (a compiler or an interpreter) matches a use of a symbolic name in a translation unit with a declaration for that name in the same translation unit. The lookup rules stated in the ARM seem to work fine for most simple cases, but they are incomplete and inconsistent in handling many complex cases.<P>
The C++ standards committee's Core Language working group has spent much of its time these last three years ironing out name lookup problems. This month's column explains these problems and the new language rules designed to solve them.<P>
<h4><FONT COLOR="#000080"><A name="0281_00CB">Basic Concepts<A name="0281_00CB"></FONT></h4></P>
When you use an identifier in a program, the translator matches that use with the identifier's declaration. This matching process is called "name resolution" or "name lookup." The translator uses the type and access attributes established in the declaration to insure that you've used the identifier properly. Then it uses other attributes (like address or alignment of a variable) to produce object semantics (like machine code or symbolic debugging information).<P>
C++ insists that you declare an identifier before using it (except if it's a statement label). C is a bit more lax. It lets you refer to some identifiers, like function names, before declaring them. If the compiler can't find a declaration, it simply assumes that the name has certain default attributes. For example, it assumes an undeclared function returns an <I>int</I>.<P>
C++, like C, lets you declare the same identifier with completely different attributes, as long as the declarations are in different scopes. The scope of a declaration is the region of program text over which that declaration remains in effect. A name must be unique in its scope. That is, you cannot declare the same name with different attributes in the same scope.<P>
Although function name and operator overloading appear to violate this restriction, they do not. C++ lets you use the same identifier as the name of two different functions in the same scope. However, any two such overloaded functions must have distinct signatures. A function's signature is the sequence of types in its formal parameter list. For example, the signature of<P>
<pre>int fputs(const char *s, FILE *stream);</pre>
is<P>
<pre>(const char *, FILE *)</pre>
Thus, the <I>name</I> of a function in C++ is not just its identifier, but its identifier combined with its signature. For any other declared entity, such as a type or an object, its name is just its identifier. But, because of overloading, we speak of <I>name lookup</I> rather than <I>identifier lookup</I>. It any case, it remains true that a name must be unique in its scope. (For more on overloading in C++, see "Stepping Up to C++: Function Name Overloading", <I>CUJ</I>, November, 1991.)<P>
C++ and C share a common set of scope regions:<P>
<UL><li>A name declared outside any function or class (or <I>struct</I> in C) has <I>file scope</I>, which terminates at the end of the translation unit.</li>
<li>A name declared inside a block (enclosed in braces) has <I>block scope</I>, which terminates at the brace that closes the block. Names in a function's formal parameter list are in the scope of the outermost block of that function.</li>
<li>A statement label has <I>function scope</I> that encompasses the entire body of the function in which it appears.</li></UL>
Together, file, block, and function scopes are sometimes called <I>lexical</I> scopes.<P>
Scopes may be nested. In fact, all block scope regions are nested inside the file scope region, and blocks may be nested inside other blocks. A name declared in an outer scope may be declared differently in an inner scope. The declaration in the inner scope <I>hides</I> the declaration at the outer scope during name lookup, as shown in the program fragment in <A href="list1.htm">Listing 1</a>.
<P>
For example, variable <I>i</I> declared on line 6 has block scope. It hides the <I>i</I> declared at file scope on line 1 so that the reference to <I>i</I> on line 8 refers to the <I>i</I> declared on line 6.<P>
As another example, formal parameter <I>p</I> on line 4 has block scope that terminates at the end of function  on line 15. However, inside the brace-enclosed block on lines 9 through 12, variable <I>p</I> declared on line 10 hides formal parameter <I>p</I>.<P>
<h4><FONT COLOR="#000080"><A name="0281_00CC">Class Scope<A name="0281_00CC"></FONT></h4></P>
C++ introduces yet another category of scope regions:<P>
<UL><li>A name declared inside a class (that is, a name that is a class member) has <I>class scope</I>.</li></UL>
Classes introduce complications in the scope rules because class scope regions are not necessarily contiguous regions. Lexical scope regions are reasonably tidy. They may have other scopes nested inside that temporarily hide names, but they are always contiguous. Class scopes can be, and often are, broken into disjoint pieces. A class scope consists not only of the class definition itself, but also the non-inline member function definitions (including constructor initializers) and static data member initializations.<P>
Outside its scope, you must refer to a class member by explicitly prefixing it with any of<P>
<UL><li><I>X</I>: (where <I>X</I> is the class name)</li>
<li><I>y</I>. (where <I>y</I> is an object, or reference to an object, of class <I>X</I>)</li>
<li><I>p-</I>&gt; (where <I>p</I> is a pointer to an <I>X</I>)</li></UL>
Inside its scope, you can refer to a class member by using its unadorned member name (that is, its name without any of the above prefixes).<P>
<A href="list2.htm">Listing 2</a>
shows some of the disjoint regions that make up a class scope. The scope of each member of class <I>X</I> begins at its declaration and continues to the brace (on line 9) that closes <I>X's</I> definition. This includes the inline function definition for member reset (on line 8), where the unadorned references to <I>k</I> and <I>MAX</I> refer to the static member <I>X:: k</I> and the member constant <I>X::MAX,</I> respectively.<P>
Both the body and the constructor initializer of the non-inline constructor <I>X::X()</I> are also in the scope of class <I>X</I>. Thus, <I>i</I> and <I>MAX</I> in the initializer list (on line 13) refer to the corresponding members of <I>X</I>. <I>k</I> and <I>reset</I> in the constructor's body (lines 15 and 16) also refer to members of <I>X. MIN</I> refers to the constant declared at file scope on line 11.<P>
Finally, the initializing expression in the definition for static member <I>X::k</I> is also in the scope of <I>X</I>. Thus, the unadorned use of <I>MAX</I> on line 19 refers to <I>X::MAX</I>.<P>
<h4><FONT COLOR="#000080"><A name="0281_00CD">Lookup in Nested Classes<A name="0281_00CD"></FONT></h4></P>
Adding nested classes to C++ complicated the lookup rules even further. The <I>ARM</I> simply didn't say enough to rule out alternative interpretations of the rules. The C++ committee's Core Language working group worked with a variety of simple examples that revealed the differences of opinion. Some of these examples appeared in the committee meeting minutes captured by yours truly. Scott Turner of Liant Software collected others in a committee paper summarizing the lookup issues. <A href="list3.htm">Listing 3</a>
shows one of the examples on which the working group members finally based their agreement.<P>
<A href="list3.htm">Listing 3</a>
shows class <I>X</I> at file scope with class <I>Y</I> nested inside. The listing actually declares <I>X</I> and <I>Y</I> as <I>structs,</I> but in C++ a <I>struct</I> is a class, and a class is a <I>struct</I>. A <I>struct</I> is convenient in these examples because <I>struct</I> members are public by default. This eliminates any concerns about access violations that only cloud the name lookup discussion.<P>
<I>X::Y</I> has a member function  that's defined out-of-line (lines 13 through 17). The listing declares <I>i</I> in four different places:<P>
<UL><li>as a static member of <I>X (X::i)</I></li>
<li>as an ordinary member of <I>X::Y (X::Y::i)</I></li>
<li>as a global variable (<I>::i</I>)</li>
<li>as a local variable of <I>X::Y::</I><I></I></li></UL>
The question is: to which declaration does the <I>i</I> on line 16 (in the body of <I>X::Y::f</I>) refer?<P>
Obviously, it refers to the local variable declared on line 15. But if you remove that declaration, which declaration wins? Name lookup finds the member of <I>X::Y</I> declared on line 6. If you remove that declaration, the next choice is the member of <I>X</I> declared in line 3. Finally, if you delete that declaration, name lookup finds the global variable declared on line 11.<P>
The numbered comments to the right of the listing summarize the hiding pattern. A declaration commented by a given number hides all declarations with higher numbered comments.<P>
By the way, the <I>i</I> member of <I>X</I> is declared static to satisfy a restriction I presented last month in my discussion of nested classes. The <I>this</I> pointer in function <I>X::Y::f</I> points to an object of type <I>X::Y.</I> It does not have any objects of type <I>X</I> handy, so it has no way to locate an ordinary data member of an <I>X</I> object. By making <I>X::i</I> static, <I>X::Y::f</I> can access it even without any <I>X</I> objects lying around.<P>
Removing the keyword <I>static</I> from that declaration does not affect name lookup. That is, if you removed the declarations on lines 6 and 15, then the use of <I>i</I> on line 16 refers to <I>X::i,</I> even if it's non-static. However, the translator produces a diagnostic complaining that a nested class cannot access an ordinary data member of an enclosing class.<P>
In summary, the algorithm for resolving unadorned names in non-inline members is more-or-less as follows:<P>
1.     Look in block scopes from the innermost block to the block that is the function body.<P>
2.     For each class name that appears right to left in the fully-qualified name of the function, look in that class scope. For example, for function <I>X::Y::f,</I> look in <I>Y</I>, and then look in <I>X</I>.<P>
3.     Look in enclosing scopes, from the innermost scope out to file scope.<P>
<h4><FONT COLOR="#000080"><A name="0281_00CE">Derivation and Nesting<A name="0281_00CE"></FONT></h4></P>
<A href="list4.htm">Listing 4</a>
shows another Core Language group example that combines derivation and nested classes. It declares class <I>B1</I> inside class <I>A1</I> and class <I>B2</I> inside class <I>A2.</I> Furthermore, <I>A2::B2</I> is publicly derived from <I>A1::B1</I>. Yup, you really can do that.<P>
The listing declares <I>i</I> in four different places:<P>
<UL><li>as a global variable (::i)</li>
<li>as a static member of A1 (A1::i)</li>
<li>as an ordinary member of A1::B1 (A1::B1::i)</li>
<li>as a static member of A2 (A2::i)</li></UL>
And again the question is: to which declaration does the <I>i</I> in the body of <I>A2::B2::f</I> (on line 23) refer?<P>
Exactly as written, it refers to <I>A2::B2::i</I> &#151; the<I>i</I> declared on line 8 that <I>A2::B2</I> inherited from <I>A1::B1.</I> If you remove that declaration, then the <I>i</I> on line 23 refers to the static member <I>A2::i</I> declared on line 14. And, if you delete that declaration, it refers to the global <I>i</I> declared on line 1.<P>
The <I>i</I> on line 23 can never refer to <I>A1::i</I> declared on line 5. <I>A2::B2</I> may inherit members of <I>A1::B1,</I> but it can't see names in the scopes enclosing <I>A1::B1.</I> Stated another way, although <I>A1::B1</I> is in the scope of <I>A1:: i,</I> classes derived from <I>A1::B1</I> are not.<P>
<h4><FONT COLOR="#000080"><A name="0281_00CF">Inline Friend Definitions<A name="0281_00CF"></FONT></h4></P>
A function that is a friend of a class is not a member of that class, but it can access private and protected members of that class. (I introduced <I>friends</I> in "Stepping Up to C++: Operator Overloading, Part 3", <I>CUJ,</I> May 1992). A function cannot demand friendship. Only a class can grant friendship by a <I>friend</I> declaration inside the class definition, as in<P>
<pre>class X
   {
   friend void f(X &amp;x);
private:
   int;
   // ...
   };</pre>
In this case, the function definition must appear later, such as in<P>
<pre>void f(X &amp;x)
   {
   ++x.i;
   }</pre>
A <I>friend</I> declaration can also be a definition. A <I>friend</I> function defined inside a class definition is implicitly declared <I>inline</I>, and is in the (lexical) scope of that class. A <I>friend</I> function defined outside the class definition is not in the class scope. Class <I>X</I> in <A href="list5.htm">Listing 5</a>
illustrates this point.<P>
Class <I>X</I> declares two friend functions, <I>f</I> and <I>g</I>. The declaration for <I>f</I> on line 7 is also its definition. The body of <I>f</I> is in the scope of <I>X</I>, so the use of <I>k</I> in the function body refers to the member <I>X::k.</I> On the other hand, the definition of function g appears outside the definition of class <I>X</I>. Even though <I>g's</I> body (on line 11) appears identical to <I>f's</I>, it is not in the scope of <I>X</I>. Thus, the <I>k</I> on line 11 refers to the global <I>k</I> (defined on line 1), not the static member <I>X::k.</I><P>
A class can declare a member of another class as a friend. For example,<P>
<pre>class X
   {
   void f();
   };

class Y
   {
   friend void X::f();
   };</pre>
declares member <I>f</I> of class <I>X</I> as a friend of class <I>Y</I>. Hence, <I>X::f</I> can access private members of <I>Y</I> as well as <I>X</I> objects.<P>
As they waded through the name lookup issues, members of the Core Language group discovered that a <I>friend</I> declaration of a member function can also define that member. Actually, they discovered that even though they didn't know what it meant, nothing in the <I>ARM</I> precluded such a definition. Of course, the addition of nested classes only compounded the confusion.<P>
For example, <A href="list6.htm">Listing 6</a>
shows class <I>Y</I> nested inside class <I>X</I>, and a separate class <I>Z</I> that defines member <I>f</I> of <I>X::Y</I> as a friend. The listing declares <I>i</I> in two separate places: as a static member of <I>X</I> and as a static member of <I>Z</I>. And now the question: to which declaration does the <I>i</I> inthe body of <I>X::Y::f</I> refer?<P>
The fact is, nobody knew. Nearly everyone on the committee agreed that this sort of declaration was so confusing, and of such little value, that we simply banned it by adding this rule:<P>
<UL><li>A <I>friend</I> declaration of a member may not define that member. However, a <I>friend</I> declaration of a non-member may still define that non-member.</li></UL>
<h4>References</FONT></h4></P>
Ellis, Margaret A. and Bjarne Stroustrup. 1990. <I>The Annotated C++ </I>Referen<I>ce Manual</I>. Reading, MA: Addison-Wesley.<P>

<h4><a href="../../../source/1993/aug93/saks.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
