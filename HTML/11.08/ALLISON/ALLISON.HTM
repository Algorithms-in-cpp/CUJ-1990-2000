

<HTML>
<HEAD>

<TITLE>August 1993/Code Capsules</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocaug.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Code Capsules<A name="0276_00C8"><A name="0276_00C8"></font></h2><P>
<h3 align="center"><A name="0276_0000"><A name="0276_0000">Pointers, Part 1: The Basics</h3><P>
<h3 align="center"><font color="#800000">Chuck Allison</font></h3><hr><blockquote><P>
<P><i><A name="0276_0000"><A name="0276_0000">Chuck Allison is a regular columnist with CUJ and a software architect for the Family History Department of the Church of Jesus Christ of Latter Day Saints Church Headquarters in Salt Lake City. He has a B.S. and M.S. in mathematics, has been programming since 1975, and has been teaching and developing in C since 1984. His current interest is object-oriented technology and education. He is a member of X3J16, the ANSI C++ Standards Committee. Chuck can be reached on the Internet at allison@decus.org, or at (801)240-4510.</i></P><P>
<h4><FONT COLOR="#000080"><A name="0276_00C9">Programming on the Edge<A name="0276_00C9"></FONT></h4></P>
<pre>Segmentation Violation
Access Violation
Suspicious Pointer Conversion
Non-portable Pointer Conversion
Null Pointer Assignment</pre>
Do any of these messages sound familiar? Your compiler issues these messages when you use pointers improperly. Pointers gone awry are a C programmer's worst nightmare. Indeed, pointers and the raw power they give the developer are a popular criticism of C. "It's just too dangerous," people say. The philosophy of C, however, is "Trust the Programmer." The truth is not that C is dangerous, but simply that some programmers aren't ready to be trusted. You must master pointers to use C productively (and safely). Fortunately, that mastery follows naturally from a few basic principles and techniques.<P>
<h4><FONT COLOR="#000080"><A name="0276_00CA">The Basics<A name="0276_00CA"></FONT></h4></P>
All data objects other than register variables reside somewhere in memory. That "somewhere" has an address. On platforms that number each byte of memory in sequence starting from zero, an address is simply the sequence number of a byte. (Some systems have more sophisticated addressing schemes). The following program shows how to find the address of program variables:<P>
<pre>/* address.c */
#include &lt;stdio.h&gt;

main()
{
  int i = 7, j = 8;

  printf("i == %d, &amp;i == %p\n",i,&amp;i);
  printf("j == %d, &amp;j == %p\n",j,&amp;j);
  return 0;
}

/* Output:
i == 7, &amp;i == FFF4
j == 8, &amp;j == FFF2
*/</pre>
The <I>&amp;</I> unary operator returns the address of a data object. The <I>%p</I> edit descriptor displays an address in a compiler-dependent format (usually hexadecimal). For all the examples in this article, both integers and addresses are 16-bit quantities (your output may vary).<P>
The memory layout for <I>i</I> and <I>j</I> above looks like this:<P>
<IMG SRC="figa.gif"><P>
Where your compiler allocates memory is not critical. For instance, <I>i</I> and <I>j</I> happen to be adjacent in memory, but some architectures have gaps between objects due to alignment requirements. Notice that my compiler allocated <I>i</I> after <I>j</I> in memory ("after" meaning at a higher memory address). How the computer actually stores the bits of a number also depends on your system. In fact, on the PC, the 7 in <I>i</I> is not really stored in the rightmost portion of <I>i</I>'s memory. You can think of it that way most of the time, though, because it is logically 0x0007, no matter how the bits are physically laid out in memory.<P>
A pointer is nothing more than a variable that holds the address of another object. Usually you just want to use it to refer to an object in memory so don't concern yourself with the actual numerical value of an address. The program in <A href="list1.htm">Listing 1</a>
illustrates the use of pointers. A pointer always points to an object of some type, so the referenced type must always appear in the declaration (we speak of<I> pointer to int</I> or <I>pointer to char</I>). When an asterisk precedes a pointer, the resulting expression refers to the value pointed at. The declaration<P>
<pre>int *ip;</pre>
indicates that <I>*ip</I> is an <I>int</I>, therefore <I>ip</I> is a pointer to an <I>int</I>. The process of referring to memory indirectly through a pointer is called indirection or dereferencing (take your pick). Indirection can occur on either side of an assignment statement. With the declarations in <A href="list1.htm">Listing 1</a>,
 the statement<P>
<pre>*ip = 9;</pre>
would have the same effect as<P>
<pre>i = 9;</pre>
If you could define a pointer without mentioning the referenced type, the expression <I>*ip</I> would be meaningless and indirection would be impossible. Never forget that a pointer doesn't just point somewhere in memory; it points to an object of some type. The only exception to this rule, a pointer that points nowhere, happens when you assign a pointer the special value <I>NULL</I> (defined in <I>stdio.h</I>,<I> stdlib.h</I>,<I> stddef.h</I>,<I> locale.h</I>,<I> string.h</I>, and <I>time.h</I>)<I>.</I> You cannot dereference a <I>NULL</I> pointer; you can only compare it to other pointers.<P>
The memory layout for the program <I>pointer.c</I> is:<P>
<IMG SRC="figb.gif"><P>
Although addresses usually appear as numbers, you should not assume any relationship exists between pointers and integral data types. Pointers are a unique data type and should be treated as such. The only things you can do with a pointer are:<P>
<UL><li>Store in it the address of an object of the referenced type and read the same</li>
<li>Alter or retrieve the contents at that address (indirection)</li>
<li>Add or subtract an integer (staying within array limits)</li>
<li>Subtract it from or compare it to another pointer (when both point into the same array)</li>
<li>Assign or compare to <I>NULL</I></li>
<li>Pass it as an argument to a function expecting a pointer of the referenced type</li></UL>
Since the relative memory position of objects is not important (except for array elements, of course), it is usually better to depict the logical layout of memory, like this:<P>
<IMG SRC="figc.gif"><P>
One usually says <I>ip points to i</I> or <I>jp points at j</I>.<P>
The notion of a pointer is so simple that novices often frustrate themselves by looking beyond the mark. If you want to avoid needless hours of confusion, just remember this:<P>
<IMG SRC="figd.gif"><P>
(Of course, the learning process will create some hours of struggle, but remembering Grand Pointer Principle #1 will keep them to a minimum). Notice that Grand Pointer Principle #1 says that a pointer <I>is</I> an address instead of <I>holds</I> an address. Both are true. A pointer is an address like an <I>int</I> is an integer, yet one usually doesn't say that an <I>int i</I>, for instance, "holds" an integer. I just want to emphasize that when you use a pointer, think <I>address.</I> What could be simpler?<P>
Since all objects have an address, you can have pointers to any kind of object, including another pointer. Program <I>ptr2ptr.c</I> (<A href="list2.htm">Listing 2</a>)
 shows how to define a pointer to a pointer to an integer. The memory layout for this program is<P>
<IMG SRC="fige.gif"><P>
If <I>ipp</I> is a pointer to a pointer to an integer, then <I>*ipp</I> is the pointer it points at. To finally arrive at the integer 7 in <I>i</I> requires another level of indirection, hence the expression <I>**ipp</I>. In other words,<P>
<pre>**ipp == *ip == i</pre>
<h4><FONT COLOR="#000080"><A name="0276_00CB">Pointer Arithmetic<A name="0276_00CB"></FONT></h4></P>
When a pointer references an array element, you can add (or subtract) an integer to it to point to other array elements. Adding 1 to such a pointer increases its value by the number of bytes in the referenced type, so that it points to the next array element. The program in <A href="list3.htm">Listing 3</a>
performs integer arithmetic within an array of <I>float</I>s. The array looks like this:<P>
<IMG SRC="figf.gif"><P>
On my system a <I>float</I> occupies four bytes. Incrementing <I>p</I> by 1 actually increases its value by 4 (from FFEA to FFEE). Subtracting two pointers to array elements performs the expected complementary operation: it yields the number of array elements between the two addresses. In other words, if <I>p</I> and <I>q</I> are pointers to the same referenced type, then the statement <I>q</I> = <I>p</I> + <I>n</I> implies <I>q</I> - <I>p</I> == <I>n</I>. The portable way to store the difference between two pointers is in a <I>ptrdiff_t</I>, defined in <I>stddef. h.</I> The portable way to print a <I>ptrdiff_t</I> is by casting it to a <I>long</I>.<P>
The rules of pointer arithmetic can be summarized by the following formulas:<P>
<pre>p  n == (char *) p  n * sizeof(*p)</pre>
which says "adding (or subtracting) an integer <I>n</I> to (or from) a pointer moves the pointer up (or down) in memory <I>n</I> elements of the referenced type," and<P>
<pre>p - q ==  n</pre>
where <I>n</I> is the number of elements between <I>p</I> and <I>q</I>.<P>
Of course, pointer arithmetic can only be meaningful within arrays since the formulas assume a sequence of equally-sized objects. However, you can interpret any single object as an array of bytes. The program in <A href="list4.htm">Listing 4</a>
dissects an integer by storing its address in a pointer to <I>char</I> and visiting each byte by pointer arithmetic. Note the cast in the initialization of <I>cp</I>. Assigning pointers of different types requires a cast to convince the compiler that you know what you're doing (otherwise it will tell you that it suspects that you don't &#151; hence the warning, <I>Suspicious pointer conversion</I>). You don't need casts, however, when converting to and from <I>void</I> pointers. (More on this in the section "Generic Pointers.")<P>
Take a closer look at the output in <A href="list4.htm">Listing 4</a>:
<P>
<IMG SRC="figg.gif"><P>
This reveals an interesting fact: the Intel processor in my PC stores things "backwards," in that the least significant values of an object are stored at the lower memory addresses. This storage scheme is called <I>little-endian</I>, because as you move up through memory, you encounter the "little end" first. VAX machines are also little-endian, but IBM mainframes are <I>big-endian</I>. This is usually not a concern in common data processing applications, but sometimes it is important.<P>
Suppose, for example, that you want to efficiently store a date from this century. You need storage as follows:<P>
<UL><li>Year (0 - 99)    7 bits</li>
<li>Month (1-12)  4 bits</li>
<li>Day (1 - 31)     5 bits</li></UL>
Fortunately, this combines to 16 bits, the size of an integer on a PC. One obvious way, then, to store a date in an <I>int</I> is to use bitwise operations (see <A href="list5.htm">Listing 5</a>)
. The logical layout of the bits for the date August 2, 1992 (B902) is as expected:<P>
<IMG SRC="figh.gif"><P>
But a little-endian machine stores it physically like this:<P>
<IMG SRC="figi.gif"><P>
Using the following bit-field structure makes for a more readable program (see <A href="list6.htm">Listing 6</a>)
:<P>
<pre>struct date
{
  unsigned day: 5; 
  unsigned mon: 4; 
  unsigned year: 7; 
};</pre>
To interpret an integer as a bit-field structure, simply cast a pointer to it into a <I>struct date</I> pointer. Now you can access the date components by name without the shifting and masking that bitwise operations require. To access a structure member via a pointer you need to first dereference the pointer and then name the member:<P>
<pre>(*dp).mon</pre>
You can replace this unwieldy syntax with the shorthand:<P>
<pre>dp-&gt;mon</pre>
that I've heard pronounced <I>dp arrow mon, dp pointing to mon</I>, and few other ways not worth mentioning.<P>
<h4><FONT COLOR="#000080"><A name="0276_00CC">Pass-By-Reference Semantics<A name="0276_00CC"></FONT></h4></P>
C always passes arguments to functions by value, meaning functions use a copy of each argument locally. As a result, a function can't change the corresponding value of a parameter in the calling program. For example, the naive approach to swapping two integers in <A href="list7.htm">Listing 7</a>
has no effect on <I>i</I> and <I>j</I> in <I>main</I>.<P>
A scheme called <I>pass-by-reference</I> allows changes to function arguments to persist after leaving a function. You can simulate pass-by-reference semantics in C by passing pointers to the arguments that you want to change. You alter the values in the calling program indirectly through those pointers (see <A href="list8.htm">Listing 8</a>)
.<P>
<h4><FONT COLOR="#000080"><A name="0276_00CD">Generic Pointers<A name="0276_00CD"></FONT></h4></P>
Certain operations apply equally well to objects of different types. It is often convenient, therefore, to write functions that can accept parameters that point to any type. For example, the standard library function <I>memcpy</I> copies a block of memory from one address to another. You might want to call <I>memcpy</I> to copy structures of your own making:<P>
<pre>struct mystruct a, b;
/* . . . */
memcpy(&amp;a,&amp;b,sizeof (struct mystruct));</pre>
To handle a pointer of any type, <I>memcpy</I> declares its first two arguments as pointers to <I>void</I>. You can assign a pointer to any type to and from a <I>void </I>* without a cast. Here is a portable implementation of <I>memcpy</I> that illustrates <I>void</I> pointers:<P>
<pre>void *memcpy(void *target,const void *source,size_t n)
{
  char *targetp = target;
  const char *sourcep = source;
  while (n-)
    *targetp++ = *sourcep++;
  return target;
}</pre>
This version of <I>memcpy</I> must assign the pointers to <I>void</I> to pointers to <I>char</I> so it can traverse the memory blocks a byte at a time, copying as it goes. It makes no sense to try to dereference a <I>void *</I>, since its size is unknown.<P>
<h4><FONT COLOR="#000080"><A name="0276_00CE"><I>const</I><B> Pointers<A name="0276_00CE"></B></FONT></h4></P>
Note the <I>const</I> keyword in the second parameter of the previous code fragment. This tells the compiler that <I>memcpy</I> will not be changing any of the values that <I>source</I> points to. When passing pointers as parameters, always use the <I>const</I> qualifier when it applies. It protects you not only from inadvertently making an incorrect assignment, but even from passing <I>const</I> objects to functions that modify their pointer parameters. For example, if the declaration in <A href="list8.htm">Listing 8</a>
had been<P>
<pre>const int i = 7, j = 8;</pre>
you would get a warning for the statement<P>
<pre>swap(&amp;i,&amp;j);</pre>
because <I>swap</I> actually does change the values its arguments point to.<P>
Look through the include files <I>stdio.h</I>,<I> string.h</I>, and <I>stdlib.h</I> provided with your compiler and you will see generous use of <I>const</I>. When <I>const</I> appears anywhere before the asterisk in a declaration, it indicates that the referenced contents will not change:<P>
<pre>const char *p;  // pointer to const char
char const *q;  // likewise, pointer to const char
char c;
c = *p;         // OK (assuming p an q are initialized:)
*q = c;         // Error</pre>
You can also declare that the pointer itself cannot change by putting the <I>const</I> after the asterisk:<P>
<pre>char * const p;
*p = 'a';       // OK, only the pointer is const
++p;            // Error, can't modify pointer</pre>
To disallow modification of both the pointer and the contents referenced, use <I>const</I> in both places:<P>
<pre>const char * const p;
char c;
c = *p;      // OK - can read contents
*p 'a';      // Error
++p;         // Error</pre>
The function <I>inspect</I> in <A href="list5.htm">Listing 5</a>
shows how to print the individual bytes of any object. (The output from <I>inspect.c</I> is in <A href="fig1.htm">Figure 1</a>)
. Since I don't alter the contents of the object, the first parameter is a pointer to <I>const</I>, and I am careful to convert it to a pointer to <I>const char</I> before using it. You will notice that I pass the array <I>s</I> without taking its address. This is because C passes arrays by reference. Next month's capsule will explore the intricate relationship between arrays and pointers.<P>
<h4><FONT COLOR="#000080"><A name="0276_00CF">Summary<A name="0276_00CF"></FONT></h4></P>
Proper use of pointers is unquestionably the sticky wicket of C. In this capsule I have only covered the basics:<P>
<UL><li>A pointer is (holds) the address of another object.</li>
<li>Don't treat pointers like integers &#151; they have their own well-defined operations (learn them).</li>
<li>Use pointers to <I>void</I> for genericity.</li>
<li>Use <I>const</I> for protection.</li></UL>
<h4><a href="list9.htm">Listing 9</a></h4>

<h4><a href="../../../source/1993/aug93/allison.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
