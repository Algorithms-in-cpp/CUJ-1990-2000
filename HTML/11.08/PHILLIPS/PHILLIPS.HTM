

<HTML>
<HEAD>

<TITLE>August 1993/C Image Processing, Part 11 Manipulating Shapes</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocaug.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Graphics</FONT></H2>

<hr><h2 align="center"><font color="#800000">C Image Processing, Part 11 Manipulating Shapes<A name="0247_00C0"><A name="0247_00C0"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0247_0000"><A name="0247_0000">Dwayne Phillips</font></h3><hr><blockquote><P>
<P><i><A name="0247_0000"><A name="0247_0000">The author works as a computer and electronics engineer with the<I></I> <I></I>U.S. Department of Defense. He has a PhD in Electrical and<I></I> <I></I>Computer Engineering from Louisiana State University. His interest<I></I> <I></I>include computer vision, artificial intelligence, software<I></I> <I></I>engineering and programming languages.</i></P><P>
<h4><FONT COLOR="#000080"><A name="0247_00C1">Introduction to the Series of Articles<A name="0247_00C1"></FONT></h4></P>
This is the eleventh in a series of articles on images and image processing. Previous articles discussed reading, writing, displaying, and printing images (TIFF format), histograms, edge detection, spatial frequency filtering, sundry image operations, and image segmentation. (See box called <a href="sidebar1.htm">"The C Image Processing Series...so far"</a> on page 91.) This article will discuss manipulating shapes.<P>
The last two articles discussed image segmentation. Segmentation took an image and produced a binary output showing the objects of interest. This article will describe several techniques for taking those objects and improving their appearance.<P>
<h4><FONT COLOR="#000080"><A name="0247_00C2">Working with Shapes<A name="0247_00C2"></FONT></h4></P>
You process images, such as segmentation results, to improve their appearance (Phillips February 1993, June 1993). <A href="photo1.htm">Photograph 1</a>
shows an aerial image, and <A href="photo2.htm">Photograph 2</a>
a segmentation of it. <A href="photo3.htm">Photograph 3</a>
shows a house, and <A href="photo4.htm">Photograph 4</a>
a segmentation of it. These are good segmentations, but they have problems.<P>
Segmentation results have "holes" in them. The roof in <A href="photo4.htm">Photograph 4</a>
should be solid, but has holes. Larger holes can even break objects. The opposite can also be true, as segmentation can join separate objects. Segmentation results often have little or no meaning. The solid objects resemble blobs and are hard to interpret &#151; especially if you want to use a computer to interpret them.<P>
The answer to these problems is morphological filtering, or manipulating shapes. Useful techniques include:<P>
<UL><li>erosion and dilation</li>
<li>opening and closing</li>
<li>outlining</li>
<li>thinning and skeletonization</li></UL>
These techniques work on binary images where the object equals a value and the background is zero. <A href="fig1.htm">Figure 1</a>
shows a binary image with the background equal to 0 and the object equal to 200. All of the figures in the article will use the same format.<P>
<h4><FONT COLOR="#000080"><A name="0247_00C3">Erosion and Dilation<A name="0247_00C3"></FONT></h4></P>
The erosion and dilation operations make objects smaller and larger. These operations are valuable in themselves and are the foundation for the opening and closing operations. <I>Erosion</I>, discussed briefly in "Image Segmentation Using Edges and Gray Shades" (Phillips June 1993), makes an object smaller by removing or eroding away the pixels on its edges. <A href="fig2.htm">Figure 2</a>
shows the result of eroding the rectangle in <A href="fig1.htm">Figure 1</a>.
<P>
<I>Dilation</I> makes an object larger by adding pixels around its edges. <A href="fig3.htm">Figure 3</a>
shows the result of dilating the rectangle in <A href="fig1.htm">Figure 1</a>.
 I set any zero pixel that was next to a 200 pixel (shown as asterisks).<P>
There are two general techniques for erosion and dilation. The technique introduced in the last article (Phillips June 1993) employs a threshold (Russ 1992). Another technique (Myler and Weeks 1993) uses masks to erode and dilate in desired directions.<P>
The threshold technique looks at the neighbors of a pixel and changes its state if the number of differing neighbors exceeds a threshold. <A href="list1.htm">Listing 1</a>
shows the erosion and dilation routines that use this method. The loops in the erosion routine examine every pixel in <I>the_image</I> equal to <I>value</I>. They count the number of zero neighbors and set the pixel in question to zero if the count exceeds the threshold parameter. <A href="fig2.htm">Figure 2</a>
used a threshold parameter of 3. Compare this to <A href="fig4.htm">Figure 4</a>
(threshold = 2).<P>
The loops in the dilation routine do the opposite. They count the value pixels next to a zero pixel. If the count exceeds the threshold parameter, set the zero pixel to <I>value</I>. The dilation in <A href="fig3.htm">Figure 3</a>
used threshold = 0 while <A href="fig5.htm">Figure 5</a>
used threshold = 2.<P>
The masking technique (Myler and Weeks 1993) lays an <I>nxn</I> (3x3, 5x5, etc.) array of 1s and 0s on top of an input image and erodes or dilates the input. With masks you can control the direction of erosion or dilation. <A href="fig6.htm">Figure 6</a>
shows four 3x3 masks (you could use 5x5, 7x7, etc. masks). The first two masks modify the input image in the vertical or horizontal directions while the second two perform in both directions.<P>
<A href="fig7.htm">Figure 7</a>
shows the results of dilating the object of <A href="fig1.htm">Figure 1</a>
using the four masks of <A href="fig6.htm">Figure 6</a>.
 The procedure is:<P>
1.     Place the 3x3 mask on the object so that the center of the 3x3 array lies on the edge of the object.<P>
2.     Place a 200 everywhere a 1 from the mask lies.<P>
The object in the first part of <A href="fig7.htm">Figure 7</a>
has been dilated, or stretched, vertically. The second result is a horizontal dilation. The third and fourth show dilation in both directions. These last two differ in dilating the corners of the object.<P>
Mask erosion is the same, but opposite. You lay the 3x3 mask on the image so that the center of the array is on top of a zero. If any of the 1s in the mask overlap a 200 in the image, set the 200 to zero. Vertical mask erosion removes the top and bottom rows from an object. Horizontal mask erosion removes the left and right columns, and the other masks remove pixels from all edges.<P>
<A href="list1.htm">Listing 2</a>
shows the routines for mask erosion and dilation. <I>mask_dilation</I> copies the correct directional mask specified by the <I>mask_type</I> parameter and goes into the looping code. The loop moves through the input image and lays the 3x3 mask on top of every pixel in the image. The inner loops examine those places where the 3x3 mask equals 1. If <I>the_image</I> is greater than 1 (non-zero) at that place, set <I>max</I> to the input image value. After exiting the loop, set the <I>out_image</I> to <I>max</I>. This changes zero pixels to <I>value</I> and enlarges or dilates an object in <I>the_image</I>.<P>
The <I>mask_erosion</I> routine performs the opposite function. Its inner loops look at those places where the 3x3 mask is 1 and try to find pixels in <I>the_image</I> that are less than <I>min</I> (that are zero). If there are any zeros in this part of <I>the_image</I>, set <I>out_image</I> to zero. This removes value pixels, makes them zeros, and erodes an object in <I>the_image.</I><P>
<A href="photo5.htm">Photograph 5</a>
illustrates directional dilation. The left section shows the segmentation of the house image. The center section shows dilating with a vertical mask, and the right section shows dilating with a horizontal mask.<P>
<h4><FONT COLOR="#000080"><A name="0247_00C4">Opening and Closing<A name="0247_00C4"></FONT></h4></P>
<I>opening</I> and <I>closing</I> help separate and join objects. They are powerful operators that are simple combinations of erosion and dilation. <I>opening</I> spaces objects that are too close together, detaches objects that are touching and should not be, and enlarges holes inside objects. The first part of <A href="fig8.htm">Figure 8</a>
shows two objects joined by a "thread." The second part shows how <I>opening</I> eliminated the thread and separated the two objects. The rest of the figure shows how <I>opening</I> enlarges a desired hole in an object.<P>
Opening involves one or more erosions followed by one dilation. Eroding the object of <A href="fig8.htm">Figure 8</a>
twice erases the thread. A dilation enlarges the two objects back to their original size, but does not recreate the thread. The left side of <A href="photo6.htm">Photograph 6</a>
is a segmentation of the house image (Phillips June 1993). The right side is the result of <I>opening</I> (three erosions followed by one dilation). Although excessive, it shows how <I>opening</I> spaces the major objects.<P>
<I>closing</I> joins broken objects and fills in unwanted holes in objects. The first part of <A href="fig9.htm">Figure 9</a>
shows two objects that should be joined to make a line. The second part shows how closing removes the break in the line. The last two parts of <A href="fig9.htm">Figure 9</a>
show how closing fills in unwanted holes in objects.<P>
Closing involves one or more dilations followed by one erosion. Dilating the top part of <A href="fig9.htm">Figure 9</a>
twice enlarges the two objects until they join. An erosion thins them back to their original width. Dilating the third part of <A href="fig9.htm">Figure 9</a>
twice makes the box bigger and eliminates the hole. Eroding shrinks the box back to its initial size.<P>
<A href="list3.htm">Listing 3</a>
shows the routines that perform opening and closing. They call the mask erosion and dilation routines, but calling the threshold erosion and dilation routines would work just as well (homework for the reader). <I>opening</I> calls <I>mask_ dilation</I> one or more times and <I>mask_erosion</I> once. <I>closing</I> calls <I>mask_erosion</I> one or more times and <I>mask_dilation</I> once. These are simple, yet powerful routines.<P>
<h4><FONT COLOR="#000080"><A name="0247_00C5">Special Opening and Closing<A name="0247_00C5"></FONT></h4></P>
The <I>opening</I> and <I>closing</I> operators work well, but sometimes produce undesired side effects. <I>closing</I> merges objects, but sometimes merges objects that it shouldn't. <A href="fig10.htm">Figure 10</a>
shows such a case. <A href="photo7.htm">Photograph 7</a>
shows the result of closing applied to <A href="photo2.htm">Photograph 2</a>.
 <I>closing</I> closed the holes in the objects, but also joined distinct objects. This distorted the segmentation results. <I>opening</I> enlarges holes in objects, but can break an object. <A href="fig11.htm">Figure 11</a>
shows a case where <I>opening</I> broke an object and eliminated half of it.<P>
The answer is special opening and closing routines that avoid these problems. <A href="fig12.htm">Figure 12</a>
shows the desired result of such special routines that open and close objects, but do not join or break them.<P>
The first difficulty to overcome is what I call the <I>2-wide</I> problem. In opening, you erode an object more than once, and an object that is an even number of pixels wide can disappear. The first part of <A href="fig13.htm">Figure 13</a>
shows a 2-wide object. The second part shows the object after one erosion, and the third part shows it after two erosions. The object will disappear entirely after several more erosions.<P>
A solution to the 2-wide problem is my own variation of the <I>grass fire wavefront</I> technique (Levine 1985). My technique scans across the image from left to right looking for a 0 to <I>value</I> transition. When it finds one, it examines the <I>value</I> pixel to determine if removing it will break an object. If removal does not break the object, it sets the pixel to 0 and continues scanning. Next, it scans the image from right to left and does the same operation. Then it scans from top to bottom, and finally from bottom to top. The different scans will not erode away an object that is 2-wide.<P>
The key to special opening is not breaking the object. One solution places the pixel in question in the center of a 3x3 array. Find every <I>value</I> pixel next to the center pixel. Do all of those pixels have <I>value</I> neighbors other than the center pixel? If yes, then erode or remove the center pixel. If no, then removing the center pixel will break the object. The top part of <A href="fig14.htm">Figure 14</a>
shows cases where removing the center pixel will break the object. The bottom part shows cases where removing the center pixel will not break the object. Here, every 200 has a 200 neighbor other than the center pixel.<P>
A similar problem in special closing is not joining two separate objects when you dilate or set a pixel. One solution is to place the pixel in question in the center of a 3x3 array. You grow objects in this array and check if the center pixel has neighbors whose values differ (Phillips February 1993). If their values differ, do not set the center pixel because this will join different objects. The top part of <A href="fig15.htm">Figure 15</a>
shows 3x3 arrays and the results of growing objects. The center pixel has neighbors that are parts of different objects, so you do not set the center pixel. The bottom part of <A href="fig15.htm">Figure 15</a>
shows another set of 3x3 arrays. Here, the non-zero neighbors of the center pixel all have the same value, and we can set the center pixel.<P>
The source code to implement special opening and closing, shown in <A href="list3.htm">Listing 4</a>,
 is basic but long. The <I>special_opening</I> routine calls <I>thinning</I> (instead of erosion) one or more times before calling <I>dilation</I> once. <I>thinning</I> works around the 2-wide problem while performing basic threshold erosion. <I>thinning</I> has four sections &#151; one each for <I>scan</I> (left to right, right to left, top to bottom, and bottom to top) recounted earlier. Whenever <I>thinning</I> finds a pixel to remove, it calls <I>can_thin</I> to prevent breaking an object. <I>can_thin</I> checks the non-zero neighbors of the center pixel. If every non-zero pixel has a non-zero neighbor besides the center pixel, <I>can_thin</I> returns a 1, else it returns a zero.<P>
The <I>special_closing</I> routine calls <I>dilate_not_join</I> one or more times before calling <I>erosion</I> once. <I>dilate_not_join</I> uses the basic threshold technique for dilation and calls <I>can_dilate</I> to prevent joining two separate objects. <I>can_dilate</I> grows objects in a 3x3 array and checks if the center pixel has neighbors with different values. If it does, the neighbors belong to different objects, so it returns a zero. <I>can_dilate</I> grows objects like the routines in the previous two C Image Processing installments (Phillips February 1993, June 1993). <I>can_dilate</I> calls <I>little_label_and_check</I> which resembles routines described in those two articles.<P>
<A href="photo8.htm">Photograph 8</a>
shows the result of special closing. Compare this with <A href="photo2.htm">Photograph 2</a>
and <A href="photo7.htm">Photograph 7</a>.
 <A href="photo2.htm">Photograph 2</a>,
 the original segmentation, is full of holes. <A href="photo7.htm">Photograph 7</a>
closed these holes, but joined objects and ruined the segmentation result. <A href="photo8.htm">Photograph 8</a>
closes the holes and keeps the segmentation result correct by not joining the objects.<P>
<A href="photo9.htm">Photograph 9</a>
and <A href="photo10.htm">Photograph 10</a>
show how to put everything together to improve segmentation results. <A href="photo9.htm">Photograph 9</a>
shows the outcome of eroding the segmentation result of <A href="photo4.htm">Photograph 4</a>.
 Applying special closing to <A href="photo9.htm">Photograph 9</a>
produces <A href="photo10.htm">Photograph 10</a>.
 Compare <A href="photo4.htm">Photograph 4</a>
and <A href="photo10.htm">Photograph 10</a>.
 <A href="photo10.htm">Photograph 10</a>
has all the major objects cleanly separated without holes.<P>
<h4><FONT COLOR="#000080"><A name="0247_00C6">Outlining<A name="0247_00C6"></FONT></h4></P>
Outlining is a type of edge detection. It only works for zero-value images, but produces better results than regular edge detectors. <A href="photo11.htm">Photograph 11</a>
shows the exterior outline of the objects in <A href="photo4.htm">Photograph 4</a>.
<P>
Outlining helps you understand an object. <A href="fig16.htm">Figure 16</a>
and <A href="fig17.htm">Figure 17</a>
show the interior and exterior outlines of objects. Outlining zero-value images is quick and easy if you have erosion and dilation at your disposal. To outline the interior of an object, you erode the object and subtract the eroded image from the original. To outline the exterior of an object, you dilate the object and subtract the original image from the dilated image. Exterior outlining is easiest to understand. Dilating an object makes it one layer of pixels larger. Subtracting the input from this dilated, larger object yields the outline.<P>
<A href="list5.htm">Listing 5</a>
shows the source code for the interior and exterior outline operators. The functions call the <I>mask_erosion</I> a n d <I>mask_dilation</I> routines. They could have called the threshold erosion and dilation routines (homework for the reader). The <I>interior_outline</I> routine erodes the input image and subtracts the eroded image from the original. The <I>exterior_outline</I> routine dilates the input image and subtracts the input image from the dilated image.<P>
<h4><FONT COLOR="#000080"><A name="0247_00C7">Thinning and Skeletonization<A name="0247_00C7"></FONT></h4></P>
Thinning is a data reduction process that erodes an object until it is one pixel wide, producing a skeleton of the object. It is easier to recognize objects such as letters or silhouettes by looking at their bare bones. <A href="fig18.htm">Figure 18</a>
shows how thinning a rectangle produces a line of pixels.<P>
There are two basic techniques for producing the skeleton of an object:<P>
<UL><li>basic thinning</li>
<li>medial axis transforms</li></UL>
Thinning erodes an object over and over again (without breaking it) until it is one pixel wide. <A href="list3.htm">Listing 4</a>
contains the thinning routine. I used it as part of the <I>special_opening</I> routine to erode objects without breaking them. In that context, I set the <I>once_only</I> parameter of thinning to one, so that it would erode an image only one time. Setting <I>once_only</I> to zero causes thinning to keep eroding until the objects in the image are all one pixel wide.<P>
This basic thinning technique works well, but you cannot recreate the original object from the result of thinning. If you want to do that, you must use the medial axis transform.<P>
The medial axis transform finds the points in an object that form lines down its center, that is, its medial axis. It is easier to understand the medial axis transform if you first understand the Euclidean distance measure (don't you love these big terms that really mean very simple things?). The Euclidean distance measure is the shortest distance from a pixel in an object to the edge of the object. <A href="fig19.htm">Figure 19</a>
shows a square, its Euclidian distance measure (distance to the edge), and its medial axis transform.<P>
The medial axis transform consists of all points in an object that are minimally distant to more than one edge of the object. Every pixel in the bottom of <A href="fig19.htm">Figure 19</a>
was the shortest distance to two edges of the object. The advantage of the medial axis transform is you can recreate the original object from the transform (more homework). <A href="fig20.htm">Figure 20</a>
shows a rectangle (from <A href="fig18.htm">Figure 18</a>)
 and its medial axis transform. <A href="photo12.htm">Photograph 12</a>
shows a block letter A, and going clockwise, the result of exterior outline, medial axis transform, and thinning.<P>
<A href="list5.htm">Listing 6</a>
shows the source code to implement the Euclidean distance measure and the medial axis transform. <I>edm</I> calculates the Euclidean distance measure. It loops through the image and calls <I>distance_8</I> to do most of the work. <I>distance_8</I> has eight sections to calculate eight distances from any value pixel to the nearest zero pixel. <I>distance_8</I> returns the shortest distance it found.<P>
The functions <I>mat</I> and <I>mat_d</I> calculate the medial axis transform in a similar manner. <I>mat</I> loops through the image and calls <I>mat_d</I> to do the work. <I>mat_d</I> calculates the eight distances and records the two shortest distances. If these two are equal, the pixel in question is minimally distant to two edges, is part of the medial axis transform, and causes <I>mat_d</I> to return value.<P>
<h4><FONT COLOR="#000080"><A name="0247_00C8">Integrating Shape Operations into the C Image Processing System<A name="0247_00C8"></FONT></h4></P>
<A href="list7.htm">Listing 7</a>
shows the new additions to the main routine of the C Image Processing System. Case 19 handles the 14 shape operations discussed herein. The <I>show_menu</I> routine underwent a big change from past installments. We now have 19 options, so I used a two column display for them. The final routine, <I>get_shape_options</I>, interacts with the user to obtain all the options needed to use the techniques.<P>
<A href="list8.htm">Listing 8</a>
shows an application program that allows you to apply the shape operations to entire image files. This program created the images shown in the photographs of this article.<P>
<h4><FONT COLOR="#000080"><A name="0247_00C9">Conclusions<A name="0247_00C9"></FONT></h4></P>
This installment in the series discussed shape operations or morphological filters. These techniques help you improve the appearance of segmentation results. They are also useful for other situations. As with all the image processing operators in this series, you must experiment. Try the techniques and tools in different combinations until you find what works for the image or class of images at hand.<P>
<h4>References</FONT></h4></P>
Levine, Martin D. 1985 <I>Vision in Man and Machine.</I> New York, New York: McGraw-Hill.<P>
Myler, Harley R. and Arthur R. Weeks. 1993. <I>Computer Imaging Recipes in C.</I> Englewood Cliffs, New Jersey: Prentice Hall Publishing.<P>
Phillips, Dwayne. February 1993. "Image Processing, Part 9: Histogram-Based Image Segmentation," <I>The C Users Journal.</I> Lawrence, KS: R&amp;D Publications.<P>
Phillips, Dwayne. June 1993. "Image Processing, Part 10: Segmentation Using Edges and Gray Shades," <I>The C Users Journal</I>. Lawrence, KS: R&amp;D Publications.<P>
Russ, John C. 1992. <I>The Image Processing Handbook.</I> Boca Raton, Florida: CRC Press.<P>

<h4><a href="../../../source/1993/aug93/phillips.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
