<HTML><HEAD>
<TITLE>August 1993/Clipping Polygons with Sutherland-Hodgman's Algorithm/Listing 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 3<I> Implementation of the ClipEdge and LinearEdge Classes</I></A></h4>
<pre>/*****************************************************

GENERAL
   Name                   : pgnclip.cpp
   Author                 : Thomas Rvsz

PURPOSE
   This file implements Sutherland-Hodgman's polygon
   clipping algorithm.

DOCUMENTS
   Name                   : ---

DEPENDENCIES
   Compilers dependency   : C++
   Machine dependency     : None
   Environment dependency : None

HISTORY
   930303   1.0      Thomas Rvsz    Created

*****************************************************/

#include &lt;iostream.h&gt;
#include &lt;assert.h&gt;


/******************************
*
*    Simple data types
*
******************************/

enum bool {false, true};                  // boolean

typedef signed long coord;                // coordinate

class point                               // point
{
public:
   point () : x (0), y (0) {}
   point (coord x, coord y) : x (x), y (y) {}
   int operator == (point&amp;);
   int operator != (point&amp;);
   coord x, y;
};

inline point::operator == (point&amp; p)
{
   return (x == p.x &amp;&amp; y == p.y);
}

inline point::operator != (point&amp; p)
{
   return !(*this == p);
}

inline ostream&amp; operator &lt;&lt; (ostream&amp; o, point&amp; p)
{
   return o &lt;&lt; '(' &lt;&lt; p.x &lt;&lt; ',' &lt;&lt; p.y &lt;&lt; ')';
}

/**********************
*
*    Class ClipEdge
*
**********************/

class ClipEdge
{
public:
   ClipEdge () {vertex_received = false; next = 0;}
   ~ClipEdge () {if (next) {delete (next);}}
   void add (ClipEdge  *);
   void vertex (point, point*&amp;);
   void close (point*&amp;);
protected:
   virtual bool visible (point) const = 0;
   virtual point clip (point, point) const = 0;
   void output (point, point*&amp;) const;
private:
   ClipEdge *next;
   bool    vertex_received;
   point   first, previous;
   bool    first_visible, previous_visible;
}

inline voif ClipEdge::add (ClipEdge *edge)
{
   edge-&gt;next = next;
   next = edge;
};

void ClipEdge::vertex (point current, point*&amp; outpoint)
{
   bool current_visible = visible (current);
   
   if (!vertex_received) {
      vertex_received = true;
      first = current;
      first_visible = current_visible;
   }
   else if (previous_visible ^ current_visible) {
      point clipped = clip (previous, current);
      output (clipped, outpoint);
   }
   if (current_visible) {
      output (current, outpoint);
   }
   previous= current;
   previous_visible = current_visible;
}

void ClipEdge::close (point*&amp; outpoint)
{
   if (vertex_received) {
      if (previous_visible ^ first_visible) {
         point clipped = clip (previous, first);
         output (clipped, outpoint);
      }
      if (next) {
         next-&gt;close (outpoint);
      }
      vertex_received = false;
   }
}

void ClipEdge::output (point curent,
                   point*&amp; outpoint) const
{
   if (next) {
      next-&gt;vertex (current, outpoint);
   }
   else {
      *outpoint++ = current;
   }
}


/**************************
*
*    Class LinearEdge
*
**************************/

class LinearEdge : public ClipEdge
{
public:
   LinearEdge (point, point);
protected:
   virtual bool visible (point) const;
   virtual point clip (point, point) const;
   bool isOnLeft (point) const;
   const point start, end;
   coord dx, dy;
private:
  int  sign (double value) const;
   cord round (double value) const;
};

LinearEdge::LinearEdge (point start, point end):
                    start (start, end (end)
{
   dx = end.x - start.x;
   dy = end.y - start y;
}

inline bool LinearEdge::visible (point p) const
{
   return isOnLeft (p);
}

inline int LinearEdge::sign (double value) const
{
   return (value &gt;= 0 ? 1 : -1);
}

inline coord LinearEdge::round (doble value) const
{
   return (coord) (value + sign (value)/2.0);
}

inline bool LinearEdge::isOnLeft (point p) const
{
   return (bool) (dx * (p.y - start.y) -
                dy * (p.x - start.x) &gt;= 0);
}

point LinearEdge::clip (point p1, point p2) const
{
   coord dx1 = p2.x - p1.x;
   coord dy1 = p2.y - p1.y;
   coord denominator = dx*dyl - dy*dxl;
   assert (denominator != 0);
   double t = (doule) (dxl*(start.y - p1.y) -
                    dyl*(start.x - p1.x))/
                    denominator;
   return point (start.x + round (t*dx), start.y + round (t*dy));
}


/****************************
*
*    The test function
*
****************************/

void main ()
{
// Set up the ClipEdge pipeline
   
   point p1 ( 75, 150);
   point p2 (150,  75);
   point p3 (225, 150);
   point p4 (150, 225);
   
   ClipEdge *clip = new LinearEdge (p1, p2);
   clip-&gt;add (new LinearEdge (p2, p3));
   clip-&gt;add (new LinearEdge (p3, p4));
   clip-&gt;add (new LinearEdge (p4, p1));

// Define the input polygon
   
   const int no_of_points = 8;
   
   points indata [no_of_points] = {
      point ( 50,  50),
      point (200,  50),
      point (200, 200),
      point (150, 200),
      point (150, 100),
      point (100, 100),
      point (100, 200),
      point ( 50, 200)
   };

// Allocate memory for the clipped polygon
// (2*#input points + #clip edges)
   
   point *outpoint = new point [2*no_of_points + 4];
   point *base     = outpoint;

// Clip the polygon
   
   for (int i = 0; i &lt; no_of_points; i++) {
      clip-&gt;vertex (indata [i], outpoint);
   }
   clip-&gt;close (outpoint);

// Display the result
   
   while (base &lt; outpoint) {
      cout &lt;&lt; *base++ &lt;&lt; endl;
   }
   cout &lt;&lt; endl;
}

// End of File</pre>

</BODY>
</HTML>
