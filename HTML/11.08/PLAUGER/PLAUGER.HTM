

<HTML>
<HEAD>

<TITLE>August 1993/Standard C</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocaug.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Standard C<A name="0272_00C4"><A name="0272_00C4"></font></h2><P>
<h3 align="center"><A name="0272_0000"><A name="0272_0000">Numerical C Extensions Group</h3><P>
<h3 align="center"><font color="#800000">P.J. Plauger</font></h3><hr><blockquote><P>
<P><i><A name="0272_0000"><A name="0272_0000">P.J. Plauger is senior editor of The C Users Journal. He is convenor of the ISO C standards committee, WG14, and active on the C++ committee, WG21. His latest books are The Standard C Library, published by Prentice-Hall, and ANSI and ISO Standard C (with Jim Brodie), published by Microsoft Press. You can reach him at pj@plauger.com.</i></P><P>
<h4><FONT COLOR="#000080"><A name="0272_00C5">Introduction<A name="0272_00C5"></FONT></h4></P>
I have mentioned the Numerical C Extensions Group (NCEG) on more than one occasion in the past. It began as a series of evening meetings called by Rex Jaeschke at past X3J11 C standards meetings. Rex offered to serve as a clearing house for common extensions to C &#151; features not likely to make it into the rapidly congealing language standard. Over time, it grew as more people saw the obvious benefit in it. Why implement the same sort of extensions several different ways if there was no compelling reason to do so? Better to standardize such things as boring syntactic details, if only on an informal basis. That way, when the C Standard comes up for review in a few years, the good ideas that survive will have a wider basis in prior art. Prior art is much easier to sell than on-the-fly invention as a basis for inclusion in a revised standard.<P>
The "numerical" part of NCEG is a slight misnomer. It is true that many of the extensions the group has considered are of interest to numerical programmers. They always seem to be pushing the state of the art to pull off ever more ambitious calculations with ever more complex computers. But some of the extensions are arguably of general interest. Still, a group has to have a name, and NCEG is arguably more mellifluous than, say, X3J11.<P>
Thus, it was a sad day when NCEG decided to get official. You should know that companies do not idly send representatives to meetings like these. Some bystanders are quick to shout collusion and restraint of trade. Meeting under the auspices of an authorized standards group, and following scrupulously their rules for open dealings, is one way to head off such nonsense. So NCEG in the fullness of time became X3J11.1, the one and only authorized subcommittee of X3J11.<P>
What X3J11.1 is chartered to do is produce a <I>Technical Report.</I> By ANSI rules, this is a document that does <I>not</I> have the force of a standard. It is merely intended to inform, to provide guidance. And that, of course, is entirely in keeping with the original goals set by Rex Jaeschke at his evening meetings, long before he became Chair of X3J11.1.<P>
That Technical Report will represent the contributions of a number of different subcommittees. Three of those subcommittees have recently produced drafts that they consider fairly complete. These are:<P>
<UL><li>TR Part 1: Designated Initializers and Compound Literals</li>
<li>TR Part 2: Aliasing Control via Restricted Pointers</li>
<li>TR Part 3: Floating-Point C Extensions</li></UL>
My purpose in this column is to give you an overview of the first two of those three documents. The floating-point extensions involve considerable detail, so I will deal with them in a separate installment.<P>
I remind you that this stuff may not be Standard C, at least not yet, but it can be a portent of things to come. Some compiler vendors are already supplying the extensions described in these draft reports. You can be sure that more and more companies will follow suit over time.<P>
<h4><FONT COLOR="#000080"><A name="0272_00C6">Compound Literals<A name="0272_00C6"></FONT></h4></P>
More than one eleventh-hour proposal got left out of of the C Standard by X3J11. One of the better ones was put forth, albeit tentatively, by no less than Ken Thompson, the co-developer of UNIX. He reported success in implementing <I>compound literals</I>.<P>
Standard C has lots of flavors of literals for the arithmetic types. You can write integer literals such as <I>10, 0x3ful,</I> and <I>'x'</I>. You can write floating-point literals such as <I>3.2</I> and <I>.32e+1f</I>. Each of these stands for a value of a given type, independent of any object that might hold it. (They're what C programmers like to call <I>rvalues</I>.)<P>
You can even write literals that have associated objects (what C programmers call <I>lvalues</I>). These are <I>string literals</I>, such as "", <I>'Hi!\n"</I>, and "<I>Hello, world".</I> All have type array of <I>char</I> (not <I>const</I> array, sadly). They differ only in their dimensionality and content.<P>
You already know how handy it is to write string literals. No need to declare an object or make up a funny name. Just describe the contents of the string in the one place where you need to refer to it. Let the translator take care of the rest.<P>
A compound literal extends this convenience to <I>all</I> the other data types in your program. You write the general form:<P>
<pre>(<I>T</I>) { ..... }</pre>
wherever you need an lvalue of type T. The translator effectively replaces the expression with secret_name from the declaration:<P>
<pre>static <I>T secret_name</I> = { ..... }</pre>
Need an <I>int</I> with the value 3 in it, for a function <I>f</I> that expects an argument of type pointer to <I>int</I>? Then you can write:<P>
<pre>f(&amp;(int){3})</pre>
to get the function call you neeed. (Yes, the function can even scribble on it, for good or for ill.)<P>
Or maybe you've declared type <I>complex</I> to be the usual form:<P>
<pre>typedef struct {
   double re, im;
   } complex;</pre>
Then you can write the pure imaginary <I>i</I> as the compound literal <I>(complex)</I> {<I>0, 1</I>}.<P>
For declaring arrays, you can even indulge the common practice of letting the brace-enclosed initializer determine the actual size of the array, as in:<P>
<pre>double *pten2n = (double []) {1,
10,
   100, 1e4, 1e8, 1e16, 1e32,
#ifdef IEEE754
   1e64, 1e128, 1e256,
#undef
};</pre>
No need to make the code even uglier by putting the array size inside still more <I>#ifdef</I> logic.<P>
Obviously, most of us have survived to date without compound literals, but they sure can come in handy if you've got 'em. Here is an extension to C that is obviously of general interest.<P>
<h4><FONT COLOR="#000080"><A name="0272_00C7">Designated Initializers<A name="0272_00C7"></FONT></h4></P>
A related extension solves still other problems with writing initializers. The only way you can initialize a union, for example, is with a value suitable for its first member. The only way to initialize the thirteenth member of a struct, or the thirteenth element of an array, is to provide initializers for all the earlier stuff as place holders. Wouldn't it be nice if you could do more, and make your code more readable in the bargain?<P>
Thus the call for <I>designated initializers.</I> These are members of an initializer list that name the thing they intend to initialize. Here are some examples:<P>
<pre>complex imag = {.im = 1};
union {
   float fl; int in;
   } int_one = {.in = 1};
char line[80] = {
   '&lt;', '&lt;', [78] = '&gt;', '&gt;'}</pre>
The leading dot and member name designates a member to initialize in a struct or union. The leading integer value in brackets designates an element to initialize in an array. As with enumeration constants, you can mix positional and designated initializers. The initializer for <I>line,</I> for example, provides nonzero values for elements 0, 1, 78, and 79.<P>
An array element designator can be an arbitrary constant expression, not just an integer value. Hence, you can even use enumeration constants to make more readable tables, as in:<P>
<pre>enum {red = 1, green = 2, blue = 4};
const char *names[] = {
   [red] = "red",
   [green] = "green",
   [blue] = "blue",
   [red+green] = "yellow",
   [blue+green] = "cyan",
   [red+blue] = "magenta",
   [0] = "black",
   [red+blue+green] = "white"};</pre>
So you can use designated initializers when you don't know (or care about) the actual position within an aggregate object. (Type <I>div_t</I>, declared in <I>&lt;stdlib.h&gt;</I>, doesn't guarantee the ordering of its members <I>quot</I> and <I>rem</I>, for instance. Standard C offers no portable way to initialize such a type to other than to all zeros.) You can use them to skip long, uninteresting stretches where zero initializers will serve quite adequately. And, of course, you can even use them in compound literals, as in:<P>
<pre>   return (complex) {.im = 1};</pre>
(not that this particular example is very compelling).<P>
The one problem this set of extensions does not address is writing repeated (nonzero) initializers. What if you wanted <I>line,</I> declared above, to be filled with spaces as well as having angle brackets on both ends? You're back to writing long string literals and counting characters, or writing lots of comma-separated place holders.<P>
Years ago, I added an extension to the Whitesmiths compilers that proved popular. It also used a constant expression in leading square brackets, but without the following equal sign. The constant expression served as a repetition count, as in:<P>
<pre>char line[80] = {
    '&lt;', '&lt;', [76] ' ', '&gt;', '&gt;'}</pre>
Please note that this extension is <I>not</I> proposed by X3Jll.1. It happens to be compatible with it, strictly speaking at least. (I suspect the double use of square brackets would lead to some confusion.) But in my experience, it is of comparable value to the extensions actually proposed by X3Jll.1.<P>
With or without repetition counts, compound literals and designated initializers certainly add to the expressiveness of Standard C. Even better, the complexity they add to the language and to translators is fairly localized. (They do cause problems for single-pass translators, to be sure, but not insurmountable ones.) On balance, I rather like them.<P>
<h4><FONT COLOR="#000080"><A name="0272_00C8">The Aliasing Problem<A name="0272_00C8"></FONT></h4></P>
One of the darker moments in the development of the C Standard occurred near the end. It began, simply enough, with a request from Tom MacDonald of Cray Research. He wanted some way to assist C compilers in discovering code that can be "parallelized," or converted to an equivalent code sequence that executes many operations in parallel on a computer that supports such speedups. (It is far from coincidence that Cray is a leading supplier of such computers.)<P>
This is a difficult problem which we foolishly endeavored to solve in just one or two meetings. The result was the eleventh-hour addition of a new type qualifier to Standard C. The keyword <I>noalias,</I> with accompanying semantics, went into the draft at one meeting and got yanked out at the next. Dennis Ritchie, the developer of C, attended that second meeting to ensure that <I>noalias</I> got yanked. It was the only meeting of X3J11 he saw fit to attend. That should give you a feeling of the magnitude of our mistake.<P>
But the underlying problem did not go away with the keyword. Many numerical programmers stick with FORTRAN for one simple, practical reason. Compilers can optimize FORTRAN programs for parallel optimization much better than can C compilers of comparable sophistication. Any number of serious numerical applications just plain run faster when written in FORTRAN for highly parallel computers.<P>
MacDonald and others remain determined to lure more numerical programmers away from FORTRAN and into C. With decreasing hardware costs, parallelism is becoming more commonplace in new computer architectures. Thus, helping C compilers parallelize code is a topic of growing concern to the entire community.<P>
Here is the archetypical problem to be solved:<P>
<pre>void f(float a[], float b[], float c[], size_t n)
   { /* form vector sum a = b + c */
   size_t i;
   
   for (i = 0; i &lt; n; ++i)
      a[i] = b[i] + c[i];
   }</pre>
I have intentionally cast this in a form that parallels FORTRAN closely, but it should still compile into fairly efficient C.<P>
FORTRAN, as a call-by-reference language, also passes pointers to the various arguments (even <I>n</I>, not that it matters here). But that language imposes a special constraint on function or procedure arguments &#151; they are not supposed to overlap. Put another way, the compiler is free to rearrange the actual loads and stores for arguments on the assumption that no harm will ensue. If your arguments really overlap and you don't get the answer you expect, that's your tough luck.<P>
Thus, FORTRAN can take advantage of things like vector arithmetic units in parallel computers. The generated code might pick up a whole bunch of <I>b[i]</I>s, add in the corresponding <I>c[i]</I>s, then store them all in the proper <I>a[i]</I>s. That's fine, <I>given that none of the values stored are also read during the vector calculation</I>. Overlap causes all sorts of interesting possibilities. Depending on how big the chunks are, and in what order they're accessed, you can end up with all sorts of different results. You can see why FORTRAN is happy to ban such overlap.<P>
We C programmers have it much worse. C imposes no restrictions on the overlap of objects designated by pointers, whether or not the pointers are arguments. The translator cannot, in general, determine whether *<I>p</I> and *<I>q</I>, or even *<I>p</I> and <I>x</I>, are <I>aliases</I> for the same region of storage. So long as all the lvalues have essentially the same type, aliasing is always a possibility. (I won't discuss what I mean by "essentially" here. That's another long story.)<P>
Even worse, in this context at least, Standard C makes some pretty strong promises about sequencing of code execution. Each of the assignments in that <I>for</I> loop is bracketed by <I>sequence points</I>. Any earlier stores must have occurred before the current assignment expression starts being evaluated. The store called for by the current assignment must occur before the next expression gets evaluated. Thus, you can habitually write code such as:<P>
<pre>for (c[0] = 'x', i = 1; i &lt; n; ++i)
     c[i] = c[i - 1];</pre>
and know that it will propagate the value <I>'x'</I> throughout the array.<P>
<h4><FONT COLOR="#000080"><A name="0272_00C9">Aliasing Control<A name="0272_00C9"></FONT></h4></P>
So here is the classic dilemma of optimization. You really want your C translator to aggressively rearrange your program to speed it up a lot, <I>except when you don't.</I> Put another way, you only want the translator to move stores past sequence points when the resulting code behaves <I>as if</I> the sequence points were properly honored. That's a tall order for a translator that has to deal with arbitrary aliasing through pointers.<P>
There's precedent for helping out C translators. The storage class <I>register</I>, for example, appeared early in C purely as an optimization crutch. Its only real semantics is that you can't take the address of a <I>register</I> object. But that helps the translator squirrel such objects in special places, such as fast machine registers. If you've guessed right, and if the translator can take advantage of your hint, your <I>register</I> declaration will make your code smaller and faster.<P>
Modern C translators generally do a better job of using registers than you ever will. Often, your suggestions are simply ignored. But global flow analysis is still not up to solving the aliasing problem. C translators can match FORTRAN optimizations only with a bit of help.<P>
The help proposed by X3Jll.1 takes the form of a new keyword called <I>restrict.</I> You use it as a type qualifier (like <I>const </I>or<I> volatile</I><I>, but for pointer lvalues only.</I> Such a "restricted pointer" promises exclusive access to the object it currently designates. For example, our archetypical vector sum can now be written:<P>
<pre>void f(float * restrict a, float b[], float c[],
   size_t n)
   { /* form vector sum a = b + c */
   size_t i;

   for (i = 0; i &lt; n; ++i)
      a[i] = b[i] + c[i];
   }</pre>
The translator is promised that the object dynamically designated by <I>a</I> (in this case an array of <I>n</I> elements of type <I>float</I>) overlaps no other objects in the scope of the pointer <I>a</I>. Thus it is safe to push around stores into this array rather aggressively within the body of the function. That's just the kind of promise a smart vectorizer needs to do its thing.<P>
Note that there is no harm in having the objects designated by <I>b</I> and <I>c</I> overlap, since both are accessed but never modified in this function. You could also declare these arguments as restricted pointers, but a smart translator would neither benefit nor suffer from the added information.<P>
Restricted pointers can occur outside function arguments. They make sense as static objects, in which case they strongly resemble C+ + <I>references</I>. (But be warned, they are not quite the same thing.) They even make sense as members of a structure or union.<P>
In all cases, however, restricted pointers represent a fairly subtle compact between a sophisticated programmer and an equally sophisticated C translator. Even if you have access to a translator with this extension, I recommend that you resist the urge to use it. It's the kind of decoration that can make a critical piece of code run substantially faster, but at a cost. The code will be less portable and harder to understand. In other words, kids, don't try this at home.<P>
From what I understand of restricted pointers, they're somewhat better thought out than our abortive <I>noalias</I> proposal. That's mostly because they're designed to closely model the proven machinery found in FORTRAN optimizers. By the same token, restricted pointers are rather ad hoc. They solve a specific problem in a specific way. We tried to generalize the issue with <I>noalias</I> and succeeded in some important ways. But we failed in the most important way of all &#151; making the machinery clear and believable. What the heck.<P>
</BLOCKQUOTE>
</BODY>
</HTML>
