


<HTML>
<HEAD>

<TITLE>February 1992/Wildcard Subdirectory Searches</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocfeb.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">Wildcard Subdirectory Searches<A name="0078_0024"><A name="0078_0024"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0078_0000"><A name="0078_0000">Toby Popenfoose</font></h3><hr><blockquote><P>
<P><i><A name="0078_0000"><A name="0078_0000">Toby Popenfoose is a system analyst developing image processing applications for a large commercial printer. Prior to that, he was an Air Force Instructor Pilot. Toby has a B.S.E.E. from Purdue University and a M.S.C.S from Midwestern State University. You may contact him at 5720 East 200 North, Warsaw, IN 46580.</i></P><P>
I have often been asked "How many C source modules do we have in our Image Processing system?", or "Is there an easy way to delete all of the *.SAV files in all 40 subdirectories?". These two questions motivated me to develop a general-purpose wildcard subdirectory search utility function.<P>
I had several design goals. First, I wanted to make the function general enough to put in my utility library. Second, I wanted to maintain wildcard search capability. I wanted the function to perform a subdirectory search based on a switch. In addition, I wanted to minimize machine dependencies so I could port it to my AMIGA workstation. Last, I wanted the function to provide a totals switch.<P>
<h4><FONT COLOR="#000080"><A name="0078_0025">Design<A name="0078_0025"></FONT></h4></P>
Looking at the available functions in Microsoft C v5.1, I decided to use <I>_dos_findfirst</I> and <I>_dos_findnext</I> functions, because they support wildcard searches. They also fill in a file info block (<I>find_t structure</I>) with the matching file's name. The drawback with this choice is that these functions are machine dependent. Two other non-portable machine dependent functions that I used are <I>_splitpath()</I> and <I>_makepath()</I>. Note, in <A href="list1.htm">Listing 1</a>
the four machine dependent functions that I have used begin with an underscore. The ANSI standard reserves underscores for secret names with external linkage <a href="#ref1">[1]</a>. Now these really are not secret names or they would not have been documented in <a href="#ref2">[2]</a>. Looking at my other target platform, the AMIGA, I had two choices. I could use the <I>AMIGA_DOS</I> built-in functions <I>Examine</I> and <I>ExNext</I> which would require a directory <I>Lock</I> call at each subdirectory level (since the AMIGA is a true multitasking workstation) or I could use the well-respected public domain resident library <I>ARP.LIBRARY</I> (see <a href="sidebar1.htm">sidebar</a>, <a href="#ref3">[3]</a>, <a href="#ref4">[4]</a>, <a href="#ref5">[5]</a>, <a href="#ref6">[6]</a> and <a href="#ref7">[7]</a>) with <I>FindFirst</I> and <I>FindNext</I>. I chose the latter because it would also give me wildcard capability, perform vertical subdirectory searches, and it more closely mimicked the Microsoft MS-DOS <I>_dos_findfirst</I> and <I>_dos_findnext</I>.<P>
I designed my utility using a recursive <I>main</I> that returns an <I>int</I> value to itself. I did this to prove that a <I>main</I> can be recursive because it is a function and behaves as any other function would <a href="#ref8">[8]</a>. The pseudo code follows.<P>
<pre>if (subdirectory switch)
   {
   push all subdirectory names onto a FIFO;
   while(subdirectories left)
      {
      get subdirectory off FIFO;
      recursively search that subdirectory;
      }
   }

find wildcard matches within this directory;
call user function with path argument</pre>
My first pseudo code was with a stack for the subdirectory names, but I have actually implemented a FIFO (first in first out) buffer. If the subdirectories have been sorted is some order, that order will be maintained as it recursively searches each subdirectory.<P>
For the switches, I elected to use <I>argv[2]</I> with <I>/S/T</I><I>. </I><I>/S</I> is for subdirectory searches to be included and <I>/T</I> is for totals to be printed. For output, my main routine would call an external function <I>subfunc(char *path)</I> with a path pointer as an argument. I decided a maximum of 127 subdirectories per directory would be the upper limit of the stack size.<P>
With some trial and error, I have molded the code in <A href="list1.htm">Listing 1</a>.
 After the first attempt at coding this, I realized that recursive functions must use the heap <I>(malloc)</I> and not the stack (auto variables) for array storage. A static array will not work for this application because a new array is needed at each recursive function call entry. For example, in <A href="list1.htm">Listing 1</a>
after the <I>main</I> I have declared <I>char </I><I>*path</I> and then <I>malloc</I>ed out space with <I>path</I><I> = </I><I>malloc(_MAX_PATH)</I>; this uses the heap for my path array data storage. My first attempt used the stack with a declaration such as <I>char</I><I> </I><I>path[_MAX_PATH]</I>.<P>
The first line of <A href="list1.htm">Listing 1</a>
declares <I>main</I> to return an <I>int</I>. You may be surprised to see <I>main()</I> return something other than <I>void</I>. This <I>int</I> returned keeps track of the total as it transverses the subdirectories.<P>
The code fragment shown in <A href="list2.htm">Listing 2</a>
deserves a more detailed explanation. Both <I>_dos_findfirst</I> and <I>_dos_findnext</I> return a <I>0</I> if a match is found. My <I>if</I> statements use the logical negation of the return value. If there is a match, it will evaluate to <I>TRUE</I>. The <I>_dos_findfirst</I> needs the <I>_A_SUBDIR</I> flag argument to include subdiretory names in its search. If a match is found the file info block (<I>fib</I>) is filed in. This structure is defined in <I>DOS.H</I><I>.</I> Next, I check to make sure the subdirectory is not one of the two special MS-DOS subdirectories . or .. and that the matched name is in fact a subdirectory. To see if it is a subdirectory name, I look at the file info block attribute and test it for being a subdirectory. The bitwise <I>&amp;</I> has a higher precedence then the logical <I>&amp;&amp;</I> so it requires no parentheses. If I do have a valid subdirectory, its name is pushed into the FIFO buffer. This continues until I have no more directory entries or until I have no more room in my FIFO subdirectory buffer. Next, I terminate the FIFO with a NULL and reset my FIFO pointer to the start of the FIFO.<P>
Now while there is more subdirectories, I pop one out and recursively search it with the<P>
<pre>total += main(argc, argv);</pre>
call.<P>
<h4><FONT COLOR="#000080"><A name="0078_0026">Alternative Implementations<A name="0078_0026"></FONT></h4></P>
I have also implemented this recursive <I>main</I> as a recursive function <I>int recurs()</I>. It takes as arguments, a character string for the wildcarded file names to match and two Boolean flags (see <A href="list6.htm">Listing 6</a>)
. These flags are for subdirectories to be included in the search and/or totals to be printed out, which allows the command line argument logic to be contained in a void <I>main()</I>. A more elegant approach to command line arguments would be a variation of <a href="#ref9">[9]</a>.<P>
I have developed and tested <A href="list1.htm">Listing 1</a>,
 <A href="list3.htm">Listing 3</a>,
 <A href="list4.htm">Listing 4</a>,
 and <A href="list6.htm">Listing 6</a>
on a PC clone with an INTEL 386 CPU and IBM-DOS v3.30 using Microsoft C v5.1. <A href="list3.htm">Listing 3</a>,
 <A href="list4.htm">Listing 4</a>,
 and <A href="list5.htm">Listing 5</a>
have developed and tested on an AMIGA 1000 with a Motorola 68000 and AMIGA-DOS v1.3 using MANX AZTEC C v5.0.<P>
The only trouble porting was due to non-ANSI functions that were machine/operating system/compiler dependent.<P>
Here are a few examples of how I have incorporated this wildcard subdirectory search: a carriage return, line feed corrector for porting ASCII source to and from IBM-DOS. I have also used <A href="list1.htm">Listing 1</a>
in a zaptime utility to zero the time stamp on existing files. I have modifed <A href="list1.htm">Listing 1</a>
to remove directories<B> </B>that are empty. I have used <A href="list6.htm">Listing 6</a>
to<B> </B>modify the SGREP source supplied<B> </B>from <a href="#ref10">[10]</a> along with adding the feature<B> </B>of the output being to a file with a ~<B> </B>prepended to the extension. This<B> </B>allowed me to convert over 700 C source<B> </B>files in over 33 subdirectories in less<B> </B>than 15 minutes. From the following<B> </B>two line matches<P>
<pre>#include &lt;proto.h&gt;
#include "proto.h"</pre>
to<P>
<pre>#include &lt;libproto.h&gt;
#include "locproto.h"</pre>
which was much faster than the time it<B> </B>took to put the prototype <I>includes</I> in<B> </B>the first time.<P>
<h4><FONT COLOR="#000080"><A name="0078_0027">Bibliography<A name="0078_0027"></FONT></h4></P>
<a name="ref1">[1]</a>     Plauger, P. J. "Library Ground<B> </B>Rules". <I>The C Users Journal</I>, August<B> </B>1990.<P>
<a name="ref2">[2]</a>     Microsoft C 5.1. Run-Time<B> </B>Library Reference, 1987.<P>
<a name="ref3">[3]</a>     Manx Software Systems. Aztec C<B> </B>Reference Manual Version 5.0, 1989.<P>
<a name="ref4">[4]</a>     Commodore Business Machines.<B> </B>AMIGA ROM Kernal Reference<B> </B>Manual: Exec, Addison-Wesley, 1986.<P>
<a name="ref5">[5]</a>     Berry, John Thomas. <I>Inside the</I><I><B> </I></B><I>AMIGA with C</I>, Howard W. Sams, 1988.<P>
<a name="ref6">[6]</a>     Peck, Robert A.<B> </B><I>PROGRAMMER's Guide To The</I><I><B> </I></B><I>AMIGA</I>, SYBEX, 1987.<P>
<a name="ref7">[7]</a>     Anderson, Rhett and Randy<B> </B>Thompson. "MAPPING the AMIGA,"<B> </B><I>Compute!</I>, 1990.<P>
<a name="ref8">[8]</a>     Kernighan, Brian W. and Dennis<B> </B>M. Ritchie. <I>The C Programming</I><I><B> </I></B><I>Language</I>, Prentice Hall, 1978.<P>
<a name="ref9">[9]</a>     Colner, Don. "An<B> </B>Object-Oriented Approach to Command Line<B> </B>Options." <I>The C Users Journal</I>, July 1990.<P>
<a name="ref10">[10]</a>     C USERS GROUP disk #236,<B> </B>Highly Portable Utilities (CUG Starter<B> </B>Disk).<P>

<h4><a href="tab1.htm">Table 1</a></h4>


<h4><a href="../../../source/1992/feb92/popenfoo.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
