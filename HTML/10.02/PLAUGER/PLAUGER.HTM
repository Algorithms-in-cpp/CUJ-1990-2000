


<HTML>
<HEAD>

<TITLE>February 1992/Standard C</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocfeb.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Standard C<A name="007E_0028"><A name="007E_0028"></font></h2><P>
<h3 align="center"><A name="007E_0000"><A name="007E_0000">Primitives For &lt;stdio.h&gt;</h3><P>
<h3 align="center"><font color="#800000">P.J. Plauger</font></h3><hr><blockquote><P>
<P><i><A name="007E_0000"><A name="007E_0000">P.J. Plauger is senior editor of The C Users Journal. He is secretary of the ANSI C standardMs committee, X3J11, and convenor of the ISO C standards committee, WG14. His latest book is The Standard C Library, published by Prentice-Hall. You can reach him at <I>PJP@wsa.oz; or uunet!munnari!wsa.oz!pjp</I>.</i></P><P>
<h4><FONT COLOR="#000080"><A name="007E_0029">Introduction<A name="007E_0029"></FONT></h4></P>
Last month, I began discussing how to implement the functions declared in the header <I>&lt;stdio.h&gt;</I>. I showed my version of that header file and described the <I>FILE</I> data structure. I also walked through the code needed to open and close files. (See "Implementing <I>&lt;stdio.h&gt;</I>,<I>" Standard C, CUJ</I> January, 1992.)<P>
This month, I present the low-level "primitive" functions in <I>&lt;stdio.h&gt;</I> that must be tailored to each operating system. A primitive is a function that performs some essential operation. No other combination of library functions can substitute. You can keep most of the library portable if you isolate system dependencies in a minimum set of primitives.<P>
As I mentioned last month, this implementation has nine such functions Each primitive function must perform a standardized operation for the Standard C library. Each must also be reasonably easy to tailor for the divergent needs of different operating systems.<P>
<h4><FONT COLOR="#000080"><A name="007E_002A">The Primitives<A name="007E_002A"></FONT></h4></P>
Three of the primitives are also standard functions:<P>
<UL><li><I>     remove</I> &#151; Remove a named file.</li>
<li><I>     rename</I> &#151; Change the name of a file.</li>
<li><I>     tmpnam</I> &#151; Construct a reasonable name for a temporary file.</li></UL>
Each of these functions is small and very dependent on the peculiarities of the underlying operating system. It is not worth writing any of them in terms of lower-level primitives. You can often find versions in an existing C library that do the job nicely.<P>
Three of the primitives are macros defined in the internal header <I>"yfuns.h"</I>. It defines macros and declares functions needed only within the Standard C library to interface to the outside world. Only certain functions written for this implementation need include <I>"yfuns.h"</I>. (The internal header <I>&lt;yvals.h&gt;</I>, by contrast, must be included in several standard headers.)<P>
The three macros look like internal functions with the declarations<P>
<pre>int _Fclose(FILE *str);
int _Fread(FILeE *str, char *buf, int size);
int _Fwrite(FILE *str, const char *buf, int size);</pre>
Their semantics are:<P>
<UL><li>     <I>_Fclose</I> &#151; Close the file associated with <I>str</I>. Return zero if successful.</li>
<li>     <I>_Fread</I> &#151; Read up to <I>size</I> characters into the buffer starting at <I>buf</I> from the file associated with <I>str</I>. Return the number successfully read, or zero if at end-of-file, or a negative error code if a read error occurs.</li>
<li>     <I>_Fwrite</I> &#151; Write <I>size</I> characters from the buffer starting at <I>buf</I> to the file associated with <I>str</I>. Return the number of characters actually written or a negative error code if a write error occurs.</li></UL>
Many operating systems support functions that have declarations very similar to these. You can often find existing functions that the macro expansions can call directly.<P>
The last three primitives are internal functions. One function is declared in <I>"xstdio.h"</I>. Two are used in masking macros, and hence are declared in <I>&lt;stdio.h&gt;</I>. (See last month's presentation for a listing of this standard header file.) Their declarations are:<P>
<pre>short _Fopen(const char *name, unsigned short mode, const char *mods);
long _Fgpos(FILE *str, fpos_t *fpos);
int _Fspos(FILE *str, const fpos_t *fpos, long offset, int way);</pre>
Their semantics are:<P>
<UL><li><I>     _Fopen</I> &#151; Open the file with name <I>name</I> and mode <I>mode</I> (possibly using the string <I>mods</I> as well). Return a non-negative handle if successful.</li>
<li><I>     _Fgpos</I> &#151; If <I>fpos</I> is not a null pointer, store the file-position indicator at <I>fpos</I> and return zero. Otherwise, encode the file-position indicator as a <I>long</I> and return its value. Return the value <I>EOF</I> if not successful.</li>
<li><I>     _Fspos</I> &#151; If <I>way</I> has the value <I>SEEK_SET</I>, set the file-position indicator from either <I>fpos</I> or <I>offset</I>. (If <I>fpos</I> is not a null pointer, use the value stored in <I>fpos</I>. Otherwise, decode <I>offset</I> to determine the file-position indicator.) If <I>way</I> has the value <I>SEEK_CUR</I>, add <I>offset</I> to the file-position indicator. Otherwise, <I>way</I> must have the value <I>SEEK_END</I>. Set the file-position indicator to just beyond the last character in the file, plus <I>offset</I>. If successful, return zero and clear <I>_MEOF, _MREAD</I>, and <I>_MWRITE</I>. Otherwise, return the value <I>EOF</I>.</li></UL>
You are less likely to find existing functions that you can commandeer to implement part or all of these three functions. Each involves data representations that are probably peculiar to this implementation.<P>
<h4><FONT COLOR="#000080"><A name="007E_002B">File Positioning Functions<A name="007E_002B"></FONT></h4></P>
Old C hands are probably comfortable with most of these primitives. They bear a strong resemblance to a fistful of functions <I>not</I> included in the C Standard. These have names such as <I>close, open, read</I>, and <I>write</I>. They are based on system calls in the UNIX operating system. Early ports of C to other operating systems retained this heritage as much as possible. The old primitives were omitted from the C Standard for good reasons. Nevertheless, many of them still provide a good foundation for the rest of the library.<P>
The primitives you are likely to find strangest are <I>_Fgpos</I> and <I>_Fspos</I>. They bear only a loose resemblance to their ancestor, called <I>lseek</I>. Most of the difference is designed to accommodate two new file-positioning functions, <I>fgetpos</I> and <I>fsetpos</I>. These have no exact analog in UNIX.<P>
To show you why these new primitives take the form they do, I simply show how the library uses them. The function <I>fseek</I>, for example, is simply<P>
<pre>int fseek(FILE *str, fpos_t *p)
   {
   return (_Fspos(str, NULL, off, smode));
   }</pre>
Its brother <I>ftell</I> is<P>
<pre>long ftell(FILE *str)
   {
   return (_Fgpos(str, NULL));
   }</pre>
And <I>rewind</I> is<P>
<pre>void rewind(FILE *str)
   {
   _Fspos(str, NULL, OL, SEEK_SET);
   str-&gt;_Mode &amp;= ~_MERR;
   }</pre>
Similarly, the new function <I>fgetpos</I> is simply<P>
<pre>int fgetpos(FILE *str, fpos_t *p)
   {
   return (_Fgpos(str, p));
   }</pre>
And <I>fsetpos</I> is<P>
<pre>int fsetpos(FILE *str, const fpos_t *p)
   {
   return (_Fspos(str, p, OL, SEEK_SET));
   }</pre>
The results speak for themselves. These two primitives make the five file-positioning functions trivial.<P>
<h4><FONT COLOR="#000080"><A name="007E_002C">UNIX Primitives<A name="007E_002C"></FONT></h4></P>
By implementing these interface primitives, you can use this library in conjunction with any reasonable operating systems. As I mentioned last month, I have written sets of primitives for several popular operating systems. For completeness, I show here primitives for just one environment. Please remember, however, that these represent but one of many possibilities.<P>
For simplicity, I <I>sketch</I> here primitives that interface to many versions of the UNIX operating system. That is often the easiest system to use as a host for the Standard C library. The C language has moved to many other environments. Still, as I indicated above, much of the library design was shaped by the needs and capabilities of UNIX. The files I show are only sketches because they often can be augmented to advantage.<P>
In all cases, I assume the existence of C-callable functions that perform UNIX system calls without violating the name-space restrictions of Standard C. I take the conventional UNIX name, make the first letter uppercase and prepend an underscore. Thus, <I>unlink</I> becomes <I>_Unlink</I>. You may have to write these functions in assembly language if your UNIX system supplies no adequate substitutes.<P>
For example, <A href="list1.htm">Listing 1</a>
shows the file <I>remove.c</I> that defines the function <I>remove</I>. This version simply invokes the UNIX system call <I>_Unlink</I>. A more careful version would verify that a program with super-user permissions is not doing something rash.<P>
<A href="list2.htm">Listing 2</a>
shows the file <I>rename, c</I>. It defines a simple version of <I>rename</I> that simply manipulates links to the file. That typically works only if both the new and old file names are within the same filesystem (on the same logical disk partition). A more agressive version might choose to copy a file when the <I>link</I> system service fails.<P>
<A href="list3.htm">Listing 3</a>
shows the file <I>tmpnam.c</I>. It defines a simple version of <I>tmpnam</I> that concocts a temporary file name in the directory <I>/tmp</I>, the customary place for parking temporary files. It encodes the current process-id to make a family of names that should be unique to each thread of control.<P>
<A href="list4.htm">Listing 4</a>
shows the file <I>xfopen.c</I> that defines the function <I>_Fopen</I>. It maps the codes I chose for the mode indicators to the codes used by the UNIX system service that opens a file. A proper version of this program should not include all these magic numbers. Rather, it should include the appropriate header that UNIX provides to define the relevant parameters.<P>
UNIX makes no distinction between binary and text files. Other operating systems may have to worry about such distinctions at the time the program opens a file. Similarly, UNIX has no use for any additional mode information. (<I>_Fopen</I> could insist that the mode argument be an empty string here. This version is not so particular.)<P>
<A href="list5.htm">Listing 5</a>
shows the file <I>xfgpos.c</I> that defines the function <I>_Fgpos</I>. It asks the system to deliver the file-position indicator for the file, then corrects for any data buffered on behalf of the stream. A file-position indicator under UNIX can be represented in a <I>long</I>. Hence, type <I>fpos_t</I>, defined in <I>&lt;stdio.h&gt;</I>, is a structure that contains only one <I>long</I> member. (I could have defined <I>fpos_t</I> as type <I>long</I> directly, but I wanted to keep the type as restrictive as possible.) In this case, the functions <I>fgetpos</I> and <I>fsetpos</I> offer no advantage over the older file-positioning functions. The difference can be important for ther systems, however.<P>
<I>_Fgpos</I> is simpler under UNIX in another way. No mapping occurs between the internal and external forms of text streams. Hence, the correction for characters in internal buffers is simple. Consider, by comparison, a system that maps text streams. Say it terminates each text line with a carriage return plus line feed instead of just a line feed. That means that <I>_Fread</I> must discard certain carriage returns and <I>_Fwrite</I> must insert them. It also means that <I>_Fgpos</I> must correct for any alterations when it corrects the file-position indicator. The problem is manageable, but it leads to messy logic that I choose not to show at this point.<P>
<A href="list6.htm">Listing 6</a>
shows the file <I>xfspos.c</I> that defines the function _<I>Fspos</I>. It too benefits from the simple UNIX I/O model in the same ways as <I>_Fgpos</I>. Output causes no problems, since the function flushes any unwritten characters before it alters the file-position indicator.<P>
The remaining three primitives are macros. All expand to calls on functions that perform UNIX system services directly. The UNIX version of <I>"yfuns.h"</I> contains the lines:<P>
<pre>#define _Fclose(str) \      _Close((str)-&gt;_Handle)
#define _Fread(str, buf, cnt) \
   _Read((str)-&gt;_Handle, buf, cnt)
#define _Fwrite(str, buf, cnt) \
   _Write((str)-&gt;_Handle, buf, cnt)
int _Close(int);
int _Read(int, unsigned char *, int);
int _Write(int, const unsigned char *, int);</pre>
<h4><FONT COLOR="#000080"><A name="007E_002D">Summary<A name="007E_002D"></FONT></h4></P>
That's the underpinnings of this implementation of the header <I>&lt;stdio.h&gt;</I>. I can now go on to show you how to perform various unformatted reads and writes using this machinery. And as a grand finale, you can see at least some of the code needed to perform formatted I/O. The story continues.<P>
<I>This article is excerpted in part from P.J. Plauger,</I> The Standard C Library<I>, (Englewood Cliffs, N.J.: Prentice-Hall, 1992)</I>.<P>

<h4><a href="../../../source/1992/feb92/plauger.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
