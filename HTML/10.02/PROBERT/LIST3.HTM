<HTML><HEAD>
<TITLE>February 1992/Nearest Neighbor Algorithm For Color Matching/Listing 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 3</A></h4>
<pre>/*begin************************************************
*   Program   : closest
*   Descript. : Returns the number of the closest color
*               from the palette, given the desired red
*               green, and blue. Find the closest point
*               by using the red index arrey. Look at
*               points on both sides of the closest
*               point. While searching, if a point is
*               closer then it is the shortest distance
*               Once you are examining points that are
*               farther away in just the one dimension
*               (red) then you are done.
*end**************************************************/

int closest( int red, int green, int blue )
{
long least;
long dif;
long sum;
int index;
int left;
int right;

index = redindex[ red ];
least = dist( red, green, blue, index );
left = index;
right = index;

while( ( left &gt;= 0 ) || (right &lt; PAL_LEN ) )
   {
   if ( -left &gt;= 0 )
      {
      /* if red dist. alone is greater, then quit */
      dif = red - pals[ left ].red;
      if ( ( dif * dif ) &gt; least )
         left = -1;
      else
         {
         sum = dist( red, green, blue, left );
         if ( sum &lt; least )
            {
            least = sum;
            index = left;
            }
         }
      }
   if ( ++right &lt; PAL_LEN )
      {
      /* if red dist. alone is greater, then quit */
      dif = red - pals[ right ].red;
      if ( ( dif * dif ) &gt; least )
         right = PAL_LEN;
      else
         {
         sum = dist( red, green, blue, right );
         if ( sum &lt; least )
            {
            least = sum;
            index = right;
            }
         }
      }
   }
return( pals[ index ].num );
}


/*begin*************************************************
*  Program   : dist
*  Descript. : Color distance (squared)
*end**************************************************/

long dist( int red, int green, int blue, int num )
{
long dif;
long sum;
pal *palt;

palt = &amp;pals[ num ];
dif = red - palt-&gt;red;
sum = dif * dif;
dif = green - palt-&gt;grn;
sum += dif * dif;
dif = blue - palt-&gt;blu;
sum += dif * dif;
return( sum );
}
/* End of File */</pre>

</BODY>
</HTML>
