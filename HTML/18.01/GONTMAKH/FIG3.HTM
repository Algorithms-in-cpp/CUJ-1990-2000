<HTML><HEAD>
<TITLE>January 2000/Easy Dynamic Loading in C++/Figure 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Figure 3: The factory class</A></h4>
<pre>
template &lt;class KEY, class BASE&gt;
class factory {
   public:
      typedef creator_base&lt;BASE&gt; creator;
      typedef creator_base&lt;BASE&gt;::parameters parameters;
      typedef std::set&lt;KEY&gt; keys;
      typedef std::map&lt;std::string, keys&gt; libraries;
      typedef std::map&lt;KEY, creator*&gt; creators;
  public:
      static BASE* create(const KEY&amp; key) {
         return get_instance().internal_create(key);
      }
#ifdef REGIME_FACTORY_PARAMS
      static BASE* create(const KEY&amp; key, const parameters&amp; p) {
         return get_instance().internal_create(key, p);
      }
#endif

      static void clean() {
         get_instance().internal_clean();
      }
      static void clean(const KEY&amp; key) {
         get_instance().internal_clean(key);
      }

      static const std::string&amp; get_current_library() {
         return get_instance().internal_get_current_library();
      }
      static void load_library(const std::string&amp; library) {
         get_instance().internal_load_library(library, false);
      }
      static void load_key(const std::string&amp; key) {
         get_instance().internal_load_key(key);
      }
      static void unload_library(const std::string&amp; library) {
         get_instance().internal_unload_library(library);
      }
      static void unload_key(const std::string&amp; key) {
         get_instance().internal_unload_key(key);
      }
      static load_strategy&lt;KEY&gt;* 
      set_load_strategy(load_strategy&lt;KEY&gt;* strategy) {
         return 
            get_instance().internal_set_load_strategy(strategy);
      }
      static const libraries&amp; query_libraries() {
         return get_instance().internal_query_libraries();
      }
      static const keys&amp; 
      query_library(const std::string&amp; library) {
         return get_instance().internal_query_library(library);
      }
      static const keys&amp; query_keys() {
         return get_instance().internal_query_keys();
      }
      static void register_creator(const KEY&amp; key, creator* c) {
         get_instance().internal_register_creator(key, c);
      }
      static void 
      unregister_creator(const KEY&amp; key, creator* c) {
         get_instance().internal_unregister_creator(key, c);
      }
      //==================================================
      // Instance handling
      //==================================================
   private:
      static KAPI factory&lt;KEY,BASE&gt;&amp; get_instance();
# ifdef REGIME_FACTORY_PARAMS
      virtual BASE* 
      internal_create(const KEY&amp;, const parameters&amp;) = 0;
# endif
      virtual BASE* internal_create(const KEY&amp;) = 0;
      virtual void internal_clean() = 0;
      virtual void internal_clean(const KEY&amp;) = 0;
      virtual void internal_load_key(const KEY&amp;) = 0;
      virtual const std::string&amp; 
      internal_get_current_library() const = 0;
      virtual void 
      internal_load_library(const std::string&amp; library, 
         bool is_auto) = 0;
      virtual void 
      internal_unload_library(const std::string&amp; library) = 0;
      virtual void internal_unload_key(const KEY&amp;) = 0;
      virtual load_strategy&lt;KEY&gt;* 
      internal_set_load_strategy(load_strategy&lt;KEY&gt;*) = 0;
      virtual const libraries&amp; 
      internal_query_libraries() const = 0;
      virtual const keys&amp; 
      internal_query_library
         (const std::string&amp; library) const = 0;
      virtual const keys&amp; internal_query_keys() const = 0;
      virtual void 
      internal_register_creator(const KEY&amp;, creator*) = 0;
      virtual void 
      internal_unregister_creator(const KEY&amp;, creator*) = 0;
  };
</pre></body></html>
