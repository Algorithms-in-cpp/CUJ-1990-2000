<HTML><HEAD>
<TITLE>January 2000/Interval Trees/Figure 5</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Figure 5: The query_iterator class</A></h4>
<pre>
template&lt;class T, class A = std::allocator&lt;T&gt; &gt; class itree 
{
public:
   class query_iterator : public 
      std::iterator&lt;std::forward_iterator_tag, itree&gt; {
   public:
      ... // constructors and operator*() omitted 

      query_iterator&amp; operator++(void)  // prefix 
      { Increment(); return *this; }  

      query_iterator operator++(int)  // postfix
      { query_iterator it(*this); Increment(); return it; }

      const T* operator-&gt;() const { 
         if (cur_node-&gt;discrim &gt;= value)
            return (*p_al)[cur_node-&gt;start + index]; 
         else
           return (*p_dh)[cur_node-&gt;start + index]; 
      }

      bool operator!=(query_iterator&amp; it) const 
      { return !(*this == it); }

      bool operator==(query_iterator&amp; it) const { 
         return (value == it.value) &amp;&amp; 
            (cur_node == it.cur_node) &amp;&amp; (index == it.index);
      }

   private:
      node*                   cur_node;
      int                     index;
      std::vector&lt;invl_type*&gt; *p_al, *p_dh;
      range_type              value;

      query_iterator(node* cur_node, int index, range_type value,
         std::vector&lt;invl_type*&gt; *p_al, 
         std::vector&lt;invl_type*&gt; *p_dh) 
         : cur_node(cur_node), index(index), value(value), 
           p_al(p_al), p_dh(p_dh) {} // private constructor

      void Increment(void) {
         index++;
         if (index == cur_node-&gt;size) {
            if (cur_node-&gt;discrim == value) { // finished!
               cur_node = NULL;
               index = 0;
               return;
            }
            else if (cur_node-&gt;discrim &gt; value)
               cur_node = cur_node-&gt;left;
            else
               cur_node = cur_node-&gt;right;
            init_node();
            return;
         }
         if (cur_node-&gt;discrim &gt; value) {
            if ((*p_al)[cur_node-&gt;start + index]-&gt;low() &lt;= value)
               return;
            else
               cur_node = cur_node-&gt;left;
         }
         else if (cur_node-&gt;discrim &lt; value) {
            if((*p_dh)[cur_node-&gt;start + index]-&gt;high() &gt;= value)
               return;
            else
               cur_node = cur_node-&gt;right;
         }
         else  //(cur_node-&gt;discrim == value)
            return;
         init_node();
         return;
      }

      void init_node(void) {
         index = 0;        
         while (cur_node != NULL) {
            if (value &lt; cur_node-&gt;discrim) {
               if ((cur_node-&gt;size != 0) &amp;&amp;
                   ((*p_al)[cur_node-&gt;start]-&gt;low() &lt;= value))
                  return;
               else
                  cur_node = cur_node-&gt;left;
            }
            else if (value &gt; cur_node-&gt;discrim) {
               if ((cur_node-&gt;size != 0) &amp;&amp; 
                   ((*p_dh)[cur_node-&gt;start]-&gt;high() &gt;= value))
                  return;
               else
                  cur_node = cur_node-&gt;right;
            }
            else //(value == cur_node-&gt;discrim)
               return;
         }
      }

      friend itree;  // allow itree to use private constructor
   };    // end of query_iterator definition
   ... // remiander of itree definition omitted
};  // end of itree definition

</pre></body></html>
