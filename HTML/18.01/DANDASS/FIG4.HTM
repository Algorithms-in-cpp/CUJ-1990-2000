<HTML><HEAD>
<TITLE>January 2000/Interval Trees/Figure 4</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Figure 4: Sample use of an interval tree container</a></h4>
<pre>
#include &lt;limits.h&gt;
#include &lt;iostream&gt;
#include "observation.h"
#include "itree.h"
#define MAX_OBS       1000
#define QUERY_VALUE   1.0

int main() {
   itree&lt;observation&gt; Tree;    // The interval tree

   // Add some intervals to the tree
   for (short s = 0; s &lt; MAX_OBS; ++s) {
      time_t                  tmTime;
      observation::range_type rHigh, rLow;

      rLow = (float)rand() / RAND_MAX * 70.0;
      rHigh = rLow + (float)rand() / RAND_MAX * 40.0;
      time(&amp;tmTime);

      observation obs(rHigh, rLow, s, tmTime);
      Tree.push_back(obs);  // use a vector insertion function
   }

   // Put the tree in query mode
   itree&lt;observation&gt; const &amp;ConstTree = Tree.construct();

   // Use the const iterator to access all intervals sequentially
   std::cout &lt;&lt; "Brute-force results\n";
   itree&lt;observation&gt;::const_iterator citer;
   for(citer = ConstTree.begin(); 
      citer != ConstTree.end(); ++citer)
      if ((citer-&gt;low() &lt;= QUERY_VALUE) &amp;&amp; 
          (citer-&gt;high() &gt;= QUERY_VALUE))
         std::cout &lt;&lt; "ID: " &lt;&lt; citer-&gt;id()
                   &lt;&lt; ", Low: " &lt;&lt; citer-&gt;low() 
                   &lt;&lt; ", High: " &lt;&lt; citer-&gt;high() &lt;&lt; std::endl;

   // Use the query iterator to access intervals
   std::cout &lt;&lt; "Query results\n";
   itree&lt;observation&gt;::query_iterator iter;
   for (iter = Tree.qbegin(QUERY_VALUE); 
      iter != Tree.qend(QUERY_VALUE); ++iter)

      std::cout &lt;&lt; "ID: " &lt;&lt; iter-&gt;id() 
                &lt;&lt; ", Low: " &lt;&lt; iter-&gt;low() 
                &lt;&lt; ", High: " &lt;&lt; iter-&gt;high() &lt;&lt; std::endl;

   return 0;
}
</pre></body></html>
