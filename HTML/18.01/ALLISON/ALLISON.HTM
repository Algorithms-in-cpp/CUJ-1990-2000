<HTML>   
     <HEAD>
<TITLE>January 2000/import java.*</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjan.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">import java.*: Interfaces and Inner Classes</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Chuck Allison</FONT></H3>

<BLOCKQUOTE>
<p>A Java interface is a weak substitute for multiple inheritance in C++, but it still manages to do a lot of what needs doing.</p>
</BLOCKQUOTE>

<HR>

<BLOCKQUOTE>

<p>One of the key advances in software engineering over the past few decades has been the practice of separating interface from implementation. If a client depends only on an interface, then the implementation can vary with little disruption for the client. That's the theory, anyway. I suppose the truth of that statement depends on how you define "little disruption." In this article I talk about how Java supports interfaces as first-class entities to greatly enhance modular programming.</p>

<H4><FONT COLOR="#000080">Separation Anxiety</FONT></H4>

<p>I don't think you and I will ever see the day when the stack data structure is no longer used as a sample program, whether as a model for how to define a class or for whatever other purpose. That being the case, why fight it? In <a href="fig1.htm">Figure 1</a> I define a <B>FixedStack</B> class, which uses an array to hold <B>Object</B>s. The interface consists of the public methods: <B>push</B>, <B>pop</B>, <B>top</B>, <B>size</B>, and a constructor, which in this case defines the stack's capacity. Since exceptions are the best way to signal errors, I define <B>StackError</B> as an exception class (see <a href="fig2.htm">Figure 2</a>). The test program in <a href="fig3.htm">Figure 3</a> makes sure everything works as advertised.</p>
<p>Is this the best way to implement a stack? Probably not, although if you know the upper bound on the number of elements it's very efficient. But it's more likely that you'll need a stack that can grow arbitrarily large, like the <B>DynamicStack</B> class in <a href="fig4.htm">Figure 4</a>, which uses a <B>Vector</B> to store its objects. <B>Java.util.Vector.addElement</B> does not specify that it throws any exceptions, therefore neither does <B>DynamicStack.push</B>, and the test program in <a href="fig5.htm">Figure 5</a> doesn't test for it. Other than that, the two classes look pretty much the same to the user.</p>
<p>With things as I've defined them so far, the only way I can use a stack is to choose an implementation, because concrete classes such as <B>FixedStack</B> and <B>DynamicStack</B> come with both interface and implementation as a unit. In other words, I really <I>haven't</I> separated the interface from the implementation &#151; I've just made the details of the implementation inaccessible to clients. I should be able to make the test function <B>StackTest.doTest</B> totally independent of whatever implementation it receives. But how?</p>
<p>The first thing that comes to mind, especially to C++ programmers, is to define an abstract class <B>Stack</B>, say, that serves as a base class for both implementation classes:</p>

<pre>
abstract class Stack
{
   public abstract void
   push(Object o)
      throws StackException;

   public abstract Object pop()
      throws StackException;

   public abstract Object top()
      throws StackException;

   public abstract int size();
}
</pre>

<p>I can now ignore the implementation classes within <B>StackTest.doTest</B> by having it process a <B>Stack</B> object, and pass either a <B>FixedStack</B> or <B>DynamicTest</B> as circumstances dictate.</p>
<p>I need the exception specification on <B>Stack.push</B>, by the way, because <B>FixedStack</B> needs it, even though <B>DynamicStack</B> doesn't. An overridden method in a subclass can specify a subset of the exceptions specified in the parent method (even an empty subset), since it still fulfills the contract of the parent method.</p>
<p>I see 1 1/2 problems with this approach. The "1/2" is that abstract classes are capable of holding implementation, yet my <B>Stack</B> class has none. This may not seem like a "problem," but in Java, abstract classes are intended to hold implementation shared by all subclasses. Of course, the reason I have no details in <B>Stack</B> is because there's nothing to share between <B>FixedStack</B> and <B>DynamicStack</B>. But it would feel so much better if there were some way to capture the shared <I>design</I> (i.e., the interface declarations) without inheritance, because inheritance is all about implementation.</p>
<p>There is a way, or I wouldn't be writing this article. But wait. I said "1 1/2 problems." What's the other issue? Well, Java supports only single inheritance; that is, it lets you extend only one class. Sorry, that's the way it is. But it's not far-fetched to want to implement multiple interfaces. Suppose, for example, that I want my stacks to be persistent, by implementing the following interface:</p>

<pre>
abstract class Persistent
{
   public abstract Object
   read(InputStream i)
      throws IOException;
   public abstract void
   write(OutputStream o)
      throws IOException;
}
</pre>

<p>If inheritance is the only game in town, then I have to extend both <B>Stack</B> and <B>Persistent</B>, but Java won't let me. That's a problem.</p>

<H4><FONT COLOR="#000080">Interfaces as Types</FONT></H4>
<p>So obviously I need a separate mechanism to specify interfaces, and that's why I invited you here today. An interface in Java just specifies method declarations (and some other optional things mentioned later), without function bodies, like this:</p>

<pre>
interface Stack
{
   void push(Object o)
      throws StackException;

   Object pop()
      throws StackException;

   Object top()
      throws StackException;

   int size();
}
</pre>

<p>All methods declared in an interface are abstract and public by default, so you don't have to explicitly declare them as such if you don't want to (most people don't). To specify that <B>FixedStack</B> implements the <B>Stack</B> interface, all you have to do is say so in the class definition, as in:</p>

<pre>
class FixedStack implements Stack
{
   // implementation unchanged
   // from Figure 1 ...
}
</pre>

<p>Of course, I have to actually implement the <B>Stack</B> methods inside of <B>FixedStack</B>, else the compiler will reprimand me severely. Now I can implement <B>StackTest.doTest</B> in terms of the <B>Stack</B> interface (see <a href="fig6.htm">Figure 6</a>). As long as the object passed to <B>doTest</B> implements <B>Stack</B>, everything works fine. If you want, you can even get the actual implementation type with the <B>getClass</B> method, which returns an object of type <B>Class</B>. I used <B>Class.getname</B> to print the dynamic type of the object passed to <B>doTest</B> in <a href="fig6.htm">Figure 6</a>.</p>
<p>And what if you want a class to implement multiple interfaces? No problem. Here's a persistent <B>DynamicStack</B>:</p>

<pre>
class DynamicStack
   implements Stack, Persistent
{
   // implementation as in Figure 4
   // PLUS need to implement read
   // and write
}
</pre>

<p>So Java supports multiple implementation of interfaces, but only single inheritance of implementation. Interfaces can extend any number of other interfaces, however. You could, for example combine <B>Stack</B> and <B>Persistent</B> into a single interface:</p>

<pre>
interface PersistentStack  extends Stack, Persistent {}
class DynamicStack  implements PersistentStack {...}
</pre>

<p>You can mimic interfaces in C++ by defining them as classes that only have pure virtual functions with no function bodies. But just as classes are an improvement over C structs, it's nice to have explicit language support for interfaces. And I have yet to meet a C++-programmer-turned-Java-programmer who misses the complexities of virtual base classes (viz., dominance, initialization through most-derived constructor, etc.) that multiple inheritance brings in C++!</p>

<H4><FONT COLOR="#000080">Marker Interfaces and Cloning</FONT></H4>

<p>Although you'll rarely want to do it in your own programs, you can define an interface that has no methods. Whatever for, you ask? Mostly to "color" a class. One such interface is <B>java.lang.Cloneable</B>. As you know, all classes implicitly inherit from the class <B>java.lang.Object</B>, which has the following method, among others:</p>

<pre>
protected Object clone() {...}
</pre>

<p>This method returns a bitwise copy (aka "shallow copy") of the dynamic type of its object. If you want to allow clients to clone objects of a class, you should adhere to the following convention in your class definition:</p>
<p>1.  Override <B>Object.clone</B>, make it public, have it call <B>super.clone</B>, and</p>
<p>2.  Specify that your class implements <B>Cloneable</B>.</p>
<p>If you don't follow step 1, clients will get an access violation when calling <B>clone</B>, since the one inherited from <B>Object</B> is protected. Even though you override <B>clone</B> properly, however, when <B>Object.clone</B> executes (which it will if you follow this convention), it verifies that your class has "implemented" <B>Cloneable</B>; if it hasn't, <B>Object.clone</B> throws a <B>CloneNotSupportedException</B>. The <B>Person</B> class in <a href="fig7.htm">Figure 7</a> illustrates the correct way to override <B>Object.clone</B>, namely:</p>
<p>1.  Call <B>super.clone</B> to get the new object. This guarantees that <B>Object.clone</B> is called first to make the shallow copy.</p>
<p>2.  Do whatever it takes to make a "deep copy," if necessary.</p>
<p>3.  Return the finished object.</p>
<p>4.  Put all the above in a try block that catches a <B>CloneNotSupportedException</B> and throws an <B>InternalError</B>.</p>
<p>Since I want <B>Person</B> objects to have their own copies of their fields, I explicitly copy the <B>name</B> field for the clone, because <B>Object.clone</B> just copies the <B>name</B> field's string handle. <B>Object.clone</B> is sufficient for the primitive fields, of course. Since <B>Object.clone</B> can throw a <B>CloneNotSupportedException</B>, I must catch it, but since I've implemented <B>Cloneable</B>, that should only happen if the virtual machine has had a major brain cramp, in which case I'll give up and throw an <B>InternalError</B>.</p>
<p>If you're going to allow clones of a particular class of objects, you'll probably be comparing those objects too, and maybe even printing them. If so, you'll want to override the appropriate methods inherited from <B>Object</B> as I did in the <B>Person</B> class. The test program in <a href="fig8.htm">Figure 8</a> verifies that I got a separate object after cloning, but that it is equal to the first.</p>
<p>What if your class has another superclass besides <B>Object</B>? Following the above convention for cloning takes care of things automatically. To see that this is so, look at the code in <a href="fig9.htm">Figure 9</a>, where I define a class <B>Sub</B> that extends a class <B>Super</B>, and each class holds its own <B>String</B> variable. When cloning a <B>Sub</B> object, the following events occur:</p>
<p>1.  <B>Sub.clone</B> calls <B>Super.clone</B>.</p>
<p>2.  <B>Super.clone</B> in turn calls <B>Object.clone</B>, which returns a new <B>Sub</B> object (as an <B>Object</B>, of course, which is why a cast is needed).</p>
<p>3.  This new <B>Sub</B> object contains copies of the object handles <B>s1</B> and <B>s2</B> (i.e., <B>Sub</B> is a shallow copy).</p>
<p>4.  <B>Super.clone</B> then takes care of cloning its data (<B>s1</B>).</p>
<p>5.  Finally, <B>Sub.clone</B> does likewise for <B>s2</B>.</p>
<p>So when <B>Sub.clone</B> returns, you have a deep copy in <B>sub2</B> in <B>SuperClone.main</B>. Note that since no exceptions should occur, I left off the exception specification for <B>Super.clone</B>, which means that I don't even need a try block in <B>Sub.clone</B>. <B>Sub</B> doesn't need to explicitly implement <B>Cloneable</B> either, since it extends a <B>Cloneable</B> class.</p>
<p>In case you are wondering, all arrays implicitly implement <B>Cloneable</B>, since there is no way for you to do it. When you clone an array, however, you get a shallow copy of the array's elements, which the following excerpt illustrates.</p>

<pre>
class ArrayClone {
public static void  main(String[] args){
   Integer[] a1 =  {new Integer(1)};
   Integer[] a2 =  (Integer[]) a1.clone();
   System.out.println(a1 != a2);
   System.out.println
   (a1[0] == a2[0]);
   }
}
/* Output:
true 
true // shallow copy! 
*/
</pre>

<H4><FONT COLOR="#000080">Nested Classes</FONT></H4>
<p>I mentioned earlier that interfaces could contain more than just method declarations. They can also hold constants, which are implicitly static and final, and also class definitions. Class definitions? Yep. Usually you would define <B>Stack</B>, <B>StackException</B>, and all implementations of <B>Stack</B> as non-nested, top-level classes in the same package; but just to show how to nest a class in an interface, in <a href="fig10.htm">Figure 10</a> I define <B>StackException</B> inside <B>Stack</B>. To make this work I have to replace all occurrences of <B>StackException</B> with <B>Stack.StackException</B> in the definitions of <B>StackTest</B>, <B>FixedStack</B>, and <B>DynamicStack</B> (not shown). The expression <B>Stack.StackException</B> suggests that <B>StackException</B> is a static class within <B>Stack</B>, since a type name, not an object name, precedes the dot operator. Indeed, any classes defined within an interface are implicitly static and public, and they behave just like public nested classes in C++: they're just types nested within another scope.</p>
<p>There are actually four types of nested classes in Java:</p>
<p>1)  static nested classes, as explained above</p>
<p>2)  non-static nested classes, also called <I>inner classes</I></p>
<p>3)  local classes, which are classes defined within a method, and</p>
<p>4)  anonymous local classes, also called <I>anonymous inner classes</I></p>
<p>Any class or interface type can contain nested class definitions. You always refer to a static nested class with the dot operator like I did above and use it as a normal class. A non-static nested class, or inner class, is special because each of its instances are always attached to an instance of the containing class (see the section "Inner Classes" below). If you know Lisp or Scheme, inner classes are reminiscent of closures and continuations in those languages, respectively. A local class is a class defined within a method, such as</p>

<pre>
class LocalTest
{
   public static void
   main(String[] args)
   {
      new LocalTest().f();
   }

   void f()
   {
      final int i = 7;

      class Local
      {
         void g()
         {
            System.out.println
               ("i = " + i);
         }
      }

      Local x = new Local();
      x.g();
   }
}

/* Output:
i = 7
*/
</pre>

<p>A local class instance can access any final local variables defined in its enclosing function. While static nested classes and local classes are occasionally useful in Java, most nested classes tend to be inner classes.</p>

<H4><FONT COLOR="#000080">A Pattern Example</FONT></H4>

<p>To motivate the utility of inner classes, consider the <B>Iterator</B> pattern defined in <I>Design Patterns</I> <a href="#1">[1]</a> (often referred to as the "Gang of Four" book, or GOF for short). An iterator is an object that gives sequential access to an ordered collection, such as a list. I'll define a simpler interface for iterators than GOF, as follows:</p>

<pre>
interface Iterator
{
   boolean hasNext();
   Object next();
}
</pre>

<p>A collection supports iteration by implementing a method that yields an iterator, such as</p>

<pre>
public Iterator iterator() {...}
</pre>

<p>The process of traversing a collection via an iterator looks something like this:</p>

<pre>
Collection col;
// Populate col, then...
Iterator iter = col.iterator();
while (iter.hasNext())
{
   Object o = iter.next();
   // process o ...
}
</pre>

<p>Now consider how you would implement an iterator for <B>FixedStack</B>. Such an object will need a handle to the stack it will traverse, and it will need access to the underlying data of the stack. As you can see in <a href="fig11.htm">Figure 11</a>, I define a class named <B>StackIter</B> to implement an iterator in the same package as <B>FixedStack</B>, but I have to demote the array data from private to package access to make this work.</p>

<H4><FONT COLOR="#000080">Inner Classes</FONT></H4>

<p>Inner classes offer a cleaner, safer way to implement iterators. In <a href="fig12.htm">Figure 12</a> I define <B>StackIter</B> within <B>FixedStack</B> as a private inner class (note no use of <B>static</B>). There is no reason to give it any more than private access, since such an object will be returned as an <B>Iterator</B>. When <B>FixedStack.iterator</B> returns a <B>StackIter</B> object, that object receives an implicit reference to the <B>FixedStack</B> object that created it. That way, when I use the <B>size</B> and <B>data</B> fields in the <B>StackIter</B> methods, the stack I'm accessing is well defined. In other words, the statement:</p>

<pre>
return pos &lt; size;
</pre>

<p>is the same as</p>

<pre>
return pos &lt; StackIter.this.size;
</pre>

<p>where <B>StackIter.this</B> is the hidden reference to the enclosing stack. And since <B>StackIter</B> is a member class of <B>FixedStack</B>, it has access rights to <B>FixedStack</B>'s private members, so I can restore <B>data</B> to private access.</p>
<p>Since <B>StackIter</B> is only used in one place, its name is of little utility, so I can use an anonymous inner class instead. To do this, move the declaration of <B>StackIter</B> inside the body of <B>iterator</B> as follows:</p>

<pre>
public Iterator iterator()
{
   return new Iterator()
   {
      private int pos = 0;
      public boolean hasNext()
      {
         return pos &lt; size;
      }
      public Object next()
      {
         return hasNext() ?
            data[pos++] : null;
      }
   };
}
</pre>

<p>You can always recognize an anonymous inner class as a block following a new expression. In this case the compiler sees that the anonymous class implements the <B>Iterator</B> interface. Anonymous classes can also extend other classes as well as implement interfaces.</p>

<H4><FONT COLOR="#000080">Conclusion</FONT></H4>
<p>Using interfaces as types facilitates a true separation of interface from implementation, giving you much more flexibility in designing modular software. As a plus you can implement multiple interfaces at will without the headaches of multiple implementation inheritance. And inner classes greatly simplify the process of implementing an interface (or specializing a superclass) while maintaining a maximum of type safety.</p>

<H4><FONT COLOR="#000080">Reference</FONT></H4>

<p><a name="1"></a>[1]  Gamma et al. <I>Design Patterns: Elements of Reusable Object-Oriented Software</I> (Addison-Wesley, 1994). ISBN: 0201633612.</p>

<p><i><B>Chuck Allison</B> is Consulting Editor and a columnist with </I>CUJ<I>. He is the owner of Fresh Sources, a company specializing in object-oriented software development, training, and mentoring. He has been a contributing member of J16, the C++ Standards Committee, since 1991, and is the author of </I>C and C++ Code Capsules: A Guide for Practitioners<I>, Prentice-Hall, 1998. You can email Chuck at <B>cda@freshsources.com</B>.</i></p>
<h4><a href="../../../source/2000/jan00/allison.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>

