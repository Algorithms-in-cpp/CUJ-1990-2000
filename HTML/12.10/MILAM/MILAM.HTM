

<HTML>
<HEAD>

<TITLE>October 1994/An Extended Date Library for C</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tococt.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">An Extended Date Library for C<A name="018D_00DC"><A name="018D_00DC"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="018D_0000"><A name="018D_0000">Stan Milam</font></h3><hr><blockquote><P>
<P><i><A name="018D_0000"><A name="018D_0000">Stan Milam is a C programmer working in the Dallas area. He also teaches C at Mountain View College in Dallas. He can be reached through his internet address: milam@metronet.com.</i></P><P>
<h4><FONT COLOR="#000080"><A name="018D_00DD">Introduction<A name="018D_00DD"></FONT></h4></P>
One of the most convenient attributes of the Standard C library time and date functions is their relatively fine granularity, which is in seconds. Having one-second resolution allows date and time to be stored as a single field, which is wonderful for logging purposes. The downside of this granularity is that it limits the range of the date and time functions. Most libraries use the <I>long</I> data type to store the combined date and time in the number of seconds elapsed since 1 January, 1970. As a result, standard functions cannot handle dates before 1 January, 1970. Also, since the <I>long</I> data type is 32 bits on most machines, the upper limit of the standard functions will be 18 January, 2038.<P>
This upper limit is fine for most date calculations, and perhaps the <I>long</I> data type will someday be extended to 64 or more bits, but some date calculations need to exceed this limit now.<P>
In this article I describe a suite of functions that is as versatile as the Standard C time/date functions, but have a greatly extended range. To accomplish both versatility and extended range I've mimicked the standard time/date functions, but raised the granularity of the stored time from elapsed seconds to elapsed days. For example, the standard <I>time()</I> function returns a value of type <I>time_t</I>, which contains the number of seconds elapsed since 1 January, 1970. I've written a corresponding function called <I>date()</I> which returns the number of days elapsed since 1 January, 0001 A.D. I've also written several functions which do not correspond to any function in the Standard C library, but extend the capabilities of my date functions. Because my date functions are similar in nature to the standard functions, these extended functions could be easily adapted to work with standard time/date functions.<P>
<h4><FONT COLOR="#000080"><A name="018D_00DE">The Date Types<A name="018D_00DE"></FONT></h4></P>
My date functions work with one of two date types which are analogous to the two time types in the Standard C library. These new date types are <I>date_t</I> (a <I>long</I>), and a structure, <I>struct dt</I>. The following code fragment shows how these new types are declared in the <I>dates.h</I> header file (this file is not listed here, but is included on this month's code disk):<P>
<pre>typedef long date_t;     /* Sequential day value */
struct dt {
   int dt_leap_year;    /* Indicates a leap year */
   int dt_year;         /* The actual year */
   int dt_month;        /* The month, 0 - 11 */
   int dt_mday;         /* The day of month, 1-31 */
   int dt_yday;         /* The day of the year, 0-365 */
   int dt_wday;         /* The day of the week, 0-6,*/
                    /* 0=Sun*/
};</pre>
You can use <I>date_t</I> to define variables which represent a given date (uniquely) as a long integer. Because dates are usually comprised of three different values, (years, months, and days), representing a date as a long integer greatly simplifies date math. (To see how this integer is calculated, see the sidebar <a href="sidebar1.htm">"Converting a date to a <I>date_t</I>"</a>.)<P>
The second date type, <I>struct dt</I>, corresponds nicely to the structure used in the standard time/date functions, <I>struct tm. dt</I> includes only members which represent dates &#151; hours, minutes, and seconds are not included. <I>dt</I> includes one additional member which does not correspond to any member of the time structure. This member, <I>dt_leap_year</I>, is set to 1 when <I>year</I> is a leap year and set to <I>0</I> otherwise. This structure is available for the programmer's use and is also used extensively by the date functions themselves.<P>
<h4><FONT COLOR="#000080"><A name="018D_00DF">The Date Functions<A name="018D_00DF"></FONT></h4></P>
The date functions correspond closely to the standard time/date functions. However, they do not necessarily mimic the standard functions in every last detail. I will discuss the <I>date</I> function first since it is a building block for other functions. <I>date</I> (<A href="list2.htm">Listing 2</a>)
 corresponds to the <I>time</I> function in the standard library. <I>date</I> returns the current date as type <I>date_t</I>. <I>date</I> actually calls the standard <I>time</I> function to get the current date/time value; it then passes the date/time value to a global utility function, <I>time_to_date</I>. <I>time_to_date</I> (<A href="list1.htm">Listing 1</a>)
 produces a date value which function <I>date</I> then returns. This value can be used for date math, or as an argument to other date functions, including the extended date functions.<P>
<I>localdate</I> (<A href="list3.htm">Listing 3</a>)
 is one of the date functions that takes a <I>date_t</I> type as an argument. This function corresponds to the standard library's <I>localtime</I> function. <I>localdate</I> returns a pointer to an internal static structure of type <I>struct dt</I>, with members filled in to represent the date which was passed as an argument. This structure can also be used for date math, but it is more useful as an argument to other date functions. Since the extended date functions make heavy use of <I>localdate</I> you should make a copy of the returned structure value before calling any other functions.<P>
Example:<P>
<pre>struct dt dt;
dt = *localdate ( &amp;date_value );</pre>
The <I>mkdate</I> (<A href="list4.htm">Listing 4</a>)
 function is the inverse of the <I>localdate</I> function and corresponds to <I>mktime</I> in the standard library. <I>mkdate</I> converts a date structure back to a single date value of type <I>date_t. mkdate</I> uses the <I>dt_year</I> member, and attempts to use the <I>dt_month</I> and <I>dt_mday</I> members to calculate a date value. If the <I>dt_month</I> and <I>dt_mday</I> values are not available (or not valid), <I>mkdate</I> uses the <I>dt_yday</I> value to calculate the date. This behavior departs radically from <I>mktime's</I>. <I>mkdate</I> differs from <I>mktime</I> in another way: unlike <I>mktime</I>, <I>mkdate</I> does not fix member values in the date structure if it finds them to be incorrect. (I implemented this adjustment early on, but removed it for the sake of efficiency.) If the values in the date structure are unsuitable for calculating a date value, <I>mkdate</I> returns a value of (<I>date_t</I>)(<I>-1</I>) to indicate an error.<P>
Another function that accepts a date structure as an argument is the extremely useful <I>strfdate</I> (<A href="list5.htm">Listing 5</a>)
. This function corresponds to the <I>strftime</I> function in the standard library. You use <I>strfdate</I> to build regular text strings of date values. <I>strfdate</I> uses format specifiers in a manner similar to <I>printf</I>. For example, when you call <I>strfdate</I>, <I>%A</I> is replaced with the full name of a weekday, <I>%B</I> is replaced with the full name of the month, and <I>%Y</I> is replaced by a four-digit year. <I>strfdate's</I> format specifiers are exactly the same as <I>strftime's</I>, except that <I>strfdate</I> does not recognize specifiers for time values.<P>
<h4><FONT COLOR="#000080"><A name="018D_00E0">The Extended Date Functions<A name="018D_00E0"></FONT></h4></P>
As powerful as the regular date functions are, it becomes very tedious work doing date math, building date strings, and parsing date strings. For this reason I've written three extra functions. The first two functions are complementary and deal with date strings. Date strings usually occur in a limited number of formats; Building a "wrapper" function for <I>strfdate</I> to handle common date formats greatly reduces the workload of setting up and calling <I>strfdate. to_char</I> is such a function. <I>to_char</I> (<A href="list6.htm">Listing 6</a>)
 accepts the address of a character array where the formatted date is to be stored, a date value, and a value which indicates the desired format of the output date string. I've defined these in the <I>dates.h</I> header file since they correspond to date formats that I use frequently. The most common date format is represented by <I>GREGDATE</I>, which specifies the format MM/DD/CCYY, where MM is the month, DD is the day of month, and CCYY is the year. <I>to_char</I> returns the address of the character array where the date string is built. Thus, all you need to display the current date is:<P>
<pre>puts( to_char( char_buffer, date(NULL), GREGDATE ) );</pre>
Function <I>to_date</I> (<A href="list6.htm">Listing 6</a>)
 is the complement of <I>to_char</I>. <I>to_date</I> takes a date string plus a format indicator and calculates a date (<I>date_t</I>) value. This function is useful for conversions on date strings from data files and from the keyboard. Furthermore, since <I>to_date</I> calls <I>mkdate</I>, it can also validate the date strings. Note: if the century in the date string is omitted, <I>to_date</I> uses the year value to determine the century. If the year is less than 80, <I>to_date</I> will consider the century to be 2000. If the year is greater than 79, <I>to_date</I> will consider the century to be 1900. I've included this feature to accommodate the century change which will occur in just a little over five years. Thus, to obtain a value for today's date you could use the following expression:<P>
<pre>date_t date_val;
date_val = to_date( "27-Nov-93", SPELLDATE );</pre>
The final function in the extended suite is perhaps the most useful of all: <I>compute_date</I> (<A href="list6.htm">Listing 6</a>)
. You can use this function to add or subtract combinations of years, months, weeks, and days to a given date value. The arguments for this function are a starting date value, plus the number of years, months, weeks, and days to add or subtract. To demonstrate the power and flexibility of this function the following sample code obtains the current date, adds one year, subtracts three months, adds two weeks, and subtracts four days. It then displays the computed date.<P>
<pre>start = date(NULL);
finish = compute_date(start, 1, -3, 2, -4);
puts(to_char(buffer, finish, SPELLDATE));</pre>
Adding years, weeks, and days to a given date is relatively straightforward. However, date math using months is a bit complicated, because not all months contain the same number of days. For example, suppose the current date is the last day of May. If you wish to compute one month into the future, what day is it &#151; The 30th of June, or the 1st of July? I chose to enforce the former convention, so in this case the computed date would be the 30th of June. However, if the starting date were the 30th of June and one month were added the result would be 30th of July, not the 31st. Another problem arises when adding or subtracting years when the starting date is the 29th of February in a leap year. Is the resulting date the 28th of February or the 1st of March? Again, for consistency, I chose the former convention.<P>
<h4><FONT COLOR="#000080"><A name="018D_00E1">Miscellaneous Date Functions<A name="018D_00E1"></FONT></h4></P>
Several functions do not figure so prominently as those mentioned already, but are worth mentioning. I've already mentioned the <I>time_to_date</I> function (<A href="list1.htm">Listing 1</a>)
 in passing &#151; it converts the values returned from <I>time</I> and <I>mktime</I> in the standard library to a date value used by the extended functions. I've implemented this conversion so as to maintain portability. The <I>first_day_of_month</I> and <I>last_day_of_month</I> functions, (<A href="list6.htm">Listing 6</a>)
 when given a date value, determine the month in which the date value falls and returns a date value for the first day or the last day of the month respectively. The <I>next_day_of_week</I> and the <I>previous_day_of_week</I> functions (<A href="list6.htm">Listing 6</a>)
 are useful for determining either a future or past day of the week from a given date value. For example, in our speech we often say something like "The event is three weeks from the coming Saturday." To compute this with the extended date functions you would simply write:<P>
<pre>date_v = next_day_of_week(date(NULL), SATURDAY) + 21;</pre>
The <I>dates.h</I> header file defines values for each day of the week.<P>
<h4><FONT COLOR="#000080"><A name="018D_00E2">Compilation Notes<A name="018D_00E2"></FONT></h4></P>
All the date functions I've described, as well as a few internal functions are implemented in a file called <I>dates.c</I>, available on this month's code disk. For convenience, <I>dates.c</I> was split into <A href="list1.htm">Listing 1</a>
thru <A href="list6.htm">Listing 6</a>
in this article. <A href="list1.htm">Listing 1</a>
contains some <I>#includes</I> and declarations which appear at the beginning of <I>dates.c.</I> If you compile any of the date functions separately, be sure to include these statements in your source text.<P>
<h4><FONT COLOR="#000080"><A name="018D_00E3">Summary<A name="018D_00E3"></FONT></h4></P>
The standard time/date functions are quite adequate for most date calculations, but their range is limited because their unit of measure is seconds. The date routines presented here overcome the limited range of the standard functions while maintaining their flexibility. I've presented three additional functions which remove much of the burden of formatting date strings, parsing date strings, and computing past or future dates. My new date functions align themselves closely with the Standard C date/time functions: Since I designed the three extended date functions to work with these new date functions, it should be easy to adapt the extended functions to work with the Standard C functions. One drawback to the date routines results from the unit of measure being in days: The date values lose the ability to serve as timestamps, However, in many cases, the increase in range more than compensates for the loss of precision.<P>

<h4><a href="../../../source/1994/oct94/milam.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
