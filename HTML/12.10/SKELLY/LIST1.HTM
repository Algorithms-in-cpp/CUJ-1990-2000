<HTML><HEAD>
<TITLE>October 1994/Powerful Pointers To Member Functions/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1<I> A program to demonstrate operation of pointers to members</A></I></h4>
<pre>#include &lt;stdio.h&gt;  // for printf prototype
#include &lt;iostream.h&gt;

// The SETANDPRINT macro concatenates an &amp; on the member
// name using the ## concatenation pre<I>-</I>processor operator
// The # stringizing op prints p and v as strings
#define SETANDPRINT(p, v) \
p = &amp;##v; printf("value of %<I>-</I>5s <I>-</I> &amp;%<I>-</I>15s <I>-</I> %p\n", #p, #v, p)

#define PRINT(p, st) \
printf("value of %<I>-</I>5s <I>-</I> %<I>-</I>15s <I>-</I> %p\n", #p, st, p)

class base;        // forward declarations
class dev;

// declare a pointer to base member function returning void
void (base::*pmfv)();

// declare a pointer to dev member function returning void
void (dev::*pmfdv)();

// declare a pointer to base data member of type int
int base::*pdmi;

// declare an ordinary function returning void
void xf() { cout &lt;&lt; "xf()\n"; }

// declare a pointer to ordinary function returning void
//   note that no &amp; is used in the initialization
void (*pfi)() = xf;

class base
      {
public:
      // declare several member functions for pmfv to access
      static void starfun();
      virtual void doit()      {cout &lt;&lt; "base doit()\n"; }

      // declare some non<I>-</I>inline virtual functions
      virtual void doit2();
      virtual void doit3();
      virtual void doit4();

      void operator~();
      void memf();
      void memf2();

      // declare two data members for pdmi to access
      // make them public just for easy accessibility in main
      int da, db;

      void (*psmfv)();

      base() { da = db = 9; psmfv = statfun; }
      };

void base::statfun()    { cout &lt;&lt; "base statfun()\n"; }

void base::operator~() { cout &lt;&lt; "base operator~()\n"; }

void base::doit2()  { cout &lt;&lt; "base doit3()\n"; }
void base::doit3()  { cout &lt;&lt; "base doit3()\n"; }
void base::doit4()  { cout &lt;&lt; "base doit4()\n"; }

void base::memf()   { cout &lt;&lt; "base memf()\n"; }
void base::memf2()  { cout &lt;&lt; "base memf2()\n"; }

class dev : public base
      {
public:
      virtual void ddoit();

      void doit()  { cout &lt;&lt; "dev doit()\n"; }
      void doit2() { cout &lt;&lt; "dev doit2()\n"; }

      void doit3();
      void doit4();

      void dmemf();
      void dmemf2();

      int deva;
      }

void dev::ddoit()  { cout &lt;&lt; "dev ddoit()\n"; }

void dev::doit3()  { cout &lt;&lt; "dev doit3()\n"; }
void dev::doit4()  { cout &lt;&lt; "dev doit4()\n"; }

void dev::dmemf()  { cout &lt;&lt; "dev dmemf()\n"; }
void dev::dmemf2() { cout &lt;&lt; "dev dmemf2()\n"; }

void main()
      {
      base b;
      dev d;

      // set pointer to member function to address
      // of memf function. Use the set and print macro to
      // set the pointer to the member and then
      // display the pointer with %p.

      SETANDPRINT(pmfv, base::memf);

      SETANDPRINT(pmfv, base::memf2);

      SETANDPRINT(pmfv, base::doit);

      SETANDPRINT(pmfv, base::doit2);

      SETANDPRINT(pmfv, base::doit3);

      SETANDPRINT(pmfv, base::doit4);

      SETANDPRINT(pmfv, base::operator~);

      SETANDPRINT(pmfdv, dev::dmemf);

      SETANDPRINT(pmfdv, dev::dmemf2);

      SETANDPRINT(pmfdv, dev::ddoit);

      SETANDPRINT(pmfdv, dev::doit);

      SETANDPRINT(pmfdv, dev::doit2);

      SETANDPRINT(pmfdv, dev::doit3);

      SETANDPRINT(pmfdv, dev::doit4);

      SETANDPRINT(pmfdv, base::doit);

      // print the ordinary pointer for comparison
      PRINT(pfi, "xf");

      SETANDPRINT(pdmi, base::da);

      SETANDPRINT(pdmi, base::db);

      // ERROR: try to set pmfv to static member function
      //           address
      // pmfv = &amp;base::statfun;

      // ERROR: try to set pointer to base member function
      //    to a dev member function address
      // pmfv = &amp;dev::doit;

      cout &lt;&lt; "\n\n";
      }

/* End of File */
</pre>
</BODY>
</HTML>
