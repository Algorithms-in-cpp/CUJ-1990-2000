

<HTML>
<HEAD>

<TITLE>October 1994/Questions & Answers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tococt.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Questions &amp; Answers<A name="0195_00E2"><A name="0195_00E2"></font></h2><P>
<h3 align="center"><A name="0195_0000"><A name="0195_0000">Handling Constructor Failures</h3><P>
<h3 align="center"><font color="#800000">Kenneth Pugh</font></h3><hr><blockquote><P>
<P><i><A name="0195_0000"><A name="0195_0000">Kenneth Pugh, a principal in Pugh-Killeen Associates, teaches C and C++ language courses for corporations. He is the author of All On C, C for COBOL Programmers, and UNIX for MS-DOS Users, and was a member of the ANSI C committee. He also does custom C/C++ programming and provides SystemArchitectonics<I>sm</I> services. His address is 4201 University Dr., Suite 102, Durham, NC 27707. You may fax questions for Ken to (919) 489-5239. Ken also receives email at kpugh@allen.com (Internet) and on Compuserve 70125,1142.</i></P><P>
<B>Q</B><P>
I am working on a text retrieval/display project using C++. I have a text display object that I call <I>TextItem</I>. I would like the constructor for <I>TextItem</I> to fail and return a null pointer if it can't find the file it is supposed to display, but I can't determine how to do this. Do I have to overload the <I>new</I> operator for every object that I want to have behave in this way?<P>
Ronald Sawyer<br>
Camp Hill, PA<P>
<B>A</B><P>
I'm afraid there's no way you can overload operator <I>new</I> to get what you want. And you won't have much luck getting a constructor to return a value, either &#151; C++ won't allow it. But I can show you a way to respond effectively to constructor failures. For the benefit of C programmers, I'll start with a few words of explanation. A constructor is a function that is called implicitly when a variable is declared. Suppose the <I>TextItem</I> class looks like this:<P>
<pre>class TextItem
   {
public:
   TextItem(char * file_name);
   ...
private:
   char * m_file_name;
   FILE * file_pointer;
   };</pre>
A constructor for <I>TestItem,</I> using stdio functions, might look like:<P>
<pre>TextItem::TextItem(char *file_name)
   {
   m_file_name = file_name;
   file_pointer = fopen(file_name,"r");
   }</pre>
(A constructor always has the same name as its class.)<P>
To declare an object of type <I>TextItem</I> you could write:<P>
<pre>TextItem my_text_item("my_file");</pre>
As I said earlier, in C++, a constructor does not return a value. Nor would we expect a declaration to produce a value &#151; where would we store such a value? So merely, declaring an object as we have above gives us no direct way to check on the success of the constructor. What about operater <I>new</I>? The <I>new</I> operator allocates memory for an object and then calls the constructor for that object. <I>new</I> returns a pointer to the allocated memory. For example:<P>
<pre>TextItem *my_pointer =
   new TextItem("my_file");</pre>
if <I>new</I> cannot allocate memory, it returns a null pointer. Now, in your situation you would like <I>new</I> to return a null pointer if the constructor fails, such as when it tries to open an unavailable file. We <I>can</I> overload <I>new</I> for each class; therefore it does not necessarily have to work the same way as the general <I>new</I> operator. But there is a communication problem between <I>new</I> and the constructor. <I>new</I> does not get the parameters that are passed to the constructor. <I>new</I> only receives information as to the size and number of objects to allocate. Therefore <I>new</I> cannot check if the file is unavailable and thus return a null pointer at that point.<P>
You can handle constructor failures a number of interesting ways. In this month's column I describe a fairly simple method. The approach involves creating a private member in each object to keep track of whether the object is in a valid state. This member's value is set by the constructor and any other member functions that may change the state. A public function can return the validity state. All member functions can test the state of an object before operating on it. The corresponding class might look like this:<P>
<pre>class TextItem
   {
   public:
      TextItem(char * file_name);
      Boolean is_valid();
      ...
   private:
      char * m_file_name;
      FILE * file_pointer;
      Boolean valid;
      };
   
   TextItem::TextItem(char *file_name)
      {
      valid = FALSE;
      m_file_name = file_name;
      file_pointer =
         fopen(file_name,"r");
      if (file_pointer != NULL)
         valid = TRUE;
      }
   Boolean TextItem::is_valid()
      {
      return valid;
      }</pre>
The <I>Boolean</I> type could either be an enumeration or a class of its own. The following code shows how such a class might be used:<P>
<pre>TextItem my_text_item("my_file");
if (!my_text_item.is_valid())
   {

   // Do appropriate actions

   TextItem *my_pointer =
      new TextItem("my_file");
   if (!my_pointer.is_valid ())
      {
      // Free allocated memory
      delete my_pointer;
   //Do any other appropriate actions</pre>
In some cases, you may want to use an object that has been constructed, but is not necessarily valid. (You can create an "unfinished" object by calling a constructor with no parameters. Such a constructor can mark the object as invalid.) The following code shows such a constructor and code that uses invalid objects.<P>
<pre>class TextItem
   {
public:
   TextItem(char * file_name);
   TextItem();
   Boolean open(char *file_name);
   ...
private:
   char * m_file_name;
   FILE * file_pointer;
   Boolean valid;
   };</pre>
The code for these function might be:<P>
<pre>TextItem::TextItem()
   {
   valid = FALSE;
   }

Boolean
TextItem::open(char *file_name)
   {
   // Check to see if already open
   //if (valid)
      {
      fclose(file_pointer);
      m_file_name = "";
      }
   valid = FALSE;
   m_file_name = file_name;
   file_pointer =
      fopen(file_name,"r");
   if (file_pointer != NULL)
      valid = TRUE;
   return valid;
   }</pre>
Now the user code may appear as:<P>
<pre>TextItem my_text_item("my_file");
if (!my_text_item.is_valid())
   {
   // Try alternative file
   if (!my_text_item.open(
   "another_file")) {
      // Do appropriate action or
      // try again</pre>
Some programmers may wish to reuse the <I>file_pointer</I> member as a validity flag, instead of using a separate member. Although reusing <I>file_pointer</I> may save a byte or two per object, I feel that having a separate state member keeps the code more readable and maintainable.<P>
Before going onto the next question, I'd like to complete the picture with a discussion of destructors. The system always calls an object's destructor when the object goes out of scope. If you don't include a destructor, C++ will provide a default constructor. But, if your object contains a validity flag, then you will probably also need to create a non-trivial destructor for that object. The destructor should test the validity of the object. If the object is valid, the destructor should in most cases perform the reverse of the actions that made the object valid. For example:<P>
<pre>TextItem::~TextItem()
   {
   if (valid)
      {
      fclose(file_pointer);
      }
   }</pre>
This same valid state technique works with objects other than those that open and close files. Objects that allocate memory for themselves or have complex internal relationships between members are prime candidates for a validity flag.<P>
<h4><FONT COLOR="#000080"><A name="0195_00E3">Using <B><I>qsort </I></B>in C++<A name="0195_00E3"></FONT></h4></P>
<B>Q</B><P>
After reading the column "Question &amp; Answers: Using C Libraries in C++" in the May, 1994 issue of <I>The C User's Journal</I> I came across a techinfo file from Borland that discussed the use of the <I>qsort</I> function in C++. The following text and code is the contents of the file <I>TI659.ASC,</I> dated October 19, 1993, entitled "An Example of Using qsort in C++ Mode:"<P>
Due to the strict type checking enforced by the C++ language, one must insure that the types of the parameters to <I>qsort</I> match exactly.<P>
The types of the parameters passed to the compare function are the area for grief here. By using a typedef which typecasts the compare function to have the types required by the ANSI C prototype for <I>qsort,</I> C++ can be made to accept our code.<P>
<pre>//-------------------------------------
// QSORTX.CPP - using qsort() in
// C++ mode

#include &lt;stdlib.h&gt;

typedef int (*cmp_func)(const void *, const void *);

int compare( const int *one, const int *two )
   {
   if (*one &gt; *two)
      return -1
   else
      return 1;
   } // end of compare()

int a[3] = { 50, 10, 20 };

main()
   {
   qsort(a, 3, sizeof(a[0]),compare);
   // Does not compile in C++
   qsort(a, 3, sizeof(a[0]), (cmp_func)compare);
   // Does compile
   } // end of main()</pre>
I think this techinfo file presents an interesting approach by typecasting the function; however, in so doing it disables C++'s type-checking. I hope this information might help readers make use of existing functions.<P>
Duane Clark<br>
Kingsville, TX<P>
<B>A</B><P>
As I noted in my answer, I prefer using this approach, as the compare function accepts pointers to members of a particular class. However, this approach is not guaranteed to be portable, as P.J. Plauger pointed out. On some machines &#151; especially ancient ones, the representation of a void pointer is not necessarily the same as the representation of a pointer to a data type such as <I>int.</I> I worked on one machine which used 12-bit <I>chars</I> and could hold five <I>chars</I> in an addressable word. (In case you are wondering, the machine had a 60-bit word). However, I have not heard of a machine in common use that uses inconsistent pointer representations. If anyone does know of such a machine, please let me know.<P>
The alternative to Borland's approach is to use a compare function such as<P>
<pre>int compare( const void *one, const void *two );</pre>
but this approach has little appeal to me. In fact, it is somewhat repugnant. The above function prototype does not specify the exact types the function expects. I can pass any type of pointer to this function and the compiler will not complain. Chances are that the function will at least not bomb, since it is not writing to the addresses being passed. But that is little consolation.<P>
<h4><FONT COLOR="#000080"><A name="0195_00E4">The <B><I>compare</I></B> Function and <B><I>qsort</I><A name="0195_00E4"></B></FONT></h4></P>
<B>Q</B><P>
Phil Bolduc presented the problem that a member function cannot be used by <I>qsort</I> &#151; but this is only a problem for non-static member functions (which can also access private members of the class)! For example:<P>
<pre>#include &lt;stdlib.h&gt;

class DataType
{
public:
   static int compare(const void *, const void *);
};

extern int operator&lt;(const DataType &amp;, const DataType &amp;);
extern int operator==(const DataType &amp;, const DataType &amp;);

void sortDataType(DataType *array, int count)
   {
   qsort(array, count, sizeof(DataType), &amp;DataType::compare);
   }

int DataType::compare(const void *left, const void *right)
   {
   const DataType *dtLeft = (const DataType *)left;
   const DataType *dtRight = (const DataType *)right;
   return (*dtLeft &lt; *dtRight) ? -1 : (*dtLeft == *dtRight) ? 0 : 1;
   }</pre>
Note that without the <I>static</I> the type of <I>&amp;DataType::compare </I>would be <I>int (DataType::*)(const void *, const void *)</I>, but with the <I>static</I> it's <I>int (*)(const void *, const void *)</I>. The above also compiles with Symantec C++ (V6.1).<P>
Tony Cook<P>
<B>A</B><P>
Thanks for the reply. Tony Beleta of Barcelona, Spain, sent in a similar letter. My original answer centered around the possible incompatibilities between calling sequences of C and C+ functions.<P>
If <I>qsort</I> is compiled as a C++ function, then you have two alternatives: You can make <I>compare</I> a static member of the class, as you have shown, or you can add comparison functions to the class.<P>
For our readers new to C++, a <I>static</I> class function is one that is called without an instance of the class. A static class function does not receive a <I>this</I> pointer. It has the same access rights as other member functions to the private members of the class.<P>
As shown in Tony's example, the <I>DataType::compare(const void *, const void *)</I> will receive two pointers, each of which should point to an object of the <I>DataType</I> class. Since <I>compare</I> is a static class function, it can directly access the appropriate private members of <I>DataType</I> to determine the result.<P>
If you have coded functions as <I>operator: ==</I> and <I>operator&lt;</I>, for which Tony shows the prototypes, then the comparison function does not have to be a member of the class. It could be a normal function such as:<P>
<pre>int compare_DataType(const void *left, const void *right)
   {

   const DataType *dtLeft = (const DataType *)left;
   const DataType *dtRight = (const DataType *)right;
   return (*dtLeft &lt; *dtRight) ? -1 : (*dtLeft == *dtRight) ? 0 : 1;
   }</pre>
A good reason for keeping <I>compare</I> as a static class function is to show it as part of the class interface. The scoping of the name with <I>DataType::</I> acts to differentiate between compare functions of two different classes. This scoping avoids having to use a name prefix or suffix to provide a class indication.<P>
If <I>qsort</I> is compiled as a C function, rather than a C++ function, then the problem of a mismatch between C and C++ calling sequences can occur, as covered in the original answer. Borland has found a way around this problem, but it is not part of the C++ language specification.<P>
<h4><FONT COLOR="#000080"><A name="0195_00E5">More on Pointers<A name="0195_00E5"></FONT></h4></P>
<B>Q</B><P>
In "caveats" ("Q&amp;A," <I>The C Users Journal</I>, June 1994) you give an example:<P>
<pre>void a_function(int *p_first, const int * p_second)
   {
   /* What you can do */
   * p_first = *p_second;
   /* What you cannot do */
   p_second = p_first;
   /* What you should not do */
   p_first = p_second;
   }</pre>
The problem is that the comment on the middle line is wrong, I assume the statement was meant to be:<P>
<pre>   /* What you cannot do */
   *p_second = *p_first;</pre>
Tony Cook<P>
<B>A</B><P>
Thanks for your sharp-eyed correction. The example should have looked like this:<P>
<pre>void a_function(int *p_first, const int * p_second)
   {
   /* What you can do */
   *p_first = *p_second;
   /* What you cannot do */
   *p_second = *p_first;
   /* What you should not do */
   p_second = p_first;
   p_first: p_second;
   }</pre>
Only the <I>int</I> which is being pointed to by the second parameter is a <I>const.</I> Therefore you cannot alter the value being pointed at, but you can change the value of the pointer itself.<P>
</BLOCKQUOTE>
</BODY>
</HTML>
