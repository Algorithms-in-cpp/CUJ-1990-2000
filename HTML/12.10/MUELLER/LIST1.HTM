<HTML><HEAD>
<TITLE>October 1994/Powerful Assertions for C++/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1 <I>Quantifiers in Assertions for C++</A></I></h4>
<pre>(c) HMMueller 1993

// Author:      Harald M. Mueller
//              Siemens AG Oesterreich
//              Hainburgerstr. 33
//              A-1030 Wien / Austria
// email:       mueller@garwein.hai.siemens.co.at

#ifndef _ASSERT_H_
#define _ASSERT_H_

#include &lt;stream.h&gt;

static int asstInvert, asstResult, asstEval, asstShortCut;

static struct AssertCt {
   // empty
} asstCt;

inline AssertCt&amp; anAssertCt() {
   asstInvert = 0;
   asstEval = 1;
   return asstCt;
}

inline int asstDoEval(int&amp; asstShortCut) {
   int eval = asstEval;
   asstShortCut = ! asstEval &amp;&amp; asstResult;
   asstEval = 0;
   return eval;
}

inline const AssertCt&amp; operator!(const AssertCt&amp; a)
{
   asstInvert = !asstInvert;
   return a;
}

inline int operator&amp;&amp;(int left, const AssertCt&amp;)
{
   asstEval = left;
   return left;
}

inline int operator||(int left, const AssertCt&amp;)
{
   asstEval = !left;
   return left;
}

static ostream&amp; assertout(ostream&amp; os, unsigned line,
                      char* file)
{
   return os &lt;&lt; "Assertion in line" &lt;&lt; line &lt;&lt; ", file"
           &lt;&lt; file &lt;&lt;" failed for ";
}

#define asstLoopTest(asstFor,asstAll,asstCond)//             \
       anAssertCt();                                         \
       { int asstShortCut;                                   \
         if (asstDoEval(asstShortCut)) {                     \
            int asstInvert = ::asstInvert;                   \
            asstResult = asstAll;                            \
            for asstFor {                                    \
               asstResult = 0 || asstCond;                   \
               if (asstResult != asstAll) break;             \
            }                                                \
            if (asstInvert) asstResult = !asstResult;        \
         }                                                   \
         ::asstShortCut = asstShortCut;                      \
       }                                                     \
       asstResult = ::asstShortCut ? asstResult : asstResult

#define assertp(asstCond,asstOutput)                         \
       asstResult = 0 || asstCond, asstResult |              \
       (assertout(ASSERTSTREAM,_LINE_,_FILE_)                \
          &lt;&lt; asstOutput &lt;&lt; endl, ASSERTACTION, 0)

#define assert(asstCond)                                     \
   assertp(asstCond,"condition \'" #asstCond "\'")

#define forall(asstFor,asstCond) asstLoopTest(asstFor,1,asstCond)
#define exists(asstFor,asstCond) asstLoopTest(asstFor,0,asstCond)

#define old(asstname)              old_##asstname
#define saveold(assttype,asstname) assttype old_##asstname = asstname

#define ASSERTSTREAM     cerr
#define ASSERTACTION     exit(125)

#endif
// End of File</pre>

</BODY>
</HTML>
