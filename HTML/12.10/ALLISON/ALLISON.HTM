

<HTML>
<HEAD>

<TITLE>October 1994/Code Capsules</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tococt.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Code Capsules<A name="0197_00E4"><A name="0197_00E4"></font></h2><P>
<h3 align="center"><A name="0197_0000"><A name="0197_0000">Dynamic Memory Management, Part 1</h3><P>
<h3 align="center"><font color="#800000">Chuck Allison</font></h3><hr><blockquote><P>
<P><i><A name="0197_0000"><A name="0197_0000">Chuck Allison is a regular columnist with CUJ and a software architect for the Family History Department of the Church of Jesus Christ of Latter Day Saints Church Headquarters in Salt Lake City. He has a B.S. and M.S. in mathematics, has been programming since 1975, and has been teaching and developing in C since 1984. His current interest is object-oriented technology and education. He is a member of X3J16, the ANSI C++ Standards Committee. Chuck can be reached on the Internet at 72640.1507@compuserve.com.</i></P><P>
As a C/C++ programmer you need to worry about three types of internal storage: <I>automatic, static</I>, and <I>dynamic</I>. When you define automatic variables inside a block, most compilers generate code to allocate space for those variables on the program stack. When execution leaves a block, the stack pointer moves back up to where it was before that block was entered, in effect destroying that block's automatic variables. When execution reenters the block, it creates all automatic variables afresh, with the same initial values as before. Static objects are declared either at file scope or inside a block with the <I>static</I> specifier. They reside at a fixed location in the program's data space and are initialized once at program startup.<P>
Dynamic objects are created at run time by special library function calls and reside on the <I>heap,</I> a special data area set aside for user-controlled, run-time memory allocation. When you request heap space for an object you get an address in return. The system reserves the memory at that address for your use until you're through with it. In this article I will discuss common C/C++ techniques for using dynamic memory.<P>
<h4><FONT COLOR="#000080"><A name="0197_00E5">Ragged Arrays<A name="0197_00E5"></FONT></h4></P>
The heap comes in handy when you don't know at compile time how much space you will need to store an object, or how many objects you will need. For example, a common practice in processing text files allocates separate heap space for each line of text, storing the address of each heap space in an array of pointers to <I>char</I>. The program in <A href="list1.htm">Listing 1</a>
reads up to <I>MAXLINES</I> lines of text into memory and sorts them in ascending order using <I>qsort</I>. As the program reads each line, it calls <I>malloc</I>, a <I>&lt;stdlib.h&gt;</I> function, to get enough heap space to hold the line and its terminating null byte. The program stores the address that <I>malloc</I> returns in the array <I>strings[]</I>. This flexible storage mechanism is called a <I>ragged array</I>, because it only allocates the memory required by each line of text, as illustrated by <A href="fig1.htm">Figure 1</a>.
<P>
Although this scheme imposes an overhead penalty of one pointer per line, it's likely to be more efficient than a two-dimensional storage scheme with a large line length, as in <A href="fig2.htm">Figure 2</a>.
<P>
When you are through with dynamic memory, send its address as a parameter to <I>free</I> which makes the space available for reuse by any future calls to <I>malloc</I>. (For an explanation of the <I>qsort</I> function, see Code Capsules: "Sorting with <I>qsort," </I><I>CUJ</I>, April, 1993, p. 107.)<P>
<h4><FONT COLOR="#000080"><A name="0197_00E6">Using the Heap in Standard C<A name="0197_00E6"></FONT></h4></P>
The standard header <I>&lt;stdlib.h&gt; </I>declares four functions for using dynamic memory:<P>
1.     <I>void *malloc(size_t siz)</I> &#151; Returns a pointer to the first of <I>siz </I>bytes. Used for allocating single objects.<P>
2.     <I>void *calloc(size_t nelems, size_t elem_size)</I> &#151; Returns a pointer to <I>nelems*elem_size</I> bytes, initialized to zero. Used for allocating arrays of objects.<P>
3.     <I>void *realloc(void *ptr, size_t siz)</I> &#151; Used to expand or shrink a heap allocation. <I>ptr</I> must have originated from a previous call to <I>malloc</I> or <I>calloc</I>, except that if <I>ptr</I> is null, the result is the same as <I>malloc(siz)</I>. If there is enough space for the new allocation, <I>realloc</I> copies the original data to the new location, then returns the new address.<P>
4.     <I>void free(void *ptr)</I> &#151; Makes previously allocated heap memory available for reuse. <I>ptr</I> must have been returned by a previous call to one of the above allocation functions. <I>free(NULL)</I> is a no-op.<P>
The three allocation functions return a null pointer if the amount of memory requested is not available.<P>
The program in <A href="list2.htm">Listing 2</a>
and <A href="list3.htm">Listing 3</a>
illustrates all four functions. This program extends the traditional <I>argc/argv</I> mechanism for reading command-line arguments by allowing you to specify files of arguments. Any program argument that begins with the '@' character names an <I>indirect file</I>, i.e., a file that contains more arguments. For example, the command<P>
<pre>getargs @arg.dat</pre>
causes the system to read file <I>arg.dat</I> for more arguments. Such command files can be nested (see <A href="list4.htm">Listing 4</a>, <A href="list5.htm">Listing 5</a>, and
<A href="list6.htm">Listing 6</a>)
.<P>
The <I>arglist</I> function returns a pointer to a dynamically-sized, ragged array of strings, which is the fully-expanded list of program arguments. The function <I>free_args</I> frees all of the memory used in the creation of the array.<P>
<I>arglist</I> uses <I>calloc</I> to dynamically allocate an array large enough to hold <I>argc-1</I> arguments, the original number of arguments on the command line. <I>arglist</I> calls <I>add</I> to insert a new argument into the list. If the array is full, <I>add</I> calls <I>realloc</I> to increase the size of the array by a predetermined amount (<I>CHUNK</I>). <I>add</I> calls <I>malloc</I> to place all argument strings on the heap. The function <I>expand</I> processes indirect file arguments. Since indirect files can be nested, <I>expand</I> is a recursive function. If there are no indirect file arguments, then <I>realloc</I> never gets called.<P>
<h4><FONT COLOR="#000080"><A name="0197_00E7">Dynamic Data Structures<A name="0197_00E7"></FONT></h4></P>
Dynamic memory allocation eases the creation of data structures that change at run time, such as lists and trees. Such data structures usually contain a pointer to their own type (sometimes called a self-referential pointer) to connect components of the structure together. For example, the definition of a linked-list node looks like this:<P>
<pre>struct List
{
   /* Put data components here: */
   int num;          /* etc. */

   /* Here's the link: */
   struct List *next;
};</pre>
<A href="fig3.htm">Figure 3</a>
depicts the topology of a linkedlist in memory.<P>
A null link means nothing follows. You call <I>malloc</I> and <I>free</I> respectively to create and delete nodes as needed at run time. A linked-list is especially efficient for insert and delete operations, since you don't have to shuffle elements to create or delete gaps like you do with arrays.<P>
A binary search tree is a <I>non-linear</I> data structure suitable for storing ordered data for fast retrieval. Each node in the tree contains two self-referential pointers:<P>
<pre>struct Tree
{
   /* Data here */
   char *data;
   /* etc. */

   /* Links here */
   struct Tree *left;
   struct Tree *right;
};</pre>
By convention, all items to the left of a tree node precede it in sort order, and the ones to the right sort after it. For example, the words "little boy blue come blow your horn" might result in the binary search tree shown in <A href="fig4.htm">Figure 4</a>.
 This arrangement makes the following binary search algorithm faster than a sequential search:<P>
<pre>struct Tree *search(char *s, struct
                 Tree *tp)
{
   if (tp == NULL)
      return NULL; /* not found */
   else if (strcmp(s,tp-&gt;data) &gt; 0)
      return search(s,tp-&gt;right);
   else if (strcmp(s,tp-&gt;data) &lt; 0)
      return search(s,tp-&gt;left);
   else
      return tp;    /* found it */
}</pre>
To print the items in sorted order, you do an <I>end-order</I> traversal of the tree, which recursively processes the left subtree, the root node, then the right subtree:<P>
<pre>void print_tree(struct Tree *tp)
{
   if (tp)
   {
      print_tree(tp-&gt;left);
      puts(tp-&gt;data);
      print_tree(tp-&gt;right);
   }
}</pre>
(If this puzzles you, review your favorite book on data structures. Mine is <I>The Design And Analysis Of Computer Algorithms</I>, by Aho, Hopcroft, and Ullman, Addison-Wesley, 1974.)<P>
The program in <A href="list7.htm">Listing 7</a>
uses both of these data structures to create a cross-reference listing of words in a text file. Each word occupies a distinct node in a binary search tree. A list of line numbers accompanies each word to indicate where in the text the word appears. Sample output is in <A href="list8.htm">Listing 8</a>.
<P>
<h4><FONT COLOR="#000080"><A name="0197_00E8">Managing the Heap<A name="0197_00E8"></FONT></h4></P>
Have you ever wondered how the heap management system knows how much memory to release when you call <I>free(p)</I>? Since you don't tell it, it must keep that information somewhere. In most systems that somewhere is right before the block pointed at by <I>p</I>, so instead of getting the block shown in <A href="fig5.htm">Figure 5a</a>,
 you're really getting an extra prepended block (usually a few bytes), as shown in <A href="fig5.htm">Figure 5b</a>.
 This overhead can be rather costly when you allocate a large number of small objects.<P>
Another phenomenon that occurs is <I>fragmentation</I>. After allocating many objects and then deleting some, gaps appear in the heap, as shown in <A href="fig6.htm">Figure 6</a>.
 Although the heap contains enough combined space for another object, since the space is not contiguous, the allocation may fail.<P>
A relatively painless way to sidestep these problems is to allocate a large pool of memory and manage it yourself. The cross-reference program in <A href="list9.htm">Listing 9</a>
maintains a separate pool for the tree and list. The key to its use is the following union:<P>
<pre>union List_shell
{
   union List_shell *next;
   List dummy;
};</pre>
The function <I>init_list_pool</I> allocates an array of <I>List_shell</I> objects, which are the same size as a list node. <I>init_list_pool</I> then connects each object together in linked-list fashion, with <I>free_list_ptr</I> pointing to the first array element, as shown in <A href="fig7.htm">Figure 7</a>.
<P>
No space is wasted because the <I>List_shell</I> structure overlays a <I>List</I> object. You replace calls to <I>malloc</I> in the original program with calls to <I>get_list_node</I>, which returns the next free object and updates <I>free_list_ptr</I>. All of the above applies to pools of tree nodes, of course.<P>
<h4><FONT COLOR="#000080"><A name="0197_00E9">Exercise<A name="0197_00E9"></FONT></h4></P>
The program in <A href="list9.htm">Listing 9</a>
has two limitations: 1) the pools are fixed in size, and 2) the code for the list and tree pools is identical, except for names and sizes of objects, which is a waste of good logic. Write a generic memory pool manager with the following interface:<P>
<pre>Pool *pool_create(size_t elem_size,
               size_t init_alloc,
               size_t extent);</pre>
Creates a pool to manage elements of size <I>elem_size</I>. Allocates <I>init-alloc </I>elements initially.<P>
<pre>void *pool_get_elem(Pool *p);</pre>
Returns a pointer to the next free element in the pool, and updates the free pointer. Increases the pool by <I>extent </I>elements as needed.<P>
<pre>void pool_release_elem(Pool *p,
                   void *elem);</pre>
Returns an element to the pool.<P>
<pre>void pool_free(Pool *p);</pre>
Releases all the memory used by the pool.<P>
My solution will appear next month.<P>
<h4><FONT COLOR="#000080"><A name="0197_00EA">C++ and Memory Management<A name="0197_00EA"></FONT></h4></P>
As an alternative to the memory management functions in <I>&lt;stdlib.h&gt;</I>, C++ offers the <I>new</I> and <I>delete</I> operators. To dynamically create a <I>List</I> node in C++, you could do this:<P>
<pre>List *list_p = new List;</pre>
which corresponds to a call to <I>malloc</I>. If you want an array of nodes instead, do this:<P>
<pre>List *list_array_p = new List[LIST_CHUNK];</pre>
which is similar to <I>calloc</I>, except you don't have to compute the number of bytes yourself. Since <I>new</I> is an <I>operator</I>, and not a function call, the compiler can compute the amount of memory needed, so you don't have to. When you are through with these objects, use the <I>delete</I> operator to release the dynamic memory:<P>
<pre>delete list_p;          // delete an object
delete [] list_array_p; // delete an array</pre>
It is important to use the array version to free an array allocation. One important reason is that if the type of object you are deleting has a destructor, the system will call that destructor for each element of the array only if you use <I>delete []</I>. (See <A href="list10.htm">Listing 10</a>
and <A href="list11.htm">Listing 11</a>.
)<P>
The class definition in <A href="list12.htm">Listing 12</a>
encapsulates the functionality of the argument list processing program in <A href="list3.htm">Listing 3</a>.
 The implementation in <A href="list13.htm">Listing 13</a>
uses <I>new</I> and <I>delete</I> in place of <I>malloc</I>, <I>calloc</I>, <I>realloc</I>, and <I>free</I>, as appropriate. Since there is no equivalent of <I>realloc</I> in C++, <I>Arglist::add()</I> does an explicit <I>new</I> followed by a copy and a delete to accomplish the same thing. The sample program in <A href="list14.htm">Listing 14</a>
shows how to create multiple <I>Arglist</I> objects.<P>
<h4><FONT COLOR="#000080"><A name="0197_00EB">Let Class Libraries Do The Work<A name="0197_00EB"></FONT></h4></P>
The key feature of the standard C++ string class is memory management. The string class handles the details of dynamic memory so you don't have to. The version of the <I>Arglist</I> class in <A href="list15.htm">Listing 15</a>
and <a href="list16.htm">16</a> uses arrays of strings instead of arrays of pointers to <I>char</I> so I don't have to allocate individual strings on the heap myself. (Note: <A href="list15.htm">Listing 15</a>
through <A href="list18.htm">Listing 18</a>
are specific to the Borland C++ compiler.)<P>
Better yet is to use a container class that implements dynamic arrays, like Borland's <I>TArrayAsVector&lt;&gt;</I> template class. The following statement from <A href="list17.htm">Listing 17</a>
instantiates a dynamic array of strings:<P>
<pre>TArrayAsVector&lt;string&gt; args;</pre>
The constructor for <I>TArrayAsVector</I> requires an upper bound, lower bound, and reallocation amount, so I pass these in the member initialization list in <A href="list18.htm">Listing 18</a>:
<P>
<pre>Arglist::Arglist(/* ... */) :
   args(arg_count,0,CHUNK)</pre>
The following <I>TArrayAsVector&lt;class T&gt; </I>member functions do everything I need:<P>
<pre>size_t GetItemsInContainer();
T operator[](size_t);
int Add(const T&amp;);</pre>
In order to use the string or dynamic array implementations, you only need to change the header file included in <A href="list14.htm">Listing 14</a>.
<P>
<h4><FONT COLOR="#000080"><A name="0197_00EC">Summary<A name="0197_00EC"></FONT></h4></P>
Dynamic memory allocation provides the support that flexible data structures require. You may need to do your own heap management, however, to avoid undue overhead or memory fragmentation. Next month I'll explore memory management in C++ more deeply, including how to handle out-of-memory exceptions and overloading <I>new</I> and <I>delete</I> both globally and on a per-class basis.<P>

<h4><a href="../../../source/1994/oct94/allison.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
