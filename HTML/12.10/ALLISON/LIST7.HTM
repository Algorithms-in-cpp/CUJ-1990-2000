<HTML><HEAD>
<TITLE>October 1994/Code Capsules/Listing 7</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 7<I> A program that uses a binary tree and linked lists to cross-reference words in a text file</I></A></h4>
<pre>/* xref.c:  Prints line numbers where each word occurs */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;assert.h&gt;

#define WORD_WIDTH 15

/* Node structure for each list of line numbers */
struct* List
{
   int lnum:
   struct List *next;
};
typedef struct List List;

/* Node structure for tree of distinct words */
struct Tree
{
   char word[WORD_WIDTH];
   List *lstptr;
   struct Tree *left,*right;
};
typeder struct Tree Tree;

/* Tree and list functions */
Tree *addword(Tree *, char *);
List *addline(List *, int):
Tree *find_node(Tree *, char *);
void print_tree(Tree *t);
void print_list(List *);

in* ndistinct = 0;

main(int argc, char *argy[])
{
   char linebuf[BUFSIZ];
   Tree *words = NULL;
   int lineno = 0;

   /* Do optional input redirection */
   if (argc &gt; 1)
      assert(freopen(argv[1],"r",stdin));

   /* Process each line of text file */
   while (fgets(linebuf,BUFSIZ,stdin) != NULL)
   {
      char *wordptr, *lineptr = linebuf;
      char *bad_chars =" \t\n\f\v\\\"~!@#$%^&amp;*()+'"
                    "|'1234567890-=\{}[]::&lt;&gt;?,./":

      ++lineno;

      /* Process each word in line */
      while ((wordptr = strtok(lineptr,bad_chars)) != NULL)
      {
         Tree *node;

         words = addword(words.wordptr);
         node = find_node(words,wordptr);
         node-&gt;lstptr = addline(node-&gt;lstptr,lineno);
         lineptr = NULL;
      }
   }

   /* Print results */
   printf("No. of distinct words: %d\n\n",ndistinct);
   print_tree(words);
   return 0;
}

Tree *addword(Tree *tp, char *word)
{
   if (tp == NULL)
   {
      /* Add new entry */
      ++ndistinct;
      tp = malloc(sizeof(Tree));
      strncpy(tp-&gt;word,word,WORD_WIDTH)[WORD_WIDTH] = '\0';
      tp-&gt;left = tp-&gt;right = NULL;
      tp-&gt;lstptr = NULL;
   }
   else if (strcmp(tp-&gt;word,word) &lt; 0)
      tp-&gt;right = addword(tp-&gt;right,word);
   else if (strcmp(tp-&gt;word,word) &gt; 0)
      tp-&gt;left = addword(tp-&gt;left,word);

   return tp;
}

List *addline(List *lp. int n)
{
   if (lp == NULL)
   {
      /* Append new line number to list */
      List *newp = malloc(sizeof(List));
      assert(newp);
      newp-&gt;lnum = n;
      newp-&gt;next = NULL;
      return newp;
   }
   else if (lp-&gt;lnum != n)
      lp-&gt;next = addline(lp-&gt;next,n);

   return lp;
}

void print_tree(Tree *tp)
{
   if (tp != NULL)
   {
      /* Inorder traversal */
      print_tree(tp-&gt;left);
      printf("%-*.*s: ",WORD_WIDTH,WORD_WIDTH,tp-&gt;word);
      print_list(tp-&gt;lstptr); putchar('\n');
      print_tree(tp-&gt;right);
   }
}
   }
}

void print_list(List *lp)
{
   const int NUM_WIDTH = 5;
   const int INDENT = WORD_WIDTH + 2;
   const int NUMS_PER_LINE = 8;
   int count;

   for (count = 0; lp != NULL; lp = lp-&gt;next, ++count)
   {
      printf("%*d",NUM_WIDTH,lp-&gt;lnum);
      if ((count+1) % NUMS_PER_LINE == 0
          &amp;&amp; lp-&gt;next != NULL)
         printf("\n%*c",INDENT,' ');
   }
}

Tree *find_node(Tree *tp, char *s)
{
   /* Binary search for word */
   if (strcmp(tp-&gt;word,s) &gt; 0)
      return find_node(tp-&gt;left,s);
   else if (strcmp(tp-&gt;word,s) &lt; 0)
      return find_node(tp-&gt;right,s);
   else
      return tp;
}

/* End of File */
</pre>
</BODY>
</HTML>
