

<HTML>
<HEAD>

<TITLE>September 1995/CUG New Releases</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocsep.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">CUG New Releases<A name="013E_00C5"><A name="013E_00C5"></font></h2><P>
<h3 align="center"><A name="013E_0000"><A name="013E_0000">CUG #431: DOS Remote Installable File System</h3><P>
<h3 align="center"><font color="#800000">Victor R. Volkman</font></h3><hr><blockquote><P>
<P><i><A name="013E_0000"><A name="013E_0000">Victor R. Volkman received a BS in Computer Science from Michigan Technological University. He has been a frequent contributor to C/C++ Users Journal since 1987. He is currently employed as Senior Analyst at H.C.I.A. of Ann Arbor, Michigan. He can be reached by dial-in at the HAL 9000 BBS (313) 663-4173 or by Usenet mail to sysop@hal9k.com.</i></P><P>
<h4><FONT COLOR="#000080"><A name="013E_00C6">Introduction<A name="013E_00C6"></FONT></h4></P>
Kyle A. York (McGraw Hill School Systems) submits his Remote Installable File System for DOS. The Remote Installable File System provides a LAN that links two computers through the serial port so they may share resources. RIFS installs itself as a TSR using the MSCDEX convention for installable file systems. Shareable resources are currently limited to available disk drives, including hard disks, CD-ROM, and network drives. RIFS also supports the redirection of a client parallel port to a file or device on the server. RIFS supplies 32-bit Cyclic Redundancy Check (CRC) to guarantee error-free file transfers. The CUG Library distribution includes full source in C and ASM as well as MS-DOS executables. RIFS for DOS (released 10/08/94) is immediately available as CUG volume #431.<P>
RIFS compiles under Borland Turbo C 2.0 and uses some Turbo C-specific structures in the server packet processing. York's intention was to do as much of the code with standard C as possible. Specifically, he has limited the assembly code to only the most time-critical tasks and certain tasks that are notoriously difficult in C, such as interrupt handlers. The 32-bit CRC module is also in assembly language, for performance reasons &#151; it is five times faster in assembly than it would be in C. Actual CRC calculations are produced from an algorithm by Rob Warnock published in <I>comp.compression </I>on Usenet. The assembly language files are tailored for use with Borland Turbo Assembler.<P>
<h4><FONT COLOR="#000080"><A name="013E_00C7">Installing and Running RIFS<A name="013E_00C7"></FONT></h4></P>
You can get up and running with RIFS in just a few minutes. This example assumes <I>COM1</I> for serial connections:<P>
1.     Connect computers via serial cables and null-modem<P>
2.     Add the following to config.sys on the client PC<P>
<pre>   LASTDRIVE = Z</pre>
3.     On the server PC, type<P>
<pre>   SHARE
   RSERVER /COM1</pre>
4.     On the client PC, type<P>
<pre>   RCLIENT /COM1</pre>
5.     On the client PC, type<P>
<pre>   RDRIVE /local=Z /remote=C</pre>
(this links the client's drive Z to the server's drive C.<P>
This is the simplest possible example of using RIFS. Each of the commands includes several options. Both <I>TCLIENT</I> and <I>RSERVER</I> allow command-line options to specify communications parameters. The <I>/speed=</I> option lets you select any baud rate from 300 to 115,200 baud.<P>
RIFS supports COM1-COM4 as defined by the BIOS data area. You may define additional nonstandard COM ports by combining the <I>/irq=</I> and <I>/port=</I> parameters. For example, you might use <I>/irq=0B</I> and <I>/port=02e8</I> on a customized COM port. RIFS cannot access FOSSIL interface COM ports, nor can it exploit smart serial boards. RIFS does not take advantage of data buffering available on serial ports with NS16550-compatible UART chips.<P>
Both <I>RCLIENT</I> and <I>RSERVER</I> can unload their RAM resident portions via the <I>/remove</I> parameter. <I>RDRIVE</I> is technically not a TSR, since it merely changes settings in the resident part of RCLIENT and then exits without permanently allocating RAM. However, RDRIVE also has a <I>/remove</I> parameter, which serves to unmap any remote drive associations made so far. You can then re-use the drive letter for a different mapping.<P>
<h4><FONT COLOR="#000080"><A name="013E_00C8">Printer Port Redirection<A name="013E_00C8"></FONT></h4></P>
Once an <I>RCLIENT/RSERVER</I> session is established, you can also take advantage of parallel port redirection services. Just as <I>RDRIVE</I> lets the client use the remote disk system as a local drive, <I>RPORT</I> lets the client share the remote computer's printer as if it were local. Specifically, any of <I>LPT1-LPT3</I> on the local computer can be mapped to <I>LPT1-LPT3</I> on the remote computer.<P>
<h4><FONT COLOR="#000080"><A name="013E_00C9">MSCDEX and Installable File Systems<A name="013E_00C9"></FONT></h4></P>
The Microsoft MS-DOS CD-ROM Extensions (MSCDEX) provide a much simpler method of allowing access to a non-local drive than redirecting <I>INT 21h</I> (Disk Request) and associated functions. Instead, an installable file system, such as <I>RCLIENT</I>, only needs to chain into <I>INT 2Fh</I> (Multiplex). The advantage is that this module has to provide only a handful of services, allowing DOS to do most of the work. Any disk that is compatible with DOS is automatically compatible with RIFS.<P>
For those interested in low-level details of IFS, York recommends chapter 4 of Schulman et al., <I>Undocumented DOS</I> (ISBN 0-201-63287-X). I have found the Microsoft Press book <I>MS-DOS Extensions</I> (ISBN 1-55615-212-4), by Ray Duncan, to be helpful in detailing MSCDEX functions. You might also look in the Microsoft Developer's Network CD-ROM under the "Microsoft CD-ROM Extensions Device Driver Kit (DDK)."<P>
<h4><FONT COLOR="#000080"><A name="013E_00CA">System Requirements<A name="013E_00CA"></FONT></h4></P>
RIFS required software and hardware requirements are minimal:<P>
<UL><li>IBM PC compatible (8088 through Pentium)</li>
<li>MS-DOS 3.2 though 6.2 <I>except</I> 4.x (see below)</li>
<li>Serial port (COM1-COM4 or custom)</li>
<li>30Kb available RAM</li></UL>
The <I>RCLIENT</I> module works with MS-DOS 3.2 and later, except for MSDOS 4.x. RCLIENT has been tested with MS Windows 3.1 and Desqview 2.4 and can run either inside a DOS window or before Windows or Desqview is loaded. In the latter case, the remote drives become available to all windows. Note also that the remote drive can only be accessed sequentially &#151; rather than simultaneously &#151; by multiple windows. <I>RCLIENT</I> will not work with Windows NT 3.0 and may not be compatible with OS/2.<P>
The <I>RSERVER</I> module runs in one of two possible states. On a computer running only DOS, it runs in an internal multitasking state. If it runs under Desqview, the internal multitasking must be disabled with the <I>/nobackground</I> command-line switch. Further, it must be run in a dedicated window, which causes a slight decrease in performance. <I>RSERVER</I> running with multitasking disabled works with any multitasking operating system that runs DOS programs. It has been tested with Window NT 3.0 and Desqview. <I>RSERVER</I> will not run with Windows 3.1 unless it is rewritten to be a VxD.<P>
RIFS operates efficiently even on older PCs. York has benchmarked 23,000 bps effective throughput rates on a classic 4.77Mhz PC and 115,200 bps on a 12Mhz 80286. The maximum rate of standard serial ports is 115,200 bps due to the baud rate oscillator division.<P>
<h4><FONT COLOR="#000080"><A name="013E_00CB">Documentation, Licensing, and Support<A name="013E_00CB"></FONT></h4></P>
RIFS documentation consists primarily of a usage guide and technical notes in a five-page ASCII file. The usage section explains the underlying theory of operation as well as the command-line syntax for <I>RCLIENT, RSERVER, RDRIVE, RSTATUS,</I> and <I>RPORT.</I> The technical notes highlight some of the design decisions, including the advantages of implementation using MS-DOS Installable File System hooks. A separate file documents the client/server communication protocol. The structure of a packet is shown in <A href="fig1.htm">Figure 1</a>.
<P>
York intends RIFS primarily for personal, noncommercial use. He specifically asks you to refrain from reselling the product until contacting him first. Also, he asks that you retain his name where it appears in comments when incorporating his code into your program. Last, if you produce modified versions of the source, please indicate your name as well.<P>
Since RIFS is freeware, a formal technical support plan is unavailable. However, the author encourages feedback by email whether positive or negative.<P>
<h4><FONT COLOR="#000080"><A name="013E_00CC">Future RIFS Development<A name="013E_00CC"></FONT></h4></P>
York has several ambitious ideas for improving RIFS in the future. Some of these include:<P>
<UL><li>Add modem login with password checking and optional callback</li>
<li>Let the client take over the keyboard and display of the server</li>
<li>Allow both computers to act as client and server</li>
<li>Add NetBIOS layer</li></UL>
</BLOCKQUOTE>
</BODY>
</HTML>
