

<HTML>
<HEAD>

<TITLE>September 1995/Questions and Answers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocsep.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Questions and Answers<A name="013C_00C3"><A name="013C_00C3"></font></h2><P>
<h3 align="center"><A name="013C_0000"><A name="013C_0000">Nonrandom rand() Problems</h3><P>
<h3 align="center"><font color="#800000">Pete Becker</font></h3><hr><blockquote><P>
<P><i><A name="013C_0000"><A name="013C_0000">Pete Becker is Senior QA Project Manager for C++ at Borland International. He has been involved with C++ as a developer and manager at Borland for the past six years, and is Borland's principal representative to the ANSI/ISO C++ standardization committee.</i></P><P>
<B>Q</B><P>
I'm using the <I>rand</I> function to generate a random number in one of my programs and it keeps generating the same number! I've tried using <I>rand</I> in a simplified version of my original program and it does the same thing. Here's a simplified version:<P>
<pre><I>#include &lt;stdio.h&gt;</I>
<I>#include &lt;stdlib. h&gt;</I>

m<I>ain</I>()

{
    <I>int a;</I>
    <I>a = rand</I>()<I>;</I>
    <I>print</I>f(<I> "Nu</I>m<I>ber: %d\n", a );</I>
    <I>return </I>0<I>;</I>
}</pre>
What am I doing wrong? Any help would be greatly appreciated.<P>
<B>A</B><P>
I compiled this program with Borland's compiler. Every time I run it I get this result:<P>
<pre>N<I>umber: </I>346</pre>
If you build the program with a different compiler you will probably get a different value, but it will be the same every time you run that program. Let's take this a step further, and print out a sequence of values generated with <I>rand</I>:<P>
<pre><I>#include &lt;stdio.h&gt;</I>
<I>#include &lt;stdlib.h&gt;</I>

m<I>ain</I>()

{
   <I>int i;</I>
   f<I>or</I>(<I> i = </I>0<I>; i &lt; </I>10<I>; i</I>++)
      {
      <I>int a</I>;
      <I>a = rand</I>();
      <I>printf</I>(<I> "Nu</I>m<I>ber: %d\n", a </I>);
      }
    <I>return</I> 0;
}</pre>
This program produces the output:<P>
<pre><I>Nu</I>m<I>ber</I>: 346
<I>Nu</I>m<I>ber</I>: 130
<I>Nu</I>m<I>ber</I>: 1098<I>2</I>
<I>Nu</I>m<I>ber</I>: 1090
<I>Nu</I>m<I>ber</I>: 11656
<I>Nu</I>m<I>ber</I>: 7117
<I>Nu</I>m<I>ber</I>: 17595
<I>Nu</I>m<I>ber</I>: 6415
<I>Nu</I>m<I>ber</I>: <I>22</I>948
<I>Nu</I>m<I>ber</I>: 311<I>2</I>6</pre>
This looks like a reasonably well mixed up sequence of numbers, but the program still produces the same sequence of numbers every time it is run. Your adventure game will be pretty boring if it presents exactly the same sequence of problems every time you play it.<P>
To decide whether this behavior is correct we start with a description of what <I>rand</I> is supposed to do. This description appears in the ANSI C standard in section 7.10.2.1:<P>
Description: The <I>rand</I> function computes a sequence of pseudo-random integers in the range <I>0</I> to <I>RAND_MAX</I>. The implementation shall behave as if no library function calls the <I>rand</I> function.<P>
Returns: The <I>rand</I> function returns a pseudo-random integer.<P>
Now, if you don't know what a "pseudo-random integer" is, that's not much help. If you read on, though, you come to section 7.10.2.2, which defines the <I>srand</I> function:<P>
<pre>#include &lt;stdlib.h&gt;
void srand( unsigned int seed );</pre>
Description: The <I>srand</I> function uses the argument as a seed for a new sequence of pseudo-random numbers to be returned by subsequent calls to <I>rand</I>. If <I>srand</I> is then called with the same seed value, the sequence of pseudo-random numbers shall be repeated. If <I>rand</I> is called before any calls to <I>srand</I> have been made, the same sequence shall be generated as when <I>srand</I> is first called with a seed value of 1.<P>
That's a lot of dense text, but understanding a language definition requires being able to read this sort of thing. For our purposes, the first sentence is the important part: it says that you get the same sequence for any initial seed. To get a different sequence you can call <I>srand</I> with a different seed, like this:<P>
<pre>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main( int argc, char *argv[] )

{
   int i;
   int seed;
   if( argc != 1 )
      {
      seed = atoi( argv[1] );
      srand( seed );
      }

   for( i : 0; i &lt; 10; i++ )
      {
      int a;
      a = rand();
      printf( "Number: %d\n", a );
      }
   return 0;
}</pre>
If you run this program with no command-line arguments it will not call <I>srand</I>. In this case, it should produce the same result as the previous version. However, if you do give it a command-line argument, it will use the value of its argument as the parameter to <I>srand</I>. This should produce a different sequence of numbers. <A href="tab1.htm">Table 1</a>
shows my results for several different seed values. This table reveals several interesting points. First, the sequences for no seed and for a seed of 1 are the same. That's what the definition of <I>srand</I> requires. Second, the first value generated for each seed is 346 times the value of the seed. That's not required by the language definition, although it wouldn't surprise me if most compilers act similarly. We'll see why a little later. Third, despite the relationship between the seed value and the first value generated by <I>rand</I>, subsequent values don't display any straightforward relationship. In fact, that makes a good working definition of a pseudo-random sequence: there is no apparent relationship between adjacent numbers in the sequence.<P>
To get back to the original question, if we want to get a different value from the first call to <I>rand</I> in a program, we need to use <I>srand</I> to tell <I>rand</I> to generate a different sequence. This is often done by calling <I>time</I> to get a seed value. Using <I>time</I> assures that <I>srand</I> is called with a different value every time the program is run. Now, our sample program looks like this:<P>
<pre>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;time.h&gt;

int main()

{
   int i;
   srand(time(NULL));

   for( i : 0; i &lt; 10; i++ )
       {
       int a;
       a = rand();
       printf( "Number: %d\n", a );
       }
   return 0 ;
}</pre>
If you run this program several times in succession, you will see that it produces a different sequence of numbers each time.<P>
By now you may be asking yourself why the Standard specifies this behavior. Wouldn't it be easier to simply require <I>rand</I> to do this sort of initialization, so that it produced a different sequence of numbers every time? The answer is simple: debugging. If your program isn't working right, you have to stabilize it before you can figure out what's wrong. That means setting up an environment and a set of input conditions that reproduce the problem consistently. Once that's done you can step through the code with a debugger and find out where it's going wrong. If <I>rand</I> produced a different sequence every time you wouldn't be able to stabilize the program. Defects that showed up only under certain circumstances would come and go, depending on what value <I>rand</I> happened to start with. Rather than inflict this uncertainty on programmers, the language definition makes the behavior of <I>rand</I> consistent from run to run, and controllable through <I>srand.</I><P>
When I quoted the definition of <I>srand</I> from the ANSI C standard earlier I left part of it out. Here's the missing part:<P>
Example<P>
The following functions define a portable implementation of <I>rand</I> and <I>srand</I>.<P>
<pre>static unsigned long int next = 1;

int rand( void ) /* RAND_MAX assumed to be 32767 */
{
   next = next * 1103515245 + 12345;
   return (unsigned int) (next/65536) % 32768;
}

void srand( unsigned int seed )
{
   next = seed;
}</pre>
This implementation of <I>rand</I> uses the linear congruential method for generating the pseudo-random sequence. In the linear congruential method, the next value in the sequence is generated by multiplying the current value by some number (in this case 1,103,515,245) and incrementing the result by some other number (in this case 12,345), ignoring any overflows. A fair amount of science goes into choosing appropriate values for the multiplier and increment to ensure that the sequence of numbers generated won't repeat for a long time. If you want to know more about this method, or about pseudo-random numbers in general, the best source (as usual) is Donald Knuth's <I>The Art of Computer Programming</I>. Random numbers are discussed in Volume 2, "Seminumerical Algorithms," pages 1-177. [Also see "Quick and Portable Random Number Generators," <I>CUJ</I>, June 1995, p. 33 &#151;mb]<P>
<I>To ask Pete a question about C or C++, send e-mail to</I> pbecker@wpo.borland.com<I>, use subject line: Questions and Answers, or write to Pete Becker, C/C++ Users Journal, 1601 W. 23rd St., Ste. 200, Lawrence, KS 66046.</I><P>
</BLOCKQUOTE>
</BODY>
</HTML>
