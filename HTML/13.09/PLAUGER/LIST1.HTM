<HTML><HEAD>
<TITLE>September 1995/Standard C/C++/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1 <I>The Header</I> &lt;bitset&gt;</A></h4>
<pre>// bitset standard header
#ifndef _BITSET_
#define _BITSET_
#include &lt;climits&gt;
#include &lt;istream&gt;
       // TEMPLATE CLASS bitset
_STD_BEGIN
template&lt;size_t_N&gt; class bitset {
    typedef unsigned long _T;
public:
    class reference {
    friend class bitset&lt;_N&gt;;

public:
    reference&amp; operator=(bool _X)
        {_Pbs-&gt;set(_Off, _X);
        return (*this); }
    reference&amp; operator=(const reference&amp; _Bs)
        {_Pbs-&gt;set(_Off, bool(_Bs));
        return (*this); }
    reference&amp; flip()
        {_Pbs-&gt;flip(_Off);
        return (*this); }
    bool operator~() const
        {return (!_Pbs-&gt;test(_Off)); }
    operator bool() const
        {return (_Pbs-&gt;test(_Off)); }
private:
    reference(bitset&lt;_N&gt;&amp; _X, size_t _P)
        : _Pbs(&amp;_X), _Off(_P) {}
    bitset&lt;_N&gt; *_Pbs;
    size_t _Off;
    };
bool at(size_t _P) const
    {if (_N &lt;= _P)
        _Xran();
    return (test(_P)); }
reference at(size_t _P)
    {if (_N &lt;= _P)
        _Xran();
    return (reference(*this, _P)); }
const bool operator[](size_t _P) const
    {return (test(_P)); }
reference operator[](size_t _P)
    {return (reference(*this, _P)); }
bitset()
    {_Tidy(); }
bitset(unsigned long _X)
    {_Tidy();
    for (size_t _P = 0; _X != 0 &amp;&amp; _P &lt; _N; _X &gt;&gt;= 1, ++_P)
        if (_X &amp; 1)
            set(_P); }
explicit bitset(const string&amp; _S, size_t _P = 0,
    size_t _L = (size_t)(-1))
    {if (_S.size() &lt; _P)
        _Xran();
    if  (_S.size() - _P &lt; _L)
        _L = _S.size() - _P;
    if  (_N &lt; _L)
        _L = _N;
    _Tidy(), _P += _L;
    for (size_t _I = 0; _I &lt; _L; ++_I)
       if (_S[--_P] == '1')
          set(_I);
       else if (_S[_P] != '0')
          _Xinv(); }
bitset&lt;_N&gt;&amp; operator&amp;=(const bitset&lt;_N&gt;&amp; _R)
   {for (int _I = _Nw; 0 &lt;= _I; --_I)
       _A[_I] &amp;= _R._W(_I);
   return (*this); }
bitset&lt;_N&gt;&amp; operator|=(const bitset&lt;_N&gt;&amp; _R)
   {for (int _I = _Nw; 0 &lt;= _I; --_I)
       _A[_I] |= _R._W(_I);
   return (*this); }
bitset&lt;_N&gt;&amp; operator^=(const bitset&lt;_N&gt;&amp; _R)
    {for (int _I = _Nw; 0 &lt;= _I; --_I)
        _A[_I] ^= _R._W(_I);
    return (*this); }
bitset&lt;_N&gt;&amp; operator&lt;&lt;=(size_t _P)
    {if (_P &lt; 0)
        return (*this &gt;&gt;= -_P);
    const int _D = _P / _Nb;
    if (_D != 0)
        for (int _I = _Nw; 0 &lt;= _I; --_I)
            _A[_I] = _D &lt;= _I ? _A[_I - _D] :0;
    if ((_P %= _Nb) != 0)
        {for (int _I = _NW; 0 &lt; _I; --_I
            _A[_I] = (_A[_I] &lt;&lt; _P)
                | (_A[_I - 1] &gt;&gt; (_Nb - _P));
        _A[0] &lt;&lt;= _P, _Trim(); }
    return (*this); }
bitset&lt;_N&gt;&amp; operator&gt;&gt;=(size_t _P)
    {if (_P &lt; 0)
        return (*this &lt;&lt;= -_P);
    const int _D = _P / _Nb;
    if (_D !=0)
        for (int _I = 0; _I &lt;= _Nw; ++_I)
            _A[_I] = _D &lt;= _Nw - _I ? _A[_I + _D] : 0;
    if ((_P %= _Nb) != 0)
        {for (int _I = 0; _I &lt; _Nw; ++_I)
            _A[_I] = (_A[_I] &gt;&gt; _P)
                | (_A[_I + 1] &lt;&lt; (_Nb - _P));
        _A[_Nw] &gt;&gt;= _P; }
    return (*this); }
bitset&lt;_N&gt;&amp; set()
    {_Tidy(~(_T)0);
    return (*this); }
bitset&lt;_N&gt;&amp; set(size_t _P, bool _X = true)
    {if (_N &lt;= _P)
        _Xran();
    if (_X)
        _A[_P / _Nb] |= (_T)1 &lt;&lt; _P % _Nb;
    else
        _A[_P / _Nb] &amp;= ~((_T)1 &lt;&lt; _P % _Nb);
    return (*this); }
bitset&lt;_N&gt;&amp; reset()
    {_Tidy();
    return (*this); }
bitset&lt;_N&gt;&amp; reset(size_t _P)
    {return (set(_P, 0)); }
bitset&lt;_N&gt; operator~() const
    {return (bitset&lt;_N&gt;(*this).flip()); }
bitset&lt;_N&gt;&amp; flip()
    {for (int _I = _Nw; 0 &lt;= _I; --_I)
        _A[_I] = ~_A[_I];
    _Trim();
    return (*this); }
bitset&lt;_N&gt;&amp; flip(size_t _P)
    {if (_N &lt;= _P)
        _Xran();
    _A[_P / _Nb] ^= (_T)1 &lt;&lt; _P % _Nb;
    return (*this); }
unsigned long to_ulong() const
    {enum {_Assertion = 1 /
        (sizeof (unsigned long) % sizeof (_T) == 0)};
    int _I = _Nw;
    for (; sizeof (unsigned long) / sizeof (_T) &lt;= _I; -- _I)
        if (_A[_I] != 0)
            _Xoflo();
    unsigned long _V = _A[_I];
    for (; 0&lt;= -- _I; )
        _V = _V &lt;&lt; _Nb | _A[_I];
    return (_V); }
string to_string() const
    {string _S;
    _S.reserve(_N);
    for (size_t_P = N; 0 &lt; _P; )
        _S += test(--_P) ? '1' : '0';
    return (_S); }
size_t count() const
    {size_t_V = 0;
    for (int _I = _Nw; 0 &lt;= _I; --_I)
        for (_T _X = _A[_I]; X != 0; _X &gt;&gt;= 4)
            _V += "\0\1\1\2\1\2\2\3"
                "\1\2\2\3\2\3\3\4"[_X &amp; 0xF];
    return (_V); }
size_t size() const
    {return (_N); }
bool operator==(const bitset&lt;_N&gt;&amp; _R) const
    {for (int _I = _Nw; 0 &lt;= _I; --_I)
        if(_A[_I] != _R._W(_I))
            return (false);
    return (true); }
bool operator!=(const bitset&lt;_N&gt;&amp; _R) const
    {return (!(*this == _R)); }
bool test(size_t_P) const
    {if (_N &lt;= _P)
        _Xran();
    return ((_A[_P / _Nb] &amp; ((_T)1 &lt;&lt; _P % _Nb)) != 0); }
bool any() const
    {for (int _I = _Nw; 0 &lt;= _I; --_I)
        if (_A[_I] !=0)
            return (true);
    return (false); }
bool none() const
    {return (!any());}
bitset&lt;_N&gt; operator&lt;&lt;(size_t _R) const
    {return (bitset&lt;_N&gt;(*this) &lt;&lt;= _R); }
bitset&lt;_N&gt; operator&gt;&gt;(size_t _R) const
        {return (bitset&lt;_N&gt;(*this) &gt;&gt;= _R); }
    friend bitset&lt;_N&gt; operator&amp;(const bitset&lt;_N&gt;&amp; _L,
        const bitset&lt;_N&gt;&amp; _R)
        {return (bitset&lt;_N&gt;(_L) &amp;= _R); }
    friend bitset&lt;_N&gt; operator|(const bitset&lt;_N&gt;&amp;_L,
        const bitset&lt;_N&gt;&amp; _R)
        {return (bitset&lt;_N&gt;(_L) |= _R); }
    friend bitset&lt;_N&gt; operator^(const bitset&lt;_N&gt;&amp; _L,
        const bitset&lt;_N&gt;&amp; _R)
        {return (bitset&lt;_N&gt;(_L) ^= _R); }
    friend istream&amp; operator&gt;&gt;(istream&amp; _I, bitset&lt;_N&gt;&amp; _R)
        {ios_base::iostate _St = ios_base::goodbit;
        bool _Chgd = false;
        string _X;
        size_t _M = _N;
        _X.reserve(_M);
        if (_M == (size_t)(-1))
            --_M;
        if (_I.ipfx())
            {_TRY_I0_BEGIN
            int _Ch;
            while (0 &lt; _M)
                if ((_Ch = _I.rdbuf()-&gt;sbumpc()) == EOF)
                    {_St |= ios_base::eofbit;
                    break; }
                else if (_Ch != '0' &amp;&amp; _Ch != '1')
                    {_I.rdbuf()-&gt;sputbackc(_Ch);
                    break; }
                else
                    _X += (char)_Ch, _Chgd = true, --_M;
            _CATCH_I0_(I); }
        if (!_Chgd)
            _St |= ios_base::failbit;
        _I.isfx();
        if (_St)
            _I.setstate(_St);
        _R = _X;
        return (_I); }
    friend ostream&amp; operator&lt;&lt;(ostream&amp; _0, const bitset&lt;_N&gt;&amp; _R)
        {return (_0 &lt;&lt; _R.to_string()); }
    _T _W(size_t _I) const
        {return (_A[_I]); }
private:
    enum {_Nb = CHAR_BITS * sizeof (_T),
        _Nw = _N == 0 ? 0 : (_N - 1) / _Nb};
    void _Tidy(_T _X = 0)
        {for (int _I = _Nw; 0 &lt;= _I; --_I)
            _A[_I] = _X;
        if (_X != 0)
            _Trim(); }
    void _Trim()
        {if (_N % _Nb != 0)
            _A[_Nw] &amp;= ((_T)1 &lt;&lt; _N % _Nb) - 1; }
    void _Xinv() const
        {invalid_argument("invalid bitset&lt;N&gt; char")._Raise(); }
    void _Xoflo() const
        {overflow_error(
            "bitset&lt;N&gt; conversion overflow")._Raise(); }
    void _Xran() const
        {out_of_range("invalid bitset&lt;N&gt; position")._Raise(); }
    _T _A[_Nw + 1];
    };
_STD_END
#endif /* _BITSET */</pre>

</BODY>
</HTML>
