

<HTML>
<HEAD>

<TITLE>September 1995/Standard C/C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocsep.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Standard C/C++<A name="0138_00BF"><A name="0138_00BF"></font></h2><P>
<h3 align="center"><A name="0138_0000"><A name="0138_0000">The Header &lt;bitset&gt;</h3><P>
<h3 align="center"><font color="#800000">P.J. Plauger</font></h3><hr><blockquote><P>
<P><i><A name="0138_0000"><A name="0138_0000">P.J. Plauger is senior editor of C/C++ Users Journal. He is Convener of ISO C standards committee, WG14, and active on the C++ committee, WG21. His latest books are The Draft Standard C++ Library, and Programming on Purpose (three volumes), all published by Prentice-Hall. You can reach him at pjp@plauger.com.</i></P><P>
<h4><FONT COLOR="#000080"><A name="0138_00C0">Introduction<A name="0138_00C0"></FONT></h4></P>
A common practice among programmers has long been to use <I>flag</I> and <I>mask words</I>. Both of these are objects typically of some integer type. But they do not store a range of integer values. Rather:<P>
<UL><li>Each bit field of a flag word represents an independent Boolean value.</li>
<li>Groups of one or more bits in a mask are set to select, by a bitwise AND operation, corresponding mask fields in integer values of the same size.</li></UL>
I group these two uses together because they often overlap. Consider the bitmask type <I>ios::fmtflags</I>. It has both bit fields, such as <I>skipws</I>, and mask fields, such as <I>floatfield</I>.<P>
The idiom in C has long been to define macros that specify each bit and mask field, as in:<P>
<pre>#define SKIPWS     0x80
#define FLOATFIELD  0x70
 .....</pre>
You can then define flag and mask words of some integer type and perform bitwise operations between such objects and these macros.<P>
The limitations of this approach are obvious:<P>
<UL><li>The translator can perform no type checking, to ensure that only the relevant macros mix with flag or mask words.</li>
<li>You have to contrive non-overlapping bit and mask fields by hand. Adding or changing a field is both tiresome and error prone.</li>
<li>When you exhaust the bits in the largest available integer type, you must indulge in significant rewrites to add more bit or mask fields.</li></UL>
Enumerations help some with the first limitation. The draft C++ Standard improves matters further by tightening the type checking on enumerations. Indeed, the bitmask types are used throughout the Standard C++ library to replace old-fashioned flag words. But bitmask types still suffer from the remaining limitations listed above.<P>
X3J16 and WG21, the committees standardizing C++, adopted the header <I>&lt;bitset&gt;</I> as a way to overcome all three limitations. It defines the template class <I>bitset&lt;N&gt;</I>, and a handful of related functions. The parameter <I>N</I>, of type <I>size_t</I>, specifies the number of elements in an object of this class. You can perform bitwise operations on this class by much the same rules as for the basic integer types, and with the same notation, regardless of the number of bits in a particular instantiation. You can also designate an element by its position (counting from zero), rather than writing explicit shifting and masking code.<P>
A good implementation of this template class is presumably economical in its use of storage. In particular, the idea is that:<P>
<UL><li>for small enough values of <I>N</I>, a single integer stores all the bits and the generated code as efficiently as traditional C code</li>
<li>for larger values of <I>N</I>, multiple integers store all the bits and the generated code loops over these objects as needed</li></UL>
You still need to contrive names for the bits in a <I>bitset&lt;N&gt;</I> object, but a conventional enumeration can now define positions for the distinct bit fields in the object. And, unlike older implementations of flag words, you can more easily loop over subranges of bits, just by varying a position value.<P>
I've already shown two headers that defines templates. The simpler one is <I>&lt;iomanip&gt;</I>, which defines the iostreams manipulators that take an argument. (See "Standard C/C++: The Header<I>&lt;iomanip&gt;</I>," <I>CUJ</I>, December 1994.) The more elaborate one is <I>&lt;string&gt;</I>, which defines a whole family of string classes. (See "Standard C/C++: The Header <I>&lt;string&gt;</I>," <I>CUJ</I>, July 1995, and "Standard C/C++: Implementing <I>&lt;string&gt;</I>", <I>CUJ</I>, August 1995.) I've also discussed the current limitations of template technology, in conjunction with <I>&lt;iomanip&gt;</I>.<P>
The template class <I>bitset&lt;N&gt;</I> is rather more ambitious than any of the manipulators, and rather less complex than the templatized strings. It is also an invention of the Committee. Some implementations, particularly those that endeavor to be portable, are still hampered by available technology. And some would-be users are still hampered by lack of implementations, and sheer lack of time to build experience. It is thus too soon to tell whether programmers will widely abandon conventional flag and mask words in favor of this newer and more disciplined technology.<P>
<h4><FONT COLOR="#000080"><A name="0138_00C1">Using <B><I>&lt;bitset&gt;</I><A name="0138_00C1"></B></FONT></h4></P>
You include the header <I>&lt;bitset&gt;</I> to make use of the template class <I>bitset&lt;N&gt;</I>. Here, <I>N</I> is an integer constant expression that specifies the number of bits in an instantiation of the template class. Objects of such a template class let you represent and manipulate a fixed-length sequence of bits. Earlier, I dubbed such objects flag and mask words. The advantage here is that you can manipulate all objects of template class <I>bitset&lt;N&gt;</I> the same way irrespective of the number of words required for their representations.<P>
To construct a <I>bitset&lt;N&gt;</I> object <I>x0</I>, say of size 20 bits, with all bits initially zero, you can simply write:<P>
<pre>bitset&lt;20&gt; x0;</pre>
Each object <I>x </I><I>reports</I> the length of its bit sequence with the call <I>x.length()</I>. That way, you don't have to reconstruct the value <I>N</I>, or store it separately, from when you first instantiate the class until you later need it again.<P>
One style for determining the size of a particular instantiation is in conjunction with the enumeration constants that designate its elements, as in:<P>
<pre>enum color (red, green, blue, ....., N);
typedef bitset&lt;N&gt; colorset;</pre>
You append <I>N</I> to the list of enumeration constants you define to access different elements (bits) of <I>colorset</I> objects. That way, the translator determines the number of bits for you.<P>
You can also construct a <I>bitset&lt;N&gt;</I> object and initialize its elements from an unsigned integer value, as in:<P>
<pre>// set every other bit
bitset&lt;32&gt; x1(0x55555555);</pre>
In this case, the least-significant bit in the integer argument determines element zero. More generally, the initializer stores the value one in element <I>j</I> if, for the argument <I>val</I>, the expression <I>val &amp; (1 &lt;&lt; j)</I> is nonzero.<P>
Finally, you can construct a <I>bitset&lt;N&gt;</I> object and initialize its elements from corresponding elements of a character sequence controlled by <I>string</I> object. The character value <I>'0'</I> initializes the element to zero, and the character value<I> '1'</I> initializes the element to one. No other character values are permitted. As usual with <I>string</I> arguments, you can specify one or two additional arguments to select a substring. In the examples that follow, the comment after each constructor indicates the constructor with equivalent effect:<P>
<pre>string alt ("10101");
// bitset&lt;10&gt; x2(0x15)
bitset&lt;10&gt; x2(alt);
// bitset&lt;10&gt; x3(0x0a)
bitset&lt;10&gt; x3(alt, 1);
// bitset&lt;10&gt; x4(0x02)
bitset&lt;10&gt; x4(alt, 1, 3);</pre>
An unsigned integer or <I>string</I> object that specifies more than <I>N</I> bits causes no problems. The excess bits are simply ignored.<P>
Given two objects <I>x0</I> and <I>x1</I> of class <I>bitset&lt;N&gt;</I> (for the same value of <I>N</I>, of course), you can perform the usual bitwise operations:<P>
<pre>   x0 = x1
   x0 &amp;= x1         x0 &amp; x1
   x0 |= x1         x0 | x1
   x0 ^= x1         x0 ^ x1
   x0 &lt;&lt;= m         x0 &lt;&lt; m
   x0 &gt;&gt;= m         x0 &gt;&gt; m
   x0 == x1         x0 != x1</pre>
Here, <I>m</I> is an expression with some integer type. The semantics of all these operations involving <I>x0</I> and <I>x1</I> are a natural extension of those for unsigned integer values.<P>
You can deal with all bits at once, by writing:<P>
<pre>   x0.set()         // set all bit
   x0.reset()       // clear all bits
   x0.flip()        // flip (invert) all bits
   ~x0              // flip all bits
   x0.count()       // count all set bits
   x0.any()         // test if any bit set
   x0.none()        // test if no bit set</pre>
Or, given a valid bit position <I>n</I>, you can affect just that bit, by writing:<P>
<pre>   x0.set(n)        // set bit n
   x0.set(n, b)     // set bit n to
                 // (b != 0)
   x0.reset(n)      // clear bit n
   x0.flip(n)       // flip bit n
   x0.test(n)       // test bit n</pre>
The constructors, shown above, define mappings from unsigned integers or <I>string</I> objects to <I>bitset&lt;N&gt;</I> objects. You can perform the inverse mappings as well:<P>
<pre>   // return unsigned short equivalent
   x0.to_ushort()
   // return unsigned long equivalent
   x0.to_ulong()
   // return string equivalent
   x0.to_string()</pre>
The first two member functions can report an overflow error (by throwing an exception) if the corresponding value is too large to represent as the return type. Absent any overflow, such a return value should serve as a constructor argument that generates a <I>bitset&lt;N&gt;</I> object equal to <I>x0.</I><P>
Finally, you can insert and extract objects of class <I>bitset&lt;N&gt;</I>. For example:<P>
<pre>cin &gt;&gt; x0</pre>
effectively extracts a <I>string</I> object from the standard input stream and assigns it to some temporary. Unlike the usual <I>string</I> extractor, however, the function:<P>
<UL><li>does not use the width field stored in <I>cin</I>, nor does it set the field to zero</li>
<li>extracts at most <I>N</I> characters, after skipping any white space</li>
<li>otherwise extracts up to, but not including, the first character that is not <I>0</I> or <I>1</I></li></UL>
The function then converts the controlled character sequence, by the same rules as for constructing a <I>bitset&lt;N&gt;</I> object from a <I>string</I> argument, and assigns it to <I>x0</I>.<P>
Last of all, you can insert the character sequence into, say, the standard output stream, by writing:<P>
<pre>cout &lt;&lt; x0</pre>
As you might expect, this is equivalent to inserting <I>x0.to_string()</I>.<P>
<h4><FONT COLOR="#000080"><A name="0138_00C2">Implementing <B><I>&lt;bitset&gt;</I><A name="0138_00C2"></B></FONT></h4></P>
<A href="list1.htm">Listing 1</a>
shows the file <I>bitset</I>, which implements the standard header <I>&lt;bitset&gt;</I>. All template functions appear within the header as inline definitions, as I discussed much earlier. Nevertheless, you will find that not all translators will accept this header unmodified.<P>
In particular, those based on the cfront preprocessor may refuse to translate inline functions that contain <I>for</I> statements. You have to reorganize the code for cfront. I present the header in this form because I believe it is clear and fairly simple. Hence, it should serve as a good starting point even if it is not completely acceptable to all currently available translators.<P>
A handful of functions are nominally declared outside class <I>bitset&lt;N&gt;</I>. But, function declarations of the form:<P>
<pre>bitset&lt;_N&gt; operator&amp;(const bitset&lt;_N&gt;&amp; _L, const bitset&lt;_N&gt;&amp; _R)
    {return (bitset&lt;_N&gt;(_L) &amp;= _R); }</pre>
are a bit equivocal. For <I>N</I> to be a true parameter, the declarations should properly be written as template functions. But few, if any, commercially available implementations currently let you write a template function with no type parameters. In this particular case, an integer parameter does indeed provide the information needed to enable overload resolution &#151; all the template functions have at least one argument of class <I>bitset&lt;N&gt;</I>. That's a hard point to get across to a translator, however, and the form shown here is <I>not</I> a valid way to do the job.<P>
One way to do so with current technology is to define the template functions as inline <I>friend</I> functions within the template class <I>bitset&lt;N&gt;</I>. The parameter <I>N</I> is then available to express all the necessary types.<P>
Within the template class definition, I introduced the type definition <I>_T</I>. An object of class <I>bitset&lt;N&gt;</I> stores an array of one or more unsigned integer member objects. <I>_T</I> is the type of the array elements. I have chosen <I>unsigned long</I> for this type, but you might prefer <I>unsigned short</I> or <I>unsigned char</I>. Some implementations may manipulate the smaller element types more efficiently. Or you may declare large arrays of <I>bitset&lt;N&gt;</I> elements and want to keep object sizes smaller.<P>
Private to the class, I define two useful constants. They masquerade as elements in an enumeration &#151; a common trick &#151; but they are used independently as numeric values:<P>
<UL><li>_<I>Nb</I>, the number of bits in an array element</li>
<li>_<I>NW, one less than</I> the number of elements in the array</li></UL>
I won't recite all the reasons for choosing these particular derived parameter values. All I can say is, they were the result of several rewrites to make the code at once compact, robust, and readable.<P>
The template class <I>bitset&lt;N&gt;</I> also defines five secret protected member functions:<P>
<UL><li>_<I>Tidy</I>, which initializes the array elements all to the same value (usually zero)</li>
<li>_<I>Trim</I>, which sets to zero any unused bits in the last element of the array, both for good hygiene and to simplify several bitwise operations</li>
<li>_<I>Xinv</I>, which reports an invalid-argument error</li>
<li>_<I>Xoflo</I>, which reports an overflow error</li>
<li>_<I>Xran</I>, which reports a range error</li></UL>
I discussed the exceptions associated with invalid-argument, overflow, and range errors many moons ago. (See "Standard C/C++: The Header <I>&lt;exception&gt;</I>," February 1994.) As you can see, all of these functions are used throughout the member function definitions.<P>
None of the member function definitions is particularly complex. Nevertheless, several of the larger ones are poor candidates for making inline, as they are declared here. As I have discussed earlier, some translators refuse to make inline any definition that includes a looping statement. (Some simply refuse to translate the code at all, even though they are supposed to.) Others may generate inline code, but slavishly loop even over a single word.<P>
Obviously, this code works best in conjunction with a smart template optimizer. Such creatures are currently in short supply, but that should not always be the case. The draft C++ Standard is banking ever more heavily on template technology, and not just within the Standard C++ library. If such pressures continue to drive the commercial compiler industry, then the kind of code I show here will eventually come into its own.<P>
Meanwhile, I can report that this code does translate successfully under at least some current implementations. To make more than nontrivial use of it, however, you should check carefully to see the kind of code it generates. You may well want to modify it.<P>
<I>This article is excerpted in part from P.J. Plauger, The Draft Standard C</I>++ <I>Library, (Englewood Cliffs, N.J.: Prentice-Hall, 1995).</I><P>

<h4><a href="../../../source/1995/sep95/pjp.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
