

<HTML>
<HEAD>

<TITLE>September 1995/Stepping Up To C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocsep.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Stepping Up To C++<A name="013A_00C1"><A name="013A_00C1"></font></h2><P>
<h3 align="center"><A name="013A_0000"><A name="013A_0000">Other Assorted Changes, Part 3</h3><P>
<h3 align="center"><font color="#800000">Dan Saks</font></h3><hr><blockquote><P>
<P><i><A name="013A_0000"><A name="013A_0000">Dan Saks is the president of Saks &amp; Associates, which offers consulting and training in C++ and C. He is secretary of the ANSI and ISO C++ committees. Dan is coauthor of C++ Programming Guidelines, and codeveloper of the Plum Hall Validation Suite for C++ (both with Thomas Plum). You can reach him at 393 Leander Dr., Springfield OH, 4450-4906, by phone at (513)324-3601, or electronically at dsaks@wittenberg. edu.</i></P><P>
This is the third and final installment in a series on assorted changes to the C++ language wrought by years of ongoing standardization. These changes do not include new features, but rather features defined in the Annotated C++ Reference Manual (ARM) <a href="#1">[1]</a> that now have different behaviors under the draft C++ standard. In some cases, the changes simply disallow constructs that the ARM allowed.<P>
Thus far, I've explained the following new rules:<P>
<UL><li>The left-hand side of a member access expression is always evaluated, even if the right-hand side designates a static member or enumeration constant.</li>
<li>Enumerations are not integral, so that built-in arithmetic operators, such as <I>++</I> and <I>--</I>, no longer apply to enumerations; however, enumerations can be promoted to <I>int</I>, <I>unsigned int</I>, <I>long</I>, or <I>unsigned long</I>.</li>
<li>In most cases, temporary objects are destroyed as the last step in evaluating the full-expression that (lexically) contains the point where they were created. This is true even if that evaluation ends in throwing an exception.</li>
<li>A local class may declare a global function as a <I>friend</I>, but it may not define it.</li>
<li>A program may no longer convert a pointer-to-function to or from a pointer-to-object-type.</li>
<li>A program may not use an operator function name, such as <I>operator+</I>, as the name of an ordinary variable.</li></UL>
See "Stepping Up to C++: Other Assorted Changes," Parts 1 and 2, <I>CUJ</I>, July and August, 1995.<P>
In addition to these changes, I described the changes specific to the scope rules in "Stepping Up to C++: Changes in Scope Rules," <I>CUJ</I>, June, 1995.<P>
<h4><FONT COLOR="#000080"><A name="013A_00C2">CV-Qualifiers in Parameter Types<A name="013A_00C2"></FONT></h4></P>
C++ allows function name overloading. That is, a program can declare two or more functions with the same name in the same scope, as long as each function has a distinct signature. A function's <I>signature</I> is the sequence of types in its parameter list. For example,<P>
<pre>int put(int c);
int put(int c, FILE *stream);
int put(const char *s);
int put(const char *s, FILE *stream);</pre>
is a family of overloaded functions. The last one has signature <I>(const char *, FILE *).</I><P>
A program can also overload non-static member functions as const and non-const, as well as volatile and non-volatile. For example,<P>
<pre>class X
    {
public:
    int f(int);
    int f(int) const;
    int f(int) volatile;
    int f(int) const volatile;
    // ...
    };</pre>
declares four distinct functions named <I>X::f</I>. Thus, the signature of a non-static member function must also include any cv-qualifiers (<I>const</I> and/or <I>volatile</I> qualifiers) applied to the function itself so the compiler can tell it apart from the others. The last of the <I>X::f</I> functions above has signature <I>(int) const volatile</I>.<P>
In some cases, two functions with the same name may have different signatures, but still cannot overload each other. In other words, they cannot appear in the same set of overloaded functions. The ARM states:<P>
<BLOCKQUOTE>
Since for any type <I>T</I>, a <I>T</I> and a <I>T&amp;</I> accept the same set of initializer values, function declarations with parameter types differing only in this respect may not have the same name. For example,<P>
<pre>int f(int i);
int f(int&amp; r)  // error: function types
               // not sufficiently different</pre>
</BLOCKQUOTE>

The ARM also states that:<P>

<BLOCKQUOTE>
Similarly, since for any type <I>T</I>, a <I>T</I>, a <I>const T</I>, and a <I>volatile T</I> accept the same set of initializer values, functions with parameter types differing only in this respect may not have the same name.<P>
</BLOCKQUOTE>

This means that you can't declare<P>
<pre>void f(T t);
void f(const T t);</pre>
as overloaded functions because the compiler can't tell the <I>f</I>s apart when you try to call one. Every actual argument you can pass to <I>f(T)</I>, you can also pass to <I>f(const T)</I>, and vice versa.<P>
At first blush, the ARM's rule also appears to preclude declaring overloaded functions such as<P>
<pre>void g(T *p);
void g(const T *p);</pre>
or<P>
<pre>void h(T &amp;r);
void h(const T &amp;r);</pre>
It doesn't. The ARM goes on to say:<P>
<BLOCKQUOTE>
It is, however, possible to distinguish between <I>const T&amp;</I>, <I>volatile T&amp;</I>, and plain <I>T&amp;</I> so function declarations that differ only in this respect can be overloaded. Similarly, it is possible to distinguish between <I>const T*, volatile T*</I>, and plain <I>T*</I> so function declarations that differ only in this respect can be overloaded.<P>
</BLOCKQUOTE>
Essentially, the difference between the set<P>
<pre>void g(T *p);
void g(T const *p);</pre>
which you can overload, and the set<P>
<pre>void f(T t)
void f(const T t);</pre>
which you can't, is whether the <I>const</I> that distinguishes the functions applies to the parameter's <I>top type</I>. That is, the ability to overload hinges on whether the <I>const</I> applies to the formal parameter itself (the top type), or to the actual argument accessed through the parameter.<P>
In the case of<P>
<pre>void g(T *p);
void g(T const *p);</pre>
the <I>const</I> in the second function applies, not to parameter <I>p</I>, but to the object addressed by <I>p</I>. Thus, the two functions may have clearly different outward behaviors. The first function is entitled to modify the object addressed by <I>p</I>; the second is not. Therefore, the first function can accept only addresses of non-const <I>T</I> objects, while the second can accept addresses of either const or non-const <I>T</I> objects,<P>
In the case of<P>
<pre>void f(T t)
void f(const T t);</pre>
the <I>const</I> in the second function applies to formal parameter <I>t</I>, not to the actual argument. In other words, the functions only differ in that the first function can alter its parameter <I>t</I>, but the second cannot. But in both cases, the parameter is passed by value, so the function only has access to a copy of the actual argument, not the argument itself. So even if the first function alters its parameter, it has no effect on the actual argument. And there's no difference in the type of actual arguments either function will accept. Thus, there' s little to distinguish the outward behavior of these functions.<P>
In case the horse isn't completely dead, I'll beat it a little more. Note that you cannot overload<P>
<pre>void f(X *t)
void f(X *const t);</pre>
because this is just a special case of the rule that you can't overload<P>
<pre>void f(T t)
void f(T const t);</pre>
where <I>T</I> is <I>X *</I>. The order of the type-specifier <I>T</I> and the cv-qualifier <I>const</I> doesn't matter, so<P>
<pre>void f(T const t);</pre>
and<P>
<pre>void f(const T t);</pre>
are the same function. In either case, the <I>const</I> applies to parameter <I>t</I> itself, not to the actual argument.<P>
You might argue that, given<P>
<pre>void f(T t)
void f(const T t);</pre>
a call <I>f(t)</I> should call <I>f(const T)</I> when <I>t</I> is const and call <I>f(T)</I> when <I>t</I> is non-const. But first, consider the situation where <I>T</I> is a non-class type, say <I>int</I>:<P>
<pre>void f(int n);
void f(const int n);</pre>
Which function should <I>f(42)</I> call? If you think it should call <I>f(const int)</I> because <I>42</I> is a constant, think again. There are subtle reasons why it's not that simple.<P>
Syntactically, <I>42</I> is surely a constant, but during semantic analysis, the compiler regards it as an rvalue of type <I>int</I>. Since <I>42</I> is not an lvalue (an object), it cannot be const-qualified (or volatile-qualified). That is, although 42 is a constant-expression, it is not const-qualified. A subtle point indeed.<P>
Thus, a simple rule that matches const with const and non-const with non-const implies that f(42) selects <I>f(int)</I> over <I>f(const int)</I>. If this were the rule, I suspect many programmers would find the behavior surprising. So it's just as well that you can't overload <I>f(T)</I> and <I>f(const T)</I>. C++ already has more than its share of surprises.<P>
Unfortunately, the rule that prohibits overloading <I>f(T)</I> and <I>f(const T)</I> has a problem &#151; it's incompatible with C. Although you can't overload functions in C, you can declare a function more than once in a given scope. Moreover, the declarations need not be exactly the same; they just have to be close enough. More precisely, they must be <I>compatible</I>.<P>
For example, the declarations<P>
<pre>void f(int);
void f(const int i);</pre>
are valid in the same scope of a standard C program, and they refer to the same function. In C, two function declarations are compatible if they have the same name and return type, and their parameter types are the same, ignoring any top-level cv-qualifiers on the parameter types.<P>
The C++ standards committees, WG21 and X3J16, agreed to eliminate this incompatibility. They took the approach that the presence of cv-qualifiers in the top type of a formal parameter is merely a detail of implementing the function; it's irrelevant to a function's interface. Therefore, C++ should ignore such cv-qualifiers in determining a function's signature for declaration matching and overload resolution.<P>
The draft now says:<P>
<BLOCKQUOTE>
Parameter declarations that differ only in the presence or absence of <I>const</I> and/or <I>volatile</I> are equivalent. That is, the <I>const</I> and <I>volatile</I> type-specifiers for each parameter type are ignored when determining which function is being declared, defined, or called. For example,<P>
<pre>typedef const int cInt;

int f(int);         // redeclares f(int);
int f(const int);   // defines f(int)
int f(int) { ... }  // error: redefines f(int)
int f(clnt) { ... }</pre>
Only the <I>const</I> and <I>volatile</I> specifiers at the outermost level of the parameter type specification are ignored in this fashion; <I>const</I> and <I>volatile</I> specifiers buried within a parameter type specification are significant and can be used to distinguish overloaded function declarations.<P>
</BLOCKQUOTE>
Thus, according to the current draft, a function such as<P>
<pre>void f(const char *p, const int i);</pre>
has signature <I>(const char *, int)</I>. Someday, C++ compilers will actually behave this way.<P>
A C++ compiler is supposed to ignore the cv-qualifiers outside the function, but not inside. For example,<P>
<pre>void f(int);
...
void f(const int i)
    {
    return ++i;   // error
    }</pre>
is an error because it tries to modify parameter <I>i</I> in a context where <I>i</I> is const-qualified. Interestingly,<P>
<pre>void f(const int);
...
void f(int i)
   {
   return ++i;
   }</pre>
is valid C. To my dismay, I'm afraid it will also be valid C++.<P>
<h4><FONT COLOR="#000080"><A name="013A_00C3">CV-Qualifiers on Return Types<A name="013A_00C3"></FONT></h4></P>
As part of the investigation that lead to the previous change, the committees considered whether to also ignore cv-qualifiers at the top of return types. In other words, the question was whether a function declared as<P>
<pre>const T f();</pre>
really returns a <I>const T</I> for just a <I>T</I>.<P>
Why does this matter? Well, if <I>T</I> is a non-class type, it doesn't matter much. The result of a function call expression such as <I>f()</I> is an rvalue unless the function returns a reference, in which case the result is an lvalue. As in C, an rvalue of a non-class type is not an object, so you can't modify it. Thus cv-qualifiers are meaningless when applied to rvalues.<P>
However, if <I>T</I> is a class type, then the const qualifter in the return type of <I>f</I> might influence overload resolution in member function calls. For example, suppose <I>T</I> is<P>
<pre>class T
    {
public:
    void g();
    void g() const;
    // ...
    };</pre>
and <I>f</I> is declared as above (with return type <I>const T</I>). Does <I>f().g()</I> call the const member function <I>g</I>, or the non-const one? If C++ were to ignore cv-qualifiers at the top of return types, then calling <I>f</I> would return a non-const <I>T</I>, and so <I>f().g()</I> would apply the non-const member <I>T::g</I> to the result of <I>f.</I> If C++ were to heed the cv-qualifiers in return types, then the result of <I>f()</I> would be const-qualified, and so <I>f().g()</I> would call the const member <I>T::g</I>.<P>
The committees found that most existing implementations did not ignore cv-qualifiers in return types. Since the ARM did not suggest they should be ignored, the committees simply decided to affirm what they perceived as existing practice. The C++ draft now contains an explicit footnote stating that<P>
<BLOCKQUOTE>
As indicated by the syntax, cv-qualifiers are a significant component in function return types.<P>
</BLOCKQUOTE>
It also states elsewhere that<P>
<BLOCKQUOTE>
Class rvalues can have qualified types; non-class rvalues always have unqualified types.<P>
</BLOCKQUOTE>
Thus, given<P>
<pre>T f();
const T fc();</pre>
where <I>T</I> is as defined above, then <I>f().g()</I> calls the non-const member <I>T::g</I>, and <I>fc().g()</I> calls the const member <I>T::g</I>. However, given<P>
<pre>int h();
const int hc();</pre>
calling either <I>h()</I> or <I>hc()</I> returns an rvalue of type <I>int</I>.<P>
<h4><FONT COLOR="#000080"><A name="013A_00C4">Arrays with Unknown Bound<A name="013A_00C4"></FONT></h4></P>
As in C, a C++ program can declare objects that are arrays with unknown bounds, such as<P>
<pre>extern int a[];</pre>
The type composition rules allow arrays with unknown bounds in other contexts, such as<P>
<pre>typedef int UNKA[];</pre>
and even<P>
<pre>void f(UNKA *p);</pre>
The committees decided that functions such as this, that accept a pointer or reference to an array with unknown bound, complicate declaration matching and overload resolution rules in C++. The committees agreed that, since such functions have little utility and are fairly uncommon, it would be simplest to just ban them. Hence, the C++ draft now states:<P>
<BLOCKQUOTE>
If the type of a parameter includes a type of the form pointer to array of unknown bound of <I>T</I> or reference to array of unknown bound of <I>T</I>, the program is ill-formed.<P>
</BLOCKQUOTE>
<h4><FONT COLOR="#000080"><A name="013A_00C5">Implicit <B><I>int</I><A name="013A_00C5"></B></FONT></h4></P>
Like C, C++ as in the ARM employs the "implicit <I>int</I>" rule &#151; you can omit the type specifier from certain declarations, in which case the type defaults to <I>int</I>. For example,<P>
<pre>const N = 10;</pre>
defines <I>N</I> as a constant with type <I>int</I>, and<P>
<pre>extern f();</pre>
declares a function <I>f</I> that returns an <I>int</I>.<P>
Surprisingly, C++ as described in the ARM allows implicit <I>int</I> in places that even ISO C does not. For example, the rules in the ARM permit<P>
<pre>f(int);</pre>
as the declaration for a function accepting an <I>int</I> and returning an <I>int</I>. This is not valid C.<P>
Implicit <I>int</I> complicates parsing, which in turn, complicates error detection and recovery. Since the dawn of man, WG21 and X3J16 members had been making noises about banning implicit <I>int</I> from C++. But it took the committees many meetings to work up the collective courage to do anything about it.<P>
Late in 1993, the committees started chipping away at implicit <I>int</I>. They agreed to do the following:<P>
<UL><li>ban implicit <I>int</I> wherever ISO C does.</li>
<li>ban implicit <I>int</I> in a typedef. For example,
<pre>typedef T;</pre>
ceased to be valid C++, even though it still is valid C.</LI>
<li>deprecate all other uses of implicit <I>int</I>. (A deprecated feature is one that's on the chopping block. It may be removed from a future standard.)</li></UL>
The C++ standards committees remained reluctant to ban implicit <I>int</I> altogether as long as it remained alive in C. Late last year, Thomas Plum, the liason between the C and C++ committees, presented the issue to the C committee, WG14. He reported back to WG21 and X3J16 that there is considerable support in WG14 to either ban or at least deprecate implicit <I>int</I>. He added that if WG21 and X3J16 elected to ban implicit <I>int</I>, WG14 would not complain.<P>
Once relieved of their inhibitions, the C++ committees voted to ban implicit <I>int</I> altogether. The draft C++ standard now states:<P>
<BLOCKQUOTE>
Only in function-definitions and in function declarations for constructors, destructors, and type conversions can the <I>decl-specifier-seq</I> be omitted.<P>
</BLOCKQUOTE>
The <I>decl-specifier-seq</I> is the sequence of one or more storage class specifiers, cv-qualifiers, or type specifiers at the beginning of a declaration. For example, in<P>
<pre>extern const unsigned int *p;</pre>
the <I>decl-specifier-seq</I> is <I>extern const unsigned int</I>.<P>
But that rule is not sufficient to complete the ban. The draft also states:<P>
<BLOCKQUOTE>
At least one type-specifier is required in a typedef declaration. At least one type-specifier is required in a function declaration unless it declares a constructor, destructor or type conversion operator.<P>
</BLOCKQUOTE>
One possibly unpopular consequence of the ban is that<P>
<pre>main()
{
    ...
}</pre>
is no longer valid C++. I, for one, am delighted.<P>
<h4><FONT COLOR="#000080"><A name="013A_00C6">Initializers of the Form <B><I>T()</I><A name="013A_00C6"></B></FONT></h4></P>
In C++, you can construct temporary objects on-the-fly using function-style casts of the form<P>
<pre>simple-type-specifier ( expression-list-opt )</pre>
For example, in<P>
<pre>complex z;
...
z = 2 * complex(3, 1) + 1;</pre>
<I>complex(3, 1)</I> is a function-style cast that yields an object of type <I>complex</I> initialized by a constructor that accepts <I>3</I> and <I>1</I> as actual arguments.<P>
The expression list in a function-style is optional. According to the ARM:<P>
<BLOCKQUOTE>
If the type is a class with a suitably declared constructor that constructor will be called; otherwise the result is an undefined value of the specified type.<P>
</BLOCKQUOTE>
For example, if class complex has a default constructor, then<P>
<pre>z = complex();</pre>
initializes a temporary <I>complex</I> object using its default constructor, and copies that object to <I>z</I> (by assignment). On the other hand,<P>
<pre>int i;
...
i = int();</pre>
assigns an unspecified value to <I>i.</I><P>
Bjarne Stroustrup, the inventor of C++, suggested changing the behavior of function-style casts so that <I>T()</I> has a specified value for every type <I>T</I>. In particular, he suggested that <I>T()</I> should yield the value that a static <I>T</I> object has by default (typically zero for scalars). For example, <I>int()</I> yields zero because that's the default initial value for <I>i</I> defined as<P>
<pre>static int i;</pre>
Stroustrup requested this change because he wanted to be able to write template classes that construct all their members with sane values. For example, given<P>
<pre>template &lt;class T&gt;
class C
    {
public:
    C();
    //...
private:
    T m;
    int i;
    };</pre>
the constructor<P>
<pre>C::C() : i(0), m(T()) { }</pre>
uses <I>T()</I> to specify a reasonable initial value for member <I>m</I> using any type <I>T</I>, be it a class or scalar. The committees adopted the change.<P>
Earlier this year, the committees refined the rules for <I>T()</I> and extended them to cover <I>T()</I> occurring in a new expression, such as<P>
<pre>T *p = new T();</pre>
and to cover a ctor-initializer of the form <I>T()</I>, as in<P>
<pre>X::X() : T() { }</pre>
The draft now describes initialization for static objects differently than the ARM. The intent is to clarify the behavior described in the ARM, not to change it. The draft says:<P>
<BLOCKQUOTE>
The storage for objects with static storage duration is zero-initialized before any other initialization takes place.<P>
</BLOCKQUOTE>
It later explains that:<P>
<BLOCKQUOTE>
To zero-initialize storage for an object of type <I>T</I> means:<P>
<UL><li>if <I>T</I> is a scalar or pointer-to-member type, the storage is set to the value of 0 (zero) converted to <I>T</I>;</li>
<li>if <I>T</I> is a non-union class type, the storage for each nonstatic data member and each base-class subobject is zero-initialized;</li>
<li>if <I>T</I> is a union type, the storage for its first nonstatic data member is zero-initialized;</li>
<li>if <I>T</I> is an array type, the storage for each element is zero-initialized;</li>
<li>if <I>T</I> is a reference type, no initialization is performed.</li></UL>
</BLOCKQUOTE>
This just spells out in greater detail what it means to initialize static storage to zero.<P>
The draft then describes the meaning of the function-style cast <I>T()</I> in terms of default initialization:<P>
<BLOCKQUOTE>
The expression <I>T()</I>, where <I>T</I> is a simple-type-specifier, creates an rvalue of the specified type, whose value is determined by default-initialization.<P>
</BLOCKQUOTE>
where default initialization is defined in terms of zero initialization:<P>
<BLOCKQUOTE>
To default-initialize an object of type T means:<P>
<UL><li>if T is a non-POD class type, the default constructor for T is called (and the initialization is ill-formed if T has no accessible default constructor);</li>
<li>if T is an array type, each element is default-initialized;</li>
<li>otherwise, the storage for the object is zero-initialized.</li></UL>
</BLOCKQUOTE>
(A POD is a class with no user-declared constructors, no private or protected members, no base classes, no virtual functions, references and no pointers to members. I described POD types in "Stepping Up to C++: Even More Minor Enhancements," <I>CUJ</I>, May 1995.)<P>
Essentially, the above rules specify in detail the behavior for <I>T()</I> that Stroustrup requested. In short, <I>T()</I> either calls a constructor or zero-initializes the temporary as if it were static.<P>
The draft now also makes a subtle distinction between<P>
<pre>T *p = new T; // 1</pre>
and<P>
<pre>T *p = new T(); // 2</pre>
If <I>T</I> is a non-POD class type, these two forms for a <I>new</I> expression have the same effect. This is not a change from the ARM. But, if <I>T</I> is a POD type or a scalar, then <I>// 1</I> above leaves the allocated object uninitialized, while <I>// 2</I> applies default-initialization to the object. This is a change.<P>
The draft makes a similar distinction between omitting a ctor-initializer and writing an explicit initializer of the form <I>T().</I> For example, given<P>
<pre>class X
    {
public:
    X();
private:
    T m;
    };</pre>
under the current rules of C++, if <I>T</I> is a non-POD class type, then it doesn't matter whether you define the constructor as<P>
<pre>X::X() { }       // 3</pre>
or as<P>
<pre>X::X() : m() { } // 4</pre>
In either case, <I>X()</I> applies <I>T</I>'s default constructor to <I>m</I>. This is not a change. However, if <I>T</I> is a POD type or a scalar, then <I>// 3</I> above leaves <I>m</I> uninitialized, but <I>// 4</I> applies default initialization to <I>m</I>. This is a change.<P>
<h4>References</FONT></h4></P>
<a name="1"></a>[1]     Margaret A. Ellis and Bjarne Stroustrup, <I>The Annotated C++ Reference Manual</I> (Addison-Wesley, 1990).<P>
</BLOCKQUOTE>
</BODY>
</HTML>
