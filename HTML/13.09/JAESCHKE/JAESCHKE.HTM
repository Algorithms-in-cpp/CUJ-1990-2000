

<HTML>
<HEAD>

<TITLE>September 1995/Internationalization: A Primer</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocsep.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">Internationalization: A Primer<A name="0132_00B9"><A name="0132_00B9"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0132_0000"><A name="0132_0000">Rex Jaeschke</font></h3><hr><blockquote><P>
<P><i><A name="0132_0000"><A name="0132_0000">Rex Jaeschke is an independent computer consultant, author, and seminar leader. He is chair of the ANSI C committee X3J11. Readers may contact Rex at 2051 Swans Neck Way, Reston, VA 22091 or via UUCP at rex@aussie.com.</i></P><P>
<I>This is the first in a two-part series covering software internationalization support available in Standard C.</I><P>
<h4><FONT COLOR="#000080"><A name="0132_00BA">Introduction<A name="0132_00BA"></FONT></h4></P>
Prior to the standardization of C, C programs executed in what amounted to as a "USA-English" environment. For example, <I>isupper</I> returned true only for the Roman letters A-Z, the decimal-point character printed by <I>printf</I> was the period, and dates were formatted as <I>mm/dd/yy</I>.<P>
As a result of standardization, the behavior of various standard library functions is now described in terms of the execution environment, which can be changed at run time. For example, the <I>is*</I> and <I>to*</I> functions in <I>ctype.h</I> can properly handle local characters, the <I>printf</I> and <I>scanf</I> families can deal with decimal points other than a period, and local date and time formats are permitted.<P>
A major addition to C was the ability to allow characters in other alphabets to be used inside character constants, comments, header names, and string literals. (However, letters in identifiers are still restricted to the Roman alphabet, and arithmetic constants must use digits from the Arabic number system.) A handful of new functions were defined to deal with interpreting and/or converting multibyte and wide characters.<P>
Soon after the initial ISO C Standard was published, work began on an addendum to that standard. The primary purpose of this addendum was to provide further support for multibyte and wide characters. This support was achieved via new headers, which contain macros, type definitions, and functions. The addendum is known officially as ISO C Amendment 1.<P>
This article describes only the support Standard C provides for achieving internationalization. It does not attempt to describe a strategy for achieving internationalization.<P>
<h4><FONT COLOR="#000080"><A name="0132_00BB">Definition of Terms<A name="0132_00BB"></FONT></h4></P>
Before we can discuss internationalization in detail or even look at programming examples, it is necessary to define a number of terms, many of which are interrelated.<P>
<UL><li>Byte &#151; The unit of data storage large enough to hold any member of the basic execution character set.</li>
<li>Category &#151; One of a number of components that, when combined, describe a locale.</li>
<li><I>char</I> &#151; An integral type whose range of values can represent distinct codes for all members of the basic execution character set. The <I>sizeof</I> operator produces the size of its operand, measured in bytes. Since <I>sizeof(char)</I> is one by definition, an object of type <I>char</I> occupies exactly one byte.</li>
<li>Character &#151; A bit representation that fits in a byte. Each member of the basic source and basic execution character sets must fit into a byte.</li>
<li>Character constant &#151; A sequence of one or more multibyte characters enclosed in single-quotes, as in <I>'x'</I>.</li>
<li>Comment &#151; A sequence of zero or more multibyte characters enclosed between/* and */.</li>
<li>Encoding scheme &#151; A set of rules for parsing a stream of bytes into a group of coded characters. The meaning of a multibyte character can vary if the encoding scheme provides state-dependent encoding via shift sequences. Standard C requires that no encoding scheme have a byte with value zero as the second or subsequent byte of a multibyte character. This restriction allows many of the traditional string manipulation functions to be used transparently with strings containing multibyte characters. Encoding schemes for wide characters are quite simple &#151; all characters have the same internal width and each character has a unique value. Examples of encoding schemes are: ASCII, EBCDIC, EUC, JIS, Shif-JIS, Unicode, 10646.UCS-2, and 10646.UCS-4.</li>
<li>Execution character set &#151; The set of characters available for use during execution of a program. The basic execution character set must include all of the characters in the basic source character set, the null character, and control characters representing alert, backspace, carriage return, form feed, and new-line. The members of the extended execution character set are locale-specific and may be single-byte or multibyte characters.</li>
<li>Header name &#151; A sequence of one or more multibyte characters that identifies the name of a header used as the subject of an <I>#include</I> preprocessor directive.</li>
<li>Locale &#151; A set of conventions based on some nationality, culture, or language. A locale is made up of a set of categories.</li>
<li>Locale-specific behavior &#151; Behavior pertaining to a particular locale. Examples include the decimal-point character and date and time formats.</li>
<li>Mixed locale &#151; A composite locale comprised of a set of conventions representing two or more distinct nationalities, cultures, or languages. For example, a Swiss locale might include some German aspects as well as some French and/or Italian aspects.</li>
<li>Multibyte character &#151; A character from the execution character set that may require more than a single byte for its representation. Examples include character sets that accommodate Japanese, Chinese, Korean, and Arabic alphabets. Multibyte characters can appear in character constants, comments, header names, and strings literals.</li>
<li>Multibyte character string &#151; A sequence of zero or more multibyte characters terminated by, and including, a null character.</li>
<li>Null character &#151; A byte with all bits set to zero.</li>
<li>Null wide character &#151; A wide character with all bits set to zero.</li>
<li>Shift sequence &#151; A sequence of one or more single-byte characters that indicate a change in encoding. When a sequence of multibyte characters is being scanned, the detection of a shift sequence causes the characters following to be interpreted differently until the shift state is changed (possibly by restoring to the original state) or the end of the character sequence is reached. All comments, string literals, character constants, and header names are required to begin and end in their initial shift state. In the initial shift state, the single-byte characters you use to write a C program (from the basic source character set, described below) have their usual meaning &#151; they do not alter the shift state. A redundant shift sequence is one that is followed immediately by another shift sequence or is one that switches to the (already) current mode.</li>
<li>Single-byte character &#151; A character from the execution character set that can be represented in a single byte. Examples of character sets made up entirely of single-byte characters are ASCII and EBCDIC.</li>
<li>Source character set &#151; The set of characters available for use in writing source code. The basic source character set must include the 52 uppercase and lowercase letters from the English alphabet, the digits 0-9, the graphic characters <I>! "# % &amp; ' ( ) * + , - . / : ; &lt; = &gt; ? [ \ ] ^_ { | } ~</I>, the space character, and control characters representing horizontal tab, vertical tab, and form feed. If any other characters are seen except inside character constants, comments, header names, and string literals, the behavior is undefined. The extended source character set may include other single-byte and/or multibyte characters.</li>
<li>String &#151; A sequence of zero or more multibyte characters terminated by, and including, a null character.</li>
<li>String literal &#151; A sequence of zero or more multibyte characters enclosed in double-quotes, as in <I>"xyz"</I>.</li>
<li><I>wchar_t</I> &#151; An integral type whose range of values can represent distinct codes for all members of the largest extended execution character set specified among the supported locales. This is the type of a wide character. If all character sets used are single-byte, an implementation may define <I>wchar_t</I> as a synonym for <I>char</I>.</li>
<li>Wide character &#151; An object capable of representing distinct codes for all members of the largest extended execution character set specified among the supported locales. A wide character has type <I>wchar_t</I>. Unlike a multibyte character, each wide character takes up the same amount of storage. One character set based on wide characters is Unicode, a subset of the code defined by ISO 10646. When represented as a wide character, the null character shall have the code value zero.</li>
<li>Wide character constant &#151; A sequence of one or more multibyte characters enclosed in single-quotes and prefixed with <I>L</I>, as in <I>L 'x'</I>.</li>
<li>Wide character string &#151; A sequence of zero or more wide characters terminated by, and including, a null wide character.</li>
<li>Wide character string literal &#151; A sequence of zero or more multibyte characters enclosed in double-quotes and prefixed with <I>L</I>, as in <I>L"xyz"</I>.</li></UL>
<h4><FONT COLOR="#000080"><A name="0132_00BC">Locales<A name="0132_00BC"></FONT></h4></P>
Two locales are defined by Standard C: <I>"C"</I> and the implementation-defined native locale <I>"".</I> (An implementation that provides the bare minimum locale support will make the native locale <I>""</I> the same as locale <I>"C"</I>.) Any number of other locales are permitted, with arbitrary names.<P>
At program startup, the default locale is <I>"C".</I> Changing one or more categories of a locale to something other than <I>"C"</I> requires a call to the function <I>setlocale</I>, declared in <I>locale.h.</I><P>
<h4><FONT COLOR="#000080"><A name="0132_00BD">A Simple Example<A name="0132_00BD"></FONT></h4></P>
<A href="list1.htm">Listing 1</a>
shows a program that performs a number of locale-specific operations based on a user-specified locale.<P>
<A href="list2.htm">Listing 2</a>
shows several sets of input and their (possible) corresponding output. How they actually appear depends on the implementation.<P>
In case 1, the locale name is entered and the terminating new-line discarded. In the implementation used to build the examples in this article (Microsoft's Windows NT), 'american', 'french', 'german', 'spanish', and 'swedish' are valid locale names.<P>
Since the category macro <I>LC_ALL</I> is used, the call to <I>setlocale</I> in case 2 attempts to establish the user-specified locale as the current default for all locale categories. If this is not possible, the function returns a null pointer.<P>
In case 3, the program calls <I>getchar</I> to read a single character from the input. Since <I>isalpha</I> is locale-specific, letters other than Roman A-Z and a-z can be accepted, as shown by the output from case 4.<P>
The output from case 5 shows that <I>printf</I> is also locale-specific. In some countries, the comma is used as the decimal-point character.<P>
The function <I>strftime</I> provides date and time information formatted in a locale-specific manner. As shown, the day, month, and year order and separators can vary from one country to another. Also, users can get day and month names in their native language.<P>
<h4><FONT COLOR="#000080"><A name="0132_00BE">Approaches to Using Locales<A name="0132_00BE"></FONT></h4></P>
You can use locales three different ways:<P>
<UL><li>Never call <I>setlocale</I> at all. By default, all processing will be done using locale <I>"C"</I>, giving a "USA-English" mode of operation. This approach is simple; it's what we've had these past 20+ years.</li>
<li>At the start of <I>main</I>, call <I>setlocale(LC_ALL, "")</I> once to establish all categories to the native locale, whatever that may be. This approach is fairly straightforward; all locale-specific functions do their thing and you work in (presumably) your native environment. However, you should consider the case where a program built using this approach is run in an environment where the native locale is unknown. Will the program behave in a reasonable manner or did you hardcode something that really is locale-specific?</li>
<li>Use multiple locales by switching some or all categories back and forth from one locale to another. This approach requires more care since you must keep careful track of the current mode of each locale category as you go, making sure to not make unreasonable assumptions along the way. Another concern is whether all locales are known in advance to the programmer or whether one or more are supplied at run time.</li></UL>
<h4><FONT COLOR="#000080"><A name="0132_00BF">Locale Names<A name="0132_00BF"></FONT></h4></P>
The spelling of a locale name is unspecified by Standard C; a locale name is simply an implementation-defined string. As such, it may contain multibyte characters. Consider the case of a locale designed to support data processing in Germany. A few possible spellings for that locale's name are <I>"german", "deutsch", "deitser", "alemn"</I>, and <I>"allemand"</I>, along with their uppercase equivalents or with leading capital letters. It depends on the programmers' cultural background and native language as to which form they would prefer or expect to see or use.<P>
Hard-coding locale names is probably a bad idea, particularly if portability is an issue. If not, you might question this advice. However, consider the case where your implementation does not support a locale that you need. If that implementation provides a way to add locales, the locale may come from another vendor or user. And its name may be out of your control. Of course, if that implementation does not provide a way to integrate third-party locales, you may have to move to one that does, and that is a port!<P>
In any event, for the purposes of this discussion we will use a header called <I>"locnames.h"</I> which contains macros whose names are of the form <I>LOC_*.</I> For example:<P>
<pre>#define LOC_Ameri can "american"
#define LOC_Arabic    "arabic"
...
#define LOC_French    "french"
#define LOC_German    "german"
...
#define LOC_Spanish   "spanish"
#define LOC_Swiss     "swiss"</pre>
This user-defined and maintained header can contain conditional-compilation directives as necessary, to accommodate different locale name spellings.<P>
Clearly, it is useful to hide the real locale name spelling from the programmer. However, when the value of a locale name macro is displayed directly, the user will see the underlying spelling. If that is undesirable, the name of the macro can be displayed instead, as shown in <A href="list3.htm">Listing 3</a>.
<P>
The macro <I>STR</I> is defined in <I>"locnames.h"</I> using:<P>
<pre>#define STR(x) #x</pre>
The possible outputs now become:<P>
<pre>Established locale LOC_German</pre>
or<P>
<pre>Can't establish locale LOC_German</pre>
<h4><FONT COLOR="#000080"><A name="0132_00C0">Locale Categories<A name="0132_00C0"></FONT></h4></P>
A locale can be established for all locale-specific operations or for just a subset, depending on the category specified in a call to <I>setlocale.</I> Standard C defines six category macros in <I>locale.h:</I><P>
<UL><li><I>LC_ALL</I> &#151; This category includes all other categories.</li>
<li><I>LC_COLLATE</I> &#151; This category affects the behavior of the <I>strcoll</I> and <I>strxfrm</I> functions.</li>
<li><I>LC_CTYPE</I> &#151; This category affects the behavior of the character handling functions with the exception of <I>isdigit</I> and <I>isxdigit.</I> It also affects the behavior of the multibyte functions.</li>
<li><I>LC_MONETARY</I> &#151; This category affects the monetary formatting information returned by the function <I>localeconv.</I></li>
<li><I>LC_NUMERIC</I> &#151; This category affects the decimal-point character for the formatted I/O functions (such as <I>printf</I> and <I>scanf</I>) and the string conversion functions (such as <I>atof</I> and <I>strtod</I>), as well as the non-monetary formatting information returned by the function <I>localeconv</I>.</li>
<li><I>LC_TIME</I> &#151; This category affects the behavior of the <I>strftime</I> function.</li></UL>
These macros expand to integral constant expressions having distinct values. An implementation may define additional category macros provided their names begin with the characters <I>LC_</I> followed by an uppercase letter. (The POSIX standard defines a category called <I>LC_MESSAGES</I> which allows the user to find out the spelling of the affirmative and negative response to a yes/no question.)<P>
A mixed locale can be established by calling <I>setlocale</I> a number of times, once per category. For example:<P>
<pre>setlocale(LC_COLLATE, LOC_German);
setlocale(LC_CTYPE, LOC_French);
setlocale(LC_NUMERIC, LOC_Italian);</pre>
[More recent standards based on C locales let you talk about groups of categories by ORing these constants, as in <I>LC_COLLATE/LC_CTYPE.</I> But the C Standard does not make clear that this is always permissible. &#151; pjp]<P>
<h4><FONT COLOR="#000080"><A name="0132_00C1">The <B><I>setlocale</I></B> Function<A name="0132_00C1"></FONT></h4></P>
When a call to <I>setlocale</I> succeeds, it returns a pointer to the string associated with the specified locale name and category combination. Let us call such a string a locale string. The format of a locale string is unspecified by Standard C. <A href="list4.htm">Listing 4</a>
shows a program that displays several such locale strings.<P>
The output produced on one implementation that supported a French locale was:<P>
<pre>|C|
|French_France.850|
|C|
|LC_COLLATE=C;LC_CTYPE=French_France.850; LC_MONETARY=C;
   LC_NUMERIC=C;LC_TIME=C|</pre>
(The last <I>printf</I> output is broken after semicolons to fit column width.)<P>
When <I>setlocale</I> is called with a locale name of <I>NULL,</I> the locale string for the specified category in the current locale is returned. The category is not changed. Since the default locale at program startup is <I>"C"</I>, the output produced in cases 1 and 3 is not surprising. (It is also not guaranteed by the C Standard, however.)<P>
The output produced in cases 2 and 4 is, of course, specific to the implementation. When case 4 is executed, a mixed locale has already been established. Therefore, the locale string returned in this case must somehow include a description of that mixed locale.<P>
The locale string produced for a given locale name and category combination can be used as the locale name in a subsequent call to <I>setlocale</I> for the same category. For example, <A href="list5.htm">Listing 5</a>
shows the function <I>handle_dates</I>, which temporarily switches to Spanish date/time processing and then restores the original mode.<P>
Assuming <I>setlocale</I> and <I>malloc</I> don't fail, the output produced is:<P>
<pre>Saved current LC_TIME
Established LOC_Spanish LC_IME
Doing LOC_Spanish-specific date/time processing
Restored saved LC_TIME</pre>
The memory allocated for a locale string is managed by the library. Since it may be recycled in subsequent calls to <I>setlocale,</I> it is the user's responsibility to make a copy for later use, as shown in cases 2 and 3.<P>
There is no way to identify which locale is currently established. Since the format of a locale string is unspecified there is not even a guarantee that the locale strings produced by two calls to <I>setlocale</I> using the same arguments, compare equal.<P>
<h4><FONT COLOR="#000080"><A name="0132_00C2">The <B><I>localeconv</I></B> Function<A name="0132_00C2"></FONT></h4></P>
The header <I>locale.h</I> contains a definition for the type <I>struct lconv</I> whose members provide access to information regarding the formatting of monetary and non-monetary numeric values. Standard C requires that the following members be defined:<P>
<UL><li><I>char *decimal_point</I> &#151; The decimal-point character used to format non-monetary quantities.</li>
<li><I>char *thousands_sep</I> &#151; The character used to separate groups of digits before the decimal-point character in formatted non-monetary quantities.</li>
<li><I>char *grouping </I>&#151; A string whose elements indicate the size of each group of digits in formatted non-monetary quantities.</li>
<li><I>char *int_curr_symbol</I> &#151; The international currency symbol applicable to the current locale. The first three characters contain the alphabetic international currency symbol. The fourth character is the character used to separate the international currency symbol from the monetary quantity. The fifth character is a null character.</li>
<li><I>char *currency_symbol</I> &#151; The local currency symbol applicable to the current locale.</li>
<li><I>char *mon_decimal point</I> &#151; The decimal-point used to format monetary quantities.</li>
<li><I>char *mon_thousands_sep</I> &#151; The separator for groups of digits before the decimal-point character in formatted monetary quantities.</li>
<li><I>char *mon_grouping</I> &#151; A string whose elements indicate the size of each group of digits in formatted monetary quantities.</li>
<li><I>char *positive_sign</I> &#151; The string used to indicate a nonnegative-valued formatted monetary quantity.</li>
<li><I>char *negative_sign</I> &#151; The string used to indicate a negative-valued formatted monetary quantity.</li>
<li><I>char int_frac_digits</I> &#151; The number of fractional digits (those after the decimal-point) to be displayed in an internationally formatted monetary quantity.</li>
<li><I>char frac_digits</I> &#151; The number of fractional digits (those after the decimal-point) to be displayed in a locally formatted monetary quantity.</li>
<li><I>char p_cs_precedes</I> &#151; Set to 1 or 0 if the <I>currency_symbol</I> respectively precedes or succeeds the value for a nonnegative formatted monetary quantity.</li>
<li><I>char p_sep_by_space</I> &#151; Set to 1 or 0 if the <I>currency_symbol</I> respectively is or is not separated by a space from the value for a nonnegative formatted monetary quantity.</li>
<li><I>char n_cs_precedes</I> &#151; Set to 1 or 0 if the <I>currency_symbol</I> respectively precedes or succeeds the value for a negative formatted monetary quantity.</li>
<li><I>char n_sep_by_space</I> &#151; Set to 1 or 0 if the <I>currency_symbol</I> respectively is or is not separated by a space from the value for a negative formatted monetary quantity.</li>
<li><I>char p_sign_posn</I> &#151; Set to a value indicating the positioning of the <I>positive_sign</I> for a nonnegative formatted monetary quantity.</li>
<li><I>char n_sign_posn</I> &#151; Set to a value indicating the positioning of the <I>negative_sign</I> for a negative formatted monetary quantity.</li></UL>
The elements of <I>grouping</I> and <I>mon_grouping</I> are interpreted according to the following conventions:<P>
<UL><li><I>CHAR_MAX</I> &#151; No further grouping is to be performed.</li>
<li><I>0</I> &#151; The previous element is to be repeatedly used for the remainder of the digits.</li>
<li>other &#151; The integer value is the number of digits that comprise the current group. The next element is examined to determine the size of the next group of digits before the current group.</li></UL>
The value of <I>p_sign_posn</I> and <I>n_sign_posn</I> is interpreted according to the following:<P>
<UL><li><I>0 </I>&#151; Parentheses surround the quantity and <I>currency_symbol</I>.</li>
<li><I>1 </I>&#151; The sign string precedes the quantity and <I>currency_symbol</I>.</li>
<li><I>2 </I>&#151; The sign string succeeds the quantity and <I>currency_symbol</I>.</li>
<li><I>3 </I>&#151; The sign string immediately precedes the <I>currency_symbol</I>.</li>
<li><I>4 </I>&#151; The sign string immediately succeeds the <I>currency_symbol</I>.</li></UL>
Any of the pointer members except <I>decimal_point</I> can point to an empty string, which indicates the value is not available in the current locale or is of zero length. In the "<I>C</I>" locale, the decimal-point character is a period and all other pointer members point to an empty string.<P>
The members having type <I>char</I> contain nonnegative values. If a value of <I>CHAR_MAX</I> is present, it indicates that the real value is not available in the current locale. In the "<I>C</I>" locale, these members all have value <I>CHAR_MAX</I>.<P>
The structure may contain other members. The ordering of members is unspecified.<P>
A call to <I>localeconv</I> returns a pointer to a structure of type <I>struct Iconv</I>, which contains values corresponding to the current locale. This structure may be overwritten by future calls to <I>localeconv</I> or by calls to <I>setlocale</I> that refer to the categories <I>LC_ALL</I>,<I> LC_MONETARY</I>, or <I>LC_NUMERIC</I>. (Note, however, that saving a copy of this structure is insufficient to save the complete numeric formatting description, since the strings pointed to by the <I>char</I> * members might also be overwritten by subsequent calls to those functions.)<P>
<A href="list6.htm">Listing 6</a>
shows a call to <I>localecony</I> and the subsequent display of two of the structure members' contents.<P>
The output produced is:<P>
<pre>Locale: LOC_French
decimal_point:   ,
int_curr_symbol: FRF</pre>
<h4><FONT COLOR="#000080"><A name="0132_00C3">The <B><I>strcoll</I></B> Function<A name="0132_00C3"></FONT></h4></P>
This function works just like <I>strcmp</I> except that <I>strcoll</I> uses a collating sequence established via the <I>LC_COLLATE</I> category. <A href="list7.htm">Listing 7</a>
shows an example program.<P>
Two inputs and their (possible) corresponding outputs are:<P>
<pre>Enter two strings: e &ecirc;
e &lt; &ecirc;

Enter two strings: &ecirc; f 
&ecirc; &lt; f</pre>
As shown by the outputs,  sorts between e and f, just as the French would want.<P>
<h4><FONT COLOR="#000080"><A name="0132_00C4">More to Come<A name="0132_00C4"></FONT></h4></P>
In the next installment I will deal with more internationalization issues, such as multibyte characters and ISO C Amendment 1.<P>
<h4><FONT COLOR="#000080"><A name="0132_00C5">Recommended Reading<A name="0132_00C5"></FONT></h4></P>
The following books and publications will likely be of use to C programmers interested in further information on internationalization:<P>
     <I>ANSI/ISO 9899:1990 Programming Language C.</I> American National Standards Institute, New York, NY. 1990, 219 pp.<P>
     <I>ANSI/ISO 9899:1990 Programming Language C: Amendment 1.</I> American National Standards Institute, New York, NY. 1995, 52 pp.<P>
     <I>Digital Guide to Developing International Software</I>. Digital Press, Bedford, MA. 1991, 381 pp., ISBN 55558-063-7.<P>
     Lunde, Ken. <I>Understanding Japanese Information Processing</I>. O'Reilly &amp; Associates, Sebastopol, CA. 1993, 435 pp., ISBN 1-56592-043-0.<P>
     Madell, Tom, Clark Parsons, and John Abegg. <I>Developing and Localizing International Software</I>. Hewlett-Packard Professional Books/Prentice Hall, Englewood Cliffs, NJ. 1994, 150 pp., ISBN 0-13-300674-3.<P>
     Plauger, P.J., regular column in <I>The C/C++ Users Journal</I>. R&amp;D Publications, Lawrence, KS. 1990-1994.<P>
     Plauger, P.J., regular column in <I>The Journal of C Language Translation</I>. IECC, Cambridge, MA. 1990-1994, ISSN 1042-5721.<P>
     Gallmeister, Bill O., <I>POSIX.4: Programming for the Real World</I>. O'Reilly &amp; Associates, Inc., Sebastopol, CA. 1995, ISBN 1-56592-074-0.<P>
     The Unicode Consortium. <I>The Unicode Standard: Worldwide Character Encoding</I>, Version 1.0, Volume 1. Addison-Wesley, Reading, MA. 1990, 682 pp., ISBN 0-201-56788-1.<P>
     The Unicode Consortium. <I>The Unicode Standard: Worldwide Character Encoding</I>, Version 1.0, Volume 2. Addison-Wesley, Reading, MA. 1992, 439 pp., ISBN 0-201-60845-6.<P>
     The Unicode Consortium. <I>The Unicode Standard</I>, Version 1.1. Changes from Version 1 in draft form from The Unicode Consortium. 1994.<P>

<h4><a href="../../../source/1995/sep95/jaeschke.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
