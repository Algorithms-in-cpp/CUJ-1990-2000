



<HTML><HEAD>

<TITLE>December 1996/Cross-Platform/Embedded Thread Design/Listing 3</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4>Listing 3:	WinThread.cpp &#151; Win32 multithreading implementation</h4>

<pre>

#include "WinThread.h"

DWORD __stdcall AWinThread::EntryPoint(void* p) {
   AWinThread* ptr = (AWinThread*) p;
   ptr-&gt;Run();
   ptr-&gt;SetDeadState();
   return 0;
}

AWinThread::AWinThread() {
   DWORD ptr;

   ::InitializeCriticalSection(&amp;mHandleLock);
   mThread = ::CreateThread(NULL, 0, EntryPoint,
      (LPVOID)this, CREATE_SUSPENDED, &amp;ptr);

   if (mThread == NULL) mState = DEAD;
   else {
      mState = RUN;
      ::ResumeThread(mThread);
   }
}

AWinThread::~AWinThread() {
   if (mState != DEAD) Kill(TRUE);
   ::DeleteCriticalSection(&amp;mHandleLock);
}

void AWinThread::Kill(bool force) {
   LockHandle();
   if (mThread) {
      if (force) {
         ::TerminateThread(mThread, 0);
         mState = DEAD;
         mThread = NULL;
      }
      else mState = TERMINATE;
   }
   UnlockHandle();
}

void AWinThread::CheckStatus() {
   LockHandle();
   if (mState == TERMINATE) {
      mState = DEAD;
      mThread = NULL;
      UnlockHandle();
      ::ExitThread(0);
   }
   UnlockHandle();
}
//End of File
</pre>
</body></html>
