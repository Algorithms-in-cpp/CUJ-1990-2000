






<HTML>
     
     <HEAD>


          
          <TITLE>December 1996/C++ Theory and Practice</TITLE>
     </HEAD>
     
     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          
          <H2><FONT COLOR="#FF0000"><A href="../tocdec.htm"><IMG src="../../toc.gif" ALT="Back to TOC" WIDTH="54" HEIGHT="54"></A>
          Columns</FONT></H2>
          
          <HR>
          
          <H2 ALIGN="center"><FONT COLOR="#800000">C++ Theory and Practice</FONT></H2>
          
          <H3 ALIGN="center"><FONT COLOR="#800000">
          <FONT FACE="">Dan Saks</FONT></FONT></H3>
          
          <H3 ALIGN="center"><FONT COLOR="#800000"> Mixing const with Type
          Names</FONT></H3>
          
          <BLOCKQUOTE>
               
               <P><FONT> Typedefs can simplify declarations, but they don't
                    remove the need to understand declaration syntax. Dan shows
                    why, and adds some comments on style.</p>
               
               <P><FONT>Copyright &copy; 1996 by Dan Saks</p></BLOCKQUOTE>
          <HR>
          <BLOCKQUOTE>
               
               <p>Last month, I attempted to clarify
                    what I believe are some common misconceptions about the
                    meaning of the const qualifier in C++ and C (see "C++
                    Theory and Practice: const as a Promise," CUJ, November
                    1996). This month I have some more thoughts on const,
                    particularly regarding the way it interacts with type names
                    in declarations. </p>
               
               <p> Over the past few months, I've
                    received some feedback about my past articles on C++
                    declarations (see "The C++ Column That Needs a Name:
                    Understanding C++ Declarations," CUJ, December 1995,
                    through "C++ Theory and Practice: Declarators, Finale,"
                    CUJ, October 1996). Most of it was positive, thank you.
                    However, one recent letter suggested that I did my readers a
                    disservice by suggesting that parsing C++ declarations is
                    easier than most people realize. The author recommended that
                    the better way to cope with complex declarations is to
                    compose them from simpler typedefs. </p>
               
               <p> I agree that typedefs are a good tool
                    for simplifying declarations, and you should use them. What
                    I want to show this month is that even when you use
                    typedefs, you still can't get away with ignoring the
                    underlying structure of C++ declarations. This is
                    particularly true when you combine typedef names with
                    cv-qualifiers (const and volatile) in declarations.</p>
               
               <h4><FONT COLOR="#000080">typedef vs. #define</FONT></H4>
               
               <p>Beginning C and C++ programmers often
                    confuse the behavior of typedef and #define. In many
                    situations, using a typedef name appears to have the same
                    effect as using a parameterless macro name. For example, you
                    can define a symbolic type such as handle as a macro:</p>

<PRE>

#define handle int  // a macro
</PRE>
               
               <p>or as a typedef name:</p>

<PRE>

// a typedef name
typedef int handle;
</PRE>
               
               <p>Either way, when you use handle in a
                    declaration such as</p>

<PRE>

handle open(const char *);
</PRE>
               
               <p>it appears that the compiler
                    substitutes int for handle. It's hard to see how the macro
                    differs from the typedef name.</p>
               
               <p>Here's the classic example that
                    exposes the difference. Consider the meaning of</p>

<PRE>

#define string char *   // a macro
</PRE>
               
               <p>as opposed to</p>

<PRE>

// a typedef name
typedef char *string;
</PRE>
               
               <p>when used in the declaration</p>

<PRE>

string s, t;
</PRE>
               
               <p>When string is a macro, the
                    preprocessor transforms the declarations for s and t into</p>

<PRE>

char *s, t;
</PRE>
               
               <p>which declares s as "pointer to
                    char" and t as just "char". Whoops. That's
                    probably not the intended result. When string is a typedef
                    name, the compiler applies the entire type "pointer to
                    char" to both s and t during the semantic analysis of
                    the declaration. That probably is the intended result.</p>
               
               <p>So typedef names do indeed come in
                    handy in simplifying complex declarations, and they do
                    eliminate many of the surprises you can get with macros. But
                    typedef names have their own little surprises, particularly
                    in how they combine with the cv-qualifiers const and
                    volatile. <BR>
                     For example, given</p>

<PRE>

typedef char *string;
</PRE>
               
               <p>the declaration</p>

<PRE>

const string s;
</PRE>
               
               <p>declares s as a "const pointer to
                    char", not as a "pointer to const char". In
                    other words, the declaration for s is equivalent to</p>
               
               <p></p>

<PRE>
char *const s;
</PRE>
               
               <p>not</p>

<PRE>

const char *s;
</PRE>
               
               <p>Here's how it happens. In the
                    declaration</p>

<PRE>

const string s;
</PRE>
               
               <p>const and string are decl-specifiers.
                    As I explained some months ago, the order of the
                    decl-specifiers in a declaration doesn't matter, at least
                    not as far as a compiler is concerned. (See "The Column
                    That Needs a Name: Understanding C++ Declarations,"
                    CUJ, December 1995.) Thus,</p>

<PRE>

const string s;
</PRE>
               
               <p>is equivalent to</p>

<PRE>

string const s;
</PRE>
               
               <p>It's s that is const, and s is a
                    string, which (in this example) is first and foremost a
                    pointer. Therefore it's the pointer that's const, not what
                    it points to.</p>
               
               <p>By the way, this problem is not
                    limited to just the C part of C++. It rears its head again
                    in the context of template type parameters. For example,
                    consider the template definition</p>

<PRE>

template &lt;class T&gt;
class X
    {
    ...
    const T m;
    ...
    };
</PRE>
               
               <p>If you instantiate the template using
                    X&lt;char *&gt;, then member m in that instantiation behaves
                    as if declared as</p>

<PRE>

char *const m;
</PRE>
               
               <p>rather than</p>

<PRE>

const char *m;
</PRE>
               
               <H4><FONT COLOR="#000080">Let's Talk Style</FONT></H4>
               <FONT COLOR="#000080"> </FONT>
               
               <p>This raises an interesting style
                    issue. Bobby Schmidt and I have been banging this one back
                    and forth for a while. Bobby came to a conclusion a while
                    ago, but I'm still waffling about what to do. </p>
               
               <p> Some months ago I suggested to Bobby
                    that, since people tend to want to substitute typedef names
                    into declarations as if they were macros, maybe we should
                    start to encourage people to place const as the rightmost
                    specifier when it appears in a decl-specifier sequence. That
                    is, although most people are accustomed to reading and
                    writing</p>

<PRE>

const string s;     // (1)
</PRE>
               
               <p>maybe we should write it as</p>

<PRE>

string const s;     // (2)
</PRE>
               
               <p>and urge others to do the same.</p>
               
               <p>The advantage of (2) is that, if you
                    mentally substitute char * for string (as if it were a
                    macro), then it becomes</p>

<PRE>
          char *const s;
</PRE>
               
               <p>which is the correct interpretation.
                    Substituting char * for string in (1) becomes</p>

<PRE>
const char *s;
</PRE>
               
               <p>which is incorrect ("Incorrect"
                    in the sense that your perception would be at odds with the
                    compiler's, in which case, you lose).</p>
               
               <p>Well, being the persuasive fellow that
                    I am, Bobby bought the argument right away. You may have
                    noticed that, for some time now, he has been writing
                    declarations such as</p>

<PRE>
char const *s
</PRE>
               
               <p>and</p>

<PRE>
int const N = 10;
</PRE>
               
               <p>rather than</p>

<PRE>

const char *s
</PRE>
               
               <p>and</p>

<PRE>

const int N = 10;
</PRE>
               
               <p>I, on the other hand, have not been
                    able to persuade myself to follow suit.</p>
               
               <p>In addition to making it easier to
                    accurately substitute typedef names into declarations,
                    placing the const on the right seems to have another nice
                    property -- it lets you read entire declarations, not just
                    pointer operators, from right to left. For example,</p>

<PRE>

T *const p;
</PRE>
               
               <p>declares p as a "const pointer to
                    T", which mentions const, the pointer operator (*), and
                    T as they appear from right to left in the declaration.
                    Similarly,</p>

<PRE>

T const *p;
</PRE>
               
               <p>declares p as a "pointer to const
                    T", which again mentions the *, const, and T as they
                    appear from right to left in the declaration.</p>
               
               <p>In contrast, you can't read the more
                    common style</p>

<PRE>

const T *p;
</PRE>
               
               <p>strictly from right to left. I don't
                    think I've ever heard anyone say p is a "pointer to T
                    const". I think the only way you can read this strictly
                    from right to left is as p is a "pointer to a T that's
                    const". But I don't think anyone says that either. Just
                    about everyone reads it as p is a "pointer to const T".</p>
               
               <p>If you buy this argument about reading
                    from right to left, then maybe it follows that you should
                    write the entire sequence of decl-specifiers in reverse
                    order. For example, you should declare what most people call
                    an "unsigned long int" variable by writing</p>

<PRE>

int long unsigned uli;
</PRE>
               
               <p>Again, the order doesn't matter to a
                    compiler, but I doubt many people would be willing to start
                    doing this just to be "consistent."</p>
               
               <p>Bobby said he doesn't find the ability
                    to read declarations strictly from right to left to be a
                    very compelling reason for placing the const on the right,
                    and that's cool, because I don't either. He started placing
                    the const on the right because he likes the way substituting
                    the type name as if it were a macro makes the type come out
                    right (as in the previous example using string as an alias
                    for char *). He's seen programmers make mistakes with const
                    and typedef, and this style helps avoid many of those
                    mistakes. </p>
               
               <p> I've been reluctant to start putting
                    the const on the right because I'm not sure I want to
                    encourage people to think of typedef names as macros. A
                    macro is a sequence of source text; a typedef name is a
                    symbol representing a bundle of compile-time type
                    attributes. The compiler processes them differently, and I'm
                    not sure that programmers should ever think of typedef names
                     as macros, particularly because it's easy to misinterpret
                    the typedef-as-macro conceptual model. But maybe it all
                    depends on how you present the model. </p>
               
               <p> For example, consider</p>

<PRE>
typedef char *(X::*pmf)();
</PRE>
               
               <p>when used in</p>

<PRE>

pmf const f;
</PRE>
               
               <p>If you think the typedef-as-macro
                    model suggests that you obtain the type of f by just
                    appending const to the end of the typedef, you will be
                    disappointed in the results. This yields</p>

<PRE>

char *(X::*)() const;
</PRE>
               
               <p>which has type "pointer to member
                    of X with type const member function with no parameters
                    returning pointer to char". And that's wrong.</p>
               
               <p>The correct interpretation comes from
                    substituting const f together in place of the typedef name
                    in the original typedef declaration, and then dropping the
                    keyword typedef. This yields</p>

<PRE>

char *(X::*const f)();
</PRE>
               
               <p>which means f has type "const
                    pointer to member of X with type function with no parameters
                    returning pointer to char".</p>
               
               <p>I really do believe the key insight in
                    understanding C++ (and C) declarations is understanding the
                    separate sub-structures of decl-specifier sequences and
                    declarators. You have no choice but to read declarators
                    inside-out according to the precedence rules. The order of
                    the decl-specifiers does not matter to the compiler. But,
                    since C and C++ are biased toward the English language, 
                    which reads words from left to right, most programmers put
                    the decl-specifiers in what they believe is the natural
                    order from left to right. </p>
               
               <p> What's natural? Probably what you
                    first saw others do. And you almost always see other people
                    put const to the left of the type name. </p>
               
               <p> But, cv-qualifiers (const and
                    volatile) are unique among the decl-specifiers in that they
                    can appear in a declarator as well. They are the only
                    decl-specifiers that you substitute along with the type name
                    when applying the typedef-as-macro conceptual model. For
                    example, when you use</p>

<PRE>

typedef char *string;
</PRE>
               
               <p>in</p>

<PRE>

extern const string s;
</PRE>
               
               <p>you take const s and substitute them
                    together in place of string in the typedef declaration. Drop
                    the typedef and that leaves you with</p>

<PRE>

char *const s;
</PRE>
               
               <p> Now substitute this back in place of
                    const string s in the original declaration for s, and you
                    get</p>

<PRE>

extern char *const s;
</PRE>
               
               <p>which is the correct interpretation of
                    the original declaration for s, above.</p>
               
               <p>The advantage of placing the const as
                    the rightmost decl-specifier, as in</p>

<PRE>

extern string const s;
</PRE>
               
               <p>is that it lets you think of string as
                    a macro, const s as the entire macro parameter, and extern
                    as merely the surrounding context of the "macro call."
                    And maybe that's a good conceptual model.</p>
               
               <p>I must confess, I really am thinking
                    out loud here. I have rewritten parts of this article
                    several times because I've actually changed my perception of
                    the problem as I've been writing. (Writing is very good at
                    clarifying things that way.) I started out thinking that I
                    was going to suggest continuing to place const on the left,
                    but now I find myself leaning toward putting it on the right
                     (as Bobby does). </p>
               
               <p> Well, maybe I just talked (or rather,
                    wrote) myself into it after all.</p>
               
               <p><I>Dan Saks is the president of Saks &amp;Associates,
                    which offers consulting and training in C++ and C. He is
                    secretary of the ANSI and ISO C++ committees. Dan is
                    coauthor of C++ Programming Guidelines, and codeveloper of
                    the Plum Hall Validation Suite for C++ (both with Thomas
                    Plum). You can reach him at 393 Leander Dr., Springfield OH,
                    45504-4906, by phone at +1-937-324-3601, or electronically
                    at dsaks@wittenberg.edu.</I></p> </BLOCKQUOTE>
     </BODY>
</HTML>
