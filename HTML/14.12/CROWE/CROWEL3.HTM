






<HTML>
     
     <HEAD>


          
          <TITLE>December 1996/Efficient Band Matrix Computations/Listing 3</TITLE>
     </HEAD>
     
     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          
          <H4>Listing 3: A class that supports Cholesky decomposition</H4>
          
          <BLOCKQUOTE>

<PRE>

#ifndef SPDBANDF_H
#define SPDBANDF_H

#include "bandstor.h"

template &lt;class T&gt; class SPDBandMatrixFactor : bandStorage&lt;T&gt;
{
private:

public:
    SPDBandMatrixFactor() {}
    SPDBandMatrixFactor(const int k) : bandStorage&lt;T&gt;(k) {}
    void factor(SPDBandMatrix&lt;T&gt;&amp;);
    vector&lt;T&gt; solve(vector&lt;T&gt;&amp;);
    T&amp; operator()(const int, const int);
    vector&lt;T&gt;&amp; diagonal(const int);
};

template &lt;class T&gt; T&amp; SPDBandMatrixFactor&lt;T&gt;::operator()(const int i,
                                                         const int j)
{
    if (i &gt; j)
        return bandStorage&lt;T&gt;::operator()(i,j);
    else
        return bandStorage&lt;T&gt;::operator()(j,i);
}

template &lt;class T&gt; vector&lt;T&gt;&amp; SPDBandMatrixFactor&lt;T&gt;::diagonal(const int i)
{
    return bandStorage&lt;T&gt;::diag(int(-fabs(i)));
}
template &lt;class T&gt; void SPDBandMatrixFactor&lt;T&gt;::factor(SPDBandMatrix&lt;T&gt; &amp;B)
{
    int i, j, k, lambda;
    int n = B.order();
    int bandWidth = -B.lowerBandWidth();
    T sqrtDiag;
    vector&lt;T&gt; tmp;

    for (i=0; i&lt;=bandWidth; i++)
        diagonal(i) = B.diagonal(i);

    this-&gt;upperBandWidth() = B.upperBandWidth();
    this-&gt;lowerBandWidth() = B.lowerBandWidth();

    for (j=1; j&lt;=n; j++){
        for (k=MAX(1, j-bandWidth); k&lt;=j-1; k++) {
            lambda = MIN(k+bandWidth, n);
            for (i=j; i&lt;=lambda; i++){
                (*this)(i-1,j-1) -= (*this)(j-1,
                    k-1)*(*this)(i-1,k-1);
                }
            }

        lambda = MIN(j+bandWidth, n);
        sqrtDiag = sqrt(T((*this)(j-1,j-1)));
        for (i=j; i&lt;=lambda; i++)
            (*this)(i-1,j-1) /= sqrtDiag;
    }
}

template &lt;class T&gt; vector&lt;T&gt; SPDBandMatrixFactor&lt;T&gt;::solve(vector&lt;T&gt; &amp;b)
{
    int n = order();
    vector&lt;T&gt; x(n);
    int i, j;
    int width = upperBandWidth() - lowerBandWidth();
    T sum;
    x = b;

// forward elimination

    for (i=1; i&lt;=n; i++) {
        sum = 0.0f;
        for (j=MAX(1,i-width); j&lt;=i-1; j++)
            sum += (*this)(i-1,j-1)*x[j-1];
        x[i-1] = (x[i-1] - sum)/(*this)(i-1,i-1);
        }

// back substitution

    for (i=n; i&gt;=1; i--) {
        sum = 0.0f;
        for (j=i+1; j&lt;=MIN(i+width,n); j++)
            sum += (*this)(j-1,i-1)*x[j-1];
        x[i-1] = (x[i-1] - sum)/(*this)(i-1,i-1);
        }
    return x;
}

#endif
//End of File
</PRE>  </BLOCKQUOTE>
     </BODY>
</HTML>
