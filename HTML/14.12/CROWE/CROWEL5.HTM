






<HTML>
     
     <HEAD>


          
          <TITLE>December 1996/Efficient Band Matrix Computations/Listing 5</TITLE>
     </HEAD>
     
     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          
          <H4>Listing 5: A class for tridiagonal matrices</H4>
          
          <BLOCKQUOTE>

<PRE>

#ifndef TRIDIAG_H
#define TRIDIAG_H

#include "bandstor.h"

template &lt;class T&gt; class tridiagonalMatrix : public bandStorage&lt;T&gt;
{
private:
    vector&lt;T&gt; c;
    vector&lt;T&gt; d;
    vector&lt;T&gt; e;

public:
    tridiagonalMatrix() {}
    tridiagonalMatrix(const int k) : bandStorage&lt;T&gt;(k)
        {lowerBandWidth() = -1; upperBandWidth() = 1;}
    tridiagonalMatrix&amp; operator=(const tridiagonalMatrix&amp;);
    vector&lt;T&gt;&amp; subDiagonal(void);
    vector&lt;T&gt;&amp; superDiagonal(void);
    vector&lt;T&gt;&amp; mainDiagonal(void);
    vector&lt;T&gt; solve(const vector&lt;T&gt;&amp;);
};
template &lt;class T&gt; tridiagonalMatrix&lt;T&gt;&amp;
tridiagonalMatrix&lt;T&gt;::operator=(const
tridiagonalMatrix&lt;T&gt;&amp; M)
{
    return operator=(M);
}

template &lt;class T&gt; vector&lt;T&gt;&amp; tridiagonalMatrix&lt;T&gt;::subDiagonal(void)
{
    return bandStorage&lt;T&gt;::diag(-1);
}

template &lt;class T&gt; vector&lt;T&gt;&amp; tridiagonalMatrix&lt;T&gt;::superDiagonal(void)
{
    return bandStorage&lt;T&gt;::diag(1);
}

template &lt;class T&gt; vector&lt;T&gt;&amp; tridiagonalMatrix&lt;T&gt;::mainDiagonal(void)
{
    return bandStorage&lt;T&gt;::diag(0);
}

template &lt;class T&gt; vector&lt;T&gt;
tridiagonalMatrix&lt;T&gt;::solve(const vector&lt;T&gt;&amp; b)
{
    vector&lt;T&gt; x;
    int n=order();

    int info;
    int k, kb, kp1, nm1, nm2;
    T t;

    x = b;
    c = vector&lt;T&gt;(n, 0.0);
    e = vector&lt;T&gt;(n, 0.0);

    for (k=0; k&lt;n-1; k++) {
        c[k+1] = subDiagonal()[k];
        e[k] = superDiagonal()[k];
        }
    d = mainDiagonal();

    info = 0;
    c[0] = d[0];
    nm1 = n-1;

    if (nm1 &gt;= 1) {

        d[0] = e[0];
        e[0] = 0.0;
        e[n-1] = 0.0;

        for (k=1; k&lt;=nm1; k++) {
            kp1 = k+1;

// find largest of two rows

            if (fabs(c[kp1-1]) &gt; fabs(c[k-1])) {

// interchange rows

                swap(c[kp1-1], c[k-1]);
                swap(d[kp1-1], d[k-1]);
                swap(e[kp1-1], e[k-1]);
                swap(x[kp1-1], x[k-1]);
                }

            if (c[k-1] == 0.0)
                throw ("zero diagonal encoutered in factorization");

            t = -c[kp1-1]/c[k-1];
            c[kp1-1] = d[kp1-1] + t*d[k-1];
            d[kp1-1] = e[kp1-1] + t*e[k-1];
            e[kp1-1] = 0.0;
            x[kp1-1] = x[kp1-1] + t*x[k-1];
            }
        }

    if (c[n-1] == 0.0)
        throw ("zero diagonal encoutered in factorization");

// Back solve

    nm2 = n-2;
    x[n-1] = x[n-1]/c[n-1];
    if (n &gt; 1) {
        x[nm1-1] = (x[nm1-1] - d[nm1-1]*x[n-1])/c[nm1-1];
        if (nm2 &gt; 1) {
            for (kb = 1; kb &lt;= nm2; kb++) {
                k = nm2 - kb + 1;
                x[k-1] = (x[k-1] - d[k-1]*x[k+1-1]
                    - e[k-1]*x[k+2-1])/c[k-1];
                }
            }
        }

    return x;
}
#endif
//End of File
</PRE>  </BLOCKQUOTE>
     </BODY>
</HTML>
