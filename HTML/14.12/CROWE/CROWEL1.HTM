






<HTML>
     
     <HEAD>


          
          <TITLE>December 1996/Efficient Band Matrix Computations/Listing 1</TITLE>
     </HEAD>
     
     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          
          <H4>Listing 1: Template class bandStorage</H4>
          
          <BLOCKQUOTE>

<PRE>
#ifndef BANDSTOR_H
#define BANDSTOR_H

#include &lt;iostream.h&gt;
#include &lt;math.h&gt;
#include &lt;vector.h&gt;

inline int MAX(int i, int j) { return (i&gt;j ? i : j);}
inline int MIN(int i, int j) { return (i&lt;j ? i : j);}

template &lt;class T&gt; class bandStorage
{
private:
    int n;
    int upperMostBand;
    int lowerMostBand;

// data for the matrix

    vector&lt; vector &lt;T&gt; &gt; a;

public:
    bandStorage() : n(0),
        upperMostBand(0),
        lowerMostBand(0),
        a(0) {}
    bandStorage(const int);
    bandStorage&amp; operator=(const bandStorage&amp;);
    inline int order() const {return n;};
    inline int&amp; upperBandWidth(void) {return upperMostBand;}
    inline int&amp; lowerBandWidth(void) {return lowerMostBand;}
    vector&lt;T&gt;&amp; diag(const int);
    const vector&lt;T&gt;&amp; diag(const int) const;
    T&amp; operator()(const int, const int);    
    vector&lt;T&gt; operator*(const vector&lt;T&gt;&amp;) const;
};

template &lt;class T&gt;
    bandStorage&lt;T&gt;::bandStorage(const int order)
{
    n = order;
    upperMostBand = 0;
    lowerMostBand = 0;
    a = vector&lt; vector &lt;T&gt; &gt;(2*n-1);
}

template &lt;class T&gt;
    vector&lt;T&gt;&amp; bandStorage&lt;T&gt;::diag(const int location)
{
    return a[location+n-1];
}

template &lt;class T&gt;
    const vector&lt;T&gt;&amp; bandStorage&lt;T&gt;::diag(const int location) const
{
    return a[location+n-1];
}

template &lt;class T&gt;
T&amp; bandStorage&lt;T&gt;::operator()(const int i, const int j)
{
    static T zero = T(0.0);
     if (j &lt;= (i+upperMostBand) &amp;&amp; i &lt;= (j-lowerMostBand))
        if (i &lt;= j) // upper triangle
            return a[j-i+n-1].operator[](i);
        else
            return a[j-i+n-1].operator[](j);
    else
        return zero;
}

template &lt;class T&gt;
vector&lt;T&gt; bandStorage&lt;T&gt;::operator*(const vector&lt;T&gt;&amp; x) const
{
    vector&lt;T&gt; y(n, T(0.0));
    vector&lt;T&gt; currentBand(n);
    int i, j;
    for (i=lowerMostBand; i&lt;=upperMostBand; i++) {
        currentBand = diag(i);
        if (i &lt;= 0)
            for (j=-i; j&lt;n; j++)
                y[j] += currentBand[j+i]*x[j+i];
        else
            for (j=0; j&lt;n-i; j++)
                y[j] += currentBand[j]*x[j+i];
    }
    return y;
}

#endif
/* End of File */
</PRE>  </BLOCKQUOTE>
     </BODY>
</HTML>
