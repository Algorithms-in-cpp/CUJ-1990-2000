






<HTML>
     
     <HEAD>


          
          <TITLE>December 1996/We Have Mail/Listing 3</TITLE>
     </HEAD>
     
     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          
          <H4>Listing 3: Tracking down performance problems</H4>

<PRE>

//complex.cpp:

complex _Cdecl _FARFUNC operator*(complex _FAR &amp; z1,
                               complex _FAR &amp; z2)
{
  double temp_re = z1.re*z2.re - z1.im*z2.im;
  double temp_im = z1.im*z2.re + z1.re*z2.im;
  return complex(temp_re, temp_im);
}

double _Cdecl _FARFUNC norm(complex _FAR &amp; z)
{
/*
  return z.re*z.re + z.im*z.im;
*/
asm LES_  bx, z
asm fld REAL ES_ [bx]
asm fmul  st(0), st(0)
asm fld REAL ES_ [bx+8]
asm fmul  st(0), st(0)
asm fadd
  RETURN_TOS;
}

inline complex _RTLENTRY conj(complex _FAR &amp; __z)
{
  return complex(__z.re, -__z.im);
}

inline complex _RTLENTRY
operator/(complex _FAR &amp; __z1, double __re_val2)
{
  return complex(__z1.re/__re_val2,
                __z1.im/__re_val2);
}

complex _Cdecl _FARFUNC
operator/(complex _FAR &amp; z1, complex _FAR &amp; z2)
{
  return z1 * conj(z2) / norm(z2);
}


//cmplxtst.cpp:

#include    &lt;stdio.h&gt;
#include    &lt;time.h&gt;
#include    &lt;fstream.h&gt;

//#include    "complex.h"
class complex {
// This is essentialy Borland's class stripped down
// to support just mult and div.

public:
  complex(double __re_val, double __im_val=0);
  complex();
friend complex operator* ( const complex &amp;x,
                         const complex &amp;y );
friend complex operator/ ( const complex &amp;x,
                         const complex &amp;y );

public:
    double im,re;
};

/* Prototypes */
complex plex_div(const complex &amp;a,
                const complex &amp;b);
complex plex_mult(const complex &amp;a,
                 const complex &amp;b);

inline complex::complex(double __re_val,
                      double __im_val)
{ // this is Borland's
  re = __re_val;
  im = __im_val;
}

inline complex::complex()
{ // this is Borland's
/* if you want your complex numbers initialized ...
  re = im = 0;
*/
}


inline complex operator* ( const complex &amp;x,
                         const complex &amp;y )
{ // This is mine
    return
    complex(x.re * y.re - x.im * y.im,
        x.re * y.im + x.im * y.re );
}

inline complex operator/ (const complex &amp;a,
                          const complex &amp;b)
// This is mine
    double denom = b.re*b.re + b.im*b.im;
    return complex(
        (a.re * b.re + a.im * b.im) / denom,
        (a.im * b.re - a.re * b.im) / denom );
}


complex plex_div(const complex &amp;a,
                const complex &amp;b)
{ // this is yours
    complex result;

    double denom = b.re*b.re + b.im*b.im;
    result.re = (a.re * b.re + a.im * b.im) / denom;
    result.im = (a.im * b.re - a.re * b.im) / denom;
    return(result);
}
complex plex_mult(const complex &amp;a, const complex &amp;b)
{ // this is yours
complex result;

    result.re = (a.re * b.re - a.im * b.im);
    result.im = (a.re * b.im + a.im * b.re);

    return(result);
}
/* ========================================== */
int main(void)
{
    const long ITER = 200000L;
    cout &lt;&lt; endl
         &lt;&lt; "Complex number calc comparison for "
         &lt;&lt; ITER &lt;&lt; " iterations" &lt;&lt; endl;

    time_t start_time,end_time,calc_time;
    long i;

    complex a,b,c;
    a = complex(19.45,23.76);
    b = complex(-12.44,7.995);

    start_time = time(NULL);
    /* Do a number of calculations */
    c = a*b;

    for (i=0; i&lt;ITER; i++)
    {
        c = a * c;
        c = a / c;
    }
    end_time = time(NULL);
    calc_time = end_time-start_time;

    cout &lt;&lt; "Calc time using overloaded ops: "
        &lt;&lt; calc_time &lt;&lt; " secs" &lt;&lt; endl;
    /* ========================================= */

    start_time = time(NULL);
    c = plex_mult(a,b);
    for (i=0; i&lt;ITER; i++)
    {
        c = plex_mult(a,c);
        c = plex_div(a,c);
    }
    end_time = time(NULL);
    calc_time = end_time-start_time;

    cout &lt;&lt; "Calculation time with user functions: "
        &lt;&lt; calc_time &lt;&lt; " secs" &lt;&lt; endl;

    return 0;
}
/* End of File */
</PRE>
     </BODY>
</HTML>
