






<HTML>
     
     <HEAD>


          
          <TITLE>December 1996/Optimization Tip: Chop Out Needless Roots</TITLE>
     </HEAD>
     
     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          
          <H2><A href="../tocdec.htm"><IMG src="../../toc.gif" ALT="Back to TOC" WIDTH="54" HEIGHT="54"></A>
          <FONT COLOR="#FF0000">Optimization &amp; Efficiency </FONT></H2>
          
          <HR>
          
          <H2 ALIGN="center"><FONT COLOR="#800000">Short Segments</FONT></H2>
          
          <H3 ALIGN="center"><FONT COLOR="#800000"> Optimization Tip:<BR>
           Chop Out Needless Roots</FONT></H3>
          
          <HR>
          <BLOCKQUOTE>
               
               <p>We often write mathematical
                    expressions in programs just as they appear in textbooks.
                    But efficiency sometimes dictates that we modify these "natural"
                    expressions. For example, the square root function, sqrt, is
                    time consuming and can frequently be eliminated from
                    real-world applications. Consider the calculation of
                    distance between two points, given their Cartesian
                    coordinates:</p>

<PRE>
dx = a.x - b.x;
dy = a.y - b.y;
dist = sqrt(dx*dx + dy*dy);
</PRE>
               
               <p> If we are identifying the nearest
                    neighbor, we don't have to calculate dist. It is enough to
                    find the smallest value of the "cheaper" quantity</p>

<PRE>
dist_squared = dx*dx + dy*dy;
</PRE>
               
               <p> The fragment in <A href="manl1.htm">Listing
                         1</a>
shows both sets of calculations. On my machine,
                    the first set took 1.9 seconds; the second set (no square
                    root) took 1.0 seconds &#151; a speed-up of nearly a factor of
                    2. In many applications the coordinates will be integers, so
                    eliminating the sqrt will eliminate all use of
                    floating-point for an even greater speed gain. </p>
               
               <p> We can use the central idea of this
                    optimization in some field calculations as well. In this
                    case, the "optimization" consists of keeping roots out of
                    expressions where they don't belong in the first place. For
                    example, gravitation varies as 1/(distance squared), so
                    don't make the mistake of calculating distance first and
                    then squaring it! Use the formula for dist_squared above. 
                    </p>
               
               <p> A similar but smaller gain can be
                    realized when the field varies as a different power of
                    distance. Some models of nuclear forces use a term
                    proportional to distance to the sixth power. In this case we
                    can take advantage of the equivalence pow(x, y) == pow(x**2,
                    y/2) and calculate the field using pow(dist_squared, -3.0)
                    instead of pow(dist, -6.0). On my machine, this substitution
                     bought me 0.7 seconds out of 8.9 &#151; a speedup of 8%.</p>
               
               <p><I>Thanks to Evan Manning &lt;manning@alumni.caltech.edu&gt;
                    for contributing this tip. </I></p>

<h4><a href="../../../source/1996/dec96/manning.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
     </BODY>
</HTML>
