






<HTML>
     
     <HEAD>


          
          <TITLE>December 1996/Standard C/C++</TITLE>
     </HEAD>
     
     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          
          <H2><A href="../tocdec.htm"><IMG src="../../toc.gif" ALT="Back to TOC" WIDTH="54" HEIGHT="54"></A>
          <FONT COLOR="#FF0000">Columns</FONT></H2>
          
          <HR>
          
          <H2 ALIGN="center"><FONT COLOR="#800000">Standard C/C++</FONT></H2>
          
          <H3 ALIGN="center"><FONT COLOR="#800000">P. J. Plauger</FONT></H3>
          
          <H3 ALIGN="center"><FONT COLOR="#800000">Containers</FONT></H3>
          
          <BLOCKQUOTE>
               
               <P> Managing collections of objects has long been an essential
                    but tedious part of programming. Finally, Standard C++
                    promises relief from the drudgery. Here's another thing a
                    long time coming: the 100th installment of this column!</P></BLOCKQUOTE>
          <HR>
          <BLOCKQUOTE>
               
               <h4><FONT COLOR="#000080">Prolog</FONT></H4>
               
               <p>This column is a milestone for both me
                    and for C/C++ Users Journal. It is the hundredth consecutive
                    column that I have written for CUJ. And, since this column
                    has been in every issue of the magazine, it is the hundredth
                    issue of CUJ. I am mildly astonished that I have never
                    missed a deadline, particularly given my penchant for
                    shaving things fine at times. I am less astonished to see 
                    CUJ as a whole going strong after all these years. Its
                    strength is rooted deeply in the excellent staff in
                    Lawrence, Kansas that turns it out once a month -- and in
                    the contributions of so many practicing programmers among
                    our readership. I'm happy to be here, in such good company.
                    </p>
               
               <p> Much less happily, I write these
                    words the day after my father died. He meant many things to
                    me, like any father, but I particularly remember a pivotal
                    moment from a third of a century ago. I was a nerdy,
                    clueless college sophomore, and I had just been bruised by
                    Princeton's "Bicker'' system -- a particularly nasty
                    variant of fraternity rush week. I wanted to sign up with a 
                    certain club, but was passed over. My father said, simply,
                    "It's not what book you write in, but what you write in the
                    books.'' </p>
               
               <p> I wrote my first computer program
                    just a few months later. Since then, I've published over a
                    dozen books, several hundred articles, a modicum of science
                    fiction, and more reference manuals than I can count. My
                    father's encouragement, at that dark moment, really paid
                    off. So Dad, this one's for you, just like all the others.</p>
               
               <h4><FONT COLOR="#000080">Introduction</FONT></H4>
               
               <p>My long running series on the Standard
                    Template Library (STL) now enters its third and final phase.
                    I began, about a year ago, by describing iterators. An
                    iterator is a generalization of a pointer, used throughout
                    STL to access the elements of a sequence. The past few
                    columns have described the numerous algorithms that
                    manipulate sequences. Now it is time to study the various 
                    containers that STL provides. This installment begins the
                    process with a general overview of STL containers. </p>
               
               <p> A container is a class that manages a
                    sequence. Member functions let you insert new elements in
                    the sequence, erase (delete) existing elements, and locate
                    them. The functions return iterators to designate elements
                    in the sequence, so you can apply the various algorithms to
                    part or all of the controlled sequence. </p>
               
               <p> Managing a sequence involves
                    tradeoffs. If you plan to make frequent insertions and/or
                    erasures throughout a sequence, for example, you might
                    prefer a container that performs such actions in constant
                    time -- the time to perform an insertion or erasure does not
                    increase with N, the number of elements in the sequence.
                    Such a container is not likely to help you locate a given 
                    element in constant time as well, however. You have to
                    decide which operations have more influence on overall
                    program performance, then choose a suitable container type.
                    </p>
               
               <p> For this particular tradeoff, you can
                    also compromise. It is possible for a container to support
                    insertions, erasures, and locates all in time proportional
                    to the logarithm of N (written log N). The logarithm
                    increases with N, but much more slowly than N, so such time
                    complexity may be quite satisfactory all the way around. But
                    you then pay the price in a different dimension. </p>
               
               <p> To support logarithmic behavior such
                    as this, a container must represent its controlled sequence
                    as some sort of ordered tree data structure. A tree stores
                    three pointers along with the value of each element, to
                    designate the parent element and two children. If the
                    element value itself requires a large amount of storage, the
                    additional overhead may be unimportant. But if the element 
                    value requires little storage, and the program allocates
                    numerous elements, the extra overhead for a tree may prove
                    to be prohibitive. In that case, one of the simpler
                    container types will supply a better tradeoff. It will
                    require fewer pointers per element, perhaps even none, at
                    the cost of worse time complexity for certain operations on
                    the controlled sequence. </p>
               
               <p> STL thus provides an assortment of
                    different container template classes for you to choose
                    among. In all cases, one of the template parameters is the
                    type of elements you wish to store in the controlled
                    sequence. You can specialize these classes for elements of
                    any object type that meets just a few minimum requirements:</p>
               <UL><LI> The object type T must have a default constructor. <BR>
                          </LI>
                    <LI> It must have a destructor. <BR>
                          </LI>
                    <LI> It must have an assignment operator with sensible
                         semantics and the signature operator=(const T&amp;). <BR>
                          </LI>
               </UL>
               
               <p> The STL container template classes
                    are: </p>
               <UL><LI> vector -- an array of N or more contiguous elements <BR>
                          </LI>
                    <LI> list -- a bidirectional linked list of nodes, each
                         containing an element <BR>
                          </LI>
                    <LI> deque -- an array of N or more contiguous pointers to
                         separately allocated elements <BR>
                          </LI>
                    <LI> set -- a red/black tree of nodes, each containing an
                         element, ordered by some predicate applied to pairs of
                         elements and with no two elements having equivalent
                         ordering <BR>
                          </LI>
                    <LI> multiset -- a set that also permits pairs of elements
                         having equivalent ordering <BR>
                          </LI>
                    <LI> map -- a set of {element, key} pairs, ordered by some
                         predicate applied to pairs of keys <BR>
                          </LI>
                    <LI> multimap -- a map that also permits pairs of keys
                         having equivalent ordering</LI>
               </UL>
               
               <p><A href="pjpt1.htm">Table 1</A>
                    summarizes the time complexity of operations on each of
                    these template container classes. It also shows the number
                    of additional pointers required for each element of the
                    controlled sequence. The Standard Template Library also
                    defines several container adapters. These are containers
                    that are implemented in terms of other containers. They
                    intentionally restrict how you can access elements:</p>
               <UL><LI> stack -- a last-in/first-out (LIFO) queue of values <BR>
                          </LI>
                    <LI> queue -- a first-in/first-out (FIFO) queue of values <BR>
                          </LI>
                    <LI> priority_queue -- a queue ordered by some predicate on
                         pairs of stored values so that it delivers the
                         highest-priority element first <BR>
                          </LI>
               </UL>
               
               <p> I save these container adapters for
                    last.</p>
               
               <p>I describe here the properties
                    required of all containers in terms of a generic template
                    class Cont. An actual container template class may have
                    additional template parameters. It will certainly have
                    additional member functions.</p>
               
               <h4><FONT COLOR="#000080">Template Class Cont</FONT></H4>

<PRE>

template&lt;class T,
        p class A = allocator&lt;T&gt; &gt;
    class Cont {
public:
    typedef A allocator_type;
    typedef T0 size_type;
    typedef T1 difference_type;
    typedef T2 reference;
    typedef T3 const_reference;
    typedef T4 value_type;
    typedef T5 iterator;
    typedef T6 const_iterator;
    typedef T7 reverse_iterator;
    typedef T8 const_reverse_iterator;
    iterator begin();
    const_iterator begin() const;
    iterator end();
    iterator end() const;
    reverse_iterator rbegin();
    const_reverse_iterator<BR>        rbegin() const;
    reverse_iterator rend();
    const_reverse_iterator<BR>        rend() const;
    size_type size() const;
    size_type max_size() const;
    bool empty() const;
    A get_allocator() const;
    iterator erase(iterator it);
    iterator erase(iterator first,
                   iterator last);
    void clear();
    void swap(Cont x);
protected:
    A allocator;
    };
</PRE>
               
               <p><BR>
                     The template class describes an object that controls a
                    varying-length sequence of elements, typically of type T.
                    The sequence is stored in different ways, depending on the
                    actual container. </p>
               
               <p> The object allocates and frees
                    storage for the sequence it controls through a protected
                    object named allocator, of class A. (See "Standard C/C++:
                    Allocators,'' CUJ, June 1996.) Such an allocator object must
                    have the same external interface as an object of template
                    class allocator. Note that allocator is not copied when the
                    object is assigned. All constructors store an allocator 
                    argument (or, for the copy constructor, x.get_allocator())
                    in allocator and initialize the controlled sequence. </p>
               
               <p> What follows is a description, in
                    alphabetical order by name, of the members of the generic
                    template class Cont.</p>
               
               <H4><FONT COLOR="#000080">Member Type Cont::allocator_type</FONT></H4>
               
               <p></p>

<PRE>
typedef A allocator_type;
</PRE>
               
               <p><BR>
                     The type is a synonym for the template parameter A.</p>
               
               <H4><FONT COLOR="#000080">Member Function Cont::begin</FONT></H4>

<PRE>
const_iterator begin() const;
iterator begin();
</PRE>
               
               <p><BR>
                     The member function returns an iterator that points at the
                    first element of the sequence (or just beyond the end of an
                    empty sequence).</p>
               
               <H4><FONT COLOR="#000080">Member Function Cont::clear</FONT></H4>

<PRE>
void clear() const;
</PRE>
               
               <p><BR>
                     The member function calls erase(begin(), end()).</p>
               
               <H4><FONT COLOR="#000080">Member Type Cont::const_iterator</FONT></H4>

<PRE>
typedef T6 const_iterator;
</PRE>
               
               <p><BR>
                     The type describes an object that can serve as a constant
                    iterator for the controlled sequence. It is described here
                    as a synonym for the unspecified type T6.</p>
               
               <H4><FONT COLOR="#000080">Member Type Cont::const_reference</FONT></H4>

<PRE>
typedef T3 const_reference;
</PRE>
               
               <p><BR>
                     The type describes an object that can serve as a constant
                    reference to an element of the controlled sequence. It is
                    described here as a synonym for the unspecified type T3
                    (typically A::const_reference).</p>
               
               <H4><FONT COLOR="#000080">Member Type
                    Cont::const_reverse_iterator</FONT></H4>

<PRE>
typedef T8 const_reverse_iterator;
</PRE>
               
               <p><BR>
                     The type describes an object that can serve as a constant
                    reverse iterator for the controlled sequence. It is
                    described here as a synonym for the unspecified type T8
                    (typically reverse_iterator or
                    reverse_bidirectional_iterator).</p>
               
               <H4><FONT COLOR="#000080">Member Type Cont::difference_type</FONT></H4>

<PRE>
typedef T1 difference_type;
</PRE>
               
               <p><BR>
                     The signed integer type describes an object that can
                    represent the difference between the addresses of any two
                    elements in the controlled sequence. It is described here as
                    a synonym for the unspecified type T1 (typically
                    A::difference_type).</p>
               
               <H4><FONT COLOR="#000080">Member Function Cont::empty</FONT></H4>

<PRE>
bool empty() const;
</PRE>
               
               <p></p>
               
               <p>The member function returns true for
                    an empty controlled sequence. <BR>

                     Member Function Cont::end</p>

<PRE>
const_iterator end() const;
iterator end();
</PRE>
               
               <p><BR>
                     The member function returns an iterator that points just
                    beyond the end of the sequence.</p>
               
               <H4><FONT COLOR="#000080">Member Function Cont::erase</FONT></H4>

<PRE>
iterator erase(iterator it);
iterator erase(iterator first,
               iterator last);
</PRE>
               
               <p><BR>
                     The first member function removes the element of the
                    controlled sequence pointed to by it. The second member
                    function removes the elements of the controlled sequence in
                    the range [first, last). Both return an iterator that
                    designates the first element remaining beyond any elements
                    removed, or end() if no such element exists.</p>
               
               <H4><FONT COLOR="#000080">Member Function Cont::get_allocator</FONT></H4>

<PRE>
A get_allocator() const;
</PRE>
               
               <p><BR>
                     The member function returns allocator.</p>
               
               <H4><FONT COLOR="#000080">Member Type Cont::iterator</FONT></H4>

<PRE>
typedef T5 iterator;
</PRE>
               
               <p><BR>
                     The type describes an object that can serve as an iterator
                    for the controlled sequence. It is described here as a
                    synonym for the unspecified type T5.</p>
               
               <H4><FONT COLOR="#000080">Member Function Cont::max_size</FONT></H4>

<PRE>
size_type max_size() const;
</PRE>
               
               <p><BR>
                     The member function returns the length of the longest
                    sequence that the object can control.</p>
               
               <H4><FONT COLOR="#000080">Member Function Cont::rbegin</FONT></H4>

<PRE>
const_reverse_iterator rbegin() const;
reverse_iterator rbegin();
</PRE>
               
               <p><BR>
                     The member function returns a reverse iterator that points
                    just beyond the end of the controlled sequence. Hence, it
                    designates the beginning of the reverse sequence.</p>
               
               <H4><FONT COLOR="#000080">Member Type Cont::reference</FONT></H4>

<PRE>
typedef T2 reference;
</PRE>
               
               <p><BR>
                     The type describes an object that can serve as a reference
                    to an element of the controlled sequence. It is described
                    here as a synonym for the unspecified type T2 (typically
                    A::reference).</p>
               
               <H4><FONT COLOR="#000080">Member Function Cont::rend</FONT></H4>
               
               <p></p>

<PRE>
const_reverse_iterator rend() const;
reverse_iterator rend();
</PRE>
               
               <p><BR>
                     The member function returns a reverse iterator that points
                    at the first element of the sequence (or just beyond the end
                    of an empty sequence). Hence, it designates the end of the
                    reverse sequence.</p>
               
               <H4><FONT COLOR="#000080">Member Type Cont::reverse_iterator</FONT></H4>

<PRE>
typedef T7 reverse_iterator;
</PRE>
               
               <p><BR>
                     The type describes an object that can serve as a reverse
                    iterator for the controlled sequence. It is described here
                    as a synonym for the unspecified type T7 (typically
                    reverse_iterator or reverse_bidirectional_iterator).</p>
               
               <H4><FONT COLOR="#000080">Member Function Cont::size</FONT></H4>

<PRE>
size_type size() const;
</PRE>
               
               <p><BR>
                     The member function returns the length of the controlled
                    sequence.</p>
               
               <H4><FONT COLOR="#000080">Member Type Cont::size_type</FONT></H4>

<PRE>
typedef T0 size_type;
</PRE>
               
               <p><BR>
                     The unsigned integer type describes an object that can
                    represent the length of any controlled sequence. It is
                    described here as a synonym for the unspecified type T0
                    (typically A::size_type).</p>
               
               <H4><FONT COLOR="#000080">Member Function Cont::swap</FONT></H4>

<PRE>
void swap(Cont&amp; str);
</PRE>
               
               <p><BR>
                     The member function swaps the controlled sequences between
                    *this and str. If allocator == str.allocator, it does so in
                    constant time. Otherwise, it performs a number of element
                    assignments and constructor calls proportional to the number
                    of elements in the two controlled sequences.</p>
               
               <H4><FONT COLOR="#000080">Member Type Cont::value_type</FONT></H4>

<PRE>
typedef T4 value_type;
</PRE>
               
               <p><BR>
                     The type is a synonym for the template parameter T. It is
                    described here as a synonym for the unspecified type T4
                    (typically A::value_type).</p>
               
               <h4><FONT COLOR="#000080">Template Functions</FONT></H4>
               
               <p>Each STL container also defines,
                    outside the template class, several template functions that
                    let you test and manipulate container objects.</p>
               
               <H4><FONT COLOR="#000080">Function operator==</FONT></H4>

<PRE>
template&lt;class T, class A&gt;
    bool operator==(
        const Cont &lt;T, A&gt;&amp; lhs,
        const Cont &lt;T, A&gt;&amp; rhs);
</PRE>
               
               <p><BR>
                     The template function overloads operator== to compare two
                    objects of template class Cont. The function returns
                    lhs.size() == rhs.size() &amp;&amp; equal(lhs. begin(), lhs.
                    end(), rhs.begin()).</p>
               
               <H4><FONT COLOR="#000080">Function operator&lt;</FONT></H4>
               
               <p></p>

<PRE>
template&lt;class T, class A&gt;
    bool operator&lt;(
        const Cont &lt;T, A&gt;&amp; lhs,
        const Cont &lt;T, A&gt;&amp; rhs);
</PRE>
               
               <p><BR>
                     The template function overloads <BR>
                     operator&lt; to compare two objects of template class Cont.
                    The function returns <BR>
                     lexicographical_compare(lhs.begin(), lhs.end(),
                    rhs.begin(), rhs.end()).</p>
               
               <H4><FONT COLOR="#000080">Function swap</FONT></H4>

<PRE>
template&lt;class T, class A&gt;
    void swap(
        const Cont &lt;T, A&gt;&amp; lhs,
        const Cont &lt;T, A&gt;&amp; rhs);
</PRE>
               
               <P><BR>
                     The template function executes lhs.swap(rhs).</P>
               
               <h4><FONT COLOR="#000080">Using Containers</FONT></H4>
               
               <p>Let's review the rather dry
                    description above from the standpoint of a practical user.
                    To make use of any of the STL containers or container
                    adapters, include the header that defines its template
                    class:</p>
               <UL><LI> deque is defined in &lt;deque&gt;. <BR>
                          </LI>
                    <LI> list is defined in &lt;list&gt;. <BR>
                          </LI>
                    <LI> map and multimap are defined in &lt;map&gt;. <BR>
                          </LI>
                    <LI> set and multiset are defined in &lt;set&gt;. <BR>
                          </LI>
                    <LI> priority_queue and queue are defined in &lt;queue&gt;. <BR>
                          </LI>
                    <LI> stack is defined in &lt;stack&gt;. <BR>
                          </LI>
                    <LI> vector is defined in &lt;vector&gt;. </LI>
               </UL>
               
               <p> In Subsequent installments, I
                    describe each of these headers in detail.</p>
               
               <p>Each of the STL containers has a
                    number of unique properties, as you might expect. How you
                    construct a container object, how you insert elements into
                    it, and how you subsequently locate those elements varies
                    considerable among containers. But the container template
                    classes also have a number of common properties, which I
                    describe here. For example, each defines a number of member 
                    types that supply useful information about the container:</p>
               <UL><LI> value_type is the type of an element of the controlled
                         sequence. <BR>
                          </LI>
                    <LI> size_type is the type that can represent the length of
                         any controlled sequence. <BR>
                          </LI>
                    <LI> difference_type is the type that can represent
                         algebraic differences between objects of type iterator. <BR>
                          </LI>
                    <LI> allocator_type is the type of the allocator object
                         that supplies all storage for the controlled sequence. <BR>
                          </LI>
                    <LI> iterator is the type of any iterator, returned by a
                         non-const container member function, that lets you
                         access the controlled sequence. <BR>
                          </LI>
                    <LI> const_iterator is the type of any iterator, returned
                         by a const container member function, that lets you
                         access the controlled sequence. <BR>
                          </LI>
                    <LI> reverse_iterator is the type of any reverse iterator,
                         returned by a non-const container member function, that
                         lets you access the controlled sequence. <BR>
                          </LI>
                    <LI> const_reverse_iterator is the type of any reverse
                         iterator, returned by a const container member
                         function, that lets you access the controlled sequence <BR>
                          </LI>
                    <LI> reference is the type of any reference, returned by a
                         non-const container member function, that lets you
                         access an element the controlled sequence. <BR>
                          </LI>
                    <LI> const_reference is the type of any reference, returned
                         by a const container member function, that lets you
                         access an element the controlled sequence.</LI>
               </UL>
               
               <p>Several member functions return
                    iterators. The member function erase( iterator), for
                    example, returns an iterator that designates the (remaining)
                    element just beyond the one removed by the function. If you
                    want to access the entire controlled sequence directly,
                    however, you typically call:</p>
               <UL><LI> begin to obtain an iterator that designates the
                         beginning of the controlled sequence <BR>
                          </LI>
                    <LI> end to obtain an iterator that designates the end of
                         the controlled sequence <BR>
                          </LI>
                    <LI> rbegin to obtain a reverse iterator that designates
                         the end of the controlled sequence <BR>
                          </LI>
                    <LI> rend to obtain a reverse iterator that designates the
                         beginning of the controlled sequence</LI>
               </UL>
               
               <p>Given an iterator, or a range of
                    iterators, you can erase one or more elements of the
                    controlled sequence by calling erase. Or you can remove all
                    elements by calling clear. </p>
               
               <p> You can determine the number of
                    elements in the controlled sequence by calling the member
                    function size. If you merely want to determine whether any
                    elements are present, call empty. The member function
                    max_size provides a hint as to how long a sequence the
                    container can control. Note, however, that available memory
                    might impose much more severe limits than the size reported 
                    by this function. </p>
               
               <p> It is not likely that you will have
                    occasion to work directly with the allocator object stored
                    in a container object. But if you do, you can obtain a copy
                    of the allocator object by calling the member function
                    get_allocator. Alternatively, you can derive a class from
                    the specialized container template class. Member functions
                    of the derived class can then directly access the member 
                    object allocator. </p>
               
               <p> Finally, each container template
                    class supplies an override for the (algorithm) template
                    function swap. If the two container objects to be swapped
                    store allocator objects that compare equal, the overriding
                    function swaps the two controlled sequences just by
                    manipulating the stored control information. That approach
                    can be dramatically faster than the brute-force approach 
                    that must otherwise be employed.</p>

<PRE>

</PRE>
               
               <p><I>P.J. Plauger is senior editor of
                    C/C++ Users Journal. He is the author of the Standard C++
                    Library shipped with Microsoft's Visual C++, v4.2. For eight
                    years, he served as convener of the ISO C standards
                    committee, WG14. He remains active on the C++ committee,
                    WG21. His latest books are The Draft Standard C++ Library,
                    Programming on Purpose (three volumes), and Standard C (with
                     Jim Brodie), all published by Prentice-Hall. You can reach
                    him at pjp@plauger.com.</I></p>



<h4><a href="../../../source/1996/dec96/plauger.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
     </BODY>
</HTML>
