


<HTML>
<HEAD>

<TITLE>March 1991/Standard C</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmar.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Standard C<A name="0091_0054"><A name="0091_0054"></font></h2><P>
<h3 align="center"><A name="0091_0000"><A name="0091_0000">The Header &lt;locale.h&gt;</h3><P>
<h3 align="center"><font color="#800000">P.J. Plauger</font></h3><hr><blockquote><P>
<P><i><A name="0091_0000"><A name="0091_0000">P.J. Plauger is senior editor of The C Users Journal. He is secretary of the ANSI C standards committee, X3J11, and convenor of the ISO C standards committee, WG14. His latest book is Standard C, which he co-authored with Jim Brodie. You can reach him at pjp@plauger. uunet.</i></P><P>
<h4><FONT COLOR="#000080"><A name="0091_0055">History<A name="0091_0055"></FONT></h4></P>
The header <I>&lt;locale.h&gt;</I> is an invention of X3J11, the committee that developed the C standard. You will find little that resembles locales in earlier implementations of C. That stands at odds with the committee's stated purpose, "to codify existing practice." Nevertheless, those of us active within X3Jll at that time felt we were acting out of the best of motives &#151; self defense.<P>
This particular header popped up about five years after work began on the standard. At that time, many of us felt that the standard was essentially complete. We were simply putting a few finishing touches on a product in which we had invested five years of our lives. Resistance was mounting to change of any sort.<P>
I recall mentioning a change that I would have liked. (I forget now just what the change was.) In the interest of speeding closure, however, I suggested that the committee not make the change. An attendee from the UK, Keith Winter, also expressed support for the change. But he, too, was willing to let it slide. After all, he said, it was just one of many changes that would have to be made to the ISO standard for C.<P>
Silence.<P>
After we collected our collective wits, several of us simultaneously uttered the moral equivalent of, "Say what?" Winter went on to explain calmly that a number of Europeans were unhappy with certain parts of the C standard being developed by X3J11. It was simply too American in several critical ways. They despaired of trying to educate us insular Yanks about the needs of the world marketplace. Rather, they were content to wait and fight their battles on a more congenial field. The Europeans took it for granted that an ISO standard for C must differ from the ANSI standard.<P>
Many of us disagreed with that position. We felt it imperative that whatever standard ANSI developed had to be acceptable to the international community. We had seen the effects in the past of computer language standards that differed around the world. Our five years of effort would be in vain, we felt, if the final word on C came from a separate committee second-guessing all our decisions.<P>
So we sighed a deep sigh and asked the Europeans to show us their shopping list of changes. Most of the items on the list dealt with ways to adapt C programs to different cultures. That is a much more obvious problem in a land of many languages and nations such as Europe. Americans enjoy the luxury of a single (official) language and a fairly simple alphabet.<P>
AT&amp;T Bell Labs went so far as to host a special meeting to deal with various issues of internationalization. (This is a big word that people are uttering more and more often. It seems to have no acceptable synonym that is any shorter. The techie solution is to introduce the barbarism I18N, pronounced EYE eighteen EN. The 18 stands for the number of letters omitted.) Out of that meeting came the proposal for adding locale support to Standard C. The machinery eventually adopted is remarkably close to the original proposal.<P>
Adding locales to C had the desired effect. Many of the objections to ANSI C as an international standard were derailed. It cost X3Jll an extra year, by my estimation, to hammer out locales. And we probably spent yet another year dealing with residual gripes from the international community. (And WG14, the ISO C standard committee, is still working on additions to the existing Standard.) Nevertheless, we succeeded in producing a standard for C that is currently identical at both ANSI and ISO levels.<P>
<h4><FONT COLOR="#000080"><A name="0091_0056">Before Locales<A name="0091_0056"></FONT></h4></P>
Writing adaptive code is not entirely new. An early form sprung up about fifteen years ago in the UNIX operating system. Folks got the idea of adding <I>environment variables</I> to the system call that launches new processes. (That service is called <I>exec</I>, or some variant thereof, in UNIX land.) Environment variables are an open-ended set of names, each of which identifies a null-terminated string that represents its value. You can add, alter, or delete environment variables in a process. Should that process launch another process, the environment variables are automatically copied into the image of the new guy.<P>
The new process can simply ignore environment variables. It loses a few dozen, or a few hundred, bytes of storage that it might otherwise enjoy. Or it can look for certain environment variables and study their current values. A common variable is <I>TZ</I>, which provides information to the library date functions about the current time zone. If the value of <I>TZ</I> is, say, <I>EST05E0T</I>, the time functions know to label local standard time as <I>EST</I> and local daylight savings time as <I>EDT</I>. The local (standard) time zone is five hours later than UTC, known in the past as Greenwich Mean Time.<P>
Environment variables have many uses. They are a great way to smuggle file names into an application program. It is almost always a bad idea to wire file names directly into a program. Prompting the user for file names is mostly a good idea, except for secret files about which the user should not have to be informed. Asking for such a file name on the command line that starts the program is somewhat better, but it can be a nuisance. It is a particular nuisance is several programs in a suite need access to the same file name. That's why it is often much nicer to set an environment variable to the file name once and for all in a script that starts a session. The file name is captured in one place, but is made available to a whole hierarchy of programs.<P>
If you are at all literate about MS-DOS, you probably know that that system supports environment variables too. They are just one of many good ideas borrowed from past experience with UNIX. I have purchased several bits of commercial software that use environment variables to advantage. A common use is to locate special directories that contain support files or that are well-suited for hosting temporary files. But they have many other uses as well.<P>
The Standard C library includes the function <I>getenv</I>. You will find it declared in the standard header <I>&lt;stdlib.h&gt;</I>. Call <I>getenv</I> with the name of an environment variable and it will return a pointer to its value string, if there is one. It is not considered an error to reference a variable that is not defined.<P>
Note, however, that the Standard does <I>not</I> include <I>setenv</I>, the usual companion to <I>getenv</I>. That is the common name for the function that lets you alter the values associated with environment variables. Simply put, committee X3Jll couldn't decide how to describe the semantics of <I>setenv</I>. They differ too much among various single-user and multiprocessing systems. So you can write portable code that reads environment variables, but you can't alter them in a standard way.<P>
<h4><FONT COLOR="#000080"><A name="0091_0057">Why Locales?<A name="0091_0057"></FONT></h4></P>
What do locales provide that environment variables do not? In a word, structure. This is the era of object-oriented hoopla. So you can look on locales, if you wish, as object-oriented environment variables. A single locale provides information on many related parameters. The values are consistent for a given culture. You would have to pump dozens of reserved names into the name space for environment variables to transmit the same amount of information. And you run a greater risk that subsets of the information get altered inconsistently.<P>
When I talk about a culture, by the way, I don't mean just a group that speaks a common language. People in the USA write dates as 7/4/1776 (Independence Day). The same day in the UK is written as 4/7/1776 (Thanksgiving Day). Even within the USA, practices can vary. Where we civilians might write a debit as $-123.45, an accountant may well prefer (123.45).<P>
For this reason, and others, locales have substructure. You can set an entire locale, or you can alter one or more <I>categories</I>. Separate categories exist for controlling collation sequences, character classification, monetary formatting, other numeric formatting, and times. The header <I>&lt;locale.h&gt;</I> defines several macros with names such as <I>LC_COLLATE</I> and <I>LC_TIME</I>. Each expands to an integer value that you can use as the category argument to <I>setlocale</I>, the function that alters locales. An implementation can choose to provide additional categories as well. A program that uses such added categories will, of course, be less portable than one that does not.<P>
The idea behind categories is that an application may wish to tailor its locale. It may want to print dates in the local language and by the formatting rules of that language. But it may still opt to use the dot for a decimal point even though speakers of that language customarily write a comma. Or the application may adapt completely to a given locale, then change the monetary category to match a worldwide corporate standard for expressing accounting information.<P>
Much of the information provided in a locale is purely informative. C has never treated currency amounts as a special data type. It is no surprise, therefore, that the Standard C library is unaffected by a change in the monetary category. On the other hand, some changes in locale very definitely affect how certain library functions behave. If a culture uses a comma for a decimal point, then the <I>scanf</I> family should accept commas and the <I>printf</I> family (and <I>strtod</I>) should produce commas in the proper places. That is indeed what happens.<P>
Here are all the places where library behavior changes with locale:<P>
<UL><li>The functions <I>strcoll</I> and <I>strxfrm</I> in <I>&lt;string.h&gt;</I> can change how they collate when category <I>LC_COLLATE</I> changes.</li>
<li>The functions in <I>&lt;ctype.h&gt;</I>, the <I>printf</I> and <I>scanf</I> families, and the numeric conversion functions in <I>&lt;stdlib.h&gt;</I>, can change how they test and alter certain characters when category <I>LC_CTYPE</I> changes.</li>
<li>The multibyte character functions in <I>&lt;stdlib.h&gt;</I>, and the <I>printf</I> and <I>scanf</I> families, can change how they parse and translate multibyte strings when category <I>LC_CTYPE</I> changes.</li>
<li>The <I>printf</I> and <I>scanf</I> families, and <I>atof</I> and <I>strtod</I> in <I>&lt;stdlib.h&gt;</I>, can change what they use for the decimal point character when category <I>LC_NUMERIC</I> changes.</li>
<li>The <I>strftime</I> function in <I>&lt;time.h&gt;</I> can change how it converts times to character strings when category <I>LC_TIME</I> changes.</li>
<li>The <I>localeconv</I> function in <I>&lt;locale.h&gt;</I> can change the information reported for the current locale when categories <I>LC_MONETARY</I> or <I>LC_NUMERIC</I> change.</li></UL>
<h4><FONT COLOR="#000080"><A name="0091_0058">Using Locales<A name="0091_0058"></FONT></h4></P>
If you are half as nervous as I am, this litany of changes should scare you. How do you write portable code if large chunks of the Standard C library can change behavior underfoot? Can you ship code to Germany and know what <I>isalpha</I> will do when it runs there? If you mix your code with functions from another source, how much trouble can they cause? Each time your functions get control, you may be running in a different locale. How do you code under those conditions?<P>
X3Jll anguished about such issues when we spelled out the behavior of locales. We recognized that many people don't want to be bothered with this machinery at all. Those folks should suffer little from the addition of locales. Still others have only modest goals. They want to trade in the Americanisms wired into older C for conventions more in tune with their culture. Still others are ambitious. They want to write code that can be sold unchanged, in binary form, in numerous markets. That code must be very sophisticated about changing locales.<P>
The simplest way to use locales is to ignore them. Every Standard C program starts up in the <I>"C"</I> locale. In this locale, the traditional library functions behave pretty much as they always have. <I>islower</I> returns a nonzero value only for the 26 letters of the English alphabet, for example. The decimal point is a dot. If your program never calls <I>setlocale</I>, none of this behavior can change.<P>
The next simplest way to use locales is to change once, just after program startup, and leave it at that. The C Standard requires no other locale names besides <I>"C"</I>. But it does define a <I>defalut locale</I> designated by the empty string <I>""</I>. If your program executes<P>
<pre>setlocale (LC_ALL, "")</pre>
it should shift to this default locale. Presumably, each implementation will devise a way to determine a default locale that pleases the locals. (An implementation that doesn't care a hoot about locales can make the default locale the same as the <I>"C"</I> locale, of course.)<P>
You must be more careful in using the library, once the locale can change on you. Some things get easier, such as displaying pretty dates or skipping the appropriate characters for white space. Other things get chancier, such as parsing strings with the functions in <I>&lt;ctype.h&gt;</I>. In a pinch, you can always revert part or all of the locale to the <I>"C"</I> locale, as in:<P>
<pre>char *s1 = setlocale(LC_CTYPE, "C");
char *s2 = malloc(strlen(s1) + 1);
if (s2 == NULL)
    <I>&lt;despair&gt;</I>
strcpy(s2, s1);
&lt;<I>use ctype functions safely</I>&gt;
&lt;setlocale(LC_ALL, s2);</pre>
You can omit the business about copying the locale string returned by <I>setlocale</I> only if you are sure that no other calls to that function can intervene between the two shown above.<P>
I won't go into more sophisticated manipulation of locales at this point. That must wait until we have covered some of the implementation issues raised so far. You will find that they are dizzying enough in their own right.<P>
<h4><FONT COLOR="#000080"><A name="0091_0059">What the Standard Says<A name="0091_0059"></FONT></h4></P>
If your primary goal is to query the current locale, you need to read at least two chunks of the Standard. The first provides an introduction to the standard header &lt;<I>locale.h</I>&gt;:<P>
<h4><FONT COLOR="#000080"><A name="0091_005A">4.4 Localization &lt;<B><I>locale.h</I></B>&gt;<A name="0091_005A"></FONT></h4></P>
The header &lt;<I>locale.h</I>&gt; declares two functions, one type, and defines several macros.<P>
The type is<P>
<pre>struct lconv</pre>
which contains members related to the formatting of numeric values. The structure shall contain at least the following members, in any order. The semantics of the members and their normal ranges is explained in 4.4.2.1. In the <I>"C"</I> locale, the members shall have the values specified in the comments.<P>
<pre>char *decimal_point;      /*"." */
char *thousands_sep;      /* "" */
char *grouping;           /* "" */
char *int_curr_symbol;    /* "" */
char *currency_symbol;    /* "" */
char *mon_decimal_point;  /* "" */
char *mon_thousands_sep;  /* "" */
char *mon_grouping;       /* "" */
char *positive_sign;      /* "" */
char *negative_sign;      /* "" */
char int_frac_digits;     /* CHAR_MAX */
char frac_digits;         /* CHAR_MAX */
char p_cs_precedes;       /* CHAR_MAX */
char p_sep_by_space;      /* CHAR_MAX */
char n_cs_precedes;       /* CHAR_MAX */
char n_sep by_space;      /* CHAR_MAX */
char p_sign_posn;         /* CHAR_MAX */
char n_sign_posn;         /* CHAR_MAX */</pre>
The macros defined are <I>NULL</I> (described in 4.1.5); and<P>
<pre>LC_ALL
LC_COLLATE
LC_CTYPE
LC_MONETARY
LC_NUMERIC
LC_TIME</pre>
which expand to integral constant expressions with distinct values, suitable for use as the first argument to the <I>setlocale</I> function. Additional macro definitions, beginning with the characters <I>LC_</I> and an upper-case letter,100 may also be specified by the implementation. <I>[end of excerpt]</I><P>
The second chunk you must read is the description of <I>localeconv</I>, the function that lets you query the current locale:<P>
<h4><FONT COLOR="#000080"><A name="0091_005B">4.4.2 Numeric Formatting Convention Inquiry<A name="0091_005B"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0091_005C">4.4.2.1 The <B><I>localeconv</I></B> Function<A name="0091_005C"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0091_005D">Synopsis<A name="0091_005D"></FONT></h4></P>
<pre>#include &lt;locale.h&gt;
struct lconv *localeconv(void);</pre>
<h4><FONT COLOR="#000080"><A name="0091_005E">Description<A name="0091_005E"></FONT></h4></P>
The <I>localeconv</I> function sets the components of an object with type <I>struct lconv</I> with values appropriate for the formatting of numeric quantities (monetary and otherwise) according to the rules of the current locale.<P>
The members of the structure with type <I>char</I> * are pointers to strings, any of which (except <I>decimal_point</I>) can point to "", to indicate that the value is not available in the current locale or is of zero length. The members with type <I>char</I> are non-negative numbers, any of which can be <I>CHAR_MAX</I> to indicate that the value is not available in the current locale. The members include the following:<P>
<pre><I>char *decimal_point</I></pre>
The decimal-point character used to format non-monetary quantities.<P>
<pre><I>char *thousands_sep</I></pre>
The character used to separate groups of digits before the decimal-point character in formatted non-monetary quantities.<P>
<pre><I>char *grouping</I></pre>
A string whose elements indicate the size of each group of digits in formatted non-monetary quantities.<P>
<pre><I>char *int_curr_symbol</I></pre>
The international currency symbol applicable to the current locale. The first three characters contain the alphabetic international currency symbol in accordance with those specified in <I>ISO 4217 Codes for the Representation of Currency and Funds.</I> The fourth character (immediately preceding the null character) is the character used to separate the international currency symbol from the monetary quantity.<P>
<pre><I>char *currency_symbol</I></pre>
The local currency symbol applicable to the current locale.<P>
<pre><I>char *mon_decimal_point</I></pre>
The decimal-point used to format monetary quantities.<P>
<pre><I>char *mon_thousands_sep</I></pre>
The separator for groups of digits before the decimal-point in formatted monetary quantities.<P>
<pre><I>char *man_grouping</I></pre>
A string whose elements indicate the size of each group of digits in formatted monetary quantities.<P>
<pre><I>char *positive_sign</I></pre>
The string used to indicate a non-negative-valued formatted monetary quantity.<P>
<pre><I>char *negative_sign</I></pre>
The string used to indicate a negative-valued formatted monetary quantity.<P>
<pre><I>char int_frac_digits</I></pre>
The number of fractional digits (those after the decimal-point) to be displayed in a internationally formatted monetary quantity.<P>
<pre><I>char frac_digits</I></pre>
The number of fractional digits (those after the decimal-point) to be displayed in a formatted monetary quantity.<P>
<pre><I>char p_cs_precedes</I></pre>
Set to 1 or 0 if the <I>currency_symbol</I> respectively precedes or succeeds the value for a non-negative formatted monetary quantity.<P>
<pre><I>char p_sep_by_space</I></pre>
Set to 1 or 0 if the <I>currency_symbol</I> respectively is or is not separated by a space from the value for a non-negative formatted monetary quantity.<P>
<pre><I>char n_cs_precedes</I></pre>
Set to 1 or 0 if the <I>currency_symbol</I> respectively precedes or succeeds the value for a negative formatted monetary quantity.<P>
<pre><I>char n_sep_by_space</I></pre>
Set to 1 or 0 if the <I>currency_symbol</I> respectively is or is not separated by a space from the value for a negative formatted monetary quantity.<P>
<pre><I>char p_sign_posn</I></pre>
Set to a value indicating the positioning of the <I>positive_sign</I> for a non-negative formatted monetary quantity.<P>
<pre><I>char n_sign_posn</I></pre>
Set to a value indicating the positioning of the <I>negative_sign</I> for a negative formatted monetary quantity.<P>
The elements of <I>grouping</I> and <I>mon_grouping</I> are interpreted according to the following:<P>
<I>CHAR_MAX    </I>No further grouping is to be performed.<P>
<I>0</I> <I>                     </I>The previous element is to be repeatedly used for the remainder of the digits.<P>
<I>other        </I> The integer value is the number of digits that comprise the current group. The next element is examined to determine the size of the next group of digits before the current group.<P>
The value of <I>p_sign_posn</I> and <I>n_sign_posn</I> is interpreted according to the following:<P>
<I>0     </I>Parentheses surround the quantity and <I>currency_symbol.</I><P>
<I>1     </I>The sign string precedes the quantity and <I>currency_symbol.</I><P>
<I>2     </I>The sign string succeeds the quantity and <I>currency_symbol.</I><P>
<I>3     </I>The sign string immediately precedes the <I>currency_symbol.</I><P>
<I>4     </I>The sign string immediately succeeds the <I>currency_symbol.</I><P>
The implementation shall behave as if no library function calls the <I>localeconv</I> function.<P>
<h4><FONT COLOR="#000080"><A name="0091_005F">Returns<A name="0091_005F"></FONT></h4></P>
The <I>localeconv</I> function returns a pointer to the filled-in object. The structure pointed to by the return value shall not be modified by the program, but may be overwritten by a subsequent call to the <I>localeconv</I> function. In addition, calls to the set<I>locale</I> function with categories <I>LC_ALL, LC_MONETARY,</I> or <I>LC_NUMERIC</I> may overwrite the contents of the structure.<P>
<B>Footnote:</B><P>
100. See future library directions (4.13.3). <I>[end of excerpt]</I><P>
<h4><FONT COLOR="#000080"><A name="0091_0060">Future Attractions<A name="0091_0060"></FONT></h4></P>
Next month, I will discuss ways to implement locales. Since there is little or no history in this area, I can be particularly inventive. That makes locales particularly interesting to tinkerers like me. Internationalization is becoming more important. That should make the topic of interest to many of you. As for the rest of you, at least you can see how much trouble your code will encounter when everyone starts altering locales under foot. <P>
</BLOCKQUOTE>
</BODY>
</HTML>
