


<HTML>
<HEAD>

<TITLE>March 1991/Pointer-Pointers In C</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmar.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">Pointer-Pointers In C<A name="0086_004E"><A name="0086_004E"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0086_0000"><A name="0086_0000">Anthony Dos Reis and Li Yun</font></h3><hr><blockquote><P>
<P><i><A name="0086_0000"><A name="0086_0000">Anthony Dos Reis is an assistant professor of computer science at the College of New Paltz in New York. Li Yun is a graduate student in the college's Mathematics and Computer Science Department.</i></P><P>
<I>Pointer-pointers</I> are literally pointers that point to other pointers. They are used in functions that must change the value stored in a parameter. Because variables in C are passed by value, not by reference, such functions must be passed the variable's address (pass-by-reference), not its value. A parameter can be a pointer. A pointer's address is, of course, just a pointer-pointer.<P>
For example, the increment function below increments an integer pointer. It declares parameter <I>p</I> as<P>
<pre>   int **p;</pre>
Breaking this declaration into two parts &#151; <I>int</I> * and *<I>p</I><I> </I>&#151;<I> </I>makes its meaning clear. *<I>p</I> indicates that <I>p</I> is a pointer. <I>int </I>* means that <I>p</I> points to an integer pointer. In the function body, <I>(*p)</I> references the integer pointer to which <I>p</I> points. Thus, <I>(*p)</I>++ increments this integer pointer.<P>
<pre>increment (p)
   int **p;
{
(*p)++;
}</pre>
Using a <I>typedef</I> statement for <I>int*</I> simplifies the parameter declaration.<P>
<pre>typedef int * LINK;
increment (p)
   LINK *p;
{
(*p)++;
}</pre>
Using pointer-pointers carefully can considerably reduce the complexity of functions that perform pointer manipulation. For example, consider two functions that both add a node to a binary search tree. The first function, <I>add1</I>, uses the standard textbook technique of two pointers, one trailing the other, to determine the insertion point for the new node. The two pointers, current and previous, move down the tree until current takes the value <I>NULL</I>. The function then adds the new node to the previous node. Notice that though <I>add1</I> is passed a pointer-pointer (<I>rootpp</I>), its use is limited to accessing the root pointer of the tree.<P>
<UL><li>The second function, <I>add2</I>, uses a single pointer-pointer, pp, that moves down the tree pointing to either the node's left or right pointer fields. When the pointer reaches the appropriate leaf, the function adds the new node.</li></UL>
The <I>add1</I> function is more complex than <I>add2</I> in several respects. First, it moves two pointers, <I>current</I> and <I>previous</I>, instead of one. Second, <I>add1</I> performs a special test to determine if the tree is <I>NULL</I> (in which case the new node becomes the root of the tree). <I>add2</I> needs no special test. Third, after finding the leaf at which the insertion must occur, <I>add1</I> must determine whether to add to the left or to the right of the leaf, even though this left/right test was just performed in the preceding <I>while</I> loop. In contrast, <I>add2</I> exits its <I>while</I> loop with <I>pp</I> pointing to the left or right field that must be modified to add the new node.<P>
Pointer-pointers may be a bit harder to understand at first, but the investment can pay off in simpler code.<P>

<h4><A HREF="list1.htm">Listing 1</A></h4>

<h4><a href="../../../source/1991/mar91/dosreis.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY>
</HTML>
