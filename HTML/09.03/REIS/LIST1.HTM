<HTML><HEAD>
<TITLE>March 1991/Pointer-Pointers In C/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1</A></h4>
<pre>/*-------------------------------------
 *  This program was used to test the
 *  add1 and add2 functions
 *-------------------------------------*/
#include &lt;stdio.h&gt;

typedef struct NODE* LINK;

struct NODE {
  int info;
  LINK left;
  LINK right;
};

main()
{
  LINK rootptr1=NULL,rootptr2=NULL;
  int x;
  
  printf("Enter integers terminated \
with ctrl z\n");
  /* Create tree      */
  while (scanf("%d",&amp;x) == 1) {
    
    add1(&amp;rootptr1,x);
    add2(&amp;rootptr2,x);
  }
  printf("Using add1\n");
  recurse_traverse(rootptr1);  /* Traverse tree */
  printf("Using add2\n");
  recurse_traverse(rootptr2);
}
recurse_traverse(rootptr) LINK rootptr;
{
  if (rootptr != NULL) {          /* Is tree null?    */
    recurse_traverse(rootptr -&gt; left);  /* Recurse */
    printf("%d\n",rootptr -&gt; info);
    recurse_traverse(rootptr -&gt; right); /* Recurse */
  }
}
add1(rootpp,val) LINK *rootpp;int val;
{
  LINK newnode,current,previous;
  
  /* Create a new node */
  newnode = (LINK) malloc(sizeof(struct NODE));
  newnode-&gt;info = val;
  newnode-&gt;left = NULL;
  newnode-&gt;right = NULL;
  current = *rootpp;
  previous = NULL;
  while (current != NULL) {      /* Search for leaf */
    previous = current;
    if (val &lt; current-&gt;info)
       current = current-&gt;left;
    else
       current = current-&gt;right;
  }
  if (previous == NULL)                /*  Null tree?   */
     *rootpp = newnode;        /*  Node becomes tree   */
  else
    if (val &lt; previous-&gt;info)    /*  Add left/right?   */
       previous-&gt;left = newnode;      /*  Add to left */
  else
       previous-&gt;right = newnode;     /*  Add to right */

}
add2(pp,val) LINK *pp; int val;
{
  LINK newnode;
  
  /* Create a new node */
  newnode = (LINK) malloc(sizeof(struct NODE));
  newnode-&gt;info = val;
  newnode-&gt;left = NULL;
  newnode-&gt;right = NULL;
  while (*pp != NULL) {    /* Search for leaf  */
    if (val &lt; (*pp)-&gt;info)
      pp = &amp;(*pp)-&gt;left;         /* Move pp  */
    else
      pp = &amp;(*pp)-&gt;right;        /* Move pp  */
  }
  *pp = newnode;           /* Add node to tree */
}</pre>

</BODY>
</HTML>
