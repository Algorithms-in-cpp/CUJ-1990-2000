


<HTML>
<HEAD>

<TITLE>March 1991/Image Processing</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmar.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">Image Processing<A name="008A_0052"><A name="008A_0052"></font></h2><P>
<h3 align="center"><A name="008A_0000"><A name="008A_0000">Part 1: Reading The Tag Image File Format</h3><P>
<h3 align="center"><font color="#800000">Dwayne Phillips</font></h3><hr><blockquote><P>
<P><i><A name="008A_0000"><A name="008A_0000">Dwayne Phillips works as a computer and electronics engineer with the United States Department of Defense. He has a Ph.D. in electrical and computer engineering at Louisiana State University. His interests include computer vision, artificial intelligence, software engineering, and programming languages.</i></P><P>
<h4><FONT COLOR="#000080"><A name="008A_0053">Introduction<A name="008A_0053"></FONT></h4></P>
Programmers increasingly must obtain images, manipulate them, improve them, and output them. This article is the first in a series on images and image processing. Each article will include source code to demonstrate the concepts it covers. The code implements the C Image Processing System (CIPS), a small system that combines image processing operators with a simple user interface. The first article of the series discusses image input and the Tag Image File Format (TIFF). The second and third articles will discuss image output &#151; displaying and printing images. The fourth article will discuss histograms and histogram equalization. [<I>These articles will not all appear in sequential issues. </I>&#151;<I> pjp</I>]<P>
Image processing involves processing or altering an existing image in a desired manner. The first step is obtaining an image. While this may sound obvious, it is not a simple matter, since usable image data is not readily available. The programmer needs a simple method of obtaining image data in a standard, usable format. The Tag Image File Format was designed to promote the interchange of digital image data. <a href="#ref1">[1]</a><P>
Aldus (of PageMaker fame), Microsoft, and several other computer and scanner companies decided to write an industry standard for digital image data communication. Their collaboration resulted in the TIFF specification. Since most scanner manufacturers support the standard in their PC and Macintosh products, TIFF is a natural for PC-based image processing.<P>
The goals of the TIFF specification are <I>extensibility, portability, </I>and<I> revisability</I>. TIFF must be extensible in the future. TIFF must be able to adapt to new types of images and data and must be portable between different computers, processors, and operating systems. TIFF must be revisable &#151; it is not a read-only format. Software systems should be able to edit, process, and change TIFF files.<P>
The <I>tag</I> in Tag Image File Format refers to the file's basic structure. A TIFF tag provides information about the image, such as its width, length, and number of pixels. Tags are organized in tag directories. Tag directories have no set length or number, since pointers lead from one directory to another. The result is a flexible file format that can grow and survive in the future. <A href="fig3.htm">Figure 3</a>
contains the existing standard tags.<P>
<h4><FONT COLOR="#000080"><A name="008A_0054">Image Data Basics<A name="008A_0054"></FONT></h4></P>
An image consists of a two-dimensional array of numbers. The color or gray shade displayed for a given picture element (pixel) depends on the number stored in the array for that pixel. The simplest type of image data is black and white. It is a binary image since each pixel is either <I>0 </I>or <I>1</I>. You should scan line drawings as binary images because you will save storage space and because you will not lose any information in the process.<P>
The next more complex type of image data is grayscale, where each pixel takes on a value between 0 and the number of gray scales or gray levels that the scanner can record. These images appear like common black-and-white photographs &#151; they are black, white, and shades of gray. Some scanners record only 16 shades of gray, sufficient for simple applications. In more serious work, however, you should try to use scanners that produce 256 shades of gray. Since the average person can distinguish about 40 shades of gray, a 16-shade image may appear rough, while a 256-shade image "looks like a photograph." This series of articles will concentrate on grayscale images.<P>
The most complex type of image is color. Color images are similar to grayscale except that there are three bands, or channels, corresponding to the additive primary colors red, green, and blue. Thus, each pixel has three values associated with it. A color scanner uses red, green, and blue filters to produce those values.<P>
You can obtain TIFF images by using a desktop scanner and your own photographs. Color photos work reasonably well, but black-and-white photos are better. I have used the Hewlett-Packard ScanJet and ScanJet Plus with good results. The code disk for this issue contains several TIFF images. <I>(See page 80 to order. </I>&#151;<I>Ed.)</I> The ScanJet is limited to 16 shades of gray. The ScanJet Plus gives up to 256 shades of gray. Buying your own scanner (about $1,500) is not necessary since many printers and copy services now support desktop publishing with scanners. They will typically charge $10 to $20 per scan. Some PC dealers sell scanners and will also provide this service.<P>
Be prepared to fail on your first try at scanning photos. The biggest problem is file size. The scanner can scan 300 dots per inch, so a 3x5 photo at 300 dpi provides 900x1500 pixels. At eight bits per pixel (256 shades of gray) the image file comes to over 1,350,000 bytes. This is not practical for many applications. Instead, select a one- or two-inch square in your photo and work with it. The scanning software allows you to preview the scanned photo and to select just the area you want scanned onto disk, the resolution in dots per inch, and the number of gray shades.<P>
<h4><FONT COLOR="#000080"><A name="008A_0055">TIFF Specifics<A name="008A_0055"></FONT></h4></P>
<A href="fig1.htm">Figure 1</a>
(a) shows the structure of TIFF. The first eight bytes of the file are the header. These eight bytes have the same format on all TIFF files. They are the only items set in concrete for TIFF files. The remainder of the file differs from image to image. <A href="fig1.htm">Figure 1</a>
(b) shows the IFD or Image File Directory, which contains the number of directory entries and the directory entries themselves. <A href="fig1.htm">Figure 1</a>
(c) shows the structure of each directory entry. Each entry contains a tag indicating what type of information the file holds, the data type of the information, the length of the information, and a pointer to the information or the information itself.<P>
<A href="fig2.htm">Figure 2</a>
shows the beginning of a TIFF file. The addresses are located on the left side in decimal, and the bytes and their valves are in the table in hex.<P>
Glancing between <A href="fig1.htm">Figure 1</a>
and <A href="fig2.htm">Figure 2</a>
should clarify the structure. The first eight bytes are the header. Bytes zero and one tell whether the file stores numbers most significant byte (MSB) or least significant byte (LSB) first. If bytes zero and one are <I>II</I> (<I>0x4949</I>), then the least significant byte is first (predominant in the PC world). If the value is <I>MM</I> (<I>0x4D4D</I>), then the most significant byte is first (predominant in the Macintosh world). Your software needs to read both formats.<P>
The example in <A href="fig2.htm">Figure 2</a>
shows LSB first. Bytes two and three give the TIFF version number, which should be 42 (<I>0x2A</I>) in all TIFF images. Bytes four to seven give the offset to the first image file directory (IFD). Note that all offsets in TIFF indicate locations with respect to the beginning of the file. The first byte in the file has the offset 0. The offset in <A href="fig2.htm">Figure 2</a>
is 8, so the IFD begins in the ninth byte of the file.<P>
<h4><FONT COLOR="#000080"><A name="008A_0056">The IFD<A name="008A_0056"></FONT></h4></P>
The content of address eight is 27, indicating that this file has 27 12-byte directory entries. The first two bytes of the entry contain the tag, which tells the type of information the entry contains. The directory entry at location zero (<A href="fig2.htm">Figure 2</a>)
 contains <I>tag=255</I>. This tag tells the file type. (Refer to <A href="fig3.htm">Figure 3</a>
for possible tags.) The next two bytes of the entry give the data type of the information (<A href="fig4.htm">Figure 4</a>
lists the possible data types and their lengths). Directory entry zero in <A href="fig2.htm">Figure 2</a>
is type 3, a <I>short</I> (two-byte unsigned integer). The next four bytes of the entry give the length of the information. This length is not in bytes, but rather in multiples of the data type. If the data type is a <I>short</I> and the length is 1, then the length is one <I>short</I>, or two bytes. An entry's final four bytes give either the value of the information or a pointer to the value. If the size of the information is four bytes or less, then the information is stored here. If it is longer than four bytes, then a pointer to it is stored. The information in directory entry zero is two bytes long and is stored here with a value of 1. (This value has no meaning for this tag.)<P>
As for the next two entries, the first entry has <I>tag=256</I>. This is the image width of the image in number of columns. The type is <I>short</I> and the length of the value is one <I>short</I>, or two bytes. The value 600 means that there are 600 columns in the image. The second entry has <I>tag=257</I>. This is the image length or height in number of rows. The type is <I>short</I>, the length is 1, and the value is 602, meaning that the image has 602 rows.<P>
You continue through the directory entries until you reach the offset to the next IFD. If this offset is 0, as in <A href="fig2.htm">Figure 2</a>,
 then no more IFDs follow in the file.<P>
<h4><FONT COLOR="#000080"><A name="008A_0057">The Code<A name="008A_0057"></FONT></h4></P>
The code in <A href="list1.htm">Listing 1</a>,
 <A href="list2.htm">Listing 2</a>,
 and <A href="list3.htm">Listing 3</a>
read image data from a TIFF file into a 100x100 array of <I>shorts</I>. The code can read four or eight bit gray scale data either most significant byte first or least significant byte first. Future articles will build CIPS (the C Image Processing System) on top of these routines.<P>
<A href="list1.htm">Listing 1</a>
(<I>cips.h</I>) contains the <I>#include</I> files and the data structures. The structure <I>tiff_header_struct</I> holds the essential tags we must extract from the TIFF header.<P>
The function <I>read_tiff_header</I> in <A href="list2.htm">Listing 2</a>
first determines whether the file uses LSB first or MSB first since the method used influences the manner in which the functions <I>extract_long_from_buffer</I> and <I>extract_short_from_buffer</I> read the remainder of the file header. Next, the offset to the Image File Directory is read. The next section seeks to the IFD and reads the entry count, or number of entries in the IFD. Finally, the code loops over the number of entries. It reads each entry and picks out the necessary tags. The essential information is the width and length of the image, the bits per pixel (four-bit or eight-bit data), and the offset to the start of the data.<P>
The function <I>read_tiff_image</I> in <A href="list3.htm">Listing 3</a>
uses <I>read_tiff_header</I> and the header information to read data into a 100x100 array of <I>shorts</I>. The code seeks to the beginning of the data and then to the first line to read. The code in the <I>for</I> loop seeks to the first element on the line, reads the line, and seeks to the end of the line. Each seek depends on the number of bits per pixel. If the file uses eight bits per pixel, then the seeks are integer multiples of the number of pixels. If the files uses four bits per pixel, the seeks are half as long. The function <I>read_line</I> reads the image data into a buffer, then places the data into the array of <I>shorts. read_line</I> uses <I>unions</I> defined in <I>cips.h</I> and also depends on the number of bits per pixel.<P>
The next article in this series will introduce the framework for the C Image Processing System and describe how to display images.<P>
<h4>References</FONT></h4></P>
<a name="ref1">1.</a>    <I>TIFF Developer's Toolkit</I>, Aldus Corporation, 1988.<P>

<h4><a href="../../../source/1991/mar91/phillips.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
