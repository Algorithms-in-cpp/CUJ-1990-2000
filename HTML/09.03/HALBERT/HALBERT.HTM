


<HTML>
<HEAD>

<TITLE>March 1991/Embedded Real-Time Multitasking Kernel</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmar.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Real-Time Programming</FONT></H2>

<hr><h2 align="center"><font color="#800000">Embedded Real-Time Multitasking Kernel<A name="0078_0046"><A name="0078_0046"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0078_0000"><A name="0078_0000">Joel Halbert</font></h3><hr><blockquote><P>
<P><i><A name="0078_0000"><A name="0078_0000">Joel Halbert has a B.S. in electrical engineering from the University of Texas in Austin, Texas. He has 12 years experience in the design and implementation of computer hardware and software. He may be contacted at 1407 Meadowmear, Austin, TX 78753.</i></P><P>
In implementing software for embedded systems, several items can ease the job. These include a kernel to implement a virtual machine, a high-level language (preferably C), and a good in-circuit emulator. I describe here a simple kernel for the Motorola 6801 microprocessor that supports tasks written in C. I also describe how to interface between the C routines and assembly language. I use the assembler, compiler, and in-circuit emulator (ICE) supplied by American Automation.<P>
The kernel is very simple. It implements only three calls. All kernel code is written in assembly. Calls to the kernel conform to the C subroutine call interface, however, so that tasks written in C can call the kernel directly.<P>
C is a particularly good language to write embedded system code. It has the bit manipulation needed to talk directly to hardware registers. Its high-level features enable programmers to structure code for easier debugging, maintenance, and readability. In addition, C generates less code than other high-level languages.<P>
<h4><FONT COLOR="#000080"><A name="0078_0047">6801 Architecture<A name="0078_0047"></FONT></h4></P>
The 6801 microcontroller, designed in the late 1970s, is a relatively old architecture. It is cheap, easy to use, and manufactured by several semiconductor houses. The chip features:<P>
<UL><li>a serial communications interface</li>
<li>a 16-bit three-function programmable timer</li>
<li>choice of single-chip or expanded 64K-byte address space</li>
<li>2,048 bytes of ROM</li>
<li>128 bytes of RAM</li>
<li>29 parallel I/O lines of which two can be defined as handshake lines </li>
<li>internal clock generator with divide-by-four output</li>
<li>TTL compatible inputs and outputs</li></UL>
<A href="fig1.htm">Figure 1</a>
shows the registers for the 6801. Two eight-bit accumulators (called <I>A</I> and <I>B</I>) can be concatenated into one 16-bit register referred to as <I>D</I>. The index register (called <I>X</I>), the stack (called <I>S</I>), and the program counter (called <I>PC</I>) all are 16 bits wide. The condition code register (called <I>CC</I>) is eight bits wide. <A href="fig2.htm">Figure 2</a>
shows the condition code register in greater detail.<P>
The 6801 operates in eight different modes. The operating mode is determined just after chip reset by levels on three of the I/O pins. Three major divisions of these modes are:<P>
<UL><li>Single Chip &#151; All four ports are configured as parallel input/output ports. The MPU functions as a self-contained microcomputer with no external address or data bus.</li>
<li>Expanded Non-Multiplexed &#151; The MPU can directly address modest amounts of external memory (up to 256 bytes).</li>
<li>Expanded Multiplexed &#151; The MPU can address the entire 64K byte address space. In addition, 13 I/O lines are available.</li></UL>
The kernel I describe here uses Expanded Multiplexed mode. That supports external RAM and ROM that can reside in sockets for expandability and ease of maintenance.<P>
<h4><FONT COLOR="#000080"><A name="0078_0048">Kernel Architecture<A name="0078_0048"></FONT></h4></P>
I consider all code except for the tasks part of the system. The rest is task code. To initiate multitasking, the application program calls a setup routine, giving the starting function pointer for each task. This routine allocates separate stack areas (distinct from from system stack) for each of a fixed number of tasks. It then sets up a current stack pointer and execution pointer for each task. After the initialization of four tasks, for example, the system can concurrently execute the tasks with code similar to<P>
<pre>while (true)
   {
   continue_task(0);
   continue_task(1);
   continue_task(2);
   continue_task(3);
   }</pre>
The <I>continue_task</I> function (<A href="list1.htm">Listing 1</a>)
 transfers control to the numbered task and returns when the task calls <I>suspend.</I> The <I>continue_task</I> and <I>suspend</I> functions also save and restore any register variables on the task stack. You can expand the <I>while (true)</I> test to check for various stopping conditions, including global status flags set by the tasks. This kind of multitasking is non-preemptive. It requires that the tasks call <I>suspend</I> frequently. Since each task has its own stack, the call to <I>suspend</I> may occur at any level of subroutine nesting.<P>
The kernel may appear to contain a lot of functionality to pack into two pages of assembly code, but it is actually much simpler than a general real-time multitasking kernel. For example, this task scheduler provides no means for an external event to activate a task. Every task is expected to have control for a short time in every loop; the task itself must check for activation conditions. Also, the scheduler does not provide signaling between tasks. The tasks do, however, use message queues and global tables to implement this type of signaling.<P>
Since all tasks are linked with the kernel as reentrant functions in one program, special care must be taken when referencing static variables (both global and non-global). In general, a tasks's use of static variables should be limited to deliberate inter-task communication. Variables allocated off the stack are automatically private to the task.<P>
It may be helpful to see a diagram of the stack structure at various times of the execution of the kernel. At startup, memory is uninitialized. No stacks for task are yet defined. When the startup code calls the initialization routines, the task's stacks are defined, as shown in <A href="fig3.htm">Figure 3</a>.
<P>
Two arrays, <I>task_tab</I> and <I>fram_tab</I>, hold the stack pointers and frame pointers for each task. The kernel saves the system stack pointer in <I>sys_stk</I> and the system frame pointer in <I>sys_sf</I>. When a task is in control, it is using its own stack and frame pointers. When the task calls <I>suspend</I>, the kernel saves these pointers in the task table and retrieves those for the system. The task transfers control to the system by setting task mode to <I>0</I> and executing the next task in the master <I>while</I> loop in main.<P>
<h4><FONT COLOR="#000080"><A name="0078_0049">Data Flow<A name="0078_0049"></FONT></h4></P>
The tasks communicate with each other via circular queues and system tables. At system startup, all queues are empty and the system tables contain default values. Serious operation starts when the computer receives operating parameters via the serial lines. This causes an interrupt routine to insert characters into a circular buffer called <I>in_queue</I>.<P>
When activated, the <I>message_in</I> (<A href="list2.htm">Listing 2</a>)
 task sees that characters are in <I>in_queue</I>. The task determines what kind of message has been sent. After decoding the message, the task loads a return message into another circular buffer, called <I>out_que.</I><P>
When the task <I>message_out</I> (<A href="list3.htm">Listing 3</a>)
 is activated, it sees that characters are in <I>out_queue</I>. The task removes the message from <I>out_que</I> and reformats it as a message suitable for serial transmission &#151; with CRC bytes generated and transparency characters inserted. The formatted message is then put into the <I>xmit_que</I> for sending over the serial line. The task <I>msg_out</I> then calls <I>send_msg</I>, which sends out the first character, enables the send character interrupt, and waits until all characters of the message are sent before disabling the send character interrupt.<P>
The task <I>key_brd</I> in <A href="list4.htm">Listing 4</a>
checks for key strokes on the key pad. It works with the counter interrupt routine. If a key is being pressed, the interrupt routine <I>rcv_key</I> decodes the key and puts it into the global variable <I>keyboard_port</I>. When activated, <I>key_brd</I> checks for a character in <I>keyboard_port</I>. If <I>key_brd</I> finds a character, it inserts the character into <I>key_que.</I><P>
The task <I>display</I> in <A href="list5.htm">Listing 5</a>
reads the queue <I>key_que</I> to determine whether or not the the key should affect the display. In addition, <I>display</I> loads a buffer containing key strokes for serial transmission.<P>
<h4><FONT COLOR="#000080"><A name="0078_004A">Task Structure<A name="0078_004A"></FONT></h4></P>
All tasks must be organized the same way for this scheme to work. The basic structure is an endless loop:<P>
<pre>while (true)
   {
   /*  all statements
   *  that make up the
   *  task
   */
   }</pre>
All tasks communicate via shared memory (global memory) using circular queues and semaphores. Also, the tasks read system tables for setting operational parameters.<P>
<h4><FONT COLOR="#000080"><A name="0078_004B">Interfacing Assembly With C<A name="0078_004B"></FONT></h4></P>
In this project, I interfaced assembly with C using two different approaches &#151; writing functions completely in one language and embedding in-line assembly statements within C code.<P>
When writing a function in assembly, the most important aspect is the function calling convention for the particular C compiler you are using. With the American Automation C compiler that I used for this project, the parameters in a call are handled differently depending on the number of parameters passed. If you are passing only one parameter to the subroutine, then the parameter is passed in the <I>D</I> register. If you are passing more than one parameter, then the leftmost parameter is passed in the <I>D</I> register, and the rest of the parameters are passed through the stack. Examine the following call:<P>
<pre>init_task(1,&amp;message_in);</pre>
The leftmost paramater, <I>1</I>, is passed in the <I>D</I> register, and <I>&amp;message</I>_<I>in</I>, the address of the subroutine <I>message</I>_<I>in</I>, is passed on the stack.<P>
The following example shows the second approach, embedding assembly within a C function. The example illustrates how to reference the same variable by C code and assembly. A typical variable declaration in C is<P>
<pre>extern unsigned char VARIABLE;</pre>
Compilers usually transform the variable name when translating the C statements to assembly. A common transformation is to add an underscore or some other character either before or after the name. The American Automation compiler appends a question mark <I>?</I> to a variable name. When referencing the variable within assembly, I use the following statement:<P>
<pre>xref VARIABLE?</pre>
Each compiler has its own way to embed assembly language in C. Turbo C uses a keyword, <I>asm</I>, to indicate to the complier that the following statement is in-line assembly. The American Automation compiler uses the keyword <I>#asm</I> to indicate the beginning of a series of assembly language statements and the keyword <I>#endasm</I> to indicate the end of a series of assembly language statements. American Automation recommends that all <I>#asm</I> statements be immediately preceeded with a semicolon. See <A href="list5.htm">Listing 5</a>.
<P>
In assembly language, an address gets assigned to each variable that you define. A final hardware address is determined for a variable name using a combination of <I>SECTION</I> and <I>DS</I> (define storage) declarations. The American Automation C compiler supplies an assembly language startup file that is always linked first in front of all other files. This file is where you would assign memory addresses to hardware registers residing on your board. The following demonstrates a <I>SECTION</I> statement in an assembly language source file.<P>
<pre>SECTION IO,?,DATA ; data (I/O) start address</pre>
You are defining a section of memory called <I>IO.?</I> means the address will be defined at link time, and <I>DATA</I> means it is a data section. <I>IO</I> has previously been defined as 3000. You are telling the assembler to create a section of memory starting at address 3000 that will be uninitialized data.<P>
Now you can begin to use <I>DS</I> statements to assign variables to memory locations. For example:<P>
<pre>XDEF I_O?, VARIABLE?,OTHER?
I_O?: DS 1
VARIABLE?:
OTHER?: DS 1</pre>
I have defined three variables &#151; <I>I_O, VARIABLE</I>, and <I>OTHER</I>. Notice that the <I>XDEF</I> directive enables other files that are linked with this file to know about these variables. Note also that the <I>DS</I> statements come after the <I>SECTION</I> statement. Any other <I>DS</I> statements that follow will define storage in the <I>IO</I> section until another <I>SECTION</I> statement is encountered.<P>
<h4><FONT COLOR="#000080"><A name="0078_004C">Interrupts<A name="0078_004C"></FONT></h4></P>
Usually, embedded systems software deals with interrupts. These interrupts come from a variety of sources. The code I show here deals with interrupts from the programmable timer and the serial communications interface.<P>
The programmable timer is set up to be a free running counter that will generate an interrupt whenever the contents of the counter equal <I>0</I>. This timer generates delays and also reads the keypad for any keys that are pressed. The serial communications interface generates an interrupt whenever a character is received by the serial port receive buffer and whenever the transmit buffer is empty.<P>
You incorporate interrupts by the following method. The startup file assigns the addess of the interrupt routine to vector locations by the method shown in <A href="list6.htm">Listing 6</a>.
 The first statement is a <I>SECTION</I> directive that creates a section called <I>VECTORS</I> at location . It is followed by define words containing addresses of the routines that will be invoked when the vector is executed. In addition, the startup file contains an assembly language routine that provides the glue needed to call a C subroutine, which actually does the work in the interrupt handler. There is an assembly language routine for each vector that may be needed. The routine for the timer is shown in <A href="list7.htm">Listing 7</a>.
<P>
With this setup, you can write your interrupt routine much like any other C function.<P>
<h4><A HREF="list8.htm">Listing 8</A></h4>
<h4><A HREF="list9.htm">Listing 9</A></h4>
<h4><A HREF="list10.htm">Listing 10</A></h4>
<h4><A HREF="list11.htm">Listing 11</A></h4>
<h4><A HREF="list12.htm">Listing 12</A></h4>
<h4><A HREF="list13.htm">Listing 13</A></h4>
<h4><A HREF="list14.htm">Listing 14</A></h4>

<h4><a href="../../../source/1991/mar91/halbert.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY>
</HTML>
