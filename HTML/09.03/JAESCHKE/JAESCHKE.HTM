


<HTML>
<HEAD>

<TITLE>March 1991/Doctor C's Pointers&reg;</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmar.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Doctor C's Pointers&reg;<A name="0093_0056"><A name="0093_0056"></font></h2><P>
<h3 align="center"><A name="0093_0000"><A name="0093_0000">Puzzles, Part V</h3><P>
<h3 align="center"><font color="#800000">Rex Jaeschke</font></h3><hr><blockquote><P>
<P><i><A name="0093_0000"><A name="0093_0000">Rex Jaeschke is an independent computer consultant, author and seminar leader. He participates in both ANSI and ISO C<I></I> <I></I>Standards meetings and is the editor of The Journal of C Language Translation, a quarterly publication aimed at implementors of C<I></I> <I></I>language translation tools. Readers are encouraged to submit column topics and suggestions to Rex at 2051 Swans Neck Way, Reston,<I></I> <I></I>VA 22091 or via UUCP at uunet!aussie!rex or aussie!rex@uunet.uu. net.</i></P><P>
This month we'll complete our <I>quality of implementation</I> set of puzzles. Try to debug them yourself first and see what messages your compiler produces.<P>
<h4><FONT COLOR="#000080"><A name="0093_0057">The Puzzles<A name="0093_0057"></FONT></h4></P>
1. I just know the @#$% file exists. See <A href="list1.htm">Listing 1</a>.
<P>
2. When is a string literal not literal?<P>
<pre>/* 1*/#include &lt;stdio.h&gt;

/* 3*/main ()
/* 4*/{
/* 5*/   printf("?? (Error: message) \n");
/* 6*/}</pre>
3. Side-effects in unused arguments.<P>
<pre>/* l*/#include &lt;stdio.h&gt;

/* 3*/main ()
/* 4*/{
/* 5*/   int i = 5, j = 6;
/* 7*/   printf("Hello\n", ++i, j- -);
/* 8*/}</pre>
Output:<P>
<pre>Hello</pre>
Are <I>i</I> and <I>j</I> incremented and decremented, respectively?<P>
4. It compiles, it works, so what's the problem?<P>
<pre>/* 1*/#include &lt;stdio.h&gt;

/* 3*/main()
/* 4*/{
/* 5*/   void f();

/* 7*/   f(-32768);
/* 8*/}

/*10*/void f(i)
/*11*/int i;
/*12*/{
/*13*/   printf("i = %d\n", i);
/*14*/}</pre>
5. Hey, someone stole my loop!<P>
<pre>/* 1*/#include &lt;stdio.h&gt;

/* 3*/main()
/* 4*/{
/* 5*/   int i;

/* 7*/   for (i = 0; i &lt; 5; ++i);
/* 8*/      printf("i = %d\n", i);
/* 9*/}</pre>
Output:<P>
<pre>i = 5</pre>
6. I forgot to declare the formal parameter list but it doesn't seem to mind!<P>
<pre>/* 1*/double f(i, j)
/* 2*/{
/* 3*/   return i * j;
/* 4*/}</pre>
<h4><FONT COLOR="#000080"><A name="0093_0058">The Solutions<A name="0093_0058"></FONT></h4></P>
1. As indicated in the comment, this is a DOS-specific problem. A file does exist by the name of <I>test.dat</I> in the root directory of the default disk, but you can't seem to get at it. The message produced, however, does indicate some kind of problem. For some reason, the leading part of the filename is missing. On closer inspection you realize that not only is the <I>t</I> missing but so too is the \ and the two together mean something special in C.<P>
Of course, the compiler sees the filename as a tab character followed by <I>est.dat</I>. Why didn't the tab get displayed in the output? It did, but the tab stops of the terminal were set such that the tab was not obvious.<P>
The solution? Use \<I>test.dat</I> instead. Now the compiler sees no escape sequence.<P>
Note that according to ANSI C, a different rule is applied with the  #<I>include</I> preprocessor directive. For example,<P>
<pre>#include "\test.h"</pre>
causes the preprocessor to search for the file <I>test.h</I> in the root directory. The \t is <I>not</I> interpreted as a tab. The grammar of this directive is specific to the preprocessor &#151; the construct <I>". . ."</I> <I>must not</I> be treated as a string literal. It is simply a string of arbitrary characters delimited by double quote <I>characters</I>. (ANSI C defines header names as quite separate tokens from string literals. The actual grammar used here is <I>"xxx"</I> where <I>xxx</I> is called a <I>q-char-sequence</I>.)<P>
2. It is not unreasonable to expect the following output:<P>
<pre>??(Error: message)</pre>
However, ANSI C requires:<P>
<pre>[Error: message)</pre>
According to PC-Lint you have stumbled on one of ANSI C's quiet changes," an instance where a correct program's behavior has been changed by the standard.<P>
<pre>line 5 - Trigraph Sequence '??(' in literal (Quiet Change)</pre>
I will not discuss trigraphs except to say that a trigraph is a three-character sequence beginning with <I>??</I> that permits certain punctuation characters to have an alternative representation. ANSI C invented trigraphs to allow C source to be mechanically converted to machines supporting the ISO-646 character set (which can have alternate graphics for #, |, [, [, ], and \, for example). Trigraphs are recognized before any tokens (such as string literals) are processed.<P>
3. Yes. Before a function can be called, each of its arguments must be evaluated. Then their values are put into the function's call frame. A compiler is not required to know anything about any of the standard library  functions (although it is permitted to), so provided the actual argument list is compatible with the function's prototype, the call is OK. In this case, the ellipsis notation is used in the <I>printf</I> prototype so there's no conflict.<P>
Interestingly, PC-Lint had the following to say:<P>
<pre>line 7 - number of arguments inconsistent 'with format</pre>
That is, it really did check the number and type of trailing arguments against the format string. This can be a very useful check, but it can only be performed if the first argument is a string literal. The inconsistency would not be detectable if the format argument were the name of a <I>char</I> array or a pointer initialized at runtime.<P>
4. On the 16-bit compilers I tested, by far the most common output was<P>
<pre>i = -32768</pre>
However, another result is possible:<P>
<pre>i = -1</pre>
[<I>You can even get 0 on some machine &#151; pjp</I>]<P>
One compiler gave the following hints as to why:<P>
<pre>line 7 - Function f has no prototype
line 7 - Constant has long type 
line 10 - Parameter list for f is inconsistent with previous call</pre>
We know that on a 16-bit  twos-complement machine, the smallest <I>int</I> value is <I>-32768</I>. As such, many people expect that is what we have passed to <I>f</I>. Certainly that's what <I>f</I> is expecting. Note, however, that the compiler warned that a <I>long int</I> was actually passed. Let's accept that for now and see what  follows. We pass a 32-bit <I>long</I>, yet <I>f</I> expects a 16-bit <I>int</I>. You can pass the <I>long</I> in two ways &#151; low word first or high word first. Depending on which way the implementation chooses, <I>f</I> either maps into -<I>32768</I> or -<I>1</I>.<P>
By adding a prototype in main for <I>f</I>, of the form<P>
<pre>/* 5*/ void f(int);</pre>
the <I>long int -32768</I> would be silently truncated to an <I>int</I>. Interestingly enough, this really would have the value -<I>32768</I>.<P>
Now, back to the type of -<I>32768</I>. In the April 1990 issue of <I>CUJ</I> (Volume 8, Number 8), I made the following statement: "An expression such as -<I>32768</I> consists of two source tokens; the unary minus operator and the integer constant <I>32768</I>. Note there is no such thing as a negative constant in C. The constant is non-negative and it is preceded by a unary minus operator. An interesting situation exists on 16-bit twos-complement machines where -<I>32768</I> is the smallest value that can be stored in an int. It so happens that the type of -<I>32768</I> when written in this form is not <I>int</I>; it's <I>long int</I>, but that's another story."<P>
This resulted in reader mail (and subsequent reply), but here is the explanation.<P>
According to the ANSI Standard, (page 28, lines 37-41), "The type of an integer constant is the first of the  corresponding list in which its value can be represented. Unsuffixed decimal: <I>int</I>,<I> </I><I>long int</I>,<I> </I><I>unsigned long int</I>;<I> </I>unsuffixed octal or hexadecimal:<I> </I><I>int</I>,<I> </I><I>unsigned int</I>,<I> long int</I>,<I> unsigned</I><I> </I><I>long int</I>; suffixed by the letter u or U: <I>unsigned int</I><I>, </I><I>unsigned</I><I> long </I><I>int</I>; suffixed by the letter 1 or L: <I>long int</I>,<I> </I><I>unsigned long int</I><I>;</I> suffixed by both the letters u or U and 1 or L: <I>unsigned </I><I>long int</I>."<P>
<I>32768</I> is an unsuffixed decimal, and it won't fit into an <I>int</I>. The compiler tries <I>long</I> and it works, so <I>long</I> is its type. The compiler then applies  negation to the result of that <I>long int</I>. If you look carefully, you will see that the rules are different for decimal and octal/hex. The following program demonstrates this:<P>
<pre>#include &lt;stdio.h&gt;
main() {
printf("sizeof(-32768) = %lu\n",
   (unsigned long)sizeof(-32768));
printf("sizeof(0x8000) = %lu\n",
   (unsigned long) sizeof(0x8000));
printf("sizeof(0100000) = %lu\n",
   (unsigned long)sizeof(0100000));</pre>
The values -<I>32768</I>, <I>0x8000</I>, and <I>0100000</I> have exactly the same bit pattern when stored in 16 bits. However, the type of the first expression is <I>long</I>, while that of the second and third is <I>unsigned int</I>. The correct output produced is<P>
<pre>sizeof(-32768) = 4
sizeof(0x8000) = 2
sizeof(0100000) = 2</pre>
5. I see this kind of problem all the time, mostly with programmers new to C. When starting C, you learn that all statements must be terminated with a semicolon. However, if a <I>while</I> or <I>for</I> statement really is a statement, where does its semicolon go? The answer is "They don't have one, but each of their subordinate primitive statements does need one." In my introductory C textbook, I call <I>for</I><I>, </I><I>while</I><I>, </I><I>if</I>, etc., <I>constructs</I> rather than statements to avoid students putting in unneeded semicolons.<P>
The problem is that the language supports a null statement represented simply by a semicolon. As a result, spurious semicolons may be hazardous to your program, as in the previous example. The trailing semicolon on line 7 represents a null statement that is subsequently taken as the body of the loop. The call to <I>printf</I>, therefore, occurs once, after the loop terminates. In this case, the output indicates the problem, but in cases where the actual loop body produces no visibly strange behavior, the problem can be difficult to find.<P>
PC-Lint did issue the following, very useful message:<P>
<pre>line 7 - Suspicious use of ;</pre>
I didn't experiment to see just which uses of <I>;</I> are not suspicious, but even if all null statements were flagged that would be useful, since null statements are not very commonly needed.<P>
6. We all know that you must explicitly declare an identifier before using it. Of course, many rules have  exeptions, and the obvious one here is for functions. If the compiler comes across a call to an unknown function, it presumes that function returns an <I>int</I>. It is not able to check the argument list because no prototype is available.<P>
There is one other, very obscure exception. If you omit the type from any formal arguments in a function  definition, the compiler assumes that the argument has type <I>int</I>. The following old-style definitions are equivalent:<P>
<pre>double f(i, j)
   int i, j;
   {}
double f(i, j)
   int i;
   int j;
   {}
double f(i, j)
   int i;
   {}
double f(i, j)
   int j;
   {}
double f(i, j)
   {}</pre>
The equivalent prototype version is:<P>
<pre>double f(int i, int j)
   {}</pre>
However, you are not permitted to mix the old and new styles in certain ways. For example, the following are invalid:<P>
<pre>double f(i, int j)
   {}
double f(int i, j)
   {}</pre>
Having said all this, I strongly recommend you not use such default typing.<P>

<h4><a href="../../../source/1991/mar91/jaeschke.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
