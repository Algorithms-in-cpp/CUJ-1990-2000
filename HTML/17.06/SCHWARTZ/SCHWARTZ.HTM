<HTML>   
     <HEAD>
<TITLE>June 1999/Default Initialization of Built-in Types</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjun.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Default Initialization of Built-in Types</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Robert Allan Schwartz</FONT></H3>

<BLOCKQUOTE>
<p>Java supplies wrappers for all the built-in types. As it turns out, C++ can profit from similar wrappers.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p><i>Copyright &copy; 1998 by Robert Allan Schwartz</i></p>

<p>C++ guarantees the initialization of all objects upon creation. This holds true regardless of the storage class (auto, local static, global static, heap). As long as you implement your constructors properly (i.e., you initialize all the data members), then you will never again have to track down a bug due to an uninitialized object.</p>
<p>Unfortunately, the same can't be said for built-in types. Variables of built-in types are initialized to zero by default for the local static and global static storage classes, but auto and heap variables of built-in type are not initialized at all. Thus, you may still have to track down a bug due to an uninitialized variable of built-in type.</p>
<p>Because built-in types are not classes, they do not have constructors. How can you guarantee the initialization of all variables of built-in type upon creation, regardless of the storage class or lack of constructors?</p>
<p>Each built-in type can be wrapped in a wrapper class. The wrapper class has a constructor, and that constructor initializes the built-in type data member. To do the same thing for all built-in types, you can write a template class.</p>

<pre>
template &lt;class T&gt;
class builtin
{
public:
    builtin(T new_value = 0)
    {value = new_value;}
    // ...
private:
    T value;
};
</pre>

<p>See <A HREF="fig1.htm">Figure 1</A> for an example of how to use the template class.</p>

<h4><FONT COLOR="#000080">Making the Wrapper Transparent</FONT></H4>

<p>Wrapping the built-in type in a wrapper class causes the type of the data member to be altered. Can this alteration be hidden, so all users of <B>b</B> in <A HREF="fig1.htm">Figure 1</A> still think they are working with an <B>int</B>? <A HREF="fig2.htm">Figure 2</A> shows an implementation of this technique.</p>

<UL><LI>The default constructor uses a default parameter value of zero, which is convertible to all built-in types.</LI>
<LI>Because the compiler-generated copy constructor, destructor, and <B>operator=</B> are sufficient, you do not need to define your own. However, I have given them here for completeness.</LI>
<LI>The conversion operator <B>operator T</B> is invoked implicitly whenever a <B>T</B> is expected, but I provide a <B>builtin&lt;T&gt;</B>.</LI>
<LI>Anyone taking the address of something that apparently has type <B>T</B> wants a <B>T *</B>, not a <B>builtin&lt;T&gt; *</B>, hence the need for the overloaded versions of <B>operator</B> <B>&amp;</B>.</LI>
<LI>The state-changing operators (i.e., assignment, compound assignment, increment, decrement) are required.</LI>
<LI>The overloaded operators that take non-const references to <B>builtin&lt;T&gt;</B> (i.e. extractor) are required.</LI>
<LI>The overloaded operators that take const references to <B>builtin&lt;T&gt;</B> (i.e. inserter, list given below) are not necessary because of the conversion operator <B>operator T</B>:</LI></UL>

<pre>
builtin&lt;int&gt; b1, b2, b3;
b1 = b2 + b3; // becomes: b1 =
              // (operator int(b2)) +
              // (operator int(b3));
</pre>

<p>This means that the following operators do not need to be defined, but I have included them here for completeness:</p>

<pre>
unary:
        operator+
        operator-
        operator~
        operator!
binary:
        operator&gt;&gt; (bit-shift)
        operator&lt;&lt; (bit-shift)
        operator&lt;&lt; (inserter)
        operator==
        operator!=
        operator&lt;
        operator&lt;=
        operator&gt;
        operator&gt;=
        operator+
        operator-
        operator*
        operator/
        operator%
        operator&amp;
        operator^
        operator|
</pre>

<p>The ANSI standard doesn't specify where a template class's member function definitions should reside, so different compilers tend to look in different places. For portability, all the functions are inline, making a <B>.cpp</B> file unnecessary. Using inline functions also means no run-time cost for using the wrapper class.</p>
<p>A benefit provided by <B>builtin&lt;T&gt;</B> is that more classes will able to use a compiler-generated constructor, so programmers will be able to write less code (see <A HREF="fig3.htm">Figure 3</A>).</p>
<p>Another benefit provided by <B>builtin&lt;T&gt;</B> is that it is possible to derive from <B>builtin&lt;T&gt;</B>, although it is not possible to derive from built-in types.</p>

<h4><FONT COLOR="#000080">Conclusion</FONT></H4>

<p>It could be argued that <B>builtin&lt;T&gt;</B> would be completely unnecessary if everyone always initialized their variables of built-in type. It could also be argued that if everyone always wrote correct software, then there would be no need for debuggers.</p>
<p>Initialization of built-in type variables and data members can always be guaranteed by wrapping the built-in type in a wrapper class, even in classes that rely on their compiler-generated constructor. Doing so changes the type of the data member, but that can be hidden with suitable overloaded operators. The wrapper class is a template class, so it will suffice for all the built-in types. The use of inline functions means there is no run-time cost for using the wrapper class.</p>

<h4><FONT COLOR="#000080">Acknowledgements</FONT></H4>

<p>A draft of this paper was posted to <B>comp.lang.c++</B>. Readers Siemel Naran and Jim Hyslop kindly provided valuable feedback and suggestions.</p>

<p><i>Robert Allan Schwartz</B> teaches the course "Design Patterns in C++" for Tessellation Training. He can be reached at <B>ras@tessellation.com</B>.</i></p>

<h4><a href="../../../source/1999/jun99/schwartz.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY>
</HTML>
