<HTML><HEAD>
<TITLE>June 1999/Default Initialization of Built-in Types/Figure 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Figure 2: The wrapper class definition</A></h4>
<pre>
// builtin.h
     
#ifndef BUILTIN_H
#define BUILTIN_H
     
#include &lt;iostream.h&gt;
     
template &lt;class T&gt;
class builtin
{
public:
    // these functions are required to be members:
     
    builtin(T new_value = 0);
    builtin(const builtin&lt;T&gt; &amp; other);
    ~builtin(void);
     
    builtin&lt;T&gt; &amp; operator  =(const builtin&lt;T&gt; &amp; other); 
    builtin&lt;T&gt; &amp; operator +=(const builtin&lt;T&gt; &amp; other); 
    builtin&lt;T&gt; &amp; operator -=(const builtin&lt;T&gt; &amp; other); 
    builtin&lt;T&gt; &amp; operator *=(const builtin&lt;T&gt; &amp; other); 
    builtin&lt;T&gt; &amp; operator /=(const builtin&lt;T&gt; &amp; other); 
    builtin&lt;T&gt; &amp; operator %=(const builtin&lt;T&gt; &amp; other); 
    builtin&lt;T&gt; &amp; operator&lt;&lt;=(const builtin&lt;T&gt; &amp; other); 
    builtin&lt;T&gt; &amp; operator&gt;&gt;=(const builtin&lt;T&gt; &amp; other); 
    builtin&lt;T&gt; &amp; operator &amp;=(const builtin&lt;T&gt; &amp; other); 
    builtin&lt;T&gt; &amp; operator |=(const builtin&lt;T&gt; &amp; other); 
    builtin&lt;T&gt; &amp; operator ^=(const builtin&lt;T&gt; &amp; other);
     
    builtin&lt;T&gt; &amp; operator++(void); // prefix  ++. returns
                                   // an lvalue. 
    builtin&lt;T&gt;   operator++(int);  // postfix ++. returns
                                   // an rvalue. 
    builtin&lt;T&gt; &amp; operator--(void); // prefix  --. returns
                                   // an lvalue. 
    builtin&lt;T&gt;   operator--(int);  // postfix --. returns
                                   // an rvalue.
     
    operator T(void) const;
     
    const T * operator&amp;(void) const;
          T * operator&amp;(void)      ;
     
private:
    T value;
};
     
// members:
     
template &lt;class T&gt;
inline builtin&lt;T&gt;::builtin(T new_value)
{
    value = new_value;
}
     
template &lt;class T&gt;
inline builtin&lt;T&gt;::builtin(const builtin&lt;T&gt; &amp; other) 
{
    value = other.value;
}
     
template &lt;class T&gt;
inline builtin&lt;T&gt;::~builtin(void)
{
}
     
template &lt;class T&gt;
inline builtin&lt;T&gt; &amp; builtin&lt;T&gt;::operator=(const builtin&lt;T&gt; &amp; other)
{
    value = other.value;
    return *this;
}
     
template &lt;class T&gt;
inline
builtin&lt;T&gt; &amp; builtin&lt;T&gt;::operator+=(const builtin&lt;T&gt; &amp; other)
{
    value += other.value;
    return *this;
}
     
// not shown: operator-=, operator*=, operator/=, operator%=,
//            operator&lt;&lt;=, operator&gt;&gt;=, operator&amp;=, operator|=,
//            operator^=

template &lt;class T&gt;
inline
builtin&lt;T&gt; &amp; builtin&lt;T&gt;::operator++(void) // prefix ++. 
{                                         // returns an lvalue.
    ++value;
    return *this;
}
     
template &lt;class T&gt;
inline
builtin&lt;T&gt; builtin&lt;T&gt;::operator++(int) // postfix ++. 
{                                      // returns an rvalue.

    // if your compiler doesn't support this syntax: 
    T result(value);
    // try this one:
    //      T result = value;
     
    value++;
    return result;
}
     
// not shown: prefix and postfix versions of operator--()

template &lt;class T&gt;
inline
T builtin&lt;T&gt;::operator T(void) const 
{
    return value;
}
     
template &lt;class T&gt;
inline
const T * builtin&lt;T&gt;::operator&amp;(void) const 
{
    return &amp;value;
}
     
template &lt;class T&gt;
inline
T * builtin&lt;T&gt;::operator&amp;(void)
{
    return &amp;value;
}
     
// non-members:
     
// unary:
     
template &lt;class T&gt;
inline
builtin&lt;T&gt; operator+(const builtin&lt;T&gt; &amp; bi) 
{
    return bi;
}
     
template &lt;class T&gt;
inline
builtin&lt;T&gt; operator-(const builtin&lt;T&gt; &amp; bi) 
{
    return -((T) bi);
}
     
template &lt;class T&gt;
inline
builtin&lt;T&gt; operator~(const builtin&lt;T&gt; &amp; bi) 
{
    return ~((T) bi);
}
     
template &lt;class T&gt;
inline
builtin&lt;T&gt; operator!(const builtin&lt;T&gt; &amp; bi) 
{
    return !((T) bi);
}
     
// binary:
     
template &lt;class T&gt;
inline
istream &amp; operator&gt;&gt;(istream &amp; s, builtin&lt;T&gt; &amp; bi) 
{
    T local_t;
    s &gt;&gt; local_t;
    bi = local_t;
     
    return s;
}
     
template &lt;class T&gt;
inline
ostream &amp; operator&lt;&lt;(ostream &amp; s, const builtin&lt;T&gt; &amp; bi) 
{
    s &lt;&lt; ((T) bi);
     
    return s;
}
     
template &lt;class T&gt;
inline
builtin&lt;T&gt; operator&gt;&gt;(const builtin&lt;T&gt; &amp; bi, int i) // bit shift. 
{
    return ((T) bi) &gt;&gt; i;
}
     
template &lt;class T&gt;
inline
builtin&lt;T&gt; operator&lt;&lt;(const builtin&lt;T&gt; &amp; bi, int i) // bit shift. 
{
    return ((T) bi) &lt;&lt; i;
}
     
template &lt;class T&gt;
inline
bool operator==(const builtin&lt;T&gt; &amp; bi1, const builtin&lt;T&gt; &amp; bi2) 
{
    return ((T) bi1) == ((T) bi2);
}
     
// not shown: operator!=, operator&lt;, operator&lt;=, operator&gt;,
              operator&gt;=, operator+, operator-, operator*,
              operator/, operator%, operator&amp;, operator^,
              operator|

#endif


</pre>
</BODY>
</HTML>
