<HTML>   
     <HEAD>
<TITLE>June 1999/A Container for a Set of Ranges</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjun.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">A Container for a Set of Ranges</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Andrew Phillips</FONT></H3>

<BLOCKQUOTE>
<p>If you need to represent an ordered list of ranges, the best data structure is probably somewhere between a list and a set.</p>
</BLOCKQUOTE>
<HR>
<BLOCKQUOTE>

<p>This article describes a template class, called <B>range_set</B>, that is useful for efficiently representing large sets of integers as an ordered set of ranges. Aside from a few restrictions on the contained type, it is completely compatible with the STL container <B>std::set</B>. It furthermore has facilities for adding and deleting ranges of values to the container.</p>
<p>In the right circumstances, this class can provide large benefits over <B>std::set</B> in memory usage. Lookup can even be faster when you have a set of integers which is mainly composed of large "clumps," or contiguous ranges of values. Since implementing the precursor of <B>range_set</B>, I have found that these circumstances tend to occur surprisingly often.</p>
<p>For example, I wrote the original C++ class on which <B>range_set</B> was based to keep track of the selection of up to two billion elements in a custom list-box control. Using the list-box user interface (clicking, dragging, and shift-clicking) the user can easily select a few individual elements, a few contiguous chunks of them, or even the whole lot. Unless the user decides to do something unusual, like selecting every second element (which for two billion elements would literally take a lifetime), this class is much more space efficient than <B>std::set</B>.</p>
<p>The original class, created many years ago, did not use templates because it was written before compilers implemented them, and before I had even heard of the STL. It worked only with elements of type <B>int</B>. So I decided to "templatize" it by changing all occurrences of <B>int</B> to a template parameter. On further consideration, I realised that the class was really a cut-down version <B>std::set&lt;int&gt;</B> with a few additions for adding and deleting ranges of values and converting ranges to and from C-style strings. There's nothing I would have liked more than to replace my original class with an STL container. Unfortunately, for my requirements there was no STL container that was as convenient or efficient. Instead I decided to create a new class that was as compatible with <B>std::set</B> as possible.</p>
<p>Although it took a little more work than I expected, all that was really necessary was to rearrange some of the code from the original class and to create iterators and a few utility functions, such as <B>upper_bound</B>, <B>lower_bound</B>, <B>count</B>, etc. The complete class is implemented in the file <B>range_set.h</B>, and is available online (see p. 3 for downloading instructions). A partial listing is shown in <A HREF="fig1.htm">Figure 1</A>.</p>

<h4><FONT COLOR="#000080">Design Choices</FONT></H4>

<p>My initial impulse was simply to create a class that behaved as much like <B>std::set</B> as possible. But before writing any new code, I then gave consideration to other implementation choices that might improve the flexibility, efficiency, and potential uses of the class. I first considered deriving it from <B>std::set</B>. But there was no advantage in doing this, and it seemed contrary to the way things were done in the STL. I also considered making it a partial specialization of <B>std::set</B>. However, I could not see any way to make a specialization based on the contained type being an integral type. In some circumstances it's preferable to use the real <B>std::set&lt;int&gt;</B> rather than be forced to use the specialization. Moreover, the new class was more than a specialization since it added new facilities.</p>
<p>Lastly, I considered making it a container adapter. This would allow adapting an STL container such as <B>std::set</B> or <B>std::list</B>, depending on the requirements. After some experimentation I decided this was not appropriate for a number of reasons. But the main reason was that the resulting class would not be as compatible with <B>std::set</B> as I wanted. So I returned to my original impulse and created a class called <B>range_set</B>.</p>

<h4><FONT COLOR="#000080">Using range_set</FONT></H4>

<p>Template class <B>range_set</B> is typically used to contain elements of type <B>int</B>, <B>long</B>, or some other integral type. Iterators and member functions necessarily assume that the contained type implements <B>operator+</B> and <B>operator-</B>. Of course, you can create or use any class as long as it implements these operators with the semantics of an integral type.</p>
<p>There would probably be little profit in using <B>range_set</B> as a simple replacement for <B>std::set</B> and not take advantage of the extra facilities it provides. As you might expect, <B>range_set</B> has member functions to add and delete ranges of values. These are called <B>insert_range</B> and <B>delete_range</B>. There are also versions of <B>insert_range</B> and <B>delete_range</B> that take a "hint" iterator. This is similar to the version of <B>std::set::insert</B> that takes an iterator parameter, to provide for more efficient insertions. If the hint iterator points to the place in the <B>range_set</B> where the change is to take place, the operation is performed in constant time rather than linear time.</p>
<p>In accordance with STL and C/C++ generally, ranges passed to <B>insert_range</B> and <B>delete_range</B> are "half open." That is, they are specified with an inclusive lower bound and an exclusive upper bound. Hence <B>a.insert_range(2, 4)</B> adds two elements, with values 2 and 3.</p>
<p>The forerunner to <B>range_set</B> was primarily provided to allow the user to enter ranges of integers as a string, such as "1-10, 20-30." So, at no extra cost, I have provided an <B>operator&lt;&lt;</B> and an <B>operator&gt;&gt;</B> for reading and writing ranges to a stream. Note that, as users are not always programmers, these ranges are inclusive or closed ranges and not the half-open ranges mentioned above. Also, for output, <B>operator&lt;&lt;</B> uses a colon (:) rather than a minus sign (-) to separate the two ends of the range. This alleviates confusion for ranges with negative values. <B>operator&gt;&gt;</B> accepts ranges with ends separated by either character.</p>
<p>As an example, the following code is taken from an MFC application. In this application an edit control in a dialog box allows the user to specify a set of values using the formatting provided by <B>range_set</B>. The conversion process is a little convoluted, but it works. To put the value of the <B>range_set</B> into the edit control, it is converted to a <B>std::ostringstream</B> object, thence to a <B>std::string</B> object, thence to a C-style string, thence to an MFC <B>CString</B>, before finally being added to the edit box!</p>

<pre>
#include &lt;string&gt;
#include &lt;sstream&gt;
#include &lt;range_set.h&gt;
using namespace std;
     
    .....
// Put current range in edit box
    ostringstream ostr;
    ostr &lt;&lt; group_[current].range;
     
    const CString s = (const char *)
                 ostr.str().c_str();
    pedit-&gt;SetWindowText(s);
    .....
     
    // Get the range from edit box
    pedit-&gt;GetWindowText(s);
     
    istringstream
        istr((const char *)s);
    istr &gt;&gt; group_[current].range;
</pre>

<p>This code was taken from a binary file editor I wrote for Windows that allows the user to specify sets of bytes to be displayed in different colours. The complete source for this binary file editor, including <B>range_set.h</B>, is available for download from the web site:</p>

<pre>
http://members.tripod.com/AndrewPhillips
</pre>

<p>(<B>range_set.h</B> is also available from the <I>CUJ</I> ftp site.)</p>
<p><B>range_set</B> allows you to create sets of very large ranges of numbers. With the standard header <B>&lt;limits&gt;</B> you can create a set containing all valid values of the contained type. There is one restriction &#151; because of the use of half-open ranges, you cannot add the largest value to the set. The code below will create a <B>range_set</B> that includes all values of type <B>int</B> in the implementation, except the very largest.</p>

<pre>
#include &lt;limits&gt;
using namespace std;
     
    .....
    range_set&lt;int&gt; a;
    a.insert(
        numeric_limits&lt;int&gt;::min(),
        numeric_limits&lt;int&gt;::max());
</pre>

<p>For further information on using <B>range_set</B> member functions, iterators, etc., refer to the description of <B>std::set</B> that comes with your compiler, or other STL documentation.</p>

<h4><FONT COLOR="#000080">Assertions</FONT></H4>

<p>I have often found, when using the STL and particularly iterators, that it is easy to misunderstand the parameters to a function, or even make a simple typo that results in undefined behaviour. For example, many functions take two iterators that specify the start and end of a range. If by mistake these iterators are not for the same container, then the program will suffer anything from a benign tumour to a quick but painful death. Worse, it may cause an insidious but undetected cancer.</p>
<p><B>range_set</B> member functions will detect most, if not all, problems of this type. All parameters passed to <B>range_set</B> member functions are validated using assertions. This is done fairly easily since <B>range_set</B> iterators necessarily know the container they are to be used with. Hence it is simple to check that an iterator is valid for a container.</p>
<p>Note that assertions are only activated if the macro <B>NDEBUG</B> is not defined. This allows you to easily track down bugs in the debug version of your software but remove the assertions in the release version.</p>
<p>Unlike some people, I recommend removing (most) assertions from production code. There is no purpose in leaving assertions enabled in the final product, since the real value of assertions is in tracking down the cause of bugs, not to actually detect their presence. If you have the above sorts of bugs in your production code then you are in real trouble!</p>
<p>Unfortunately, <B>range_set</B> iterators cannot perform their magic when they are used with STL algorithms. Changes to the standard library code would be necessary. It would be an enormous boon if compiler vendors provided such a debug version of the standard C++ library.</p>

<h4><FONT COLOR="#000080">Implementation</FONT></H4>

<p>range_set</B> is implemented using a linked list (<B>std::list</B>) of half-open ranges. For example, if a <B>range_set</B> object contains the numbers from 10 to 19 (inclusive), just one element in the linked list is required. It stores the pair of values 10 and 20, representing the half-open range [10, 20). The large space savings possible with <B>range_set</B> are obviously due to the fact that not all values "stored" in a container need actually be present in it. However, there are adverse consequences. For example, a <B>range_set</B> object cannot be used to store objects where the caller relies on all the objects being constructed.</p>
<p>Another problem is that a <B>range_set</B> object can be slow given the wrong sort of data. In the worst case, a <B>range_set</B> object will be a lot slower than an <B>std::set</B> object. It takes time O(n) to test if a value is in the set of ranges, compared with O(log n) for the standard set, where n is the number of elements stored. However, in the best case it will take constant time. For the uses for which <B>range_set</B> is designed, it will typically be faster than <B>std::set</B>. Moreover, its space efficiency is at least as good as <B>std::set</B> (O(n)), and often much greater.</p>
<p>The time to insert and delete a value in the set of ranges is also O(n) in the worst case compared with O(log n) for <B>std::set</B>. This is ameliorated by the fact that, once again for appropriate uses, <B>range_set</B> is faster. Also, versions of <B>insert</B>, <B>insert_range</B>, and <B>erase_range</B> are provided which take a hint iterator, which is used as a starting point for the insertion or deletion. Proper use of these functions results in amortised constant time for the operations.</p>
<p>Iterators are typically dereferenced (using <B>operator-&gt;</B> or <B>operator*</B>) to obtain a value from a container. But as mentioned above, a <B>range_set</B> does not actually store all of the values it represents. So for an iterator to expose all the values of the container, we need a little sleight of hand. The trick is that every iterator stores an object of the contained type, which has the value of the current container element that it designates. It is this member object that is dereferenced by <B>operator-&gt;</B> and <B>operator*</B>.</p>
<p>This trick leads to an obscure difference between <B>range_set</B> and <B>std::set</B>. If you obtain the address of the element that an iterator references, the addresses will be different for different iterators even if they point to the same container element. This is demonstrated by the following code. The assertion on the last line fails for a <B>range_set</B> object, but not for a <B>std::set</B> object:</p>

<pre>
range_set&lt;int&gt;::iterator i1, i2;
i1 = a.begin();
i2 = a.begin();
const int *p1, *p2;
p1 = i1.operator-&gt;();
p2 = i2.operator-&gt;();
assert(p1 == p2);
</pre>

<p>Another consequence is that iterators can be much larger than expected if the contained type is a large class. This is not a problem for small built-in types like <B>int</B>.</p>

<h4><FONT COLOR="#000080">Conclusion</FONT></H4>

<p>Template class <B>range_set</B> blends well with STL because it is designed to be compatible with <B>std::set</B>. It is also easy to use if you are already familiar with STL containers. In some situations it could even be used as a drop-in replacement for <B>std::set</B>, since it provides all the same functions, iterators etc. In general, <B>range_set</B> is not a replacement for <B>std::set</B>, but in particular cases it is much more efficient. It is also easier to use because it provides functions to deal with ranges of values. On the other hand, it can also be very inefficient. So it is important to know when its use is appropriate.</p>
<p>Fortunately, it is usually easy to decide when to use it. <B>range_set</B> should be used when you need to store a set of integral values (of type <B>int</B>, <B>long</B>, etc.), and there are just a few values to be stored or a few ranges of contiguous values. When these ranges are large is when <B>range_set</B> really shines, providing big savings in memory and speed.</p>

<p><i>Andrew Phillips has a B.Sc. in Computer Science from the University of Sydney. He has been using C and C++ professionally for 15 years. His interests include improving the maintainability, testability, and debugability of code and user interface design. He is the senior programmer with Encom Technology and can be reached at <B>aphillips@one.net.au</B> or <B>andrew@encom.com.au</B>.</i></p>

<h4><a href="../../../source/1999/jun99/phillips.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY>
</HTML>
