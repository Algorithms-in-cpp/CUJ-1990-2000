<HTML>   
     <HEAD>
<TITLE>June 1999/Better Assertions for MFC</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjun.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Testing and Debugging</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Better Assertions for MFC</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Giovanni Bavestrelli</FONT></H3>
<BLOCKQUOTE>
<p>Okay, you know that assertions can be a good idea. Under MFC, they can be made even more useful.</p>
</BLOCKQUOTE>
<HR>
<BLOCKQUOTE>

<p>If it is meaningful for a programmer to have a favorite statement, then certainly my favorite statement is <B>assert</B>. It has gotten me out of trouble more often and more quickly than any other single technique I've used. So naturally I want to use assertions in Windows programs as well as generic C/C++ programs. MFC defines several types of assertions, which, for reasons I explain below, can be inappropriate for some applications. In this article I present a few improvements to the MFC assertions. A couple are rewrites of MFC's <B>ASSERT</B> and <B>VERIFY</B>, and a couple are useful extensions.</p>
<p>A lot has been said and written about assertions, but I keep finding C and C++ programmers who either don't know what they are or just end up not using them. For the former group, I list a few good books and magazine articles at the end of this article. If you are in the latter group, I hope this article will make it easier to start using assertions in your own programs. You have nothing to lose but hours of frustration and crashing programs.</p>

<h4><FONT COLOR="#000080">Improving ASSERT and VERIFY</FONT></H4>

<p>MFC (Microsoft Foundation Classes) defines two main forms of assertions for debugging purposes: <B>ASSERT</B> and <B>VERIFY</B> <a href="#1">[1]</a>. <B>ASSERT</B> is similar to the Standard C library's <B>assert</B>. It effectively disappears whenever <B>NDEBUG</B> is defined, which means it won't have any effect in release builds. <B>VERIFY</B> is a form of assertion that supports more succint coding. Whereas <B>ASSERT</B> statements disappear in release builds, the expression within a <B>VERIFY</B> statement is still evaluated if <B>NDEBUG</B> is defined. However, if <B>NDEBUG</B> is defined, <B>VERIFY</B> does not call the underlying <B>assert</B> if the condition fails.</p>
<p><B>VERIFY</B> is defined as follows:</p>

<pre>
#ifdef  NDEBUG
   #define VERIFY(exp) ((void)(exp))
#else
   #define VERIFY(exp) ASSERT(exp)
#endif  
</pre>

<p>It allows you to rewrite code like</p>

<pre>
BOOL Success = CreateConnection(/*...*/);
ASSERT(Success);
</pre>

<p>as:</p>

<pre>
VERIFY(CreateConnection(/*...*/));
</pre>

<p>Assertions like these are very useful, but I never use MFC's <B>ASSERT</B> and <B>VERIFY</B> because they have three problems:</p>
<p>1)  They are not defined as expressions; they are expanded instead in a do-while statement (see <B>afx.h</B>).</p>
<p>2)  They interrupt the execution of the program and require the user to respond.</p>
<p>3)  They don't log the assertion information, they just display it.</p>
<p>I think it is important that assertions be defined as expressions, because expressions can go in many more places than do-while statements can. Also, it is probably not hard to imagine situations when 2) and 3) above become undesirable. So I have written my own versions of <B>ASSERT</B> and <B>VERIFY</B>. They behave similarly to MFC's, but without the problems listed above.</p>
<p>These assertions are defined in <A HREF="fig1.htm">Figure 1</A>. The new <B>ASSERT</B> uses the function <B>GioAssertFailedLine</B> (<A HREF="fig2.htm">Figure 2</A>), which logs an assertion to a file and issues a warning, but does not issue a message box. If you want to stop program execution when an assertion fires while debugging, just put a breakpoint inside the <B>GioAssertFailedLine</B> function. This function, and all the assertions, are available with this month's online sources (see p. 3 for downloading instructions).</p>

<h4><FONT COLOR="#000080">Let's be SAFE</FONT></H4>

<p>Besides the standard assertion macros, I've made up a couple extra types, for the simple reason that I am lazy. Here is my favorite macro:</p>

<pre>
#ifdef NDEBUG
   #define SAFE(exp) (exp)
#else
   #define SAFE(exp) (ASSERT(exp),(exp))
#endif
</pre>

<p>This macro has a big advantage over the more traditional forms of the assertions: it maintains the value and the type of the expression within it! This is no minor advantage, because it dramatically increases the number of places it can be used.</p>
<p>You do pay a price for this flexibility, but only in debugging builds. The price is that, thanks to the comma operator, the expression within the <B>SAFE</B> macro is evaluated twice. This macro could also be a source of errors if you fail to obey a rule similar to the one for <B>ASSERT</B>. What you put inside <B>ASSERT</B> must not have side effects or change the state of your program. With <B>SAFE</B>, the rule is somewhat less stringent: the expression inside the <B>SAFE</B> statement can have side effects as long as the same side effects result whether the expression is evaluated once or twice. Since the expression within <B>SAFE</B> is evaluated twice in debugging builds but only once in release builds, any difference in side effects could generate errors. You might rename <B>SAFE</B> into <B>SAFE2</B> if it helps you to remember this.</p>
<p>Note that <B>SAFE</B> as defined above can be used only if <B>ASSERT</B> is defined as an expression. If it is not, like in MFC, you can define <B>SAFE</B> thus:</p>

<pre>
#ifdef NDEBUG
   #define SAFE(exp)  (exp)
#else
   #define SAFE(exp)  (!(exp) &amp;&amp; (AfxAssertFailedLine(THIS_FILE,__LINE__),0),(exp))
#endif
</pre>

<p>If you want to use the Microsoft C library's <B>_assert</B>, use the following:</p>

<pre>
#ifdef NDEBUG
   #define SAFE(exp)  (exp)
#else
   #define SAFE(exp) (!(exp) &amp;&amp; (_assert(#exp,__FILE__,__LINE__),0),(exp))
#endif
</pre>

<p>Note that <B>SAFE</B> does not replace <B>ASSERT</B> or <B>VERIFY</B>; it integrates them.</p>

<h4><FONT COLOR="#000080">Using SAFE</FONT></H4>

<p>Below I show how you can use <B>SAFE</B>, considering class <B>CWnd</B> to be defined as follows:</p>

<pre>
class CWnd
{
   //......
   int GetWindowText(char * pBuff, int len);
};
</pre>

<p>MFC programmers will recognize the two member functions defined in MFC's <B>CWnd</B> class. But those of you who don't use MFC still have enough information to understand the examples that follow:</p>

<pre>
BOOL
TestFunction(CWnd * pWnd, char * pBuff, int TotalSize, int SizeElem)
{
   if (!SAFE(pWnd)-&gt;GetWindowText(SAFE(pBuff), TotalSize/SAFE(SizeElem))
      return SAFE(FALSE);
   else
      return TRUE;
}
</pre>

<p>This is a bit of a drastic use of <B>SAFE</B> &#151; four calls in one statement &#151; but it gives you an idea of all the places you can use it. The first <B>SAFE</B> statement asserts that the pointer to the window, <B>pWnd</B>, is not <B>NULL</B> before dereferencing it. The second asserts that the pointer to the buffer <B>pBuff</B> is not <B>NULL</B> before passing it to <B>GetWindowText</B>. The third is in a numeric expression where the denominator must not be zero. The fourth asserts before returning <B>FALSE</B>. The alternative without <B>SAFE</B> would have been:</p>

<pre>
BOOL
TestFunction(CWnd * pWnd, char * pBuff, int TotalSize, int SizeElem)
{
   ASSERT(pWnd);
   ASSERT(pBuff);
   ASSERT(SizeElem);
   if (!pWnd-&gt;GetWindowText(pBuff,TotalSize/SizeElem)
   {
      ASSERT(FALSE);
      return FALSE;
   }
   else
      return TRUE;
}
</pre>

<p>You might think that combining the first three assertions above would be a convenience:</p>

<pre>
ASSERT(pWnd &amp;&amp; pBuff &amp;&amp; SizeElem);
</pre>

<p>Resist the temptation! If the above assertion fires, you will not know why; it could be any one or more of the three conditions!</p>
<p>From the above examples, you can see why I said I made <B>SAFE</B> up because I am lazy. You can use <B>SAFE</B> right there where you need it, without adding any extra statements. You can use it within any expression, to assert that parts of it will be non-zero. There is even a way to do the above example in only one line of code (broken into more than one line only to fit on this page):</p>

<pre>
BOOL
TestFunction(CWnd * pWnd, char * pBuff, int TotalSize, int SizeElem)
{
   return SAFE(SAFE(pWnd)-&gt;
      GetWindowText(SAFE(pBuff),
      TotalSize/SAFE(SizeElem)));
}
</pre>

<p>But this is a bit much, and it's not a good idea to put a <B>SAFE</B> macro inside another. (<B>pWnd</B> will be evaluated four times in debugging builds.) Still, this example shows the flexibility of this macro.</p>
<p>Be careful when you use <B>SAFE</B>. Remember that the expression within <B>SAFE</B> is evaluated twice. Given a list of windows with a member function like this:</p>

<pre>
class CWindowList
{
   //...
   CWnd * GetNextWindow() const;
};
</pre>

<p>this usage would be very wrong:</p>

<pre>
CWindowList MyWindowList;
//...
SAFE(MyWindowList.GetNextWindow())-&gt; 
   SetWindowText("Hello");
</pre>

<p>In debugging code, <B>GetNextWindow</B> would be called inside an <B>assert</B> statement, returning the pointer to a window; then it would be called again returning the pointer to the next window, and this pointer would not be asserted before being dereferenced. So this code would fail twice: it would skip a window and it would not assert the pointer it was going to dereference.</p>
<p>The following code fixes this problem:</p>

<pre>
CWnd * pWnd=
   MyWindowList.GetNextWindow();
SAFE(pWnd)-&gt;SetWindowText("Hello");
</pre>

<p>I must also stress the fact that the above assertion is meaningful only if you assume <B>pWnd</B> can never be <B>NULL</B>; that is, if it is <B>NULL</B>, it's because there is a bug in your program, and <B>SAFE</B> will tell you exactly where it is before your program crashes. But if <B>pWnd</B>'s being <B>NULL</B> is a valid condition, then code like the following would be more appropriate:</p>

<pre>
CWnd * pWnd=
   MyWindowList.GetNextWindow();
If (pWnd) pWnd-&gt;SetWindowText("Hello");
</pre>

<p>Remember that assertions don't fix the problem, they just point directly to it (and give you confidence when they don't scream at you for some time).</p>

<h4><FONT COLOR="#000080">Other Types</FONT></H4>

<p>I've made up some more types of assertions, but these represent just a few of the types you could possibly make for yourself. They are all based upon the good old <B>ASSERT</B> (see <A HREF="fig1.htm">Figure 1</A>):</p>

<pre>
ASSERT_LEN
ASSERT_ONCE
ASSERT_ARRAYINDEX
</pre>

<p>ASSERT_LEN</B> asserts that you did not overrun a buffer; <B>ASSERT_ARRAYINDEX</B> asserts that the index of an array is valid; and <B>ASSERT_ONCE</B> is used inside loops, to avoid an assertion from firing many times &#151; once is enough to indicate a problem.</p>

<h4><FONT COLOR="#000080">Conclusion</FONT></H4>

<p>I put together the above assertions for use with MFC, but the ideas presented should be applicable in other environments. I know that C++ fans (like me) frown at the use of macros. If you can make something similar, perhaps using templates, without the use of macros, I'd be interested to know.</p>

<h4><FONT COLOR="#000080">Notes and References</FONT></H4>

<p><a name="1"></a>[1]  MFC also defines many other specialized forms, such as <B>ASSERT_POINTER</B>, <B>ASSERT_VALID</B>, <B>ASSERT_KINDOF</B>, etc. Some of these more specialized forms work only with pointers to objects derived from some MFC classes. They are all useful, but the most important forms are <B>ASSERT</B> and <B>VERIFY</B>.</p>
<p><a name="2"></a>[2]  Steve Maguire. <I>Writing Solid Code</I> (Microsoft Press, 1993).</p>
<p><a name="3"></a>[3]  David Thielen. <I>NO BUGS!: Delivering Error-Free Code in C and C++</I> (Addison-Wesley, 1992).</p>
<p><a name="4"></a>[4]  Earl Fong. "Being Assertive in C/C++," <I>C/C++ Users Journal,</I> June 1997.</p>
<p><a name="5"></a>[5]  Chuck Allison. "Code Capsules: The Standard C Library, Part 2," <I>C/C++ Users Journal,</I>, February 1995.</p>

<p><i>Giovanni Bavestrelli lives in Milan and is a software engineer for Techint S.p.A., Castellanza, Italy. He has a degree in Electronic Engineering from the Politecnico di Milano, and writes automation software for Pomini Roll Grinding machines. He has been working in C++ under Windows since 1992, specializing in the design and development of reusable object-oriented libraries. He can be reached at <B>giovanni.bavestrelli@pomini.it</B>.</i></p>

<h4><a href="../../../source/1999/jun99/bavestre.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY>
</HTML>
