<HTML><HEAD>
<TITLE>June 1999/Standard C/C++/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1:	deque::iterator circa 1997</A></h4>
<pre>
#define DEQUEMAPSIZ    2
#define DEQUESIZ (4096 &lt; sizeof (Ty) ? 1 : 4096 / sizeof (Ty))

        // TEMPLATE CLASS deque
template&lt;class Ty, class A = allocator&lt;Ty&gt; &gt;
    class deque {
public:
    typedef deque&lt;Ty, A&gt; Myt;
    typedef A allocator_type;
    typedef typename A::size_type size_type;
    typedef typename A::difference_type difference_type;
    typedef typename A::pointer Tptr;
    typedef typename A::const_pointer Ctptr;
    typedef A::rebind&lt;Tptr&gt;::other::pointer Mapptr;
    typedef typename A::reference reference;
    typedef typename A::const_reference const_reference;
    typedef typename A::value_type value_type;

        // CLASS iterator
    class const_iterator;
    class iterator : public Ranit&lt;Ty, difference_type,
        Tptr, reference&gt; {
    public:
        friend class deque&lt;Ty, A&gt;;
        friend class const_iterator;
        iterator()
            : First(0), Last(0), Next(0), Map(0) {}
        iterator(Tptr P, Mapptr M)
            : First(*M), Last(*M + DEQUESIZ),
                Next(P), Map(M) {}
        reference operator*() const
            {return (*Next); }
        Tptr operator-&gt;() const
            {return (&amp;**this); }
        iterator&amp; operator++()
            {if (++Next == Last)
                {First = *++Map;
                Last = First + DEQUESIZ;
                Next = First; }
            return (*this); }
        iterator operator++(int)
            {iterator Tmp = *this;
            ++*this;
            return (Tmp); }
        iterator&amp; operator--()
            {if (Next == First)
                {First = *--Map;
                Last = First + DEQUESIZ;
                Next = Last; }
            --Next;
            return (*this); }
        iterator operator--(int)
            {iterator Tmp = *this;
            --*this;
            return (Tmp); }
        iterator&amp; operator+=(difference_type N)
            {Add(N);
            return (*this); }
        iterator&amp; operator-=(difference_type N)
            {return (*this += -N); }
        iterator operator+(difference_type N) const
            {iterator Tmp = *this;
            return (Tmp += N); }
        iterator operator-(difference_type N) const
            {iterator Tmp = *this;
            return (Tmp -= N); }
        difference_type operator-(const iterator&amp; X) const
            {return (Map == X.Map ? Next - X.Next
                : DEQUESIZ * (Map - X.Map - 1)
                + (Next - First) + (X.Last - X.Next)); }
        reference operator[](difference_type N) const
            {return (*(*this + N)); }
        bool operator==(const iterator&amp; X) const
            {return (Next == X.Next); }
        bool operator!=(const iterator&amp; X) const
            {return (!(*this == X)); }
        bool operator&lt;(const iterator&amp; X) const
            {return (Map &lt; X.Map
                || Map == X.Map &amp;&amp; Next &lt; X.Next); }
        bool operator&lt;=(const iterator&amp; X) const
            {return (!(X &lt; *this)); }
        bool operator&gt;(const iterator&amp; X) const
            {return (X &lt; *this); }
        bool operator&gt;=(const iterator&amp; X) const
            {return (!(*this &lt; X)); }
    protected:
        void Add(difference_type N)
            {difference_type Off = N + Next - First;
            difference_type Moff = (0 &lt;= Off)
                ? Off / DEQUESIZ
                : -((DEQUESIZ - 1 - Off) / DEQUESIZ);
            if (Moff == 0)
                Next += N;
            else
                {Map += Moff;
                First = *Map;
                Last = First + DEQUESIZ;
                Next = First + (Off - Moff * DEQUESIZ); }}
        Tptr First, Last, Next;
        Mapptr Map;
        };

</pre>
</BODY>
</HTML>
