<HTML><HEAD>
<TITLE>June 1999/Standard C/C++/Listing 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 3: deque::iterator circa 1999</A></h4>
<pre>
#define _DEQUEMAPSIZ    8    /* at least 1 */
#define _DEQUESIZ (4096 &lt; sizeof (_Ty) ? \
    1 : 4096 / sizeof (_Ty))

// code for deque base classes omitted

        // TEMPLATE CLASS deque
template&lt;class _Ty, class _Ax = allocator&lt;_Ty&gt; &gt;
    class deque
        : public _Deque_val&lt;_Ty, _Ax&gt; {
public:
// typedefs omitted

        // CLASS iterator
    class const_iterator;
    class iterator : public _Ranit&lt;_Ty, _Dift, _Tptr, _Reft&gt; {
    public:
        typedef _Ranit&lt;_Ty, _Dift, _Tptr, _Reft&gt; _Mybase;
        typedef typename _Mybase::iterator_category
            iterator_category;
        typedef typename _Mybase::value_type value_type;
        typedef typename _Mybase::difference_type
            difference_type;
        typedef typename _Mybase::pointer pointer;
        typedef typename _Mybase::reference reference;
        friend class deque&lt;_Ty, _A&gt;;
        friend class const_iterator;
        iterator()
            : _Idx(0), _Deque(0)
            {}
        iterator(difference_type _I, deque&lt;_Ty, _A&gt; *_P)
            : _Idx(_I), _Deque(_P)
            {}
        reference operator*() const
            {size_type _Block = _Idx / _DEQUESIZ;
            _Idx -= _Block * _DEQUESIZ;
            if (_Block &lt;= _Deque-&gt;_Mapsize)
                _Block -= _Deque-&gt;_Mapsize;
            return ((_Deque-&gt;_Map)[_Block][_Idx]); }
        _Tptr operator-&gt;() const
            {return (&amp;**this); }
        iterator&amp; operator++()
            {++_Idx;
            return (*this); }
        iterator operator++(int)
            {iterator _Tmp = *this;
            ++*this;
            return (_Tmp); }
        iterator&amp; operator--()
            {--_Idx;
            return (*this); }
        iterator operator--(int)
            {iterator _Tmp = *this;
            --*this;
            return (_Tmp); }
        iterator&amp; operator+=(difference_type _N)
            {_Idx += _N;
            return (*this); }
        iterator&amp; operator-=(difference_type _N)
            {return (*this += -_N); }
        iterator operator+(difference_type _N) const
            {iterator _Tmp = *this;
            return (_Tmp += _N); }
        iterator operator-(difference_type _N) const
            {iterator _Tmp = *this;
            return (_Tmp -= _N); }
        difference_type operator-(const iterator&amp; _X) const
            {return (_Idx - _X._Idx); }
        reference operator[](difference_type _N) const
            {return (*(*this + _N)); }
        bool operator==(const iterator&amp; _X) const
            {return (_Deque == _X._Deque &amp;&amp; _Idx == _X._Idx); }
        bool operator!=(const iterator&amp; _X) const
            {return (!(*this == _X)); }
        bool operator&lt;(const iterator&amp; _X) const
            {return (_Idx &lt; _X._Idx); }
        bool operator&lt;=(const iterator&amp; _X) const
            {return (!(_X &lt; *this)); }
        bool operator&gt;(const iterator&amp; _X) const
            {return (_X &lt; *this); }
        bool operator&gt;=(const iterator&amp; _X) const
            {return (!(*this &lt; _X)); }
    protected:
        difference_type _Idx;
        deque&lt;_Ty, _A&gt; *_Deque;
        };

</pre>
</BODY>
</HTML>
