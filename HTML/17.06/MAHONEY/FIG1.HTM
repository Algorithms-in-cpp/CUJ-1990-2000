<HTML><HEAD>
<TITLE>June 1999/Calculating CRC Checksums in C++/Figure 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Figure 1:	CRC Error-checking class</A></h4>
<pre>
// Based on Ross Williams' Rocksoft Model CRC Algorithm,
// available as part of the document "A Painless Guide to
// CRC Error Detection Algorithms", also by Ross Williams

// NOTE: ... indicates code omitted for brevity

#if !defined(__CRC_H)
#define __CRC_H

namespace cdm_crc
   {
   static const int CRCMaxBits = 32;

   template&lt;int Width, unsigned long Poly, unsigned long Init,
      unsigned long XOrOut, bool Ref, bool Direct = true&gt;
   class CRCGenerator
      {
   public:
      class CRCTable;
      friend class CRCTable;
      class CRCTable
         {
         unsigned long Table[ 256 ];

         // Calculate the table entry at 'index'
         unsigned long CalcTableEntry( int index )
            {
            ...
            }

      public:
         CRCTable()
            {
            for( int i = 0; i &lt; 256; i++ )
               {
               Table[ i ] = CalcTableEntry( i );
               }
            }
         unsigned long 
         operator[](int i) const  {return Table[ i ];}
         };

   private:
      static const CRCTable Table;

     // Register holds the current value of the CRC calculation
     unsigned long Register;      

     // Return an unsigned long with i'th bit set to one
     static unsigned long Bitmask( int i )   { return 1UL &lt;&lt; i; }

     // Reflect the bottom b bits of val
     static unsigned long Reflect( unsigned long val, int b )
        {
        ...
        }

     // Return an unsigned long with value ( 2^width )-1
     static unsigned long WidthMask( int width )
        {
        return ( ( ( 1UL&lt;&lt;(width-1) ) -1UL )&lt;&lt;1 ) | 1UL;
        }
   public:
      CRCGenerator(): Register( Init ) {}
      unsigned long GetCRC() const
         {
         return (XOrOut ^ Register) &amp; WidthMask( Width );
         }
      unsigned long GetNormalCRC() const
         {
         ...
         }
      bool GetDirect() const   { return Direct; }
      bool GetReflect() const  { return Ref; }
      int  GetWidth() const    { return Width; }
      void LoadRegister( unsigned long val )
         {
         ...
         }

      void Process( unsigned char ch )
         {
         ...
         }

      void Process( unsigned char* block, int block_length )
         {
         ...
         }
// Un-comment the following version if no member templates
///      void Process(unsigned char* first, unsigned char* last)
///         {
///         while( first != last )
///            {
///            Process( *first++ );
///            }
///         }
// Comment out the following version if no member templates
      template&lt;class InIter&gt;
      void Process( InIter first, InIter last )
         {
         while( first != last )
            {
            Process( *first );
            ++first;
            }
         }
      // Process 'count' bits from 'bits'. if 'Ref' is false 
      // reads starting from MSB of 'bits'. If 'Ref' is true 
      // starts from LSB
      void ProcessBits( unsigned char bits, int count )
         {
         ...
         }
     void Reset()
        {
        Register = Init;
        }
     void Write( ostream&amp; os ) const
        {
        ...
        }
      };

   template&lt;int Width, unsigned long Poly, unsigned long Init,
      unsigned long XOrOut, bool Ref, bool Direct&gt;
   const 
   CRCGenerator&lt;Width, Poly, Init, XOrOut, Ref, Direct&gt;::CRCTable 
   CRCGenerator&lt;Width, Poly, Init, XOrOut, Ref, Direct&gt;::Table;

   template&lt;int Width, unsigned long Poly, unsigned long Init, 
      unsigned long XOrOut, bool Ref, bool Direct&gt;
   ostream&amp; operator&lt;&lt;( ostream&amp; os,
      CRCGenerator&lt;Width, Poly, Init, XOrOut, Ref, Direct&gt;&amp; crc)
         {
         crc.Write( os );
         return os;
         }
   }; // end of namespace cdm_crc
#endif // __CRC_H

</pre>
</BODY>
</HTML>
