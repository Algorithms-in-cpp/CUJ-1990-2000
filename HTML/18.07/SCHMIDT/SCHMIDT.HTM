<HTML>   
     <HEAD>
<TITLE>July 2000/Uncaught Exceptions</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjul.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Uncaught Exceptions: Adventures of Aquaman</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Bobby Schmidt</FONT></H3>

<BLOCKQUOTE>
<p>Bobby shows how to outsmart the compiler several different ways, even if he can't outsmart the stock market.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>Copyright &copy; 2000 Robert H. Schmidt</p>
<p>Three weeks after I rejoined Microsoft, the company's stock price dropped $30 below my stock-option buy price. In option-speak: I'm underwater, so far that my teammates call me Aquaman. When considering whether to accept my new job, I ignored the options; yet now that I'm surrounded by coworkers who get beeped when the stock moves, it's hard to stay detached.</p>
<p>During this same period, Apple's stock reached all-time highs, and the company announced its first stock split in more than a decade. Much market anticipation surrounds Apple's coming OS X and its new Aqua interface. That OS will make me a different kind of Aquaman in a home filled with Macs.</p>
<p>The twain of Microsoft and Apple do sometimes meet. Microsoft just released version 5 of Internet Explorer for the Mac. Supposedly this browser is highly compliant with W3C standards, whereas the Windows version is getting nailed in the press for being non-compliant. Not being terribly hip to HTML standards, I like IE 5 for its new interface. Perhaps subliminally, I've chosen an aqua-colored theme.</p>

<H4><FONT COLOR="#000080">Mousetrap 2000</FONT></H4>
<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> Hi Bobby,</p>
<p>In the April issue of <I>CUJ</I> you report a possible portability problem in the <B>LENGTHOF</B> code I sent you some time ago. [The <B>LENGTHOF</B> macro returns the length of a previously defined fixed-size array. For example, if you define <B>a</B> as an array of ten <B>int</B>s: <B>int a[10]</B>; then <B>LENGTHOF(a)</B> returns <B>10</B>. &#151;mb]</p>
<p>While (as you found out) the problem is unlikely to occur in practice, it's easy to come up with an improved version of <B>LENGTHOF</B>. Basically, given that the size of the array is guaranteed, while the size of the struct may be padded, all you have to do is use the array instead of the struct as the return type of the template function.</p>
<p>Here it comes:</p>

<pre>
template&lt;int N&gt;
struct Sized
    {
    typedef char x[N];
    };

template&lt;class T, int N&gt;
typename Sized&lt;N&gt;::x &amp;
   LengthofHelper(T (&amp;)[N]);

#define LENGTHOF(x) \
sizeof(LengthofHelper(x))
</pre>

<p>You may notice a few changes with respect to the original version. Aside from the change on the return type, I renamed the template function to <B>LengthofHelper</B> to make its purpose clearer. Also, I realized that there is no need to provide an implementation for <B>LengthofHelper</B>, since it never gets called.</p>
<p>Thanks for pointing out the problem, and keep up the good work. &#151; Carlo Pescio</p>

<H4><FONT COLOR="#000080">A</FONT></H4>

<p> For those tuning in late: I published Carlo's original <B>LENGTHOF</B> solution one year ago, in my July 1999 column. The "portability problem" in that solution came courtesy of Diligent Reader Branko Cibej, whose letter I published in my April 2000 column.</p>
<p>The old version uses a structure as the operand to <B>sizeof</B>. That structure contains a single <B>char</B>-array member object. Because structures can have internal alignment padding, the old version could report a total structure size larger than the array member's size.</p>
<p>Carlo's remedy: instead of using the entire <B>Sized</B> structure as the operand of <B>sizeof</B>, use a reference to the <B>char</B>-array's type as the operand. This works for three reasons:</p>

<UL><LI>   Unlike structures, arrays have no internal alignment padding.
<LI>   <B>sizeof</B> a type <B>==</B> <B>sizeof</B> an object of that type.
<LI>   <B>sizeof</B> a reference == <B>sizeof</B> the referenced type.</UL>

<p>Thus, <B>LENGTHOF</B> yields the size of an array of <B>N</B> chars, not the size of a structure containing such an array.</p>
<p>The new version does indeed seem immune to the portability problems I cited in that April 2000 column <a href="#1">[1]</a>. While those problems are "unlikely to occur," they apparently can happen. Diligent Reader Richard Lagerstrom sent me the following in email:</p>
<p><I>In the April </I>CUJ<I> "More Mousetraps" section you asked if anyone had seen</I> <B>sizeof</B> <I>struct</I> <B>three_chars</B> <I>greater than three. Yes, I have...The C++ compiler for Cray machines (64-bit words, non-character addressed) generates a multiple of eight bytes for</I> <B>char</B> <I>arrays.</I></p>
<p>Richard asserts that</p>

<pre>
struct three_chars
    {
    char x[3];
    };

cout &lt;&lt; sizeof(three_chars);
</pre>

<p>yields <B>8</B> with the Cray compiler.</p>

<H4><FONT COLOR="#000080">Round and Round</FONT></H4>

<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> Hi Bobby.</p>
<p>I discovered that the following program is perfectly legal:</p>

<pre>
void main()
   {
   cout &lt;&lt;
     "A new random number generator!"
        &lt;&lt; endl;
   int a = a;
   cout &lt;&lt; a &lt;&lt; endl;
   }
</pre>

<p>I posted the issue to borland.public.cppbuilder.language, and they told me that the line <B>int a = a</B> is correct, because the declaration introduces the identifier <B>a</B> and then the right side encounters a valid symbol and uses it as the initialization argument. This was referred to as a change in the specs.</p>
<p>I fail to see how this spec is right. <B>int a = a</B> is an initialization and not an assignment. It is okay to introduce the new identifier <B>a</B> in scope, but to actually use it as part of its own initialization list is another thing. Identifiers shouldn't be allowed to appear in their initialization list just as they are not allowed to appear as part of their declarations.</p>
<p>What am I missing?</p>
<p>Thanks. &#151; Fernando Cacciola</p>

<H4><FONT COLOR="#000080">A</FONT></H4>
<p> Before I address your real question, I must take this opportunity to trump a common belief.</p>
<p>In your example, <B>main</B> returns <B>void</B>. From the C++ Standard <a href="#2">[2]</a>:</p>

<BLOCKQUOTE>
A program shall contain a global function called <B>main</B>, which is the designated start of the program. This function shall not be overloaded. It shall have a return type of type <B>int</B>, but otherwise its type is implementation-defined.</p>
</BLOCKQUOTE>

<p>That's it. Nowhere does the Standard permit <B>main</B> at global scope to return <B>void</B>. About the closest you can come is to declare <B>main</B> as returning <B>int</B>, but don't actually return a value:</p>

<pre>
int main()
    {
    }
</pre>

<p>The Standard covers this also <a href="#3">[3]</a>:</p>

<BLOCKQUOTE>
A return statement in <B>main</B> has the effect of leaving the main function (destroying any objects with automatic storage duration) and calling <B>exit</B> with the return value as the argument. If control reaches the end of <B>main</B> without encountering a return statement, the effect is that of executing <B>return 0</B>;</p>
</BLOCKQUOTE>

<p>In my simple example, the program acts as if I'd really written</p>

<pre>
int main()
    {
    return 0;
    }
</pre>

<p>Not all compilers support implicit <B>main</B> returns. Microsoft's Visual C++ is probably the most popular offender here. When I'm writing examples specifically targeting VC++, either in <I>CUJ</I> or elsewhere, I always add an explicit</p>

<pre>
return 0;
</pre>

<p>to <B>main</B>.</p>
<p>Some compilers allow <B>main</B> to return <B>void</B>. Such allowance is a compiler-specific non-standard extension. Your compiler apparently supports this extension. I recommend that you avoid such extensions and always declare <B>main</B> to return <B>int</B>.</p>
<p>As for your real question: the declaration</p>

<pre>
int a = a;
</pre>

<p>is indeed "legal." In that declaration,</p>

<pre>
int
</pre>

<p>is the declaration specifier,</p>

<pre>
a
</pre>

<p>is the declarator, and</p>

<pre>
= a
</pre>

<p>is the initializer. At the point of the initializer, <B>a</B> is declared; the presence or lack of an initializer does not affect <B>a</B>'s state as a declared entity. Further, because <B>a</B> is of built-in type, the statement</p>

<pre>
int a = a;
</pre>

<p>is tantamount to</p>

<pre>
int a;
a = a;
</pre>

<p>While both examples may appear nonsensical, they are allowed by the language rules. And while you may think that compilers can surely catch such mischief, consider</p>

<pre>
int a, b = a;
</pre>

<p>and</p>

<pre>
int a;
int &amp;b = a;
b = a;
</pre>

<p>and</p>

<pre>
int &amp;f(int &amp;x)
    {
    return x;
    }

int a = f(a);
</pre>

<p>As you can see, even if the language rules were rewritten to disallow <B>int a = a</B>, they couldn't necessarily prevent the net effect of <B>int</B> <B>a = a</B>.</p>
<p>I think the language rules are actually okay in their current form. From 4.1/1 (edited for brevity):</p>

<BLOCKQUOTE>
<p>An lvalue can be converted to an rvalue. If the object to which the lvalue refers is uninitialized, a program that necessitates this conversion has undefined behavior.</p>
</BLOCKQUOTE>

<p>In your example, the <B>a</B> to the right of <B>=</B> is an lvalue acting as an rvalue. As that lvalue is uninitialized, the program behavior is undefined &#151; just as it would be for any uninitialized value in this context. I prefer this approach over a specific exception for cases such as <B>int a = a</B>.</p>

<H4><FONT COLOR="#000080">Match Game</FONT></H4>

<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> I'm attempting some template specializations in some code I'm writing. The enclosed program produces incorrect results upon running the program under VC++ 6.0:</p>

<pre>
ft(T const &amp;)
ft(T const &amp;)
f(char const &amp;)
f(char const *)
</pre>

<p>The compiler correctly deduces the type of the parameters for the overloaded <B>f</B> function, but incorrectly for the <B>ft</B> function. The only difference between the two is that one is a template, the other is not. Borland's C++ Builder v5 gets it right.</p>
<p>Now, I could live without the pointer version of the function but for one necessity. This all arose out of my needing to specialize a template function for <B>wchar_t</B> and <B>char</B> types. When I tried to do the following,</p>

<pre>
template&lt;class T&gt;
void foo(const T &amp;)

template&lt;&gt;
void foo(const T *)
</pre>

<p>the compiler complains at the point of specialization that no suitable template function exists to so specialize. To which I agree, and augment the declarations with:</p>

<pre>
template&lt;class T&gt;
void foo(const T &amp;)

template&lt;class T&gt;
void foo(const T *)

template&lt;&gt;
void foo(const T *)
</pre>

<p>The compiler then gladly accepts the specialization, but then binds to the wrong version as shown above. If instead the declarations are like so:</p>

<pre>
template&lt;class T&gt;
void foo(const T *)

template&lt;&gt;
void foo(const T *)
</pre>

<p>then the specialization works, but I am then resigned to forever pass arguments to my template function as pointers. &#151; Bob Beauchaine</p>

<H4><FONT COLOR="#000080">A</FONT></H4>

<p> I've modified and simplified your original program; my version appears as <a href="fig1.htm">Figure 1</a>. It demonstrates a subtle problem, one I underestimated at first glance: the rules governing argument matching and overload resolution differ between templates and non-templates.</p>
<p><B>ft</B> is a function template, overloaded to accept either a <B>T const &amp;</B> or a <B>T const *</B> parameter, where <B>T</B> is bound to the templatized type. <B>f</B> is a regular function, overloaded to accept either a <B>char const &amp;</B> or a <B>char const *</B>. When the compiler sees</p>

<pre>
f(c);
f(p);
</pre>

<p>it correctly matches <B>c</B> to <B>char const &amp;</B> and <B>p</B> to <B>char const *</B>. (<B>c</B> is of type <B>char</B>; <B>p</B> is of type <B>char *</B>.) When the compiler sees</p>

<pre>
ft(c);
ft(p);
</pre>

<p>you expect it to correspondingly match <B>c</B> to <B>char const &amp;</B> and <B>p</B> to <B>char const *</B>. Yet you are finding that the compiler matches <B>p</B> to some instantiation of <B>T const &amp;</B>.</p>
<p>If it's any consolation, I believe your compiler is wrong. The consolation is faint, however, because I think the compiler actually should find <B>ft(p)</B> to be ambiguous.</p>
<p>Function templates describe families of potential functions. The template</p>

<pre>
template&lt;typename T&gt;
void ft(T const &amp;)
    {
    // ...
    }
</pre>

<p>lets you create a family of <B>ft</B> overloads such as</p>

<pre>
void ft(char const &amp;)
    {
    // ...
    }

void ft(int const &amp;)
    {
    // ...
    }

void ft(long const &amp;)
    {
    // ...
    }
</pre>

<p>and so on. The template</p>

<pre>
template&lt;typename T&gt;
void ft(T const *)
    {
    // ...
    }
</pre>

<p>similarly allows a different family of functions. For the compiler to mint an <B>ft</B> instance, it must unambiguously match an argument's type against the parameter types possible in those families.</p>
<p>When you write <B>ft(c)</B> the compiler tries to specialize an <B>ft</B> function having a parameter type matching <B>c</B>'s type (<B>char</B>). No possible specialization of the parameter pattern</p>

<pre>
T const *
</pre>

<p>matches <B>char</B>. However, the pattern</p>

<pre>
T const &amp;
</pre>

<p>matches if <B>T</B> is replaced with <B>char</B>. The end result is the specialization</p>

<pre>
template&lt;&gt;
void ft(char const &amp;)
    {
    // ...
    }
</pre>

<p>If you explicitly create such a specialization, you'll find that <B>ft(c)</B> calls it.</p>
<p>Now consider the expression <B>ft(p)</B>. The compiler again tries to specialize <B>ft</B>, so that the resulting parameter type matches <B>p</B>'s type (<B>char *</B>). The pattern</p>

<pre>
T const &amp;
</pre>

<p>matches if <B>T</B> is replaced with <B>char *</B>. In addition, the pattern</p>

<pre>
T const *
</pre>

<p>matches if <B>T</B> is replaced with <B>char</B>. (This is apparently the match you hoped for.) Both matches are equally good <a href="#4">[4]</a>; as a result, your compiler should flag the ambiguity.</p>
<p>You can eliminate the ambiguity through explicit argument specification. The expression</p>

<pre>
ft&lt;char *&gt;(p)
</pre>

<p>instantiates</p>

<pre>
template&lt;&gt;
ft(char * const &amp;)
    {
    // ...
    }
</pre>

<p>Likewise, the expression</p>

<pre>
ft&lt;char&gt;(p)
</pre>

<p>instantiates</p>

<pre>
template&lt;&gt;
ft(char const *)
    {
    // ...
    }
</pre>

<p>You can test my theory by defining those two explicit specializations, then tracing the two calls.</p>
<p>If you don't like explicit argument specification, you can still make the implicit argument deduction work. The easiest solution is the change <B>p</B>'s type to <B>char const *</B>. Then the call</p>

<pre>
ft(p)
</pre>

<p>will directly match</p>

<pre>
ft(T const *)
</pre>

<p>with <B>char</B> substituted for <B>T</B>.</p>
<p>For a more generic solution, add a third function family:</p>

<pre>
template&lt;typename T&gt;
void f(T *)
    {
    // ...
    }
</pre>

<p>With such a template, the call</p>

<pre>
ft(p)
</pre>

<p>will directly match</p>

<pre>
ft(T *)
</pre>

<p>with <B>char</B> substituted for <B>T</B>. This is actually my recommended solution, as it solves similar ambiguity problems for other pointer types, and lets you tune the <B>ft</B> algorithm depending on its parameter's const properties.</p>

<H4><FONT COLOR="#000080">Notes</FONT></H4>

<p><a name="1"></a>[1]  Although it is open to a different portability problem: dimensioning the array with an <B>int</B>. I recommend you declare the template parameter <B>N</B> to be of type <B>ptrdiff_t</B> or possibly <B>size_t</B>. To understand why, check out my April/May 1998 <I>CUJ</I> columns.</p>
<p><a name="2"></a>[2]  Subclause 3.6.1/1-2.</p>
<p><a name="3"></a>[3]  Subclause 3.6.1/5.</p>
<p><a name="4"></a>[4]  At least according to my interpretation of the Standard's implicit-conversion rules, especially those in subclause 13.3.3.</p>

<p><i><B>Bobby Schmidt</B> is a freelance writer, teacher, consultant, and programmer. He is also an alumnus of Microsoft, a speaker at the Software Development and Embedded Systems Conferences, and an original "associate" of (Dan) Saks &amp; Associates. In other career incarnations, Bobby has been a pool hall operator, radio DJ, private investigator, and astronomer. You may summon him on the Internet via <B>BobbySchmidt@mac.com</B>.</i></p>

<h4><a href="../../../source/2000/jul00/schmidt.zip">Get Article Source Code</a></h4>

</blockquote></body></html>
