<HTML><HEAD>
<TITLE>July 2000/Copying Files from the Clipboard to a Command Prompt/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: The CBcopy utility</A></h4>
<pre>
///////////////////////////////////////////////////
// CBCopy.cpp
///////////////////////////////////////////////////
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;iostream.h&gt;
#include &lt;windows.h&gt;
#include &lt;io.h&gt;
#include &lt;direct.h&gt;
 
void ProcessFile( char *file );
void ProcessDirectory( char *file );
 
int failIfExistsFlag=0, ignoreSubdirFlag=0;
int silentFlag=0, noCopyFlag=0;
unsigned long errorCount=0, copyCount=0;
char basePath[_MAX_PATH], destPath[_MAX_PATH];
long basePathSize;
 
int main( int argc, char *argv[] )
   {
// Get command-line arguments 
   for (int i=1; i&lt;argc; i++)
       {
       if (stricmp(argv[i],"-d")==0)       // ignore sub-dir flag
          ignoreSubdirFlag=1;
       else if (stricmp(argv[i],"-s")==0) // silent mode
          silentFlag=1;
       else if (stricmp(argv[i],"-f")==0) // fail if exists flag
          failIfExistsFlag=1;
       else if (stricmp(argv[i],"-nc")==0) // no copy flag
          noCopyFlag=1;
       else if (stricmp(argv[i],"-?")==0)  // show usage
          {
          cout &lt;&lt; endl;
          cout &lt;&lt; "Usage: " &lt;&lt; argv[0] 
               &lt;&lt; "  {[-d | -s | -f | -nc]}" &lt;&lt; endl;
          cout &lt;&lt; endl;
          cout &lt;&lt; "       -d   (do not copy subdirectories)" 
               &lt;&lt; endl;
          cout &lt;&lt; "       -s   (silent mode)" &lt;&lt; endl;
          cout &lt;&lt; "       -f   (fail if file already exists)" 
               &lt;&lt; endl;
          cout &lt;&lt; "       -nc  (do not copy files, just list)" 
               &lt;&lt; endl;
          cout &lt;&lt; "       -?   (show usage)" &lt;&lt; endl;
          cout &lt;&lt; endl;
          return 1;
          }
       }
 
// Get info from clipboard
   TCHAR file[_MAX_PATH];
   HGLOBAL temp;
 
   if (!OpenClipboard(NULL))
      {
      cout &lt;&lt; "Unable to open clipboard." &lt;&lt; endl;
      return 0; 
      }
 
   temp=GetClipboardData(CF_HDROP);
   if (temp==NULL)
      {
      cout &lt;&lt; "No files in the clipboard." &lt;&lt; endl;
      CloseClipboard();
      return 0;
      }
 
// store current dir as destination
   GetCurrentDirectory( _MAX_PATH, destPath ); 
 
// Process each file in the clipboard
   HDROP dp= (HDROP)GlobalLock(temp);
   UINT count = DragQueryFile(dp, (UINT)-1, NULL, 0);
   for (i=0; (UINT)i&lt;count; i++)
       {
       DragQueryFile(dp, i, file, _MAX_PATH);
 
       if (i==0)  // Get base path of source files
          {
          char drive[_MAX_DRIVE];
          char dir[_MAX_DIR];
          char fname[_MAX_FNAME];
          char ext[_MAX_EXT];
 
          _splitpath( file, drive, dir, fname, ext );
          strcpy(basePath,drive);
          strcat(basePath,dir);
          basePathSize=strlen(basePath);
          }
 
       ProcessFile( file );
       }
 
   GlobalUnlock((void *)temp);
   CloseClipboard();
 
// Output Statistics
   cout &lt;&lt; endl &lt;&lt; "Files Copied: " &lt;&lt; copyCount &lt;&lt; endl;
   if (errorCount&gt;0)
      cout &lt;&lt; "Errors      : " &lt;&lt; errorCount &lt;&lt; endl;
 
   return 1;
   }
//-------------------------------------------------------------
void ProcessFile( char *file )
   {
   long attr=GetFileAttributes( file );
 
   if (attr &amp; FILE_ATTRIBUTE_DIRECTORY) // see if it is a dir
      {
      if (ignoreSubdirFlag==0)
         ProcessDirectory( file );
      }
   else  // it is a file
      {
      char destination[_MAX_PATH];  // determine dest path
      strcpy(destination,destPath);
      strcat(destination,&amp;file[basePathSize-1]);
 
      if (noCopyFlag==0) // then copy files
         {
         if (CopyFile(file,destination,failIfExistsFlag )==0)
            {
            cout &lt;&lt; "*** Unable to copy file:" &lt;&lt; endl;
            cout &lt;&lt; "    source     : " &lt;&lt; file &lt;&lt; endl;
            cout &lt;&lt; "    destination: " &lt;&lt; destination &lt;&lt; endl;
            errorCount++;
            }
         else  // copy was successful
            {
            if (silentFlag==0)
               cout &lt;&lt; "Copied: " &lt;&lt; file &lt;&lt; endl;
            copyCount++;
            }
         }
      else // just list file
         {
         cout &lt;&lt; file &lt;&lt; endl;
         }
      }
   }
//-------------------------------------------------------------
void ProcessDirectory( char *file )
   {
// Make new subdirectory if necessary
   char newDirectory[_MAX_PATH];
   strcpy(newDirectory,destPath);
   strcat(newDirectory,&amp;file[basePathSize-1]);
 
   if (noCopyFlag==0)
      {
      long stat=GetFileAttributes( newDirectory);
      if (stat==0xFFFFFFFF)
         {
         if (_mkdir(newDirectory)==-1)
            {
            cout &lt;&lt; "Unable to create directory: " 
                 &lt;&lt; newDirectory &lt;&lt; endl;
            errorCount++;
            return;
            }
      }
   }
 
// Go through all of the files in the subdirectory
   struct _finddata_t c_file;
   long hFile;
   char searchPath[_MAX_PATH], newFile[_MAX_PATH];
 
   sprintf(searchPath,"%s\\*.*",file); // search for all 
                                       // files in dir
 
   if ((hFile = _findfirst( searchPath, &amp;c_file ))!=-1L)    
      {
      if (strcmp(c_file.name,".")!=0 &amp;&amp;
          strcmp(c_file.name,"..")!=0)
          { 
          sprintf(newFile,"%s\\%s",file,c_file.name);
          ProcessFile( newFile);
          }
      }
   
   if (hFile!=-1)
      {
      while (_findnext(hFile,&amp;c_file)==0)
            {
            if (strcmp(c_file.name,".")!=0 &amp;&amp; 
                strcmp(c_file.name,"..")!=0)
                {
                sprintf(newFile,"%s\\%s",file,c_file.name);
                ProcessFile( newFile );
                }
            }
      _findclose(hFile);
      }
   }
</pre></body></html>
