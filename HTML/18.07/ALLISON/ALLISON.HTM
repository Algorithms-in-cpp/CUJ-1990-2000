<HTML>   
     <HEAD>
<TITLE>July 2000/import java.*</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjul.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">import java.*: Formatted Text and Locales</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Chuck Allison</FONT></H3>

<BLOCKQUOTE>
<p>Java offers more formatting power than C, but not necessarily in a more convenient package.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H4><FONT COLOR="#000080">Hello, World ... Goodbye printf()</FONT></H4>

<p>The first thing you usually do when you learn a new language is experiment with some simple I/O. Java provides <B>System.out</B>, an object of type <B>PrintStream</B>, for output to the console. Here's the proverbial "Hello, World" using <B>System.out</B>:</p>

<pre>
class Hello
{
   public static void
   main(String[] args)
   {
      System.out.println
         ("Hello, world");
   }
}
</pre>

<p>Although this little programette is neither longer nor more complex than its C++ equivalent, the Java plot thickens quickly if you plan on formatting your output. In fact, Java makes you build a separate object to express your format. Consider the following C snippet, for instance:</p>

<pre>
#include &lt;stdio.h&gt;

int main()
{
   double x = 123.456;
   printf("%8.2f\n", x);
   return 0;
}

/* Output:
  123.46
*/
</pre>

<p>A rough Java equivalent looks like this:</p>

<pre>
import java.text.*;

class Decimals
{
   public static void
   main(String[] args)
   {
      double x = 123.456;
      DecimalFormat fmt = new
         DecimalFormat("#####.##");
      System.out.println
         (fmt.format(x));
   }
}

/* Output:
123.46
*/
</pre>

<p>The <B>java.text</B> package defines the <B>DecimalFormat</B> class, which you use for formatting numbers (both integers and reals). The pound-sign acts as a mask character for any decimal digit.</p>
<p>I say that the program above is a "rough equivalent" of the C version because the output isn't right-justified in a field of eight characters, as you would expect. If you want alignment, you have to do it manually. Argh!</p>

<H4><FONT COLOR="#000080">Objects for Formatting</FONT></H4>

<p>As you can see above, formatting output in Java is basically a two-step process: 1) build a string with a format object, and 2) send the string to the desired output stream. In C terms, it's like having to always use <B>sprintf</B> first to build strings before actually shipping them off to your output stream. Some people praise this design for its flexibility, but it can drive C hackers nuts while learning Java.</p>
<p>There are seven <B>Format</B> classes altogether, arranged into the hierarchy depicted in <a href="fig1.htm">Figure 1</a>. <B>Format</B>, <B>NumberFormat</B>, and <B>DateFormat</B> are abstract classes. The usual technique of getting a <B>Format</B> object is to call a version of <B>getInstance</B>, a factory method provided with each of these abstract classes, as shown in <a href="fig2.htm">Figure 2</a>. For most locales, <B>NumberFactory.getInstance</B> returns a <B>DecimalFormat</B> object, but in <B>FormatIntegers.java</B> I'm just using the <B>format</B> method, which is declared in <B>NumberFormat</B> and overridden in <B>DecimalFormat</B>. Since I requested a minimum of three integer digits, I get a leading zero when printing the number 10, and since I make the upper limit four digits, I lose the most significant digit of 10,000 in the last output line.</p>
<p>Notice the commas in the last two lines of output in <a href="fig2.htm">Figure 2</a>. All format classes except <B>ChoiceFormat</B> are sensitive to locale, which is a set of conventions for displaying numbers, currencies, and dates for different languages and cultures. Since the default locale is English/United States, the comma appears as the grouping separator for numerals. (See the next section for more on locales.)</p>
<p>Financial applications usually need dollar signs and negative numbers in parentheses instead of being preceded by a negative sign. The <B>getCurrencyFormat</B> factory method returns a <B>DecimalFormat</B> object with a predefined pattern for the occasion (see <a href="fig3.htm">Figure 3</a>). The first half of the program in <a href="fig4.htm">Figure 4</a> shows how you can define a <B>DecimalFormat</B> pattern for currency yourself. Zeroes in a pattern string are replaced by the digit <B>0</B> when there is no corresponding digit in the input number, while pound signs are ignored <a href="#1">[1]</a>. The second half of <a href="fig4.htm">Figure 4</a> shows how to express numbers in scientific notation. And as you can see in <a href="fig5.htm">Figure 5</a>, there is also a predefined formatter for percentages available via <B>NumberFormat.getPercentInstance</B>.</p>
<p>I mentioned earlier that numbers are not right justified as they are in C (or every other language in popular use, for that matter!). Sad but true. The program in <a href="fig6.htm">Figure 6</a> shows how to do it manually. You need to know the length of the formatted number so you can compute how many spaces to prepend before you print the number itself. That information is available in a <B>FieldPosition</B> object, returned by an overloaded version of method <B>DecimalFormat.format</B>. First you create a <B>FieldPosition</B> object, giving its constructor the flag indicating the type of quantity you want it to track. (Other types include <B>FRACTION</B> and various date components.) The call to <B>format</B> then populates <B>fpos</B> with information about where the formatted field begins and ends in the string it returns. In this case all we need to know is how long the formatted string is, which <B>FieldPosition.getEndIndex</B> tells us. Again, notice the commas in the display.</p>

<H4><FONT COLOR="#000080">Locales</FONT></H4>

<p>Historically, computing has been woefully provincial in favor of the United States. It's bad enough that programming languages use English keywords, but popular computing environments have supported only those character sets that accommodate English (viz. ASCII and EBCDIC), and in some cases other Western European languages. Over time other character sets have been developed, but there has been no universal platform, as it were, fit to handle text formatting and display for all languages and cultures. One of the first efforts to solve this problem resulted in the concept of locales.</p>
<p>Locales originated with ANSI C as a means to provide program support for localizing software for different geopolitical regions. A locale in Standard C is a collection of preferences for the processing and display of information that is sensitive to culture, language, or national origin, such as date and monetary formats. There are five categories of information, named by macros defined in <B>&lt;locale.h&gt;</B>, on which locales have an effect (see <a href="tab1.htm">Table 1</a>). Each of these categories can be set to a different locale (e.g., <B>"american"</B>, <B>"italian"</B>, etc.)</p>
<p>Standard C defines the following two functions to deal with locales directly:</p>

<pre>
struct lconv *localeconv(void);

char *
setlocale(int category,
   char *locale);
</pre>

<p><B>localeconv</B> returns a static <B>lconv</B> object containing settings for the <B>LC_MONETARY</B> and <B>LC_NUMERIC</B> categories, and <B>setlocale</B> changes the locale for the given category to that specified in <B>locale</B>. You can set all categories to the given locale by specifying a category of <B>LC_ALL</B>, as I do in <a href="fig7.htm">Figure 7</a>. All standard C implementations must support the minimalist <B>"C"</B> locale, and a native locale named by the empty string (which may be the same as the <B>"C"</B> locale). Unfortunately, few U.S. vendors of C/C++ compilers provide any additional locale support, even today, eleven years after C was originally standardized.</p>
<p>Java, on the other hand, comes with support for 145 locales out of the box (i.e., with the Sun JDK). The program in <a href="fig8.htm">Figure 8</a> displays selected locales. The static method <B>Locale.getAvailableLocales</B> returns an array of objects representing the locales supported by your installation of the Java library. (The <B>Locale</B> class is defined in the package <B>java.util</B>). As you can see from the results of <B>Locale.getDisplayName</B>, a locale represents a language-country pair, since some languages are spoken in many countries, and yet the cultural conventions that govern display of currency and date values can differ among those countries.</p>
<p>The program in <a href="fig9.htm">Figure 9</a> illustrates how three different locales format numeric and date component text. Note that I need to specify both the language and country when creating a <B>Locale</B> object. Languages are represented by two-character codes in lower case, and countries by codes in upper case <a href="#2">[2]</a>. This program also illustrates an overloaded version of <B>getXXXInstance</B> that associates a formatter with a specific locale. <B>DateFormat.getDateInstance</B> takes an additional first parameter specifying how much formatting you want. The choices, in decreasing order of detail, are <B>FULL</B>, <B>LONG</B>, <B>MEDIUM</B>, and <B>SHORT</B>. </p>

<H4><FONT COLOR="#000080">Parsing</FONT></H4>

<p>All the examples so far have dealt only with formatted output, but all <B>Format</B> classes also support a <B>parse</B> method for reading input according to the same conventions we've been discussing for output. The following program shows how to read numbers in two different locales:</p>

<pre>
import java.util.*;
import java.text.*;

class ParseInput
{
   public static void
   main(String[] args)
      throws ParseException
   {
      NumberFormat fmt1 = NumberFormat.getInstance();
      System.out.println
         (fmt1.parse("1,234.56"));
      NumberFormat fmt2 =
         NumberFormat.getInstance
            (Locale.GERMANY);
      System.out.println
         (fmt2.parse("1.234,56"));
   }
}
/* Output:
1234.56
1234.56
*/
</pre>

<p>The <B>parse</B> method will throw a <B>ParseException</B> if the input string is not valid. For convenience, the <B>Locale</B> class defines several static finals for commonly used locales, such as <B>Locale.GERMANY</B> above.</p>
<p>The program in <a href="fig10.htm">Figure 10</a> parses dates. Recall that <B>SimpleDateFormat</B> is the concrete class that extends the abstract <B>DateFormat</B> class. The abstract classes do not support patterns, so I have to cast to <B>SimpleDateFormat</B> to use the <B>toPattern</B> and <B>applyPattern</B> methods. As you can see, the default pattern for dates is "MMM d, yyyy". Three <B>M</B>'s result in an abbreviated month string, such as <B>"Jul"</B>. Anything less than that resolves to the numeral (e.g., <B>7</B> for July), and four <B>M</B>'s or more gives the full name (<B>"July"</B>). As always, the input must match the expected pattern if you don't want a <B>ParseException</B>.</p>
<p>Parsing more than one number from a single string will certainly leave you longing for C's <B>sscanf</B> function. As the program in <a href="fig11.htm">Figure 11</a> illustrates, you have to keep track of where you're at in the input string with a <B>ParsePosition</B> object. When you call the overloaded version of <B>parse</B> that takes a <B>ParsePosition</B> as a second argument, that <B>ParsePosition</B> is updated with the index of the next unread character in the input string. Unfortunately, you just can't just turn around and call <B>parse</B> because it doesn't skip white space. You have to know the structure of the input string and manually skip the characters you want to ignore, like I did here by incrementing the parse index. Double argh!</p>

<H4><FONT COLOR="#000080">Summary</FONT></H4>

<p>I really don't mind the separation of formatting from I/O in Java. It makes sense conceptually. The design of the <B>Format</B> classes is clean and flexible, but if you're coming from C, you might not find them convenient. Most of all, I miss C's flexibility of choosing right vs. left alignment in output formats. I'd be interested in your opinion. It was necessary to discuss locales since the formatting classes use them, but this was mainly an article on formatting, so I omitted discussion of internationalization issues other than locales. If you have immediate need for localizing your software, take a look in the JDK documentation for the class descriptions of <B>ResourceBundle</B> and <B>MessageFormat</B>, which facilitate run-time substitution of strings for programming in multiple languages.</p>

<H4><FONT COLOR="#000080">Notes</FONT></H4>

<p><a name="1"></a>[1]  The pattern for negative numbers borrows everything from the pattern for non-negatives; only prefixes and suffixes need be specified for negatives. You're supposed to be able to specify these directly in the pattern, as follows: <B>"#,###.00;(#)"</B>. Following the rule just explained, only the prefix and suffix are inferred from the pattern after the semicolon, so only a single <B>'#'</B> is required. Unfortunately, this is not correctly implemented as of JDK 1.3 Release Candidate 3, the latest JDK download as of this writing. (It drops the suffix.)</p>
<p><a name="2"></a>[2]  These are standard ISO codes found at <B>http://www.ics.uci.edu/pub/ietf/http/related/iso639.txt</B> and <B>http://www.chemie.fu-berlin.de/diverse/doc/ISO_3166.html</B>, respectively.</p>

<p><i><B>Chuck Allison</B> is a columnist with </I>CUJ<I>. He is the owner of Fresh Sources, a company specializing in object-oriented software development, training, and mentoring. He has been a contributing member of J16, the C++ Standards Committee, since 1991, and is the author of </I>C and C++ Code Capsules: A Guide for Practitioners<I>, Prentice-Hall, 1998. You can email Chuck at <B>cda@freshsources.com</B>.</i></p>

<h4><a href="../../../source/2000/jul00/allison.zip">Get Article Source Code</a></h4>

</blockquote></body></html>
