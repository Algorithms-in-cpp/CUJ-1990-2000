<HTML><HEAD>
<TITLE>July 2000/Simple Unit Tests in C++/Figure 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Figure 3: The run member function of BaseTest32</A></h4>
<pre>
template&lt;typename I1, typename I2, typename I3,
   typename O1, typename O2&gt;
bool
BaseTest32&lt;I1, I2, I3, O1, O2&gt;::run(int first, int last,
   std::fstream &amp;fout)
{
   O1 tempo1;
   O2 tempo2;

   // constrain range, if necessary
   if(first &lt; 0)
      first = 0;
   if(last &gt; i1s.size() - 1)
      last = i1s.size() - 1;

   for(int i = first; i &lt;= last; ++i)
   {
      // call polymorphically
      apply(i1s[i], i2s[i], i3s[i], tempo1, tempo2);
      if((tempo1 == o1s[i]) &amp;&amp; (tempo2 == o2s[i]))
         fout &lt;&lt; getName()
              &lt;&lt; "(" &lt;&lt; i &lt;&lt; ") successful. Output: "
              &lt;&lt; tempo1 &lt;&lt; ", " &lt;&lt; tempo2 &lt;&lt; std::endl;
      else
      {
         fout &lt;&lt; getName()
              &lt;&lt; "(" &lt;&lt; i &lt;&lt; ") UNSUCCESSFUL" &lt;&lt; std::endl;
         fout &lt;&lt; "  expected: " &lt;&lt; o1s[i]
              &lt;&lt; ", actual: " &lt;&lt; tempo1 &lt;&lt; std::endl;
         fout &lt;&lt; "  expected: " &lt;&lt; o2s[i]
              &lt;&lt; ", actual: " &lt;&lt; tempo2 &lt;&lt; std::endl;
         return false;
      }
   }
   return true;
}
</pre></body></html>
