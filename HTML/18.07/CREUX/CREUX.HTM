<HTML>   
     <HEAD>
<TITLE>July 2000/Tree Traversal in C without Recursion</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjul.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Tree Traversal in C without Recursion</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Valery Creux</FONT></H3>

<BLOCKQUOTE>
<p>If you can spare one bit of storage in each node, you can traverse a tree without recursive function calls.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H4><FONT COLOR="#000080">Introduction</FONT></H4>

<p>To traverse a tree in a depth-first pattern, I have usually used implicit recursion (via a function call) or sometimes explicit recursion (via a private stack). In either case I use memory space proportional to the size of the tree (at least to the biggest branch). There are algorithms that do not consume memory, but they impose additional constraints, or need to modify the tree structure itself (see [<a href="#1">1</a>, <a href="#2">2</a>]).</p>
<p>I have implemented an algorithm in C that involves neither implicit nor explicit recursion, and uses just one bit of storage to traverse a tree. Using this algorithm, you can supply a pointer to a function to operate on each node visited. I will explain how it works shortly, but first a few definitions:</p>

<UL><LI>  A <I>prefix traversal</I> processes a node (applies a function to it) before it visits subnodes of the node.
<LI>  A <I>postfix traversal</I> processes a node after visiting the subnodes.
<LI>  An <I>infix traversal</I> processes a node between visiting the subnodes (typically used on a binary tree).</UL>

<p>You can arrange a traversal that merges all or part of these properties.</p>

<H4><FONT COLOR="#000080">The Algorithm</FONT></H4>

<p>The algorithm uses a parent-child-sibling structure (see <a href="fig1.htm">Figure 1a</a>). <a href="fig1.htm">Figure 1b</a> shows the path the algorithm uses to traverse the tree. The algorithm uses only existing information to traverse all of the tree. The problem is to use the right information at the right time.</p>
<p>There are only two cases for the algorithm to consider. The first is when it is positioned at the top of an unexplored subtree; then it should visit the first subnode. The second case is when the algorithm has finished visiting a subtree; then it should visit either a sibling or the parent. The proper course of action can be deduced from the current position and the last operation performed. The algorithm does not need to store any information as it traverses the tree except for one bit.</p>
<p><a href="fig2.htm">Figure 2</a> shows the C code for the core algorithm. (Full source code is available on the <I>CUJ</I> website, <B>www.cuj.com/code</B>.) Function <B>tree_depth_traversal1</B> implements either prefix- or postfix-order traversal (or both). It consists of a simple loop (after a few preliminary <B>if</B> statements) that operates on the node passed into the function. The two cases mentioned above are represented by the Boolean variable <B>dir_flag</B>.</p>
<p>When <B>dir_flag</B> is <B>TRUE</B>, the algorithm must explore a subtree. The algorithm attempts to move to the first subnode (leaving <B>dir_flag</B> with the value <B>TRUE</B> because it's a new unexplored subtree). If the current node turns out to be a leaf the algorithm considers the subtree explored and sets <B>dir_flag</B> to <B>FALSE</B>.</p>
<p>When <B>dir_flag</B> is <B>FALSE</B>, the algorithm attempts to move to a sibling (and sets <B>dir_flag</B> to <B>TRUE</B> because the sibling is a new unexplored subtree). If there is no sibling the algorithm moves to the parent (and leaves <B>dir_flag</B> <B>FALSE</B> because the subtree that has the parent as its root is completely explored).</p>
<p>The algorithm begins the traversal with a node and a user-supplied function to process each node. The initial value of the flag is obviously <B>TRUE</B>.</p>
<p>The user-supplied function for processing a node controls whether the traversal is prefix-order, post-fix order, or both. The second parameter to the function, <B>first_flag</B>, is a Boolean that indicates whether the function is being called before the node's subtree has been visited, or after. To effect a prefix traversal, define the function to work only when <B>first_flag</B> is <B>TRUE</B>, and to do nothing when <B>first_flag</B> is <B>FALSE</B>. To effect a postfix traversal, define the function to work only when <B>first_flag</B> is <B>FALSE</B>. To get a combined prefix/postfix traversal, define the function to ignore <B>first_flag</B>.</p>

<H4><FONT COLOR="#000080">Extra Considerations</FONT></H4>

<p>The complete source code provides two traversal functions. The first one (the one shown in <a href="fig2.htm">Figure 2</a>) decides where to move next after processing the current node. The second one (not shown) is easily derived from the first. It decides where to move <I>before</I> processing the current node. This second function could be used to implement an iterator. If the user-supplied function does not modify the tree the two versions are equivalent. You should use the second version if you want to destroy nodes during the (postfix) traversal. (Adding nodes is left as an exercise for the reader.)</p>
<p>The user-supplied function will never receive a <B>NULL</B> node. The test <B>node_exist(current)</B> in the loop (see <a href="fig2.htm">Figure 2</a>) is present only for safety reasons. The implemented version of this algorithm will never set the current node to <B>NULL</B> if the tree is correctly built.</p>

<H4><FONT COLOR="#000080">Conclusion</FONT></H4>

<p>I have presented an algorithm which does not consume any memory space to explore a tree, without any limit on depth. The implementation enables both prefix-order and postfix-order traversal, but infix-order could be added without any problem, in the algorithm itself or in the user-supplied process function.</p>

<H4><FONT COLOR="#000080">Acknowledgements</FONT></H4>

<p>I would like to thank two teachers from my University, Jean Francois Perrot and Emmanuel Saint-James for teaching me the essence of software engineering; one of my old colleagues, Christian Joubert; and the <I>CUJ</I> editorial staff for the revision and correction of this English composition.</p>

<H4><FONT COLOR="#000080">References</FONT></H4>

<p><a name="1"></a>[1]  H. Shorr, W. M. Waite. "An Efficient Machine-Independent Procedure for Garbage Collection in Various List Structures," <I>Communications of the ACM,</I> 10:501-516, August 1967.</p>
<p><a name="2"></a>[2]  W. A. Burkhard. "Non Recursive Traversals of Trees," <I>The Computer Journal,</I> 18(3), August 1975.</p>

<p><i><B>Valery Creux</B> received a DESS (equivalent to an MS) in software engineering from the Pierre &amp; Marie Curie University (Paris, France). His interests include algorithm analysis and design, and he's still waiting for a new volume of </I>The Art of Computer Programming<I> from Knuth. He currently works for VDO Car Communications GmbH, an automotive company in Germany, manufacturing radios and navigation systems. He can be reached at <B>Valery_Creux@yahoo.com</B>.</i></p>

<h4><a href="../../../source/2000/jul00/creux.zip">Get Article Source Code</a></h4>

</blockquote></body></html>
