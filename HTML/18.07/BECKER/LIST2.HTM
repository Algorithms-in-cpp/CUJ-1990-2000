<HTML><HEAD>
<TITLE>July 2000/The Journeyman's Shop/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2: The functions normalize and round</A></h4>
<pre>
//    excerpts from fp.cpp

fp&amp; fp::normalize(int e, long fr)
    {    // set this object to normalized value of
        // exponent e and fraction fr
    if (fr == 0)
        {    // handle zero specially
        exp = 0;
        frac = 0;
        return *this;
        }
    is_neg = fr &lt; 0;
    fr = abs(fr);
    if ((ONE &lt;&lt; P) &lt;= fr)
        {    // handle fraction overflow
        fr &gt;&gt;= 1;
        ++e;
        }
    else
        while (fr &lt; (MIN_NORM &lt;&lt; P))
            {    // scale left
            fr &lt;&lt;= 1;
            --e;
            }
    round(fr);
    if ((ONE &lt;&lt; P) &lt;= fr)
        {    // handle fraction overflow
        fr &gt;&gt;= 1;
        ++e;
        }
    if (e &lt; MIN_EXP)
        exception(exp_underflow);
    else if (MAX_EXP &lt; e)
        exception(exp_overflow);
    exp = e;
    frac = fr &gt;&gt; P;
    return *this;
    }

inline long low_bits(long fr)
    {
    return fr &amp; ((1L &lt;&lt; P) - 1);
    }

void fp::round(long&amp; fr)
    {    // round infinite-precision result to fit representation
    switch (rm)
        {    // select appropriate code for rounding mode
        case rm_zero:
            // empty
            break;
        case rm_up:
            if (!is_neg &amp;&amp; low_bits(fr))
                fr += 1L &lt;&lt; P;
            break;
        case rm_down:
            if (is_neg &amp;&amp; low_bits(fr))
                fr += 1L &lt;&lt; P;
            break;
        case rm_nearest:
            if ((fr &amp; (1L &lt;&lt; (P - 1))) == 0)
                ;
            else if (low_bits(fr) == (1L &lt;&lt; (P - 1))
                &amp;&amp; ((fr &amp; (1L &lt;&lt; P)) == 0))
                ;
            else    
                fr += 1L &lt;&lt; P;
            break;
        }
    }
</pre></body></html>
