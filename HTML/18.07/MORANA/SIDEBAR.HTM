<HTML>
<HTML><HEAD>
<TITLE>July 2000/Browser-Based Directory Access through LDAP and COM/Sidebar</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<H3 align=center><FONT COLOR="#000080">LDAP Software Libraries</FONT></H3>

<HR>

<BLOCKQUOTE>
<p>There are several software libraries currently available for developing LDAP clients. Netscape's LDAP C SDK and the University of Michigan LDAP C tool library (<B>http://www.umich.edu/~dirsvcs/1dap</B>) can be used to develop LDAP stand-alone client applications. Web-based LDAP clients can be developed either as Java applets with the Netscape Java SDK for LDAP or as COM objects with Microsoft ASP (Active Server Pages) and the ADSI (Active Directory Service Interfaces) COM library.</p>

<H4><FONT COLOR="#000080">The Netscape SDKs</FONT></H4>

<p><B>The Netscape C SDK</B></p>
<p>The Netscape C LDAP SDK provides a set of APIs for LDAP clients on Unix, MacOs, and Microsoft Windows. The following core LDAP operations are supported by the library and documented in RFC 1823 <a href="morana.htm#6">[6]</a>:</p>

<UL><LI>   interrogation &#151; search and compare entries in the directory
<LI>   update &#151; create, delete, and modify entries and modify RDN
<LI>   connection and authentication &#151; bind, unbind, and abandon the directory service</UL>

<p>Search operations return a list of entries based on user-defined parameters such as the search base (similar to the SQL <B>FROM</B> clause), scope (also similar to SQL <B>FROM</B>), search filter (similar to the SQL <B>WHERE</B> clause) and the attributes to return (similar to the SQL <B>SELECT</B> clause). It is also possible to limit the number of the returned entries and the time allocated for the search.</p>
<p>An entry and/or its values can be created, deleted, and modified. Update operations maintain data integrity; the adding operation is possible only for new entries and only if the parent for the entry already exists.</p>
<p>The bind operation enables the client to identify herself to the directory. The user will be authenticated and the client will bind to the LDAP session by supplying a user DN and password. The unbind operation is used to end the session, while the abandon operation is used to cancel an operation already in progress. Some connection and authentication operations have been simplified in LDAP v3, in which the client need not start a session with a bind request. In LDAP v3 it is also possible to extend LDAP operations that are not otherwise defined.</p>
<p>After the client has been authenticated, the server will return a connection handle to the client and the connection between the client and the server will be established. Once the client requests access to the entries in the directory service, ACLs (Access Control Lists) for the entry will be consulted to determine if the identified user has the appropriate permissions to complete the requested operation. ACLs are implemented differently by each directory service vendor, since the current LDAP standard does not address access control.</p>
<p><B>Netscape Java Packages</B></p>
<p>The Netscape LDAP Java SDK provides a set of Java classes that can be used to write LDAP clients, either as Java applets or as stand-alone applications. The classes are organized in packages that provide standard LDAP operations (connect to an LDAP server, manipulate entries and attributes, and retrieve search results). The Java distribution also provides LDAP v3 controls to request server-side sorting and persistent searches, parsing, regular expression matching, and authentication through SASL (Simple Authentication and Security Layer) documented in RFC 2222 <a href="morana.htm#6">[6]</a>. In the case of the development of clients that need to support vendor-specific LDAP data schemas, the JNDI (Java Native Directory Interface) package is also available to Java application developers.</p>
<p>For more information on Netscape LDAP SDKs you can visit the URL: <B>http://developer.netscape.com/tech/directory/</B>. The source code is also available from <B>http://www.mozilla.org/directory</B>.</p>

<H4><FONT COLOR="#000080">ADSI-Based ASP Web Pages</FONT></H4>
<p>Microsoft ADSI (<B>http://www.microsoft.com/adsi/</B>) provides a set of APIs to build client code that views and manages network resources distributed across different data servers such as NT 4.0, NT 5.0, LDAP, and Novell Netware 3.X and 4.X. ADSI conforms to Microsoft COM and also supports LDAP. A set of ADSI objects is mapped to the namespace of the persistent data where the object data is stored. Each ADSI object is a collection of COM interfaces and each interface has methods that can be used to manipulate such objects. The business logic to connect to the directory service and to perform LDAP operations can be written into ASP <a href="morana.htm#1">[1]</a> with scripting languages such as VBScript or Microsoft's ECMA standard Javascript.</p>

</blockquote></body></html>
