






<HTML>
     
     <HEAD>


          
          <TITLE>March 1997/Standard C/C++</TITLE>
     </HEAD>
     
     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          
          <H2><A href="../tocmar.htm"><IMG src="../../toc.gif" ALT="Back to TOC" WIDTH="54" HEIGHT="54"></A>
          <FONT COLOR="#FF0000">Columns </FONT></H2>
          
          <HR>
          
          <H2 ALIGN="center"><FONT COLOR="#800000">Standard C/C++</FONT></H2>
          
          <H3 ALIGN="center"><FONT COLOR="#800000"> P. J. Plauger</FONT></H3>
          
          <H3 ALIGN="center"><FONT COLOR="#800000">The Header &lt;deque&gt;</FONT></H3>
          <BLOCKQUOTE>
          <P>If you need to deal off both the top and the bottom, you can't
               beat a deque.</P></BLOCKQUOTE>
          <HR>
          <BLOCKQUOTE>
               
               <h4><FONT COLOR="#000080"> Introduction</FONT></H4>
               
               <p>The header &lt;deque&gt; defines the
                    template class deque, yet another of the template container
                    classes defined by the Standard Template Library (STL). So
                    far, I have described template class vector and template
                    class list, the two simplest containers. (See "Standard
                    C/C++: Containers," CUJ, December 1996, "Standard C/C++:
                    The Header &lt;vector&gt;," CUJ, January 1997, and
                    "Standard C/C++: The Header &lt;list&gt;," CUJ, February
                    1997.) deque, by contrast is rather more ambitious. </p>
               
               <p> As an aside, there seems to be two
                    schools of thought as to how to pronounce "deque." I've
                    always pronounced it as a homophone for "deck." It is
                    indeed a queue that behaves much like a deck of cards &#151; you
                    can add or remove elements at either end with equal ease.
                    But I've heard others pronounce it "DEE-queue," probably
                    with an equally convincing rationale. Take your pick. 
                    </p>
               
               <p> <A href="tab1c.htm">Table 1</A>
                    shows the payoff for the added complexity in template class
                    deque. It is the only container besides vector that supports
                    random-access iterators. (You can tell this because
                    accessing an arbitrary element, with the expression X[N], is
                    a constant-time operation.) But it outperforms vector in one
                    significant way &#151; you can add or remove elements at the
                    beginning of the controlled sequence in constant time. You
                    can do the same at the end, of course, but this distinction
                    is not so clear cut. There are circumstances under which
                    appending to a vector can be a constant-time operation as
                    well, as I discussed in the January 1997 installment.
                    </p>
               
               <p> A deque is thus as good as a list for
                    implementing a first-in first-out (FIFO) queue or a last-in
                    first-out (LIFO) queue, also known as a stack. It is not as
                    good as a list for implementing a priority queue, because it
                    takes longer on average to insert a new item at an arbitrary
                    place &#151; linear time versus constant time. If you need
                    random access to the elements of a controlled sequence, 
                    however, a deque beats a list any day. </p>
               
               <p> <A href="tab1c.htm">Table 1</A>
                    raises an interesting question. A deque matches or exceeds a
                    vector in the time complexity of all operations, so why
                    should you ever use a vector? There are two answers. One is
                    that a deque has greater storage overhead than a vector,
                    averaging at least one additional pointer per element. That
                    may or may not be important, depending on the amount of
                    useful data stored in each element and the total number of
                    elements simultaneously used by a given application. </p>
               
               <p> A more important issue is the cost of
                    each operation. Accessing an arbitrary element of a deque
                    may be a constant-time operation, on average, but it is
                    still rather more expensive than accessing an arbitrary
                    element of a vector. A given application may not benefit
                    sufficiently from the added flexibility of a deque to
                    justify the added overheads in code space and execution 
                    time, compared to analogous operations on vectors. </p>
               
               <p> In summary, you can look at a deque
                    as an interesting compromise between a vector and a list.
                    Choose one of these two simpler containers if it has
                    acceptable time complexity for the most used operations, in
                    a given application. Choose a deque when its unique balance
                    of properties justifies the added complexity it introduces.</p>
               
               <H4> <FONT COLOR="#000080">How to Stack
               a Deque</FONT></FONT></H4>
               
               <p>Template class deque stores a
                    controlled sequence of length N as a two-level hierarchy:</p>
               <UL><LI> Deque elements are stored in
                         fixed-size blocks, which are contiguous arrays of
                         DEQUESIZ elements. </FONT></LI>
                    <LI> Each block is designated by an
                         element in a map, which is an array of pointers to
                         blocks stored inside a larger containing array, which
                         contains at least DEQUEMAPSIZ elements. </FONT></LI>
               </UL>
               
               <p>Needless to say, both DEQUESIZ and
                    DEQUEMAPSIZ are parameters subject to tradeoffs. The smaller
                    they are, the less storage wasted for short controlled
                    sequences. The larger they are, the less time wasted in
                    growing large controlled sequences. The implementation I
                    show here endeavors to allocate blocks of at least 2-4 KB,
                    and keeps maps as small as possible. </p>
               
               <p> If Map is a pointer to the beginning
                    of the map, then element N of the controlled sequence is
                    essentially located by the expression:</p>

<PRE>
Map[N / DEQUESIZ][N % DEQUESIZ]
</PRE>
               
               <p>The actual logic is a bit messier, for
                    a variety of reasons, but this is the principle underlying
                    the data structure.</p>
               
               <p>The blocks at the beginning and end of
                    a deque can be partially filled. (A partial block at the
                    beginning of a deque is one of the messy details I glossed
                    over above.) Blocks at the end fill from front to back while
                    those at the beginning fill from back to front. If no room
                    exists to add a block, the deque object allocates another
                    block and extends the map to point at the new block. </p>
               
               <p> A deque object endeavors to leave
                    room to extend the map at either end, and for a very good
                    reason. Once the map has to grow past either end of the
                    containing array in which it is stored, the deque object
                    allocates a new containing array and copies over the map.
                    You certainly don't want this to happen any more often than
                    necessary. Otherwise, the time complexity of prepending 
                    elements to a deque can approach linear time, just as for a
                    vector. </p>
               
               <p> This raises an interesting issue. It
                    looks like a deque simply replaces an array of elements with
                    an array of pointers to those elements. It has to repeatedly
                    reallocate and copy over those pointers as it grows, much as
                    a vector has to repeatedly reallocate and copy over the
                    elements. So it looks like the time complexity for growing a
                    deque has to be linear, just as for a vector. You might save
                    actual copying time if pointers are smaller than the blocks
                    of elements they designate, or you might even lose time if
                    pointers are bigger. What's the story here? </p>
               
               <p> The essential trick lies in how the
                    deque object grows the array that stores its map. Each newly
                    allocated array is twice as large as the map it must
                    initially hold. As the controlled sequence grows longer, the
                    number of reallocations declines. And that bounds the
                    average cost of growing the controlled sequence. </p>
               
               <p> Consider the situation immediately
                    after the deque object has grown a map containing M
                    elements. (M is just ceil(N / DEQUESIZ), for a controlled
                    sequence of N elements.) The deque object has performed
                    log2(M) allocations, which should all take approximately the
                    same time. More important, the number of pointer copies it
                    has performed is:</p>

<PRE>
M + M/2 + M/4 + ...
</PRE>
               
               <p>which approaches 2 * M. The time
                    complexity for prepending or appending elements one at a
                    time is thus no worse than the time to construct the
                    sequence all at once. Construction time is necessarily
                    linear, so the average cost of prepending or appending does
                    not depend on the length of the sequence.</p>
               
               <p>As an added safeguard, the deque
                    object copies the map to the middle of the newly allocated
                    containing array. A map of length M subsequently has room to
                    grow by M/4 pointers at either end. Absent any information
                    about future growth patterns, this is a good compromise that
                    preserves the desirable time complexity for that future
                    growth.</p>
               
               <H4> <FONT COLOR="#000080">Implementing
               Deque</FONT></FONT></H4>
               
               <p><A href="list1.htm">Listing 1</A>
                    shows template class deque from the header &lt;deque&gt;.
                    Once again, I remind you that the /// comments indicate
                    compromises needed for current compiler technology. Features
                    required by the draft C++ Standard but not supported by many
                    current compilers are commented out with a leading ///.
                    Replacement code is "commented in," and flagged for later
                    removal, with a trailing ///. And as with the containers
                    discussed earlier, most of the rewriting of template class
                    deque is to avoid using member templates, which are not yet
                    widely supported. </p>
               
               <p> To represent the controlled sequence,
                    a deque object stores several objects:</p>
               <UL><LI>Map is a pointer to the beginning of the array that
                         stores the map, or a null pointer if the deque is
                         empty.</LI>
                    <LI>Mapsize is the number of elements in the array pointed
                         to by Map.</LI>
                    <LI>Size counts the number of elements in the controlled
                         sequence.</LI>
                    <LI>First is an iterator that designates the first element
                         in the controlled sequence.</LI>
                    <LI>Last is an interator that designates the first element
                         beyond the end of the controlled sequence.</LI>
               </UL>
               
               <p>A deque object also stores one or two
                    allocator objects. Last month, I described in some detail
                    the complexities involved in allocating and freeing storage
                    for STL containers using allocator objects. (See "Standard
                    C/C++: Allocators," CUJ, June 1996.) That's a long sermon,
                    which I will not repeat in full here. Instead, I simply
                    highlight the peculiarities that result from working with 
                    allocators. </p>
               
               <p> The template parameter A describes an
                    allocator that's eminently suited for allocating blocks. The
                    deque object stores a protected object named allocator
                    (unfortunately) of type A, and uses it for the intended
                    purpose. But allocator is not, strictly speaking, suitable
                    for allocating the array that contains the map. A proper
                    implementation of template class deque thus also stores the 
                    allocator object Myal, which it uses to allocate map arrays.
                    A rather large brick of code &#151; including the functions
                    Freemap, Freeptr, Getmap, Growmap, and Setptr &#151; thus comes
                    in two flavors, one standard conforming, the other
                    practically realizable with today's compilers. </p>
               
               <p> A related issue is the types of
                    pointers to maps and blocks. All these creatures are
                    addressable by rules dictated by the allocator class A.
                    Thus, the code is careful to define element pointers (Tptr
                    and Ctptr) and map pointers (Mapptr) in terms of types
                    supplied by the allocator class. Mapptr has a particularly
                    magical specification, as I discussed last month. </p>
               
               <p> Everything you need to know about
                    accessing elements in a deque you can learn by studying the
                    nested types iterator and const_iterator. These perform the
                    magic required to walk through a controlled sequence,
                    leaping from block to block. Note the absence of any
                    checking logic &#151; walking an iterator off either end of the
                    controlled sequence leads to disaster, pure and simple. 
                    </p>
               
               <p> Everything you need to know about
                    growing a deque you can learn by studying the four functions
                    push_back, push_front, pop_back, and pop_front. These supply
                    the unique properties I've outlined above. How they do so is
                    worthy of some study. </p>
               
               <p> The rest of <A href="list1.htm">Listing
                         1</a>
looks remarkably like the innards of template
                    class vector and template class list. I present them here
                    for completeness. o </p></BLOCKQUOTE>
<P><I>P.J. Plauger is senior editor of C/C++ Users Journal. He is the author of the Standard C++ Library shipped with Microsoft's Visual C++, v4.2. For eight years, he served as convener of the ISO C standards committee, WG14. He remains active on the C++ committee, WG21. His latest books are The Draft Standard C++ Library, Programming on Purpose (three volumes), and Standard C (with Jim Brodie), all published by Prentice-Hall. You can reach him at pjp@plauger.com.</FONT></I></P> 
     
<h4><a href="../../../source/1997/mar97/pjp.zip">Get Article Source Code</a></h4>

</BODY>
</HTML>
