






<HTML>
     
     <HEAD>


          
          <TITLE>March 1997/Portable Signal Handling Under UNIX/Sidebar</TITLE>
     </HEAD>
     
     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          
          <H2 ALIGN="center"><FONT COLOR="#800000">Posix Signal Handling</FONT></H2>
          
          <HR>
          <BLOCKQUOTE> 
               
               <p>Signals are sometimes called software
                    interrupts because they allow for the asynchronous execution
                    of certain sections of code. Posix.1 requires that the
                    following signals (minimally) be supported by a
                    Posix-compliant operating system:</p>
               <DL><DD>SIGABRT &#151; abnormal termination (by abort, for example)
                    </DD>
                    <DD> SIGALRM &#151; alarm timer expired</DD>
                    <DD> SIGFPE &#151; arithmetic error, e.g. division by zero</DD>
                    <DD> SIGHUP &#151; hangup</DD>
                    <DD> SIGILL &#151; illegal instruction</DD>
                    <DD> SIGINT &#151; terminal interrupt, e.g. ctrl-c</DD>
                    <DD> SIGKILL &#151; termination (cannot catch or ignore)</DD>
                    <DD> SIGPIPE &#151; write to pipe with no readers</DD>
                    <DD> SIGQUIT &#151; terminal quit</DD>
                    <DD> SIGSEGV &#151; invalid memory reference</DD>
                    <DD> SIGTERM &#151; termination</DD>
                    <DD> SIGUSR1 &#151; user-defined signal 1</DD>
                    <DD> SIGUSR2 &#151; user-defined signal 2</DD>
                    <DD> Another a group of signals required by Posix
                         implementations provide job control:</DD>
                    <DD> SIGCHLD &#151; child process changed status (terminated)</DD>
                    <DD> SIGCONT &#151; continue process if stopped</DD>
                    <DD> SIGSTOP &#151; stop (cannot catch or ignore)</DD>
                    <DD> SIGTSTP &#151; terminal stop</DD>
                    <DD> SIGTTIN &#151; background read from terminal</DD>
                    <DD> SIGTTOU &#151; background write to terminal</DD>
               </DL>
               
               <p> Signals are designed to notify
                    processes of events. The SIGINT signal, for example, is
                    generated in response to a ctrl-C (on most machines), and
                    sent to the foreground process. The process can respond to
                    this event in one of three ways: It can ignore the signal,
                    it can let the OS decide what to do, or it can perform some
                    customized set of actions, such as writing the contents of a
                     cache to disk before it deliberately terminates. </p>
               
               <p> It is up to you, the programmer, to
                    install any signal handling which differs from option two,
                    the default behavior imposed by the operating system, which
                    in most cases is to terminate the process. If you want to
                    ignore a certain signal, say SIGINT, you must tell the OS
                    that the signal handler for SIGINT in your process will be
                    SIG_IGN. This identifier tells the OS not to bother you with
                     SIGINTs. (Note that SIGKILL, the signal sent by typing the
                    command kill -9, cannot be ignored.) </p>
               
               <p> In Posix, the way to tell the
                    operating system how to handle signals sent to your process
                    is by calling the function sigaction, declared in &lt;signal.h&gt;.
                    The prototype of this function is:</p>

<PRE>
int sigaction(int signo,
    const struct sigaction *act,
    struct sigaction *oact);
</PRE>
               
               <p>The sigaction struct looks like this:</p>

<PRE>
struct sigaction {
   void (*sa_handler)(int[?]);
   sigset_t sa_mask;
   int sa_flags;
};
</PRE>
               
               <p>The following code segment illustrates
                    the use of sigaction to install the function writeCache(int)
                    as the signal handler for SIGINT.</p>

<PRE>
#include &lt;signal.h&gt;
#include &lt;iostream.h&gt;

void writeCache(int signo)

{
  // ... operations to flush cache to disk ...
}

// declare a sigaction struct
struct sigaction act;

// set the signal handler to the writeCache function
act.sa_handler=writeCache;

// fill the signal set with all signals
sigfillset(&amp;act.sa_mask);

// no flags
act.sa_flags=0;

// install the sigaction struct
if (sigaction(SIGINT,&amp;act,NULL) &lt; 0)
    { cout &lt;&lt; "could not install sighandler for SIGINT!" &lt;&lt; endl; }
</PRE>
               
               <p>The sa_mask member of the sigaction
                    struct is a signal set. It contains the set of signals to be
                    blocked while the signal is being handled. In addition to
                    sigfillset, there are functions like sigemptyset, sigaddset,
                    and sigdelset that let you construct an arbitrary set of
                    signals. </p>
               
               <p> The sa_handler member of the
                    sigaction struct is either SIG_IGN, SIG_DFL, or a pointer to
                    a function taking an int argument. In the example it is set
                    to the function writeCache. If sa_handler is SIG_IGN,
                    however, the signal will be ignored. and if it is SIG_DFL,
                    the default action will be taken. (As I already mentioned,
                    this usually means that the process will be terminated &#151; or
                     else the signal will be ignored). </p>
               
               <p> The sa_flags member, in a strict
                    Posix program, should be set to a nonzero value only for
                    SIGCHLD (one of the job-control signals), in which case a
                    value of SA_NOCLDSTOP indicates that SIGCHLD should not be
                    generated when child processes stop. </p>
               
               <p> The call to sigaction installs this
                    struct as the rule to follow when the SIGINT event occurs.
                    The third argument to sigaction (a null pointer in this
                    case) can be used to retrieve the previously installed
                    sigaction struct for this signal. Henceforth, when the
                    process receives the SIGINT signal, it will call the
                    function writeCache with argument SIGINT. </p>
               
               <p> If you do not install signal
                    handling, SIG_DFL is assumed for all signals. </p>
               
               <p> Signal handling is an essential part
                    of any but the most trivial UNIX program, and a great deal
                    has been written on the effective use of signals. Stevens
                    and Robbins &amp; Robbins (see References) both provide
                    excellent comprehensive treatments of signals. o </p></BLOCKQUOTE>
     </BODY>
</HTML>
