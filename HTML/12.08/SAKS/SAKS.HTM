

<HTML>
<HEAD>

<TITLE>August 1994/Stepping Up To</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocaug.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Stepping Up To<A name="0161_00B8"><A name="0161_00B8"></font></h2><P>
<h3 align="center"><A name="0161_0000"><A name="0161_0000">Designing Generic Container Classes, Part 2</h3><P>
<h3 align="center"><font color="#800000">Dan Saks</font></h3><hr><blockquote><P>
<P><i><A name="0161_0000"><A name="0161_0000">Dan Saks is the president of Saks &amp; Associates, which offers consulting and training in C++ and C. He is secretary of the ANSI and ISO C++ committees. Dan is coauthor of C++ Programming Guidelines, and codeveloper of the Plum Hall Validation Suite for C++ (both with Thomas Plum). You can reach him at 393 Leander Dr., Springfield OH, 45504-4906, by phone at (513)324-3601, or electronically at dsaks@wittenberg.edu.</i></P><P>
A container is a data structure, such as a list, tree, or vector, that holds other objects. Many applications use containers. In fact, many applications use more than one instance of the same kind of container. For example, a single commercial application might juggle lists of customers, lists of products, and lists of orders all at the same time.<P>
Containers are good candidates for abstract types, and so C++ programmers typically implement them as classes. Often, the class and member function definitions for one instance are nearly identical to the definitions for a different instance of the same kind of container. For example, the code for class <I>customer_list</I> might be strikingly similar to the code for class <I>order_list</I>, differing only in that the former uses <I>customer </I>where the latter uses <I>order</I>. You don't have to implement very many list classes before you notice that they're all pretty much the same and you may be repeating work unnecessarily.<P>
Using generic containers reduces this apparent duplication of effort. A generic container uses a single implementation for a particular kind of container that you can tailor to hold objects of many different types. For example, you can adapt a single implementation of a generic list into separate instances for customer lists, product lists, and order lists.<P>
<h4><FONT COLOR="#000080"><A name="0161_00B9">Recapping Our Story<A name="0161_00B9"></FONT></h4></P>
My previous installment introduced the technique of using containers of <I>void</I> * as generic containers. (See "Stepping Up to C++: Designing Generic Containers, Part 1," <I>CUJ</I>, June, 1994.) In particular, I presented a class <I>genq</I> which implements a generic FIFO (first-in-first-out) queue. A <I>genq</I> is actually a pair of pointers to the first and last cell, respectively, in a linked list of cells, as shown in <A href="fig1.htm">Figure 1</a>.
 Each cell contains a <I>void</I> pointer to a queued element along with a pointer to the next cell in the list.<P>
The class definition for <I>genq</I> appears in <A href="list1.htm">Listing 1</a>.
 In addition to a default constructor and a destructor, <I>genq</I> provides the following operations:<P>
<UL><li><I>void append(void *e)</I> &#151; append element <I>e</I> to the end of a queue.</li>
<li><I>void clear()</I> &#151; discard all elements in a queue.</li>
<li><I>void apply(void f(void *))</I> &#151; apply function <I>f</I> to the address of each object in the queue.</li>
<li><I>int remove(void *&amp;e)</I> &#151; for a non-empty queue, remove an element from the head of the queue, place it in <I>e</I>, and return non-zero; for an empty queue, simply return zero without changing <I>e</I>.</li></UL>
The corresponding member function definitions appear in <A href="list2.htm">Listing 2</a>.
<P>
In contrast to a generic queue, a special-purpose queue holding objects of a particular type <I>T</I> known at compile-time an store a <I>T</I> object completely within a queue cell. That is, the element member of each cell has type <I>T</I>, and appending an object to the queue creates a new cell with a copy of the queued object in the cell's element member. A <I>genq</I> can't store the queued objects within the cells because it doesn't know the element type(s) at compile-time. Rather, a <I>genq </I>stores pointers to the queued objects. The pointers have type <I>void</I> <I>*</I>, so they can point to objects of any type. (<I>void</I> <I>*</I>is the one type of data pointer that fits all.)<P>
The single <I>genq</I> class defines a queue type that can indeed contain objects of any type. However, using a <I>genq</I> is less convenient than using a special-purpose queue In particular, the objects in a <I>genq</I> have <I>pointer</I> rather than <I>value</I> semantics. That is, a <I>genq</I> user must always be aware that the <I>genq</I> stores the addresses of objects rather the objects themselves. Special-purpose queues (like the <I>intq</I> and <I>strq </I>classes I used last month) tend to use value semantics.<P>
The queue testing program in <A href="list3.htm">Listing 3</a>
provides concrete examples showing how pointer semantics can be more cumbersome. This program uses a <I>genq</I> as a queue of <I>str</I>. (<I>str</I> is a variable-length string class. See last month's column for the class definition, or use any string class that you happen to have handy.) If <I>q[i] </I>were a <I>strq</I> (a queue with <I>str</I> rather than <I>void</I> <I>*</I> elements), you could append <I>str qe</I> to <I>q[i]</I> simply using<P>
<pre>q[i].append(qe);</pre>
But since <I>q[i]</I> is a <I>genq</I>, you must write<P>
<pre>q[i].append(new str(qe));</pre>
as in <A href="list3.htm">Listing 3</a>.
<P>
Using <I>void</I> <I>*</I> as the queue element type eliminates the need for casts when placing objects in the queue, but not when removing objects. If <I>q[i]</I> were a <I>strq</I> you could remove an element from <I>q[i]</I> using just<P>
<pre>if (q[i].remove(qe))
   // do something with qe</pre>
But since <I>q[i]</I> is a <I>genq</I>, you must follow the more elaborate sequence of steps:<P>
<pre>if (q[i].remove(pv))
   {
   pqe = (str *)pv;
   // do something with *pqe
   delete pqe;
   }</pre>
as in <A href="list3.htm">Listing 3</a>.
 As always, any interface that requires casting lacks type safety.<P>
Using <I>void</I> <I>*</I> as the queue element type has other adverse effects. For one thing, using <I>void</I> * makes it harder to preserve the purity of homogeneous containers. Recall that a homogeneous container is one in which all the objects have the same type. I believe that most applications need homogeneous containers; that is, although a typical application may require the type of objects in one container to differ from the type in another, all the objects in a given container have the same type. But <I>genqs</I> are inherently heterogeneous. Since any data pointer type converts quietly to <I>void</I> <I>*</I>, you can inadvertently place the address of an <I>X</I> object into a queue that's only supposed to hold <I>Y</I> objects.<P>
Another problem is that <I>genq::clear </I>may cause memory leaks. The delete-expression<P>
<pre>delete p-&gt;element;</pre>
is supposed to delete the dynamically-allocated copy of the queued value (presumably allocated by a <I>new</I>-expression within a call such as<P>
<pre>q.append(new T(qe));</pre>
for queuing an object of type <I>T</I>). Unfortunately, <I>p-&gt;element</I> in <I>genq::clear</I> has type <I>void *</I>, so the delete-expression fails to call <I>T</I>'s destructor. If <I>T</I> is a type, like <I>str</I>, whose destructor calls <I>delete,</I> failing to call the destructor causes memory leaks.<P>
Not all the changes wrought by the loss of compile-time type information are bad. Although this loss rendered the print function (presented in Part 1) essentially useless, the <I>apply</I> function that replaced it is much more flexible, albeit a tad harder to use. <I>genq::apply</I> is a general-purpose iteration function that applies its function argument to each queued object in turn. <A href="list3.htm">Listing 3</a>
shows how to use <I>genq::apply </I>to print each object in a queue.<P>
<h4><FONT COLOR="#000080"><A name="0161_00BA">Type-Safe Wrappers<A name="0161_00BA"></FONT></h4></P>
You can repackage a generic container so that it's more hygienic for a particular application by simply wrapping it up as particular private data inside another class. The wrapper class has essentially the same public interface as the generic class, and the wrapper's member functions delegate most of the real work to the generic. But the wrapper also enforces the requirement that all objects in the container have a particular element type, say <I>T</I>. Thus, the wrapper's member functions have parameter lists expressed in terms of <I>T</I> rather than <I>void</I> <I>*</I>, and they do all those nasty data conversions as they move objects to and from the generic container, so the end user doesn't have to. The wrapper can also create the appearance that the objects in the container have value, rather than pointer, semantics.<P>
<A href="list4.htm">Listing 4</a>
shows the class and inline member function definitions for a new class <I>strq</I> that turns a <I>genq</I> into a homogeneous queue of <I>str. strq'</I>s<I> append</I> and <I>remove</I> functions have <I>str</I> instead of <I>void</I> <I>*</I> parameters, the same as my original <I>strq</I> class from last month. But unlike my original <I>strq</I> class, the <I>strq</I> wrapper class provides an <I>apply</I> function rather than a <I>print</I> function.<P>
The <I>strq</I> wrapper does not declare any constructors. However, the <I>genq</I> member object has a non-trivial default constructor, so the compiler generates a default constructor for <I>strq</I> that invokes the <I>genq </I>constructor.<P>
<I>genq</I> also has a destructor (from <A href="list1.htm">Listing 1</a>
and <A href="list2.htm">Listing 2</a>)
. I might have omitted the declaration for <I>strq</I>'s destructor and let the compiler generate it as well. But the <I>genq</I> destructor invokes <I>genq::clear</I>, which leaks memory left and right. Rather, <I>strq</I> needs its own memory-tight clear function (coming up soon), and <I>strq</I>'s destructor should use <I>strq::clear</I> instead, which it does.<P>
<I>strq::append</I> is a simple inline function that hands most of its work to the <I>genq</I> object. But before it does, it dynamically allocates a copy of the <I>str</I> object, and passes the address of the copy to the <I>genq</I>. This hides the pointer semantics of the <I>genq</I> class from <I>strq</I> users, who can simply write<P>
<pre>q[i].append(qe);</pre>
to append <I>str qe</I> to <I>strq q[i]</I>.<P>
Two of the <I>strq</I> member functions, <I>clear</I> and <I>remove</I>, must labor a little to restore the type information lost by <I>genq. </I>They appear as non-inline function definitions in <A href="list5.htm">Listing 5</a>.
<P>
<I>genq::clear</I> can't delete queued objects properly, so <I>strq::clear</I> doesn't even ask it to try. Rather, <I>strq::clear </I>removes each queued element from the <I>genq </I>as a <I>void *,</I> and deletes it after casting it back to the proper type.<P>
<I>genq::remove</I> uses a similar approach. It bundles the use of a <I>void *</I> and the appropriate casts so that <I>strq</I> users can simply write<P>
<pre>if (q[i].remove(qe))
   // do something with qe</pre>
to remove <I>str qe</I> from <I>strq q[i].</I><P>
This <I>strq</I> wrapper has one remaining hole in its interface that could let data typing errors through. Just like <I>genq::apply</I>, the <I>strq::apply</I> function has a parameter of type <I>void f(void *).</I> Consequently, <I>strq</I> users must still write casts from <I>void * </I>to <I>str *</I>inside functions that they pass to <I>strq::apply.</I><P>
You may well ask why didn't I close that hole by defining <I>strq::apply</I> as something like<P>
<pre>void strq::apply(void f(str *))
   {
   typedef void F(void *);
   gq.apply((F)f);
   }</pre>
The following passage from the current C++ draft standard held me back:<P>
A pointer to a function may be explicitly converted to a pointer to a function of a different type. The effect of calling a function through a pointer to a function type that differs from the type used in the definition of the function is undefined.<P>
Inside <I>strq::apply</I> as shown above, the cast in<P>
<pre>gq.apply((F)f);</pre>
converts <I>f</I> from type <I>void (str *)</I> to type <I>void (void *).</I> Then inside <I>genq::apply</I>, the call<P>
<pre>f(p-&gt;delete);</pre>
calls a function whose definition has a type different from <I>f</I>. That's behavior that's undefined.<P>
When a language standard says the effect of something is undefined, bad things might happen if you do that something. I have no doubt the cast works in some, and possibly many, environments, but it's clearly not sanctioned by the draft standard.<P>
<h4><FONT COLOR="#000080"><A name="0161_00BB">Iteration Functions Revisited<A name="0161_00BB"></FONT></h4></P>
The iteration function<P>
<pre>strq::apply(void f(void *))</pre>
is fairly general in that it applies an arbitrary operation to every object in a queue. However, this function assumes that you can somehow express the desired operation as a function that accepts a single pointer argument and returns nothing. This assumption sometimes forces you to program in styles that you'd rather avoid.<P>
For example, my queue testing program contains the following loop:<P>
<pre>for (size_t i = 0; i &lt; DIM(q); ++i)
   {
   cout &lt;&lt; i &lt;&lt; ':';
   q[i].apply(print_str);
   cout &lt;&lt; "\n";
   }</pre>
The body of this loop displays the contents of one queue in the form<P>
<pre>i: aaa bbb ccc</pre>
where <I>i</I> is the queue number and <I>aaa, bbb, </I>and <I>ccc</I> represent strings in the queue. Most C++ programmers would prefer to write the body of the loop as just<P>
<pre>cout &lt;&lt; i &lt;&lt; ':' &lt;&lt; q[i] &lt;&lt; "\n";</pre>
This you can do by overloading <I>operator&lt;&lt;</I> to output a <I>strq</I> to an ostream.<P>
The definition for that output operator must look something like:<P>
<pre>ostream &amp;
operator&lt;&lt;(ostream &amp;os, strq &amp;q)
   {
   q.apply(print_str);
   return os;
   }</pre>
It can't look exactly like this because this doesn't work. <I>operator&lt;&lt;</I> should pass <I>os </I>along with <I>print_str</I> to <I>strq::apply</I>, which should in turn pass both arguments to <I>genq::apply</I>. Then <I>genq::apply</I> should pass <I>os</I> to <I>print_str</I> when it calls <I>print_str</I> (as <I>f</I>). But none of this can happen because <I>strq::apply</I> (and <I>genq::apply</I>) won't accept <I>os</I> as an additional argument.<P>
The revised <I>strq</I> test program in <A href="list6.htm">Listing 6</a>
shows a solution to this problem. <I>operator&lt;&lt;</I> completely bypasses <I>apply</I> in transmitting <I>ostream os</I> to <I>print_str</I>. Instead, <I>operator&lt;&lt;</I> stores the address of <I>os </I>into global variable <I>os_ptr</I>. When <I>apply </I>calls <I>print_str, print_str</I> uses <I>os_ptr</I> to locate the output stream.<P>
Some of you might prefer making the <I>os_ptr</I> object a private static member of class <I>strq</I> to remove it from the global namespace. Then you would also have to make <I>print_str</I> a static member function and <I>operator&lt;&lt;</I> a friend of <I>strq</I>. Personally, I don't think that's the way to go. I don't think of the <I>os_ptr</I> object as part of a queue's state. It's merely an argument to the output operator that we're having trouble passing around to the right places.<P>
I'd rather redesign the <I>apply</I> functions as shown in <A href="list7.htm">Listing 7</a>.
 Both <I>apply</I> functions now have two parameters. As before, the first parameter, <I>f</I>, points to the function to be applied to each queued object. But now, <I>f</I> points to a function that accepts two arguments rather than just one. <I>apply</I>'s second parameter, <I>args</I>, points to an additional argument that <I>apply</I> passes in turn as the second argument to <I>f</I>.<P>
<A href="list8.htm">Listing 8</a>
shows the <I>strq</I> output operator rewritten using the new <I>apply</I> function. <I>operator&lt;&lt;</I> passes the addresses of both <I>print_str</I> and <I>os</I> to <I>strq::apply</I>, which passes them on to <I>genq::apply. genq::apply</I> repeatedly calls <I>print_str</I> (via <I>f</I>), passing the address of a queued object along with the address of <I>ostream</I> (via <I>args</I>). <I>print_str</I> then converts its parameters to their expected types, and uses them to write (what it thinks is) a <I>str</I> to (what it thinks is) an <I>ostream</I>.<P>
Are two parameters enough? I think so. If you need to pass more data to the applied function, you can always define a class that encapsulates several parameters as a single object, and pass a pointer to one of those objects.<P>
<h4><FONT COLOR="#000080"><A name="0161_00BC">What's Up Next?<A name="0161_00BC"></FONT></h4></P>
Adding a second parameter to the iteration function adds considerable flexibility, but iterator objects may be even more flexible and possibly easier to use. I'll introduce iterator objects next time.<P>
Also, as you think about designing generic containers, you should remember that the designer of the container and the end user are not necessarily the same person. The designer's job is to craft a single implementation for a class that end users can easily adapt to their application needs. If the job of adapting the generic is too complicated, users will reject the generic and just write their own special-purpose containers.<P>
The type-safe wrapper around the generic container certainly makes the container much safer and easier to use. But who's responsible for writing the wrapper? Not the author of the generic. He/she can't possibly write type-safe wrappers for every possible end-user need. Rather, the end users should write wrapper classes as needed. But again, if creating a wrapper is too much work, end users won't do it.<P>
Next time, I'll look at ways that generic class designers can help automate the creation of type-safe wrappers.<P>

<h4><a href="../../../source/1994/aug94/saks.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
