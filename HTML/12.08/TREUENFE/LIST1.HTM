<HTML><HEAD>
<TITLE>August 1994/An Efficient Flood Visit Algorithm/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1<I> An algorithm which prevents a child's shadow from falling on its parent line</I></A></h4>
<pre>/*****************************************************
 * UFLOOD.C - unoptimized flood visit
 *
 * for ANSI C
 *
 * by Anton Treuenfels
 * last revision:  04/12/94
 ****************************************************/

/*****************************
 * HEADER SECTION - UFLOOD.H *
 ****************************/

#ifndef SEEN_UFLOOD
#define SEEN_UFLOOD

/* function prototype */

int uflood(int, int, int (*)(int. int));

#endif

/***************************
 * CODE SECTION - UFLOOD.C *
 **************************/

#include &lt;stdlib.h&gt;

#include "usrdef.h"

/* line shadow */

typedef struct shdw {
   struct shdw *next;  /* forward link */
   int lft, rgt;       /* endpoints */
   int row, par;       /* row and parent row */
   Boolean ok;         /* valid flag */
} shadow;

/* shadow variables */

static shadow *seedShadow;  /* current shadow */
static shadow *shadowHead;  /* other pending shadows */

/* visit coordinate function */

static int (*isInterior)(int, int);

/****************************************************/

/* make new shadow */

static void newshadow(int slft, int srgt, int srow, int prow) {

   shadow *new;

   if ((new = malloc(sizeof(shadow))) == NULL)
      exit(EXIT_FAILURE);

   new-&gt;lft = slft;    new-&gt;rgt = srgt;
   new-&gt;row = srow;    new-&gt;par = prow;
   new-&gt;ok = TRUE;
   new-&gt;next = shadowHead;
   shadowHead = new;
}

/* clip off ends of overlapped shadow */

static void clipshadow(shadow *s, shadow *clip) {

   if (s-&gt;lft &lt; (clip-&gt;lft - 1))
      newshadow(s-&gt;lft, clip-&gt;lft - 2, s-&gt;row, s-&gt;par);
   if (s-&gt;rgt &gt; (clip-&gt;rgt + 1))
      newshadow(clip-&gt;rgt + 2, s-&gt;rgt, s-&gt;row, s-&gt;par);
}

/* remove overlapped segment from shadow pair */

static void removeoverlap(shadow *o) {

   shadow *s;

   for (s = shadowHead; s; s = s-&gt;next) {
      if ((s-&gt;row == o-&gt;par) &amp;&amp; (s-&gt;ok) &amp;&amp;
         (s-&gt;lft &lt;= o-&gt;rgt) &amp;&amp; (s-&gt;rgt &gt;= o-&gt;lft)) {
            clipshadow(s, o);
            if (o != seedShadow)
               clipshadow(o, s);
            s-&gt;ok= o-&gt;ok = FALSE;
            return;
      }
   }
}

/* make shadows of one child line */

static void makeshadows(int lft, int rgt, int row) {

   shadow *p;

   newshadow(lft, rgt, row + 1, row);
   newshadow(lft, rgt, row - 1, row);

   removeoverlap(seedShadow);

   for (p = shadowHead; p; p = p-&gt;next) {
      if ((p-&gt;row == row) &amp;&amp; (p-&gt;ok) &amp;&amp;
            !((p-&gt;lft &gt; rgt) || (p-&gt;rgt &lt; lft)))
         removeoverlap(p);
   }
}

/* fill all child lines found within one shadow */

static void fillshadow(void) {

   int col, row, lft;

    row = seedShadow-&gt;row;

   for (col = seedShadow-&gt;lft; col &lt;= seedShadow-&gt;rgt;
          col++) {
      if ((*isInterior)(col, row)) {
         if ((lft = col) == seedShadow-&gt;lft) {
            while ((*isInterior)(--lft, row))
               ;
            lft++;
         }
         while ((*isInterior)(++col, row))
            ;

         makeshadows(lft, col - 1, row);
      }
   }
}

/* flood visit */

int uflood(int seedx, int seedy, int (*visit)(int, int)) {

   isInterior = visit;
   shadowHead = NULL;
   newshadow(seedx, seedx, seedy. seedy);
   while (shadowHead) {
      seedShadow = shadowHead;
      shadowHead = shadowHead--&gt;next;
      if (seedShadow--&gt;ok)
         fillshadow();
      free(seedShadow);
   }
}

/* End of File
</pre>
</BODY>
</HTML>
