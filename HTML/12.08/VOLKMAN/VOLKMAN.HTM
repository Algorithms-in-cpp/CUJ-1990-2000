

<HTML>
<HEAD>

<TITLE>August 1994/CUG New Releases</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocaug.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">CUG New Releases<A name="0165_00BA"><A name="0165_00BA"></font></h2><P>
<h3 align="center"><A name="0165_0000"><A name="0165_0000">Sound Blaster Tools, THE Editor, and RTTI for UNIX</h3><P>
<h3 align="center"><font color="#800000">Victor R. Volkman</font></h3><hr><blockquote><P>
<P><i><A name="0165_0000"><A name="0165_0000">Victor R. Volkman received a BS in Computer Science from Michigan Technological University. He has been a frequent contributor to C/C++ Users Journal since 1987. He is currently employed as Senior Analyst at H.C.I.A. of Ann Arbor, Michigan. He can be reached by dial-in at the HAL 9000 BBS (313) 663-4173 or by Usenet mail to sysop@ha19k.com.</i></P><P>
<h4><FONT COLOR="#000080"><A name="0165_00BB">New Acquisitions<A name="0165_00BB"></FONT></h4></P>
<UL><li>Sound Blaster Tools and Sound Blaster Freedom Project (CUG #413): Programming tools and information for SoundBlaster and compatibles.</li>
<li>THE Editor (CUG #414): highly source-portable editor that emulates IBM XEDIT and Mansfield KEDIT.</li>
<li>Run-Time Type Information (CUG #415): C++ language extension, as proposed by ANSI C++ committee, in library form. (For UNIX only!)</li></UL>
<h4><FONT COLOR="#000080"><A name="0165_00BC">CUG 413: Sound Blaster Tools and Sound Blaster Freedom Project<A name="0165_00BC"></FONT></h4></P>
CUG proudly announces two free-ware programming kits for the Sound Blaster digital audio cards on a single diskette volume. The original Sound Blaster card by Creative Labs, Inc. has become an industry standard for PC digital audio. Today, a plethora of Sound Blaster (SB) compatible cards are available from many vendors. Although SB cards have proliferated widely, the knowledge required to program and control their operation has not. Knowledge of the I/O and DMA access protocol is critical for developers creating MS-DOS based applications with SB audio. In addition to code, these two kits provide lots of hard-to-find information on SB programming.<P>
<h4><FONT COLOR="#000080"><A name="0165_00BD">CUG 413A: Sound Blaster Tools<A name="0165_00BD"></FONT></h4></P>
David Welch (Las Cruces, NM) contributes his collection of Sound Blaster Tools in C. He provides both highly detailed information about SB programming and C code (in Borland Turbo C) to generate a variety of audio mini-applications.<P>
This kit provides a programming specification for the Sound Blaster and Sound Blaster Pro (DSP DAC/ADC only). As a bonus, the kit also provides some information and C code on programming for the PC Speaker. Since the source code was written to furnish a basic example, it does not demonstrate high speed ADC/DAC. All examples use DMA channel 1 and I/O base adddress 220h. You may need to make slight source modifications to make it work on your PC. Sound Blaster Tools builds the following MS-DOS mini-applications, and also includes precompiled versions of the same:<P>
<UL><li><I>rawin.exe:</I> records a raw SB digital audio file (not .<I>V0C</I>)</li>
<li><I>rawout.exe:</I> plays back a raw SB digital audio file (not .<I>VOC</I>)</li>
<li><I>waveinfo.exe:</I> provides a debugging type dump of a Windows digital audio .<I>WAV</I> file.</li>
<li><I>wave.exe:</I> plays a Windows digital audio .<I>WAV</I> file.</li>
<li><I>rwave.exe:</I> re-samples a Windows digital audio .<I>WAV</I> file.</li>
<li><I>voice.exe:</I> provides a debugging type dump of an SB digital audio .<I>VOC</I> file.</li>
<li><I>sbinfo.exe:</I> reads current status of SB card including DSP version, mixer settings, volume of all input settings, master volume, and more.</li>
<li><I>speaker.exe:</I> allows you to play SB digital audio .<I>VOC</I> files through PC speaker.</li></UL>
Additionally, the kit includes programming specifications for various chips available to all PC compatibles: 8259 Programmable Interrupt Controller, 8254 Programmable Interrupt Time, 8237 DMA Controller, and others. Sound Blaster Tools version 4 (released 12/11/93) is now available on CUG #413A.<P>
<h4><FONT COLOR="#000080"><A name="0165_00BE">CUG 413B: Sound Blaster Freedom Project<A name="0165_00BE"></FONT></h4></P>
Jeffrey Bird, Dept. of Electrical and Computer Engineering at the James Cook University of North Queensland (Townsville, Australia), contributes his Sound Blaster Freedom Project (SBFP). As moderator of the SBFP, he has collected an impressive array of technical information. Bird writes:<P>
The aim of the Sound Blaster Freedom Project is to provide a cheap source of programming information for the Sound Blaster and other sound cards.Previously, programming a sound card has required a not inconsiderable investment in a developer's kit for each sound card. These developer's kits have been known to be terse and not well written. Our aim is to provide enough information to the general programmer to allow them to add sound card support to their software at minimal cost.<P>
SBFP includes source code in C and assembler for these DOS mini-applications:<P>
<UL><li><I>dacdma.exe:</I> Outputs to SB DAC using DMA mode (up to 64KB only)</li>
<li><I>recdma.exe:</I> Records from SB DAC using DMA mode (up to 64KB only)</li>
<li><I>dacdir.exe:</I> Outputs to SB DAC in single sample mode</li>
<li><I>driver.exe:</I> Uses <I>CT-VOICE.DRV</I> to access the Soundblaster DAC channel.</li>
<li><I>getvol.exe:</I> Displays master, VOC, line, FM, and CD volume levels.</li>
<li><I>fmtest.exe:</I> Defines an FM instrument and plays chromatic scales.</li></UL>
Additionally, SBFP includes technical documents on programming the FM music synthesizer chips, 8237 DMA Controller, and Sound Blaster voice file format (.<I>VOC</I>).<P>
This version includes significant enhancements by Christopher M. Box, some of which are:<P>
<UL><li>Added support for Sound Blaster 2.0 high-speed mode (this allows recording at 15 kHz and playback at 44 kHz).</li>
<li>Added code to permit recording of samples, as well as playback.</li>
<li>Updated <I>dma_code.asm</I> for 16-bit DMA and added start/stop control functions.</li>
<li>A fix for the bug that caused <I>sbdac.c </I>to play one byte too many.</li></UL>
SBFP version 3.0 (released 01/25/94) is now available on CUG #413B.<P>
<h4><FONT COLOR="#000080"><A name="0165_00BF">CUG #414: THE &#151; The Hessling Editor<A name="0165_00BF"></FONT></h4></P>
Mark Hessling (Holland Park, Queensland, Australia) offers his own full screen text editor similar to IBM VM/CMS Xedit and Mansfield Software's KEDIT. The THE text editor uses both command-line commands and key bindings to operate. It has currently been ported to SUNOS 4.1.x, Xenix-386, MS-DOS (Borland C++ and MSC), Esix 4.0.3a, ATT SystemV 3.2, Linux, 386BSD, and OS/2 2.1 (MSC, C Set/2, Borland C++). The CUG distribution of THE includes full source in C and a pre-built executable for use with MS-DOS.<P>
THE includes extensive documentation in the form of a 70-page ASCII Command Reference manual. In encylopaedic fashion, it describes each command along with its syntax, compatibility with XEDIT and KEDIT, implementation status, and pointers to related commands.<P>
THE makes use of the powerful IBM VM/CMS REXX command language in any environment where it is available. THE uses the OS/2 REXX interpreter to execute macro files. An extensive interface between THE and REXX gives THE the complete power of REXX. Most UNIX systems provide REXX support and it's also available with DJGPP using Regina 0.05, a free REXX interpreter available from <I>flipper.pvv.unit.no</I> in <I>pub/rexx</I>. The makefile includes details on integrating THE and Regina. THE version 1.5, as released on 01/12/93, is now available as CUG #414.<P>
<h4><FONT COLOR="#000080"><A name="0165_00C0">CUG #415: Run-Time Type Information Library for C++<A name="0165_00C0"></FONT></h4></P>
Arindam Banerji (Dept. of Computer Science &amp; Engineering, University of Notre Dame) contributes his Run-Time Type Information library for C++. Run-Time Type Information (RTTI) is a C++ language extension proposed by the ANSI C++ committee. Although the extension is intended to be implemented as part of native C++ compilers, it may be a long time before this comes to fruition. Fortunately, Banerji's implementation of RTTI as a C++ library allows you to start taking advantage of it right away. Banerji's system is loosely based on the RTTI system demonstarted by Stoustroup in <I>The</I> C++ <I>Programming Language</I>. RTTI for C++ works <I>only</I> with UNIX-based C++ implementations due to file naming conventions which are incompatible with MS-DOS.<P>
All classes in this RTTI system inherit from the <I>CLASS</I> base class. This scheme allows public virtual inheritance to work. <I>CLASS</I> provides very little functionality, but it has the RTTI scaffoldings neccessary for all users of RTTI. The narrowing facility (what allows you to go from a base class pointer to a derived class pointer) depends upon the use of <I>CLASS</I>.<P>
The <I>Type_info</I> class is the core of the RTTI implementation. It is initialized once per derived class. The constructors accept a list of the base classes and the name of the derived class. The <I>typeid</I> class provides an interface to the RTTI system; users get at the RTTI thru this class. This class just acts like a pass-through for the <I>Type_info</I> class.<P>
The <I>base_iterator</I> class is initialized with the list of base classes. <I>base_iterator</I> allows the clients of the <I>Type_info </I>class to iterate through the list of bases. RTTI also includes demonstration code for <I>string</I> and <I>trace</I> classes.<P>
Every class that uses RTTI must incorporate some scaffolding in both its declaration and its definition. The declaration must contain the following:<P>
<UL><li>For every RTTI class, a static <I>Type_info</I> class must be created, as in <I>static const Type_info info_obj;</I></li>
<li>For every RTTI class, two functions must be created to retrieve the <I>Type </I>information (one a virtual function and another a simple function), as in:</li>
<pre>   virtual typeid get_info() const ;
   static typeid info() ;</pre>
<li>To allow a base class pointer to be converted into its appropriate derived class pointer, the narrowing facility is utilized, as in:</li>
<pre>   static Type_info *_narrow(CLASS *) ;</pre>
<li>For the narrowing facility to work in the presence of virtual public inheritance, every RTTI class defines a virtual function that returns its <I>this </I>pointer:</li>
<pre>   virtual void *get_this_ptr(void)
       const ;</pre></UL>
RTTI for C++, as released on 11/03/93, is now available as CUG #415.<P>
</BLOCKQUOTE>
</BODY>
</HTML>
