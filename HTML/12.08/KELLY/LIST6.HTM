<HTML><HEAD>
<TITLE>August 1994/Multithreading with OS/2 and Borland C++/Listing 6</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 6 <I>A test stub for the file filter utility</I></A></h4>
<pre>#include "ffilter.hpp"
#include "filtfunc.hpp"

data_block *unix_filter( data_block *inblock )

{
 data_block *outblock;
 // int i = 0, j = 0, k;
 int k;

   if( !inblock || !inblock<I>-</I>&gt;data_size )
      return 0;

   k = inblock<I>-</I>&gt;data_size;

   outblock = new data_block;
   if( !outblock )
      return 0;

   outblock<I>-</I>&gt;block = new char[ k &lt;&lt; 1 ];
   if( !outblock<I>-</I>&gt;block ) {
      delete outblock;
      return 0;
   }

#if 0
   while( i &lt; k ) {
      if( inblock<I>-</I>&gt;block[ i ] == '\n' )
         outblock<I>-</I>&gt;block[ j++ ] = '\r';

      outblock<I>-</I>&gt;block[ j++ ] = inblock<I>-</I>&gt;block[ i++ ];
   }
#endif

   outblock<I>-</I>&gt;data_size = filter_function( inblock<I>-</I>&gt;block, outblock<I>-</I>&gt;block, k );

   return outblock;
}

int main( int argc, char *argv[] )
{
   APIRET rc;
   FileFilter *my_filter = 0, *my_filter2 = 0;
   const ULONG max_millisec = 30000UL;
   if( argc &lt; 3 ) {
      printf("\n\tUsage: gofilter UnixFile PCFile [UnixFile] [PCFile]\n\n");
      printf("\tCopies unix ascii(LF only) file(s) to pc ascii(CR/LF) file(s).");
      printf("\n\n\tNOTE: TEST STUB for FileFilter C++ class\n");
      return 1;
   }

   my_filter = new FileFilter( argv[ 1 ], argv[ 2 ], unix_filter );

   if( !my_filter || !my_filter<I>-</I>&gt;valid() ) {
      printf("\n\n\tCould Not Create First Filter!\n");
      return 1;
   }

   if( argc &gt;= 5 ) {
      my_filter2 = new FileFilter( argv[ 3 ], argv[ 4 ], unix_filter );
      if( !my_filter2 || !my_filter2<I>-</I>&gt;valid() ) {
         if( my_filter2 ) {
            delete my_filter2;
            my_filter2 = 0;
         }
         printf("\n\n\tCould Not Create Second Filter!\n");
      }
   }

   rc = my_filter<I>-</I>&gt;wait4completion( max_millisec );
   if( !rc )
      printf("\nFile: %s Filtered\n", argv[ 2 ] );

   if( my_filter2 &amp;&amp; my_filter2<I>-</I>&gt;valid() ) {
      rc = my_filter2<I>-</I>&gt;wait4completion( max_millisec );
      if( !rc )
         printf("\nFile: %s Filtered\n", argv[ 4 ] );
   }
   return 0;
}

// End of File</pre>

</BODY>
</HTML>
