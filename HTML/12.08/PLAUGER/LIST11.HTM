<HTML><HEAD>
<TITLE>August 1994/Standard C/C++/Listing 11</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 11 <I>member function</I> _Getffld(char *)</A></h4>
<pre>// isgetffl -- istream::_Getffld(char *)
#include &lt;ctype.h&gt;
#include &lt;locale.h&gt;
#include &lt;string.h)
#include &lt;istream&gt;
#include "xmath.h"

int istream::_Getffld(char ac[MAX_EXP_DIG+MAX_SIG_DIG+16])
    {     //extract a floating field
    char *p, seen;
    int ch, nsig;
    int pten;
    p = ac, ch = rdbuf()<I>-</I>&gt;sbumpc();
    pten = 0;
    if (ch == '+' || ch == '<I>-</I>')
        *p++ = ch, ch = rdbuf()<I>-</I>&gt;sbumpc();
    for (seen = 0; ch == '0'; ch = rdbuf()<I>-</I>&gt;sbumpc(), seen = 1)
        ;    // strip leading zeros
    if (seen)
        *p++ = '0';    // put one back
    for (nsig = 0; isdigit(ch); ch = rdbuf()<I>-</I>&gt;sbumpc(), seen = 1)
        if (nsig &lt; MAX_SIG_DIG)
            *p++ = ch, ++nsig;
        else
            ++pten;
    if (ch == localeconv()<I>-</I>&gt;decimal_point[0])
        *p++ = ch, ch = rdbuf()<I>-</I>&gt;sbumpc();
    if (nsig == 0)
        {    // strip zeros after point
        for (; ch == '0'; ch = rdbuf()<I>-</I>&gt;sbumpc(), seen = 1)
            <I>--</I>pten;
        if (pten &lt; 0)
            *p++ = '0', ++pten;    // put one back
        }
    for (; isdigit(ch); ch = rdbuf()<I>-</I>&gt;sbumpc(), seen = 1)
        if (nsig &lt; MAX_SIG_DIG)
            *p++ = ch, ++nsig;
    if (seen &amp;&amp; (ch == 'e' || ch == 'E'))
        {  // parse exponent
        *p++ = ch, ch = rdbuf()<I>-</I>&gt;sbumpc();
        if (ch == '+' || ch == '<I>-</I>')
            *p++ = ch, ch = rdbuf()<I>-</I>&gt;sbumpc();
        for (seen = 0; ch == '0'; ch = rdbuf()<I>-</I>&gt;sbumpc(), seen = 1)
            ;    // strip leading exponent zeros
        if (seen)
            *p++ = '0';    // put one back
        for (nsig = 0; isdigit(ch); ch = rdbuf()<I>-</I>&gt;sbumpc(), seen = 1)
            if (nsig &lt; MAX_EXP_DIG)
                *p++ = ch, ++nsig;
        }
    if (ch != EOF)
        rdbuf()<I>-</I>&gt;sputbackc(ch);
    if (!seen)
        p = ac;
    *p = '\0';
    return (pten);
    }
// End of File
</pre>
</BODY>
</HTML>
