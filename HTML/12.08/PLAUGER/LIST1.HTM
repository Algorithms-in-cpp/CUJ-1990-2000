<HTML><HEAD>
<TITLE>August 1994/Standard C/C++/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1 <I>The header</I> &lt;istream&gt;</A></h4>
<pre>// istream standard header
#ifndef _ISTREAM_
#define _ISTREAM_
#include &lt;streambuf&gt;
        // class istream
class istream : virtual public ios {
public:
    istream(streambuf *_S)
        : _Chcount(0), ios(_S) {}
    istream(_Uninitialized)
        : ios(_Noinit) {}
    virtual ~istream();
    _Bool ipfx(int = 0);
    void isfx()
        {}
    istream&amp; operator&gt;&gt;(istream&amp; (*_F)(istream&amp;))
        {return ((*_F)(*this)); }
    istream&amp; operator&gt;&gt;(ios&amp; (*_F)(ios&amp;))
        {(*_F)(*(ios *)this); return (*this); }
    istream&amp; operator&gt;&gt;(char *);
    istream&amp; operator&gt;&gt;(unsigned char *_S)
        {return (*this &gt;&gt; (char *)_S); }
    istream&amp; operator&gt;&gt;(char&amp;);
    istream&amp; operator&gt;&gt; (unsigned char&amp; _C)
        {return (*this &gt;&gt; *(char *)&amp;_C); }
    istream&amp; operator&gt;&gt;(short&amp;);
    istream&amp; operator&gt;&gt;(unsigned short&amp;);
    istream&amp; operator&gt;&gt;(int&amp;);
    istream&amp; operator&gt;&gt;(unsigned int&amp;);
    istream&amp; operator&gt;&gt;(long&amp;);
    istream&amp; operator&gt;&gt;(unsigned long&amp;);
    istream&amp; operator&gt;&gt;(float&amp;);
    istream&amp; operator&gt;&gt;(double&amp;);
    istream&amp; operator&gt;&gt;(long double&amp;);
    istream&amp; operator&gt;&gt;(void *&amp;);
    istream&amp; operator&gt;&gt;(streambuf&amp;);
    int get();
    istream&amp; get(char *, int, char = '\n');
    istream&amp; get(unsigned char *_S, int _N, char _D = '\n')
        {return(get((char *)_S, _N, _D)); }
    istream&amp; get(char&amp;);
    istream&amp; get(unsigned char&amp; _C)
        {return (get((char&amp;)_C)); }
    istream&amp; get(streambuf&amp;, char = '\n');
    istream&amp; getline(char *, int, char = '\n');
    istream&amp; getline(unsigned char *_S, int _N, char _D = '\n')
        {return(getline((char *)_S, _N, _D)); }
    istream&amp; ignore(int = 1, int = EOF);
    istream&amp; read(char *, int);
    istream&amp; read(unsigned char *_S, int _N)
        {return(read((char *)_S, _N)); }
    int peek();
    istream&amp; putback(char);
    istream&amp; unget();
    int gcount() const
        {return (_Chcount); }
    int sync();
#if _SIGNED_CHAR_IS_DISTINCT
    istream&amp; operator&gt;&gt;(signed char *_S)
        {return (*this &gt;&gt; (char *)_S); }
    istream&amp; operator&gt;&gt;(signed char&amp; _C)
        {return (*this &gt;&gt; *(char *)&amp;_C); }
    istream&amp; get(signed char *_S, int _N, char _D = '\n')
        {return (get((char *)_S, _N, _D)); }
    istream&amp; get(signed char&amp; _C)
        {return (get((char&amp;)_C); }
    istream&amp; getline(signed char *_S, int _N, char _D = '\n')
        {return (getline((char *)_S, _N, _D)); }
    istream&amp; read(signed char *_S, int _N)
        {return (read((char *)_S, _N)); }
#endif /* _SIGNED_CHAR_IS_DISTINCT */
protected:
    int_Getffld(char [_MAX_EXP_DIG+_MAX_SIG_DIG+16]);
    int_Getifld(char [_MAX_INT_DIG]);
private:
    int _Chcount;
    };
        // manipulators
istream&amp; ws(istream&amp;);
#endif
// End of File
</pre>
</BODY>
</HTML>
