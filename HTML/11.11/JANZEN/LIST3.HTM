<HTML><HEAD>
<TITLE>November 1993/C++ Classes for Fuzzy Logic/Listing 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 3 <I>Definition of fuzzy associative memory</I></A></h4>
<pre>#include &lt;iostream.h&gt;
#include &lt;math.h&gt;
#include &lt;stdlib.h&gt;

class fam_2
{
    private:
        int set_qty,
            set_len;
        fzy_set **fam_data;
    public:
        fam_2(const int, const int);
        inline ~fam_2(void);
        fam_2(const fam_2&amp;);   // copy constructor
        fam_2&amp; operator=(const fam_2&amp;);  // assignment
        fzy_set&amp; operator[](const int);
        fzy_set&amp; operator[](const int) const;
        friend ostream&amp; operator&lt;&lt;(ostream&amp; os,
                                   fam_2&amp; z);
        friend fzy_set operator*(const fzy_set &amp;,
                                 const fam_2 &amp;);
};

fam_2::fam_2(const int setqty = 1,
              const int setlen = 1)
{
    if ((setqty &lt; 1) || (setlen &lt; 1))
    {
       cout &lt;&lt; "fam dimensions less than 1: "
            &lt;&lt; setqty &lt;&lt; ' '
            &lt;&lt; setlen &lt;&lt; '\n';
    }
    else
    {
        set_qty = setqty;
        set_len = setlen;
        fam_data = new class fzy_set*[set_qty];
        // check for failure of new
        for (int i = 0; i &lt; set_qty; i++)
        {
            fam_data[i] = new fzy_set(set_len);
        }
    }
    return;
}

inline fam_2::~fam_2(void)
{
    for (int i = 0; i &lt; set_qty; i++)
    {
        delete fam_data[i];
    }
    delete[] fam_data;
    return;
}

fam_2::fam_2(const fam_2&amp; fam_in)
{

    set_qty = fam_in.set_qty;
    set_len = fam_in.set_len;
    fam_data = new class fzy_set *[fam_in.set_qty];

    for (int i = 0; i &lt; set_qty; i++)
    {
        fam_data[i] = new fzy_set(set_len);
                    *(fam_data[i]) = fam_in[i];
    }
}

fam_2&amp; fam_2::operator=(const fam_2&amp; r_value)
{
    auto int i;

    if (this ! = &amp;r_value)
    {
        for (i = 0; i &lt; set_qty; i++)
        {
            delete fam_data[i];
        }
        delete[] fam_data;
        fam_data
        = new class fzy_set *[r_value.set_qty];
        for (i = 0; i &lt; set_qty; i++)
        {
            fam_data[i] = new fzy_set(r_value.set_len);
            *fam_data[i] = r_value[i];
        }
    }
    return *this;
}

fzy_set&amp; fam_2:: operator[](const int len)
{

    return ((len &gt;= 0) &amp;&amp; (len &lt;= set_qty)) ?
           **(fam_data + len) : **(fam_data);
}

fzy_set&amp; fam_2::operator[](const int len) const
{
    return ((len &gt;= 0) &amp;&amp; (len &lt;= set_qty)) ?
           **(fam_data + len) : **(fam_data);
}

ostream&amp; operator&lt;&lt;(ostream&amp; os, fam_2&amp; z)
{
    os&lt;&lt;"(";
    fzy_set **f = z.fam_data;
    int i = z.set_qty - 1;
    for (int i = 0; i &lt; l; i++)
    {
        os &lt;&lt; *f[i];
    }
    return os &lt;&lt; *f[i] &lt;&lt; ")\n";
}

fzy_set operator*(const fzy_set &amp;fuzzy_set,
                  const fam_2 &amp;fam)
{
    auto int set_ctr,
             fuzz_ctr;
    auto fzy_set tmp_set(fam.set_len),
                 new_set (fam._set_qty);

    if (fuzzy_set.dimension == fam.set_len)
    {
        for (set_ctr = 0; set_ctr &lt; fam.set_qty;
             set_ctr++)
        {
            for (fuzz_ctr = 0; fuzz_ctr &lt; fam.set_len;
                 fuzz_ctr++)
            {
                tmp_set [fuzz_ctr]
                    = fuzzy_set[fuzz_ctr]
                    &amp; fam[set_ctr] [fuzz_ctr];
            }
            new_set[set_ctr] = fzy_set_max(tmp_set);
        }
    }
    return new_set;
}

// End of File
</pre>
</BODY>
</HTML>
