<HTML><HEAD>
<TITLE>November 1993/C++ Classes for Fuzzy Logic/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1 <I>Definition of class</I> fuzzy</A></h4>
<pre>#include &lt;iostream.h&gt;
#include &lt;math.h&gt;
#include &lt;stdlib.h&gt;

class fuzzy
{
    private:
        double truth;
    public:
        inline fuzzy(const double);
        void get(double *);
        double get(void) const;
        fuzzy operator!(void) const;
        fuzzy very(void) const;
        fuzzy somewhat(void) const;
        inline fuzzy&amp; operator|=(fuzzy&amp;);
        inline fuzzy&amp; operator&amp;=(fuzzy&amp;);
        fuzzy&amp; operator=(const fuzzy&amp;);
        fuzzy&amp; operator=(const double);
        friend fuzzy operator|(const fuzzy&amp;,
                              const fuzzy&amp;);
        friend fuzzy operator&amp;(const fuzzy&amp;,
                              const fuzzy&amp;);
        friend fuzzy fuzzy_implies(const fuzzy&amp;,
                                   const fuzzy&amp;);
        friend fuzzy fuzzy_iff(const fuzzy&amp;,
                              const fuzzy&amp;);
        friend inline int operator&lt;(const fuzzy&amp;,
                                    const fuzzy&amp;);
        friend inline int operator&lt;=(const fuzzy&amp;,
                                    const fuzzy&amp;);
        friend inline int operator==(const fuzzy&amp;,
                                    const fuzzy&amp;);
        friend inline int operator&gt;=(const fuzzy&amp;,
                                    const fuzzy&amp;);
        friend inline int operator&gt;(const fuzzy&amp;,
                                    const fuzzy&amp;);
        friend inline int operator!=(const fuzzy&amp;,
                                    const fuzzy&amp;);
        friend ostream&amp; operator&lt;&lt;(ostream&amp; s,
                                   const fuzzy&amp; z);
};

inline fuzzy::fuzzy(const double temp_truth = 0.0)
{
    truth = ((temp_truth &gt;= 0.0)
          &amp;&amp; (temp_truth &lt;= 1.0)) ?
              temp_truth : 0.0;
    return;
}

void fuzzy::get(double *get_truth)
{
    *get_truth = truth;
    return;
}

double fuzzy::get(void) const
{
    return truth;
}

fuzzy fuzzy::operator!(void) const
{
    return (1.0 - truth);
}

fuzzy fuzzy::very(void) const
{
    return (truth * truth);
}

fuzzy fuzzy::somewhat(void) const
{
    return sqrt (truth);
}

inline fuzzy&amp; fuzzy::operator|=(fuzzy&amp; value)
{
    return (*this = *this | value);
}

inline fuzzy&amp; fuzzy::operator&amp;=(fuzzy&amp; value)
{
    return (*this = *this &amp; value);
}

fuzzy&amp; fuzzy::operator=(const fuzzy&amp; fuzzy_in)
{
    truth = fuzzy_in.truth;
    return *this;
}

fuzzy&amp; fuzzy::operator=(const double dbl_in)
{
    truth = ((dbl_in &gt;= 0.0) &amp;&amp; (dbl_in &lt;= 1.0)) ?
              dbl_in : 0.0;
    return *this;
}

fuzzy operator|(const fuzzy&amp; value_a, const fuzzy&amp; value_b)
{
    return (value_a.truth &gt; value_b.truth) ?
            value_a : value_b;
}

fuzzy operator&amp;(const fuzzy &amp;value_a,
                const fuzzy &amp;value_b)
{
    return (value_a &lt; value_b) ? value_a : value_b;
}

fuzzy fuzzy_implies(const fuzzy&amp; value_a,
                    const fuzzy&amp; value_b)
{
    auto double temp_value;

    temp_value = 1.0 - value_a.truth + value_b.truth;
    return ((temp_value &lt; 1.0) ? temp_value : 1.0);
}

fuzzy fuzzy_iff(const fuzzy&amp; value_a,
                const fuzzy&amp; value_b)
{
    return 1.0 - fabs(value_a.truth - value_b.truth);
}

inline int operator&lt;(const fuzzy&amp; value_a,
                     const fuzzy&amp; value_b)
{
    return (value_a.truth &lt; value_b.truth);
}

inline int operator&lt;=(const fuzzy&amp; value_a,
                      const fuzzy&amp; value_b)
{
    return (value_a.truth &lt;= value_b.truth);
}

inline int operator==(const fuzzy&amp; value_a,
                      const fuzzy&amp; value_b)
{
    return (value_a.truth == value_b.truth);
}

inline int operator&gt;=(const fuzzy&amp; value_a,
                      const fuzzy&amp; value_b)
{
    return (value_a.truth &gt;= value_b.truth);
}

inline int operator&gt;(const fuzzy&amp; value_a,
                     const fuzzy&amp; value_b)
{
    return (value_a.truth &gt; value_b.truth);
}

inline int operator!=(const fuzzy&amp; value_a,
                      const fuzzy&amp; value_b)
{
    return (value_a.truth != value_b.truth);
}

ostream&amp; operator&lt;&lt;(ostream&amp; s, const fuzzy&amp; z)
{
    return s &lt;&lt; z.truth;
}

istream&amp; operator&gt;&gt;(istream&amp; s, fuzzy&amp; fur)
{
    auto double lint = 0.0;

    s &gt;&gt; lint;
    fur = lint;

    return s;
}

// End of File
</pre>
</BODY>
</HTML>
