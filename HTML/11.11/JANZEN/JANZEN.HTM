

<HTML>
<HEAD>

<TITLE>November 1993/C++ Classes for Fuzzy Logic</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocnov.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">C++ Classes for Fuzzy Logic<A name="0316_010D"><A name="0316_010D"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0316_0000"><A name="0316_0000">Thomas E. Janzen</font></h3><hr><blockquote><P>
<P><i><A name="0316_0000"><A name="0316_0000">Thomas E. Janzen has written about the use of computers in music, multimedia performance, and measurement. He has written software to test electronic hardware for engineering and manufacturing. He is currently seeking new opportunities from Hudson, Massachusetts, and can be contacted at (508)562-1295 or tej@world. std.com.</i></P><P>
Everything in life is not black and white, except perhaps that a software engineer with a future keeps abreast of new technology. Sometimes a half-truth is all you have. Your data is noisy, or easily misinterpreted; conditions are ambiguous; the system to be emulated is too complex to model. In these kinds of situations, fuzzy systems can be very useful. Fuzzy systems can make decisions with poor and missing data, and control a system for which there is no model.<P>
Fuzzy systems are frequently developed by hardware engineers in C, but C++ may be more appropriate. Fuzzy values, like complex numbers, have their own operations and representation. Fuzzy sets and matrices are naturals for representation as container classes. With operator overloading, developers can express fuzzy operations as simple arithmetic and logic, simplifying their coding task. From a more philosopical perspective, fuzzy systems resemble object-oriented systems in the sense that they can operate without a model. In OO systems, abstraction presents a top-level repertoire of behavior without burdening the client with implementation details. In a similar fashion, the internal behavior of systems that are controlled with fuzzy logic can be hidden. In this article, I provide examples of fuzzy logic using classes in C++. I provide basic operations for ordinary truth values, classes for fuzzy sets, and classes for Fuzzy Associative Memories, as well as membership functions for all classes.<P>
<h4><FONT COLOR="#000080"><A name="0316_010E">Implementing Fuzzy Values<A name="0316_010E"></FONT></h4></P>
A fuzzy truth value can be anything from 0.0 to + 1.0, inclusive:<P>
<pre>0.0 &lt;= x &lt;= 1.0</pre>
In <A href="list1.htm">Listing 1</a>,
 I use the built-in <I>double</I> type for truth values in the fuzzy class. A value of 0.0 represents falsehood or absence of a condition, with no ambiguity. 1.0 represents truth or presence of a condition. If I am half in a room, then the statement "I am in the room" is true to 0.5. My member and friend functions include the following: a constructor and destructor; a <I>get</I> function for retrieving the <I>double</I> value for truth, ! (a unary complement); functions <I>very</I><I>, </I><I>somewhat</I><I>,</I> and associated logic (|, &amp;, implies, iff); assignment; comparisons (&lt;, &gt;, &lt;=, &gt;=, ==, !=) and combination operators (|=, &amp;=); output (&lt;&lt;); and input (&gt;&gt;). These functions have a variety of definitions in the literature (see Klir). I have implemented what seem to be the most popular versions here. For example:<P>
<pre>x|y is x OR y, the maximum of 2 values.

x&amp;y is x AND y the minimum of 2 values

!x is NOT(x) == 1.0 - x</pre>
The following partial truth tables result from the preceding relationships: <P>
<pre>x  y  x | y
-----------------
0.0   0.0    0.0
1.0   0.0    1.0
0.0   1.0    1.0
1.0   1.0    1.0
0.5   0.4    0.5
0.6   0.0    0.6

x  y  x &amp; y
------------------
0.0   0.0    0.0
0.0   1.0    0.0
1.0   0.0    0.0
1.0   1.0    1.0
1.0   0.5    0.5
0.5   0.0    0.0

x  !x
--------------
0.0    1.0
0.0    1.0
0.5    0.5
0.4    0.6</pre>
Fuzzy logic also offers "very" and "somewhat" operations. Suppose that I'm half in the kitchen. It may be true to 0.5 that I'm in the kitchen, but it's less true that I'm "very" in the kitchen. The <I>very</I> operation is the square of the truth value. Since fuzzy truth is always between 0.0 and 1.0, when <I>very</I> operates on a truth value, it always produces a smaller value, corresponding to a less true condition. It is 0.25 (one quarter) true that I am "very" in the kitchen. The <I>somewhat</I> operation is the opposite. If it's haft true that I'm in the kitchen, it is more true to say that I'm somewhat in the kitchen. The <I>somewhat</I> operation is a square root; after being processed by <I>somewhat,</I> a truth value always gets bigger, or <I>more</I> true. So, it is 0.707... true that I am "somewhat" in the kitchen.<P>
There is also an "implies" relationship, that is: x implies y. This relationship is calculated as follows: <P>
<IMG SRC="figa.gif"><P>
This notation is shorthand for a conditional expression; in English it would state "If (1.0 - x + y) is less than 1.0, return fuzzy value (1.0 - x + y). If (1.0 - x + y) is greater than or equal to 1.0, return fuzzy value 1.0." Another operation of interest is the <I>IFF</I> (if and only if) function. In fuzzy logic, this is calculated as: <P>
<pre>1 - |x - y| = !|x - y|</pre>
that is, the complement of the absolute value of the difference of x and y. A sample truth table follows:<P>
<pre>x  y  IFF  x, y
0.0   0.0    1.0
0.0   1.0    0.0
1.0   0.0    0.0
1.0   1.0.   1.0
0.6   0.4    0.8</pre>
For discrete values, this function is identical to an Exclusive NOR<P>
<h4><FONT COLOR="#000080"><A name="0316_010F">Fuzzy Sets<A name="0316_010F"></FONT></h4></P>
A fuzzy set is a collection of fuzzy truth values. It is implemented in <A href="list2.htm">Listing 2</a>
as an array of fuzzy values (I am imitating a vector example provided by Hansen in <I>The</I> <I>C</I>++ <I>Answer Book</I> &#151; see Bibliography). Typically, the array corresponds to an array of membership functions for the spectrum or range involved. The private data areas of <I>fzy_set</I> are <I>dimension</I> and <I>*fzy_data</I>. The public functions include the following: contructors (one that accepts an array length and a copy  contractor); a destructor, assignment; binary comparison operators (&lt;, &lt;=, ==, &gt;=, &gt;, !=); subscripting ([]); output &lt;&lt;; <I>max</I> (find the maximum value in the set); and a multiplier for fuzzy sets and fuzzy associative memories (described later in the article). Some of the binary comparisons can be interpreted as set membership, as in the following examples:<P>
<pre>==   the two sets are improper subsets of one another;
&lt;    the first set is a proper subset of the second;
&gt;  the second set is a proper subset of the first;
&lt;=   the first set is a subset of the second;
&gt;=   the second set is a subset of the first.</pre>
The subscript operator ([]) returns a fuzz value object.<P>
<h4><FONT COLOR="#000080"><A name="0316_0110">Fuzzy Associative Memories<A name="0316_0110"></FONT></h4></P>
Kosko calls a matrix of fuzzy values a "fuzzy associate memory" (FAM). In an operation that is similar to transforming a vector with a matrix, a FAM operates on a fuzzy set to produce a new fuzzy set from which some answer is extracted. That is, "multiplication" of a fuzzy set by a FAM produces a decision dictating the next action for the fuzzy system to take. This operation transforms the fuzzy set input into a fuzzy set output. FAMs, like matrices from linear algebra, may be of any dimension. In <A href="list3.htm">Listing 3</a>,
 I have implemented only a two-dimensional FAM. Called <I>fam_2</I>, it is a container class that holds a one-dimensional array of fuzzy sets, all of the same length. (Because the sets must all have the same length for the * operator, it might have been better to create a two-dimensional array of fuzzy objects.) I throw no exceptions for mismatched lengths of the contained fuzzy sets, since my compiler lacks exception handling. The private data area includes the two dimensions (<I>set_qty</I> and <I>set_len</I>) and an array of pointers to <I>fzy_set</I> objects (<I>**fam_data</I>). The fam-2 public functions include constructors and a destructor, an assignment operator, a subscripting operator ([], returning a <I>fzy_set</I>), output (&lt; &lt;, borrowing from Hansen's matrix example), and the * operator, which is a <I>friend</I> of both <I>fam_2</I> and <I>fzy_set</I>.<P>
I declare the * operator to work this way: <P>
<pre>fzy_set seta(3), setb(3);
fam_2   fam(3,3);
...//fill in the data in the sets and fam

setb = seta * fam;</pre>
This operation compares each corresponding member of <I>seta</I> and <I>fzy_set</I> in <I>fam</I>; it saves the minimum value of either set in each position in a temporary <I>fzy_set</I>. After the comparison of each whole <I>fzy_set</I>, the operator saves the maximum in the temporary <I>fzy_set</I> in <I>setb</I>. This operation is called a "max-min" and is a common decision-making operation in fuzzy systems.<P>
<h4><FONT COLOR="#000080"><A name="0316_0111">Fuzzy Membership Functions<A name="0316_0111"></FONT></h4></P>
Fuzzy membership functions, implemented in <A href="list4.htm">Listing 4</a>,
 input any value and return the truth value of a statement asserting that the input value belongs to a particular condition. (Finding the membership value for a condition is also called fuzzyfying or fuzzification.)<P>
I have assumed that the input value is a <I>double</I>, as it typically is; but you could create functions that operate over a complex plane, or in multiple real dimensions. A more abstract class would be altogether empty, which is certainly acceptable in a thoroughly-designed inheritance tree.<P>
I provide an abstract class called <I>membership_function</I>, with two public virtual functions (<I>membership</I> and <I>weight</I>) and no private data area. The <I>membership</I> function accepts a <I>double</I> and returns a fuzzy value representing the membership of the <I>double</I> value in the membership function of the object. The <I>weight</I> function finds the area of the trapezoid under a horizontal line that intersects the trapezoid at the same place as a particular vertical line. This vertical line intersects the trapezoid at a location determined by the input value (see <A href="fig1.htm">Figure 1</a>)
. You can inherit from this class while creating almost any membership function accepting a type <I>double</I> input. The <I>trapezoidal-membership</I> class inherits from the abstract class.<P>
A situation modeled by trapezoidal membership function is a train in a tunnel, when the tunnel is longer than the train. Before the train enters the tunnel, it is false to say that its position is in the membership function. As the engine enters the tunnel, part of the train is in the tunnel and part is still out, so the membership function is between zero and one, and increases as the train continues. When the whole train is in the tunnel, its position is fully a member of the function, i.e., to 1.0.<P>
Sometimes a membership function needs to be open on one side so that all values to one side are in the function. The class I provided does not really permit this, but certainly the values for one side or the other could be set well outside expected input values, for example, using <I>HUGE_VAL </I>or<I> -HUGE_VAL</I>, a macro from the C header <I>math.h</I>. Alternatively, you could implement a special class for such a function by inheriting from the <I>membership_function</I> class just as class <I>trapezoid_membership</I> does.<P>
If the values for the corners of the membership functions are out of order or incorrect, I force them to valid values. An alternative to this would have been sorting the values. Also, If my compiler had supported exceptions, I could have thrown an exception for invalid values.<P>
<h4><FONT COLOR="#000080"><A name="0316_0112">Relating Classes and Operations<A name="0316_0112"></FONT></h4></P>
I now give an example to illustrate the relationships between the classes and operations. Suppose I decide how much to open a window in the bedroom depending on the temperature outside. I will create four trapezoidal membership functions for outside temperature. These functions are defined in the fuzzy sets <I>cold, cool, warm</I> and <I>hot</I> in <A href="list5.htm">Listing 5</a>.
 These sets are designed to overlap at a value of <I>0.5</I>. There are also three fuzzy sets for the output, the window opening in inches. The output sets are called <I>closed, part_open</I>, and <I>open</I>. Between the input sets and the output sets is a FAM called <I>memory</I>.<P>
First, I ask for an outside temperature and use it to find the fuzzy set <I>temperature_set</I>. Then I "multiply" <I>temperature_set</I> by the FAM <I>memory</I> to return the output fuzzy set, <I>set_result</I>. I find and store weights for the fuzzy values from <I>set_result</I> in <I>weights</I>, an array of <I>double</I>. I then calculate a centroid for these weights (per Kosko), and print the resulting opening in the window.<P>
Some results from the program are:<P>
<pre><I>Temperature Opening</I>

0 degrees: 5.67 inches
20 degrees: 9 inches
40 degrees: 9 inches
60 degrees: 10.37
80 degrees: 9 inches</pre>
<I>set_result</I> is found from:<P>
<pre>set_result = temperature_set * memory</pre>
<h4><FONT COLOR="#000080"><A name="0316_0113">Conclusion<A name="0316_0113"></FONT></h4></P>
Fuzzy logic is being applied widely today, both as a standalone solution to difficult real-world problems and as a component of hybrid systems. It is typically combined with such tools as neural-networks, symbolic AI, and databases. At the least, fuzzy logic is being applied to medical diagnosis, tracking and system control, information filtering, and decision support. As fuzzy systems grow in complexity, they may need to draw upon the values and methodologies developed in software engineering. C++ and object-oriented methodology will help bring solid discipline to a fuzzy domain.<P>
<h4><FONT COLOR="#000080"><A name="0316_0114">Bibliography<A name="0316_0114"></FONT></h4></P>
Ellis, Margaret A., and Bjarne Stroustrup. <I>The Annotated C</I>++ <I>Reference Manual</I>. Reading, MA: Addison-Wesley, 1990.<P>
Hansen, Tony L. <I>The C</I>++ <I>Answer Book</I>. Reading, MA: Addison-Wesley, 1990.<P>
Klir, George J., and Tina A. Folger. <I>Fuzzy Sets, Uncertainty, and Information</I>. Englewood Cliffs, NJ: Prentice Hall, 1988.<P>
Kosko, Bart. <I>Neural Networks and Fuzzy Systems: A Dynamical Systems Approach to Machine Intelligence</I>. Englewood Cliffs, NJ: Prentice Hall, 1992.<P>
Stewart, Ian. "A Partly True Story." <I>Scientific American</I>, February 1993, Volume 268 Number 2, p110-ff.<P>
Stroustrup, Bjarne. <I>The C</I>++ <I>Programming Language. 2 ed. Reading, MA: Addison-Wesley</I>, 1991, 1992.<P>
<h4>Sidebar: <a href="sidebar1.htm">"What is Fuzzy Logic?"</a></h4>

<h4><a href="../../../source/1993/nov93/janzen.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
