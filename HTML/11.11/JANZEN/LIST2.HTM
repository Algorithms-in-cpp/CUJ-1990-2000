<HTML><HEAD>
<TITLE>November 1993/C++ Classes for Fuzzy Logic/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2 <I>Definition of class</I> fzy_set</A></h4>
<pre>#include &lt;iostream.h&gt;
#include &lt;math.h&gt;
#include &lt;stdlib.h&gt;

class fzy_set
{
    private:
        int dimension;
        fuzzy *fzy_data;
    public:
        fzy_set(const int);
        fzy_set(const fzy_set&amp;);
        ~fzy_set(void);
        fzy_set&amp; operator=(const fzy_set&amp;);
        fuzzy&amp; operator[](const int len);
        fuzzy&amp; operator[](const int len) const;
        friend int operator&lt;(const fzy_set&amp;,
                             const fzy_set&amp;);
        friend int operator&lt;=(const fzy_set&amp;,
                              const fzy_set&amp;);
        friend int operator==(const fzy_set&amp;,
                              const fzy_set&amp;);
        friend int operator&gt;=(const fzy_set&amp;,
                              const fzy_set&amp;);
        friend int operator&gt;(const fzy_set&amp;,
                             const fzy_set&amp;);
        friend int operator!=(const fzy_set&amp;,
                              const fzy_set&amp;);
        friend ostream&amp; operator&lt;&lt;(ostream&amp; s,
                                   fzy_set&amp; z);
        friend fuzzy fzy_set max(const fzy_set&amp;);
        friend fzy_set operator*(const fzy_set&amp;,
                                 const class fam_2&amp;);
};

fzy_set::fzy_set(const int size = 1) // constructor
{
    dimension = ((size &gt;= 0) ? size : 1);
    fzy_data = new fuzzy[dimension];
    return;
}

fzy_set::fzy_set(const fzy_set&amp; fzy_set_in)
{
    fzy_data = new fuzzy[dimension
            = fzy_set_in.dimension];
    memcpy(fzy_data, fzy_set_in. fzy_data,
            dimension * sizeof (fuzzy));
    return;
}

fzy_ set::~fzy_set(void)
{
    delete[] fzy_data;
    return;
}

fzy_set&amp; fzy_set::operator=(const fzy_set&amp; r_value)
{
    if (this != &amp;r_value)
    {
        delete[] fzy_data;
        fzy_data = new fuzzy(r_value.dimension);
        memcpy(fzy_data, r_value.fzy_data, r_value.dimension
                * sizeof(fuzzy));
    }
    return *this;
}

fuzzy&amp; fzy_set::operator[](const int len)
{
    return ((len &gt;= 0) &amp;&amp; (len &lt;= dimension)) ?
           fzy_ data[len] : fzy_data[0];
}

fuzzy&amp; fzy_set::operator[](const int len) const
{
    return ((len &gt;= 0) &amp;&amp; (len &lt;= dimension)) ?
           fzy_data[len] : fzy_data[0];
}

int operator&lt;(const fzy_set&amp; value_a,
              const fzy_set&amp; value_b)
{
    auto int     result  = 0,
                 ctr      = 0;

    if (value_a.dimension == value_b.dimension)
    {
       while ((result = (value_a[ctr] &lt; value_b[ctr]))
              &amp;&amp; (ctr &lt; value_a.dimension))
       {
           ctr++;
       }
    }
    return result;
}

int operator&lt;=(const fzy_set&amp; value_a,
const fzy_set&amp; value_b)
{
    auto int     result = 0,
                ctr = 0;

    if (value_a.dimension == value_b.dimension)
    {
        while ((result = (value_a[ctr] &lt;= value_b[ctr]))
               &amp;&amp;(ctr &lt; value_a.dimension))
        {
            ctr++;
        }
    }
    return result;
}

int operator==(const fzy_set&amp; value_a,
const fzy_set&amp; value_b)
{
    auto int     result = 0,
                ctr = 0;

    if (value_a.dimension == value_b.dimension)
    {
        while ((result == (value_a[ctr] == value_b[ctr]))
               &amp;&amp;(ctr &lt; value_a.dimension))
        {
            ctr++;
        }
    }
    return result;
}

int operator&gt;=(const fzy_set&amp; value a, const fzy_set&amp; value_b)
{
    auto int     result = 0,
                 ctr = 0;

    if (value_a.dimension == value_b.dimension)
    {
        while ((result = (value_a[ctr] &gt;= value_b[ctr]))
               &amp;&amp; (ctr &lt; value_a.dimension))
        {
            ctr++;
        }
    }
    return result;
}

int operator&gt;(const fzy_set&amp; value_a,
              const fzy_set&amp; value_b)
{
    auto int     result = 0,
                ctr = 0;

    if (value_a.dimension == value_b.dimension)
    {
        while ((result = (value_a[ctr] &gt; value_b[ctr]))
               &amp;&amp; (ctr &lt; value_a.dimension))
        {
            ctr++;
        }
    }
    return result;
}

int operator!=(const fzy_set&amp; value_a, const fzy_set&amp; value_b)
{
    auto int     result = 0,
                ctr = 0;

    if (value_a.dimension == value_b.dimension)
    {
        while ((result = (value_a[ctr] == value_b[ctr]))
               &amp;&amp; (ctr &lt; value_a.dimension))
        {
            ctr++;
        }
    }
    return !result;
}

ostream&amp; operator&lt;&lt;(ostream&amp; s, fzy_set&amp; z)
{
    static int ctr;
    s &lt;&lt; "(";
    fuzzy *set = z.fzy_data;
    int ind = z.dimension - 1;
    for (ctr = 0; ctr &lt; ind; ctr++)
    {
        s &lt;&lt; *set++ &lt;&lt; " ";
    }
    return s &lt;&lt; *set &lt;&lt; ")\n";
}

fuzzy fzy_set_max(const fzy_set&amp; set)
{
    auto fuzzy tmp_fuzzy(0.0);

    for (int i = 0; i &lt; set.dimension; i++)
    {
        tmp_fuzzy |= set[i];
    }
    return tmp_fuzzy;
}

// End of File
</pre>
</BODY>
</HTML>
