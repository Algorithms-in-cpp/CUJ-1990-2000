

<HTML>
<HEAD>

<TITLE>November 1993/Code Capsules</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocnov.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Code Capsules<A name="0321_0113"><A name="0321_0113"></font></h2><P>
<h3 align="center"><A name="0321_0000"><A name="0321_0000">Bit Handling in C</h3><P>
<h3 align="center"><font color="#800000">Chuck Allison</font></h3><hr><blockquote><P>
<P><i><A name="0321_0000"><A name="0321_0000">Chuck Allison is a regular columnist with CUJ and a software architect for the Family History Department of the Church of Jesus Christ of Latter Day Saints Church Headquarters in Salt Lake City. He has a B.S. and M.S. in mathematics, has been programming since 1975, and has been teaching and developing in C since 1984. His current interest is object-oriented technology and education. He is a member of X3J16, the ANSI C++ Standards Committee. Chuck can be reached on the Internet at allison@decus.org, or at (801)240-4510.</i></P><P>
The ability to manipulate the individual bits of an integer is essential in systems programming. In the MS-DOS file system, for example, each disk file has an associated attribute byte. You can delete-protect a file or even omit it from directory listings, depending on which attribute bits you set. Before the days of C, most programmers had to resort to assembly language to manipulate bits. Nowadays, with bitwise operators and the host system interface that most compilers provide, there is almost nothing that you cannot do with your operating system from within a C program. In this article I'll review common bit-twiddling techniques and extend them with a couple of useful abstract data types.<P>
<h4><FONT COLOR="#000080"><A name="0321_0114">Bitwise Operators<A name="0321_0114"></FONT></h4></P>
There are six bitwise operators in C (see <A href="tab1.htm">Table 1</a>)
. As the program in <A href="list1.htm">Listing 1</a>
illustrates, the bitwise-OR operator sets a bit in the result if either one of the corresponding operand bits is "set" (has a value of 1). For example:<P>
<pre>     01010101  (== 0x55)
  |  11110000  (== 0xf0)
-------------
  =  11110101  (== 0xf5)</pre>
The bitwise-AND operator sets only those bits whose corresponding operand bits are both set:<P>
<pre>     01010101
  &amp;  11110000
-------------
  =  01010000  (== 0x50)</pre>
The bitwise-EXCLUSIVE-OR operator sets those bits when one or the other (but not both) of the original operand bits is set:<P>
<pre>     01010101
  ^  11110000
-------------
  =  10100000  (== 0xa0)</pre>
The bitwise-NOT operator "flips" each bit by making each 1 a 0, and vice-versa. The cast to <I>unsigned char</I> in <A href="list1.htm">Listing 1</a>
is necessary because Standard-conforming compilers always promote <I>chars</I> to <I>ints</I> before applying bitwise operations. Without the cast the output would be:<P>
<pre>   ~a == FFAA</pre>
since <I>printf</I> never truncates significant values in numbers, and <I>ints </I>on my machine are two bytes wide.<P>
The shift operators shift all bits left or right by the number of positions specified in the right operand. Bits that "fall off the end" are lost. The left-shift operator sets vacated bits to zero. When shifting signed integers to the right, some machines zero-fill while others replicate the sign bit. It is common practice, therefore, to declare integers unsigned, which will always be zero-filled when you shift them to the right.<P>
<h4><FONT COLOR="#000080"><A name="0321_0115">Accessing Individual Bits<A name="0321_0115"></FONT></h4></P>
Quite often you need to set, reset, or test individual bits. If not too many bits are involved, you might consider using bitfield structures. For example, suppose you are only interested in bits 4 and 5 of an integer. Logically, bits are numbered right-to-left, starting from 0. Each bit number represents a power of 2, signifying the weight of each digit in a number's binary representation. For example, bit 0 represents 20, bit 1 represents 21, bit 2 represents 22, and so on. On a little-endian machine, the following structure would typically be suitable:<P>
<pre>    struct bits4_5
    {
       unsigned : 4;   /* Skip bits 0-&gt; 3 */
       unsigned bit4 : 1;
       unsigned bit5 : 1;
    };</pre>
A big-endian architecture typically calls for<P>
<pre>    struct bits4_5
    {
       unsigned : 10;  /* Skip bits 15 -&gt; 6 */
       unsigned bit5 : 1;
       unsigned bit4 : 1;
    };</pre>
You can then process the bits via the named variables:<P>
<pre>    unsigned x;
    struct bits4_5 *xp = (struct bits4_5 *) &amp;x;
    xp-&gt;bit4 = 0;
    xp-&gt;bit5 = 1;
    f(xp);     /* May modify the bits */
    if (xp-&gt;bi t4)
       . . .</pre>
This technique is somewhat unattractive not only because it isn't very portable, but also because it is cumbersome with a large number of bits. The preferred method to manipulate arbitrary, individual bits is via the bitwise operators. For example, to set the <I>i</I>th bit of an integer, form a mask with a 1 in the <I>i</I>th bit position and zeroes elsewhere (I'll call it the "1-mask"), then bitwise-OR it into the number:<P>
<pre>    x | = (1u &lt;&lt; i)</pre>
To turn a bit off, form the complement of the above mask (the "0-mask") and bitwise-AND it in:<P>
<pre>    x &amp;= ~(1u &lt;&lt; i)</pre>
The program in <A href="list2.htm">Listing 2</a>
sets all the bits of an integer in turn, right-to-left (logically), and resets them in the same order. The quantity <I>CHAR_BIT,</I> from <I>limits.h,</I> is the number of bits in a byte.<P>
To toggle a bit, exclusive-OR the 1-mask into the number:<P>
<pre>    x ^= (1u &lt;&lt; i)</pre>
To see whether or not a bit is set, bitwise-AND the integer with the same mask:<P>
<pre>    x &amp; (1u &lt;&lt; i)</pre>
This expression evaluates to <I>0</I> if the bit is not set, or non-zero (2 to the <I>i</I>th power, in particular) if it is. The following useful idiom yields a <I>0</I> or <I>1</I> only:<P>
<pre>    !!(x &amp; (1u &lt;&lt; i))</pre>
in case you want to use the result as an index into an array.<P>
The header file in <A href="list3.htm">Listing 3</a>
defines macros for non-destructive versions of these operations, and declares some useful functions. The function implementations in <A href="list4.htm">Listing 4</a>
use the <I>nbits</I> macro to compute the size of an <I>unsigned int</I> in bits. The function <I>fputb</I> prints an unsigned integer in binary form with bit-0 rightmost and with leading zeroes if necessary. <I>fgetb</I> reads a string of bit characters and converts it into an <I>unsigned</I>. The curious statement<P>
<pre>    sprintf(format," %%%d [01]", nb);</pre>
builds a scan format string that skips whitespace and then reads up to <I>nb</I> 1s and 0s, or reads until it scans a non-bit character. You might think that you could avoid the <I>sprintf</I> by using a variable-width format descriptor in the scan, such as:<P>
<pre>    fscanf(f," %*[01] ",nb,buf);</pre>
Unfortunately, variable-width substitution doesn't work with scansets. (If this is Greek to you, see October 1992's Code Capsule, "Text Processing I".)<P>
The <I>count</I> function computes the number of 1-bits in a number by right-shifting one bit at a time and testing bit 0. The test program in <A href="list5.htm">Listing 5</a>
illustrates these functions.<P>
<h4><FONT COLOR="#000080"><A name="0321_0116">Large Bitsets<A name="0321_0116"></FONT></h4></P>
What if you need more bits than an integer holds? For example, suppose that you must create a "picklist" user interface object. A picklist is a scrollable, pop-up listbox that allows the user to choose multiple entries. The number of entries can easily exceed the number of bits in a long integer. The most efficient way to track the state of each entry is to associate a bitset with the picklist &#151; if the user highlights the <I>i</I>th entry, then you set the <I>i</I>th bit.<P>
You can of course use an array of <I>unsigneds</I> to hold the bits you need:<P>
<IMG SRC="equat1.gif"><P>
If you need <I>n</I> bits, then you need <I>N = ceil (n / BLKSIZ)</I> array elements, where <I>BLKSIZ</I> is the number of bits in an <I>unsigned</I> (or whatever integral type you derive the array from). If <I>n</I> is not a multiple of <I>BLKSIZ,</I> then there will be unused bits in the zeroth block (represented by XX in the preceding figure). Now, accessing a particular bit reduces to finding the particular block it resides in, and computing the offset for the mask to apply to that block. To find the right block, notice the following pattern:<P>
<pre><B>bits in this range     are in this block  b/BLKSIZ</B>
<B>---------------------------------------------------</B>
[0 , BLKSIZ-1]              N-1               0
[BLKSIZ , 2*BLKSIZ-1]       N-2               1
     . . .                 . . .             . . .
[(N-1)*BLKSIZ , n-1]         0               N-1</pre>
If <I>b</I> is the bit number in question, then<P>
<pre>    B + b/BLKSIZ == N-1</pre>
where <I>B</I> is the block we are after. Therefore,<P>
<pre>    B = N-1 - b/BLKSIZ</pre>
The offset of bit <I>b</I> within block <I>B</I> is simply<P>
<pre>    offset = b % BLKSIZ</pre>
If <I>bits</I> is the array name, then you can process the <I>B</I>th bit with these expressions:<P>
<pre>    bits[B] |=  (1u &lt;&lt; offset);   /* set */
    bits[B] &amp;= ~(1u &lt;&lt; offset);   /* reset */
    bits[B] ^=  (1u &lt;&lt; offset);   /* toggle */
    !!(bits[B] &amp; (1u &lt;&lt; offset)); /* test */</pre>
The header file in <A href="list6.htm">Listing 6</a>
presents an interface for processing arbitrarily large bitsets. In addition to the functions already discussed, it adds conversions to and from <I>unsigned</I>, in case you are working only with word-sized bitsets and want to interface with your host environment. The statement<P>
<pre>    typedef struct bits Bits;</pre>
declares struct <I>bits</I> as an incomplete type with synonym <I>Bits</I>. The definition of the structure is in the implementation file. (See <A href="list7.htm">Listing 7</a>
&#151; If incomplete types are Greek to you, see last month's installment.) If you want to use another integral type for the base array, just substitute it for <I>unsigned int</I> in line 11 of <I>bits. c</I>.<P>
A <I>Bits</I> object consists of the number of bits allowed, the array of integers, the number of elements in the array, and a mask to reset the unused bits to zero that have inadvertently been set by operations on other bits. The test program in <A href="list8.htm">Listing 8</a>
shows how you might use a <I>Bits</I> object in an application.<P>
<h4><FONT COLOR="#000080"><A name="0321_0117">Bit Strings<A name="0321_0117"></FONT></h4></P>
The storage scheme in a <I>Bits</I> object puts bit 0 last in the array, so bits are numbered right-to-left, just like they are in single integers. In situations where there is no numerical application of bitsets, like the picklist example above, it might seem more natural to number bits from left to right, like a string. It is trivial to modify <I>bits.c</I> to make this change in orientation. The orientation is represented as:<P>
<IMG SRC="equat2.gif"><P>
The block for the <I>b</I>th bit is now<P>
<pre>    B = b / BLKSIZ</pre>
and the offset is calculated from the left instead of the right of the block:<P>
<pre>    offset = BLKSIZ - b%BLKSIZ - 1</pre>
<A href="list9.htm">Listing 9</a>
and <A href="list10.htm">Listing 10</a>
summarize the changes required to transform the header file and implementation respectively from a bitset into a bit string. The test program is in <A href="list11.htm">Listing 11</a>.
<P>
<h4><FONT COLOR="#000080"><A name="0321_0118">Stay Tuned<A name="0321_0118"></FONT></h4></P>
There are a number of features we could and should add to these objects. It would be convenient to provide bitwise operations that apply to entire objects, for example<P>
<pre>    Bits *bp1, *bp2, *bp3;
    /* . . . */
    bits_and(bp3,bp1,bp2);
    bits_shift_left(bp3,4);
    /* . . . */</pre>
It would also seem natural to allow bit strings to grow and shrink, just like strings. Before we get too carried away, however, it's time to consider moving to C++. In C++, we can overload operators so that the above excerpt looks like:<P>
<pre>    Bits bp1, bp2;
    // . . .
    Bits bp3 = bp1 &amp; bp2;
    bp3 &lt;&lt;= 4;</pre>
The next two installments will cover the two bitset classes that were voted into the standard C++ library in March, 1993 in Portland.<P>

<h4><a href="../../../source/1993/nov93/allison.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
