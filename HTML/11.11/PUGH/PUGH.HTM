

<HTML>
<HEAD>

<TITLE>November 1993/Questions & Answers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocnov.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Questions &amp; Answers<A name="0325_0115"><A name="0325_0115"></font></h2><P>
<h3 align="center"><A name="0325_0000"><A name="0325_0000">Pointers and Multi-Dimensional Arrays</h3><P>
<h3 align="center"><font color="#800000">Kenneth Pugh</font></h3><hr><blockquote><P>
<P><i><A name="0325_0000"><A name="0325_0000">Kenneth Pugh, a principal in Pugh-Killeen Associates, teaches C and C++ language courses for corporations. He is the author of C Language for Programmers and All On C, and was a member of the ANSI C committee. He also does custom C programming for communications, graphics, image databases, and hypertext. His address is 4201 University Dr., Suite 102, Durham, NC 27707 You may fax questions for Ken to (919) 489-5239. Ken also receives email at kpugh@allen.com (Internet) and on Compuserve 70125,1142.</i></P><P>
<B>Q</B><P>
Thank you for your help on my questions concerning allocating memory for multi-dimensional <I>char</I> arrays. Your explanation of the array-of-pointers and the pointer-to-arrays approaches to the second dimension not only cleared up my misunderstanding but also served as a valuable lesson in pointers. I would like to mention a couple of things and then ask for your thoughts on my overall approach.<P>
I am using a 486, Borland C/C++ 3.01, and the large memory mode. I tested both methods using Borland's Turbo Profiler <I>tprof</I>, and although there was a very slight difference in the time for <I>fgets</I>, the time was exactly the same for <I>cputs</I> using:<P>
<pre>for( i = 0; i &lt; screen_rows; i++)
   cputs(array_p_char[i]);
                 time = 0.0114</pre>
and<P>
<pre>for( i = 0; i &lt; screen_rows; i++)
   cputs( p_char_array[i]);
                 time = 0.0114</pre>
I have an application that uses 15 to 18 screen displays for data input to a database (Borland Paradox Engine 2.0). The screens are in an ASCII file which I read into the <I>p_screen_array</I> using an <I>fgets (scrnarray, ascii file, 82)</I>. The array is defined as<P>
<pre>char far scrnarray[MAX_ROWS][ROW_LEN];</pre>
I use <I>far</I> to force a new data segment because the <I>_DATA</I> segment is nearing the 64KB limit. Tests did not indicate any benefit in using the <I>far</I> heap, as you suggested, over using a <I>far</I> data segment:<P>
<pre>char_far*p_char;
p_char=new_far char[NUM_CHARS];</pre>
When a screen format needs to be displayed, I search the <I>scrnarray</I> to find the correct screen and then display it as follows:<P>
<pre>while( i &lt; MAX_ROWS)
   {
   if(!strncmpi
     (scrnarray[i++],
     scrn_ident,3))
     // find correct screen
      {
      for(j = i;
         j &lt; SCRN_ROWS; j++)
         {
         cputs(scrnarray[i]);
         // display screen rows
         }
      break;
         // break out of while
      }
   }</pre>
Using <I>strncmpi</I> is not as efficient as using <I>int</I> equality, but the latter would require that I convert ASCII <I>char</I> to <I>int</I> before testing, which is not very appealing. Other than quick and snappy screen display, I am somewhat concerned about hardware independence.<P>
I would be very interested in your and my fellow <I>CUJ</I> readers' thoughts about my overall approach to snappy screen displays. And again, thank you for your response to my first question.<P>
Tom Parke<br>
Sparks, Nevada<P>
<B>A</B><P>
If you understood the double pointers in my last column, then you are ready for my answer to your follow-up question. What I suggest is using another array of pointers.<P>
<pre>char *p_screen_chars
    [NUMBER_SCREENS][NUMBER_OF_ROWS];</pre>
<I>p_screen_chars</I> is a doubly-dimensioned array of pointers, each element of which is a pointer to <I>char</I>. To allocate blocks of memory <I>NUMBER_OF_CHARS</I> long and assign the addresses to the elements in <I>p_screen_chars</I>, you code:<P>
<pre>for (screen = 0;
    screen &lt; NUMBER_OF_SCREENS;
    screen++)
   {
   for (row = 0;
       row &lt; number_rows; row++)
      {
      p_screen_chars[screen]
        [row]= malloc
        (NUMBER_OF_COLUMNS);
      }
   }</pre>
It appears that your screens are stored on disk in the form:<P>
<pre>S01
First row
Second row
...
S02
First row
Second row
...</pre>
When reading from the file, use <I>strncmpi</I> to identify the screen number and write the rows to the appropriate elements of <I>p_screen_chars</I>. You can display any one of the screens with:<P>
<pre>screen = desired_screen;
for (row = 0;
    row &lt; NUMBER_OF_ROWS; row++)
   {
   cputs(p_screen_chars
        [screen][row]);
   }</pre>
To allocate memory for the screens from data segments rather than from the heap, you could declare:<P>
<pre>char screen1[NUMBER_OF_ROWS]
           [NUMBER_OF_COLUMNS];
char screen2[NUMBER_OF_ROWS]
           [NUMBER_OF_COLUMNS];
   ...

char (*p_screen_chars
     [NUMBER_SCREENS])
   [NUMBER_OF_ROWS]
    [NUMBER_OF_COLUMNS]
    = { screen1, screen2, ....};</pre>
As I mentioned earlier, <I>p_screen_chars</I> is an array of pointers, with each element pointing to an object which is a doubly-dimensioned array of <I>chars</I>. The code for the display will look exactly as above whether you use the far heap or place the arrays in different data segments. Both require far four-byte pointers.<P>
The main issue here is which part of memory should be used for allocating the data. For protected-mode applications, I recommend using static memory. For real-mode applications, where the issue is more critical, I suggest placing the screens in extended memory and using a package of XMS routines to bring them into real memory. If you do not have control over the environment (e.g., over how much extended memory a machine has), leave the screens in a file with pointers to the initial character of every screen. The file could be on RAM disk, if it is available. The access time would be minimal.<P>
The difference in execution time between using pre-computed indices to the beginning of each row and computing them every time is small. For a small number of accesses on a fast machine, such as a 486, the difference may not even show up in your timing routines. You might want to examine the actual machine instructions &#151; I don't have a spec sheet on the 486, but I would imagine that an integer multiply probably requires little more time than an addition.<P>
<h4><FONT COLOR="#000080"><A name="0325_0116">C++ Operators<A name="0325_0116"></FONT></h4></P>
<B>Q</B><P>
The accompanying sample code (see <A href="fig1.htm">Figure 1</a>)
 has been haunting me for a while and I have not been able to get an accurate answer from Borland or Microsoft.<P>
C++ does not allow you to inherit the overloaded <I>operator=</I> function, so derived classes need to repeat this function. However, you may inherit all other overloaded operator functions.<P>
With the assignment<P>
<pre>b3 = b2 - b1;</pre>
<I>b2</I>'s<I> CBase operator-</I> is called. It accepts a <I>const</I> reference to a <I>CBase</I> object as an argument (<I>b1</I>), and returns a <I>CBase</I> object. <I>b3</I> expects a <I>CBase</I> object. No problem so far.<P>
However, with the assignment:<P>
<pre>d3 = d2 - d1;</pre>
<I>d2</I>'s inherited <I>CBase operator-</I> is called. It expects a <I>const</I> reference to a <I>CBase</I> object as an argument. However, I'm passing a <I>CDerived</I> object instead (<I>d1</I>). Also, <I>d3</I> expects a <I>CDerived</I> object. However, <I>d2</I>'s inherited <I>CBase operator-</I> function returns a <I>CBase</I> object instead.<P>
Question 1: <I>d2</I>'s operator-function expects a <I>const</I> reference to a <I>CBase</I> object as an argument. However, I'm passing <I>d1</I>, which is not a <I>CBase</I> object but a <I>CDerived</I> object, instead. What happens here? Do I have to rewrite the operator-function for the <I>CDerived</I> class?<P>
Question 2: The inherited operator-function returns a <I>CBase</I> object. However, <I>d3</I> expects a <I>CDerived</I> object. Again, what happens here? Do I have to rewrite the operator-function for the <I>CDerived</I> class?<P>
Question 3: In general, when I derive a class <I>D</I> from a base class <I>B</I>, do I have to rewrite all functions that either take a <I>B</I> object as an argument or return a <I>B</I> object?<P>
I enjoy reading your magazine articles, and I wonder if you would be able to help me. Also, I would appreciate it if you could recommend a good book that reflects the latest C++ ANSI draft.<P>
Jorge Padron<br>
Florida<P>
<B>A</B><P>
I'll take your questions in order.<P>
<I>Question 1:</I> The <I>CBase operator-</I> expects a single parameter of type <I>const</I> <I>CBase &amp;.</I> References and pointers to derived classes can be implicitly converted to references and pointers to a base class. The expression:<P>
<pre>d2 - d1;</pre>
is the same as:<P>
<pre>d2.operator-(d1);</pre>
The <I>CDerived</I> class inherits an <I>operator-(CBase &amp;)</I> member function from <I>CBase</I>. Since there is no <I>CDerived::-operotor-(CDerived &amp;)</I> function, the function-argument matching algorithm uses the simple conversion from <I>CDerived &amp;</I> to <I>CBase &amp;</I> and matches the inherited function. If you want <I>d2 - d1</I> to do something different, then you should declare and code a <I>CDerived::-operator-(CDerived &amp;)</I> member function.<P>
<I>Question 2:</I> The assignment operator is the one operator function that cannot be inherited. The reason for this prohibition is similar to the reason why constructors cannot be inherited: the additional members in the derived class may not necessarily be assigned properly. The expression<P>
<pre>d3 = d2 - d1;</pre>
does translate into<P>
<pre>d3.operator=(d2.operator-(d1));</pre>
The innermost expression returns a <I>const CBase &amp;</I>. Thus the outermost expression is attempting to find a function of<P>
<pre>CDerived::operator=(const CBase &amp;).</pre>
You have defined such a function with<P>
<pre>const CDerived&amp; operator
      =(const CDerived&amp; derived);</pre>
A reference to a base class cannot be converted to a reference to a derived class, because there is no way to determine how the additional members in the derived class should be set. If you specify an assignment operator as<P>
<pre>const CDerived&amp; operator
        =(const CBase&amp; derived);</pre>
then the expression will compile.<P>
<I>Question 3:</I> When you derive a class <I>Derived</I> from a base class <I>Base,</I> you do not have to rewrite functions that take a <I>Base</I> object as an argument. For functions that return a <I>Base</I> class, you must implement either a copy-type constructor or the assignment function with a <I>Base</I> class argument. The copy-type constructor prototype would look like:<P>
<pre>Derived::Derived(Base &amp;);</pre>
This would provide a conversion from the <I>Base</I> class to the <I>Derived</I> class, with appropriate default values being filled in for any additional <I>Derived</I> members.<P>
It's generally best to avoid these, as constructing upwards (or downwards, depending on how you look at it) from a <I>Base</I> to a <I>Derived</I> class reverses the normal construction. A <I>Derived</I> class knows about the members of the <I>Base</I> class, but the opposite is not true. (Multiple inheritance can complicate this explanation. I concur with several other C++ writers in urging you to avoid multiple inheritance, but I will not belabor these issues.)<P>
Readers should note that the <I>operator-</I> function for <I>CBase</I> will still be used for the expression <I>d2 - d1</I> even if it is declared as<P>
<pre>CBase operator-(CBase base) const;</pre>
The reason is that every class is given an implicit copy constructor, e.g.,<P>
<pre>CBase(const CBase &amp;);</pre>
This constructor takes a reference to the <I>CBase</I> class, so references to <I>CDerived</I> objects can be converted by a standard conversion to a reference to the <I>CBase</I> class. When the <I>operator-</I>function is called, the copy constructor will be invoked first to make a temporary <I>CBase</I> variable. That temporary variable will be copied onto the stack and passed to the <I>operator</I>- function. To minimize this needless copying, make the parameters to functions of the reference type. (For a copy of the C++ Draft Standard, contact ANSI at X3 Secretariat Computer and Business Equipment Association, 311 1st St. NW, Suite 500, Washington, DC 20001-2178, PH: (202) 737-8888.)<P>
<h4><FONT COLOR="#000080"><A name="0325_0117">Auto-Increment<A name="0325_0117"></FONT></h4></P>
This note is a follow-up to a previous column concerning the auto-increment. The ANSI C Standard gives the example<P>
<pre>i = 5;
i = ++i + 1;</pre>
as having undefined results. At a glance, it is difficult to see how the result could be other than 7. The variable <I>i</I> is preincremented to 6, 1 is added, and the result is stored in <I>i</I>.<P>
Consider, however, the possibility of parallel processing. It could be the case that the increment and the assignment will be performed by two separate processors in parallel. Depending on which processor stores its result back in memory first, the value of <I>i</I> could be either 6 or 7.<P>

<h4><a href="../../../source/1993/nov93/pugh.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
