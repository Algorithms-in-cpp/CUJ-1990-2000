<HTML><HEAD>
<TITLE>November 1993/Dynamic Two-Dimensional Arrays/Listing 4</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 4 <I>A program to test dynamic allocation</A></I></h4>
<pre>/* TEST.C */
/* Copyright 1993 by P. J. LaBrocca
   All rights reserved.
*/
/*
**  Torture test for Dyn2dArray()
**
**      Creates and destroys many dynamic two-dimensional
**      arrays. Displays memory usage (MS-DOS only).
**
**      Compiles with Microsoft C versions 6, 7 &amp; 8 MS-DOS
**      and Symantec THINK C 5 (Macintosh).
*/
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

#if defined( _MSC_VER )
#include &lt;malloc.h&gt;
#endif

#include "dyn2darr.h"

struct S {
   char c;
   double dd;

//   double xd[100];      /* force failure */
};

void main( void )
{
   int i, j, k, l;
   int high = 10; /* Increase to apply greater stress. */
   int count = 0;
//   double **d;
   struct S **d;
   struct S * **pd;
   
   for( i = 1; i &lt; high; ++i ) {
      for( j = high; j &gt; 0; --j ) {

#if defined( _MSC_VER )
          printf("memmax: %u ", _memmax() );

#endif
/* D2D array of structures */
          d = (struct S **) Dyn2dArray( i, j, struct S );
          if( d == NULL) {
             printf("\nOut of memory: i: %d j: %d\n",i,j );
             exit( 0 );
          }
/* D2D array of pointers-to-structures */
          pd = (struct S * **) Dyn2dArray(i, j, struct S *);
          if( pd == NULL) {
             printf("\n!!Out of memory: 2");
             exit( 0 );
          }
//            d = Dyn2dArray( i, j, double );
          printf("******** count : %d ::d[%d][%d]******",
                 ++count, i, j );
#if defined( _MSC_VER )
          printf(" memmax: %u\n", _memmax() );
#else
          putchar('\n');
#endif

/* Assign some values */
          for( k = 0; k &lt; i; ++k ) {
             for( 1 = 0; 1 &lt; j; ++1 ) {
                d[k][l].dd = k + l;
             } /* for( 1 = 0; 1 &lt; */
          } /* for( k = 0; k &lt; */
/* Assign addresses of structs to pointers-to-structs */
          for( k = 0; k &lt; i; ++k ) {
             for( 1 = 0; 1 &lt; j; ++l ) {
                pd[k][l] = &amp;d[k][l];
             } /* for( l = 0; l &lt; */
          } /* for( k = 0; k &lt; */

/* See if everything wound up where it was supposed to go. */
          for( k = 0; k &lt; i; ++k ) {
             for( 1 = 0; l &lt; j; ++l ) {
                if( k + l != pd[k][l]-&gt;dd )
                   exit(0);
                printf( "%d %d %d %d : %f",
                          i, j, k, l, pd[k][l]-&gt;dd );
                printf(" - r: %d -- c: %d\n",
                             Dyn2dRows( pd ),
                             Dyn2dCols( pd ) );
             } /* for( l = 0; l &lt; */
          } /* for( k = 0; k &lt; */

/* Clean up D2D arrays in preparation for new ones. */
          free( d );
          free( pd );
      
      } /* for( j = high; j */
   } /* for( i = 0; i &lt; */
} /* main */
/* End of File */
</pre>
</BODY>
</HTML>
