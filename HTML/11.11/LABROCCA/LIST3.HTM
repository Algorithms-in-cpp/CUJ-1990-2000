<HTML><HEAD>
<TITLE>November 1993/Dynamic Two-Dimensional Arrays/Listing 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 3 <I>Magic squares program</A></I></h4>
<pre>/* MAGIC.C */

/*  Copyright 1993 by P. J. LaBrocca
   All rights reserved.
   
   Compiles with Microsoft C versions 6, 7 &amp; 8 (MS-DOS)
   and Symantec THINK C 5 (Macintosh).
*/

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;ctype.h&gt;

#if defined( THINK_C )  /* Macintosh */
#include &lt;console.h&gt;
#endif

#include "dyn2darr.h"

/* Prototypes */
void magic( int **, int );
void show_mag( int ** );

/*****************
   Solves a magic square puzzle as described in
   D. E. Knuth, The Art of Computer Programming,
   Volume 1/Fundamental Algorithms, 2nd Edition. p 158.
******************/
void magic( int **mag, int size )
{
   int count = 1;
   int r = 1;
   int c = (size + 1) / 2;
   
   mag[r][c] = count;
   for( count = 2; count &lt; (size * size + 1); ++count ) {
      --r;
      --c;
      if( ((r == 0) &amp;&amp; (c == 0)) || mag[r][c] != 0 ) {
         ++c;
         r += 2;
      }
      else if( r == 0 )
         r = size;
      else if( c == 0 )
         c = size;
      mag[r][c] = count;
   }
}

/*******************
   Displays a magic square on screen.
   show_mag doesn't need to be told how big
   a side is. It gets the information
   from the macro Dyn2dRows
********************/
void show_mag( int **mag )
{
   unsigned r, c;
   int sum = 0;
   
   putchar('\n');
   for( r = 1; r &lt; Dyn2dRows( mag ); ++r ) {
      sum += mag[1];
      for( c = 1; c &lt; Dyn2dCols( mag[r][c] ); ++c )
         printf( "%4d", mag  );
      putchar('\n');
   }
   printf( "\nMagic Sum is %d\n", sum );
}

void main( int argc, char **argv )
{
   int side;
   int **arr;         /* For D2D array */

#if defined( THINK C )         /* Macintosh */
   argc = ccommand( &amp;argv );
#endif
   
   if( argc != 2 || !isdigit( *argv[1] ) ) {
      printf("\nUsage: magic 'positve odd integer'\n\n");
      exit( 0 );
   }
   
   side = atoi( argv[1] );
   if( side % 2 == 0 ) {
      printf("\nUsage: magic 'positve odd integer'\n\n");
      exit( 0 );
   }
   
   arr = (int **) Dyn2dArray( side + 1, side + 1, int );
   magic( arr, side );
   show_mag( arr );
   free( arr );
}

/* End of File */
</pre>
</BODY>
</HTML>
