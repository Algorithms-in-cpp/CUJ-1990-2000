


<HTML>
<HEAD>

<TITLE>November 1991/X Window Programming</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocnov.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">X Window Programming<A name="0245_0135"><A name="0245_0135"></font></h2><P>
<h3 align="center"><A name="0245_0000"><A name="0245_0000">Part 5: X Toolkit Programming</h3><P>
<h3 align="center"><font color="#800000">Eric F. Johnson and Kevin Reichard</font></h3><hr><blockquote><P>
<P><i><A name="0245_0000"><A name="0245_0000">Johnson and Reichard are<I></I> <I></I>authors of X Window Applications Programming Advanced X Window Applications Programming and Power Programming Motif (all<I></I> <I></I>MIS:Press). Johnson can be<I></I> <I></I>reached at erc@pai.mn.org via UUCP<I></I> <I></I>mail. Reichard's Compuserve address<I></I> <I></I>is 73670,3422.</i></P><P>
Since X Window programming is so tough, the designers of X actively encourage programmers to use toolkits &#151; libraries that sit on top of the low-level X library. We discussed the low-level library in parts 2 and 3 of this series. (see <I>CUJ</I> May 1991 and July 1991). X toolkits provide a nearly object-oriented programming interface that hides most of the messy details of the low-level X library. Unfortunately, X toolkits also introduce their own complexities that are often confusing. The toughest part of using X toolkits is that you must structure your code around the toolkit's idiosyncrasies, which makes difficult porting software from other systems, such as the Macintosh, DOS, or Windows.<P>
The toolkits in X usually entail three layers. At the bottom layer is the X library, mentioned above. Above the X library sits the X Toolkit Intrinsics, often called Xt Intrinsics or simply Xt. Not simple at all, Xt provides a pseudo-object-oriented interface support layer, which handles events for a hierarchy of generic <I>widgets</I> (a term we'll explain below). When you decide to standardize on an Xt-based toolkit, you buy in to the design philosophy we'll describe, whether you want to or not. There's no real middle ground with these toolkits, unfortunately.<P>
Above the Xt Intrinsics sits an actual interface library, also called a widget set. The widget set provides the actual look and feel for the scroll bars, menus, and whatnot, while the Xt layer just supports the widget set under the hood.<P>
This can get confusing really quickly, but bear with us. At least three major X widget sets use the support routines in the Xt Intrinsics:<P>
<UL><li>Motif (which we'll cover in the next installment)</li>
<li>the Open Look Intrinsics Toolkit (as named by Sun)</li>
<li>the Athena widget set (which we'll cover in this article)</li></UL>
The Athena widget set is free and comes with the X Window System as released by MIT.<P>
<h4><FONT COLOR="#000080"><A name="0245_0136">Widgets<A name="0245_0136"></FONT></h4></P>
Since we've been talking about widget sets, we should explain what a widget is. A widget is a software abstraction for a user interface element, like a scroll bar or menu. Sound too dry and academic for you? Well, a widget is just a data structure that you can create and manipulate. It is usually associated with a window on the screen. This data structure contains pointers to functions for drawing and event-handling. The instance of the data structure exists in a hierarchy of widgets, maintained by Xt. You usually don't have to worry about this, though.<P>
When you create a scroll-bar widget, for example, you can place that scroll bar in a window in your application. The widget set and the Xt Intrinsics take care of the messy part of managing the scroll-bar widget. Your application only needs to worry about the data to scroll, if that. In other words, the act of creating a widget also launches that widget. The X toolkit handles the rest. (Well, most of it, anyway.)<P>
In your programs, you normally don't have to worry about what is in the widget structure. You just pass a pointer to the structure around to all the widget-handling routines. In fact, it's a lot easier to simply ignore what is in the widget structures and treat widgets as opaque data types, at least until you're trying to extend the current widget set by adding your own widgets. That's definitely an advanced topic. One nice thing you'll notice about using X widget sets is that you write a lot less code. (What code you do write, though, is more convoluted.) Just compare the length of this month's sample program to last month's and you'll see what we mean.<P>
<h4><FONT COLOR="#000080"><A name="0245_0137">Initializing The Xt Intrinsics<A name="0245_0137"></FONT></h4></P>
The first step in using the Xt Intrinsics is initializing the library. The functions <I>XtInitialize</I> or <I>XtAppInitialize</I> handle this. <I>XtAppInitialize</I> is new with X11 Release 4, so many of you won't have this function available. If so, <I>XtInitialize</I> works just fine. It is, in fact, what we used, so that our code is more compatible across the range of X installations. <I>XtInitialize</I> is considered obsolete, but is the only thing available in older versions of X. Both functions act much the same.<P>
<pre>#include &lt;X11/Intrinsic.h&gt;
Widget XtInitialize(
   String shell_name,
   String application_class,
   XrmOptionDescRec xrm_options [],
   Cardinal number_options,
   Cardinal *argc,/* note indirection */
   String argv[]);</pre>
If you look at the parameters above, initializing the toolkit looks like a complex task. This is only if you make it so. Here's how we call <I>XtInitialize</I> in the sample program:<P>
<pre>#include &lt;stdio.h&gt;
#include &lt;X11/Intrinsic.h&gt;

main(int argc, char *argv[])
   { /* main */
   Widget parent;
   .....
   parent = XtInitialize(
      argv[0], /* shell or app name */
      "Xaw1",  /* application class */
      NULL,
      0,       /* No Xrm Options */
      &amp;argc, argv);</pre>
This is much easier. For simplicity, we skip the Xrm (X Resource Manager) options. You'll be able to get away with this in many Athena widget programs. <I>"Xaw1"</I> is the application's class name. The class name is used for finding application-specific customizations (called resources) and is usually the application name with an uppercase first letter. (In this case we call our program <I>"xaw1"</I> &#151; an arbitrary name.) Sometimes the second letter is capitalized, too.<P>
Once you've initialized the Xt Intrinsics, you get back a top-level shell widget, which basically corresponds to your application's top-level window. This widget is the highest parent for all of the widgets you create &#151; and every widget you create needs a parent. The next level of widgets you create will use this as the parent widget. You'll be creating plenty of widgets, or else your Athena widget programs will be pretty boring. We'll create three simple widgets in the sample program. The easiest is a Label widget.<P>
<h4><FONT COLOR="#000080"><A name="0245_0138">The Label Widget<A name="0245_0138"></FONT></h4></P>
The Label widget presents a text label, about the simplest widget you can get. To create a Label widget, use <I>XtCreateManagedWidget</I>, which can create widgets of many types, or classes. Pass a widget class of <I>labelWidgetClass</I>. In the code below, <I>XtSetArg</I> is used to change the default text to display <I>"This is a label." XtCreateManagedWidget</I> then creates the widget.<P>
<pre>Arg args[10];
int n;
Widget parent_widget;
Widget label;

n = 0;
XtSetArg(
   args [n],
   XtNlabel,
   "This is a label." ); n++;
label = XtCreateManagedWidget(
   "label",         /* name */
   labelWidgetClass,/* widget class */
   parent_widget,   /* parent widget */
   args,            /* changes */
   n );             /* number in args */</pre>
More formally, <I>XtCreateManagedWidget</I> looks like:<P>
<pre>String name;
WidgetClass widgetclass;
Widget parent;
ArgList args;
Cardinal number_args;

Widget XtCreateManagedWidget(
name, widgetclass,
   parent, args, number_args );</pre>
<h4><FONT COLOR="#000080"><A name="0245_0139">Setting Widget Options<A name="0245_0139"></FONT></h4></P>
Before you create most widgets, though, you'll need to set a number of options. To start out, it's a lot easier to set all the options in your C code. Later on, you'll want to study resource files, since they allow users to customize your applications a great deal. For now, though, we'll use an odd macro called <I>XtSetArg</I>. It sets one element in an array of <I>Arg</I> types, taking advantage of C's weak type checking. For now, don't worry what's in the <I>Arg</I> structure, since we'll only be using it with <I>XtCreateManagedWidget</I> and <I>XtSetArg</I>.<P>
<I>XtSetArg</I> takes three parameters, an <I>Arg</I> structure, a name for the resource we're setting, and a value. You normally don't worry about their types. Instead, just follow the conventions when calling <I>XtSetArg</I>, even though that makes for some strange-looking code:<P>
<pre>Arg args [10];
int n;

n = 0;
XtSetArg( args[n], XtNlabel,
   "This is a label." ); n++;</pre>
(Note: <I>Since XtSetArg</I> is a macro, <I>never</I> increment the count variable <I>n</I> inside the parentheses of <I>XtSetArg</I> &#151; hence the <I>n++</I> at the end of the line. This looks strange, but <I>XtSetArg</I> is used this way all the time in Xt-based programs. Get used to it.)<P>
The <I>XtNlabel</I> is the name of the resource we want to change and is defined to be <I>"label"</I> in <I>&lt;X11/StringDefs.h&gt;</I>. The value part is what we want to set the given resource to. This will be rather confusing at first, but take a long look at the examples in <A href="list1.htm">Listing 1</a>
and you'll have a better idea how <I>XtSetArg</I> works.<P>
The basic idea is this. First, you set up all the widget resources you want to change into an array of <I>Arg</I> type, using <I>XtSetArg</I>. Then you create the widget, passing these options (in the <I>Arg</I> array) to the widget-creation function.<P>
<h4><FONT COLOR="#000080"><A name="0245_013A">Athena Widget Include Files<A name="0245_013A"></FONT></h4></P>
For most Xt-based programs, you'll need to include at least two files, <I>&lt;X11/lntrinsic.h&gt;</I> and <I>&lt;X11/StringDefs.h&gt;</I>. In addition, each Athena widget has its own include file. Generally, you'll need to include a file for each type (class) of widget you use. The Label widget described above, for example, requires the file <I>&lt;X11/Xaw/Label.h&gt;</I>. Before X11 Release 4, all Athena include files were in <I>/usr/include/X11</I>. Thus, you would use <I>X11/Label.h</I> for the Label widget. With Release 4, these files migrated to <I>/usr/include/X11/Xaw</I> - a subdirectory lower.<P>
We've set up a compile-time option to tell the C compiler where the Athena include files are. Since so many things depend on X11 Release 4, we use the symbol <I>X11R4</I>. If you have not upgraded to at least R4 yet, comment out the following line in the sample program:<P>
<pre>#define X11R4    /* define this for
X11 Release 4+  */</pre>
<h4><FONT COLOR="#000080"><A name="0245_013B">The Command Widget<A name="0245_013B"></FONT></h4></P>
The Label alone isn't very interesting, so we'll add two more widgets. The Command widget is a Label widget that executes a function when you click a mouse button in it. You need to set up this function properly, so that the X Toolkit can call your function back when necessary (hence the term callback function).<P>
But first, we create the Command widget with <I>XtCreateManagedWidget</I>, using a class of Command <I>WidgetClass</I> this time:<P>
<pre>#include &lt;X11/Xaw/Command.h&gt;
.....
Arg args[10];
int n;
Widget quit, parent_widget;

n=0;
quit = XtCreateManagedWidget( "quit",
   commandWidgetClass, parent_widget, args, n );</pre>
The include file for the command widget is <I>&lt;X11/Xaw/Command. h&gt;</I>.<P>
<h4><FONT COLOR="#000080"><A name="0245_013C">Widget Callback Functions<A name="0245_013C"></FONT></h4></P>
<I>XtAddCallback</I> sets up a function you write to be called back whenever the user clicks a mouse button in the Command widget.<P>
<pre>Widget widget;
String callback_name;
XtCallbackProc callback_function;
XtPointer client_data;

XtAddCallback ( widget, callback_name,
   callback_function, client_data );</pre>
To set up the standard callback for the Command widget, use <I>XtNcallback</I> as the callback name (or type of callback). When the user clicks a mouse button in the widget, the Command widget will call your callback function with three parameters. We named our example function <I>quit_callback</I>.<P>
<pre>void quit_callback( widget,
   client_data, call_data )
   Widget widget;
   caddr_t client_data;/* your data */
   caddr_t call_data;  /* data passed
                    from Xt */
   { /* quit_callback */ }</pre>
In our code, the <I>quit-callback</I> abruptly quits the program, using <I>exit</I>, so we won't worry about passing any data to the callback function.<P>
<h4><FONT COLOR="#000080"><A name="0245_013D">Using Container Widgets<A name="0245_013D"></FONT></h4></P>
When you create more than one widget, you'll need to use some form of "container" to hold your widgets, keep them in place, and figure out what to do when the user changes the size of the application's main window. A very simple container widget is the Athena Paned window widget. The Paned widget divides an area (in this case our whole application window) up into "panes," going across the window. The panes start at the top and work their way down to the bottom. Generally, you have a pane for each child of the paned window widget. The panes also come, by default, with "sashes" &#151; lines with a little box (a place to grab onto with the mouse) near the right side. These sashes allow the user to resize any of the child panes.<P>
To create a paned window container widget, we again use <I>XtCreateManagedWidget</I>, with a class of <I>panedWidgetClass</I>.<P>
<pre>#include &lt;X11/Xaw/Paned.h&gt;
.....
   Widget  parent_widget, paned_widget;
   Arg  args[20];
   int  n;

   n = 0;
   paned_widget = XtCreateManagedWidget( "pane",
      panedWidgetClass, parent_widget, args, n );</pre>
The include file for the paned widget is <I>&lt;X11/Xaw/Paned. h&gt;</I>.<P>
Since we want the Label and Command widgets to be inside the panes of the Paned widget, we need to create the Paned widget first and make the other two widgets children of the Paned widget. The Paned widget is a child of the parent widget returned by <I>XtInitialize</I>, above. The Command and Label widgets must be children of the Paned widget; that is, the Paned widget is the parent widget passed to <I>XtCreateManagedWidget</I>.<P>
<h4><FONT COLOR="#000080"><A name="0245_013E">Making Widgets Appear<A name="0245_013E"></FONT></h4></P>
With X library programs, we've shown that nothing appears when you first create a window. You have to map that window to the screen to get something to appear. The same process is necessary for X Toolkit programs as well, only now we call the process "realizing" rather than mapping. (Don't blame us &#151; we didn't invent the terminology.) Use <I>XtRealizeWidget</I> to realize a widget and all of its managed children. All the children of our first parent widget are managed, since we've been using <I>XtCreateManagedWidget</I>, which creates and manages each widget.<P>
<pre>Widget parent;

XtRealizeWidget( parent );</pre>
<h4><FONT COLOR="#000080"><A name="0245_013F">The Widget Event Loop<A name="0245_013F"></FONT></h4></P>
Once you create and realize all your widgets, call <I>XtMainLoop</I> to handle all loops. This function basically takes over your application and loops forever on events. When each event comes in from the X server (or other input source), <I>XtMainLoop</I> dispatches the event to the proper event handler for whatever widget the event occurred in. If you ever want to quit your program, you'll need to set up at least one callback function, like we did for the Command widget, above. Thus, the main loop forces you to write event-driven programs, whether you'd like to or not.<P>
If you have Release 4, you'll probably want to use the newer <I>XtAppMainLoop</I>, instead of <I>XtMainLoop</I>.<P>
<h4><FONT COLOR="#000080"><A name="0245_0140">An Athena Widget Program<A name="0245_0140"></FONT></h4></P>
You'll notice a lot less code in the program in <A href="list1.htm">Listing 1</a>
than in the last three month's examples. This is the primary advantage for using an X toolkit. You'll also note that the code looks strange, at least at first glance. We've covered everything the program does, so now you should try it out, to see what the program really does.<P>
To compile and link Athena widget programs, you need to link in the Athena (Xaw), Xt and X (X11) libraries. Under X11, Release 4, you'll also need to link in the X miscellaneous utilities library (Xmu). A UNIX command to compile and link the xaw1.c program would look like:<P>
<pre>cc -0 xaw1 xaw1.c -lXaw -lXmu -
lXt -lX11</pre>
The key library to check for is the Athena widget library, <I>libXaw.a.</I> Many systems that offer Motif don't include the Athena widgets, including releases from Hewlett-Packard, Data General and SCO. Hopefully, as these vendors upgrade to X11 Releases 4 and 5, then they will think twice and include the Athena widget set.<P>
In the next part, we'll finish our X Window programming series and introduce another toolkit that is based on the Xt Intrinsics, the Motif toolkit from the Open Software Foundation.<P>
<h4>References</FONT></h4></P>
Asente, Paul J. and Ralph R. Swick, <I>X Window System Toolkit</I>, Digital Press, Bedford, MA, 1990. ISBN (Digital Press) 1-55558-051-3, (Prentice Hall) 0-13-972191-6.<P>
McCormack, Joel, Paul Asente and Ralph R. Swick, <I>X Toolkit Intrinsics: C Language Interface, X11 Release 4 version</I>, 1989, MIT X Consortium, part of the X Window System, Release 4, from MIT.<P>
Nye, Adrian and Tim O'Reilly, <I>X Toolkit Intrinsics Programming Manual</I>, O'Reilly and Associates, Sebastopol, CA, 1990, ISBN 0-937175-34-X.<P>
O'Reilly, Tim (editor), <I>X Toolkit Intrinsics Reference Manual</I>, O'Reilly and Associates, Sebastopol, CA, 1990. ISBN 0-937175-35-8.<P>

<h4><a href="../../../source/1991/nov91/johnson.zip">Get Article Source Code</a></h4>

</BODY>
</HTML>
