


<HTML>
<HEAD>

<TITLE>November 1991/Questions & Answers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocnov.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Questions &amp; Answers<A name="0264_0141"><A name="0264_0141"></font></h2><P>
<h3 align="center"><A name="0264_0000"><A name="0264_0000">Portability And Standards</h3><P>
<h3 align="center"><font color="#800000">Ken Pugh</font></h3><hr><blockquote><P>
<P><i><A name="0264_0000"><A name="0264_0000">Kenneth Pugh, a principal in Pugh-Killeen Associates, teaches C language courses for corporations. He is the author of C Language for Programmers and All On C, and was a member on the ANSI C committee. He also does custom C programming for<I></I> <I></I>communications, graphics, image databases, and hypertext. His address is 4201 University Dr., Suite 102, Durham, NC 27707. You may fax<I></I> <I></I>questions for Ken to (919) 489-5239. Ken also receives email at kpugh@dukemvs.ac.duke.edu (Internet).</i></P><P>
I'll be giving sessions on "Function and Data Abstraction" and "Managing the Transition to C" at the C-Forum in Boston this November. As technical chairman, I recommend that you register for the conference. It will have a hot lineup including Brian Kernighan, Robert Ward, Dan Saks, and a number of other authors in the C world. See you there.<P>
<B>Q</B><P>
In the July 91 issue of <I>The C Users Journal</I>, you condone the following practice:<P>
<pre>...
int int_compare(const int *, const int *);
typedef int (* fcmp_t)(const void *, const void *);
...
qsort (int_array, num_elements, sizeof (int), (fcmp_t) int_compare);
...</pre>
This practice is unportable because an <I>int</I> *and a <I>void</I> * need not be the same size, which means <I>int_compare()</I>'s parameters could be garbage. If you are doing this out of ignorance, then I am shocked at the level of understanding you and the magazine's proofreaders have of C.<P>
If you are doing this because "you don't have to worry about being that portable" or "it works on my PC," then I suggest changing the name of the magazine to The MS-DOS C User's (who also don't care about porting or standards) Journal. What is so terrible about the following?<P>
<pre>...
int int_compare(const void * p1, const void * p2)
   {
   int i1 = * (const int *) p1,
     i2 = * (const int *) p2;
   }
...
qsort (int_array, num_elements, sizeof(int), int_compare);</pre>
There are far too many nonportable and buggy C programs and confused C programmers (whether they know it or not). This is because C is a dangerous language and the overall quality of literature related to C is terrible (incorrect information, bad advice). ANSI went a long way towards making C less dangerous and more defined (e.g., prototypes, conversion rules), but I have not seen much improvement in the quality of C literature.<P>
After rereading this letter, I feel I should make it clear that I am not as mad or disgusted as it may seem. I enjoy reading your magazine every month (the University library subscribes), although I wish you would adhere more to the ANSI standard when answering questions<P>
Jamshid Afshar<br>
Austin, TX 78751<P>
<B>A</B><P>
You are right that <I>void</I> * pointers may not have the same size as <I>int</I> * pointers. (If you know of a system where these pointers don't have the same size, I would like to hear about it.) On many systems, including the IBM-PC, <I>int * ()</I> (function pointers) may not be the same size as <I>int</I> * or <I>void</I> *.<P>
I can easily defend my usage for just the reason you mention: "There are too many ... buggy C programs." With your approach, it would be easy to use the comparison function inappropriately outside of the context of the <I>qsort</I>. For example:<P>
<pre>int int_compare(const void * p1, const void * p2);
double d;
char c;
if (int_compare(&amp;d, &amp;c))
   ...</pre>
is a perfectly legal construction, given your prototype, that will pass every ANSI compiler's test with flying colors. However in the words of Richard M. Nixon, "It would be wrong." If you used the "stricter" version of the prototype and function<P>
<pre>int int_compare(const int *, const int *);
double d;
char c;
if (int_compare(&amp;d, &amp;c))</pre>
then all ANSI compilers will flag this as a flagrant violation. One needs the <I>void</I> * parameter only for purposes of <I>qsort</I> and similar functions. Even if one passed a ridiculous function to <I>qsort</I> with this <I>typedef</I>ing, say:<P>
<pre>int silly_int_compare(double *);
qsort (buffer, number, size, (fcmp_t) silly_int_compare);</pre>
it will be fairly apparent that the sort did not work. <I>qsort</I> itself will not modify areas outside the space designated by the other three parameters. The only way you can shoot yourself in the foot is if you make <I>silly_int_compare()</I> modify the address which is passed.(KP)<P>
<B>Q</B><P>
Using <I>curses</I>, I coded something like the following:<P>
<pre>while (!done)
{
move (10,10);
printw("Default value");
move (10,10);
refresh ();
gets (char_array);
/* More code */
}</pre>
It worked fine the first time around, but the second time around the default value was not printed out. The value that was input from <I>gets()</I> stayed there. Why?<P>
Larry Meyer<br>
Bahama, NC<P>
<B>A</B><P>
Originally, the <I>curses</I> library was intended to provide terminal-independent screen positioning routines for use over low-speed lines.<P>
The package keeps an internal representation of how it thinks the terminal screen appears, as well as a representation of the modifications you want to make. When you make <I>curses</I> calls, such as <I>printw</I>, this internal representation is updated. No characters are sent to the terminal screen until you call <I>refresh</I>.<P>
When you call <I>refresh, curses</I> determines the minimum number of characters to send to update the real terminal screen so that it agrees with the representation of the modified screen. This so-called <I>cursor optimization</I> gives rise to the name <I>curses</I>.<P>
For example, if you write<P>
<pre>move (10,10);
printw("Default value");
move(10,24);
printw("Another value");
refresh ();</pre>
<I>curses</I> does not send two cursor positioning commands. Instead, it determines what character is on the internal screen and sends something like<P>
<pre>CURSOR TO 10, 10
Default value Another value</pre>
where <I>CURSOR TO 10, 10</I> is replaced by the terminal control sequence that performs that operation<P>
When you called <I>refresh</I> the second time, the internal representation had not been modified, since you used the standard I/O function <I>gets ()</I>. You must use the curses function <I>getstr(char_array)</I> to update the internal representation.<P>
Note that running under most MS-DOS-based packages, cursoring or writing strings updates the real screen directly. There is no <I>refresh ()</I> function.(KP)<P>
<B>Q</B><P>
As I understood, one of the great advantages of Object Orientation as the ability to encapsulate and hide implementation. I have now struck this problem.<P>
When creating my own classes, a structure from another library may appear privately in a class. So to define the class, I would use the code in <A href="list1.htm">Listing 1</a>.
<P>
Any user of the InfoWindow object must now include the <I>grafix.h</I> header file in addition to the header for the class. This means coupling between the InfoWindow object module and its caller appears unnecessarily tightened. It seems to show the implementation and break the cohesion of the object module.<P>
I could use byte arrays the size of the graphics structures within the class, then cast pointers to them inside the member functions. However this depends on remembering to change the size of the arrays in the class if the size of the structures change. It all seems a bit of a quick and nasty fix anyway.<P>
How can I prevent users of my objects having to include headers of structures (and even lower level classes) when they don't need to know?<P>
Glen Watson<br>
Glendalough, Western Australia<P>
<B>A</B><P>
Why don't you put the<P>
<pre>#include &lt;grafix.h&gt;</pre>
statement inside your header file. You can protect it from multiple inclusions by adding a conditional compilation test.<P>
<pre>File grafix.h:

#ifndef _GRAFIX_H_INCLUDED
#define _GRAFIX_H_INCLUDED
/* remainder of grafix.h */
#endif

File infwndo.h:

#include &lt;grafix.h&gt;
/* remainder of infwndo.h */

File infwndo.cpp:

#include &lt;infwndo.h&gt;
/* remainder of infwndo.cpp */</pre>
Note, if you are concerned about the name mangling that C++ performs on the function names, you can tell the compiler not to mangle names by using the statement<P>
<pre>extern "C" {
       #include "grafix.h"
   }</pre>
<h4><FONT COLOR="#000080"><A name="0264_0142">Coding Style<A name="0264_0142"></FONT></h4></P>
In the classes that I teach to corporations, there are always several questions about code style. I stress that readability and consistency are good goals to strive for in writing C. The beginning C programmer is cautioned against writing code that does not resemble the language he/she has been using.<P>
For example, a common C idiom is:<P>
<pre>while ( (c = getchar()) != EOF)
   {
   /* Do something */
   }</pre>
The use of an assignment statement within the test expression can be confusing. Intermediate and advanced C programmers may easily decipher the statement for its intended meaning. I suggest that it may be just as clear to write:<P>
<pre>for(;;)
   {
   c = getchar();
   if (c == EOF)
        break;
   else
        /* Do something */
   }</pre>
or better yet:<P>
<pre>eof = FALSE;
while (!eof)
   {
   c = getchar();
   if (c == EOF)
        eof = TRUE;
   else
        /* Do something */
   }</pre>
I tend to prefer the latter, as it is more extensible, even at the cost of an extra comparison on every loop. For example, you might see code as the following:<P>
<pre>while ((c = getchar()) &amp;&amp; c !=
   EOF &amp;&amp; c != '\032' &amp;&amp; c !=
   '\177' )
   {
   if (c == 'A' || == 'B'
       || c == 'D')
         /* Do something */
   else if (c == 'D' || c == 'E')
        /* Do something else */

   }</pre>
Using the second form above, this would be coded as:<P>
<pre>done = FALSE;
while (!done)
   {
   c = getchar();
   switch(c)
        {
   case EOF:
   case '\032':
   case '\177':
        done = TRUE;
        break;
   case 'A':
   case 'B':
   case 'C':
        /* Do something */
        break;
   case 'D':
   case 'E':
        /* Do something else */
        break;
   }
   }</pre>
If you used this form consistently through your code, then your code may be more readable. I prefer the look of the <I>switch</I> over the nested <I>if</I> statement. If I need to find whether a particular value has been accounted for, it is easy to spot it in a list of case values.<P>
Of course, if you are after maximum speed, then the test expression with the embedded assignment statement may compile to faster code. However, if you used the first form as this:<P>
<pre>for(;;)
   {
   c = getchar();
   switch(c)
     {
     case EOF:
     case '\032':
     case '\177':
         goto end;
         break;
     case 'A':
     case 'B':
     case 'C':
         /* Do something */
         break;
     case 'D':
     case 'E':
         /* Do something else
*/
         break;
     }
   }
end:</pre>
then your code may be just as fast as the C idiom since the loop comparison is eliminated and replaced with a <I>goto</I>. The need for maximum speed version should only be checked after you have seen whether your code is fast enough using a consistent C style.<P>
You may notice that there is an unreachable statement in this code. The break following the <I>goto</I> is not needed. I have a tendency to leave it in for consistency's sake. It makes that set of statements for the case appear like all other sets. Likewise it is needed in the form with the done flag.<P>
Which approach is best? Whichever one works for you consistently.<P>
Names are another area of readability that I have harped on in the past. I have just started teaching OSF UNIX internals, since it is now becoming available. Much of the kernel has been adopted from BSD. It is quite clear from the code which parts have been added. The BSD code (which was written with an eight character name limit) and the OSF code (with a 32 character limit) stand distinctly apart.<P>
New OSF system calls include <I>task_set_special_port()</I> and <I>thread_suspend()</I>. Members of the kernel structure <I>vm_object</I> (a virtual memory object) include <I>paging_in_progress, resident_page_count</I>, and <I>con_persist</I>. Code can be read without resorting to an internal associative table in your mind.<P>
As far as whether the Hungarian style (<I>aVeryLongName</I>) or the underscore style (<I>a_very_long_name</I>) is better, I offer the following advice.<P>
Use whichever one you (and your colleagues) agree on. You may note my preference from the examples I use in this column. Schoolday admonitions about following capitalization rules may have something to do with this approach.<P>
<h4><FONT COLOR="#000080"><A name="0264_0143">Readers' Replies<A name="0264_0143"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0264_0144">Word Counting<A name="0264_0144"></FONT></h4></P>
Re the timing programs in August <I>CUJ</I> (<A href="list1.htm">Listing 1</a>)
. There's a bug in your wordcount routine. Suppose it's called with wordcount("one"); It will segfault on the line after the <I>strchr()</I> call. When <I>strchr()</I> returns <I>NULL</I>, then *s will reference an invalid address.<P>
Rich Salz<br>
BBN<P>
The routine, printed here in <A href="list2.htm">Listing 2</a>,
 is not mine, but you are right. It may work on some machines (if there is a <I>0</I> at address zero), but it is wrong in its C.<I>strchr()</I> returns <I>NULL</I> when it does not find the character. In a less concise form, the code might look like <A href="list3.htm">Listing 3</a>.
 A little less conciseness may prevent concision of your program. (KP)<P>
<h4><FONT COLOR="#000080"><A name="0264_0145">Order of Functions<A name="0264_0145"></FONT></h4></P>
In July 1991 Vol 9, No 7, Lyle O. Haga, was asking about the position of <I>main()</I>. I would like to add the following. I discovered while experimenting with device drivers for MS-DOS that the order of functions within a module, and the order of object files in a link command was very useful. A device driver needs to know where it ends, so placing your last function (usually the initializing function) as the last in a module, and the module as the last in the list of objects for linking, enabled me to point to this function, and thus mark the end of the driver.<P>
Another important use of this was writing firmware in parallel C for transputers. Using 3L's parallel C and positioning time critical functions first, they are placed in the transputers local memory, which has a much faster access time than the external memory. Note the configuration file must also reflect that the code should be placed in the local memory and not data.<P>
Adrian Kemp<br>
Bucks, England<P>
You have some good points. If I need to know the length of a function, I usually put some sort of dummy function after it.<P>
In addition to the hardware you mentioned, placement of functions may affect execution time in paged machines. If functions that constantly call each other are spread over a large address space, the number of pages required for efficient program execution (called the "working set") might be significant. On a single-task system, placement has no effect unless the real memory was significantly limited.<P>
On a multi-tasking system, however, a memory hogging program can affect its own execution, either by being swapped out or by requiring other programs to be swapped out. If time and/or space is critical in your program, you should worry about function order. (KP)<P>

<h4><a href="../../../source/1991/nov91/pugh.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
