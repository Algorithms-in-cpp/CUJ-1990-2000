<HTML><HEAD>
<TITLE>November 1991/Doctor C's Pointers/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2</A></h4>
<pre>/* ------------------------------------------------------------ */

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;signal.h&gt;
#include &lt;string.h&gt;

#define EXACT 1                 /* locate_node match flags */
#define INEXACT 2
#define NUMELEM(a) (sizeof(a)/sizeof((a)[0]))

typedef struct node {
       struct node *pfwd;      /* ptr to next node in list */
       struct node *pbwd;      /* ptr to prey node in list */
       void (*process)(unsigned);      /* function to call */
       unsigned priority;      /* function priority */
} Node;

Node *proot_node;       /* start of data list */
Node *pfree_node = NULL;/* next free node */

Node *get_free_node(void);
Node *locate_node(unsigned priority, int match);

void add_node(void);            /* action functions */
void help(void);
void myexit(void);

void proc_cmd(int dummy);

void idle(unsigned);            /* process functions */
void pro1(unsigned);
void pro2(unsigned);
void pro3(unsigned);

/* --------------------------------------------------------------

FUNCTION MAIN:

The dummy header node head_node is allocated and initialized in
the declaration.

A.  Register proc_cmd as the handler for the next SIGINT signal.

B.  Cycle indefinitely through circular list, processing nodes.

-------------------------------------------------------------- */

main()
{
       const Node *pnode;             /* Node just allocated */
       static Node head_node = {
              &amp;head_node,
              &amp;head_node,
              &amp;idle,
              0
       };

/*A*/   pnode = proot_node = &amp;head_node;
       if (signal(SIGINT, proc_cmd) == SIG_ERR) {
              fprintf(stderr, "can't register handler\n");
              exit(EXIT_FAILURE);
       }

/*B*/    while (1) {
              (*pnode-&gt;process)(pnode-&gt;priority);
              pnode = pnode-&gt;pfwd;
       }

       return(EXIT_SUCCESS);
}

/* End of File */
</pre>
</BODY>
</HTML>
