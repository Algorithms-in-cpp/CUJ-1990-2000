


<HTML>
<HEAD>

<TITLE>November 1991/Standard C</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocnov.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Standard C<A name="025E_013B"><A name="025E_013B"></font></h2><P>
<h3 align="center"><A name="025E_0000"><A name="025E_0000">The Header &lt;<I>stdarg. h</I>&gt;</h3><P>
<h3 align="center"><font color="#800000">P.J. Plauger</font></h3><hr><blockquote><P>
<P><i><A name="025E_0000"><A name="025E_0000">P.J. Plauger is senior editor of The C Users Journal. He is secretary of the ANSI C standards committee, X3J11, and convenor of the ISO C standards committee, WG14. His latest book is The Standard C Library, published by Prentice-Hall. You can reach him at <I>PJP@wsa.oz; or uunet!munnari!wsa.oz!pjp.</I></i></P><P>
One of the great powers of C is that it lets you define functions that accept a variable argument list. Other languages have such creatures, to be sure, but the number of such functions is fixed. All are special functions built into the language. You cannot define additional ones.<P>
To access the additional arguments in a variable argument list, you need the macros defined in &lt;<I>stdarg.h</I>&gt;. They let you walk along the list of extra arguments from beginning to end as often as you like. You must know the type of each argument before you encounter it. But you need not know the particulars of any given call before it occurs. You can determine the number and types of arguments from one of the fixed arguments, for example, such as a format string.<P>
The header &lt;<I>stdarg.h</I>&gt; is an invention of committee X3J11. It is based heavily on the header &lt;<I>varargs.h</I>&gt; that was developed as part of the Berkeley enhancement to the UNIX operating system. &lt;<I>varargs.h</I>&gt; was one of several contemporaneous attempts at isolating implementation dependencies in walking variable argument lists. It was also one of the most widely known. The idea was to make a common operation more portable by hiding differences inside macros.<P>
In the early days, no such hiding was necessary. C was a language for the PDP-11, period. Everyone knew how Dennis Ritchie's compiler laid out an argument list in memory. Walking from argument to argument was a simple exercise in pointer arithmetic. It helped that pointers were the same size as <I>ints</I> and that structures were not yet permitted as arguments. That meant that an argument could be treated as either an <I>int</I>, a <I>long</I>, or a <I>double</I>. Since <I>double</I> has the same storage alignment as <I>int</I> on the PDP<B>-</B>11, there was no worry about holes left in the argument list to ensure proper storage alignment.<P>
The advent of structure arguments and pointers of varied sizes made life messier. Even if you had no interest in writing portable code, you still wanted it to be readable. That increased the demand for notation that could hide the messy details of walking a variable argument list.<P>
Then along came implementations of C designed to work with older programming languages such as FORTRAN. It was sometimes necessary for such implementations to use a calling sequence that differed dramatically from that used on the PDP-11. Argument lists sometimes grew downward in memory instead of upward. Some involved intermediate pointers to the actual argument values. Hiding the details of accessing an argument moved from being a convenience to a necessity.<P>
Committee X3J11 felt obliged to change the Berkeley macros in several small ways. For this reason, the C Standard specifies the standard header with a new name. &lt;<I>stdarg.h</I>&gt; differs just enough from &lt;<I>varargs.h</I>&gt; to confuse programs (and programmers) that use the older header. The committee debated ways to make the capabilities of &lt;<I>stdarg.h</I>&gt; more a part of the language. In the end, however, the committee elected to leave as macros the mechanisms for walking a variable argument list.<P>
What X3J11 did instead was endeavor to generalize the macros as much as possible. The idea was to define the macros in such a way that all known implementations of C could conform without major change. Some implementations had to alter their translators to provide critical information or operations. Most, however, can support &lt;<I>stdarg.h</I>&gt; with no help from the translator proper.<P>
Some of the restrictions imposed on the macros defined in &lt;<I>stdarg.h</I>&gt; seem unnecessarily severe. For some implementations, they are. Each was introduced, however, to meet the needs of at least one serious C implementation. For example:<P>
<UL><li>A function must declare at least one fixed argument. The macro <I>va_start</I> refers to the last of the fixed arguments so that it can locate the variable argument list. </li>
<li>You cannot specify argument types in <I>va_arg</I> that "widen" in the absence of a function prototype. You must write <I>double</I>, for example, instead of <I>float</I>. The macros cannot replicate the rules for altering argument types that apply to a variable argument list.</li>
<li>You can write only certain argument types in <I>va_arg</I>. Many macro implementations generate a related pointer type by textually appending a *. The rules for writing types in C are notoriously introverted &#151; and much too twisty for such a simple recipe to work right all the time.</li>
<li>A function must execute <I>va_end</I> before it returns to its caller. Some implementations must tidy up control information before a return can occur.</li></UL>
All in all, however, the macros defined in &lt;<I>stdarg.h</I>&gt; work well enough. And they offer a serivce which is uniquely powerful among modern programming languages.<P>
<h4><FONT COLOR="#000080"><A name="025E_013C">What The C Standard Says<A name="025E_013C"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="025E_013D">7.8 Variable arguments &lt;<B><I>stdarg. h</I></B>&gt;<A name="025E_013D"></FONT></h4></P>
The header &lt;<I>stdarg.h</I>&gt; declares a type and defines three macros, for advancing through a list of arguments whose number and types are not known to the called function when it is translated.<P>
A function may be called with a variable number of arguments of varying types. As described in 7.7.1, its parameter list contains one or more parameters. The rightmost parameter plays a special role in the access mechanism, and will be designated <I>parmN</I> in this description.<P>
The type declared is<P>
<pre>va_list</pre>
which is a type suitable for holding information needed by the macros <I>va_start</I>, <I>va_arg</I>, and <I>va_end</I>. If access to the varying arguments is desired, the called function shall declare an object (referred to as <I>ap</I> in this subclause) having type <I>va_list</I>. The object <I>ap</I> may be passed as an argument to another function; if that function invokes the <I>va_arg</I> macro with parameter <I>ap</I>, the value of <I>ap</I> in the calling function is indeterminate and shall be passed to the <I>va_end</I> macro prior to any further reference to <I>ap</I>.<P>
<h4><FONT COLOR="#000080"><A name="025E_013E">7.8.1 Variable argument list access macros<A name="025E_013E"></FONT></h4></P>
The <I>va_start</I> and <I>va_arg</I> macros described in this subclause shall be implemented as macros, not as actual functions. It is unspecified whether <I>va_end</I> is a macro or an identifier declared with external linkage. If a macro definition is suppressed in order to access an actual function, or a program defines an external identifier with the name <I>va_end</I>, the behavior is undefined. The <I>va_start</I> and <I>va_end</I> macros shall be invoked in the function accepting a varying number of arguments, if access to the varying arguments is desired.<P>
<h4><FONT COLOR="#000080"><A name="025E_013F">7.8.1.1 The <B><I>va_start</I></B> macro<A name="025E_013F"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="025E_0140">Synopsis<A name="025E_0140"></FONT></h4></P>
<pre>#include &lt;stdarg.h&gt;
void va_start(va_list ap, <I>parmN</I>);</pre>
<h4><FONT COLOR="#000080"><A name="025E_0141">Description<A name="025E_0141"></FONT></h4></P>
The <I>va_start</I> macro shall be invoked before any access to the unnamed arguments.<P>
The <I>va_start</I> macro initializes <I>ap</I> for subsequent use by <I>va_arg</I> and <I>va_end</I>.<P>
The parameter <I>parmN</I>  is the identifier of the rightmost parameter in the variable parameter list in the function definition (the one just before the, ...). If the parameter <I>parmN</I> is declared with the <I>register</I> storage class, with a function or array type, or with a type that is not compatible with the type that results after application of the default argument promotions, the behavior is undefined.<P>
<h4><FONT COLOR="#000080"><A name="025E_0142">Returns<A name="025E_0142"></FONT></h4></P>
The <I>va_start</I> macro returns no value.<P>
<h4><FONT COLOR="#000080"><A name="025E_0143">7.8.1.2 The <B><I>va_arg</I></B> macro<A name="025E_0143"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="025E_0144">Synopsis<A name="025E_0144"></FONT></h4></P>
<pre>#include &lt;stdarg.h&gt;
type va_arg(va_list ap, type);</pre>
<h4><FONT COLOR="#000080"><A name="025E_0145">Description<A name="025E_0145"></FONT></h4></P>
The <I>va_arg</I> macro expands to an expression that has the type and value of the next argument in the call. The parameter <I>ap</I> shall be the same as the <I>va_list ap</I> initialized by <I>va_start</I>. Each invocation of <I>va_arg</I> modifies <I>ap</I> so that the values of successive arguments are returned in turn. The parameter <I>type</I> is a type name specified such that the type of a pointer to an object that has the specified type can be obtained simply by postfixing a * to <I>type</I>. If there is no actual next argument, or if <I>type</I> is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.<P>
<h4><FONT COLOR="#000080"><A name="025E_0146">Returns<A name="025E_0146"></FONT></h4></P>
The first invocation of the <I>va_arg</I> macro after that of the <I>va_start</I> macro returns the value of the argument after that specified by <I>parmN</I>. Successive invocations return the values of the remaining arguments in succession.<P>
<h4><FONT COLOR="#000080"><A name="025E_0147">7.8.1.3 The <B><I>va_end</I></B> macro<A name="025E_0147"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="025E_0148">Synopsis<A name="025E_0148"></FONT></h4></P>
<pre>#include &lt;stdarg.h&gt;
void va_end(va_list ap);</pre>
<h4><FONT COLOR="#000080"><A name="025E_0149">Description<A name="025E_0149"></FONT></h4></P>
The <I>va_end</I> macro facilitates a normal return from the function whose variable argument list was referred to by the expansion of <I>va_start</I> that initialized the <I>va_list ap</I>. The va_end macro may modify ap so that it is no longer usable (without an intervening invocation of <I>va_start</I>). If there is no corresponding invocation of the <I>va_start</I> macro, or if the va_end macro is not invoked before the return, the behavior is undefined.<P>
<h4><FONT COLOR="#000080"><A name="025E_014A">Returns<A name="025E_014A"></FONT></h4></P>
The <I>va_end</I> macro returns no value.<P>
<h4><FONT COLOR="#000080"><A name="025E_014B">Example<A name="025E_014B"></FONT></h4></P>
The function <I>f1</I> gathers into an array a list of arguments that are pointers to strings (but not more than <I>MAXARGS</I> arguments), then passes the array as a single argument to function <I>f2</I>. The number of pointers is specified by the first argument to <I>f1</I>.<P>
<pre>#include &lt;stdarg.h&gt;
#define MAXARGS     31

void f1(int n_ptrs, ....)
{
   va_list ap;
   char *array[MAXARGS];
   int ptr_no = 0;

   if  (n_ptrs &gt; MAXARGS)
      n_ptrs = MAXARGS;
   va_start(ap, n_ptrs);
   while (ptr_no &lt; n_ptrs)
      array[ptr_no++] = va_arg(ap, char *);
   va_end (ap);
   f2(n_ptrs, array);
}</pre>
Each call to <I>f1</I> shall have visible the definition of the function or a declaration such as<P>
<pre>void f1(int, ....);</pre>
<h4><FONT COLOR="#000080"><A name="025E_014C">Using &lt;<B><I>stdarg. h</I></B>&gt;<A name="025E_014C"></FONT></h4></P>
You use the macros defined in &lt;<I>stdarg.h</I>&gt; to walk a variable argument list. The macros must accommodate the needs of diverse implementations. Hence they come with a number of caveats:<P>
<UL><li>You must declare a function explicitly as having a variable argument list. (Call it <I>f</I>.) That means its argument list must end in ellipsis (, ...), both in its definition and any declarations. Moreover, all calls to the function must be in scope of a function prototype that declares the function this way.</li>
<li>You must declare the function with at least one fixed argument. The last of these fixed arguments is conventionally referred to as <I>parmN</I>.</li>
<li>You must declare a data object of type <I>va_list</I>, conventionally called <I>ap</I>. The data object must, of course, be visible within the function.</li>
<li>You must execute <I>va_start(ap, parmN)</I><I> within </I><I>f</I>. You must not execute <I>va_list</I><I> or </I><I>va_end</I> until you do so. </li>
<li>You can then execute <I>va_arg(ap,</I><I><B>T)</I></B> in the function or in any of the functions that it calls. You must specify the proper types for each of the arguments, of course, and in the order that they appear in the function call. Note that <I>va_arg</I> is an rvalue macro. You cannot use the macro invocation as an 1value to alter the value stored in the argument data object.</li>
<li>You must not write a type <I>T</I> that widens when passed as an argument. Replace <I>float</I> with <I>double</I>. Replace <I>char</I>, <I>signed char, unsigned char, short</I>,and <I>unsigned short</I> with either <I>int</I> or <I>unsigned int</I>. Use <I>unsigned int</I> for an <I>unsigned short</I> that is the same size as <I>int</I>. <I>Rarer still, use</I> <I>unsigned int</I> for a character type that represents no negative values and is the same size as <I>int</I>.</li>
<li>You must write only a type <I>T</I> that can be converted to a pointer type by appending a *. For example, the type designators <I>int</I> and <I>char</I> * are valid. The type designator <I>char</I> <I>(*) [5]</I> is not. As a general rule, be wary of type designators that contain parentheses or brackets.</li>
<li>You must execute <I>va_end</I> within <I>f</I> if you earlier executed <I>va_start</I>. Once you execute <I>va_end</I> you must not again execute <I>va_arg</I> unless you first execute <I>va_start</I> to initiate a rescan. In that case, you must execute <I>va_end</I> again before the function returns.</li></UL>
If all that sounds too negative, consider a positive example instead. Here is a function that generalizes the function <I>fputs</I>, declared in &lt;<I>stdio.h</I>&gt;. That function writes a single null-terminated string to an output stream that you designate, as in:<P>
<pre>fputs("this is a test", stdout);</pre>
This function, called <I>va_fputs</I>, writes an arbitrary number of strings to a given stream, as in:<P>
<pre>va_fputs(stdout, "this is", "a test", NULL);</pre>
In this example, both functions should produce the same output to the stream <I>stdout</I>.<P>
You can write <I>va_fputs</I> as:<P>
<pre>include &lt;stdarg.h&gt;
#include &lt;stdout.h&gt;

int va_fputs(FILE *str, ...)
     {    /* write zero or more strings */
     char *s;
     va_list va_list ap;

     va_start(ap, str);
     while (s = va_arg(ap, char *))
          if (fputs(str, s) &lt; 0)
               return (EOF); /* write error */
     va_end (ap);
     return (0);    /* all writes successful */
     }</pre>
You can follow this pattern to process a wide range of variable argument lists. You can even process the variable argument list in a separate function. Be sure to execute <I>va_start</I> before you call the function. Then execute <I>va_end</I> when the function returns.<P>
If you want to rescan a variable argument list you have to be a bit more careful. Execute <I>va_start</I> to initiate each rescan, of course. Execute <I>va_end</I> before the function returns, and <I>only</I> if you execute <I>va_start</I> at least once. I recommend an even safer discipline &#151; execute <I>va_start</I> and <I>va_end</I> within the same loop. That way, you are more certain to execute <I>va_end</I> only when you should.<P>
Many implementations have no need for <I>va_end</I>. The macro expands to code that does nothing. That means that any errors in using this macro become time bombs that may not go off for years. They get more expensive to find and fix with each passing year. Take pains to eliminate the bugs up front.<P>
Another danger lurks in calling a function with the argument <I>ap</I> (the data object of type <I>va_list</I>). In some implementations, it may be an array type. That means that the function parameter actually becomes a pointer to the first element of the <I>va_list</I> array. When the called function executes <I>va_arg</I>, the data object changes in the calling function (called <I>f</I> above).<P>
In other implementations, <I>va_list</I> is not an array type. That means that the argument <I>ap</I> passes by value as it appears to do. When the called function executes <I>va_arg</I>, the data object in the calling function <I>f</I> does <I>not</I> change.<P>
If you process all arguments in the called function, the difference doesn't matter. If you execute <I>va_arg</I> in different function invocations with the "same" <I>ap</I>, however, it can matter. In fact, you get in trouble if your code requires that the <I>va_list</I> data object be shared or if it requires that the data object <I>not</I> be shared.<P>
You can ensure the behavior that you need:<P>
<UL><li>If the <I>va_list</I> data object <I>must</I> be shared, write the argument as <I>&amp;ap</I>. Declare the corresponding parameter as <I>va_list</I> *<I>pap</I>. Within the function, execute <I>va_arg(*pap</I>, <I>T</I>) to access each argument in the variable argument list. </li>
<li>If the <I>va_list</I> data object <I>must not</I> be shared, write the argument as <I>ap</I>. Declare the corresponding parameter as <I>va_list xap</I>. Within the function, declare a data object as <I>va_list ap</I> and execute <I>memcpy(ap, xap, sizeof (va_list))</I>. (<I>memcpy </I>is declared in<I> &lt;string.h&gt;</I>.) Execute <I>va_arg(ap</I>, <I>T</I>) to access each argument in the variable argument list.</li></UL>
These two recipes will work regardless of the type defined for <I>va_list</I>.<P>
<h4><FONT COLOR="#000080"><A name="025E_014D">Implementing &lt;<B><I>stdarg.h</I></B>&gt;<A name="025E_014D"></FONT></h4></P>
<A href="list1.htm">Listing 1</a>
shows the file <I>stdarg.h</I>. It is the only code needed to implement &lt;<I>stdarg.h&gt;</I>. That's assuming that it can be made to work with a given implementation of Standard C.<P>
The approach assumes that:<P>
<UL><li>A variable argument list occupies a contiguous array of characters in memory.</li>
<li>Successive arguments occupy successively higher elements of the character array.</li>
<li>The space occupied by an argument begins on a storage boundary that is some multiple of 2<I>N</I> bytes.</li>
<li>The size of the space is the smallest multiple of 2<I>N</I> bytes that can represent the argument.</li>
<li>Any "hole" left in the space is always at the beginning or always at the end of the argument data object.</li></UL>
These assumptions hold for many implementations of Standard C.<P>
As usual, I use the internal header &lt;<I>yvals.h</I>&gt; to define macros that describe variations among different systems. For the header &lt;<I>stdarg. h</I>&gt;, two parameters are relevant:<P>
<UL><li>_AUPBND is a mask that determines the storage boundary enforced within the variable argument list. Its value is 2<I>N</I>-1.</li>
<li>_<I>ADNBND</I> is a mask that determines whether the hole is at the beginning or at the end of an argument data object. Its value is 2<I>N</I>-1 if the hole is at the end, otherwise it is zero.</li></UL>
A simple example is the Borland Turbo C++ compiler. For that implementation, the header &lt;<I>yvals.h</I>&gt; contains the definitions:<P>
<pre>#define _AUPBND  1
#define _ADNBND  1</pre>
I discovered the need for specifying a hole <I>before</I> an argument with the GNU C compiler for the Sun UNIX workstation. For that system, _<I>AUPBND</I> has the value 3, but _<I>ADNBND</I> is zero.<P>
Perhaps now you can understand the trickery involved in writing <I>starg.h.</I> The type <I>va_list</I> is just a pointer to <I>char</I>. Such a data object holds a pointer to the start of the next argument space.<P>
The macro <I>va_start</I> skips past the named argument, which should be the last of the fixed arguments. It uses the internal macro _<I>Bnd</I> to round up the size of its argument to a multiple of 2<I>N</I> bytes.<P>
The macro <I>va_arg</I> is the trickiest of the lot. It begins by incrementing the contents of the <I>va_list</I> data object to point to the start of the next argument space. Then it backs up to point to the beginning of the current argument. Then it type casts that pointer value to be a pointer to the specified type. Its last act is to dereference the pointer to access the value stored in the data object. (In this implementation, <I>va_arg</I> is an lvalue. Don't count on that being true of others.)<P>
The macro <I>va_end</I> has nothing to do in this implementation. It expands to the place-holder expression (<I>void</I>)<I>0</I>.<P>
<h4><FONT COLOR="#000080"><A name="025E_014E">Conclusion<A name="025E_014E"></FONT></h4></P>
Perhaps &lt;<I>stdarg.h</I>&gt; could have been made cleaner. Perhaps not. In any event, it appears to be clean enough, if you don't try to get too clever with the macros it defines. And it does offer a service unique among programming languages.<P>
This article is excerpted from P.J. Plauger, The Standard C Library, (Englewood Cliffs, N.J.: Prentice-Hall 1992).<P>

<h4><a href="../../../source/1991/nov91/plauger.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
