<HTML><HEAD>
<TITLE>November 1991/Doing Fractions in C++/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1</A></h4>
<pre>#include &lt;iostream.h&gt;
#include &lt;math.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;conio.h&gt;

#ifndef TRUE
#define TRUE 1
#endif

#ifndef FALSE
#define FALSE 0
#endif

class gcd_cls { // base class
        unsigned long u,v,r;
public:
        unsigned long gcd (unsigned long a,unsigned long b);

};
class fraction : private gcd_cls { //derived class with private access
                             //to gcd_cls function gcd()
        long n,np;
public:
        fraction operator+(fraction d); //overload +
        fraction operator-(fraction d); //overload -
        fraction operator*(fraction d); //overload *
        fraction operator/(fraction d); //overload /
        fraction operator=(fraction d); //overload =
        char operator&lt;(fraction &amp;d); //overload less than
        char operator&gt;(fraction &amp;d); //overload greater than
        char operator==(fraction &amp;d); //overload ==
        char operator!=(fraction &amp;d); //overload !=
        void swap (fraction &amp;a,fraction &amp;b);
        friend ostream &amp;operator&lt;&lt;(ostream &amp;stream, fraction &amp;x);
        friend istream &amp;operator&gt;&gt;(istream &amp;stream, fraction &amp;x);
};

unsigned long gcd_cls :: gcd (unsigned long a,unsigned long b)
{
        ldiv_t r;  //use special div functions for longs
                 //requires correct type structure

        u=labs(a); //make sure argument is a positive number
        v=labs(b); //ditto second argument
        if (v==0)
                return u;
        while (v!=0) {
                r=ldiv(u,v);
                u=v;
                v=r.rem;
        }
        return u;
}
ostream &amp;operator&lt;&lt;(ostream &amp;stream, fraction &amp;x)
{
        if (x.n==0 &amp;&amp; x.np==1) // Trap 0/1 as zero
                stream &lt;&lt; "Zero" ;
        else {
                stream &lt;&lt; x.n;
                stream &lt;&lt; '/';
                stream &lt;&lt; x.np;
        }

        return stream;
}
istream &amp;operator&gt;&gt;(istream &amp;stream, fraction &amp;x)
{
        int col,col2,row;

        col=wherex(); //get col current location
        row=wherey(); //get current row

        gotoxy (col+5,row); //go foward 5 spaces, print slash
        cout &lt;&lt; '/';
        col2=wherex();
        gotoxy (col,row); //go back
        stream &gt;&gt; x.n;     // get numerator
        gotoxy (col2,row-1); // go right of slash
        stream &gt;&gt;x.np;     //get denominator
        return stream;
}

fraction fraction :: operator=(fraction x) //overload =
{
        n=x.n;
        np=x.np;
        return (*this);
}

char fraction :: operator&lt;(fraction &amp;x) // overload less than
{
        fraction temp;

        temp=*this-x;
        if (temp.n&lt;0)
                return TRUE;
        else
                return FALSE;

}

char fraction :: operator&gt;(fraction &amp;x) //overload greater than
{ 
        if ( !(*this&lt;x || *this==x) )
                return TRUE;
        else
                return FALSE;
}

char fraction :: operator!=(fraction &amp;x) //overload !=
{
        if ((n!=x.n) || (np!=x.np))
               return TRUE;
        else
               return FALSE;
}

char fraction :: operator==(fraction &amp;x) //overload ==
{
        if((n==x.n) &amp;&amp; (np==x.np))
               return TRUE;
        else
               return FALSE;
}
fraction fraction :: operator+(fraction x) // overload +
{
        fraction w;
        long d1,t,d2;

        d1=gcd(np,x.np);
        if (d1==1) {
                w.n=(n*x.np)+(np*x.n);
                w.np=(np*x.np);
                return w;
        }
        if (d1&gt;1) {
                t=n*(x.np/d1)+x.n*(np/d1);
                d2=gcd(t,d1);
                w.n=t/d2;
                w.np=(np/d1)*(x.np/d2);
                return w;
        }
}
fraction fraction :: operator-(fraction x) // over load -
{
        fraction w,tmpa,tmpb;
        long d1,t,d2;


        tmpa=*this;
        tmpb=x;

        d1=gcd(tmpa.np,tmpb.np);
        if (d1==1) {
                w.n=(tmpa.n*tmpb.np)-(tmpa.np*tmpb.n);
                w.np=(tmpa.np*tmpb.np);
                return w;
        }
        if (d1&gt;1) {
                t=n*(tmpb.np/d1)-tmpb.n*(tmpa.np/d1);
                d2=gcd(t,d1);
                w.n=t/d2;
                w.np=(tmpa.np/d1)*(tmpb.np/d2);
                return w;
        }
}

fraction fraction :: operator*(fraction x) //overload *
{
        fraction temp;
        long d;
        d=gcd(n*x.n,np*x.np);
        temp.n=n*x.n / d;
        temp.np=np*x.np/d;
        return temp;
}

fraction fraction :: operator/(fraction x) //overload /
{
        fraction temp,tmp2;
        // first we will invert
        temp.n=x.np;
        temp.np=x.n;
        //now we will multiply
        tmp2=temp* *this;
        return tmp2;
}

void fraction :: swap (fraction &amp;a, fraction &amp;b)
{
        fraction temp;
        temp=a;
        a=b;
        b=temp;
}

void main(void)
{
        fraction a,b,c;
        char ch;

        cout &lt;&lt; "\nEnter fraction a: ";
        cin &gt;&gt; a;
        cout &lt;&lt; "\nEnter fraction b: ";
        cin &gt;&gt; b;
        c=a+b;
        cout &lt;&lt; "\nAdd" &lt;&lt; c;
        c=a-b;
        cout &lt;&lt; "\nsub" &lt;&lt; c;
        c=a*b;
        cout &lt;&lt; "\nMult" &lt;&lt; c;
        c=a/b;
        cout &lt;&lt; "\nDiv "&lt;&lt; c;
        if (a&lt;b) cout &lt;&lt; "\n" &lt;&lt; a &lt;&lt;" is less than" &lt;&lt; b;
        if (b&lt;a) cout &lt;&lt; "\n" &lt;&lt; b &lt;&lt;" is less than" &lt;&lt; a;
        if (a&gt;b) cout &lt;&lt; "\n" &lt;&lt; a &lt;&lt;" is greater than "&lt;&lt; b;
        if (b&gt;a) cout &lt;&lt; "\n" &lt;&lt; b &lt;&lt;" is greater than "&lt;&lt; a;
        if (b==a) cout &lt;&lt; "\nFractions are equal";
        if (a!=b) cout &lt;&lt; "\nFractions are not equal";

}

// End of File</pre>

</BODY>
</HTML>
