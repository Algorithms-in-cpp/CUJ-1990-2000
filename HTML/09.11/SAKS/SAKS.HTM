


<HTML>
<HEAD>

<TITLE>November 1991/Stepping Up To C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocnov.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Stepping Up To C++<A name="0262_013F"><A name="0262_013F"></font></h2><P>
<h3 align="center"><A name="0262_0000"><A name="0262_0000">Function Name Overloading</h3><P>
<h3 align="center"><font color="#800000">Dan Saks</font></h3><hr><blockquote><P>
<P><i><A name="0262_0000"><A name="0262_0000">Dan Saks is the owner of Saks &amp; Associates, which offers consulting and training in C, C++ and Pascal. He is also a contributing<I></I> <I></I>editor of TECH. Specialist. He serves as secretary of the ANSI C++ committee and is a member of the ANSI C committee. Readers<I></I> <I></I>can write to him at 287 W. McCreight Ave., Springfield, OH 45504 or by email at dsaks@wittenberg.edu.<I></I></i></P><P>
Many C libraries contain groups of closely related functions that perform essentially the same operation but on operands of different types. For example, the Standard C library functions include a family of "put" functions declared in <I>&lt;stdio.h&gt;</I>:<P>
<pre>int putc(int c);
int fputc(int c, FILE *stream);
int puts(const char *);
int fputs(const char *s, FILE *stream);</pre>
All of these functions write something to a stream; however, they differ in the type of thing they write and how they determine the stream. <I>putc</I> and <I>fputc</I> write a single character (passed as an <I>int</I>), while <I>puts</I> and <I>fputs</I> write each character of a null-terminated string. <I>fputc</I> and <I>fputs</I> require that the caller specify the output stream explicitly; <I>putc</I> and <I>puts</I> assume the stream is <I>stdout</I>.<P>
Even though functions in a closely related family have different names and implementations, programmers often refer to the functions as if they all had the same name. In fact, belaboring the physical distinction between logically similar operations introduces unnecessary detail into most discussions. Often, you simply refer to the operation by its logical name, e.g. <I>put</I>, and disambiguate the operation (if necessary) by specifying the type(s) of the operand(s), e.g., <I>character</I> or <I>string</I>.<P>
For example, you rarely hear C programmers say "I putc-ed the character" or "I puts-ed the string". Rather, they say "I put the character" or "I put the string". C programmers understand that putting a character and putting a string are performed by physically distinct functions, and they have no reason to keep reminding each other that this is so.<P>
Nonetheless, the C programming language insists that each function have a unique name. More precisely, neither two functions declared in the same scope nor two functions with external linkage in the same program can have the same name. These restrictions add to the burden of both developers and users of C language libraries. Developers must think up function names with sometimes arbitrary variations in their spellings, while users must learn these various names or keep looking them up.<P>
C++ alleviates this burden by letting you "overload" function names, that is, declare more than one function with the same name in the same scope. Function name overloading lets you create programs and libraries using function names that accurately reflect the way you'd like to deal with function names. This month's column explains how to declare and use overloaded functions.<P>
<h4><FONT COLOR="#000080"><A name="0262_0140">Overloading Basics<A name="0262_0140"></FONT></h4></P>
Overloading function names in C++ requires no special effort. You declare overloaded functions as you would any other functions. (Early editions of C++ required a separate declaration using the keyword <I>overload</I>. Many C++ compilers support, but no longer require, this anachronism.)<P>
For example, you can implement the four <I>stdio.h</I> output functions listed above as four overloaded functions named <I>put</I>:<P>
<pre>// putc:
int put(int c);
// fputc:
int put(int c, FILE *stream);
// puts:
int put(const char *s);
// fputs:
int put(const char *s, FILE *stream);</pre>
When the compiler encounters a call on a function named put, it selects the appropriate function to call by matching the type(s) of the actual argument(s) in the call against the type(s) of the formal parameter(s) in one of the declarations. For example,<P>
<pre>put('a', stdout);</pre>
calls the function declared as<P>
<pre>int put(int c, FILE *stream);</pre>
and<P>
<pre>put("Hello, World\n");</pre>
calls<P>
<pre>int put(const char *s);</pre>
A call such as<P>
<pre>put("Fatal Error #", n, stderr);</pre>
produces a compile error, because none of the declarations for <I>put</I> accepts three arguments. However, the actual argument(s) need not match the formal argument(s) exactly; the compiler applies some promotions and conversions in an attempt to find a match. For example,<P>
<pre>char c;
. . .
put(c);</pre>
calls<P>
<pre>void put(int c);</pre>
because <I>char</I> promotes to <I>int</I>. The rules for argument matching are quite detailed, and have changed over the years. For the moment, I'll stay with simpler examples where the matching is straightforward.<P>
The Standard C library provides another example where overloading is useful. <I>&lt;stdlib.h&gt;</I> defines two functions that compute absolute values:<P>
<pre>int abs(int j);
long labs(long j);</pre>
and <I>&lt;math.h&gt;</I> defines another:<P>
<pre>double fabs(double x);</pre>
You might reasonably expect that <I>fabs</I> operates on <I>float</I>s rather than <I>double</I>s, and that the absolute value function for <I>double</I>s would be called <I>dab</I>s. However, for historical reasons, <I>fabs</I> operates on arguments of type <I>double</I>. Traditional (K &amp; R) C performs all <I>float</I> arithmetic in <I>double</I> precision, and promotes <I>float</I> function arguments to <I>double</I>, so all the &lt;<I>math.h</I>&gt; functions accept and return arguments of type <I>double</I>.<P>
A Standard C implementation may compute <I>float</I> expressions in <I>float</I> precision, so some applications may need a version of <I>fabs</I> that accepts and returns a <I>float</I>. Also, Standard C supports <I>long double</I> operands, so applications using <I>long double</I> might need a <I>long double</I> version of <I>abs</I>. In anticipation of these needs, the C standard reserves all the function names declared in <I>&lt;math.h&gt;</I> suffixed with either <I>f</I> or <I>l</I> for naming the corresponding math functions with <I>float</I> and <I>long double</I> operands and return values. In the case of <I>fabs,</I> the reserved names are <I>fabsf</I> and <I>fabsl</I>.<P>
Using C++, you can avoid these naming complexities by simply overloading the desired forms of <I>abs</I>:<P>
<pre>int abs(int j);
long abs(long j);
float abs(float x);
double abs(double x);
long double abs(long double x);</pre>
To some extent, a macro such as<P>
<pre>#define abs(i) ((i) &gt;= 0 ? (i) : -(i))</pre>
also solves the naming problem. This single macro definition computes the absolute value for any arithmetic type. But, as I mentioned when I first introduced inlines ("Rewriting Modules as Classes," <I>CUJ</I>, July 1991), macro calls can have unwanted side-effects. For example, the call<P>
<pre>y = abs(*p++)</pre>
expands to<P>
<pre>y = ((*p++) &gt;= 0 ? (*p++) : -(*p++))</pre>
which increments <I>p</I> twice. Standard C doesn't permit this implementation for <I>abs, labs</I> and <I>fabs</I>.<P>
In C++, declare your overloaded <I>abs</I> functions as inlines, as in<P>
<pre>inline float abs(float x)
   {
   return x &gt;= 0 ? x : -x;
   }</pre>
Since an inline function evaluates its actual argument(s) only once (at the call), a full set of overloaded inline <I>abs</I> functions provides the naming simplicity and efficiency of a macro, without the unwanted side-effects.<P>
<h4><FONT COLOR="#000080"><A name="0262_0141">Function Signatures<A name="0262_0141"></FONT></h4></P>
C distinguishes functions by their names only. Obviously, since C++ allows overloading, names no longer uniquely identify functions. C++ distinguishes functions by their names and signatures.<P>
The signature of a function is the sequence of types in its formal parameter list. For example, the signature of<P>
<pre>int fputs(const char *s, FILE *stream);</pre>
is<P>
<pre>(const char *, FILE *)</pre>
and the signature of<P>
<pre>float abs(float);</pre>
is just<P>
<pre>(float)</pre>
The formal argument names aren't part of the signature. Thus<P>
<pre>int put(int);
int put(int i);
int put(int n);</pre>
all have the same signature. As in C, a function declaration that has the same signature as a previously declared function is simply a redeclaration, not an overloading, of that function.<P>
Note that<P>
<pre>int put();
int put(int);</pre>
refer to the same function in C, but to distinct overloaded functions in C++. In C, a function with an empty argument list has an unspecified argument list. Such a function is compatible with any other declaration for a function with the same name and return type, even a declaration with a non-empty argument list. However, in C++,<P>
<pre>int put();</pre>
is equivalent to<P>
<pre>int put(void);</pre>
which clearly has a different signature than<P>
<pre>int put(int);</pre>
<I>typedef</I> names do not create distinct types; they are aliases for existing types. C++ turns <I>typedef</I> names into their equivalent types when computing signatures. Thus, for example, in<P>
<pre>typedef int INT;
. . .
int put(int);
int put(INT);</pre>
both functions have the same signature.<P>
Class members' functions can be overloaded just like non-member functions. In my last column ("Reference Types," <I>CUJ</I>, September, 1991), I introduced a rudimentary <I>string</I> class that used overloaded constructors (although I never called them "overloaded"). I will examine those constructors more closely, and extend the class with additional overloaded member functions.<P>
<h4><FONT COLOR="#000080"><A name="0262_0142">A <B><I>String</I></B> Class<B><A name="0262_0142"></B></FONT></h4></P>
When I introduced the <I>string</I> class last time, I didn't provide any rationale for it. Since <I>string</I> classes are among the most popular C++ programming examples, and one I will use in future columns, I should back up a little and explain them more fully.<P>
C provides extremely limited support for strings. The language recognizes string literals, and the library provides a modest set of string operations, and that's about it. Each C application must adopt its own policy for managing string memory and keeping string operations from writing beyond that memory.<P>
The library string functions are fairly lax about safety. For example, <I>strcat</I> and <I>strcpy</I> will write past the end of the storage actually allocated for string with nary a peep. <I>strncat</I> and <I>strncpy</I> are safer, but a little less convenient. An application that uses <I>strncat</I> and <I>strncpy</I> must cart around maximum string lengths with each string. None of the C library functions extends the destination string if it's too short to hold the result, nor do they provide any direct indication that some characters at the end of the result were discarded.<P>
A well-written C++ <I>string</I> class provides a safe, flexible, and space-efficient alternative to null-terminated strings and the C library string functions. Each string object manages its own memory, and guarantees that string operations don't corrupt data outside that memory. String operations that increase a string's length, like concatenation, automatically allocate more memory if necessary. There are many ways to implement a <I>string</I> class. Stroustrup <a href="#ref1">[1]</a> and Hansen <a href="#ref2">[2]</a> present a sampling of the alternatives.<P>
My <I>String</I> class stores variable-length strings in character arrays allocated from the free store. Each <I>String</I> has a data member <I>str</I> that stores the pointer to the first character in the array, and another member <I>len</I> that stores the array length (plus one for a \<I>0</I> at the end of the string). Each concatenation operation allocates a new, larger character array from the free store, and deletes the old array. The class definition and a small test program appear in <A href="list1.htm">Listing 1</a>.
<P>
<h4><FONT COLOR="#000080"><A name="0262_0143">Overloaded Constructors<A name="0262_0143"></FONT></h4></P>
Class <I>String</I> has two (overloaded) constructors:<P>
<pre>String::String(const char *s);
String::String(const String &amp;s);</pre>
The first constructor initializes a <I>String</I> with a copy of a null-terminated string. The second, a copy constructor, initializes a <I>String</I> with a copy of the text from another <I>String</I>. The type(s) of the argument(s) in an object declaration determine the signature of the constructor, so that<P>
<pre>String s1("hello");</pre>
calls the first constructor to initialize <I>s1</I> with a copy of <I>hello</I>, and<P>
<pre>String s2(s1);</pre>
invokes the second constructor to initialize <I>s2</I> with a copy of <I>s1</I>.<P>
The <I>String</I> class in <A href="list1.htm">Listing 1</a>
doesn't have a default constructor (a class constructor with an empty signature). C++ only creates a default constructor for a class when that class has no explicitly declared constructors. Without a default constructor, a <I>String</I> declaration with no actual arguments, such as<P>
<pre>String s3;</pre>
is an error.<P>
<A href="list2.htm">Listing 2</a>
adds a default constructor to the <I>String</I> class. This constructor initializes a <I>String</I> as an empty string by pointing the str member to an empty string allocated from the free store. Alternatively, the constructor could simply set <I>str</I> to <I>0</I> (a null pointer), but this would complicate the concatenation functions described later.<P>
Please note that there's a big difference between<P>
<pre>String s3;</pre>
and<P>
<pre>String s3();</pre>
The former declares a <I>String</I> object <I>s3</I> using the empty constructor. The latter declares a function <I>s3</I> that accepts no arguments and returns a <I>String</I>.<P>
<h4><FONT COLOR="#000080"><A name="0262_0144">Overloaded Member Functions<A name="0262_0144"></FONT></h4></P>
The <I>String</I> class in <A href="list1.htm">Listing 1</a>
has only a single concatenation function,<P>
<pre>void String::cat(char c);</pre>
that appends a single character to the end of a <I>String</I>. A useful <I>String</I> class should provide for concatenation of at least two other types of operands:<P>
<pre>void String::cat(const char *s);</pre>
which appends a null-terminated string to a <I>String</I>, and<P>
<pre>void String::cat(const String &amp;s);</pre>
which appends one <I>String</I> to another. <A href="list3.htm">Listing 3</a>
shows an implementation of the <I>String</I> class with overloaded <I>cat</I> functions, along with a simple test program that invokes each one.<P>
You can declare the <I>cat</I> function that appends one <I>String</I> to another either with or without a reference parameter. That is, instead of<P>
<pre>void String::cat(const String &amp;s);</pre>
which passes the <I>String</I> by reference, you can use<P>
<pre>void string::cat(String s);</pre>
which passes the <I>String</I> by value. In this case, the choice of signature changes neither the body of the function nor the form of a call to it. However, using a reference argument produces more efficient calls.<P>
In C++, the semantics of argument passing are the same as the semantics of initialization. Each function call creates a new object for each formal parameter by initialization. This means that if the type of a formal parameter is a class with constructor(s), then the function call initializes that parameter by invoking one of those constructors. If the class also has a destructor, then the function return destroys the formal parameter object by invoking that destructor.<P>
Thus, if you defined the <I>cat</I> function as<P>
<pre>void String::cat(String s);</pre>
then each call of the form<P>
<pre>s1.cat(s2);</pre>
uses the <I>String</I> copy constructor to initialize formal parameter <I>s</I> with a copy of <I>s2</I>. The return from <I>cat</I> discards <I>s</I> using the <I>String</I> destructor. These constructor and destructor calls add considerable overhead to each <I>cat </I>call. In contrast, passing a const reference argument simply binds the reference to the actual argument, avoiding both the constructor and destructor calls.<P>
<h4><FONT COLOR="#000080"><A name="0262_0145">Overloading And Return Types<B><A name="0262_0145"></B></FONT></h4></P>
The return type of a function is not part of its signature. Thus you cannot declare<P>
<pre>double f(int);
char *f(int);</pre>
in the same scope. Overloading on return types places an undue burden on the compiler to determine the programmer's intent. Consider this example:<P>
<pre>int n;
. . .
if (f(n))
   . . .</pre>
Since both <I>double</I> and <I>char</I> * expressions are meaningful as the controlling expression of an <I>if</I>, the compiler must make a difficult choice. While it's not impossible to define rules to disambiguate function calls based on return type, I suspect the rules would be either very complicated or unintuitive.<P>
<h4><FONT COLOR="#000080"><A name="0262_0146">Overloading And Scope<B><A name="0262_0146"></B></FONT></h4></P>
All of the overloaded instances of a function with a given name must be declared at the same scope level. Declaring a function with that same name in an inner scope hides the overloaded declarations from the outer scope. The example in <A href="list4.htm">Listing 4</a>
illustrates this behavior.<P>
<A href="list4.htm">Listing 4</a>
defines two functions named <I>put</I> at file scope, one that puts a character and another that puts a null-terminated string. However, <I>main</I> contains a declaration for only one of the <I>put</I> functions - the one that puts a character. The other <I>put</I> function is invisible inside <I>main</I> and the call<P>
<pre>put("hello, world", stdout);</pre>
causes a compile-time error.<P>
C++ programs rarely redeclare functions at block scope, so the circumstances in <A href="list4.htm">Listing 4</a>
don't occur in practice. <A href="list5.htm">Listing 5</a>
shows a more practical situation involving class scopes.<P>
A class defines a new scope. The members of a class are in the scope of that class. If a class member function has the same name as a family of overloaded functions declared in the scope enclosing the class, then all of the overloaded functions are invisible in the class scope.<P>
<A href="list5.htm">Listing 5</a>
contains the definition of class <I>File</I>, with a member function <I>put</I> that writes a null-terminated string to a <I>File. File::put</I> uses one of the overloaded <I>put</I> functions declared at file scope to actually put the string. Unfortunately, all of those <I>put</I> functions at file scope are invisible inside the body of <I>File::put</I>. The C++ compiler thinks the call to <I>put(s, f)</I> inside <I>File::put</I> is a (recursive) call to <I>File: :put</I>, but with the wrong number of arguments.<P>
To avoid this error, use the scope resolution operator <I>::</I>, as shown in <A href="list6.htm">Listing 6</a>.
 When the compiler encounters a name prefixed with <I>::</I>, it searches for that name in file scope, rather than in the current scope.<P>
<h4><FONT COLOR="#000080"><A name="0262_0147">Type-Safe Linkage<B><A name="0262_0147"></B></FONT></h4></P>
In C++, overloaded functions defined in one compilation can be declared and referenced in another compilation. Therefore, the linker, as well as the compiler, must have the ability to resolve function references based on function names and signatures, and not just names. This means that all external function declarations in a program, not just the overloaded ones, must agree in name and signature with a function definition somewhere in the program.<P>
Declaration matching across compilation units is called "type-safe linkage." If you inadvertently write the wrong declaration for a function defined in another module, you get a link error, because the linker won't find a function definition with the same signature as the declaration.<P>
Most linkers still can't handle data typing information directly. Therefore, C++ often uses a technique called "name-mangling" to encode the function name and signature into a single long name. Ellis and Stroustrup <a href="#ref3">[3]</a> describe one such encoding scheme. Their scheme encodes the signature of<P>
<pre>int put(const char *s, FILE *stream);</pre>
as something like<P>
<pre>put_FPCcP4FILE</pre>
This is the name used by the linker to resolve external references.<P>
Early C++ implementations actually displayed the mangled names in error messages for unresolved externals, forcing you to demangle the names yourself. Most current implementations automatically demangle the name, or provide separate a tool that does it for you.<P>
Since return types aren't part of signatures, type-safe linkage isn't 100 percent safe. Nonetheless, type-safe linkage is an improvement over C, and another reason to considering stepping up to C++.<P>
<h4><FONT COLOR="#000080"><A name="0262_0148">A Small Correction<B><A name="0262_0148"></B></FONT></h4></P>
In "Your First Class" (<I>CUJ</I>, May 1991), <A href="list2.htm">Listing 2</a>
contains a definition for <I>ln_seq::ln_seq</I>(<I>unsigned n</I>) that shouldn't be there. Later in the article, I added this constructor to the class, so it should appear in later listings. However, since the constructor is not declared in <A href="list1.htm">Listing 1</a>,
 <A href="list2.htm">Listing 2</a>
won't compile unless you remove the definition.<P>
<h4>References</FONT></h4></P>
<a name="ref1">[1]</a>     Stroustrup, Bjarne, <I>The C++ Programming Language,, 2nd ed.</I>, Addison-Wesley, 1986.<P>
<a name="ref2">[2]</a>     Hansen, Tony, <I>The C++ Answer Book</I>, Addison-Wesley, 1989.<P>
<a name="ref3">[3]</a>     Ellis, Margaret A. and Bjarne Stroustrup, <I>The Annotated C++ Reference Manual</I>, Addison-Wesley, 1990.<P>

<h4><a href="../../../source/1991/nov91/saks.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
