<HTML>
     
     <HEAD>
<TITLE>September 1998/Extending the Reference-Counting Pattern</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocsep.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">bsed: A Stream Editor for Binary Files</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Steven G. Isaacson</FONT></H3>

<BLOCKQUOTE>
<p>Here's a quick (and dirty) way to patch binary files with a simple software tool.</p></BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>There are many ways to substitute one string of text for another in a text file, particularly in a Unix development environment. But what if we wanted to do the same thing in a binary file? Recently we had to do just that. We had a dozen programs, compiled on 18 different platforms (SCO, HP, Sun, etc.), and we needed to change the banner page text.</p>

<p>One solution would have been to correct the source code and then recompile all programs on all platforms. But this was not practical, and in some cases no longer possible. We could possibly have used a binary editor, since binary editors handle binary files with ease. The problem in this case was the likely introduction of human error. Each of the dozen programs had slightly different requirements. Some programs needed changes to only one section of code, while others required several changes in several locations (for example, error and help text, in addition to the banner page). Using a binary editor meant loading the file into the editor, searching for the target string and its variants, replacing the string, then searching for the next occurrence, and so on.</p>

<p>All of those operations performed a dozen times, times 18 platforms &#151; there had to be a better way. If we could somehow automate the task with an awk- or sed-like program that did the job the same way every time, then we could change 18 or 1,800 programs and know it was done without error. To that end I wrote bsed, a simple stream editor that works on binary as well as ASCII files.</p>

<h4><FONT COLOR="#000080">How It Works</FONT></H4>

<p>bsed (<A HREF="list1.htm">Listing 1</A>) employs a simple algorithm:</p>

<table cellpadding="5" align="center">
<tr><td><IMG SRC="fig1.gif"></td></tr>
</table>

<p>First, bsed reads <B>stdin</B> (in <B>BUFSIZE</B> chunks) to populate the buffer. It then scans the buffer, using the <B>memchr</B> library function, to see if the first character of the search string is in the buffer. If the first character is not in the buffer, the complete search string cannot be there either. So bsed writes the buffer's contents to <B>stdout</B> and flushes the buffer.</p>

<p>This situation represents the simplest case. As long as no matches are found, bsed just repeatedly fills the buffer from <B>stdin,</B> writes it to <B>stdout</B>, and flushes the buffer.</p>

<p>The work begins when a possible match shows up in the buffer. Suppose bsed reads in 100 characters and a possible match shows up at position 50. The first order of business is to write out those first 50 non-matching characters to <B>stdout</B>. (Those characters are no longer of any interest.) When that's done, bsed shifts the remaining 50 characters to the left, leaving the buffer half-empty. It then reads from <B>stdin</B> again to fill up the buffer.</p>

<p>Once the buffer is full again (or <B>stdin</B> has been exhausted), bsed turns its attention back to the first character of the potentially matching substring. This character was originally found at location 50, was shifted 50 places left, and now resides at the start of the buffer. Now bsed must determine if the substring starting with this character matches the search string. If the substring matches, bsed writes out the replacement string to <B>stdout,</B> throws away the matching substring in the buffer, and shifts the contents of the buffer all the way to the left again, so it can continue looking. If the search string does not match what's in the buffer, bsed continues to loop through the buffer, looking for additional first-character matches with the search string.</p>

<p>Eventually bsed comes to the end of <B>stdin</B>, and then it's finished.</p>

<h4><FONT COLOR="#000080">Using bsed</FONT></H4>

<p>bsed works like a traditional Unix utility. It reads its input from <B>stdin,</B> and writes its output to <B>stdout.</B> The string to be replaced, and its replacement, are specified on the command-line.</p>

<p>Here are some examples of how bsed can be used:</p>

<pre>
bsed "advanced solutions" "Advanced
    Solutions" \&lt; oldprog &gt; newprog

cat oldprog | bsed Change_This To_This &gt;
    newprog

echo "Now is the tmie" | bsed tmie time
</pre>

<p>Of course the editing of binary files is not to be taken lightly. It's okay to replace a string of text in a binary file if you replace it with the same number of characters, and if that text serves no other purpose than as text for display &#151; a banner page, for example. But if you start mucking around with other parts of the code, or if you replace one string of text with a string of a different length, then your executable program will quickly turn to mush.</p>

<h4><FONT COLOR="#000080">Other Uses</FONT></H4>

<p>bsed could be made faster and more general-purpose (for example, allowing more than one search-replace pattern), but usually that means linking in a regular expression package (such as regcmp(3C)), which increases the code size, complexity, and porting requirements. In its present form, bsed is simple enough that it can easily be extended. For example, we currently use a variant of bsed in CGI programs to convert hexadecimal strings to their ASCII equivalents.</p>

<p>bsed may also be useful in other stream-based applications, wherever a simple, easy-to-understand stream editor is called for.</p>

<p><i>Steven G. Isaacson currently works with the porting group at Endura Software Corporation (<B>http://www.enduracorp.com</B>). He may be reached via email at <B>steven.isaacson@enduracorp.com</B>.</i></p>

<h4><a href="../../../source/1998/sep98/isaacson.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY>
</HTML>
