<HTML><HEAD>
<TITLE>September 1998/Smart Iterators and STL/Figure 5</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Figure 5: Template class CIteratorToMember</A></h4>

<pre>
// The class template CIteratorToMember is a wrapper around the
// iterator specified in the template argument _It. The second
// template argument is the value type of the iterator _It, the
// third one is the type of the member which the iterator passes
// to.
//
template&lt;class _It, class _T, class _R&gt;
class CIteratorToMember
{
  
public:
  
  // If you have a compiler and an STL implementation that fully 
  // suppport the iterator_traits mechanism, uncomment the next
  // four lines and comment out the one following them.

  // typedef std::iterator_traits&lt;_It&gt;::iterator_category 
  //   iterator_category;
  // typedef std::iterator_traits&lt;_It&gt;::distance_type 
  //   distance_type;

  typedef ptrdiff_t distance_type;
  
  typedef _R value_type;
  typedef _R* pointer;
  typedef _R&amp; reference;
  
  // Construct a smart iterator from an iterator.
  CIteratorToMember(_It from, _R _T::* memptr) : 
    m_it(from), m_memptr(memptr){}
  
  // Return the embedded original iterator
  _It GetIterator() const;
    
  // The operators *, -&gt;, and [] apply the functional to the
  // value of the embedded iterator.
  reference operator*();
  pointer operator-&gt;() const;
  reference operator[](distance_type _N) const;
  
  // All other operators behave the standard way.
  CIteratorToMember&amp; operator++();
  CIteratorToMember operator++(int);
  CIteratorToMember&amp; operator--();
  CIteratorToMember operator--(int);
  CIteratorToMember&amp; operator+=(distance_type _N);
  CIteratorToMember operator+(distance_type _N) const;
  CIteratorToMember&amp; operator-=(distance_type _N);
  CIteratorToMember operator-(distance_type _N) const;
  
  bool operator==(const CIteratorToMember&lt;_It, _T, _R&gt;&amp; rhs) const
    {return m_it == rhs.m_it;}
  bool operator!=(const CIteratorToMember&lt;_It, _T, _R&gt;&amp; rhs) const
    {return m_it != rhs.m_it;}
  
protected:
  _It m_it;

  _R _T::* m_memptr;
  
  } ;

template&lt;class _It, class _T, class _R&gt;
inline _It CIteratorToMember&lt;_It, _T, _R&gt;::GetIterator() const
  {return m_it;}
    
template&lt;class _It, class _T, class _R&gt;
inline CIteratorToMember&lt;_It, _T, _R&gt;::reference 
CIteratorToMember&lt;_It, _T, _R&gt;::operator*() 
  {return (*m_it).*m_memptr; } 

template&lt;class _It, class _T, class _R&gt;
inline CIteratorToMember&lt;_It, _T, _R&gt;::pointer 
CIteratorToMember&lt;_It, _T, _R&gt;::operator-&gt;() const  
  {return &amp;((*m_it).*m_memptr); } 

template&lt;class _It, class _T, class _R&gt;
inline CIteratorToMember&lt;_It, _T, _R&gt;::reference 
CIteratorToMember&lt;_It, _T, _R&gt;::operator[](distance_type _N) const
  {return m_it[_N].*m_memptr; }

// The operators for moving the iterator are defined as before for
// the class CSmartIterator

//////////////////////////////////////////////////////////////////
//
// The MakeIteratorToMember() function template generates a
// an iterator to member from an iterator and a pointer to member.
//
template&lt;class _It, class _T, class _R&gt;
CIteratorToMember&lt;_It, _T, _R&gt; 
MakeIteratorToMember(_It it, _R _T::* memptr)
  { return CIteratorToMember&lt;_It, _T, _R&gt;(it, memptr);}
/* End of File */
</pre>
</BODY>
</HTML>
