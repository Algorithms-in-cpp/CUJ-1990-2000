<HTML><HEAD>
<TITLE>September 1998/Smart Iterators and STL/Figure 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Figure 2: The template class CSmartIterator</A></H4>

<pre>
template&lt;class _It, class _Func&gt;
class CSmartIterator
{
  
public:
  
  // If you have a compiler and an STL implementation that fully 
  // suppport the iterator_traits mechanism, uncomment the next
  // four lines and comment out the one following them.

  // typedef std::iterator_traits&lt;_It&gt;::iterator_category 
  //   iterator_category;
  // typedef std::iterator_traits&lt;_It&gt;::distance_type 
  //   distance_type;

  typedef ptrdiff_t distance_type;
  
  typedef _Func::result_type value_type;
  
  // Construct a smart iterator from an iterator.
  CSmartIterator(_It from, _Func(func)) : 
    m_it(from), m_func(func)
  {}
  
  // Return the embedded original iterator
  _It GetIterator() const;
    
  // The operators *, and [] apply the functional to the value of 
  // the embedded iterator.
  //
  value_type operator*() const;
  value_type operator[](distance_type _N) const;
  
  // All other operators behave the standard way.
  CSmartIterator&amp; operator++();
  CSmartIterator operator++(int);
  CSmartIterator&amp; operator--();
  CSmartIterator operator--(int);
  CSmartIterator&amp; operator+=(distance_type _N);
  CSmartIterator operator+(distance_type _N) const;
  CSmartIterator&amp; operator-=(distance_type _N);
  CSmartIterator operator-(distance_type _N) const;
  
  bool operator==(const CSmartIterator&lt;_It, _Func&gt;&amp; rhs) const
    {return m_it == rhs.m_it;}
  bool operator!=(const CSmartIterator&lt;_It, _Func&gt;&amp; rhs) const
    {return m_it != rhs.m_it;}

protected:
  _It m_it;
  _Func m_func;
  
} ;


template&lt;class _It, class _Func&gt;
inline _It CSmartIterator&lt;_It, _Func&gt;::GetIterator() const
  {return m_it;}
    
template&lt;class _It, class _Func&gt;
inline CSmartIterator&lt;_It, _Func&gt;::value_type 
CSmartIterator&lt;_It, _Func&gt;::operator*() const
  {return m_func(*m_it); } 

template&lt;class _It, class _Func&gt;
inline CSmartIterator&lt;_It, _Func&gt;::value_type
CSmartIterator&lt;_It, _Func&gt;::operator[](distance_type _N) const
  {return m_func(m_it[_N]); }

template&lt;class _It, class _Func&gt;
inline CSmartIterator&lt;_It, _Func&gt;&amp; 
CSmartIterator&lt;_It, _Func&gt;::operator++() 
  {++m_it; 
   return *this; }

template&lt;class _It, class _Func&gt;
inline CSmartIterator&lt;_It, _Func&gt; 
CSmartIterator&lt;_It, _Func&gt;::operator++(int) 
  {CSmartIterator&lt;_It, _Func&gt; _Tmp = *this;
  ++m_it;
  return _Tmp; }

template&lt;class _It, class _Func&gt;
inline CSmartIterator&lt;_It, _Func&gt;&amp; 
CSmartIterator&lt;_It, _Func&gt;::operator--() 
  {--m_it;  
  return (*this); }

template&lt;class _It, class _Func&gt;
inline CSmartIterator&lt;_It, _Func&gt; 
CSmartIterator&lt;_It, _Func&gt;::operator--(int)
  {CSmartIterator&lt;_It, _Func&gt; _Tmp = *this;
  --m_it;
  return _Tmp;}

template&lt;class _It, class _Func&gt;
inline CSmartIterator&lt;_It, _Func&gt;&amp; 
CSmartIterator&lt;_It, _Func&gt;::operator+=(distance_type _N)
  {m_it += _N;
  return *this; }

template&lt;class _It, class _Func&gt;
inline CSmartIterator&lt;_It, _Func&gt; 
CSmartIterator&lt;_It, _Func&gt;::operator+(distance_type _N) const
  {return CSmartIterator&lt;_It, _Func&gt;(m_it + _N, m_func); }

template&lt;class _It, class _Func&gt;
inline CSmartIterator&lt;_It, _Func&gt;&amp; 
CSmartIterator&lt;_It, _Func&gt;::operator-=(distance_type _N)
  {m_it -= _N;
  return *this; }

template&lt;class _It, class _Func&gt;
inline CSmartIterator&lt;_It, _Func&gt; 
CSmartIterator&lt;_It, _Func&gt;::operator-(distance_type _N) const
  {return CSmartIterator&lt;_It, _Func&gt;(m_it - _N, m_func); }
/* End of File */
</pre>
</BODY>
</HTML>
