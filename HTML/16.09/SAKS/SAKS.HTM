<HTML>
     
     <HEAD>
<TITLE>September 1998/C++ Theory and Practice</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocsep.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">C++ Theory and Practice: const in Parameter Lists</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Dan Saks</FONT></H3>

<BLOCKQUOTE>

<p>const promises a lot in a parameter list, but sometimes it appears to promise too much.</p></BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p><B><I>Copyright &copy; 1998 by Dan Saks</I></B></p>

<p>In my recently completed series on namespaces, I tried to see how far I could get using namespaces, in combination with separate compilation and incomplete types, to decompose a C++ program into simpler discrete components. I came to the not-so-surprising conclusion that, although namespaces may help eliminate name conflicts among libraries, namespaces are no substitute for classes when it comes to packaging abstractions. (See "C++ Theory and Practice: Classes vs. Namespaces,&#151; <I>CUJ</I>, July 1998.)</p>

<p>Throughout that series on namespaces, I experimented with different uses for namespaces by applying them in a sample program called <B>xr</B>, a cross-reference generator. Of all the versions of <B>xr</B> that I presented, none used the const qualifier.  Before I do any more work with the program (such as rewrite it using classes), I probably should correct that oversight by adding the const qualifier where I think it's appropriate. That's what I'll do right now.</p>

<h4><FONT COLOR="#000080">Once More, From the Top</FONT></H4>

<p>I described the <B>xr</B> program in detail some months ago. (See &#151;C++ Theory and Practice: Partitioning with Namespaces, Part 1,&#151; <I>CUJ</I>, April 1998.) Here's the executive summary.</p>

<p><B>xr</B> reads text from standard input and writes a cross-reference to standard output. The cross-reference output is an alphabetized list of the words (identifiers as in C++) that appeared in the input. Each line in the output contains one word followed by the sequence of unique line numbers on which that word appeared in the input.</p>

<p>For example, if you use the source code for <B>xr</B> (<A HREF="list1.htm">Listing 1</A>) as input to itself, the cross-reference output should contain the following line for the identifier <B>token</B>:</p>

<pre>
token:   32   34   35   36   37
</pre>

<p><B>token</B> actually appears twice on line 35, but the output only mentions 35 once.</p>

<p><A HREF="list1.htm">Listing 1</A> is nearly identical to the program I started with several months ago. The original program was a single source file written in &#151;Typesafe C,&#151; C that also compiles as C++ [<a href="#1">1</a>]. Since I will eventually rewrite the program using classes, I've made a few minor changes so that the program compiles only as C++. In particular:</p>

<UL><LI>It uses <B>//</B> (C++-style) comments.</LI>
    <LI>It assumes that struct tag names are type names.</LI>
    <LI>It uses new-expressions instead of<br><B>malloc</B>.</LI></UL>

<p>The program contains just four functions:</p>

<UL><LI><B>main</B></LI>
    <LI><B>get_token</B>: get a token from standard input</LI>
    <LI><B>add_tree</B>: add an entry to the cross-reference for a word and its corresponding line number</LI>
    <LI><B>put_tree</B>: write the alphabetized cross-reference listing to standard output</LI></UL>

<p><B>xr</B> uses a binary tree to maintain each word in alphabetical order. Each <B>tree_node</B> holds a word and its associated set of line numbers. Each set of line numbers is implemented as a singly linked list with separate pointers to the first and last <B>list_node</B> in the list. Each <B>list_node</B> contains one line number.</p>

<p>When <B>add_tree</B> adds a cross-reference entry for a word that is already in the tree, it simply adds the line number to that word's existing list (if the number isn't already there).  Maintaining a pointer to the last <B>list_node</B> in each list makes adding a new line number very fast and easy.</p>

<h4><FONT COLOR="#000080">Using const to Specify Interface</FONT></H4>

<p><A HREF="list1.htm">Listing 1</A> differs from the original Typesafe C version of <B>xr</B> in one other way &#151; it uses the const qualifier in the appropriate places. My concept of &#151;the appropriate places&#151; is based on a general approach I presented almost two years ago. (See &#151;C++ Theory and Practice: <B>const</B> as a Promise,&#151; <I>CUJ</I>, November 1996.) I don't believe I have taken the time to show you how I'd apply that approach in practice, so I'll use this as my opportunity.</p>

<p>The const qualifier appears in five places in <A HREF="list1.htm">Listing 1</A>.  However, not all those appearances are logically distinct. <A HREF="list1.htm">Listing 1</A> declares <B>add_tree</B> early, and defines it much later. The const qualifier appears in the declaration and in the same place in the later definition. Similar duplication occurs in the declaration and later definition of <B>put_tree</B>.</p>

<p>The first <B>const</B> appears in the declaration of <B>add_tree</B>'s second parameter:</p>

<pre>
tree_node *add_tree
    (
    tree_node *t,
    char const *w,
    unsigned n
    )
</pre>

<p><B>add_tree</B> makes some notation in the cross-reference table that word <B>w</B> appeared on line <B>n</B>. <B>w</B> is a pointer to the first character in a null-terminated array. For example, in a call such as</p>

<pre>
xr = add_tree(xr, token, ln);
</pre>

<p><B>w</B> points to the first character of token.</p>

<p>The const qualifier in <B>w</B>'s declaration indicates that <B>add_tree</B> won't try to change the contents of the array passed as the second argument, which in this example is <B>token</B>. In my book, declaring <B>w</B> as <B>char const *</B> places a meaningful constraint on <B>add_tree</B>'s behavior as seen by callers.</p>

<p>Both parameter <B>t</B> and the return type have type <B>tree_node *</B>.  Neither should have type <B>tree_node const *</B>. That's because <B>add_tree</B> can't do its job unless it retains the right to modify the nodes in the tree.</p>

<p>Even though <B>add_tree</B> doesn't alter the value of its third parameter, <B>n</B>, I'm not inclined to declare it as const. Declaring <B>n</B> as const has no impact on <B>add_tree</B>'s outward behavior. As it is, <B>n</B> is passed by value. Even if <B>add_tree</B> did alter <B>n</B>, a call such as:</p>

<pre>
xr = add_tree(xr, token, ln);

</pre>

<p>wouldn't modify actual argument <B>ln</B> because parameter <B>n</B> holds a completely separate copy of <B>ln</B>'s value. Adding <B>const</B> to <B>n</B>'s declaration only reaffirms that <B>add_tree</B> won't alter its own copy.</p>

<p>What's the harm in declaring <B>n</B> as const? Admittedly, not much. For the most part, it's just low-level noise, but it can be distracting. For example, suppose you declared <B>n</B> as const, as in:</p>

<pre>
tree_node *add_tree
    (
    tree_node *t,
    char const *w,
    unsigned const n
    )
</pre>

<p>It appears just above the declaration of <B>get_token</B>:</p>

<pre>
void get_token
    (
    char *s,
    size_t n
    )
</pre>

<p><B>get_token</B> gets the next token from standard input into an array of <B>n</B> characters starting at <B>s</B>. Obviously, you can't declare <B>s</B> as a <B>char const *</B> because <B>get_token</B> must be able to write to <B>*s</B>. But, if you declare <B>add_tree</B>'s parameter <B>n</B> as const, why not declare <B>get_token</B>'s parameter <B>n</B> as const?  Because <B>get_token</B>'s current implementation alters <B>n</B>'s value.</p>

<p>Although <B>xr</B> is currently a single source file, the function declarations appearing before <B>main</B> correspond to declarations that would appear in a header if the program spanned multiple source files. When I read one of these function declarations, especially one that others have written, I'm always looking for information about the calling interface. That is, I want to know what to pass to the function, and what it will pass back.  In the case of <B>add_tree</B>, declaring <B>w</B> as a <B>char const *</B> gives me information I can use. Declaring <B>n</B> as an <B>unsigned const</B> does not.</p>

<p>Moreover, if you insist on declaring <B>n</B> as const, then you should also declare <B>w</B> as const, as in:</p>

<pre>
tree_node *add_tree
    (
    tree_node *t,
    char const *const w,
    unsigned const n
    )
</pre>

<p>After all, <B>add_tree</B> doesn't need to alter <B>w</B> any more than it needs to alter <B>n</B>. Now only one of the three occurrences of <B>const</B> in this function declaration conveys information about the interface. The low-level noise is getting louder. My urge is to squelch it.</p>

<h4><FONT COLOR="#000080">Using const As If It Were Deep</FONT></H4>

<p>The const qualifier appears in the declaration of <B>put_tree</B>'s lone parameter:</p>

<pre>
void put_tree(tree_node const *t)
</pre>

<p><B>put_tree</B> writes the tree to standard output, and shouldn't alter the tree in the process. Again, this is a useful constraint on the function's behavior.</p>

<p>I also used the const qualifier in this declaration in the body of <B>put_tree</B>:</p>

<pre>
list_node const *p;
</pre>

<p><B>p</B> points to <B>list_node</B>s in a list emanating from a <B>tree_node</B>.  Since the <B>tree_node</B> is const, it seems reasonable that a list within that <B>tree_node</B> should also be const. Interestingly, if I had declared <B>p</B> without the const qualifier, the code would still compile. Here's why.</p>

<p>A <B>tree_node</B> is defined as:</p>

<pre>
struct tree_node
    {
    char *word;
    list_node *first;
    list_node *last;
    tree_node *left;
    tree_node *right;
    };
</pre>

<p>A <B>const tree_node</B> object behaves as if it were defined as:</p>

<pre>
struct tree_node
    {
    char *const word;
    list_node *const first;
    list_node *const last;
    tree_node *const left;
    tree_node *const right;
    };
</pre>

<p>That is, it behaves as if the members are const pointers that point to non-const nodes.</p>

<p>When I declared <B>put_tree</B>'s parameter <B>t</B> as a <B>tree_node const *</B>, I wanted to assert that <B>put_tree</B> wouldn't change <I>any</I> part of the tree whose root is <B>t</B>. Unfortunately, this use of <B>const</B> only asserts that it won't change the members of the <B>tree_node</B> itself. <B>put_tree</B> can still change the characters in the array that <B>word</B> points to, and the nodes in the list that <B>first</B> and <B>last</B> point to.</p>

<p>In a sense, const is shallow. It applies only to the pointer members themselves. In this case, const should be deep. It should also apply to what the pointers point to. That is, a <B>const tree_node</B> should behave as if it were defined as:</p>

<pre>
struct tree_node
    {
    char *const word;
    list_node const *const first;
    list_node const *const last;
    tree_node const *const left;
    tree_node const *const right;
    };
</pre>

<p>Unfortunately, it doesn't. Thus, if I had declared <B>p</B> as:</p>

<pre>
list_node *p;
</pre>

<p>then the assignment:</p>

<pre>
p = t-&gt;first;
</pre>

<p>in the initialization of the <B>for</B>-statement would copy a value from a const object to a non-const object of the same type.  Such assignments are perfectly valid.</p>

<p>Even though I didn't need to declare <B>p</B> as a <B>list_node const *</B>, I did anyway. Using <B>const</B> helps ensure that <B>put_tree</B> won't alter any <B>list_node</B>s. In other words, I'm trying to program as if const were deep.</p>

<p>I suspect that some of you might think I'm being inconsistent here. I used <B>const</B> in declaring <B>put_tree</B>'s local variable <B>p</B> to prevent certain logic errors, yet I left the <B>const</B> off the declaration of <B>add_tree</B>'s parameter <B>n</B> even though that <B>const</B> might prevent a similar class of logic errors. Why should I treat them differently?</p>

<p>The difference is that users of <B>put_tree</B> don't see <B>p</B> and therefore don't care about the <B>const</B> in <B>p</B>'s declaration, but users of <B>add_tree</B> see the declaration of parameter <B>n</B>. In both cases, <B>const</B> is an implementation detail, but in the case of a parameter declaration, it appears in the user interface. If I have to make a choice, I think keeping the implementation separate from the interface is more important than enlisting help from <B>const</B>.   Fortunately, C++ no longer forces you to make the choice.  You can use the following technique.</p>

<h4><FONT COLOR="#000080">Using const to Specify Implementation</FONT></H4>

<p>As I explained earlier, you can declare <B>add_tree</B> as either:</p>

<pre>
tree_node *add_tree
    (
    tree_node *t,
    char const *w,
    unsigned n
    )
</pre>

<p>or:</p>

<pre>
tree_node *add_tree
    (
    tree_node *t,
    char const *const w,
    unsigned const n
    )
</pre>

<p>The first form uses <B>const</B> only where it affects the function's interface. The second uses <B>const</B> where it affects the function's implementation as well. When I thought I had to choose, I chose the former as the clearer depiction of the function's outward behavior.</p>

<p>Fortunately, you don't have to choose. You can use both.  You can use the former when you declare <B>add_tree</B> (before <B>main</B> or in a header), and use the latter when you define <B>add_tree</B> (after <B>main</B> or in a separate file). Here's how it works.</p>

<p>According to the C++ standard, declarations such as:</p>

<pre>
void f(T v);
void f(T const v);
</pre>

<p>do not overload <B>f</B>. These are two declarations for the same function named <B>f</B>. C++ ignores the const qualifier when it applies to the entire type of the parameter.</p>

<p>In the declarations just above, if you replace type <B>T</B> with <B>X *</B>, you get that:</p>

<pre>
void f(X *v);
void f(X *const v);
</pre>

<p>are also two declarations for the same function. Please don't confuse these declarations with declarations such as:</p>

<pre>
void f(X *v);
void f(X const *v);
</pre>

<p>which declare two different functions. The exact placement of <B>const</B> makes all the difference. In the last declaration, <B>const</B> applies, not to the type of <B>v</B>, but to the type of <B>*v</B>.</p>

<p>All of this means you can declare a function <B>f</B> as:</p>

<pre>
void f(T v);
</pre>

<p>in a header, yet define the same function as:</p>

<pre>
void f(T const v)
    {
    ...
    }
</pre>

<p>in a source file. Then, when users look in the header, they only see uses for <B>const</B> that affect the interface. But, when you implement the function, you can still protect yourself against accidentally changing the value of the formal parameter.</p>

<p>You can use this style with <B>put_tree</B> as well. The declaration for <B>put_tree</B> (before <B>main)</B> can be:</p>

<pre>
void put_tree(tree_node const *t);
</pre>

<p>The heading of the corresponding definition later in the source file can be:</p>

<pre>
void put_tree(tree_node const *const t)
</pre>

<p>I compiled the program with three different compilers &#151; Borland C++ 5.0, Edison Design 2.38, and Microsoft Visual C++ 5.0 &#151; and it worked with every one.</p>

<p>My reading of the C standard, as well as the draft for the new C9X standard, is that C does not sanction this programming idiom.</p>

<h4><FONT COLOR="#000080">The Great Tabs vs. Spaces Debate</FONT></H4>

<p>A few months ago, in a reply to mail from a reader, I wrote that I preferred to indent with tabs rather than spaces. (See &#151;C++ Theory and Practice: Partitioning with Namespaces, Part 3,&#151; <I>CUJ</I>, June 1998.) This prompted a small flurry of mail from readers who disagreed. Although I can't say it changed my mind, I still appreciated reading different viewpoints.</p>

<p>For those of you who care to read any of these opinions, you can find them in the Code Review forum on <I>CUJ</I>'s website (<B>www.cuj.com/forum</B>). You can chime in by sending mail to <B>mbriand@mfi.com</B>.</p>

<h4><FONT COLOR="#000080">Time for a Break</FONT></H4>

<p>I've been writing regular columns for the <I>CUJ</I> for nearly eight years, and I'm starting to burn out. I'm going to take a sabbatical to recharge my batteries. Please don't fret. I'll be back in a few months with more pearls of wisdom.</p>

<h4><FONT COLOR="#000080">Reference</FONT></H4>

<p><a name="1"></a>[1]  Thomas Plum and Dan Saks. <I>C++ Programming Guidelines</I> (Plum Hall, 1992).</p>

<p><i>Dan Saks is the president of Saks &amp; Associates, which offers training and consulting in C++ and C. He is active in C++ standards, having served nearly seven years as secretary of the ANSI and ISO C++ standards committees. Dan is coauthor of <I>C++ Programming Guidelines</I>, and codeveloper of the Plum Hall Validation Suite for C++ (both with Thomas Plum). You can reach him at 393 Leander Dr., Springfield, OH 45504-4906 USA, by phone at +1-937-324-3601, or electronically at <B>dsaks@wittenberg.edu</B>.</i></p>

<h4><a href="../../../source/1998/sep98/saks.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY>
</HTML>
