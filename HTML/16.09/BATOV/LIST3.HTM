<HTML><HEAD>
<TITLE>September 1998/Extending the Reference-Counting Pattern/Listing 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 3: An example of Handle class use with a String class</A></h4>

<pre>

#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;iostream.h&gt;
#include &lt;vbtools/handle.h&gt;

class _String 
{
   public:

   typedef int      Size;
   typedef char* Address;

       ~_String () { delete _text; } 
        _String () : _text(0), _size(0) {}
        _String (Address, Size =0);
   Address text () { return _text; }
   Size    size () { return _size; }
   void    text (Address, Size);

//   private:

   Address _text;
   Size    _size;
};

_String::_String(Address addr, Size sz) : _text(0), _size(0)
{
   text(addr, sz ? sz : addr ? strlen(addr) : 0);   
}

void
_String::text(Address addr, Size size)
{
   delete _text;
   _text = (Address) memcpy(new char[_size = size], addr, size);
}

// String instances are of 'void*' size. Easy to pass around.
// _String resources are handled automatically.

typedef Handle&lt;_String&gt; String;

HandleError string_is_empty;
HandleError string_too_long;

String
foo(String input)
{
   String s;

   if (!input-&gt;size()) 
   {
      String err = String::error(string_is_empty);

      // A value can be set to error instance as well.

      err-&gt;text("Usage: foo argument.\n");
      return err;
   }
   if (4 &lt; input-&gt;size()) return s.error(string_too_long);

   s-&gt;text("Changed");

   return s;
}

int 
main(int argc, char** argv)
{
   String  input(1 &lt; argc ? argv[1] : (char*) 0);
   String   orig = input;
   String output = foo(input);

   if (output.is_error())
   {
      if (output.get_error() == string_is_empty)
      {
         // A value and an error condition can be 
         // passed at the same time.

         cout &lt;&lt; output-&gt;text() &lt;&lt; endl; 
      }
      else if (output.get_error() == string_too_long)
      {
         cout &lt;&lt; "Argument is too long.\n";
      }
   }
   else
   {
      cout &lt;&lt; orig-&gt; text() &lt;&lt; endl; // argv[1] printed.
      cout &lt;&lt; input-&gt;text() &lt;&lt; endl; // "Changed" printed.
   }
}

//End of File
</pre>
</BODY>
</HTML>
