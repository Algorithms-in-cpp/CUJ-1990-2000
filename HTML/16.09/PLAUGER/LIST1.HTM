<HTML><HEAD>
<TITLE>September 1998/Standard C/C++/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: A minimal implementation of template class messages</A></h4>

<pre>
        // STRUCT messages_base
struct messages_base : public locale::facet {
    typedef int catalog;
    explicit messages_base(size_t _R = 0)
        : locale::facet(_R) {}
    };

        // TEMPLATE CLASS messages
template&lt;class _E&gt;
    class messages : public messages_base {
public:
    typedef _E char_type;
    typedef basic_string&lt;_E, char_traits&lt;_E&gt;,
        allocator&lt;_E&gt; &gt; string_type;
    catalog open(const string&amp; _X, const locale&amp; _L) const
        {return (do_open(_X, _L)); }
    string_type get(catalog _C, int _S, int _M,
        const string_type&amp; _D) const
        {return (do_get(_C, _S, _M, _D)); }
    void close(catalog _C) const
        {do_close(_C); }
    static locale::id id;
    explicit messages(size_t _R = 0);
protected:
    virtual catalog do_open(const string&amp;, const locale&amp;) const
        {return (0); }
    virtual string_type do_get(catalog, int,
        int _M, const string_type&amp; _D) const
        {return (_D); }
    virtual void do_close(catalog) const
        {}
    };

template&lt;class _E&gt;
    locale::id messages&lt;_E&gt;::id;

        // TEMPLATE CLASS messages_byname
template&lt;class _E&gt;
    class messages_byname : public messages&lt;_E&gt; {
public:
    explicit messages_byname(const char *_S, size_t _R = 0);
protected:
    virtual ~messages_byname()
        {}
    };
/* End of File */
</pre>
</BODY>
</HTML>
