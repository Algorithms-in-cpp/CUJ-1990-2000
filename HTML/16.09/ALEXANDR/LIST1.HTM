<HTML><HEAD>
<TITLE>September 1998/Inline Containers for Variable Arguments/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: Implements "inline containers" for variable argument passing</A></h4>

<pre>
#ifndef __INLINE_CONTAINER_H__
#define __INLINE_CONTAINER_H__
     
#include &lt;vector&gt;
#include &lt;list&gt;
#include &lt;deque&gt;
     
template &lt; class T, class container = std::vector&lt;T&gt; &gt; 
class inline_container : public container
{
public:
    inline_container()      
    {
    }
    inline_container(inline_container &amp;v) 
    {
        this-&gt;swap(v);
    }
    explicit inline_container(const T &amp;a) 
        : container(1, a)
    {           
    }
    inline_container &amp;operator()(const T &amp;a) 
    {
        this-&gt;push_back(a);
        return *this;
    }
};
     
template &lt;class T&gt;
inline inline_container&lt;T&gt; make_vector(const T &amp;a) 
{
    return inline_container&lt;T&gt;(a);
}
     
template &lt;class T&gt;
inline inline_container&lt; T, std::list&lt;T&gt; &gt; make_list(const T &amp;a)
{
    return inline_container&lt; T, std::list&lt;T&gt; &gt;(a);
}
     
template &lt;class T&gt;
inline inline_container&lt; T, std::deque&lt;T&gt; &gt; make_deque(const T &amp;a)
{
    return inline_container&lt; T, std::deque&lt;T&gt; &gt;(a);
}
     
template &lt;class container&gt; 
inline const container::value_type min(const container &amp;a) 
{
    return *std::min_element(a.begin(), a.end());
}
     
template &lt;class container&gt; 
inline const container::value_type max(const container &amp;a) 
{
    return *std::max_element(a.begin(), a.end());
}
     
#endif //__INLINE_CONTAINER_H__
     
/* End of File */
</pre>
</BODY>
</HTML>
