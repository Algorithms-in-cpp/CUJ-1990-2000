<HTML>
     
     <HEAD>
<TITLE>September 1998/Inline Containers for Variable Arguments</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocsep.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Inline Containers for Variable Arguments</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Andrei Alexandrescu</FONT></H3>

<BLOCKQUOTE>

<p>How can you pass a varying number of arguments to a function and maintain type safety? One argument at a time.</p></BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>The need to pass a variable number of arguments to a function (sometimes all arguments of the same type) arises often in C/C++ programming. The common approaches are to use the variable-argument feature of C/C++ or to pass a pointer to a constant-length vector along with its length (or a pointer past its end, STL-style). The variable arguments approach has the obvious disadvantages of being type unsafe and error prone, plus requiring you to establish a convention about the number and types of parameters. The second approach is better with regard to safety, but requires much code to be written for simple tasks. For instance:</p>

<pre>int a, b, c;
//...
const int parms[] = { a, b, c };

// assume extern int
// f(int *From, int *To)
int M =
  f(parms,
    parms +
      sizeof(parms)/sizeof(*parms));
</pre>

<p>While this works, I find it unnecessarily verbose for what it does. I want a simple one-line construct to call a function with the number of arguments I need. Ideally the call would look like <B>f(a)</B>, <B>f(a, b)</B>, <B>f(a, b, c)</B>, and so forth (which, alas, is not doable in a generic and safe way in C++). Taking an idea from Mr. Zlatko Marcok's article "Dynamic Arrays with Expression Templates," (<I>CUJ</I>, July 1998) I've put in place a simple mechanism that enables creation of "inline containers" of arbitrary length in an efficient, type-safe, and generic manner. They are intended to provide handy temporary objects, which will enable you to write:</p>

<pre>
int a, b, c;
//...
// assume extern int
// f(const std::vector&lt;int&gt; &amp;v)
int M = f(make_vector(a)(b)(c));
</pre>

<p>I find this much more convenient and general. This syntax works for any number of arguments. It does not imply inefficient copying or spawning of temporaries. Plus, it's generic! The following also works:</p>

<pre>
double d, e, f;
//...
// assume extern double
// f(const std::vector&lt;double&gt; &amp;v)
double M = f(make_vector(d)(e)(f));
</pre>

<p>It works because <B>make_vector</B> is a template function. For all these reasons, I find this approach very elegant and useful, especially when passing a variable number of arguments of the same type to a function. I have also provided functions <B>make_list</B> and <B>make_deque</B> built on the same codebase.</p>

<p>The implementation is simple: I derive a new class from the container of choice (default: <B>vector</B>) and define only two constructors for it. I also overload the <B>operator()</B> member. <B>operator()</B> appends an element to the container and returns a reference to it, so calls to that operator can be chained. This is the whole wizardry. I have also given the copy constructor "move" semantics for efficiency reasons.</p>

<p>The functions <B>make_vector,</B> <B>make_list</B>, and <B>make_deque</B> themselves just provide the convenience of automatic template parameter deduction. In this sense they are similar to the standard function <B>make_pair.</B></p>

<h4><FONT COLOR="#000080">Using Inline Containers</FONT></H4>

<p>To use this code for implementing variable arguments, create a function that takes a reference to a <B>vector</B> (the most efficient representation for this purpose). You can then pass vectors as well as the result of <B>make_vector</B> to your function.</p>

<p>Many programmers dream of having a variable-arguments <B>max</B> function. No matter how many arguments you pass and of what type, it will always return the biggest one. Now, due to the overloads I have added, you can do the following:</p>

<pre>
int a, b, c, d, e;
//...
int M = std::min(
  make_vector(a)(b)(c)(d)(e));
</pre>

<p>The source code is shown in <A HREF="list1.htm">Listing 1</A>. Please note that the result of <B>min</B> and <B>max</B> is undefined for empty containers. (This works for me, but you may want to change it.) o</p>

<p><i>Andrei Alexandrescu is an Associate in the Components Group of Micro Modeling Associates. He may be reached at <B>alexandrescua@micromodeling.com</B>.</i></p>

<h4><a href="../../../source/1998/sep98/alexandr.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY>
</HTML>
