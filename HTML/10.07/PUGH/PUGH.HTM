


<HTML>
<HEAD>

<TITLE>July 1992/Questions & Answers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjul.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Questions &amp; Answers<A name="0152_00B1"><A name="0152_00B1"></font></h2><P>
<h3 align="center"><A name="0152_0000"><A name="0152_0000">gotos and Statics</h3><P>
<h3 align="center"><font color="#800000">Ken Pugh</font></h3><hr><blockquote><P>
<P><i><A name="0152_0000"><A name="0152_0000">Kenneth Pugh, a principal in Pugh-Killeen Associates, teaches C language courses for corporations. He is the author of C Language for Programmers and All On C, and was a member on the ANSI C committee. He also does custom C programming for communications, graphics, image databases, and hypertext. His address is 4201 University Dr., Suite 102, Durham, NC 27707. You may fax questions for Ken to (919) 489-5239. Ken also receives email at kpugh@dukemvs.ac.duke.edu (Internet).</i></P><P>
<h4><FONT COLOR="#000080"><A name="0152_00B2">Reader's Feedback<A name="0152_00B2"></FONT></h4></P>
For me, using or not using <I>goto</I> is not a religious, but a technical issue: programs with <I>goto</I> are ugly, inelegant, harder to maintain. Most of all, it is unnecessary. For all these reasons, I don't like your code for truncating files.<P>
If I were to code a similar thing from scratch, I would likely do it very differently, but I decided to cope with the harder task of modifying your code to make it <I>goto</I>less (<A href="list1.htm">Listing 1</a>)
. In doing so, I kept, almost untouched, its original structure. This is like playing tennis with handcuffs.<P>
In my opinion, it is not possible to make good code from a bad start, but these changes do prove &#151; contrary to what you stated &#151; "that <I>goto</I>s do not avoid a lot of nested logic." On the contrary, <I>goto</I>less code may do it.<P>
On the other hand, I do not agree that <I>return</I> counts as using <I>goto</I>. The problem with <I>goto</I> is that we don't know where it goes to. But a <I>return</I> always has a perfectly known destination: the calling function. What a difference!<P>
I am confident that even working under the strait jacket of your code, my version is more readable, more elegant, neater. Granted, most of this is subjective stuff.<P>
As to your answer concerning static and automatic pointers, I cannot agree they are sort of equivalent, as your own example itself clearly shows. They are used for different reasons, with different results.<P>
As if it were necessary, let's make it clearer with the example in <A href="list2.htm">Listing 2</a>.
<P>
I don't doubt you know this perfectly well, but to me your answer sounded misleading.<P>
Fernando Cabral<br>
Brazil<P>
Thank you for your submission. I wish you had rewritten it from scratch. Seeing how other people create solutions to problems is always a good learning experience. I will agree with you that your conversion of my code to one not using <I>goto</I>s makes it slightly unreadable.<P>
The problem with <I>goto</I>s is that they tend to be abused. A <I>goto</I> should not be used to create a loop &#151; there are plenty of standard constructs for doing that. I believe <I>goto</I>s should usually be reserved for getting out of code in which an error condition occurred. If error testing was eliminated, my original code would probably not have a <I>goto</I> in it. Your <I>do_copy</I> function could look like <A href="list3.htm">Listing 3</a>
without error checking.<P>
If you prefer <I>return</I>s` to <I>goto end</I>, you could take my original code and substitute the <I>goto</I>s for <I>return</I>s. Or if you reverse the logic of the tests in the original, you can eliminate some of the <I>goto</I>s from my original code. I have a tendency to think of things in a negative manner, that is, "if this is the case, then it's no good." The inverse of this logic thinks of things in the positive manner, that is, "this must be the case if it is to be good." It just delays the error messages to the <I>else</I> part.<P>
In a sense, whether you code it with nested logic or with <I>goto</I>s depends on your sense of completeness. A <I>goto end</I> ensures that nothing else will be done in that module. With nested logic, you need to check all the remaining statements to be sure that nothing else occurs for a particular condition.<P>
I think both ways are valid &#151; after all some people drive on the left and others on the right. As long as you are consistent in your approach, then I don't believe it matters too much.<P>
As you mentioned, code style is subjective. If code never needed to be maintained (sort of write-once and use forever), then how it is written would not be an issue. To keep maintenance simpler, I tend to write in a consistent style, whether the problem is simple or complex.<P>
Let me list a few features that I use fairly consistently in all my code. First, I form names of variables and functions from full words, except for common abbreviations. Some programmers still tend to stick with the 8 character K&amp;R limitation, but that makes C read like FORTRAN.<P>
Second, I use a number of temporary variables simply to provide an easy way to display their values. For example, you used<P>
<pre>if (write(temp_file, buffer, to_write) &lt; to_write)</pre>
where I used<P>
<pre>write_length = write(file_out, buffer, length_to_write)
if (write_length != length_to_write)</pre>
If I am either using a debugger or <I>printf</I>s to trace through the code, then it is easy to output the return value of the <I>write</I> function. Now you could write this as<P>
<pre>if ((write_length = write(file_out, buffer, length_to_write)) != length_to_write)</pre>
I shy away from such combinations since they tend to run over multiple lines (especially with long names).<P>
Third, I use a single <I>return</I> statement to simplify tracing the return value. If you are setting either breakpoints or using <I>printf</I>s to output the return value of a function from inside the function, then you need to set multiple breakpoints or to insert multiple <I>printf</I>s. Multiple <I>returns</I> cause problems when tracing return values. Similarly, I use only a single variable as the return value, rather than an expression. As an example of this, let's take a simple function<P>
<pre>simple_function(x, y)
   {
   /* Lots of code */
     return 3 * x;
   /* Lots more code */
     return 4 * x;
   /* Lots more code */
   }</pre>
If you were using a debugger within this function and wanted to trace just the return value, then you need to set two or more breakpoints &#151; at each return statement. When the breakpoint occurred, you would need to output the value of an expression. Alternatively, the code could read<P>
<pre>simple_function(x, y)
   {
   int return_value;
   /* Lots of code */
   return_value = 3 * x;
   goto end;
   /* Lots more code */
   return_value = 4 * x;
    goto end;
   /* Lots more code */
end:
   return return_value;
   }</pre>
In this case, only a single breakpoint needs to be set and a single variable output. Since my functions which use <I>goto</I>s have a label immediately before the <I>return</I> statement (at the end of the function), where the <I>goto</I> goes is consistent.<P>
Fourth, I try to never use constants in the executable portion of the code. To shorten the original example, I did not use <I>#defines</I> as I normally do. Statements as <I>ret = -4</I>; should really be replaced by<P>
<pre>#define ERROR_WRITING_TEMP_FILE -4
...
ret = ERROR_WRITING_TEMP_FILE;</pre>
These are all subjective features. A die-hard C programmer might feel that functions should look like<P>
<pre>truncate_to_zero( char *path)
{
   int fd;
   return fd = open(path, O_WRONLY | O_TRUNC, 0666) &gt;= 0 ? 
      close(fd), OK : NOT_OK;
}</pre>
I hope my answer to the static/automatic pointer problem wasn't too misleading. Your listing does point out a distinct difference between the two. In the context in which I showed it, there is <I>no</I> substantial difference in usage. The point I was trying to make is that the array of characters is set aside in memory at a constant address in either case. Whether that constant address is used to initialize the pointer once or multiple times depends on whether the pointer is static or dynamic.<P>
For example, consider <A href="list4.htm">Listing 4</a>.
 Both functions will pass back the same string. The difference is that <I>p_auto</I> will be initialized every time and <I>p_static</I> will only be initialized once.<P>
<h4><FONT COLOR="#000080"><A name="0152_00B3">Code Generators<A name="0152_00B3"></FONT></h4></P>
I am writing in regards to "Using Code Generators For Creating C Code," in the March, 1992 issue. I have been using PRO-C. It seems to work really well for generating C code. I have written a full application in about one hour. That's complete with designing a database, indexes, screens, and menus. I think that's neat. I am still rather an infant when it comes to C. So when generated code compiles the first time with no need for modification that's alright with me (especially for $99). You also can hook up to the data structures of your choice. The people at PRO-C LIMITED say the next version is even going to be better. It may possibly contain support for the SoftC Database Library. I have used PRO-C with the runtime version of Btrieve supplied and with my PARADOX Engine. PRO-C is worth trying out. Also their technical support is great. Their number is (519)571-0802 FAX (519)571-1504. They also are on Compuserve (GO PCVENB).<P>
Gene Lockwood<br>
Maspeth, NY<P>
Thanks for your information. Our readers may want to give this a try. (KP)<P>
I was reading your column in the March 1992 issue about code generators. At the end of your response, you asked to be informed of other code generators that were available.<P>
I wanted to let you know about a tool called Knowledge Shop. It is a development tool and code generator for C programmers wishing to incorporate rule-based systems into their code. Although excessive hype caused rule-based systems to get off to a slow start, their use in a wide variety of applications is increasing.<P>
If there was ever an ideal use for a code generator, it would be in building rule-based systems. Hand-coding tens, hundreds, or even thousands of interacting rules starts out difficult and rapidly approaches impossible. Decision System Software started life as a custom programming company that builds rule-based systems into applications. Knowledge Shop evolved as a result of our increasing frustration trying to do ever more demanding work with inadequate tools.<P>
Enjoy your column. Keep up the good work.<P>
Craig T. Paulson<br>
Cromwell, CT<P>
Thanks for your letter. Rule-based systems have good potential for automatic code generation. Decision System Software is at 160 West Street; Cromwell, CT 06416; (203) 632-7570. (KP)<P>
I'd like to add some comments (gripes, even) in answer to Steve Kohut's question on C code generators (March 1992 issue). I've worked with a half dozen or so C code generators and I've found many that hung me out to dry. I'll just mention two of this ilk, and I'll disguise the brand names to protect the guilty.<P>
The first generator, DataAcq, specialized in real-time data acquisition, analysis, and display. DataAcq provided its own editor with a "control-panel" interface that relieved me of the need to riffle through endless function-library manuals. It also prevented me from writing bad function calls. Besides, the little switches and knobs and stuff were cute.<P>
When I looked at DataAcq's code, I found that all those cute little switch selections had yielded unreadable function calls. Instead of clear, direct code like<P>
<pre>setXYGraphColors( White, Red, Red, Yellow, Green),</pre>
DataAcq wrote<P>
<pre>setXYGraphColors (15,4,4,7,3).</pre>
Had DataAcq's designers never heard of enumerated types or constants?<P>
Worse yet, I couldn't modify existing code with the control panels, because DataAcq couldn't read what it wrote. That made two of us! I had to abandon DataAcq because it was clearly useless throughout most of the software life-cycle. I was back to riffling through endless function-library manuals.<P>
The second generator, Facelt, specialized in text-based user interfaces. Facelt included a full-screen editor with which I could design an entire interface screen. I could lay out text, background colors and data fields. I could specify data field types, name variables, and define valid ranges. When I finished editing I could simply tell Facelt to go, and presto, I had C code.<P>
Alas, Facelt's designers also never heard of enumerated types or constants. Or information hiding! Facelt wrote one monstrously large C source file that contained parameter-less function after parameter-less function.<P>
How did Facelt stand up to the software life-cycle test? I found that if I didn't customize the code in any way, I could go back to the screen editor and make the changes there. But Facelt didn't provide enough features and it had limited feature-extension capabilities. I was compelled to modify Facelt's code, and I could never again use Facelt's editor. I was back to writing the code myself.<P>
I, too, heartily recommend superb code generators like <I>lex</I> and <I>yacc</I>. They are compact, powerful, and work as advertised. For code generators like DataAcq and Facelt, caveat tweakor!<P>
William J. Hoyt, Jr.<br>
Middletown, CT<P>
Thanks for the feedback. I've found the same problems with a couple of screen generators that I've used. <I>lex</I> and <I>yacc</I> are definitely great generators for language and command parsing. In a sense, they fall in the lines of the product mentioned in the previous letter. (KP)<P>
<h4><FONT COLOR="#000080"><A name="0152_00B4">Dynamic Link Libraries<A name="0152_00B4"></FONT></h4></P>
Phar Lap has DLLs under its 286|extender. Right now we're using Novell's OS/2 Btrieve DLL under regular old MSDOS.<P>
Robert A. Rose<br>
Fort Lauderdale, FL<P>
Thanks for the info. (KP)<P>
<h4><FONT COLOR="#000080"><A name="0152_00B5">Program Error<A name="0152_00B5"></FONT></h4></P>
This is in regards to a question by James A. Gant in the March 1992 issue. <A href="list4.htm">Listing 4</a>
of his C program has the following line:<P>
<pre>if (fp = fopen("screen.pic", "wb") == NULL)</pre>
The equality test operator has a higher precedence than the assignment. Therefore the variable <I>fp</I> will be assigned the result of the test and not the address of the <I>FCB</I> that <I>fopen</I> returns. Depending on the compiler and C libraries, he may get different results from the file generators.<P>
P.S. I just had exactly the same bug in one of my programs.<P>
Kevin Towers<br>
New Westminster, BC<P>
You have a sharp eye. This statement will be incorrect in ANSI standard compilers (as well as any K&amp;R one). The parenthesis must have gotten dropped somewhere in the transcription process. (KP)<P>

<h4><a href="../../../source/1992/jul92/pugh.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
