


<HTML>
<HEAD>

<TITLE>July 1992/Stepping Up To C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjul.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Stepping Up To C++<A name="0147_00AD"><A name="0147_00AD"></font></h2><P>
<h3 align="center"><A name="0147_0000"><A name="0147_0000">Operator Overloading, Part 4</h3><P>
<h3 align="center"><font color="#800000">Dan Saks</font></h3><hr><blockquote><P>
<P><i><A name="0147_0000"><A name="0147_0000">Dan Saks is the owner of Saks &amp; Associates, which offers consulting and training in C and C++. He is secretary of the ANSI C++ standards committee, and also contributing editor for Windows/DOS Developer's Journal. Dan recently finished his first book, C++ Programming Guidelines, written with Thomas Plum. You can write to him at 393 Leander Dr., Springfield, OH 45504, or dsaks@wittenberg.edu (Internet), or call (513)324-3601.</i></P><P>
This is my fourth and final column on operator overloading in C++. Throughout the earlier parts of this series (January '92, March '92 and May '92), I used a class for rational numbers (fractions) to demonstrate the techniques and design considerations for overloading operators.<P>
My <I>rational</I> class represents the numerator and denominator of each rational number by a pair of <I>signed long</I> integers. By the end of the third part in this series, the class had the following operations:<P>
<UL><li>zero-, one- and two-argument constructors</li>
<li>binary arithmetic operators: +, -, *, /</li>
<li>assignment operators: =, +=,-=, *=,/=</li>
<li>prefix unary operators: +, -, ++, --</li>
<li>postfix unary operators: ++, --</li>
<li>explicit conversion to double: <I>to_double</I></li>
<li>ostream output: &lt;&lt;</li></UL>
<A href="list1.htm">Listing 1</a>
shows a version of the header <I>rational.h</I> that declares these functions. (This version of the header omits implementation details, like the bodies of functions that I previously defined as inlines.) In part 2 of this series, I went to some pains to explain why operators ++ and -- should be non-member functions. However, in part 3, I accidentally wrote them as members. <A href="list1.htm">Listing 1</a>
presents them as non-members as they should be.<P>
Last time, I introduced the header <I>iostream.h</I> that defines the interface to the stream input/output library. I described the most basic stream output operators, and then defined a new stream output operator for rationals. In this article, I'll describe the basic stream input facilities, and then extend them to support rationals also'. After that, I will consider what remains to be done to make <I>rational</I>s an "industrial strength" class.<P>
<h4><FONT COLOR="#000080"><A name="0147_00AE">Basic Stream Input Facilities<A name="0147_00AE"></FONT></h4></P>
The <I>iostream</I> library provides input facilities as operations on objects of type <I>istream</I> (an input stream). The predefined object <I>cin</I> (pronounced "see-IN") is the <I>istream</I> object attached to standard input. (I neglected to mention last time that the output stream <I>cout</I> is pronounced "see-OUT". I believe <I>cerr</I> is pronounced "see-UR".)<P>
Just as the library overloads &lt;&lt; (the left-shift operator) for <I>ostream</I> output, it uses &gt;&gt; (the right-shift operator) for <I>istream</I> input. Most C++ <I>iostream</I> libraries define <I>istream::operator</I>&gt;&gt; for most predefined types. <A href="tab1.htm">Table 1</a>
lists a typical set of overloaded <I>operator</I>&gt;&gt; for <I>istream</I>. I have to hedge my statements with words like "typical" because this library, like most of the language, is still in the early stages of standardization, so most libraries tend to leave out one or two of the functions in my "typical" list.<P>
The compiler selects the appropriate <I>operator</I>&gt;&gt; based on the right-hand argument in the &gt;&gt; expression. For example,<P>
<pre>int n;
...
cin &gt;&gt; n;</pre>
uses <I>istream::operator&gt;&gt;(int &amp;)</I> to read from <I>cin</I> into <I>int n</I>. The <I>int</I> argument is a non-<I>const</I> reference so that the operator can modify it. As another example,<P>
<pre>char name[100];
...
cin &gt;&gt; name;</pre>
uses <I>istream::operotor&gt;&gt;(char *)</I> to read from <I>cin</I> into the character array <I>name</I>.<P>
Every <I>istream::operator</I>&gt;&gt; skips leading whitespace characters before reading the input value. (Whitespace is any character <I>c</I> for which the standard C function <I>isspace(c)</I> is true.) When reading a numeric type, like <I>int</I> or <I>double, operator</I>&gt;&gt; reads the characters representing the number using an appropriate format and converts them to the numeric representation. The operator stops reading when it encounters a character that doesn't match the input format. <I>operator</I>&gt;&gt; doesn't read that non-matching character; it leaves it in the input to be read by the next input operation.<P>
For example, if the input is<P>
<pre>   35
 -1.2 78</pre>
then<P>
<pre>int i;
...
cin &gt;&gt; i;</pre>
skips spaces, reads and converts the <I>35</I> to an <I>int</I> using a format equivalent to the <I>%d</I> format used with <I>scanf</I>, and stores the result in <I>i</I>. It leaves the whitespace immediately after the <I>5</I> as the next character to be read. Subsequently,<P>
<pre>double d;
...
cin &gt;&gt; d;</pre>
skips whitespaces to the '-', and then reads -<I>1.2</I> into <I>d</I> using the equivalent of <I>scanf</I>'s <I>%lf</I> format. The next input operation will start scanning at the whitespace immediately after the <I>2</I>.<P>
<I>istream::operator</I>&gt;&gt; evens skips leading whitespace when reading characters. For example,<P>
<pre>char c;
...
cin &gt;&gt; c;</pre>
uses <I>operator&gt;&gt; (char &amp;)</I>, which skips leading whitespace and reads a single non-whitespace character into <I>c</I>.<P>
<I>istream::operator&gt;&gt; (char *)</I> skips leading whitespace and then reads non-whitespace characters up to, but not including, the next whitespace. The function copies the nonwhitespace characters and a terminating null character into the string addressed by its <I>char</I> * operand. For example,<P>
<pre>char s[100];
...
cin &gt;&gt; s;</pre>
reads the input<P>
<pre>hello, world</pre>
up to, but not including, the space after the comma and copies <I>hello</I>, (along with the terminating null) into s.<P>
As with the output operators, you can put more than one input operator in a single input expression. For example,<P>
<pre>int i;
double d;
...
cin &gt;&gt; i &gt;&gt; d;</pre>
reads from <I>cin</I> into <I>i</I>, and then from <I>cin</I> into <I>d</I>. Just like &lt;&lt;, &gt;&gt; groups from left to right, so the above expression is equivalent to<P>
<pre>(cin &gt;&gt; i) &gt;&gt; d;</pre>
which, in turn, means<P>
<pre>(cin.operator&gt;&gt;(i)).operator&gt;&gt;(d);</pre>
Every <I>istream::operator</I>&gt;&gt; returns its left operand (of type <I>istream &amp;</I>) so that<P>
<pre>cin.operator&gt;&gt;(i)</pre>
reads from <I>cin</I> into <I>i</I> and returns a reference to <I>cin</I>. This reference becomes the left operand of the next call to <I>operator</I>&gt;&gt;. No matter how many &gt;&gt;s appear in the line, the left operand of each &gt;&gt; is always the <I>istream</I> at the beginning of the line.<P>
<h4><FONT COLOR="#000080"><A name="0147_00AF">Detecting End-of-File and Errors<A name="0147_00AF"></FONT></h4></P>
When used inside the controlling expression of a conditional statement, like an <I>if</I>- or <I>while</I>-statement, an <I>istream</I> input expression like <I>cin</I> &gt;&gt; <I>n</I> evaluates to a non-zero value if it succeeds and zero if it fails. A failure can be caused by encountering either <I>EOF</I> (end-of-file) or an error. For example,<P>
<pre>double n;
while (cin &gt;&gt; n)
   {
   ...
   }</pre>
repeatedly reads numbers (as <I>doubles</I>) from <I>cin</I> into <I>n</I>, and stops when it encounters <I>EOF</I> or an error. <A href="list2.htm">Listing 2</a>
shows a small, but complete, program that uses this technique. The program computes the arithmetic mean (the average) of a sequence of numbers read from standard input. It stops reading when it encounters <I>EOF</I> or an error.<P>
Pray tell, how does this work? Earlier, I said that an expression like <I>cin</I> &gt;&gt; <I>n</I> returns a reference, yet here I've said the value is either zero or non-zero. Which is it? Notice I said that an <I>istream::operator</I>&gt;&gt; expression <I>returns</I> a reference, but it <I>evaluates</I> to zero or non-zero when used in a conditional. This subtle distinction hinges on the semantics of selection statements in C++.<P>
In C, the controlling expression in a conditional statement must have scalar type. That is, it must have an arithmetic or pointer type. However, in C++, a controlling expression must either have scalar type, or it must be a class type for which an unambiguous conversion to a scalar type exists. In other words, you can use an expression that yields a class object (or a reference to a class object) as the controlling expression in a conditional statement if the class has exactly one conversion operator that converts the class type to some scalar type. (I introduced conversion operators in "Operator Overloading, Part 3", May 1992.)<P>
Class <I>istream</I> has a conversion operator that converts an <I>istream</I> to a <I>void</I> *. The function definition typically looks something like<P>
<pre>istream::operator void *()
   {
   if (previous operation succeeded)
      return this;
   else
      return 0;
   }</pre>
That is, the function examines the internal state (some private data) of the <I>istream</I> to determine if the previous input operation succeeded. If so, the function returns a non-null pointer; otherwise, it returns 0 (the null pointer). this &#151; the pointer to the <I>istream</I> object &#151; is a convenient choice for a non-null pointer. It will not cause addressing problems that might arise from choosing an arbitrary non-zero value.<P>
Each <I>istream</I> (and, in fact, each <I>ostream</I>) stores its success and failure states as a set of bits tucked away in a private data member. Even though you can't touch the bits directly, you can inspect, set, and reset them via member functions.<P>
For example, you can test for <I>EOF</I> on <I>cin</I> without trying to read anything by calling <I>cin.eof.istream::eof</I> returns a non-zero if <I>EOF</I> has occurred, and zero otherwise. Other <I>istream</I> state query functions are:<P>
<UL><li><I>good</I> &#151; the stream is still readable.</li>
<li><I>fail</I> &#151; an error occurred, but it's recoverable.</li>
<li><I>bad</I> &#151; the stream is corrupt.</li></UL>
If either <I>good</I> or <I>EOF</I> is true, the previous operation succeeded. However, <I>EOF</I> means the next operation won't. Attempting to read from a stream when <I>EOF</I> is true sets the fail indicator. Aside from that, attempting to read from a stream whose state is not good generally has no effect.<P>
In addition to indicating attempt to read after <I>EOF</I>, <I>fail</I> may indicate a "soft" error, like a formatting error. You can resume reading by clearing the <I>istream's</I> fail indicator. For example, when<P>
<pre>float f;
...
cin &gt;&gt; f;</pre>
sees input like<P>
<pre>$1.2</pre>
it simply stops at the <I>$</I> and sets <I>cin'</I>s fail indicator. The <I>$</I> remains the next character that will be read. To clear the fail indicator so you can continue reading, call<P>
<pre>cin.clear();</pre>
To simply discard the offending character without reading it, call<P>
<pre>cin.ignore();</pre>
The next call to <I>cin</I> &gt;&gt; <I>f</I> should read the value 1.2.<P>
The bad indicator usually means the stream is corrupt, so further reading is probably impossible. <I>bad</I> might indicate a hardware failure, or that the stream object has been damaged by a stray pointer somewhere else in the program. (Yup, C+ + is still C.)<P>
Thus, the implementation of the conversion operator <I>istream::operator void</I> * is typically something like<P>
<pre>istream::operator void *()
   {
   // if (previous operation succeeded)
   if (!fail ())
      return this;
   else
      return 0;
   }</pre>
or, more simply<P>
<pre>istream::operator void *()
   {
   return fail() ? 0 : this;
   }</pre>
This lets you write tests like<P>
<pre>while (cin &gt;&gt; i) { ... }</pre>
or just<P>
<pre>if (cin) { ... }</pre>
to determine if the stream is still readable. But how about testing if the stream is not readable? As you might expect, you can write<P>
<pre>if (!cin) { ... }</pre>
because <I>istream</I> also overloads the <I>!</I> operator as<P>
<pre>int istream::operator!()
   {
   return fail();
   }</pre>
<h4><FONT COLOR="#000080"><A name="0147_00B0">Input for Rationals<A name="0147_00B0"></FONT></h4></P>
Like the rational output operator, the rational input operator should be a non-member function, declared as<P>
<pre>istream &amp;operator&gt;&gt;(istream &amp;is, rational &amp;r);</pre>
<A href="list3.htm">Listing 3</a>
shows the simplest of all possible implementations. It merely reads two <I>long</I>s from <I>istream is</I>. If it reads both numbers successfully, it uses the values to construct a <I>rational</I> object that it copies into <I>r</I> (more specifically, into the <I>rational</I> object referenced by <I>r</I>). Notice, that if it fails to read two numbers, it does not change <I>r</I>. That's the way all of the <I>iostream</I> library's input operators work. It's usually good practice to make user-defined <I>I/0</I> operations behave as much as possible like the ones in the library.<P>
The problem with implementation in <A href="list3.htm">Listing 3</a>
is that it reads rationals in a format that's different from the output format. The <I>ostream</I> output operator writes rationals in the form (<I>num/denom</I>), but this input function doesn't look for the parentheses and slash. It only reads the numbers.<P>
<A href="list4.htm">Listing 4</a>
is my first attempt at writing a rational input operator that reads rationals in the form (<I>num/denom</I>). The input expression<P>
<pre>is &gt;&gt; 1p &gt;&gt; n &gt;&gt; slash &gt;&gt; d &gt;&gt; rp;</pre>
reads a character, then a number, then a character, then a number, and then a character. All of the &gt;&gt; operators supplied by the <I>iostream</I> library skip leading whitespace at the beginning of each read operation, the rational input operator is very tolerant of whitespace between any parts of a rational number.<P>
The following <I>if</I> statement<P>
<pre>if (is &amp;&amp; 1p == '(' &amp;&amp; slash == '/' &amp;&amp; rp == ')')</pre>
tests that the stream is still in good condition, and that all of the characters read have their expected values. The <I>&amp;&amp;</I> and | | operators can be overloaded in C+ +, but the <I>istream</I> class can't. Therefore, all the <I>&amp;&amp;</I>s in this expression invoke the built-in <I>&amp;&amp;</I>. The operands of built-in <I>&amp;&amp;</I> must be scalar, but the <I>is</I> to the left of the first <I>&amp;&amp;</I> is an <I>istream</I> object, not a scalar. So, the compiler applies <I>istream::operator void</I> * to <I>is</I>, just as it does when the stream object appears alone as the controlling expression of an <I>if</I>, as in<P>
<pre>if (is) { ... }</pre>
Anyway, if the stream is intact and all the characters are as expected, then the function proceeds to manufacture the rational number. Otherwise, it must somehow set the failure indicator for the stream. This you do using <I>istream::clear</I>.<P>
Earlier, I mentioned that<P>
<pre>is.clear();</pre>
resets a stream to a <I>good</I> state. <I>istream::clear</I> actually has an argument, but it has a default value of<P>
<pre>void istream::clear(int s = 0);</pre>
The default zero corresponds to the <I>good</I> state. However, you can also pass explicit non-zero values to put the stream into a non-<I>good</I> state, like <I>fail</I> or <I>bad</I>, or even a combination thereof. The values you pass are enumeration constants called <I>eofbit, failbit</I>, and <I>badbit</I>, and, just for completeness even though it's equal to zero, <I>goodbit</I>.<P>
These enumeration constants are defined inside a class called <I>ios</I>, which is defined in <I>iostream.h:</I><P>
<pre>class ios
   {
   ...
public:
   enum io_state
      {
      goodbit = 0,
      eofbit = 1,
      fail bit = 2,
      badbit = 4
      };
   ...
   };</pre>
Thus, the enumeration constants are members of class <I>ios</I>. When you refer to one of them, you must always use <I>ios::</I> as a prefix. To actually set the failure indicator in <A href="list4.htm">Listing 4</a>,
 replace the comment with<P>
<pre>is.clear(ios::failbit);</pre>
The version of <I>operator&gt;&gt;</I> in <A href="list4.htm">Listing 4</a>
is an improvement over <A href="list3.htm">Listing 3</a>,
 because it reads the rational output format. Unfortunately, it doesn't behave as well as it should on errors. <I>Every operator&gt;&gt;</I> in the <I>iostream</I> library stops reading at the character that triggered the error, leaving that character in the input stream. But <I>operator&gt;&gt;</I> in <A href="list4.htm">Listing 4</a>
tries to gobble up the whole rational number, and then goes back to check if what it gobbled was garbled.<P>
To get error reporting behavior that's consistent with the rest of the library, the rational <I>operator&gt;&gt;</I> must check for errors earlier, as shown in <A href="list5.htm">Listing 5</a>.
 Also, when the function reads an unexpected character, it should call<P>
<pre>is.putback(c);</pre>
to put that character back into the input stream.<P>
<A href="list5.htm">Listing 5</a>
is based on a similar function that reads complex numbers presented by Stroustrup <a href="#ref1">[1]</a> (page 336). This function actually permits three different input formats for rational numbers:<P>
<pre>num
(num)
(num/denom)</pre>
This is quite user friendly, and more like the behavior of floating point input functions. For example, when you enter a <I>float</I> that has no fractional part, you may omit the trailing decimal point and zero. That is, you need not write 13.0 when 13 will suffice. Similarly, the rational <I>operator&gt;&gt;</I> in <A href="list5.htm">Listing 5</a>
lets you enter (13), or even 13, instead of (13/1). Come to think of it, maybe the rational output operator should put (13/1) as 13.<P>
Stroustrup's technique for reading the parenthesis-free form is pretty slick. If the first non-whitespace character read is not a '(', the function puts the character back into the input stream, and tries reading it as just a number (specifically, a <I>long int</I>). If that read succeeds, then the character put back must have been a '+' or a '-' or a digit. If the read fails, then that character remains in the input stream.<P>
As Stroustrup notes in his discussion, <A href="list5.htm">Listing 5</a>
doesn't appear to check for errors as often as it should. But remember that any input operations on a stream that's not in good condition have no effect, so the function need not check the stream's state before every input operation. However, it must check each punctuation character immediately.<P>
<A href="list5.htm">Listing 5</a>
differs from Stroustrup's implementation in two notable ways. First, his function uses <I>ios::badbit</I> instead of <I>ios::failbit</I> to indicate a formatting error. I think you should reserve <I>ios:: badbit</I> for more catastrophic errors. Secondly, his function fails to call <I>is.putback(c)</I> just before it calls <I>is. clear</I>, so it handles errors less consistently.<P>
The <I>iostream</I> library is fairly large and, at times, complex. What I have shown you is just enough to start using the library and write your own primitive extensions to it. I will cease using <I>stdio.h</I> in my C++ examples, and explain more about <I>iostream</I> as it arises in future examples. For additional explanation of the <I>iostream</I> library see Stroustrup <a href="#ref1">[1]</a> or Lippman <a href="#ref2">[2]</a>.<P>
<h4><FONT COLOR="#000080"><A name="0147_00B1">So What's Left?<A name="0147_00B1"></FONT></h4></P>
<A href="list6.htm">Listing 6</a>
shows the header <I>rational.h</I> complete with all the details I've added as I built up the class. <A href="list7.htm">Listing 7</a>
shows the source file <I>rational.cpp</I> containing the definitions for the out-of-line functions.<P>
My rational class has a lot of functionality, but it needs more work before it's ready for prime time. Here's my wish list:<P>
<UL><li>equality operators: ==, <I>! </I>=</li>
<li>relational operators: &lt;, &gt;, &lt;=, =&gt;</li>
<li>explicit conversion to <I>long</I></li></UL>
But more important than the missing operators are implementation details that make the class more reliable, such as:<P>
<UL><li>properly reducing the fractions before and after computations</li>
<li>testing for potential errors such as arithmetic overflow or a denominator equal to zero</li></UL>
Error recovery in C++ programs is a complex issue that I will deal with in the future.<P>
I will move on to other topics now, but I encourage you to try adding some of these enhancements to this rational number class. I welcome suggestions for improvement and test cases that expose flaws in what I've done. When I get enough good ideas, I'll present them in a future article.<P>
Ammeraal <a href="#ref3">[3]</a> presents an alternative implementation for rational numbers. His class appears to reduce fractions properly and test for errors at critical places. I haven't had a chance to test any of the code so I can't attest to its quality, but it's a good source of ideas and worth reading.<P>
<h4>References</FONT></h4></P>
<a name="ref1">[1]</a>     Stroustrup, Bjarne. 1991. <I>The C++ Programming Language</I>, 2nd ed. Reading, MA: Addison-Wesley, Addison-Wesley.<P>
<a name="ref2">[2]</a>     Lippman, Stanley B. 1991. <I>C</I>++ <I>Primer</I>, 2nd. ed. Reading MA: Addison-Wesley.<P>
<a name="ref3">[3]</a>     Ammeraal, Leendert. 1991. <I>C</I>++ <I>Programmers</I>. New York: Wiley.<P>
<h4><FONT COLOR="#000080"><A name="0147_00B2">Mea Culpa!<A name="0147_00B2"></FONT></h4></P>
Last month we accidentally left out the two figures in the article "A Small <I>make</I>" by Mike Gilson. Here they are now. <A href="fig1.htm">Figure 1</a>
contains a directed graph, or diagraph, which represents the dependencies of the files comprising <I>hello.exe</I>. <A href="fig2.htm">Figure 2</a>
shows an adjacency list for <I>hello.exe</I> and its dependencies, including the command lasts.<P>
-dt<P>

<h4><a href="../../../source/1992/jul92/saks.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
