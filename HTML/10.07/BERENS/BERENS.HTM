


<HTML>
<HEAD>

<TITLE>July 1992/Two-Dimensional Procedure Tables</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjul.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">Two-Dimensional Procedure Tables<A name="013F_00A5"><A name="013F_00A5"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="013F_0000"><A name="013F_0000">Tim Berens</font></h3><hr><blockquote><P>
<P><i><A name="013F_0000"><A name="013F_0000">Tim Berens is president of Back Office Applications, Inc., a contract software house founded in 1986. He specializes in C development for MS-DOS and UNIX, and his projects have ranged from SNA communications to Girl Scout Cookie accounting software. He can be reached at 6691 Centerville Business Parkway, Dayton, OH 45459, (513) 434-5444.</i></P><P>
This article describes a C-programming technique for storing procedure addresses in a table. This technique allows the developer to execute the procedures using methods similar to those for accessing data, such as numbers, that are stored in a table. To demonstrate the use of procedure tables, I will describe a problem that was solved using a two-dimensional procedure table.<P>
<h4><FONT COLOR="#000080"><A name="013F_00A6">The Problem<A name="013F_00A6"></FONT></h4></P>
We needed to develop a method to handle interfaces with multiple database-management systems that would not change existing code in any way. This task arose after developing a medium-size DOS-based business application for one of our clients. After the system reached about 200,000 lines of code, the client asked us to port the application to run under XENIX. At this point, an odd combination of technical and business requirements forced us to use the Informix database-management system when running on XENIX, but continue to use the c-tree File Handler as the database-management system when on DOS.<P>
To further complicate matters, some of the files in the XENIX version had to be read using a pipe to a background SQL server, instead of using direct function calls as on the DOS version. This meant that we needed to read data from three different file formats, with three very different interfaces. In addition, because of our need to continue to support both XENIX and DOS, we wanted identical versions of source code on both operating systems. We also wanted to preserve the existing code.<P>
<h4><FONT COLOR="#000080"><A name="013F_00A7">The Solution<A name="013F_00A7"></FONT></h4></P>
Fortunately, we anticipated a situation similar to this very early during the design process, long before writing any code. To minimize the impact of interfacing with multiple database-management systems later, we developed a generic database-interface layer and routed all calls to the database through this layer. It consisted of a suite of functions such as:<P>
<I>read_equal_rec   </I>Reads a record whose index matches the key values passed.<P>
<I>save_rec             </I>Saves the record passed.<P>
<I>read_next_rec    </I>Reads the next record.<P>
This interface layer in turn made the calls to the low-level database functions that actually read from or wrote to the file system.<P>
The additional layer slowed the system down, but only very slightly. And the savings in development time we realized in the long run was worth the slight drop in speed.<P>
To handle the multiple interfaces, we considered several methods. All these methods involved replacing the database-interface layer with another layer that determined the file type being requested, and then called the appropriate function in the next layer to perform the operation. The process of routing the calls to the correct routines differed among the various methods. The method we finally chose used a two-dimensional procedure table to handle the routing.<P>
<h4><FONT COLOR="#000080"><A name="013F_00A8">The Implementation<A name="013F_00A8"></FONT></h4></P>
Each of the calls to the database-interface routines receives a variety of arguments including a pointer to the <I>file</I> structure associated with the file being read. (This should not be confused with the standard library's <I>FILE</I> structures. It is a structure of our own creation.) This structure's members store such information as the size of the records, a buffer for holding the records, etc.<P>
To facilitate the routing, we added two members to the <I>file</I> structure. One, called <I>filetype</I>, is an integer in the range of 0 to 2. The value stored in this member corresponds with the type of database file (c-tree, Informix, or SQL) that this structure represents. The other is an integer in the range of 0 to 22 to represent each of the functions in the database-interface layer.<P>
Each of these two numbers represents an offset into one of the dimensions of the two-dimensional <I>file_operations</I> procedure table. When the application calls a database-interface function, it uses the <I>filetype</I> and the assigned function number to calculate a position in the two-dimensional procedure table. The application then executes the function whose address is stored at this position. This procedure table is defined in <A href="list1.htm">Listing 1</a>.
<P>
The application maps each call to a database-interface function to a function pointer in the procedure table through the use of a macro. We wrote a macro for each function in the database library and placed these in a file called <I>filetype.h.</I> Then we added this file to a standard header, which is included in every file in our system. The somewhat frightening line of code shown in <A href="list2.htm">Listing 2</a>
does nothing more than replace the call to <I>read_equal_rec</I> with the address of the proper function to read a record depending on the <I>filetype</I> of the file being read. For example, a call to <I>read_equal_rec</I> for a file of <I>filetype</I> 2 would be mapped into <I>file_operations[0][2]</I>. This would cause the function <I>SQL_read_equal_rec</I> to be executed.<P>
<h4><FONT COLOR="#000080"><A name="013F_00A9">The Conclusion<A name="013F_00A9"></FONT></h4></P>
The two-dimensional procedure table was only conceptually difficult. Once the system was designed, it required only a couple hundred lines of code to implement. The most time-consuming aspect of our port to XEN1X was writing the database interface routines. But after the database interface routines were written for each of the file types (c-tree, Informix, and SQL), it required only a recompile of the code for the system to fire to life.<P>

<h4><a href="../../../source/1992/jul92/berens.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
