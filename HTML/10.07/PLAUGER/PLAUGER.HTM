


<HTML>
<HEAD>

<TITLE>July 1992/Standard C</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjul.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Standard C<A name="0145_00AB"><A name="0145_00AB"></font></h2><P>
<h3 align="center"><A name="0145_0000"><A name="0145_0000">Multibyte Functions</h3><P>
<h3 align="center"><font color="#800000">P.J. Plauger</font></h3><hr><blockquote><P>
<P><i><A name="0145_0000"><A name="0145_0000">P.J. Plauger is senior editor of The C Users Journal. He is secretary of the ANSI C standards committee, X3J11, and convenor of<I></I> <I></I>the ISO C standards committee, WG14. His latest book is The Standard C Library, published by Prentice-Hall. You can reach<I></I> <I></I>him at uunet!plauger!pjp.</i></P><P>
<h4><FONT COLOR="#000080"><A name="0145_00AC">Introduction<A name="0145_00AC"></FONT></h4></P>
Support for large character sets was probably the largest single addition to Standard C. You won't find much prior art for this stuff. A few Japanese companies worried about large character sets years ago, as did a few international companies keen to sell software to Japan. Even so, much of what went into Standard C was pure invention.<P>
One of my major motivations in writing the Standard C library was to prove in the multibyte functions. It's nice to know whether they can be written efficiently, or whether they can be written at all. I was pleased to find that the basic specification in the C Standard is indeed viable.<P>
What's hard is to write the critical functions to be usable with multiple character sets. Even within Japan, several multibyte encodings are popular. I didn't want to write multiple specialized versions of these functions. And I didn't want to require lots more coding to support Chinese, Korean, Arabic, or other large character sets around the world. That proved to be the fun part.<P>
The functions I present here are the ones declared in the header <I>&lt;stdlib.h&gt;</I>. They are the bare minimum needed to support multibyte characters (sequences of one or more bytes to represent each character), wide characters (fixed-size integers that can represent all possible characters), and conversions between these two forms. Both the ISO C and C++ standards will soon incorporate a richer set of additional functions for manipulating large character sets.<P>
<h4><FONT COLOR="#000080"><A name="0145_00AD">What the C Standard Says<A name="0145_00AD"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0145_00AE">7.10.7 Multibyte character functions<A name="0145_00AE"></FONT></h4></P>
The behavior of the multibyte character functions is affected by the <I>LC_CTYPE</I> category of the current locale. For a state-dependent encoding, each function is placed into its initial state by a call for which its character pointer argument, <I>s</I>, is a null pointer. Subsequent calls with <I>s</I> as other than a null pointer cause the internal state of the function to be altered as necessary. A call with s as a null pointer causes these functions to return a nonzero value if encodings have state dependency, and zero otherwise.131 Changing the <I>LC_CTYPE</I> category causes the shift state of these functions to be indeterminate.<P>
<h4><FONT COLOR="#000080"><A name="0145_00AF">7.10.7.1 The <B><I>mblen</I></B> function<A name="0145_00AF"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0145_00B0">Synopsis<A name="0145_00B0"></FONT></h4></P>
<pre>#include &lt;stdlib.h&gt;
int mblen(const char *s, size_t n);</pre>
<h4><FONT COLOR="#000080"><A name="0145_00B1">Description<A name="0145_00B1"></FONT></h4></P>
If <I>s</I> is not a null pointer, the <I>mblen</I> function determines the number of bytes contained in the multibyte character pointed to by <I>s</I>. Except that the shift state of the <I>mbtowc</I> function is not affected, it is equivalent to<P>
<pre>mbtowc((wchar_t *)0, s, n);</pre>
The implementation shall behave as if no library function calls the <I>mblen</I> function.<P>
<h4><FONT COLOR="#000080"><A name="0145_00B2">Returns<A name="0145_00B2"></FONT></h4></P>
If <I>s</I> is a null pointer, the <I>mblen</I> function returns a nonzero or zero value, if multibyte character encodings, respectively, do or do not have state-dependent encodings. If <I>s</I> is not a null pointer, the <I>mblen</I> function either returns 0 (if <I>s</I> points to the null character, or returns the number of bytes that are contained in the multibyte character (if the next <I>n</I> or fewer bytes form a valid multibyte character), or returns -1 (if they do not form a valid multibyte character).<P>
<B>Forward references:</B> the <I>mbtowc</I> function (7.10.7.2).<P>
<h4><FONT COLOR="#000080"><A name="0145_00B3">7.10.7.2 The <B><I>mbtowc</I></B> function<A name="0145_00B3"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0145_00B4">Synopsis<A name="0145_00B4"></FONT></h4></P>
<pre>#include &lt;stdlib.h&gt;
int mbtowc(wchar_t *pwc, const char *s, size_t n);</pre>
<h4><FONT COLOR="#000080"><A name="0145_00B5">Description<A name="0145_00B5"></FONT></h4></P>
If <I>s</I> is not a null pointer, the <I>mbtowc</I> function determines the number of bytes that are contained in the multibyte character pointed to by <I>s</I>. It then determines the code for the value of type <I>wchar_t</I> that corresponds to that multibyte character. (The value of the code corresponding to the null character is zero.) If the multibyte character is valid and <I>pwc</I> is not a null pointer, the <I>mbtowc</I> function stores the code in the object pointed to by <I>pwc</I>. At most <I>n</I> bytes of the array pointed to by <I>s</I> will be examined.<P>
The implementation shall behave as if no library function calls the <I>mbtowc</I> function.<P>
<h4><FONT COLOR="#000080"><A name="0145_00B6">Returns<A name="0145_00B6"></FONT></h4></P>
If <I>s</I> is a null pointer, the <I>mbtowc</I> function returns a nonzero or zero value, if multibyte character encodings, respectively, do or do not have state-dependent encodings. If <I>s</I> is not a null pointer, the <I>mbtowc</I> function either returns 0 (if <I>s</I> points to the null character), or returns the number of bytes that are contained in the converted multibyte character (if the next <I>n</I> or fewer bytes form a valid multibyte character), or returns -1 (if they do not form a valid multibyte character).<P>
In no case will the value returned be greater than <I>n</I> or the value of the <I>MB_CUR_MAX</I> macro.<P>
<h4><FONT COLOR="#000080"><A name="0145_00B7">7.10.7.3 The <B><I>wctomb</I></B> function<A name="0145_00B7"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0145_00B8">Synopsis<A name="0145_00B8"></FONT></h4></P>
<pre>#include &lt;stdlib.h&gt;
int wctomb(char *s, wchar_t wchar);</pre>
<h4><FONT COLOR="#000080"><A name="0145_00B9">Description<A name="0145_00B9"></FONT></h4></P>
The <I>wctomb</I> function determines the number of bytes needed to represent the multibyte character corresponding to the code whose value is <I>wchar</I> (including any change in shift state). It stores the multibyte character representation in the array object pointed to by <I>s</I> (if <I>s</I> is not a null pointer). At most <I>MB_CUR_MAX</I> characters are stored. If the value of <I>wchar</I> is zero, the <I>wctomb</I> function is left in the initial shift state.<P>
The implementation shall behave as if no library function calls the <I>wctomb</I> function.<P>
<h4><FONT COLOR="#000080"><A name="0145_00BA">Returns<A name="0145_00BA"></FONT></h4></P>
If <I>s</I> is a null pointer, the <I>wctomb</I> function returns a nonzero or zero value, if multibyte character encodings, respectively, do or do not have state-dependent encodings. If <I>s</I> is not a null pointer, the <I>wctomb</I> function returns -1 if the value of <I>wchar</I> does not correspond to a valid multibyte character, or returns the number of bytes that are contained in the multibyte character corresponding to the value of <I>wchar</I>.<P>
In no case will the value returned be greater than the value of the <I>MB_CUR_MAX</I> macro.<P>
<h4><FONT COLOR="#000080"><A name="0145_00BB">7.10.8 Multibyte string functions<A name="0145_00BB"></FONT></h4></P>
The behavior of the multibyte string functions is affected by the <I>LC_CTYPE</I> category of the current locale.<P>
<h4><FONT COLOR="#000080"><A name="0145_00BC">7.10.8.1 The <B><I>mbstowcs</I></B> function<B><A name="0145_00BC"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0145_00BD">Synopsis<A name="0145_00BD"></FONT></h4></P>
<pre>#include &lt;stdlib.h&gt;
size_t mbstowcs(wchar_t *pwcs,
const char *s, size_t n);</pre>
<h4><FONT COLOR="#000080"><A name="0145_00BE">Description<A name="0145_00BE"></FONT></h4></P>
The <I>mbstowcs</I> function converts a sequence of multibyte characters that begins in the initial shift state from the array pointed to by <I>s</I> into a sequence of corresponding codes and stores not more than <I>n</I> codes into the array pointed to by <I>pwcs</I>. No multibyte characters that follow a null character (which is converted into a code with value zero) will be examined or converted. Each multibyte character is converted as if by a call to the <I>mbtowc</I> function, except that the shift state of the <I>mbtowc</I> function is not affected.<P>
No more than <I>n</I> elements will be modified in the array pointed to by <I>pwcs</I>. If copying takes place between objects that overlap, the behavior is undefined.<P>
<h4><FONT COLOR="#000080"><A name="0145_00BF">Returns<A name="0145_00BF"></FONT></h4></P>
If an invalid multibyte character is encountered, the <I>mbstowcs</I> function returns <I>(size_t)-1</I>. Otherwise, the <I>mbstowcs</I> function returns the number of array elements modified, not including a terminating zero code, if any.132<P>
<h4><FONT COLOR="#000080"><A name="0145_00C0">7.10.8.2 The <B><I>wcstombs</I></B> function<A name="0145_00C0"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0145_00C1">Synopsis<A name="0145_00C1"></FONT></h4></P>
<pre>#include &lt;stdlib.h&gt;
size_t wcstombs(char *s, const
wchar_t *pwcs, size_t n);</pre>
<h4><FONT COLOR="#000080"><A name="0145_00C2">Description<A name="0145_00C2"></FONT></h4></P>
The <I>wcstombs</I> function converts a sequence of codes that correspond to multi-byte characters from the array pointed to by <I>pwcs</I> into a sequence of multibyte characters that begins in the initial shift state and stores these multibyte characters into the array pointed to by <I>s</I>, stopping if a multibyte character would exceed the limit of <I>n</I> total bytes or if a null character is stored. Each code is converted as if by a call to the <I>wctomb</I> function, except that the shift state of the <I>wctomb</I> function is not affected.<P>
No more than <I>n</I> bytes will be modified in the array pointed to by <I>s</I>. If copying takes place between objects that overlap, the behavior is undefined.<P>
<h4><FONT COLOR="#000080"><A name="0145_00C3">Returns<A name="0145_00C3"></FONT></h4></P>
If a code is encountered that does not correspond to a valid multibyte character, the <I>wcstombs</I> function returns <I>(size_t)-1</I>. Otherwise, the <I>wcstombs</I> function returns the number of bytes modified, not including a terminating null character, if any.132<P>
Footnotes<P>
131. If the implementation employs special bytes to change the shift state, these bytes do not produce separate wide character codes, but are grouped with an adjacent multibyte character.<P>
132. The array will not be null- or zero-terminated if the value returned is <I>n</I>.<P>
<h4><FONT COLOR="#000080"><A name="0145_00C4">Using the Functions<A name="0145_00C4"></FONT></h4></P>
<I>mblen</I> &#151; Use this function to determine the length of the multibyte sequence that defines a single wide character. That length cannot be greater than <I>MB_CUR_MAX</I>, defined in <I>&lt;stdlib.h&gt;</I>. Multibyte sequences can contain locking shifts that alter the interpretation of any number of characters that follow. Hence, <I>mblen</I> stores in a private static data object the shift state for the multibyte string it is currently scanning. If the call <I>mblen(NULL</I><I>, </I><I>0)</I> is nonzero, you can safely scan only one multibyte string at a time by repeated calls to <I>mblen</I>. Here, for example, is a function that checks whether a multi-byte string has a valid encoding:<P>
<pre>#include &lt;stdlib.h&gt;

int mbcheck(const char *s)
   {  /* return zero if s is valid */
   int n;

   for (mblen(NULL, 0); ; s += n)
      if ((n = mblen(s, MB_CUR_MAX)) &lt;= 0)
         return (n);
   }</pre>
<I>mbstowcs</I> &#151; Use this function to convert an entire multi-byte string to a wide-character string. You needn't worry about whether locking shifts occur, since the function processes the entire multibyte string. You also needn't worry that the resultant wide-character string is too long, since the third argument <I>n</I> limits the number of elements stored. If the function returns <I>n</I>, the conversion was incomplete. If the function returns a negative value, the multibyte string has an invalid encoding.<P>
<I>mbtowc</I> &#151; Use this function much the same as you would <I>mblen</I>, described above. Two differences exist between the functions <I>mbtowc</I> and <I>mblen</I>:<P>
<UL><li>If the first argument to <I>mbtowc</I> is not a null pointer, the function returns the wide character it converts. Thus, you can translate a single wide character at a time, unlike <I>mbstowcs</I> which translates the entire string at once.</li></UL>
The functions <I>mblen</I> and <I>mbtowc</I> maintain separate static data objects to store shift states. Thus, you can scan different strings at the same time with the two functions even when multibyte strings have locking shifts.<P>
<I>wcstombs</I> &#151; Use this function to convert an entire wide-character string to a multibyte string. You needn't worry about whether locking shifts occur, since the function processes the entire wide character string. You also needn't worry that the resultant multibyte string is too long, since the third argument <I>n</I> limits the number of elements stored. If the function returns <I>n</I>, the conversion was incomplete. If the function returns a negative value, the wide-character string is invalid.<P>
<I>wctomb</I> &#151; Use this function to convert a wide-character string to a multi-byte string one wide character at a time. Here, for example, is a function that checks whether a wide-character string has a valid encoding:<P>
<pre>#include &lt;limits.h&gt;
#include &lt;stdlib.h&gt;
int wccheck(wchar_t *wcs)
   {  /* return zero if wcs is valid */
   char buf[MB_LEN_MAX];
   int n;

   for (wctomb(NULL, 0); ; ++wcs)
      if ((n = wctomb(buf, *wcs)) &lt;= 0)
         return (-1);
      else if (buf[n - 1] == '\0')
         return (0);
   }</pre>
Note that <I>wctomb</I> includes the terminating null character in the count it returns.<I>mbtowc</I> does not.<P>
<h4><FONT COLOR="#000080"><A name="0145_00C5">Implementing the Functions<A name="0145_00C5"></FONT></h4></P>
<A href="list1.htm">Listing 1</a>
shows the file <I>mbtowc.c</I> and <A href="list2.htm">Listing 2</a>
shows the file <I>mblen.c</I>. Both <I>mbtowc</I> and <I>emblen</I> call the internal function <I>_Mbtowc</I> to do the actual work. Each provides separate storage of type <I>_Mbsave</I>, defined in <I>&lt;stdlib.h&gt;</I>, to memorize the shift state while walking a multibyte string. The data objects <I>_Mbxlen</I> and <I>_Mbxtow</I>c both have names with external linkage. That permits the header <I>&lt;stdlib.h&gt;</I> to define masking macros for both functions <I>.</I><I>mblen</I> can, in principle, be simpler than <I>mbtowc</I>. In this implementation, however, little difference exists between what the two functions must do.<P>
<A href="list3.htm">Listing 3</a>
shows the <I>file mbstowcs.c</I>. The function <I>mbstowcs</I> calls <I>_Mbtowc</I> repeatedly to translate an entire multibyte string to a wide character string. It too provides storage of type <I>_Mbsave</I>, but it need not retain the shift state between calls.<P>
<A href="list4.htm">Listing 4</a>
shows the file <I>xmbtowc.c</I>. The function <I>_Mbtowc</I> parses a multibyte sequence far enough to develop the next wide character that it represents. It does so as a finite-state machine executing the state table stored at <I>_Mbstate</I>, defined in the file <I>xstate.c</I>. (See <I>Standard C</I>, March and April 1991 for a discussion of how to specify state tables as part of a locale.)<P>
<I>_Mbtowc</I> must be particularly cautious because <I>_Mbstate</I> can be flawed. It can change with locale category <I>LC_CTYPE</I> in ways that the Standard C library cannot control.<P>
Note the various ways that the function can elect to take an error return:<P>
<UL><li>if a transfer occurs to an undefined state</li>
<li>if no state table exists for a given state</li>
<li>if the multibyte string ends part way through a multibyte character</li>
<li>if the function makes so many state transitions since generating a wide character that it must be looping</li>
<li>if the state table entry speciffically signals an error</li></UL>
The rest of <I>_Mbtowc</I> is simple by comparison. The function retains the wide-character accumulator (<I>ps-&gt;_Wchar</I>) as part of the state memory. That simplifies generating a sequence of wide characters with a common component while in a given shift state. <I>_Mbtowc</I> returns after delivering each wide character.<P>
<A href="list5.htm">Listing 5</a>
shows the file <I>wctomb.c</I>. The function <I>wctomb</I> calls the internal function <I>_Wctomb</I> solely to provide separate state memory. In this case, the shift state can be stored in a data object of type <I>char</I>. The data object <I>_Wcxtomb</I> has a name with external linkage so that the header <I>&lt;stdlib.h&gt;</I> can define a masking macro for <I>wctomb</I>.<P>
<A href="list6.htm">Listing 6</a>
shows the file <I>wcstombs.c</I>. The function <I>wcstombs</I> calls <I>_Wctomb</I> repeatedly to translate a wide-character string to a multibyte string. It too provides its own state memory, but it need not retain the shift state between calls.<P>
What makes this function complex is the finite length of the <I>char</I> array it writes. If at least <I>MB_CUR_MAX</I> elements remain, <I>_Wctomb</I> can deliver characters directly. Otherwise, <I>wcstombs</I> must store the generated characters in an array of length <I>MB_LEN_MAX</I> and deliver as many as it can.<P>
<A href="list7.htm">Listing 7</a>
shows the file <I>xwctomb.c</I>. The function <I>_Wctomb</I> converts a wide character to the one or more characters that comprise its multibyte representation. It does so as a finite-state machine executing the state table stored at <I>_Wcstate</I>, defined in the file <I>xstate.c</I>.<P>
<I>_Wctomb</I> must also be cautious because <I>_Wcstate</I> can also be flawed. It can change with locale category <I>LC_CTYPE</I> in ways that the Standard C library cannot control. Note the various ways that the function can elect to take an error return:<P>
<UL><li> if a transfer occurs to an undefined state</li>
<li>if no state table exists for a given state</li>
<li>if the generated multibyte string threatens to become longer than <I>MB_CUR_MAX</I> characters</li>
<li>if the function makes so many state transitions since generating a character that it must be looping</li>
<li>if the state table entry specifically signals an error</li></UL>
The rest of <I>_Wctomb</I> is likewise simple by comparison. It returns after consuming each input wide character.<P>
<I>This article is excerpted from P.J. Plauger</I>, The Standard C Library, <I>(Englewood Cliffs, N.J.: Prentice-Hall, 1992).</I><P>

<h4><a href="../../../source/1992/jul92/plauger.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
