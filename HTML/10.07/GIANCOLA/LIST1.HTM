<HTML><HEAD>
<TITLE>July 1992/Bit Arrays with C++/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1</A></h4>
<pre>// 2D - bit packed array
// fundamental class definitions

#include &lt;stdlib.h&gt;
#include &lt;iostream.h&gt;

enum logical { FALSE, TRUE };

typedef unsigned char BYTE;

template &lt; int XDIM, int YDIM, int NUM_BITS &gt;
class Bit_2D_Array {
    private:
        // You can't initialize NUM_BYTES here, but you can dimension
        // data, so NUM_BYTES = sizeof(data);
        int NUM_BYTES;

        BYTE data[( XDIM * YDIM * NUM_BITS + 7 ) / 8];

        class BIT TMP {
            public:
                BYTE * byte_ptr;
                BYTE   shift_bits;
                BYTE   value;

                BYTE MASK[8];     // All but bits of interest CLEARED
                BYTE INV_MASK[8]; // All but bits of interest SET

                operator int() {
                    return( value );
                }

                BIT_TMP() {
                    double num_sub fields;
                    BYTE tmp_mask;
                    int i;

                    // Needed for Cfront3.0
                    cout &lt;&lt; " BIT_TMP" &lt;&lt; end1;

                    num sub fields - 8.0 / NUM_BITS;
                    if ( num_sub fields * NUM_BITS !=8 ) {
                        cerr &lt;&lt; "NUM_BITS must divide evenly into 8" &lt;&lt; endl;
                        exit(1);
                    }
                    tmp_mask - 1;
                    for( i=1; i&lt;NUM_BITS; i++) {
                        tmp_mask &lt;&lt;= 1;
                        tmp_mask | = 1;
                    }
                    for( i-0; i&lt;num_sub_fields; i++ ) {
                        MASK[i] - tmp_mask &lt;&lt; (i*NUM_BITS);
                        INV_MASK[i] = 255 ^ MASK[i];
                    }
                }

                void operator=( class BIT_TMP input ) {

                    input.value &amp;=MASK[0]; // Mask off any extraneous bits
                    *(byte_ptr) &amp;= INV_MASK[ shift_bits / NUM_BITS ];
                    *(byte_ptr) |=(input.value&lt;&lt; shift_bits);
                    input_value &lt;5 shift_bits );
                    value = input.value;
                }

                void operator=( BYTE input_value ) {

                    input_value &amp;= MASK[0]; // Mask off any extraneous bits
                    *(byte_ptr) &amp;= INV_MASK[ shift_bits / NUM_BITS ];
                    *(byte_ptr) |= (input_value &lt;&lt; shift_bits);
                    value = input_value;
                }

                logical operator==( class BIT_TMP input ) {
                    return( logical( value == input.value) );
                }
        };

        class BIT_TMP local_rec;

    public:
        Bit_2D_Array();

        // This should be an overloaded ostream but Cfront3.0 crashes
        void dump() {
            int i, j;

            cout.width(3);
            cout &lt;&lt; endl ;
            for( j=0; j&lt;YDIM; j++) {
                cout &lt;&lt; j &lt;&lt;" ";
            }
            cout &lt;&lt; endl;
            cout &lt;&lt;"";
            for( j=0; j&lt;YDIM; j++) {
                cout &lt;&lt; "----";
            }
            cout &lt;&lt; endl;
            for( i=0; i&lt;XDIM; i++) {
                cout &lt;&lt; i &lt;&lt; "/";
                for( j=0; j&lt;YDIM; j++) {
                    cout &lt;&lt; (*this)(i,j) &lt;&lt;" ";
                }
                cout &lt;&lt; endl;
            }
        }

        class BIT_TMP operator()( int i, int j ) {
            BYTE bit_num, byte_num, sub_bits;

            bit_num  = NUM_BITS * (XDIM*i + j);
            byte_num = bit_num / 8;
            sub_bits = bit_num % 8;
            local_rec.byte_ptr = &amp;data[byte_num];
            local rec.shift_bits = sub_bits;
            local_rec.value =
                local_rec.MASK[0] &amp; ( data[byte_num] &gt;&gt; sub_bits );
                cout &lt;&lt;" subscript for" &lt;&lt; i &lt;&lt; ',' &lt;&lt; j &lt;&lt; endl ;
            return( local_rec );
        };

        logical operator==( Bit_2D_Array&lt; XDIM, YDIM, NUM_BITS &gt; RHS ) {
            int i;

            for( i=0; i&lt; NUM_BYTES; i++) {
                if ( data[i] != RHS.data[i] ) {
                    return( FALSE );
                }
            }
            return( TRUE );
        };

        void operator=( int RHS ) {
            int i, j;

            for( i=0; i&lt; XDIM; i++) {
                for( j=0; j&lt; YDIM; j++) {
                    (*this)(i,j) = RHS;
                }
            }
        };
};
// End of File
</pre>
</BODY>
</HTML>
