


<HTML>
<HEAD>

<TITLE>July 1992/Bit Arrays with C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjul.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Extensions</FONT></H2>

<hr><h2 align="center"><font color="#800000">Bit Arrays with C++<A name="0139_009F"><A name="0139_009F"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0139_0000"><A name="0139_0000">A. Giancola and L. Baker</font></h3><hr><blockquote><P>
<P><i><A name="0139_0000"><A name="0139_0000">Anthony Giancola has an M.S. in Computer Science<I></I> <I></I>from the University of New Mexico. He currently<I></I> <I></I>works on scientific visualization and parallel<I></I> <I></I>processing.</i></P><P>
<P><i>Louis Baker has a Ph.D. in astronomy and works on numerical modeling. He has written four books, three<I></I> <I></I>on C and C++.</i></P><P>
<P><i>Both may be reached at Mission Research Corp., 1720 Randolph Rd. SE, Albuquerque, NM, 87106.</i></P><P>
<h4><FONT COLOR="#000080"><A name="0139_00A0">Introduction<A name="0139_00A0"></FONT></h4></P>
The oriental boardgame of Go is played on a rectangular grid of 19 horizontal and vertical lines, the players alternately placing stones of black and white at the intersections of the lines. To write a Go-playing program, we wanted to set up an array corresponding to the board, with two bits devoted to encode for each location the conditions: unoccupied, black stone, white stone, and don't care. We also wanted to do so using C+ + in the natural manner, i.e. referring to each bit pair by syntax such as<P>
<pre>board(1, 19) = 1;</pre>
or something similar.<P>
It's easy to overload operators such as <I>()</I> and <I>[]</I> to return the bits, but how do you make this work on the left-hand side of an assignment? As bits are not directly addressable, getting an lvalue is not an option. And because C++ wants <I>operator</I>= to return a reference to an object or the object itself, it seemed that overloading would not give the form desired. Examples in books and magazines, such as N. Wilt's <a href="#wilt">[5]</a>, simply use a <I>Get</I> function.<P>
This article is about the implementation of such a bit array. It supports data elements of 1, 2, or 4 bits through the use of templates to determine the number of bits in the fundamental object. This limitation to a number of bits that is a power of two prevents the data elements from spanning bytes, simplifying the access. The technique presented here can be used for other data types as well, and can be generalized to arbitrary bit-collection sizes. <P>
<h4><FONT COLOR="#000080"><A name="0139_00A1">Assigning to Bits<A name="0139_00A1"></FONT></h4></P>
The assignment operator in C++ (<I>operator</I>=) is normally overloaded only to return a pointer (reference) to a data value or the data value itself. Obviously, as bytes (type <I>char</I>) are the smallest directly addressable data elements in the C memory model, there are no pointers to bits. The crucial observation is that it is possible to overload the assignment operator to return type <I>void</I>, i.e., nothing.<P>
The user can then freely do what he wishes as a side effect of the assignment function being invoked. Returning <I>void</I> prevents overwriting the desired byte by some otherwise undesired value, thereby insuring that the desired side effect is the only thing that, in fact, happens. There is no reason to return anything, and tests with the Cameau C++ compiler showed <I>cfront</I> generated the same C code when an object of type <I>BIT_TMP</I> was returned by the assignment operator.<P>
<A href="list1.htm">Listing 1</a>
gives code to illustrate the bit array. A sample main test driver is given in <A href="list2.htm">Listing 2</a>,
 with the expected output in <A href="list3.htm">Listing 3</a>
and <A href="list4.htm">Listing 4</a>
for the cases of bit objects of two and four bits. Two classes are defined. The main class is <I>Bit_2D_Array</I>, which contains the bit data in an array of characters, and an element of the other class, <I>BIT_TMP</I>. Operators are defined for <I>operator</I>=, which copies one bit array to another, and for <I>operator==</I>, which compares two bit arrays. Output is with a dump function rather than <I>ostream</I> due to compiler limitations connected with templates. <P>
These operators work byte-by-byte. <I>BIT_TMP</I> is nested within <I>Bit_2D-Array</I> to provide information hiding and prevent inadvertent misuse of objects. Masking is used to insure that assignments to bit type fit within the assigned bits, as the assignment of integer types to the bit elements is permitted. Array bounds are also checked.<P>
The bit array is accessed by overloading the function call operator: <I>operator()</I>. Thus, the bit-array syntax is similar to that of Fortran, with an element identified as <I>b(1,4)</I>, rather than <I>b[1,4]</I> or <I>b[1][4]</I>. This is due to the limitations of C+ + the first syntax is invalid and the latter would be cumbersome to implement for bit arrays. <P>
<I>operator()</I> computes the location of the bit element specified, i.e., which byte it resides in and which bit(s). It then uses the other class, <I>BIT_TEMP</I>, to save these results. The value field of this class retains the value of the specified bit field, and the other fields are used as effective lvalues.<P>
Class <I>BIT_TMP</I> does the actual bit field manipulation. It again provides <I>operator</I>= and <I>operator==</I>, this time for these fields. <I>operator==</I> merely compares the value fields. We need to allow statements of the form <I>bfield(1,3) = 1</I> as well as <I>bfield(1,3) = bfield(3,1)</I>. So two versions of <I>operator</I>= are provided. Both take the result that the right-hand side saves and stores it in the value field of the left-hand data item. We have made <I>BIT_TMP local_rec</I> private to prevent unauthorized access.<P>
Note that the usual bitwise operators |, <I>&amp;</I>, ~, and ^ are defined for elements without further effort on the part of the programmer. If fields of a single bit are being used, the logical operators | |, <I>&amp;&amp;</I>, etc. may be used interchangably with the bitwise operators. They may easily be overloaded to operate on entire bit arrays if desired.<P>
<h4><FONT COLOR="#000080"><A name="0139_00A2">Example<A name="0139_00A2"></FONT></h4></P>
This code was tested on the Comeau C+ + 3.0 compiler on the Amiga, and Borland C++ 3.0 on the PC. The former uses <I>cfront</I> and is a licensed derivative of the AT&amp;T C++; the latter is not. The most significant and interesting difference between the two was that the latter warns that the use of a <I>for</I> statement prevents in-line expansion of a function, and continues, while the former considers the same thing to be an error and terminates the compilation.<P>
The use of <I>cout</I> in <I>BIT_TMP()</I> is a work-around required by <I>cfront</I>. A nested class within a template must have all functions in-line. The <I>for</I> loop in the constructor prevents this code from being compiled in-line. Borland did not mind, but <I>cfront</I> objected. By inserting the <I>cout, cfront</I> accepted the code.<P>
<A href="list2.htm">Listing 2</a>
contains a test driver main that exercises these routines. <A href="list3.htm">Listing 3</a>
and <A href="list4.htm">Listing 4</a>
shows the results of running this test code for two- and four-bit objects, respectively. Assignments such as <I>B(1,3) = B(3,1)</I> work on both compilers. <P>
Interestingly, print statements inserted in the <I>BIT_TMP operator()</I> show that Borland C++ would call that operator first for the <I>(3,1)</I> case and then for the <I>(1,3)</I>, while Comeau evaluates the locations in the other order. Why do both orders of evaluation work, when there is only one temporary? In the Comeau case, temporary variables are used to store the results of both evaluations. Note that if the definition of the operator were changed to return a pointer, the temporaries would not be created and the transposition example would fail. There has been some criticism of C++'s use of temporaries as producing excessive overhead in time and storage. For our example, an aggressive optimizer or a change in C++ that would eliminate the use of temporary storage here might break the code.<P>
Coplien <a href="#coplien">[3]</a> considers in his book (p.49) an example in which <I>operator[]</I> is overloaded. He returns a pointer, but forces the use of an intermediate temporary by making a type conversion. It has been pointed out in comments on the USENET network that, in doing so, he subverts the type checking inherent in C++. Rather than rely on type conversion to produce an rvalue, we explicitly overload the assignment operator to move the data from one temporary to the destination. However, it is not absolutely guaranteed that another implementation of C++ will not employ temporaries and order evaluations such that statements of the form <I>B(i,j) = B(k,l)</I> will fail to perform correctly.<P>
<h4><FONT COLOR="#000080"><A name="0139_00A3">Conclusions<A name="0139_00A3"></FONT></h4></P>
This example illustrates the flexibility that can be obtained in C++ by overloading <I>operator</I>= to return a <I>void</I> type and relying upon side effects to perform the desired actions. It also illustrates a useful overloading of <I>operator()</I>. The result is a bit array that behaves as if every element is directly addressable. Other examples of overloading the assignment operator to return <I>void</I> are given in the references. Finally, the use of templates is illustrated; they add flexibility in the number of bits per data object, and the size of the array.<P>
The class discussed here can be generalized to add higher dimensions, bit fields of arbitrary length, set operations, etc. This arises from the possible confusion as to whether a sequence of items separated by commas within parentheses is an argument list with one or more default arguments or an overloaded <I>operator ( )</I>.<P>
We make no claim to having produced the most efficient bit array package possible. Obviously, a good assembly language programmer could develop a more efficient implementation. As C+ + matures, it will become more efficient in principle, and implementations will become more efficient in practice.<P>
<h4>References</FONT></h4></P>
Baker, L. 1991. "Complex Arithmetic and Matrices in C++." <I>C Users Journal</I> (Jan.): 123.<P>
Baker, L. 1992. <I>C Mathematical Function Handbook</I>. N.Y.: McGraw Hill.<P>
<a name="coplien">Coplien</a>, J. O. 1992. <I>Advanced C</I>++, Reading, Mass: Addison Wesley.<P>
Dreitlein, J. F. and J. R. Sauer. 1990 "Spinor Software Tools in C++." <I>Computers in Physics</I> (Jan./Feb.): 64. <P>
<a name="wilt">Wilt</a>, N. "A Bit Vector Class in C++." <I>PC</I> <I>Techniques</I> (Feb./March): 55.<P>

<h4><a href="../../../source/1992/jul92/giancola.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
