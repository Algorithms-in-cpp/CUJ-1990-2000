


<HTML>
<HEAD>

<TITLE>June 1990/Dr. C's Pointers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjun.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Dr. C's Pointers&reg;<A name="0159_00BB"><A name="0159_00BB"></font></h2><P>
<h3 align="center"><A name="0159_0000"><A name="0159_0000">The exit And abort Functions</h3><P>
<h3 align="center"><font color="#800000">Rex Jaeschke</font></h3><hr><blockquote><P>
<P><i><A name="0159_0000"><A name="0159_0000">Rex Jaeschke is an independent computer consultant, author and seminar leader. He participates in both ANSI and ISO C Standards meetings and is the editor of The Journal of C Language Translation, a quarterly publication aimed at implementers of C language translation tools. Readers are encouraged to submit column topics and suggestions to Rex at 2051 Swans Neck Way, Reston, VA 22091 or via UUCP at uunet!aussie!rex or aussie!rex@uunet.uu.net.</i></P><P>
<h4><FONT COLOR="#000080"><A name="0159_00BC">Introduction<A name="0159_00BC"></FONT></h4></P>
The library functions <I>abort</I> and <I>exit</I> don't seem very exciting or complicated, and in fact, they aren't. However, since they are often found in production programs, you should understand them, since using them incorrectly may compromise all kinds of disk and memory data. Consider the often-used example of memory allocation:</FONT></FONT></FONT></FONT><P>
<pre>if (ptr = malloc(size)) ==
NULL) {
    fprintf (stderr, "Can't allocate
            memory\n");
    exit (1);
}</pre>
Terminating a program when memory cannot be allocated may be a reasonable thing to do in some cases but <I>not</I> in all. Consider the case where you have processed some part of a set of related transactions. You try to allocate memory and this fails. Simply terminating the program would leave the database logically compromised. You must either complete the rest of the transaction or backout the part already done. Either way, you have cleanup to do.</FONT></FONT><P>
Similarly, your program might be just one of several executing programs that share the same piece of memory so, again, you may need to logically clean up prior to terminating. You might even have to send a message to one or more programs telling them you are "going down" so they don't queue up new work for you.<P>
<h4><FONT COLOR="#000080"><A name="0159_00BD"><I>abort vs. exit<A name="0159_00BD"></I></FONT></h4></P>
While <I>abort</I> and <I>exit</I> both cause a program to terminate, <I>exit</I> does so in a controlled manner whereas <I>abort</I> does not.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
According to the ANSI C Standard, "The <I>abort</I> function causes abnormal program termination to occur, unless the signal <I>SIGABRT</I> is being caught and the signal handler does not return. Whether open output streams are flushed or open streams closed or temporary files removed is implementation-defined. An implementation-defined form of the status unsuccessful termination is returned to the host environment by means of the function call <I> raise(SIGABRT)</I>."</FONT></FONT></FONT></FONT></FONT></FONT><P>
On the other hand, "The <I>exit</I> function causes normal program termination to occur. If more than one call to the <I>exit</I> function is executed by a program, the behavior is undefined.</FONT></FONT></FONT></FONT><P>
"First, all functions registered by the <I>atexit</I> function are called, in the reverse order of their registration.</FONT></FONT><P>
"Next, all open output streams are flushed, all open streams are closed, and all files created by the <I>tmpfile</I> function are removed.</FONT></FONT><P>
"Finally, control is returned to the host environment. If the value of status is zero or <I>EXIT_SUCCESS</I>, an implementation-defined form of the status successful termination is returned. If the value of status is <I>EXIT_FAILURE</I>, an implementation-defined form of the status unsuccessful termination is returned. Otherwise the status returned is implementation-defined."</FONT></FONT></FONT></FONT><P>
<A href="list1.htm">Listing 1</a>
creates a temporary file via <I>tmpfile</I>; it creates and writes to <I>TEST.DAT</I>; it also writes to <I>stderr</I>. It is terminated by either <I>abort</I> or <I>exit</I> on command.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The abort path produces the following output:<P>
<pre>Enter A (abort), E (exit): A
error message to stderr
Abnormal program termination</pre>
The file <I>TEST.DAT</I> is empty since the output buffer was not flushed prior to closing. The temporary file created by <I>tmpfile</I> remains in the directory. (Using three different compilers under MS-DOS produced the three different named temporary files <I>_TEMPA.TMP, TEMP0001.$$$,</I> and <I>TMP1.$$$.</I>)</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
When the more orderly exit path is chosen, the output is:<P>
<pre>Enter A (abort), E (exit): E
error message to stderr</pre>
the temporary file is deleted, and <I>TEST.DAT</I> contains the following data:</FONT></FONT><P>
<pre>message to data file</pre>
This example simply serves to demonstrate that these functions indeed behave correctly, at least on the systems I checked. (Having worked for some years now with quite a few C implementations, I have been bitten numerous times because I believed marketing literature or technical documentation that said "ANSI-conforming" or "This is exactly how it works." What they often mean is "This should conform to the ANSI Standard" and "This is how it is supposed to work." There's a big difference.)<P>
<h4><FONT COLOR="#000080"><A name="0159_00BE">Registering An Exit Handler<A name="0159_00BE"></FONT></h4></P>
A big advantage with <I>exit</I> is that you can write an exit handler to intercept calls to <I>exit</I>. See the example in <A href="list2.htm">Listing 2</a>.
</FONT></FONT></FONT></FONT><P>
The <I>atexit</I> function in <I>stdlib.h</I> allows you to register an exit handler. This function was invented by the ANSI C committee based on prior art. (At least one vendor had a similar function called <I>onexit</I> which, for a time, existed in a draft ANSI standard along with a <I>typedef onexit_t.</I>)</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
According to the ANSI C Standard, "The <I>atexit</I> function registers the function pointed to by its argument, to be called without arguments at normal program termination.</FONT></FONT><P>
"The implementation shall support the registration of at least 32 functions.<P>
"The <I>atexit</I> function returns zero if the registration succeeds, nonzero if it fails."</FONT></FONT><P>
In this example <I>atexit</I> registers the three functions <I>eh1, eh2</I>, and <I>eh3</I>, which are called in reverse order on exit. Each exit handler must have a <I>void</I> argument list and return type. (You can actually register the same function multiple times.)</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Note that you <I>cannot</I> deregister an exit handler once it's been registered. In this case (and perhaps in others too), you need register only one function and when it gets control, have it invoke any others itself. Thus, the exit handler can call any combination of functions it needs to handle the state of the program it finds. For example:<P>
<pre>main()
{
    printf("reg eh3: %d\n", atexit(eh3));
}
     
void eh3(void)
{
    printf ("Inside eh3\n");
    eh2 ();
    eh1();
}

reg eh3:0
Inside eh3
Inside eh2
Inside eh1</pre>
Note that there is no call to <I>exit</I> in <I>main</I> in this example. The ANSI C Standard requires program execution that falls off the end of <I>main</I> to implicitly call <I>exit</I> with an undefined value. Similarly, returning from <I>main</I> with an explicit return value results in calling <I>exit</I> with that value as its argument. This means you will always enter your exit handler at least once even if you never call <I>exit</I> explicitly.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
A minor inconvenience is that an exit handler cannot find out the value actually passed in to <I>exit</I>. It's possible you want the handler to behave differently according to the situation that lead to <I>exit</I> being called. However, to access this information, you must use a global variable and initialize it with the exit value as well.</FONT></FONT></FONT></FONT><P>
You may be tempted to trap a call to <I>exit</I> and replace it with your own exit value. This is not possible since a handler that calls <I>exit</I> itself potentially produces an infinite loop. In any event, the behavior of calling <I>exit</I> more than once at run-time is undefined.</FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>void eh1(void)
{
    printf ("Inside eh1\n");
    exit(0);    /* ???? */
}</pre>
It should be obvious you should not call <I>exit</I> directly from an exit handler. However, since an exit handler can call <I>any</I> other function in the whole program, you must be sure <I>not</I> to call any that eventually <I>do</I> call <I>exit</I>.</FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0159_00BF">Framework For An Application<A name="0159_00BF"></FONT></h4></P>
Let's consider the case where we have four potential areas that can be compromised when <I>exit</I> is called. The global variable <I>flags</I> contains four 1-bit bit-fields which represent the current state of these areas (assuming each has a binary state). Initially, all states are clear; however, they can be set during the program when part of a particular transaction is done, for example. The example in <A href="list3.htm">Listing 3</a>
simulates two such "compromised states."</FONT></FONT></FONT></FONT><P>
Using bit-fields allows status flags to be packed densely and to be dealt with by name without having to mess with direct bit manipulations. However, the exit handler must explicitly test for each one of them. It would be much faster and would generate less code if the exit handler could test the bit fields in a loop. However, you cannot have an array of bit-fields, and besides, the bit-fields might not be the same width anyway. <A href="list4.htm">Listing 4</a>
shows an alternate solution.<P>
<I>handler</I> is an array of flags and since we can't have an array of bit-fields, <I>unsigned char</I>s are used instead. Now there's not much point in being able to loop through this array if you need custom code to do different things for each subscript, so I've added a function pointer for each flag. That way, each flag has its own processing function registered in the array via its initializer. You can also change the value of any function pointer at run-time as you like. (Of course, if you never need to, make <I>pfun</I> a <I>const</I> member.)</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
You might have noticed the macro <I>NUMELEM</I>. I find this a very useful macro to have in my <I>toolbox.h</I> header that I cart around on different projects. It works for <I>any</I> type of array (including multi-dimensional ones) and hides a messy looking expression along the way. By the way, the expansion should reduce to a compile-time integer constant so don't be concerned about it generating large amounts of code.</FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0159_00C0">Intercepting Aborts<A name="0159_00C0"></FONT></h4></P>
Since <I>abort</I> doesn't clean up after itself and it doesn't let you get control, calling it can cause you grief. You might well respond, "If that's so, then don't call it." In practice, it's not quite so simple. For example, you might (Heaven forbid) be calling a third-party library function that <I>does</I> call <I>abort</I>, in which case, you are "dead in the water."</FONT></FONT></FONT></FONT><P>
More close to home, while maintaining a production program you might use the <I>assert</I> macro to trace a suspected bug. Unfortunately, if <I>assert</I> fails, it calls <I>abort</I>. Obviously, this might leave you with compromised data on disk or in memory. What you really need is an <I>abort</I> you can redirect to an <I>exit</I>. Well, it just so happens that I have one for sale. Just for today only though and only one per customer, please! Stand back now; no pushing.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
You can intercept a call to <I>abort</I> using <I>signal</I> to catch a <I>SIGABRT</I>, as in <A href="list5.htm">Listing 5</a>.
</FONT></FONT></FONT></FONT></FONT></FONT><P>
When the abort path is selected, the output is:<P>
<pre>Enter A(abort), E(exit): A
Assertion failed: c!= 'A', file abort.c, line 22
Inside abort_hand
Inside eh</pre>
whereas with <I>exit</I>, you get something like:</FONT></FONT><P>
<pre>Enter A(abort), E(exit): E
Inside eh</pre>
This approach lets you turn an otherwise disastrous <I>abort</I> into one that's controlled and in the process, generates a defined exit status code. However, you still can't find out where the <I>abort</I> call came from within the handler even though the filename and line number are written to <I>stderr</I>.</FONT></FONT></FONT></FONT></FONT></FONT><P>
Again, watch out for infinite looping. Don't call <I>abort</I> from within the <I>exit</I> (or <I>abort</I> signal) handler or any of the functions it calls.</FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0159_00C1">Miscellaneous Issues<A name="0159_00C1"></FONT></h4></P>
Provided you can get access to the relevant file pointers, you should be able to do I/O to already-open files from an exit handler. You should also be able to open new files.<P>
You should always consider the possibility of interrupts occurring when you are in an exit handler. Since the program is in the process of terminating, you might want to use <I>signal</I> to ignore new interrupts. This doesn't solve all possible problems though. For example, multiuser systems usually provide some way for a privileged program to abort another program. This often results in a <I>SIGKILL</I> signal being generated. Unfortunately, most implementations don't allow you to catch a <I>SIGKILL</I> signal. (If they did, you could catch it and ignore it and keep right on spreading your virus around that 500 megabyte disk, hence you can ask to ignore it, but it won't be.)</FONT></FONT></FONT></FONT></FONT></FONT><P>
There is also a <I>SIGTERM</I> signal that you can catch. The standard says almost nothing about how it might be generated (other than by using <I>raise</I>) so you should consult your library documentation for more information on this and other signals.</FONT></FONT></FONT></FONT><P>
And as with all code that involves asynchronous operations, you should pay particular attention to using the <I>volatile</I> keyword, to ensure that the value of the object you access actually reflects it latest state.</FONT></FONT><P>

<h4><a href="../../../source/1990/jun90/jaeschke.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
