


<HTML>
<HEAD>

<TITLE>June 1990/Documentation Tool Builds Action Diagrams</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjun.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   User Reports</FONT></H2>

<hr><h2 align="center"><font color="#800000">Documentation Tool Builds Action Diagrams<A name="015F_00C1"><A name="015F_00C1"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="015F_0000"><A name="015F_0000">Comments By Dwayne Phillips</font></h3><hr><blockquote><P>
<P><i><A name="015F_0000"><A name="015F_0000">The author works as a computer and electronics engineer with the U.S. Department of Defense. He has nearly completed a PhD in electrical and computer engineering at Louisiana State University. His interests include computer vision, artificial intelligence, software engineering, and programming languages.</i></P><P>
C-Doc Documentation Tools is a program that helps you document C source code on MS-DOS computers. The current version 3.2 also documents C++ programs. C-Doc requires MS-DOS 2.0 or higher, 256K of memory, and a floppy disk (a hard disk is best); it retails for $149. C-Doc searches, indexes, and cross references source code files and then presents the information in a variety of useful formats. Since C-Doc works on source code files, it will process files for virtually any C compiler. Learning how to use C-Doc is easy. Because of the variety of output formats, each programmer or group of programmers will find something in C-Doc that they need.<P>
There exists a variety of documentation programs on the market, each of which will read your source code and then generate some type of documentation. Documentation in this context does not mean "comment lines," but rather a list of function names, parameters, variables, and function calling hierarchies. C-Doc, however, can automatically generate and insert "comment lines" into user source code, as well as producing stand-alone documentation outputs. Without such documentation programs, you must painstakingly type this information by hand. Documentation programs are especially helpful when your boss dumps a pile of strange, undocumented code into your lap and tells you to figure it out.<P>
With 25 switches and 40 options, C-Doc is a flexible tool. C-Doc invocations range in complexity from<P>
<pre>C-Doc filename.c</pre>
to<P>
<pre>c-Doc -a1-b40-c4-e74-f1-h1-i$-j0-
k1-10-oxxxx- p60-r4 -s3-t1-w50-x35
z0 file1.c file2.c file3.c file4.c</pre>
C-Doc comes with several batch files to use and modify. It also comes with a <I>c-help</I> program that helps you create batch files. The <I>c-help</I> program is a lifesaver since the many switches and options overwhelm and confuse you at first. <I>c-help</I> displays a menu with all the switches on a command line (see <A href="fig1.htm">Figure 1</a>)
. Pressing the letter of a switch displays the options for that switch and what they will do. Using these explanations, writing custom batch files becomes easy.</FONT></FONT></FONT></FONT></FONT></FONT><P>
The <I>c-help</I> program is a good complement to the C-Doc manual. The 40-page manual is punched to fit in a small three-ring binder, but is already bound. The examples could be more thorough, but are adequate for the audience (C programmers).</FONT></FONT><P>
With C-Doc, you can also process a <I>list</I> of source code files by putting the various filenames into a file and then passing that file's name to C-Doc. I used C-Doc on a program with 100 source code files and 30,000 lines of code without any problems.<P>
C-Doc can generate eight different types of output files:<P>
<UL><li>.<I>TOC </I>&#151; table of contents</FONT></FONT></li>
<li>.<I>CAL </I>&#151; caller/called summaries</FONT></FONT></li>
<li>.<I>TRE </I>&#151; graphical calling hierarchy</FONT></FONT></li>
<li>.<I>REF </I>&#151; all local/global/parameter variables</FONT></FONT></li>
<li>.<I>LST </I>&#151; code listing with line numbers and action diagrams</FONT></FONT></li>
<li>.<I>C$$ </I>&#151; formatted source code</FONT></FONT></li>
<li>.<I>HDR </I>&#151; users/calls and local/global variables by function</FONT></FONT></li>
<li>.<I>CLS </I>&#151; C++ class-hierarchy tree diagrams.</FONT></FONT></li></UL>
The <I>.TOC</I> is an alphabetical table of contents of function names. It gives the line number and file name where each function appears.</FONT></FONT><P>
<A href="fig2.htm">Figure 2</a>
shows an example <I>.CAL</I> file which cross references function calling relationships. This report is helpful if you are trying to change a function call and you need to modify every instance of the call. Unfortunately in this format, using long function names pushes the entire page to the right, often resulting in extra carriage returns and wasted paper. Version 3.2 allows the selection of several space-saving formats. The output tables automatically adjust to the user-specified paper width and to the maximum length of names in the user programs.</FONT></FONT><P>
<A href="fig3.htm">Figure 3</a>
shows the <I>.TRE</I> output, which presents the <I>.CAL</I> information in a graphical form (a calling hierarchy). C-Doc's graphs are not as elaborate as those of some other programs which draw boxes around the file and function names and connect them on a sideways printout.</FONT></FONT></FONT></FONT><P>
The <I>.REF</I> files list all the program variables, giving each occurrence of each variable (local or global and function parameter) with the line number and file name. Options allow you to cut the otherwise copious information down to a manageable size. The new version 3.2 also does C++ class-hierarchy tree diagrams and stores the results in <I>.CLS</I> files.</FONT></FONT></FONT></FONT><P>
Unlike some documentation tools, C-Doc also acts as a pretty printer. <A href="fig5.htm">Figure 5</a>
shows how C-Doc reformats the code in <A href="fig4.htm">Figure 4</a>
into a more readable style. Version 3.2 can reformat source code into several different standardized formats. <A href="fig6.htm">Figure 6</a>
shows formatted coded with "action diagrams" inserted. Action diagrams use single lines to outline logic constructs and uses double lines to outline loops. The action diagrams can be helpful in deciphering particularly messy code written by someone else. C-Doc can also line number the source and put its outputs into one long <I>.LST</I> file or into <I>.C$$</I> files. The <I>.C$$</I> files have the same file name but with the <I>.C$$</I> extension, preventing any accidental damage to the original source code.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<A href="fig7.htm">Figure 7</a>
shows a <I>.HDR</I> file, a combination of <I>.CAL</I> and <I>.REF</I> outputs which gives the user/calls and all variables for each function. C-Doc can take this information, split it up, and insert the documentation for each function into the source code just before the function itself. This is one of the best features of C-Doc.</FONT></FONT></FONT></FONT></FONT></FONT><P>
C-Doc does have some annoying characteristics. First, it places the output on the left edge of the page when printing. If you place your paper in a three ring binder, you lose a few words here and there. I wrote a program that tabs the words over to the right before printing, but C-Doc should be able to do this by itself.<P>
Second, the C-Doc status display uses a black background with several different colored letters. There is no method of changing the display colors, some of which can be painful to stare at. However, version 3.2 does allow the user to select monochrome (black and white) or color for the status display.<P>
On balance, C-Doc is practical, affordable, and useful. If you write large C programs spread over dozens of files, if you are part of a programming team or manage a programming team, if you work in a lab or a shop where programmers come and go, then you can make productive use of C-Doc.<P>
</BLOCKQUOTE>
</BODY>
</HTML>
