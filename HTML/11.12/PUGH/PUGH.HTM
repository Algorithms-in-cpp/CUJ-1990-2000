

<HTML>
<HEAD>

<TITLE>December 1993/Questions & Answers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocdec.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Questions &amp; Answers<A name="0354_012E"><A name="0354_012E"></font></h2><P>
<h3 align="center"><A name="0354_0000"><A name="0354_0000">Compiling C++ Templates</h3><P>
<h3 align="center"><font color="#800000">Kenneth Pugh</font></h3><hr><blockquote><P>
<P><i><A name="0354_0000"><A name="0354_0000">Kenneth Pugh, a principal in Pugh-Killeen Associates, teaches C and C++ language courses for corporations. He is the author of C Language for Programmers and All On C, and was a member of the ANSI C committee. He also does custom C programming for communications, graphics, image databases, and hypertext. His address is 4201 University Dr., Suite 102, Durham, NC 27707. You may fax questions for Ken to (919) 489-5239. Ken also receives email at kpugh@allen.com (Internet) and on Compuserve 70125,1142.</i></P><P>
<B>Q</B><P>
I enjoy your column in CUJ; it is always insightful and often topical to something I have done or am doing. Although your column usually answers questions about standard C, your biography mentions that you also teach C++. In that vein, I hope you will address some of the finer points of implementing C++ class templates. I use the Borland C++ 3.1 compiler, which supports that extension. Unfortunately, Borland provides scanty documentation on the use of templates, covering only simple implementations of templates. The documentation does not explain whether the following difficulties I have encountered are due to my ignorance of the proper syntax or due to the compiler's deficiencies:<P>
A. A potentially powerful way of creating generic objects is to nest templates; programmers can combine pre-defined class templates like <I>Linkedtist&lt;&gt;</I> and <I>Queue&lt;&gt;</I> to easily declare types such as <I>LinkedList&lt;Queue&lt;char * &gt; &gt;.</I> Yet, through extensive trial and error, I have discovered no straightforward way to provide an argument list to a nested template type's inner constructor. <A href="list1.htm">Listing 1</a>
illustrates the problem.<P>
B. A template class may declare nested classes within the scope of its declaration, as in <A href="list2.htm">Listing 2</a>.
 The compiler acknowledges inline expanded bodies of subordinate class function bodies, but fails to recognize externally expanded bodies.<P>
C. Template classes may take constant scalar arguments. The preprocessor <I>#if</I> statement supposedly takes any constant expression as an argument. Therefore, I expected conditional compilation based on the value of the template argument 1. Unfortunately, on instantiation the template in <A href="list3.htm">Listing 3</a>
compiles the same regardless of its argument. Why?<P>
Hiram A. Berry<br>
Clearwater, Fl<P>
<B>A</B><P>
I will pose your first complaint as a question: Why can't a program pass an argument to the inner constructor of a nested template?<P>
A. Passing arguments to such a constructor creates compiler problems analogous to declaring a two-dimensional array while specifying only one dimension. Dan Saks suggests that the restriction against passing arguments to the inner constructor of nested templates is similar to the restriction requiring an array's element constructor to be a default (no parameter) constructor. An implicit constraint on this template requires the class whose template forms an array to be a type with a default constructor. Templates are not the perfect solution for every problem. Most templates do not work for every template parameter. (This limitation is called "constrained genericity.") For example, suppose you created a template for an absolute value function. The template might look like:<P>
<pre>template &lt;class X&gt;
    X absolute_value(X value)
        {
        if ( value &lt; 0)
            return -value;
        else
            return value;
        }</pre>
This template will work only with a class in which the &lt; and - operators are defined. The C++ template specification does not specify this constraint. Rather, the constraint is implicit in the operations performed within the template code. The ANSI/ISO standard group is working on ways to explicitly state template constraints.<P>
To restate your second complaint, within a template declaration, the compiler does not recognize externally expanded bodies of nested classes.<P>
B. Your compiler may not have caught up with the current standards for nested templates and classes; or, it may have evolved at unequal rates in these two areas. Since the C++ draft standard is a slowly moving target, this kind of problem can be expected. For example, Borland C++ works fine with:<P>
<pre>class Outer
    {
    class Inner
        {
        void function();
        };
    };</pre>
and a function header declared as:<P>
<pre>void Outer::Inner::function()
   { ... }</pre>
The following template and its corresponding function definition compile okay:<P>
<pre>template &lt;class X&gt;
class Outer
    {
    void function();
    };

template &lt;class X&gt;
    void Outer&lt;X&gt;::function()
    { ... }</pre>
But the following function definition does not compile okay:<P>
<pre>template &lt;class X&gt;
int outside&lt;X&gt;::inside::value()
    {
    return i;
    }</pre>
C. Your third complaint described unexpected behavior of pre-processor directives combined with templates. You may mistakenly assume that the translation of a C or C++ program takes place all at once. Speaking to this commonly made assumption, the draft standard states the "as if" rules for translation, which separate the actions of the preprocessor and the compiler. In brief, the preprocessor finishes its substitutions on the source code before the compiler starts operating. In addition, this separation of preprocessing and compilation operations implies that the preprocessor might not understand the complete syntax of the language. In C, for example, you may be tempted to code:<P>
<pre>#if sizeof(int) == 2
/* Do something */
#endif</pre>
but <I>sizeof</I> is a compiler operator, not a preprocessor operator. The preprocessor cannot evaluate <I>sizeof;</I> it leaves that task to the compiler. (To perform an equivalent operation that works, you can test the limits defined in <I>limits.h.)</I> This same condition applies to C++. In the definition<P>
<pre>template &lt;const int i&gt;</pre>
i has no assigned value until the template is compiled. Since <I>i</I> is not a preprocessor macro, the preprocessor interprets <I>i</I> as <I>0</I>, which makes "<I>i == 0</I>" a true condition. Therefore, the compiler always compiles the phrase "<I>int val;</I>". As a side note, C++ language developers introduced values as parameters to templates after Stroustrup published his original book, <I>The C++ Programming Language.</I> Stroustrup intended the arguments to be class types, but they now can be compile-time constant expressions, addresses of objects or functions with external linkage, or addresses of static class members. Most compilers require that constant expressions be of integral type (e.g. <I>char, int,</I> or <I>long</I>) when provided as template arguments.<P>
<h4><FONT COLOR="#000080"><A name="0354_012F">Character pointers<A name="0354_012F"></FONT></h4></P>
<B>Q</B><P>
I've come across an interesting problem regarding pointers and character strings. I have two modules, module <I>A</I> and module <I>B</I>. Module <I>A</I> contains a global character string <I>S</I> and module <I>B</I> contains an external reference to the global string <I>S</I>. When I declare the <I>extern</I> statement in module <I>B</I> as:<P>
<pre>extern char *S;</pre>
I can't access the data, but when I declare the <I>extern</I> statement as<P>
<pre>extern char S[];</pre>
I can access the character string data. I've always thought that the name of a character string was a pointer to that string. Could you please explain this effect to me? I'm using MSC as my compiler.<P>
Barry Ward<br>
Burnaby, B.C., Canada<P>
<B>A</B><P>
To begin my answer, I will rephrase one of your last statements: "the name of a character string is a pointer to that string." The array name of a particular data type evaluates, in most expressions, to the address of the array's first element. The type of the array name becomes <I>pointer to data type constant</I>. For example, in<P>
<pre>char char_array[10];</pre>
<I>char_array</I> usually becomes, in an expression, type <I>pointer</I> <I>to</I> <I>char constant.</I> You cannot change the value of <I>char_array.</I> The elements of <I>char_array</I> require program memory space (10 bytes); the value of <I>char_array</I> as a pointer is not stored in program memory space. The value of <I>char_array</I> as a pointer is just a constant (within the scope of its declaration). In this sense, an array's name is often similar to a member name in an enumeration. Each member name has a value, but that value is not stored in any program memory location. When you declare a pointer, as in:<P>
<pre>char * pointer_to_char;</pre>
then <I>pointer_to_char</I> takes up a small amount of memory &#151; the number of bytes required to form an address. You can assign values to this variable, as in:<P>
<pre>pointer_to_char = char_array;</pre>
This operation is equivalent to setting an integer variable to a constant value, such as:<P>
<pre>int i;
i = 10;</pre>
If you use <I>char_array</I> as an <I>extern</I> variable, then you must declare it as an array with the <I>extern</I> statement, as in:<P>
<pre>extern char_array[10];</pre>
The compiler ignores the value in the brackets, because the <I>extern</I> keyword indicates that this statement is a reference, rather than the definition of an external variable. You could have declared <I>char_array</I> as:<P>
<pre>extern char_array[];</pre>
With this declaration, the compiler treats each occurrence of <I>char_array</I> as a reference to the true definition, which will be resolved at link time. Suppose you used <I>extern</I> with a pointer, as in:<P>
<pre>extern char * pointer_to_char;</pre>
Wherever the program references <I>pointer_to_char</I>, the compiler creates code that loads the contents of that variable and uses it as an address. The linker resolves <I>pointer_to_char'</I>s address. (Note: Though the linker resolves <I>char_array'</I>s<I> </I>and<I> pointer_to_char's</I> address relative to a certain base address, these addresses may not be final; if the resulting executable module is relocatable, the operating system will relocate those addresses when it loads and runs the module.) Why did the linker allow you to create a program that could not access a global string? Because the linker does not type-check for data types. For example, you could place the following in one module:<P>
<pre>int i;</pre>
and in another module:<P>
<pre>extern double i;</pre>
and the compiler will allocate two bytes (size of an <I>int</I>) for <I>i</I>; but all code that references <I>i</I> in the second module assumes that <I>i</I> is eight bytes long (size of a <I>double</I>). The linker matches up the definition in the first module and the reference in the second, perhaps without even complaining; but the program does not work properly. In your example, you define a variable as:<P>
<pre>char char_array[10];</pre>
in one module and as<P>
<pre>extern char * char_array;</pre>
in another module. Though the results may vary depending on your computer, in general, the second module will attempt to reference <I>char_array'</I>s elements through the first two or four bytes (size of an address) of <I>char_array'</I>s elements in the first module. (You probably did not attempt to change the <I>char_array'</I>s values in the second module. Writing to what was probably a way-out-of-bounds address might have caused some problems worse than those you mentioned. To my knowledge there are no linkers that perform across-module data-type checking, although this feature could easily be added. You should use <I>lint</I> to perform this form of checking.<P>
Your confusion about array declarations is understandable. Here is another feature of array declarations to muddy the waters: you can use either declaration form (array name or pointer) when referring to an array name passed as a function parameter. For example, suppose you have:<P>
<pre>int int_array[10];
an_array_function(int_array);</pre>
then the function can look like either:<P>
<pre>an_array_function(int int_array[]);</pre>
or<P>
<pre>an_array_function(int *int_array);</pre>
In the former case, the compiler knows you are not passing an array. The name-with-brackets syntax implicitly declares the parameter as a pointer, as is done explicitly in the second case. I prefer the first notation if the function expects to access an array and the second notation if the function expects to access a single data item. However, the compiler interprets both notations the same.<P>

<h4><a href="../../../source/1993/dec93/pugh.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
