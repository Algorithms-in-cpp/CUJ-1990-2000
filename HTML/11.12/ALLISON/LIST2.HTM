<HTML><HEAD>
<TITLE>December 1993/Code Capsules/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2 <I>String Class Implementation</I></A></h4>
<pre>// string.cpp

#include &lt;iostream.h&gt;
#include &lt;iomanip.h&gt;
#include &lt;string.h&gt;
#include &lt;assert.h&gt;
#include "string.hpp"

string::string(const char *s, size_t n)
{
    assert(s);
    clone(s,n);
}

string&amp; string::operator=(const string&amp; s)
{
    if (this != &amp;s)
    {
        delete [] data;
        clone(s.data,s.count);
    }
    return *this;
}

string&amp; string::operator+=(const string&amp; s)
{
    assert(count + s.count &lt; NPOS);
    if (s.count &gt; 0)
    {
        int new_count = count + s.count;
        char *buf = new char[new_count + 1];

        memcpy(buf,data,count);
        memcpy(buf+count,s.data,s.count);
        buf[new_count] = '\0';
        delete [] data;
        data = buf;
        count = new_count;
    }
    return *this;
}

size_t string::find(const string&amp; s, size_t pos) const
{
    assert(pos &lt; count);
    char *p = strstr(data,s.c_str());
    if (p)
        return pos + (p - data);
    return NPOS;
}

size_t string::find_first_of(const string&amp; s, size_t pos) const
{
    assert(pos &lt; count);
    char *p = strpbrk(data+pos,s.data);
    if (p)
        return p - data;
    return NPOS;
}

size_t string::find_first_not_of(const string&amp; s, size_t pos) const
{
    assert(pos &lt; count);
    for (size_t i = pos; i &lt; count; ++i)
        if (strchr(s.data,data[i]) == NULL)
            return i;
    return NPOS;
}

string string::substr(size_t pos, size_t n) const
{
    assert(pos &lt;= count);
    if (n &gt; count - pos)
        n = count - pos;

    if (n &gt; 0)
        return string(data+pos,n);
    else
        return string();   // Empty string
}
ostream&amp; operator&lt;&lt;(ostream&amp; os, const string&amp; s)
{
    os.write(s.data,s.count);
    return os;
}

istream&amp; operator&gt;&gt;(istream&amp; is, string&amp; s)
{
    const size_t BUFSIZ = 256;
    char buf[BUFSIZ];

    is &gt;&gt; setw(BUFSIZ) &gt;&gt; buf;
    s.clone(buf,strlen(buf));
    return is;
}

void string::put_at(size_t pos, char c)
{
    assert(pos &lt;= count);
    if (pos &lt; count)
        data[pos] = c;
    else
    {
        // Append character the lazy way
        char buf[2];
        baf[0] = c;
        buf[1] = '\0';
        operator+=(buf);
    }
}

int operator==(const string&amp; s1, const string&amp; s2)
{
    return s1.count == s2.count &amp;&amp;
     memcmp(s1.data,s2.data,s1.count) == 0;
}

int operator!=(const string&amp; s1, const string&amp; s2)
{
    return s1.count != s2.count ||
     memcmp(s1.data,s2.data,s1.count);
}

// Private function
void string::clone(const char *s, size_t n)
{
    // Assumes "data" needs to be allocated
    assert(s != NULL);
    size_t len = strlen(s);
    count = (n &gt;= len) ? len : n;
    data = new char[count + 1];
    strncpy(data,s,count)[count] = '\0';
}

// End of File
</pre>
</BODY>
</HTML>
