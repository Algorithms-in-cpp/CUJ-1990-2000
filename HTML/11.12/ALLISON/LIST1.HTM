<HTML><HEAD>
<TITLE>December 1993/Code Capsules/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1 <I>String Class Definition and Inline Functions</I></A></h4>
<pre>
#if !defined(STRING_HPP)
#define STRING_HPP

#include &lt;stddef.h&gt;
#include &lt;assert.h&gt;

class istream;
class ostream;

const size_t NPOS = (size_t) -1;      // "SIZE_T_MAX"

class string
{
public:
    // Constructors / Destructor
    string();
    string(const string&amp; s);
    string(const char *s, size_t n = NPOS);
    ~string();

    // Assignment
    string&amp; operator=(const string&amp; s);

    // Concatenation
    string&amp; operator+=(const string&amp; s);
    friend string operator+(const string&amp; s1, const string&amp; s2);

    // Predicates
    friend int operator==(const string&amp;, const string&amp;);
    friend int operator!=(const string&amp;, const string&amp;);

    // Subscripting
    char get_at(size_t pos) const;
    void put_at(size_t pos, char c);
    string substr(size_t pos, size_t n = NPOS) const;

    // Searching
    size_t find(const string&amp; s, size_t pos = 0) const;
    size_t find_first_of(const string&amp; s, size_t pos = 0) const;
    size_t find_first_not_of(const string&amp; s, size_t pos = 0) const;

    // I/O
    friend ostream&amp; operator&lt;&lt;(ostream&amp;, const string&amp;);
    friend istream&amp; operator&gt;&gt;(istream&amp; is, string&amp;);

    // Miscellaneous
    size_t length() const;
    const char *c_str() const;

private:
    char *data;
    size_t count;   // Doesn't include terminating 0

    void clone(const char *s, size_t n);
};

inline string::string()
{
    *(data = new char[1]) = '\0';
    count = 0;
}

inline string::string(const string&amp; s)
{
    clone(s.data,s.count);
}

inline string::~string()
{
    delete [] data;
}

inline string operator+(const string&amp; s1, const string&amp; s2)
{
    string s(s1);
    return s += s2;
}

inline char string::get_at(size_t pos) const
{
    assert(pos &lt; count);
    return data[pos];
}

inline size_t string::length() const
{
    return count;
}

inline const char * string::c_str() const
{
    return data;
}

#endif

// End of File
</pre>
</BODY>
</HTML>
