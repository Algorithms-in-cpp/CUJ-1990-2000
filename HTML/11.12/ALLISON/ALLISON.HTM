

<HTML>
<HEAD>

<TITLE>December 1993/Code Capsules</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocdec.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Code Capsules<A name="0352_012C"><A name="0352_012C"></font></h2><P>
<h3 align="center"><A name="0352_0000"><A name="0352_0000">Bit Handling in C++, Part 1</h3><P>
<h3 align="center"><font color="#800000">Chuck Allison</font></h3><hr><blockquote><P>
<P><i><A name="0352_0000"><A name="0352_0000">Chuck Allison is a regular columnist with CUJ and a software architect for the Family History Department of the Church of Jesus Christ of Latter Day Saints Church Headquarters in Salt Lake City. He has a B.S. and M.S. in mathematics, has been programming since 1975, and has been teaching and developing in C since 1984. His current interest is object-oriented technology and education. He is a member of X3J16, the ANSI C++ Standards Committee. Chuck can be reached on the Internet at allison@decus.org, or at (801)240-4510.</i></P><P>
<h4><FONT COLOR="#000080"><A name="0352_012D">The Standard C++ Library<A name="0352_012D"></FONT></h4></P>
When ANSI Committee X3J16 convened in 1989, it planned to at least standardize the C++ library stream classes. At the close of the third meeting in July 1990 the Library Working Group emerged with more specific direction: 1) standardize the stream classes, 2) define mechanisms to support language features such as the <I>new</I> and <I>delete</I> operators and exceptions, 3) define the relationship between the standard C library and the C++ library, and 4) define a standard string class. Working group members sometimes call this list the "Blood in the Streets Manifesto" to indicate what might happen if we fail. I am happy to report that after three years of difficult work, our blood seems destined to stay where it is. We have completed the above four items, modulo some fine tuning.<P>
The overall charter of any standards committee is to standardize existing practice. It is not feasible, however, for the committee to design a comprehensive object-oriented library. A large group of volunteers cannot accomplish what a small, focused department can (plus the pay is not as good). It would be more reasonable to standardize a small number of popular, low-level classes as building blocks for a wide spectrum of applications. To determine the existing industry practice in development of libraries, in June 1991 I volunteered to review the libraries which a number of vendors had submitted to the committee. All submissions offered at least one string class and a number of container classes, such as lists, vectors, queues, stacks, and sets. Many vendors' libraries also supported bit sets. Now, two years later, the following classes are part of the standard C++ library (in addition to streams and language support):<P>
<pre><B>Class       Description</B>
string      dynamic array of characters
wstring     dynamic array of wide characters
dynarray    dynamic array of anything (vector)
bits        fixed-length bitset
bitstring   dynamic-length bit string</pre>
The <I>string</I> class, which started with contributions from Aron Insinga of Digital, and was completed through the efforts of Uwe Steinmueller of Siemens Nixdorf and Pete Becker at Borland, supports most of C's <I>string.h</I> functionality on dynamically-sized arrays of bytes. Beman Dawes adapted the <I>string</I> class to handle arrays of wide characters, of type <I>wchar_t.</I> (FYI: this is a keyword representing a distinct, overloadable type in C++). Uwe also designed the <I>dynarray</I> class. I was interested in improving on C's awkward bitwise support, and designed the last two classes. In this article I will discuss the <I>bitstring</I> class.<P>
<h4><FONT COLOR="#000080"><A name="0352_012E">Bit Sets<A name="0352_012E"></FONT></h4></P>
C's bitwise operators allow you to process an integer as an ordered set of bits. This ability is useful for system interface operations, which often interpret individual bits as flags. If you want more bits than can fit in an <I>unsigned long,</I> however, you're out of luck. An extended version of such a bit array can come in handy, though. For example, I have developed a user interface library which provides picklists, scrollable popup menus that allow multiple choices. For efficiency, I like to track the choices with only one bit per entry. Bit arrays are also handy with sets. You can simulate a set of integers with a bit array: if the bit in position <I>n</I> is set, then the integer <I>n</I> is a member of the set. Pascal and Modula-2 both implement sets this way. (See last month's <I>Code Capsule</I> for a C implementation of bitsets.)<P>
The first bitset class proposal submitted to X3J16 tried to meet all of these needs with a single class. After much discussion and little agreement among working members, the committee realized that existing practice called for two distinct abstractions: fixed-length bit sets (for a collection of flags, say) and bit strings (i.e., dynamic bit arrays). One year and three committee meetings later, these abstractions became class <I>bits</I> and <I>bitstring,</I> respectively.<P>
<h4><FONT COLOR="#000080"><A name="0352_012F">Class <B><I>bitstring</I><A name="0352_012F"></B></FONT></h4></P>
The <I>bitstring</I> class provides much of the same functionality as the <I>string</I> class (see the sidebar <a href="sidebar1.htm">"A Simple String Class"</a>). <I>bitstring</I> supports dynamically-sized bit strings with operations such as insert, remove, replace, and concatenate, as well as the basic bit operations &#151; set, reset, test, and toggle (see <A href="list4.htm">Listing 4</a>)
. Since a bitstring is in fact a string, the bit numbering begins with bit <I>0</I> on the left, and increases as you move to the right (this is the reverse of numeric bitfields, which are numbered from right to left). I can now easily implement a picklist by embedding a bitstring:<P>
<pre>class Picklist : public Popmenu
{
    bitstring picks;
    // . . .
public:
    Picklist(.., nitems,..)
        : picks(0,nitems), .. {}
    // . . .
};</pre>
When the user highlights the <I>nth</I> entry, I set bit <I>n</I> in the bitstring:<P>
<pre>picks.set(n);</pre>
<h4><FONT COLOR="#000080"><A name="0352_0130">Member Function Descriptions<A name="0352_0130"></FONT></h4></P>
This section is a modified excerpt from the official proposal which describes the semantics of each member function. Since the library group is still deciding how to integrate exceptions into the standard library, I just mention them briefly here. The names and uses of exceptions are subject to change. I use assertions in place of exceptions in the implementation (see <A href="list5.htm">Listing 5</a>
and <A href="list6.htm">Listing 6</a>)
. Throughout the rest of this article, the value <I>NPOS</I>, which stands for "not a position," is the largest possible value of type <I>size_t</I>, which is equivalent to <I>(size_t)(-1)</I>. A bitstring can hold up to <I>NPOS - 1</I> bits.<P>
<h4><FONT COLOR="#000080"><A name="0352_0131">1.0 Constructors<A name="0352_0131"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_0132">Synopsis<A name="0352_0132"></FONT></h4></P>
<pre>bitstring()
bitstring(unsigned long n, size_t nbits)
bitstring(const string&amp; s)
bitstring(const bitstring&amp; b)</pre>
<h4><B><A name="0352_0133">1.1 Constructor <I>bitstring()</I><A name="0352_0133"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_0134">Description<A name="0352_0134"></FONT></h4></P>
Creates a bit string of length zero.<P>
<h4><B><A name="0352_0135">1.2 Constructor <I>bitstring(unsigned long n, size_t nbits)</I><A name="0352_0135"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_0136">Description<A name="0352_0136"></FONT></h4></P>
Creates a bit string at least <I>nbits</I> long, initialized with the contents of <I>n</I>. The constructor drops no significant bits, i.e., <I>this-&gt;length == max(nbits, N+1)</I>, where <I>N</I> is the bit position of the highest-order <I>one</I> bit. The constructor pads the higher order bits with zeroes if necessary, to fill out <I>nbits</I> bits. The common usage of this constructor would be to initialize a bitstring of a certain length with zeroes, e.g.,<P>
<pre>bitstring x(0,16);</pre>
Be aware when using a non-zero value initializer that the bits will be "reversed." For example, the bit pattern for the decimal number 21025 is 0101001000100001, but the output from the following code<P>
<pre>bitstring x(21025,16);
cout &lt;&lt; x &lt;&lt; endl;</pre>
is 1000010001001010.<P>
<h4><B><A name="0352_0137">1.3 Constructor <I>bitstring(const string&amp; s)</I><A name="0352_0137"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_0138">Description<A name="0352_0138"></FONT></h4></P>
Reads bit characters ('1's and '0's) from <I>s</I> and sets the corresponding bits in the new bitstring. The first bit read corresponds to bit <I>0</I>.<P>
<h4><FONT COLOR="#000080"><A name="0352_0139">Exceptions<A name="0352_0139"></FONT></h4></P>
Throws <I>invalid_argument</I> if any character in the string is not a '1' or '0'.<P>
<h4><B><A name="0352_013A">1.4 Constructor <I>bitstring(const bitstring&amp; b)</I><A name="0352_013A"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_013B">Description<A name="0352_013B"></FONT></h4></P>
The usual copy constructor.<P>
<h4><B><A name="0352_013C">2.0 Destructor <I>bitstring()</I><A name="0352_013C"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_013D">Description<A name="0352_013D"></FONT></h4></P>
Frees resources and destroys the object.<P>
<h4><FONT COLOR="#000080"><A name="0352_013E">3.0 Other Member Functions<A name="0352_013E"></FONT></h4></P>
<h4><B><A name="0352_013F">3.1 Function <I>string to_string()<A name="0352_013F"></B></I></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_0140">Description<A name="0352_0140"></FONT></h4></P>
Creates a string of '1's and '0's representing the contents of <I>*this.</I> The first (left-most) character is bit <I>0</I>.<P>
<h4><FONT COLOR="#000080"><A name="0352_0141">Returns<A name="0352_0141"></FONT></h4></P>
The temporary string of '1's and '0's.<P>
<h4><B><A name="0352_0142">3.2 Function <I>bitstring&amp; operator=(const bitstring&amp;)<A name="0352_0142"></B></I></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_0143">Description<A name="0352_0143"></FONT></h4></P>
Standard assignment operator.<P>
<h4><FONT COLOR="#000080"><A name="0352_0144">Returns<A name="0352_0144"></FONT></h4></P>
A reference to <I>*this.</I><P>
<h4><B><A name="0352_0145">3.3 Function <I>int operator==(const bitstring&amp;b) const<A name="0352_0145"></B></I></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_0146">Description<A name="0352_0146"></FONT></h4></P>
Compares <I>*this</I> to <I>b</I> for equality. Two bitstrings are equal if and only if they have the same number of bits and their bit patterns are identical.<P>
<h4><FONT COLOR="#000080"><A name="0352_0147">Returns<A name="0352_0147"></FONT></h4></P>
Non-zero if the bitsets are equal, zero otherwise.<P>
<h4><B><A name="0352_0148">3.4 Function <I>int operator!=(const bitstring&amp;b) const<A name="0352_0148"></B></I></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_0149">Description<A name="0352_0149"></FONT></h4></P>
Compares <I>*this</I> to <I>b</I> for inequality. Equivalent to <I>!operator==(b);</I><P>
<h4><FONT COLOR="#000080"><A name="0352_014A">Returns<A name="0352_014A"></FONT></h4></P>
Zero if the bitsets are equal, non-zero otherwise.<P>
<h4><B><A name="0352_014B">3.5 Functions <I>set</I><A name="0352_014B"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_014C">Synopsis<A name="0352_014C"></FONT></h4></P>
<pre>bitstring&amp; set(size_t n, int val = 1)
bitstring&amp; set()</pre>
<h4><FONT COLOR="#000080"><A name="0352_014D">Description<A name="0352_014D"></FONT></h4></P>
These functions set one or more bits. The function <I>set(size_t, int</I> can also reset a bit, depending on the contents of <I>val</I>.<P>
<h4><B><A name="0352_014E">3.5.1 Function <I>bitstring&amp; set (size_t n, int val = 1)</I><A name="0352_014E"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_014F">Description<A name="0352_014F"></FONT></h4></P>
Sets the <I>nth</I> bit if <I>val</I> is non-zero, otherwise resets the bit. Appends a bit if <I>n == length</I>.<P>
<h4><FONT COLOR="#000080"><A name="0352_0150">Returns<A name="0352_0150"></FONT></h4></P>
A reference to <I>*this</I>.<P>
<h4><FONT COLOR="#000080"><A name="0352_0151">Exceptions<A name="0352_0151"></FONT></h4></P>
Throws <I>out_of_range if n &gt; length</I>.<P>
<h4><B><A name="0352_0152">3.5.2 Function <I>bitstring&amp; set()<A name="0352_0152"></B></I></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_0153">Description<A name="0352_0153"></FONT></h4></P>
Sets all bits,<P>
<h4><FONT COLOR="#000080"><A name="0352_0154">Returns<A name="0352_0154"></FONT></h4></P>
A reference to <I>*this</I>.<P>
<h4><B><A name="0352_0155">3.6 Functions <I>reset<A name="0352_0155"></B></I></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_0156">Synopsis<A name="0352_0156"></FONT></h4></P>
<pre>bitstring&amp; reset(size_t n)
bitstring&amp; reset()</pre>
<h4><FONT COLOR="#000080"><A name="0352_0157">Description<A name="0352_0157"></FONT></h4></P>
These functions reset one or more bits.<P>
<h4><B><A name="0352_0158">3.6.1 Function <I>bitstring&amp; reset(size_t n)</I><A name="0352_0158"></B></FONT></h4></P>
<h4>Description</FONT></h4></P>Resets the <I>nth</I> bit. Appends the bit if<I> n == length</I>.<P>
<h4><FONT COLOR="#000080"><A name="0352_0159">Returns<A name="0352_0159"></FONT></h4></P>
A reference to <I>*this</I>.<P>
<h4><FONT COLOR="#000080"><A name="0352_015A">Exceptions<A name="0352_015A"></FONT></h4></P>
Throws <I>out_of_range if n &gt; length</I>.<P>
<h4><B><A name="0352_015B">3.6.2 Function <I>bitstring&amp; reset()</I><A name="0352_015B"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_015C">Description<A name="0352_015C"></FONT></h4></P>
Resets all bits.<P>
<h4><FONT COLOR="#000080"><A name="0352_015D">Returns<A name="0352_015D"></FONT></h4></P>
A reference to <I>*this</I>.<P>
<h4><B><A name="0352_015E">3.7 Functions <I>toggle<A name="0352_015E"></B></I></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_015F">Synopsis<A name="0352_015F"></FONT></h4></P>
<pre>bitstring&amp; toggle(size_t n)
bitstring&amp; toggle()</pre>
<h4><FONT COLOR="#000080"><A name="0352_0160">Description<A name="0352_0160"></FONT></h4></P>
These functions toggle one or more bits.<P>
<h4><B><A name="0352_0161">3.7.1 Function <I>bitstring&amp; toggle(size_t n)</I><A name="0352_0161"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_0162">Description<A name="0352_0162"></FONT></h4></P>
Toggles the <I>nth</I> bit.<P>
<h4><FONT COLOR="#000080"><A name="0352_0163">Returns<A name="0352_0163"></FONT></h4></P>
A reference to <I>*this</I>.<P>
<h4><FONT COLOR="#000080"><A name="0352_0164">Exceptions<A name="0352_0164"></FONT></h4></P>
Throws <I>out_of_range</I><I> </I>if<I> </I><I>n &gt;= length</I>.<P>
<h4><B><A name="0352_0165">3.7.2 Function <I>bitstring&amp; toggle()<A name="0352_0165"></B></I></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_0166">Description<A name="0352_0166"></FONT></h4></P>
Toggles all bits.<P>
<h4><FONT COLOR="#000080"><A name="0352_0167">Returns<A name="0352_0167"></FONT></h4></P>
A reference to <I>*this</I>.<P>
<h4><B><A name="0352_0168">3.8 Function <I>int test(size_t n) const<A name="0352_0168"></B></I></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_0169">Description<A name="0352_0169"></FONT></h4></P>
Tests if bit <I>n</I> is set.<P>
<h4><FONT COLOR="#000080"><A name="0352_016A">Returns<A name="0352_016A"></FONT></h4></P>
Non-zero if the bit is set, zero otherwise.<P>
<h4><FONT COLOR="#000080"><A name="0352_016B">Exceptions<A name="0352_016B"></FONT></h4></P>
Throws <I>out_of_range if n &gt;= length</I>.<P>
<h4><B><A name="0352_016C">3.9 Function <I>int any() const</I><A name="0352_016C"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_016D">Description<A name="0352_016D"></FONT></h4></P>
Tests if any bits at all are set.<P>
<h4><FONT COLOR="#000080"><A name="0352_016E">Returns<A name="0352_016E"></FONT></h4></P>
Zero if all bits are <I>0</I>, non-zero otherwise.<P>
<h4><B><A name="0352_016F">3.10 Function <I>int none() const</I><A name="0352_016F"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_0170">Description<A name="0352_0170"></FONT></h4></P>
Tests if no bits at all are set. Equivalent to <I>!any</I>.<P>
<h4><FONT COLOR="#000080"><A name="0352_0171">Returns<A name="0352_0171"></FONT></h4></P>
One if all bits are <I>0</I>, non-zero otherwise.<P>
<h4><B><A name="0352_0172">3.11 Function <I>bits operator~() const</I><A name="0352_0172"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_0173">Description<A name="0352_0173"></FONT></h4></P>
Toggles all the bits of a copy of <I>*this.</I><P>
<h4><FONT COLOR="#000080"><A name="0352_0174">Returns<A name="0352_0174"></FONT></h4></P>
A toggled copy of *this.<P>
<h4><B><A name="0352_0175">3.12 Function <I>size_t count() const</I><A name="0352_0175"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_0176">Description<A name="0352_0176"></FONT></h4></P>
Counts the number of bits that are set.<P>
<h4><FONT COLOR="#000080"><A name="0352_0177">Returns<A name="0352_0177"></FONT></h4></P>
The number of <I>1</I> bits in the string.<P>
<h4><B><A name="0352_0178">3.13 Function <I>bitstring&amp; operator&amp;=(const bitstring&amp;b)</I><A name="0352_0178"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_0179">Description<A name="0352_0179"></FONT></h4></P>
Replaces the current object with the bitwise-AND of <I>b</I> and <I>*this.</I> This function behaves as if the shorter bitstring is filled with zeroes on the right, so the operands of the AND operation will be of equal length. The new length of the object is the maximum of the lengths of the old object and <I>b.</I><P>
<h4><FONT COLOR="#000080"><A name="0352_017A">Returns<A name="0352_017A"></FONT></h4></P>
A reference to <I>*this.</I><P>
<h4><B><A name="0352_017B">3.14 Function <I>bitstring&amp; operator</I>|<I>=</I>(const bitstring&amp; b)</I><A name="0352_017B"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_017C">Description<A name="0352_017C"></FONT></h4></P>
Replaces the current object with the bitwise-OR of <I>b</I> and <I>*this.</I> This function behaves as if the shorter bitstring is filled with zeroes on the right, so the operands of the XOR operation will be of equal length. The new length of the object is the maximum of the lengths of the old object and<I> b.</I><P>
<h4><FONT COLOR="#000080"><A name="0352_017D">Returns<A name="0352_017D"></FONT></h4></P>
A reference to <I>*this.</I><P>
<h4><B><A name="0352_017E">3.15 Function <I>bitstring&amp; <I>operator^=(const bitstring&amp; b)</I><A name="0352_017E"></B></I></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_017F">Description<A name="0352_017F"></FONT></h4></P>
Replaces the current object with the bitwise-XOR of <I>b</I> and <I>*this.</I> This function behaves as if the shorter bitstring is filled with zeroes on the right, so the operands of the XOR operation will be of equal length. The new length of the object is the maximum of the lengths of the old object and <I>b</I>.<P>
<h4><FONT COLOR="#000080"><A name="0352_0180">Returns<A name="0352_0180"></FONT></h4></P>
A reference to <I>*this.</I><P>
<h4><B><A name="0352_0181">3.16 Function <I>bitstring&amp; operator&gt;&gt;=(size_t n)</I><A name="0352_0181"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_0182">Description<A name="0352_0182"></FONT></h4></P>
Modifies the current object by shifting <I>*this</I> right, by <I>n</I> bit positions. If <I>n &gt; length</I>, then this function resets all bits. Shifting "right" by <I>n</I> means that bit <I>n</I> gets the value of bit <I>0</I>, bit <I>(n+1)</I> gets bit <I>1</I>, etc. This function resets any vacated bits.<P>
<h4><FONT COLOR="#000080"><A name="0352_0183">Returns<A name="0352_0183"></FONT></h4></P>
A reference to <I>*this.</I><P>
<h4><B><A name="0352_0184">3.17 Function <I>bitstring&amp; operator&lt;&lt;=(size_t n)</I><A name="0352_0184"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_0185">Description<A name="0352_0185"></FONT></h4></P>
Modifies the current object by shifting <I>*this</I> left by <I>n</I> bit positions. if <I>n &gt; length</I>, then this function resets all bits. Shifting "left" by <I>n</I> means that bit <I>0</I><I> </I>receives the value of bit <I>n</I>, bit <I>1</I> receives bit <I>(n+1)</I>, etc.<P>
<h4><FONT COLOR="#000080"><A name="0352_0186">Returns<A name="0352_0186"></FONT></h4></P>
A reference to <I>*this.</I><P>
<h4><B><A name="0352_0187">3.18 Function <I>bitstring operator&gt;&gt;(const bitstring&amp; b, size_t n) const</I><A name="0352_0187"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_0188">Description<A name="0352_0188"></FONT></h4></P>
Shifts <I>b</I> right by <I>n</I> bit positions. Does not modify <I>b.</I> (See 3.16).<P>
<h4><FONT COLOR="#000080"><A name="0352_0189">Returns<A name="0352_0189"></FONT></h4></P>
The shifted result in a temporary bitstring.<P>
<h4><B><A name="0352_018A">3.19 Function <I>bitstring operator&lt;&lt;(const bitstring&amp; b, size_t n) const</I><A name="0352_018A"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_018B">Description<A name="0352_018B"></FONT></h4></P>
Shifts <I>b</I> left by <I>n</I> bit positions. Does not modify <I>b</I>, (See 3.17).<P>
<h4><FONT COLOR="#000080"><A name="0352_018C">Returns<A name="0352_018C"></FONT></h4></P>
The shifted result in a temporary bitstring.<P>
<h4><B><A name="0352_018D">3.20 Function <I>bitstring&amp; operator+= (constbitstring&amp; b)</I><A name="0352_018D"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_018E">Description<A name="0352_018E"></FONT></h4></P>
Appends <I>b</I> destructively to <I>*this.</I><P>
<h4><FONT COLOR="#000080"><A name="0352_018F">Returns<A name="0352_018F"></FONT></h4></P>
A reference to <I>*this.</I><P>
<h4><FONT COLOR="#000080"><A name="0352_0190">Exceptions<A name="0352_0190"></FONT></h4></P>
Throws <I>length_error if length &gt;= NPOS - b. length</I>.<P>
<h4><B><A name="0352_0191">3.21 Function <I>bitstring&amp; insert (size_t pos, const bitstring&amp; b)</I><A name="0352_0191"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_0192">Description<A name="0352_0192"></FONT></h4></P>
Inserts <I>b</I> into <I>*this</I> starting at bit position <I>pos</I>. The bits of <I>*this</I> starting at <I>pos</I> follow the inserted copy of <I>b</I>. Appends <I>b</I> if <I>pos == length.</I><P>
<h4><FONT COLOR="#000080"><A name="0352_0193">Returns<A name="0352_0193"></FONT></h4></P>
A reference to <I>*this</I>.<P>
<h4><FONT COLOR="#000080"><A name="0352_0194">Exceptions<A name="0352_0194"></FONT></h4></P>
Throws <I>out_of_range</I><I> </I>if<I> pos &gt; length</I>. Throws <I>length_error</I><I> </I>if<I> </I><I>length &gt;= NPOS - b.length</I>.<P>
<h4><B><A name="0352_0195">3.22 Function <I>bitstring&amp; remove(size_t pos, size_t n = NPOS)</I><A name="0352_0195"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_0196">Description<A name="0352_0196"></FONT></h4></P>
Removes up to n bits from <I>*this</I> starting at bit position <I>pos</I>. Truncates, starting at position <I>pos</I>, if <I>length - pos &lt; n.</I></pre>
<h4><FONT COLOR="#000080"><A name="0352_0197">Returns<A name="0352_0197"></FONT></h4></P>
A reference to *<I>this</I>.<P>
<h4><FONT COLOR="#000080"><A name="0352_0198">Exceptions<A name="0352_0198"></FONT></h4></P>
Throws <I>out_of_range</I> if <I>pos &gt; length</I>.<P>
<h4><B><A name="0352_0199">3.24 Function <I>bitstring&amp;replace(size_t pos, size_t n, const bitstring&amp; b)</I><A name="0352_0199"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_019A">Description<A name="0352_019A"></FONT></h4></P>
Equivalent to a remove followed by a replace in the obvious way. Included for convenience and efficiency.<P>
<h4><FONT COLOR="#000080"><A name="0352_019B">Returns<A name="0352_019B"></FONT></h4></P>
A reference to <I>*this</I>.<P>
<h4><FONT COLOR="#000080"><A name="0352_019C">Exceptions<A name="0352_019C"></FONT></h4></P>
Throws <I>out_of_range</I> if <I>pos &gt;= length</I>. Throws <I>length_error</I> if the new length would be &gt;= <I>NPOS</I>.<P>
<h4><B><A name="0352_019D">3.25 Function <I>size_t find(int val, size_t pos = 0) const</I><A name="0352_019D"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_019E">Description<A name="0352_019E"></FONT></h4></P>
Searches forward, starting from position <I>pos</I>, for the first occurrence of a <I>0</I> bit (if <I>val</I> is zero) or a <I>1</I> bit (if <I>val</I> is non-zero).<P>
<h4><FONT COLOR="#000080"><A name="0352_019F">Returns<A name="0352_019F"></FONT></h4></P>
The found bit position, if the search was successful, <I>NPOS</I> otherwise.<P>
<h4><FONT COLOR="#000080"><A name="0352_01A0">Exceptions<A name="0352_01A0"></FONT></h4></P>
Throws <I>out_of_range</I> if <I>pos &gt; length</I>.<P>
<h4><B><A name="0352_01A1">3.26 Function <I>size_t rfind(int val, size_t pos = NPOS) const</I><A name="0352_01A1"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_01A2">Description<A name="0352_01A2"></FONT></h4></P>
Searches backwards from position <I>pos</I> (or from position <I>length-1</I> if <I>pos == NPOS</I>) for the first occurrence of a <I>0</I> bit (if <I>val</I> is zero) or a <I>1</I> bit (if val is nonzero).<P>
<h4><FONT COLOR="#000080"><A name="0352_01A3">Returns<A name="0352_01A3"></FONT></h4></P>
The found bit position, if the search was successful, <I>NPOS</I> otherwise.<P>
<h4><FONT COLOR="#000080"><A name="0352_01A4">Exceptions<A name="0352_01A4"></FONT></h4></P>
Throws <I>out_of_range</I><I> </I>if <I>pos &gt; length</I>.<P>
<h4><B><A name="0352_01A5">3.27 Function <I>bitstring substr(size_t pos, size_t n = NPOS) const</I><A name="0352_01A5"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_01A6">Description<A name="0352_01A6"></FONT></h4></P>
Creates a new bitstring consisting of the bit pattern starting at position <I>pos</I>. This function copies up to <I>n</I> bits or all bits to the end of the string, whichever number is smaller. If <I>pos == length</I>, this function creates an empty bitstring.<P>
<h4><FONT COLOR="#000080"><A name="0352_01A7">Returns<A name="0352_01A7"></FONT></h4></P>
The new bitstring.<P>
<h4><FONT COLOR="#000080"><A name="0352_01A8">Exceptions<A name="0352_01A8"></FONT></h4></P>
Throws <I>out_of_range</I> if <I>pos &gt; length</I>.<P>
<h4><B><A name="0352_01A9">3.28 Functions <I>length()</I><A name="0352_01A9"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_01AA">Synopsis<A name="0352_01AA"></FONT></h4></P>
<pre>size_t length()
size_t length(size_t n, int val = 0)</pre>
<h4><FONT COLOR="#000080"><A name="0352_01AB">Description<A name="0352_01AB"></FONT></h4></P>
These functions determine and/or modify the length of a bit-string.<P>
<h4><B><A name="0352_01AC">3.28.1 Function <I>size_t length() const</I><A name="0352_01AC"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_01AD">Description<A name="0352_01AD"></FONT></h4></P>
Determines the number of bits in the string.<P>
<h4><FONT COLOR="#000080"><A name="0352_01AE">Returns<A name="0352_01AE"></FONT></h4></P>
The number of bits.<P>
<h4><B><A name="0352_01AF">3.28.2 Function <I>size_t length(size_t n, int val = 0</I><I></B>)</I><B><A name="0352_01AF"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_01B0">Description<A name="0352_01B0"></FONT></h4></P>
Resizes (i.e., truncates or expands) the object so that <I>this-&gt;length == n</I>. If the length increases, this function extends the object on the right with <I>0</I>s if <I>val == 0</I>, or with <I>1s</I> otherwise.<P>
<h4><FONT COLOR="#000080"><A name="0352_01B1">Returns<A name="0352_01B1"></FONT></h4></P>
The old <I>length</I>.<P>
<h4><B><A name="0352_01B2">3.29 Function <I>bitstring&amp; trim()</I><A name="0352_01B2"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_01B3">Description<A name="0352_01B3"></FONT></h4></P>
Truncates high-order <I>0</I> bits. If <I>N</I> is the highest-numbered <I>1</I> bit, then <I>this-&gt;length</I> becomes <I>N+1</I>.<P>
<h4><FONT COLOR="#000080"><A name="0352_01B4">Returns<A name="0352_01B4"></FONT></h4></P>
A reference to <I>*</I><I>this</I>.<P>
<h4><FONT COLOR="#000080"><A name="0352_01B5">4.0 Global Functions<A name="0352_01B5"></FONT></h4></P>
<h4><B><A name="0352_01B6">4.1 Function <I>ostream&amp; operator&lt;&lt;(ostream&amp; os, const bitstring&amp; b)</I><A name="0352_01B6"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_01B7">Description<A name="0352_01B7"></FONT></h4></P>
Sends the sequence of '1's and '0's corresponding to <I>b</I> to the output stream <I>os</I>.<P>
<h4><FONT COLOR="#000080"><A name="0352_01B8">Returns<A name="0352_01B8"></FONT></h4></P>
A reference to the stream <I>os</I>.<P>
<h4><B><A name="0352_01B9">4.2 Function <I>istream&amp; operator&gt;&gt;(istream&amp; is, bitstring&amp; b)</I><A name="0352_01B9"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_01BA">Description<A name="0352_01BA"></FONT></h4></P>
Reads a contiguous sequence of '1's and '0's from a stream into <I>b</I>. Skips whitespace according to <I>is.skipws</I>. The first bit read is bit <I>0</I>. The first non-whitespace, nonbit character terminates the read and remains in the stream. This function sets <I>is.failbit</I> if the first non-whitespace character is not a '1' or '0'.<P>
<h4><FONT COLOR="#000080"><A name="0352_01BB">Returns<A name="0352_01BB"></FONT></h4></P>
A reference to the stream <I>is</I>.<P>
<h4><B><A name="0352_01BC">4.3 Function <I>bitstring operator&amp;(const bitstring&amp; b1, const bitstring&amp; b2)</I><A name="0352_01BC"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_01BD">Description<A name="0352_01BD"></FONT></h4></P>
Computes the bitwise-AND of operands <I>b1</I> and <I>b2</I>. The length of the result equals the length of the longer operand. This function behaves as if, prior to the operation, the shorter operand was extended with high-order <I></I>0 bits until its length equaled that of the longer operand.<P>
<h4><FONT COLOR="#000080"><A name="0352_01BE">Returns<A name="0352_01BE"></FONT></h4></P>
The result of the bitwise-AND in a temporary bitstring.<P>
<h4><B><A name="0352_01BF">4.4 Function <I>bitstring operator</I>|<I>(const bitstring&amp; b1, const bitstring&amp; b2)</I><A name="0352_01BF"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_01C0">Description<A name="0352_01C0"></FONT></h4></P>
Computes the bitwise-OR of operands <I>b1</I> and <I>b2</I>. The length of the result equals the length of the longer operand. This function behaves as if, prior to the operation, the shorter operand was extended with high-order <I>0</I> bits until its length equaled that of the longer operand.<P>
<h4><FONT COLOR="#000080"><A name="0352_01C1">Returns<A name="0352_01C1"></FONT></h4></P>
The result of the bitwise-OR in a temporary bitstring.<P>
<h4><B><A name="0352_01C2">4.5 Function <I>bitstring operator^(const bitstring&amp; b1, const bitstring&amp; b2)</I><A name="0352_01C2"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_01C3">Des cription<A name="0352_01C3"></FONT></h4></P>
Computes the exclusive-OR of operands <I>b1</I> and <I>b2</I>. The length of the result equals length of the longer operand. This function behaves as if, prior to the operation, the shorter operand was extended with high-order zero bits until its length equaled that of the longer operand.<P>
<h4><FONT COLOR="#000080"><A name="0352_01C4">Returns<A name="0352_01C4"></FONT></h4></P>
The result of the exclusive-OR in a temporary bitstring.<P>
<h4><B><A name="0352_01C5">4.6 Function <I>bitstring operator+(const bitstring&amp; b1, const bitstring&amp; b2)</I><A name="0352_01C5"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0352_01C6">Description<A name="0352_01C6"></FONT></h4></P>
Appends <I>b</I> non-destructively to <I>*this.</I><P>
<h4><FONT COLOR="#000080"><A name="0352_01C7">Returns<A name="0352_01C7"></FONT></h4></P>
The result of the concatenation in a temporary bitstring.<P>
<h4><FONT COLOR="#000080"><A name="0352_01C8">Implementation Notes<A name="0352_01C8"></FONT></h4></P>
Following what seems to be the most popular coding style, the class definition in <A href="list4.htm">Listing 4</a>
specifies the public interface first, followed by the private artifacts of the implementation. Whenever possible, inline functions appear outside the class definition itself. This placement is not possible in the case of the functions <I>word, offset, mask1</I>, and <I>mask0</I>, because they return objects of the private nested type <I>Block</I>. These functions appeared as macros in last month's C version. As private, static member functions, they are available only to other <I>bitstring</I> member functions.<P>
I pack the bits of a bitstring left-to-right into an array of integral blocks. You can substitute any unsigned type for <I>unsigned int</I> in the line<P>
<pre>typedef unsigned int Block;</pre>
See last month's capsule for a detailed explanation of the packing and unpacking algorithms.<P>
Last month I developed bit handling functions in C; this month I have restated them in C++. In that regard, this column presents nothing new. What is new this month is memory management and operator overloading. A <I>bitstring</I> expands or shrinks automatically as needed, and always uses the minimum number of blocks required to hold its bits. For example, the statements<P>
<pre>bitstring b1, b2;
// . . .
b1 += b2;</pre>
append <I>b2</I> to <I>b1</I>. Consider the implementation of <I>operator+=</I> from <A href="list5.htm">Listing 5</a>:
<P>
<pre>bitstring&amp; bitstring::operator+=(const bitstring&amp; b)
{
     assert(nbits_ + b.nbits_ &lt; NPOS);
     int oldlen = nbits_;

     length(nbits_ + b.nbits_);
     for (int i = 0; i &lt; b.nbits_; ++i)
        (void) set_(oldlen+i,b.test_(i));

     return *this;
}</pre>
All this function has to do is resize the object and copy <I>b</I>'s bits to the end of the object. If the number of bits in <I>b2</I> is less than or equal to the number of unused bits in <I>b1</I>'s allocated memory, then no memory reallocation is necessary. Whether the array needs to be resized or not, the member function <I>length(size_t)</I> resizes the object; if the array must be resized, it handles that too.<P>
The implementation of the global <I>operator+</I> is now trivial using <I>operator+=</I>:<P>
<pre>bitstring operator+(const bitstring&amp; b1, const bitstring&amp;
b2)
{
     bitstring b(b1);
     return b.operator+=(b2);
}</pre>
We can do the same sort of thing for all the binary operators. Being small, the binary operators are good candidates for inlining, and therefore appear in <I>bitstring.h</I>.<P>
The program in <A href="list6.htm">Listing 6</a>
illustrates many of the member functions of the <I>bitstring</I> class. Next month I'll cover class <I>bits</I>, a template class for fixed-length bitsets.<P>

<h4><a href="../../../source/1993/dec93/allison.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
