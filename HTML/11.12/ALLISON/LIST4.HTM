<HTML><HEAD>
<TITLE>December 1993/Code Capsules/Listing 4</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 4 <I>Bitstring Class Definition and Inline Functions</I></A></h4>
<pre>// bitstr.h:  The C++ bitstring class

#if !defined(BITSTR_H)
#define BITSTR_H

#include &lt;stddef.h&gt;
#include &lt;limits.h&gt;
#include &lt;assert.h&gt;
#include "string.hpp"

class istream;
class ostream;

class bitstring
{
public:
    bitstring();
    bitstring(unsigned long, size_t);
    bitstring(const string&amp;);
    bitstring(const bitstring&amp;);
    ~bitstring();

    // Conversions
    string to_string() const;

    // Assignment
    bitstring&amp; operator=(const bitstring&amp;);

    // Equality
    int operator==(const bitstring&amp;) const;
    int operator!=(const bitstring&amp;) const;

    // Basic bit operations
    bitstring&amp; set(size_t, int = 1);
    bitstring&amp; set();
    bitstring&amp; reset(size_t);
    bitstring&amp; reset();
    bitstring&amp; toggle(size_t);
    bitstring&amp; toggle();
    int test(size_t) const;
    int any() const;
    int none() const;
    bitstring operator~() const;
    size_t count() const;

    // Bitwise operators
    bitstring&amp; operator&amp;=(const bitstring&amp;);
    bitstring&amp; operator|(const bitstring&amp;);
    bitstring&amp; operator^=(const bitstring&amp;);
    bitstring&amp; operator&gt;&gt;=(size_t);
    bitstring&amp; operator&lt;&lt;=(size_t);
    bitstring operator&gt;&gt;(size_t) const;
    bitstring operator&lt;&lt;(size_t) const;

    // String operations
    bitstring&amp; operator+=(const bitstring&amp;);
    bitstring&amp; insert(size_t, const bitstring&amp;);
    bitstring&amp; remove(size_t, size_t);
    bitstring&amp; replace(size_t, size_t, const bitstring&amp;);
    size_t find(int, size_t = 0) const;
    size_t rfind(int, size_t = NPOS) const;
    bitstring substr(size_t, size_t) const;
    size_t  length() const;
    size_t length(size_t, int = 0);
    size_t trim();

private:
    typedef unsigned int Block;
    Block *bits_;
    size_t nbits_;
    size_t nblks_;
    Block clean_mask_;

    enum {BLKSIZ = CHAR_BIT * sizeof(Block)};

    static Block word(size_t b)
      {return b / BLKSIZ;}
    static Block offset(size_t b)
      {return BLKSIZ - b%BLKSIZ - 1;}
    static Block mask1(size_t b)
      {return Block(1) &lt;&lt; offset(b);}
    static Block mask0(size_t b)
      {return ~(Block(1) &lt;&lt; offset(b));}
    static size_t nblks(size_t nb)
      {return (nb+BLKSIZ-1) / BLKSIZ;}

    void make_clean_mask();
    void cleanup();
    void set_(size_t);
    int set_(size_t, int);
    void reset_(size_t);
    int test_(size_t) const;
    void from_string(const string&amp;);
    void init(size_t);
    void equalize(bitstring&amp;);

    friend istream&amp; operator&gt;&gt;(istream&amp;, bitstring&amp;);
};

// Global Functions:
ostream&amp; operator&lt;&lt;(ostream&amp;, const bitstring&amp;);
istream&amp; operator&gt;&gt;(istream&amp;, bitstring&amp;);
bitstring operator&amp; (const bitstring&amp;, const bitstring&amp;);
bitstring operator|(const bitstring&amp;, const bitstring&amp;);
bitstring operator^ (const bitstring&amp;, const bitstring&amp;);
bitstring operator+ (const bitstring&amp;, const bitstring&amp;);

// Inline publics:
inline bitstring::bitstring()
{
    init(0);
}

inline bitstring::~bitstring()
{
    delete [] bits_;
}

inline bitstring&amp; bitstring::toggle(size_t pos)
{
    assert(pos &lt; nbits_);
    bits_[word(pos)] ^= mask1(pos);
    return *this;
}

inline int bitstring::test(size_t pos) const
{
    assert(pos &lt; nbits_);
    return test_(pos);
}

inline bitstring bitstring::operator~() const
{
    bitstring b(*this);
    b.toggle();
    return b;
}

inline int bitstring::operator!=(const bitstring&amp; b) const
{
    return !operator==(b);
}

inline int bitstring::none() const
{
    return !any();
}

inline size_t bitstring::length() const
{
    return nbits_;
}

inline bitstring
operator&amp;(const bitstring&amp; x, const bitstring&amp; y)
{
    bitstring b(x);
    return b &amp;= y;
}

inline bitstring
operator|(const bitstring&amp; x, const bitstring&amp; y)
{
    bitstring b(x);
    return b |= y;
}

inline bitstring
operator^(const bitstring&amp; x, const bitstring&amp; y)
{
    bitstring b(y);
    return b ^= x;
}

inline bitstring bitstring::operator&lt;&lt;(size_t n) const
{
    bitstring r(*this);
    return r &lt;&lt;= n;
}

inline bitstring bitstring::operator&gt;&gt;(size_t n) const
{
    bitstring r(*this);
    return r &gt;&gt;= n;
}

inline bitstring
operator+(const bitstring&amp; b1, const bitstring&amp; b2)
{
    bitstring b(b1);
    return b.operator+=(b2);
}

// Inline privates:
inline void bitstring::make_cleanmask()
{
    clean_mask = ~Block(0) &lt;&lt; (nblks_ * BLKSIZ - nbits_);
}

inline void bitstring::cleanup()
{
    // Make sure unused bits don't get set
    if (nbits_ % BLKSIZ)
      bits_[nblks_ - 1] &amp;= clean_mask;
}
inline void bitstring::set_(size_t b)
{
    bits_[word(b)] |= mask1(b);
}

inline void bitstring::reset_(size_t b)
{
    bits_[word(b)] &amp;= mask0(b);
}

inline int bitstring::test_(size_t b) const
{
    return !!(bits_[word(b)] &amp; maskl(b));
}

#endif

// End of File
</pre>
</BODY>
</HTML>
