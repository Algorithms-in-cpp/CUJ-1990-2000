<HTML><HEAD>
<TITLE>December 1993/A Windows Debugging Stream/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2 <I>Member functions of</I> MyDebugStreamBuf</A></h4>
<pre>MyDebugStream::MyDebugStream(

    BOOL UseMessageBox,                        // default output specifier

    char* pTitle )                             // possible title for MessageBox

    : m_buf( UseMessageBox, pTitle ),          // pass arguments to
                                        // MyDebugStreambuf constructor

    ostream((streambuf*) &amp;m_buf )              // pass MyDebugStreambuf
                                        // to ostream constructor
{
    ASSERT( this );
}

MyDebugStreambuf::MyDebugStreambuf(BOOL UseMessageBox, char* pTitle )

    : strstreambuf()
{
    ASSERT( this );
    m_UseMessageBox = UseMessageBox;             // store the default
                                          // output flag

    m_pTitle = pTitle;                           // store pointer to the
                                          // MessageBox title

    m_BufferSize = DEBUG_BUFFER_SIZE;            // store the buffer size

    m_pBuffer = new char[m_BufferSize + 1];      // get one extra for
                                          // NULL terminator

    ASSERT(m_pBuffer );                          // paranoia check

    setp(m_pBuffer, m_pBuffer + m_BufferSize );  // init put pointers
}

int MyDebugStreambuf::overflow( int ch )
{
    ASSERT( this );
    if( out_waiting() )
        Flush();                               // data in buffer
    return strstreambuf::overflow( ch );
}

int MyDebugStreambuf::sync()
{
    ASSERT( this );
    if( out_waiting() )
        Flush();                               // data in buffer
    return strstreambuf::sync();
}

void MyDebugStreambuf::Flush()
{
    ASSERT( this );
    BOOL UseMessageBox = m_UseMessageBox;      // get default
    
    char* p = pptr() - 1;                     // get pointer to
                                        // last character
    if( *p == (char) FLUSH_TO_BOX )
    {
        UseMessageBox = TRUE;                 // set output flag

        *p = '\0';                            // discard FLUSH_TO_BOX
    }
    else if( *p == (char) FLUSH_TO_DEBUG )
    {
        UseMessageBox = FALSE;                // set output flag

        *p = '\0'    ;                        // discard FLUSH_TO_DEBUG
    }
    else
        *pptr() = '\0';                       // NULL terminate

    if( UseMessageBox )                        // do the output
        MessageBox( NULL, m_pBuffer, m_pTitle, MB_OK|MB_ICONINFORMATION );
    else
        ::OutputDebugString( m_pBuffer );

    setp( m_pBuffer, m_pBuffer + m_BufferSize ); // reset buffer pointers
}

ostream&amp; BoxFlush( ostream&amp; os )
{
    return os &lt;&lt; (char) FLUSH_TO_BOX &lt;&lt; flush;
}

ostream&amp; DebugFlush( ostream&amp; os )
{
    return os &lt;&lt; "\r\n"
          &lt;&lt; (char) FLUSH_TO_DEBUG &lt;&lt; flush;
}
// End of File</pre>

</BODY>
</HTML>
