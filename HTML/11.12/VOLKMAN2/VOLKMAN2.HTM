

<HTML>
<HEAD>

<TITLE>December 1993/CUG Product Focus</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocdec.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">CUG Product Focus<A name="035E_0136"><A name="035E_0136"></font></h2><P>
<h3 align="center"><A name="035E_0000"><A name="035E_0000">Class DOSThread: A Base Class for Multithreaded DOS Programs</h3><P>
<h3 align="center"><font color="#800000">Victor R. Volkman</font></h3><hr><blockquote><P>
<P><i><A name="035E_0000"><A name="035E_0000">Victor R. Volkman received a BS in Computer Science from Michigan Technological University. He has been a frequent contributor to The C Users Journal since 1987. He is currently employed as Senior Analyst at H.C.I.A. of Ann Arbor, Michigan. He can be reached by dial-in at the HAL 9000 BBS (313) 663-4173 or by Usenet mail to sysop@hal9k.com.</i></P><P>
<h4><FONT COLOR="#000080"><A name="035E_0137">Synopsis<A name="035E_0137"></FONT></h4></P>
I have abstracted this article from original documentation by John English; he has provided this documentation expressly for reprint in <I>The C Users Journal</I>.<P>
Class <I>DOSThread</I> is now available as CUG Library volume #385. Volume #385 also includes the class <I>TSR</I> and the class <I>Coroutine.</I> All three packages have been contributed by John English.<P>
<I>DOSThread</I> is a C++ class for creating multithreaded DOS programs. To produce threads, programs must derive classes from <I>DOSThread;</I> each instance of a derived class then implements a single thread. The executable code for each thread will be contained in each class's member function <I>main</I>. Users of DOSThread write member function <I>main</I>, but the derived class already does most of the work of multithreading, by supplying member functions for starting, stopping, and delaying threads.<P>
This article is laid out in four major sections. The first section is a brief introduction to the overall capabilities of DOSThread threaded applications. The second section of the article shows how to create DOSThread applications. The third section introduces interthread communication and the use of Monitors via DOSThread-supplied member functions. Finally, the fourth section discusses a few problem areas in the current DOSThread implementation. The author of DOSThread welcomes communication about DOSThread; his various addresses are listed at the end of this article.<P>
<h4><FONT COLOR="#000080"><A name="035E_0138">Overall Capabilities of <B><I>DOSThread</I><A name="035E_0138"></B></FONT></h4></P>
Class DOSThread provides a framework for writing DOS applications which consist of multiple (pseudo) parallel "threads" of execution. DOS is not a multithreading operating system; in fact, DOS actively hinders multithreading by being non-reentrant. But this class allows you to create multithreaded DOS applications without worrying about DOS's non-reentrant design (although you should read the volume's documentation for some important caveats concerning direct calls to the BIOS).<P>
To create a thread, you derive a class from the <I>DOSThread</I> class; the derived class should contain the code you want to execute in a member function <I>main</I>. Then you simply declare an instance of your derived class and call the member function <I>run</I> to start it running. Each thread executes in intervals of 1 clock tick (55 milliseconds), then suspends execution to allow the other threads to execute. You can change the length of this timeslice if necessary, through member function <I>timeslice</I>. If necessary, you can disable timeslicing entirely, in which case it is up to each thread to relinquish the processor at regular intervals so the other threads have a chance to run.<P>
Threads can delay themselves for a given number of clock ticks by calling member function <I>delay</I>; they can relinquish the processor to other threads by calling the member function <I>pause</I>; and they can terminate themselves or each other by calling the member function <I>terminate</I>. You can also inspect the current state of any thread (ready-to-run, terminated, delayed, etc.) by calling member function <I>status</I>, and you can cause your program to wait for a thread to terminate by calling the member function <I>wait</I>.<P>
You can derive monitor classes of your own from two additional classes (<I>DOSMonitor</I> and <I>DOSMonitorQueue</I>) to facilitate communication between threads. A monitor implementation normally includes data structures to be accessed by several threads. To guarantee that only one thread at a time is executing a monitor member function (which accesses the data), call the member function <I>lock</I> at the start of the monitor function. If any other thread is already executing a monitor function guarded by <I>lock,</I> a contending thread will wait until it is safe to proceed. At the end of the monitor function, you should call <I>unlock</I> to allow any waiting threads to proceed.<P>
Monitors containing instances of <I>DOSMonitorQueue</I> can also allow threads to suspend themselves in a monitor function until some condition has been fulfilled (e.g. buffer not empty). Other threads executing within the monitor can resume suspended threads when a condition is fulfilled (e.g. when a data item has been put into an empty buffer). This distribution also includes a template class which implements a bounded buffer.<P>
The preceding paragraphs describe what are probably the most common uses of monitors in DOS applications, so you may not even need to define any monitor classes of your own.<P>
<h4><FONT COLOR="#000080"><A name="035E_0139">How to Create DOSThread Applications<A name="035E_0139"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="035E_013A">Deriving a New Thread from <B><I>DOSThread</I><A name="035E_013A"></B></FONT></h4></P>
You create every thread by deriving from the base class <I>DOSThread</I>. Each derived thread class must define a member function called <I>main</I> which contains code for the thread to execute. Declare <I>main</I> as follows:<P>
<pre>void MyThread::main ()
{
    // code to be executed by your thread
}</pre>
The constructor for <I>MyThread</I> will invoke the constructor for <I>DOSThread</I>. The constructor for <I>DOSThread</I> takes a single parameter &#151; an unsigned integer specifying the stack size for the thread. However, the default stack size is 2,048 bytes; if this size is sufficient you need not call the DOSThread constructor explicitly.<P>
After deriving a thread class, you can instantiate this derived class, as in:<P>
<pre>MyThread threadl;        // a thread called "thread1"
MyThread threads [5];        // five identical threads</pre>
The threads you declare will not execute until you call their member functions <I>run</I>, as follows:<P>
<pre>thread1.run ();</pre>
<I>run</I> returns true(1) if the thread was started successfully, and false (0) if the thread could not be started (either because there was insufficient memory to create the necessary data structures, or because it had already been started). Note that you cannot call <I>run</I> from your thread constructor, because the virtual function <I>main</I> is not accessible until you have finished executing the constructor.<P>
Once a thread has started successfully, it will execute in parallel with the main program. The main program effectively becomes another thread (although it has no name, and it can only call the static functions <I>pause</I> and <I>delay</I> described later).<P>
As a default, each thread executes in a "timeslice" of one clock tick (55 msec). If a thread is still running when its timeslice expires, it moves to the back of the queue of ready-to-run threads, and the next thread in the queue resumes execution. You can call static member function <I>timeslice</I> to change the length of the timeslices. <I>timeslice</I> requires an unsigned integer parameter specifying the desired timeslice duration in clock ticks. For example:<P>
<pre>DOSThread::timeslice (18);
    // timeslice once a second (18 x 55ms)</pre>
If you set the parameter to zero, timeslicing is disabled. In this case each individual thread must explicitly relinquish control at regular intervals. Threads can release control by calling a member function which will schedule another thread for execution. <I>DOSThread</I> provides member function <I>pause</I> for just this purpose; <I>pause</I> is described later in this article.<P>
You must call <I>timeslice</I> before you declare any threads; as soon as the first thread has been declared, the program will ignore calls to <I>timeslice</I>. In other words, you cannot change the length of the timeslice during execution of the program.<P>
<h4><FONT COLOR="#000080"><A name="035E_013B">Writing the Member Function <B><I>main</I><A name="035E_013B"></B></FONT></h4></P>
<I>MyThread::main</I> (the <I>main</I> function of your derived class) executes in parallel with the rest of the program once it has been started by calling <I>run.</I> While you can write <I>MyThread::main</I> exactly like any other function, remember that it is sharing the processor with a number of other threads; so if it has nothing useful to do, it should allow some other thread to run. You can temporarily release the processor to another thread by calling the member function <I>pause</I>:<P>
<pre>pause ();           // schedule another thread</pre>
<I>pause</I> is a static member function, so it can be called from any point in a program as <I>DOSThread::pause</I>. Even if you have enabled timeslicing, it's a good idea to call <I>pause</I> if your thread is temporarily unable to proceed (e.g. if it is waiting for a key to be pressed), otherwise the thread will waste several milliseconds until its timeslice expires.<P>
You can also make your thread wait for a fixed time by calling the static member function <I>delay</I>, specifying the delay period as a number of 55 msec clock ticks:<P>
<pre>delay (18);            // delay for 1 second (18 x 55ms)</pre>
Note that <I>pause</I> and <I>delay</I> are both static member functions, and they always affect the current thread. Consequently, you cannot <I>pause</I> or <I>delay</I> any other thread. Also, you <I>can</I> call these functions from the main program if you need to.<P>
When <I>MyThread::main</I> returns, the <I>main</I> thread terminates. You can also terminate a thread explicitly by calling the member function <I>terminate.</I> If another thread (or the main program) wants to terminate <I>thread1</I>, it can do so like this:<P>
<pre>thread1.terminate ();</pre>
However, abitrarily terminating a thread can cause problems; in the given example you have no idea what <I>thread1</I> is doing at the time. A thread can also terminate itself, as in:<P>
<pre>terminate ();</pre>
which has the same effect as returning from the <I>main</I> function of the thread.<P>
<h4><FONT COLOR="#000080"><A name="035E_013C">Initialization and Finalization<A name="035E_013C"></FONT></h4></P>
When the main program (or another thread) declares a thread, the program must call a constructor for class <I>DOSThread</I> to create the thread, and complete initialization by calling the constructor defined by your derived thread class. Note that a thread is not completely constructed until this sequence is complete; in particular, note that you cannot call <I>run</I> from inside your derived class constructor to start the thread running immediately.<P>
When execution reaches the end of a block in which a thread was declared, the program calls the thread's destructor. The program calls any destructor in your derived class first (the thread could still be running), and then calls the standard <I>DOSThread</I> destructor to wait for the thread to terminate before tidying up. Your destructor should not do anything that might cause the thread to fail. To ensure that it does not interfere with the thread's execution, your destructor may call the member function <I>wait</I>, to wait for the thread to terminate. Your destructor should call this function before doing anything that might cause the thread to fail. In other words, your destructor should be written like this:<P>
<pre>MyThread::~MyThread ()R
{
    wait ();          // wait for thread to terminate
    ...                // do any class-specific tidying up
}</pre>
<h4><FONT COLOR="#000080"><A name="035E_013D">Handling Control-Break and Critical Errors<A name="035E_013D"></FONT></h4></P>
Class <I>DOSThread</I> provides a simple mechanism for dealing with events reported by DOS. The first such event occurs when the user presses the <I>control-break</I> key to abort a program. Class <I>DOSThread</I> intercepts these events and sets an internal flag. Individual threads (or the main program) can call the static member function <I>userbreak</I> to test if control-break has been pressed:<P>
<pre>if (DOSThread::userbreak ()) ...</pre>
This flag will remain set so other threads can also inspect it. Alternatively, you can call the static function <I>cancelbreak</I>, which is identical to <I>userbreak</I> except that it also resets the internal flag. Calling <I>cancelbreak</I> allows an individual thread to respond to a control-break event while preventing any other threads from responding. <I>cancelbreak</I> also provides a means for resetting the flag. If the program's threads do not use either of these functions, the program will ignore control-breaks completely.<P>
DOS will generate critical errors (the familiar "Abort, Retry, Fail?" errors) if a disk is write-protected or if a printer is offline. Classes derived from <I>DOSThread</I> can provide a virtual function <I>error</I> to deal with critical errors generated within their member functions. Threads must provide their own critical error handlers on an individual basis; the default handler just fails the operation. To provide a critical error handler for a thread class, define a member function <I>DOSerror</I> as follows:<P>
<pre>DOSThread::Error DOSerror (int N);</pre>
The parameter <I>N</I> is the DOS code defining the cause of the error. <I>DOSerror</I> should return <I>DOSThread::IGNORE</I> to ignore the error, <I>DOSThread::RETRY</I> to retry the operation that caused the error, or <I>DOSThread::FAIL</I> to fail the operation. Note that during critical-error handling, the only DOS services that you can call are functions <I>00</I> to <I>0C</I>. Class <I>DOSThread</I> will intercept and ignore any other functions, since they would cause DOS to crash.<P>
You should never call the function <I>DOSerror</I> directly; the program will call it automatically if an error occurs during execution of a thread.<P>
<h4><FONT COLOR="#000080"><A name="035E_013E">Inspecting the Status of Threads<A name="035E_013E"></FONT></h4></P>
The member function <I>status</I> allows you to determine the status of a thread at any time. <I>status</I> can be called as follows:<P>
<pre>state = thread1.status ();</pre>
The result is a value of type <I>DOSThread::State</I>, which will be one of the following values:<P>
<pre><B>Value                     Indication</B>
<I>OSThread::CREATED</I>       &#151; the thread is newly created and
                           can be started by calling <I>run</I>.
<I>DOSThread::READY</I>        &#151; the thread is ready to run
                           (or is currently running).
<I>DOSThread::DELAYED</I>      &#151; the thread has delayed itself
                           by calling delay.
<I>DOSThread::WAITING</I>      &#151; the thread is waiting to enter a
                           monitor function guarded by <I>lock</I>.
<I>DOSThread::QUEUED</I>       &#151; the thread is inside a monitor and
                           is suspended on a monitor queue.
<I>DOSThread::TERMINATED   </I>&#151; the thread has terminated.</pre>
<h4><FONT COLOR="#000080"><A name="035E_013F">Interthread Communication<A name="035E_013F"></FONT></h4></P>
One of the more difficult features to implement in multi-threaded programs is communication between threads. Since you do not know when a thread will be rescheduled, it is unsafe to modify shared global variables, as it is perfectly possible to be interrupted during the update process. If another thread performs a similar update, you may complete your update with out-of-date values when your thread resumes. As a result, global variables may end up in an inconsistent and incorrect state.<P>
The base class <I>DOSMonitor</I> provides a convenient base for building safe interthread communication. You simply derive a class from <I>DOSMonitor</I> which encapsulates any shared data, and which provides functions to access the data. Each access function should begin by calling the member function <I>lock</I> and end by calling <I>unlock</I>. This practice will guarantee that only one thread at a time is executing an access function in any individual monitor. Therefore, the general structure required for a monitor access function is as follows:<P>
<pre>void MyMonitor::access ( /* parameter list */ )
{
    lock ();
    ...           // access shared data as required
    unlock ();
}</pre>
Classes derived from <I>DOSMonitor</I> can also contain instances of class <I>DOSMonitorQueue</I>. Within an access function, you can call the member function <I>suspend</I> with a <I>DOSMonitorQueue</I> object as its parameter. You call <I>suspend</I> to suspend the thread executing the access function until some condition is satisfied. Calling <I>suspend</I> will allow other threads to execute access functions within that monitor. The other access functions can resume any threads suspended on a particular queue by calling the member function <I>resume,</I> with the queue as a parameter. Calling <I>resume</I> will reawaken the threads suspended in that queue.<P>
Note that you should call <I>suspend</I> from within a loop; since <I>resume</I> will restart all the threads in the specified queue, you can't be sure that when your thread resumes execution that the condition the thread was waiting for will still be true. Thus, to suspend a thread until a counter is non-zero, use code such as the following:<P>
<pre>while (counter != 0)
    suspend (some_queue);</pre>
As an example of a monitor class, consider a monitor providing a 20-character buffer to transfer data from one thread to another. The code might look something like this:<P>
<pre>class Buffer : public DOSMonitor
{
    char data[20];          // the buffer itself
    int count;              // no. of chars in buffer
    int in;                 // where to put next char
    int out;                // where to get next char from
    DOSMonitorQueue full;
    OSMonitorQueue empty;
public:
    Buffer ()                  {
count = in = out = 0; }
    void get (char&amp; c);
     // get a char from the buffer
    void put (char&amp; c);
     // put a char in the buffer
};</pre>
The class constructor initialises <I>count</I> to zero to indicate an empty buffer and points <I>in</I> and <I>out </I>to the start of the buffer. Threads must then call <I>get</I> and <I>put</I> in succession to access the buffer's contents. The <I>buffer</I> class declares two <I>DOSMonitorQueue</I> instances; <I>full</I> suspends threads which call <I>put</I> when the buffer is full, and <I>empty</I> suspends threads which call <I>get</I> when the buffer is <I>empty.</I> The code for <I>get</I> would be similar to the following:<P>
<pre>void Buffer::get (char&amp; c)
{
    //--- lock the monitor
    //--- against re-entry
    lock ();

    //--- suspend until the
    //--- buffer isn't empty
    while (count == 0)
        suspend (empty);

    //--- get next character from the buffer
    c = data [out++];
    out %= 20

    //--- resume any threads waiting until buffer isn't full
    resume (full);

    //--- unlock the monitor to let other threads in
    unlock ();
}</pre>
<h4><FONT COLOR="#000080"><A name="035E_0140">The Class <B><I>BoundedBuffer</I><A name="035E_0140"></B></FONT></h4></P>
The class <I>BoundedBuffer</I> included in this distribution is a template class derived from <I>DOSMonitor,</I> which implements a bounded buffer similar to the preceding example. You can create a 20-character buffer by instantiating this class as follows:<P>
<pre>BoundedBuffer&lt;char&gt; buffer(20);</pre>
The type given in angle brackets &lt;...&gt; is the type of item you want to store in the buffer, and the parameter value is the maximum number of items the buffer can hold. <I>BoundedBuffer</I> provides the following member functions:<P>
<pre><B>Function       Description</B>
<I>get (item) </I> &#151; Get the next item from the buffer and store it
               in <I>item</I>. The function returns 1 (true) if it is
               successful and 0 (false) if the buffer has
               been closed (see <I>close</I>).
<I>put (item)</I>  &#151; Put a copy of <I>item</I> into the buffer. This
               function returns 1 (true) if it is successful
               and 0 (false) if the buffer has been closed
               (see <I>close</I>).
<I>items ()  </I>  &#151; Return the number of items in the buffer.
<I>close ()</I>    &#151; Close the buffer to prevent further accesses.
               If you do not close buffers when you have
               finished using them, you run the risk of your
               program never terminating &#151; a thread may be
               suspended waiting for a character that will
               never arrive, which means that its destructor
               will wait forever for it to terminate.</pre>
<h4><FONT COLOR="#000080"><A name="035E_0141">Error Handling in Monitors<A name="035E_0141"></FONT></h4></P>
Monitors derived from class <I>DOSMonitor</I> should provide a virtual function called <I>error</I>, which the program will call if it detects any errors in a monitor. You should declare <I>Error</I> as follows:<P>
<pre>void error (DOSMonitor::ErrorCode);</pre>
The parameter to <I>error</I> is a code for the detected error. This code can take any of the following values:<P>
<pre><B>Error Code Value             Interpretation</B>
<I>DOSMonitor::NEW_FAIL</I>      <I></I>&#151; there was insufficient memory to
                             create the necessary data structures
                             for the monitor.
<I>DOSMonitor::NO_THREAD</I>     <I></I>&#151; a monitor has been called when
                             there are no threads running.
<I>DOSMonitor::LOCK_FAIL</I>     <I></I>&#151; the current thread is calling lock
                             when it has already locked the
                             monitor.
<I>DOSMonitor::UNLOCK_FAIL</I>   <I></I>&#151; the current thread has called
                             <I>unlock</I> without having locked
                             the monitor.
<I>DOSMonitor::SUSPEND_FAIL</I>  <I></I>&#151; the current thread has called
                             suspend without having locked
                             the monitor.
<I>DOSMonitor::RESUME_FAIL</I>   <I></I>&#151; the current thread has called
                             <I>resume</I> without having locked
                             the monitor.</pre>
The last five of these error codes will occur when a bug exists in the monitor code itself (which should be corrected). If a monitor does not provide a definition for <I>error</I>, the class provides a default response to exit the program with an exit status in the range &#151;1 to &#151;6 (&#151;1 for <I>NEW_FAIL</I> through to &#151;6 for <I>RESUME_FAIL</I>).<P>
<h4><FONT COLOR="#000080"><A name="035E_0142">Potential Problem Areas<A name="035E_0142"></FONT></h4></P>
Class <I>DOSTask</I> guards against reentrant calls to DOS with an internal monitor, as reentrant calls are certain to crash your machine. <I>DOSTask</I> does not protect direct calls to BIOS functions in the same way. While BIOS calls are generally safer (because they use the caller's stack), they still manipulate a global shared data area. Therefore, you should not call BIOS functions directly; direct <I>BIOS</I> calls can create hard-to-identify bugs resulting from an inconsistent internal state. As for C++ library functions, these functions normally call DOS services rather than BIOS functions, so most of the functions in the standard library are safe to use. The major exceptions to this are the functions defined in <I>&lt;bios. h&gt;</I> and the functions <I>int86</I> and <I>int86x</I>.<P>
If you do need to use BIOS functions directly, the best way is to localize all BIOS calls in a single monitor so that only one task can call a BIOS function at a time; however, since DOS services will make BIOS calls to perform their functions, you must also encapsulate all DOS calls in the monitor to guarantee that only one task is making a BIOS call at a time. Encapsulating all DOS calls may not be a terribly practical solution.<P>
Another point worth noting: you should perform screen output with <I>fputs</I> rather than <I>cout, printf</I> or <I>puts.</I> These last three functions generate several DOS calls to output their data, so their output could become interleaved with the output of another thread. In particular, <I>cout</I> may produce the same output twice if its calling thread is interrupted at a particular moment (after output has been displayed but before the internal buffer has been cleared). Also, the next thread calling <I>cout</I> will append its output to the existing contents of the buffer, which will then be displayed in its entirety.<P>
A more serious problem is that the program will not work with upper memory managers. In order to work, the program would need to save memory management context information during a thread context switch. In the interest of removing this limitation, the author would greatly appreciate the assistance of anyone familiar with the inner-workings of upper memory managers.<P>
<h4><FONT COLOR="#000080"><A name="035E_0143">Contacting the Author<A name="035E_0143"></FONT></h4></P>
You may contact John English via e-mail at <I>je@unix.brighton.ac.uk,</I> or via regular mail at the Department of Computing, University of Brighton, Brighton BN2 4GJ, England. If you use this class, please contact the author via the addresses; if you don't have e-mail access please send him a postcard just to let him know you've looked at it. Feel free to suggest enhancements, find bugs, or (better still) fix them and send him patches. Happy hacking!<P>
</BLOCKQUOTE>
</BODY>
</HTML>
