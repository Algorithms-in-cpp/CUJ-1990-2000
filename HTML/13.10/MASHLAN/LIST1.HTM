<HTML><HEAD>
<TITLE>October 1995/Checked Pointers for C++/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1 <I>Class templates for</I> CheckedPtr<I> and </I>CheckedClassPtr</A></h4>
<pre>//checkptr.h listing 1
// copyright 1995 Robert Mashlan

#ifndef _CHECKPTR_H
#define _CHECKPTR_H

#include &lt;stddef.h&gt;
#include &lt;except.h&gt;
#include &lt;cstring.h&gt;

class xCheckedPtr: public xmsg
{
   public:
      xCheckedPtr( const string&amp; why ) : xmsg(why) {}
};

class xnullptr: public xCheckedPtr {
   public:
      xnullptr() : xCheckedPtr("dereferenced null pointer") {}
      void raise() { throw *this; }
};

class xoutofrange: public xCheckedPtr {
   public:
      xoutofrange() : xCheckedPtr("pointer out of range") {}
      void raise() { throw *this; }
};

class xnotsamebase: public xCheckedPtr {
   public:
      xnotsamebase()
         : xCheckedPtr("comparison between two pointers not of the same base")
         {}
      void raise() { throw *this; }
};

template&lt;class T&gt;

class CheckedPtr {
   public:
      // default constructor
      CheckedPtr(T *p = 0, size_t limit=1, T* base = 0 )
         : p(p), base(base?base:p), limit(limit)
         {
            if(p&gt;this-&gt;base+limit||p&lt;this-&gt;base)
               xoutofrange().raise();
         }
      // copy constructor
      CheckedPtr( const CheckedPtr&lt;T&gt;&amp; orig )
         : p(orig.p), base(orig.base), limit(orig.limit)
         {}

      // access to base and limit
      void SetBaseAndLimit( T* base, size_t limit )
         {
            if(!base)
               base = p;
            if(!limit)
               limit = 1;
            this-&gt;base=base;
            this-&gt;limit=limit;
            if( p &amp;&amp; (p&lt;base || base+limit&lt;p) )
               xoutofrange().raise();
         }

      // conversion operator
      operator T*() const
         { return p; }

      // reference operators
      T&amp; operator*() const
         { return operator[](0); }
      T&amp; operator[]( ptrdiff_t i ) const
         {
            if(!p) // null pointer?
              xnullptr().raise();
            // check for out of range reference
            if( p+i&lt;base || base+limit &lt;= p+i )
              xoutofrange().raise();
            return p[i];
         }
      // assignment operators
      CheckedPtr&lt;T&gt;&amp; operator=( const CheckedPtr&lt;T&gt;&amp; cp )
         { p = cp.p; base=cp.base; limit=cp.limit; return *this; }
      CheckedPtr&lt;T&gt;&amp; operator=( T* p )
         { this-&gt;p = base = p; limit = 1; return *this; }
      CheckedPtr&lt;T&gt;&amp; operator+=( ptrdiff_t n )
         {
            if(!p)
               xnullptr().raise();
            if( p+n &lt; base || base + limit &lt; p+n )
               xoutofrange().raise();
            p += n;
            return *this;
         }
      CheckedPtr&lt;T&gt;&amp; operator-=( ptrdiff_t n )
         { return operator+=(-n); }
      // additive operators
      CheckedPtr&lt;T&gt; operator+( ptrdiff_t n ) const
         { return CheckedPtr&lt;T&gt;(*this).operator+=(n); }
      CheckedPtr&lt;T&gt; operator-( ptrdiff_t n ) const
         { return CheckedPtr&lt;T&gt;(*this).operator-=(n); }
      ptrdiff_t operator-( const CheckedPtr&lt;T&gt;&amp; cp ) const
         {
            if(base!=cp.base)
               xnotsamebase().raise();
            return p-cp.p;
         }
      ptrdiff_t operator-( CheckedPtr&lt;T&gt;&amp; cp ) const
         { return operator-((const CheckedPtr&lt;T&gt;)cp); }
      ptrdiff_t operator-( T *p ) const
         {
            if( p&lt;base || base+limit&lt;p )
               xnotsamebase().raise();
            return this-&gt;p-p;
         }
      friend ptrdiff_t operator-( T* p, CheckedPtr&lt;T&gt;&amp; cp );

      // increment and decrement
      CheckedPtr&lt;T&gt;&amp; operator++(int)
         { return operator+=(1); }
      CheckedPtr&lt;T&gt; operator++()

         {
            CheckedPtr&lt;T&gt; r(*this);
            operator++(0);
            return r;
         }
      CheckedPtr&lt;T&gt;&amp; operator--(int)
         { return operator-=(1); }
      CheckedPtr&lt;T&gt; operator--()
         {
            CheckedPtr&lt;T&gt; r(*this);
            operator--(0);
            return r;
         }

      // logical negation
      bool operator!() const
         { return !p; }

      // equality operators
      bool operator==( const CheckedPtr&lt;T&gt;&amp; cp ) const
         { return p == cp.p; }
      bool operator==( T* p ) const
         { return this-&gt;p == p; }
      bool operator != ( const CheckedPtr&lt;T&gt;&amp; cp ) const
         { return p != cp.p; }
      bool operator!=( T* p ) const
         { return this-&gt;p != p; }

      // relational operators
      bool operator&lt;( const CheckedPtr&lt;T&gt;&amp; cp ) const
         { return operator-(cp) &lt; 0; }
      bool operator&lt;( T* p ) const
         { return operator-(p) &lt; 0; }
      bool operator&lt;=( const CheckedPtr&lt;T&gt;&amp; cp ) const
         { return operator-(cp) &lt;= 0; }
      bool operator&lt;=( T* p ) const
         { return operator-(p) &lt;= 0; }

      bool operator&gt;( const CheckedPtr&lt;T&gt;&amp; cp ) const
         { return operator-(cp) &gt; 0; }
      boo1 operator&gt;( T* p ) const
         { return operator-(p) &gt; 0; }
      bool operator&gt;=( const CheckedPtr&lt;T&gt;&amp; cp ) const
         { return operator-(cp) &gt;= 0; }
      bool operator&gt;=( T* p ) const
         { return operator-(p) &gt;= 0; }

   protected:
      T* p;          // pointer that this class represents
      T* base;       // base of the array that p is a member of
      size_t limit;  // number of elements in the array.
                  // 1 for non-array pointers
};

template&lt;class T&gt; inline
ptrdiff_t operator-( T* p, CheckedPtr&lt;T&gt;&amp; cp )
{
   if( p &lt; cp.base || cp.base+cp.limit &lt; p )
      xnotsamebase().raise();
   return p-cp.p;
}

template&lt;class T&gt; inline
CheckedPtr&lt;T&gt; operator+( ptrdiff_t n, const CheckedPtr&lt;T&gt;&amp; cp )
{
   return cp.operator+(n);
}

// non-member equality operators

template&lt;class T&gt; inline
bool operator==( T* p. const CheckedPtr&lt;T&gt;&amp; cp )
{
   return cp.operator==(p);
}

template&lt;class T&gt; inline
bool operator!=( T* p, const CheckedPtr&lt;T&gt;&amp; cp )
{
   return cp.operator!=(p);
}

// non-member relational operators

template&lt;class T&gt; inline
bool operator&lt;( T* p, const CheckedPtr&lt;T&gt;&amp; cp )
{
   return cp.operator&gt;=(p);
}

template&lt;class T&gt; inline
bool operator&lt;=( T* p, const CheckedPtr&lt;T&gt;&amp; cp )
{
   return cp.operator&gt;(p);
}

template&lt;class T&gt; inline
bool operator&gt;( T* p, const CheckedPtr&lt;T&gt;&amp; cp )
{
   return cp.operator&lt;=(p);
}

template&lt;class T&gt; inline
bool operator&gt;=( T* p, const CheckedPtr&lt;T&gt;&amp; cp )
{
   return cp.operator&lt;(p);
}

template&lt;class T&gt;
class CheckedClassPtr: public CheckedPtr&lt;T&gt; {
   public:
      CheckedClassPtr(T *p=0, size_t limit=1, T* base=0 )
         : CheckedPtr&lt;T&gt;(p, limit,base)
         {}
      CheckedClassPtr( const CheckedClassPtr&lt;T&gt;&amp; orig )
         : CheckedPtr&lt;T&gt;(orig)
         {}

      // class memory access operator
      T* operator-&gt;() const { return &amp;operator*(); }

      // assignment operators
      CheckedClassPtr&lt;T&gt;&amp; operator=( const CheckedClassPtr&lt;T&gt;&amp; cp )
         { CheckedPtr&lt;T&gt;::operator=(cp); return *this; }
      CheckedClassPtr&lt;T&gt;&amp; operator+=( ptrdiff_t n )
         { CheckedPtr&lt;T&gt;::operator+=(n); return *this; }
      CheckedClassPtr&lt;T&gt;&amp; operator-=( ptrdiff_t n )
         { CheckedPtr&lt;T&gt;::operator-=(n); return *this; }

      // additive operators
      CheckedClassPtr&lt;T&gt; operator+( ptrdiff_t n ) const
         { return CheckedClassPtr&lt;T&gt;(*this).operator+=(n); }
      CheckedClassPtr&lt;T&gt;operator-( ptrdiff_t n ) const
         { return CheckedClassPtr&lt;T&gt;(*this).operator-=(n); }

      // increment and decrement
      CheckedClassPtr&lt;T&gt;&amp; operator++(int)
         { return operator+=(1); }
      CheckedClassPtr&lt;T&gt; operator++()
         { CheckedClassPtr&lt;T&gt; r(*this); operator++(0); return r; }
      CheckedClassPtr&lt;T&gt;&amp; operator--(int)
         { operator-=(1); return *this; }
      CheckedClassPtr&lt;T&gt; operator--()
         { CheckedClassPtr&lt;T&gt; r(*this); operator--(0); return r; }
};

template&lt;class T&gt; inline
CheckedClassPtr&lt;T&gt; operator + ( ptrdiff_t n, const CheckedClassPtr&lt;T&gt;&amp; p )
{
   return p.operator+(n);
}

#endif
</pre>
</BODY>
</HTML>
