<HTML><HEAD>
<TITLE>October 1995/Checked Pointers for C++/Listing 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 3 <I>Demonstrations of the </I>CheckedPtr, CheckedClassPtr,<I> and </I>HeapPtr<I> class templates</I></A></h4>
<pre>// cptest.cpp listing 3
// copyright 1995 Robert Mashlan

#include &lt;iostream.h&gt;

// remove the following if the C++ implements
// a built-in bool type

typedef int bool;
enum { false, true };

#include "checkptr.h"
#include "heapptr.h"

#define DO(exp) cout &lt;&lt; #exp &lt;&lt; ";" &lt;&lt; endl; exp

void f1()
{
   cout &lt;&lt; "f1()" &lt;&lt; endl;
   DO( char buf[] = "test" );
   DO( CheckedPtr&lt;char&gt; p(buf,sizeof(buf)) );
   DO( *p = 1 );
   DO( *p = 'r'); // ok
   DO( p = 0); // now a null pointer
   DO( *p = 'r'); // error - dereferenced null pointer
}

void f2()
{
   cout &lt;&lt; "f2()" &lt;&lt; endl:
   DO( HeapPtr&lt;char&gt; a );
   // allocate an array of 100 char
   DO( const CheckedPtr&lt;char&gt; p(a(100),100) );
   DO( for(int i=0;i&lt;100;i++) p[i] = 0 ); // OK
   DO( p[i] = 0 ); // out of range
}

void f3()
{
   cout &lt;&lt; "f3()" &lt;&lt; endl;
   DO( HeapPtr&lt;char&gt; a(100));
   DO( const CheckedPtr&lt;char&gt; pa(a,100) );
   // technically OK, but fails range check for the expression &amp;v[100]
   DO( for(CheckedPtr&lt;char&gt; p=pa; p&lt;&amp;pa[100]; p++) *p=0 );
}

void f4()
{
   cout &lt;&lt; "f4()" &lt;&lt; endl;
   DO( HeapPtr&lt;char&gt; a );
   DO( const CheckedPtr&lt;char&gt; pa(a(100),100) ); // array of 100 char
   DO( for( CheckedPtr&lt;char&gt; p=pa;p&lt;pa+100; p++) *p=0 ); // OK
   DO( *p = 0 ); // error
}

void f5()
{
   cout &lt;&lt; "f5()" &lt;&lt; endl;
   DO(int i );
   DO(CheckedPtr&lt;int&gt; vi = &amp;i );
   DO(*vi = 0);
   DO(vi++); // OK
   DO(vi++); // error
}

void f6()
{
   cout &lt;&lt; "f6()" &lt;&lt; endl;
   DO( int i );
   DO( CheckedPtr&lt;int&gt; vi = &amp;i );
   DO(*vi = 0);
   DO( vi++ );   // OK
   DO(*vi = 0 ); // error
}

void f7()
{
   cout &lt;&lt; "f7()" &lt;&lt; endl;

   class A {
      public:
         A(int i=0) : i(i) {};
         void f(int d) { i=d; }
      private:
         int i;
   };

   DO( HeapPtr&lt;A&gt; hp; );
   DO( CheckedClassPtr&lt;A&gt; pa(hp(10),10) );
   DO( for( CheckedClassPtr&lt;A&gt; p = pa; p &lt; pa+10; p++) pa-&gt;f(1) );
   DO( for(int i=0;i&lt;10;i++) (pa+i)-&gt;f(i)); // OK
   DO(p-&gt;f(1) ); // error
}

void f8()
{
   cout &lt;&lt; "f8()" &lt;&lt; endl;
   DO( HeapPtr&lt;char&gt; a );
   DO( HeapPtr&lt;char&gt; b );
   DO( const CheckedPtr&lt;char&gt;pa(a(100),100) );
   DO( const CheckedPtr&lt;char&gt;pb(b(100),100) );
   DO( CheckedPtr&lt;char&gt;p; );
   DO( for(p=pa; p&lt;pa+100; p++) ); // ok
   DO( for(p=pb; p&lt;pa+100; p++) ); // error
}

void f9()
{
   cout &lt;&lt; "f9()" &lt;&lt; endl;
   DO( int a[10] );
   DO( CheckedPtr&lt;int&gt; cpa(a,10) );
   DO( CheckedPtr&lt;int&gt; cpb(a+10,10,a) );
   DO( int *b = cpb; );
   DO( int i );
   DO(for(i=0;i&lt;10;i++) cpa[i] = i );

   DO( cout &lt;&lt; (cpa==a) &lt;&lt; endl );
   DO( cout &lt;&lt; (cpa==cpb) &lt;&lt; endl );
   DO( cout &lt;&lt; (a==cpa) &lt;&lt; endl );

   DO( cout &lt;&lt; (cpa!=a) &lt;&lt; endl );
   DO( cout &lt;&lt; (a!=cpa) &lt;&lt; endl );
   DO( cout &lt;&lt; (cpa!=cpb) &lt;&lt; endl );

   DO( cout &lt;&lt; (cpa&lt;a) &lt;&lt; endl );
   DO( cout &lt;&lt; (a&lt;cpa) &lt;&lt; endl );
   DO( cout &lt;&lt; (cpa&lt;cpb) &lt;&lt; endl );

   DO( cout &lt;&lt; (cpa&lt;=a) &lt;&lt; endl );
   DO( cout &lt;&lt; (a&lt;=cpa) &lt;&lt; endl );
   DO( cout &lt;&lt; (cpa&lt;=cpb) &lt;&lt; endl );

   DO( cout &lt;&lt; (cpa&gt;a) &lt;&lt; endl );
   DO( cout &lt;&lt; (a&gt;cpa) &lt;&lt; endl );
   DO( cout &lt;&lt; (cpa&gt;cpb) &lt;&lt; endl );

   DO( cout &lt;&lt; (cpa&gt;=a) &lt;&lt; endl );
   DO( cout &lt;&lt; (a&gt;=cpa) &lt;&lt; endl );
   DO( cout &lt;&lt; (cpa&gt;=cpb) &lt;&lt; endl );

   cout &lt;&lt; endl;
   DO( for(i=0; i&lt;10; i++) cout &lt;&lt; *(cpa+i) );
   cout &lt;&lt; endl;
   DO( for(i=0; i&lt;10; i++) cout &lt;&lt; *(i+cpa) );
   cout &lt;&lt; endl;
   DO( for(i=10; i&gt;0; i--) cout &lt;&lt; *(cpb-i) );
   cout &lt;&lt; endl;

   DO( cout &lt;&lt; (a-cpa) &lt;&lt; endl );
   DO( cout &lt;&lt; (cpa-a) &lt;&lt; endl );
   DO( cout &lt;&lt; (cpb-cpa) &lt;&lt; endl );
   DO( cout &lt;&lt; (cpa-b) &lt;&lt; endl );
   DO( cout &lt;&lt; (b-cpa) &lt;&lt; endl );

}

void test( void (*f)())
// run a test function, and display the exception information
{
   cout &lt;&lt; endl;
   try {
      f();
   }
   catch( xCheckedPtr x ) {
      cout &lt;&lt; "xCheckedPtr exception: "&lt;&lt; x.why() &lt;&lt; endl;
   }
}

int main(void)
{
   test(f1);
   test(f2);
   test(f3);'
   test(f4);
   test(f5);
   test(f6);
   test(f7);
   test(f8);
   test(f9);
   return 0;
}
// End of File</pre>

</BODY>
</HTML>
