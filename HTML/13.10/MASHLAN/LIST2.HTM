<HTML><HEAD>
<TITLE>October 1995/Checked Pointers for C++/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2 <I>Class</I> HeapPtr</A></h4>
<pre>// heapptr.h listing 2
// copyright 1995 Robert Mashlan

#ifndef _HEAPPTR_H
#define _HEAPPTR_H

#include &lt;stddef.h&gt;

template&lt;class T&gt;
class HeapPtr {
   public:
     // constructor for arrays
     HeapPtr( size_t nelems )
        : pref(Ref::newRef(new T[nelems],1))
        {}
     // constructor for non-arrays
     HeapPtr( T* p = 0 )
        : pref(Ref::newRef(p))
        {}
     // copy constructor
     HeapPtr( const HeapPtr&lt;T&gt;&amp; orig )
        : pref(orig.pref-&gt;copyRef())
        {}
     ~HeapPtr()
        { pref-&gt;delRef(); }

     T* getp() const
        { return pref-&gt;getp(); }
     // operators
     operator T*() const
        { return getp(); }
     HeapPtr&lt;T&gt;&amp; operator=( const HeapPtr&lt;T&gt;&amp; orig )
        {
           pref-&gt;delRef();
           pref=orig.pref-&gt;copyRef();
           return *this;
        }
     HeapPtr&lt;T&gt;&amp; operator=( size_t nelems )
        {
          pref-&gt;delRef();
          pref = Ref::newRef(new T[nelems],1);
          return *this;
        }
     HeapPtr&lt;T&gt;&amp; operator=( T* p )
        {
          pref-&gt;delRef();
          pref = Ref::newRef(p);
          return *this;
        }
     HeapPtr&lt;T&gt;&amp; operator()( size_t nelems )
        { return operator=(nelems); }
     HeapPtr&lt;T&gt;&amp; operator()( T *p )
        { return operator=(p); }
     HeapPtr&lt;T&gt;&amp; operator()( const HeapPtr&lt;T&gt;&amp; hp )
        { return operator=(hp); }
     HeapPtr&lt;T&gt;&amp; empty()
        { return operator=((T*)0); }
   protected:
     class Ref {
        public:
           static Ref *newRef( T *p, bool isarray=false )
              { return new Ref(p,isarray); }
           void delRef() { ref--; if(ref==0) delete this; }
           Ref *copyRef() { ref++; return this; }
           T* getp() const { return p; }
        protected:
           Ref( T* p, bool isarray )
              : ref(1), p(p), isarray(isarray)
              {}
           ~Ref() { isarray ? delete []p: delete p; }
           T *p;
           long ref;
           bool isarray;
        };
        Ref *pref;
};

#endif
/* End of File */
</pre>
</BODY>
</HTML>
