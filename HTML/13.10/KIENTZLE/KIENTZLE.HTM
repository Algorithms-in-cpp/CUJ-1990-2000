

<HTML>
<HEAD>

<TITLE>October 1995/Scaling Bitmaps with Bresenham</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tococt.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">Scaling Bitmaps with Bresenham<A name="014C_00D0"><A name="014C_00D0"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="014C_0000"><A name="014C_0000">Tim Kientzle</font></h3><hr><blockquote><P>
<P><i><A name="014C_0000"><A name="014C_0000">Tim Kientzle works as a technical editor with Dr. Dobb's Journal. He has a Ph.D. in mathematics from the University of California at Berkeley. He is the author of The Working Programmer's Guide to Serial Protocols, and the forthcoming Internet File Formats (both published by Coriolis Group). He can be contacted at kientzle@netcom.com.</i></P><P>
<h4><FONT COLOR="#000080"><A name="014C_00D1">Introduction<A name="014C_00D1"></FONT></h4></P>
Bresenham's classic line-drawing algorithm, also known as the "digital differential analyzer," is listed in most graphics textbooks and references, often with no explanation of why it works. After I puzzled it out for myself, I was able to adapt the basic ideas to a variety of other tasks. In this article I start by explaining Bresenham's line algorithm, then show how to adapt its ideas to create a fast algorithm for scaling bitmapped images.<P>
<h4><FONT COLOR="#000080"><A name="014C_00D2">Drawing lines<A name="014C_00D2"></FONT></h4></P>
Drawing a line on a computer screen requires selecting a set of pixels. For example, drawing the line in <A href="fig1.htm">Figure 1</a>
requires selecting the pixels shown in gray. Bresenham's algorithm walks along the line picking out exact points, then rounds each one to choose a pixel.<P>
According to this algorithm, the fractions are the most important feature of <A href="fig1.htm">Figure 1</a>.
 Bresenham's algorithm uses simple arithmetic on fractions to track the exact point on the line. In the example, every time you move over one pixel, you move up by 1/3 of a pixel. <A href="list1.htm">Listing 1</a>
shows one way to accomplish this.<P>
In <A href="list1.htm">Listing 1</a>,
 the exact y-coordinate of a point on the line is <I>y + numerator/xDelta</I>. Whenever the fraction is bigger than 1 <I>(numerator &gt; xDelta)</I>, the algorithm reduces the fraction and increments <I>y</I>. By storing the fraction explicitly as two numbers, this algorithm avoids any arithmetic more complex than integer addition and subtraction. Of course, this simple outline is only the start of a good library routine. In particular, you might want to consider why it's a good idea to initialize the numerator to <I>xDelta/2</I> rather than zero. (Hint: <A href="fig1.htm">Figure 1</a>
is wrong in an interesting way.)<P>
The same idea works for a variety of other purposes. When drawing a line such as shown in <A href="fig1.htm">Figure 1</a>,
 you need to move up by some fractional amount every time you move over by one. When shrinking a bitmap, you need to map each whole pixel in the original image to some fraction of a pixel in the result.<P>
To simplify things a bit, I discuss only the scaling of a single row of pixels. To scale a two-dimensional bitmap, apply one of these algorithms twice, once to scale the bitmap horizontally and once to scale it vertically.<P>
<h4><FONT COLOR="#000080"><A name="014C_00D3">Non-Smooth Scaling<A name="014C_00D3"></FONT></h4></P>
When drawing lines, you can arrange things so that the fraction <I>numerator/xDelta</I> never increases by more than one. In <A href="fig1.htm">Figure 1</a>,
 I increased <I>x</I> by one each time, and <I>y</I> by a fraction. If the slope were greater than 45 degrees, I would instead have increased <I>y</I> by one with each loop and increased <I>x</I> by some fraction.<P>
Bitmaps work a little differently. Keep in mind that the goal is to fill each pixel in the destination. So, whether you're scaling to make the bitmap larger or smaller, you still need to increment over the destination pixels. If you're scaling to make a smaller bitmap, you'll end up stepping over the source pixels by a fraction larger than 1.<P>
<A href="list2.htm">Listing 2</a>
shows one way to do the stepping. As in the simple Bresenham line drawer, this routine bumps the fraction (in this case <I>numerator/destWidth)</I> by <I>srcWidth/destWidth</I>. The biggest difference between this and the previous routine is that this one acknowledges the possibility that the fraction may increase by 2, 3, or more in the process. The inner <I>while</I> loop simply subtracts 1 from the fraction until the fraction is less than 1.<P>
I leave the optimization to you. A lot will depend on your particular processor and compiler, the size of your images, and many other factors.<P>
This approach is very fast, but you're probably familiar with its drawbacks: enlarging results in an irregular, blocky appearance; reducing generates unpleasant artifacts.<P>
<h4><FONT COLOR="#000080"><A name="014C_00D4">Smooth Bresenham Scaling<A name="014C_00D4"></FONT></h4></P>
One way to avoid such problems is to perform "smooth" scaling, which entails averaging pixels to produce the result. This technique is especially helpful when reducing images, since it means you're actually preserving more of the original information.<P>
You might want to spend a while looking at <A href="list3.htm">Listing 3</a>
carefully. It computes the correct weighted average of the source pixels to create each destination pixel. For example, this routine will scale the four pixels 12, 24, 36, and 48 to the three pixels 3/4 * 12 + 1/4 * 24, 1/2 * 24 + 1/2 * 36, and 1/4 * 36 + 3/4 * 48. The most complex part of this routine involves splitting one source pixel across more than one destination pixel.<P>
Using this approach does require you to do arithmetic on pixels, however. In particular, you can't use it directly with palette images. You'll have to expand the image to a direct color format, scale, and then dither or quantize to produce the final image.<P>

<h4><a href="../../../source/1995/oct95/kientzle.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
