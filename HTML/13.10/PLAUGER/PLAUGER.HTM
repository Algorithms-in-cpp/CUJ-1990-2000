

<HTML>
<HEAD>

<TITLE>October 1995/Standard C/C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tococt.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Standard C/C++<A name="0171_00D8"><A name="0171_00D8"></font></h2><P>
<h3 align="center"><A name="0171_0000"><A name="0171_0000">The Header &lt;complex&gt;</h3><P>
<h3 align="center"><font color="#800000">P.J. Plauger</font></h3><hr><blockquote><P>
<P><i><A name="0171_0000"><A name="0171_0000">P.J. Plauger is senior editor of C/C++ Users Journal. He is Convener of the ISO C standards committee, WG14, and active on the C++ committee, WG21. His latest books are The Draft Standard C++ Library, and Programming on Purpose (three volumes), all published by Prentice-Hall. You can reach him at pjp@plauger.com.</i></P><P>
<h4><FONT COLOR="#000080"><A name="0171_00D9">Introduction<A name="0171_00D9"></FONT></h4></P>
Encapsulating complex arithmetic is one of the earliest applications for C++. One of the first libraries supplied with a C++ translator supported iostream-style input and output, complex arithmetic, and little else. Since those early days, it has become traditional to provide at least minimal support for making complex look more like a built-in type in C++.<P>
Widespread current practice is to supply a header, such as <I>complex.h</I>, that defines at least a complex class based on type <I>double.</I> Addition, subtraction, and negation make easy inline functions. Multiplication and division are more involved, but still easy enough to supply. Other math functions are considerably harder. Support for them varies considerably.<P>
Indeed, it is hard to find a better excuse for hiding implementation details of a class, or for overloading arithmetic operators, than providing complex arithmetic. A number of operators have well established meanings for complex values, dating back to the earliest days of Fortran. After integer and floating-point values, complex values probably have the richest culture in computer programming. Many scientists and engineers still bemoan the loss of complex data types in later languages such as Pascal and C. In a very real (and positive) sense, C++ allows C programs to look more like Fortran.<P>
The header <I>&lt;complex&gt;</I> is rather more ambitious than the typical header <I>&lt;complex.h&gt;</I> of existing practice. It defines the template <I>complex</I>, which is accompanied by three specializations, one for each of the three floating-point types of Standard C: <I>float</I>, <I>double</I>, and <I>long double.</I> These specializations limit the permissible interconversions among the standard complex types, to discourage easy conversions that quietly lose precision.<P>
The member objects are hidden inside each of these classes, as usual. In principle, the actual representation is equally hidden. But the functions that access stored values deliver only the <I>Cartesian</I> components of a complex value. Cartesian form represents a complex value as the pair <I>(x, y)</I> representing the sum <I>x + i*y</I>. Here, <I>i</I> is the notorious square root of -1, the unit vector along the imaginary axis in the complex plane. Thus, the <I>real</I> component is <I>x</I> and the <I>imaginary</I> component is <I>y</I>.<P>
Another way to represent complex values is with <I>polar</I> components. Polar form represents a complex value as the pair (<FONT FACE="Symbol" SIZE=2>r</FONT>, <FONT FACE="Symbol" SIZE=2>q</FONT>) representing the product <FONT FACE="Symbol" SIZE=2>r</FONT>*<I>exp(i</I>*<FONT FACE="Symbol" SIZE=2>q</FONT><I>)</I>. Thus, the <I>magnitude</I> is <FONT FACE="Symbol" SIZE=2>r</FONT> and the <I>argument</I> (or <I>phase angle</I>) is <FONT FACE="Symbol" SIZE=2>q</FONT>. Put simply, Cartesian form is far more convenient for addition and subtraction, while polar form is sometimes more convenient for multiplication and division. On balance, however, Cartesian form is generally more convenient.<P>
Beyond this brief introduction, I won't even try to explain all the mysteries of complex mathematics. Nor will I make a case for why you might want to use it. If you're familiar with complex math, you know it is often useful in its own right. It also models well many processes of interest to scientists and engineers, such as time-varying voltages and motion in two dimensions. But if you don't already know how you might use complex arithmetic, here is not the place for me to try to teach it.<P>
<h4><FONT COLOR="#000080"><A name="0171_00DA">Using <B><I>&lt;complex&gt;</I><A name="0171_00DA"></B></FONT></h4></P>
You include the header <I>&lt;complex&gt;</I> to make use of the template <I>complex.</I> (<A href="list1.htm">Listing 1</a>
shows one way to write this header.) Most likely, you will use one of the three specializations <I>complex&lt;float&gt;</I>,<I> complex&lt;double&gt;</I><I>,</I> or <I>complex&lt;long double&gt;.</I> Objects of any of these classes let you represent complex values to a given floating-point precision. Numerous template functions, usable with all three classes, perform many of the mathematical operations defined for complex values.<P>
The header defines the macro <I>__STD_COMPLEX</I> as a reassurance. Presumably, you can write code such as:<P>
<pre>#if !defined(__STD_COMPLEX)
 #error WRONG COMPLEX LBBRARY
#endif</pre>
The program should fail to translate if the implementation supplies a nonconforming version of the header <I>&lt;complex&gt;.</I> Unless you are<I> very</I> serious about writing highly portable code, you can probably omit such tests.<P>
You can construct an object of a floating-point class in several ways. Using scalar arguments, you can write:<P>
<pre>complex&lt;float&gt; f0;                 // becomes (0.0F, 0.0F)
complex&lt;float&gt; f1(3.0F);           // becomes (3.0F, 0.0F)
complex&lt;float&gt; f2(3.0, -2)         // becomes (3.0F, -2.0F)
complex&lt;double&gt; d0;                // becomes (0.0, 0.0)
complex&lt;double&gt; d1(3.0F);          // becomes (3.0, 0.0)
complex&lt;double&gt; d2(3.0, -2);       // becomes (3.0, -2.0)
complex&lt;double&gt; d3(f1);            // becomes (3.0, 0.0)
complex&lt;long double&gt; ld0;          // becomes (0.0L, 0.0L)
complex&lt;long double&gt; ld1(3.0F);    // becomes (3.0L, 0.0L)
complex&lt;long double&gt; ld2(3.0, -2); // becomes (3.0L, -2.0L)</pre>
In other words, you can specify in a complex class constructor: no components, just the real component, or both real and imaginary components of a complex value. Any components you omit become zero.<P>
You can also construct a complex class object from a complex class object of any of the three precisions:<P>
<pre>// becomes (3.0F, 0.0F)
complex&lt;float&gt; f3(d1);
// becomes (3.0F, -2.0F)
complex&lt;float&gt; f4(ld2);
// becomes (3.0, 0.0)
complex&lt;double&gt; d3(f1);
// becomes (3.0, -2.0)
complex&lt;double&gt; d4(ld2);
// becomes (3.0L, 0.0L)
complex&lt;long double&gt; ld3(f1);
// becomes (3.0L, -2.0L)
complex&lt;long double&gt; ld4(d2);</pre>
(I don't show the same-precision case, since that is the usual default copy constructor.)<P>
The various single-argument constructors also supply a number of useful implicit conversions, in a variety of contexts. Thus, for example, you can often write a <I>double</I> value (real component) or a <I>complex&lt;float&gt;</I> value where a <I>complex&lt;double&gt;</I> value is required.<P>
Note, however, the use of the new keyword <I>explicit</I> in several of the constructors shown in <A href="list1.htm">Listing 1</a>.
 This keyword explicitly prohibits the translator from using the constructor to make an implicit type conversion. Any constructors that quietly discard precision are so labeled. To convert to a complex class of lower precision, you have to write an explicit type cast. Naturally, such conversions can result in floating-point overflow, underflow, or loss of precision, in either or both components of the converted value. Use them cautiously.<P>
All other functions are common to all three complex classes. For brevity in describing them, I introduce the following common notation:<P>
<UL><li><I>TC</I> is the complex class, such as <I>complex&lt;float&gt;</I>.</li>
<li><I>T</I> is the corresponding floating-point type, such as <I>float</I>.</li>
<li><I>x0</I> and <I>x1</I> are objects of class <I>TC</I>.</li>
<li><I>f</I> is a value of type <I>T</I>.</li></UL>
I explain any other notation as needed.<P>
The following arithmetic operators are overloaded for each of the complex classes. The operators have their usual arithmetic meaning, as extended into the complex plane:<P>
<pre>x0 += x1   x0 + x1    x0 + f    f + x0
x0 -= x1   x0 - x1    x0 - f    f - x0
x0 *= x1   x0 * x1    x0 * f    f* x0
x0 /= x1   x0 / x1    x0 / f    f / x0
+x0        x0 == x1   x0 == f   f == x0
-x0        x0 != x1   x0 != f   f != x0</pre>
A number of functions are also overloaded for each of the complex classes. One group returns a value of type <I>T</I>:<P>
<UL><li><I>abs(x0)</I>, returns the magnitude of <I>x0</I> (the p polar component)</li>
<li><I>arg(x0)</I>, returns the argument of <I>x0</I> (the 0 polar component)</li>
<li><I>imag(x0)</I>, returns the imaginary component of <I>x0</I> (the <I>y</I> Cartesian component)</li>
<li><I>norm(x0)</I>, returns the squared magnitude of <I>x0</I> (<I>x</I><I><SUP>2</SUP></I> + <I>y</I><I><SUP>2</SUP></I>)</li>
<li><I>real(x0)</I>, returns the real component of <I>x0</I> (the <I>x</I> Cartesian component)</li></UL>
Note that a class <I>TC</I> also supplies member functions for accessing the stored components of the complex value. (Their presence has been on again, off again.) I prefer to use the above functions instead.<P>
Another group of functions returns a value of type <I>TC</I>:<P>
<UL><li><I>conjg(x0)</I>, returns the conjugate of <I>x0</I> (the value <I>x-i*y</I>) in Cartesian components)</li>
<li><I>cos(x0)</I>, returns the cosine of <I>x0</I></li>
<li><I>cosh(x0)</I>, returns the hyperbolic cosine of <I>x0</I></li>
<li><I>exp(x0)</I>, returns the exponential of <I>x0</I></li>
<li><I>log(x0)</I>, returns the natural logarithm of <I>x0</I></li>
<li><I>polar(rho, theta)</I>, returns the complex value corresponding to the magnitude <I>rho</I> and argument <I>theta</I>, both of type <I>F</I></li>
<li><I>pow(x0, x1)</I>, returns <I>x0</I> raised to the power <I>x1</I></li>
<li><I>pow(f, x1)</I>, returns <I>f</I> raised to the power <I>x1</I></li>
<li><I>pow(x0, f)</I>, returns <I>x0</I> raised to the power <I>f</I></li>
<li><I>pow(x0, i)</I>, returns <I>x0</I> raised to the power <I>i</I>, where <I>i</I> has type <I>int</I></li>
<li><I>sin(x0)</I>, returns the sine of <I>x0</I></li>
<li><I>sinh(x0)</I>, returns the hyperbolic sine of <I>x0</I></li>
<li><I>sqrt(x0)</I>, returns the square root of <I>x0</I></li></UL>
Finally, you can insert and extract objects of class <I>C</I>. For example:<P>
<pre>cin &gt;&gt; x0</pre>
extracts a pair of Cartesian component values from the standard input stream, constructs from them an object of class <I>TC</I>, and assigns it to <I>x0</I>. The components are enclosed in parentheses and separated by a comma, as in <I>(2, -4.5)</I>.<P>
And last of all, you can insert an object of class <I>TC</I> into, say, the standard output stream, by writing:<P>
<pre>cout &lt;&lt; x0</pre>
As you might expect, the components have a format acceptable to the extractor, above, such as <I>(2, -4.5)</I>. Format flags and precision have their usual effect on each of the floating-point components. (See "Standard C: The Header <I>&lt;ios&gt;</I>,"<I>CUJ,</I> May 1994.) With a recent change, however, the field width applies to the entire complex number. The behavior is as if the value is first inserted into a string, then the string is inserted with the specified field width.<P>
<h4><FONT COLOR="#000080"><A name="0171_00DB">Loose Ends<A name="0171_00DB"></FONT></h4></P>
The draft C++ Standard is still unclear on a few points. It does not say, for example, what other types you can instantiate template <I> complex</I> with (if any), nor what properties they must have. Nor does it give a hint about how to compute the complex hyperbolic cosine of such a type. Until such clarification is forthcoming, you should assume that the template merely provides a convenient naming convention for the three specializations.<P>
You will notice quite a few member template functions in <A href="list1.htm">Listing 1</a>,
 as well. I don't know of any commercial C++ compilers that support this recent addition to the language. Naturally, a pragmatic implementation of the header <I>&lt;complex&gt;</I> today has to sidestep this problem. Next month, I'll discuss ways to implement this header and show some possible approaches.<P>
<I>This article is excerpted in part from P.J. Plauger, The Draft Standard C++ Library, (Englewood Cliffs, N.J.: Prentice-Hall, 1995).</I><P>

<h4><a href="../../../source/1995/oct95/plauger.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
