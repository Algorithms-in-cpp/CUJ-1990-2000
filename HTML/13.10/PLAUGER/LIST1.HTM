<HTML><HEAD>
<TITLE>October 1995/Standard C/C++/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1 <I>The header</I> &lt;complex&gt;</A></h4>
<pre>#define __STD_COMPLEX
       // TEMPLATE CLASS complex
template&lt;class T&gt;
    class complex {
public:
    complex(T re = 0, T im = 0);
    template&lt;class U&gt;
       complex(const complex&lt;U&gt;&amp; x);
    T real() const;
    T imag() const;
    template&lt;class U&gt;
       complex&lt;T&gt;&amp; operator=(const complex&lt;U&gt;&amp; rhs);
    template&lt;class U&gt;
       complex&lt;T&gt;&amp; operator+=(const complex&lt;U&gt;&amp; rhs);
    template&lt;class U&gt;
       complex&lt;T&gt;&amp; operator<I>-</I>=(const complex&lt;U&gt;&amp; rhs);
    template&lt;class U&gt;
       complex&lt;T&gt;&amp; operator*=(const complex&lt;U&gt;&amp; rhs);
    template&lt;class U&gt;
       complex&lt;T&gt;&amp; operator/=(const complex&lt;U&gt;&amp; rhs);
    };
       // CLASS complex&lt;float&gt;
class complex&lt;float&gt; {
public:
    complex(float re = 0, float im = 0);
    explicit complex(const complex&lt;double&gt;&amp; rhs);
    explicit complex(const complex&lt;long double&gt;&amp; rhs);
    template&lt;class U&gt;
       complex&lt;float&gt;&amp; operator=(const complex&lt;U&gt;&amp; rhs);
    template&lt;class U&gt;
       complex&lt;float&gt;&amp; operator+=(const complex&lt;U&gt;&amp; rhs);
    template&lt;class U&gt;
       complex&lt;float&gt;&amp; operator<I>-</I>=(const complex&lt;U&gt;&amp; rhs);
    template&lt;class U&gt;
       complex&lt;float&gt;&amp; operator*=(const complex&lt;U&gt;&amp; rhs);
    template&lt;class U&gt;
       complex&lt;float&gt;&amp; operator/=(const complex&lt;U&gt;&amp; rhs);
    };
       // CLASS complex&lt;double&gt;
class complex&lt;double&gt; {
public:
    complex(double re = 0, double im = 0);
    complex(const complex&lt;float&gt;&amp; rhs);
    explicit complex(const complex&lt;long double&gt;&amp; rhs);
    template&lt;class U&gt;
       complex&lt;double&gt;&amp; operator=(const complex&lt;U&gt;&amp; rhs);
    template&lt;class U&gt;
       complex&lt;double&gt;&amp; operator+=(const complex&lt;U&gt;&amp; rhs);
    template&lt;class U&gt;
       complex&lt;double&gt;&amp; operator<I>-</I>=(const complex&lt;U&gt;&amp; rhs);
    template&lt;class U&gt;
       complex&lt;double&gt;&amp; operator*=(const complex&lt;U&gt;&amp; rhs);
    template&lt;class U&gt;
       complex&lt;double&gt;&amp; operator/=(const complex&lt;U&gt;&amp; rhs);
    };
       // CLASS complex&lt;long double&gt;
class complex&lt;long double&gt; {
public:
    complex(long double re = 0, long double im = 0);
    complex(const complex&lt;float&gt;&amp; rhs);
    complex(const complex&lt;double&gt;&amp; rhs);
    template&lt;class U&gt;
       complex&lt;long double&gt;&amp; operator=(
            const complex&lt;U&gt;&amp; rhs);
    template&lt;class U&gt;
       complex&lt;long double&gt;&amp; operator+=(
            const complex&lt;U&gt;&amp; rhs);
    template&lt;class U&gt;
       complex&lt;long double&gt;&amp; operator<I>-</I>=(
            const complex&lt;U&gt;&amp; rhs);
    template&lt;class U&gt;
       complex&lt;long double&gt;&amp; operator*=(
            const complex&lt;U&gt;&amp; rhs);
    template&lt;class U&gt;
       complex&lt;long double&gt;&amp; operator/=(
            const complex&lt;U&gt;&amp; rhs);
    };
       // TEMPLATE FUNCTIONS FOR complex
template&lt;class T&gt;
    complex&lt;T&gt; operator+(const complex&lt;T&gt;&amp; lhs,
       const complex&lt;T&gt;&amp; rhs);
template&lt;class T&gt;
    complex&lt;T&gt; operator+(const complex&lt;T&gt;&amp; lhs, T rhs);
template&lt;class T&gt;
    complex&lt;T&gt; operator+(T lhs, const complex&lt;T&gt;&amp; rhs);
template&lt;class T&gt;
    complex&lt;T&gt; operator<I>-</I>(const complex&lt;T&gt;&amp; lhs,
       const complex&lt;T&gt;&amp; rhs);
template&lt;class T&gt;
    complex&lt;T&gt; operator<I>-</I>(const complex&lt;T&gt;&amp; lhs, T rhs);
template&lt;class T&gt;
    complex&lt;T&gt; operator<I>-</I>(T lhs, const complex&lt;T&gt;&amp; rhs);
template&lt;class T&gt;
    complex&lt;T&gt; operator*(const complex&lt;T&gt;&amp; lhs,
       const complex&lt;T&gt;&amp; rhs);
template&lt;class T&gt;
    complex&lt;T&gt; operator*(const complex&lt;T&gt;&amp; lhs, T rhs);
template&lt;class T&gt;
    complex&lt;T&gt; operator*(T lhs, const complex&lt;T&gt;&amp; rhs);
template&lt;class T&gt;
    complex&lt;T&gt; operator/(const complex&lt;T&gt;&amp; lhs,
       const complex&lt;T&gt;&amp; rhs);
template&lt;class T&gt;
    complex&lt;T&gt; operator/(const complex&lt;T&gt;&amp; lhs. T rhs);
template&lt;class T&gt;
    complex&lt;T&gt; operator/(T lhs, const complex&lt;T&gt;&amp; rhs);
template&lt;class T&gt;
    complex&lt;T&gt; operator+(const complex&lt;T&gt;&amp; lhs);
template&lt;class T&gt;
    complex&lt;T&gt; operator<I>-</I>(const complex&lt;T&gt;&amp; lhs);
template&lt;class T&gt;
    bool operator==(const complex&lt;T&gt;&amp; lhs,
       const complex&lt;T&gt;&amp; rhs);
template&lt;class T&gt;
    bool operator==(const complex&lt;T&gt;&amp; lhs, T rhs);
template&lt;class T&gt;
    bool operator==(T lhs, const complex&lt;T&gt;&amp; rhs);
template&lt;class T&gt;
    bool operator!=(const complex&lt;T&gt;&amp; lhs,
       const complex&lt;T&gt;&amp; rhs);
template&lt;class T&gt;
    bool operator!=(const complex&lt;T&gt;&amp; lhs. T rhs);
template&lt;class T&gt;
    bool operator!=(T lhs, const complex&lt;T&gt;&amp; rhs);
template&lt;class T&gt;
    istream&amp; operator&gt;&gt;(istream&amp; is, complex&lt;T&gt;&amp; x);
template&lt;class T&gt;
    ostream&amp; operator&lt;&lt;(ostream&amp; os, const complex&lt;T&gt;&amp; x);
template&lt;class T&gt;
    T real(const complex&lt;T&gt;&amp; x);
template&lt;class T&gt;
    T imag(const complex&lt;T&gt;&amp; x);
template&lt;class T&gt;
    T abs(const complex&lt;T&gt;&amp; x);
template&lt;class T&gt;
    T arg(const complex&lt;T&gt;&amp; x);
template&lt;class T&gt;
    T norm(const complex&lt;T&gt;&amp; x);
template&lt;class T&gt;
    complex&lt;T&gt; conjg(const complex&lt;T&gt;&amp; x);
template&lt;class T&gt;
    complex&lt;T&gt; polar(T rho, T theta);
template&lt;class T&gt;
    complex&lt;T&gt; cos(const complex&lt;T&gt;&amp; x);
template&lt;class T&gt;
    complex&lt;T&gt; cosh(const complex&lt;T&gt;&amp; x);
template&lt;class T&gt;
    complex&lt;T&gt; exp(const complex&lt;T&gt;&amp; x);
template&lt;class T&gt;
    complex&lt;T&gt; log(const complex&lt;T&gt;&amp; x);
template&lt;class T&gt;
    complex&lt;T&gt; log10(const complex&lt;T&gt;&amp; x);
template&lt;class T&gt;
    complex&lt;T&gt; pow(const complex&lt;T&gt;&amp; x, int y);
template&lt;class T&gt;
    complex&lt;T&gt; pow(const complex&lt;T&gt;&amp; x, T y);
template&lt;class T&gt;
    complex&lt;T&gt; pow(const complex&lt;T&gt;&amp; x,
       const complex&lt;T&gt;&amp; y);
template&lt;class T&gt;
    complex&lt;T&gt; pow(T x, const complex&lt;T&gt;&amp; y);
template&lt;class T&gt;
    complex&lt;T&gt; sin(const complex&lt;T&gt;&amp; x);
template&lt;class T&gt;
    complex&lt;T&gt; sinh(const complex&lt;T&gt;&amp; x);
template&lt;class T&gt;
    complex&lt;T&gt; sqrt(const complex&lt;T&gt;&amp; x);</pre>

</BODY>
</HTML>
