

<HTML>
<HEAD>

<TITLE>October 1995/Stepping Up To C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tococt.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Stepping Up To C++<A name="0173_00DA"><A name="0173_00DA"></font></h2><P>
<h3 align="center"><A name="0173_0000"><A name="0173_0000">Style and Syntax</h3><P>
<h3 align="center"><font color="#800000">Dan Saks</font></h3><hr><blockquote><P>
<P><i><A name="0173_0000"><A name="0173_0000">Dan Saks is the president of Saks &amp; Associates, which offers consulting and training in C++ and C. He is secretary of the ANSI and ISO C++ committees. Dan is coauthor of C++ Programming Guidelines, and codeveloper of the Plum Hall Validation Suite for C++ (both with Thomas Plum). You can reach him at 393 Leander Dr., Springfield OH, 45504-4906, by phone at (513)324-3601, or electronically at dsaks@wittenberg.edu.</i></P><P>
Programming style is a very broad topic. You can approach it from many different angles. For many of us, our initial forays into programming style tended to focus on its more superficial aspects, such as indenting and spacing between tokens. But as we matured, most of us came to realize that the surface appearance of a piece of code is not necessarily an accurate indicator of its overall quality. The component-level architecture of a piece of code, particularly its use of types and functional abstractions, probably has a much greater impact on its overall quality. The best works on C++ programming style, such as <a href="#1">[1]</a> and <a href="#2">[2]</a>, dwell primarily on these architectural issues.<P>
Nonetheless, even as we acquire a more comprehensive view of style, those of us who like to think we have a sense of aesthetics still have trouble ignoring code layout (indenting and spacing) as a first-order measure of code quality. Obviously, if the code is indented the way I think it should be, then it must be pretty good, right? And if it's indented in some other way then it's probably guilty of a host of other less obvious programming sins. We rarely say such things aloud, but we can't help but think them, if only occasionally.<P>
How is it that we latch on to our preferred layout style? For, some programmers, it's simply a matter of imprinting. Just as a baby duck fixes its attention on the first thing it sees when it emerges from its shell, some programmers become attached to the first indenting style they see. Others with more inquiring minds experiment with different indenting styles until they finally hit upon the "right" way to lay out code. However we acquire them, most of us settle into habits that are hard to break.<P>
Why should you want to break your habits? If you work alone all the time, then you have no need. But if you work with others, you'll probably find it in your own interest to subordinate some of your aesthetic senses for the greater good of the team. In a team project, choosing <I>some</I> consistent layout style is much more important than choosing any one particular layout style. The team members should try to agree on a sufficiently common set of layout rules so that each member can comfortably read and maintain other team members' code without feeling compelled to reformat it.<P>
So, if layout style is not <I>all</I> that important, why bother writing about it? Well, let's face it, it's fun. After writing about standards deliberations for the last six or seven months, I'm in the mood for lighter fare. Also, recent conversations with some of my students and colleagues suggest to me that I might actually have something insightful to say about the subject.<P>
My concern is that, even if the programmers on a given project think they agree on a particular set of layout rules, deep down, they probably don't. The programmers may follow the letter of the law, but they often fail to grasp its spirit, because no one ever states what that spirit is.<P>
Every specification I've seen for a set of indenting rules (including the ones in my own book <a href="#3">[3]</a>) simply presents the rules by example. If the examples spell out enough common cases, the programmers on a team should be able to apply these examples to write code in a reasonably common format. However, I suspect many such programmers still view each layout example as a distinct rule, rather than as an example of a unified view of language structure.<P>
What's missing from indenting rules by example is a description of how the rules derive from the syntactic structure of the programming language. What I want to show is that any consistent set of indenting rules can be expressed as a short set of underlying rules rooted in the language syntax. Moreover, I believe that each different set of indenting conventions stems from a fundamentally different view of that syntax.<P>
In discussing the different indenting styles, I'll try to be as even-handed as I can, but some of my biases will no doubt show through. Obviously, I have a preferred indenting style, and I think I have a rational basis for my preference. I find other styles acceptable, but the arguments in their favor are less compelling to me. Many of my preferences stem from my strong preference for simple, straightforward rules over more complicated rules. I dislike special cases, and I try to avoid them.<P>
<h4><FONT COLOR="#000080"><A name="0173_00DB">The Structure of Flow Control Statements<A name="0173_00DB"></FONT></h4></P>
With respect to flow control statements, mainstream programming languages employ either of two basic syntactic forms. Languages such as C and C++ use the <I>compound statement</I> form, in which each flow control statement controls what appears in the grammar as only a single statement. However, you can replace any single statement by a sequence of bracketed statements called a <I>compound-statement</I>.<P>
For example, the grammar rule for an <I>if-else</I> statement in both C and C++ is<P>
<pre><I>if-else-statement:</I>
      if (<I>expression</I>) <I>statement</I> else <I>statement</I></pre>
Here, <I>statement</I> is a grammatical construct representing any of a variety of statements, including <I>expression-statements</I> (assignments and function calls), <I>iteration-statements</I> (<I>for</I> and <I>while</I> statements) and <I>selection-statements </I>(<I>if</I> and <I>switch</I> statements). You can place more than one simple statement under the control of the <I>if</I>-part or the <I>else</I>-part by simply wrapping those statements inside a pair of curly braces to make a single compound statement. The C++ grammar defines a compound-statement as:<P>
<pre><I>compound-statement:</I>
   {<I>statement-seq</I><I>opt</I>}
<I>statement-seq:</I>
   <I>statement</I>
   <I>statement-seq statement</I></pre>
The C standard uses slightly different names for the grammar symbols, but the rules are effectively the same.<P>
The compound statement form originated with Algol 60. Algol 60 uses the keywords <I>begin</I> and <I>end</I> instead of C's braces. Pascal also uses <I>begin</I> and <I>end</I>; PL/I uses <I>DO</I> and <I>END</I>.<P>
Languages such as Ada, Fortran, and Modula-2 use <I>self-delimiting</I> control flow statements rather than compound statements. Using this approach, each flow control statement controls not just one statement but a sequence of statements delimited by a symbol (or symbols) belonging to the flow control statement itself.<P>
For example, an Ada <I>if-else</I> statement has the general form:<P>
<pre>if <I>expression</I> then
   <I>statement-seq</I>
else
   <I>statement-seq</I>
end if ;</pre>
Each Ada flow control statement has its own unique delimiter. For example, loop statements end with <I>end loop</I> and case statements end with <I>end case</I>. Algol 68 uses the opening delimiter spelled backwards as the closing delimiter. For example, Algol 68 <I>if</I> statements end with <I>fi</I>,<I> do</I> statements end with <I>od</I>, and case statements end with <I>esac</I>. Some of you may recognize these cutesy spellings from the UNIX Korn Shell.<P>
In contrast to the languages mentioned above, Modula-2 uses a single keyword, <I>END</I>, to terminate its <I>CASE</I>,<I> IF</I>,<I> FOR</I>,<I> WHILE</I>, and <I>WITH</I> statements. (Modula-2 keywords must be in uppercase. That's one of the reasons Modula-2 is so popular.)<P>
No matter how you spell them, in these languages each closing delimiter is part of the enclosing flow control statement. You must write the closing delimiter even if the enclosed statement sequence has only one statement.<P>
It's not my intent to debate the relative merits of languages designed using compound-statements compared with languages that use self-delimiting control statements. You can find such discussions in <a href="#4">[4]</a> as well as other books on programming language design. Nevertheless, some comparisons will be inevitable in the following discussion.<P>
<h4><FONT COLOR="#000080"><A name="0173_00DC">Indenting Flow Control Statements<A name="0173_00DC"></FONT></h4></P>
The compound statement forms seem to invite a wider variation in indenting styles than do the self-delimiting forms. People just can't seem to agree on where to place the compound-statement delimiters (curly braces or <I>begin-end</I> pairs). The self-delimiting forms don't use compound-statement delimiters, so the problem just never arises.<P>
For example, most Ada programmers seem to follow the pattern<P>
<pre>if expression then
   statement;
   statement;
   ...
else
   statement;
   statement;
   ...
end if;</pre>
for <I>if-else</I> statements, and<P>
<pre>while expression loop
   statement;
   statement;
   ...
end loop;</pre>
for <I>while-loop</I> statements. The Ada syntax also allows infinite loops of the form:<P>
<pre>loop
   statement;
   statement;
   ...
end loop;</pre>
Thus, some programmers prefer to pair <I>end loop</I> with <I>loop</I> rather than with <I>while</I>, so they layout their <I>while</I>-loops as<P>
<pre>while expression
loop
   statement;
   statement;
   ...
end loop;</pre>
If you use this style, I believe it follows that you should also place the keyword <I>then</I> on a separate line, as in<P>
<pre>if expression
then
   statement;
   statement;
   ...
else
   statement;
   statement;
   ...
end if;</pre>
<A href="list1.htm">Listing 1</a>
and <A href="list2.htm">Listing 2</a>
summarize these two alternative indenting styles for self-delimiting flow structures. Now, with this background in mind, let's look at some alternative indenting styles for C and C++.<P>
<h4><FONT COLOR="#000080"><A name="0173_00DD">The K &amp; R Style<A name="0173_00DD"></FONT></h4></P>
One popular indenting style comes from Kernighan and Ritchie (K &amp; R), and was used in their best-selling description of C<a href="#5">[5]</a>. <A href="list3.htm">Listing 3</a>
shows examples illustrating the K &amp; R style. Straker<a href="#6">[6]</a> also calls this the "Kernel" style.<P>
I believe the underlying philosophy of this style is to "get the braces out of the way" and let the indenting speak for itself. I must confess I have a little trouble with this view, because it runs contrary to the true syntactic structure of C. This style suggests that C should have been designed using self-delimiting flow structures rather than compound statements. If you really believe this, then why not go all the way and define macros to make C look like it has self-delimiting flow structures?<P>
For example, if you define<P>
<pre>#define IF if (
#define THEN ) {
#define ELSE } else {
#define ENDIF }</pre>
then you can write C code that looks like<P>
<pre>IF expression THEN
   statement;
   statement;
   ...
ELSE
   statement;
   statement;
   ...
ENDIF</pre>
I'm not suggesting that you use macros to reinvent the language. On the contrary, it's a very bad idea. It invites even more diversity in layout styles and more disputes over aesthetics. However, I think such macros are a short logical step from the K &amp; R style, and that's why I have misgivings about this style.<P>
If you really do favor this style, you should at least acknowledge that it treats the curly braces as if they were part of the enclosing flow structure, and not part of the enclosed compound statement. Thus, it follows that you should always use curly braces with every flow control statement, even if the enclosed statement sequence has only one statement in it.<P>
<h4><FONT COLOR="#000080"><A name="0173_00DE">The Whitesmiths Style<A name="0173_00DE"></FONT></h4></P>
In contrast to the K &amp; R style, the Whitesmiths style treats the curly braces as part of the compound statement (which indeed they are). This style gets it name from a company that pioneered the C compiler business. Plum <a href="#7">[7]</a> dubbed it the "indented" style to contrast it with the "exdented" style (described later). Although Plum and I <a href="#3">[3]</a> both referred to it as the indented style, I now prefer calling it the Whitesmiths style.<P>
The essense of the Whitesmiths style is to place the opening and closing braces, as well as each statement of a compound statement, on separate lines, at the same indentation level a single statement would receive in the same context. Thus, the layout for an <I>if</I> statement enclosing a single statement is:<P>
<pre>if ( expression )
   statement;</pre>
and the layout for an <I>if</I> statement enclosing a compound statement is simply:<P>
<pre>if ( expression )
   {
   statement;
   statement;
   ...
   }</pre>
<A href="list4.htm">Listing 4</a>
shows other examples of this style.<P>
I must admit that the Whitesmiths style is my favorite. It's conceptually simple and meshes well with the grammatical structure of the language. Best of all, you can describe it pretty rigorously with only a few rules:<P>
1.     Put the opening and closing brace and each statement of a compound statement on separate lines and at the same indentation. For example,<P>
<pre>{
statement;
statement;
...
}</pre>
2.     In each flow control statement, begin each consecutive <I>non</I>-statement phrase on a new line, at the same indentation level. For example, in the grammar for an <I>if-else</I> statement<P>
if ( <I>expr</I> ) <I>stmt</I> else <I>stmt</I><P>
place<P>
if ( <I>expr</I> )<P>
and<P>
else<P>
on a separate line at the same indentation level. (I use <I>expr</I> and <I>stmt</I> here as abbreviations for <I>expression</I> and <I>statement</I>.)<P>
3.     Indent the nested statement(s) with respect to the non-statement phrases of the enclosing flow control statement.<P>
That's it.<P>
In all fairness, a formal description of the K &amp; R style (with explicit braces everywhere) requires only a few changes and one additional rule (rule 0):<P>
0.     Rewrite the grammar rules for every statement containing a nested statement by replacing each nested statement with the right-hand side of the rule for a compound statement. For example, rewrite<P>
if ( <I>expr</I> ) <I>stmt</I> else <I>stmt</I><P>
as<P>
if (<I>expr</I>) { <I>stmt-seq</I> } else { <I>stmt-seq</I> }<P>
1.     Put each statement of a statement sequence on a separate line and at the same indentation level. For example,<P>
<pre>statement ;
statement ;
...</pre>
2.     In each flow control statement, begin each consecutive non-statement phrase on a new line at the same indentation level. For example, in the (augmented) grammar for an <I>if-else</I> statement<P>
if ( <I>expr</I> ) {<I>stmt-seq</I>} else {<I>stmt-seq</I>}<P>
place<P>
if ( <I>expr</I> ) {<P>
and<P>
} else {<P>
and<P>
}<P>
on a separate line at the same indentation level.<P>
3.     Indent the statement(s) in each statement sequence with respect to the non-statement phrases of the enclosing flow control statement.<P>
When you uniformly insert curly braces around every nested statement, the K &amp; R style rules are not much more complicated than the Whitesmiths style rules. However, many K &amp; R adherents (including K &amp; R) omit the braces around single nested statements. This just complicates the rules.<P>
<h4><FONT COLOR="#000080"><A name="0173_00DF">The <B><I>do-while</I><A name="0173_00DF"></B></FONT></h4></P>
One advantage of the Whitesmiths style over the K &amp; R style is that it lines up matching curly braces at the same indentation level. For many programmers, this makes visual inspection for mismatching braces much easier.<P>
On the other hand, the Whitesmiths style may confuse readers looking at <I>do-while</I> statements. If you rigorously apply the Whitesmiths style to the <I>do-while</I> statement, you get the following layout:<P>
<pre>do
   {
   statement ;
   statement ;
   ...
   }
while ( expression ) ;</pre>
Someone reading this code may mistake the <I>while</I> at the end of the statement for a separate <I>while</I> statement with an empty body. Some adherents to the Whitesmiths style simply treat the <I>do-while</I> as a special case and write<P>
<pre>do
   {
   statement ;
   statement ;
   ...
   } while ( expression ) ;</pre>
This is what Plum and I <a href="#3">[3]</a> suggested, but I don't like it. (Tom wrote that part.)<P>
This is arguably a flaw in the C language. Had C used a distinct keyword, such as <I>until</I>, the Whitesmiths style would not have this problem. Of course, you can correct that flaw with a macro:<P>
<pre>#define until(e) while (!(e))</pre>
but again, I don't recommend opening that can of worms.<P>
The peculiar problem of the <I>do-while</I> statement is actually an argument in favor of the K &amp; R style, which lays out the statement as<P>
<pre>do {
   statement ;
   statement ;
   ...
} while ( expression ) ;</pre>
The fact is, <I>do-while</I> statements are relatively rare. I haven't run into any problems applying the usual Whitesmiths style to the <I>do-while</I>, so I don't treat it specially.<P>
<h4><FONT COLOR="#000080"><A name="0173_00E0">The Allman Style<A name="0173_00E0"></FONT></h4></P>
Yet another popular style is essentially the same as the Whitesmiths style, but with the braces at the indentation level of the enclosing flow control statement, rather than at the level of the enclosed statement sequence. For instance, this style applied to an <I>if</I> statement looks like<P>
<pre>if ( expression )
{
   statement ;
   statement ;
   ....
}</pre>
Plum <a href="#7">[7]</a> called this the "exdented" style, and so did Plum and I <a href="#3">[3]</a>. Straker <a href="#6">[6]</a> calls this the Allman style. Even though I haven't the foggiest notion where that name comes from, I'll use it anyway. <A href="list5.htm">Listing 5</a>
shows some other examples indented according to the Allman style.<P>
On the surface, the Allman style has essentially the same strengths and weaknesses as the Whitesmiths style. The Allman style lines up the braces just like the Whitesmiths style, and it has the same trouble coping with the <I>do-while</I> statement.<P>
For most people, the difference between these two styles is purely a matter of aesthetics. Personally, I prefer the freedom to omit curly braces around single statements, but this gives Allman style indenting an irregular appearance. For example, adding a second statement between the <I>if</I> and <I>else</I> alters the appearance of an <I>if</I>-statement rather markedly, from<P>
<pre>if ( expression )
   statement;
else
   statement;</pre>
to<P>
<pre>if ( expression )
{
   statement;
   statement;
}
else
   statement;</pre>
I suspect that the Allman style works best if you always include the curly braces, even when they enclose only one statement. But, if that's the case, then here again we have an indenting style predicated on the belief that the syntactic structure of the C language is wrong. Sure, C has its flaws (and indeed, so does C++), but I don't think this is one of them.<P>
<h4><FONT COLOR="#000080"><A name="0173_00E1">Labeled Statements<A name="0173_00E1"></FONT></h4></P>
None of the examples I've shown so far illustrate how any of the styles, K &amp; R, Whitesmiths, or Allman, handle <I>switch</I> statements. None of these styles requires additional rules to handle the outermost level of a <I>switch</I> statement.<P>
The grammar rule for a switch statement is simply:<P>
<pre><I>switch-statement</I>:
   switch ( <I>expression</I> ) <I>statement</I></pre>
Applying the usual rules for the K &amp; R style, the layout is<P>
<pre>switch ( expression ) {
   statement;
   statement;
   ...
}</pre>
With the Whitesmiths style, the layout becomes<P>
<pre>switch ( expression )
   {
   statement;
   statement;
   ...
   }</pre>
What's missing is a rule for where to place the labels that appear inside the switch statement. All three styles employ the same rule, which is pretty simple once you understand the grammar for labeled statements:<P>
<pre><I>labeled-statement:</I>
   <I>identifier: statement</I>
   case<I> constant-expression : statement</I>
   default :<I> statement</I></pre>
The grammar shows that the <I>case</I> labels (including <I>default</I>) are just statement labels. C and C++ impose a separate constraint that these labels can only appear inside <I>switch</I> statements, but they're still just labels. Thus, all you need to lay out labels is the following rule:<P>
4.     Place the label (everything up to the colon) of a labeled statement on a separate line at one indent level less than the statement it labels.<P>
<A href="list6.htm">Listing 6</a>
shows the consequence of incorporating this rule into each of the popular styles.<P>
<h4><FONT COLOR="#000080"><A name="0173_00E2">Indenting Function Bodies<A name="0173_00E2"></FONT></h4></P>
The K &amp; R style has a curious inconsistency, namely, the placement of the left brace that opens a function body. The K &amp; R style places the left brace of a function body on a line by itself at the same indentation as the corresponding right brace (as in the Allman style), which is one indentation level less than the statements of the function body itself. That is, the usual K &amp; R style lays out a function as<P>
<pre>int f(int i)
{
   statement;
   statement;
}</pre>
rather than as<P>
<pre>int f(int i) {
   statement;
   statement;
}</pre>
I believe this apparent inconsistency is an anachronism, dating back to the days before C had function prototype headings. Old-style C function headings list the formal parameter types between the right parenthesis of the parameter list and the opening curly brace of the function body, as in<P>
<pre>int f(i)
   int i;
{
   statement;
   statement;
}</pre>
In the face of this syntax, I guess this is a pretty reasonable exception to the usual K &amp; R rule (that the opening brace goes at the end of the line before the first statement in the statement sequence). But I think it's really just another strike against the K &amp; R style. Neither the Whitesmiths nor the Allman styles suffer from this inconsistency.<P>
<h4><FONT COLOR="#000080"><A name="0173_00E3">In Summary<A name="0173_00E3"></FONT></h4></P>
If you work alone and you can do as you please, then none of this should really matter to you. You can make up whatever style rules you want, and you don't have to justify them to anybody, least of all me.<P>
However, if you work as a member of a programming team, it's probably in your and the team's interest to try to agree on a reasonable set of layout rules that will promote harmony among the team. Agreeable layout rules encourage team members to read, critique, and share each other's code.<P>
I don't believe most programmers want to be bothered consulting their project style manual when they are unsure about how to indent a particular construct. Most would rather go with their gut reaction. Layout rules specified by examples are better than nothing, but they're a poor substitute for a shared understanding of layout principles. The best way to describe those principles is in terms of the syntactic structure of the programming language.<P>
Of course, you may argue that I espouse this syntactic view of indenting rules because it makes my preference (the Whitesmiths style) look pretty good. On the other hand, I like to think it works the other way around. That is, my preference is based on the fact that the Whitesmiths style has an underlying syntactic elegance and simplicity.<P>
I trust you'll let me know if I've done your favorite indenting style an injustice.<P>
<h4>References</FONT></h4></P>
<a name="1"></a>[1]     Tom Cargill. <I>C</I>++ <I>Programming Style</I> (Addison-Wesley, 1992).<P>
<a name="2"></a>[2]     Scott Meyers. <I>Effective C</I>++ (Addison-Wesley, 1992).<P>
<a name="3"></a>[3]     Thomas Plum and Dan Saks. <I>C</I>++ <I>Programming Guidelines</I> (Plum Hall, 1991).<P>
<a name="4"></a>[4]     Bruce J. MacLennan. <I>Principles of Programming Language</I> (Holt, Rinehart, and Winston, 1983).<P>
<a name="5"></a>[5]     Brian Kernighan and Dennis Ritchie. <I>The C Programming Language</I> (Addison-Wesley, 1978 (1st. ed.) and 1988 (2nd. ed.)).<P>
<a name="6"></a>[6]     David Straker. <I>C Style: Standards and Guidelines</I> (Prentice-Hall, 1992).<P>
<a name="7"></a>[7]     Thomas Plum. <I>C Programming Guidelines, 2nd. ed.</I> (Plum Hall, 1989).<P>

<h4><a href="../../../source/1995/oct95/saks.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
