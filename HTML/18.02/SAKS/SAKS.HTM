<HTML>   
     <HEAD>
<TITLE>February 2000/C++ Theory and Practice</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocfeb.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">C++ Theory and Practice:<br> Replacing Character Arrays with Strings, Part 2</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Dan Saks</FONT></H3>

<BLOCKQUOTE>
<p>Higher-level constructs have their overheads, but they are generally worth the cost.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>Copyright &copy; 2000 by Dan Saks</p>
<p>For months, I've been discussing the principles of data abstraction and their application in C++. I've been demonstrating the techniques by applying them to a specific programming example, a program called <B>xr</B> that generates a cross-reference of identifiers read from a text stream.</p>
<p>Last month, I identified that all of the character arrays and pointers to characters in the <B>xr</B> program represent a low-level implementation of the high-level concept of a variable-length character string <a href="#1">[1]</a>. I began the process of rewriting the application using the Standard C++ <B>string</B> class in place of character arrays and pointers. Let's pick up where I left off.</p>
<p><a href="list1.htm">Listing 1</a> shows <B>xr.cpp</B>, the application's main source file. It defines two functions, <B>main</B> and <B>get_token</B>, which now use <B>string</B> objects instead of character arrays. However, <B>main</B> interacts with the <B>cross_reference_table</B> class, which still uses character arrays. <a href="list2.htm">Listing 2</a> shows <B>table.h</B>, which contains the <B>cross_reference_table</B> class and inline member-function definitions. <a href="list3.htm">Listing 3</a> shows <B>table.cpp</B>, which contains the corresponding non-inline member-function definitions.</p>

<H4><FONT COLOR="#000080">About My Measurements</FONT></H4>

<p>In my past two columns [<a href="#1">1</a>,<a href="#2">2</a>], I presented some measurements to show how the changes I had made affected the speed of the program. In each case, I measured the program's execution time using three different compilers on a common platform (Windows 9x on a Pentium). I have used the same hardware and operating system for all measurements published in a single <I>CUJ</I> column, but the hardware and operating system has changed from column to column. (I replaced the hard disk and upgraded from Windows 95 to Windows 98.) Thus, while I've been getting reasonably consistent measurements of the relative performance of different versions of the program, the exact execution times have varied over time.</p>
<p><a href="tab1.htm">Table 1</a> shows my latest set of measurements for the execution times for various versions of the cross-reference generator when compiled with three different compilers. The first three rows of the table represent measurements of:</p>
<p>1)  a version written in Standard C, similar in style to the one appearing in exercise 6-3 of Tondo and Gimpel;</p>
<p>2)  a version that uses classes for cross-reference tables and line-number sequences, but still uses character arrays;</p>
<p>3)  a version that uses classes as in version 2, but uses <B>string</B>s instead of character arrays for input. (It uses <B>xr.cpp</B> from <a href="list1.htm">Listing 1</a>.)</p>
<p>The other rows correspond to versions of the program I describe shortly.</p>
<p>When I presented my first set of measurements <a href="#2">[2]</a>, I explained that I used only the default compiler options for each compiler. I had not used any options for optimizing program size or speed. I had been building "release" versions rather than "debug" versions, but I hadn't selected any other options.</p>
<p>Some of my readers told me that my measurements were misleading because I based them on code compiled without optimizations. Since I made my first set of measurements, I have experimented with different optimization settings. My experience so far is that, although the optimizations may affect the total execution time of the programs, they have little impact on the relative execution times of any two programs compiled with the same options.</p>
<p>For example, suppose I compile two different versions of <B>xr</B> with one compiler using only the default options, and one version of the program runs faster than the other by, say, 15%. If I then recompile both programs using the same compiler and selected optimization options, the faster program usually remains around 15% faster, give or take a few percent.</p>
<p>For this discussion of abstraction techniques, I'm interested only in the relative execution times. Since the choice of compiler options seems to have little effect on the relative performance of two versions of <B>xr</B> when compiled by the same compiler, I don't think my results are misleading.</p>
<p>Although I have not yet found that it makes much difference in this program, I'll continue to experiment with optimization settings. Maybe I'll stumble on some that do make a difference.</p>
<p>A few readers have asked me to name the compilers I'm using. The performance of this one program does not by itself constitute an adequate basis for comparing compilers. I don't want to turn this into a compiler comparison, so the compilers will remain nameless.</p>

<H4><FONT COLOR="#000080">Reserving Storage</FONT></H4>

<p><a href="tab1.htm">Table 1</a> indicates that the flexibility and convenience of <B>string</B> objects comes at a price, at least in this particular application. Strings grow and shrink by allocating and deallocating memory at run time. All that allocating and deallocating uses memory more frugally, at the expense of greater code size and execution time. Depending on the compiler, using <B>string</B>s instead of character arrays for getting tokens increased the program's execution time by 18% for two of the compilers (B and C) and by 60% for the other (A).</p>
<p>The standard <B>string</B> class provides a little hook that might reduce the performance penalty. The <B>reserve</B> member function offers some control over the time the program spends managing memory for a string.</p>
<p>When a standard <B>string</B> object grows to hold a larger value, it's allowed to allocate more memory than it needs to hold the new value. For example, if you assign a value to string <B>s</B> using:</p>

<pre>
s = "Hi";
</pre>

<p>the <B>=</B> operator need allocate storage for only two characters, but it could allocate storage for more. The advantage of allocating excess storage is that it leaves room for the string to grow without requiring additional memory allocation and deallocation. For example, if string <B>s</B> has excess storage, then appending a character to <B>s</B> using:</p>

<pre>
s += '!';
</pre>

<p>won't allocate any more storage to hold the additional character. The operation should execute very quickly.</p>
<p>The standard <B>string</B> class defines member functions:</p>

<pre>
size_type size() const;
size_type length() const;
</pre>

<p>each of which returns the number of characters actually in a <B>string</B>. It defines another member:</p>

<pre>
size_type capacity() const;
</pre>

<p>which returns the number of characters that a string could hold without allocating additional memory. The return type, <B>size_type</B>, is a member of class <B>string</B>, defined as an unsigned integer type that's large enough to represent the length of the longest possible string.</p>
<p>The <B>string</B> member function:</p>

<pre>
void reserve(size_type c = 0);
</pre>

<p>sets a string's capacity to be no less than a specified number of characters. For example, calling <B>s.reserve(64)</B> sets the capacity of string <B>s</B> to be at least 64 characters. Subsequent operations that add or remove characters from <B>s</B> will not allocate or deallocate memory as long as the string's length does not exceed 64.</p>
<p>I tried adding the call:</p>

<pre>
token.reserve(128);
</pre>

<p>immediately after the declaration of <B>token</B> in the <B>main</B> function of <B>xr.cpp</B>, as shown in <a href="fig1.htm">Figure 1</a>. With two of the compilers (A and B), reserving storage for the token produced a small performance improvement, about three or four percent. It's not much of a gain, but still a good return on such a small investment. With the third compiler (C), reserving storage produced no noticeable change in performance. These results appear as the fourth row in <a href="tab1.htm">Table 1</a>.</p>
<p>I also tried running the program with reserved capacities of 32 and 64 for the token. With compilers A and B, the smaller reserved capacities yielded smaller performance gains. With compiler C, they yielded very slight performance degradations. I found the degradation a bit surprising, but it's not unprecedented. Lippman and Lajoie <a href="#3">[3]</a> observed some performance degradation when they used the <B>vector&lt;T&gt;::reserve</B> to control the capacity of vectors.</p>

<H4><FONT COLOR="#000080">Using Strings Elsewhere</FONT></H4>

<p>Now let's replace the remaining character arrays and pointers with <B>string</B>s. They're all in the cross-reference table class.</p>
<p>Many of the changes involve simply changing the declaration of function parameters from type <B>char const *</B> to <B>string const &amp;</B>. For example, the declaration for <B>cross_reference_table</B>'s <B>add</B> member function changes from:</p>

<pre>
void add(char const *w, unsigned n);
</pre>

<p>to:</p>

<pre>
void
add(std::string const &amp;w,
   unsigned n);
</pre>

<p>The revised class definition appears as <B>table.h</B> in <a href="list4.htm">Listing 4</a>.</p>
<p>Changing <B>cross_reference_table::add</B>'s first parameter simplifies the call to that function appearing in <B>main</B>, from:</p>

<pre>
table.add(token.c_str(), ln);
</pre>

<p>to:</p>

<pre>
table.add(token, ln);
</pre>

<p>That is, <B>main</B> no longer needs to convert token to a null-terminated character sequence before passing it to <B>add</B>. The revised call appears in <a href="fig1.htm">Figure 1</a>.</p>
<p>The cross-reference table class has a nested type <B>tree_node</B>, defined in <B>table.cpp</B> (<a href="list3.htm">Listing 3</a>) as:</p>

<pre>
struct cross_reference_table::tree_node
   {
   tree_node(unsigned n);
   deep_pointer&lt;char&gt; word;
   line_number_sequence lines;
   deep_pointer&lt;tree_node&gt; left, right;
   };
</pre>

<p>The data member <B>word</B> is a pointer to a dynamically allocated character array representing a character string. It should be declared as:</p>

<pre>
std::string word;
</pre>

<p>This change leads to others in the member function definitions.</p>
<p>The <B>if</B> statement at the beginning of <B>cross_reference_table</B>'s <B>add</B> function appears in <a href="list3.htm">Listing 3</a> as:</p>

<pre>
if (t == NULL)
   {
   t = new tree_node (n);
   t-&gt;word = new char[strlen(w) + 1];
   strcpy(t-&gt;word, w);
   t-&gt;left = t-&gt;right = NULL;
   }
...
</pre>

<p>When parameter <B>w</B> refers to a string rather than a character array, the code becomes:</p>

<pre>
if (t == NULL)
   {
   t = new tree_node (n);
   t-&gt;word = w;
   t-&gt;left = t-&gt;right = NULL;
   }
...
</pre>

<p>The two assignments appearing after the new-expression actually complete the initialization of the <B>tree_node</B>, which the <B>tree_node</B> constructor started but never finished. You can fold those statements into a more comprehensive constructor defined as:</p>

<pre>
inline
cross_reference_table::tree_node::
tree_node(string const &amp;w,
   unsigned n)
   : word(w), lines(n),
   left(NULL), right(NULL)
   {
   }
</pre>

<p>The <B>if</B> statement then simplifies to:</p>

<pre>
if (t == NULL)
   t = new tree_node (w, n);
...
</pre>

<p>which is more concise and readable.</p>
<p>The else-if chain following the <B>if</B> statement compares <B>w</B> (the string to be added) with <B>t-&gt;word</B> (the string at the root of the current subtree) to determine the direction of the next probe into the tree. It appears in <a href="list3.htm">Listing 3</a> as:</p>

<pre>
else if ((cmp=strcmp(w,t-&gt;word)) &lt; 0)
   t-&gt;left = add_tree(t-&gt;left,w,n);
else if (cmp &gt; 0)
   t-&gt;right = add_tree(t-&gt;right,w,n);
else
   t-&gt;lines.add(n);
</pre>

<p>Now that <B>w</B> and <B>t-&gt;word</B> are strings, you can compare them using the <B>string</B>'s <B>&lt;</B> and <B>&gt;</B> operators. The code becomes:</p>

<pre>
else if (w &lt; t-&gt;word)
   t-&gt;left = add_tree(t-&gt;left, w, n);
else if (w &gt; t-&gt;word)
   t-&gt;right = add_tree(t-&gt;right, w, n);
else
   t-&gt;lines.add(n);
</pre>

<p>Finally, you must change the statement that writes each word to the output from:</p>

<pre>
printf("%12s:", t-&gt;word);
</pre>

<p>to:</p>

<pre>
printf("%12s:", t-&gt;word.c_str());
</pre>

<p>because <B>printf</B> doesn't know how to handle class objects. Of course, that's one of the arguments in favor of using <B>&lt;iostream&gt;</B> over <B>&lt;stdio.h&gt;</B>.</p>
<p>The revised cross-reference table member definitions appear as <B>table.cpp</B> in <a href="list5.htm">Listing 5</a>.</p>

<H4><FONT COLOR="#000080">A Faster Way to Compare</FONT></H4>

<p>Using <B>string</B>s in the cross-reference table class exacts an additional toll in performance. The execution times appear in the fifth row of <a href="tab1.htm">Table 1</a>. The execution times increased anywhere from 22% to 63% compared to the previous version of the program.</p>
<p>Much of the increase is due to my naive use of the <B>string</B>'s <B>operator&lt;</B> and <B>operator&gt;</B> in <B>cross_reference_table::add</B>. The first conditional expression in:</p>

<pre>
else if (w &lt; t-&gt;word)
   t-&gt;left = add_tree(t-&gt;left, w, n);
else if (w &gt; t-&gt;word)
   t-&gt;right = add_tree(t-&gt;right, w, n);
...
</pre>

<p>compares <B>w</B> with <B>t-&gt;word</B> character by character to determine if <B>w</B> is less the <B>t-&gt;word</B>. The second conditional expression performs the same character-by-character comparison, only to determine if <B>w</B> is greater than <B>t-&gt;word</B>. That's a lot of repeated work.</p>
<p>The <B>string</B> class provides an overloaded member function called <B>compare</B>, which you can use to rewrite the comparisons as:</p>

<pre>
else if ((cmp=w.compare(t-&gt;word)) &lt; 0)
   t-&gt;left = add_tree(t-&gt;left, w, n);
else if (cmp &gt; 0)
   t-&gt;right = add_tree(t-&gt;right, w, n);
else
   t-&gt;lines.add(n);
</pre>

<p><B>s.compare(t)</B> returns a signed integer that's negative if <B>s &lt; t</B>, zero if <B>s == t</B>, and positive if <B>s &gt; t</B>. Thus, this code is very similar to the way it was when it used <B>strcmp</B> to do the comparisons. The first conditional expression captures the result of the string comparison in <B>cmp</B>, and the second conditional expression just tests <B>cmp</B> again.</p>
<p>This small change results in a performance improvement ranging from 11% to 17% compared to the previous version of the program, as shown in the sixth row of <a href="tab1.htm">Table 1</a>. Not bad.</p>

<H4><FONT COLOR="#000080">Parting Thoughts</FONT></H4>

<p>By encapsulating all the character arrays as string objects, I've completed the process of encapsulating each design decision in the <B>xr</B> program into a separate class:</p>

<UL><LI>   <B>cross_reference_table</B> encapsulates the binary tree as the means for storing the identifiers with their line numbers in alphabetical order by identifier.</LI>
<LI>   <B>std::string</B> encapsulates the representation of the character sequences that form identifiers.</LI>
<LI>   <B>line_number_sequence</B> encapsulates the representation of sequences of line numbers as singly linked lists. (For completeness, <B>sequence.h</B> and <B>sequence.cpp</B> appear in <a href="list6.htm">Listings 6</a> and <a href="list7.htm">7</a>, respectively.)</LI></UL>

<p>As I've said many times before, when dealing with a demonstration program on this scale, it's hard to claim that this version of the program is a whole lot clearer than the original C version. But the style of programming in the original C program does not scale up very well. It's been my experience that, when you apply this style to large programs, it produces code that's hard to maintain. I believe the style of the C++ program, which isolates design decisions in classes, does scale up very well.</p>
<p>My measurements indicate that each encapsulation exacts a small price in run-time performance, at least in this particular application. Those small increments might add up to a significant loss in performance. In my experiments, the C++ version runs from 30% to 100% slower depending on the compiler. Whether your applications experience a similar loss in performance is for you to measure. Whether you can tolerate the loss is for you to decide.</p>
<p>I completely agree with Bjarne Stroustrup that you should "program at the highest level of abstraction that you can afford." <a href="#4">[4]</a> I think that standard <B>string</B>s are safer and more convenient than character arrays, and I think I can afford them in most of my work. Expect to see me use them in the future. I'm developing an awareness of what the <B>string</B>'s cost with different implementations, and I'm prepared to use character arrays if I really feel the need for speed. But it has to be a real need.</p>

<H4><FONT COLOR="#000080">References</FONT></H4>

<p><a name="1"></a>[1]  Dan Saks. "C++ Theory and Practice: Replacing Character Arrays with Strings, Part 1," <I>CUJ</I>, January 2000.</p>
<p><a name="2"></a>[2]  Dan Saks. "C++ Theory and Practice: Standard C++ as a High-Level Language?," <I>CUJ</I>, November 1999.</p>
<p><a name="3"></a>[3]  Stanley B. Lippman and Josie Lajoie. <I>C++ Primer, 3rd Edition</I> (Addison-Wesley, 1998).</p>
<p><a name="4"></a>[4]  Bjarne Stroustrup. "C++ for Embedded Systems." Keynote address at the Embedded Systems Conference, March 1999.</p>

<p><i><B>Dan Saks</B> is the president of Saks &amp; Associates, which offers training and consulting in C++ and C. He is active in C++ standards, having served nearly seven years as secretary of the ANSI and ISO C++ standards committees. Dan is coauthor of <I>C++ Programming Guidelines</I>, and codeveloper of the Plum Hall Validation Suite for C++ (both with Thomas Plum). You can reach him at 393 Leander Dr., Springfield, OH 45504-4906 USA, by phone at +1-937-324-3601, or electronically at <B>dsaks@wittenberg.edu</B>.</i></p>

<h4><a href="../../../source/2000/feb00/saks.zip">Get Article Source Code</a></h4>
</blockquote></body></html>
