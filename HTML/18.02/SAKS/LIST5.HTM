<HTML><HEAD>
<TITLE>February 2000/C++ Theory and Practice/Listing 5</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 5: The cross-reference table non-inline member function definitions, using strings</A></h4>
<pre>
// table.cpp

#include &lt;stdio.h&gt;
#include &lt;string&gt;
#include &lt;string.h&gt;

#include "deep.h"
#include "table.h"
#include "sequence.h"

using std::string;

struct cross_reference_table::tree_node
    {
    tree_node(string const &amp;w, unsigned n);
    string word;
    line_number_sequence lines;
    deep_pointer&lt;tree_node&gt; left, right;
    };

inline
cross_reference_table::
tree_node::tree_node(string const &amp;w, unsigned n)
    : word(w), lines(n), left(NULL), right(NULL)
    {
    }

cross_reference_table::tree_node *
cross_reference_table::add_tree
(tree_node *t, string const &amp;w, unsigned n)
    {
    if (t == NULL)
        t = new tree_node (w, n);
    else if (w &lt; t-&gt;word)
        t-&gt;left = add_tree(t-&gt;left, w, n);
    else if (w &gt; t-&gt;word)
        t-&gt;right = add_tree(t-&gt;right, w, n);
    else
        t-&gt;lines.add(n);
    return t;
    }

void
cross_reference_table::put_tree(tree_node const *t)
    {
    if (t != NULL)
        {
        put_tree(t-&gt;left);
        printf("%12s:", t-&gt;word.c_str());
        t-&gt;lines.put();
        printf("\n");
        put_tree(t-&gt;right);
        }
    }
</pre></body></html>
