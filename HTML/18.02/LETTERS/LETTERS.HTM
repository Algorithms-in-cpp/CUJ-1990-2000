<HTML>   
     <HEAD>
<TITLE>February 2000/We Have Mail</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocfeb.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Departments</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">We Have Mail</FONT></H2>

<HR>
<BLOCKQUOTE>
<p><I>Letters to the editor may be sent via email to </I>cujed@mfi.com<I>, or via the postal service to Letters to the Editor, </I>C/C++ Users Journal<I>, 1601 W. 23rd St., Ste 200, Lawrence, KS 66046-2700.</I></p>

<hr><p>Dear <I>CUJ,</I></p>
<p>In Mr. Plauger's column, A Better Sort (<I>CUJ,</I> October 1999), I couldn't help wondering about the time it would take to call the little <B>rotate</B> function on an array of large elements. The trouble is, the <B>memmove</B> in that function is called <B>n</B> times, where <B>n</B> is the result of <B>size/BUF_SIZE</B> rounded up. If the area to move is large, this could be overly penalizing.</p>
<p>The problem is that <B>rotate</B> needs to store the last (rightmost) element at the front. So you need some temporary store for that last element which gets overwritten in the move. <B>rotate</B> does it by pretending that the element size is <B>BUF_SIZE</B> (or less), then rotating <B>n</B> times.</p>
<p>I have two other solutions. The first stores the last element on the program stack, in pieces, by using recursion. The second uses repeated reversal, a technique I saw for the first time, if I remember correctly, in <I>Software Tools in Pascal,</I> a book which Mr. Plauger wrote with B. W. Kernighan, where the discussion was about moving lines of text in an editor using a minimal amount of intermediate memory.</p>
<p>The stack storage version works as follows: copy part of the last element into a local (stack) buffer at each level of recursion, until it is (in pieces) completely copied to the stack. Once copied, perform the shuffling of the rest of the table to its final position (one call to <B>memmove</B>), then start copying back the bits of the element saved. At each function return, another chunk is copied back. The function is split into two: <B>rotate</B> simply calls the <B>rotate_r</B> with the initial parameters set up.</p>

<pre>
static void
rotate_r(char *qb, char *qe,
   size_t size, size_t stored)
   {
   /* buffer chunk (local) */
   char buf[BUF_SIZE]; 

   /* how much remains to buffer */
   size_t left = size - stored;    

   /* how much to put in buf */
   size_t sbuf = left &lt; sizeof buf ?
         left : sizeof buf;   
   if (sbuf &lt; left)
      {

      /* put aside chunk from end */
      memcpy(buf, qe + stored, sbuf); 

      /* do the rest */
      rotate_r(qb, qe, size,
         stored + sbuf);  
                
      /* copy chunk to beginning */
      memcpy(qb + stored, buf, sbuf);
      }
   else /* sbuf == left */
      {

      /* put aside chunk from end */
      memcpy(buf, qe + stored, sbuf); 

      /* shuffle up by size */
      memmove(qb + size, qb,
         qe - qb - size); 

      /* copy chunk to beginning */
      memcpy(qb + stored, buf, sbuf);
      }
   }

static void
rotate(char *qb, char *qe,
   size_t size)
   {
   /* right rotate [*qb, *qe]
      one place */
   rotate_r(qb, qe, size, 0);
   }
</pre>

<p>The reversing version (which uses the swap routine for elements) works as follows: to rotate the last element to the front, reverse the order of all elements apart from the last. The result is the reverse of the desired array, so now reverse the whole lot. I've added the <B>reverse</B> function to help. (I like this stack storage technique: I've used it in the past to read arbitrarily long text lines into buffers which are allocated once each line has been read completely and its length established. However, I've never seen anybody else use it.)</p>

<pre>
static void
reverse(char *qb, char *qe,
   size_t size)
   {
   /* reverse the order of elements
      in a (sub)array */
   while (qb &lt; qe)
      {
      swap(qb, qe, size);
      qb += size;
      qe -= size;
      }
   }

static void
rotate(char *qb, char *qe,
   size_t size)
   {
   /* right rotate [*qb, *qe]
      one place */
   reverse(qb, qe - size, size);
   reverse(qb, qe, size);
   }
</pre>

<p>Both Mr. Plauger's and the recursive <B>rotate</B>s allow arbitrarily sized rotations: they can let you rotate more than one element from the end to the front. It is fairly simple to generalize the reversing <B>rotate</B> to do the same: reverse the first part of the array, reverse the second part of the array, then reverse the whole array. (That was what was in the book.) Note that pretty well every element in the first part of the array gets moved (swapped, involving two copies) twice; the stack storage method only copies one element twice, (and <B>memmove</B>s the others) but has the possible disadvantage of requiring an arbitrary amount of storage.</p>
<p>Regards,</p>
<p>Tony Balinski</p>

<p><I>I like the recursive move too. Never seen that trick before. Thanks for showing it to us. But I'll probably leave </I><B>qsort</B><I> as is, gambling that most uses will never require multiple copies. &#151; pjp</I></p>

<hr><p>Dear <I>CUJ,</I></p>
<p>Many of us might be aware of the recent popularity of Perl. I believe this is mainly due to CPAN (Central Perl Archive Network) at <B>http://www.cpan.org</B>. CPAN has modules for almost any problem that you can think of. They have a DBI module which talks to almost any database in <I>any</I> platform (unlike ODBC). They have similar modules for HTTP, Telnet, Parsing etc. Of course all of them are Free and Open Source.</p>
<p>As the most respected and reputed source for C/C++ articles, you <I>(CUJ)</I> and your readers are in a unique position to make something similar happen. SFL (Standard Function Library) from <B>www.imatix.com</B> is a good start but it is in C and is not broken into neat independent modules. What is needed is well-tested classes with very good interfaces which can be just plugged and played with. Of course the modules will not satisfy everybody, but it will give a good quick start for all programmers. Experienced programmers can customize only the modules that are creating a problem for them. A tool like perldoc, which extracts the documentation for the module from the source code itself, would be <I>great!</I></p>
<p>For starters, we could have your editor's code for composite traversing, in a neatly encapsulated code for handling directories and files.</p>
<p>I think these free modules presented in an easy-to-search location will really bring about the code reuse promise of OOP with C++.</p>
<p>Shivakumar Gopalakrishnan<br>
Structural Analysis Technologies, Inc.<br>
<B>http://www.sat-i.com</B><br>
kumar@sat-i.com</p>

<p><I>You flatter us, but what you are proposing sounds suspiciously like work! Actually, there are two sources of C/C++ source code you ought to be aware of, which are somewhat along the lines of your idea. The first is simply the source code that accompanies our articles. It is freely available from our ftp site (</I><B>ftp://ftp.mfi.com/pub/cuj</B><I>) or our website (</I><B>www.cuj.com</B><I>). If you purchase the CUJ CD-ROM (ten years' worth of articles and code &#151; you can order it from our website), you not only receive all the source code, but you can even read the articles about it to figure out what it does.</I></p>
<p><I>The second source is the C/C++ Users' Group website (</I><B>www.hal9k.com/cug</B><I>) and CD-ROM. The CUG is in fact the entity which birthed CUJ. (Don't feel bad if you have trouble keeping this straight &#151; so do I.) Since 1981 the CUG's mission has been to provide low-cost distribution of shareware and freeware C/C++ source code. The CUG library consists of over 400 volumes of source code covering everything from AI to Z-80.</I></p>
<p><I>I am not sure if what you are suggesting is radically different from what I discussed above. Having been involved with the CUG in the past, I can tell you that maintaining a repository of source code is a lot more labor-intensive than most people realize. CUG's main guru, Victor Volkman, already does an astounding job. I think we'll just stick to publishing articles. &#151; mb </I></p>

<hr><p>Dear <I>CUJ,</I></p>
<p>I just wanted to express a comment regarding a letter to the editor by Giovanni Bavestrelli in the September 1999 issue. What he suggested [a <B>redefine</B> keyword for C++ to signify intent to override a virtual function] is already part of the Object Pascal language, under the keyword <B>override</B>. I've found this to be a very important feature of that language (implemented by Inprise's Delphi suite), and I'd like to have it as part of Standard C++.</p>
<p>The Object Pascal <B>override</B> modifier acts exactly as you proposed. You cannot declare a virtual function on a derived class without this modifier. If you use <B>virtual</B> you are declaring a new virtual function that hides the base's definition:</p>

<pre>
class Base
   procedure foo ; virtual ;
class Derived
   // OK, override virtual function
   // base.foo
   procedure foo ; override ; 

   // WARNING: virtual Derived.foo
   // hides virtual Base.foo
   procedure foo ; virtual ;       

   // WARNING: Derived.foo hides
   // virtual Base.foo
   procedure foo ; 

   // Derived. foo hides virtual
   // function Base.foo, but that's
   // what the programmer intended
   procedure foo ; reintroduce ;
</pre>

<p>The <B>reintroduce</B> modifier tells the compiler that we are deliberately hiding a base class. It simply disables the warning.</p>
<p>Now, if you specify <B>override</B> you <I>must</I> match exactly the base function signature (including arguments and return types). It may be a bit forcing to insist on matching return types, however. Some compilers handle correctly the case of a virtual function returning different types, which is specifically useful when implementing:</p>

<pre>
some_class* clone() const
</pre>

<p><B>some_class</B> is the type of the class where the clone is implemented. Those compilers create stub functions which add an implicit <B>dynamic_cast</B> on the return type, converting from the type <B>(some_class*)</B> as seen by the caller and the type <B>(some_class*)</B> returned by the particular function implemented.</p>
<p>P.S: I liked Bavestrelli's article about assertions. Unlike one reader, I think the template semantics must evolve a bit more before they can successfully replace preprocessor usage. Currently, template functions cannot reproduce what a macro function can do. For example, I don't know of any portable way to hide the arguments <B>(const char * file, int line)</B> to some notification function the way <B>assert</B> does using templates. I've tried different forms with my compiler but none of them worked because <B>__FILE__</B> and <B>__LINE__</B> are expanded by the preprocessor and not by the template instanting procedures inside the compiler, so a construct like:</p>

<pre>
template
   &lt;
   cost char * aFILE=__FILE__,
   int aLINE=__LINE__
   &gt;
</pre>

<p>doesn't work.</p>
<p>Regards,</p>
<p>FLC</p>

<p><I>That Mr. Bavestrelli gets around, doesn't he? Whenever he writes in, I can almost be sure someone else will have something to say about it. Thanks for writing. &#151; mb</I></p>

<hr><p>Dear Mr. Plauger,</p>
<p>This is in response to your November 1999 article, "Standard C/C++: Frequently Answered Questions." You were asked how to recover from a failure of <B>operator new</B> now that it no longer is required to return zero on failure, and instead throws an exception. Your response showed two methods for adding recovery logic. There is a third method that the questioner's recovery logic could be used in. That is, to use the "new handler." The new handler is a pointer to a function prototyped as <B>void (*new_handler)()</B> which can be set using the <B>set_new_handler</B> function. Whenever <B>operator new</B> fails, this new handler function is called to see if it can "fix" the situation so that <B>operator new</B> can try to allocate the memory again. The default is to do nothing and let <B>operator new</B> throw a <B>bad_alloc</B> exception.</p>
<p>The benefits of using the new handler are twofold. The first is that your handler function will be called if <B>new</B> fails anywhere in your program &#151; you don't have to write the same logic (i.e., logging the error) for each call of <B>new</B>. The more important benefit is that if you are able to do something about the failure of <B>new</B> (i.e., freeing memory somewhere else) then you can have <B>new</B> try to allocate the memory again.</p>
<p>Though the new handler is very specialized in its uses, I believe that it is necessary to mention it when discussing recovery logic options for the failure of operator <B>new</B>.</p>
<p>Note: I have had difficulties using <B>set_new_handler</B> with the Microsoft Visual C++ 6.0 compiler. They use their own function <B>_set_new_handler</B> and their new handler is prototyped as <B>int (*new_handler)(size_t)</B>.</p>
<p>Sincerely,</p>
<p>Eric A. Harrs<br>
eharrs@earthlink.net</p>

<p><I>A new handler does indeed address issues related to allocation failures, but as you observe, its use is very specialized. That's why I omitted it from my discussion of changes in the behavior of </I><B>operator new</B><I>. As for Visual C++, Microsoft chose to preserve a degree of backward compatibility with their existing code base, rather than track the draft C++ Standard more closely. Now that the C++ Standard has settled down, they will have to revisit this decision, I suspect. &#151; pjp </I>

</blockquote></body></HTML>
