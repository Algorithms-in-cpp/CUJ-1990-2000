<HTML>   
     <HEAD>
<TITLE>February 2000/Uncaught Exceptions</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocfeb.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Uncaught Exceptions: Dies Irae</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Bobby Schmidt</FONT></H3>

<BLOCKQUOTE>
<p>Bobby rings out the old with some traditional bugs and a new C Standard, then rings in the new with fingers crossed.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>Copyright &copy; 2000 Robert H. Schmidt</p>
<p>Hello? Is this on? Testing 1 2 3...</p>
<p>If you're reading me, I guess you safely escaped the Y2K apocalypse &#151; or at least enough for your local postal service to deliver this magazine, and for you not to need it as kindling. Assuming it became necessary, I always reckoned I could avoid Y2K's wrath by slumming at Microsoft's main campus. Of all the people in the world, I figure Bill Gates is the last one to let his company and facilities grind to a halt.</p>
<p>Then again, the U.S. Justice Department may end up debilitating Microsoft worse than Y2K ever could. As I write this, Judge Jackson has recently released his Findings of Fact and appointed a mediator in the Microsoft trial. I've always believed that after much posturing, Microsoft would choose to settle out of court, if only to keep the Findings from becoming evidence in future trials.</p>
<p>Having worked at or with Microsoft for a decade, and being a devoted user of Apple's Macintoshes, I hold distinct and strong opinions about this case. Among them:</p>
<UL><LI>   I truly hope the government doesn't concoct a "remedy" requiring Microsoft to publish the Windows source code. In our world of Unintended Consequences, such publication could very well decimate competition, confuse customers, and strengthen Microsoft's market for both Windows and Windows applications.</LI>
<LI>   I won't be shocked if Microsoft cleaves into multiple companies. While my fellow Remondians may consider such talk heresy, I can actually see some advantages to such a scheme &#151; advantages even for the (by then former) Microsoft itself.</LI>
<LI>   Competitors joyous at Microsoft's current fate would do well to consider the predator they've unleashed. Once the government has sated itself on Microsoft, it will come looking for other prey.</LI></UL>
<p>Regardless of Microsoft's ultimate fate, their near future will surely mirror that of Redmond's current weather: seemingly endless months of dark gloom with sunny times a distant memory.</p>

<H4><FONT COLOR="#000080">Double Trouble</FONT></H4>

<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> Hello,</p>
<p>I'm currently learning the C programming language and have run across a slight problem with the Mix Power C compiler. I get an error with the following code:</p>

<pre>
#include &lt;stdio.h&gt;

main()
    {
    long x = 29598;
    printf("%lf\n", x);
    return 0;
    }
</pre>

<p>In Power C I get an error: "invalid function <B>_ftoa</B> in object library <B>pclib.mix</B>." I have tried to take a program straight from the manual of Power C using <B>long</B> and <B>double</B> and the same problem persisted. Could it be that perhaps the <B>.mix</B> libraries had gotten corrupt or is this just a simple problem of incorrect syntax? &#151; Pete Robie</p>

<H4><FONT COLOR="#000080">A</FONT></H4>
<p> You sent me a followup email indicating that your Power C library was corrupt, and that a new library fixed the symptom. However, you still have some latent problems that I want to address.</p>
<p>First, you chose a format field of <B>%lf</B>. That format is not specified by the C Standard, and will result in undefined behavior. I'm guessing that the format you really want is <B>%Lf</B>.</p>
<p>Second, <B>%Lf</B> requires a corresponding <B>long double</B> argument, yet you provide it a <B>long</B> argument instead. <B>printf</B> does not detect this mismatch, and interprets the integral <B>long</B> argument (probably on the stack) as a floating-point <B>long double</B>. This causes two difficulties:</p>
<UL><LI>   <B>long double</B> and <B>long</B> are probably not the same size. If that's so, the <B>printf</B> argument parser will experience a stack frame error, by pulling a <B>long double</B> from the stack, even though only a (presumably) shorter <B>long</B> lives there. To make up the difference, extra bytes of stack noise will be interpreted as part of the <B>long double</B>'s value, possibly leading to program corruption or a memory-access violation.</LI>
<LI>   Even if <B>long double</B> and <B>long</B> are the same size, their bit encodings are wildly divergent. The original long value <B>29598</B> will be interpreted as a completely different floating-point number.</LI></UL>
<p>The robust solution here is actually quite simple: pass an honest-to-God <B>long double</B> to <B>printf</B>, by either</p>

<pre>
/* Version 1 */
long double x = 29598;
printf("%Lf\n", x);
</pre>

<p>or</p>

<pre>
/* Version 2 */
long x = 29598;
printf("%Lf\n", (long double) x);
</pre>

<p>Caveat: I've used translators that required explicit definition of a floating-point variable (such as <B>long double x</B>) before they would generate references to internal floating-point routines (like <B>_ftoa</B>). Microsoft's compilers in particular used to sport this particular "feature." If your translator has this same peculiarity, you may not be able to use Version 2 unless you define some <B>long double</B> variable elsewhere in your program.</p>

<H4><FONT COLOR="#000080">Get Real</FONT></H4>

<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> Hi Bobby.</p>
<p>I ran into the following problem when I installed a new ANSI C++ compiler and tried to build my projects. I have a header file with the declaration</p>

<pre>
typedef double real ;
</pre>

<p>and a <I>huge</I> number of translation units that use <B>real</B> wherever possible:</p>

<pre>
void foo ( real n ) ;
</pre>

<p>I also include the compiler's header <B>complex.h</B> for its <B>complex</B> class. Now, this new compiler has a template <B>complex</B> type, with the template function</p>

<pre>
std::real&lt;T&gt; ( const complex&lt;T&gt; &amp; ) ;
</pre>

<p>The compiler complains about each and every unqualified appearance of <B>real</B>, with an ambiguity. I posted this to a newsgroup, and they told me to qualify all appearances of <B>real</B>. I don't believe I will have to find and replace about ten directories and add <B>::</B> or <B>std::</B> to each real; it's a nightmare. There has to be a better solution.</p>
<p>Thanks. &#151; Fernando Cacciola</p>

<H4><FONT COLOR="#000080">A</FONT></H4>

<p> Qualifiers such as <B>::</B> and <B>std::</B> are like <B>const</B>: robust and easy to use from the get-go, a monstrous pain to retrofit later. Fortunately, you should not have to make such a retrofit to your program.</p>
<p>You mention a compiler-provided header called <B>complex.h</B>. The Standard C++ library specifies the header <B>&lt;complex&gt;</B>, without the <B>.h</B>. <B>complex.h</B> is probably a compiler fossil from pre-Standard days. I think this header is causing your turmoil.</p>
<p>I'll go out on a small limb and guess that <B>complex.h</B> hoists its definitions into the global namespace via using clauses. To test my guess, try compiling the simple file</p>

<pre>
#include &lt;complex.h&gt;

complex&lt;int&gt; x;
</pre>

<p>If this compiles, <B>complex.h</B> causes <B>std::complex</B> to act as if it were really <B>::complex</B>. As a side-effect, <B>complex.h</B> most likely also hoists <B>std::real</B>. Because the compiler sees two things it can interpret as <B>::real</B> &#151; your typedef <B>real</B>, and the hoisted <B>std::real</B> &#151; you get diagnostics about ambiguity.</p>
<p>The solution is to use the real Standard header:</p>

<pre>
#include &lt;complex&gt;

typedef double real;

complex&lt;int&gt; a;          // error
std::complex&lt;int&gt; b;     // OK
real c;                  // OK
double d = std::real(b); // OK
</pre>

<p>This way, the bare <B>real</B> always references your typedef, and won't be confused with the template function <B>std::real</B>.</p>
<p>Caveat: you'll also have to write <B>std::complex</B> where you could have written just <B>complex</B> before. To mitigate this problem, add a using declaration:</p>

<pre>
#include &lt;complex&gt;

using std::complex;

typedef double real;

complex&lt;int&gt; a;          // now OK
std::complex&lt;int&gt; b;     // still OK
real c;                  // still OK
double d = std::real(b); // still OK
</pre>

<p>Now <B>std::complex</B> acts as if it were really declared as <B>::complex</B>.</p>

<H4><FONT COLOR="#000080">Array Initialization</FONT></H4>

<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> How do you initialize a class non-static member array of const elements? Since the array contains const elements, you must initialize it in the constructor member initialization list. However, I do not believe the member initialization list supports array initialization. &#151; Marty Grove</p>
<H4><FONT COLOR="#000080">A</FONT></H4>
<p> You don't.</p>
<p>This problem stems from the conflicting initialization syntax of members and arrays. Member initializers always take the direct-initialization form <a href="#1">[1]</a></p>

<pre>
a(b)
</pre>

<p>In contrast, non-member initializers can usually take either the direct initialization form or the copy initialization form <a href="#2">[2]</a></p>

<pre>
a = b
</pre>

<p>Arrays are an exception &#151; they must always take the copy initialization form:</p>

<pre>
int a[3] = {0, 1, 2};
</pre>

<p>Because members require direct initialization, and arrays require copy initialization, you cannot syntactically express initialization of array members.</p>
<p>I can't offer a complete solution to this problem. About the closest I can suggest is to replace the array with an array-like class object such as <B>std::vector</B>:</p>

<pre>
#include &lt;vector&gt;

class X
    {
    std::vector&lt;int&gt; const m;
    };
</pre>

<p>Limitations:</p>
<UL><LI>   You can't initialize <B>m</B> with a list like <B>{0, 1, 2}</B>. You must instead initialize <B>m</B> from a single value, another <B>vector</B>, or a pair of iterators. Don't panic &#151; this isn't as bad as it sounds. You can always initialize a real array from a <B>{...}</B> list, then initialize a <B>vector</B> from that array.</LI>
<LI>   Because <B>X</B> contains a const member subobject, the compiler can't implicitly declare the <B>X</B> default constructor and copy assignment operator. You'll have to provide your own.</LI></UL>
<p>Here is a more complete example:</p>
<pre>
#include &lt;vector&gt;

std::size_t const n(3);
int const a[n] = {0, 1, 2};

class X
    {
public:
    X();
    X &amp;operator=(X const &amp;);
private:
    std::vector&lt;int&gt; const m;
    };

X::X() : m(a, a + n)
    {
    }

X &amp;X::operator=(X const &amp;)
    {
    return *this;
    }
</pre>

<p>Here <B>X::m</B> has <B>n</B> elements, and is initialized to the values contained in the array <B>a</B>.</p>

<H4><FONT COLOR="#000080">C++ Primer</FONT></H4>

<H4><FONT COLOR="#000080">Q</FONT></H4>

<p> I've been reading Stanley B. Lippman's and Jos&eacute;e Lajoie's book <I>C++ Primer.</I> In the section on "Explicit Template Arguments" they describe the way a return type argument needs to be explicitly declared if it's not part of the argument list. However, the following code from the book does not compile:</p>

<pre>
typedef unsigned int ui_type;

template&lt;class T1, class T2,
   class T3&gt;
T1 sum(T2 a, T3 b)
    {
    return (a + b);
    }

// ok: T2 is char and T3 is
// unsigned int
// T2 and T3 are inferred from the
// type of pf:
ui_type (*pf)(char, ui_type) =
    &amp;sum&lt;ui_type&gt;;

int main()
    {
    return pf(1, 2);
    }
</pre>

<p>The problem is the assignment of the template function to the pointer to function. My Visual C++ compiler gives the following error message:</p>

<pre>
'initializing' : cannot convert from
' ' to 'unsigned int (__cdecl *)
(char,unsigned int)'
None of the functions with this name in
scope match the target type.
</pre>

<p>My C++ Builder 4 compiler gives me an "Access violation" message.</p>
<p>I am not sure if Mr. Lippman and Jos&eacute;e blew this one, if the compilers are not totally C++ compliant, or if I'm missing something important. I would appreciate any information on this code. Thank you. &#151; Richard Martone</p>

<H4><FONT COLOR="#000080">A</FONT></H4>
<p> The code you cite is from pages 506-7 of <I>C++ Primer</I> (Third Edition). I've added a small <B>main</B> to make the sample build.</p>
<p>I was able to reproduce your results with Visual C++ 6. In contrast, both Metrowerks CodeWarrior Pro 5 and the EDG C++ front end 2.4.2 successfully translate and run the code. (I have C++ Builder, but still haven't installed it.)</p>
<p>From my understanding of template argument deduction, I believe that the authors are correct. Consider this simpler example:</p>

<pre>
template &lt;typename T&gt;
T f()
    {
    return 0;
    }

// OK, T is int
int (*pf)() = &amp;f;

int main()
    {
    return pf();
    }
</pre>

<p>which elicits the same translation-time results. The type of <B>pf</B> is "pointer to function that returns an <B>int</B> and has no parameters." To be compatible with <B>pf</B>, the <B>f</B> instance chosen must take no parameters and return an <B>int</B>.</p>
<p>Happily, the translator can mint such an <B>f</B> instance, by replacing the template parameter <B>T</B> with the type argument <B>int</B>. Exactly one form of <B>f</B> is compatible with <B>pf</B>. As a result the translator can unambiguously deduce which instantiation is needed here. No extra explicit information is required.</p>
<p>While I can't find a passage in the C++ Standard that specifically allows this code, I find relevant support in these subclauses:</p>

<UL><LI>   14.5.5.1 ("Function template overloading")</LI>
<LI>   14.8.2.2 ("Deducing template arguments from the address of a function template")</LI>
<LI>   14.8.2.4 ("Deducing template arguments from a type")</LI></UL>

<H4><FONT COLOR="#000080">Membership Has Its Privileges</FONT></H4>

<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> I was forwarded the following from colleagues at work. You might find this bug in VC6 amusing. It makes you wonder how MS codes its compilers. &#151; Yuval El-Hanany</p>

<H4><FONT COLOR="#000080">A</FONT></H4>
<p> I've simplified your original code to</p>

<pre>
class X
    {
    int m;
    static void f(...)
        {
        &amp;m; // should be error
        }
    };
</pre>

<p><B>X::m</B> is not static. It therefore does not exist as a stand-alone object, but instead must be bound to some <B>X</B> object. Within the context of an <B>X</B> object, <B>m</B> is a subobject, and <B>&amp;m</B> is the address of that subobject.</p>
<p>In contrast, <B>X::f</B> is static, and is not bound to any <B>X</B> object. Within the context of <B>f</B>, <B>m</B> is not a subobject, and <B>&amp;m</B> is not a subobject address. Indeed, the expression <B>&amp;m</B> is meaningless within <B>f</B>, yet Visual C++ accepts the above code. The mighty EDG translator, on the other hand, correctly diagnoses the problem:</p>

<pre>
a nonstatic member reference
must be relative to a specific object
</pre>

<p>After some experimenting, I discovered that VC++ believes <B>&amp;m</B> to be a pointer to member:</p>

<pre>
static void f()
   {
   int X::*p = &amp;m; // should be error
   }
</pre>

<p>But <B>&amp;m</B> is not a pointer to member. The correct pointer-to-member syntax is</p>

<pre>
static void f()
    {
    int X::*p = &amp;X::m; // OK
    }
</pre>

<p>Fortunately, Visual C++ correctly compiles this fixed version.</p>
<p>Were <B>f</B> non-static, <B>&amp;m</B> would still not be a pointer to member, but instead would be a regular pointer to <B>int</B>:</p>

<pre>
void f()
    {
    int *p = &amp;m; // OK
    }
</pre>

<p>Visual C++ gets this one right too.</p>
<p>Put your discovery in the category of plain ol' VC++ bug. Send it in to Ron Burk at <I>Windows Developers Journal,</I> (<B>www.wdj.com</B>) and you just might get a spiffy new T-shirt for your trouble.</p>

<H4><FONT COLOR="#000080">Erratica</FONT></H4>

<p>The C9X Standard has finally been approved. The Committee successfully instantiated the X with a 9 in the nick of time, making the new Standard's colloquial name C99. C99 supersedes C95, itself an amalgam of the original C90 plus the ensuing two Technical Corrigenda and one Amendment.</p>
<p>As I write this (late November), I don't believe that C99 is available yet for purchase. You can still get a copy of the 1998 Draft Standard at <B>&lt;http://anubis.dkuug.dk/JTC1/SC22/open/n2620/&gt;</B>. The draft rationale is available from the same site as <B>&lt;http://anubis.dkuug.dk/JTC1/SC22/WG14/www/docs/n897.pdf&gt;</B>.</p>
<p>Once published, the Standard will go by the elegant title ISO/IEC 9899:1999. It makes the perfect solution for last-minute gift-buying dilemmas, provides a cozy reading companion on lonely nights, and authoritatively settles geek-boy bar bets. At fine booksellers everywhere &#151; ask for it by name.</p>

<H4><FONT COLOR="#000080">Notes</FONT></H4>
<p><a name="1"></a>1.  C++ Standard subclause 12.6.2 ("Initializing bases and members").</p>
<p><a name="2"></a>2.  Subclause 8.5 ("Initializers"). </p>

<p><i><B>Bobby Schmidt</B> is a freelance writer, teacher, consultant, and programmer. He is also an alumnus of Microsoft, a speaker at the Software Development and Embedded Systems Conferences, and an original "associate" of (Dan) Saks &amp; Associates. In other career incarnations, Bobby has been a pool hall operator, radio DJ, private investigator, and astronomer. You may summon him on the Internet via <B>rschmidt@netcom.com</B>.</i></p>

</blockquote></body></html>
