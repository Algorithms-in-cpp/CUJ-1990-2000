<HTML>   
     <HEAD>
<TITLE>April 1999/The Journeyman's Shop</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocapr.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">The Journeyman's Shop: Initialization and Cleanup in C++</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Pete Becker</FONT></H3>

<BLOCKQUOTE>

<p>It's a good rule to ignore the rules when doing so simplifies matters &#151; provided you know the reasons behind the rules you're ignoring.</p>
</BLOCKQUOTE>
<HR>
<BLOCKQUOTE>
<p>If the last time you read Huckleberry Finn was when you were fourteen, or if you haven't read it at all, I suggest that you read it soon. Twain warns us that:</p>

<BLOCKQUOTE>
<p>Persons attempting to find a motive in this narrative will be prosecuted; persons attempting to find a moral in it will be banished; persons attempting to find a plot in it will be shot.</p>
</BLOCKQUOTE>

<p>Nevertheless, here at The Journeyman's Shop we think there are important lessons in this book. The one I want to look at this month comes from a discussion between Tom Sawyer and Huckleberry Finn about the best way to help the runaway slave Jim to escape from the folks who have captured him. Tom says they need a saw, and Huck asks him, "What do we want of a saw?":</p>

<BLOCKQUOTE>
<p>"What do we want of a saw? Hain't we got to saw the leg of Jim's bed off, so as to get the chain loose?"</p>
<p>"Why, you just said a body could lift up the bedstead and slip the chain off."</p>
<p>"Well, if that ain't just like you, Huck Finn. You can get up the infant-schooliest ways of going at a thing. Why, hain't you ever read any books at all? &#151; Baron Trenck, nor Casanova, nor Benvenuto Chelleeny, nor Henri IV, nor none of them heroes? Who ever heard of getting a prisoner loose in such an old-maidy way as that? No; the way all the best authorities does is to saw the bed leg in two, and leave it just so, and swallow the sawdust, so it can't be found, and put some dirt and grease around the sawed place so the very keenest seneskal can't see no sign of its being sawed, and thinks the bed leg is perfectly sound. Then, the night you're ready, fetch the leg a kick, down she goes; slip off your chain, and there you are."</p>
</BLOCKQUOTE>

<p>In order to make our code more reliable and our development processes more predictable, we learn and apply abstract principles to software development. Unfortunately, we tend to become like Tom: we simply do things the way we've been told we're supposed to do them, without thinking about whether the advice we've received is appropriate in this particular case. The structured programming revolution has given us programmers who blanch when they see a return statement anywhere other than at the end of a function. The object-oriented revolution has given us programmers who write elaborate classes to perform what should be simple tasks. To become good programmers, we must learn to recognize the situations where we don't need to swallow the sawdust.</p>
<p>For example, in the comp.lang.c++ newgroup, I recently made the statement that if the design of a class hierarchy does not call for deleting objects of derived types through pointers to the base type, then the base class does not need to have a virtual destructor. Now, that's a fairly simple statement, and a practical one. It's the other side of the rule stated in the C++ language definition, that the effect of deleting a derived object through a pointer to its base is undefined if the base class does not have a virtual destructor. Most of the replies I received didn't discuss the practical meaning of this statement, however, and instead simply parroted a common design guideline that classes with virtual functions should have a virtual destructor. I think that's a very useful guideline, but like most guidelines, it's an oversimplification.</p>
<p>The reason the guideline is useful is that it is easier to apply than the true rule, which is the one that I stated earlier. The guideline provides a simple test: if there are virtual functions, there should be a virtual destructor. This guideline works fairly well, because most classes that have virtual functions are intended to be used as polymorphic bases. That is, objects of derived types will be manipulated through pointers to the base. That often means that the objects will be contained in collections that deal only in base pointers, and to clean up such a collection properly those objects will be deleted through pointers to their base. So the base should have a virtual destructor.</p>
<p>On the other hand, consider a mixin class that defines an interface for writing objects to a file:</p>

<pre>
class streamable
{
private:
    virtual bool
    write(ostream&amp;) const = 0;
};
</pre>

<p>The documentation for this class tells you that you should derive from it when you want to be able to write objects to a file, and override <B>streamable::write</B> to write out the data contained in your class. To write an object, call the global function <B>write</B>:</p>

<pre>
bool
write(ostream&amp;, const streamable&amp;);
</pre>

<p>This function will write out the object that you call it on, as well as any streamable objects contained in that object, and all streamable objects referred to by pointers or references contained in that object.</p>
<p>The coding guideline would dictate that <B>streamable</B> have a virtual destructor. However, a virtual destructor is not needed here, because <B>streamable</B> is not intended to be used as a polymorphic base. In particular, the <B>write</B> function will never delete a streamable object, so there is no need for <B>streamable</B> to have a virtual destructor.</p>
<p>Some folks will cling to their guideline, however, and claim that the cost of providing a virtual destructor is negligible, so we may as well do it. Granted, adding a virtual destructor isn't like swallowing sawdust, but it is misleading. Someone will look at that virtual destructor and conclude that it's okay to delete an object derived from <B>streamable</B> through a base pointer. And when they do it, they'll discover that they don't understand what it actually does. That's because when we wrote it we didn't understand what it was supposed to do. We didn't design it, we simply included it because we were supposed to. Don't do that. Design your classes so that they meet well-defined requirements. As Scott Meyers says about the guidelines in his book <I>Effective C++</I>,</p>

<BLOCKQUOTE>
<p>If you follow all the guidelines all the time, you are unlikely to fall into the most common traps surrounding C++, but by their very nature guidelines have exceptions. That's why each item has an explanation. The explanations are the most important part of the book, because only by understanding the rationale behind an item can you reasonably determine whether it applies to the program you are developing and to the unique constraints under which you toil.</p>
</BLOCKQUOTE>

<p>When you see a programming guideline, make sure that you understand the reason for that guideline. Then you'll understand when you should ignore it.</p>

<h4><FONT COLOR="#000080">Initialization and Cleanup in C++</FONT></H4>

<p>Last month we talked about how to supply initial values to data objects in C, and about how to make sure that any code that our application needs to run to clean things up will be run when the application terminates. This month we're going to talk about the same things, but in C++. In C we have a constant tension between wanting to defer initializing data objects until we have enough information to initialize them correctly and risking accidental use of such data objects before they have been properly initialized. C++ eliminates this problem, at least in the course of ordinary programming. If you go out of your way to write perverse code you can evade the initialization and cleanup rules that C++ imposes, but anyone who writes that sort of code deserves whatever happens to them. Here in The Journeyman's Shop we don't write perverse code. We give the C++ compiler a fair chance at handling initialization and cleanup correctly.</p>
<p>Of course, handling initialization and cleanup correctly also depends on using classes that have been written correctly. We're not going to talk about that this month. Rather, we'll talk about how the existence of constructors and destructors affects the initialization and cleanup code that we looked at last month. We'll leave the issues involved in writing sensible constructors and destructors for another time.</p>
<p>Assuming that we're using a class with a sensible constructor and destructor, C++ in most cases guarantees that the constructor will be run before you can use any member functions on an object, and that the destructor will be run when you dispose of an object. This does not apply to built-in types, so initialization of integers, pointers, etc. is subject to the same rules as in C. Further, since a struct written for use in C does not have a constructor or destructor, when you move C code into C++ you won't automatically get initialization of your structs.</p>

<h4><FONT COLOR="#000080">Auto Objects</FONT></H4>

<p>When you define an object inside a function without the <B>static</B> keyword, the compiler generates code to call the object's constructor at the point in the code where the definition occurs, and it generates code to call the object's destructor at the curly brace where the object goes out of scope. When more than one object is defined in the same scope, their destructors are run in the reverse order of their construction.</p>
<p>To see this, let's look at a simple example:</p>

<pre>
#include &lt;iostream&gt;
using std::cout;

class instrument
{
public:
    instrument() : obj_id(count++)
        {
        cout &lt;&lt; "instrument ctor("
             &lt;&lt; obj_id &lt;&lt; ")\n";
        }
    ~instrument()
        {
        cout &lt;&lt; "instrument dtor("
             &lt;&lt; obj_id &lt;&lt; ")\n";
        }
private:
    int obj_id;
    static int count;       
};

int instrument::count;

int main()
{
instrument i0;
instrument i1;
cout &lt;&lt; "in function body\n";
return 0;
}
</pre>

<p>When you run this example you should see the following output:</p>

<pre>
instrument ctor(0)
instrument ctor(1)
in function body
instrument dtor(1)
instrument dtor(0)
</pre>

<p>Now, this code may not look very impressive, but the use of constructors and destructors gives class designers a very powerful mechanism to help ensure the consistency of their classes. In particular, this mechanism is useful when a class needs to obtain a resource, such as memory, or a mutex lock, or a file handle, and make sure that resource is released when the class no longer needs it. The class designer should use the constructor to obtain the resource and the destructor to release it. From our current perspective as users of such a class this use of constructors and destructors makes our work much easier. Consider what we'd have to write to achieve something similar in C:</p>

<pre>
#include &lt;stdio.h&gt;

static int count;

typedef struct
{
int obj_id;
} instrument;

void init_instrument(instrument *inst)
{
inst-&gt;obj_id = count++;
printf("instrument ctor(%d)\n", inst-&gt;obj_id);
}

void cleanup_instrument(instrument *inst)
{
printf("instrument dtor(%d)\n", inst-&gt;obj_id);
}

int main()
{
instrument i0;
instrument i1;
init_instrument(&amp;i0);
init_instrument(&amp;i1);
printf("in function body\n");
cleanup_instrument(&amp;i1);
cleanup_instrument(&amp;i0);
return 0;
}
</pre>

<p>I hope you'll agree with me that the C++ version of <B>main</B> is much simpler than the C version. Of course, you have to get used to the fact that defining variables can result in constructor and destructor calls, but once you've made that adjustment, its much easier to read and understand the C++ code.</p>
<p>Now construction and destruction is a rather elementary topic, and I hope you're not offended that I spent so much time on it. I think it's one of the most powerful features of C++. The guarantee that auto objects will be properly initialized and disposed of goes a long way toward making our code safer. The compiler does all the heavy lifting for us. It won't forget to clean up our objects when we're finished with them.</p>
<p>This points up what I regard as a major flaw in Java: it has nothing that corresponds to a destructor. I mentioned earlier three examples of resources that need to be released when we're finished with them: memory, mutex locks, and file handles. Java has its own mechanisms for handling two of these resources: garbage collection handles memory, and synchronized blocks take care of mutex locks. But there's no way you can guarantee that a file handle will be closed when you no longer need it. You've got to write that code yourself, every place where it's appropriate. That means you have to know the details of the class you're using, so you can write appropriate cleanup code for it. For example, let's try to write the sample program that we've been looking at in Java:</p>

<pre>
class Instrument
{
public Instrument()
    {
    obj_id = count++;
    System.out.println ("Instrument ctor(" + obj_id + ")");
    }
public void cleanup()
    {
    System.out.println ("Instrument dtor(" + obj_id + ")");
    }
private int obj_id;
private static int count;
}

public class Test
{
public static void
main(String args[])
    {
    Instrument i0 = new Instrument();
    Instrument i1 = new Instrument();
    System.out.println ("in function body");
    i1.cleanup();
    i0.cleanup();
    }
}
</pre>

<p>Test.main</B> has to explicitly call <B>Instrument</B>'s <B>cleanup</B> method. Java will not do this for you.</p>
<p>You may have noticed that I didn't use the class's <B>finalize</B> method to handle the cleanup. It would be possible to write the class <B>Instrument</B> with a method named <B>finalize</B> instead of the method named <B>cleanup</B>, but that isn't quite the same thing. Java will run the <B>finalize</B> method only when the memory used by an <B>Instrument</B> object is being recycled. That is, you cannot predict when the code in <B>finalize</B> will be run. Further, if the class is using a system resource that is not recycled by the operating system, then you have to change Java's default setting to tell it to run finalizers for all objects that haven't yet been finalized when the program terminates. By default, Java does not run any remaining finalizers at program termination.</p>
<p>Now let's make the program a bit more complicated. Instead of simply printing out that we're in the function body, let's check the number of command-line arguments. If no arguments were passed, let's display an error message and exit. Our first pass at the C code might look like this:</p>

<pre>
#include &lt;stdlib.h&gt;

int main(int argc, char *argv[])
{
instrument i0;
instrument i1;
init_instrument(&amp;i0);
init_instrument(&amp;i1);
if (argc == 1)
    {
    printf("missing argument\n");
    return EXIT_FAILURE;
    }
printf("in function body\n");
cleanup_instrument(&amp;i1);
cleanup_instrument(&amp;i0);
return 0;
}
</pre>

<p>When we compile this program and run it with no command-line arguments, we get the following output:</p>

<pre>
instrument ctor(0)
instrument ctor(1)
missing argument
</pre>

<p>Our cleanup code didn't run. The problem, of course, is that we returned from the middle of <B>main</B> without running the cleanup code. That's one of the major reasons that structured programming prohibits having more than one exit point from a function: it's easy to forget to do the necessary cleanup. We can fix this easily, by putting the two alternate execution paths in the two branches of our <B>if</B> statement and adding a status variable:</p>

<pre>
#include &lt;stdlib.h&gt;

int main(int argc, char *argv[])
{
int status;
instrument i0;
instrument i1;
init_instrument(&amp;i0);
init_instrument(&amp;i1);
if (argc == 1)
   {
   printf("missing argument\n");
   status = EXIT_FAILURE;
   }
else
   {
   printf("in function body\n");
   status = 0;
   }
cleanup_instrument(&amp;i1);
cleanup_instrument(&amp;i0);
return status;
}
</pre>

<p>This works, but look at how the control logic and the details of the code are intertwined: we start out by creating a status variable; then we create and initialize the two variables that we need; then we check the command line and issue an appropriate message and set the status variable; then we clean up our two variables; then we return the value of the status variable. That's a lot of bookkeeping. With destructors it's much simpler:</p>

<pre>
#include &lt;stdlib.h&gt;

int main(int argc, char *argv[])
{
instrument i0;
instrument i1;
if (argc == 1)
    {
    cout &lt;&lt; "missing argument\n";
    return EXIT_FAILURE;
    }
cout &lt;&lt; "in function body\n";
return 0;
}
</pre>

<p>The code is much more cleanly encapsulated: the error condition is handled entirely within a single block. No other code in <B>main</B> has to do anything in order to return the right status code.</p>
<p>The Java version suffers from a similar problem. We can put both our mainline code and our error code in separate branches of an <B>if</B> statement in order to make sure that cleanup is handled properly:</p>

<pre>
public class Test
{
public static void
main(String args[])
    {
    Instrument i0 = new Instrument();
    Instrument i1 = new Instrument();
    if (args.length == 0)
        System.out.println
            ("missing argument");
    else
        System.out.println
            ("in function body");
    i1.cleanup();
    i0.cleanup();
    }
};
</pre>

<p>Although this code looks better than the C version, that's mostly because in Java <B>main</B> doesn't return a value, so we don't have to keep track of a status code in this particular case. If this function returned a value we'd have to set it in both branches of the <B>if</B> statement, and do the cleanup at the end <a href="#1">[1]</a> before returning that value, just as we did in C.</p>
<p>A better solution in Java is to wrap the core code in a <B>try</B> block and put the cleanup code in a <B>finally</B> clause:</p>

<pre>
public class Test
{
public static void main(String args[])
    {
    Instrument i0 = new Instrument();
    Instrument i1 = new Instrument();
    try
        {
        if (args.length == 0)
            {
            System.out.println("missing argument");
            return;
            }
        System.out.println("in function body");
        }
    finally
        {
        i1.cleanup();
        i0.cleanup();
        }
    }
};
</pre>

<p>Compare this with the C++ code that does the same thing <a href="#2">[2]</a>, and you'll see that having destructors lets you write much cleaner code.</p>

<h4><FONT COLOR="#000080">Arrays of Objects</FONT></H4>

<p>When you create an array of objects in C++, you run into a significant constraint: objects in arrays can be initialized only with the default constructor. We didn't look at constructors that take arguments in the preceding section, but as you probably know, a class can have multiple constructors, and you can pass arguments to them:</p>

<pre>
class instrument
{
public:
    instrument() : obj_id(count++)
        {
        cout &lt;&lt; "instrument ctor("
             &lt;&lt; obj_id &lt;&lt; ")\n";
        }
    instrument(int val) : obj_id(val)
        {
        cout &lt;&lt; "instrument ctor("
             &lt;&lt; obj_id &lt;&lt; ")\n";
        }
    ~instrument()
        {
        cout &lt;&lt; "instrument dtor("
             &lt;&lt; obj_id &lt;&lt; ")\n";
        }
private:
    int obj_id;
    static int count;       
};
</pre>

<p>Now we can create an object of type <B>instrument</B> that has an arbitrary value for <B>obj_id</B>, not just the one that we generate internally:</p>

<pre>
int main()
{
instrument i0;          // uses default ctor
instrument i1(3);       // uses ctor that takes int
cout &lt;&lt; "in function body\n";
return 0;
}
</pre>

<p>If you run this code you'll see that the output is now:</p>

<pre>
instrument ctor(0)
instrument ctor(3)
in function body
instrument dtor(3)
instrument dtor(0)
</pre>

<p>You can't do this when you create an array of objects in C++. You can only use the default constructor, that is, the constructor that takes no arguments. For example:</p>

<pre>
int main()
{
instrument i0[3];       // array of 3 objects
cout &lt;&lt; "in function body\n";
return 0;
}
</pre>

<p>The output of this program is:</p>

<pre>
instrument ctor(0)
instrument ctor(1)
instrument ctor(2)
in function body
instrument dtor(2)
instrument dtor(1)
instrument dtor(0)
</pre>

<h4><FONT COLOR="#000080">Static Initializers</FONT></H4>

<p>Initialization of static objects in C++ can be tricky. That's because initialization can involve executing code, and the compiler has to figure out when to run that code. The C++ language definition has some weasel words here: the rule is that static objects must be initialized before <B>main</B> is entered or before the use of any object in the translation unit that contains the static object. The provision about initializing before use of any object in the translation unit is there to allow for dynamically loaded libraries, whose initializers can't be run until the library is actually loaded.</p>
<p>In cases that don't involve dynamically loaded libraries it's easy to see how this works:</p>

<pre>
instrument istatic;

int main()
{
instrument i0(3);
cout &lt;&lt; "in function body\n";
return 0;
}
</pre>

<p>Here, the initializer for <B>istatic</B> will be run before <B>main</B> begins, and the initializer for <B>i0</B> will run upon entry to <B>main</B>:</p>

<pre>
instrument ctor(0)
instrument ctor(3)
in function body
instrument dtor(3)
instrument dtor(0)
</pre>

<p>Further, static objects defined in the same translation unit are initialized in the order of their definitions:</p>

<pre>
instrument i0(1);
instrument i1(3);

int main()
{
cout &lt;&lt; "in function body\n";
return 0;
}
</pre>

<p>Here, <B>i0</B> will be initialized first, then <B>i1</B>.</p>
<p>The point where this gets tricky is when you have more than one translation unit in your application. The language definition doesn't say anything about the order in which static objects defined in separate translation units will be initialized. This was a deliberate decision: it's hard to come up with a rule for initialization order that avoids possible problems and is easy to understand. If you define static objects that don't depend on one another you shouldn't have any problems:</p>

<pre>
test1.cpp
&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;
instrument i0(1);

test2.cpp
&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;
instrument i1(3);

int main()
{
cout &lt;&lt; "in function body\n";
return 0;
}
</pre>

<p>If you compile and link these two source files (with the appropriate <B>#include</B> directives, of course) the output from the program can be either</p>

<pre>
instrument ctor(0)
instrument ctor(3)
in function body
instrument dtor(3)
instrument dtor(0)
</pre>

<p>or</p>

<pre>
instrument ctor(3)
instrument ctor(0)
in function body
instrument dtor(0)
instrument dtor(3)
</pre>

<p>Don't count on either of these two orders. Your compiler may fool you. If the order of initialization is important, put the objects in the same file. Or use one of the tricks that we'll talk about next time.</p>

<h4><FONT COLOR="#000080">Local Statics</FONT></H4>

<p>Local statics in C++ act pretty much the same as they do in C: they are initialized the first time that the flow of control in the program reaches them. However, the compiler has to generate code to invoke destructors for local statics. The problem here is that if the local static hasn't been constructed, then the compiler shouldn't run its destructor. Further, just like all other statics, the compiler has to make sure that destructors for local statics are run at the right time; that is, destructors must be run in the reverse order of construction. If you think about it a bit you'll see that there really is no way for the compiler to generate a simple function that will simply call all of the destructors in the right order: it doesn't know what order they will be constructed in, so it doesn't know what order their destructors should be called in. This means that the compiler has to generate code that will keep track of the order of construction, and undo it properly. Before you do anything tricky in destructors for static objects, be sure that your compiler gets the order right. Better yet, don't do tricky things there. It's just too risky.</p>

<h4><FONT COLOR="#000080">atexit functions and Destructors for Static Objects</FONT></H4>

<p>Be very, very careful if you mix <B>atexit</B> functions and static objects with destructors. The rules are pretty clear: functions registered with <B>atexit</B> are interleaved with destructors for static objects in the reverse order of their registration. If you create a static object, then register an <B>atexit</B> function, then create another static object, the compiler should generate code that invokes the destructor for the second object, calls the <B>atexit</B> function, then invokes the destructor for the first object. If your code relies on this sequence being handled correctly it is very likely to crash. If you're concerned about writing portable code (as we are in The Journeyman's Shop) don't rely on intermixing <B>atexit</B> functions with static destructors.</p>

<h4><FONT COLOR="#000080">Coming Up</FONT></H4>

<p>Next month we'll wrap up this discussion of initialization and cleanup by looking at techniques for handling more complex initializations. We'll look at things like deferred initialization, the nifty-counter trick, and placement <B>new</B>. See you then! o</p>

<h4><FONT COLOR="#000080">Notes</FONT></H4>

<p><a name="1"></a>[1]  Don't even think about duplicating the cleanup code in both branches of the <B>if</B> statement. That's a recipe for disaster, as well as a good technique for making your code unreadable.</p>
<p><a name="2"></a>[2]  Actually, this code doesn't quite do the same thing as the C++ code: it doesn't protect against the possibility that the constructor for <B>i1</B> throws an exception. If that happens, we still need to clean up <B>i0</B>, and for that we need another <B>try</B> block and another <B>finally</B> clause.</p>

<p><i>Pete Becker is Technical Project Leader for Dinkumware, Ltd. He spent eight years in the C++ group at Borland International, both as a developer and manager. He is a member of the ANSI/ISO C++ standardization committee. He can be reached by email at <B>petebecker@acm.org</B>.</i></p>


</BLOCKQUOTE>
</BODY>
</HTML>
