<HTML><HEAD>
<TITLE>April 1999/C++ Theory and Practice/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2: table.cpp &#151; cross-reference table implementation</A></h4>
<pre>
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

#include "table.h"

struct list_node
    {
    unsigned number;
    list_node *next;
    };

struct cross_reference_table::tree_node
    {
    char *word;
    list_node *first, *last;
    tree_node *left, *right;
    };

cross_reference_table::tree_node *
cross_reference_table::add_tree
    (tree_node *t, char const *w,
     unsigned n)
    {
    int cmp;
    if (t == NULL)
        {
        t = new tree_node;
        t-&gt;word = new char [strlen(w) + 1];
        strcpy(t-&gt;word, w);
        t-&gt;first = new list_node;
        t-&gt;first-&gt;number = n;
        t-&gt;first-&gt;next = NULL;
        t-&gt;last = t-&gt;first;
        t-&gt;left = t-&gt;right = NULL;
        }
    else if((cmp = strcmp(w, t-&gt;word))&lt;0)
        t-&gt;left = add_tree(t-&gt;left, w, n);
    else if (cmp &gt; 0)
        t-&gt;right =
            add_tree(t-&gt;right, w, n);
    else if (n != t-&gt;last-&gt;number)
        {
        t-&gt;last-&gt;next = new list_node;
        t-&gt;last = t-&gt;last-&gt;next;
        t-&gt;last-&gt;number = n;
        t-&gt;last-&gt;next = NULL;
        }
    return t;
    }

void
cross_reference_table::put_tree
    (tree_node const *t)
    {
    if (t != NULL)
        {
        put_tree(t-&gt;left);
        printf("%12s:", t-&gt;word);
        list_node const *p;
        for (p = t-&gt;first; 
             p != NULL; 
             p = p-&gt;next)
            printf(" %4d", p-&gt;number);
        printf("\n");
        put_tree(t-&gt;right);
        }
    }

</pre>
</BODY>
</HTML>
