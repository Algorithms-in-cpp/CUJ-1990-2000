<HTML><HEAD>
<TITLE>April 1999/C++ Theory and Practice/Listing 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 3: table.cpp &#151; cross-reference table with deeply const members</A></h4>
<pre>
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

#include "table.h"

struct list_node
    {
public:
    unsigned number;
    list_node *&amp;next();
    list_node const *next() const;
private:
    list_node *_next;
    };

inline
list_node *&amp;list_node::next()
    {
    return _next;
    }

inline
list_node const *list_node::next() const
    {
    return _next;
    }

struct cross_reference_table::tree_node
    {
public:
    char *&amp;word();
    char const *word() const;
    list_node *&amp;first();
    list_node const *first() const;
    list_node *&amp;last();
    list_node const *last() const;
    tree_node *&amp;left();
    tree_node const *left() const;
    tree_node *&amp;right();
    tree_node const *right() const;
private:
    char *_word;
    list_node *_first, *_last;
    tree_node *_left, *_right;
    };

inline
char *&amp;cross_reference_table::tree_node::word()
    {
    return _word;
    }

inline
char const *
cross_reference_table::tree_node::word() const
    {
    return _word;
    }

inline
list_node *&amp;
cross_reference_table::tree_node::first()
    {
    return _first;
    }

inline
list_node const *
cross_reference_table::tree_node::first() const
    {
    return _first;
    }

inline
list_node *&amp;
cross_reference_table::tree_node::last()
    {
    return _last;
    }

inline
list_node const *
cross_reference_table::tree_node::last() const
    {
    return _last;
    }

inline
cross_reference_table::tree_node *&amp;
cross_reference_table::tree_node::left()
    {
    return _left;
    }

inline
cross_reference_table::tree_node const *
cross_reference_table::tree_node::left() const
    {
    return _left;
    }

inline
cross_reference_table::tree_node *&amp;
cross_reference_table::tree_node::right()
    {
    return _right;
    }

inline
cross_reference_table::tree_node const *
cross_reference_table::tree_node::right() const
    {
    return _right;
    }

cross_reference_table::tree_node *
cross_reference_table::add_tree
    (tree_node *t, char const *w, unsigned n)
    {
    int cmp;
    if (t == NULL)
        {
        t = new tree_node;
        t-&gt;word() = new char [strlen(w) + 1];
        strcpy(t-&gt;word(), w);
        t-&gt;first() = new list_node;
        t-&gt;first()-&gt;number = n;
        t-&gt;first()-&gt;next() = NULL;
        t-&gt;last() = t-&gt;first();
        t-&gt;left() = t-&gt;right() = NULL;
        }
    else if ((cmp = strcmp(w, t-&gt;word())) &lt; 0)
        t-&gt;left() = add_tree(t-&gt;left(), w, n);
    else if (cmp &gt; 0)
        t-&gt;right() = add_tree(t-&gt;right(), w, n);
    else if (n != t-&gt;last()-&gt;number)
        {
        t-&gt;last()-&gt;next() = new list_node;
        t-&gt;last() = t-&gt;last()-&gt;next();
        t-&gt;last()-&gt;number = n;
        t-&gt;last()-&gt;next() = NULL;
        }
    return t;
    }

void
cross_reference_table::put_tree(tree_node const *t) const
    {
    if (t != NULL)
        {
        put_tree(t-&gt;left());
        printf("%12s:", t-&gt;word());
        list_node const *p;
        for (p = t-&gt;first(); p != NULL; p = p-&gt;next())
            printf(" %4d", p-&gt;number);
        printf("\n");
        put_tree(t-&gt;right());
        }
    }



</pre>
</BODY>
</HTML>
