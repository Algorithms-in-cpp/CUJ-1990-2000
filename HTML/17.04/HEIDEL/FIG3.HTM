<HTML><HEAD>
<TITLE>April 1999/Using Asynchronous Calls in COM/Figure 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Figure 3: Class ResultIOU_ implementation</A></h4>
<pre>
template&lt;class T&gt;
inline ResultIOU_&lt;T&gt;::ResultIOU_()
: resultReady_(false), aborted_(false)
{
}

template&lt;class T&gt;
inline ResultIOU_&lt;T&gt;::~ResultIOU_()
{
}

template&lt;class T&gt;
inline 
ResultIOU_&lt;T&gt;::ResultIOU_
    (const ResultIOU_&amp; rhs)
: resultReady_(rhs.resultReady_), 
  aborted_(rhs.aborted_), t_(rhs.t_), 
  closedEvent_(rhs.closedEvent_)
{
}

template&lt;class T&gt;
inline ResultIOU_&lt;T&gt;&amp;
ResultIOU_&lt;T&gt;::operator=
    (const ResultIOU_&amp; rhs)
{
    resultReady_ = rhs.resultReady;
    aborted_ = rhs.aborted_;
    t_ = rhs.t_;
    closedEvent_ = rhs.closedEvent_;

    return *this;
}

template&lt;class T&gt;
inline void ResultIOU_&lt;T&gt;::Abort()
{
    Mutex mutex(mutex_);

    // set result ready flag
    resultReady_ = true;
    
    // set aborted flag
    aborted_ = true;
}

template&lt;class T&gt;
inline void ResultIOU_&lt;T&gt;::Close(T t)
{
    Mutex mutex(mutex_);

    if (aborted_)
        return;

    t_ = t;
    resultReady_ = true;

    // Signal threads blocked in _redeem()
    closedEvent_.Signal();

    mutex.Release();
}

template&lt;class T&gt;
inline T ResultIOU_&lt;T&gt;::Redeem()
{
    Mutex mutex(mutex_);

    while (!resultReady_)
    {
        mutex.Release();
        closedEvent_.Wait();
    }

    return t_;
}

template&lt;class T&gt;
inline bool 
ResultIOU_&lt;T&gt;::Redeemable() const
{
    Mutex mutex(mutex_);

    return resultReady_;
}


template&lt;class T&gt;
inline bool 
ResultIOU_&lt;T&gt;::Aborted() const
{
    Mutex mutex(mutex_);

    return aborted_;
}

</pre>
</BODY>
</HTML>
