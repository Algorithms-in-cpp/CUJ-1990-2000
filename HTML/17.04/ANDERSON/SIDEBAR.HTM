<HTML>
<HTML><HEAD>
<TITLE>April 1999/CORBA Load Balancing with VisiBroker/Sidebar</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<H3 align=center><FONT FACE="Garamond" COLOR="#000080">Vendor Approaches to Load Distribution</FONT></H3>

<hr>
<BLOCKQUOTE>

<p>Both Orbix and VisiBroker include the ability to distribute requests across multiple instances of an interface, albeit in very different fashions. VisiBroker supports request distribution through its Smart Agent architecture, while Orbix's ability relies on an extension to its Naming Service.</p>
<p>The VisiBroker Smart Agent architecture is implemented through the <B>osagent</B>, which, among other things, is a distributed directory service used by clients to locate needed implementations. When a client binds to an interface, the <B>osagent</B> selects from among all known implementations of that interface in a round-robin fashion.</p>
<p>Iona took a different approach by extending its Naming Service to include what it calls Object Groups. An Object Group is a set of objects sharing a common name in the Naming Service. When an application resolves that shared name, the Naming Service returns a reference to one of the objects within that group, based on the group's selection policy defined when the group was created. The only policies available are round robin and random.</p>
<p>Although implemented in decidedly different fashions, both of these mechanisms suffer from the same limitations: they are not portable, intelligent, or extensible. Orbix's Object Groups are not available under any other implementation of the Naming Service. Further, Object Groups require additional management by the application developer, since objects must be manually added to, and removed from, the group. And, in most cases, the developer must ensure that all objects within an Object Group implement the same interface.</p>
<p>That last restriction is difficult to enforce, since anyone can add an object to an Object Group. Smart Agent alleviates management problems associated with Object Groups by providing a dynamic directory service in which all globally scoped objects are automatically registered and unregistered with the <B>osagent</B>. Request distribution and fault tolerance facilities are available only when the application is using the non-portable <B>_bind</B> method to obtain an object reference.</p>
<p>While additional management requirements and lack of portability are concerns, in most situations the lack of control over the selection mechanism is considered the more severe limitation. This relates to a lack of intelligence in that neither VisiBroker nor Orbix take into account any sort of load in making the object selection. In their defense, trying to define a universally acceptable measure of load would be a futile task. The next best approach would be using the ability to customize their selection heuristics. Unfortunately, neither Object Groups nor Smart Agent allow this. Their mechanisms are fixed, and the developer has only limited ability to influence them and no ability to override them.</p>

</BLOCKQUOTE>
</BODY>
</HTML>
