<HTML>   
     <HEAD>
<TITLE>April 1999/A Generic Iterator for Strings</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocapr.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">A Generic Iterator for Strings</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">David Lorde</FONT></H3>

<BLOCKQUOTE>

<p>An iterator over words is a handy tool, but an iterator over arbitrary tokens is even handier.</p>
</BLOCKQUOTE>
<HR>
<BLOCKQUOTE>
<p>When I saw James M. Curran's description of his word iterator (<I>CUJ</I>, August 1998, p. 82), it struck me that this was just the kind of thing I needed in my current work to parse a delimited string into tokens. The only problem was that Curran's word iterator skipped whitespace to find its tokens, whereas mine would have to skip various arbitrary delimiter strings depending on the situation. This small but significant difference in requirements suggested that a more flexible iterator would be useful, one that could be adapted to use any required method of finding tokens in a string.</p>
<p>The Standard C++ Library achieves this kind of flexibility by assembling the required functionality from a kit of template classes, functions, and function object types (functors). Examination of Curran's <B>WordIter</B> class reveals that the word-finding process is neatly encapsulated in the <B>findWord</B> function, while the rest of the class is all iterator interface and housekeeping. I found that the <B>findWord</B> function could be replaced at will with the desired token-finding function, so <B>WordIter</B> could become the flexible iterator I was looking for.</p>
<p>In this article I explain how this is accomplished, and how to substitute a custom token-finder function for <B>findWord</B>.</p>

<h4><FONT COLOR="#000080">Using Function Objects</FONT></H4>

<p>Using replaceable functions usually means passing function pointers as arguments and storing them as variables. In the Standard C++ Library, the types of function arguments are usually template parameters, which allows function objects to be passed as arguments as well as function pointers. Function object types are classes that overload <B>operator()</B> so they can be used by name, with function syntax. For example:</p>

<pre>
class Functor
{
public:
   Functor(int arg) : data(arg) {}

   int
   operator() (int arg1, int arg2)
   { return (arg1 + arg2) - data; }

private:
   int data;
};

Functor foo(5);      // Construct foo

// Call foo::operator()
int bar = foo(1, 2);
</pre>

<p>As class objects, functors have an advantage over ordinary functions. They can maintain non-static state data (as member variables) between invocations. This means that functors can be initialized with data, which will be available whenever the functors are subsequently used. The function-object model is ideal for the token finder function, allowing it to be initialized with the required delimiter string before repeated use in the token-searching process. Clearly, the iterator over words now becomes a specialization of the generic iterator over tokens, with a word-finding function object as its argument.</p>

<h4><FONT COLOR="#000080">Implementation</FONT></H4>

<p>The conversion of <B>WordIter</B> to a generic string iterator is straightforward. The <B>WordIter</B> class becomes a template class (which I have renamed <B>TokenIter</B>), which takes the template argument <B>TokenFinder</B>. The <B>TokenFinder</B> function object (or function pointer) is stored by value in the private member variable <B>findToken</B>. <B>TokenFinder</B> must change the <B>TokenIter</B> <B>start</B>, <B>end</B>, and <B>length</B> variables as did the original <B>findWord</B> function in the <B>WordIterator</B>. As <B>TokenFinder</B> is not a member of the <B>iterator</B> class, I have changed the function signature to take the <B>TokenIter</B> start and end pointers by reference so they can be updated, and to return the length of the token.</p>
<p>As a result, all variations on <B>TokenFinder</B> for use with <B>TokenIter</B> must overload <B>operator()</B> in the following manner:</p>

<pre>
int operator() (const char*&amp; start, const char*&amp; end);
</pre>

<p>On entering this function, <B>end</B> points to the beginning of the string, and <B>start</B> is undefined. On return, if a token is found, <B>start</B> must point to the first character of the token, and <B>end</B> must point to the first character past the end of the token. If no token is found, both should point to the terminating null. The function must return the length of the token pointed to by <B>start</B>, or zero if no token is found.</p>

<h4><FONT COLOR="#000080">Standard Library Function Objects</FONT></H4>

<p>When implementing function objects, for use with the Standard C++ Library, that take one or two arguments (known as unary and binary functions respectively), it is good practice to derive them from the corresponding Standard C++ Library template structs <B>unary_function</B> and <B>binary_function</B>. These structs use their template arguments to define standard typenames for the <B>operator()</B> function arguments and return value, thus allowing both member functions and external code to refer to these types transparently:</p>

<pre>
class Functor
   : public binary_function&lt;string,
               int, bool&gt;
{
public:
   // function bool operator()
   //     (string arg1, int arg1)
   // may be declared as:

   result_type operator()
       (first_argument_type arg1,
        second_argument_type arg2);       
};
</pre>

<p>In this particular case, I decided not to derive <B>TokenFinder</B> from <B>binary_function</B> because its function signature is expressly coupled with <B>TokenIter</B>, and it is not likely to be used with Standard C++ Library functions or other algorithms.</p>
<p><A HREF="list1.htm">Listing 1</A>, <B>TokenIter.h</B>, shows the interface for the <B>TokenIter</B> class. <A HREF="list2.htm">Listing 2</A>, <B>TokenFinder.h</B>, shows the interface for the <B>TokenFinder</B> class. <A HREF="list3.htm">Listing 3</A>, <B>worditer.h</B>, shows how the original <B>WordIter</B> class now becomes a specialization of the <B>TokenIter</B> class. I have declared a <B>WordIter</B> typedef to show how code using the old <B>WordIter</B> class can be switched to the the new version without change (although this is not strictly necessary, as the <B>WordFinder</B> function object can be used directly with <B>TokenIter</B>).</p>
<p><A HREF="list4.htm">Listing 4</A>, <B>TokenIterTest.cpp</B>, is a test stub for the generic <B>TokenIter</B> class and <B>WordIter</B>.</p>

<p><i>Dave Lorde is a Senior Programmer/Analyst developing client-server financial applications for Financial Times Information in London, England. He has been programming for the past 16 years, the last six using C++ with Microsoft Windows and MFC. He can be reached at <B>dlorde@cix.compulink.co.uk</B> or <B>david.lorde@ft.com</B>. The views expressed above are those of the author alone and do not necessarily reflect the views of Financial Times Information Limited.</i></p>

<h4><a href="../../../source/1999/apr99/lorde.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY>
</HTML>
