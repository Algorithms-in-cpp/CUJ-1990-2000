<HTML>   
     <HEAD>
<TITLE>April 1999/Uncaught Exceptions</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocapr.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Uncaught Exceptions: Great Expectations</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Bobby Schmidt</FONT></H3>

<BLOCKQUOTE>

<p>Some things are standard and don't need enforcing, some are standard but unenforced, some are enforced but nonstandard. Bobby explains which is which.</p>
</BLOCKQUOTE>
<HR>
<BLOCKQUOTE>
<p><i>Copyright &copy; 1999 Robert H. Schmidt</i></p>

<p><i>To ask Bobby a question about C or C++, send email to </i><B>cujqa@mfi.com</B><i>, use subject line: Questions and Answers, or write to Bobby Schmidt, C/C++ Users Journal, 1601 W. 23rd St., Ste. 200, Lawrence, KS 66046.</i></p>

<p>I lied.</p>
<p>Okay, perhaps "lied" is too strong. Let's just say I overcommitted. When I started this column, I thought I'd be able to answer each question reasonably quickly, even if that answer were brief or vague. Unfortunately, I both underestimated the number and complexity of questions I'd get, and overestimated my available time to produce answers.</p>
<p>Given this reality, here's a more credible charter:</p>

<UL><LI>If you need an answer immediately, you're better off asking a peer or teacher, or trying your luck on Usenet.</LI>
    <LI>If I decide to use your question in print, I'll let you know, but I won't promise when the answer will show up. (For editorial reasons, I sometimes delay publishing answers a month or two.)</LI>
    <LI>Once I've written up an answer &#151; even if that answer won't show up in print for a while &#151; I'll send you a draft.</LI>
    <LI>Unless/until you hear from me, don't assume I'll ever answer your question. I'd love to answer every one of them, truly, but I simply don't have time. (Of course, if <I>CUJ</I> paid me the Big Bucks to play help desk...)</LI></UL>

<p>Finally, please remember that I'm constraining topics to Standard C and C++. I keep getting questions tied to specific platforms, usually some Windows variant. (I assume this is testament to both the ubiquity and the difficulty of Windows programming.) I recommend that you forward such questions to a Windows-specific publication or newsgroup, or give Microsoft's Knowledge Base a whirl.</p>

<h4><FONT COLOR="#000080">Func-y Cold Medina</FONT></H4>

<h4><FONT COLOR="#000080">Q</FONT></H4>

<p>Dear Sir,</p>
<p>I'm a Ph.D student of The Mechanical Engineering Department in the University of North Carolina at Charlotte.</p>
<p>I want to call a member function that has another member function as a parameter. My file (included here) compiles with errors. Can you help me out with this problem?</p>
<p>Thank you very much for your time. &#151; Son Phan</p>

<h4><FONT COLOR="#000080">A</FONT></H4>

<p>(Diligent Readers will recall that, in my final "Learning C/C++urve," I promised to bring up member functions in an early Q&amp;A installment. I now make good on that promise.)</p>
<p>I've reduced your original example to</p>

<pre>
class heat
    {
public:
    float sr(float);
    float
    func(float (*fx)(float), float k)
        {
        return k + fx(3.0);
        }
    };
     
int main()
    {
    heat obj;
    obj.func(sr, 5.1); // error here
    }
</pre>

<p>What you want is to pass the member function <B>heat::sr</B> as an argument to <B>heat::func</B>. Unfortunately, as you discovered, your original code doesn't work. The compiler complains that <B>sr</B> is not defined.</p>
<p>The fundamental problem is that you are trying to pass an instanced member function as a real function pointer. I've sketched out several solutions, in order of increasing complexity. See <A HREF="fig1.htm">Figure 1</A>.</p>
<p>Each subsequent numbered solution is really a variation of the one that came before, viz:</p>
<p>1. Since you aren't referencing any per-instance data, you can make <B>func</B> and <B>sr</B> static. (I'm calling the static versions <B>func1</B> and <B>sr1</B> here.) This yields the shortest and fastest code.</p>
<p>2. Similar to #1, except member functions are instanced (not static). Adds the slight overhead of passing an implied <B>this</B> pointer.</p>
<p>3. Same as #2, except instead of calling <B>this.sr</B> from within <B>func</B>, you call the function pointer parameter <B>fx</B>. The actual argument passed into <B>fx</B> must be either a static member function or a non-member function.</p>
<p>4. Same as #3, except you are now passing into <B>fx</B> a pointer to a non-static member function <B>sr</B>. The called <B>func</B> assumes you want to reference the current object (<B>*this</B>) to get the proper instance of <B>sr</B>.</p>
<p>5. Same as #4, except <B>func</B> doesn't assume that you want to dereference <B>this</B>. Instead you pass in the instance of <B>heat</B> containing the <B>sr</B> you actually want to call.</p>
<p>I'm guessing solution #4 is what you were trying to create originally, although I'd promote solution #1 if you can live within its constraints.</p>

<h4><FONT COLOR="#000080">You Take the HIWORD...</FONT></H4>

<h4><FONT COLOR="#000080">Q</FONT></H4>

<p>Bobby Schmidt,</p>
<p>I never miss your column in the <I>C/C++ Users Journal.</I> You have provided some very good insight into many things. Now I hope you can shed some light on the following.</p>
<p>The Microsoft Windows API contains a macro <B>HIWORD</B>, which is defined as</p>

<pre>
#define HIWORD(x) \
   ((WORD)        \
   (((DWORD) (x) &gt;&gt; 16) &amp; 0xFFFF))
</pre>

<p>I think I understand that the macro returns a 16-bit <B>int</B> &#151; which is the 16 high bits (MSBs) of a 32-bit <B>int</B> &#151; by shifting the 16 high bits to the 16 low bits. If I do the same thing with Borland C++ like this:</p>

<pre>
int i = 583; // 32 bit int
short hbyte; // 16 bit int
hbyte = (i &gt;&gt; 16);
</pre>

<p>I get the exact same results as when I do:</p>

<pre>
hbyte = (number &gt;&gt; 16) &amp; 0xFFFF;
</pre>

<p>So why does the Windows API also <B>AND</B> the shifted 16 bits with all ones? Any insight would help me understand it. &#151; Tom Parke</p>

<h4><FONT COLOR="#000080">A</FONT></H4>

<p>At first this looks like one of those Windows-specific questions I swore I wouldn't answer. But this is really a generic question about bit shifting and type casting.</p>
<p>Let's decompose <B>HIWORD</B> to see what's really going on:</p>
<p>1. The argument <B>x</B> is cast to a 32-bit unsigned integer (<B>DWORD</B>).</p>
<p>2. That 32-bit unsigned integer is shifted right 16 bits.</p>
<p>3. The post-shift result, still a 32-bit unsigned integer, is bit-anded with <B>0xFFFF</B>. This has the effect of clearing the high 16 bits.</p>
<p>4. The masked result is cast (chopped) to a 16-bit unsigned integer (<B>WORD)</B>.</p>
<p>You are alleging that step #3 is redundant, implying that the shifted value from step #2 fills in all 16 high bits with zeroes. Is this implication valid?</p>
<p>As usual, we appeal to the Standards for help. Fortunately, the Standards for C89, C9X, and C++ all say about the same thing:</p>

<BLOCKQUOTE>
<p>The value of <B>E1 &gt;&gt; E2</B> is <B>E1</B> right-shifted <B>E2</B> bit positions. If <B>E1</B> has an unsigned type ... the value of the result is the integral part of the quotient of <B>E1</B> divided by the quantity 2 raised to the power <B>E2</B>. </p>
</BLOCKQUOTE>

<p>Since <B>E2</B> in this case is 16, and 2 raised to the power of 16 is 65,536 decimal or 10000 hex, our right shift is effectively</p>

<pre>
(DWORD) x / (DWORD) 0x10000
</pre>

<p>If I'm reading the Standards right, such unsigned integer division suffers no overflow, and the result is always non-negative. This means the sign bit and unused high bits are zeroes. But how many zeroes?</p>
<p>The largest possible value of this division is the largest <B>DWORD</B> divided by <B>0x10000</B>, or</p>

<pre>
(DWORD) 0xFFFFFFFF / (DWORD) 0x10000
</pre>

<p>which results in an unsigned integer quotient of</p>

<pre>
(DWORD) 0xFFFF
</pre>

<p>This value &#151; and all others below it &#151; will safely fit into a 16-bit <B>WORD</B>. Therefore no significant bits are left in the chopped-off high <B>WORD</B>, which contains all zero bits.</p>
<p>Conclusion: step #3 indeed appears to be redundant.</p>
<p>If the original argument <B>x</B> were not cast to a <B>DWORD</B>, I could understand the need for masking. For example, if <B>x</B> were signed and negative, the result of right shifting would be implementation defined, with possibly ones left in the (unmasked) high bits <a href="#1">[1]</a>.</p>
<p>I'm guessing the masking is either protection against implementations that don't do unsigned casting and shifting right, or in-code documentation making the intent more apparent.</p>

<h4><FONT COLOR="#000080">The Name of the Game</FONT></H4>

<h4><FONT COLOR="#000080">Q</FONT></H4>

<p>Hello Mr. Schmidt,</p>
<p>I was just reading your article (magazines move slowly through our development and technical support divisions), and was curious about your Underscores article.</p>
<p>Specifically, what kinds of symptoms would using <B>ac__me</B> and <B>_acme</B> display? Would you just see compiler warnings if our implementation of certain names conflicted with the compiler's implementation?</p>
<p>We have numerous functions declared as <B>_FunctionName</B>, and some of the resource identifiers are defined as <B>IDC__RESOURCENAME</B>.  Thank you. &#151; Dustin Friel</p>

<h4><FONT COLOR="#000080">A</FONT></H4>

<p>(Dustin is referring to my discussion of reserved identifiers in the October 1998 issue of <I>CUJ.</I>)</p>
<p>All the Standards say is that identifiers following certain patterns are reserved for the translator implementation. The Standards don't say what happens if you use those names. While I suppose your translator could specifically diagnose all your uses of such reserved names, I'm guessing that the translator is more likely to treat such name collisions as it does any others.</p>
<p>For example, if your translator declares function <B>_Abba</B> in a header, and you define another function <B>_Abba</B> with a different signature or in a different scope, you'll probably never become aware of the "collision." But if the translator's <B>_Abba</B> is a macro, your <B>_Abba</B> will be masked, and you'll probably get translation-time errors.</p>
<p>So really, the results you'll get are no different than for any other name collision. The snag is that the implementation may use any of these reserved names in any way it sees fit. That your code works today is no guarantee it will work tomorrow on a new version of your implementation.</p>
<p>Your safest path is to avoid such names completely, following the guidelines from either my column or the Standards. If you can't or won't do that, hedge your bets. My experience suggests that:</p>

<UL><LI>The translator-provided header files often define macros and global types starting with <B>__</B> or <B>_A</B>, where <B>A</B> is any upper-case letter. These headers may contain identifiers with embedded <B>__</B> like your <B>IDC__RESOURCENAME</B>, but I find this to be less common.</LI>
    <LI>These headers often also define global objects or functions starting with <B>_a</B>, where <B>a</B> is any lower-case letter. Again, embedded <B>__</B> is unusual, although leading or trailing <B>__</B> is common.</LI>
    <LI>Your translator may support extra keywords starting with underscores, a practice for which Microsoft is notorious <a href="#2">[2]</a>. The list of such keywords should be documented, so you can avoid them. Even if you accidentally use one, the translator should catch the conflict, unless you use the name as a macro.</LI>
    <LI>The compiler may embed hidden references to run-time support functions that use reserved names. (Floating-point operations often result in such library calls.) If you accidentally use these names, the compiler may not complain but the linker could get confused.</LI></UL>

<p>Remember, these are just heuristics based on long experience &#151; they are not guarantees. If at all practical, I suggest you either use non-reserved identifiers, or move those identifiers out of global scope. At the very least, don't use such names as macros; that way, the translator has a better chance of catching any conflicts.</p>

<h4><FONT COLOR="#000080">Mars and Venus</FONT></H4>

<h4><FONT COLOR="#000080">Q</FONT></H4>

<p>Dear Bobby Schmidt,</p>
<p>I'm sure you are busy and may not have the time or inclination to answer this but, in case you do, here is my problem.</p>
<p>I was reading and am referring to your article in the December issue of <I>C/C++ Users Journal.</I> The section that interests me most is sub-titled Russian Dolls and refers to Paul Kerslake's question. I don't understand why the overloaded <B>operator-&gt;</B> works as it does.</p>
<p>It appears (to me) that, when used in Test2, <B>operator-&gt;</B> should return an object of type <B>Test1</B> and not the dereferenced <B>Test1</B>. It would appear that the overloaded <B>operator-&gt;</B> does something. I guess it returns an object of <B>Test1</B> and then does a factory-built dereference which continues the cascade.</p>
<p>How can I explain this to my wife? Is this overloaded operator somehow different then others or are the others somehow different than my current perception.</p>
<p>And by the way, I enjoy your column.</p>
<p>Sincerely &#151; vjv</p>

<h4><FONT COLOR="#000080">A</FONT></H4>

<p>Don't feel bad about your confusion. When I first learned user-defined operators, I found <B>operator-&gt;</B> to be about the most confusing. Plus, as another reader suggested, I probably should have been more clear in my original explanation. (At least we can't define our own <B>operator</B>. to add even more confusion.)</p>
<p>As a general rule, if object <B>x</B> supports a user-defined <B>operator-&gt;</B>, the expression</p>

<pre>
x-&gt;m
</pre>

<p>is really</p>

<pre>
(x.operator-&gt;())-&gt;m
</pre>

<p>Notice how the single token <B>-&gt;</B> in the original expression actually maps to two instances of <B>-&gt;:</B></p>

<UL><LI>the call to <B>operator-&gt;</B> following <B>x</B></LI>
    <LI>the <B>-&gt;</B> just before <B>m</B></LI></UL>

<p>If <B>(x.operator-&gt;())</B> yields a real pointer, then the <B>-&gt;</B> before <B>m</B> is a real point-to operator, and the "cascade" halts. But if <B>(x.operator-&gt;())</B> yields an object supporting <B>operator-&gt;</B>, the recursive pattern continues. In the original example, the recursion went five levels before finally halting on a real pointer.</p>
<p>So in the end, things are as you suggest: the presence of <B>operator-&gt;</B> "does something," which may include "a factory-built dereference." If you still aren't convinced, I encourage you to play around with it some more, especially by tracing within a debugger.</p>
<p>By the way, if this is the worst thing you ever have to explain to your wife, count your blessings.</p>

<h4><FONT COLOR="#000080">Every Rose City Has Its Thorn</FONT></H4>

<h4><FONT COLOR="#000080">Q</FONT></H4>

<p>My abuse at the words of your December 1998 <I>CUJ</I> column reminded me that you have too much free time or too little stuff to write about &#151; probably both. But Bobby, Bobby, Bobby, <I>must</I> you keep inserting not-quite-truths, or are you just seeing if Herb Sutter and I are paying attention?</p>
<p>Consider your remark that "Unfortunately, there's no way to say the equivalent of <B>unusing namespace std;</B>." Well, unfortunate that would be were it completely true, but it just so happens that your statement here is only <I>mostly</I> true <a href="#a">[A]</a>.</p>
<p>A using declaration or directive remains in force until the end of the scope in which it occurs. Because using declarations/directives are typically employed at file scope, they usually remain in force until the end of the file containing them. In that case, you're right, no "unusing" is available.</p>
<p>But using declarations and directives can be sensibly employed within blocks, generally including classes, functions, and namespaces <a href="#b">[B]</a>. In that case, you spell "unusing" like this: <B>}</B>.</p>
<p>Of course, perhaps you meant to limit your comments to MSVC and you simply forgot to mention what the Standard says. If so, never mind :-)</p>

<h4><FONT COLOR="#000080">Notes</FONT></H4>

<p><a name="a"></a>[A]  <I>The Princess Bride,</I> allusion to.</p>
<p><a name="b"></a>[B]  The word "generally" is important here. Using declarations can be employed at class scope, but using directives cannot be. Details are available in sections 7.3.3 and 7.3.4 of the thrilling new standard for C++ <a href="#c">[C]</a>.</p>
<p><a name="c"></a>[C]  At least those are the section numbers in the FDIS. I don't have a copy of the final standard yet.</p>
<p>Have a nice day. &#151; Scott Meyers</p>

<h4><FONT COLOR="#000080">A</FONT></H4>

<p>So much for garlic.</p>
<p>Okay yes, I admit it, I made an unstated assumption in my response. Since the original question apparently involved a file-scope reference to <B>vector</B>, my answer also assumed file scope. In that context, the using directive would stay in effect through the end of the translation unit.</p>
<p>I didn't mean to imply that you could never turn off a using directive &#151; only that, in this particular example, you couldn't turn it off. So as usual, we are both right in our own ways.</p>
<p>And you can rest easy: the section numbers for using declarations and using directives are the same in the final Standard as in the FDIS.</p>

<h4><FONT COLOR="#000080">Inspector Detector</FONT></H4>

<h4><FONT COLOR="#000080">Q</FONT></H4>

<p>While doing a code inspection, I found code similar to this:</p>

<pre>
char string1[6];
char string2[6];
string1 = string2;
</pre>

<p>When I brought it up to the author, we discovered the statements were working as he intended, copying the contents of <B>string2</B> to <B>string1</B>. This behavior works in GNU g++, but not in CodeWarrior (latest version) or Solaris SPARCompiler 4.2 (older version, Oct 96).</p>
<p>In further review of the problem, we wrote and tested the attached program [not shown], which also works as it would appear, with integer arrays also! It, however, does not work in gcc, nor does it allow arrays of different sizes to be assigned to each other, giving an appropriate error message.</p>
<p>It appears that the GNU library is treating the core language array (<B>[]</B>) as a type of class, and of course does a default member-wise copy of the contents. This is either a bug, a GNU extension, or part of the new Standard, but we cannot determine which explanation applies.</p>
<p>Could you please explain what is the correct interpretation of the C++ Standard? &#151; Ron Hamann</p>

<h4><FONT COLOR="#000080">A</FONT></H4>

<p>Your code samples shouldn't compile, in either C or C++. Real arrays are not modifiable lvalues, meaning (among other things) that you can't assign to them. You can of course initialize them:</p>

<pre>
char string2 = "abcde";
</pre>

<p>but as seasoned readers know, initialization is not the same as assignment (especially in C++).</p>
<p>If your original code works, it represents either a bug in your translator or an extension that ought to be documented. I just took a glance through all the relevant Standards, and none of them appear to allow this behavior, even for arrays of the same type.</p>

<h4><FONT COLOR="#000080">Erratica</FONT></H4>

<p>Last month I ran a "five liner" from Diligent Reader Andrei Alexandrescu. As is my convention, I let Andrei know I'd be publishing his letter. After I'd submitted my column, I got this reply from him:</p>
<p><I>I've made some "progress" up to the point that you'd ruin my reputation by publishing the </I><B>to_string</B> <I>function :o). The correct version of it is:</I></p>

<pre>
template &lt;typename T&gt;
std::string to_string(const T &amp;a)
{
    std::ostringstream Stream;
    Stream &lt;&lt; a;
    return Stream.str();
}
</pre>

<p><I>Compared to the initial version, please remark on the usage of </I><B>ostringstream</B> <I>instead of the deprecated </I><B>ostrstream</B><I>, with the associated benefits.</p>
<p>As to your comments, the first problem is mitigated, the second remains, and maybe one can get rid of the third by having a static ostringstream that is cleared upon the entry of </I><B>to_string</B><I>. Unfortunately, here I have absolutely no means to write and check any code.</p>
<p>Given the lag time between the moment I send you messages and the moment you answer them, it seems like you won't read this until you will already have published the "wrong" code and have me lynched by the C++ community.</I></p>
<p>(The three "comments" to which Andrei refers are included with my answer last month.) As Andrei suggests, this new solution is indeed superior. I especially like the abandonment of magic-sized buffers, thanks to <B>ostringstream</B> using a self-adjusting <B>string</B> object instead of a <B>char</B> array.</p>

<h4><FONT COLOR="#000080">Notes</FONT></H4>

<p><a name="1"></a>[1]  I say "possibly" because the behavior can be anything. In practice, every implementation I've seen propagates either all zeroes or all ones into the "empty" high-order bit slots.</p>
<p><a name="2"></a>[2]  But wait, it gets better. Thanks to my new gig at Microsoft, I've discovered that MSVC supports the custom preprocessor directive <B>#import</B>. Not a <B>#pragma</B> like you might expect, but a whole new directive.</p>

<p><i>Bobby Schmidt is a freelance writer, teacher, consultant, and programmer. He is also an alumnus of Microsoft, a speaker at the Software Development and Embedded Systems Conferences, and an original &#145;&#145;associate'' of (Dan) Saks &amp; Associates. In other career incarnations, Bobby has been a pool hall operator, radio DJ, private investigator, and astronomer. You may summon him on the Internet via <B>rschmidt@netcom.com</B>.</i></p>

<h4><a href="../../../source/1999/apr99/schmidt.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY>
</HTML>
