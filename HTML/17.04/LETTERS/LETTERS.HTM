<HTML>   
     <HEAD>
<TITLE>April 1999/We Have Mail</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocapr.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Departments</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">We Have Mail</FONT></H2>

<HR>

<BLOCKQUOTE>


<p><I>Letters to the editor may be sent via email to </I>cujed@mfi.com<I>, or via the postal service to Letters to the Editor, </I>C/C++ Users Journal<I>, 1601 W. 23rd St., Ste 200, Lawrence, KS 66046-2700.</I></p>

<HR>

<p>Dear <I>CUJ,</I></p>
<p>I have attached a re-worked MFC 5.0 version of W. Ward's program that transforms data using his Stream Encryption method into C strings [see "Applying Stream Encryption," <I>CUJ</I>, September 1998]. Null bytes are not embedded in the output by the engine. The rework was also necessary because I was unable to use the <B>std::string</B> class provided with the Microsoft implementation (it's still broken.) So I converted all the original <B>std::string</B> operations to use the MFC <B>CString</B> class instead.</p>
<p>The two files of real interest are <B>ARACrypt.cpp</B> and <B>ARACrypt.h</B>. The remainder make up a small test windows application to demonstrate the method. A compiled version of the demo program can be found in . <B>.\release\TCrypto.exe</B>. It has been tested under Windows NT 4.0 SP3 and should work fine with the current versions of Win95/98.</p>
<p>The changes I made may make Mr. Ward's work more useful to the "serfs" amongst us who need encryption results that must be operated upon by traditional C string functions or by the MS <B>CString</B> class, e.g. <B>SetWindowText</B> and the like.</p>
<p>Unfortunately, I was unable to locate Mr. Ward's contact information so that I could thank him personally or send this material on to him directly. If you would be so kind, please do so. Of course you and Mr. Ward are most welcome to use the enclosed programs, etc. in any way you see fit.</p>
<p>In advance, thank you.</p>
<p>Barnett E. Kurtz</p>
<p>p.s. I found the September 1998 issue to be very useful, informative, well written, and in short, terrific!</p>

<p><I>Thanks. We'll put your code on our ftp site with this month's posting. &#151; mb</I></p>

<HR>

<p>Letters to the Editor,</p>
<p>How many times has the suggestion to build a new version of C with bitfields as the fundamental type been made? I linked through to some of the standards web pages recently, and got an eyeful of C9X. I seriously wonder if it is possible to maintain so many keywords. Making bit fields the fundamental type seems to me a far more reasonable solution. We would probably need to give the new version a new name, something like "bit-C." (But isn't that already taken?)</p>
<p>I believe the two classes of problems with supporting independent bit fields are that very few CPUs directly support addressing down to the bit, and that programmer-specified integral types will generally conflict with the CPU's integral types. Concerning the former, if we can build compilers capable of handling nonlinear address spaces as extreme as X86 segments, surely we can handle addressing down to the bit.</p>
<p>Concerning the latter, providing a standard header which fully declares the CPU's integral types seems to me the only real solution to the problems most of C9X is trying to address.</p>
<p>I acknowledge that, in addition to independent bit fields, we will need keywords to specify two types of field packing for structures, tight (no holes) and loose (compiler does what it likes). Also, we will need a mechanism to declare the byte order and a mechanism to query types.</p>
<p>(While I'm tinkering in the virtual universe in my head, how about extending the width of bit-fields to some queriable arbitrary maximum width? I can't imagine bit fields wider than 65,536 bits, but 256 seems useful for 32-bit CPUs.)</p>
<p>Of course, the conversion between a strictly specified bit field type and a loosely specified (CPU friendly) type requires some new syntax. The mechanism for declaring byte order might look something like the code shown in <A HREF="list1.htm">Listing 1</A>.</p>
<p>I slipped in yet another suggestion here. Name spaces are great for allowing the programmer to hide from keywords he shouldn't need to know very much about. Using the above declarations would be straightforward:</p>

<pre>
#include &lt;byteOrd.h&gt;
/* ... */
#vocabulary functionXXXXSpace
/* ... */
#context ByteOrderSpace
invertInt64_t
worldWidePopulation = 12000000000;
#local
</pre>

<p>We can keep the CPU default types, but now we can find out what they are? One application for this is handling variable-width characters. I've had occasion to work with character typing and code-set conversion with shift-JIS, and having to declare my conversion tables as strings, just so I can verify my own code (most of it generated mechanically), is wasteful, not to mention a pain in the neck.</p>
<p>Another application would be reduction of the complexity of interfacing with external files, but that goes without saying, doesn't it?</p>
<p>Joel Rees<br>
fujicom@fujicom.office.ne.jp</p>

<p><I>If you "improve" C too much, it stops looking like C anymore. I leave it to you to think of real-world examples. &#151; pjp</I></p>

<HR>

<p>Dear <I>CUJ</I>,</p>
<p>The following suggestions for additional Standard C functions are humbly submitted.</p>
<p><B>asm</B> &#151; C could become the preferred macro language for assembly.</p>
<p><B>getch</B> &#151; Keyboards with more then 48 keys could be used.</p>
<p><B>gotoxy</B>, <B>clreol</B>, <B>clrscr</B>, <B>dellin</B>, <B>inslin</B> &#151; CRTs could be connected to the standard output.</p>
<p><B>setpixel</B>, <B>getmouse</B> &#151; This is just a wish list, probably too much to ask.</p>
<p>I don't want to be a heavy, but competing languages will surely be invented if Standard C fails to pick these up. Rumor has it that one called "coffee" is in the mill.</p>
<p>Ken Roger<br>
Renton, Washington</p>

<p><I>Boy, it must be Fix Standard C month. Anyone else have any suggestions? (And we'll keep an eye on the "coffee," thanks.) &#151; mb</I></p>

<HR>

<p>Dear William L. Crowe,</p>
<p>I have read both of your articles &#151; "Inter-Object Messaging Using a SwitchBoard" [June 1998] and "Comparing C++ and Java: A Java SwitchBoard Implementation" [January 1999] &#151; and have some input.</p>
<p>While your Java <B>SwitchBoard</B> class implementation is thread-safe, your C++ one is not.</p>
<p>In my company, we use the SwitchBoard pattern to handle communication between front and back ends of our Win32 product. Our product consists of two threads running within the same process. All interested parties within the front end subscribe to the <B>backend_event</B> subscription. We use a mutex mechanism to insure that our <B>notify</B>, <B>subscribe</B>, and <B>unsubscribe</B> methods are not accessed concurrently by several threads.</p>
<p>In general, it is not uncommon to devote a separate thread to a time-consuming task. Imagine the following scenario. A lengthy task with an associated progress dialog starts on a new thread and subscribes to a certain subscription. If this task completes its execution and calls <B>_unsubscribe</B>, and while it is executing it another thread calls <B>_post</B>, it can cause data corruption. The variable <B>_hookups</B> that holds <B>SubscriberHookups</B> can be modified concurrently by several threads. The consequences of this are truly unpredictable.</p>
<p>In Java, you use <B>java.util.Vector</B> to hold <B>SubsriberHookups</B>. All methods in this class are declared to be synchronized. The implementation of <B>nextElement</B> in <B>VectorEnumerator</B> also provides for the protection against the simultaneous access by several threads. What this means is that we can expect exactly two scenarios. In the first case, the exiting thread will receive the notification, process it, and then exit. In the second one, the exiting <B>SubscriberHookup</B> will be removed from the <B>Vector</B>, exit, and not get any notification. Either outcome is fine and preserves data integrity.</p>
<p>This once again, proves the point that Java's builtin support for multithreading and thread synchronization make it a desirable language for multithreaded applications.</p>
<p>Sincerely,</p>
<p>Ilya Tilevich<br>
Information Builders Inc.</p>
Ilya_Tilevich@ibi.com</p>

<p><I>William Crowe replies:</p>
<p>Your point about the Java </I><B>SwitchBoard </B><I>being thread safe out of the box would have made a nice addition to the Java/C++ </I><B>SwitchBoard </B><I> comparison. Java's threading model makes it extremely easy to write threaded applications, especially since most of the time you don't have to worry about mutexes &#151; synchronized methods handle the bulk of the job quite well. It has been my experience with Java, however, that much planning, analysis, and design is still required in order to write effective multi-threaded applications, albeit less than in C++. Just because an application can be threaded doesn't necessarily mean that it will perform any better (as I am sure you already know). As you pointed out, the Java implementation of the resulting design is where the big payoff is realized, that being simplicity and time to market. A very nice alternative to multi-threading C++ indeed.</p>
<p>Thanks for the input,</p>
<p>Bill Crowe</I></p>

<HR>

<p>Greetings,</p>
<p>I'd like to briefly discuss Chuck Allison's "Jumping into Java" column (<I>CUJ,</I> January 1999). Chuck refers to a missing equivalent of the C++ <B>delete</B> operator in Java. While it's true that there's no explicit delete, the closest one could hope to simulate a delete for object <B>N</B> is to write a short Java snippet that will remove a reference to a given object and call the system garbage-collection routine:</p>

<pre>
N=null;      // free up object N was referring to
System.gc(); // call garbage-collect
</pre>

<p>Please note that explicitly calling <B>System.gc()</B> doesn't necessarily force a collect to occur. The Java runtime system will still wait to collect until it's damn good and ready.</p>
<p>Chuck states that Java has no destructors. This is not true. The protected <B>finalize</B> method is a destructor. <B>finalize</B> (when implemented for a given class) is called just before the garbage collector attempts to dispose of the object. Please consider the following Java application:</p>

<pre>
// Dummy.java
public class Dummy {
   public static void
   main(String[] args) {
      jimbo j;
      for(int i=0;i&lt;1000000;i++) {
         j=new jimbo();
         System.out.println
            ("Iteration " + i);
      }
   }
}
class jimbo {
   protected void finalize() {
      System.out.println
         ("Going out of scope!");
   }
}
</pre>

<p>The application continuously creates new instances of the class <B>jimbo</B>. As you watch the iteration counter increment, you'll eventually see the text "Going out of scope!" appear on the screen. This messages is generated when the <B>finalize</B> destructor method is called.</p>
<p>I'd like to note that the above example displays a <B>String</B> and an <B>int</B> on the output console even though no <B>printf</B> equivalent exists in Java.</p>
<p>I find that since Java treats <B>String</B> objects as first-class citizens rather than arrays of characters, automatic conversion of other types to <B>String</B>s can be much more handy when formatting data. Granted, this is the kick-off column in the series. I hope that Chuck visits the subject of <B>String</B> objects in Java in great depth.</p>
<p>A particular fascination of mine is that all <B>String</B> literals are actually valid <B>String</B> objects. (Try to evaluate the <B>int</B> expression <B>("Hi there").length()</B> in a snippet of Java code. The value should be 8.)</p>
<p>I also hope that a discussion on simulating multiple inheritance by using Java interfaces is also in the works for future columns.</p>

<p><I>Chuck Allison replies:</p>
<p>I am aware of </I><B>System.gc</B><I> and </I><B>finalize</B><I>. Since you have no practical control over when objects are really collected, and because of the two-phase action of the collect/finalize cycle, there is no equivalent in Java of C++ destructors. </I><B>finalize</B><I> is not useful for deallocating resources &#151; such as files, DBs, etc. &#151; in a timely fashion.</p>
<p>Since one usually wants to have more fine-grained control over such things, </I><B>finalize</B><I> isn't good enough. I don't know any seasoned Java developers who use it. Perhaps this is because it never really worked correctly until recent versions. Also, there is no guarantee in Java that all objects that conceivably could be collected will be. This is the key reason for my comments. Please see pages 162-163 in Bruce Eckel's </I>Thinking in Java<I>. He explains it very well, and emphasizes the point that "Garbage collection is not destruction." Here's a personal email I recently received from Bruce Eckel about </I><B>finalize</B><I>:</p>
<p>"The problem is that the </I><B>finalize</B><I> mechanism is broken, and has never worked correctly. I don't know if it ever will, but I've written it off completely. One of the places you discover that </I><B>finalize</B><I> is broken is precisely in closing files."</p>
<p>As for Java I/O, it is true that in Java you can display </I><B>String</B><I>s and </I><B>int</B><I>s on the output console with </I><B>System.out.println</B><I>, but no formatting is available this way. To get formatting, you have to use the formatting classes in </I><B>java.text</B><I>, which is much more complicated than using </I><B>printf</B><I>.</p>
<p>Finally, note that the C++ </I><B>string</B><I> class is also first class. Character arrays are discouraged in C++. I will certainly look at strings in depth in future installments of my column. I will also discuss multiple inheritance, as well as the importance of interfaces in their own right. (I am assuming you don't mean multiple implementation inheritance. That is not supported in Java.)</p>
<p>Thanks for writing.</p>
<p>Chuck Allison<br>
cda@freshsources.com</I></p>

<HR>

<p>Dear <I>CUJ</I>,</p>
<p>I read <I>C/C++ Users Journal</I> from cover to cover just as soon as it arrives, and I get many good ideas, and ideas to incorporate into, or change, in my existing code. One thing puzzles me however. Many of the letters to your magazine begin, "I am writing this code and I have a Problem/Question/etc."</p>
<p>Now, whenever I am in that situation, the answer is normally required yesterday and I need to find it immediately, so how can these guys wait for the reply to be printed in your magazine?</p>
<p>Bryan Anslow<br>
Thousand Oaks, CA</p>

<p><I>Ever hear of a blocking thread? Just kidding. When it's a technical question we often send the answer back right away, via the miracle of email. We repeat the question and answer here for illustrative purposes. &#151; mb</I></p>

<HR>

<p>Dear <I>CUJ</I>,</p>
<p>in a letter to the editor in the January 1999 issue of <I>C/C++ Users Journal,</I> Michael Eager states that the C and C++ standards do not require compilers to follow the evaluation order of expressions as specified by parentheses &#151; and you thanked him for pointing this out. But the ANSI C standard, at least, explicitly revoked the license of compilers to reorder expressions, "... thus bringing C into accord with most other major high-level languages" (cf <I>Rationale for the ANSI C programming Language,</I> section 3.3).</p>
<p>Keith Wilkinson<br>
Optimay GmbH<br>
keith.wilkinson@optimay.com</p>

<p><I>The C Standard makes unambiguous how terms group in an expression. Parentheses can change the grouping, but are not needed to make grouping unambiguous. The order in which operators (including function calls) are evaluated, however, is a different matter. Evaluation of subexpressions can even be interlaced, if no sequence points intervene. It's a subtle point that's quite often overlooked, and thus remains the source of subtle portability bugs in both C and C++. &#151; pjp </I>o</p>

<h4><a href="../../../source/1999/apr99/letters.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY>
</HTML>
