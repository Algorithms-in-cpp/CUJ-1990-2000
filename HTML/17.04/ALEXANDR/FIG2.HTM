<HTML><HEAD>
<TITLE>April 1999/Adapting Automation Arrays to the Standard vector Interface/Figure 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Figure 2: Definition of classes automation_vector_base and automation_vector</A></H4>
<pre>
template &lt;class&gt; class automation_vector;

class automation_vector_base
{
    friend void trace(CComVariant &amp;v);
    typedef automation_vector_base self;
protected:
    ...
    void attach(VARIANT &amp;v) throw(); 
    void detach(VARIANT &amp;v) throw();
public:
    ...
    static void com_enforce(HRESULT hr) throw(std::runtime_error);
    // The size of the vector
    size_t size() const throw()
    {
        _ASSERT(valid());
        return m_Value.vt == VT_EMPTY ? 0 : bounds().cElements;
    }
    size_t capacity() const throw()
    {
        return size();
    }
    // checks whether the vector is empty
    bool empty() const throw()
    {
        return size() == 0;
    }
    ~automation_vector_base() throw();
    // Creation mode
    enum TCreateMode { MOVE, COPY };
protected:
    // Constructors/destructors are protected to prevent 
    // direct instantiation
    self(unsigned Elements, VARENUM VarType) 
        throw(std::invalid_argument, std::runtime_error);
    ...    
    void resize(size_type NewSize, VARENUM Type);
    void clear()
    {
        _ASSERT(!V_ISBYREF(&amp;m_Value));
        _ASSERT(empty() || array().cLocks == 0);
        com_enforce(m_Value.Clear());
    }
    ...
private:
    ...

    // The actual holder of the array
    CComVariant m_Value;
};

inline void from_automation(SAFEARRAY &amp;, void *)
{
}

inline void to_automation(SAFEARRAY &amp;, void *)
{
}

template &lt;class T&gt;
void 
from_automation(SAFEARRAY &amp;Array, automation_vector&lt;T&gt; *pDummy);

template &lt;class T&gt;
void 
to_automation(SAFEARRAY &amp;Array, automation_vector&lt;T&gt; *pDummy);

template &lt;class T&gt; class automation_vector : 
    public automation_vector_base
{
    typedef automation_vector_base base;
    typedef automation_vector self;
    ...
public:
    ...
    // *** Static VARIANT type mapped from the C++ type
    static VARENUM myVARENUM()
    {
        // If you have an error on the line below, 
        // you've instantiated automation_vector with the 
        // wrong type
        static_checker&lt;sizeof(T) == sizeof(
            Configure::deduceVARENUM(T()).size_checker)&gt;();
        return static_cast&lt;VARENUM&gt;
            (Configure::deduceVARENUM(T()).vt);
    }
    automation_vector(VARIANT &amp;vSource, TCreateMode Mode) 
        throw(std::invalid_argument, std::runtime_error)
        : base(0, myVARENUM())
    {
        if (Mode == COPY)
        {
            // Make a copy and attach to it
            CComVariant v(vSource);
            attach(v);
        }
        else
            // Attach directly to the source
            attach(vSource);
    }
    ...
    void attach(VARIANT &amp;vSource) 
        throw(std::invalid_argument, std::runtime_error);
    void detach(VARIANT &amp;Var)
    {
        _ASSERT(_CrtIsValidPointer(&amp;Var, sizeof(VARIANT), true));
        com_enforce(::VariantClear(&amp;Var));
        unlock();
        base::detach(Var);
    }
    CComVariant detach()
    {
        CComVariant v;
        detach(v);
        return v;
    }
    ...
protected:
    void lock();
    void unlock();
};


</pre>
</BODY>
</HTML>
