<HTML>
<HTML><HEAD>
<TITLE>April 1999/Adapting Automation Arrays to the Standard vector Interface/Sidebar</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<H3 align=center><FONT FACE="Garamond" COLOR="#000080">A Static Checker for Generic Programming</FONT></H3>

<HR>

<BLOCKQUOTE>

<p>Inspired perhaps by STL, C++ programmers have begun to make wide use of generic programming techniques. This has increased the need for improved static (compile-time) checking. Thinking in terms of generic data structures and algorithms, if there are certain conditions which must be satisfied within a program, the programmer must ensure that a template cannot be instantiated for a type that does not satisfy those conditions. A small helper devoted to such a task is gaining popularity in the C++ community. There are many implementations of it; the following one is common:</p>

<pre>
template &lt;bool&gt; struct static_checker;
template &lt;&gt; struct static_checker&lt;true&gt; {};
</pre>

<p>It is used as follows. If you instantiate <B>static_checker</B> with <B>true</B>, nothing happens. If you try to instantiate it with <B>false</B>, a compile-time error (or pre-link time error, depending on what compiler you use) will occur. This is because only the specialization for <B>true</B> is defined. (The first line is only a declaration, it doesn't actually define the template.) "And that's all?" you ask. Yes, that's pretty much it. Yet you can use it for very non-trivial checks, like below:</p>

<pre>
static_checker&lt;sizeof(int) == 4&gt;();     
// code that's dependent upon 4-bytes ints follows
template &lt;typename T&gt; class small_vector
: public static_checker&lt;sizeof(T) &lt;= 8&gt;
{
   // this vector cannot contain elements with size greater than 8 bytes
};
</pre>

<p>There are lots of things you can do with <B>static_checker</B>. You can even enforce interfaces and function signatures with it. C++ has been widely criticized for not being able to express interface constraints in template instantiations. Well, with the help of <B>static_checker</B>, it can, and in a flexible (albeit not very intuitive) way.</p>

</BLOCKQUOTE>
</BODY>
</HTML>
