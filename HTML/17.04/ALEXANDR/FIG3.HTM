<HTML><HEAD>
<TITLE>April 1999/Adapting Automation Arrays to the Standard vector Interface/Figure 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Figure 3: automation_vector constructor and attach functions</A></h4>
<pre>
template &lt;class T&gt;
automation_vector&lt;T&gt;::automation_vector(VARIANT &amp;vSource, TCreateMode Mode) 
    throw(std::invalid_argument, std::runtime_error)
    : base(0, myVARENUM())
{
    if (Mode == COPY)
    {
        // Make a copy and attach to it
        CComVariant v(vSource);
        attach(v);
    }
    else
        // Attach directly to the source
        attach(vSource);
}

...

void automation_vector_base::attach(VARIANT &amp;v) throw() 
{
        clear();
        std::swap(static_cast&lt;VARIANT &amp;&gt;(m_Value), v);
}
     
...

template &lt;class T&gt; 
void automation_vector&lt;T&gt;::attach(VARIANT &amp;vSource) 
{
    ...
    const VARENUM vt = VARENUM(vSource.vt &amp; VT_TYPEMASK);
    automation_vector Temp;
    if (vt == myVARENUM())
    {
        // Great, types match 
        com_enforce(::SafeArrayLock(&amp;Array));
        from_automation(Array, static_cast&lt;T *&gt;(0));
        Temp.base::attach(vSource);
    }
    else
    {
        // Types don't match, we'll have to do a conversion
        // Convert each element one by one ...
        Temp.attach([Converted array]);
    }
    swap(Temp); // swap Temp with variable in this
                // automation_vector
}


</pre>
</BODY>
</HTML>
