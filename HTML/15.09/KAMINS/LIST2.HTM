



<HTML><HEAD>

<TITLE>September 1997/Sending Mail from a CGI Program/Listing 2</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4>Listing 2:	A CGI program that sends email</h4>

<pre>
/* formtest.cgi.c */

char *Name = NULL;
char *Prod = NULL;
char *Rush = NULL;

/*------------------------------------------*
 * CGI program processes orders from the    *
 * Web form page.                           *
 *------------------------------------------*/

int main() {
  checkInputHdr();
  getNameValuePairs();
  if (sendReply() &amp;&amp; Rush != NULL)
    sendMail();
  return 0;
}

/*------------------------------------------*
 * This step is just a formality, since the *
 * server will always get this stuff right. *
 * I guess someone might try to use this    *
 * program for something else (?) in which  *
 * case it will bomb.                       *
 *------------------------------------------*/

void checkInputHdr (void) {
  /* This function checks for a             *
   * REQUEST_METHOD of "post" and the       *
   * correct CONTENT_TYPE.                  */
}

/*------------------------------------------*
 * Read the NAME/VALUE pairs from the form  *
 * and put them into into a linked list for *
 * later.                                   *
 *------------------------------------------*/

void getNameValuePairs (void) {
    
  /* As suggested, this function gets       *
   * name/value pairs as global variables   *
   * and also saves them in a log file. The *
   * real program calls a few other         *
   * functions that I have also omitted     *
   * here.                                  */

}

/*------------------------------------------*
 * Send the top part of the reply page,     *
 * then check a few things and issue either *
 * a message or an acknowledgement, then    *
 * send the rest of the page.               *
 *------------------------------------------*/

int sendReply (void) {
  int ok = TRUE; /* error code */

  /* send top part of page */
  printf ("Content-type: text/html\n\n");
  printf ("&lt;html&gt; &lt;head&gt; &lt;title&gt;\n");
  printf ("CGI send mail test\n");
  printf ("&lt;/title&gt; &lt;/head&gt;\n");
  printf ("&lt;body&gt; &lt;center&gt;\n");

  /* do a simple validation */

  if (Name == NULL) {
    printf ("&lt;h1&gt; Name required &lt;/h1&gt;");
    ok = FALSE;
  }

  /* send appropriate message */

  if (ok) {
    printf ("&lt;h1&gt; Thanks for \n");
    printf ("your order &lt;/h1&gt;\n");
  } else {
    printf ("&lt;h1&gt; Resubmit form &lt;/h1&gt;");
  }

  /* send the message trailer */

  printf ("&lt;/center&gt;\n");
  printf ("&lt;/body&gt;\n");
  printf ("&lt;/html&gt;\n");

  return ok;
}

/*------------------------------------------*
 * Flush standard output, so user sees all  *
 * HTML. Create pipe then fork child to     *
 * exec sendmail. Parent writes to pipe as  *
 * stdout and child reads from pipe as      *
 * stdin.                                   *
 *------------------------------------------*/

void sendMail (void) {
  int pfd [2];
  if (fflush (stdout) == EOF)
    err ("Can't flush stdout");
  if (pipe (pfd) == -1)
    err ("Can't open pipe");
  switch (fork()) {
  case 0:
    child (pfd);
    break;
  default:
    parent (pfd);
    break;
  }
}

/*------------------------------------------*
 * Child process closes writing end of      *
 * pipe, closes stdin and dup's reading end *
 * of pipe, so it becomes child's stdin. It *
 * then closes reading end of pipe and      *
 * exec's sendmail, which ends up reading   *
 * from pipe (which by now is connected to  *
 * parent's stdout.                         *
 *------------------------------------------*/

void child (int *pfd) {
  if (close (pfd [1]) == -1)
    err ("Child can't close pfd [1]");
  if (close (0) == -1)
    err ("Child can't close stdin");
  if (dup (pfd [0]) != 0)
    err ("Child can't dup stdin");
  if (close (pfd [0]) == -1)
    err ("Child can't close pfd [0]");
  execl (MAIL, MAILTO, (char *)0);
  err ("exec failed");
}

/*------------------------------------------*
 * Parent closes reading end of pipe,       *
 * closes its stdout and dup's writing      *
 * end of the pipe, so it becomes stdout.   *
 * After closing the writing end of pipe it *
 * sends mail text to stdout.               *
 *------------------------------------------*/

void parent (int *pfd) {

  /* make the pipe into stdout */

  if (close (pfd [0]) == -1)
    err ("Parent can't close pfd [0]");
  if (close (1) == -1)
    err ("Parent can't close stdout");
  if (dup (pfd [1]) != 1)
    err ("Parent can't dup stdout");
  if (close (pfd [1]) == -1)
    err ("Parent can't close pfd [1]");

  /* send the message */

  printf ("To: Expediter\n");
  printf ("From: Web_Server\n");
  printf ("Subject: Rush Order\n");
  printf ("\n");
  printf ("Process the following "
          "order immediately:\n\n");
  printf ("Name: %s\n", Name);
  printf ("Product: %s\n", Prod);
  printf ("\n");
}
/* End of File */
</pre>
</body></html>
