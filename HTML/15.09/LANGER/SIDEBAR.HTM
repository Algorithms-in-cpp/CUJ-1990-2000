






<HTML>
     
     <HEAD>


          
          <TITLE>September 1997/Internationalization Using Standard C++/Sidebar</TITLE>
     </HEAD>
     
     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          
          <H2 ALIGN="center"><FONT COLOR="#800000">Locales in Practice</FONT></H2>
          
          <HR>
          <BLOCKQUOTE>
               
               <p>The code examples we used in
                    developing this article are compiled with VC++ v4.2 and the
                    draft Standard C++ library that comes with it. This library
                    does not conform completely to the draft C++ Standard, due
                    to limitations in the VC++ v4.2 compiler.</p>
               <p>For example, VC++ v4.2 does not support namespaces [<I>VC++
                    v5.0 does &#151; pjp</I>]. We had to comment out the otherwise
                    necessary using declaration, as in:</p>

<PRE>
// using namespace std;
</PRE>
               
               <p>The locale names we used are
                    necessarily those supported on Windows 95 and Windows NT.</p>
               
               <p>VC++ v4.2 does not support explicit
                    template argument specification. For this reason the
                    standard interface for function templates like use_facet and
                    has_facet cannot be implemented. The library that comes with
                    VC++ 4.2 offers a workaround, which is shown below:</p>

<PRE>
/* standard-conforming code:
    if (has_facet&lt; ctype&lt;char&gt; &gt;(locale::locale()))
    {  use_facet&lt; ctype&lt;char&gt; &gt;(locale::locale())
        .tolower(in.c_str(), in.c_str() + in.length());
        cout &lt;&lt; in;
    }
*/
// workaround for vC++ 4.2

    if (_HAS(locale::locale(), ctype&lt;char&gt;))
    {  _USE(locale::locale(), ctype&lt;char&gt;)
        .tolower(in.c_str(), in.c_str() + in.length());
        cout &lt;&lt; in;
    }
}
</PRE>
               
               <p>VC++ v4.2 does not support default
                    template arguments [VC++ v5.0 does &#151; pjp]. So we simplified
                    the example and implemented the inserter only for tiny
                    character streams of type ostream, instead of providing an
                    inserter template, which would be natural. VC++ v4.2 does
                    not support the standard interface of the time_put facet's
                    put function [A bug &#151; pjp]. we had to omit one of the
                    arguments:</p>

<PRE>
/* standard-conforming code:
template&lt;class Ostream&gt;
    Ostream&amp; operator&lt;&lt;(Ostream&amp; os,
        const struct tm&amp; date)   
{
  typedef typename Ostream::char_type char_t;
  typedef typename Ostream::traits_type traits_t;
  typedef ostreambuf_iterator&lt;char_t,traits_t&gt; outIter_t;

  locale loc = os.getloc();
 
  const time_put&lt;char_t,outIter_t&gt;&amp; fac =
     use_facet&lt; time_put&lt;char_t, outIter_t&gt; &gt;(loc);
     outIter_t nextpos = fac.put(os, os,
        os.fill(), &amp;date, 'x');
  if (nextpos.failed())
    os.setstate(ios_base::badbit);
  return os;
}
*/
// simplified version for VC++ 4.2

ostream&amp; operator&lt;&lt;(ostream&amp; os,
    const struct tm&amp; date)
{
    typedef ostream::char_type charType;
    typedef ostream::traits_type traitsType;
    typedef ostreambuf_iterator&lt;charType, traitsType&gt;
        outIter_t;
    typedef time_put&lt;charType, outIter_t&gt;
        time_put_facet_t;

    locale loc = os.getloc();
 
    const time_put&lt;charType, outIter_t&gt;&amp; fac =
        _USE(loc,time_put_facet_t);

    outIter_t nextpos = fac.put(os, os,
        /* os.fill(), */ &amp;date, 'x');
    if (nextpos.failed())
        os.setstate(ios_base::badbit);
    return os;
}
</PRE> </BLOCKQUOTE>
     </BODY>
</HTML>
