






<HTML>
     
     <HEAD>


          
          <TITLE>September 1997/C++ Theory and Practice</TITLE>
     </HEAD>
     
     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          
          <H2><A href="../tocsep.htm"><IMG src="../../toc.gif" ALT="Back to TOC" WIDTH="54" HEIGHT="54"></A>
          <FONT COLOR="#FF0000">Columns</FONT></H2>
          
          <HR>
          
          <H2 ALIGN="center"><FONT COLOR="#800000">C++ Theory and Practice</FONT></H2>
          
          <H3 ALIGN="center"><FONT COLOR="#800000"> Dan Saks</FONT></H3>
          
          <H3 ALIGN="center"><FONT COLOR="#800000">Work-arounds for a Mistake</FONT></H3>
          
          <BLOCKQUOTE>
               
               <P>Dan continues his diatribe against overzealous attempts to
                    keep C++ backward compatible with C.</P>
               
          </BLOCKQUOTE>
          <HR>
          <BLOCKQUOTE>
               <P><B><I>Copyright &copy; 1997 by Dan Saks</I></B></P>     
               <p>Last month, I described what I believe was a fundamental
                    mistake in the design of C++, namely, that classes and
                    structs are essentially the same construct. (See "C++
                    Theory and Practice: Maybe It Wasn't Such a Good Idea After
                    All," CUJ, August 1997.) </p>
               
               <p> On the surface, this design decision
                    (which I dubbed the Grand Unification) appears to simplify
                    the language by requiring only one set of rules to cover
                    both constructs. Unfortunately, the language rules aren't
                    any simpler than if classes and structs had been kept apart.
                    Moreover, the Grand Unification is responsible for
                    introducing some serious bugs into C++ programs. The bugs 
                    are a direct consequence of the rules by which C++ generates
                    copy constructors and copy assignment operators. This month,
                    I will look at various programming styles you can use to
                    prevent compilers from generating unwanted functions.
                    </p>
               
               <p> The Grand Unification is the source
                    of another, albeit lesser, problem in C++. I will explain
                    that problem, and suggest a cure for it as well.</p>
               
               <h4><FONT COLOR="#000080">Generated Copy
               Operations (Again)</FONT></H4>
               
               <p>Last month, I briefly sketched the
                    rules for copy constructors and copy assignment operators.
                    This month, I provide more details on those rules so that
                    you will understand how to exploit them more effectively.
                    </p>
               
               <p> A copy constructor for a class T is a
                    constructor that can be called with a single argument of
                    type T. The typical declaration for a copy constructor has
                    the form</p>

<PRE>
T(T const &amp;t);
</PRE>
               
               <p>This is not the only form. Any of</p>

<PRE>
T(T &amp;t);
T(T volatile &amp;t);
T(T const volatile &amp;t);
</PRE>
               
               <p>can also be copy constructors. A copy
                    constructor can have more than one parameter, as long as all
                    the parameters after the first have default argument values.
                    For instance,</p>

<PRE>
T(T const &amp;t, X x = v);
</PRE>
               
               <p>is also a copy constructor for class
                    T.</p>
               
               <p>A class can have more than one copy
                    constructor. For example, the following class has two:</p>

<PRE>
class T
    {
public:
    T(T &amp;t);
    T(T const &amp;t);
    ...
    };
</PRE>
               
               <p>In this case, if t is a const T
                    object, then declarations such as</p>

<PRE>
T x(t);
T x = t;
</PRE>
               
               <p>use the copy constructor T(T const &amp;t)
                    to copy t to x. If t is not const, then the declarations use
                    T(T &amp;t).</p>
               
               <p>A constructor for class T with a
                    single parameter of just plain T is not a copy constructor,
                    nor is it even allowed:</p>

<PRE>
T(T t);           // error
</PRE>
               
               <p>If a class T does not declare any copy
                    constructors, a C++ compiler may generate one, but only if
                    the program requires it. For example, if t is a T object,
                    then declarations such as</p>

<PRE>
T x(t);
T x = t;
</PRE>
               
               <p>require that T have a copy
                    constructor.</p>
               
               <p>Calling a function such as</p>

<PRE>
void f(T x);
</PRE>
               
               <p>requires a copy constructor to pass
                    the argument by value. That is, if t is a T object, then the
                    call f(t) uses T's copy constructor to copy t to parameter
                    x.</p>
               
               <p>A function that returns a T object by
                    value also requires a copy constructor. A function such as</p>

<PRE>
T f()
    {
    T v;
    ...
    return v;
    }
</PRE>
               
               <p>uses a temporary T object to carry the
                    return value back to its caller. The return statement copies
                    v to that temporary object using T's copy constructor.</p>
               
               <p>Typically, a generated copy
                    constructor for class T has a declaration of the form</p>

<PRE>
T(T const &amp;t);
</PRE>
               
               <p>However, it might have the form</p>

<PRE>
T(T &amp;t);
</PRE>
               
               <p>In particular, the generated copy
                    constructor for class T has the first form (with a parameter
                    of type T const &amp;) only if </p>
               <UL><LI> for each direct or virtual base
                         class B of T, B has a copy constructor whose first
                         parameter has type B const &amp; or B const volatile &amp;,
                         and </FONT></LI>
                    <LI> for each non-static data member
                         m of T with class type (or array thereof), each such
                         class type M has a copy constructor whose first
                         parameter has type M const &amp; or M const volatile &amp;.</FONT></LI>
               </UL>
               
               <p> Otherwise, the generated copy
                    constructor has the second form (with a parameter of type T
                    &amp;).</p>
               
               <p>A copy assignment operator for class T
                    is an operator= that can be called with an argument of type
                    T. The typical declaration for a copy assignment operator
                    has the form</p>

<PRE>
T &amp;operator=(T const &amp;t);
</PRE>
               
               <p>However, this is not the only form.
                    Any of</p>

<PRE>
T &amp;operator=(T &amp;t);
T &amp;operator=(T volatile &amp;t);
T &amp;operator=(T const volatile &amp;t);
</PRE>
               
               <p>can also be copy assignments. Unlike a
                    copy constructor, a copy assignment must have exactly one
                    parameter. It cannot have additional parameters even if they
                    have default values. However, a copy assignment can have a
                    parameter whose type is just plain T, as in</p>

<PRE>
T &amp;operator=(T t);  // OK
</PRE>
               
               <p>Just as a class can have more than one
                    copy constructor, it can have more than one copy assignment
                    operator. For example,</p>

<PRE>
class T
    {
public:
    T &amp;operator=(T &amp;t);
    T &amp;operator=(T const &amp;t);
    ...
    };
</PRE>
               
               <p>In this case, if t is a const T
                    object, then the assignment</p>

<PRE>
x = t;
</PRE>
               
               <p>uses the copy assignment operator=(T
                    const &amp;t) to assign t to x. If t is not const, then the
                    assignment uses operator=(T &amp;t).</p>
               
               <p>If a class T does not declare a copy
                    assignment, C++ compilers may generate one, but again, only
                    if the program requires it. Typically, the generated copy
                    assignment operator for a class T has a declaration of the
                    form:</p>

<PRE>
T &amp;operator=(T const &amp;t);
</PRE>
               
               <p>However, it might have the form</p>

<PRE>
T &amp;operator=(T &amp;t);
</PRE>
               
               <p>In particular, the generated copy
                    assignment for class T has the first form (with a parameter
                    of type T const &amp;) only if</p>
               <UL><LI> for each direct base class B of
                         T, B has a copy assignment whose parameter has type B
                         const &amp;, B const volatile &amp; or (plain) B, and
                         </FONT></LI>
                    <LI> for each non-static data member
                         m of T with class type (or array thereof), each such
                         class type M has a copy assignment whose parameter has
                         type M const &amp;, M const volatile &amp; or (plain)
                         M. </FONT></LI>
               </UL>
               
               <p> Otherwise, the generated copy
                    constructor has the form</p>

<PRE>
T &amp;operator=(T &amp;t);
</PRE>
               
               <h4><FONT COLOR="#000080">When to Say No</FONT></H4>
               
               <p>As I mentioned last month, the
                    generated copy constructor and copy assignment operator use
                    memberwise copies. Memberwise copies work just fine for some
                    classes, but not for others. It's helpful to have a general
                    rule by which you can tell when memberwise copy is okay, and
                    when it isn't. </p>
               
               <p> The generated copy functions are
                    appropriate for any class in which all the data members have
                    arithmetic or enumeration type (or array thereof), such as:</p>

<PRE>
class complex
    {
    ...
private:
    double real, imag;
    };
</PRE>
               
               <p>For this example, the generated copy
                    constructor is equivalent to:</p>

<PRE>
complex::complex(complex const &amp;c)
:   real(c.real), imag(c.imag)
    {
    }
</PRE>
               
               <p>The member initializer real(c.real)
                    copies c.real to real as if by assignment. Ditto for
                    imag(c.imag). This is the right behavior. The generated copy
                    assignment has essentially the same behavior, and works
                    equally well.</p>
               
               <p>In contrast, the generated copy
                    constructor and copy assignment are almost certainly wrong
                    for any class that contains at least one pointer to
                    dynamically-allocated memory. For such classes, a memberwise
                    copy results in a shallow copy, which leaves two or more
                    objects competing over dynamically-allocated memory. Shallow
                    copies typically leak memory and corrupt the free store. The
                     only way to copy this kind of object is by a deep copy that
                    duplicates all the dynamically-allocated memory that
                    comprises the object's value. </p>
               
               <p> If you're not already familiar with
                    the damage that shallow copies can do, read Item 11 in
                    Meyers[<A href="#REF1">1</a>]
. The title of Item 11
                    actually suggests the following rule of thumb:</p>
               
               <p>Define a copy constructor and an
                    assignment operator for classes with dynamically allocated
                    memory.</p>
               
               <p>Item 27 augments this rule with:</p>
               
               <p>Explicitly disallow use of implicitly
                    generated member functions you don't want. </p>
               
               <p> This is a good start, but I would
                    merge the two rules into one and word it a little
                    differently: </p>
               
               <p> For any class that manages
                    dynamically-allocated resources, either define a copy
                    constructor and a copy assignment operator, or prevent
                    compilers from generating their definitions.</p>
               
               <p>Although memory is probably the most
                    common dynamically- allocated resource, it is by no means
                    the only one. Classes can manage other dynamically-allocated
                    resources, such as files and devices. The data members that
                    designate such resources need not be pointers. </p>
               
               <p> For instance, a class that manages a
                    file might refer to the file using a UNIX-style file
                    descriptor, which is simply a signed integer. In this case,
                    the generated copy constructor and copy assignment would
                    leave two objects fighting over a single file. </p>
               
               <p> Sometimes writing a copy constructor
                    and copy assignment for a class is more trouble than it's
                    worth, or makes no sense at all. In such cases, you should
                    do something to prevent a compiler from generating these
                    functions. Otherwise it will write them for you, and you
                    probably won't like what you get.</p>
               
               <h4><FONT COLOR="#000080">Preventing Generated
               Declarations</FONT></H4>
               
               <p>There are various techniques for
                    suppressing the generated definitions for the copy
                    functions. By far, the most commonly used technique is to
                    declare the copy constructor and copy assignment private,
                    and omit their definitions. That is, defining a class T as</p>

<PRE>
class T
    {
    ...
private:
    T(T const &amp;);
    T &amp;operator=(T const &amp;);
    };
</PRE>
               
               <p>renders T's copy constructor and copy
                    assignment inaccessible to users of T. Any attempt to assign
                    one T object to another, pass a T by value, or return a T by
                    value will produce a compile-time access violation. Well,
                    almost.</p>
               
               <p>This technique still allows members
                    and friends of T to call the copy functions. However, the
                    copy functions have no definitions, so attempts to copy T
                    objects that make it past the compiler will be caught by the
                    linker. The diagnostic messages from the linker might not be
                    as clear or timely as you'd like, but at least they prevent
                    the errors from making their way into the executable 
                    program.</p>
               
               <p>I see the need to omit the definitions
                    as a weakness in this technique. How does someone reading
                    the code know whether the definitions are missing on purpose
                    or by accident? The class definition probably needs a
                    comment such as:</p>

<PRE>
class T
    {
    ...
private:
    T(T const &amp;);
        // no definition by design
    T &amp;operator=(T const &amp;);
        // no definition by design
    };
</PRE>
               
               <p>As an alternative, you can clarify
                    intent by bundling the declarations in a macro such as:</p>

<PRE>
#define disallow_copying_for(C) \
private: \
    C(C const &amp;); \
    C &amp;operator=(C const &amp;)
</PRE>
               
               <p>Since these member functions are
                    supposed to be unusable, the const qualifiers in the
                    parameter lists serve no purpose. You can omit them and
                    write the macro more compactly as:</p>

<PRE>
#define disallow_copying_for(C) \
private: C(C &amp;); C &amp;operator=(C &amp;);
</PRE>
               
               <p>Using this macro, you can define class
                    T as</p>

<PRE>
class T
    {
    ...
    disallow_copying_for(T)
    };
</PRE>
               
               <p>which states the intent more clearly.</p>
               
               <p>I prefer a slightly different approach
                    that catches errors at compile time rather than at link
                    time. This approach relies on knowing when compilers do not
                    generate a copy constructor or copy assignment for a class.
                    </p>
               
               <p> A C++ compiler will not generate a
                    copy constructor for class T if T has:</p>
               <UL><LI> a non-static data member of
                         class type (or array thereof) with an inaccessible or
                         ambiguous copy constructor, or</FONT></LI>
                    <LI> a base class with an
                         inaccessible or ambiguous copy constructor.</FONT></LI>
               </UL>
               
               <p> Similarly, a compiler will not
                    generate a copy assignment operator for T if T has:</p>
               <UL><LI> a non-static data member of
                         class type (or array thereof) with an inaccessible copy
                         assignment operator, or</FONT></LI>
                    <LI> a base class with an
                         inaccessible copy assignment operator.</FONT></LI>
               </UL>
               
               <p>According to these rules, you can
                    define:</p>

<PRE>
class uncopyable
    {
private:
    uncopyable(uncopyable &amp;);
    void operator=(uncopyable &amp;);
    };
</PRE>
               
               <p>Then, if you want to suppress the
                    generated copy functions for class T, you can define T as:</p>

<PRE>
class T
    {
    ...
private:
    uncopyable u;
    };
</PRE>
               
               <p>Since T has no copy constructor, the
                    compiler will try to generate one on demand. As always, T's
                    generated copy constructor will try using memberwise
                    initialization, so that the constructor would be equivalent
                    to:</p>

<PRE>
T::T(T const &amp;t)
:   u(t.u) ...
    {
    }
</PRE>
               
               <p></p>
               
               <p>However, u's copy constructor is
                    private, and so the member-initializer u(t.u) causes an
                    access violation at compile-time. The generated copy
                    assignment operator hits the same snag. Therefore, any
                    attempt to copy a T object, even within a member or friend
                    of T, will produce a compile-time error.</p>
               
               <p>Surprisingly, this particular
                    technique has a slight run-time cost. Class uncopyable has
                    no members, and therefore appears to have a size of zero.
                    However, C++ does not allow zero-sized objects, including
                    zero-sized data members. Therefore, adding a member of type
                    uncopyable to class T actually increases the size of all T
                    objects. </p>
               
               <p> On the other hand, C++ does allow
                    zero-sized base classes. Defining class T as</p>

<PRE>
class T : uncopyable
    {
    ...
    };
</PRE>
               
               <p>inhibits the generated copy functions
                    without increasing the size of T objects.</p>
               
               <p>In the definition for T just above,
                    the base class specifier</p>

<PRE>
: uncopyable
</PRE>
               
               <p>has no access specifier. By default,
                    the access to base classes of a class defined with the
                    keyword class is private. Therefore, the definition for T is
                    equivalent to:</p>

<PRE>
class T : private uncopyable
    {
    ...
    };
</PRE>
               
               <p>Class uncopyable has no inheritable
                    public members, so I don't think it really matters whether
                    you use public, private, or protected inheritance.</p>
               
               <p>As defined above, class uncopyable has
                    a problem, as illustrated by the following example. Suppose
                    class T is:</p>

<PRE>
class T : uncopyable
    {
public:
    T(int i);
private:
    int t;
    };
</PRE>
               
               <p>where the constructor is defined by:</p>

<PRE>
T::T(int i) : t(i)
    {
    }
</PRE>
               
               <p>Since T has a base class of type
                    uncopyable, this constructor initializes T's base class
                    sub-object by calling uncopyable's default constructor.
                    However, uncopyable has no default constructor, and the
                    compiler will not generate one because uncopyable already
                    has at least one explicitly-declared constructor. (C++
                    generates a default constructor for a class only if that
                    class has no explicitly-declared constructors.)</p>
               
               <p>With the previous definition for class
                    uncopyable, it's impossible to write any constructors for a
                    class derived from uncopyable. Class uncopyable needs an
                    explicitly-defined public default constructor, as in:</p>

<PRE>
class uncopyable
    {
public:
    uncopyable() { }
private:
    uncopyable(uncopyable &amp;);
    void operator=(uncopyable &amp;);
    };
</PRE>
               
               <p>My current advice for disabling copy
                    functions is:</p>
               
               <p>To prevent memberwise copying for a
                    class T, define class uncopyable and specify it as a base of
                    T. </p>
               
               <p> I caution you that I've been using
                    this technique in my own work for only a few months, and I
                    haven't seen anyone else recommend it. I know of no problems
                    with it, but that's hardly a proof of correctness. If you
                    try it and run into problems, please let me know and I'll
                    alert the masses.</p>
               
               <h4><FONT COLOR="#000080">More Peculiarities
               from Unification</FONT></H4>
               
               <p>The C language rules for naming
                    structs are a little eccentric, but they're pretty harmless.
                    However, when extended to classes in C++, those same rules
                    open little cracks for bugs to crawl through. </p>
               
               <p> In C, the name s appearing in</p>
               
               <p></p>

<PRE>
struct s
    {
    ...
    };
</PRE>
               
               <p>is a tag. A tag name is not a type
                    name. Given the definition above, declarations such as</p>

<PRE>
s x;    /* error in C */
s *p;   /* error in C */
</PRE>
               
               <p>are errors in C. You must write them
                    as</p>

<PRE>
struct s x;     /* OK */
struct s *p;    /* OK */
</PRE>
               
               <p>The names of unions and enumerations
                    are also tags rather than types.</p>
               
               <p>In C, tags are distinct from all other
                    names (for functions, types, variables, and enumeration
                    constants). C compilers maintain tags in a symbol table
                    that's conceptually if not physically separate from the
                    table that holds all other names. Thus, it is possible for a
                    C program to have both a tag and an another name with the
                    same spelling in the same scope. For example,</p>

<PRE>
struct s s;
</PRE>
               
               <p>is a valid declaration which declares
                    variable s of type struct s. It may not be good practice,
                    but C compilers must accept it. I have never seen a
                    rationale for why C was designed this way. I have always
                    thought it was a mistake, but there it is.</p>
               
               <p>Many programmers (including yours
                    truly) prefer to think of struct names as type names, so
                    they define an alias for the tag using a typedef. For
                    example, defining</p>

<PRE>
struct s
    {
    ...
    };
typedef struct s S;
</PRE>
               
               <p>lets you use S in place of struct s,
                    as in</p>

<PRE>
S x;
S *p;
</PRE>
               
               <p>A program cannot use S as the name of
                    both a type and a variable (or function or enumeration
                    constant):</p>

<PRE>
S S;    // error
</PRE>
               
               <p>This is good.</p>
               
               <p>The tag name in a struct, union, or
                    enum definition is optional. Many programmers fold the
                    struct definition into the typedef and dispense with the tag
                    altogether, as in:</p>

<PRE>
typedef struct
    {
    ...
    } S;
</PRE>
               
               <p>Once again, as a consequence of the Grand Unification,
                    classes and structs are essentially the same in C++.
                    Although the draft C++ Standard doesn't call them tags,
                    class names act very much like tags. For example, you can
                    declare an object of class string with a declaration such as</p>

<PRE>
class string s;
</PRE>
               
               <p>Of course, no one actually does.</p>
               
               <p>C++ was designed so that user-defined
                    types can look as much as possible like built-in types
                    (whenever appropriate). Using the keyword class in the
                    declaration above serves only to remind readers that string
                    is not a built-in type. Therefore, C++ lets you use class
                    names as if they were type names. That is, you can omit the
                    keyword class from the declaration just above, and write it 
                    as just:</p>
               
               <p></p>

<PRE>
string s;
</PRE>
               
               <p>The draft C++ Standard never utters
                    the word tag. In C++, the names of classes, structs, unions,
                    and enumerations are just type names. However, there are
                    several rules that single out these type names for special
                    treatment. I find it easier to continue to refer to class,
                    struct, union, and enum names as tags. </p>
               
               <p> If you want, you can imagine that C++
                    generates a typedef for every tag name, such as</p>

<PRE>
typedef class string string;
</PRE>
               
               <p>Unfortunately, this is not entirely
                    accurate. I wish it were that simple, but it's not. C++
                    can't generate such typedefs for structs, unions, or enums
                    without introducing incompatibilities with C.</p>
               
               <p>For example, suppose a C program
                    declares both a function and a struct named status:</p>

<PRE>
int status();
struct status;
</PRE>
               
               <p>Again, this may be bad practice, but
                    it is C. In this program, status (by itself) refers to the
                    function; struct status refers to the type.</p>
               
               <p>If C++ did automatically generate
                    typedefs for tags, then when you compiled this program as
                    C++, the compiler would generate:</p>

<PRE>
typedef struct status status;
</PRE>
               
               <p>Unfortunately, this type name would
                    conflict with the function name, and the program would not
                    compile. That's why C++ can't simply generate a typedef for
                    each tag.</p>
               
               <p>In C++, tags act just like typedef
                    names, except that a program can declare an object,
                    function, or enumerator with the same name and the same
                    scope as a tag. In that case, the object, function, or
                    enumerator name hides the tag name. The program can refer to
                    the tag name only by using the keyword class, struct, union,
                    or enum (as appropriate) in front of the tag name. A type 
                    name consisting of one of these keywords followed by a tag
                    is an elaborated-type-specifier. For instance, struct status
                    and enum month are elaborated-type-specifiers. </p>
               
               <p> Thus, a C program that contains both:</p>

<PRE>
int status();
struct status;
</PRE>
               
               <p>behaves the same when compiled as C++.
                    The name status alone refers to the function. The program
                    can refer to the type only by using the
                    elaborated-type-specifier struct status.</p>
               
               <p>So how does this allow bugs to creep
                    into programs? Consider the program in <A href="list1.htm">Listing
                         1</a>.
 This program defines a class foo with a default
                    constructor, and a conversion operator that converts a foo
                    object to char const *. The expression</p>

<PRE>
p = foo();
</PRE>
               
               <p>in main should construct a foo object
                    and apply the conversion operator. The subsequent output
                    statement</p>

<PRE>
cout &lt;&lt; p &lt;&lt; '\n';
</PRE>
               
               <p>should display class foo, but it
                    doesn't. It displays function foo.</p>
               
               <p>This surprising result occurs because
                    the program includes header lib.h shown in
                    <A href="list2.htm">Listing 2</a>.
 This header defines a
                    function also named foo. The function name foo hides the
                    class name foo, so the reference to foo in main refers to
                    the function, not the class. main can refer to the class
                    only by using an elaborated-type-specifier, as in</p>

<PRE>
p = class foo();
</PRE>
               
               <p>The way to avoid such confusion
                    throughout the program is to add the following typedef for
                    the class name foo:</p>

<PRE>
typedef class foo foo;
</PRE>
               
               <p>immediately before or after the class
                    definition. This typedef causes a conflict between the type
                    name foo and the function name foo (from the library) that
                    will trigger a compile-time error.</p>
               
               <p>I know of no one who actually writes
                    these typedefs as a matter of course. It requires a lot of
                    discipline. Since the incidence of errors such as the one in
                    <A href="list1.htm">Listing 1</a>
is probably pretty
                    small, you many never run afoul of this problem. But if an
                    error in your software might cause bodily injury, then you
                    should write the typedefs no matter how unlikely the error.
                    </p>
               
               <p> I can't imagine why anyone would ever
                    want to hide a class name with a function or object name in
                    the same scope as the class. The hiding rules in C were a
                    mistake, and they should not have been extended to classes
                    in C++. Indeed, you can correct the mistake, but it requires
                    extra programming discipline and effort that should not be
                    necessary.</p>
               
               <h4><FONT COLOR="#000080">Reference</FONT></H4>
               
               <p>[<A name="REF1">1</a>]
 Scott Meyers,
                    Effective C++ (Addison-Wesley, 1992). </p>
               
               <p><I>Dan Saks is the president of Saks &amp;
                    Associates, which offers training and consulting in C++ and
                    C. He is active in C++ standards, having served nearly seven
                    years as secretary of the ANSI and ISO C++ standards
                    committees. Dan is coauthor of C++ Programming Guidelines,
                    and codeveloper of the Plum Hall Validation Suite for C++
                    (both with Thomas Plum). You can reach him at 393 Leander
                    Dr., Springfield, OH 45504-4906 USA, by phone at
                    +1-937-324-3601, or electronically at dsaks@wittenberg.edu.
                    </I></p>
     
<h4><a href="../../../source/1997/sep97/saks.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
     </BODY>
</HTML>
