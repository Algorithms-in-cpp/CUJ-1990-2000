



<HTML><HEAD>

<TITLE>September 1997/A Template-Based Network Implementation/Listing 3</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4>Listing 3:	SPATH.H &#151; Implementation of two shortest-path algorithms</h4>

<pre>
/*
The predicate to the shortest-path routines must be like:

struct PRED
{
    typedef T0 value_type;
    static const value_type infinity;
    static const value_type zero;
    value_type operator()(const _ARC&amp; arc) const;
};

value_type T0 needs (built-in types already defined):

T0 operator+(const T0&amp; left, const T0&amp; right);
T0 operator&lt;(const T0&amp; left, const T0&amp; right);
*/

    // template struct distance_less
    //  compares second element of a pair&lt;&gt;
    // used by shortest_path_heap_dijkstrka
template&lt;class _ELEM&gt;
struct distance_less : public binary_function&lt;_ELEM, _ELEM, bool&gt;
{
    bool operator()(const _ELEM&amp; x, const _ELEM&amp; y) const
        {return x.second &gt; y.second;}
};

    // TEMPLATE FUNCTION shortest_path WITH PRED
    // dies if there's a negative-length cycle

template&lt;class _NET, class _NETNODEIT, class _NETNODESIZE, 
         class _Pr, class _PRTYPE&gt; inline
bool shortest_path_heap_dijkstra(_NET&amp; _N, _NETNODEIT _S, 
        vector&lt;_NETNODESIZE, allocator&lt;_NETNODESIZE&gt; &gt;&amp; _pred, 
        vector&lt;_PRTYPE, allocator&lt;_PRTYPE&gt; &gt;&amp; _dist,  _Pr&amp; _P)
{

// body not shown ...

}
    
    // TEMPLATE FUNCTION shortest_path WITH PRED
    // returns false is a negative cycle exists in the network

template&lt;class _NET, class _NETNODEIT, class _NETNODESIZE, 
         class _Pr, class _PRTYPE&gt; inline
bool shortest_path_fifo_labelcorrecting(_NET&amp; _N, _NETNODEIT _S, 
        vector&lt;_NETNODESIZE, allocator&lt;_NETNODESIZE&gt; &gt;&amp; _pred, 
        vector&lt;_PRTYPE, allocator&lt;_PRTYPE&gt; &gt;&amp; _dist,  _Pr&amp; _P)
{
    typedef _PRTYPE distance_type;
    typedef _NETNODESIZE size_type;

    size_type _i, _j;
    _NET::arc_iterator ait;
    distance_type _val;

    // set initial conditions   
    int _n = _N.size_nodes();
    vector&lt;distance_type, allocator&lt;distance_type&gt; &gt; 
        _distances(_n, _Pr::infinity);
    _pred.resize(_n);
    _distances[_S - _N.begin_nodes()] = _Pr::zero;

    // _l is the list of nodes remaining to examine
    list&lt;size_type, allocator&lt;size_type&gt; &gt; _l;
    // _cnt indicates how many times we've looked at a node
    vector&lt;int, allocator&lt;int&gt; &gt; _cnt(_n, 0); 
    // _inList indicates whether a node is currently in the list
    vector&lt;bool, allocator&lt;bool&gt; &gt; _inList(_n, false);

    // put source_node into list
    _l.push_front(_S-_N.begin_nodes());
    _inList[_S-_N.begin_nodes()] = true;

    // while the list is not empty
    while( !_l.empty() )
    {
        // pull node from list to inspect
        _i = _l.front();
        // if we've looked at this node as many times as there
        // are nodes in the network, we're in a negative cycle
        if( ++(_cnt[_i]) &gt;= _n )
            return false;   
        _l.pop_front();
        _inList[_i] = false;

        // for each arc leaving this node
        for(ait=_N.begin_arcs(_i); !(ait==_N.end_arcs(_i)); ait++)
        {
            // if distance from this node to destination is better
            // than destination's current label, then relabel
            _val = _distances[_i] + _P(*ait);
            _j = _N.arcDestinNode(ait);
            if( _val &lt; _distances[_j] )
            {
                // relabel destination node
                _distances[_j] = _val;
                _pred[_j] = _i;
                // insert destin node in list if not already there
                if( !_inList[_j] )
                {
                    _l.push_back(_j);
                    _inList[_j] = true;
                }
            }
        }
    }
    // put outgoing distance vector into parameter provided by caller
    _dist.swap(_distances);
    return true;
}
//End of File
</pre>
</body></html>
