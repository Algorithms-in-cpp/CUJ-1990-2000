



<HTML><HEAD>

<TITLE>September 1997/A Template-Based Network Implementation/Listing 1</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4>Listing 1:	NETWORK.H &#151; Template class network</h4>

<pre>
// NOTE: portions of this listing are not shown here due to space
// constraints.  Full source code is available on the CUJ ftp site
//
// not shown: #includes, #defines, preprocessing directives
// ...

#if defined(__BORLANDC__) || (_MSC_VER &gt;= 1100 )
    using namespace std;
#endif

template&lt;class _NODE, class _ARC, class _A&gt; ///
class network
{
public:
#if _MSC_VER &lt; 1100
    struct _iArc;   
    struct _iNode;  
#endif

    typedef _A allocator_type;
    typedef allocator_type::size_type size_type;
    typedef network&lt;_NODE, _ARC, _A&gt; _Myt;

protected:
    allocator_type _alloc;

    // _iArc
#if _MSC_VER == 1100
    // defined outside class due to namespace resolution problems
    // with Microsoft Visual C++ 5.0
    typedef __Arc&lt;_ARC, size_type&gt; _iArc;
#else
    struct _iArc
    {
        _iArc() {}
        _iArc(const _ARC arc, size_type src, size_type dtn) :
            data(arc), source_node(src), destin_node(dtn) {}
        _ARC data;
        size_type source_node;
        size_type destin_node;
        bool operator==(const _iArc&amp; net) const
            { return this==&amp;net; }
        bool operator!=(const _iArc&amp; net) const
            { return this!=&amp;net; }
        bool operator&lt; (const _iArc&amp; net) const
            { return this&lt;&amp;net; }
        bool operator&gt; (const _iArc&amp; net) const
            { return this&gt;&amp;net; }
    };
#endif

/// typedef _A::rebind&lt;_iArc&gt;::other arc_allocator_type
    typedef allocator&lt;_iArc&gt;    arc_allocator_type;     ///
    // ARCLIST
    typedef list&lt; _iArc , arc_allocator_type &gt; ARCLIST;
    typedef ARCLIST::iterator       _arcIt;
    typedef ARCLIST::const_iterator _CarcIt;
    ARCLIST arc_list;

    // _iNode
#if _MSC_VER == 1100
    // defined outside class due to namespace resolution
    // problems with Microsoft Visual C++ 5.0
    typedef __Node&lt;_NODE, _arcIt&gt; _iNode;
#else
    struct _iNode   
        {
            _iNode() {}
            _iNode(const _NODE&amp; n, const _arcIt&amp; a) :
                        data(n), firstArcOut(a) {}
            _NODE data;
            _arcIt firstArcOut;
            bool operator==(const _iNode&amp; net) const
                { return this==&amp;net; }
            bool operator&lt; (const _iNode&amp; net) const
                { return this&lt;&amp;net; }
        };
#endif

    // ...

    // NODELIST
    typedef vector&lt;_iNode, node_allocator_type &gt; NODELIST; 
    typedef NODELIST::iterator          _nodeIt;
    typedef NODELIST::const_iterator    _CnodeIt;
    NODELIST node_list;

public:

    // not shown: various typedefs
    // ...

        // CLASS node_iterator

    class node_iterator : 
        public _Bidit&lt;node_value_type, node_difference_type&gt;
    {

    // ...


    };

        // CLASS const_node_iterator

    class const_node_iterator : 
        public _Bidit&lt;node_value_type, node_difference_type&gt; 
    {

    // ...

    };

    typedef reverse_bidirectional_iterator&lt;const_node_iterator, 
        node_value_type, const_node_reference, const_node_pointer,
        node_difference_type&gt;   const_reverse_node_iterator;
    typedef reverse_bidirectional_iterator&lt;node_iterator, 
        node_value_type, node_reference, node_pointer, 
        node_difference_type&gt;   reverse_node_iterator;

    // not shown: node iterator forwarding functions
    // ...

        // CLASS arc_iterator

    class arc_iterator : 
        public _Bidit&lt;arc_value_type, arc_difference_type&gt;
    {

    // ...

    };

    typedef reverse_bidirectional_iterator&lt;const_arc_iterator, 
            arc_value_type, const_arc_reference, const_arc_pointer, 
            arc_difference_type&gt;    const_reverse_arc_iterator;
    typedef reverse_bidirectional_iterator&lt;arc_iterator, 
            arc_value_type, arc_reference, arc_pointer, 
            arc_difference_type&gt;    reverse_arc_iterator;

    // not shown: arc iterator forwarding functions
    // ...

protected:
    _arcIt _end_arcs(node_iterator node)
        {
            // it at last node, return end of the arc list
            if( (node==(node_list.end()-1)) || 
                (node==(node_list.end())))
                return arc_list.end();
            // otherwise return first arc of next node
            return (*(++node)._Myit()).firstArcOut;
            }

    // not shown: remaining internal iterator functions
    // ...

public:

    // not shown: arc insertion &amp; erasure functions,
    // node insertion &amp; erasure functions,
    // auxiliary functions

public:
    network() {}
    ~network() {}
};
//End of File
</pre>
</body></html>
