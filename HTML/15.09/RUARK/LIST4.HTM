



<HTML><HEAD>

<TITLE>September 1997/A Template-Based Network Implementation/Listing 4</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4>Listing 4:	SAMPLE.CPP  Sample usage of the network template and shortest
path algorithms</h4>

<pre>
#include &lt;iostream&gt;
#include "network.h"
#include "spath.h"

#if defined(__BORLANDC__) || (_MSC_VER &gt;= 1100 )
    using namespace std;
#endif

// interesting node and arc classes
class NODE
{
    int source;
public:
    NODE() : source(0) {}
    NODE(const NODE&amp; node) : source(node.source) {}
    NODE&amp; operator=(const NODE&amp; node) 
        { source=node.source; return *this; }
    int  getSource() const { return source; }
    void setSource(int s) { source=s; }
};

class ARC
{
    // this arc stores a flow, capacity, and cost information;
    // suitable for a simple min-cost flow problem.
    int flow;
    int capacity;
    int cost;
public:
    ARC() : flow(0),capacity(0), cost(0) {}
    ARC(const ARC&amp; arc) : flow(arc.flow),capacity(arc.capacity), 
        cost(arc.cost){}
    ARC&amp; operator=(const ARC&amp; arc) 
        { flow=arc.flow; capacity=arc.capacity; 
          cost=arc.cost; return *this; }
    int  getFlow() const { return flow; }
    void setFlow(int f) { flow=f; }
    int  getCapacity() const { return capacity; }
    void setCapacity(int c) { capacity=c; }
    int  getCost() const { return cost; }
    void setCost(int c) { cost=c; }
};

//
// predicate for above ARC class for the shortest-path algorithms
//
struct ARCCOST
{
    typedef int value_type;
    static const int infinity;
    static const int zero;
    // "distance" on these arcs is the cost of the arc
    int operator()(const ARC&amp; arc) const
        { return arc.getCost(); }
};
const int ARCCOST::infinity = 10000000;
const int ARCCOST::zero = 0;
typedef network&lt;NODE, ARC, allocator&lt;NODE&gt; &gt; NETWORK;

//
// put a five-node network into the passed parameter
//
void load(NETWORK&amp; net)
{
// ...
}

//
// display the structure of the network
//
void iterate(NETWORK&amp; net)
{
// ...
}

//
// define a simple integer-based network
//
typedef network&lt;int, int, allocator&lt;int&gt; &gt; NETWORK2;

struct ARCCOST2
{
    typedef int value_type;
    static const int infinity;
    static const int zero;
    int operator()(const int&amp; arc) const
        { return arc; }
};
const int ARCCOST2::infinity = 10000000;
const int ARCCOST2::zero = 0;

// vector to use for distance labels
typedef vector&lt;int, allocator&lt;int&gt; &gt; INTVECTOR;

//
// given predecessor list and distance vector, report
// shortest-path results
//
void report(const INTVECTOR&amp; pred, const INTVECTOR&amp; distance)
{
    for(int i=0;i&lt;pred.size();i++)
    {
        cout &lt;&lt; "Node " &lt;&lt; i+1;
        cout &lt;&lt; " Predecessor: " &lt;&lt; pred[i]+1;
        cout &lt;&lt; " Distance: " &lt;&lt; distance[i];
        cout &lt;&lt; endl;
    }
}

//
// a simple negative-distance cycle network
//
void neg_cycle()
{
    cout &lt;&lt; "Negative cycle network." &lt;&lt; endl;
    NETWORK2 net;
    net.insert_nodes(net.begin_nodes(), 4, 0);
    net.insert_arc(0,1,1);
    net.insert_arc(1,2,2);
    net.insert_arc(2,3,-3);
    net.insert_arc(3,1,0);
    net.insert_arc(3,0,1);
    ARCCOST2 a;
    INTVECTOR pred;
    INTVECTOR distance;

    bool b;
    b = shortest_path_fifo_labelcorrecting(net, net.begin_nodes(), 
        pred, distance, a);
    if( b )
    {
        cout &lt;&lt; "DIDN'T DETECT NEGATIVE CYCLE. OOPS" &lt;&lt; endl;
        report(pred, distance);
    }
    else
        cout &lt;&lt; "--&gt;Negative cycle detected!" &lt;&lt; endl;
}

//
// yet another shortest-path problem
//
void spath2()
{

    NETWORK2 net;
    net.insert_nodes(net.begin_nodes(), 6, 0);
    net.insert_arc(2, 3, 1);
    net.insert_arc(4, 3, 1);
    net.insert_arc(2, 4, 2);
    net.insert_arc(1, 2, 2);
    net.insert_arc(1, 3, 2);
    net.insert_arc(4, 5, 3);
    net.insert_arc(0, 2, 4);
    net.insert_arc(0, 1, 6);
    net.insert_arc(3, 5, 7);

    ARCCOST2 a;
    INTVECTOR pred;
    INTVECTOR distance;

    bool b = shortest_path_heap_dijkstra(net, net.begin_nodes(), 
        pred, distance, a);
    report(pred, distance);
}

int main()
{
    NETWORK net;
    load(net);
    iterate(net);
    net.erase_nodes(2);
    net.erase_nodes(1,2);
    iterate(net);
    net.insert_nodes(net.begin_nodes()+1, 5);
    iterate(net);
    net.clear();
    iterate(net);

    spath2();
    neg_cycle();
    return 0;
}
//End of File
</pre>
</body></html>
