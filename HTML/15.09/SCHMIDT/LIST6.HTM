



<HTML><HEAD>

<TITLE>September 1997/The Learning C/C++urve/Listing 6</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4>Listing 6:	auto_pointer.cpp</h4>

<pre>
#if !defined INC_auto_pointer_
    #define  INC_auto_pointer_

#if !defined DEF_auto_pointer_
    #define  DEF_auto_pointer_

template&lt;class t&gt;
inline auto_pointer::~auto_pointer()
    {
    }

template&lt;class t&gt;
inline auto_pointer::auto_pointer(t * const pointer) :
        is_owner_(true),
        pointer_(pointer)
    {
    }

template&lt;class t&gt;
inline auto_pointer::auto_pointer
        (auto_pointer&lt;t&gt; const &amp;that) :
        is_owner_(that.is_owner_),
        pointer_(that.pointer_)
    {
    }

template&lt;class t&gt;
inline auto_pointer&lt;t&gt; &amp;auto_pointer&lt;t&gt;::operator=
        (auto_pointer&lt;t&gt; const &amp;that)
    {
    if ((const void *) this != (const void *) &amp;that)
        {
        is_owner_  = that.is_owner_;
        pointer_ = that.pointer_;
        that.release();
        }
    return *this;
    }

template&lt;class t&gt;
inline auto_pointer&lt;t&gt;::operator t *() const
    {
    return pointer_;
    }

template&lt;class t&gt;
inline t **auto_pointer&lt;t&gt;::operator&amp;() const
    {
    if (is_owner_ &amp;&amp; pointer_ == NULL)
        {
        cerr &lt;&lt; "address-of NULL auto_pointer" &lt;&lt; endl;
        throw invalid_argument;
        }
    return &amp;pointer_;
    }

template&lt;class t&gt;
inline t * const *auto_pointer&lt;t&gt;::operator&amp;() const
    {
    if (is_owner_ &amp;&amp; pointer_ == NULL)
        {
        cerr &lt;&lt; "address-of NULL auto_pointer" &lt;&lt; endl;
        throw invalid_argument;
        }
    return &amp;pointer_;
    }

template&lt;class t&gt;
inline t &amp;auto_pointer&lt;t&gt;::operator*() const
    {
    if (pointer_ == NULL)
        {
        cerr &lt;&lt; "dereference NULL auto_pointer" &lt;&lt; endl;
        throw invalid_argument;
        }
    }

template&lt;class t&gt;
inline t *auto_pointer&lt;t&gt;::operator-&gt;() const
    {
    if (pointer_ == NULL)
        {
        cerr &lt;&lt; "dereference NULL auto_pointer" &lt;&lt; endl;
        throw invalid_argument;
        }
    }

template&lt;class t&gt;
inline void auto_pointer&lt;t&gt;::release() const
    {
    is_owner_ = false;
    }

#endif // !defined DEF_auto_pointer_

template&lt;classt&gt;
inline AUTO_POINTER::AUTO_POINTER(t * const pointer) :
        auto_pointer(pointer)
    {
    }

template&lt;class t&gt;
inline AUTO_POINTER::AUTO_POINTER(const AUTO_POINTER &amp;that) :
        auto_pointer(that)
    {
    }

#endif // !defined INC_auto_pointer_
//End of File
</pre>
</body></html>
