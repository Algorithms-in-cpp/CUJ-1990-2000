


<HTML>
<HEAD>

<TITLE>March 1992/Standard C</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmar.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Standard C<A name="0096_0039"><A name="0096_0039"></font></h2><P>
<h3 align="center"><A name="0096_0000"><A name="0096_0000">The Header &lt;signal.h&gt;</h3><P>
<h3 align="center"><font color="#800000">P.J. Plauger</font></h3><hr><blockquote><P>
<P><i><A name="0096_0000"><A name="0096_0000">P.J. Plauger is senior editor of The C Users Journal. He is secretary of the ANSI C standards committee, X3J11, and convenor of the ISO C standards committee, WG14. His latest book is The Standard C Library, published by Prentice-Hall. You can reach him care of The C Users Journal or via <I>Internet at pjp@plauger.uunet.uu.net</I>.</i></P><P>
<h4><FONT COLOR="#000080"><A name="0096_003A">Introduction<A name="0096_003A"></FONT></h4></P>
A <I>signal</I> is an extraordinary event that occurs during the execution of a program. <I>Synchronous</I> signals occur because of actions that your program takes. Division by zero is one example. Accessing storage improperly is another. <I>Asynchronous</I> signals occur because of actions outside your program. Someone striking an attention key is one example. A separate program (executing asynchronously) signaling yours is another.<P>
A signal that is not ignored by your program demands immediate handling. If you do not specify handling for a signal that occurs, it is treated as a fatal error. Your program terminates execution with unsuccessful status. In some implementations, the status indicates which signal occurred. In others, the Standard C library writes an error message to the standard error stream before it terminates execution.<P>
The header &lt;<I>signal.h</I>&gt; defines the code values for an open-ended set of signals. It also declares two functions:<P>
<UL><li><I>raise</I>, which reports a synchronous signal</li>
<li><I>signal</I>, which lets you specify the handling of a signal</li></UL>
You can handle a signal one of three ways:<P>
<UL><li><I>default</I> handling is to terminate execution, as described above</li>
<li><I>ignoring</I> the signal effectively discards it</li>
<li><I>handling</I> the signal causes control to pass to a function that you designate</li></UL>
In the last case, the function that you designate is called a <I>signal handler</I>. The Standard C library calls a signal handler when its corresponding signal is reported. Normal execution of the program is suspended. If the signal handler returns to its caller, execution of the program resumes at the point where it was suspended. Aside from the delay, and any changes made by the signal handler, the behavior of the program is unaffected.<P>
<h4><FONT COLOR="#000080"><A name="0096_003B">Synchronization<A name="0096_003B"></FONT></h4></P>
This sounds like elegant machinery, but it is not. The occurrence of a signal introduces a second thread of control within a program. That raises all sorts of issues about synchronization and reliable operation. The C Standard promises little in either regard. C programs have been handling signals since the earliest days of the language. Nevertheless, a portable program can safely take very few actions within a signal handler.<P>
One problem is the Standard C library itself. If called with valid arguments, no library function should ever generate a synchronous signal. But an asynchronous signal can occur while the library is executing. The signal may suspend program execution part way through a print operation, for example. Should the signal handler print a message, an output stream can end up in a confused state. There is no way to determine from within a signal handler whether a library function is in an unsafe state.<P>
Another problem concerns data objects that you declare to have <I>volatile</I> types. That warns the translator that surprising agents can access the data object, so it is careful how it generates accesses to such a data object. In particular, it knows not to perform optimizations that move the accesses to <I>volatile</I> data objects beyond certain <I>sequence points</I>. A signal handler is, of course, a surprising agent. Thus, you should declare any data object you access within a signal handler to have a <I>volatile</I> type. That helps, provided the signal is synchronous and occurs between two sequence points where the data object is not accessed. For an asynchronous signal however, no amount of protection suffices. Signals are not confined to suspending program execution only at sequence points.<P>
The C Standard offers a partial solution to the problem of writing reliable signal handlers. The header &lt;<I>signal.h</I>&gt; defines the type <I>sig_atomic_t</I>. It is an integer type that the program accesses atomically. A signal should never suspend program execution part way through the access of a data object declared with this type. A signal handler can share with the rest of the program only data objects declared to have type <I>volatile sig_atomic_t</I>.<P>
<h4><FONT COLOR="#000080"><A name="0096_003C">Shortcomings Of Signals<A name="0096_003C"></FONT></h4></P>
As a means of communicating information, signals leave much to be desired. The semantics spelled out for signals in the C Standard is based heavily on their behavior under the early UNIX operating system. That system had serious lapses in the way it managed signals:<P>
<UL><li>Multiple signals could get lost. The system did not queue signals, but remembered only the last one reported. If a second signal occurred before a handler processed the first, a signal could go unnoticed.</li>
<li>A program could terminate even when it endeavors to process all signals. When control first passes to a signal handler, handling for that signal reverts to default behavior. The signal handler must call <I>signal</I> to reestablish itself as the handler for the signal. Should that signal occur between entry to the handler and the call to <I>signal</I>, the default handler gets control and terminates the program.</li>
<li>No mechanism exists for specifically terminating the handling of a signal. In other operating systems, the program enters a special state. Processing of subsequent signals blocks until the signal handler reports completion. On such systems, other functions may have to assist in processing signals properly. These can include <I>abort</I> and <I>exit</I>, declared in &lt;<I>stdlib.h</I>&gt;, and <I>longjmp</I>, declared in &lt;<I>setjmp.h</I>&gt;.</li></UL>
Moreover, signals arise from an odd assortment of causes on any computer. The ones named in the C Standard are a subset of those supported by UNIX. These in turn derive from the interrupts and traps defined for the PDP-11. Mapping the sources of signals for a given computer onto those defined for C is often arbitrary. Mapping the semantics of signal handling for a given operating systems can be even more creative.<P>
The C Standard had to weaken the already weak semantics of UNIX signals to accommodate an assortment of operating systems:<P>
<UL><li>A given signal may never occur unless you report it with <I>raise</I>.</li>
<li>A given signal may be ignored unless you call <I>signal</I> to turn it on.</li></UL>
There's not much left.<P>
Thus, no portable use for the functions declared in &lt;<I>signal.h</I>&gt; can be defined with complete safety. You could, in principle, specify a handler for a signal that only <I>raise</I> reports. It's hard to imagine a situation where that works better than instead using <I>setjmp</I> and <I>longjmp</I>, declared in &lt;<I>setjmp.h</I>&gt;. Besides, you cannot ensure that a given signal is never reported on an arbitrary implementation of C. Any time your program handles signals, accept the fact that you limit its portability.<P>
<h4><FONT COLOR="#000080"><A name="0096_003D">What The C Standard Says<A name="0096_003D"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0096_003E">7.7 Signal handling &lt;<B><I>signal.h</I></B>&gt;<A name="0096_003E"></FONT></h4></P>
The header &lt;<I>signal.h</I>&gt; declares a type and two functions and defines several macros, for handling various <I>signals</I> (conditions that may be reported during program execution).<P>
The type defined is<P>
<pre>sig_atomic_t</pre>
which is the integral type of an object that can be accessed as an atomic entity, even in the presence of asynchronous interrupts.<P>
The macros defined are<P>
<pre>SIG_DFL
SIG_ERR
SIG_IGN</pre>
which expand to constant expressions with distinct values that have type compatible with the second argument to and the return value of the <I>signal</I> function, and whose value compares unequal to the address of any declarable function; and the following, each of which expands to a positive integral constant expression that is the signal number corresponding to the specified condition:<P>
<I>SIGABRT</I> &#151; abnormal termination, such as is initiated by the <I>abort</I> function<P>
<I>SIGFPE</I> &#151; an erroneous arithmetic operation, such as zero divide or an operation resulting in overflow<P>
<I>SIGILL</I> &#151; detection of an invalid function image, such as an illegal instruction<P>
<I>SIGINT</I> &#151; receipt of an interactive attention signal<P>
<I>SIGSEGV</I> &#151; an invalid access to storage<P>
<I>SIGTERM</I> &#151; a termination request sent to the program<P>
An implementation need not generate any of these signals, except as a result of explicit calls to the <I>raise</I> function. Additional signals and pointers to undeclarable functions, with macro definitions beginning, respectively, with the letters <I>SIG</I> and an uppercase letter or with <I>SIG_</I> and an uppercase letter,108 may also be specified by the implementation. The complete set of signals, their semantics, and their default handling is implementation-defined; all signal numbers shall be positive.<P>
<h4><FONT COLOR="#000080"><A name="0096_003F">7.7.1 Specify signal handling<A name="0096_003F"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0096_0040">7.7.1.1 The <B><I>signal</I></B> function<A name="0096_0040"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0096_0041">Synopsis<A name="0096_0041"></FONT></h4></P>
<pre>#include &lt;signal.h&gt;
void (*signal(int sig, void
(*func) (int))) (int);</pre>
<h4><FONT COLOR="#000080"><A name="0096_0042">Description<A name="0096_0042"></FONT></h4></P>
The <I>signal</I> function chooses one of three ways in which receipt of the signal number sig is to be subsequently handled. If the value of <I>func</I> is <I>SIG_DFL</I>, default handling for that signal will occur. If the value of <I>func</I> is <I>SIG_IGN</I>, the signal will be ignored. Otherwise, <I>func</I> shall point to a function to be called when that signal occurs. Such a function is called a <I>signal handler</I>.<P>
When a signal occurs, if <I>func</I> points to a function, first the equivalent of <I>signal(sig, SIG_DFL);</I> is executed or an implementation-defined blocking of the signal is performed. (If the value of <I>sig</I> is <I>SIGILL</I>, whether the reset to <I>SIG_DFL</I> occurs is implementation-defined.) Next the equivalent of <I>(*func) (sig);</I> is executed. The function <I>func</I> may terminate by executing a <I>return</I> statement or by calling the <I>abort, exit</I>, or <I>longjmp</I> function. If <I>func</I> executes a <I>return</I> statement and the value of <I>sig</I> was <I>SIGFPE</I> or any other implementation-defined value corresponding to a computational exception, the behavior is undefined. Otherwise, the program will resume execution at the point it was interrupted.<P>
If the signal occurs other than as the result of calling the <I>abort</I> or <I>raise</I> function, the behavior is undefined if the signal handler calls any function in the standard library other than the <I>signal</I> function itself (with a first argument of the signal number corresponding to the signal that caused the invocation of the handler) or refers to any object with static storage duration other than by assigning a value to a static storage duration variable of type <I>volatile sig_atomic_t</I>. Furthermore, if such a call to the <I>signal</I> function results in a <I>SIG_ERR</I> return, the value of <I>errno</I> is indeterminate.109<P>
At program startup, the equivalent of<P>
<pre>signal (sig, SIG_IGN);</pre>
may be executed for some signals selected in an implementation-defined manner; the equivalent of<P>
<pre>signal (sig, SIG_DFL);</pre>
is executed for all other signals defined by the implementation.<P>
The implementation shall behave as if no library function calls the <I>signal</I> function.<P>
<h4><FONT COLOR="#000080"><A name="0096_0043">Returns<A name="0096_0043"></FONT></h4></P>
If the request can be honored, the <I>signal</I> function returns the value of <I>func</I> for the most recent call to <I>signal</I> for the specified signal <I>sig</I>. Otherwise, a value of <I>SIG_ERR</I> is returned and a positive value is stored in <I>errno</I>.<P>
<B>Forward references</B>: the <I>abort</I> function (7.10.4.1), the <I>exit</I> function (7.10.4.3).<P>
<h4><FONT COLOR="#000080"><A name="0096_0044">7.7.2 Send signal<A name="0096_0044"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0096_0045">7.7.2.1 The <B><I>raise</I></B> function<A name="0096_0045"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0096_0046">Synopsis<A name="0096_0046"></FONT></h4></P>
<pre>#include &lt;signal .h&gt;
int raise(int sig);</pre>
<h4><FONT COLOR="#000080"><A name="0096_0047">Description<A name="0096_0047"></FONT></h4></P>
The <I>raise</I> function sends the signal <I>sig</I> to the executing program.<P>
<h4><FONT COLOR="#000080"><A name="0096_0048">Returns<A name="0096_0048"></FONT></h4></P>
The <I>raise</I> function returns zero if successful, nonzero if unsuccessful.<P>
Footnotes:<P>
108. See "future library directions" (7.13.5). The names of the signal numbers reflect the following terms (respectively): abort, floating-point exception, illegal instruction, interrupt, segmentation violation, and termination.<P>
109. If any signal is generated by an asynchronous signal handler, the behavior is undefined.<P>
<h4><FONT COLOR="#000080"><A name="0096_0049">Using &lt;<B><I>signal.h</I></B>&gt;<A name="0096_0049"></FONT></h4></P>
Signal handling is essentially nonportable. Use the functions declared in &lt;<I>signal.h</I>&gt; only when you must specify the handling of signals for a known set of operating systems. Don't try too hard to generalize the code.<P>
If default handling for a signal is acceptable, then by all means choose that option. Adding your own signal handler decreases portability and raises the odds that the program will mishandle the signal. If you must provide a handler for a signal, categorize it as follows:<P>
<UL><li>a handler for a signal that must not return, such as <I>SIGFPE</I> reporting an arithmetic exception or <I>SIGABRT</I> reporting a fatal error</li>
<li>a handler for a signal that must return, such as <I>SIGINT</I> reporting an attention interrupt that may have interrupted a library operation</li></UL>
As a rule, the second category contains asynchronous signals not intended to cause immediate program termination. Rarely will you find a signal that does not fit clearly in one of these categories.<P>
A signal handler that must not return ends in a call to <I>abort, exit</I>, or <I>longjmp</I>. Do not, of course, end a handler for <I>SIGABRT</I> with a call to <I>abort</I>. The handler should <I>not</I> reestablish itself by calling <I>signal</I>. Leave that to some other agency, if the program does not terminate. If the signal is asynchronous, be wary of performing any input or output. You may have interrupted the library part way through such an operation.<P>
A signal handler that must return ends in a <I>return</I> statement. If it is to reestablish itself, it should do so immediately on entry. If the signal is asynchronous, store a nonzero value in a volatile data object of type <I>sig_atomic_t. Do nothing else</I> that has side effects visible to the executing program, such as input or output and accessing other data objects.<P>
A sample asynchronous signal handler might look like:<P>
<pre>#include &lt;signal.h&gt;

static sig_atomic_t intflag = 0;

static void field_int(int sig)
   {   /* handle SIGINT */
   signal (SIGINT, &amp;field_int);
   intflag = 1;
   return;
   }</pre>
The program calls <I>signal(SIGINT, &amp;field_int)</I> to establish the handler. From time to time, it can then check for the occurrence of asynchronous interactive attention interrupts by executing code such as:<P>
<pre>if (intflag)
   {   /* act on interrupt */
   intflag = 0;
   .....
   }</pre>
Note that two small windows exist where these signals can go astray:<P>
<UL><li>Within <I>field_int</I> before the call to <I>signal</I>, an occurrence of <I>SIGINT</I> can terminate the program.</li>
<li>Between the testing and clearing of <I>intflag</I>, an occurrence of <I>SIGINT</I> can be lost.</li></UL>
Those are inherent limitations of signals.<P>
<h4><FONT COLOR="#000080"><A name="0096_004A">Standard Signals<A name="0096_004A"></FONT></h4></P>
Here is a brief characterization of the signals defined for all implementations of Standard C. Note that a given implementation may well define more. Display the contents of <I>&lt;signal.h&gt;</I> for other defined macro names that begin with <I>SIG</I>. These should expand to (small) positive integers that represent additional signals.<P>
<I>SIGABRT</I> &#151; This signal occurs when the program is terminating unsuccessfully, as by an explicit call to <I>abort</I>, declared in <I>&lt;stdlib.h&gt;</I>. <I>Do not</I> ignore this signal. If you provide a handler, do as little as possible. End the handler with a <I>return</I> statement or a call to <I>exit</I>, declared in <I>&lt;stdlib.h&gt;</I>.<P>
<I>SIGFPE</I> &#151; The name originally meant "floating-point exception." The C Standard generalizes this signal to cover any arithmetic exception such as overflow, underflow, or zero divide. Implementations vary considerably on what exceptions they report, if any. Rarely does an implementation report integer overflow. Ignoring this signal may be rash. A handler must <I>not</I> return.<P>
<I>SIGINT</I> &#151; This is the conventional way of reporting an asynchronous interactive attention signal. Most systems provide some keystroke combination that you can type to generate such a signal. Examples are ctl-C, DEL, and ATTN. It offers a convenient way to terminate a tiresome loop early. But be aware that an asynchronous signal can catch the program part way through an operation that should be atomic. If the handler does not return control, the program may subsequently misbehave. You can safely ignore this signal.<P>
<I>SIGSEGV</I> &#151; The name originally meant "segmentation violation," because the PDP-11 managed memory as a set of segments. The C Standard generalizes this signal to cover any exception raised by an invalid storage access. The program has attempted to access storage outside any of the functions or data objects defined by C, as with an ill-formed function designator or lvalue. Or the program has attempted to store a value in a data object with a <I>const</I> type. In any event, the program cannot safely continue execution. <I>Do not</I> ignore this signal or return from its handler.<P>
<I>SIGTERM</I> &#151; This signal is traditionally sent from the operating system or from another program executing asynchronously with yours. Treat it as a polite but firm request to terminate execution. It is an asynchronous signal, so it may occur at an inopportune point in your program. You may want to defer it, using the techniques described above. You can ignore this signal safely, although it may be bad manners to do so.<P>
<h4><FONT COLOR="#000080"><A name="0096_004B">Implementing &lt;<B><I>signal.h</I></B>&gt;<A name="0096_004B"></FONT></h4></P>
<A href="list1.htm">Listing 1</a>
shows the file <I>signal.h</I>. The header &lt;<I>signal.h</I>&gt; I present here is minimal. A UNIX system, for example, defines dozens of signals. Many systems endeavor to look as much as possible like UNIX in this regard. They too define all these signals even if they do not generate many of them. Notwithstanding this concerted group behavior, the choice of signals and their codes both vary considerably. I have endeavored here to choose codes that are most widely used.<P>
As usual, I make use of the internal header &lt;<I>yvals.h</I>&gt; to provide parameters that can vary among systems. The code for <I>SIGABRT</I> is one. The highest valid signal code is another. Some functions in this implementation use the macro <I>_NSIG</I> to determine the lowest positive number that is not a valid signal code. Thus, the header <I>&lt;yvals.h&gt;</I> defines two macros of interest here. For a typical UNIX system, the definitions are:<P>
<pre>#define _SIGABRT    6
#define _SIGMAX     32</pre>
The header &lt;<I>signal.h</I>&gt; makes an additional concession to widespread UNIX practice. It defines the macros <I>SIG_ERR</I> and <I>SIG_IGN</I> in a moderately ugly way. The values -1 and 1 could conceivably be valid function addresses in some implementation. Admittedly, that is only rarely possible. Where it is possible, the linker can be jiggered to avoid the possibility. Still, other values would be more gracious. (The addresses of <I>signal</I> and <I>raise</I>, for example, are not likely to specify useful signal handlers.) But the values chosen here are the ones used widely in UNIX implementations. They are also widely imitated under other operating systems. I chose these for compatibility with existing machinery.<P>
That compatibility is often necessary. Almost invariably, the functions <I>signal</I> and <I>raise</I> must be tailored for each operating system. UNIX is the extreme case. In that environment, the system service <I>signal</I> does the whole job. If you have access to a C-callable function of that name, just use it. Let other functions call it directly. If the system service has a private name, such as <I>_Signal</I>, you can write <I>signal</I> as:<P>
<pre>/* signal function - UNIX version */
#include &lt;signal.h&gt;

_Sigfun *_Signal(int, _Sigfun *)

_Sigfun *(signal)(int sig,
                   _Sigfun *fun)
   {   /* call the system service */
   return (_Signal(sig, fun));
   }</pre>
This is an obvious candidate for a masking macro in &lt;<I>signal.h</I>&gt;.<P>
The function <I>raise</I> is only slightly more difficult. It uses the system service <I>kill</I> to send a signal to itself. ("Kill" is a misnomer stemming from its earliest use for sending only the signal <I>SIGKILL</I>.) To identify itself, <I>raise</I> also needs the system service <I>getpid</I>. Assuming suitable secret names for these two system services, such as <I>_Kill</I> and <I>_Getpid</I>, you can write <I>raise</I> as:<P>
<pre>/* raise function - UNIX version */
#include &lt;signal.h&gt;

int _Getpid (void);
int _Raise(int, int);

int (raise)(int sig}
   {   /* raise a signal */
   return (_Kill(_Getpid(), sig));
   }</pre>
Here is another obvious candidate for a masking macro.<P>
I have also written more generic versions of <I>signal</I> and <I>raise</I>, but I lack the space to present them here. They manage a table of pointers to signal handlers for an environment that does less of this work for you. Of course, you still have to add system-specific code to handle any hardware interrupts. As I pointed out earlier, there's no such thing as portable signals.<P>
<I>This article is excerpted from P.J. Plauger</I>, The Standard C Library, <I>(Englewood Cliffs, N.J.: Prentice-Hall, 1992)</I>.<P>

<h4><a href="../../../source/1992/mar92/plauger.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
