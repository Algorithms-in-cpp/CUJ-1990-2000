


<HTML>
<HEAD>

<TITLE>March 1992/Stepping Up To C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmar.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Stepping Up To C++<A name="009C_003F"><A name="009C_003F"></font></h2><P>
<h3 align="center"><A name="009C_0000"><A name="009C_0000">Operator Overloading</h3><P>
<h3 align="center">Part 2</h3><P>
<h3 align="center"><font color="#800000">Dan Saks</font></h3><hr><blockquote><P>
<P><i><A name="009C_0000"><A name="009C_0000">Dan Saks is the owner of Saks &amp; Associates, which offers consulting and training in C and C++. He is secretary of the ANSI C++<I></I> <I></I>standards committee, and also contributing editor for Windows/DOS Developer's Journal. Dan recently finished his first books, C++<I></I> <I></I>Programming Guidelines, written with Thomas Plum. You can write to him at 393 Leander Dr., Springfield, OH 45504, or<I></I> <I></I>d<I>saks@wittenberg. edu</I> (<I>Internet</I>), or call (513)324-3601.</i></P><P>
In my last column, I introduced operator overloading in C++ (see "Operator Overloading, Part 1," January 1992). Using operator overloading, you can define new meanings for operator symbols applied to objects of user-defined class types. Operator overloading enables the implementation of user-defined types that are nearly indistinguishable from built-in types.<P>
Last time, I used a simple class for rational numbers (fractions) to demonstrate overloading of binary operators. In this article, I'll enhance the rational class to make it more like a built-in type by adding mixed-mode operations (operations combining rationals with other built-in types) and unary operators.<P>
<h4><FONT COLOR="#000080"><A name="009C_0040">Reviewing The Basics<A name="009C_0040"></FONT></h4></P>
<A href="list1.htm">Listing 1</a>
shows the declaration for class <I>rational</I> as it was when I left off in the first part of this series. Each rational number stores its numerator and denominator in a pair of <I>signed</I> <I>long</I> integers. The class declares eight overloaded binary operators: +, -, *, and /, and their corresponding assignment operators +=, -=, *=, and /=. Using this class you can declare objects of type <I>rational</I>, and perform rational arithmetic using the overloaded operators. For example, if <I>r1</I>, <I>r2</I>, and <I>r3</I> are rationals, then<P>
<pre>r1 += r2;</pre>
adds <I>r2</I> to <I>r1</I> using <I>rational ::operator</I> +=. The statement compiles as if you had written<P>
<pre>r1.operator+=(r2);</pre>
Similarly,<P>
<pre>r1 = r2 + r3;</pre>
adds <I>r2</I> and <I>r3</I> using <I>rational::operator</I>+ and then copies the result to <I>r1</I> using <I>rational::operator</I>=. This statement compiles as if you had written<P>
<pre>r1.operator=(r2.operator+(r3));</pre>
Note that <A href="list1.htm">Listing 1</a>
doesn't provide a declaration for <I>rational::operator=</I>. The compiler generates a default version of <I>operator=</I> if you don't write one explicitly. The default version uses <I>memberwise assignment</I>. That is, it copies each member of the right-hand operand to the corresponding member of the left-hand operand using that member's <I>operator=</I>.<P>
<A href="list2.htm">Listing 2</a>
presents definitions for the rational member functions. I implemented each arithmetic operator (e.g. +) in terms of its corresponding assignment operator (e.g. +=). Note that the first line in the body of each arithmetic operator is the declaration<P>
<pre>rational result(*this);</pre>
which uses the rational copy constructor<P>
<pre>rational::
rational (const rational &amp;);</pre>
to initialize the local variable <I>result</I> with a copy of <I>*this</I>. (Recall that <I>this</I> is the address of the object for which the member function was called.) I did not declare the copy constructor explicitly; I let the compiler generate it.<P>
The member function <I>rational::put (FILE *)</I> prints a rational number in the format <I>(num/denom.) rational::simplify</I> is a private member function that reduces a rational number to its simplest form. (My method for reducing fractions is admittedly too simple for an industrial-strength class, but the fine points of fractional arithmetic are secondary to my presentation of overloaded operators. Zeidler<a href="#ref1">[1]</a> presents a better algorithm for reducing fractions.)<P>
<I>simplify</I> uses a general-purpose library function <I>gcd</I> that computes the greatest common divisor of its arguments. I presented a version of <I>gcd</I> in the first part of this series, but since then I've discovered problems with the implementation. <A href="list3.htm">Listing 3</a>
contains a new version of <I>gcd</I> based on an algorithm also provided by Zeidler<a href="#ref1">[1]</a>. I compiled <I>gcd</I> separately and placed the object code in a linkable library called <I>mylib. simplify</I> accesses <I>gcd</I>'s declaration by including <I>mylib.h</I>.<P>
<h4><FONT COLOR="#000080"><A name="009C_0041">Constructors As Conversions<A name="009C_0041"></FONT></h4></P>
C++, like C, provides standard conversions among the arithmetic types. These rules simplify writing arithmetic expressions. For example, when you mix <I>ints</I> and <I>longs</I> in the same expression, the compiler automatically promotes the <I>ints</I> to <I>longs</I>, and does all the computations in long arithmetic. Similarly, you can initialize a <I>long</I> with an <I>int</I> expression, such as<P>
<pre>long n = 0;</pre>
The compiler automatically converts the integer literal 0 to a <I>long</I> value. You need not write<P>
<pre>long n = 0L;</pre>
The compiler also performs this conversion when you pass an <I>int</I> to a function that expects a <I>long</I> argument.<P>
Unfortunately, the <I>rational</I> class defined in <A href="list1.htm">Listing 1</a>
does not provide automatic conversions to or from other arithmetic types. For example, you cannot write an expression like<P>
<pre>rational r1, r2;
...
r1 = r2 + 1;</pre>
You must write it as<P>
<pre>r1 = r2 + rational(1, 1);</pre>
The problem is that <I>rational::operator+</I> requires two rational operands, and the literal 1 is an <I>int</I>, not a <I>rational</I>.<P>
You could solve this problem by extending the class to include a member function <I>rational::operator+(long n)</I>, as shown in <A href="list4.htm">Listing 4</a>.
 The <I>return</I> statement in that function uses the constructor call <I>rational(n, 1)</I> to convert long <I>n</I> to its equivalent rational value, n/1. Adding this member function to the class lets you write expressions like<P>
<pre>r1 = r2+ 1L;</pre>
It even lets you write<P>
<pre>r1 = r1 + 1;</pre>
because the compiler promotes 1 to <I>long</I> before calling <I>rational::operator+(long)</I>.<P>
The problem with this approach is that you must also add<P>
<pre>rational operator+=(long);
rational operator-(long);
rational operator-=(long);</pre>
and so on, for every operator defined by the class. A class written this way gets very big very fast, and contains lots of duplicated code.<P>
If you also add <I>operator=(long)</I> to the class, you can write<P>
<pre>rational r;
...
r = 3;</pre>
which assigns 3/1 to <I>r</I>. Unfortunately, even with this additional operator, you still can't write declarations like<P>
<pre>rational r = 3;</pre>
Remember, this is not an assignment; it's an initialization that uses a constructor called with one argument, as if you had written either<P>
<pre>rational r = rational(3);</pre>
or<P>
<pre>rational r (3);</pre>
To overcome this problem, you must add a rational constructor that accepts a single argument of type <I>long</I>, defined as<P>
<pre>rational (long n): num(n), denom(1) {}</pre>
It turns out that this one constructor eliminates the need for all those extra operator functions that accept a single <I>long</I> argument. A class constructor with one argument acts as a rule for converting the argument type to the class type. For example, adding the above constructor to the class definition in <A href="list1.htm">Listing 1</a>
lets you write<P>
<pre>rational r;
...
r = 3;</pre>
In translating the assignment, the compiler finds only one assignment operator that it could possibly use, namely<P>
<pre>rational &amp;rational::
operator=(const rational &amp;);</pre>
as generated by the compiler. The compiler promotes 3 to <I>long</I> and passes the result to the <I>rational(long)</I> constructor to create a rational object for use as the right-hand operand in the assignment. If the constructor is written as an inline function, a good optimizing compiler will "compile away" any temporary objects, and produce code equivalent to<P>
<pre>r.num = 3;
r.denom = 1;</pre>
The compiler applies the <I>rational(long)</I> constructor whenever it needs to covert the right-hand operand of a rational operator. An expression like<P>
<pre>r /= 2;</pre>
compiles as if you had written<P>
<pre>r.operator/=(rational(2));</pre>
and converts the 2 to the rational value 2/1 before passing it to <I>operator/=</I>. Similarly,<P>
<pre>r1 = r2 * 2;</pre>
compiles as if you had written<P>
<pre>t1 = r2.operator+ (rational (2));
rl.operator = (t1);</pre>
where <I>t1</I> is a temporary rational object added for readability.<P>
The implicit conversion from integral types to rational lets you write code that looks even more as if rationals were built in. However, it also lets you inadvertently write less efficient code. For example, you can rewrite<P>
<pre>r1 = r2 * rational(2,3) + r3;</pre>
as<P>
<pre>r1 = r2 * 2/3 + r3;</pre>
Despite the spacing, C++'s precedence rules interpret the latter expression as<P>
<pre>r1 = ((r2 * 2) / 3) + r3;</pre>
which compiles as<P>
<pre>t1 = r2.operator*(rational(2));
t2 = t1.operator/(rational(3));
r1 = t2.operator+(r3);</pre>
(Again, <I>t1</I> and <I>t2</I> are temporary rational objects added only for readability.) Whereas the expression <I>rational(2,3)</I> explicitly creates a single object whose value is 2/3, the expression 2/3 gets regrouped into two separate rational objects and introduces a separate call to <I>rational::operator/.</I><P>
Note that you cannot create a single rational object by simply adding parentheses<P>
<pre>r1 = r2 * (2/3) + r3;</pre>
In this case, the compiler sees that 2 and 3 are integer literals, so it performs 2/3 using integer division. The result is an integer-valued zero, which is converted to rational when used as the right-hand operand of <I>rational::operator*.</I><P>
The compiler doesn't know that you intended 2/3 to be a rational constant. It doesn't promote the operand types if they are already the same type. This situation is no different than if <I>r1, r2,</I> and <I>r3</I> had been <I>float</I> or <I>double</I> variables. 2/3 grouped as such always yields zero.<P>
<h4><FONT COLOR="#000080"><A name="009C_0042">Non-Member Operator Functions<A name="009C_0042"></FONT></h4></P>
When you overload operators using members functions, the compiler can apply user-defined conversions to the right-hand argument, but not to the left. It follows that the left operand must be a class object. Thus you can write expressions like<P>
<pre>r1 = r2 * 2;</pre>
but not like<P>
<pre>r1 = 2 * r2;</pre>
because 2 is not a class object. The compiler will not take the liberty of commuting the operands to produce<P>
<pre>r1 = r2 * 2;</pre>
because some operations, like -- and /, are not commutative.<P>
If you want the compiler to apply user-defined conversion to the left operand as well as the right operand of an overloaded operator, then implement that operator as a non-member function. For example, you move the member function<P>
<pre>rational rational::
operator+(rational r);</pre>
outside the class declaration, and rewrite its declaration as the non-member function<P>
<pre>rational operator+(rational r1, rational r2);</pre>
Notice that although the member function appears to have only one formal argument, the non-member function has two. But a member function really has an extra (hidden) argument &#151; the address of the object addressed by <I>this.</I> When you rewrite the operator as a non-member function, you must add a second (or is it a first?) explicit argument.<P>
Changing this operator from a member to a non-member function doesn't affect any of the calls to <I>operator</I>+ using infix notation. The fact is, when the compiler sees <I>r1</I> + <I>r2</I>, where either <I>r1</I> or <I>r2</I> is class type, it tries compiling the expression as either <I>r1.operator</I>+<I>(r2)</I> or <I>operator</I>+<I>(r1, r2)</I>, and uses whichever one it finds.<P>
If you define both forms of <I>operator</I>+ accepting identical argument types, then when you write <I>r1</I> + <I>r2</I>, the compiler produces a diagnostic that says the expression is an ambiguous reference. If you define both forms of <I>operator</I>+ accepting sufficiently different argument types, the compiler selects the best match according to an elaborate set of argument matching rules. Ellis and Stroustrup<a href="#ref2">[2]</a> and Stroustrup<a href="#ref3">[3]</a> describe these rules in detail. I will explain them in a future column.<P>
<A href="list5.htm">Listing 5</a>
shows a new version of the header <I>rational.h</I> that declares class <I>rational</I> with the arithmetic operators +, -, *, and / implemented as non-member functions. The body of each function is a one-liner that uses the corresponding assignment operator to do the computation. For example, the body of <I>operator</I>+ is simply<P>
<pre>return r1 += r2;</pre>
The operator function doesn't need a local rational object to hold the result; it uses its local copy of the left-hand operand for temporary storage. Since the left operand of <I>operator</I>+ is passed by value, changing the value of the formal parameter has no effect on the actual argument passed to <I>operator</I>+. The arithmetic operators are so short, it's appropriate to declare them as inline functions in the header.<P>
When the operators were member functions, they had access to the private members of rational objects. When you rewrite them as non-member functions they lose their access rights, but the loss poses no problem because these functions never exercised those rights. For example, all the real work of <I>operator</I>+ is done by calling <I>rational::operator</I>+=, which still has all its private access rights. <I>operator</I>+= manipulates the private <I>num</I> and <I>denom</I> members of the <I>rational</I> objects, and returns a reference to a complete rational object.<P>
<h4><FONT COLOR="#000080"><A name="009C_0043">Using <B><I>const</I></B> Reference Arguments<A name="009C_0043"></FONT></h4></P>
The size of a rational object is the sum of the sizes of its data members, namely, <I>2 * sizeof(long)</I>. This is rarely smaller, and often two or four times the size of a pointer. Therefore, you may want to pass the arguments to these operators by <I>const</I> reference rather than by value. (The underlying implementation of a reference is a pointer, so passing by reference is often cheaper than passing a large object by value.) You can certainly do this with the member functions, e.g.<P>
<pre>rational &amp;operator+=(const rational &amp;);</pre>
without changing anything else in the function definition or in any function call. You can also do it with the second argument of the non-member functions, e.g.,<P>
<pre>inline rational operator+(rational r1, const rational &amp;r2);</pre>
However, as implemented in <A href="list5.htm">Listing 5</a>,
 you can't change the first argument, <I>r1,</I> to a <I>const</I> reference because the function alters <I>r1'</I>s value. If you insist on changing <I>r1</I> to a <I>const</I> reference, then you must use a local rational variable to hold the result, as shown in <A href="list6.htm">Listing 6</a>,
 but I doubt you gain anything by writing the function this way.<P>
<h4><FONT COLOR="#000080"><A name="009C_0044">Unary Operators<A name="009C_0044"></FONT></h4></P>
Built-in arithmetic types support a number of unary operators. Rationals should too. <A href="list7.htm">Listing 7</a>
shows the class declaration in <I>rational.h</I> extended to include six unary operators: +, -, prefix ++ and -- --, and postfix ++ and -- --.<P>
In general, you overload unary operators using either a member function with no arguments or a non-member function with one argument. (The exceptions are postfix ++ and -- --, explained later.) For example, as a member function, you declare rational unary + as<P>
<pre>rational rational::operator+();</pre>
As a non-member function, declare it as either<P>
<pre>rational operator+(rational);</pre>
or<P>
<pre>rational operator+(const rational &amp;);</pre>
In <A href="list7.htm">Listing 7</a>,
 I used the member function notation.<P>
The implementation of unary + is trivial, so I simply defined it inside the class definition. Hence, the function is inline by default. Unary + simply returns the value of its operand.<P>
I try to make overloaded operators for user-defined types act as much as possible as they do for predefined types. Unary + applied to predefined types returns an rvalue, not an lvalue. The return value of a function is an rvalue unless it returns a reference. Therefore, I made the return value of <I>rational</I>'s unary + a <I>rational,</I> rather than a <I>rational &amp;.</I><P>
The implementation of unary - is a little more difficult. The function definition appears in <A href="list8.htm">Listing 8</a>
along with the other non-inline unary operator functions. The return value is simply the value of the operand with its numerator negated. However, you must be careful to leave the operand unchanged. If the body of the function were simply<P>
<pre>num = -num;
return *this;</pre>
it would negate the operand itself, and you would get surprising behavior. For example, if negation changed its operand, then the second statement in<P>
<pre>r1 = rational (1, 1); // r1 = 1/1
r2 = -r1;             // r2 = -1/1</pre>
would also change <I>r1</I> to -1/1. To avoid this odd behavior, rational unary - computes the negation in a local variable.<P>
Early versions of C++ (those compatible with AT&amp;T cfront up to release 2.0) did not distinguish between prefix and postfix applications of overloaded ++ and -- --. That is, for a class like <I>rational</I> you could write a single function <I>operator</I>++ (either as a member or non-member) and invoke that function as either ++<I>r</I> or <I>r</I>++. There was no way to get ++<I>r</I> and <I>r</I>++ to behave differently as they do for primitive types.<P>
Newer C++ compilers let you overload the prefix and postfix operators separately. You declare the prefix <I>operator</I>++ much as you do any other unary operator using a member function declared as<P>
<pre>rational rational::operator++();</pre>
or a non-member function declared as<P>
<pre>rational operator++(rational);</pre>
You declare the postfix <I>operator</I>++ with an additional argument of type <I>int</I>, as a member function<P>
<pre>rational rational::operator++(int);</pre>
or as a non-member function<P>
<pre>rational operator++(rational, int);</pre>
For a rational <I>r</I>, the expression ++<I>r</I> compiles as the call<P>
<pre>r.operator++()</pre>
and the expression <I>r</I>++ compiles as<P>
<pre>r.operator++(0)</pre>
You can use an explicit function call to the postfix operator to pass a non-zero value as the <I>int</I> argument, but I haven't yet seen a reason to do this. In practice, the <I>int</I> argument is a dummy argument that distinguishes the postfix from the prefix operator.<P>
The implementation of the prefix operators are very simple. For predefined types, ++<I>r</I> is defined to be <I>r+=1</I>, and that's exactly what the overloaded prefix <I>rational</I> ++ does. The postfix <I>rational</I>++ must do a little more work to set aside a copy of the prior value of the operand while it increments the operand.<P>
For predefined types, the operand of prefix and postfix ++ and -- -- must be a modifiable lvalue, but the return type is not an lvalue. This means, for example, that ++<I>2</I> and <I>K</I>++ (where K is a <I>const</I> variable) are invalid. The overloaded rational operators should try to preserve this behavior. Unfortunately, as a member function, <I>operator</I>++ and <I>operator</I> -- -- will accept operands other than modifiable lvalues. For example, the member function accepts a call like ++<I>rational(1, 2)</I>. However, you should be able to prevent such expressions by defining <I>operator</I>++ as the non-member function<P>
<pre>inline
rational operator++(rational &amp;r)
   {
   return r += 1;
   }</pre>
That is, the rational argument is passed as a non-<I>const</I> reference. Since a <I>rational &amp;</I> argument can only be bound to a modifiable rational object (an lvalue), this function definition should not accept a call like ++<I>rational(1, 2).</I> Therefore, I recommend overloading ++ and -- -- this way.<P>
I say that this <I>should</I> be able to prevent non-modifiable lvalue operands because that is my understanding of the rules for references defined by the Annotated C++ Reference Manual (the ARM)<a href="#ref2">[2]</a>, and by the C++ draft standard. However, as I explained in an earlier column on references (see "Reference Types", <I>CUJ</I>, September 1991) some current compilers still bind non-<I>const</I> references to a constant expression by binding the reference to a temporary initialized by the value of the expression. Since I haven't had the opportunity to use a compiler that agrees with my interpretation, there's room for some debate about my recommendation.<P>
<h4>References</FONT></h4></P>
<a name="ref1">[1]</a>     Zeidler, Steve, "Doing Fractions in C++", The C Users Journal, Vol. 9, No. 11, Nov. 1991.<P>
<a name="ref2">[2]</a>     Ellis, Margaret A. and Bjarne Stroustrup, The Annotated C++ Reference Manual. Addison-Wesley, Reading, MA, 1990.<P>
<a name="ref3">[3]</a>     Stroustrup, Bjarne, The C++ Programming Language, 2nd. ed. Addison-Wesley, Reading, MA, 1991.<P>

<h4><a href="../../../source/1992/mar92/saks.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
