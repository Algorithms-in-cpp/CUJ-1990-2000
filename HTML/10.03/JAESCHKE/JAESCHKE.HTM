


<HTML>
<HEAD>

<TITLE>March 1992/Doctor C's Pointers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmar.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Doctor C's Pointers&reg;<A name="0098_003B"><A name="0098_003B"></font></h2><P>
<h3 align="center"><A name="0098_0000"><A name="0098_0000">Data Structures, Part 10</h3><P>
<h3 align="center"><font color="#800000">Rex Jaechke</font></h3><hr><blockquote><P>
<P><i><A name="0098_0000"><A name="0098_0000">Rex Jaeschke is an independent computer consultant, author, and seminar leader. He participates in both ANSI and ISO C Standards meeting and is the editor of The Journal of C Translation, a quarterly publication aimed at implementors of C language translation tools. Readers are encouraged to submit column topics and suggestions to Rex at 2051 Swans Neck Way, Reston, VA 22091 or via UUCP at <I>rex@aussie.com</I>.</i></P><P>
<h4><FONT COLOR="#000080"><A name="0098_003C">Stacks, Continued<A name="0098_003C"></FONT></h4></P>
Last month I talked about evaluating expressions. While a stack can be useful for this task, it does require that the expression be rearranged. For example, in programming languages we write arithmetic expressions using infix notation. That is, binary operators go between their operands as in <I>(a</I><I> + </I><I>(b</I><I> * </I><I>c))</I>.<P>
It would be very advantageous to be able to rewrite this expression in the order in which the operations are to be evaluated. You can do this by taking the precedence into account. This method, called postfix notation, completely removes the need for grouping parentheses. The previous expression written in postfix notation becomes <I>a b c</I> *+.<P>
Now the multiplication applies to the two operands preceding it and the addition applies to that result and the operand preceding that, namely <I>a</I>. Expressions written in postfix notation lend themselves directly to being evaluated using a stack. For example, an H-P calculator requires you to enter expressions in postfix notation. This is often referred also as Reverse Polish Notation (RPN), since it is opposite to Polish (or prefix) notation. The trick then is to convert an infix expression to a postfix expression. <A href="list1.htm">Listing 1</a>,
 <A href="list2.htm">Listing 2</a>,
 and <A href="list3.htm">Listing 3</a>
show much of the solution.<P>
The main program prompts for and reads in an expression in infix notation, converts to the corresponding postfix notation, and prints the resulting string. It ignores white space in the input string. <A href="fig1.htm">Figure 1</a>
shows inputs and their results.<P>
The real work is done by the function <I>intopost</I> shown in <A href="list2.htm">Listing 2</a>.
 The stack manipulation functions are shown in <A href="list3.htm">Listing 3</a>.
<P>
The conditional compilation code using TRACE is useful both in debugging and in demonstrating what is actually being pushed and popped along the way. <A href="fig2.htm">Figure 2</a>
shows an example.<P>
This program goes a long way toward handling infix expressions but it clearly has some limitations. First, it handles only variable names, and then only those one character long. In reality it would need to handle constants as well and longer variable names. It would also have to maintain some kind of symbol table for each name encountered, along with type information since it can have mixed-mode arithmetic involving any arithmetic types of variables and constants. Also, the conversion function can only handle addition, subtraction, multiplication, and division. It is easy to add other operators but you would need to handle the precedence issue in a more general way. In <I>intopost</I>, precedence is hard-wired whereas some kind of table lookup would be more efficient as well as elegant.<P>
Next month we'll look at stacks that handle different object types and stacks that share storage.<P>

<h4><a href="../../../source/1992/mar92/jaeschke.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
