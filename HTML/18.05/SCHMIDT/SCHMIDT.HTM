<HTML>   
     <HEAD>
<TITLE>May 2000/Uncaught Exceptions</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocmay.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Uncaught Exceptions: Remembrance</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Bobby Schmidt</FONT></H3>

<BLOCKQUOTE>
<p>Bobby finds still more to warn about when playing fast and loose with pointers, smart pointers, and arrays.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>Copyright &copy; 2000 Robert H. Schmidt</p>
<p>As I write, my mother's birthday is in one week. Several of you have expressed condolences to me for her passing. To those who contacted me &#151; and to those who didn't, but kept me in their thoughts and prayers &#151; I give my deepest thanks.</p>

<H4><FONT COLOR="#000080">Exceptions-R-Us</FONT></H4>
<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> Hi Bobby,</p>
<p>I do enjoy reading your columns a lot. Through the Q&amp;A I have been able to learn a lot. Thank you very much.</p>
<p>I have three questions regarding your January item about exceptions. I appreciate you taking a look at these questions.</p>
<p>1)  Can I use <B>cout</B> instead of <B>printf</B>?</p>
<p>2)  Are the semicolons I've indicated a typo or are they part of the syntax?</p>
<p>3)  Can we specify multiple <B>catch(...)</B> statements or should that be only specified once and in the end of all other catches?</p>
<p>Thank you so much in advance and have an excellent day.</p>
<p>Sincerely &#151; Visda Vokhshoori</p>

<H4><FONT COLOR="#000080">A</FONT></H4>
<p> Short answers:</p>
<p>1)  Usually yes.</p>
<p>2)  Yes to both.</p>
<p>3)  Yes (but don't do it) and yes.</p>
<p>Long answers:</p>
<p>The item in question was titled "Deconstruction" and involved construction/destruction of temporary exception objects by Microsoft Visual C++. The collateral source code appeared as Listing 1 in that January 2000 column. For the purposes of your questions, the relevant parts of that source are:</p>

<pre>
#include &lt;stdio.h&gt;

class error
    {
public:
    error()
        {
        printf("error()\n");
        }; // &lt;== semicolon
    ~error()
        {
        printf("~error()\n");
        }; // &lt;== semicolon
    };

int main()
    {
    try
        {
        }
    catch (...)
        {
        };
    return 0;
    }
</pre>

<p>Now to your questions...</p>
<p>Answer #1: You can indeed use <B>cout</B> instead of <B>printf</B>. I use <B>printf</B> in many published samples for several reasons:</p>

<UL><LI>   I test every code piece that I publish. My edit/compile/run cycle is shorter when I use <B>&lt;stdio.h&gt;</B> instead of <B>&lt;iostream&gt;</B>.</LI>
<LI>   Although <B>&lt;iostream&gt;</B> declarations are supposed to live in namespace <B>std,</B> not all compilers properly support that namespace. <B>&lt;stdio.h&gt;</B> is a C library header, and thus avoids any <B>std</B>-related difficulties.</LI>
<LI>   One of the standard library implementations I use calls <B>::operator new</B> internally before fully initializing the <B>&lt;iostream&gt;</B> plumbing. When I create a replacement <B>::operator new</B>, and that replacement references <B>cout</B> to trace calls, my programs end unpleasantly. A <B>printf</B>-traced version of the same <B>::operator new</B> works fine.</LI></UL>

<p>Answer #2: I've flagged the two questionable semicolons with comments. They are typos (in that I didn't intend them) but not invalid. The C++ grammar allows an optional semicolon following a function definition &#151; assuming the definition appears within a class definition <a href="#1">[1]</a>. However, if you move that same function definition outside the class definition:</p>

<pre>
class error
    {
    // ...
    };

error::error()
    {
    }; // error
</pre>

<p>the extra semicolon induces an error with conforming compilers. (On my system, Microsoft and Metrowerks accept the code, while EDG flags the error.)</p>
<p>Answer #3: Handlers are matched in top-down order. Since the <B>catch (...)</B> handler matches all exception types, you should write it last in the handler sequence. Otherwise, the handlers after <B>catch (...)</B> will never be entered.</p>
<p>The language rules do let you define multiple handlers with the same exception declaration:</p>

<pre>
try
    {
    }
catch (int)
    {
    }
catch (int)
    {
    // ... never entered
    }
catch (...)
    {
    }
catch (...)
    {
    // ... never entered
    }
</pre>

<p>That you can write such handlers doesn't mean that you should. Remember, handlers are matched from the top down, meaning that the first handler in each repeated pair above masks the second handler in that pair.</p>

<H4><FONT COLOR="#000080">Autoamerican</FONT></H4>
<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> Is there a version of the <B>auto_ptr</B> class in the C++ Standard that works with a pointer to an array? For example:</p>

<pre>
auto_ptr&lt;int&gt; pNumbers(new int[3]);
</pre>

<p>doesn't work right since the <B>auto_ptr&lt;&gt;</B> destructor calls <B>delete</B> instead of <B>delete []</B>.</p>
<p>Thanks &#151; Abu Wawda</p>

<H4><FONT COLOR="#000080">A</FONT></H4>
<p> (I assume that where you write "a pointer to an array" you really mean "an array" or "a pointer to an array's first element.")</p>
<p>You can't manage arrays with <B>auto_ptr</B>, for the very reason you cite: the <B>auto_ptr</B> destructor assumes that its managed object is 1) created from the free store, and 2) not an array.</p>
<p>Fortunately, you have two fairly easy alternatives:</p>

<UL><LI>   Create your own <B>auto_ptr</B>-like class that manages arrays <a href="#2">[2]</a>.</LI>
<LI>   Use an array-like object (such as a <B>vector</B>) instead of a real array, and have <B>auto_ptr</B> manage that.</LI></UL>

<p>This "feature" of auto_ptr is yet one more reason to prefer <B>vector</B>s and <B>string</B>s over arrays. In my own work, I almost never use arrays anymore, unless I'm calling into or (less often) providing a C-style interface <a href="#3">[3]</a>.</p>

<H4><FONT COLOR="#000080">Something for Nothing</FONT></H4>
<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> Hi Bobby.</p>
<p>I guess this is a simple question for you:</p>

<pre>
class A
    {
    };

class B
    {
    char b;
    };
</pre>

<p>Why do <B>sizeof(A)</B> and <B>sizeof(B)</B> equal <B>1</B>? In particular, where is the one byte in class <B>A</B>?</p>
<p>Thanks and regards &#151; Dmitry Khaliapin</p>
<p></p>

<H4><FONT COLOR="#000080">A</FONT></H4>
<p> Time to haul out the Standard again. From 5.3.3 ("Sizeof"):</p>
<BLOCKQUOTE>
<p><B>sizeof(char)</B>, <B>sizeof(signed char)</B> and <B>sizeof(unsigned char)</B> are <B>1</B>.</p>
</BLOCKQUOTE>
<p>And from 1.8 ("The C++ object model"):</p>
<BLOCKQUOTE>
<p>If a complete object, a data member, or an array element is of class type, its type is considered the <I>most derived</I> class, to distinguish it from the class type of any base class subobject; an object of a most derived class type is called a <I>most derived object</I>.</p>
<p>Unless it is a bit-field, a most derived object shall have a non-zero size and shall occupy one or more bytes of storage.</p>
</BLOCKQUOTE>

<p>Both <B>A</B> and <B>B</B> are most derived classes &#151; they are not bases of some other class. The size of such classes is always <B>&gt;= 1</B>. Thus, <B>sizeof(A)</B> and <B>sizeof(B)</B> will both be <B>&gt;= 1</B>. On your compiler, the size of each is exactly <B>1</B>, meaning that <B>A</B> and <B>B</B> objects require no alignment padding <a href="#4">[4]</a>.</p>
<p>If you use <B>A</B> and <B>B</B> as base classes, so that they are no longer "most derived," the results change. Again from subclause 1.8:</p>

<BLOCKQUOTE>
<p>Base class sub-objects may have zero size.</p>
</BLOCKQUOTE>

<p>That "may have" assumes the base class is otherwise empty. Since <B>A</B> has no data members, an <B>A</B> base subobject may have zero size. To test this, try</p>

<pre>
class A1 : A
    {
    char a1;
    };

cout &lt;&lt; sizeof(A1) &lt;&lt; endl;
</pre>

<p>If the result is <B>1</B>, the <B>A</B> subobject has size <B>0</B>.</p>
<p>If <B>B</B> is a base class, the result is different:</p>

<pre>
class B1 : B
    {
    char b1;
    };

cout &lt;&lt; sizeof(B1) &lt;&lt; endl;
</pre>

<p>This should show <B>sizeof(B1)</B> to be <B>&gt;= 2</B>, with one byte coming from the <B>B</B> base sub-object, and one or more bytes coming from the <B>B1</B> "most derived" object. Unlike <B>A</B>, <B>B</B> contains data members. Thus the rule allowing zero-size base subobjects does not apply to <B>B</B> &#151; it will always have a non-zero size.</p>
<p>This difference leads to a weak motivation for preferring private inheritance over containment: the so-called Empty Base Optimization. Base subobjects can have zero size, while data members always have non-zero size. If you inherit from "empty" classes instead of containing them, your derived-object size can be smaller:</p>

<pre>
class E1
    {
    typedef char c;
    };

class E2
    {
    static int i;
    };

class E3
    {
    void f();
    };

class contained
    {
    E1 e1;
    E2 e2;
    E3 e3;
    };

class inherited : E1, E2, E3
    {
    };
</pre>

<p>You should find that <B>sizeof(contained)</B> is <B>&gt;= 3</B>, while <B>sizeof(inherited)</B> may be only <B>1</B>.</p>
<p>While this technique can save space, there are caveats. Compilers are allowed, but not required, to give empty bases zero size; the optimization is therefore not portable. In addition, inheritance brings increased coupling and semantic baggage that containment does not. This cost probably outweighs the space benefit, unless you are creating many such objects or have extremely cramped memory.</p>

<H4><FONT COLOR="#000080">FAQ</FONT></H4>

<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> Love your magazine. I have a question involving pointers to a two-dimensional array that has crossed my path before but has come up again. I am trying to pass a pointer to an array of "strings." The compiler does not seem to like my declarations. Yet if I typedef the string array it works. If it is of any help, I am writing C code on AIX. See the following example. (Keep in mind that this simplified version of my problem is used just to show a point.)</p>
<p>The compiler does not like this snippet of code:</p>

<pre>
int main()
    {
    char **p;
    char a[5][30];
    p = a; // error here
    return 0;
    }
</pre>

<p>I get the following error where indicated:</p>

<pre>
Operation between types "unsigned char**" and "unsigned
char(*)[30]" is not allowed.
</pre>

<p>However, the following works fine:</p>

<pre>
typedef char Str[30];

int main()
    {
    Str *p;
    Str a[5];
    p = a;
    return 0;
    }
</pre>

<p>What would be the best way to declare this pointer to a two-dimensional array? Thanks.</p>
<p>P.S. You don't have to use this in the magazine. &#151; Eugene Wilson</p>

<H4><FONT COLOR="#000080">A</FONT></H4>
<p> Oh, but I do! For this question gives me a chance to remind Diligent Readers of a fundamental C and C++ conversion rule: in many (but not all) contexts, an array:</p>

<pre>
T a[N];
</pre>

<p>will implicitly convert into a pointer to its first element:</p>

<pre>
T *p = a; // p points to a[0]
</pre>

<p>as if you had written an explicit conversion:</p>

<pre>
T *p = (T *) a; // equivalent
</pre>

<p>Following the lead of your second example:</p>

<pre>
typedef char T[30];
T a[5];
T *p = a;
p = (T *) a;
</pre>

<p><B>T</B> is the type "array of 30 <B>char</B>s," <B>a</B> has type "array of five arrays of 30 <B>char</B>s," and <B>p</B> has type "pointer to array of 30 <B>char</B>s."</p>
<p>If I omit the <B>T</B> definition, the code is less readable but equivalent:</p>

<pre>
char a[5][30];
char (*p)[30] = a;
p = (char (*) [30]) a;
</pre>

<p>This is what you should have done with your first example. Instead, you defined <B>p</B> as</p>

<pre>
char **p = a; // error
</pre>

<p>which is tantamount to</p>

<pre>
char **p = (char (*)[30]) a;
</pre>

<p>The type <B>char (*)[30]</B> does not convert to <B>char **</B> &#151; hence the error message.</p>

<H4><FONT COLOR="#000080">Erratica</FONT></H4>

<p>I have not touched the Borland compiler in weeks. So much for my bold promises.</p>
<p>Last month I wondered why the language rules forbade handling subobject constructor throws. Now I know: such handling would violate the C++ object model. To see my reasoning in detail, read my mid-February MSDN column at <B>&lt;http://msdn.microsoft.com/library/welcome/dsmsdn/deep02172000.htm&gt;</B>.</p>

<H4><FONT COLOR="#000080">Notes</FONT></H4>
<p><a name="1"></a>[1]  C++ Standard subclause 9.2 ("Class members"), opening grammar.</p>
<p><a name="2"></a>[2]  I covered this subject several years ago. Check out my "Learning C/C++urve" columns from the July 1997 through February 1998 issues of <I>CUJ.</I></p>
<p><a name="3"></a>[3]  Or even less often: while writing COM code. Because pointers are fungible among languages, and COM is supposed to be language agnostic, COM interfaces like to traffic in pointers.</p>
<p><a name="4"></a>[4]  For more on class object alignment and padding, see my "More Mousetraps" item from last month's column.</p>

<p><i><B>Bobby Schmidt</B> is a freelance writer, teacher, consultant, and programmer. He is also an alumnus of Microsoft, a speaker at the Software Development and Embedded Systems Conferences, and an original "associate" of (Dan) Saks &amp; Associates. In other career incarnations, Bobby has been a pool hall operator, radio DJ, private investigator, and astronomer. You may summon him on the Internet via <B>BobbySchmidt@mac.com</B>.</i></p>

</blockquote></body></html>
