<HTML><HEAD>
<TITLE>May 2000/Catching Untested Return Codes/Figure 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Figure 2: Definition and implementation of the ErrorCode class</A></h4>
<pre>
// ErrorCodes.h

enum ErrorCodeValue { Success, MyError1, MyError2, MyError3 };

class ErrorCode
{
private:
   ErrorCodeValue enValue_;
   bool * PboResp_;

public:
   ErrorCode();
   ErrorCode(const ErrorCode&amp; _ref);
   ErrorCode(ErrorCodeValue _val);
   virtual ~ErrorCode();

   ErrorCode&amp; operator = (const ErrorCode&amp; _ref);

   bool operator != (const ErrorCode&amp; _ref) const;
   bool operator == (const ErrorCode&amp; _ref) const
      { return !(*this != _ref); };
};

// ErrorCodes.cpp
#include "ErrorCodes.h"
#include &lt;iostream.h&gt;

ErrorCode::ErrorCode() : enValue_(Success),
   PboResp_(new bool(false))
{
}

ErrorCode::ErrorCode(const ErrorCode&amp; _ref) :
   enValue_(_ref.enValue_), PboResp_(new bool(true))
{
   *_ref.PboResp_ = false;
}

ErrorCode::ErrorCode(ErrorCodeValue _val) :
   enValue_(_val), PboResp_(new bool(true))
{
}

ErrorCode::~ErrorCode()
{
   if (*PboResp_)
      cerr &lt;&lt; "Destruction of untested error code: value "
           &lt;&lt; enValue_ &lt;&lt; endl;

   delete PboResp_;
}

ErrorCode&amp; ErrorCode::operator = (const ErrorCode&amp; _ref)
{
   if (*PboResp_)
      cerr &lt;&lt; "Untested error code (value " &lt;&lt; enValue_
           &lt;&lt; ") erased by new value " &lt;&lt; _ref.enValue_ &lt;&lt; endl;

   enValue_ = _ref.enValue_;
   *PboResp_ = *_ref.PboResp_;
   *_ref.PboResp_ = false;
  
   return *this;
}

bool ErrorCode::operator != (const ErrorCode&amp; _ref) const
{
   *PboResp_ = false;
   *_ref.PboResp_ = false;

   return (enValue_ != _ref.enValue_);
}

</pre></body></html>
