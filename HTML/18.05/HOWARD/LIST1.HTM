<HTML><HEAD>
<TITLE>May 2000/Using Predicate Waits with Win32 Threads/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: A program to test queue behavior with producer/consumer threads</A></h4>
<pre>
#include &lt;windows.h&gt;
#include &lt;process.h&gt;
#include &lt;assert.h&gt;
#include &lt;deque&gt;
#include &lt;iostream&gt;

// this main is the same for all iterations of the design
#if defined(BUILD_Q1)
#include "win32q1.h"
#elif defined(BUILD_Q2)
#include "win32q2.h"
#elif defined(BUILD_Q3)
#include "win32q3.h"
#endif

using namespace std;

// shared instance
BoundedInterthreadQueue ds(10);

// works with any number (&gt;0) of producers and consumers
const int NUMBER_OF_PRODUCERS = 1;
const int NUMBER_OF_CONSUMERS = 1;
// #define SLOW_PRODUCER
#define SLOW_CONSUMER

// produce data
void producer(void *arg)
{
    Data *p;
    int   i = 0;

    // run 20 times and then quit
    for(i=0;i&lt;20;i++) {
#ifdef SLOW_PRODUCER
        // simulate the producer being slower than the consumer
        Sleep(100);
#endif

        // allocate a new data item and send it to the queue
        p = new Data(i);
        if (p != 0) {
            cout &lt;&lt; "put : " &lt;&lt; GetCurrentThreadId() &lt;&lt; " : " 
                 &lt;&lt; i &lt;&lt; endl;
            ds.put(p);
        }
    }

    // all done
    cout &lt;&lt; "producer done" &lt;&lt; endl;

    // suspend forever
    SuspendThread(GetCurrentThread());
}

// consume data
void consumer(void *arg)
{
    Data *p;
    int   i;

    // run until signaled to quit
    for(;;) {
#ifdef SLOW_CONSUMER
        // simulate the consumer being slower than the producer
        Sleep(100);
#endif
        // get next element, don't need to poll now
        p = ds.get();
        if (p != 0) {
            // get its value and delete it
            i = p-&gt;x;
            delete p;
            cout &lt;&lt; "get : " &lt;&lt; GetCurrentThreadId() &lt;&lt; " : " 
                 &lt;&lt; i &lt;&lt; endl;
        }
    }
    // all done
    cout &lt;&lt; "consumer done" &lt;&lt; endl;

    // suspend forever
    SuspendThread(GetCurrentThread());
}

int main(int argc, char* argv[])
{
    unsigned long p[NUMBER_OF_PRODUCERS];
    unsigned long c[NUMBER_OF_CONSUMERS];
    int i;

    // start the worker threads
    for(i=0;i&lt; NUMBER_OF_PRODUCERS;i++) {
        p[i] = _beginthread(producer,0,0);
    }
    for(i=0;i&lt; NUMBER_OF_CONSUMERS;i++) {
        c[i] = _beginthread(consumer,0,0);
    }

    // suspend forever (exit the program with CTRL-C)
    SuspendThread(GetCurrentThread());

    return 0;
}
</pre></body></html>
