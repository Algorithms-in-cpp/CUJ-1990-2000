<HTML><HEAD>
<TITLE>May 2000/Using Predicate Waits with Win32 Threads/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2: A thread-safe, polled queue implementation without condition wait</A></h4>
<pre>
#ifndef __WIN32Q1_H__
#define __WIN32Q1_H__

#include &lt;windows.h&gt;
#include &lt;process.h&gt;
#include &lt;deque&gt;
#include &lt;iostream&gt;

using namespace std;

// dummy data type, could be anything
class Data {
public:
    Data() : x(0) {}

    Data(int i) : x(i) {}

    int x;
};

// NOTE : this is the first cut without waiting
class BoundedInterthreadQueue {
private:
    deque&lt;Data *&gt;    m_qData;       // underlying data store
    CRITICAL_SECTION m_csec;        // data store lock
    long         m_nBound;
 
public:
    BoundedInterthreadQueue() {
        m_nBound = 10; // default
        InitializeCriticalSection(&amp;m_csec);
    }

    BoundedInterthreadQueue(int bound) {
        m_nBound = bound;
        InitializeCriticalSection(&amp;m_csec);
    }

    // wrap push_back in a lock
    void put(Data *p) {
        // lock the data
        EnterCriticalSection(&amp;m_csec);

        // 
        if (m_qData.size() &lt; m_nBound) {
            m_qData.push_back(p);
        }
        else {
            cout &lt;&lt; "error : queue is full, data lost\n" &lt;&lt; endl;
        }
        LeaveCriticalSection(&amp;m_csec);
    }

    // wrap get in a lock
    Data *get() {
        Data *p;
        EnterCriticalSection(&amp;m_csec);
        if (!m_qData.empty()) {
            p = m_qData.front();
            m_qData.pop_front();
        }
        else {
            cout &lt;&lt; "error : queue is empty\n" &lt;&lt; endl;
            p = 0;
        }
        LeaveCriticalSection(&amp;m_csec);
        return p;
    }
};
</pre></body></html>
