<HTML>   
     <HEAD>
<TITLE>May 2000/Visualizing Depth Images via Rendering</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocmay.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Visualizing Depth Images via Rendering</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Dwayne Phillips</FONT></H3>

<BLOCKQUOTE>
<p>In case you thought that Dwayne Phillips had exhausted the topic of imaging in these pages, here's another interesting installment.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>This article focuses on visualizing depth images via rendering. It adds another visualization technique to those discussed in my previous article <a href="#1">[1]</a>. A depth image is similar to an ordinary grayscale image, except that the brightness of each pixel represents a "depth" or some other quantity that can be represented by a scalar. An example of a depth image is a representation of an ocean floor. Depth images are also called range images because the gray level represents the range or distance from the sensor.</p>
<p><a href="image1.htm">Images 1</a> and <a href="image2.htm">2</a> are example depth images (from <a href="#2">[2]</a> and <a href="#3">[3]</a>). <a href="image1.htm">Image 1</a> is an American 25-cent piece. The brighter areas are closer to the viewer than the darker areas. <a href="image2.htm">Image 2</a> is a depth image of shot-blasted metal. These images are difficult to interpret. Most people can visualize the coin because it is a familiar object. The other object, and the other depth images shown later, are not so easy to understand. It is hard to "see" the surfaces of these objects.</p>
<p>The remainder of this article discusses rendering via Lambertian rules <a href="#4">[4]</a>. These fundamental rules of reflection are used in most graphic arts today. These rules determine how computers make mathematical models look like real objects in movies, television, and video games. They allow people to see a depth image or a model of an object as something real.</p>

<H4><FONT COLOR="#000080">Rendering and Lambertian Rules</FONT></H4>
<p>Rendering is the process of generating an image of a surface so that it looks like a real, physical object. In this article, rendering is a transformation applied to depth images; in other contexts, the objects being rendered may be represented by different kinds of underlying models, such as lists of polygons or splines.</p>
<p><a href="fig1.htm">Figure 1</a> illustrates the basics of how light reflects off a surface. The surface of the object is the dark line on the bottom. The light comes in from the right as the vector L. N is the <I>normal</I> vector, which by definition is perpendicular to the surface. The vector R represents the reflection of the light off the surface. Objects become visible when light reflects off of them. The viewer is you and me. We see this interaction of light, surface, and reflection from some vantage point, which is at some point in line with the vector marked Viewer. Notice that the angle <FONT FACE="Symbol">q</FONT>, between incoming light L and normal N, equals the angle between N and reflected light R. L, N, R, and V (viewer) are vectors. They have components in the three dimensions x, y, and z. <a href="eq1.htm">Equation (1)</a> shows these components.</p>
<p>When light reflects off the surface of an object, we see the object. The reflected light consists of three components, known as ambient, diffuse, and specular light. <a href="eq2.htm">Equation (2)</a> shows that the intensity of light received at a point is the sum of the intensities of ambient, diffuse, and specular components. Ambient light is light that may have originated from a specific source &#151; sunlight through the window and curtains, overhead light in the hallway, etc. &#151; but has been reflected and diffused so much that it can be approximated as having equal intensity in all directions. Diffuse and specular reflections depend on surface properties of the object. A perfect diffuser will spread light uniformly over a surface. Paper, carpet, and cloth are examples of good diffusers. Shining a light on carpet does not yield much of a bright spot. Specular surfaces are shiny, because they reflect light rays without causing much spreading. Polished brass shows relatively bright spots when a light hits it.</p>
<p><a href="eq3.htm">Equation (3)</a> is an expanded version of <a href="eq2.htm">equation (2)</a>. The vectors N, L, V, and R of <a href="fig1.htm">Figure 1</a> are components of this equation. I<SUB>source</SUB> represents the intensity of light received from a light source pointed directly at the object (such as from a flashlight or lamp). I<SUB>amb</SUB> represents the intensity of ambient light present in the room. Turning off the lamp and closing all the doors and windows causes both the light terms go to zero &#151; the image becomes zero or black. k<SUB>diff</SUB> is a diffusion constant; it affects the contribution of the ambient light term. k<SUB>spec</SUB> is a specular constant that affects the contribution of the specular light term. These constants must be between 0.0 and 1.0. The exponent <FONT FACE="Symbol">h</FONT> at the far right affects how shiny or dull the surface appears. <FONT FACE="Symbol">h</FONT> is small for dull surfaces, large for shiny surfaces. The known values in the equation (because they are entered by the user) are I<SUB>source</SUB>, I<SUB>amb</SUB>, k<SUB>diff</SUB>, k<SUB>spec</SUB>, and <FONT FACE="Symbol">h</FONT>.</p>
<p>The N<FONT SIZE=3><B>&middot;</B></FONT> L and V<FONT SIZE=3><B>&middot;</B></FONT> R terms on the right end of the equation are "dot products." The dot product is calculated by either <a href="eq4.htm">Equation (4)</a> or <a href="eq6.htm">(6)</a>. (Reference <a href="#5">[5]</a> is one of many sources for the vector calculations common in rendering and modeling.) <a href="eq4.htm">Equation (4)</a> is a quick way to calculate the dot product, if you know the angle between two vectors. In the equation, the angle <FONT FACE="Symbol">q</FONT> represents the angle between vector V<SUB>1</SUB> and V<SUB>2</SUB>. The v<SUB>1</SUB> and v<SUB>2</SUB> terms (lowercase v) of <a href="eq4.htm">equation (4)</a> represent the magnitudes of the vectors. <a href="eq5.htm">Equation (5)</a> shows how to calculate the magnitude of a vector. Here is an implementation of <a href="eq5.htm">Equation (5)</a> in C:</p>

<pre>
magnitude_of(v, answer)
   float v[], *answer;
{
   double d, n;
   n  = v[0]*v[0] + v[1]*v[1] + 
        v[2]*v[2];
   d  = sqrt(n);
   *answer = d;
}  /* ends magnitude_of */
</pre>

<p><a href="eq6.htm">Equation (6)</a> shows how to calculate the dot product, given two vectors having x, y, and z components as defined in <a href="eq1.htm">Equation (1)</a>. An implementation in C is:</p>

<pre>
dot_product(v1, v2)
   float v1[], v2[];
{
   float result = 0.0;
   result = v1[0]*v2[0] + v1[1]*v2[1] + 
            v1[2]*v2[2];
   return(result);
}  /* ends dot_product */
</pre>

<p>Notice that the dot product yields a scalar, which is a single value, not a vector.</p>
<p><a href="fig2.htm">Figure 2</a> graphically represents the problem of calculating <a href="eq3.htm">Equation (3)</a> for a single point of the rendered image. The viewer looks straight down on the surface of an object. (This surface is not explicitly specified anywhere; it will be derived from the intensities of the depth image.) Again, vector L represents incoming light from a directional light source; vector R represents its reflection off the surface. This fictional surface is shown at an arbitrary slant, because the surface of the object being rendered (such as a quarter) will likely be at a slant.</p>
<p>Notice what happens if the angle <FONT FACE="Symbol">q</FONT>, between light ray L and surface normal N, is greater than 90 degrees. That means the light is hitting the back side of the surface. The diffuse and specular components of light reflected to the viewer must be zero, because light does not hit the surface. <a href="eq2.htm">Equations (2)</a> and <a href="eq3.htm">(3)</a> indicate that in this case the surface will still be visible as long as the ambient light source and diffusion constant are not zero.</p>
<p>Notice also that the Diffuse reflection component of <a href="eq3.htm">Equation (3)</a> (I<SUB>source</SUB>*k<SUB>diff</SUB>*N<FONT SIZE=3><B>&middot;</B></FONT> L) is controlled by the dot product of N and L. The position of the viewer does not matter here; the amount of light reflected is determined by the angle between L and the surface, and the diffusion term k<SUB>diff</SUB>, which depends on the surface properties of the object.</p>
<p>The specular reflection component is controlled by the dot product of V and R; that is, both the reflection angle of the light and the position of the viewer affect whether or not shiny spots on the surface are visible to the viewer.</p>
<p>The program shown later will implement <a href="eq3.htm">Equation (3)</a>, and it will make use of all the terms in that equation. The user will provide the ambient and source light intensities (I<SUB>amb</SUB> and I<SUB>source</SUB>), the diffusion and specular constants (k<SUB>diff</SUB> and k<SUB>spec</SUB>), and the h term. The light vector L will also come from the user. It will consist of x, y, and z components, thus allowing the user to specify the precise direction from which the light comes. The viewer vector V is assumed to be straight up.</p>

<H4><FONT COLOR="#000080">Finding the Surface</FONT></H4>

<p>The user specifies six of the values used in <a href="eq3.htm">Equation (3)</a>, which accounts for an infinite variety of possible results. However, still missing are the vectors N and R. The vector N comes from the surface plane, so we need to first find the surface. In this section I explain how this is done.</p>
<p><a href="fig3.htm">Figure 3</a> shows the physical situation modeled by a depth image. The pixel value in a depth image represents a height. The bars in <a href="fig3.htm">Figure 3</a> are proportional to the those heights.</p>
<p><a href="fig4.htm">Figure 4</a> represents a depth image pixel and two of its neighbors. The pixel at (x,y) has a certain z coordinate proportional to height, as do its neighbors at (x+1,y) and (x,y+1). The vectors V<SUB>1</SUB> and V<SUB>2</SUB> go from the pixel at (x,y) to its neighbors. V<SUB>1</SUB> and V<SUB>2</SUB> are easy to calculate, given that the image values represent z coordinates. These vectors can be seen to form two sides of a triangle, and this triangle can be seen to lie within a plane. This plane is the surface of Figure 2.</p>
<p>The vector N normal to this plane is produced by the cross product <a href="#5">[5]</a> of V<SUB>1</SUB> and V<SUB>2</SUB>. <a href="eq7.htm">Equation (7)</a> shows one way to calculate the cross product, using the three elements of the vectors. (The quantity shown in the middle of the equation represents a matrix determinant.) An implementation in C is shown as follows:</p>

<pre>
cross_product(v1, v2, result)
   float v1[], v2[], result[];
{
   result[0] = v1[1]*v2[2] - 
      v2[1]*v1[2];
   result[1] = v1[2]*v2[0] - 
      v2[2]*v1[0];
   result[2] = v1[0]*v2[1] - 
      v2[0]*v1[1];
}  /* ends cross_product */
</pre>

<p>The program shown later will use this method to find the normal vector N. Notice that the cross product yields a vector, not a scalar.</p>
<p>Now how do we find the vector R? We won't. At first glance, it seems that the vector R is needed to calculate the dot product of V and R. However, this calculation can also be done via <a href="eq4.htm">Equation (4)</a>, given the angle between V and R. That angle can be inferred as follows. First, given two known vectors, such as L and N, it is possible to find the angle between them using <a href="eq8.htm">Equation (8)</a>. The following snippet shows how to do this in C:</p>

<pre>
angle_between(v1, v2, angle)
   float *angle, v1[], v2[];
{
   double d, d1, d2, dt, n, 
          result = 0.0, t;
   char   response[80];

   n  = v1[0]*v2[0] + v1[1]*v2[1] + 
        v1[2]*v2[2];
   dt = v1[0]*v1[0] + v1[1]*v1[1] + 
        v1[2]*v1[2];
   d1 = sqrt(dt);
   dt = v2[0]*v2[0] + v2[1]*v2[1] + 
        v2[2]*v2[2];
   d2 = sqrt(dt);
   d  = d1*d2;

   t      = n/d;
   if(t &lt;= -1.0) t = -0.999;
   if(t &gt;   1.0) t =  1.0;

   result = acos(t);
   *angle = result;

}  /* ends angle_between */
</pre>

<p>This routine can also be used to calculate the angle between L and V, and between N and V. Some addition and subtraction then provides a good approximation of the angle between V and R.</p>
<p>We now have all the necessary terms to implement <a href="eq3.htm">Equation (3)</a> and render depth images.</p>

<H4><FONT COLOR="#000080">Implementation and Examples</FONT></H4>

<p><a href="list1.htm">Listing 1</a> shows parts of the main calling routine. This is a command-line program. The user enters the file names, the diffusion and specular terms, the exponent <FONT FACE="Symbol">h</FONT>, and the light vector L. The main routine calls several functions that create and free arrays and read and write image data. (The full source code is available on the <I>CUJ</I> ftp site. See p. 3 for downloading instructions.)</p>
<p>The main routine also calls the <B>lambert</B> subroutine (<a href="list2.htm">Listing 2</a>) that transforms, or "renders" the input depth image into an output image. The <B>lambert</B> subroutine implements <a href="eq3.htm">Equation (3)</a>. This subroutine should be easy to understand, since it follows the preceding discussion closely.</p>
<p>It is important to understand the direction of the axes in this code. The x direction goes from left to right as usual. The y direction goes from top to bottom. This is normal in image processing, but is upside-down of how people usually think of images. This opposite y direction causes the positive z axis to be going away from the viewer &#151; opposite from what is expected again.</p>
<p>The <B>lambert</B> routine first sets the viewer vector V to straight up. The loops over rows and cols run through the input depth image to render it into the output image. The first section of code calculates the V<SUB>1</SUB> and V<SUB>2</SUB> vectors of Figure 4 and uses the cross product to find the normal vector N. The next section finds the angles between L and N, N and V, and L and V. Addition and subtraction of angles produces an approximation of the angle between V and R. V and R produce the specular term while N and L produce the diffuse term. Simple addition and multiplication fills out <a href="eq3.htm">Equation (3)</a>.</p>
<p><a href="image3.htm">Images 3</a>, <a href="image4.htm">4</a>, and <a href="image5.htm">5</a> show example renderings from depth images. As stated earlier, the user sets six of the variables in <a href="eq3.htm">Equation (3)</a>. Space is not available to show even a small percentage of the possible outputs. <a href="image3.htm">Image 3</a> shows four renderings of the quarter depth image of <a href="image1.htm">Image 1</a>. The direction of the light source is different for each rendering. <a href="image4.htm">Image 4</a> shows two different renderings of the shot-blasted metal depth image from <a href="image2.htm">Image 2</a>. <a href="image5.htm">Image 5</a> shows a depth image of skin on the left and its rendering on the right.</p>

<H4><FONT COLOR="#000080">Conclusion</FONT></H4>

<p>This article has presented a simple implementation of code that renders objects via Lambertian rules. The program was applied to depth images to produce something that is easier to see. This simple implementation just scratches the surface of rendering and object modeling. It does, however, show the basics of how Hollywood and the scientific communities turn depth images and 3-D models into seemingly real objects on the screen. I invite the readers to explore this topic further on their own. As usual, experiment, learn, and have fun.</p>

<H4><FONT COLOR="#000080">Notes and References</FONT></H4>

<p><a name="1"></a>[1]  Dwayne Phillips. "Visualizing Depth Images," <I>C/C++ Users Journal,</I> December 1999, pp. 18-32.</p>
<p><a name="2"></a>[2]  John C. Russ. <I>The Image Processing Handbook, Third Edition</I> (CRC Press, 1999).</p>
<p><a name="3"></a>[3]  <I>The Image Processing Toolkit, Version 2.5,</I> Reindeer Games  Inc., <B>http://members.aol.com/ImagProcTK</B>.</p>
<p><a name="4"></a>[4]  Johann Heinrich Lambert (1728-1777) was a Swiss-German mathematician, astronomer, and physicist. Like many famous and accomplished scientist of his era, Mr. Lambert made fundamental advances in these fields. His work in optics produced the rules that are implicit in Figures 1 and 2; these rules are described more explicitly by the equations that accompany the figures.</p>
<p><a name="5"></a>[5]  William H. Beyer. <I>CRC Standard Mathematical Tables, 26th Edition</I> (CRC Press, 1983).</p>

<p><i><B>Dwayne Phillips</B> has worked as a software and systems engineer for the US Government since 1980. He has a Ph.D. in Electrical Engineering from Louisiana State University. In addition to writing about image processing for </I>C/C++ Users Journal,<I> he has written </I>The Software Project Manager's Handbook, Principles that Work at Work,<I> published by the IEEE Computer Society.</i></p>

<h4><a href="../../../source/2000/may00/phillips.zip">Get Article Source Code</a></h4>


</blockquote></body></html>
