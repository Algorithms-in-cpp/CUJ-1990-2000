<HTML><HEAD>
<TITLE>May 2000/Integrating Threads with Template Classes/Listing 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 3: Wrapping the thread pointer in an intermediate object</A></h4>
<pre>
#include &lt;pthread.h&gt;

template &lt;class T&gt;
class WrapperSub;

template &lt;class T&gt;
class Thread {
protected:
   pthread_t _threadptr;
   void Run() { }
public:
   void Create() 
   { pthread_create(&amp;_threadptr, NULL, thread_func, 
        new WrapperSub&lt;T&gt;(this)); } 
   ~Thread() { pthread_join(_threadptr, NULL); }
   friend void *thread_func(void *);
   friend class WrapperSub&lt;T&gt;;
};

class Wrapper {
public:
   virtual void Wrap()=0;
   virtual ~Wrapper(){}
};

template &lt;class T&gt;
class WrapperSub : public Wrapper {
protected:
   Thread&lt;T&gt; *_t;
public:
   WrapperSub(Thread&lt;T&gt; *t) : _t(t) {}
   void Wrap() {
      _t-&gt;Run();
   }
};

void *thread_func(void *p) {
   Wrapper *w=reinterpret_cast&lt;Wrapper *&gt;(p);
   if (w) {
      w-&gt;Wrap();
      delete w;
   }
}

int main() {
   Thread&lt;int&gt; t;
   t.Create();
   return 0;
}
</pre></body></html>
