<HTML><HEAD>
<TITLE>November 1998/Template Wrappers for Network Messages/Listing 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 3: Sample use of message classes</A></h4>
<pre>
#include &lt;string&gt;

#include "Listing2.h"

struct HeaderData {
    char source [4];
    unsigned int  typeId;
};

//      Build up the message one part at a time:
typedef MsgExtension &lt;Message, HeaderData&gt; Header;
typedef MsgExtension &lt;Header, char*&gt; Message4Text;
typedef MsgExtension &lt;Message4Text, int&gt; Message4;

int main (int argc, const char **argv)
{
    Message4 a;
    //      Use .baseclass:: to access the message&iacute;s component
    //      parts (base classes):
    memcpy (a.Header::data()-&gt;source, "Fred", 4);
    a.Header::data()-&gt;typeId = 4;
    a.Message4Text::part () =  "This is a variable length string";
    //      'Send' this message:
    const char *data = a.rawData ();
    int size = a.size ();
    //      'Receive' the message:
    MsgBuf receivedData;
    memcpy (receivedData.buffer (size), data, size);
    Header receivedMsg (receivedData);
    //      Translate the received message to the correct type:

    if (receivedMsg-&gt;typeId == 4) {
        Message4 b (receivedMsg);
        //      Now process the message:
        //      Use down-casting to get at the Header
        //      base-class of b:
        Header &amp;header = (Header&amp;) b;
        header-&gt;typeId = 16;
        memcpy (header-&gt;source, "Jane", 4);
        //      Use the content of the received msg:
        b.Message4::part () = 128;
    }

    return 0;
}
//End of File
</pre>
</BODY>
</HTML>
