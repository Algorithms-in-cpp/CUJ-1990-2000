<HTML><HEAD>
<TITLE>November 1998/Template Wrappers for Network Messages/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: Template class BasicMsgBuf</A></h4>
<pre>
template &lt;class _Char, class _Allocator = std::allocator &lt;_Char&gt; &gt;
class BasicMsgBuf {
private:
    typedef
    std::basic_string&lt;_Char, std::char_traits &lt;_Char&gt;, _Allocator&gt;
        Content;
    Content content;
public:
    typedef Content::size_type Size;
    //      Ctors: giving initial size or a raw data blob:
    BasicMsgBuf (Size initSize = 0)
        : content (initSize, '\0') {}
    BasicMsgBuf (const BasicMsgBuf &lt;_Char, _Allocator&gt; &amp;o)
        : content (o.content) {}
    //      Ctor taking initial content
    //      (for messages re-construction)
    BasicMsgBuf (const char *d, Size s)
        : content (d, s) {}
    //      Default dtor and assignment.
    //      Read-only access:
    operator const char* () const
        {return content.c_str ();}
    Size length () const
        {return content.length ();}
    //      Read-write access, with minimum buffer size specified:
    char *buffer (Size l)
    {
        content.reserve (l);
        return &amp;(content [0]);
    }
    //      Resize a portion of the buffer, shuffling the remainder
    //      if necessary:
    void resizePart (Size pos, Size oldSize, Size newSize)
    {
        if (oldSize &lt; newSize) {
            content.insert (pos, newSize - oldSize, '\0');
        } else if (oldSize &gt; newSize) {
            content.erase (pos, oldSize - newSize);
        }
    }
};

typedef BasicMsgBuf &lt;char&gt; MsgBuf;
/* End of File */
</pre>
</BODY>
</HTML>
