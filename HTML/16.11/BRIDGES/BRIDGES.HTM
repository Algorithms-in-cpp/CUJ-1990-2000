<HTML>
     
     <HEAD>
<TITLE>November 1998/Living without enum in Java</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocnov.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Living without enum in Java</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Michael Bridges</FONT></H3>

<BLOCKQUOTE>

<p>You give up a lot of options in moving from C++ to Java, but you don't have to give up as much as you might think.</p>
</BLOCKQUOTE>
<HR>
<BLOCKQUOTE>
<h4><FONT COLOR="#000080">Introduction</FONT></H4>

<p>Java's plusses are very easy to get used to. For example, I never find myself saying "Darn it, I want to manage the heap myself." Java's minuses are another story. One feature of C/C++ I have often missed in Java is the <B>enum</B>.</p>
<p>The lack of <B>enum</B> first bit me about a year ago, when I was just starting to learn Java. I was typing in a program from a book, which was supposed to display a button on the screen. The program compiled fine, but displayed nothing. There were no error messages. </p>
<p>A character by character examination of what I had typed revealed the problem line:</p>

<pre>
add("Nort", new Button("Red"));
</pre>

<p>Instead of typing in the word <B>"North"</B> I had typed <B>"Nort"</B>. The <B>add</B> method of the <B>Component</B> class (part of Sun's abstract windowing library) was expecting one of five strings as its first argument: <B>"North"</B>, <B>"South"</B>, <B>"East"</B>, <B>"West"</B>, or <B>"Center"</B>. If the <B>String</B> argument passed wasn't any of these, the version of the AWT (Abstract Windowing Toolkit) I was using failed silently &#151; the button was not added and the <B>add</B> method reported no errors.</p>
<p>In C/C++, the <B>add</B> method wouldn't have been defined this way. Instead an <B>enum</B> would have been defined, and the <B>add</B> method would have been expecting a variable of this <B>enum</B> type as its first argument:</p>

<pre>
// C++ Declaration of the enum and of the add 
// to which enum argument is passed
enum Position {North, South, East, West,  Center};
void add (Position pos, Button b);
</pre>

<p>Calling this C++ version of <B>add</B> with <B>"North"</B> misspelled <B>"Nort"</B> would cause the C++ compiler to issue an error message.</p>
<p>Java programmers have developed constructs that provide just as much type safety as <B>enum</B>. These constructs (typically classes) can be written to protect careless typists such as myself. In this article I will review some of the most effective replacements I've found for <B>enum</B> in Java. </p>

<h4><FONT COLOR="#000080">Public Static Constants as enums</FONT></H4>

<p>The C++ <B>enum</B> provides a way of defining a set of integer constants. One of the simplest ways to simulate <B>enum</B> in Java is to just define the constants directly. The constants should be static, since they are associated with the entire class and not a particular object. They should be made public so users of the class can access them.</p>
<p>The following <B>Book</B> class contains static constants to classify the age level of the book's target reader:</p>

<pre>
public class Book {
public Book(String titleArg, int ageLevelArg)
  {
  title = titleArg;
  ageLevel = ageLevelArg;
  }
// final indicates variables constant
public final static int TODDLER = 1;
public final static int CHILD = 2;
public final static int TEENAGER = 3;
public final static int ADULT = 4;

private int ageLevel;
private String title;
}
</pre>

<p>Callers wishing to pass age levels to the book can use the constants, and if they make a spelling error the compiler will detect it.</p>
<p>Sometimes a class will contain more than one set of constants. Grouping related constants together in their own class makes the interface clearer. Also, you need not define the constants as integers; for example, you can define them as <B>String</B> constants.</p>
<p>There is a slight problem with using integer or <B>String</B> constants in place of the missing <B>enum</B>: callers aren't forced to use the constants! If the constants are integers, for example, the caller can pass any raw integer, and the compiler won't detect that the argument is incorrect. However such an error becomes apparent &#151; whether you catch it in your code, or it crashes your program &#151; it will show up at run time, not at compile time. Furthermore, using integer constants encourages bad programming style. Some programmers are addicted to using numbers in their code. I've seen such programmers print out a class containing static constants so they could know which number to use. Their code runs correctly, but is difficult for anyone else to understand.</p>
<p>In the following section I present a method to enforce the use of static constants.</p>

<h4><FONT COLOR="#000080">Defining a New Constant Type</FONT></H4>

<p>By making the constants instances of a new type you can enforce their use. Consider the following redefinition of the <B>Book</B> classes.</p>

<pre>
class BookAgeLevel     
{     
private BookAgeLevel(){}     
     
// Following are all the BookAgeLevel objects     
// there will ever be.     
final static BookAgeLevel     
   TODDLER = new BookAgeLevel();     
final static BookAgeLevel     
   CHILD = new BookAgeLevel();     
final static BookAgeLevel     
   TEENAGER = new BookAgeLevel();     
final static BookAgeLevel     
   ADULT = new BookAgeLevel();     
}     
     
class Book     
  {     
  Book(String titleArg, BookAgeLevel ageLevelArg)    
    {    
    title = titleArg;     
    ageLevel = ageLevelArg;     
    }     
     
  public BookAgeLevel getAgeLevel()    
    {     
    return ageLevel;     
    }     
     
  private BookAgeLevel ageLevel;
  private String title;     
  }
</pre>

<p>The constants defined within <B>BookAgeLevel</B> are <B>BookAgeLevel</B> objects. Because <B>BookAgeLevel</B> has a private constructor, no code outside the <B>BookAgeLevel</B> class can instantiate a <B>BookAgeLevel</B> object. Since the constructor of the <B>Book</B> class expects a <B>BookAgeLevel</B> argument, one of these constants must be passed to it. Of course the constant might be passed indirectly, as in the following:</p>

<pre>
BookAgeLevel level = BookAgeLevel.TEENAGER;     
Book book = new Book     
      ("Mystery of Java",level);
</pre>

<p>Routines that need to do more than simply store away their arguments often have a format similar to the following:</p>

<pre>
void printBookLevel (Book b)     
{     
BookAgeLevel l = b.getAgeLevel();     
if (l == BookAgeLevel.TODDLER)     
 System.out.println("Toddler");     
else if (l == BookAgeLevel.CHILD)     
 System.out.println("Child");     
else if (l == BookAgeLevel.TEENAGER)     
 System.out.println("Teenager");     
else if (l == BookAgeLevel.ADULT)     
 System.out.println("Adult");     
else if (l == null)     
 System.out.println("null argument.");
else      
 System.out.println("unhandled case");
}
</pre>

<p>Since <B>printBookLevel</B> is passed an object instead of a basic type, the next-to-last <B>else-if</B> clause is needed to check for a null. In Java, an instance of a class is really a reference to an object rather than an object itself, and that reference may have never been initialized.</p>
<p>The above routine prints out the appropriate message for the age level of the book passed in as an argument. If the last clause is reached (the one that prints out <B>"unhandled case"</B>), there must be an error in the <B>printBookLevel</B> routine itself. <B>printBookLevel</B> should check for every <B>BookAgeLevel</B> that was defined in the <B>BookAgeLevel</B> class &#151; if this routine encounters an unknown <B>BookAgeLevel</B>, it might mean that someone modified the class without providing a corresponding update to the routine.</p>
<p>The possibility of this error occurring suggests that the design of the <B>Book</B> class might be faulty. In the next section, I present a technique that eliminates this sort of error.</p>

<h4><FONT COLOR="#000080">Simulating enum with Inheritance</FONT></H4>

<p>When I find myself writing routines structured like <B>printAgeLevel</B>, I become a little suspicious about my approach to the problem. The <B>if-else</B> clauses seem to be doing a test to determine the type of <B>BookAgeLevel</B>. Instead, it might make sense to create different <B>BookAgeLevel</B> subtypes:</p>

<pre>
abstract class BookAgeLevel     
{     
public void print()     
  {     
  System.out.println(string);     
  }     
     
// subtype constructors will set.     
String string;     
}     
     
class Toddler extends BookAgeLevel     
  {     
  Toddler(){super.string = "Toddler";}     
  }     
     
class Child extends BookAgeLevel     
  {     
  Child(){super.string = "Child";}     
  }     
class Teenager extends BookAgeLevel     
  {     
  Teenager(){super.string = "Teenager";}     
  }     
class Adult extends BookAgeLevel     
  {     
  Adult(){super.string = "Adult";}     
  }     
     
class Book     
  {     
  Book (String titleArg, BookAgeLevel ageLevelArg)     
      {     
      title = titleArg;     
      ageLevel = ageLevelArg;     
      }     
  BookAgeLevel getAgeLevel()     
        {return ageLevel;}     
     
  private String title;     
  private BookAgeLevel ageLevel;     
  }
</pre>

<p>Using inheritance is often preferable to using <B>enum</B>, even in C++. Once the subtypes are defined, creating a new book and printing its age is simple:</p>

<pre>
 Book b = new Book(     
    "Kindergarten Days"     
    new Toddler());     
b.getAgeLevel().print();     
</pre>

<h4><FONT COLOR="#000080">Conclusion</FONT></H4>

<p>When I find myself missing <B>enum</B>, I first think about whether my program should be restructured to use inheritance to make the missing font irrelevant. If I decide that I really should be using an <B>enum</B> equivalent, I define a new argument type, so that callers of my class's methods will be forced to pass one of the static constants I've defined as an argument. This is a little bit more work than just defining <B>int</B> or <B>String</B> constants. I think the extra work is worthwhile &#151; as much as possible I like to protect the users of my classes from making silly mistakes. I hope the writers of the classes I use will do as much for me.</p>

<h4><FONT COLOR="#000080">Further Reading</FONT></H4>

<p>Tom Cargill. <I>C++ Programming Style</I> (Addison-Wesley, 1992).</p>
<p>Bruce Eckel. <I>Thinking in Java</I> (Prentice Hall, 1998).</p>

<p><i>Michael Bridges received a bachelor's degree in Electrical Engineering and Economics from Carnegie Mellon University and a master's degree in Computer Science from the University of Pennsylvania. He has done many different kinds of programming, including embedded systems. Currently he is at Destiny Software (<B>www.destinyusa.com</B>), where he gets to use his two favorite languages, C++ and Java, to implement online financial systems.</i></p>

</BLOCKQUOTE>
</BODY>
</HTML>
