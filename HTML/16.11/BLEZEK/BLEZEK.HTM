<HTML>
     
     <HEAD>
<TITLE>November 1998/Rapid Prototyping with SWIG</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocnov.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Rapid Prototyping with SWIG</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Daniel Blezek</FONT></H3>

<BLOCKQUOTE>

<p>Any programming problem can be solved by adding another layer of indirection, or so the old saying goes. Sometimes that layer is called a wrapper.</p></BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<h4><FONT COLOR="#000080">Introduction</FONT></H4>

<p>Rapid prototyping techniques can become ineffective when the prototyping is not actually rapid, or when it becomes too difficult. One of the obstacles to rapid prototyping is the "edit-compile-test (and possibly crash)" cycle of development.</p>
<p>You can avoid the compile portion through the use of interpreted code, written in languages such as Java, TCL/TK, Python, or Perl. Without the compile cycle, programs can go directly from editor to running program in a fraction of the time for typical C++ programs. As a plus, TCL/TK, Python, and Perl provide interactive sessions, letting you experiment with the commands available and test out new features immediately.</p>
<p>A major drawback in using scripting languages is the difficulty in adding capabilities to the languages through the use of libraries. Although the scripting languages themselves do provide mechanisms for incorporating library function calls, these mechanisms often have subtle nuances that have lead me to great frustration. The problems mount when I want to have the same functions available in two languages. The solution I've found is SWIG <a href="#1">[1]</a>.</p>
<p>SWIG stands for Simplified Wrapper and Interface Generator, and its name describes the functionality of the program very well. For us lazy programmers, SWIG automates some of the tedium associated with incorporating routines from a library into a scripting language. In a nutshell, SWIG parses C and C++ header files, looking for <B>#define</B>d constants, global variables, classes, structures, enumerations, and function declarations. It uses the parsed information to generate the C or C++ code (called a wrapper) that interfaces the scripting language and the library calls represented by the header files.</p>
<p>As of this writing, SWIG works with:</p>

<UL><LI>TCL 7.3, and all newer versions including TCL 8/0</LI>
    <LI>Python 1.3 and newer</LI>
    <LI>Perl 5.003 or newer, including ActiveWare Perl for Win32</LI>
    <LI>Perl 4.036</LI>
    <LI>FSF Guile 1.0</LI></UL>

<p>There is also alpha support for Java. SWIG runs on a number of Unix platforms, including Linux; Windows 95/NT; and Macintosh.</p>
<p>To demonstrate the use of SWIG, I'll first cover the general method of writing interface code, what SWIG does with the different components of a library, and finally, present a working example of how I've used SWIG to incorporate the Image Magick library of image processing routines into Python.</p>

<h4><FONT COLOR="#000080">SWIG Basics</FONT></H4>

<p>SWIG is used to generate a module for a particular scripting language. A module contains a collection of constants, global variables, structures, classes, and procedures that are wrapped up and used in the scripting language. SWIG generates wrapper code to allow the elements of the module to be accessed in a given scripting language. All the languages that SWIG operates with are able to import the module dynamically into the interpreter using shared languages. SWIG also generates rudimentary documentation on the elements that it wraps into the interpreter using shared libraries.</p>

<h4><FONT COLOR="#000080">Constants and Global Variables</FONT></H4>

<p>When SWIG encounters a <B>#define</B> statement that defines a constant, the constant appears in Python as a global read-only variable with the same name, and with the value that was defined in the header file. Thus,</p>

<pre>
#define OPENIMAGE 1
</pre>

<p>translates to the variable</p>

<pre>
modulename.OPENIMAGE
</pre>

<p>in Python. Global variables are handled in much the same way, except that they are not read only. SWIG/Python understands all the simple data types (<B>char</B>, <B>int</B>, <B>float</B>, etc...). And because SWIG process <B>typemap</B> statements (explained later), even more complex data types are available in the scripting language. The scripting language is able to use these variables just as it does any other native variable.</p>

<h4><FONT COLOR="#000080">Classes and Structures</FONT></H4>

<p>To understand the handling of classes <a href="#2">[2]</a>, you must understand how SWIG handles data. To manage classes, SWIG refers to each object as a pointer. Suppose a C++ procedure takes an object (say <B>foo</B>) as a parameter. In Python, you simply pass a representation of a pointer. SWIG does the proper dereferencing and calls the procedure correctly.</p>
<p>SWIG uses different representations for different scripting languages. For Python, SWIG represents an object of type <B>Bar</B> as a character string of the form <B>_10048ff0_Bar_p</B>. The first part of the string represents the address of the object, <B>_Bar_</B> represents the <B>Bar</B> object's class, and <B>_p</B> says it's a pointer. In general, you never have to work with the string representations, and you should never modify them.</p>
<p>SWIG performs run-time type checking as well, and will generate an error if you try to use an invalid class in a procedure. SWIG wraps only the public functions and members of a class. It is also quite capable of understanding virtual functions, static members, and superclasses.</p>
<p>SWIG also lets you be selective about what you include in the module, so only the elements that you want are included. SWIG currently does not wrap operators, overloaded functions, or friend functions. See the <A HREF="sidebar.htm">sidebar</A> for a short example of how wrapped constants, procedures, and classes look in Python.</p>

<h4><FONT COLOR="#000080">Wrapping the Image Magick Library</FONT></H4>

<p>Image Magick (<B>http://www.wizards.dupont.com/cristy/</B>) is an image processing C library available for a wide variety of platforms. The chief advantage of Image Magick is its ability to read in many different kinds of images, operate on them, and write them out in a different format. I often write short Python scripts with the wrapped Image Magick libary to perform one-shot batch processing of images, or to simply do the processing interactively. <A HREF="fig1.htm">Figure 1</A> shows an interface file for SWIG that describes the structures and functions of Image Magick that form the basis of the example.</p>
<p>To create an interface file for SWIG, I usually copy the header that I'm interested in, then rip out all the extra stuff. SWIG does tend to get confused with <B>#define</B> and <B>#ifdef</B> statements, so they are usually the first to go. I then edit the stripped down header to make it palatable to SWIG. After consulting the Image Magick documentation, I determined that the two structures to get started with are <B>ImageInfo</B> and <B>Image</B>.</p>
<p>At the top of <A HREF="fig1.htm">Figure 1</A>, a line appears starting with the directive <B>%module</B>. Each SWIG directive starts with a <B>%</B>; the <B>%module</B> directive tells SWIG to name this module <B>"Image"</B>. The next section is a block of code contained in a <B>%{ %}</B> pair. SWIG copies all the code enclosed in this pair directly into the generated C code. This section is typically used to include header files. In this case, the only file needed is <B>magick.h</B>.</p>

<h4><FONT COLOR="#000080">Typemaps</FONT></H4>

<p>The next directive involves one of the most powerful and mysterious features of SWIG, typemaps. A typemap provides control over the conversion of scripting language elements to C/C++ elements. The first typemap directive provides for a character string of any length (defined by the SWIG keyword <B>ANY</B>) to be assigned to a C++ class member that is a character array, using a string copy. SWIG replaces <B>$target</B> with the name of the <B>char[]</B> member; <B>$source</B> is the string as represented in Python; and <B>$dim0</B> is the length of the member.</p>
<p>In general, writing <B>typemap</B> directives requires a basic understanding of the scripting langage in use, and how SWIG operates. SWIG treats <B>char *</B> members as allocated memory, and will free the memory and reallocate it as needed when the member is accessed. SWIG makes fixed-length arrays read-only, but you can neatly circumvent this restriction by using this typemap.</p>
<p>Consider a class such as the following:</p>

<pre>
class Foo {
    public:
        char name[100];
        int length;
        Foo() { name = '\0';
                length = 10; };
        Foo* Copy();
};
</pre>

<p>Because SWIG does not by default handle read/write arrays, you cannot write to the member <B>name</B>. If in Python <B>foo</B> represents an object of class <B>Foo</B>, you can get the value of <B>foo-&gt;name</B> by using <B>foo.name</B>, but you cannot write to <B>name</B> using <B>foo.name = "NewValue"</B>. The <B>char[ANY]</B> typemap circumvents this problem simply by taking the Python object <B>$source</B>, a string, and using <B>strncpy</B> to place the value into the member <B>name</B>, represented by <B>$target</B>. In effect, the typemap performs the steps that you would have to go through in a strictly C++ interface. SWIG replaces <B>$dim0</B> with the length of the array, 100 in member <B>name</B> for class <B>Foo</B>.</p>
<p>The next section of <A HREF="fig1.htm">Figure 1</A> is the class definition for the <B>ImageInfo</B> structure. The only real member of importance is the <B>filename</B> member. Setting the filename to the name of an image causes the <B>ReadImage</B> procedure to read an image into memory and return a pointer to it.</p>
<p>Even though Image Magick is strictly a C library, we can simulate C++ functionality by using the <B>%addmethods</B> SWIG directive. <B>%addmethods</B> allows you to add constructors, destructors, and methods to a class regardless of what is in the C++ declaration, allowing easy extension. In the case of the ImageInfo structure, the constructor needs to allocate memory, and to call <B>GetImageInfo</B> to initialize it. The destructor simply calls <B>DestroyImageInfo</B> to release the memory. In any method added in an <B>%addmethods</B> block, <B>self</B> can be used like <B>this</B> in C++, so <B>DestroyImageInfo</B> takes <B>self</B> as a parameter, which is a pointer to the particular <B>ImageInfo</B> structure.</p>
<p>The <B>Image</B> structure needs a bit more work to be useful. The member <B>filename</B> is essential to the class, as it contains the name of a file to which the image is written. The <B>columns</B>, <B>rows</B>, <B>depth</B>, <B>x_resolution</B>, and <B>y_resolution</B> members are not so essential, but provide useful information about the image. Since I use the library only to read in files rather than construct them on the fly, I don't need to provide a way to construct an image. The <B>ReadImage</B> procedure takes care of allocating and initializing an <B>Image</B> instance. The <B>Image</B> class destructor simply calls <B>DestroyImage</B>.</p>
<p>Image Magick provides a great number of image processing routines. Many are useful, some are not so useful. I've added some of the simpler and more dramatic routines to the <B>Image</B> class. Notice that most of them return an <B>Image *</B>. A new Python instance of the <B>Image</B> class is created and returned for each of these, complete with all the object-oriented features, just as would be the case in C++.</p>
<p>The last part of the file is the <B>ReadImage</B> procedure. This procedure takes an <B>ImageInfo</B> structure as a parameter, and returns an <B>Image *</B> as a full Python object. <B>ReadImage</B> could be incorporated into the Image class through an <B>%addmethods</B> directive, but I found the interface to be cleaner with it outside the <B>Image</B> class.</p>

<h4><FONT COLOR="#000080">An Example Build and Use</FONT></H4>

<p>The wrapper code generate by SWIG is designed to be transparently compiled on Unix, Windows NT/95, and Macintosh. SWIG does provide platform-independent code, and I frequently generate wrapper code on Unix, and compile the code on Windows NT. The following snippet shows an example of compiling the sample code under RedHat 5.0 Linux (assuming a filename of <B>sample.i</B>):</p>

<pre>
Linux$ swig -python -shadow sample.i
Generating wrappers for Python
Linux$ cc -c sample_wrap.c -I/usr/local/include/python
    -I/usr/local/include/magick
Linux$ ld -G -o Imagec.so sample_wrap.o -lMagick -lX11 -ljpeg 
    -lmpeg -lpng -lz -lm
</pre>

<p>The shared library must be named <B>Modulenamec.so</B>, where <B>Modulename</B> is <B>Image</B> in the example and is set using the <B>%module</B> directive in the <B>sample.i</B> file. SWIG also generates a <B>Modulename.py</B> file, which imports <B>Modulenamec.so</B> and defines some Python classes that effectively wrap the shared library classes to make them appear as native Python objects.</p>
<p><A HREF="fig2.htm">Figure 2</A> is an excerpt from an interactive Python session, showing the fruits of wrapping the Image Magick library through SWIG. <B>&gt;&gt;&gt;</B> is Python's interactive prompt, and <B>...</B> is the continuation prompt.</p>

<h4><FONT COLOR="#000080">Conclusion</FONT></H4>

<p>I use SWIG extensively to create interfaces for libraries that I need to rapidly understand and use interactively. The Image Magick library is extremely useful for incorporating image processing into the different scripting languages, and I use it quite often to easily convert files from one format to another with a bit of processing in-between. Through the use SWIG, it is very easy to rapidly prototype applications that showcase different libraries. I often end up being able to use the scripting interface rather than re-writing the code in C/C++.</p>

<h4><FONT COLOR="#000080">Notes</FONT></H4>

<p><a name="1"></a>[1]  SWIG is freely available at www.swig.org.</p>
<p><a name="2"></a>[2]  Since SWIG treats them the same, I'll refer to both classes and structures as classes.</p>

<p><i>Daniel Blezek (<B>blezek@worldnet.att.net</B>) is a Ph.D. student in Biomedical Engineering studying medical image processing, scientific and medical visualization, and virtual reality. Between feeding times for his baby daughter, he likes to tinker around learning new programming languages and exploring the wonders of Linux.</i></p>

<h4><a href="../../../source/1998/nov98/blezek.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY>
</HTML>
