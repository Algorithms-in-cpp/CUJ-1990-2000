<HTML><HEAD>
<TITLE>November 1998/Efficient 2-D Geometric Operations, Part 1/Figure 4</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Figure 4: Class Point</A></h4>
<pre>
// **********************************************************
//   File: Point.h
//   Description: Definition of class Point
//
//   Author: Carlos Moreno
// **********************************************************

#ifndef __POINT_H__
#define __POINT_H__

class Segment;
class Triangle;
class Polygon;

class Point 
{
public:

        // Constructor
    explicit Point (double _x = 0, double _y = 0)
        : x(_x), y(_y) {}

        // Geometric and miscelaneous operations
    void draw (int radius = 0) const;
        // Platform dependent - implemented for Win32

    bool is_on (const Segment &amp;) const;

    bool is_inside (const Triangle &amp;) const;
    bool is_inside (const Polygon &amp;) const;

        // Arithmetic operators
    Point operator+ (const Point &amp; p) const;
    Point operator- (const Point &amp; p) const;
    Point operator* (double r) const;
    double operator* (const Point &amp; p) const;  // Scalar product
    Point operator/ (double r) const;

        // Comparison operators
    bool operator== (const Point &amp; p) const;
    bool operator!= (const Point &amp; p) const;

    bool operator&lt; (const Point &amp; p) const;
    bool operator&gt; (const Point &amp; p) const;

        // get utility functions
    double get_x () const
    {
        return x;
    }

    double get_y () const
    {
        return y;
    }

private:
    double x,y;
};


inline Point operator* (double x, const Point &amp; p)
{
    return p*x;         // Invoke member-function
}


const Point origin (0,0);

#endif

// **********************************************************
//   File: Point.cpp
//   Description: Implementation of class Point
//
//   Author: Carlos Moreno
// **********************************************************

#include "Point.h"
#include "Segment.h"
#include "Triangle.h"
#include "Polygon.h"

#include "graphic_interface.h"


bool Point::is_on (const Segment &amp; s) const
{
    return s.contains (*this);
}


bool Point::is_inside (const Triangle &amp; t) const
{
    return t.contains (*this);
}


bool Point::is_inside (const Polygon &amp; P) const
{
    return P.contains (*this);
}


void Point::draw (int radius) const
{
    draw_point (x, y, radius);
}


Point Point::operator+ (const Point &amp; p) const
{
    return Point (x + p.x, y + p.y);
}


Point Point::operator- (const Point &amp; p) const
{
    return Point (x - p.x, y - p.y);
}


Point Point::operator* (double r) const
{
    return Point (r*x, r*y);
}


double Point::operator* (const Point &amp; p) const
{
    return x * p.x + y * p.y;       // Scalar product
}


Point Point::operator/ (double r) const
{
    return Point (x/r, y/r);
}


bool Point::operator== (const Point &amp; p) const
{
    return x == p.x &amp;&amp; y == p.y;
}


bool Point::operator!= (const Point &amp; p) const
{
    return !(*this == p);
}
//End of File
</pre>
</BODY>
</HTML>
