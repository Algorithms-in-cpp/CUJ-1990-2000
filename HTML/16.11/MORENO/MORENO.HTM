<HTML>
     
     <HEAD>
<TITLE>November 1998/Efficient 2-D Geometric Operations, Part 1</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocnov.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Scientific/Numerical</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Efficient 2-D Geometric Operations, Part 1</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Carlos Moreno</FONT></H3>

<BLOCKQUOTE>

<p>"Inside" is an easy predicate for people to determine, but rather harder for computers.</p>
</BLOCKQUOTE>
<HR>
<BLOCKQUOTE>
<h4><FONT COLOR="#000080">Introduction</FONT></H4>

<p>Geometric algorithms and techniques are important tools in graphics, image processing, and computer vision applications. They also offer convenient and efficient solutions to pattern recognition problems such as the Nearest Neighbor rules, clustering, and image or polygon preprocessing.</p>
<p>In this two-part series, I present a C++ implementation of some standard and very efficient techniques in the field of Computational Geometry. This implementation includes fundamental operations such as orientation, test for point inclusion in a triangle, and segment intersection. These fundamental operations provide a basis for more complex operations, such as polygon orientation, point inclusion in a polygon, triangulation, convex hull computation for a set of points and for a simple polygon, and other standard algorithms.   In the first part of this series, I present the mathematical basis and the fundamental operations, as well as the class definitions to implement these operations. The second part will describe some geometric algorithms and operations related to polygons.</p>
<p>The tools are based on the implementation of four classes, to represent points, segments, triangles, and polygons, all of them in the plane (two-dimensional).</p>

<h4><FONT COLOR="#000080">The Mathematics of 2-D Operations</FONT></H4>

<p>The basic operation at the heart of the algorithms presented is computation of a triangle's area given its three vertices (i.e., given the x-y coordinates of those vertices). This computation is efficiently performed based on the properties of the vector product.</p>
<p>Given two vectors <I>v<SUB>1</SUB></I>, <I>v<SUB>2</SUB></I>, their vector product <I>v<SUB>1</SUB> X v<SUB>2</SUB></I> is perpendicular to both vectors; its magnitude is equal to the product of the magnitudes of <I>v<SUB>1</SUB></I> and <I>v<SUB>2</SUB></I> times the sine of the angle between them; and its orientation can be obtained using the Right Hand Rule.</p>
<p>If the two vectors are in the x-y plane (i.e., their z-coordinates are zero), their vector product will be parallel to the z-axis, and its z-coordinate will be positive if vector <I>v<SUB>2</SUB></I> is "at the left" of vector <I>v<SUB>1</SUB></I>, zero if <I>v<SUB>1</SUB></I> and <I>v<SUB>2</SUB></I> are parallel, and negative if <I>v<SUB>2</SUB></I> is "at the right" of <I>v<SUB>1</SUB></I>. (The term <I>orientation</I> refers to whether this z-coordinate is positive or negative.)</p>
<p>Given three points <I>p<SUB>1</SUB></I>, <I>p<SUB>2</SUB></I>, <I>p<SUB>3</SUB></I> in the x-y plane, the z-coordinate of the vector product between <I>p<SUB>2</SUB></I> - <I>p<SUB>1</SUB></I> (<I>p<SUB>2</SUB></I> minus <I>p<SUB>1</SUB></I>) and <I>p<SUB>3</SUB></I> - <I>p<SUB>2</SUB></I> is given by the following formula:</p>

<pre>
<I>z</I> = <I>x<SUB>1</SUB>(y<SUB>2</SUB></I> - <I>y<SUB>3</SUB>)</I> + <I>x<SUB>2</SUB>(y<SUB>3</SUB></I> - <I>y<SUB>1</SUB>)</I> + <I>x<SUB>3</SUB>(y<SUB>1</SUB></I> - <I>y<SUB>2</SUB>)</I></p>
</pre>

<p>Given the properties just discussed for the vector product, the above formula yields the following information (see <A HREF="fig1.htm">Figure 1</A>):</p>

<UL><LI>The magnitude of <I>z</I> is twice the area of the triangle <I>p<SUB>1</SUB></I>, <I>p<SUB>2</SUB></I>, <I>p<SUB>3</SUB></I>.</LI>
    <LI>The sign of <I>z</I> tells whether the triplet <I>p<SUB>1</SUB></I>, <I>p<SUB>2</SUB></I>, <I>p<SUB>3</SUB></I> represents a right turn or left turn (that is, if the point <I>p<SUB>3</SUB></I> is at the right or at the left of the oriented segment from <I>p<SUB>1</SUB></I> to <I>p<SUB>2</SUB></I>).</LI></UL>

<p>Notice that calculating this value requires only three real-number multiplications and five additions. No trigonometric function calculations are involved.</p>
<p>Surprisingly enough, this simple operation forms the basis of most of the algorithms I present in this series, as well as many other extremely complex algorithms. Even more surprising is the fact that what is (almost exclusively) used in the algorithms is the sign of <I>z</I> (i.e., the orientation of triplets of points), rather than the magnitude or the value of <I>z</I> itself.</p>
<p>In addition to this fundamental operation and the basic arithmetic (including the scalar product), two other operations complete the basis for all the algorithms to be presented: a test for segment intersection, and a test for point inclusion in a triangle. These two operations are also based exclusively on the orientation of triplets of points.</p>

<h4><FONT COLOR="#000080">Testing for Segment Intersection</FONT></H4>

<p>Given two segments <I>(p<SUB>1</SUB>, p<SUB>2</SUB>)</I> and <I>(q<SUB>1</SUB>, q<SUB>2</SUB>)</I>, they intersect if and only if the orientation of the triplet <I>(p<SUB>1</SUB>, p<SUB>2</SUB>, q<SUB>1</SUB>)</I> is different from the orientation of the triplet <I>(p<SUB>1</SUB>, p<SUB>2</SUB>, q<SUB>2</SUB>)</I> and the orientation of the triplet <I>(q<SUB>1</SUB>, q<SUB>2</SUB>, p<SUB>1</SUB>)</I> is different from the orientation of the triplet <I>(q<SUB>1</SUB>, q<SUB>2</SUB>, p<SUB>2</SUB>)</I>. The first condition means that <I>q<SUB>1</SUB></I> is on one side of the segment <I>(p<SUB>1</SUB>, p<SUB>2</SUB>)</I>, and <I>q<SUB>2</SUB></I> is on the other side. The second condition means that <I>p<SUB>1</SUB></I> is on one side of the segment <I>(q<SUB>1</SUB>, q<SUB>2</SUB>)</I>, and <I>p<SUB>2</SUB></I> is on the other side. Clearly, the segments intersect if and only if both conditions are met, as illustrated in <A HREF="fig2.htm">Figures 2a and 2b</A>.<p>

<h4><FONT COLOR="#000080">Testing for Point Inclusion in a Triangle</FONT></H4>

<p>Given a triangle <I>(v<SUB>1</SUB>, v<SUB>2</SUB>, v<SUB>3</SUB>)</I> and a point <I>p</I>, the test for <I>p</I>'s inclusion in the triangle is explained as follows. If we traverse the points <I>v<SUB>1</SUB></I>, <I>v<SUB>2</SUB></I>, <I>v<SUB>3</SUB></I> and the point is inside, we will always see the point on the same side of the segment we are visiting. If <I>v<SUB>1</SUB></I>, <I>v<SUB>2</SUB></I>, <I>v<SUB>3</SUB></I> are arranged in a counter-clockwise sense, the points inside it are always at the left of the segments. If the point is outside, for at least one of the segments the point will be at the right (see <A HREF="fig3.htm">Figure 3</A>). If the vertices are arranged in a clockwise sense, the reasoning is identical, except that a point that is inside the triangle will always be at the right of the segment we are visiting.</p>
<p>Thus, to determine if the point <I>p</I> is inside the triangle <I>(v<SUB>1</SUB>, v<SUB>2</SUB>, v<SUB>3</SUB>)</I>, we need only obtain the directions of rotation along the triplets <I>(v<SUB>1</SUB>, v<SUB>2</SUB>, p)</I>, <I>(v<SUB>2</SUB>, v<SUB>3</SUB>, p)</I>, and <I>(v<SUB>3</SUB>, v<SUB>1</SUB>, p).</I> The point is inside if and only if the three directions are equal.</p>

<h4><FONT COLOR="#000080">A Class to Represent Points</FONT></H4>

<p>The representation for a point includes a pair of real numbers to store the x and y coordinates of the point (I use <B>double</B>), as well as member functions to read each coordinate (<B>get_x</B> and <B>get_y</B>). I provide the basic arithmetic operations in the form of overloaded operators. The arithmetic operations include addition, subtraction, and multiplication (scalar product). Also, I provide multiplication and division by real numbers in the form of overloaded operators.</p>
<p>The basic arithmetic operations allow you, for example, to obtain a point that is inside a triangle given its vertices:</p>

<pre>
p = (v1 + v2 + v3)/3;
</pre>

<p>Also, an overloaded member function is provided to test for inclusion in a triangle and in a polygon. These functions allow for clear, concise expressions, as shown below:</p>

<pre>
Point p;  Triangle t;  Polygon P;
     
if (p.is_inside (t))  // ...
     
if (p.is_inside (P))  // ...
</pre>

<p>Similarly, I provide a function to test if a point is exactly on a segment. This is determined by checking if the segment endpoints <I>(p<SUB>1</SUB>, p<SUB>2</SUB>)</I> and the point <I>p</I> are collinear, and if the segments <I>p-p<SUB>1</SUB></I> and <I>p-p<SUB>2</SUB></I> have opposite directions (which means that <I>p</I> is between <I>p<SUB>1</SUB></I> and <I>p<SUB>2</SUB></I>).</p>
<p><A HREF="fig4.htm">Figure 4</A> shows the code for the class definition and implementation of class <B>Point</B>.</p>

<h4><FONT COLOR="#000080">A Class to Represent Segments</FONT></H4>

<p>The class <B>Segment</B> contains, as data members, two <B>Point</B> objects that represent a non-oriented segment. (However, most algorithms deal with a <B>Segment</B> as an oriented segment from <I>p1</I> to <I>p2</I>.) I provide no operators for this class, since there are no natural arithmetic operations between segments.</p>
<p>Class <B>Segment</B> includes a member function to test for segment intersection. This member function allows expressions such as the following:</p>

<pre>
Segment s, line;
     
if (s.intersects (line))  // ...
</pre>

<p><A HREF="fig5.htm">Figure 5</A> shows the code for the class interface and implementation of class <B>Segment</B>.</p>
<p>Both the <B>Point</B> and <B>Segment</B> classes provide <B>draw</B> member functions. These member functions are platform dependent. I provide a simplified implementation for a Win32 platform (without scaling or other considerations). If you want to use these tools in an application that requires graphical display, you should provide the implementation for the <B>draw</B> member functions for <B>Point</B> and <B>Segment</B>.</p>

<h4><FONT COLOR="#000080">A Class to Represent Triangles</FONT></H4>

<p>The class <B>Triangle</B> includes three <B>Point</B> objects representing the vertices of the triangle. It provides member functions to compute the area and the orientation. (Class <B>Triangle</B> also provides a private member function to compute the area with sign, which enables other member functions to obtain the area and the orientation of the triangle.)</p>
<p>Since we are never interested in the exact value of the triangle's area (at least not in these types of applications), the member function actually computes twice the area of the triangle, for efficiency reasons. This may seem a little strange, but the reasons for computing twice the area should become clear in the second part of this series.</p>
<p>Class <B>Triangle</B> also provides a member function to test if a point is inside the triangle. This member function allows expressions such as the following:</p>

<pre>
Triangle t;  Point p;
     
if (t.contains (p))  // ...
</pre>

<p>Note that the <B>Point</B> class member function to test for inclusion is equivalent to this <B>Triangle</B> class operation. The <B>Point</B>'s member function is obviously implemented in terms of this <B>Triangle</B> member function (see <A HREF="fig4.htm">Figure 4</A>).</p>
<p>Class <B>Triangle</B> also includes a member function <B>draw</B>. In this case (as with the <B>Polygon</B> class, yet to be presented), the <B>draw</B> function is platform independent, since it is implemented in terms of the <B>Segment</B> class <B>draw</B> member function.</p>
<p><A HREF="fig6.htm">Figure 6</A> shows the code for the class definition and implementation of class <B>Triangle</B>.</p>
<p>None of the above-mentioned classes contains any pointers to dynamically allocated data or any allocated resources. Therefore, I provide no destructors, copy constructors, or overloaded assignment operators for either of these classes.</p>

<h4><FONT COLOR="#000080">A Class to Represent Polygons</FONT></H4>

<p>Representing a polygon requires a circular, doubly-linked list of <B>Point</B>s. The list must be doubly-linked because typical operations on polygons require insertions and removals of points in the sequence. Some of these operations must traverse the sequence in reverse, visiting more than one point in succession. The linked list must be circular because polygons are closed sequences of vertices, and operations on pairs or triplets of consecutive vertices must not be limited by a vertex being the last or the first in the chain.</p>
<p>The implementation of class <B>Polygon</B> uses the STL (Standard Template Library) <B>list</B> container. For convenience of use, I provide an iterator for this class, as the standard containers do. Thus, polygons can be manipulated in the same manner as most of the standard containers, as shown below:</p>

<pre>
Polygon P;
Polygon::iterator current = P.begin();
     
do
{
   // ...
}
while (++current != P.begin());
</pre>

<p>(notice that there is no <B>end</B> member function for the <B>Polygon</B> container, since it is a circular list.)</p>
<p>Also, the typical <B>Polygon</B> operations are similar to their equivalents for the standard containers (e.g., <B>push_back</B>, <B>push_front</B>, <B>insert</B>, <B>remove</B>), which should make polygon manipulation intuitive to C++ programmers. </p>
<p>No destructor, constructors, or assignment operator are required for this class, since the container included as a data member encapsulates those operations.</p>
<p><A HREF="fig7.htm">Figure 7</A> shows the definition of class <B>Polygon</B> and its iterator. Notice that the iterator implementation is based on the <B>list</B> iterator. Its operations are almost a direct map to the operations of the <B>list</B> iterator, except for the <B>++</B> and <B>--</B> operators, since the <B>Polygon</B> is a circular list of points.</p>
<p>In the second part of this series, I will describe several geometric algorithms and polygon operations, most of them implemented as member functions of the class <B>Polygon</B>. I will also present the class implementation of <B>Polygon</B> in the second part of this series.</p>

<h4><FONT COLOR="#000080">Summary</FONT></H4>

<p>In Part 1 of this series, I have introduced the mathematical basis and some fundamental tools used in two-dimensional geometric algorithms. I have also presented part of the implementation of these tools in C++.</p>
<p>These fundamental operations are based on a simple and efficient computation of the orientations of point triplets, based on the properties of the vector product.</p>
<p>As Part 2 of this series will show, many other complex geometric algorithms are based almost exclusively on this operation.</p>

<h4><FONT COLOR="#000080">Bibliography</FONT></H4>

<p>Bjarne Stroustrup. <I>The C++ Programming Language,</I> Third Edition (Addison-Wesley, 1997).</p>
<p>Franco Preparata and Michael I. Shamos. <I>Computational Geometry, An Introduction</I> (Springer-Verlag, 1985).</p>
<p>Avraham A. Melkman. "On-line Construction of the Convex Hull of a Simple Polyline," <I>Information Processing Letters 25</I>, 1987.</p>

<p><i>Carlos Moreno has a Bachelor's Degree in Electronics Engineering and a Master Engineering diploma in Computer and Electrical Engineering. He has ten years' experience in the development of low-level applications, and currently works as an instructor/trainer in C, C++, Object-Oriented Programming, and Visual Basic, and as an independent consultant and software developer. His main interests are digital signal processing, audio and image processing applications, communications, data encryption and compression, and (of course) computer games development. He can be reached at moreno@mochima.com or <B>moreno@cyberglobe.net</B>, or at <B>http://www.mochima.com</B>.</I>

<h4><a href="../../../source/1998/nov98/moreno.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY>
</HTML>
