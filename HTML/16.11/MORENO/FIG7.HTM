<HTML><HEAD>
<TITLE>November 1998/Efficient 2-D Geometric Operations, Part 1/Figure 7</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Figure 7: Header for class Polygon</A></h4>
<pre>
// **********************************************************
//   File: Polygon.h
//   Description: Definition of class Polygon and class 
//                Polygon::iterator (implemented as inlines)
//
//   Author: Carlos Moreno
// **********************************************************

#ifndef __POLYGON_H__
#define __POLYGON_H__

#include "Point.h"
#include &lt;list&gt;

using namespace std;


const bool draw_vertices = true;
const bool no_draw_vertices = false;

class Polygon  
{
public:
        // Geometric and miscelaneous operations
    void draw (bool = no_draw_vertices, int radius = 2) const;

    int orientation () const;
    bool contains (const Point &amp;) const;

    Polygon convex_hull() const;


        // Vertices manipulation
    class iterator;
    class const_iterator;

    iterator begin();
    const_iterator begin() const;
    void push_back (const Point &amp;);
    void push_front (const Point &amp;);
    void insert (const iterator &amp;, const Point &amp;);
    iterator remove (const iterator &amp;);

private:
    list&lt;Point&gt; vertices;


// ********************************************************
//          Definition of class Polygon::iterator
// ********************************************************

public:
    class iterator
    {
    public:
        iterator (const list&lt;Point&gt;::iterator &amp; _i =
                      list&lt;Point&gt;::iterator(), 
                  const list&lt;Point&gt;::iterator &amp; _last =
                      list&lt;Point&gt;::iterator())
            : i(_i), last(_last) {}

        list&lt;Point&gt;::iterator get_i () const
        {
            return i;
        }

        list&lt;Point&gt;::iterator get_last () const
        {
            return last;
        }

        const iterator &amp; operator++ ()
        {
            if (++i == last)
            {
                i++;
            }
            return *this;
        }

        const iterator operator++ (int)
        {
            iterator original = *this;

            if (++i == last)
            {
                i++;
            }
            return original;
        }

        const iterator operator+ (int n) const
        {
            iterator result = *this;

            for (int i = 0; i &lt; n; i++)
            {
                result++;
            }

            return result;
        }

        const iterator &amp; operator-- ()
        {
            if (--i == last)
            {
                i--;
            }
            return *this;
        }

        const iterator operator-- (int)
        {
            iterator original = *this;

            if (--i == last)
            {
                i--;
            }
            return original;
        }

        const iterator operator- (int n) const
        {
            iterator result = *this;

            for (int i = 0; i &lt; n; i++)
            {
                result--;
            }

            return result;
        }

        Point &amp; operator* () const
        {
            return *i;
        }

        bool operator== (const iterator &amp; other) const
        {
            return i == other.i &amp;&amp; last == other.last;
        }

        bool operator!= (const iterator &amp; other) const
        {
            return !(*this == other);
        }

    private:
        list&lt;Point&gt;::iterator i;
        list&lt;Point&gt;::iterator last;
    };


/****************************************************************
  The definition of class Polygon::const_iterator is omited to 
  save magazine space.  It is almost identical to the definition 
  of iterator (with parameters and local variables of type 
  const_iterator instead of iterator), except for a conversion 
  constructor from iterator to const_iterator.

  The complete version of this file can be downloaded from the 
  Journal's web site.
 ****************************************************************/

};

#endif
/* End of File */
</pre>
</BODY>
</HTML>
