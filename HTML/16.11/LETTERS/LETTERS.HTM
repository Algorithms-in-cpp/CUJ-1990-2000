<HTML>
     
     <HEAD>
<TITLE>November 1998/We Have Mail</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocnov.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Departments</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">We Have Mail</FONT></H2>

<HR>

<BLOCKQUOTE>

<p><I>Letters to the editor may be sent via email to </I>cujed@mfi.com<I>, or via the postal service to Letters to the Editor, </I>C/C++ Users Journal<I>, 1601 W. 23rd St., Ste 200, Lawrence, KS 66046-2700.</I></p>

<HR>

<p>Dear <I>CUJ</I>,</p>
<p>Editor,</p>
<p>Just a quick comment on Dan Saks' column on Classes vs. Namespaces in the July 1998 issue &#151; he mentions there aren't good references on how to use namespaces. Sure there are, only historically it's been called "named common!"</p>
<p>Mike Lally<br>
North Billerica, MA</p>
<p><I>Uh, I think namespaces in C++ have a bit more structure. &#151; pjp</I><p>

<HR>

<p>Dear <I>CUJ:</I></p>

<p>I read Warren Ward's article on stream encryption with great interest. I have used various encryption algorithms before and always wanted a simple "good enough" version. As there was no email address provided with the article, I have to use the letters forum. (Please encourage writers to include contact info.)</p>
<p>As a hardware (and software) engineer, I have used countless shift registers. However, Mr. Ward's code does not seem to implement a real shift register. (In the following pseudo code, LSB/MSB means Least/Most significant bit.) From Mr. Ward's code:</p>

<pre>
if LSB==1 then
    LSR = (LSR ^ (mask &gt;&gt;1))| MSB
        { LSR is not shifted! }
else
    LSR = (LSR &gt;&gt;1) &amp; ~MSB
</pre>

<p>This is different from the random (noise) generators I have used:</p>

<pre>
if LSB==0 then
    LSR = (LSR&gt;&gt;1) ^ mask
else
    LSR = (LSR&gt;&gt;1)
</pre>

<p>Mr. Ward's code only shifts the data if the LSB is zero. The second is from hardware and software applications that I have obtained from several sources. Note, the mask must include the MSB bit to cause the feedback of the LSB to the MSB (optimizes out separate AND/OR feedback.)</p>
<p>The second example also does not have the "all zero" problem. The feedback is inverted; a zero will feedback ones. Also, bit length is set by selecting the highest bit in the mask.</p>
<p>Maybe the code given is not what he intended:</p>

<pre>
m_LFSR_A = (
    (m_LFSR_A ^ ( m_Mask_A &gt;&gt; 1 )) |
        m_Rot1_A
    );
</pre>

<p>Perhaps it should have been:</p>

<pre>
m_LFSR_A =  (
    (( m_LFSR_A ^  m_Mask_A ) &gt;&gt; 1 )) |
        m_Rot1_A
    );
</pre>

<p>This code is repeated for all three shift registers.</p>
<p>I'm curious as to Mr. Ward's response on the above variations. Thanks to Mr. Ward and <I>CUJ</I> for providing great information in your publication (of the dozen or so magazines I get a month, this is the only one I pay for :-)</p>
<p>Best regards,</p>
<p>Scott Henion<br>
shenion@shdesigns.atl.ga.us</p>
<p><I>Warren Ward replies:</p>
<p>Dear Scott,</p>
<p>The folks at </I>CUJ<I> forwarded your comments to me, and I'd like to respond.</p>
<p>(1) "only shifts the data if the LSB is zero"</p>
<p>I can understand how the implementation of the shift registers in the article may look a little odd to you. When I first found the linear feedback shift register (LFSR) technique ("Pseudo-Random Sequence Generator for 32-Bit CPU's," Bruce Schneier, </I>Dr. Dobb's Journal<I>, February 1992), I could see how the physical shift register was modeled in code. This was very similar to the way that you showed shift registers in your letter.</p>
<p>For example, to implement an LFSR, you need to grab each of the bits equivalent to one bits in the mask. They must then be XORed with each other to get the new bit to feed into the left side of the shift register (the MSB) when the shift register is clocked. In a conventional CPU, there is no one-step way to perform this XOR operation. Each one bit in the mask must be XORed in a separate step, and the results accumulated until all the mask bits have been processed. An example of that approach is as follows:</I></p>

<pre>
int Cryptor::Get_Random_Bit()
{
  // LFSR1 is an unsigned long
  // integer, property of the Cryptor class.
  // The LFSR mask (tap sequence)
  // covers these bits:
  //      32, 7, 5, 3, 2, 1
  LFSR1 =
    (
     (
      (
       (LFSR1 &gt;&gt; 31) // Get 32nd bit

        ^(LFSR1 &gt;&gt; 6) // XOR it with 7th bit
          ^(LFSR1 &gt;&gt; 5) // XOR with 6th bit
            ^(LFSR1 &gt;&gt; 1) // XOR with 2nd bit
      ) &amp;&amp;
       ( 0x00000001 ) // Retain only the 1st bit
     ) &lt;&lt; 31 // Move result to the 32nd bit position
    )
    |
    ( LFSR1 &gt;&gt; 1 ); // OR the new MSB
                    // with the register
                    // shifted right one bit.
    // Return 1st bit
    return ( LFSR1 &amp; 0x00000001 );
}
</pre>

<p><I>This code works just like a conventional hardware shift register in what the textbooks call the Fibonacci configuration. The only problem with implementing this approach in code is the large number of operations it uses to get a single bit: seven shifts, five XORs, an AND, and an OR.</p>
<p>I looked for approaches that were more efficient when developing this encryption technique for our internal use. Some years after reading the above article, I ran across a modification to the feedback scheme that would remove most of the shift operations and allow all the XOR operations to occur in a single step. The code no longer models the classic Fibonacci configuration for the shift registers, but rather a Galois configuration.</p>
<p>There's a good discussion of both techniques in Schneier's Applied Cryptography (2nd edition, p. 369 ff.). I'll quote briefly from his description of the Galois configuration shift register: "Instead of using the bits in the tap sequence to generate the new left-most bit, each bit in the tap sequence is XORed with the output of the generator and replaced; then the output of the generator becomes the new left-most bit." This form of operation is quite different from the standard hardware or software shift register, and that is why the code in the article looks different from the examples you quoted. It is quite a bit faster on a conventional CPU, though, and met my goals of efficiency with decent cryptographic qualities.</p>
<p>(2) "the all-zero problem"</p>
<p>As far as I can tell, all LFSRs have what you called "the all zero problem" &#151; not really a problem, just the nature of the the beast. I have seen several set up with inverted logic to the code I used, but the developers warn of "the all ones problem:" if the LFSR is loaded with ones, it will never produce a zero bit for output. For example, check the technical notes at Altera for the following warning regarding their hardware LFSR: "A state consisting of only ones is illegal; if the counter contains all ones, it cannot leave that state unless the counter is cleared or another value is loaded." See:</I></p>

<pre>
http://www.altera.com/html/programs/amppmf/linear.html.
</pre>

<p><I>Another way to put it is that LFSR's have one less valid state than the total number of states allowed by the size of the LFSR. For example, a four-bit LFSR has 2^4 (16) states. But only (2^4 - 1) of them are valid: either the all-zeroes or all-ones state will be invalid, depending on the design of the LFSR. This rule of thumb does not generally apply to other types of shift registers, but it does to the LFSRs I've seen.</p>
<p>(3) "maybe the code given is not what he intended"</p>
<p>This was an excellent point. After I looked at your letter, I double-checked my sources, and contacted Bruce Schneier for additional information. Here's a very shortened version of my questions and his response:</p>
<p>Warren Ward: The line in question from my copy of the first edition (page 356 of the printing with "10 9 8 7 6 5 4" on the details page) is:</I><p>

<pre>
ShiftRegister = ( ShiftRegister
    ^ ( mask &gt;&gt; 1 ) ) | 0x80000000;
</pre>

<p><I>The second line of code on page 379 of the second edition reads:</I></p>

<pre>
ShiftRegister = ( ( ShiftRegister
    ^ mask &gt;&gt; 1 ) | ...
</pre>

<p><I>I wonder if you could clarify this for me and let me know whether you would interpret the line as:</I></p>

<pre>
(A) ShiftRegister =
    (ShiftRegister ^ (mask &gt;&gt; 1)) ...
</pre>

<p><I>or:</I></p>

<pre>
(B) ShiftRegister =
    ((ShiftRegister ^ mask) &gt;&gt; 1) ...
</pre>

<p><I>Bruce Schnier: You're right. B is correct.</p>
<p>In brief, both the first and the second editions of Applied Cryptography had errors (different ones) in this statement, and the book's most recent errata sheet also had an error describing the error. As you can see by Bruce's reply, your interpretation is correct. I will be contacting </I>C/C++ Users Journal<I> with a correction of the code in my article [We have now updated our ftp site with Warren Ward's corrected version &#151; mb].</p>
<p>I hope I speak for Mr. Schneier as well as for myself in thanking you very much for your careful review of the code, leading to the cleanup of this statement. It's a little disconcerting to find a hole in a security feature, but far better to find and correct it than to let it stand. I suspect that, for our internal company use, even the flawed code is adequate for the purposes we put it to. But for other readers needing encryption, the corrections will be very welcome.</p>
<p>Yours sincerely,</p>
<p>Warren Ward<br>
VP Research and Development<br>
Winterforce Laboratories<br>
Copyright (c) 1998 by Warren Ward. All rights reserved.</I></p>

<HR>

<p>Dear <I>CUJ,</I></p>
<p>I noticed two problems in your September letters column. Chuck Allison made no comment on JP's incorrect coding of the singleton pattern. The relevant code was:</p>

<pre>
class UtConvertTime {
public:
     static UtConvertTime *
         UtTimeInstance();
private:
     UtConvertTime();
     static UtConvertTime *
         itsInstance;
};
</pre>

<p>First note that the dynamic instance of <B>UtConvertTime</B> is never cleaned up (I also note that <B>UtTimeInstance</B> relies on zero initialisation of class statics). Second the writer (in excellent company) has forgotten to declare a private copy constructor. Unfortunately the grammar of C++ allows (I believe it requires, despite the probable undefined behaviour) compilation of:</p>

<pre>
UtConvertTime utc = utc;
</pre>

<p>which is one reason that I strongly exhort programmers to use function-style initialisation and not the C assignment style. In this case, as you can create an instance, it can be copied even though you clearly do not intend that. It seems to me that the following is a better implementation of the singleton pattern in this instance:</p>

<pre>
class altUTC {
public:
    static &amp; altUTC (){
        static altUTC instance;
        return instance;
    }
    // public functionality
private:
    altUTC();
    altUTC(altUTC const &amp;);
    // data
};
</pre>

<p>Note that if you never want a class instantiated you only need to declare a private copy constructor but if you want to restrict instantiation to the scope of the class and its friends you must declare a private copy constructor as well as at least one other. Note that simply declaring a private destructor may not meet all your requirements.</p>
<p>The second problem is in the letter from Sol Foster. I largely agree with his sentiments, which is why I was surprised to see him pass an <B>auto_ptr&lt;&gt;</B> by value. Because of the ownership semantics of <B>auto_ptr&lt;&gt;</B> it should hardly ever be passed by value as the results will almost always be catastrophic. Plain pointers are passed by value, but <B>auto_ptr&lt;&gt;</B> should be passed by reference (well, I guess the diehard "pass by pointer" brigade will want to pass a pointer to an <B>auto_ptr&lt;&gt;</B>. :-)</p>
<p>Finally, may I commend you on the excellent standards you are setting and congratulate the readers on having the good sense to subscribe. I am continually baffled by the number of programmers who never read anything to help them improve and keep up to date. I bet you would not go to a doctor who never read a medical journal, so why do people employ programmers who proudly declare that they never need to read books or magazines on programming?</p>
<p>Francis Glassborow<br>
Chair of Association of C &amp; C++ Users<br>
Oxford UK</p>
<p>All opinions are mine and do not represent those of any organisation.</p>

<p><I>A failure to respond to letters should generally be laid at my door, not the author's. Francis, as usual, supplies valuable information on how best to code in C++. &#151; pjp</I></p>
<p><I>In fairness to Chuck, what I asked him to comment on was the appropriateness of the Singleton pattern to the reader's problem, not the quality of the implementation. I think I caught him off-guard. &#151; mb</I></p>

<HR>

<p>Marc:</p>
<p>I'm sure it was unintended, but your <I>CUJ</I> September 1998 editorial may mislead some readers on the real (that is, <I>my</I>) history of computing and its usually accepted terminology.</p>
<p>Jacquard's loom inspired Babbage, Hollerith, fairground-organ and player-piano designers with the notion of controlling diverse mechanisms via perforated tapes, cards, rolls, and sheets. But the term "stored program" is usually reserved for the breakthough in digital computing circa the mid 1940s, long before ICs (or indeed any microelectronic devices) were invented. The key element in "stored program" machines, regardless of the underlying storage technology, was that programs and data were stored together in the same (usually binary) format, and that instruction sequences could be <I>modified</I> automatically according to intermediate results and IF/THEN tests.</p>
<p>Babbage and Ada Lovelace dreamed of such flexibility but couldn't implement it successfully with their available cogs! The first practical (i.e., reliable for serious daily use) stored-program computer was Maurice Wilkes' EDSAC I (Cambridge University, UK) derived from the work of Eckert, Mauchly, von Neumann, et al. Note that the earlier Colossus and ENIAC were not true stored-program machines, and that the contemporaneous Ferranti Mk I at Manchester was a mere lab benchtop breadboard with a two-minute MTBF (if you were lucky).</p>
<p>The nested procedural modules you and I love grew out of EDSAC's relocatable subroutines. Yes, relative addressing in 1949! To be honest, programming in machine language was not a load of fun, even when we moved to a simple mnemonic ur-assembler. BTW, Warwick University use a Mac-based EDSAC emulator to show their CS students that there's more to programming than draggin' and droppin' iconic components.</p>
<p>PAX etc.,</p>
<p>Stan Kelly-Bootle</p>
<p><I>Stan, thanks for writing. No one can bundle corrections and factoids together in a single (binary?) format the way you can. "Stored program" was a poor choice of words on my part, seeing as how it resulted in a namespace collision. What I meant to describe was simply a sequence of instructions. For my purposes, it doesn't matter whether those instructions reside with data, or whether flow of control can be modified as a result of tests. The essential characteristic of my "stored program" is that each instruction executes independently of the others, and is identifiable within its surroundings, say, as a pattern of bits or holes in a piece of paper. I contrast this with a logic circuit composed of NAND gates, flip flops, etc., in which the "program" is expressed purely as interconnections. It may do the same thing as my "stored program," but you can't find anything in the logic circuit resembling an instruction. (There is another interesting can of worms I did not open in my editorial; there are ICs that don't have instruction sets but do have programmable interconnections. Maybe some other time...) &#151; mb</p>
<p><I>Golly, letters from two of the most erudite (and outspoken) Brits in our field, all in one issue! Once again, I really have to take the heat for this one, though. I caught Marc Briand's lapse when reviewing his editorial, but let it pass. (He was on a roll.) Should have known that Kelly-Bootle wouldn't let it get by. &#151; pjp o</I></p>

</BLOCKQUOTE>
</BODY>
</HTML>
