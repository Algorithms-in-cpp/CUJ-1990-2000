<HTML><HEAD>
<TITLE>November 1998/Skip Lists in C++/Listing 4</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 4:	Template class SkipList</A></h4>
<pre>
#ifndef SKIP_LIST
#define SKIP_LIST
#include &lt;iostream.h&gt;
#include &lt;fstream.h&gt;
#include "SkipNode.h"
#include "RandomHeight.h"

template &lt;class Key, class Obj&gt;
  class SkipList
  {
  public:
    SkipList(float,int,Key*);
    ~SkipList();

    bool insert(Key*, Obj*);
    bool remove(Key*);
    Obj* retrieve(Key*);
    void dump(ofstream&amp;);

  private:
    SkipNode&lt;Key,Obj&gt;* head;
    SkipNode&lt;Key,Obj&gt;* tail;
    float probability;
    int maxHeight;
    int curHeight;
    RandomHeight* randGen;
  };

template &lt;class Key, class Obj&gt;
  SkipList&lt;Key,Obj&gt;::SkipList(float p, int m, Key* k)
  {
    curHeight = 1;
    maxHeight = m;
    probability = p;
    randGen = new RandomHeight(m,p);

    // Create head and tail and attach them
    head = new SkipNode&lt;Key,Obj&gt;(maxHeight);
    tail = new SkipNode&lt;Key,Obj&gt;(k, (Obj*) NULL, maxHeight);
    for ( int x = 1; x &lt;= maxHeight; x++ )
        head-&gt;fwdNodes[x] = tail;
  }

template &lt;class Key, class Obj&gt;
  SkipList&lt;Key,Obj&gt;::~SkipList()
  {
    // Walk 0 level nodes and delete all
    SkipNode&lt;Key,Obj&gt;* tmp;
    SkipNode&lt;Key,Obj&gt;* nxt;
    tmp = head;
    while ( tmp )
    {
      nxt = tmp-&gt;fwdNodes[1];
      delete tmp;
      tmp = nxt;
    }
  }

template &lt;class Key, class Obj&gt;
  bool SkipList&lt;Key,Obj&gt;::insert(Key* k, Obj* o)
  {
    int lvl = 0, h = 0;
    SkipNode&lt;Key,Obj&gt;** updateVec =
      new SkipNode&lt;Key,Obj&gt;* [maxHeight+1];
    SkipNode&lt;Key,Obj&gt;* tmp = head;
    Key* cmpKey;

    // Figure out where new node goes
    for ( h = curHeight; h &gt;= 1; h-- )
    {
      cmpKey = tmp-&gt;fwdNodes[h]-&gt;getKey();
      while ( *cmpKey &lt; *k )
      {
        tmp = tmp-&gt;fwdNodes[h];
        cmpKey = tmp-&gt;fwdNodes[h]-&gt;getKey();
      }
      updateVec[h] = tmp;
    }
    tmp = tmp-&gt;fwdNodes[1];
    cmpKey = tmp-&gt;getKey();

    // If dup, return false
    if ( *cmpKey == *k )
    {
      return false;
    }
    else
    {
      // Perform an insert
      lvl = randGen-&gt;newLevel();
      if ( lvl &gt; curHeight )
      {
        for ( int i = curHeight + 1; i &lt;= lvl; i++ )
          updateVec[i] = head;
        curHeight = lvl;
      }
      // Insert new element
      tmp = new SkipNode&lt;Key,Obj&gt;(k, o, lvl);
      for ( int i = 1; i &lt;= lvl; i++ )
      {
        tmp-&gt;fwdNodes[i] = updateVec[i]-&gt;fwdNodes[i];
        updateVec[i]-&gt;fwdNodes[i] = tmp;
      }
    }
    return true;
  }


template &lt;class Key, class Obj&gt;
  bool SkipList&lt;Key,Obj&gt;::remove(Key* k)
  {
    SkipNode&lt;Key,Obj&gt;** updateVec =
      new SkipNode&lt;Key,Obj&gt;* [maxHeight+1];
    SkipNode&lt;Key,Obj&gt;* tmp = head;
    Key* cmpKey;

     // Find the node we need to delete
    for ( int h = curHeight; h &gt; 0; h-- )
    {
      cmpKey = tmp-&gt;fwdNodes[h]-&gt;getKey();
      while ( *cmpKey &lt; *k )
      {
        tmp = tmp-&gt;fwdNodes[h];
        cmpKey = tmp-&gt;fwdNodes[h]-&gt;getKey();
      }
      updateVec[h] = tmp;
    }
    tmp = tmp-&gt;fwdNodes[1];
    cmpKey = tmp-&gt;getKey();

    if ( *cmpKey == *k )
    {
      for ( int i = 1; i &lt;= curHeight; i++ )
      {
        if ( updateVec[i]-&gt;fwdNodes[i] != tmp ) 
          break;
        updateVec[i]-&gt;fwdNodes[i] = tmp-&gt;fwdNodes[i];
      }
      delete tmp;
      while ( ( curHeight &gt; 1 ) &amp;&amp;
            ( ( head-&gt;fwdNodes[curHeight]-&gt;getKey()
                == tail-&gt;getKey() ) ) )
        curHeight--;
      return true;
    }
    else
    {
      return false;
    }
  }

template &lt;class Key, class Obj&gt;
  Obj* SkipList&lt;Key,Obj&gt;::retrieve(Key* k)
  {
    int h = 0;
    SkipNode&lt;Key,Obj&gt;** updateVec =
      new SkipNode&lt;Key,Obj&gt;* [maxHeight+1];
    SkipNode&lt;Key,Obj&gt;* tmp = head;
    Key* cmpKey;

    // Find the key and return the node
    for ( h = curHeight; h &gt;= 1; h-- )
    {
      cmpKey = tmp-&gt;fwdNodes[h]-&gt;getKey();
      while ( *cmpKey &lt; *k )
      {
        tmp = tmp-&gt;fwdNodes[h];
        cmpKey = tmp-&gt;fwdNodes[h]-&gt;getKey();
      }
      updateVec[h] = tmp;
    }
    tmp = tmp-&gt;fwdNodes[1];
    cmpKey = tmp-&gt;getKey();
    if ( *cmpKey == *k )
      return tmp-&gt;getObj();
    else
      return (SkipNode&lt;Key,Obj&gt;*) NULL;
  }

template &lt;class Key, class Obj&gt;
  void SkipList&lt;Key,Obj&gt;::dump(ofstream&amp; of)
  {
    SkipNode&lt;Key,Obj&gt;* tmp;

    tmp = head;
    while ( tmp != tail )
    {
      if ( tmp == head )
        of &lt;&lt; "There's the head node!" &lt;&lt; endl &lt;&lt; flush;
      else
        // Your key class must support "&lt;&lt;"
        of &lt;&lt; "Next node holds key: " &lt;&lt; tmp-&gt;getKey() &lt;&lt; endl
           &lt;&lt; flush;
      tmp = tmp-&gt;fwdNodes[1];
    }
    of &lt;&lt; "There's the tail node!" &lt;&lt; endl &lt;&lt; flush;
  }

#endif //SKIP_LIST

/* End of File */
</pre>
</BODY>
</HTML>
