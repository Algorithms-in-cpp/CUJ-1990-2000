<HTML><HEAD>
<TITLE>November 1998/Skip Lists in C++/Listing 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 3:	Template class SkipNode</A></h4>
<pre>
#ifndef SKIP_LIST_NODE
#define SKIP_LIST_NODE

struct Product
{
  float cost;
  int   quantity;
  int   location;
};

typedef Product productData;

template &lt;class Key, class Obj&gt;
  class SkipList;

template &lt;class Key, class Obj&gt;
  class SkipNode
  {
  public:
    SkipNode(Key*, Obj*, int);
    SkipNode(int);
    ~SkipNode();

    Key* getKey(void);
    Obj* getObj(void);
    int   getHgt(void);
    SkipNode** fwdNodes;

  private:
    int nodeHeight;
    Key* key;
    Obj* obj;
  };

template &lt;class Key, class Obj&gt;
  SkipNode&lt;Key,Obj&gt;::~SkipNode()
  {
    delete key;
    delete obj;
    delete [] fwdNodes;
  }

template &lt;class Key, class Obj&gt;
  SkipNode&lt;Key,Obj&gt;::SkipNode(Key* k, 
    Obj* o, int h)
  {
    nodeHeight = h;
    key = k;
    obj = o;
    fwdNodes =
  new SkipNode&lt;Key,Obj&gt;* [h+1];
    for ( int x = 1; x &lt;= nodeHeight; x++ )
      fwdNodes[x] =
  (SkipNode&lt;Key,Obj&gt;*) NULL;
  }

template &lt;class Key, class Obj&gt;
  SkipNode&lt;Key,Obj&gt;::SkipNode(int h)
  {
    nodeHeight = h;
    key = (Key*) NULL;
    obj = (Obj*) NULL;
    fwdNodes =
  new SkipNode&lt;Key,Obj&gt;* [h+1];
    for ( int x = 1; x &lt;= nodeHeight; x++ )
      fwdNodes[x] =
  (SkipNode&lt;Key,Obj&gt;*) NULL;
  }


template &lt;class Key, class Obj&gt;
  Key* SkipNode&lt;Key,Obj&gt;::getKey(void)
  {
    return key;
  }

template &lt;class Key, class Obj&gt;
  Obj* SkipNode&lt;Key,Obj&gt;::getObj(void)
  {
    return obj;
  }

template &lt;class Key, class Obj&gt;
  int SkipNode&lt;Key,Obj&gt;::getHgt(void)
  {
    return nodeHeight;
  }

#endif //SKIP_LIST_NODE

/* End of File */
</pre>
</BODY>
</HTML>
