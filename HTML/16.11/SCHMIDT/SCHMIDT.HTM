<HTML>
     
     <HEAD>
<TITLE>November 1998/The Learning C/C++urve</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocnov.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">The Learning C/C++urve: Second Contact</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Bobby Schmidt</FONT></H3>

<BLOCKQUOTE>

<p>Bobby concludes his stint as C/C++urve author by emptying his mailbag. Look for him in a new guise next month.</p>
</BLOCKQUOTE>
<HR>
<BLOCKQUOTE>
<B><I>Copyright &copy; 1998 Robert H. Schmidt</I></B>

<p>[Since Bobby will be taking over "Questions and Answers" next month, he'll be needing a few questions to answer. Send your C/C++ questions to cujqa@mfi.com. &#151; mb]</p>

<p>Well, this is it: my final Learning C/C++urve. Next month I'll start my new Q&amp;A column, the name of which I still haven't picked. A minor detail, I know, but I've been distracted with moving. (And as it turns out, I'm not moving near Dan in Ohio, but moving instead down the road to Redmond.)</p>

<h4><FONT COLOR="#000080">No Scott Meyers This Month</FONT></H4>

<p>Scott Meyers has apparently lost his email privileges, since I've received no spam from him in weeks. As a result, his regular column feature does not appear this month.</p>

<h4><FONT COLOR="#000080">Field Width</FONT></H4>

<p>No, this is not about how big your yard is. "Field width" describes situations like</p>

<pre>
/* yields "&lt;    x&gt;" */
printf("&lt;%5c&gt;", 'x');
</pre>

<p>In this example, the field width is 5. A variation is</p>

<pre>
printf("&lt;%*c&gt;", 5, 'x');
</pre>

<p>or the more useful</p>

<pre>
printf("&lt;%*c&gt;", n, 'x');
</pre>

<p>where <B>n</B> must have type <B>int</B>.</p>
<p>In a recent project I had cause to make <B>n</B> quite large (in the thousands). Unfortunately, my Metrowerks library appeared to have a bug: if I made <B>n</B> too big, the <B>printf</B> would instead write</p>

<pre>
&lt;%*c&gt;
</pre>

<p>That is, it would interpret the format string literally as text. After some trial and error, I found the cutoff point to be <B>n = 509</B>.</p>
<p>A different example makes this more clear:</p>

<pre>
int i;
i = printf("%509c", 'x'); /* i = 509 */
i = printf("%510c", 'x'); /* i = 5 */
</pre>

<p><B>printf</B> returns the number of characters written. As these examples show, the second call interprets the format as literal text.</p>

<h4><FONT COLOR="#000080">Mystery Solved</FONT></H4>

<p>Metrowerks provides me with Mac OS compilers gratis, so I reckon the least I can do is submit suggestions and bug reports. Accordingly, I filled out the email form and sent in my bug, figuring they'd file it away as a low-priority nuisance.</p>
<p>I was wrong. Instead I received a lovely e-missive from Diligent Reader Vicki Scott, self-proclaimed "Director of Engineering, Libraries and Frameworks" for Metrowerks. In her letter, Vicki confessed:</p>
<p><I>I love your column and read it (almost) religiously &#151; so I feel honored to have a bug report from you!</I> <a href="#1">[1]</a></p>
<p>She went on to hypothesize about the origins of this 509-character limit, agreed it should be documented, and had one of her engineers (Michael Marcotty) investigate. At the end she gave me other contacts within the company, should I ever again have any concerns about the runtime libraries.</p>
<p>Michael called me a couple of days later to this talk over. After some research, he found this within the ANSI C89 Standard discussing <B>fprintf</B> (section 7.9.6.1):</p>

<BLOCKQUOTE>
<p>The minimum value for the maximum number of characters produced by any single conversion shall be 509.</p>
</BLOCKQUOTE>

<p>Mystery solved! I had never picked up on this limit, and for some reason didn't find it in my research before sending in the report. As Michael also found, the C9X Standard ups the ante (section 7.13.6.1):</p>

<BLOCKQUOTE>
<p>The minimum value for the maximum number of characters produced by any single conversion shall be 4095.</p>
</BLOCKQUOTE>

<p>(I'll note for completeness that if the C++ Standard has a similar limit, I sure can't find it.)</p>

<h4><FONT COLOR="#000080">Above and Beyond</FONT></H4>

<p>We in the computing press often presume the industry owes us special attention; yet in all honesty, I sent this report to Metrowerks purely as a user of their products, nothing more. I expected, at best, a "thanks for the bug report" response from their technical support. I did not expect an Engineering Director to take such interest, let alone for one of her developers to call me and then do independent research.</p>
<p>Metrowerks isn't perfect &#151; otherwise, they'd have no need of bug reports at all &#151; but I'm gratified to see at least one group in at least one company cares enough to follow through on this customer's issue, without any provocation.</p>

<h4><FONT COLOR="#000080">private = protected?</FONT></H4>

<p>Stan Kelly-Bootle forwarded me email suggesting that Microsoft's Visual C++ "lets derived classes access base class private members." How this access comes about he didn't say; I tried a small example on MSVC, but couldn't get <B>private</B> to work this way.</p>
<p>If you know the real scoop here, please let me know too. As much as I carp on Microsoft, I don't want to believe their compilers actually allow this.</p>

<h4><FONT COLOR="#000080">C++ Multithreading</FONT></H4>

<p>Be careful what you wish for... In my August column I asked readers for their take on threads in C++. Of the replies I received, I want to briefly note two.</p>
<p>Andrei Alexandrescu of Micro Modeling Associates sent me his proposed Java-ish synchronization primitives for C++. As Andrei wrote in his email:</p>
<p><I>It's true that C++ wasn't designed for multithreading. But it's equally true that C++ is a broad language and has lots of features that library writers can use in order to accomplish certain behaviors. And I think that having the right library in hand, you can multithread even better than in Java or Ada.</p>
<p>...Let me attach to this message some simple synchronization pseudo-keywords I've put in place. They enable C++ programmers to use Java-like syntax. The library is just a first shot. It's not protected to the issue brought by Mr. Simeonov (static variables in MT environments), but certainly this is not a big issue as simple workarounds can be done (such as including a static plain </I><B>bool</B><I> variable and calling a routine that takes care not to initialize things twice).</I></p>
<p>If you are interested in following up with Andrei, you can contact him at <B>&lt;mailto:AlexandrescuA@MICROMODELING.COM&gt;</B>.</p>
<p>Mike MacFaden of Cabletron Systems, Inc., pointed me to a site <a href="#2">[2]</a> describing "Design Patterns for Concurrent, Parallel, and Distributed Systems." In his mail Mike notes</p>
<p><I>[W]hile in principle [I] agree with your Reflection on C++/MT, I think some good work has been done to make C++/MT it "a lot easier" to work with than C... [Y]ou might want to review the double-checked pattern for initializing file scope variables and show this to your readers in addition to Simeon's template.</I></p>
<p>I haven't made time to investigate the solutions proposed by either reader, but hope to once I'm settled in from moving.</p>

<h4><FONT COLOR="#000080">Implicit Casts</FONT></H4>

<p>(I first saw the germ of this idea months ago, either on Usenet or some Usenet-recommended website I can no longer recall.)</p>
<p>Last month I briefly mentioned the implicit conversion between string literal arrays and <B>char *</B> in C++.</p>

<pre>
char *p = "char *p"; // OK
</pre>

<p>This is one of the many implicit conversions or casts that C++ makes on your behalf, whether you want them or not. Because these conversions are silent, you might not always be aware they are happening. For built-in types, or for classes you don't write, there's nothing you can really do to prevent the conversions &#151; but you can make them more apparent.</p>
<p>The most obvious solution is a traditional C-cast:</p>

<pre>
char *p = (char *) "char *p";
</pre>

<p>This makes clear the conversion between "array of <B>const char</B>" and <B>char *</B>. Unfortunately, it also implies that, were the cast not present, the initialization would not work. Typically we put casts in because our code would not compile without them. To put in a cast that's actually redundant is confusing and probably misleading.</p>
<p>What we really need is a standard way to say "FYI, here's a conversion that happens automatically." An unaesthetic method that works in C or C++ is</p>

<pre>
#define IMPLICIT_CAST(To, From)\
    From
     
char *p = IMPLICIT_CAST(char *, "char *p");
</pre>

<p>The macro's <B>To</B> argument (<B>char *</B> here) is an editorial for the user, and does not factor into the generated code. By the time the macro expansion dust settles, this code is identical to the original</p>

<pre>
char *p = "char *p";
</pre>

<p>A slightly more elegant implementation is</p>

<pre>
#define IMPLICIT_CAST(To)
     
char *p = IMPLICIT_CAST(char *) "char *p";
</pre>

<p>Now the macro nets out to nothing at all, as if it were just a comment.</p>

<h4><FONT COLOR="#000080">Cast Templates</FONT></H4>

<p>For all its utility, <B>IMPLICIT_CAST</B> is still a macro, and still looks like the kludge it is. In C, you can't do much better, but C++ offers hope. For inspiration, consider the form of the C++ new-style casts:</p>

<pre>
const_cast&lt;T&gt;(x);
</pre>

<p>Does this form look at all familiar? Why yes, it looks just like... a call to a template function! It's as if <B>const_cast</B> were really a template declared as something like</p>

<pre>
template &lt;class To, class From&gt;
To const_cast(From const &amp;);
</pre>

<p>We can follow this same pattern to make a new pseudo-cast called <B>implicit_cast</B>, replacing our macro <B>IMPLICIT_CAST</B> with <a href="#3">[3]</a>:</p>

<pre>
template &lt;class To, class From&gt;
inline To implicit_cast(From const &amp;x)
    {
    return x;
    }
</pre>

<p>For C++, I find this an elegant and efficient solution. The generated code should be the same with or without the <B>implicit_cast</B> call. Further, this code looks consistent with other new-style casts, and is much more self-documenting than the cast-free alternative.</p>
<p>You can extend this idea to other sorts of casts and conversions:</p>

<pre>
template &lt;class T&gt;
inline T sign_cast(unsigned);
     
int i = sign_cast&lt;int&gt;(123U);
</pre>

<p>While this may seem a useless extension to existing cast technology, consider the specialization</p>

<pre>
inline int sign_cast(unsigned x)
    {
    if (x &gt; INT_MAX)
        throw std::domain_error;
    return x;
    }
</pre>

<p>If the unsigned argument can't fit into a collateral signed object, the pseudo-cast throws an exception (rather than engage in some silent conversion).</p>
<p>I've heard that <B>implicit_cast</B> was considered for inclusion in Standard C++, but it was proposed too late. This is no great hardship, since <B>implicit_cast</B> can be easily implemented in a library, as I've shown here.</p>

<h4><FONT COLOR="#000080">qsort Redux</FONT></H4>

<p>Last month I discussed some bizarre error messages I got from both the Metrowerks and Microsoft compilers. The trouble came when I called <B>qsort</B> with a class member as the comparison function. I left you with</p>

<pre>
class T
    {
public:
    void f();
private:
    int
compare(void const *, void const *);
    };
     
void T::f()
    {
    qsort(NULL, 0, 0, compare); // error
    }
</pre>

<p>and MSVC complaining</p>

<pre>
cannot convert parameter 4 from
   'int (const void *, const void *)'
</pre>
     
<p>to</p>

<pre>
   'int (*)(const void *, const void *)'
</pre>

<p>I also asked you to consider</p>

<pre>
qsort(NULL, 0, 0, &amp;compare);
</pre>

<p>which would appear to fix the MSVC error message, by making sure the fourth parameter to <B>qsort</B> is really a function pointer.</p>
<p>Fortunately, the original error message goes away; unfortunately, a new message takes its place:</p>

<pre>
'&amp;' : illegal operation on
      bound member function expression
</pre>

<p>Time to drop the other shoe. All the problems this month and last stem from a subtle distinction: while <B>qsort</B> is expecting a pointer to a function of a certain signature, and <B>T::compare</B> is a function that appears to have the correct signature, the two can never blend together. Why? Because <B>T::compare</B> doesn't convert into a real function pointer:</p>

<pre>
typedef int (*fp)(void const *, void const void *);
fp p = T::compare; // error
</pre>

<p>Instead, <B>T::compare</B> converts to a different kind of pointer, what the C++ Standard calls a pointer-to-member:</p>

<pre>
typedef int (T::*fp)(void const *, void const *);
fp p = T::compare; // OK
</pre>

<p>Pointers-to-members are hybrids between real pointers and class/struct offsets, with their own variations on normal pointer syntax (witness the <B>T::*</B> instead of the normal <B>*</B> above). I actually have a real reader question that involves pointers-to-members, which I'll publish within the first few installments of my Q&amp;A column.</p>
<p>For the problem of <B>qsort</B> and <B>T::compare</B>, the best answer is to make <B>T::compare</B> a static member. Pointers-to-members refer to instanced members (those with <B>this</B> pointers); static members lack a <B>this</B> pointer, and can be referenced by real pointers:</p>

<pre>
class T
    {
public:
    void f();
private:
    static int
    compare(void const *, void const *);
    };
     
void T::f()
    {
    qsort(NULL, 0, 0, compare); // OK
    }
</pre>

<h4><FONT COLOR="#000080">And Speaking of this Pointers...</FONT></H4>

<p>Another insight courtesy of Stan Kelly-Bootle, who forwarded me an illuminating email thread. The part that interests me here involves section 5.1 paragraph 3 of the C++ Standard:</p>

<BLOCKQUOTE>
<p>The keyword <B>this</B> names a pointer to the object for which a nonstatic member function is invoked. The keyword <B>this</B> shall be used only inside a nonstatic class member function body or in a constructor mem-initializer. The type of the expression is a pointer to the function's class, possibly with cv-qualifiers on the class type. The expression is an rvalue.</p>
</BLOCKQUOTE>

<p>Read that last sentence again: the expression <B>this</B> is an rvalue. This represents a change from Bjarne Stroustrup's books; in fact, in the mail thread Bjarne expressed surprise at the change. He originally had <B>this</B> as a constant lvalue of type <B>T * const</B> (for a non-const <B>T</B> member) or <B>T const * const</B> (for a const <B>T</B> member).</p>
<p>What practical difference does this make? For starters, if you try something like</p>

<pre>
T const * const *p = &amp;this;
</pre>

<p>in a member function, you're okay if <B>this</B> is an lvalue, but in trouble if <B>this</B> is an <B>rvalue</B>. (In my testing, Metrowerks treats <B>this</B> as an lvalue, while GNU, MSVC, and EDG consider <B>this</B> an rvalue.)</p>
<p>Beyond code changes, this forces a change in my conceptual model. When Dan Saks and I teach C programmers introductory C++, we show them the benefits of making pseudo-members in C with an explicit <B>this</B>-style pointer parameter. We later map that to C++ with its implicit <B>this</B> pointer pseudo-parameter.</p>
<p>Such mapping from C to C++ works if <B>this</B> is a real pointer lvalue, just like an explicit pointer parameter would be. But now <B>this</B> is a symbol for an rvalue, just like the symbol <B>123</B>. However, where <B>123</B> has the same type and value in all contexts, <B>this</B> has different types and different values in different contexts.</p>
<p>I'm not really sure why the committee made this change. To me, it adds an unnecessary complication to the conceptual model, and may unnecessarily break existing code, without providing tangible benefit to C++ programmers. But as I'm not on the committee, I have to grant the benefit of the doubt here, and believe there is a compelling reason for the switch.</p>

<h4><FONT COLOR="#000080">Foreshadowing</FONT></H4>

<p>Instead of emailing questions directly to my personal account, send them instead to <B>cujqa@mfi.com</B>. That way, if I miss an issue, someone else can silently field your queries; also, the distinct "To:" line lets me easily filter questions into a special email folder.</p>
<p>My preference is to handle a larger number of questions with shorter answers. To steal a cliche, I'd rather teach more of you how to fish than give a couple of you a bushel basket of fish. I also think I'll have more fun writing my column this way.</p>
<p>You may wonder about the title of this month's column. In astronomy, "second contact" is the instant when the moon fully covers the sun during a total solar eclipse. I find this a fitting metaphor, as I now completely eclipse "The Learning C/C++urve." In that sense, next month's column will represent third contact: the instant when the metaphorical moon starts uncovering my new column's sun.</p>
<p>I'll see you on the Dark Side of the Moon.</p>

<h4><FONT COLOR="#000080">Notes</FONT></H4>

<p><a name="1"></a>[1]  That line alone grants Vicki lifetime Diligent Reader status &#151; although I have to wonder about someone "honored" to receive a report that says "your product is broken." It's like a Spice Girls fan saying to Ginger, oops, Scary Spice, "I'm so honoured it was your car that bashed mine in the car park!"</p>
<p><a name="2"></a>[2]  <B>&lt;http://www.cs.wustl.edu/~schmidt/patterns-ace.html&gt;</B>. Look for the section titled "Initialization Patterns."</p>
<p><a name="3"></a>[3]  I'm cheating here, since this definition of <B>implicit_cast</B> won't work with our <B>char *p = "char *p"</B> example. I leave it as an  exercise for the student to create an <B>implicit_cast</B> that works correctly in all contexts.</p>

<p><i>Bobby Schmidt is a freelance writer, teacher, consultant, and programmer. He is also a member of the ANSI/ISO C standards committee, an alumnus of Microsoft, and an original "associate" of (Dan) Saks &amp; Associates. In other career incarnations, Bobby has been a pool hall operator, radio DJ, private investigator, and astronomer. You may summon him at 14518 104th Ave NE Bothell WA 98011; by phone at +1-425-488-7696, or via Internet e-mail as <B>rschmidt@netcom.com</B>.</i></p>

</BLOCKQUOTE>
</BODY>
</HTML>
