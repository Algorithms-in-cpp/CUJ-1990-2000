<HTML><HEAD>
<TITLE>November 1998/Steganography: Hiding Information in Plain Sight/Figure 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Figure 3:	Source code to hide a message image in a cover image</A><h4>

<pre>
/* This routine hides the message image in the cover image. Loop
   through the pixels in the message image and call hide_pixels
   for every pixel in the message image */

int hide_image(cover_image_name,
               message_image_name,
               cover_image,
               message_image,
               mlength,
               mwidth,
               clength,
               cwidth,
               lsb,
               n)
   char  cover_image_name[],
         message_image_name[];
   int   lsb, n;
   long  clength, cwidth, mlength, mwidth;
   short **cover_image, 
         **message_image;
{
   char response[80];
   int h_counter;

   bread_tiff_image(cover_image_name, cover_image);
   bread_tiff_image(message_image_name, message_image);

   for(h_counter=0; h_counter&lt;mwidth; h_counter++){
      hide_pixels(cover_image,
                  message_image,
                  h_counter,
                  h_counter*n,
                  lsb,
                  n,
                  mlength);
   }  /* ends loop over h_counter */

   bwrite_tiff_image(cover_image_name, cover_image);

}  /* ends hide_image */

/* This routine hides the bits in a pixel from the message image
   into the least significant bit of eight pixels in the cover
   image.

   Do this operation for every row of pixels in the message and
   cover images */

int hide_pixels(cover_image, 
                message_image,
                mie, 
                cie,
                lsb,
                n,
                mlength)
   int   cie, lsb, mie, n;
   long  mlength;
   short **cover_image, 
         **message_image;
{
   char result,
        new_message,
        sample;

   char mask1[EIGHT] =  {0x01,  /* 0000 0001 */
                         0x02,  /* 0000 0010 */
                         0x04,  /* 0000 0100 */
                         0x08,  /* 0000 1000 */
                         0x10,  /* 0001 0000 */
                         0x20,  /* 0010 0000 */
                         0x40,  /* 0100 0000 */
                         0x80}; /* 1000 0000 */


   char mask2[EIGHT] = {0xFE,  /* 1111 1110 */
                        0xFD,  /* 1111 1101 */
                        0xFB,  /* 1111 1011 */
                        0xF7,  /* 1111 0111 */
                        0xEF,  /* 1110 1111 */
                        0xDF,  /* 1101 1111 */
                        0xBF,  /* 1011 1111 */
                        0x7F}; /* 0111 1111 */


   int c_counter,
       i, j;

   for(i=0; i&lt;mlength; i++){
      c_counter = 0;
      sample    = message_image[i][mie];

      for(j=n-1; j&gt;-1; j--){

         /* Find out if the jth bit is a 1 or 0. If it is non-zero,
            set the LSB of the message image's pixel. Else, clear
            that LSB. */

         new_message = cover_image[i][cie+c_counter];
         result      = sample &amp; mask1[j];

         if(result != 0x00){ /* set lsb */
            if(lsb)
               new_message = new_message | mask1[0];
            else
               new_message = new_message | mask1[EIGHT];
         } /* ends if set lsb */

         else{ /* clear lsb */
            if(lsb)
               new_message = new_message &amp; mask2[0];
            else
               new_message = new_message &amp; mask2[EIGHT];
         }  /* ends if clear lsb */

         cover_image[i][cie+c_counter] = new_message;
         c_counter++;

      }  /* ends loop over j */
   }  /* ends loop over i */
}  /* ends hide_pixels */


/* End of File */
</pre>
</BODY>
</HTML>
