<HTML>
     
     <HEAD>
<TITLE>November 1998/Steganography: Hiding Information in Plain Sight</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocnov.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Steganography: Hiding Information in Plain Sight</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Dwayne Phillips</FONT></H3>

<BLOCKQUOTE>

<p>Sometimes the best form of encryption is to avoid the challenge to would-be decryptors.</p>
</BLOCKQUOTE>
<HR>
<BLOCKQUOTE>
<p>Steganography is the art of hiding information. It includes techniques to hide an image, a text file, or even an executable program inside a "cover" image without distorting the cover image. In this article I discuss the basic ideas of steganography and show how to hide text within an image via watermarking; I also show how to hide one image within another, and present the source code needed to implement these techniques. Extensions to these ideas are also available for those interested in augmenting the code shown. Further information on steganography is available in <a href="#1">[1]</a> and related web sites.</p>

<h4><FONT COLOR="#000080">Hidden Writing</FONT></H4>

<p>The word steganography comes from the Greek and literally means "hidden writing." People have used steganography through the centuries to hide messages. The messages are hidden in plain sight in that they are visible to people who know where to look.</p>
<p>Consider the sentence "Where really interesting technical exchanges can overcome dull entertainment." This sentence represents a very primitive form of stenography. The first letter of each word spells the message "write code." This message is not well hidden. Better hiding methods use the second or third letter of each word; or the first letter of the first word, second letter of the second word, etc.</p>
<p>Steganography and cryptography are closely related. Cryptography scrambles a message to produce something that looks scrambled. The "write code" message in the above example could be scrambled to be "xsjuf dpef" (replace each letter with the letter that follows it in the alphabet). The scrambled appearance sometimes encourages prying eyes; some people see unscrambling such a message as a challenge. Steganography instead hides a message in a cover message. The result looks like something innocent, so prying eyes often dismiss it. Lawyers and libertarians debate if steganography is close enough to cryptography to regulate its use. To date, steganography remains unregulated.</p>

<h4><FONT COLOR="#000080">Stenography Via Watermarking</FONT></H4>

<p>A <I>watermark</I> adds information to a document or image by placing a logo or seal in plain sight. The watermark protects the owner's rights by showing ownership. TV broadcasters commonly practice watermarking by placing their logo in a corner of the broadcast picture.</p>
<p>A watermark can also be hidden in an image. Hiding the watermark does not change the appearance of the image. This protects the owner's rights, without disturbing the image.</p>
<p><A HREF="image1.htm">Images 1</A> through <A HREF="image4.htm">4</A> show an example of hiding a watermark. <A HREF="image1.htm">Image 1</A> shows a boy and <A HREF="image2.htm">image 2</A> shows a watermark. The watermark is white words on a black background. It is possible to use more complex watermarks, but white on black simplifies the program.</p>
<p><A HREF="image3.htm">Image 3</A> is the result of laying the watermark on top of the boy image. A value of 20 was added to each pixel of the boy image where the watermark image was white. This example did not hide the watermark.</p>
<p><A HREF="image4.htm">Image 4</A> shows the result of hiding the watermark on the boy image. A value of 2 was added to each pixel of the boy image where the watermark image was white. This small increase is not visible to the casual observer.</p>
<p>It is simple to recover the watermark by subtracting the original boy image (<A HREF="image1.htm">image 1</A>) from <A HREF="image4.htm">image 4</A>.</p>
<p><A HREF="fig1.htm">Figure 1</A> shows the source code that hides a watermark in an image and recovers it. All the source code presented here works with TIFF files <a href="#2">[2]</a>. The first part of <A HREF="fig1.htm">Figure 1</A> is the program that creates the hidden image. After interpreting the command line, the code reads the headers of the two TIFF image files, ensures the images are the same size, and allocates two arrays to hold the images. The hiding operation adds a factor to the image when the watermark image is non-zero. The last few lines of code write the result to a file and free the memory allocated for the image arrays.</p>
<p>The source code for the routines <B>read_tiff_header</B>, <B>bread_tiff_image</B>, <B>bwrite_tiff_image</B>, and <B>free_image_array</B>, as well as the image header structures and constants are all part of my C Image Processing System (CIPS <a href="#2">[2]</a>). These routines are not shown here, but are available on the <I>CUJ</I> ftp site in this month's download.</p>
<p>The second part of <A HREF="fig1.htm">Figure 1</A> shows the source code to subtract the original image from the watermarked image. It is very similar to the previous source code.</p>

<h4><FONT COLOR="#000080">Hiding Images in Images</FONT></H4>

<p>Steganography enables hiding one image within another image. The <I>message</I> image is the image to be hidden; the <I>cover</I> image is the image that will contain the hidden image. The hiding process alters the cover image, but the alterations are too slight to see. The hiding process permits recovery of the message image at a later date, such that the recovered message image matches the original exactly.</p>
<p>Perfect recovery is possible because images, as a rule, contain an excess of information. For example, common eight-bit gray-scale images can contain 256 shades of gray, but people can distinguish only about 40 shades of gray. The extra gray shades are useless. A similar situation holds for color images. Images that use 24 bits per pixel can contain up to 16 million unique colors &#151 too many to be useful, as far as the human eye is concerned.</p>
<p>Since eight-bit gray-scale images have more bits than needed, steganography uses the unneeded bits to hide the message image. The stenography hiding process stores the bits from the message image in the least significant bits of the cover image. No one can see the difference in the altered cover image, because no one can tell the difference between a 212 and a 213 gray scale.</p>
<p><A HREF="fig2.htm">Figure 2</A> shows how three pixels from a message image hide in a cover image. The first part of the figure shows the three pixels from the message image. The second part of the figure shows three rows, of eight pixels each, from the cover image. The last part of the figure shows the same three rows after hiding the three message image pixels within them. The least significant bits of the cover image are holding the message image pixels.</p>

<UL><LI>The pixel 99 (decimal) from the message image contains bits 0110 0011. To hide the 0 (the first bit) requires clearing the least significant bit of the first pixel of the cover image. The 90 pixel of the cover image remains 90 because its least significant bit is already a 0.</LI>
    <LI>The next two bits of the message image pixel are 1, so the algorithm sets the least significant bit of the cover image's next two pixels to 1. Thus, the cover image's 82 pixel (52 hex) becomes an 83, and its 88 pixel (58 hex) becomes an 89.</LI></UL>

<p>This process continues until every pixel in the cover image has its least significant bit cleared or set, depending on the bit values of a pixel in the message image.</p>
<p>This process has an inherent eight-to-one limitation: since each pixel in the message image requires eight different pixels in the cover image for representation, the cover image must be eight times wider than the message image.</p>
<p><A HREF="image5.htm">Images 5</A> through <A HREF="image8.htm">8</A> illustrate the process of hiding a message image in a cover image. <A HREF="image5.htm">Image 5</A> is the message image and <A HREF="image6.htm">image 6</A> is the original cover image. <A HREF="image7.htm">Image 7</A> is the cover image that results after hiding the message image within it. <A HREF="image6.htm">Images 6</A> and <A HREF="image7.htm">7</A> are indistinguisable by visual inspection. The difference becomes apparent only when examining the pixel values, as in <A HREF="fig2.htm">Figure 2</A>. Many of the pixel values of <A HREF="image7.htm">Image 7</A> are one off those in <A HREF="image6.htm">Image 6</A>.</p>
<p><A HREF="image8.htm">Image 8</A> shows the message image after uncovering it from <A HREF="image7.htm">Image 7</A>. <A HREF="image5.htm">Images 5</A> and <A HREF="image8.htm">8</A> are exactly alike. The hiding and uncovering process did not alter the message image.</p>
<p><A HREF="fig3.htm">Figures 3</A> and <A HREF="fig4.htm">4</A> show the source code that produced <A HREF="image5.htm">images 5</A> through <A HREF="image8.htm">8</A>. The listings show only the subroutines that do the work. The main calling routine is not shown.</p>
<p><A HREF="fig3.htm">Figure 3</A> shows the subroutines <B>hide_image</B> and <B>hide_pixels</B>. The <B>hide_image</B> routine reads the message and cover images, calls the <B>hide_pixels</B> routine, and writes the result to the cover image file. The <B>h_counter</B> loop runs through the width of the message image. These routines assume that the main calling routine (not shown) has already checked that the cover image is eight times wider than the message image.</p>
<p>The <B>hide_pixels</B> routine does most of the work in the hiding operation. It determines the value of every bit in every pixel in the message image. It then sets or clears the least significant bit of every pixel in the cover image accordingly. <B>hide_pixels</B> uses two mask arrays to determine and alter bits. The loop over <B>i</B> covers all the rows of the message and cover images. On each row, the loop over <B>j</B> examines each of the eight bits in the message image's pixel. The code then sets or clears the least significant bit of the corresponding pixel of the cover image.</p>
<p>The <B>if(lsb)</B> code is necessary because some TIFF images place the least-significant bit first while others place it last. (It's the old bit order, a.k.a. endian, issue. The difference is easily seen in Intel and Motorola microprocessors.) Depending on the bit order, <B>hide_pixels</B> uses either <B>mask1</B> or <B>mask2</B> to set or clear bits.</p>
<p><A HREF="fig4.htm">Figure 4</A> shows the subroutines <B>uncover_image</B> and <B>uncover_pixels</B>. These routines reverse the hiding process, so they are similar to the routines in <A HREF="fig3.htm">Figure 3</A>. The <B>uncover_image</B> routine reads the cover image, calls <B>uncover_pixels</B> for every pixel in the image, and writes the recovered message image to disk.</p>
<p>The <B>uncover_pixels</B> routine does most of the work in <A HREF="fig4.htm">Figure 4</A>. <B>uncover_pixel</B> must determine if the least significant bit of each pixel in the cover image is 1 or 0. It then uses these bits to build up the eight bits in every pixel in the message image. The loop over <B>i</B> runs through every row in the images. The loop over <B>j</B> looks at eight pixels in the cover image. If a pixel is odd, its least significant bit is 1, so the corresponding bit in the message image must be set using the <B>mask1</B> bit mask. Clearing bits is not necessary because the <B>new_message</B> variable was set to <B>0x00</B> prior to the loop over <B>j</B>.</p>

<h4><FONT COLOR="#000080">Extending the Stenography Technique</FONT></H4>

<p>There are several ways to extend the concepts presented here, such as increasing the storage efficiency, or hiding executable programs and text files in images. The most obvious limitation to the image hiding technique shown earlier is that the cover image must be eight times wider than the message image. This means using a narrow message image (<A HREF="image5.htm">Image 5</A>) and a wide cover image (<A HREF="image6.htm">Image 6</A>).</p>
<p>You can reduce this ratio down to three-to-one. Instead of using the least significant bit of the cover image, use the two least significant bits. The cover image may then change from gray shade 128 to 131 when hiding the message image. People still cannot see that. The other way to increase efficiency is to reduce the message image from eight-bit pixels to six-bit pixels. The message image will now comprise 64 shades of gray instead of 256. People can see only 40 shades of gray, so 64 is plenty. The six-bit pixels in the message image are distributed in two bits fragments in the cover image, hence the three-to-one ratio. Implementing this scheme would require changes in the routines shown in <A HREF="fig3.htm">Figures 3</A> and <A HREF="fig4.htm">4</A>.</p>
<p>Steganography also enables hiding executable programs inside images. In the previous discussion, the message image was a series of eight-bit values. An executable program is also a series of eight-bit values. The least significant bits of the cover image can just as easily hold the bits of an executable program. The cover image must contain eight times more pixels than the executable length in bytes (four times more pixels if you use the two least significant bits as explained earlier). Uncovering the executable program from the cover image is just like uncovering the message image.</p>
<p>By the same logic, the cover image can also hide a text file, if a text file is considered a series of eight-bit bytes. Again, the cover image must contain eight times more pixels (or four times) than the text message. This use of steganography allows you to hide a message in an image, send the image to a friend (ftp or web site), and have them read it. The whole world can see the image without reading the message or even suspecting a message exists.</p>

<h4><FONT COLOR="#000080">Summary</FONT></H4>

<p>Steganography is a technique used to hide information within images. Using stenography, watermarks and copyrights can be placed on an image to protect the rights of its owner without altering the appearance of the image. Almost like magic, images, executable programs, and text messages can hide in images. The cover image does not appear to be altered. People look at the cover image and never suspect something is hidden. Your information is hidden "in plain sight." o</p>

<h4><FONT COLOR="#000080">Notes and References</FONT></H4>

<p><a name="1"></a>[1]  Neil F. Johnson. "Exploring Stenography: Seeing the Unseen," <I>Computer</I>, February 1998, pp. 26-34. http://patriot.net/ johnson/Steganography.</p>
<p><a name="2"></a>[2]  This source code has been designed to work with my C Image Processing System, which is a gray-scale image processing system based on TIFF files. A text file describing the CIPS series of <I>CUJ</I> articles, and my book, <I>Image Processing in C</I> (R&amp;D books, 1994, ISBN 0-13-104548-2), is available in this month's download section. The full source code to the CIPS system is also available here.</p>

<p><i>Dwayne Phillips works as a software, systems, and computer engineer with the United States Government. He has a Ph.D. in Electrical and Computer Engineering from Louisiana State University. His interests include computer vision, artificial intelligence, software engineering, and programming languages.</i></p>

<h4><a href="../../../source/1998/nov98/phillips.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY>
</HTML>
