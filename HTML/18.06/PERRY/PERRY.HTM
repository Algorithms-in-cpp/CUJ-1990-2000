<HTML>   
     <HEAD>
<TITLE>June 2000/A Reusable Nonlinear System Solver, Part 1</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjun.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Algorithms</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">A Reusable Nonlinear System Solver, Part 1</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Michael L. Perry</FONT></H3>

<BLOCKQUOTE>
<p>C++ lets you encapsulate the Newton-Raphson method for solving equations without obscuring the underlying physical problem to be solved.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>Modeling a physical system is difficult. Typically, an engineer gives the developer equations that relate some attributes of the system to others.</p>
<p>"So you want the program to calculate x; this equation says I need y and z. How do I calculate them?"</p>
<p>"Here are two more equations."</p>
<p>"But these equation both depend upon x. How am I supposed to find it?"</p>
<p>"Use the first equation. Oh, and this only refers to one object. The system will contain several that interact."</p>
<p>"How do they interact?"</p>
<p>"That's defined at run-time. Good luck."</p>
<p>Too often, the developer first tries a simple iterative attack, in which the system is evaluated at an initial guess, and the results imply the next guess. The assumption is that such methods converge on a solution. On test data they sometimes do &#151; provided that the initial guess is close enough. However, when this method is applied to real data, it often fails, leading to frustrated customers and long debugging sessions.</p>
<p>Instead of taking the simple approach and hoping for a solution, I prefer to do a little research and a little math to find a proven solution. Research, in this case, leads to <I>Numerical Recipes in C,</I> Second Edition, by Press et al <a href="#1">[1]</a>. In Part 1 of this two-part series on mathematical modeling, I will discuss the Newton-Raphson method for solving systems of nonlinear equations. The book explains the math in great detail, so I give only an overview here. I focus on wrapping the algorithm in a set of C++ classes that can be reused across problem domains.</p>
<H4><FONT COLOR="#000080">Requirements for a Solvable System</FONT></H4>
<p>As Press explains, not every set of nonlinear equations has a solution. You must carefully examine the mathematical model to determine whether a solution exists and is easily found. A full discussion of proving solvability is beyond the scope of this article, but you can apply a few criteria to be relatively sure that a solution exists.</p>
<p>The first test you should perform is to determine if there is a practical reason that a solution should exist. This is easy, because the customer usually wants the solution to some physical system. If the customer didn't reasonably expect a solution to exist, she probably wouldn't have asked us to find one in the first place. If we are modeling a hydraulic pipeline system, for example, we know that fluids will flow under normal conditions. If, however, the physical system we are modeling has some slack or ambiguity, the equations are not likely to solve.</p>
<p>The second test for solvability is to look for discontinuities. Look at the equations for conditions that would cause a denominator to go to zero, or would cause you to take the log or square root of a negative number. Make sure that valid inputs stay far away from these places. You may even wish to go so far as to plot the equations, to look for either sharp changes in slope, or oscillations. The most solvable equations are those that always increase or decrease, never change direction or flatten out.</p>
<p>The third test is to make sure there are exactly as many unknowns as equations. An unknown is a quantity that reacts to other quantities in the system. All of the quantities that you wish to find are unknowns. In addition, all intermediate quantities that change with the system are unknowns. Values that remain fixed are not unknowns; they are parameters. Their values are given before the solver even starts its work.</p>
<H4><FONT COLOR="#000080">The Newton-Raphson Method</FONT></H4>
<p>If a system of nonlinear equations passes these three tests, it is likely that Newton-Raphson will find a solution. You must first transform each equation so that all that remains on the right-hand side of the equals sign is zero. The easiest way to do this is to simply subtract the right-hand side from both sides.</p>
<p>Newton-Raphson represents the set of unknowns with a vector (a single column of a matrix) called x. It similarly represents the set of functions evaluated at x with another vector y. To approximate the non- linear system, the algorithm chooses a linear system that has the same slope at the initial guess. Taking the partial derivatives of each function with respect to each unknown, we can build a matrix that satisfies this condition. This is called the Jacobian matrix, J. If you deviate from the initial guess (x) by a small vector (<FONT FACE="Symbol">D</FONT>x), the nonlinear system (y) will respond in exactly the same way as the following linear system:</p>

<p>J<FONT FACE="Symbol">D</FONT>x = y</p>

<p><a href="fig1.htm">Figure 1</a> illustrates this situation for a system of just one equation. Since the goal is to find x such that all elements of y are zero, Newton-Raphson chooses <FONT FACE="Symbol">D</FONT>y = -y as the initial guess. It then solves the linear system:</p>

<p>J<FONT FACE="Symbol">D</FONT>x = -y</p>

<p>for <FONT FACE="Symbol">D</FONT>x, and from there calculates the new guess for x, which is old x + <FONT FACE="Symbol">D</FONT>x.</p>
<p>This solution to the linear system is not the solution to the nonlinear system, but it is probably closer. Newton-Raphson repeatedly finds the next guess in this manner, and thus iterates to a solution.</p>

<H4><FONT COLOR="#000080">Line Searching and LU Decomposition</FONT></H4>

<p>Even if <FONT FACE="Symbol">D</FONT>x does not get us sufficiently closer to the solution, it always starts out by getting better. Remember that the linear system behaves just like the nonlinear system for a small deviation. Therefore, even if the full step defined by <FONT FACE="Symbol">D</FONT>x does not get us closer, we can be sure that it at least points in the right direction.</p>
<p>To take advantage of this fact, Newton-Raphson performs a line search. It first tries the full step. Failing that, it tries smaller fractions of <FONT FACE="Symbol">D</FONT>x. When it locates a sufficiently better guess, the algorithm stops line searching and uses the new guess in the next iteration. The method used to determine each fraction of <FONT FACE="Symbol">D</FONT>x to try is well covered in Press, page 384.</p>
<p>To quickly solve the linear system, the engine uses LU decomposition. This technique replaces one square matrix with two triangular matrices. (A triangular matrix is a matrix that contains all zeroes either above or below the diagonal.)</p>

<IMG SRC="eq1.gif"></p>

<p>It is easy to solve the two systems of equations that result:</p>

<IMG SRC="eq2.gif"></p>

<p>Because the matrices are triangular, each successive row adds only one coefficient. Therefore, using the values you've already found, you can easily calculate the next. A fast method for decomposing a matrix into its lower and upper triangular components is found in Crout's algorithm. For the details, please see Press, page 44.</p>

<H4><FONT COLOR="#000080">The Solver Engine</FONT></H4>

<p>The engine uses Newton-Raphson to solve an application-defined system of equations and unknowns. The application packages the equations and unknowns in a way that the solver engine understands. Several methods of packaging could be considered, but the right one will make the solver engine more reusable.</p>
<p>One option is to store the values of all unknowns in a vector and pass it as a parameter into a function. The function evaluates all of the equations, and returns their values through another vector. The application provides a function pointer, as in the following code fragment:</p>

<pre>
bool Solve( CVector (*pFunction)( CVector x ), CVector &amp;x );
CVector EvaluateSystem( CVector x );

void main()
{
   CVector x(nNumUnknowns);
   Solve( &amp;EvaluateSystem, x );
}
</pre>

<p>This method has three significant problems. First, the identity of the unknowns is lost. The evaluation function must extract the values of the unknowns from a vector by index. Second, context information is lost. Because the evaluation function is passed using a function pointer, extra information such as parameters must be stored in global variables. Third, the function can provide no extra information about the system. For example, it is difficult for a function pointer to identify the unknowns upon which each equation depends.</p>
<p>Instead of packaging the equations and unknowns in this manner, the solver engine packages them as interfaces. The application implements these interfaces with objects and passes pointers to them into the solver. This method lets an unknown retain its identity, since the application provides a pointer to its own data. This method also lets the system retain context information because objects are behind the interfaces, not just functions. Finally, this method lets the system provide more information, because the interfaces can expose more than one member function.</p>
<p>The declarations of the two interfaces appear below:</p>

<pre>
class IEqUnknown
{
public:
   virtual double GetValue() = 0;
   virtual void SetValue(double dValue) = 0;
};

class IEqEquation
{
public:
   virtual double CalculateY() = 0;
   virtual bool DependsUpon(IEqUnknown *pUnknown) = 0;
};
</pre>

<p>The application implements these interfaces and adds unknowns and equations to the system. It then calls the <B>Solve</B> member function, which applies Newton-Raphson to the provided system to achieve a solution. If a solution is found, the solver leaves the values of the unknowns in the provided objects.</p>
<p>To solve the system of nonlinear equations, the engine must first solve a system of linear equations (as the Newton-Raphson method states). Three components &#151; the matrix, vector, and LU decomposition classes &#151; together represent a linear system of equations. The matrix is a square container of <B>double</B>s, while the vector is a vertical column of <B>double</B>s.</p>
<p>The LU decomposition class represents the decomposition of a matrix. Given one vector y, it finds the vector x that solves the linear system Mx = y.</p>

<H4><FONT COLOR="#000080">Optimizing the Solver</FONT></H4>

<p>The matrix and vector classes make use of operators to improve code readability. However, the heavy use of operators means that these matrix and vector objects are often returned from functions. Each time this occurs C++ calls the copy constructor. If the result is stored in a local variable, this process is also accompanied by a call to the assignment operator. For a large matrix or vector, frequent copies can seriously hurt performance. To improve performance without affecting readability, the matrix and vector classes use copy on write, or lazy copy.</p>
<p>The actual data for either a matrix or vector is stored in a separate class. The data class keeps a reference count so that many objects can use the same copy of data. When an object stores the pointer to data, it increments its reference count. When it no longer needs the pointer, it decrements the reference count. Before an object makes a change to the data, it checks the reference count to be sure it is not shared. If it is, the object makes a copy first. Using these rules, the temporary objects created by C++ to accommodate the operators exchange a data pointer, instead of copying a large array of doubles.</p>
<p>The LU decomposition object stores both the lower and the upper triangular matrices in one square matrix. This is possible because the diagonal of one of the matrices is known to contain only ones. The LU decomposition object also stores the row permutation used to pivot the original matrix. It calculates these members in its constructor when it decomposes a matrix, and uses them to solve the system for a specific result vector.</p>

<H4><FONT COLOR="#000080">A Typical Problem</FONT></H4>

<p>To demonstrate the use of the solver engine, I present the solution to the triangular lattice of springs shown in <a href="fig2.htm">Figure 2</a>. The system, composed of springs connected to cords anchored at fixed points, follows a few simple rules. The change in the length of a spring is proportional to the force applied to it. The length of a cord is constant. The forces at opposite sides of the spring are exactly equal in magnitude and opposite in direction. The force on a spring or a cord pulls along its length. The entire lattice rests on a tabletop, so motion is permitted only in two dimensions and gravity is not a factor.</p>
<p>The following equations capture these rules:</p>

<p>1) p1-a1 = (F1-F3)/|F1-F3| L1<br>
2) p2-a2 = (F2-F1)/|F2-F1| L2<br>
3) p3-a3 = (F3-F2)/|F3-F2| L3<br>
4) p2-p1 = F1/|F1| (R1 + k1|F1|)<br>
5) p3-p2 = F2/|F2| (R2 + k2|F2|)<br>
6) p1-p3 = F3/|F3| (R3 + k3|F3|)</p>
<p>Equations 1), 2), and 3) represent the three cords, and equations 4), 5), and 6) represent the three springs.</p>
<p>The first criterion that the system must meet is that we can reasonably expect the physical system that it models to have a unique solution. Provided that the cords are taut, the physical system will quickly reach equilibrium. If, however, the vertices are moved too close together or the cords are too long, the system will have some slack, and it will not reach a unique solution.</p>
<p>The second criterion is that the unknowns stay far away from any discontinuities in the equations. Close examination of the equations reveals that division by zero occurs when the magnitude of a force is zero. Again, this indicates that a system with slack will not solve.</p>
<p>The third criterion is that the system have as many equations as unknowns. In the above six equations, the three positions (p1, p2, p3) and three forces (F1, F2, F3) are unknown. Since each force or position is a two-dimensional vector, the system has twelve unknowns. Similarly, each of the above equations relates two-dimensional vectors, so the system actually has twelve equations. The solver engine can easily find the positions and forces of the springs in this system, provided that the parameters are sufficient to remove all slack.</p>
<p>A word of caution, you may be tempted to multiply both sides of each equation by the magnitude of the force, thus eliminating the possibility of divide by zero. Notice, however, that by doing so, you create a new solution for each equation, namely where the force is zero. In trying to eliminate the singularity, you've actually turned it into a solution. Depending on the initial guess, the solver engine is just as likely to find this false solution as it is to find the true one.</p>

<H4><FONT COLOR="#000080">Representing the Problem in Code</FONT></H4>

<p>One composite object represents the entire lattice. Its members include three spring objects, and three cord objects. Examining the equations above reveals the unknowns that any single object relates. A spring object connects two points and one force, as represented by p1, p2, and F1 in Equation 4. A cord object connects one point and two forces, as represented by p1, F1, and F3 in Equation 1. Since the objects share the positions and forces, these unknowns are also members of the lattice object. The object instance diagram appears in <a href="fig3.htm">Figure 3</a>.</p>
<p>The <B>CProbVector</B> class represents the two-dimensional vectors used for positions and forces. Please don't confuse this vector with the multidimensional vector used in the solver engine. A problem vector represents two unknowns, x and y. The <B>CProbVector</B> class adds two unknowns to the system, so it implements the <B>IEqUnknown</B> interface in two different ways; it must inherit the <B>IEqUnknown</B> base class twice. According to the C++ specifications, a class cannot appear more than once in the direct base list. Therefore <B>CProbVector</B> must inherit indirectly from <B>IEqUnknown</B>. It does this through a pair of intermediate classes, <B>IEqUnknownX</B> and <B>IEqUnknownY</B>.</p>
<p><B>CProbVector</B> cannot unambiguously implement <B>GetValue</B> and <B>SetValue</B> directly. If it tried to, the compiler would attribute the same implementations to both <B>IEqUnknownX</B> and <B>IEqUnknownY</B>. To disambiguate these methods, the intermediate interface classes inherit <B>IEqUnknown</B> and redirect its methods to new pure virtual functions. <a href="fig4.htm">Figure 4</a> shows the class diagram for <B>CProbVector</B> and related interfaces.</p>
<p>The declarations of the intermediate interface classes and the <B>CProbVector</B> class appear in <a href="list1.htm">Listing 1</a>. <B>CProbVector</B> passes a pointer to each of these interfaces into the system in its <B>AddToSystem</B> method, shown in <a href="list2.htm">Listing 2</a>.</p>
<p>The <B>CProbCord</B> and <B>CProbSpring</B> classes add two equations each to the system. They use the same technique as <B>CProbVector</B> to implement two interpretations of the <B>IEqEquation</B> interface. To pull the entire system together, the lattice gives references of the points and forces to the spring and cord objects through their constructors. This way, all equations refer to the same unknowns; identity is preserved. The <B>main</B> function simply creates a solver engine and the sample lattice illustrated in <a href="fig5.htm">Figure 5</a>. It tells the lattice to add itself to the solver, then tells the solver to go. If a solution is found, it tells the lattice to print it out.</p>
<p>The sample code includes four sets of initial guesses, each further from the solution than the one before. When testing a new nonlinear model, it is best to generate a problem with a known solution, then try progressively worse initial guesses. This first lets you confirm that the equations are calculated properly, then lets you get a feel for how close the initial guess must be for the system to solve. For most systems, you will find that this solver engine works well even when the initial guess is bad.</p>

<H4><FONT COLOR="#000080">Conclusion</FONT></H4>

<p>Most developers, when given a system like the lattice to solve, write code specific to the problem and tweak it until it works. Instead of working the problem, I worked a solution. I created a general solver engine that can be reused across problem domains.</p>
<p>The solver engine is reusable because it is based on sound mathematics, and because it uses interfaces to represent equations and unknowns. The problem object, however, is specific to a triangular lattice. It is presented here only to demonstrate the use of the solver engine. In Part 2, I will present a more general pattern that you can apply to almost any network of objects. Not only can it be used to model a network of cords and springs, but also electrical circuits, hydraulic pipeline systems, and traffic simulations. No matter which problem domain you model with the network pattern, it uses the same general solver engine presented here.</p>

<H4><FONT COLOR="#000080">Reference</FONT></H4>

<p><a name="1"></a>[1]  William H. Press, Saul A. Teukolsky, William T. Vetterling, Brian P. Flannery. <I>Numerical Recipes in C,</I> Second Edition (Cambridge University Press, 1993). ISBN 0521431085.</p>

<p><i><B>Michael L. Perry</B> is a software developer with six years of industry experience. As the founder of Mallard Software Designs, Inc., Michael strives to make sound development practices more commonplace in the software community. For more information, please visit the Mallard website at <B>http:\\www.mallardsoft.com</B>.</i></p>

<h4><a href="../../../source/2000/jun00/perry.zip">Get Article Source Code</a></h4>

</blockquote></body></html>
