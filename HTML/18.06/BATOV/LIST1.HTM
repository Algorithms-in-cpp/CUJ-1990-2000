<HTML><HEAD>
<TITLE>June 2000/Safe and Economical Reference-Counting in C++/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: The header file for smart pointers implementation</A></h4>
<pre>
 01 
 02 class HandleBase
 03 {
 04    proteteced:
 05
 06    typedef int Counter;
 07
 08    // All Handle::null() instances point at the counter.
       // It is initialized with the value of 1. Therefore,
       // it is never 0 and, consequently, there are no
       // attempts to delete it.
 09
 10    static Counter _null;
 11 };
 12
 13 template&lt;class Data&gt;
 14 class Handle : public HandleBase
 15 {
 16 #include "counted.h"   
 17
 18    public:
 19
 20   ~Handle() { _counted-&gt;dismiss(); }
 21   
 22    explicit Handle()
 23    : _counted(new Counted()) { _counted-&gt;use(); }
 24
 25    Handle(const Handle&lt;Data&gt;&amp; ref) 
 26    : _counted(ref._counted)  { _counted-&gt;use(); }
 27
 28    Handle&lt;Data&gt;&amp; 
 29    operator=(const Handle&lt;Data&gt;&amp; src)
 30    {
 31       if (this-&gt;_counted != src._counted)
 32       {
 33          _counted-&gt;dismiss();
 34          _counted = src._counted;
 35          _counted-&gt;use();
 36       }
 37       return *this;
 38    }
 39
 40    // Direct access.
 41
 42    operator Data&amp; () const 
       { return _counted-&gt;operator Data&amp;(); }
 43    operator Data* () const 
       { return _counted-&gt;operator Data*(); }
 44    Data* operator-&gt; () const 
       { return _counted-&gt;operator -&gt;(); }
 45
 46 #include "create.h"
 47 #include "unofficial.h"
 48
 49    template&lt;class Other&gt; 
 50    Handle(const Handle&lt;Other&gt;&amp; ref) 
 51    : _counted(ref.cast&lt;Data&gt;()._counted)
 52    {
 53       _counted-&gt;use();
 54    }
 55   
 56    template&lt;class Other&gt;
 57    Handle(Handle&lt;Other&gt;&amp; ref) 
 58    : _counted(ref.cast&lt;Data&gt;()._counted)
 59    {
 60       _counted-&gt;use();
 61    }
 62
 63    template&lt;class Other&gt;
 64    Handle&lt;Data&gt;&amp; 
 65    operator=(const Handle&lt;Other&gt;&amp; src)
 66    {
 67       return operator=(src.cast&lt;Data&gt;());
 68    }
 69
 70    // Static cast:
 71    // from Handle&lt;Derived&gt; to Handle&lt;Base&gt;
 72    // from Handle&lt;Data&gt; to Handle&lt;const Data&gt;
 73    // etc.
 74
 75    template&lt;class Other&gt; 
 76    Handle&lt;Other&gt;&amp;
 77    cast()
 78    {
 79       return (_cast_test&lt;Other&gt;(), *(Handle&lt;Other&gt;*) this);
 80    }
 81
 82    template&lt;class Other&gt;
 83    const Handle&lt;Other&gt;&amp;
 84    cast() const
 85    {
 86       return (_cast_test&lt;Other&gt;(), *(Handle&lt;Other&gt;*) this);
 87    }
 88
 89    // Dynamic downcast:
 90    // from Handle&lt;Base&gt; to Handle&lt;Derived&gt;
 91
 92    template&lt;class Other&gt;
 93    const Handle&lt;Other&gt;&amp;
 94    dyn_cast() const
 95    {
 96       _counted-&gt;dyn_cast&lt;Other&gt;(); //test
 97       return *(Handle&lt;Other&gt;*) this;
 98    }
 99
100    // Special null() instance
101    // to represent unassigned pointer.
102    
103    static
104    Handle&lt;Data&gt;
105    null()
106    {
107       return Handle&lt;Data&gt;((Counted*) &amp;_null);
108    }
109  
110    private:
111
112    Counted* _counted;
113
114    Handle(Counted* counted)
115    : _counted(counted) { _counted-&gt;use(); }
116
117    template&lt;class Other&gt;
118    Other* 
119    _cast_test() const { return (Data*) 0; }
120 };
121
122 #endif

</pre></body></html>
