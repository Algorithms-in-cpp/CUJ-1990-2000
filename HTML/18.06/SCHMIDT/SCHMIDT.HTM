<HTML>   
     <HEAD>
<TITLE>June 2000/Uncaught Exceptions</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjun.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Uncaught Exceptions: Semper Fi</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Bobby Schmidt</FONT></H3>

<BLOCKQUOTE>
<p>Bobby reassures us that the dark side of the force need not be all that dark.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>Copyright &copy; 2000 Robert H. Schmidt</p>
<p>I have formally rejoined Microsoft's employ. Long-time Diligent Readers will note this is my third trip to the altar with Bill G &amp; Co. The karmic implications of such on-again off-again romance are not lost on me.</p>
<p>Microsoft courted me pretty hard this time. Part of my attractiveness to them, ironically enough, is this very magazine. The people with whom I'll be working seriously value the independent perspective I bring. Thus, I have neither need nor desire to abandon <I>CUJ</I> and my other freelance activities <a href="#1">[1]</a>.</p>
<p>I did not reach my decision lightly. In fact, Microsoft first approached me over six months ago. In the end, I was strongly influenced by three factors:</p>

<UL><LI>   My new project is a literal once-in-a-lifetime opportunity. I knew that if I passed it up, I'd likely regret the decision for years.
<LI>   I've long held ideas of how Microsoft could improve their business while ethically serving both employees and customers. I now have a chance to test some of those ideas.
<LI>   Several members of my new team were marvelously supportive during my personal turmoil last year, even though I was not a fellow employee. I feel more than a little loyalty to them.</UL>

<p>Finally, I expect my new relationship to benefit you, for I now have Microsoft-sanctioned opportunity and mandate to deeply affect things I believe you care about. I can't discuss most of those things &#151; not yet, anyway &#151; so you'll have to take my word in the short term. Stay tuned.</p>

<H4><FONT COLOR="#000080">Sixteen Tons</FONT></H4>

<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> When I compile the following code with Visual C++ 6:</p>

<pre>
template&lt;class T&gt;
class A
    {
public:
    class iter
        {
    public:
        void fn();
        };
    iter first()
        {
        return iter();
        }
    };

template&lt;class T&gt;
void A&lt;T&gt;::iter::fn()
    {
    }

int main()
    {
    A&lt;int&gt; a;
    a.first().fn();
    return 0;
    }
</pre>

<p>I get this linker error:</p>

<pre>
unresolved external symbol
"public: void __thiscall
   A&lt;int&gt;::iter::fn(void)"
(?fn@iter@?$A@H@@QAEXXZ)
</pre>

<p>Am I doing something wrong or is this a compiler bug? I realize I could put the function definition inside the class but for larger functions I prefer not to. Both CodeWarrior 4 and gcc 2.95.2 compile and link without any problems.</p>
<p>Thanks! &#151; Andrew McKinlay</p>

<H4><FONT COLOR="#000080">A</FONT></H4>
<p> Oh great &#151; a chance to prove I haven't sold my soul to the company store.</p>
<p>I'm certain that you've hit a Visual C++ bug. At first I thought the bug was in Microsoft's name decoration/mangling scheme. But after some research, I now believe the bug is in Microsoft's code generator.</p>
<p>From what I can tell, the bug affects functions satisfying all of the following conditions:</p>

<UL><LI>   declared in a class nested within a template class
<LI>   defined outside the declaring class
<LI>   implicitly instantiated</UL>

<p>Under these conditions, the actual definition of the instantiated function doesn't appear in the generated object file. You can see evidence of this in the <B>.asm</B> and <B>.cod</B> files generated from the original <B>.cpp</B> file: where you expect a <B>PUBLIC</B> definition of the function instantiation, you instead find an <B>EXTRN</B> reference with no definition.</p>
<p>You must change one of the above conditions. Possibilities:</p>

<UL><LI>   Declare <B>A</B> as a non-template.
<LI>   Declare <B>iter</B> outside <B>A</B>.
<LI>   Declare <B>fn</B> outside <B>iter</B>.
<LI>   Define <B>fn</B> within the <B>iter</B> class definition (a solution you've already rejected).
<LI>   Explicitly instantiate <B>fn</B>.</UL>

<p>I've tested all of these changes; any one of them allows the code to link. At the same time, my analysis has not been exhaustive. If you want to know the full score, I recommend you query Microsoft's Knowledge Base <a href="#2">[2]</a>, since I have to believe that Microsoft is already aware of this bug.</p>

<H4><FONT COLOR="#000080">Declarator's Revenge</FONT></H4>

<H4><FONT COLOR="#000080">Q</FONT></H4>

<p> I wrote a program whose aim is to make template functions as members of a class (rather than global).</p>
<p>The program does not compile. May I know about the problem with this?</p>
<p>With thanks in advance. Sincerely &#151; Gupta, R.K.</p>

<H4><FONT COLOR="#000080">A</FONT></H4>

<p> I've simplified your sample to:</p>

<pre>
class X
    {
public:
    X();
private:
    template&lt;class T&gt;
        void f(T);
    };

X::X()
    {
    f(1);
    }

X::template&lt;class T&gt; // error here
void f(T)
    {
    }

X x;
</pre>

<p>To better understand the problem, consider how you would define <B>f</B> if it were not a template function. Following your example, the definition would be:</p>

<pre>
X::
void f(T)
    {
    }
</pre>

<p>which is lexically equivalent to:</p>

<pre>
X::void f(T)
    {
    }
</pre>

<p>Diligent Readers will recognize this as Bad Form. The correct syntax is:</p>

<pre>
void X::f(T)
    {
    }
</pre>

<p>Adapting this form to your example:</p>

<pre>
template&lt;class T&gt;
void X::f(T)
    {
    }
</pre>

<p>I don't blame you for being confused. Template syntax does not play well with the rest of C++. To help avoid such problems in the future, keep in mind this simplified grammar for function template declarations <a href="#3">[3]</a>:</p>

<p><B>template&lt;</B>...<B>&gt;</B> <br>
&<I>decl-spec declarator</I>(...)</p>

<p>In the corrected example,</p>

<pre>
void
</pre>

<p>is the <I>decl-spec</I> (or declaration specifier), while</p>

<pre>
X::f(T)
</pre>

<p>is the <I>declarator</I>. Since</p>

<pre>
X::
</pre>

<p>is part of the <I>declarator</I>, it can't possibly appear before</p>

<pre>
template&lt;class T&gt;
</pre>

<H4><FONT COLOR="#000080">Herb Roasted</FONT></H4>

<H4><FONT COLOR="#000080">Q</FONT></H4>

<p> Hi!</p>
<p>I very much enjoy reading <I>CUJ</I> and often find useful information on various topics. One such instance was in Herb Sutter's article "Using <B>auto_ptr</B> Effectively" from Vol. 17, Issue 10 [October 1999]. The whole article was informative but to me the most exciting concept was what he called "Pimpl," separating the implementation of the class from the header file. I was not familiar with this concept despite having felt the need for it on various occasions.</p>
<p>Just now I found myself writing a class that could benefit from this concept. I tried using <B>auto_ptr</B> as the article suggested. I was writing from memory and it seemed strange. From what I remembered, all that is supposed to appear in the header was:</p>

<pre>
class C
    {
public:
    ...
private:
    class CImpl; // forward declaration
    auto_ptr&lt;CImpl&gt; pimpl_;
    };
</pre>

<p>When considering this it seemed to me that the template <B>auto_ptr</B> couldn't be correctly instantiated on only a forward declaration. I compiled the code anyway just for the hell of it. Sure enough, when compiled under VC6 warning level 3 I got the following warning:</p>

<pre>
deletion of pointer to incomplete
   type 'CImpl';
no destructor called
</pre>

<p>Knowing that I was born senile I assumed that I had missed some fine point and dug through my pile of <I>CUJ</I> and found the article. But the code I used was the same as the code published. I may be missing something but it seems that <B>auto_ptr</B> can't really help with Pimpl as the whole point is not to declare the implementation of the implementation class before declaring the pointer to it. &#151; Joey Edelstein</p>

<H4><FONT COLOR="#000080">A</FONT></H4>

<p> You are referring to Example 4(b) from Herb's article. The relevant parts of that example appear as <a href="fig1.htm">Figure 1</a>.</p>
<p>When I try to build those parts, all of my C++ translators cough up the warning you saw. The translators are flagging possible (but not inevitable) undefined behavior. From the C++ Standard <a href="#4">[4]</a>:</p>

<BLOCKQUOTE>
<p>If the object being deleted has incomplete class type at the point of deletion and the complete class has a non-trivial destructor or a deallocation function, the behavior is undefined.</p>
</BLOCKQUOTE>

<p>The undefined behavior's context is somewhat complicated:</p>

<UL><LI>   Class type <B>C</B> contains an <B>auto_ptr</B> member <B>pimpl_</B>.
<LI>   <B>pimpl_</B>'s destructor directly or indirectly evaluates <B>delete</B> on its owned subobject.
<LI>   That owned subobject is of type <B>CImpl</B>.
<LI>   At the point where the owned subobject is deleted, <B>Cimpl</B> needs to be a complete type; otherwise the program risks undefined behavior. (The translators flag this risk.)
<LI>   <B>CImpl</B> is a complete type only in <B>C.cpp</B>.</UL>

<p>Conclusion: to avoid undefined behavior, the owned <B>CImpl</B> subobject must be deleted in <B>C.cpp</B>.</p>
<p>Corollary: to avoid undefined behavior, the containing <B>C</B> object must be destroyed in <B>C.cpp</B>.</p>
<p>Reality: <B>C</B> objects are destroyed anywhere but <B>C.cpp</B>.</p>
<p><B>C</B> does not declare an explicit destructor. To compensate, the translators provide an implicit destructor that acts as if it were declared:</p>

<pre>
class C
    {
    // ...
public:
    inline C::~C();
    };
</pre>

<p>That implicit inline destructor is most likely synthesized within each translation unit that destroys a <B>C</B> object. In <a href="fig1.htm">Figure 1</a>, the only translation unit destroying such an object is <B>main.cpp</B> (after preprocessing). Since <B>CImpl</B> is not a complete type in that translation unit, the implicit destruction of the <B>C</B> object &#151; which begets deletion of the <B>CImpl</B> subobject &#151; yields undefined behavior.</p>
<p>The solution: define an explicit empty <B>C</B> destructor within <B>C.cpp</B>, as I've shown in <a href="fig2.htm">Figure 2</a>. With this change, the implicit <B>C</B> destructors are no longer generated; hence, all <B>CImpl</B> deletion occurs in the context of the explicit <B>C</B> destructor. As <B>Cimpl</B> is a complete type in this context, the <B>Cimpl</B> deletion no longer yields undefined behavior. The order of the universe is thus restored.</p>
<p>Herb's article is an excerpt from his book <I>Exceptional C++.</I> While composing your answer, I emailed Herb about the undefined behavior. From his response, I can affirm the following:</p>

<UL><LI>   The <I>CUJ</I> article is wrong, for the reasons I show here.
<LI>   Between publishing the article and the book, he corrected the error.
<LI>   He's raised this issue as his Guru Of The Week item 62 <a href="#5">[5]</a>.
<LI>   He will explain the problem in greater detail in his next book (presumably a sequel to <I>Exceptional C++</I>).</UL>

<H4><FONT COLOR="#000080">Context-Free const</FONT></H4>
<H4><FONT COLOR="#000080">Q</FONT></H4>

<p> Bobby,</p>
<p>I wonder if you might give me a helping hand on a problem with const pointers. I have a base class <B>B</B> whose instances shall be created by a factory class:</p>

<pre>
struct B
    {
    int id;
    };

struct factory
    {
public:
    static B * const create()
        {
        return new B;
        }
    };
</pre>

<p>The method <B>factory::create</B> shall return a pointer that allows access to <B>B::id</B> but forbids reassignment:</p>

<pre>
int main()
    {
    B *b1 = factory::create();
    B *b2 = factory::create();
    b1-&gt;id = 1; // okay
    b2 = b1;    // okay, too!
    }
</pre>

<p>The sample works as desired if we define <B>b2</B> as:</p>

<pre>
B *const b2 = factory::create();
b1-&gt;id = 1; // okay
b2 = b1;    // error
</pre>

<p>Why don't the pointers <B>b1</B> and <B>b2</B> adapt the characteristics as defined in <B>factory</B>? It would be great if you can help me. (I want to make the pointers' behaviour transparent to the class user.)</p>
<p>Regards &#151; Volker Lermann</p>

<H4><FONT COLOR="#000080">A</FONT></H4>

<p> I've made some changes to your original sample:</p>

<UL><LI>   <B>B</B> is now a struct instead of a class. This change simplifies the <B>B</B> definition, and better represents how this small sample uses <B>B</B>.
<LI>   What you call <B>C</B> I call <B>factory</B>, to make the class's purpose more clear.
<LI>   <B>create</B> is now a static member. This change obviates the need to create a <B>factory</B> object (which you had done in your <B>main</B>).
<LI>   <B>main</B> returns <B>int</B> instead of <B>void</B>, in conformance with the C++ Standard.</UL>

<p>Now on with the show.</p>
<p>If I'm reading your email right, you are misinterpreting <B>const</B>'s role. <B>const</B> is not a "characteristic" that objects "adapt" from one another. <B>const</B> is instead a property established exclusively by an object's declaration, independent of the const properties of any other objects &#151; including those used as initializers.</p>
<p>The <B>const</B> in question comes from the declaration:</p>

<pre>
B * const create()
</pre>

<p><B>const</B> here means exactly one thing: that <B>create</B>'s return value is of type "const pointer to <B>B</B>." That's it <a href="#6">[6]</a>. The const-ness of this return type does not somehow attach itself to <B>b1</B> and <B>b2</B> as they initialize from the return value. No, <B>b1</B> and <B>b2</B> instead acquire their const-ness from their declarations:</p>

<pre>
B *b1 = ...;
B *b2 = ...;
</pre>

<p>These declarations tell us that <B>b1</B> and <B>b2</B> have type "pointer to <B>B</B>." Again, their const-ness is not dictated or influenced by what appears to the right of <B>=</B>.</p>
<p>As you found, changing the <B>b2</B> declaration to</p>

<pre>
B *const b2 = ...;
</pre>

<p>alters the behavior. Now <B>b2</B> is of type "const pointer to <B>B</B>." As before, the const-ness is defined completely by <B>b2</B>'s declaration, and is not influenced by its initializer. When you try to assign to this new <B>b2</B>:</p>

<pre>
b2 = b1;
</pre>

<p>the compiler correctly perceives the violation of <B>b2</B>'s const properties.</p>

<H4><FONT COLOR="#000080">Notes</FONT></H4>

<p><a name="1"></a>[1]  Besides, after last month's columnist exodus, Marc Briand would put a bounty on me if I left!</p>
<p><a name="2"></a>[2]  <B>&lt;http://search.support.microsoft.com/&gt;</B>.</p>
<p><a name="3"></a>[3]  The full-fledged grammar rules appear in subclause 8.3.5 and clause 14.</p>
<p><a name="4"></a>[4]  Quoted from paragraph 5.3.5/5. The Standard defines trivial and non-trivial destructors in subclause 12.4. Many &#151; perhaps most? &#151; classes in "real world" usage have non-trivial destructors.</p>
<p><a name="5"></a>[5]  <B>&lt;http://www.peerdirect.com/resources/gotw062a.html&gt;</B>. </p>
<p><a name="6"></a>[6]  Actually, the <B>const</B> has no net effect on the returned value. <B>create</B> is returning a non-const rvalue. Such an rvalue is not cu-qualified (subclause 3.10/9). Translation: the presence or lack of <B>const</B> doesn't change the rvalue's actual behavior. Even if <B>create</B>'s return type were <B>B*</B>, you still couldn't modify the returned rvalue.</p>

<p><i><B>Bobby Schmidt</B> is a freelance writer, teacher, consultant, and programmer. He is also an alumnus of Microsoft, a speaker at the Software Development and Embedded Systems Conferences, and an original "associate" of (Dan) Saks &amp; Associates. In other career incarnations, Bobby has been a pool hall operator, radio DJ, private investigator, and astronomer. You may summon him on the Internet via <B>BobbySchmidt@mac.com</B>.</i></p>

<h4><a href="../../../source/2000/jun00/schmidt.zip">Get Article Source Code</a></h4>

</blockquote></body></html>
