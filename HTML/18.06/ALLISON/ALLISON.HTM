<HTML>   
     <HEAD>
<TITLE>June 2000/import java.*</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjun.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">import java.*: Strings</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Chuck Allison</FONT></H3>

<BLOCKQUOTE>
<p>Every language lets you manipulate text to some degree. Java is stronger in this regard than most.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>Like many of the generation of "seasoned" programmers, my career in coding began with number crunching. Most of the time my FORTRAN programs just emitted numbers accompanied by terse labels. As I stood in line at the university computing center to submit my deck of punched cards to the IBM OS/360 expediters (as they were called), I would feel sorry for the COBOL programmers who hefted decks 10-20 times the size of mine. "The poor things," I would mutter to myself, "their hundreds of cards only print a silly report while my less-than-one-inch deck solves a system of differential equations. I hope I never have to learn that stupid language!" I didn't. But when it came time to report my findings in a more formal way, I had to get out a typewriter.</p>
<p>Don't get me wrong. I'm pleased and proud to never have written a single line of COBOL, but FORTRAN IV's string handling capabilities were nothing to write home about, manually or electronically. No string data type, no dynamic memory allocation, no string nothing. When I left school to embark on a career as a "scientific programmer," I found that business required at least as much text and data processing as mathematics, and found myself wanting a more suitable programming language. And if you want the whole truth, let me admit that most of the projects at my first job used COBOL for I/O.</p>

<H4><FONT COLOR="#000080">Back to BASICs</FONT></H4>

<p>Once when I needed to do some sophisticated string manipulation, someone suggested I use SNOBOL. "Sure, why not? It's just another programming language," I thought. Ha! I just wasn't ready for such a weird syntax. Then I remembered having run across BASIC in one of my college classes. Like most "real programmers," I had dismissed it as a toy, but boy, I certainly could have used a <B>+</B> operator for concatenation or a <B>MID$()</B> for searching right about then! But BASIC wasn't available in our environment, and besides, C was becoming the language of choice almost everywhere, so I quickly learned the joys of null-terminated arrays of <B>char</B>. And <B>malloc</B>. And <B>realloc</B>. And memory leaks.</p>
<p>So here we are programming in Internet Time and have now, with C++ and Java, come full circle to what BASIC provided originally: strings that manage their own memory. What took so long? I wish I knew.</p>
<p>Java provides two string classes: <B>String</B> and <B>StringBuffer</B>. Both are defined in the package <B>java.lang</B>, and both represent sequences of <B>char</B> (a 16-bit Unicode character). The key difference between the two classes is that <B>String</B> objects are immutable, and hence can be easily pooled and shared. Whenever you use a string literal (characters between pairs of double quotes), the JVM (Java Virtual Machine) first checks if it has appeared previously. If not, the JVM stores the literal in the string pool, and returns a reference to it. The next time you use that literal, the JVM just gives you back a reference to it, so all occurrences of a particular string literal refer to a single <B>String</B> instance. You can even request a reference for a string built at run time, as the program in <a href="fig1.htm">Figure 1</a> illustrates.</p>
<p>The variable <B>s2</B> refers to the same object as <B>s1</B>, since the compiler can determine at compile time that the character sequences are the same. A new object is explicitly created for <B>s3</B>, so the references are distinct. (Let this be a lesson on how not to create strings from literals &#151; if there is no need for a distinct object, don't use <B>new</B>). <B>s4</B> is also a unique object since its value is determined at run time. To force a run-time check as to whether the string being assigned already exists in the string pool, use function <B>intern</B>, as I did for <B>s5</B>.</p>
<p>The <B>String</B> class comes with the usual methods for searching and extracting substrings, changing case (for locales where case applies), and converting strings to numbers. Here's a grep-like program that extracts lines from a text file that contain a given string:</p>

<pre>
import java.io.*;

class Search
{
   public static void
   main(String[] args)
      throws IOException
   {
      // Read Standard Input:
      BufferedReader in =
         new BufferedReader(
            new InputStreamReader(
               System.in));

     // Process each line:
     String line;
     while ((line = in.readLine())
               != null)
        if (line.indexOf(args[0])&gt;=0)
           System.out.println(line);
   }
}
</pre>

<p>The <B>indexOf</B> method returns the zero-based index where its argument appears in its string, or returns -1 if it's not there. Like many of <B>String</B>'s methods, there is also version of <B>indexOf</B> that specifies the search start position as well (i.e., <B>indexOf(String str, int fromIndex)</B>), so you can find multiple instances within a single line. <B>String</B> also includes a <B>lastIndexOf</B> method for searching from the right, and <B>startsWith</B> and <B>endsWith</B> methods, which are special cases of the <B>indexOf</B> and <B>lastIndexOf</B>, respectively.</p>
<p>Executing <B>Search.java</B> on its own source searching for the string <B>"read"</B> gives the following output:</p>

<pre>
while ((line = in.readLine()) != null)
</pre>

<p>That's because <B>indexOf</B> is case-sensitive, as you would expect, so the lines that contain the substring <B>"Read"</B> don't qualify. To extract lines without regard to case, I'll have to convert both the search string and each line to the same case (see <a href="fig2.htm">Figure 2</a>). Although the <B>String</B> class includes an <B>equalsIgnoreCase</B> method, that won't help here since it compares entire strings and I'm looking for a substring. This time the output is as follows:</p>

<pre>
C:&gt; java Search2 read &lt;Search.java
        BufferedReader in =
            new BufferedReader(
                new InputStreamReader(System.in));
        while ((line = in.readLine()) != null)
</pre>

<p>The program in <a href="fig3.htm">Figure 3</a> reads standard input and uses <B>indexOf</B> and the <B>substring</B> method to replace all occurrences of the string in <B>args[0]</B> with the string in <B>args[1]</B>. The output in <a href="fig3.htm">Figure 3</a> comes from the following command line:</p>

<pre>
C:&gt; java Replace in $$$ &lt;Replace.java
</pre>

<p>Both <B>String</B> and <B>StringBuffer</B> are thread-safe: <B>String</B> because its instances are immutable, and <B>StringBuffer</B> because its mutator methods are synchronized (hence <B>String</B> is more efficient with respect to thread overhead). While most of the time <B>String</B> does the job, <B>StringBuffer</B> is more efficient if you need to append to a string repeatedly. In fact, <B>StringBuffer</B> is used internally whenever you use the <B>+</B> concatenation operator with instances of <B>String</B>. The expression <B>a + b + c</B>, for example, is equivalent to the following expression:</p>

<pre>
new StringBuffer(a).append(b).
       append(c).toString();
</pre>

<p>Using <B>StringBuffer</B> instead of <B>String</B> can sometimes bring noticeable gains in efficiency. To see this, replace the body of the inner <B>while</B> loop in <a href="fig3.htm">Figure 3</a> with the following:</p>

<pre>
{
    StringBuffer temp =  
      new StringBuffer(newLine);
    newLine =  
      temp.replace(pos2,  pos2 + fromLen,
    args[1]).toString();
    pos1 = pos2 + toLen;
}
</pre>

<p>Running <B>javap -c Replace</B> (the byte-code disassembler) both before and after the change reveals that the <B>StringBuffer</B> version generates 11 fewer byte code instructions. <B>StringBuffer.replace</B> works within a single buffer, allocating memory only when necessary. Since the creation of the substrings is not needed in the second version, the code is more efficient. For further optimization, if you know the largest size a <B>StringBuffer</B> will ever need to be, you can allocate it once and for all with the method <B>StringBuffer.ensureCapacity(int minimumCapacity)</B>. The loop above would be even simpler if <B>StringBuffer</B> had an <B>indexOf</B> operator, since it could just declare <B>newLine</B> as a <B>StringBuffer</B> and do without <B>temp</B> altogether. Too bad the Java library folks didn't include it.</p>
<p>The program in <a href="fig4.htm">Figure 4</a> illustrates the method <B>String.charAt</B> in determining whether a string is a palindrome (i.e., whether it reads the same backward as it does forward). If <B>String</B> had a <B>reverse</B> method, as <B>StringBuffer</B> does, you might be tempted to use it to just compare a string to its reversal, but that would be much less efficient than using <B>Palindrome.isSymmetric</B>.</p>
<p>Palindromes are more interesting and readable if they can have whitespace and punctuation, which you then ignore when testing for symmetry. (Such strings are called imperfect palindromes.) The program in <a href="fig5.htm">Figure 5</a> does just that by using <B>StringBuffer.deleteCharAt</B> in <B>Palindrome2.normalize</B> to strip out non-letters (via <B>Character.isLetter</B>) before calling <B>isSymmetric</B>. The <B>normalize</B> method also changes each character to lower case so the comparison will be case insensitive. The logic is a little tricky: notice that the variable <B>i</B> is incremented only if the character is not deleted. Since the length of the string can change, I also have to call <B>s.length</B> explicitly every time the loop iterates, instead of caching it like I did in <a href="fig4.htm">Figure 4</a>. And once again, I have to traverse the string one character at a time, searching for non-letters, since <B>StringBuffer</B> does not have an <B>indexOf</B> method.</p>

<H4><FONT COLOR="#000080">Tokenizing</FONT></H4>

<p>Much of the time a program that processes text needs to extract tokens. Java provides a class in the <B>java.util</B> package, <B>StringTokenizer</B>, for this purpose. In its simplest application, a <B>StringTokenizer</B> object extracts tokens delimited by whitespace from a string. The program in <a href="fig6.htm">Figure 6</a> places up to 256 space-delimited tokens from the file <B>tokens.dat</B> in <a href="fig7.htm">Figure 7</a> into an array, converts them to lower case, and sorts them with the <B>Arrays.sort</B> algorithm. (I'll say more about <B>java.util.Arrays</B> in the September 2000 issue.) After initializing a <B>StringTokenizer</B> with the string to parse, the <B>hasMoreTokens</B> method will return <B>true</B> if there are any tokens left to extract, and <B>nextToken</B> will return the next one as a <B>String</B>. You can call <B>StringTokenizer.countTokens</B> at any time if you want to know how many tokens are left without advancing the tokenization position.</p>
<p>Whitespace-only delimiters are not useful very often, however. The output in <a href="fig6.htm">Figure 6</a>, for example, contains unwanted punctuation. To extract only alphanumeric tokens, you can give a <B>StringTokenizer</B> an optional string representing the delimiters to ignore during tokenization, as I did with the string <B>delims</B> in <a href="fig8.htm">Figure 8</a>. This behaves pretty much the same as <B>strtok</B> from the standard C library, except that the string is not altered in the process. And like <B>strtok</B>, <B>nextToken</B> can take an optional string argument, so you can change the set of delimiters with each call.</p>
<p>Yet another usage of <B>StringTokenizer</B> extracts the delimiters themselves, one character at a time. In <a href="fig9.htm">Figure 9</a>, I give the <B>StringTokenizer</B> constructor a third argument of <B>true</B>, which tells the object that I want only the delimiters back. I use this behavior to count the number of vowels in the input file.</p>

<H4><FONT COLOR="#000080">Summary</FONT></H4>

<p>Java's string classes provide most of what you need for everyday text processing: substring searching and construction, case conversion, and basic token parsing. I hope you managed to pick up on a bit of irony in this article, however. I began by talking about number crunching, yet I've carefully avoided talking about formatting numeric I/O. There's a good reason, which you'll see in my next installment when I explain locales and Java's formatting classes. (Yes formatting is in separate classes, not in format strings!)</p>

<p><i><B>Chuck Allison</B> is Consulting Editor and a columnist with <I>CUJ</I>. He is the owner of Fresh Sources, a company specializing in object-oriented software development, training, and mentoring. He has been a contributing member of J16, the C++ Standards Committee, since 1991, and is the author of <I>C and C++ Code Capsules: A Guide for Practitioners</I>, Prentice-Hall, 1998. You can email Chuck at <B>cda@freshsources.com</B>.</i></p>

<h4><a href="../../../source/2000/jun00/allison.zip">Get Article Source Code</a></h4>

</blockquote></body></html>
