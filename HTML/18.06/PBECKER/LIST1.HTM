<HTML><HEAD>
<TITLE>June 2000/The Journeyman's Shop/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: Class definition for floating-point class fp</A></h4>
<pre>
// fp.h
//    class fp

#ifndef FP_H
#define FP_H

#include &lt;iosfwd&gt;
#include &lt;string&gt;

class fp
{    // naive floating-point implementation

public:

    fp();
    explicit fp(const char *);
    explicit fp(double);
    
    fp&amp; operator += (const fp&amp;);
    fp&amp; operator -= (const fp&amp;);
    fp&amp; operator *= (const fp&amp;);
    fp&amp; operator /= (const fp&amp;);
    friend fp operator - (const fp&amp;);
    
    friend bool operator == (const fp&amp;, const fp&amp;);
    friend bool operator != (const fp&amp;, const fp&amp;);
    friend bool operator &lt;  (const fp&amp;, const fp&amp;);
    friend bool operator &lt;= (const fp&amp;, const fp&amp;);
    friend bool operator &gt;  (const fp&amp;, const fp&amp;);
    friend bool operator &gt;= (const fp&amp;, const fp&amp;);

    static const fp zero;
    static const fp one;
    static const fp two;

    friend std::string to_string(const fp&amp;);
    friend std::ostream&amp; operator &lt;&lt; (std::ostream&amp;, const fp&amp;);

private:

    bool eq(const fp&amp;) const;
    bool lt(const fp&amp;) const;
    
    fp&amp; add(const fp&amp;, const fp&amp;);
    fp&amp; normalize(int, long);
    void convert(double);
    long lf() const;
    
    enum fp_exception
        {
        div_by_zero,
        exp_underflow,
        exp_overflow
        };

    void exception(fp_exception);

    bool is_neg;
    unsigned char exp;
    int frac;

};

fp operator + (const fp&amp;, const fp&amp;);
fp operator - (const fp&amp;, const fp&amp;);
fp operator * (const fp&amp;, const fp&amp;);
fp operator / (const fp&amp;, const fp&amp;);

inline bool operator == (const fp&amp; f1, const fp&amp; f2)
    {    // return f1 equal to f2
    return f1.eq(f2);
    }

inline bool operator != (const fp&amp; f1, const fp&amp; f2)
    {    // return f1 not equal to f2
    return !f1.eq(f2);
    }

inline bool operator &lt;  (const fp&amp; f1, const fp&amp; f2)
    {    // return f1 less than f2
    return f1.lt(f2);
    }

inline bool operator &lt;= (const fp&amp; f1, const fp&amp; f2)
    {    // return f1 less than or equal to f2
    return !f2.lt(f1);
    }

inline bool operator &gt;  (const fp&amp; f1, const fp&amp; f2)
    {    // return f1 greater than f2
    return f2.lt(f1);
    }

inline bool operator &gt;= (const fp&amp; f1, const fp&amp; f2)
    {    // return f1 greater than or equal to f2
    return !f1.lt(f2);
    }

#endif    /* FP_H */

</pre></body></html>
