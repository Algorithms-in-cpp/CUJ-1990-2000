<HTML>   
     <HEAD>
<TITLE>August 2000/Creating an Index Table in STL</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocaug.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Tips</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">C/C++ Tip #1: Creating an Index Table in STL</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Craig Hicks</FONT></H3>

<HR>
<BLOCKQUOTE>
<p>Often when sorting an array it is not desirable to actually rearrange the elements of the array; what is needed is an index table describing which number element is the first, which is second, etc. There are two good reasons for creating such tables:</p>
<p>1)  The elements may be large and expensive to copy &#151; and elements will be copied if the array itself is sorted.</p>
<p>2)  There are other distinct arrays in one-to-one correspondence with the array whose order is being queried.</p>
<p>Note that rearranging the target instead of obtaining an index table destroys the correspondence described in 2). Thus, obtaining an index table is not just an efficiency measure; it is sometimes required for proper functionality.</p>
<p>Unfortunately, I can find no function in the STL library to make an index table. The code below implements a template function <B>sort_idxtbl</B>, which calls <B>std::sort</B> and makes an index table.</p>

<pre>
// program sort_idxtbl(...) to make a permuted array of indices
#include &lt;vector&gt;
#include &lt;algorith&gt;

template &lt;class RAIter&gt;
struct sort_idxtbl_pair
   {
       RAIter it;
       int i;
       bool operator &lt; (const sort_idxtbl_pair&amp; s)
       { return (*it) &lt; (*(s.it)); }
       void set(const RAIter&amp; _it, int _i) { it=_it; i=_i; }
       sort_idxtbl_pair() {}
   } ;

template &lt;class RAIter&gt;
void sort_idxtbl(RAIter first, RAIter last, int* pidxtbl)
{
    int iDst = last-first;
    typedef std::vector&lt; sort_idxtbl_pair&lt;RAIter&gt; &gt; V;
    V v(iDst);

    int i=0;
    RAIter it = first;
    V::iterator vit = v.begin();
    for (i=0; it&lt;last; it++, vit++, i++)
       (*vit).set(it,i);

    std::sort(v.begin(), v.end());

    int *pi = pidxtbl;
    vit = v.begin();
    for (; vit&lt;v.end(); pi++, vit++)
        *pi = (*vit).i;
}

main()
{
   int ai[10] = { 15,12,13,14,18,11,10,17,16,19 };

   cout &lt;&lt; "#################" &lt;&lt; endl;
   std::vector&lt;int&gt; vecai(ai, ai+10);
   int aidxtbl[10];
   sort_idxtbl(vecai.begin(), vecai.end(), aidxtbl);

   for (int i=0; i&lt;10; i++)
      cout &lt;&lt; "i=" &lt;&lt; i
           &lt;&lt; ", aidxtbl[i]=" &lt;&lt; aidxtbl[i]
           &lt;&lt; ", ai[aidxtbl[i]]=" &lt;&lt; ai[aidxtbl[i]]
           &lt;&lt; endl;
   cout &lt;&lt; "#################" &lt;&lt; endl;

}
</pre>

<p>Note that function <B>sort_idxtbl</B> is specialized to use the STL template function <B>sort</B>, which is usually based on the Quicksort algorithm. Applying <B>sort_heap</B>, <B>stable_sort</B>, or any other sort of sort would seem to require repetitive cutting and pasting &#151; at least I see no obvious way to include them as a template parameter, since the sort functions are not classes. I welcome other readers to show how this might be done.</p>
<p><I>[There is at least one way to specify the sort algorithm as a template parameter &#151; by wrapping the algorithm in a functor. But you wind up doing about the same amount of typing. I too would like to see a better way to handle this problem. &#151; mb] 

<p><i>Thanks to Craig Hicks </I>(<B>hicks@kgk.co.jp</B>)<I> for this tip. If you have a C/C++ programming tip and can write it up in 400 words or less, send it to </I><B>mbriand@cmp.com</B><I>. If we print your tip, we'll send you a nice </I>CUJ<I> sweater and a copy of the </I>CUJ<I> CD-ROM.</i></p>

</blockquote></body></html>
