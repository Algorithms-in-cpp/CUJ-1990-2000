<HTML>   
     <HEAD>
<TITLE>August 2000/Uncaught Exceptions</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocaug.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Uncaught Exceptions: Soft Geek Cafe</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Bobby Schmidt</FONT></H3>

<BLOCKQUOTE>
<p>Outsmarting the compiler, and/or the Standard C and C++ libraries, can sometimes take a remarkable amount of trickery.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>Copyright &copy; 2000 Robert H. Schmidt</p>
<p>Growing up in southwestern Ohio, I was a devoted fan of the Cincinnati Reds major league baseball team. My interest in them peaked during my teenage years, which happily coincided with the Big Red Machine era of the 1970s. During that decade, the Reds played in four World Series, winning two of them.</p>
<p>This year marks the 25th anniversary of the dramatic 1975 World Series between the Reds and the Boston Red Sox. Three members of that Series &#151; Sparky Anderson, Tony Perez, and Carlton Fisk &#151; are being inducted into baseball's Hall of Fame this year. They join others from that Series who are already in the Hall: Johnny Bench, Joe Morgan, and Carl Yastrzemski <a href="#1">[1]</a>.</p>
<p>Microsoft also turns 25 this year. The coincidence of these two silver anniversaries got me thinking: we should put together a programming Hall of Fame. Only our inspiration should come not from Cooperstown, but from the Hard Rock Cafe.</p>
<p>Imagine the scene: as you walk in, the cashier hawks T-shirts and trinkets leftover from last year's trade shows. The menu features Beta Burgers, Nanonachos, and KLOC cola &#151; culinary delights priced at twice their worth. As you dine, you gaze in wonder at Grace Hopper's moth flamb&eacute;, Bill Gates' first subpoenaed email, Dan Saks's last <I>CUJ</I> column, and other programming relics.</p>
<p>I think the arrival of such a place would be a big hit here in Redmond. Until then, I'll content myself with the authentic (if less sublime) geeky shop-talk ambience of Microsoft's cafeterias.</p>

<H4><FONT COLOR="#000080">Refactoring Factories</FONT></H4>

<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> Hello,</p>
<p>Although your answer to Volker Lerman (in your June 2000 column) is correct, it doesn't address all of his concerns, among which was "I want to make the pointers' behavior transparent to the class user." Obviously, one cannot enforce the <B>B *const</B> declaration; but one can make it easily available as a <B>typedef</B>:</p>

<pre>
struct factory
    {
    // ...
    typedef B *const built_type;
    // ...
    };
</pre>

<p>Now the declaration looks natural, as he wants:</p>

<pre>
factory::built_type b1 = factory::create();
</pre>

<p>Thanks for the interesting column, as usual. &#151; Frank Griswold</p>

<H4><FONT COLOR="#000080">A</FONT></H4>

<p> The item you refer to is "Context-Free <B>const</B>" from that June column. In that item, I discussed Volker's <B>factory</B> function, and the nature of the pointer returned by that function. I centered on Volker's desire for the pointer's constness to somehow propagate to other pointers, since that seemed to be the thrust of his question. Your perspective is that Volker also wanted to hide the entire pointer nature of the <B>factory</B>'s returned value.</p>
<p>If Volker hides the pointer in a <B>typedef</B> as you show, and if his users consistently use the <B>typedef</B> name instead of the raw pointer name, then the constness problem he encountered will go away. Unfortunately, that solution relies completely on programmer discipline, since the compiler gladly accepts all of</p>

<pre>
factory::built_type b1 =
   factory::create();
B const *b2 = factory::create();
B *b3 = factory::create();
</pre>

<p>A more robust solution, which for some reason didn't occur to me until now, is:</p>

<pre>
struct B
    {
    mutable int id;
    };

struct factory
    {
public:
    static B const &amp;create()
        {
        return *new B;
        }
    };
</pre>

<p>Now the <B>const</B> properties hold as Volker wants:</p>

<pre>
B b1;
B &amp;b2 = factory::create(); // error
B const &amp;b3 =
        factory::create(); // OK
b3.id = 1;                 // OK
b3 = b1;                   // error
</pre>

<H4><FONT COLOR="#000080">Resuming Exceptions</FONT></H4>

<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> About your column talking about function try blocks, I have to admit that function try blocks were really new to me, so I quickly jumped on CodeWarrior and tried to compile the code. Having played with it a few times, I came across a way to work around the problem of the exception being rethrown in the catch handler, by using a ... <B>goto</B>. (Damn I never thought <B>goto</B>s could be useful in C/C++.) See the attached code.</p>
<p>Of course I guess that such code might fail if <B>container</B> was not composed of only one member but two or more, in which case some of the constructors would probably never be called where we could expect them to be. Furthermore, this also confuses destructors of those members, for example if <B>member::~member()</B> isn't handling well the destruction of a semi-constructed member object, we might run into big trouble. &#151; Christopher Allene</p>

<H4><FONT COLOR="#000080">A</FONT></H4>

<p> My version of your code appears as <a href="list1.htm">Listing 1</a>. When built and run with both Metrowerks CodeWarrior Pro for the Mac, and the EDG translator atop VC++, the program produces</p>

<pre>
throw from member ctor
catch in container ctor
continuing in container ctor
</pre>

<p>as you desire.</p>
<p><a href="list1.htm">Listing 1</a> won't build with Visual C++, which doesn't support function try blocks. Accordingly, I changed the example to use a normal try block instead of a function try block. The result is <a href="list2.htm">Listing 2</a>, which does build with Visual C++.</p>
<p>While your technique apparently works with these systems, it suffers two large problems:</p>

<UL><LI>   The program is ill-formed and shouldn't build at all.
<LI>   Even if the program weren't ill-formed, it would still be ill-advised.</UL>

<p>In subclause 15/2, the C++ Standard is quite clear on the first point:</p>

<BLOCKQUOTE>
A <B>goto</B>, <B>break</B>, <B>return</B>, or <B>continue</B> statement can be used to transfer control out of a try block or handler, but not into one.</p>
</BLOCKQUOTE>

<p>Of the translators I've tried, the only one to get it right is EDG in its "strict" mode:</p>

<pre>
error #656: transfer of control
   into a try block
</pre>

<p>Assume for the sake of argument that EDG is wrong, and that the programs are actually well formed. As you have already guessed, the programs still suffer a giant problem: both <B>container</B> and <B>member</B> are constructed with fractured states. In effect, the objects are fully constructed physically, but only partially constructed logically.</p>
<p>This presents a host of difficulties, most notably during destruction. Destructors are called only for fully constructed objects. Since <B>container</B> and <B>member</B> are fully constructed, their destructors are called &#151; even though some parts of those objects ought not be destroyed.</p>
<p>To make this technique viable, every object would have to record how much of itself is intact, then ensure that only those parts are referenced and destroyed. For a simple case such as yours, the instrumentation is not heinous; but for a more complex object, especially one containing array and base-class subobjects, the technique would be untenable.</p>

<H4><FONT COLOR="#000080">Oops!...I Did It Again</FONT></H4>

<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> How do I get information about an exception (who threw it, what caused it, etc.) when handling all exceptions in one handler? &#151; V. Krishnan</p>
<H4><FONT COLOR="#000080">A</FONT></H4>
<p> You don't, at least not directly.</p>
<p>When a handler catches an exception, it has no innate knowledge of who threw the exception or why. No Standard Library function or object tracks the exception's origin. At best, a handler is guaranteed to know only the type and value of the thrown exception.</p>
<p>At the same time, nothing prevents you from throwing "smart" objects. Such objects can directly contain, or hold pointers to, a context describing their origin and purpose. <a href="list3.htm">Listing 3</a> shows a simple example.</p>
<p>You can extend this technique to allow an audit trail: instead of remembering just a single creator and reason, the exception could also maintain a list of every function it passed through on its way up the call stack &#151; provided those functions caught, tagged, and rethrew the object. I leave that extended version as an Exercise for the Reader.</p>
<p>For any of these techniques to work, you cannot catch via</p>

<pre>
catch (...)
</pre>

<p>Thrown exceptions are unnamed temporary objects. When you catch an exception via</p>

<pre>
catch (oops const &amp;e)
</pre>

<p>you bind the local name <B>e</B> to at least a portion of the thrown temporary <a href="#2">[2]</a>. However, when you catch via</p>

<pre>
catch (...)
</pre>

<p>you have no opportunity to name the exception, or even know the exception's type.</p>

<H4><FONT COLOR="#000080">Pencil Sharpener</FONT></H4>

<H4><FONT COLOR="#000080">Q</FONT></H4>

<p> Hello there.</p>
<p>I don't know if you do questions on the Standard library, but I thought this question (actually the answer) may be of some general interest:</p>
<p>I've just finished writing what must be the two-millionth date class ever written. Having admitted this, you know that I'm not the sharpest pencil in the box. So, my question is hopefully easy for you. How do you obtain from the "locale" the order in which to print the components of a date? That is, should it be MM/DD/YY, or should it be DD/MM/YY, etc. Also, what is the desired separator character?</p>
<p>The <B>localeconv</B> function will tell more than you ever wanted to know about formatting money, but nothing about formatting dates (or times). Am I not allowed to format dates myself or does the Standard require me to use <B>strftime</B>? &#151; Norm Olsen</p>

<H4><FONT COLOR="#000080">A</FONT></H4>

<p> I assume that you are using Standard C, since your question mentions only routines available in the Standard C Library. If you confine yourself to that library, then you have no direct way to extract a locale's preferred date ordering. As you already know, the library will format the date for you via <B>strftime</B>; however, you apparently want to format the date yourself in a locale-correct way.</p>
<p>With the C Library, I can think of only one (indirect) way to extract a locale's date ordering: create the locale-aware date via <B>strftime</B> using the <B>%x</B> format, parse the result to determine its field ordering, and then map that ordering to a set of possible orderings (probably in an enumeration).</p>
<p>My algorithm assumes that you can reliably scan and parse the formatted date. While this assumption may be true for your particular environment, it is not generally true across platforms, especially since locales beyond the <B>"C"</B> locale are not portable.</p>
<p>If you are programming in C++, you have a more pleasant option, for the Standard C++ Library lets you directly discover the a locale's date ordering:</p>

<pre>
#include &lt;locale&gt;

std::locale loc("C");
typedef std::time_get&lt;char&gt; tg;
tg const &amp;facet = std::use_facet&lt;tg&gt;(loc);
std::time_base::dateorder order = facet.date_order();
</pre>

<p>What this all means:</p>

<UL><LI>   <B>std::locale loc("C")</B> creates an object encapsulating the <B>"C"</B> locale's information. I pick the <B>"C"</B> locale because it's guaranteed to exist on all implementations. You can replace <B>"C"</B> with your locale name of choice.
<LI>   <B>std::time_get&lt;char&gt;</B> is a locale facet, instantiated from the class template <B>std::time_get</B>. <B>tg</B> is my <B>typedef</B> shorthand for <B>std::time_get&lt;char&gt;</B>.
<LI>   <B>std::use_facet&lt;tg&gt;</B> is an instantiation of the function template <B>std::use_facet</B>.
<LI>   The call <B>std::use_facet&lt;tg&gt;(loc)</B> returns the <B>tg</B> facet of <B>loc</B>. I store that returned facet in <B>facet</B>. The Standard guarantees that <B>tg</B> (which is really <B>time_get&lt;char&gt;</B>) exists as a facet of each locale; thus, I didn't have to test for its existence in <B>loc</B>.
<LI>   <B>facet</B>'s members mostly scan and parse streams of <B>char</B>s, and then convert the parsed <B>char</B>s to date fields. However, one facet member (<B>date_order</B>) doesn't parse anything, but instead yields the preferred date ordering.
<LI>   I save that preference in order, which has the enumeration type <B>std::time_base::dateorder</B>. Possible values within the enumeration are <B>no_order</B>, <B>dmy</B>, <B>mdy</B>, <B>ymd</B>, and <B>ydm</B>.</UL>

<p>By the time the dust settles, <B>order</B> contains one of five enumeration values, depending on <B>loc</B>'s preferred date ordering.</p>
<p>You also wanted to know a locale's preferred date separator. If there's a clean way to figure that out, I sure can't find it. My research shows no evidence that a locale holds any notion of a date separator. I invite Diligent Readers who know better to enlighten me <a href="#3">[3]</a>.</p>

<H4><FONT COLOR="#000080">Notes</FONT></H4>

<p><a name="1"></a>[1]  Had he not been banned from baseball, Pete Rose &#151; who was also part of the '75 Reds &#151; certainly would be in the Hall by now.</p>
<p><a name="2"></a>[2]  If the original thrown object were of type <B>oops</B>, then <B>e</B> would bind to that entire object. If the thrown object were of a type derived from <B>oops</B>, then <B>e</B> would bind only to the <B>oops</B> portion of that object.</p>
<p><a name="3"></a>[3]  If you're desperate enough, you can reverse engineer the separator with the <B>strftime</B> trick I described earlier.</p>

<p><i><B>Bobby Schmidt</B> is a freelance writer, teacher, consultant, and programmer. He is also an alumnus of Microsoft, a speaker at the Software Development and Embedded Systems Conferences, and an original "associate" of (Dan) Saks &amp; Associates. In other career incarnations, Bobby has been a pool hall operator, radio DJ, private investigator, and astronomer. You may summon him on the Internet via <B>BobbySchmidt@mac.com</B>.</i></p>

<h4><a href="../../../source/2000/aug00/schmidt.zip">Get Article Source Code</a></h4>


</blockquote></body></html>
