<HTML><HEAD>
<TITLE>August 2000/A Simple Persistence Framework/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2: The POBroker template class</A></h4>
<pre>
#ifndef POBROKER_H
#define POBROKER_H

#include &lt;sys/stat.h&gt;

#include &lt;map&gt;
#include &lt;vector&gt;

#include "POBbase.h"
#include "Gbiostream.h"

template&lt;class T&gt;
class POBroker : public POBbase&lt;class T&gt;
{
public:

    POBroker();
    POBroker(const char*);

    POBbase&lt;T&gt;::OBJ_ID  writeObj(const T&amp;) throw (POBException*);
    T* readObj(POBbase&lt;T&gt;::OBJ_ID) throw (POBException*);
    POBbase&lt;T&gt;::OBJ_ID  readObj(T*&amp;) throw (POBException*);
    bool findObj(POBbase&lt;T&gt;::OBJ_ID);
    POBbase&lt;T&gt;::OBJ_ID  modifyObj(T*) throw (POBException*);
    bool deleteObj(POBbase&lt;T&gt;::OBJ_ID, T*&amp;) throw (POBException*);
    
};

template&lt;class T&gt; 
POBroker&lt;T&gt;::POBroker()
{
}

template&lt;class T&gt; 
POBroker&lt;T&gt;::POBroker(const char* fn)
    : POBbase(fn)
{
}

template&lt;class T&gt; 
bool POBroker&lt;T&gt;::findObj(POBbase&lt;T&gt;::OBJ_ID oi)
{
    streampos loc;
    return POBbase&lt;T&gt;::findObj(loc, oi);
}

template&lt;class T&gt; 
POBbase&lt;T&gt;::OBJ_ID POBroker&lt;T&gt;::writeObj(const T&amp; t)
    throw (POBException*)
{
    POBbase&lt;T&gt;::OBJ_ID oi = insertObj(t);
    
    return oi;
}

template&lt;class T&gt; 
T* POBroker&lt;T&gt;::readObj(POBbase&lt;T&gt;::OBJ_ID oi)
    throw (POBException*)
{
    T* t;

    //*-----------------------------------
    //* random read
    //*-----------------------------------
    streampos loc;
    if(POBbase&lt;T&gt;::findObj(loc, oi)) {
        int sz;
        POBbase&lt;T&gt;::read(POBbase&lt;T&gt;::RANDOM, sz, loc, t);
        POBbase&lt;T&gt;::add2map((long)t, oi, loc, sz);
        return t;
    }
    return NULL;
}

template&lt;class T&gt;
POBbase&lt;T&gt;::OBJ_ID POBroker&lt;T&gt;::readObj(T*&amp; t)
    throw (POBException*)
{
    int sz;
    //*-----------------------------------
    //* sequential read
    //*-----------------------------------
    streampos loc;
    POBbase&lt;T&gt;::OBJ_ID oi = 
        POBbase&lt;T&gt;::read(POBbase&lt;T&gt;::SEQUENCE, sz, loc, t);
    if(oi)
    {
        POBbase&lt;T&gt;::add2map((long)t, oi, loc, sz);
    }
    return oi;
}

template&lt;class T&gt; 
POBbase&lt;T&gt;::OBJ_ID  POBroker&lt;T&gt;::modifyObj(T* t) 
    throw (POBException*)
{
    return POBbase&lt;T&gt;::changeObj(t);
}

template&lt;class T&gt; 
bool  POBroker&lt;T&gt;::deleteObj(POBbase&lt;T&gt;::OBJ_ID oi, T*&amp; t)
    throw (POBException*)
{
    return POBbase&lt;T&gt;::removeObj(oi, t);
}

#endif 
</pre></body></html>
