<HTML>
<HTML><HEAD>
<TITLE>August 2000/A Simple Persistence Framework/Sidebar</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<H3 align=center><FONT COLOR="#000080">Using Multiway Trees for Fast Access</FONT></H3>

<HR>

<BLOCKQUOTE>
<p><a href="fig2.htm">Figure 2</a> shows the layout of a multiway tree. The nodes of a multiway tree contain more than one key, and the keys in a node are always in sorted order. Both parent and child nodes have these properties.</p>
<p><a href="fig2.htm">Figure 2</a> illustrates the following pattern:</p>
<p>All the keys in Child0 are less than Key0 <br>
All the keys in Child1 are greater than Key0 but less than Key1<br>
All the keys in Child2 are greater than Key1 but less than Key2<br>
 ... All the keys in Childn-1 are greater than Keyn-2 but less than Keyn-1<br>
All the keys in Childn are greater than Keyn-1.</p>
<p>When the nodes of a mutliway tree are not full, considerable storage is wasted. Despite this possible waste of storage, multiway trees are frequently used since the monetary cost of storing data on an external direct-access device like a disk is very inexpensive.</p>
<p>Search efficiency can be increased by increasing the multiway tree <I>order,</I> the maximum number of children at each node. Given that the tree must hold a certain number of keys, increasing the order of the tree decreases its depth. The shorter the tree, the less nodes that must be accessed during a search. As noted before, accessing a node in external storage takes a lot of time, so a tree with a higher order leads to more efficent searching.</p>
<p><a href="list8.htm">Listing 8</a> shows a partial definition of the <B>DskMBtree</B> class.</p>
<p>I define the following constants for use with the multiway tree:</p>

<pre>
enum { MAXKEYS=101, MID=MAXKEYS/2 };
</pre>

<p><B>MAXKEYS</B> specifies the multiway tree order as <B>101</B>. Class <B>BTNode</B> (<a href="list8.htm">Listing 8</a>) is a class that holds a multiway tree node via its data member, <B>BTnodeStruct</B>, which is repeated here:</p>

<pre>
typedef struct BTnodeStruct {
    short keycount;
    short numtrees;
    unsigned long key[MAXKEYS];
    streampos data[MAXKEYS];
    streampos child[MAXKEYS+1];
};
</pre>

<p>The <B>key</B> field holds the OIDs; the <B>data</B> field holds the positions of the objects in the object file. The <B>child</B> field contains pointers to child nodes. Since the multiway tree is maintained in external storage, the block of storage that makes up a node must be read into memory before any of its fields (<B>keycount</B>, <B>numtrees</B>, <B>child</B>) can be accessed.</p>
<p>The <B>DskMBTree</B> member function <B>open_root</B> opens a multiway tree file. <B>get_root</B> reads a root node from a multiway tree file; if no root node exists, it calls <B>makeroot</B> to contruct the root node.</p>
<p><B>DskMBTree</B> contains two <B>find</B> functions.</p>

<pre>
find(int&amp; pos, slist&lt;PATHNODE&gt;&amp; path,
   const unsigned long key)
</pre>

<p>This function finds a key, starting the search from the root node. Upon return, <B>pos</B> will contain an index for use with the <B>key</B>, <B>data</B>, and <B>child</B> arrays contained in the node.</p>

<pre>
find(int&amp; pos, BTnode&amp; node, slist&lt;PATHNODE&gt;&amp; path, 
   const unsigned long key)
</pre>

<p>This function finds a key by starting the search from a specified node, which may or may not be a root node.</p>
<p>When searching a node, these two functions put all nodes encountered into a single-linked list of type <B>slist&lt;PATHNODE&gt;</B>, where a <B>PATHNODE</B> is defined by the following typedefs:</p>

<pre>
typedef pair&lt;streampos, int&gt; NODEINDEX;
typedef pair&lt;BTnode, NODEINDEX&gt; PATHNODE;
</pre>

<p>Storing nodes in the linked list makes it easy to find a node's parent, simply by examining the previous node in the path. A second, and expensive external search is not required.</p>
<p>Some other functions of class <B>DskMBTree</B> include:</p>

<pre>
child(streampos, BTnode&amp;);
</pre>

<p>This function reads a node from external storage.</p>

<pre>
makenode(const BTnode&amp;);
</pre>

<p>This function writes a node to the disk file.</p>
<p>The multiway tree is built from the bottom up. When the bottom node is full it is split into two nodes, and its middle key is promoted up to its parent, using a function named <B>split</B>.</p>
<p>The function <B>deleten</B> is used to delete a node from the multiway tree; it is a relatively big function because <B>deleten</B> not only deletes a node but also tries to keep the tree as balanced as possible.</p>
<p>Functions <B>split</B> and <B>deleten</B> are not shown here, but they are available with the full source code listings at <B>www.cuj.com/code</B>.</p>
<p>The code to manage the multiway tree also defines a class <B>BTnodeAvl</B>, which is similar in function to the <B>objAvl</B> class seen before. <B>BTnodeAvl</B> is a class that performs disk storage management. However, its implementation is much simpler than <B>objAvl</B>'s, because nodes of a multiway tree are of fixed size. <B>BTnodeAvl</B> acts as a stack. Newly deleted nodes are pushed on top of the space available list, and empty nodes are popped off the top when additional space is needed.</p>
<p>Although this implementation uses a separate file to store the information contained in the <B>BTnodeAvl</B> object, it would be relatively easy to embed this information in the multiway tree file, similar to the way the <B>objAvl</B> object is embedded in the object file.</p></blockquote></body></html>
