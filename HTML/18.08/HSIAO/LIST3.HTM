<HTML><HEAD>
<TITLE>August 2000/A Simple Persistence Framework/Listing 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 3: The POBase template class</A></h4>
<pre>
#ifndef POBBASE_H
#define POBBASE_H

#include &lt;stdlib.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;time.h&gt;
#include &lt;string.h&gt;
#include &lt;fstream.h&gt;
#include &lt;iostream.h&gt;

#include &lt;slist&gt;
#include &lt;typeinfo&gt;
#include &lt;set&gt;

#include "DskMBTree.h"
#include "GFactory.h"
#include "objAvl.h"
#include "POBException.h"


template &lt;class T&gt; class POBbase
{
public:
    enum ACCESS {
        RANDOM, SEQUENCE
    };

    typedef unsigned long OBJ_ID;    
    typedef pair&lt;streampos, size_t&gt; POS_SIZE_PAIR;
    typedef pair&lt;OBJ_ID, POS_SIZE_PAIR&gt; REF_PAIR;
    typedef map&lt;long, REF_PAIR&gt; REF_TBL;

    POBbase();
    ~POBbase() {};
    POBbase(const char*);

    void  openfile(const char*) throw (POBException*);
    bool  eof();

    bool   findObj(streampos&amp;, OBJ_ID);
    OBJ_ID insertObj(const T&amp;) throw (POBException*);
    bool   add2map(long, OBJ_ID, streampos, int);
    bool   POB_DEL_REF(T*);
    OBJ_ID changeObj(T*) throw (POBException*);
    bool   removeObj(OBJ_ID, T*&amp;) throw (POBException*);
    void   maxmemory();

    OBJ_ID 
    read(ACCESS, int&amp;, streampos&amp;, T*&amp;) throw (POBException*);
    int write(OBJ_ID, streampos&amp;, T*) throw (POBException*);

    void 
    register_create_function(const char*, GFactory&lt;T&gt;::PFUNC);

private:
    void   init_oi();
    OBJ_ID new_oi();
    void   load_avl();
    void   update_avl(OBJ_ID);

private:
    const OBJ_ID _sysoi;
    OBJ_ID _sequence;
    streampos _markp, _markg;
    fstream _iof;
    GFactory&lt;T&gt; _factory;
    REF_TBL _refmap;
    DskMBTree  _bt;
    objAvl _avl;
};

#endif
</pre></body></html>
