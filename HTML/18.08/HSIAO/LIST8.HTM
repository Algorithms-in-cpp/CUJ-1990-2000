<HTML><HEAD>
<TITLE>August 2000/A Simple Persistence Framework/Listing 8</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 8: Partial listing of the DskMBTree class</A></h4>
<pre>
#ifndef DSKBTREEMUL_H
#define DSKBTREEMUL_H

#include &lt;stdlib.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;string.h&gt;
#include &lt;fstream.h&gt;
#include &lt;iostream.h&gt;

#include &lt;string&gt;
#include &lt;slist&gt;
#include &lt;stack&gt;
#include &lt;vector&gt;

#include "POBException.h"

class BTnode {
    friend ostream&amp; operator&lt;&lt;(ostream&amp;, BTnode&amp;);

public:
    enum { MAXKEYS=3, MID=MAXKEYS/2 };

    typedef struct BTnodeStruct {
        short keycount;
        short numtrees;
        unsigned long key[MAXKEYS];
        streampos data[MAXKEYS];
        streampos child[MAXKEYS+1];
    };

    BTnode();
    BTnode(const BTnode&amp;);
    BTnode&amp; operator=(const BTnode&amp;);

    short numtrees() { return node.numtrees; }
    short numkeys() { return node.keycount; }
    
    BTnodeStruct&amp; data() { return node; }
    void clear();

private:
    BTnodeStruct node;

};

class BTnodeAvl {
public:
    BTnodeAvl();
    BTnodeAvl(const char*);
    ~BTnodeAvl();

    void open_avl(const char*) throw (BTreeException*);
    bool isEmpty();
    streampos getAvl() throw (BTreeException*);
    void addAvl(streampos);
    size_t size();
    
private:
    void updateDskAvl() throw (BTreeException*);

private:
    fstream _iof;
    streampos _markp, _markg;
    string _name;
    stack&lt;streampos&gt; _avl;
};

class DskMBTree {
public:
    typedef pair&lt;streampos, int&gt; NODEINDEX;
    typedef pair&lt;BTnode, NODEINDEX&gt; PATHNODE;
    
    DskMBTree(const char*);
    DskMBTree();
    ~DskMBTree();
    
    void open_root(const char*) throw (BTreeException*);
    bool get_root(BTnode&amp;) throw (BTreeException*);
    void makeroot(const long, streampos) throw (BTreeException*);
    void insert(slist&lt;PATHNODE&gt;&amp;, long, streampos); 
    bool find(int&amp;, slist&lt;PATHNODE&gt;&amp;, const unsigned long)
            throw (BTreeException*);
    bool find(int&amp;, BTnode&amp;, slist&lt;PATHNODE&gt;&amp;, const unsigned long)
            throw (BTreeException*);
    bool deleten(long, slist&lt;PATHNODE&gt;&amp;);
    ...
    bool child(streampos, BTnode&amp;) throw (BTreeException*);
    streampos makenode(const BTnode&amp;) throw (BTreeException*);
    void traverse(BTnode&amp;);

private:
    ...
    void 
    split(streampos, int, BTnode&amp;, BTnode&amp;, const long, streampos,
         long&amp;, streampos&amp;, streampos&amp;);
    ...    
private:
    fstream _iof;
    streampos _markp, _markg;
    BTnodeAvl _avlnd;
};

#endif //DSKBTREEMUL_H

</pre></body></html>
