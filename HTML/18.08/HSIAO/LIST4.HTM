<HTML><HEAD>
<TITLE>August 2000/A Simple Persistence Framework/Listing 4</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 4: The GFactory template class</A></h4>
<pre>
#ifndef GFACTORY_H
#define GFACTORY_H

#include &lt;map&gt;

template &lt;class T&gt; class GFactory
{
public:
    typedef T* (*PFUNC)(void);
    typedef map&lt;string, PFUNC, less&lt;string&gt; &gt; FMAP;

    virtual void add_function(const string&amp;, PFUNC);
    virtual T* create(const string&amp;);
    virtual bool findClassTypeId(const string&amp;);

private:
    FMAP        _fmap;
};

template&lt;class T&gt; 
void GFactory&lt;T&gt;::add_function(const string&amp; clsid, PFUNC pfc)
{
    if(_fmap.find(clsid) == _fmap.end())   
        _fmap[clsid] = pfc;
}

template&lt;class T&gt; 
bool GFactory&lt;T&gt;::findClassTypeId(const string&amp; clsid)
{
    if(_fmap.find(clsid) != _fmap.end())  return  true;
    else return false;
}

template&lt;class T&gt; 
T* GFactory&lt;T&gt;::create(const string&amp; clsid)
{
    FMAP::iterator itr;

    if((itr = _fmap.find(clsid)) != _fmap.end())  
        return (((*itr).second)());
    else  
        return (T*)0;
}

#endif
</pre></body></html>
