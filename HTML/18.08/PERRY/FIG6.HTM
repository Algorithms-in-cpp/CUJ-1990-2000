<HTML><HEAD>
<TITLE>August 2000/A Reusable Nonlinear System Solver, Part 2/Figure 6</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Figure 6: CNetwork routes the request AddToSystemPrimary to all the objects it owns</A></h4>
<pre>
void CNetwork::AddToSystemPrimary( CEqSystem &amp;rSystem )
{
    // Add all vertices and components to the system.
    CVertexList::iterator itVertex;
    for ( itVertex = m_lVertices.begin();
        itVertex != m_lVertices.end();
        itVertex++ )
    {
        (*itVertex)-&gt;AddToSystemPrimary(rSystem);
    }

    CComponentList::iterator itComponent;
    for ( itComponent = m_lComponents.begin();
        itComponent != m_lComponents.end();
        itComponent++ )
    {
        (*itComponent)-&gt;AddToSystemPrimary(rSystem);
    }
}

void CVertex::AddToSystemPrimary( CEqSystem &amp;rSystem )
{
    ASSUMING ( !m_lLegs.empty() )
    {
        // Add unknowns for EMF and all but the last current.
        // The last current is calculated to enforce
        // Kirchhoff's first law.
        rSystem.AddUnknown( this );    // for EMF.
        LegStruct *pLastLeg = m_lLegs.back();
        LegStructList::iterator itLegStruct;
        for ( itLegStruct = m_lLegs.begin();
            *itLegStruct != pLastLeg;
            itLegStruct++ )
        {
            rSystem.AddUnknown( *itLegStruct );
        }
    }
}

void CComponentUnary::AddToSystemPrimary( CEqSystem &amp;rSystem )
{
    // A unary component adds only one equation to the system.
    rSystem.AddEquation( this );
}

void CComponentBinary::AddToSystemPrimary( CEqSystem &amp;rSystem )
{
    // Add two equations, one for Kirchhoff's first
    // law and another specific to the component type.
    rSystem.AddEquation( (IEqEquationKirchhoff *)this );
    rSystem.AddEquation( (IEqEquationEMF *)this );
}
</pre></body></html>
