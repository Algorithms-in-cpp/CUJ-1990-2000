<HTML>
<HTML><HEAD>
<TITLE>August 2000/A Reusable Nonlinear System Solver, Part 2/Sidebar</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<H3 align=center><FONT COLOR="#000080">Optimizing the Solution</FONT></H3>

<HR>

<BLOCKQUOTE>
<p>As described in the main text, each vertex introduces an equation that enforces Kirchhoff's first law. It would be acceptable for <B>CVertex</B> to implement <B>IEqEquation</B> for this purpose, but here I choose a more optimal solution. Notice that one equation and one unknown at each vertex can be eliminated by calculating one current. The <B>dCurrent</B> member of the last <B>LegStruct</B> is never used, nor is the last leg represented as an unknown. Instead, the current through this leg is calculated based on all other legs from the vertex, to enforce Kirchhoff's first law (see the snippet below).</p>
<p>The Newton-Raphson solver uses matrix operations to find a solution, each of which takes time proportional to the square of the size of the matrix. Eliminating one equation and one unknown for each vertex reduces the size of the matrices by the number of vertices in the network, thus greatly improving the performance of the Newton-Raphson solver.</p>

<pre>
double CVertex::GetCurrent( CLeg *pLeg )
{
   LegStructList::iterator itLegStruct = FindLegStruct( pLeg );

   ASSUMING ( itLegStruct != m_lLegs.end() )
   {
      if ( *itLegStruct == m_lLegs.back() )
      {
         // Enforce Kirchhoff's first law.
         double dCurrent = 0.0;
         for ( itLegStruct = m_lLegs.begin();
            (*itLegStruct)-&gt;pLeg != pLeg;
               itLegStruct++ )
         {
            dCurrent -= (*itLegStruct)-&gt;dCurrent;
         }
         return dCurrent;
      }
      else
      {
         // Get the current through the selected leg.
         return (*itLegStruct)-&gt;dCurrent;
      }
   }
   return 0.0;
}
</pre></blockquote></body></html>
