

<HTML>
<HEAD>

<TITLE>May 1994/Code Capsules</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmay.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Code Capsules<A name="0100_007B"><A name="0100_007B"></font></h2><P>
<h3 align="center"><A name="0100_0000"><A name="0100_0000">Visibility in C++</h3><P>
<h3 align="center"><font color="#800000">Chuck Allison</font></h3><hr><blockquote><P>
<P><i><A name="0100_0000"><A name="0100_0000">Chuck Allison is a regular columnist with CUJ and a software architect for the Family History Department of the Church of Jesus Christ of Latter Day Saints Chruch Headquarters in Salt Lake City. He has a B.S. and M.S. in mathematics, has been programming since 1975, and has been teaching and developing in C since 1984. His current interest is object-oriented technology and education. He is a member of X3J16, the ANSI C++ Standards Committee. Chuch can be reached on the Internet at <I></I>allison@decus.org,<I></I> or at (801)240-4510.</i></P><P>
In last month's article I explained the C concepts of scope, lifetime, linkage, and namespace. An identifier's scope is the region of program text where it is visible. In addition to the local, function prototype, function, and file scopes of standard C, C++ introduces <I>class</I> scope and <I>namespace</I> scope. These two scoping mechanisms are unique in that they do not have to span a single, contiguous region of text, and can even be distributed across multiple files. You can also minimize the scope of local variables in C++ by delaying their definition to their point of first use. The lifetime (or <I>storage duration</I> ) of an object is the duration between its creation and destruction. C++ has special rules for the duration of static objects and for temporary objects that compilers generate when evaluating expressions. Remote uses of the same identifier are related by the rules of linkage. Unlike C, C++ provides <I>type-safe linkage</I>, an extension of type-checking across translation units. C++ also allows you to link with functions defined in other languages. C-style namespaces are lists of identifiers that play the same syntactic role in a program (e.g., labels, tags, or structure members). C++, in addition to making a slight change to the namespace rules of C, allows you to define your own namespaces. This feature allows you to use multiple libraries without the inconvenience of name conflicts. In this article I will attempt to illustrate the C++ concepts of scope, lifetime, linkage, and namespace as defined in the current standard working paper.<P>
<h4><FONT COLOR="#000080"><A name="0100_007C">Declaration Statements<A name="0100_007C"></FONT></h4></P>
In C++, a declaration can appear anywhere a statement can. This means that instead of having to group declarations at the beginning of a block, you can define objects at their point of first use. For example, in <A href="list1.htm">Listing 1</a>
the array <I>a</I> is visible throughout the function body, but <I>n</I> is not valid until line 9, and <I>i</I> until line 10. The variables <I>a</I> and <I>n</I> persist until the end of the block. In current implementation so does <I>i</I>, as this code reflects by not redefining <I>i</I> in the second loop. At the standards meeting in March of this year, however, we voted to restrict the scope of <I>i</I> to the body of its <I>for</I> loop. We did this so that variables declared in the initialization portion of a <I>for</I> loop have the same scope as those declared in the condition.<P>
<h4><FONT COLOR="#000080"><A name="0100_007D">Conditional Scope<A name="0100_007D"></FONT></h4></P>
Although few (if any) compilers currently support it, C++ allows you to declare objects within a condition clause, as in<P>
<pre>if (int i = x)
    // for some visible x
    whatever...</pre>
The scope of <I>i</I> is the body of the <I>if</I>, just as if you had written the following instead:<P>
<pre>if (x)
{
    int i = x;
    whatever...
}    // i dies here</pre>
<h4><FONT COLOR="#000080"><A name="0100_007E">Scope of Caught Exceptions<A name="0100_007E"></FONT></h4></P>
An exception parameter in a catch clause is visible throughout the body of the clause, similar to a function parameter, as in:<P>
<pre>catch (T&amp; x)
{
    cout &lt;&lt; "EXCEPTION:
        " &lt;&lt; x.what() &lt;&lt; endl;
}    // x dies here</pre>
It is an error to define an entity with the same name as an exception or function parameter in the outermost body of its respective catch clause or function.<P>
<h4><FONT COLOR="#000080"><A name="0100_007F">Class Scope<A name="0100_007F"></FONT></h4></P>
Every class definition creates a new scope. The scope of a class includes its declaration, all member function bodies, and constructor initializers (this extends to derived classes and nested classes as well). You can only access members of a class in one of the following ways:<P>
1)     as the target of the . operator (e.g., <I>x. foo()</I>, where <I>x</I> is an object of the class or of a derived class)<P>
2)     as the target of the -&gt; operator (e,g., <I>xp-&gt;foo()</I> where <I>xp</I> points to an object of the class or of a derived class)<P>
3)     as the target of the <I>scope resolution operator</I> used with the name of its class or a base class (e.g., <I>ios::binary</I> &#151; this applies only to static members)<P>
4)     from within the body of a member function of the class or of a derived class<P>
These rules are themselves subject to the rules of the <I>access specifiers</I><I> public, protected</I>, and <I>private</I>. Private members are visible only to member functions of the class and to friends of the class. Protected members are also visible to members and friends of derived classes. Public members are available universally.<P>
<A href="list2.htm">Listing 2</a>
shows the definition of a simple date class. An implementation is shown in <A href="list3.htm">Listing 3</a>.
 If you want to know the month associated with a certain date, you do not attempt to access the data member directly, as in<P>
<pre>Date d;            // today's date
cout &lt;&lt; d.month_;  // access denied</pre>
You use the appropriate member function instead:<P>
<pre>Date d;            // today's date
cout &lt;&lt; d.month(); // OK</pre>
Most of the members of the <I>Date</I> class are <I>non-static</I>. Each Date object has its own copy of each non-static data member (i.e., <I>month</I>_, <I>day</I>_ and <I>year</I>_), and each non-static member function must be called in connection with a <I>Date</I> object (e.g., <I>d.month()</I>). A <I>static</I> member belongs to the entire class instead of an individual object. (Other object-oriented languages call static data members <I>class variables</I> and static member functions <I>class methods</I>, while they call the non-static equivalents <I>instance variables</I> and <I>instance methods</I>.) For example, there is only one class-wide copy of the array <I>dtab</I>. If it were public, you could access it like this:<P>
<pre>//  display the number of days in a leap-February:
cout &lt;&lt; Date::dtab[1][2];</pre>
Using the <I>scope resolution</I> <I>operator</I> (<I>::</I>) in connection with a class name allows you to access a static class member directly. Since the <I>isleap</I> member function is public, you can use it to determine the "leapness" of any year like this:<P>
<pre>int y = 1994;
if (Date::isleap(y))
   //  It's a leap year...
else
   //  It's not...</pre>
You must explicitly define static data members at file scope (see the definition of <I>dtab</I> in <A href="list3.htm">Listing 3</a>)
.<P>
As <I>Date::day(int)</I> in <A href="list3.htm">Listing 3</a>
shows, other class members are in scope within the body of a member function, so you can access them directly, without explicit scope resolution. Every nonstatic member function uses a hidden parameter which points to the object with which it is associated; that object is available to you through the keyword <I>this</I>. Inside of <I>Date::day(int)</I>, the compiler interprets the usage of <I>day</I>_, <I>isleap</I>, and <I>dtab</I> as if you had written <I>this-&gt;day</I>_, <I>Date::dtab</I>, and <I>Date::isleap</I> instead. There is no <I>this</I> pointer for static member functions, since they have no associated object. Hence using the identifier <I>day</I>_ unadorned in a static member function such as <I>isleap</I> makes no sense (what object does it belong to?), and would refer to an identifier of the same name from an enclosing scope, if there was one. Static member functions can directly refer only to enumerators, nested class names, and other static members.<P>
Since the code for<I> Date::day_(int)</I> is a part of a scope, any local or member identifier with the same name as a global identifier hides the global identifier. For example, in the unlikely case that I had a global identifier named <I>day_</I>, it would be hidden by the data member <I>day_</I> inside all non-static member functions of <I>Date</I>. You can still access a global identifier, however, by using the scope resolution operator without a prefix:<P>
<pre>day_ = ::day_;
     // assign global day_ to member</pre>
In effect, C++ allows you to "unhide" global identifiers. Here's another example:<P>
<pre>int i = 10;

main()
{
   int i = 20;
   cout &lt;&lt; "local i:  " &lt;&lt; i &lt;&lt; endl;
   cout &lt;&lt; "global i: " &lt;&lt; ::i &lt;&lt; endl;
   return 0;
}

// Output:
local i: 20
global i: 10</pre>
It is good practice to explicitly qualify global functions with the scope resolution operator for documentation purposes, and to avoid name conflicts with member names (see the implementation of the constructor <I>Date::Date()</I> in <A href="list3.htm">Listing 3</a>)
.<P>
<h4><FONT COLOR="#000080"><A name="0100_0080">Nested Classes<A name="0100_0080"></FONT></h4></P>
In addition to data members, member functions, and enumerated constants, you can define other classes within a class definition. For example, a common string class implementation technique called "copy-on-write" allows several string objects to point to the same underlying text (see <A href="list4.htm">Listing 4</a>)
. It only makes a separate copy when one of the strings changes its contents (this saves time when strings are passed as parameters &#151; local read-only processing uses a "shared" copy). A separate class (<I>Srep</I>) handles the details of connecting and disconnecting references to the underlying text. There is no reason for the <I>Srep</I> class to be globally accessible, so I define it inside the <I>String</I> class. The implementation in <A href="list5.htm">Listing 5</a>
shows how to use the scope resolution operator to reach the members of <I>Srep.</I> For example, to inform the compiler that I want to define the constructor <I>Srep,</I> I use the declaration <I>String::Srep::Srep.</I><P>
In the unusual case that a name in a nested class hides a name in an enclosing class, you can reach the outer instance with the scope resolution operator (only if it's public, of course &#151; the usual access rules apply to and from nested classes). For example, in the following situation<P>
<pre>class A
{
   int i;
   
   class B
   {
       int i;
       void f() { cout &lt;&lt; i + A::i; }
   };
};</pre>
you can still reach the <I>i</I> in class <I>A</I> by the expression <I>A::i</I>.<P>
<h4><FONT COLOR="#000080"><A name="0100_0081">Local Classes<A name="0100_0081"></FONT></h4></P>
A class defined within a function definition is called a local class (see <A href="list6.htm">Listing 6</a>)
. Its name is local to the function body, like any other identifier declared therein. You must define all member functions within the class definition. You can't define them at file scope, because the class is not visible there. This also rules out static data members of <I>Local,</I> since you must define them at file scope. You can't define function bodies elsewhere within <I>f</I>, either, because function definitions cannot nest in C or C++. For the same reason, a member function of <I>Local</I> can't refer to an automatic variable of <I>f</I>. As always, member access rules apply, so <I>k</I> is not visible in <I>f</I> outside of <I>Local</I>.<P>
<h4><FONT COLOR="#000080"><A name="0100_0082">Modules<A name="0100_0082"></FONT></h4></P>
Since the class construct in C++ is a scoping mechanism, you can use it to create modules. A module is a packaging of related data and functionality. <A href="list7.htm">Listing 7</a>
has a definition of a class to control the shape and position of the cursor. You will notice that the <I>Cursor</I> class has only static members. Since I do not plan on instantiating any <I>Cursor</I> objects, I just want to package some cursor-control functions together. I don't need any non-static data members. Enumerations in a class definition belong to the whole class, just like static data members. The state data member keeps track of whether the cursor is block shape or a thin line, using the enumerated constants <I>LINE</I> and <I>BLOCK</I>. The sample program in <A href="list8.htm">Listing 8</a>
illustrates some of the <I>Cursor</I> functions.<P>
The implementation in <A href="list9.htm">Listing 9</a>
is for IBM PC-compatibles. It initializes the state data member to <I>LINE</I>. As a side effect, this implementation also changes the cursor to a line shape. This illustrates another departure from C: in C++, you can use functions to initialize static objects (only automatic objects can be initialized this way in C). <I>cursor.cpp</I> itself uses another module, class <I>Video,</I> which writes directly to video-mapped memory (see <A href="list10.htm">Listing 10</a>
and <A href="list11.htm">Listing 11</a>)
.<P>
<h4><FONT COLOR="#000080"><A name="0100_0083">Storage Duration<A name="0100_0083"></FONT></h4></P>
Automatic objects behave the same in C++ as they do in C &#151; they are created when execution encounters their definition within a block, and are destroyed when execution leaves the block. C++ does add meaning to the words "created" and "destroyed," though. When C++ creates a user-defined object it calls the appropriate constructor. If you do not supply constructors the compiler will generate them for you. Similarly, a destructor is required to destroy a user-defined object.<P>
In C, objects with static storage duration are initialized at program startup and remain active throughout program execution. Since such objects can only use constant expressions as initializers, this isn't a challenge for compiler writers to implement. Because objects in C++ usually require constructors, however, static objects must be able to call functions in their initialization. For this reason, C++ allows statements at file scope such as this one from <A href="list9.htm">Listing 9</a>:
<P>
<pre>int Cursor::state = Cursor::init();</pre>
A local static variable is initialized the first time control passes through its declaration. Non-local static objects (including static members) are initialized before the first use of any function in their translation unit (but exactly when is unspecified). Since initialization functions can conceivably rely on other objects which rely on other initialization functions etc., (any of which can be in another translation unit!), there is no single point in time that the compiler can identify as "program startup" for static initialization. If dependencies between inter-file objects are sufficiently complex, it is possible that you might use a global static object before initializing it. There is no foolproof way to include in a single translation unit all the information necessary to initialize global objects in different translation units in the correct order &#151; the compiler needs information about the inter-file dependencies. This is a non-trivial problem that the standards committee is currently working on.<P>
<h4><FONT COLOR="#000080"><A name="0100_0084">Lifetime of Temporaries<A name="0100_0084"></FONT></h4></P>
Compilers generate a number of temporary objects when evaluating expressions at run time. The expression <I>x = a + b + c</I>, for example, requires at least one temporary. This expression might result in actions equivalent to the following statements:<P>
<pre>temp = b + c;
x = a + temp;
// destroy temp here</pre>
In order to conserve resources, it is important for the compiler to destroy temporaries early, but not too early. The following example from Andrew Koenig will illustrate. Consider the class declaration:<P>
<pre>class string
{
public:
   string(const char *);
   operator const char*();
   string operator+(const string&amp;); //concatenation
   // other members omitted
};</pre>
The <I>const char</I> * operator lets you use string arguments with standard C library functions, for example<P>
<pre>string s, t;
...
printf("%s\n",s+t);</pre>
You would certainly want the temporary from the expression <I>s+t</I> to persist long enough for <I>printf</I> to process it (but not all current compilers guarantee this!). You might want to break the <I>print</I> into two current statements, as in<P>
<pre>string s, t;
...
const char *p = s + t;
printf("%s\n",p);</pre>
but it's not a good idea. Until July 1993, when temporaries are destroyed was left to the discretion of implementators, so some compilers may have produced the desired results with the preceding code. Now, however, the policy is defined such that the temporary assigned to <I>p</I> shall <I>not</I> persist until the <I>printf</I> statement, rendering the above code ill-formed. The rule states that temporaries remain until the end of the <I>full expression</I> in which they appear. In most cases, full expression just means until the end of the enclosing statement, so temporaries will not persist from one statement to the next. A full expression is one that is not part of another expression. Some examples are: an initializer; the controlling expression of an <I>if, while</I>, or <I>switch</I>; the expressions in a <I>for</I> statement; or an expression returned from a function.<P>
The only exception to this rule is for references bound to a temporary. For example, consider the following statements:<P>
<pre>class T {// whatever};
T F();
const T &amp;r = f();</pre>
The temporary object returned by <I>f</I> persists as long as <I>r</I> is in scope, as you would expect.<P>
<h4><FONT COLOR="#000080"><A name="0100_0085">Linkage<A name="0100_0085"></FONT></h4></P>
Linkage occurs when two or more declarations refer to the same entity. Functions and global objects declared without the <I>static</I> storage class specifier have external linkage, which means they are visible across translation units. The <I>static</I> specifier gives a global identifier internal linkage, which limits its scope to its translation unit. Typedef names, enumerators, template names, and local names declared without the <I>extern</I> specifier have no linkage, and therefore denote unique entities within a program.<P>
In another departure from standard C, <I>const</I> objects at file scope have internal linkage, unless declared with the <I>extern</I> specifier. This convention allows the common practice of placing <I>const</I> definitions (instead of macro definitions) in include files without the linker complaining about multiple references. If you want <I>const</I> objects with external linkage, qualify each with <I>extern</I> and initialize exactly one, as in:<P>
<pre><U>FILE 1</U>
extern const int x = 10;

<U>FILE 2</U>
extern const int x;
 // refers to x in File 1</pre>
Static members have external linkage, which explains why you must explicitly define them at file scope. They are essentially global identifiers that also obey scope resolution and member access rules. Non-inline class member functions have external linkage, which allows them to be defined in a separate file from the class declaration. Non-member inline functions have internal linkage.<P>
Because the <I>inline</I> keyword is merely a hint to the translator, it is difficult to classify the linkage of inline member functions. If such a function is inlined, you can think of it as having internal linkage (it is common practice to put them in the class header file, anyway). If the compiler is unable to insert the code inline, it must create an out-of-line function. Some implementations like to have only one out-of-line definition to save code space, but having this restriction implies external linkage. Ambiguous linkage of inline functions is another problem the standards committee members are working on. The current paper merely states that an inline member function must have only one definition in a program.<P>
Class names have linkage too. A class name has external linkage if:<P>
<UL><li>it has any static members</li>
<li>it has a non-inline member function</li>
<li>you use it in declaring a function, object, or another class with external linkage.</li>
<li>it appears in a template definition</li></UL>
Otherwise it has internal linkage. Classes in typical applications tend to have external linkage.<P>
<h4><FONT COLOR="#000080"><A name="0100_0086">Type-safe Linkage<A name="0100_0086"></FONT></h4></P>
Standard C does not guarantee that a function defined in one translation unit will be used correctly in another. For example, consider the source files:<P>
<pre><U>File 1</U>
void f(double x)
{
    ...
}

<U>File 2</U>
extern void f(int);
...
    f(1);</pre>
The function defined in File 1 is expecting a <I>double</I> argument, but someone misinformed the user in File 2, so the program is broken. Existing C practice calls for both files to include a common header file that has the correct prototype for <I>f</I>. C++ takes this responsibility from the programmer and gives it to the development environment through the concept of <I>type-safe linkage</I>, which guarantees that the two versions of <I>f</I> above do not link. Most implementations achieve this by encoding information about the formal parameters into a hidden name that the linker sees (this technique is usually called "name mangling"). For example, a compiler might encode the name in File 1 as<P>
<pre>f_Fd
 // "f is a function taking a double"</pre>
and the one in File 2 as<P>
<pre>f_Fi
 // "f is a function taking an int"</pre>
Since the linker sees two distinct names, the reference to <I>f</I> from File 2 to File 1 is not resolved, causing a linker error. Hence, you can't even produce an executable unless you call your functions correctly!<P>
<h4><FONT COLOR="#000080"><A name="0100_0087">Linkage Specifications<A name="0100_0087"></FONT></h4></P>
C++ appeals to C programmers for a number of reasons. Most of what they know applies unchanged in C++. They can ease their way into object-oriented programming by first using C++ as a "better C" until they get used to its syntax and idiosyncrasies. But production programmers need something even more important: to be able to use existing C code without even <I>recompiling</I>. It might seem that name mangling makes this practice impossible. How do you call a C function, say, <I>f(double)</I>, from a C++ program when the C name is <I>f</I> (or more commonly, <I>_f</I>), and the C++ name is <I>f__Fd</I>? You can instruct the compiler to turn off C++ name mangling with a <I>linkage specification</I>:<P>
<pre><U>In the C++ file:</U>
extern "C" f();</pre>
The <I>extern</I> <I>"C"</I> specification tells the compiler to generate the link name according to C rules so the linker can find it in the existing C object code. An implementation may support other specifications in addition to <I>"C"</I>.<P>
<h4><FONT COLOR="#000080"><A name="0100_0088">Namespaces<A name="0100_0088"></FONT></h4></P>
An identifier can play various roles in a program. For example, in the following excerpt, <I>pair</I> is both a function name and a structure tag:<P>
<pre>struct pair {int x; int y;};
void pair(struct pair p)
{
   printf ("(%d,%d)\n",p.x,p.y);
}</pre>
The compiler keeps separate lists of identifiers used in different roles, so there is no danger of ambiguity. These lists are called <I>namespaces</I>. There are four different types of namespaces in Standard C:<P>
1)     labels<P>
2)     tags for structures, unions, and enumerations<P>
3)     members of structures and unions<P>
4)     ordinary identifiers (i.e., all others: objects, functions, types, and enumeration constants).<P>
Because of the preeminence of types in C++, you can use structure tags (which are really class names) without the <I>struct </I>keyword, for example:<P>
<pre>void f(pair p);
    // struct keyword optional</pre>
In other words, all struct names act as type names, as if you had also defined a typedef with the same name as the tag:<P>
<pre>typedef struct pair pair;</pre>
This means that you cannot use a name as both a structure tag and a typedef for a different type in the same scope. Since typedefs belong to the space of ordinary identifiers, C++ has merged that namespace with the tag namespace (numbers 2 and 4 above). As a compatibility gesture, C++ still allows you to define identifiers with the same name as a tag, mainly because of the following common C practice:<P>
<pre>struct stat{...};
extern int stat();</pre>
Problems can now arise, however, when you use the same name for struct tags and ordinary identifiers. In the program in <A href="list12.htm">Listing 12</a>,
 the local integer named <I>pair</I> hides the global struct identifier, causing the compiler to flag the line<P>
<pre>pair p = {pair,pair};</pre>
as an error. You can get around this problem by using the <I>struct</I> or <I>class</I> keyword explicitly:<P>
<pre>struct pair p = {pair,pair};</pre>
<h4><FONT COLOR="#000080"><A name="0100_0089">Namespace Scope<A name="0100_0089"></FONT></h4></P>
In both C and C++ there is a single global scope. Unfortunately, most people call this the global namespace (sorry &#151; we have to live with it). Whatever you call it, it's the place where a lot of names get dumped: all of your global types, functions, and variables, along with those of the libraries that you use to build your applications. The buzzword for this prolific dumping is "namespace pollution." Since you and all the vendors in the world didn't sit down previously and decide who will use what names, it is conceivable that name conflicts will arise. To alleviate the problem, many vendors attach a corporate prefix to their global names (e.g., <I>ACME_List, ACME_Widget</I>, etc.). If vendors don't, you may have to (<I>My_list, My_Widget</I>, etc.). An alternative work-around is to wrap the names in a class, if you can, like I did in <A href="list7.htm">Listing 7</a>.
 Just hope the vendors haven't used the same class names as you have!<P>
The standards committee solved the pollution problem by allowing you and vendors alike to define named scopes. But they don't call them scopes. You guessed it! They call them <I>namespaces</I>! You can place <I>anything</I> into a namespace that you can define at global scope, which is more flexible than the class wrapper hack. <A href="list13.htm">Listing 13</a>
and <A href="list14.htm">Listing 14</a>
show the interface and implementation of a namespace version of the <I>Cursor</I> module.<P>
There are three ways to use the <I>Cursor</I> namespace. The first is with the scope resolution operator, exactly as shown in <A href="list8.htm">Listing 8</a>.
 The second is to import the names you need in to the local scope with <I>using declarations</I> (see <A href="list15.htm">Listing 15</a>)
. The statement<P>
<pre>using Cursor::block();</pre>
injects the name <I>block</I> into the local scope. Like other local names, <I>block</I> can hide a global identifier of the same name, or clash with another local one. This is the preferred way to use namespaces, since it doesn't pollute the global namespace, and it doesn't require explicit scope resolution to get at the namespace's identifiers.<P>
The third method is to in essence dump the entire set of names right back into the global namespace with a <I>using directive</I> (see <A href="list16.htm">Listing 16</a>)
. The statement<P>
<pre>using namespace Cursor;</pre>
makes all the names from the namespace available almost as if you had declared them globally. In this case the <I>Cursor</I> identifiers can be hidden by like-named identifiers at local scope, and can clash with other global identifiers. You cannot use global scope resolution to access names from the namespace scope, however (e.g., <I>::init</I>).<P>
With namespaces, the only things left to conflict with each other are namespace names, but their numbers will be comparatively few. To minimize conflicts, I can use an elaborate name, like <I>My_cool__cursor_package</I>, and then define a short alias locally for convenience:<P>
<pre>namespace Cursor=
   My_cool_cursor_package;
using Cursor::block();
// etc.</pre>
The linker only sees the original name. If I find a package I like better, I only have to replace one statement:<P>
<pre>namespace Cursor =
   Your_cool_cursor_package;</pre>
The standards committee is currently integrating the namespace mechanism into the standard C++ library. There is more to say about namespaces (for example, you can nest them), but I can hear my editors complaining about the length of this article already.<P>
<h4><FONT COLOR="#000080"><A name="0100_008A">Don't Try This at Home!<A name="0100_008A"></FONT></h4></P>
Some of the features mentioned in this article are not yet available in any C++ implementation. Namespaces, the rules for lifetime of temporaries, and conditional scope were accepted as part of the language in 1993. If you feel overwhelmed by all of this, you are not alone. C++ is evolving to meet the needs of developers who solve complex problems. Fortunately, you don't have to master everything at once. Use language features only as you need them, and the language won't get in your way.<P>

<h4><a href="../../../source/1994/may94/allison.zip">Get Article Source Code</a></h4>

</BODY>
</HTML>
