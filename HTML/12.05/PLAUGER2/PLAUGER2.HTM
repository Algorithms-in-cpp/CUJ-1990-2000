

<HTML>
<HEAD>

<TITLE>May 1994/Standard C</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmay.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Standard C<A name="00FA_0075"><A name="00FA_0075"></font></h2><P>
<h3 align="center"><A name="00FA_0000"><A name="00FA_0000">The Header &lt;ios&gt;</h3><P>
<h3 align="center"><font color="#800000">P.J. Plauger</font></h3><hr><blockquote><P>
<P><i><A name="00FA_0000"><A name="00FA_0000">P.J. Plauger is senior editor of The C Users Journal. He is convenor of the ISO C standards committee, WG14, and active on the C++ committee, WG21. His latest books are The Standard C Library, and Programming on Purpose (three volumes), all published by Prentice-Hall. You can reach him at pjp@plauger.com.</i></P><P>
Last month, I introduced the extensive set of classes in the Standard C++ library known collectively as iostreams. (See "Standard C: Introduction to Iostreams," <I>CUJ</I>, April 1994.) I begin this month with the foundation upon which all of iostreams is constructed, class <I>ios</I>. It is a large class &#151; big enough to command a header pretty much all to itself. You might begin by gazing for a spell at <A href="list1.htm">Listing 1</a>,
 which shows one way to implement the header <I>&lt;ios&gt;</I>, home of class <I>ios</I> and a few close friends.<P>
If you are an old hand at C++, you will find a lot not to recognize here. The draft C++ Standard introduces several innovations for which there is currently little or no existing practice. Besides, different compilers implement different interim dialects of the evolving standard. Strange <I>#if</I> logic is almost impossible to avoid for the near future. Moreover, I am presenting a notoriously unique implementation, as is my wont. This is not a history lesson so much as an exposition of the Standard C++ library in its own right.<P>
If you are newer to C++, you will find a lot not to understand here. Class <I>ios</I> is bigger, more diffuse, and trickier than average. I can't always take the mysteries in lexical order, or cover them in detail, but I'll try to shed at least some light on all of them by the end of this installment.<P>
<h4><FONT COLOR="#000080"><A name="00FA_0076">Bitmask Types<A name="00FA_0076"></FONT></h4></P>
For openers, you may notice several funny bits of notation in <A href="list1.htm">Listing 1</a>:
<P>
<UL><li>Several enumerations are given "secret" names (<I>_Fmtflags, _Iostate</I>, and <I>_Openmode</I>).</li>
<li>The macro <I>_BITMASK</I> somehow relates these secret names to more conventional type names (<I>fmtflags, iostate</I>, and <I>open-mode</I>).</li>
<li>Two of these names nevertheless have still other integer type variants <I>io_state</I> and <I>open_mode</I>).</li>
<li>One of these variants, <I>io_state</I>, overloads several member functions only if the macro <I>_HAS_ENUM_OVERLOADING</I> has a nonzero value.</li></UL>
Briefly, here's the story. The last set of integer synonyms (along with <I>seek_dir</I>) are widespread current practice. The draft C++ Standard allows <I>optional</I> overloading on this type for backward compatibility. The draft also introduces the preferred middle set as <I>bitmask</I> types &#151; enumerations overloaded to permit their manipulation as bit patterns. Without such overloading, you'd have to write all sorts of type casts, such as:<P>
<pre>cout.setf((fmtflags)(dec | showbase));</pre>
But enumeration overloading is a fairly recent addition to the C++ language. If it's available, the enumeration <I>_Iostate</I> needs to have a slew of operators overloaded for it. Then <I>iostate</I> can be made a synonym for it with a <I>typedef</I>. And then the optional type <I>io_state</I> can be defined as a distinguishable integer type.<P>
If enumeration overloading is not available, however, the best course is to make <I>iostate</I> an integer type. That way you don't find yourself writing casts all the time. But then you can't easily distinguish <I>io_state</I> as yet another integer type, so you want to omit it. Got that? If not, don't worry about it too much. It's just another of those interim dialect kludges.<P>
<A href="list2.htm">Listing 2</a>
shows how the macro <I>_BITMASK</I> expands, depending on the definition of <I>_HAS_ENUM_OVERLOADING</I>, to deal with these variations on a theme.<P>
<h4><FONT COLOR="#000080"><A name="00FA_0077">Exceptions<A name="00FA_0077"></FONT></h4></P>
Exceptions should be equally mysterious to all comers. The draft C++ Standard adds them to iostreams as a pure invention &#151; they are part of no prior practice that I know of. The sentiment was that the Standard C++ library could hardly ignore exceptions, since they were added to the language to deal with many library-related issues. (See "Standard C: The Header <I>&lt;exception)</I>," <I>CUJ</I>, February 1994.)<P>
Traditionally, operations on iostreams that fail set one or more status bits within class <I>ios</I> and simply return. These status bits have some integer type <I>iostate</I> and are represented in <A href="list1.htm">Listing 1</a>
as the private member <I>_State</I>. The member functions <I>clear</I> and <I>setstate</I> let you set and clear these bits. The member functions <I>rdstate, good, bad, fail</I>, and <I>eof</I> let you read and test the status bits in various ways.<P>
All iostreams functions should be careful to test the status bits before trying anything rash. In particular:<P>
<UL><li><I>bad </I><I>(bad( ) or rdbuf( ) &amp; ios::badbit)</I> indicates a read/write error or some other loss of integrity of the associated <I>streambuf</I> object controlling the actual I/O stream failure exception.</li>
<li><I>eof </I><I>(eof( ) </I>or<I> rdbuf( ) &amp; ios::eofbit)</I> indicates that an earlier read operation has encountered the end of the input stream.</li>
<li><I>fail </I><I>(fail( ) </I>or<I> rdbuf( ) &amp; ios::failbit)</I><I> </I>indicates that an earlier read operation has failed to match the required pattern of input text.</li></UL>
But what if you don't want your program simply to keep stumbling on in the presence of iostream failures? Or what if you don't want to test the result of every operation? That's where the new exception mask comes in. <A href="list1.htm">Listing 1</a>
indicates it as the private member <I>_Except</I> (also of type <I>iostate</I>). You can obtain its value by calling the member <I>exception( )</I>, or set it by calling <I>exception(iostate)</I>. Any change of state that results in <I>rdstate( ) &amp; exceptions( )</I> becoming nonzero throws an exception.<P>
Well, that's only approximately true. <A href="list3.htm">Listing 3</a>
shows the file ios.c, which includes all the functions needed for any program that contains an object of class <I>ios</I>. For now, just look at the (misnamed) function <I>clear.</I> It sets all status flags to the value of its argument, then checks whether it should throw an exception. (Note, in passing, that the absence of an associated <I>streambuf</I> object automatically gives the ios object "bad" status.)<P>
The exception <I>ios::failure</I> is reported by calling its member function <I>raise( )</I>. It may or may not actually throw an exception, as I've described in earlier installments of this column. You will find the destructor for <I>ios::failure</I> also in <A href="list3.htm">Listing 3</a>,
 along with the destructor for <I>ios</I> itself. I explain the funny logic in <I>ios::~ios( )</I> below.<P>
Class <I>ios</I> has one other bit of cuteness with regard to testing its status flags. It overloads the unary NOT <I>operator! ()</I> and the unary type cast <I>operator void *( )</I> as a quick way of testing for I/O failures. Thus, you can write:<P>
<pre>if (!(cin &gt;&gt; x))
    cerr &lt;&lt; "can't read x" &lt;&lt; endl;</pre>
because <I>cin</I> is derived from class <I>ios.</I> Note the use of <I>_Bool</I> for a function that returns zero/nonzero for testing. The committee has voted in a new type <I>bool</I>, which must now percolate through the pipeline of new compiler releases. This is its placemarker. For now, it is a synonym for type <I>int</I>.<P>
<h4><FONT COLOR="#000080"><A name="00FA_0078">Initialization<A name="00FA_0078"></FONT></h4></P>
Iostreams has one very unusual requirement &#151; you're allowed to use it before it's constructed and after it's destructed. Put another way, you can extract characters from <I>cin</I>, or insert them in <I>cout, cerr</I>, or <I>clog</I>, even from constructors and destructors for static objects. The problem with this license is that you can't be sure all the static objects that make up iostreams are constructed (and not yet destructed) when you make such demands upon them.<P>
The trick to pulling this off is twofold:<P>
<UL><li>Ensure that the objects get explicitly constructed exactly once before they're used in any translation unit.</li>
<li>Ensure that the conventional constructors and destructors don't really do anything rash with the data stored in the objects.</li></UL>
Class <I>Init</I> plays a pivotal role in pulling off the first part of the trick. It is used in the header &lt;<I>iostream</I>&gt;, which declares all the standard stream objects, such as <I>cin</I> and friends. That header includes a declaration such as:<P>
<pre>static ios::Init _Ios_init;</pre>
So any translation unit that includes &lt;<I>iostream</I>&gt;, to make use of the standard streams, must first construct a static object of type <I>ios::Init</I>. You will notice from <A href="list1.htm">Listing 1</a>
that this class includes a static counter, called <I>ios:: Init::_Init_cnt</I> here. The constructor for <I>ios::Init</I> increments this counter, and the destructor decrements it. The constructor also uses the counter to determine when it is entered the very first time. And <I>that's</I> when all the static objects for iostreams really get constructed. (They are never really destructed, so you can use iostreams right up to program termination.) I'll show this code in more detail in a future installment.<P>
The second part of the trick is more pervasive. It requires that any static objects for iostreams have a destructor, and at least one constructor, that does nothing. (Storing a pointer to a "v-table" still occurs, even in an empty constructor, but that should be innocuous.)<P>
Traditionally, it is the default constructor that serves this role. But the draft C++ Standard typically requires that such constructors do something nontrivial. And permitting a constructor to leave an object uninitialized is bad C++ manners, to say the least. So I have chosen to document this mildly bogus behavior in terms of a special secret enumeration:<P>
<pre>enum _Uninitialized {_Noinit};</pre>
Thus, you can tell at a glance that the protected constructor:<P>
<pre>ios(_Uninitialized)
      {}</pre>
is <I>required</I> to do nothing.<P>
Destructors are a bit messier, since you get only one per class. The one for class<I> ios</I><I> does</I> have to do something, should the program make use of extensible arrays (described later in this column). The code that discards such arrays has to be kludged to <I>not</I> discard them for the standard streams. <A href="list3.htm">Listing 3</a>
shows one way to perform a reasonably safe, if graceless, kludge.<P>
You will see even more of this trickery in iostreams classes to come.<P>
<h4><FONT COLOR="#000080"><A name="00FA_0079">Construction and Copying<A name="00FA_0079"></FONT></h4></P>
Class <I>ios</I> is properly initialized by calling the function <I>init</I>, shown in <A href="list3.htm">Listing 3</a>.
 The default values for the various formatting properties are those spelled out in the draft C++ Standard. You will notice that the function ends by calling <I>clear(goodbit)</I>, mostly for stylistic reasons. This particular call can't throw an exception when it changes the status bits or exception mask, but others can. So I make a point of calling <I>clear</I>, directly or indirectly, at the end of any function that makes such changes.<P>
<A href="list4.htm">Listing 4</a>,
 for example, shows the member function <I>exceptions(iostate)</I>. It follows this simple but safe rule. So, too, does the member function <I>copyfmt(const ios&amp;)</I>, shown in <A href="list5.htm">Listing 5</a>.
 It was added as a way of saving and restoring all formatting information, without mucking with the pointer to <I>streambuf</I> or its associated status bits. The one funny bit of business involves the copying of any extensible arrays, which I still promise to describe later in this column.<P>
The companion to <I>copyfmt(const ios&amp;)</I> is the (misnamed) member function <I>rdbuf(streambuf *)</I>, shown in <A href="list6.htm">Listing 6</a>.
 It copies just the <I>streambuf</I> pointer and status bits, then checks to see whether the exception mask calls for an exception to be thrown. You use this function to attach multiple streams to the same <I>streambuf</I>, as I described briefly last month.<P>
Now you can understand the special handling required for the <I>ios</I> assignment operator, shown in <A href="list7.htm">Listing 7</a>,
 and the copy constructor, shown in <A href="list8.htm">Listing 8</a>.
 The former does much the same thing as <I>rdbuf(streambuf</I> *<I>)</I>, then calls <I>copyfmt</I> to finish the smart copy and check for exceptions. The latter initializes the new <I>ios</I> object to something innocuous, then relies on the assignment operator to do all the hard work.<P>
<h4><FONT COLOR="#000080"><A name="00FA_007A">The Real Stuff<A name="00FA_007A"></FONT></h4></P>
At last we come to the raison d'tre for class <I>ios</I> &#151; keeping track of stream-related information. The functions that do so are mostly trivial. Quite a few, in fact, merely store a new value in one of the private member objects, then return the previously stored object. (It is up to the derived classes <I>istream, ostream</I>, and their kin to actually <I>do</I> something with all this information.)<P>
<A href="list9.htm">Listing 9</a>
shows a representative sample, the member function <I>tie(ostream</I> *<I>)</I>. (It is used to "tie" two streams together, so the output stream gets flushed before reads or writes occur to the other stream.) The member functions <I>flags(fmtflags), fill(int)</I>, and <I>width(int)</I> are essentially the same, so I won't bother to show them.<P>
The format flags are manipulated in a variety of ways, so class <I>ios</I> provides a variety of member functions to play with them. You can read the flags with <I>flags( )</I>, replace them with <I>flags(fmtflags)</I>, set selected flags with <I>setf(fmtflags)</I> (<A href="list10.htm">Listing 10</a>)
, set selected flags under a mask with <I>setf(fmtflags, fmtflags)</I> (<A href="list11.htm">Listing 11</a>)
, and clear selected flags with <I>unsetf(fmtflags)</I> (<A href="list12.htm">Listing 12</a>)
.<P>
Finally, you can store your own information in two extensible arrays. To get a unique index (across <I>all </I><I>ios</I> objects), call the static member <I>xalloc( )</I>. You can then call the member <I>iword(int)</I> with that index to get a reference to an element of a <I>long</I> array, which is initialized to zero. Equally, you can call the member <I>pword(int)</I> with that index to get a reference to an element of a <I>void *</I> array, which is initialized to a null pointer.<P>
<A href="list13.htm">Listing 13</a>
shows the critical code, for the common access function <I>_Findarr(int)</I>. It locates an existing element or extends the array as needed for a new index. As you can see from the code presented here, elements for these arrays are allocated in tandem and maintained as a linked list. The list is copied by <I>copyfmt</I> and discarded by the destructor (except for the standard streams, of course). Function <I>_Tidy( )</I>, back in <A href="list3.htm">Listing 3</a>,
 performs this cleanup.<P>
<h4><FONT COLOR="#000080"><A name="00FA_007B">Manipulators<A name="00FA_007B"></FONT></h4></P>
That's it for class <I>ios.</I> But you will note that the header &lt;<I>ios</I>&gt; also declares a whole mess of functions called <I>manipulators</I>. I described their uses briefly last month. There are so many, and they are all so similar, that I will show only a representative version here. <A href="list14.htm">Listing 14</a>
shows the function <I>dec(ios&amp;),</I> which sets the format flag <I>ios::dec</I> and clears the other flags that affect the conversion base.<P>
You can always call <I>dec(ios&amp;)</I> directly, as in:<P>
<pre>dec(cin);</pre>
Or you can call it indirectly as an inserter or extractor, as in:<P>
<pre>cin &gt;&gt; dec;</pre>
But that last expression requires some magic that is not a part of class <I>ios.</I> There's still <I>much</I> more to come with iostreams.<P>
<h4>Errata</FONT></h4></P>
Two errors have been reported to me (so far) on my column, "Standard C: C++ Language Support Library," <I>CUJ</I>, March 1994. The lesser one is at the end of page 17, where I omitted the empty brackets in the declarations of the global array operators. They should read:<P>
<pre>void *operator new[](size_T);
void operator delete[](void *);</pre>
Worse, near the end of page 16, I suggested that "you can make <I>operator new</I> virtual in the base class and fail to override it in a derived class." It is, of course, insane to think of a virtual <I>operator new</I> for a class. If you declare <I>operator new</I> for a class it is implicitly a static function. (How else can it be called without referring to a particular instance of the class?) It is still true, however, that failing to override such a declaration can result in the static member function being called with an object size argument that is larger than for the base class. That was my point.<P>
Thanks to John Dlugosz for being the first to point out these errors.<P>

<h4><a href="../../../source/1994/may94/plauger.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
