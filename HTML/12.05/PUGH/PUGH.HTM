

<HTML>
<HEAD>

<TITLE>May 1994/Questions and Answers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmay.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Questions and Answers<A name="00FC_0077"><A name="00FC_0077"></font></h2><P>
<h3 align="center"><A name="00FC_0000"><A name="00FC_0000">Using C Libraries in C++</h3><P>
<h3 align="center"><font color="#800000">Kenneth Pugh</font></h3><hr><blockquote><P>
<P><i><A name="00FC_0000"><A name="00FC_0000">Kenneth Pugh, a principal in Pugh-Killeen Associates, teaches C and C++ language courses for corporations. He is the author of All On C, C for COBOL Programmers,and UNIX for MS-DOS Users, and was a member of the ANSI C committee. He also does custom C/C++<I></I> <I></I>programming and provides SystemArchitectonics<I>sm</I> services. His address is 4201 University Dr., Suite 102, Durham, NC 27707. You may fax questions<I></I> <I></I>for Ken to (919) 489-5239. Ken also receives email at kpugh@allen.com(Internet) and on Compuserve 70125,1142.</i></P><P>
<B>Q</B><P>
I have been trying unsuccessfully to use the <I>qsort</I> function to sort data in one of my classes. Following is a simple example. I need to sort the array of <I>x</I> and <I>y</I> values in various ways. Thinking about <I>qsort,</I> which allows you to sort an array given a compare function, this route seemed perfect. The prototype for the compare function is:<P>
<pre>int (*compare)(const void *element1, const void *element2);</pre>
At first I thought I would declare the compare function as follows:<P>
<pre>extern "C"
   {
   int compare_function(const void *a,
      const void *b) { ... }
   }</pre>
However this did not work because <I>compare_function</I> needs access to <I>DataType</I> (see <A href="list1.htm">Listing 1</a>)
, which suggested a member function. After trying to declare it as a member function, my compiler complained as follows:<P>
<pre>File RA.CPPS; Line 317
Error: cannot implicitly convert
from: int (foov::*Cpp func)
         (void const *, void const *)
to  : int (*C func)
         (void const *, void const *)</pre>
So I tried:<P>
<pre>extern "C"
   {
   int compare_function(const void *a, const void *b);
   }</pre>
then the compiler complained that I was missing a semi-colon. I am totally lost why this does not want to work for me. If you have any suggestions or comments I surely would like to hear from you. I am using Symantec C++.<P>
Phil S. Bolduc<br>
Kamloops, B.C.<P>
<B>A</B><P>
It appears you have a Catch-22 situation here. You need to pass <I>qsort</I> the name of a function, presumably one written in C. However, you need a C++ function in order to access the private members of class A. The compare function needs to be a friend function or a member function of class <I>A</I>, so it can get at the private members. In this case, it needs access to the template for struct <I>DataType</I>.<P>
C++ function names are typically mangled by the compiler to include information on the types of parameters. The names of C functions are not mangled. <I>qsort</I> should not care whether the function pointer passed to it points to a function whose name was mangled or not. The function name does not exist once the linker has resolved it. However you cannot pass a C++ function to <I>qsort</I>, as the calling conventions for C++ functions may differ from those of C functions. For example, with Microsoft 7.0 the right argument for C functions is pushed onto the stack first. For C++ functions, the left argument is pushed first and the value for <I>this</I> (the implicit pointer argument for member functions) is pushed last. In C, it is the calling function's responsibility to pop the stack. In C++, it is the called function's job. You could write <I>compare_function</I> to use the parameters in the reverse order that they are passed to it. However, you will still have a stack popping problem.<P>
Borland C++ appears to bypass the C/C++ incompatibility problem by defining a non-standard <I>_USERENTRY</I> keyword. This keyword is applied to any function whose address is passed to another function such as <I>qsort</I>. The calling conventions for functions declared with this keyword appear to be the same, regardless of the language.<P>
What you really want is to be able to call a C++ function from C. It would be easy if the C version of your compiler had a statement such as:<P>
<pre>extern "C++"
   {
   int compare_function(const void *a, const void *b);
   }</pre>
This doesn't exist in the C Standard for the obvious reason that it was developed before the C++ standards effort began. <I>[Actually, it was proposed before the C Standard was frozen, and rejected &#151; pjp]</I> Whether it might ever get added in the future is another question. I had a few cases in porting portions of code from C to C++ in which it might have been handy at the time. However I think it would have been a maintenance nightmare had I been able to use it.<P>
The simplest answer to your problem is to define the struct <I>DataType</I> template outside of the class. I would use a naming prefix to make it less likely to clash with other names and to show its intended usage. You might call it <I>class_A_DataType</I>. That way the compare function can be written in C.<P>
A better answer is to get hold of the source for <I>qsort</I> and recompile it as a C++ function. Still better is to rewrite it as a template function. That way you can avoid using <I>void</I> * parameters. I dislike <I>void</I> * parameters since they avoid type-checking. For example, your function could start as:<P>
<pre>template &lt;class T&gt;
void qsort(T array[], unsigned int size,
         int (*p_compare_function)
         (const T &amp;, const T &amp;))
       {
       ///...
       }</pre>
Note that the parameter giving the size of an element is not needed, since that will be implicit inside the function when it is instantiated for a particular type. The definition of a compare function that could be passed to <I>qsort</I> is:<P>
<pre>int A::compare_function(const &amp; first,
                    const &amp; second)
   {
   if ( first.x &gt; second.x )
      return +1;
   else if ( first.x &lt; second.x )
      return -1;
   else
      return 0;
   }</pre>
This function corresponds to the compare function in your example. I prefer using reference parameters, but you could stay with pointers. If you only want to sort arrays of objects as a whole, you could define this function as:<P>
<pre>enum Sort_direction
{SORT_ASCENDING, SORT_DESCENDING};

template &lt;class T&gt;
void sort_array(T array[], unsigned int size,
             Sort_direction sort_direction)
   // Restriction - T must have operator &gt;()
   {
   ///...
   }</pre>
The compare function does not need to be passed to this function, as it is assumed that the class will have an <I>operator &gt;()</I> as a member function. I added the <I>sort_direction</I> parameter to permit sorts in both orders.<P>
<h4><FONT COLOR="#000080"><A name="00FC_0078">Function Prototypes<A name="00FC_0078"></FONT></h4></P>
In a recent C++ class, a student asked about function prototypes. In many of the books he had read, he saw prototypes without names, such as:<P>
<pre>string_copy(char *, const char *);</pre>
In fact, he commented that he didn't think parameters were allowed, because he never had seen them. Names are permitted of course. The names of the parameters only exist within the scope of the prototype. They do not have to agree with the names of the parameters in the function definition. For example, you might have:<P>
<pre>string_copy(char * s1, const char * s2);</pre>
in the prototype and<P>
<pre>string_copy(char * s2, const char * s1)
   {
   ...
   }</pre>
as the definition. The names in the prototype are important as documentation, however. They help specify the contract between the provider of the function and the user. The names should be meaningful, such as:<P>
<pre>string_copy(char * destination, const char * source);</pre>
In ANSI C, function pointers can involve prototypes. For example in Classic C, the declaration:<P>
<pre>int (*p_function)();</pre>
is a pointer to a function which may take any number or type of parameters. The ANSI standard deprecates the use of this declaration. Pointers to functions should include the parameters as part of the type. For example,<P>
<pre>int (*p_function_with_no_parameters)(void);
int (*p_function_taking_int)(int);
int (*p_function_taking_int_double(int, double);

function_with_no_parameters(void);
function_taking_int(int);
function_taking_int_double(int,double);

p_function_with_no_parameters =
   function_with__no_parameters;
p_function_taking_int =
   function_taking_int;
p_function_taking_int_double =
   function_taking_int_double;</pre>
You cannot use a pointer to one type of function to point to another type. For example:<P>
<pre>p_function_with_no_parameters =
   function_with_taking_int</pre>
yields a compiler error. The one place in which this change affects programming the most is with functions that take function pointers as parameters. <I>qsort</I>, as shown in the answer to the previous question, is one such function. The prototype for <I>qsort</I> is:<P>
<pre>qsort(void * array,
     unsigned int number_elements,
     size_t size_of_element,
     int (*compare_function)
     (const void *, const void *));</pre>
If you used <I>qsort</I> with an integer array, you might also use:<P>
<pre>int_compare(const void * p_first,
          const void * p_second)
   {
   int a = * (int *) p_first;
   int b = * (int *) p_second;
   // Compare a to b
   }
   
#define SIZE_ARRAY 10
int int_array[SIZE ARRAY];
qsort(int_array, SIZE_ARRAY,
     sizeof(int), int_compare);</pre>
<I>int_compare</I> has been shown with <I>void</I> * parameters so that its header matches that required by <I>qsort</I>. I am not particularly wild about that, since <I>int_compare</I> really uses <I>int</I> * parameters, rather than <I>void</I> * parameters. Alternatively you could code:<P>
<pre>int_compare(const int * p_first,
          const int * p_second)
   {
   // compare first to second
   }</pre>
and use:<P>
<pre>qsort(int_array, SIZE_ARRAY, sizeof(int),
     (int (*)(const void *, const void *)) int_compare);</pre>
The cast <I>(int (*)(const void *, const void *))</I> converts the type of <I>int_compare</I> to that required by <I>qsort</I>. P.J. Plauger reminds me to tell you that this admittedly is more honest, but not guaranteed to be portable. The C Standard permits different calling sequences for functions with different argument types. Although this may look a little ugly, you can always hide it behind a <I>typedef</I> or a <I>#define</I>.<P>
<h4><FONT COLOR="#000080"><A name="00FC_0079">Structure Alignment<A name="00FC_0079"></FONT></h4></P>
I've had several questions on structure alignment, particularly with the optimization of member access. These questions come up especially with newer 64-bit processors, which access data on eight-byte boundaries. However the same questions apply to processors which prefer access on two-byte boundaries. Some processors can only access particular data types on multi-byte boundaries. For example, on an IBM System/360, floating point numbers had to be stored at addresses evenly divisible by 4. On other processors, such as the 8086, data types can be stored at any address. On advanced processors such as the 80486, memory is accessed in multi-byte chunks. It will take fewer memory accesses to access multi-byte data types if they are stored on byte addresses divisible by the width of the memory bus.<P>
Most compilers have an option that forces structure members to be aligned on the byte boundary of the programmer's choice. Access to data on natural byte boundaries (e.g., the width of the memory bus) results in quicker retrieval, and sometimes even smaller code. However there may be wasted space due to unused bytes (called packing bytes) in the structure that are used to align the members. Forcing a structure to be as compact as possible requires more code and more time to access the individual members. The packing option for compilers varies. For Microsoft, it is <I>-Zp</I> followed by the alignment value (1, 2, or 4).<P>
The question is to pack or not to pack. Suppose you have the following template for a structure in your program.<P>
<pre>struct s_mixed_up
   {
   long 1ong_member;
   char char_member;
   long another_long_member;
   char another_char_member;
   };</pre>
The first thing you have to determine is whether the order of the structure is important. For pure efficiency purposes, an order such as:<P>
<pre>struct s_mixed_up
   {
   long long_member;
   long another_long_member;
   char char_member;
   char another_char_member;
   };</pre>
will always produce an equal or smaller data object, regardless of the packing option used. This is because the <I>char</I> data types are grouped together. The second determination is whether you have to match the layout of previously stored data that uses this structure template. If so, you will have no choice in using what packing options you can use. If neither of these cases apply, you are free to decide the packing you want for your structures. The decision is based on a tradeoff between code size and data size. A fully packed data structure will take less data space. However the code to access the data members may take up a lot of room. On a DEC Alpha, it takes only two instructions to fetch and use a <I>long</I> which is aligned on an eight-byte boundary. It takes twelve instructions to fetch a <I>long</I> that is part of a packed data structure.<P>
If you have large arrays of structures, then packing may pay off in the total size of code and data. If you only have a few variables of a particular structure template, then the additional code may well exceed the savings in data space.<P>
In this same vein, bit fields are a way of packing information into a structure. Like the packing bytes for normal members, whether you use bit fields or not depends on whether data size or code size is more important to you. C++ extends the possibilities for bit fields. In C, the base type of an element containing bit fields can only be declared as <I>int, signed int</I>, or <I>unsigned int</I>. An implementation may use a data type smaller than an <I>int</I> (such as a byte), if the size of the bit field can fit into that type. For example, given<P>
<pre>struct s_bit_field
   {
   int five_bits : 5;
   int another_five_bits: 5;
   int still_another_five_bits: 5;
   };</pre>
an implementation may put <I>five_bits, another_five_bits</I>, and <I>still_another_five_ bits</I> all into a single 16-bit <I>int</I> (or larger). Alternatively, it may put each one into its own byte (for faster access with possibly no shifting). If a subsequent bit field can fit into the same storage space as the previous field, then it would be packed together. For example, if an implementation did use bytes, then<P>
<pre>struct another
   {
   int four_bits : 4;
   int another_four_bits: 4;
   };</pre>
would use a single byte for both <I>four_bits</I> and <I>another_four_bits</I>. In C++, a bit field may be any integral type (<I>char, short, int, long</I>, and <I>signed/unsigned</I> variations), as well as an enumerated type. For example:<P>
<pre>struct s_bit_field
   {
   char five_bits : 5;
   char another_five_bits: 5;
   char still_another_five_bits: 5;
   };</pre>
would allocate a byte for each of <I>five_bits, another_five_bits</I>, and <I>still_another_five_bits</I>. The layout of bit fields is inherently machine dependent. I do not recommend using bit fields unless you are trying to match the bit fields of a particular machine register. In that case, the structure is explicitly tied to a particular machine and non-portability of layout does not matter.<P>
If you are using the bit fields to store just a few boolean values, then it may make more sense to use <I>char</I> for those variables instead. The code to do the shifting and masking will be eliminated. The total data size to store the variables may not be any greater.<P>

<h4><a href="../../../source/1994/may94/pugh.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
