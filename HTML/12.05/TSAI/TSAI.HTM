

<HTML>
<HEAD>

<TITLE>May 1994/Designing an OOP Compiler</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmay.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Object-Oriented Programming</FONT></H2>

<hr><h2 align="center"><font color="#800000">Designing an OOP Compiler<A name="00EA_006F"><A name="00EA_006F"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="00EA_0000"><A name="00EA_0000">Louis Tsai</font></h3><hr><blockquote><P>
<P><i><A name="00EA_0000"><A name="00EA_0000">Louis (Kam-wai) Tsai was born in Hong Kong where he earned his B.S. in Computer Engineering. He came to the United States in 1986 and earned his MBA in Computer Information Systems. He is a senior programmer/analyst at WORLDSPAN in Atlanta, GA. He can be reached at 969 Merrimac Way, Lawrenceville, GA 30244. 404-381-7735.</i></P><P>
<h4><FONT COLOR="#000080"><A name="00EA_0070">Overview<A name="00EA_0070"></FONT></h4></P>
Most marketed compilers are written in C or another conventional programming language. Adding a new command to the language may require changing a lot of code in your compiler. This increases its maintenance cost, as well as the time and effort needed for each new release. Also, a programmer must fully understand the design of a compiler before making changes to it.<P>
In this article, I will discuss an object-oriented compiler. The compiler was originally written in C using a DOS-based Windows API. My job was to rewrite the compiler using Borland C++ and Microsoft Windows while maintaining the same functionality. To run the product on Microsoft Windows and to fully utilize the advantages of porting to Windows (such as adding buttons, message boxes, and window operations), some Windows commands had to be added in our language. With object-oriented programming, we satisfied our requirements by creating an object class to implement a command. To add or delete commands in the language, we simply add or delete objects.<P>
<h4><FONT COLOR="#000080"><A name="00EA_0071">Architecture of a Compiler<A name="00EA_0071"></FONT></h4></P>
In begin with a brief review of a simple compiler. I have not changed the basic architecture, just implemented it with an objectoriented design. A compiler consists of three components (see the block diagram in <A href="fig1.htm">Figure 1</a>)
:<P>
<UL><li>a tokenizer</li>
<li>a parser</li>
<li>a code generator</li></UL>
Tokenizing a program is the first step. The compiler reads a character string from an input file and matches the string against entries in a keyword table. If it finds a match, it returns a token with an appropriate token type (an integer value). In our project, a keyword corresponds to a command. A character string not recognized as a keyword is tokenized as the name of a variable (the token is treated as a variable). Our tokenizer needs to support several functions: <I>getToken()</I>,<I> lookToken()</I>, and <I>peekToken()</I>. Function <I>getToken()</I> moves the file pointer to the next token and returns the new token from the file. Function <I>lookToken()</I> returns the current token in a program without moving the file pointer. Function <I>peekToken()</I> returns a look-ahead token without moving the file pointer.<P>
Our parser calls the above mentioned token-retrieval functions and checks command syntax. It also outputs syntax-error messages to users. For example, the syntax of an IF statement is:<P>
<pre>IF expression
   THEN statement ....
   {ELSE statment ....} ENDIF</pre>
If the token <I>IF</I> is encountered, the parser expects an expression, followed by <I>THEN</I>, and so on, <A href="fig2.htm">Figure 2</a>
shows a parse tree for an IF statement. As you can see, the diagram of a parse has branches like a tree, so we call it a parse tree. A conventional compiler builds a parse tree using linked lists or similar data structures.<P>
In addition to checking syntax of commands, our parser creates and updates a symbol tables, to store the variables declared inside a program. A symbol table is created and updated in the variable declaration section of a program. It is output to the object file at code generation time and referenced during execution. My project's symbol tables also contain the information needed to reference branch statements (e.g. GOTO, IF, and WHILE statments) and literals (all constants in the program, such as constant numbers or literals).<P>
The purpose of the code generator is to produce the appropriate instructions (instruction objects or machine language). My project's parser produces a pseudo file that contains all the instructions that are executed at run time. The code generator reads from the pseudo file and generates the appropriate instruction objects to an object file (output from the compiler). <A href="fig3.htm">Figure 3</a>
shows the data flow of the compiler.<P>
<h4><FONT COLOR="#000080"><A name="00EA_0072">Language Syntax<A name="00EA_0072"></FONT></h4></P>
The scripting language that the compiler compiles is similar to BASIC. It is designed to allow personal computer users to create and modify fill-in screens which, when combined, form scripts. Theses scripts guide the PC user through a task in a Computer Reservation System (CRS). The product is mainly used for airline, rental car, and hotel reservations. Instead of typing a long cryptic format command to the host computer, a travel agent can run a script program and enter data, retrieve airline schedules, book tickets, etc. <A href="list1.htm">Listing 1</a>
shows the syntax of a sample script program.<P>
To pop up a dialog box, you have to include a command, such as<P>
<pre>DIALOG ("Test.dlg", RET_CODE, parm1, parm2)</pre>
in your script program. <I>Test.dlg</I> is the name of the dialog file, which contains control statements. <A href="list2.htm">Listing 2</a>
shows a dialog file.<P>
Parsing a dialog statement involves another set of dialog commands (as shown in <A href="list2.htm">Listing 2</a>)
. To parse a dialog command, the compiler has to open a dialog file and compile it. The operation is just like compiling any other programming language. For details of the script and dialog language, please refer to <a href="#1">Reference 1</a>.<P>
As I mentioned earlier, the compiler handles two sets of commands: one for the script program and another for the dialog file. The compiler behaves as though you are running two compilers simultaneously. So to reduce duplication of code, I created a parent class called <I>Tokenizer</I>. This class is inherited by the two classes <I>Asl</I> and <I>Dlg</I>, which handle the separate translations.<P>
<h4><FONT COLOR="#000080"><A name="00EA_0073">Inside the Tokenizer<A name="00EA_0073"></FONT></h4></P>
<A href="list3.htm">Listing 3</a>
shows the definition of the <I>Tokenizer</I> class. <A href="list4.htm">Listing 4</a>
shows the definitions of classes <I>Asl</I> and <I>Dlg. Asl</I> is the tokenizer class for script programs and <I>Dlg</I> is for dialog files. Compiling either a script or a dialog file will use the same <I>lookToken()</I>,<I> getToken()</I>, and <I>peekToken()</I> functions in the parent class.<P>
The only difference between classes <I>Asl</I> and <I>Dlg</I> is the function <I>initialize()</I>. In <A href="list5.htm">Listing 5</a>,
 the virtual function <I>initialize()</I> is overridden in classes <I>Asl</I> and <I>Dlg</I>. The function initializes a keyword set <I>gKeywordSet</I> with different command sets (delimiter and operator sets are common to both languages). This way, I can compile two different languages with a minimum of code. I add the array <I>kcommands</I> to my keyword table in <I>Asl</I>. And I add the arrays <I>kdatatypes</I> and <I>kdialogcmds</I> in <I>Dlg</I>.<P>
All the strings stored in <I>kcommands</I>,<I> kdatatypes</I>, and <I>kdialogcmds</I> are defined in a keyword header file. This technique eases adding or deleting keywords in the languages. Also, if I want to change spellings in the language, I can just change keyword tables. This will be useful when I want to port products to foreign languages.<P>
<h4><FONT COLOR="#000080"><A name="00EA_0074">Implementing the IF Command<A name="00EA_0074"></FONT></h4></P>
Instead of using linked lists for the parse tree, I use an object-oriented approach to handle the parsing. I created a parse node for each command. <A href="list6.htm">Listing 6</a>
defines a parse node class for the command IF, which I call a <I>Pif</I> class. Inside the Pif class, the function <I>parse()</I> (shown in <A href="list7.htm">Listing 7</a>)
 parses the syntax of an IF command. <A href="fig2.htm">Figure 2</a>
shows the linkage of an IF parse node.<P>
Inside the <I>parse()</I> function, I instantiate an expression object (class <I>Pexpression</I>) and check for out of memory. Then I call the function <I>Pexpression::parse()</I> to check for the syntax of an expression. The expression<P>
<pre>pTemp = gpTokenizer-&gt;getToken()</pre>
assigns a new token from the input file to <I>pTemp</I>. I check the token type of <I>pTemp</I>. The next token I expect is a <I>THEN</I>. If it is a <I>THEN</I>, I expect statements. Otherwise, it must be an error. I output an error message to an error file.<P>
Before I enter into the while loop, I call <I>gpTokenizer-&gt;lookToken()</I> to check for the current <I>Token</I>. If it is not <I>ELSE</I> or <I>ENDIF</I>, it should be a statment. I instantiate a statement object (class <I>Pstatement</I>). Then, I call <I>Pstatment::parse()</I>, which is a function to differentiate commands in the languages. This function contains all the commands supported in the languages. The loop continues until the look ahead token is an <I>ELSE</I> or <I>ENDIF</I>. If the while loop ends with an <I>ENDIF</I>, the <I>Pif::parse()</I> ends and returns to the calling function. However, if it is an <I>ELSE</I>, another while loop (similar to the one in <A href="list7.htm">Listing 7</a>)
 is executed to handle statements after the token <I>ELSE</I>. The <I>gpErrorFile</I> is a class which handles error messages.<P>
If I need to add or delete commands, I simply change <I>Pstatement::parse()</I>. <A href="list8.htm">Listing 8</a>
shows the function <I>Pstatement::parse()</I>. <I>PARSE</I> is a macro that calls the function <I>parse()</I> and then cleans up the object. The function <I>Pstatement::parse()</I> starts by getting a token from the input file. A switch statement differentiates the type of parse node to be created. For example, when a CALL statement is followed by the token <I>THEN</I>, a <I>Pcall</I> parse node will be created. The function <I>Pcall::parse()</I> is called to handle the syntax of a CALL statement. <I>Pstatement::parse()</I> terminates and returns to <I>Pif::parse()</I>.<P>
<h4><FONT COLOR="#000080"><A name="00EA_0075">Nested IF Statements<A name="00EA_0075"></FONT></h4></P>
The compiler supports a nested IF, which occcurs when another <I>IF</I> token follows the token <I>THEN</I>. Another <I>Pif</I> parse node is created inside <I>Pstatement::parse()</I> and the function <I>Pif::parse()</I> is called to handle the new <I>IF</I> input tokens. It is like building a parse tree (see <A href="fig2.htm">Figure 2</a>)
. Each node inside a parse tree is a parse node. Each parse node's parse function contains the grammar for that command. Without using any explicit linked list, I can link each parse node with the function call <I>parse()</I> (see <A href="list7.htm">Listing 7</a>
and <A href="list8.htm">Listing 8</a>)
. The following displays the sequence of function calls for a nested IF:<P>
<pre>Pif::parse()
   --&gt; new Pstatement
   --&gt; Pstatment::parse()
   --&gt; new Pif

   --&gt; another Pif::parse()</pre>
Using the same technique, I created a <I>PdialogStatement</I> class for my dialog language. <A href="list9.htm">Listing 9</a>
shows the syntax of the parse function. <I>Pedit</I> and <I>Plistbox</I> parse functions check the syntax of the dialog commands EDIT and LISTBOX as shown in <A href="list2.htm">Listing 2</a>.
<P>
<h4><FONT COLOR="#000080"><A name="00EA_0076">Implementing the WHILE Command<A name="00EA_0076"></FONT></h4></P>
Another good example is the WHILE command, which has the following syntax:<P>
<pre>WHILE expression
   DO statement ....
   ENDWHILE</pre>
First, I instantiate an expression parse node. Then, I call the expression's parse function. A <I>DO</I> token is expected after the expression. Following the <I>DO</I> token, I have a loop to create <I>Pstatement</I> parse nodes and call the parse function. The loop ends when it find an <I>ENDWHILE</I> token. The algorithm is similar to that for IF. <A href="fig4.htm">Figure 4</a>
shows the parse tree for a WHILE node. <A href="list10.htm">Listing 10</a>
shows the code of a WHILE parse node.<P>
<h4><FONT COLOR="#000080"><A name="00EA_0077">Flexibility<A name="00EA_0077"></FONT></h4></P>
Parse nodes for different commands are quite similar. To implement commands using parse-node classes is easy and the code is reusable. I created more than thirty parse-node classes in two days using copy and paste functions. You can also move objects from one language to another. Some parse nodes &#151; such as for IF, WHILE, FOR, and REPEAT &#151; are universal commands. You can reuse them in any language. Also, you can add or delete objects easily. As a matter of fact, you can collect your parse-node classes in a library and share them for different languages. If you don't need these commands, simply exclude them from your <I>Pstatement</I> parse function.<P>
To design a new command, draw a parse tree for the command. Then, you can look at your parse-node library and reuse the relevant parse nodes in your code. In these examples, we reuse the expression and statement parse nodes. Also, if we put all the parse nodes in a DLL library, the size of the compiler's executable is significantly reduced.<P>
In my project, I had to interface with other pieces in the reservations system. Since we used object-oriented design, we broke the whole project into different classes before starting. We defined the classes, member functions and data members in header files. Everyone involved with the project reviewed the class definitions with which they needed to interface. We didn't need to know the details of how to implement those functions, just how to use them and to be sure we got the interface functions we needed.<P>
This is the beauty of object-oriented design. In my compiler, I used a symbol-table class, a code-generation class, and a dialog-manager class. The symbol-table class handles all the variables used in a script. My output file contains symbol tables used at run time. The symbol-table class has read and write functions that can read and write symbol tables to and from files. To improve the performance at run time, we output table objects to an object file (output file of a compiler) during compilation and read in the objects at run time.<P>
After the parsing, the compiler instantiates a code-generation class. The code-generation class looks at a file (we called it a pseudo file) generated by the parser that contains instructions. It instantiates instruction objects and calls the write function of the instruction object. The instruction objects were written to the object file. Similar to the symbol-table class, each instruction object has the capabilities to read and write itself to a file. The dialog-manager class handles control commands for the dialog file. The code-generation class calls functions inside the dialog-manager class to output dialog control objects.<P>
Without these classes, I would not have been able to finish my project. Also, these classes are reused in other projects. Once again, I have taken advantage of an important aspect of object-oriented design &#151; reusability.<P>
<h4><FONT COLOR="#000080"><A name="00EA_0078">Advantages of the Design<A name="00EA_0078"></FONT></h4></P>
When I first looked at the compiler and started my design work, I found that the old tokenizer used sets to distinguish different commands. I looked at some container classes supported by Borland, Microsoft, and Rogue Wave. I found that Rogue Wave's and Borland's set classes were very useful. My keyword set was implemented using the container class. I also used the Borland file-stream classes to handle my input and output. I began my design process by looking first at some existing classes in the market. Then, I defined classes and member functions that needed to be implemented in a header file. As the header file became too large to manage, I separated it out based on functionality.<P>
In the old parser, parsing functions were put in different files. Linking them together required a lot of <I>extern</I> statements, and it was time consuming to locate the functions. So I decided to build a parse-node class for each command. This had several benefits:<P>
<UL><li>I eliminated a lot of <I>extern</I> statements.</li>
<li>I put functions in groups and shared some member functions by putting them a parent class.</li>
<li>The parse-node classes are similar and are easy to duplicate. This can reduce the maintenance cost of the compiler.</li>
<li>I built a parsing engine which includes an expression parse-node class, symbol-table classes and the tokenizer. I can delegate some parse-node classes to someone else in order to reduce the development cycle.</li></UL>
In the old compiler, the code generation was embedded in the parser, making the parser more complicated. I separated the code generator into a class. There are several advantages of this approach:<P>
<UL><li>It makes programs more modular. I can plug in a different code generator in case I need to generate something different and I can reuse my parser in other projects.</li>
<li>It can simplify the coding and make it easy to maintain.</li>
<li>We can delegate the code generator to someone else to reduce the development cycle.</li>
<li>We can add optimization in our object file.</li>
<li>It is more flexible when incorporating enhancements.</li></UL>
Using object-oriented design can reduce the development cycle of a project. A lot of code can be reused in other projects. It is cost effective and easy to maintain. It may take some time to familiarize yourself with the object-oriented concept and the tools, but once you go through the learning curve, you will love it and won't want to go back to conventional C.<P>
<h4><FONT COLOR="#000080"><A name="00EA_0079">Acknowledgements<A name="00EA_0079"></FONT></h4></P>
I would like to thank the management of WORLDSPAN's Distributed Systems Development department for the support I have received. Special thanks to Alan Greenberg for his valuable input to this project and Cynthia Petrie for her editing. Thanks also to my co-workers Bruce Bettis for creating the symbol-table class, Scott Kelley for the code-generation class, and Ron Zepp for the dialog-manager class.<P>
<h4>References</FONT></h4></P>
<a name="1"></a>1.     <I>WORLDSPAN Scripting Language Manual</I>, July 1992.<P>
<a name="2"></a>2.     <I>Object-oriented Software Construction</I>, Bertrand Meyer, Prentice Hall, 1988.<P>

<h4><a href="../../../source/1994/may94/tsai.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
