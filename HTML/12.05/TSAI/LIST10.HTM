<HTML><HEAD>
<TITLE>May 1994/Designing an OOP Compiler/Listing 10</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 10 <I>Function</I> Pwhile::parse()</A></h4>
<pre>_CLASSDEF(Pwhile)
class_CLASSTYPE Pwhile
{
public:
  Pwhile(){}
  ~Pwhile(){}
  BOOL parse();
  int write(int,const char *);
}

BOOL Pwhile::parse()
{
  int nEndofWhile;
  Token * pTemp;

  // create an expression object
  Pexpression * pTempExpression = new Pexpression;
  // call function parse and clean up
  PARSEU(pTempExpression)
  pTemp = gpTokenizer-&gt;getToken();     // get a new token

  if (pTemp-&gt;tokentype == tkdo)        // check for token DO
  {
    pTemp = gpTokenizer-&gt;peekToken();  // a look ahead token
    
    // a loop to parse statements inside the while loop
    while ((pTemp-&gt;tokentype != tkendwhile) &amp;&amp;
   (!gpTokenizer-&gt;eof() )
    {
        // create a statement object
        Pstatement * pMyStatement = new Pstatement;
        PARSEU(pMyStatement)  // call function parse
                          // and clean up
        pTemp = gpTokenizer-&gt;peekToken();
    }
    
    if (pTemp-&gt;tokentype == tkendwhile)
    {
     // update the branch pointer
      gpLocalSymTable-&gt;Put(nEndofWhile,
                        new Sym_Number((NUMBER)
                                     gnCslFileIndex));
      gpTokenizer-&gt;getToken();
    }
    else
    {
       gpErrorFile-&gt;raise(39);
       return FALSE;
    }
  }
  else
  {
     gpErrorFile-&gt;raise(10);
     return FALSE;
  }

  return TRUE;
}
// End of File</pre>

</BODY>
</HTML>
