

<HTML>
<HEAD>

<TITLE>May 1994/CUG New Releases</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmay.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">CUG New Releases<A name="0102_007D"><A name="0102_007D"></font></h2><P>
<h3 align="center"><A name="0102_0000"><A name="0102_0000">Bison++, Flex++, ATOC, and DISKED</h3><P>
<h3 align="center"><font color="#800000">Victor R. Volkman</font></h3><hr><blockquote><P>
<P><i><A name="0102_0000"><A name="0102_0000">Victor R. Volkman received a BS in Computer Science from Michigan Technological University. He has been a frequent contributor to The C Users Journal since 1987. He is currently employed as Senior Analyst at H.C.I.A. of Ann Arbor, Michigan. He can be reached by<I></I> <I></I>dial-in at the HAL 9000 BBS (313) 663-4173 or by Usenet mail to sysop@hal9k.com.</i></P><P>
<h4><FONT COLOR="#000080"><A name="0102_007E">New Library Acquisitions<A name="0102_007E"></FONT></h4></P>
<UL><li>Bison++ (CUG #404): C compatible extension of GNU Bison to support C++ classes</li>
<li>Flex++ (CUG #405): C compatible extension of GNU Flex to support C++ classes</li>
<li>ATOC and DISKED (CUG #406): an ANSI-to-K&amp;R backwards translator and sector-level disk editor for MS-DOS</li></UL>
<h4><FONT COLOR="#000080"><A name="0102_007F">Bison++: CUG #404<A name="0102_007F"></FONT></h4></P>
Bison++ and Flex++, developed by Alain Cotmeur of Informatique-CDC (Arcueil, France) are two new packages that bring a pair of traditional UNIX tools into the 90s. Bison++ is derived directly from GNU Bison, the popular replacement for the UNIX utility <I>yacc</I> ("Yet Another Compiler Compiler"). Two decades after its creation, the <I>yacc</I> software interface remains the most popular tool for developing compilers, assemblers, and other text processing applications.<P>
Bison++ injects C++ classes into the established <I>yacc</I> software interface while retaining downward compatability with programs that use the older C interface. This makes the <I>yacc</I> software interface much more attractive for new C++ applications and gives a definite migration path for older C applications. Bison++ version 1.21-7 (released 11/18/93) is immediately available as CUG #404. The version number decodes to revision 7 of Bison++, which is a superset of GNU Bison 1.21.<P>
Bison++ compiles on most UNIX workstations and includes the ubiquitous GNU <I>configure</I> utility, which generates the appropriate makefiles for your workstation. Additionally, Bison++ claims compatibility with Microsoft C++ (makefile included) and Borland Turbo C++ (makefile not included).<P>
Since Bison++ is a superset of Bison, the archive includes complete Bison documentation. The documentation for Bison++ is in both GNU Texinfo format and PostScript. For information on Bison, on which Bison++ is based, see "Bison: A <I>GNU</I> Breed of <I>yacc</I>," by Victor Volkman, <I>CUJ</I>, August 1989, p. 117.<P>
<h4><FONT COLOR="#000080"><A name="0102_0080">Flex++: CUG #405<A name="0102_0080"></FONT></h4></P>
Cotmeur's other contribution to the CUG Library is the Flex++ package. Like Bison++, Flex++ offers the benefits of C++ classes while retaining downward compatibility with existing C programs.<P>
Coetmeur's Flex++ is derived directly from GNU Flex ("Fast LEX"), the popular replacement for the UNIX utility <I>lex</I>. The <I>lex</I> software interface remains very popular for developing stand-alone text processing applications and creating front-end lexical analyzers for utilities such as <I>yacc. lex</I> is ideal for matching both simple and complex patterns of characters.<P>
FLEX++ injects C++ classes into the established <I>lex</I> software interface. This both makes the <I>lex</I> software interface much more attractive for new C++ applications and gives a definite migration path for older C applications. FLEX++ version 2.3.8-6 (released 11/18/93) is immediately available as CUG #405. The version number decodes to revision 6 of FLEX++, which is a superset of GNU FLEX 2.3.8.<P>
FLEX++ compiles on most UNIX workstations and includes the GNU <I>configure</I> utility to generate the appropriate makefiles. FLEX++ is also compatabile with Microsoft C++ (makefile included) and Borland Turbo C++ (makefile not included).<P>
The archive includes complete FLEX documentation in both GNU Texinfo format and PostScript. For information on FLEX see "Public Domain Lex is Fast and FLEX-ible," by Victor Volkman, <I>CUJ</I>, October 1989, p. 129.<P>
<h4><FONT COLOR="#000080"><A name="0102_0081">ATOC and DISKED: CUG #406<A name="0102_0081"></FONT></h4></P>
This volume provides two small and powerful archives on a single diskette. Mike Rejsa (Brooklyn Park, MN) submits his translator for converting ANSI-style C code to older Kernighan and Ritchie (K&amp;R) syntax. ATOC version 1.08 (released 11/15/93) is designated CUG 406A. Also, Greg Jennings (Falmouth, MA) presents his MS-DOS DISK EDitor for low-level debugging and maintenance of floppy disks and hard disks. DISKED version 2.5 (released 01/14/94) is designated CUG #406B.<P>
<h4><FONT COLOR="#000080"><A name="0102_0082">ATOC: CUG #406A<A name="0102_0082"></FONT></h4></P>
Most C programmers have switched to ANSI-style coding techniques sometime in the last two or three years. The ANSI syntax allows for more comfortably readable code. The C compilers for many older UNIX systems, however, still require K&amp;R syntax, and the business of removing all ANSI-C-specific constructs from the source code can be both inelegant and tedious. ATOC translates ANSI programs to a K&amp;R compiling source stream. The CUG distribution includes an MS-DOS executable (14K), but the ATOC source should compile easily on other platforms. (ATOC itself is written in K&amp;R C.)<P>
<h4><FONT COLOR="#000080"><A name="0102_0083">Usage<A name="0102_0083"></FONT></h4></P>
<pre>Usage: ATOC [-e] [-i] [-il]
      [-t] [-v] infile [ outfile ]</pre>
Examples of usage:<P>
<pre>ATOC file. c
   (convert and output to display)

ATOC file.c out.c
   (convert and save)

ATOC -v file.c out.c
   (convert and save with -v option)</pre>
The -<I>e</I> option causes ATOC to ignore enumerations. Some K&amp;R compilers support enumerations, but others don't. If you turn off the -<I>e</I> option, ATOC will transform all enumerations into something more K&amp;R friendly.<P>
The -<I>i</I> option causes #<I>include</I> files to be included, converted, and placed in the output stream. Use ATOC without -<I>i</I> for a simple one-time conversion, such as when you have an ANSI program that you want to permanently convert to K&amp;R style. Use ATOC with -<I>i</I> when you are maintaining ANSI code and wish to convert an included header "on-the-fly" each time you recompile using your K&amp;R compiler.<P>
The -<I>il</I> option is just like -<I>i</I> except only the local #<I>include</I> files (those with names enclosed in double quotes) are included. If the #<I>include</I> file name is in &lt; &gt; characters, it is left as a normal #include statement. (These are often header files that come with the compiler, and would already be in K&amp;R C.)<P>
The -<I>t</I> option causes ATOC to ignore ANSI-standard trigraphs. (Note: the trigraphs supported by older compilers may not be ANSI-standard. These non-standard trigraphs will pass thru ATOC unchanged even without the -<I>t</I> option.)<P>
The -<I>v</I> option causes ATOC to ignore <I>voids</I>. (Some K&amp;R compilers support the <I>void</I> data type). A <I>void</I> used to indicate an empty function parameter list (e.g. <I>int func(void))</I> is always removed, even when the -<I>v</I> option is specified.)<P>
<h4><FONT COLOR="#000080"><A name="0102_0084">DISKED: CUG #406B<A name="0102_0084"></FONT></h4></P>
DISKED is an easy-to-use disk editor and data recovery program for IBM-PC/XT/AT and compatible computers. It allows you to edit any sector and save any sectors to a file. DISKED will recover data from a disk with a damaged boot sector, a damaged FAT, or a damaged directory area. Jennings intended DISKED to be very easy to learn and use. He has abbreviated commands to as little as one letter.<P>
Although DISKED can recover an erased file's data, DISKED cannot unerase a file. DISKED also does not format or change any format parameters of a disk. It does not fix bad sectors or move files around.<P>
DISKED starts at the root directory sector in a combined command and edit mode. You can navigate with arrow keys as if you were simply paging through a word processing document. As you move, DISKED displays what it sees on the disk.<P>
DISKED maintains two available areas for data: a sector buffer (that holds the selected sector's data) and a file buffer (that allows you to save sector data into a disk file). You can edit the sector buffer byte-wise with debugger type commands and then write the results back to the disk. DISKED provides a spare sector buffer to which a sector can be stored and retrieved for copying to another sector.<P>
You can save data by appending single or multiple sectors into the file buffer. You can then edit the file buffer, write the buffer to a disk file, empty the buffer and start again. Any number of absolute sectors can also be written to a file.<P>
DISKED is written 100% in C and can be built in any Microsoft or Borland C compiler environment. Please note that DISKED is protected by the GNU Public License with additional amendments by Jennings.<P>
</BLOCKQUOTE>
</BODY>
</HTML>
