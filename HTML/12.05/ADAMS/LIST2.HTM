<HTML><HEAD>
<TITLE>May 1994/Temporary Object Management through Dual Classes/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2 Vector <I>with dynamic VES and reference counting</I></A></h4>
<pre>class Vector;
class VES                // VES class definition
{    unsigned lng;            // Vector Length
    unsigned refs;           // Reference Count
    double *ves;             // VES
    friend Vector;
    VES ()                   // Default Constructor
    {    lng = 0;            // No VES
        refs = 0;
        ves = NULL; }
    VES (const unsigned ln)       // New Vector VES Constructor
    {    lng = ln;           // Set length
        ves = new double [ln];   // Allocate new VES
        refs = 0; }
    VES (const VES&amp; v)       // Copy Constructor
    {    lng = v.lng;        // Set length
        ves = new double [lng];  // Allocate new VES &amp; copy
        memcpy (ves, v.ves, lng * sizeof(double));
        refs = 0; }
    ~VES () { if (ves != NULL) delete ves; }         // VES Destructor
};
class Vector             // Vector class definition
{    VES *x;                  // Pointer to VES wrapper
   public:
    Vector () {    x = NULL; }         // Default Constructor
    Vector (const unsigned ln)    // New Vector Constructor
    {    x = new VES (ln); }      // Create a new VES
    Vector (const Vector&amp; v) // Copy Constructor
    {    x = v.x;                 // Copy VES
        x-&gt;refs++; }             // Increment reference count
    ~Vector ()                    // Destructor
    {    x-&gt;refs--;                    // Decrement reference count
        if (x-&gt;refs == 0) delete x; } // If no references, delete
    double&amp; operator()(const int coordinate) const
    {    // Address elements by coordinate
        return x-&gt;ves[coordinate]; }
    unsigned length() const { return x-&gt;lng; } // Report Vector length
    Vector&amp; operator = (const Vector&amp;);     // Assignment operator
    Vector operator+ (const Vector&amp;) const; // Addition operator
    friend Vector unit (const Vector&amp;);          // Unitize Vector
};
Vector&amp; Vector::operator= (const Vector&amp; v)  // Assignment operator
{    if (ves != v.ves) {      // Protect against self-reference
        if (x != NULL) {    // If current VES has no other references,
            if (--(x-&gt;refs) == 0) delete x; } // delete VES
        x = v.x; }          // Copy reference to VES
    return *this; }
Vector Vector::operator+ (const Vector&amp; v)   // Vector addition
{    if (v.x-&gt;lng != x-&gt;lng) exit(1);   // Ensure conformal addition
    Vector u (x-&gt;lng);            // Create same size Vector
    for (int i = 0; i &lt; x-&gt;lng; i++)   // Carry out addition
        u.x-&gt;ves[i] = x-&gt;ves[i] + v.x-&gt;ves[i];
    return u; }
// End of File
</pre>
</BODY>
</HTML>
