<HTML><HEAD>
<TITLE>May 1994/Temporary Object Management through Dual Classes/Listing 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 3 Vector <I>and</I> TempVector <I>with dynamic VES</I></A></h4>
<pre>class TempVector;
class Vector             // Vector class definition
{    unsigned lng;            // Vector Length
    double *ves;             // Vector Element Space
public:
    friend TempVector;
    Vector ()                     // Default Constructor
    {    lng = 0;                 // No VES
        ves = NULL; }
    Vector (const unsigned ln)    // New Vector Constructor
    {    lng = ln;                // Set length
        ves = new double [ln]; } // Create new VES
    Vector (const Vector&amp; v) // Copy Constructor
    {    lng = v.lng;             // Set length
        ves = new double [lng];       // Create new VES
        memcpy (ves, v.ves, lng * sizeof(double)); }
    Vector (TempVector&amp;);         // Typecast "Copy" Constructor
    ~Vector () { if (ves != NULL) delete ves; } // Destructor
    double&amp; operator()(const int coordinate) const
    {    // Address elements by coordinate
        return ves[coordinate]; }
    unsigned length() const { return lng; } // Report Vector length
    Vector&amp; operator= (const Vector&amp; v);    // Assignment operator
    Vector&amp; operator= (TempVector&amp; v);      // Assignement operator
    TempVector operator+ (const Vector&amp;) const;  // Vector Addition
    TempVector operator+ (const TempVector&amp;) const;   // Vector Addition
    friend TempVector unit (const Vector&amp;); // Unitize Vector
};
class TempVector              // Temporary Vector class definition
{    unsigned lng;            // Vector Length
    double *ves;             // Vector Element Space
  friend Vector;
    TempVector ()            // Default Constructor
    {    lng = 0;                 // No VES
        ves = NULL; }
    TempVector (const unsigned ln) // New TempVector Constructor
    {    lng = ln;                // Set length
        ves = new double [ln]; } // Allocate new VES
    TempVector (TempVector&amp; v)    // Copy Constructor
    {    lng = v.lng;             // Set length
        ves = v.ves;             // Seize VES
        v.ves = NULL; }
    unsigned length() const { return lng; } // Report Vector length
  public:
    ~TempVector () { if (ves != NULL) delete ves; } // Destructor
    double&amp; operator()(const int coordinate) const
    {    // Address elements by coordinate
        return ves[coordinate]; }
    friend TempVector unit (const Vector&amp;) // Unitize Vector
    friend TempVector unit (const TempVector&amp;); // Unitize Vector
    // No assignment operator
    friend Vector::Vector (TempVector&amp;);
    TempVector operator+ (const Vector&amp;) const; // Vector Addition
    TempVector operator+ (const TempVector&amp;) const; // Vector Addition
    friend TempVector Vector::operator+ (const TempVector&amp;);
};
Vector::Vector (TempVector&amp; v)
{    // Typecast "Copy" Constructor from TempVector to Vector
    ves = v.ves;             // Seize VES
    v.ves = NULL;
    lng = v.lng; }           // Set Vector length

Vector&amp; Vector::operator= (const Vector&amp; v)
{    // Assignment operator
    if (ves != v.ves) {      // Protect against self-reference
        if (ves != NULL) delete ves;  // Delete VES, if any
        lng = v.lng;             // Set Vector length
        ves = new double [lng];       // Allocate new VES &amp; copy
        memcpy (ves, v.ves, lng * sizeof(double)); }
    return *this; }
Vector&amp; Vector::operator= (TempVector&amp; v)
{    // Assignment operator
    // No danger of self-reference
    if (ves != NULL) delete ves;  // Delete VES, if any
    lng = v.lng;             // Set Vector length
    ves = v.ves;             // Seize VES
    v.ves = NULL;
    return *this; }
TempVector Vector::operator+ (const Vector&amp; v) const
{    // Vector addition
    if (v.lng != lng) exit(1);    // Ensure conformal addition
    TempVector u (lng);      // Create same size Vector
    for (int i = 0; i &lt; lng; i++) // Carry out addition
        u.ves[i] = ves[i] + v.ves[i];
    return u; }
TempVector Vector::operator+ (const TempVector&amp; v) const
{    // Vector addition
    if (v.lng != lng) exit(1);    // Ensure conformal addition
    TempVector u (lng);      // Create same size Vector
    for (int i = 0; i &lt; lng; i++) // Carry out addition
        u.ves[i] = ves[i] + v.ves[i];
    return u; }
TempVector TempVector::operator+ (const Vector&amp; v) const
{    // Vector addition
    if (v.lng != lng) exit(1);    // Ensure conformal addition
    TempVector u (lng);      // Create same size Vector
    for (int i = 0; i &lt; lng; i++) // Carry out addition
        u.ves[i] = ves[i] + v.ves[i];
    return u; }
TempVector TempVector::operator+ (const TempVector&amp; v) const
{    // Vector addition
    if (v.lng != lng) exit(1);    // Ensure conformal addition
    TempVector u (lng);      // Create same size Vector
    for (int i = 0; i &lt; lng; i++) // Carry out addition
        u.ves[i] = ves[i] + v.ves[i];
    return u; }
// End of File</pre>

</BODY>
</HTML>
