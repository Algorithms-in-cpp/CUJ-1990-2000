<HTML>   
     <HEAD>
<TITLE>August 1999/Uncaught Exceptions</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocaug.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Uncaught Exceptions: Just Say No</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Bobby Schmidt</FONT></H3>

<BLOCKQUOTE>
<p>Microsoft isn't the only C++ compiler vendor, but they manage to occupy Bobby's attention quite a lot this month.</p>
</BLOCKQUOTE>

<hr>
<BLOCKQUOTE>

<p><i>Copyright (c) 1999 Robert H. Schmidt</i></p>

<p>We came, we saw, we over ate. SD (Software Development) West was fun but tiring. I don't sleep well in hotels, and my roommate &#151; one Dan-the-Man Saks &#151; kept insisting on 7:30 AM wakeup calls. I spent much of the week feeling like an extra in a George Romero film.</p>
<p>Don't ask me what spiffy neato stuff was on the show floor, since I hardly made it out there. What I did see told me the show may have peaked, at least in its current form. SD West used to be in the San Jose Convention Center, moved to the larger Moscone Center in San Francisco a few years ago, but is returning to San Jose next year.</p>
<p>Assuming I'm right, why is SD contracting? I suspect two causes:</p>

<UL><LI>Other shows siphon off vendors and attendees. In this regard, SD is like traditional TV networks fighting cable: newer and more targeted channels (conferences) steal viewers and sponsors. The big splashy product announcements seem to come at vendor-driven shows like Apple's WWDC and Microsoft's Tech Ed, or at conferences like Embedded Systems that focus on more specific technologies.</LI>
<LI>You don't have to attend shows to get access to their information, or to their stars. If you want to contact the C++ heavyweights who speak at SD, just email them, hit their websites, or contract them to visit your company. Just about all the speakers have books out, and many write for magazines; very often, their talks are repackaging of what they've written elsewhere.</LI></UL>
<p>These conferences are my virtual office, gathering friends and colleagues I typically see only at these shows. For that reason alone, I hope SD finds a way to adapt and thrive.</p>
<p>Oh, one more thing: at each of these shows, <I>CUJ</I> sponsors a dinner for us columnists. Our next rendezvous is in San Jose this September for the Embedded Systems Conference, and it's my turn to organize the <I>CUJ</I> bacchanalia. If you know of dandy eateries in and around San Jose, please drop me a line.</p>

<h4><FONT COLOR="#000080">Privacy Please</FONT></H4>

<h4><FONT COLOR="#000080">Q</FONT></H4>

<p> Hi Bobby,</p>
<p>I have been a regular reader of your Q&amp;A column in <I>CUJ.</I> I have a question for you. Here is the scenario:</p>

<pre>
class Base
    {
public:
    virtual void f();
    };
 
class Derived : public Base
    {
private:
    virtual void f(); // was public in Base
    };
 
Base *b = new Derived;
(*b).f(); // OK, calls Derived::f
Derived *d = new Derived;
(*d).f(); // error, can't access Derived::f
</pre>

<p>Why does the language allow a private function to be called through the base class pointer?</p>
<p>My compiler is Microsoft's VC++ 5.0 compiler. Is this a bug in the compiler or this is allowed by the language specification for any intended purpose? Please clarify.</p>
<p>Thanks and regards, &#151; Anand Sowmithiran</p>

<h4><FONT COLOR="#000080">A</FONT></H4>

<p> VC++ is correct. To see why, we must explore a fundamental difference between static and dynamic typing. (I altered your original example, to better show the underlying problem.)</p>
<p>In your code, <B>*b</B> has the static type <B>Base</B>, while <B>*d</B> has the static type <B>Derived</B>. Those static types are determined by the compiler and never change. That's why we say the types are static, or fixed.</p>
<p>At run time, those same objects take on dynamic types that may differ from their static types. In this case, <B>*d</B> has the same static and dynamic types (<B>Derived)</B>, while <B>*b</B> has a dynamic type (<B>Derived)</B> different from its static type (<B>Base</B>). As their name suggests, dynamic types are not fixed, but can change over a program's lifetime.</p>
<p>By your question, you believe access control &#151; public, protected, and private &#151; is affected by an object's dynamic type. By that reasoning, <B>(*b).f()</B> should fail to compile, since <B>*b</B>'s dynamic type is <B>Derived</B>, and <B>f</B> is private in <B>Derived</B>.</p>
<p>However, the compiler doesn't care or even know about dynamic types; it traffics only in static types. Since <B>*b</B>'s static type is <B>Base</B>, and since <B>Base::f</B> is public and accessible, the compiler accepts <B>(*b).f()</B> at face value, as a call to a <B>Base</B> member. It's only at run time that <B>*b</B> is actually bound to a <B>Derived</B> object &#151; after the compiler has already determined access control.</p>
<p>I'll grant you, this does seem to be an insecure back door into private member access. But if you ponder the fluid nature of dynamic typing, you'll realize access control can't be reckoned any other way. Consider</p>

<pre>
void func(Base &amp;param)
    {
    param.f(); // should this compile?
    }
 
Base base;
func(base);
Derived derived;
func(derived);
</pre>

<p>The dynamic type of <B>param</B> changes over the lifetime of the program. In the first <B>func</B> call <B>param.f()</B> is bound to <B>Base::f</B>, while in the second call <B>param.f()</B> is bound to <B>Derived::f</B>.</p>
<p>Given your reasoning that dynamic type determines accessibility, should the indicated line compile? Put another way, is the <B>f</B> in <B>param.f()</B> public? Private? Both? Does your answer change if I remove either of the calls to <B>func</B>? Or if I make <B>func</B> inline?</p>
<p>If you are <B>Base</B>'s author, the solution to all this is simple: make <B>f</B> non-virtual. Then the called <B>f</B> will always match the static type, regardless of the object's dynamic type.</p>
<p>If you can't or won't change <B>Base</B>, then change <B>Derived</B> so that <B>*b</B> can't dynamically reach <B>Derived::f</B>. You do that by preventing <B>Derived::f</B> from overriding <B>Base::f</B> in the first place. In a classic case of Small World Syndrome, another reader stumbled into the very solution to your problem. Read on...</p>

<h4><FONT COLOR="#000080">Let's Get Ready to Rumble!</FONT></H4>

<h4><FONT COLOR="#000080">Q</FONT></H4>

<p> Bobby,</p>
<p>Okay, a small group of us are having a debate over this, and we figured you would be a good referee.</p>
<p>We have a base class like</p>

<pre>
class Base
    {
public:
    virtual void f();
    //... other stuff
    };
</pre>

<p>with a virtual function. We want to derive from this base, and provide two versions of the function in the derived class: one that takes no parameters (like the base class function), and one taking extra parameters that the base class function doesn't.</p>
<p>Initially we were going to design something like</p>

<pre>
class Derived : public Base
    {
public:
    virtual void f();    // like Base::f
    virtual void f(int); // new
    //... maybe other stuff
    };
</pre>

<p>But then one of the bright guys here thought: hey, we can collapse those first two derived functions into one with</p>

<pre>
class Derived : public Base
    {
public:
    virtual void f(int = 0);
    //... maybe other stuff
    };
</pre>

<p>This way we can call the derived function just like we do the base function, with no arguments, or we can call it with arguments.</p>
<p>So you're wondering, what's the debate? Well, most of us think this is a slick solution, but one person disagrees. She said she once read about problems combining default arguments and virtual functions, but can't remember the specifics. We have a lunch bet riding on your answer.</p>
<p>Thanks, &#151; Donny Brooks</p>

<h4><FONT COLOR="#000080">A</FONT></H4>

<p> I've massaged your code snippets, so that they match those appearing in reader Anand Sowmithiran's question above. This way I can answer both questions at once.</p>
<p>I'm not certain what behavior you expect, but I can probably guess. Given that you've declared <B>Base::f</B> as virtual, you probably expect "normal" polymorphism like this:</p>

<pre>
Base *b = new Base;
(*b).f(); // calls Base::f
b = new Derived;
(*b).f(); // calls Derived::f
</pre>

<p>If my assumption is right, you owe your dissenting colleague lunch &#151; your code will compile, but it won't run correctly.</p>
<p>For <B>Derived::f</B> to override <B>Base::f</B>, both functions must share the same signature (name and parameter types). Unfortunately for you, the two <B>f</B>'s have different signatures: <B>Base::f</B> has no parameters, while <B>Derived::f</B> has one parameter. Instead of overriding <B>Base::f</B>, <B>Derived::f</B> hides it <a href="#1">[1]</a>.</p>
<p>Because the two classes no longer share overridden functions, the normal virtualization mechanism is short-circuited: <B>(*b).f</B> always references <B>Base::f</B> and <B>(*d).f</B> always references <B>Derived::f</B>, regardless of the objects' dynamic types:</p>

<pre>
b = new Base;
(*b).f(); // calls Base::f
b = new Derived;
(*b).f(); // still calls Base::f
d = new Derived;
(*d).f(); // calls Derived::f
</pre>

<p>I can understand your apparent confusion. Even though the functions' parameter sequences are different, their calling sequences can look identical:</p>

<pre>
(*b).f(); // OK, calls Base::f()
(*d).f(); // OK, calls
          //   Derived::f(int) with default argument 0
</pre>

<p>leading you to believe the functions have the same signature.</p>
<p>Here's the kicker: default arguments do not affect a function's signature. The relevant subclause in the C++ Standard (8.3.6/9, "Default arguments") is quite plain:</p>

<BLOCKQUOTE>
<p>A default argument is not part of the type of a function.</p>
</BLOCKQUOTE>

<p>By implication, the two statements</p>

<pre>
void f(int);
void f(int = 0);
</pre>

<p>declare the same function, while</p>

<pre>
void f();
void f(int = 0);
</pre>

<p>declare different functions.</p>
<p>Okay Anand, here's your payoff: this same function hiding solves your private access dilemma. Simply declare <B>Derived::f</B> with parameters different from those of <B>Base::f</B>, possibly giving those parameters default arguments. You will then no longer be able to reach <B>Derived::f</B> from a pointer to <B>Base</B>.</p>
<p>This trick can cause untold grief when you aren't expecting it. If you want a function to be overridden, it must have the same signature across classes. As I've shown above, default arguments can fool you into thinking functions are overridden when they really aren't. I've not experienced this particular "gotcha" in my own work, but I imagine it can lead to extremely stealthy bugs.</p>

<h4><FONT COLOR="#000080">Hobson's Choice</FONT></H4>

<h4><FONT COLOR="#000080">Q</FONT></H4>

<p> Dear Bobby,</p>
<p>This email is in response to your article in the June '99 issue of <I>C/C++ Users Journal</I> about the compliance of Microsoft's compiler.</p>
<p>Please note that you can get the VC6 compiler to be compliant on the issue of the <B>for(int i;...;...)</B> by using the compliance switch: <B>/Za</B>. As you have guessed, making this change to the default behavior breaks too much existing code.</p>
<p>Best regards, &#151; Fabrice Debry</p>

<h4><FONT COLOR="#000080">A</FONT></H4>

<p> I tested the command-line option <B>/Za</B> on VC++ 5 and 6, and found that</p>

<pre>
for (int i;;)
    ;
for (int i;;)
    ;
</pre>

<p>compiles with the option on, but fails to compile with the option off <a href="#2">[2]</a>. In the latter case, VC++ complains that <B>i</B> is multiply defined.</p>
<p>According to the command-line help, <B>/Za</B> means "disable extensions." Informally, I've treated the <B>a</B> in <B>/Za</B> as a mnemonic for "ANSI" or "ANSI conformance," and interpreted the switch states thusly:</p>

<UL><LI><B>/Za</B> on = translate strictly conforming code only</LI>
<LI><B>/Za</B> off = translate strictly conforming code, plus code that has Microsoft-specific extensions</LI></UL>

<p>As a result, I thought that <B>/Za</B> affected only code outside the Standard, meaning strictly conforming code was unaffected. Apparently I was wrong. I never would have guessed that disabling a strictly conforming feature qualifies as an "extension" <a href="#3">[3]</a>.</p>
<p>To be fair, I have sympathy for Microsoft's desire to not break existing code. Consider this variation on the example I published in May:</p>

<pre>
int i = 42;
 
int main()
    {
    int j;
    for (int i = 0;;)
        ;
    j = i; // which i?
    printf("j = %d\n", j);
    }
</pre>

<p>With language extensions disabled (<B>/Za</B> on) the run-time result is</p>

<pre>
j = 42
</pre>

<p>matching the current C++ Standard. But with language extensions enabled (<B>/Za</B> off) the result is</p>

<pre>
j = 0
</pre>

<p>matching the behavior in Standard C.</p>
<p>In effect, the source code has undergone a silent change: while the source itself is physically unaltered, its run-time behavior is different. Further, since the code continues to build, the program author may be unaware of any change. This is one of those odd and unfortunate cases where the same code will translate and run one way as C and older C++, and another way as newer C++.</p>
<p>So I am sympathetic, yes, but I think Microsoft erred in their solution. Beyond muddying the definition of "extension" as I described above, this solution trades one problem for another: in order to get some conforming features (like <B>for</B>-scoped objects), you must give up others.</p>
<p>To see this, try compiling</p>

<pre>
#include &lt;string&gt;
</pre>

<p>both with and without <B>/Za</B>. The results are striking: with language extensions enabled the line compiles fine, but with language extensions disabled this single line generates over 100 errors.</p>
<p>P.J. Plauger wrote the Standard libraries Microsoft ships. From what he told me, he got the libraries to compile cleanly with the EDG front end's <B>&#151;strict</B> switch, but can't get the same results with VC++'s <B>/Za</B>. As I consider EDG's translator to be the most conforming available, this is strong indication that the problem lies not in Plauger's libraries, but in Microsoft's compiler.</p>
<p>Regardless of the cause, the net effect is clear: you cannot have all of VC++'s strictly conforming features available at once. In this particular example, you can either include Standard library headers, or have <B>for</B>-scoped objects; you cannot have both. For most users this is Hobson's choice, effectively rendering <B>for</B>-scoped objects largely unusable in VC++ programs.</p>
<p>Microsoft has compiler options to specifically enable exception handling and run-time type identification &#151; all features of a strictly conforming program. Perhaps they should allow more finely tuned control of other conformance features (like <B>for</B>-scoped objects), by either compiler option or pragma. Alternatively, they could change their compiler so that Standard library headers build with language extensions disabled.</p>

<h4><FONT COLOR="#000080">Deja Vu</FONT></H4>

<h4><FONT COLOR="#000080">Q</FONT></H4>

<p>Here I have a question about C++ (but I think it's more about Visual C++). If I try to compile this code on Visual C++ 5.0:</p>

<pre>
void main()
{
    char *p(NULL);
    p = new char[1000];
    delete []p;
}
</pre>

<p>I get these four error messages:</p>

<p>syntax error : 'constant'<br>
'=' : overloaded function as left operand<br>
cannot delete objects that are not pointers<br>
unrecoverable block scoping error</p>

<p>However on other compilers (like CodeWarrior for Macintosh) this is working. If I rewrite the code like this:</p>

<pre>
typedef char *pChar;
void main()
{
    pChar p(NULL);
    p = new char[1000];
    delete []p;
}
</pre>

<p>then all is okay.</p>
<p>Is this a problem in Visual C++? Is this in the C++ Standard?</p>
<p>Thanks in advance, &#151; Sturm Dorel</p>

<h4><FONT COLOR="#000080">A</FONT></H4>

<p> I'm beginning to think the Editor-in-Chief sold my contract to <I>Windows Developer's Journal,</I> but forgot to tell me.</p>
<p>Sturm, what you have discovered is a long-standing "feature" in VC++. The compiler doesn't like the syntax of direct-initialization for pointers:</p>

<pre>
char *p(NULL); // error in VC++
</pre>

<p>although it's happy to take the equivalent copy-initialization syntax:</p>

<pre>
char *p = NULL; // OK in VC++
</pre>

<p>I say syntax but not semantics, for as you discovered, hiding the pointer under a typedef makes the compiler happy.</p>
<p>Assuming Microsoft purposely leaves some features unimplemented to avoid breaking code, I can't fathom what code they risk breaking here. I tried this both with and without the magic <B>/Za</B> switch to no avail, leading me to believe this is a genuine bug, and not a conscious "extension."</p>

<h4><FONT COLOR="#000080">Erratica</FONT></H4>

<p>Two Diligent Readers took issue with my March column item "There Can Be Only One!," which concerned a simple singleton class.</p>
<p>Diligent Reader #1, Robert Allan Schwartz, correctly points out that my class allows cloning of singleton objects &#151; and a singleton that allows copying isn't very single. Oops. Where my original sample has</p>

<pre>
private:
    X();
    ~X();
</pre>

<p>you should change the code to read</p>

<pre>
private:
    X()
        {
        // ...
        }
    X(X const &amp;);
    X &amp;operator=(X const &amp;);
    ~X();
</pre>

<p>Declaring an explicit copy constructor prevents the compiler from generating a default constructor. But the singleton class object broker (function <B>Object</B> in the original code) needs to create a single encapsulated <B>X</B> object. For that object to be created, some <B>X</B> constructor must be defined.</p>
<p>Solution: declare both constructors private, so that nobody outside <B>X</B> can call them, but actually define the default constructor, so that <B>X::Object</B> can construct its hidden <B>X</B> object.</p>
<p>Diligent Reader #2, Richard Howells, says my original sample fails to compile with &#151; you guessed it &#151; VC++ 6. I reduced the sample to</p>

<pre>
class X
    {
    static void f()
        {
        static X x;
        }
    ~X();
    }; // error here
</pre>

<p>ran it through VC++, and got this error message for my trouble:</p>

<BLOCKQUOTE>
<p>'X::~X' : cannot access private member declared in class 'X'</p>
</BLOCKQUOTE>

<p>Interestingly, if I change either <B>f</B> or <B>x</B> to be non-static, the error goes away. Clearly, then, the problem is not just one of access control. And yes, to be thorough, I tried both with and without <B>/Za</B> &#151; no difference.</p>
<p>P.S. I'm hereby declaring a moratorium on VC++ questions and comments for at least a month. We'll have to find someone else to pick on.</p>

<h4><FONT COLOR="#000080">Notes</FONT></H4>

<p><a name="1"></a>1.  The C++ Standard discusses this to death in subclause 10.3 ("Virtual functions").</p>
<p><a name="2"></a>2.  You can toggle this option via the IDE's "Project -&gt; Settings..." menu item. From the resulting "Project Settings" dialog, choose the "C/C++" pane, select "Customize" in the "Category" listbox, then check or clear "Disable language extensions."</p>
<p><a name="3"></a>3.  George Orwell would be proud: War is Peace, Ignorance is Strength, Freedom is Slavery, and now Contractions are Extensions.</p>

<p><i>Bobby Schmidt is a freelance writer, teacher, consultant, and programmer. He is also an alumnus of Microsoft, a speaker at the Software Development and Embedded Systems Conferences, and an original &#145;&#145;associate'' of (Dan) Saks &amp; Associates. In other career incarnations, Bobby has been a pool hall operator, radio DJ, private investigator, and astronomer. You may summon him on the Internet via <B>rschmidt@netcom.com</B>.</i></p>


</BLOCKQUOTE>
</BODY>
</HTML>
