<HTML><HEAD>
<TITLE>August 1999/A Vector Class for Geometric Computations/Figure 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Figure 2: A partial listing of the tnVector class</A></h4>
<pre>
template&lt;int Dim&gt; class tnVector {
public:
     
   /* Note:
    *   all functions are considered inline according 
    *   to C++ specifications.
    */
   tnVector() {}
   tnVector(const double x, const double y) { setValue(x, y); }
   tnVector(const double x, const double y, const double z)
      { setValue(x,y,z); }
     
   double operator[](const int ix) const { return _v[ix]; } 
   double&amp; operator[](const int ix) { return _v[ix]; }
      
   double lengthSquared() const { return dot(*this); }
     
   double length() const { return sqrt(dot(*this)) }; 
   double distanceSquared(const tnVector&lt;Dim&gt;&amp; p) const {
      double t, a(0.0);
      for (int ix = 0; ix &lt; Dim; ++ix)
         { t = _v[ix] - p[ix]; a += t * t; }
      return a;
   }
     
     
   void increment(const tnVector&lt;Dim&gt;&amp; x, const double s = 1.0)
      { for (int ix = 0; ix&lt;Dim; ++ix) _v[ix] += x._v[ix] * s; }
     
   // Math operators
   void operator+=(const tnVector&lt;Dim&gt;&amp; p)
      { for (int ix = 0; ix &lt; Dim; ++ix) _v[ix] += p._v[ix]; }
     
   void operator-=(const tnVector&lt;Dim&gt;&amp; p)
      { for (int ix = 0; ix &lt; Dim; ++ix) _v[ix] -= p._v[ix]; }
     
   void operator+=(const double s)
      { for (int ix=0; ix&lt;Dim; ++ix) _v[ix] += s;}
   void operator-=(const double s)
      { for (int ix=0; ix&lt;Dim; ++ix) _v[ix] -= s;}
   void operator*=(const double s)
      { for (int ix=0; ix&lt;Dim; ++ix) _v[ix] *= s;}
   void operator/=(const double s)
      { for (int ix=0; ix&lt;Dim; ++ix) _v[ix] /= s;}
     
   void setDifference(const tnVector&lt;Dim&gt;&amp; x,
                      const tnVector&lt;Dim&gt;&amp; y) {
     for (int ix=0; ix&lt;Dim; ++ix)
        _v[ix] = x._v[ix] - y._v[ix];
   }
     
   void setSum(const tnVector&lt;Dim&gt;&amp; x, const tnVector&lt;Dim&gt;&amp; y) {
      for (int ix=0; ix&lt;Dim; ++ix) _v[ix] = x._v[ix] + y._v[ix];
   }
     
   // Set to weighted sum of vectors: self = x * w_x + y * w_y. 
   void setWeightedSum(const tnVector&lt;Dim&gt;&amp; x,
                       const double w_x,
                       const tnVector&lt;Dim&gt;&amp; y,
                       const double w_y = 1.0) {
      for(int ix=0; ix&lt;Dim; ++ix)
         _v[ix] = x._v[ix]*w_x + y._v[ix] * w_y; }
     
   // Dimension-specific functions
   void setValue(const double x, const double y); 
   double directedAngle(const tnVector&lt;2&gt;&amp;) const;
     
   void setValue(const double, const double, const double); 
   void setCross(const tnVector&lt;3&gt;&amp; x, const tnVector&lt;3&gt;&amp; y); 
   double tripleProduct(const tnVector&lt;3&gt;&amp;,
                        const tnVector&lt;3&gt;&amp;) const;
     
protected:
   double _v[Dim]; // Storage for vector elements.
     
};  // End tnVector
     
// Inline definitions of dimension-specific functions
     
inline void tnVector&lt;2&gt;
::setValue(const double x, const double y) 
{ _v[0] = x; _v[1] = y; }
     
inline void tnVector&lt;3&gt;
::setValue(const double x, const double y, const double z) 
{ _v[0] = x; _v[1] = y; _v[2] = z; }
     
inline void tnVector&lt;3&gt;
::setCross(const tnVector&lt;3&gt;&amp; x, const tnVector&lt;3&gt;&amp; y) {
   _v[0] = x._v[1] * y._v[2] - x._v[2] * y._v[1]; 
   _v[1] = x._v[2] * y._v[0] - x._v[0] * y._v[2]; 
   _v[2] = x._v[0] * y._v[1] - x._v[1] * y._v[0];
}
     
inline double tnVector&lt;2&gt;
::directedAngle(const tnVector&lt;2&gt;&amp; b) const {
   return atan2(_v[0]*b._v[1] - _v[1]*b._v[0],
                _v[0]*b._v[0] + _v[1]*b._v[1]); }
     
inline double tnVector&lt;3&gt;
::tripleProduct(const tnVector&lt;3&gt;&amp; b,
                const tnVector&lt;3&gt;&amp; c) const {
   return
      _v[0] * (b._v[1] * c._v[2] - b._v[2] * c._v[1]) + 
      _v[1] * (b._v[2] * c._v[0] - b._v[0] * c._v[2]) + 
      _v[2] * (b._v[0] * c._v[1] - b._v[1] * c._v[0]);
}

</pre>
</BODY>
</HTML>
