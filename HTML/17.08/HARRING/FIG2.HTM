<HTML><HEAD>
<TITLE>August 1999/Win32 Multithreading Made Easy/Figure 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Figure 2: Class Derived interface and implementation</A></h4>
<pre>
/* ==========================================
Derived.h
========================================== */

#ifndef DERIVED_H
#define DERIVED_H

#ifndef THREADABLEOBJECT_H
#include "threadableobject.h"
#endif

class Derived : public ThreadableObject
{
public:
    Derived();
    ~Derived();
    
    void SetChar( char ch );

    // Pure Virtual function in MultiThread
    virtual bool 
    ThreadableTask(DWORD* dwReturnCode);

private:
    char m_ch;
    int m_nCount;
};
#endif

/* ==========================================
Derived.cpp
========================================== */

#include "derived.h"
#include &lt;iostream&gt;


Derived::Derived()
:ThreadableObject()
{
    m_ch = '\0';
    m_nCount = 0;
}


Derived::~Derived()
{}


void Derived::SetChar(char ch)
{
    m_ch = ch;
}


bool 
Derived::ThreadableTask( DWORD* dwReturnCode )
{
    using namespace std;

    while ( m_nCount &lt; 100 )
    {
        cout &lt;&lt; m_ch;
        m_nCount++;
        // return true;
    }

    *dwReturnCode = 0;
    return false;
}


</pre>
</BODY>
</HTML>
