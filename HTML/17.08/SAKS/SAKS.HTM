<HTML>   
     <HEAD>
<TITLE>August 1999/C++ Theory and Practice</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocaug.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">C++ Theory and Practice: Isolating Design Decisions, Part 1</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Dan Saks</FONT></H3>

<BLOCKQUOTE>
<p>How do you encapsulate design decisions? One at a time.</p>
</BLOCKQUOTE>

<hr>
<BLOCKQUOTE>

<p><i>Copyright &copy; 1999 by Dan Saks</i></p>

<p>Several months ago, I wrote a couple of columns on using classes to partition large programs into simpler components.  (See "C++ Theory and Practice: Partitioning with Classes," <I>CUJ,</I> February 1999 and "C++ Theory and Practice: Trimming Excess Fat," <I>CUJ,</I> March 1999.) Rather than dwell on basic class features, which I assumed you already knew, I focused on the judicious use of more advanced features in an effort to express the program's design more clearly.</p>
<p>In both articles I used xr, my trusty old (that's trusty, not crusty or rusty) cross-reference generator program, as my example for illustrating the techniques. I was making pretty good progress refining xr until I got hung up on the problem that arises from the shallowness of the <B>const</B> qualifier. I devoted the next three columns to developing a class template called <B>deep_pointer&lt;T&gt;</B> to cure the problem. (See "C++ Theory and Practice: Thinking Even Deeper," <I>CUJ,</I> July 1999.) Okay, okay, so maybe I got a little obsessed with what might seem to some of you to be a minor problem, but I thought it was pretty cool. I expect to get considerable mileage from deep pointers in the future.</p>
<p>Anyway, now that I have a seemingly viable deep pointer template, I'd like to get back on the previous track. But, before we immerse ourselves in specific programming issues, let me restate my motives for this exercise.</p>

<h4><FONT COLOR="#000080">Why Are We Doing This?</FONT></H4>

<p>C++ has numerous features designed specifically to support the development of large systems. Just about everything having to do with classes, including access control, derived classes, virtual functions, and operator overloading, exists primarily to support large systems. In fact, most of C++ that isn't C is arguably there for the same reason.</p>
<p>The difficulty in developing a large program is not so much a function of the program's size (in source lines or characters) but rather a function of the number of details you must grasp in order to work on the program. It's all those details &#151; input and output values, algorithms, data structures, and physical resources &#151; that make the program conceptually complex.  Reliability and maintainability suffer at the hands of such complexity. In other words, complex programs are hard to get right and to keep right.</p>
<p>How, then, do C++ features such as classes support large-scale software development? By making it easier to decompose large, complex programs into collections of smaller, simpler components.</p>
<p>Of course, just breaking a big program into smaller pieces (functions, classes, or namespaces) doesn't necessarily make the overall program structure simpler. It does only if you break it up into appropriate pieces. Each piece should be an abstraction. That is, it should hide some of the program's details from the other pieces.</p>
<p>I think Grady Booch put it very well when he wrote:</p>

<BLOCKQUOTE>
<p>The task of the software development team is to engineer the illusion of simplicity <a href="#1">[1]</a>.</p>
</BLOCKQUOTE>

<p>My intent in this and succeeding articles is to discuss some of the fine points of using C++ to enhance the illusion of simplicity. For this, I need a concrete programming example that's big enough to demonstrate, at least in some small ways, the problems you can run into when developing and maintaining really big programs. The program has to be complicated enough so that it leaves something to simplify, but not so complicated that it drowns us in details. I think the cross-reference generator fills that bill quite nicely.</p>
<p>I started with an existing program rather than one that I wrote from scratch because I didn't want to spend time developing algorithms and data structures. Rather, my focus is on wrapping those algorithms and data structures into tidy abstract bundles.</p>

<h4><FONT COLOR="#000080">Where We Are</FONT></H4>

<p>xr reads text from standard input and writes a cross-reference to standard output. The cross-reference output is an alphabetized list of the words (identifiers as in C++) that appeared in the input. Each line in the output contains one word followed by the sequence of unique line numbers on which that word appeared in the input.</p>
<p>For example, if you use one of xr's source files (<a href="list1.htm">Listing 1</a>) as input to xr, the cross-reference output should contain the following line for the identifier <B>token</B>:</p>

<pre>
token:   15   17   18   19   20
</pre>

<p><B>token</B> actually appears twice on line 18, but the output only mentions 18 once.</p>
<p>xr uses garden-variety data structures, such as binary trees and linked lists. If you're not familiar with these structures, you can find out about them in just about any book on data structures ever written. Specifically, xr uses a binary tree to maintain the words in alphabetical order. Each node in the tree holds a word and its corresponding sequence of line numbers. More precisely, each node in the tree contains a pointer to the null-terminated character array representation of a word, and pointers to the head and tail of a linked list representing the sequence of line numbers for that word.</p>
<p>In my first rewrite of the program, I created a class called <B>cross_reference_table</B>, which encapsulates that tree. (See "C++ Theory and Practice: Partitioning with Classes," <I>CUJ,</I> February 1999.) When I created the class, I split the program from one source file into two source files and one header file:</p>

<UL><LI><B>xr.cpp</B>: the main part of the application, including the input processing</LI>
<LI><B>table.h</B>: the <B>cross_reference_table</B> class and inline member function definitions</LI>
<LI><B>table.cpp</B>: the remaining definitions for the <B>cross_reference_table</B> class</LI></UL>

<p>These three files appear as <a href="list1.htm">Listings 1</a> through <a href="list3.htm">3</a>, respectively.</p>
<p><a href="list2.htm">Listings 2</a> and <a href="list3.htm">3</a> employ the deep pointer class template, which I developed over the past few months. The deep pointer class definition appears in <a href="list4.htm">Listing 4</a>. For the most part, a <B>deep_pointer&lt;T&gt;</B> behaves just like a <B>T *</B>, but a <B>deep_pointer&lt;T&gt; const</B> behaves like a <B>T const *const</B>.</p>
<p>The tree implementation employs a structure type, <B>tree_node</B>, which was originally global. Now it's a private member of the <B>cross_reference_table</B> class. The <B>cross_reference_table</B> class definition in <a href="list2.htm">Listing 2</a> does not need the complete type definition for <B>tree_node</B>. Therefore, it declares <B>tree_node</B> as an incomplete member type. The complete type definition appears in <a href="list3.htm">Listing 3</a>.</p>
<p>The <B>cross_reference_table</B> class employs two functions, <B>add_tree</B> and <B>put_tree</B>, which were also originally global. Now they are private static member functions. (See "C++ Theory and Practice: Trimming Excess Fat," <I>CUJ,</I> March 1999.)</p>
<p>Some of you may have noticed that I could use some of the STL containers (the generic containers in the Standard C++ library) instead of the special-purpose data structures already in this program. For example, I could declare the <B>cross_reference_table</B> as:</p>

<pre>
map&lt; string, set&lt;unsigned&gt; &gt; table;
</pre>

<p>I could use a <B>vector</B>, <B>list</B>, or <B>deque</B> instead of a <B>set</B>. I could use a <B>multimap</B> instead of a <B>map</B>, although I suspect a <B>multimap</B> would be noticeably less convenient than a <B>map</B>. I will consider these possibilities eventually, but not just yet.</p>
<p>Although the STL containers are very handy for many common problems, they don't eliminate the need to write your own data structures. When you do write you own, you should give careful thought to how you package those structures as abstract types. It's those thoughts that I want to consider now.</p>

<h4><FONT COLOR="#000080">Identifying Arbitrary Decisions</FONT></H4>

<p>I wrote the <B>cross_reference_table</B> class to create an illusion of simplicity inside the <B>main</B> function. It seems to have worked.  The class effectively hides from <B>main</B> all traces of the trees and lists inside the cross-reference table. There isn't much left there to simplify.</p>
<p>Most of the complexity of this program is now in the <B>cross_reference_table</B> class. As a very crude measure, I ran the MKS wc (word count) utility on the program files. No matter which metric you choose (lines, words, or characters), there's about twice as much source code together in <B>table.h</B> and <B>table.cpp</B> as there is in <B>xr.cpp</B>.</p>
<p>Probably a better indicator that there's complexity lingering in the <B>cross_reference_class</B> is that all the linked data structures, <B>list_node</B>s as well as <B>tree_node</B>s, are in the code for that class.  Even though the body of <B>add_tree</B> (<a href="list3.htm">Listing 3</a>) is about the same length as the body of <B>get_token</B> (<a href="list1.htm">Listing 1</a>), <B>add_tree</B> deals with much more complicated data. I mean, just look at all those <B>-&gt;</B> operators in <B>add_tree</B>.</p>
<p>Yet another way to look at the complexity of the <B>cross_reference_table</B> class is that it embodies not one, but three, design decisions:</p>
<p>1.  The words in the table are alphabetized in a binary tree of <B>tree_node</B>s. Each <B>tree_node</B> pairs a word with a sequence of line numbers.</p>
<p>2.  Each word is represented as a pointer to the zeroth character of a null-terminated character string stored in a dynamically allocated array of <B>char</B>.</p>
<p>3.  Each sequence of line numbers is represented as a pair of pointers, one to the first node and one to the last node in a singly-linked, null-terminated list of <B>list_node</B>s. Each <B>list_node</B> contains one number of its sequence.</p>
<p>Each of these design decisions is somewhat arbitrary in that two programmers of comparable skill could look at the same set of requirements and yet quite reasonably choose different data structures to accomplish the chore. Or, a programmer who chose the data structures for an early version of the program might replace any or all of those structures in a later version.</p>
<p>Let's consider some alternatives:</p>

<UL><LI>The binary tree in the current implementation doesn't balance itself. You might replace it with a balanced tree, such as an AVL or red-black tree. You might use a multi-way tree such as a b-tree. Or, you could use a linear structure such as a skip list.</LI>
<LI>You might use a compression algorithm that will yield a more compact string representation for the words in the tree. You might use a memory management algorithm that causes less fragmentation of the free store.</LI>
<LI>You might try using a circular list for the line number sequences. With a circular list, you need only a pointer to the tail of the list. The next pointer of the tail node leads back to the head node, eliminating the need for a separate pointer to the head of each list.</LI></UL>

<p>I think you get the idea.</p>
<p>Though each of the three design decisions contributes to the structure of the cross-reference table, each one really is a distinct decision. It's not hard to imagine wanting to change just one of them. Unfortunately, the code that implements each decision runs together inside the <B>cross_reference_table</B> class, making it harder to change one decision without disturbing the others.</p>
<p>The blurring of the design decisions is evident in several places in the code. For example, the <B>tree_node</B> structure (from <a href="list2.htm">Listing 2</a>):</p>

<pre>
struct
cross_reference_table::tree_node
    {
    deep_pointer&lt;char&gt; word;
    deep_pointer&lt;list_node&gt;
        first, last;
    deep_pointer&lt;tree_node&gt;
        left, right;
    };
</pre>

<p>combines aspects of all three design decisions:</p>

<UL><LI>The pointer <B>word</B> represents a character string.</LI>
<LI>Together, the pointers <B>first</B> and <B>last</B> represent a line number sequence.</LI>
<LI>The pointers <B>left</B> and <B>right</B> each represent a subtree of the binary tree.</LI></UL>

<p>The design decisions also run together in the bodies of <B>add_tree</B> and <B>put_tree</B>. For example, <B>add_tree</B> (in <a href="list3.htm">Listing 3</a>) contains the following code to create a new <B>tree_node</B> for word <B>w</B> found on line number <B>n</B>:</p>

<pre>
if (t == NULL)
    {
    t = new tree_node;
// &#151;&#151;&#151;&#151;&#151; (1) &#151;&#151;&#151;&#151;&#151;
    t-&gt;word =
        new char [strlen(w) + 1];
    strcpy(t-&gt;word, w);
// &#151;&#151;&#151;&#151;&#151; (2) &#151;&#151;&#151;&#151;&#151;
    t-&gt;first = new list_node;
    t-&gt;first-&gt;number = n;
    t-&gt;first-&gt;next = NULL;
    t-&gt;last = t-&gt;first;
// &#151;&#151;&#151;&#151;&#151; (3) &#151;&#151;&#151;&#151;&#151;
    t-&gt;left = t-&gt;right = NULL;
    }
</pre>

<p>I've inserted comments here to separate the code corresponding to each design decision. The code between comments (1) and (2) fills in the word for the node. The code between comments (2) and (3) places the first line number into the corresponding line number sequence. The code below (3) ensures that the left and right subtrees are empty. Again, without these comments the code just runs together.</p>

<h4><FONT COLOR="#000080">A Simple Rule of Thumb</FONT></H4>

<p>I think it's pretty evident that the next refinement of the program should make the distinction between the design decisions more apparent. This will make the code more readable and improve the odds that we'll be able to change any one design decision without corrupting the code for another.</p>
<p>Even before object-oriented techniques were all the rage, Parnas <a href="#2">[2]</a> suggested a simple rule to guide this effort:</p>

<UL><LI>Each encapsulation unit should hide one design decision.</LI></UL>

<p>When Parnas suggested this, hardly anyone knew what object-oriented programming was. Designers spoke in terms of encapsulation units such as modules or functions. For programmers using C++, or any language with classes, I think the updated guideline is simply:</p>

<UL><LI>Hide each design decision in a separate class.</LI></UL>

<p>We've already encapsulated the first decision (the tree structure) as the <B>cross_reference_table</B> class. We can isolate each of the other two decisions (the representations for words and for sequences of line numbers) as separate classes. The transformation of the program starts with the data structures.</p>
<p>Once again, a <B>tree_node</B> looks like:</p>

<pre>
struct
cross_reference_table::tree_node
    {
    deep_pointer&lt;char&gt; word;
    deep_pointer&lt;list_node&gt;
        first, last;
    deep_pointer&lt;tree_node&gt;
        left, right;
    };
</pre>

<p>Here:</p>

<pre>
deep_pointer&lt;char&gt; word;
</pre>

<p>is merely the current implementation for the abstract concept of a variable-length character string. We could use the standard library's <B>string</B> class or write our own if the standard string's performance isn't up to snuff. In either event, the declaration of the <B>word</B> member becomes something like:</p>

<pre>
string word;
</pre>

<p>which is more abstract than a pointer member.</p>
<p>Similarly, the pointer members:</p>

<pre>
deep_pointer&lt;list_node&gt; first, last;
</pre>

<p>constitute the implementation <I>du jour</I> for a line number sequence. By crafting a class <B>line_number_sequence</B>, we could replace both pointers with a single member object:</p>

<pre>
line_number_sequence lines;
</pre>

<p>which is also more abstract.</p>
<p>Applying these abstractions to <B>tree_node</B> we get:</p>

<pre>
struct
cross_reference_table::tree_node
    {
    string word;
    line_number_sequence lines;
    deep_pointer&lt;tree_node&gt;
        left, right;
    };
</pre>

<p>This definition describes the program's design much better than the previous <B>tree_node</B> definition. Even without any comments, it says "each node in the cross-reference table's tree associates a string with a corresponding line number sequence."</p>

<h4><FONT COLOR="#000080">A Line Number Sequence Class</FONT></H4>

<p>Rather than introduce both classes at once, I think it's more instructive (and less risky) to introduce one new class at a time. Let's start with the <B>line_number_sequence</B> class, for which we'll need new header and source files, <B>sequence.h</B> and <B>sequence.cpp</B>, respectively.</p>
<p>For the most part, you can create <B>sequence.h</B> and <B>sequence.cpp</B> by stealing code from <B>table.h</B> and <B>table.cpp</B>. Parts of the <B>cross_reference_table</B> class definition become parts of the <B>line_number_sequence</B> class definition. Parts of the <B>cross_reference_table</B> member function bodies become the bodies of the <B>line_number_sequence</B> member functions. I show you the details of the transformation next time around.</p>

<h4><FONT COLOR="#000080">References</FONT></H4>

<p><a name="1"></a>[1]  Grady Booch. <I>Object-Oriented Design with Applications</I> (Benjamin/Cummings, 1991).</p>
<p><a name="2"></a>[2]  David Parnas. "On the Criteria to be Used in Decomposing Systems into Modules," <I>The Communications of the ACM,</I> vol. 15, no. 12, December 1972.</p>

<p><i>Dan Saks is the president of Saks &amp; Associates, which offers training and consulting in C++ and C. He is active in C++ standards, having served nearly seven years as secretary of the ANSI and ISO C++ standards committees. Dan is coauthor of <I>C++ Programming Guidelines</I>, and codeveloper of the Plum Hall Validation Suite for C++ (both with Thomas Plum). You can reach him at 393 Leander Dr., Springfield, OH 45504-4906 USA, by phone at +1-937-324-3601, or electronically at <B>dsaks@wittenberg.edu</B>.</i></p>


<h4><a href="../../../source/1999/aug99/saks.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY>
</HTML>
