

<HTML>
<HEAD>

<TITLE>February 1994/Intuitive Access to Bit Arrays</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocfeb.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">Intuitive Access to Bit Arrays<A name="005D_0020"><A name="005D_0020"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="005D_0000"><A name="005D_0000">Siegfried Heintze</font></h3><hr><blockquote><P>
<P><i><A name="005D_0000"><A name="005D_0000">Siegfried Heintze is a Software Engineer involved in research, software development and training. He consults in all areas of software engineering and specializes in object oriented techniques. He has developed and taught courses on object oriented design and analysis and object oriented programming.</i></P><P>
<h4><FONT COLOR="#000080"><A name="005D_0021">Introduction<A name="005D_0021"></FONT></h4></P>
Our ability to express our ideas is often constrained by the syntax and the semantics of a programming language. The difference between what we want to write and what we are constrained to write is spoken of as the "semantic gap." The better a language is able to support abstraction, the less prominent is the semantic gap. Facilities to support abstraction include abstract data types and object-oriented programming.<P>
This article identifies some semantic gaps in the C programming language and discusses bridging the semantic gap using C++. I had always regretted the fact the C programming language had no explicit support for values sometimes best represented as single bits, such as TRUE or FALSE. C programmers often use<P>
<pre>typedef unsigned char Boolean;</pre>
as a substitute when space is not an issue. If, however, it is evident that packing our bits into an <I>unsigned long</I> is appropriate, then we have to use macros. So, when we wanted to say:<P>
<pre>BitArray x, b;
x[5] = b[6];</pre>
we were constrained to using some macros that might make the above statements look like this in C:<P>
<pre>typedef unsigned long BitArray;
BitArray x, b;
int t;
t = bitx(b,6); /* extract bit position 6, length 1 */
bitd(x,5,t);   /* deposit into bit position 5, length 1 */</pre>
<h4><FONT COLOR="#000080"><A name="005D_0022">Class <B><I>BitArray</I><A name="005D_0022"></B></FONT></h4></P>
As you can see, there is quite a difference between what we wanted to write (or could write if we were writing in a language such as Pascal) and what the compiler constrained us to write. By incorporating the features of C++ we can overload the subscript operator (<I>operator[]</I>) to do what ever we want &#151; correct? Well maybe. Even C++ places some constraints on what we do. Let's start with a naive (but functional) implementation of class <I>BitArray</I>.<P>
<pre>class BitArray {
public:
    BitArray();
    int operator[](int);
    void set(int value, int pos);
private:
    unsigned long _data;
};</pre>
With this class definition, we can now write:<P>
<pre>BitArray x, b;
x.set(b[6],5);</pre>
This is an improvement over the previous fragment in C because we can use <I>operator[]</I> to extract a bit. Unfortunately, we cannot use <I>operator[]</I> and <I>operator=</I> (the assignment operator) to deposit a value into an array of bits. As a substitute, we introduce the member function <I>set</I> to deposit new values into the array.<P>
If we want to abandon member function <I>set</I> and allow <I>operator[]</I> to be a modifiable 1value (an expression that can receive a value by being placed on the left hand side of an assignment statement), we typically overload <I>operator[]</I> to return a reference to an element of the array. Then we let the <I>operator=</I> actually perform the transfer of the value. We typically see <I>operator[]</I> overloaded as follows:<P>
<pre>class IntArray {
public:
    int&amp; operator[](int sub){
        {...}
    ...
};</pre>
The logic here is that we use a single function called <I>operator[]</I> to both deposit and extract values from the container object. The <I>&amp;</I> indicates that we return a reference to a value instead of a value. Returning a reference permits <I>operator[]</I> to appear on the left side of an assignment statement, as in:<P>
<pre>IntArray x, b; x[6] = b[5];</pre>
There are two problems with this approach, however:<P>
1)     We cannot return a reference to a single bit.<P>
2)     The function for fetching an element out of the array is identical to the function for storing an element. (In both cases we merely return a reference to the element).<P>
These constraints are clearly not a problem when implementing an array of <I>int</I> because our function return type is a reference to an <I>int</I>. The problem, then, is how to access (fetch and deposit) the elements of an array of bits using <I>operator[]</I> and <I>operator=</I>.<P>
The focus of the remainder of this article will be to examine some important features of the C++ language and develop a technique to solve the problem of returning a reference to a bit. Later, we will note that this is not the only place where type constraints make the naive use of <I>operator[]</I> difficult, so we can apply this technique elsewhere.<P>
<h4><FONT COLOR="#000080"><A name="005D_0023"><I>const</I><B> Function Arguments<A name="005D_0023"></B></FONT></h4></P>
The <I>const</I> type qualifier allows us to tell the compiler that we promise not to modify an object. The object might be a function value, a function argument, or the secret (or implied) argument of a member function. This is done with a <I>const</I> type qualifier that becomes part of the signature of the function. Consider the following fragment of code:<P>
<pre>void func(const BitArray &amp; x)
{
    if (x[0] == 1)
        ...
}</pre>
Here we are passing the argument by reference (which sometimes indicates that we plan to modify the argument). But then we declare the argument to be <I>const</I>, which indicates that the body of code is not permitted to do so. This may seem confusing. Why did not we just pass the argument by value (the default passing mechanism in C and C++ that automatically makes a copy of the object being passed)? Often the answer is that we could have, but passing by reference is more efficient because it is not necessary to invoke the constructor and destructor for the parameter <I>x</I>.<P>
Sometimes, in copy constructors for example, we are not permitted to pass by value. The problem with the above fragment of code is that the compiler will complain that we are modifying the object <I>x</I>. This is not actually true, of course, we are just examining it. Nevertheless, we can observe that we will sometimes be using <I>operator[]</I> to modify a <I>BitArray</I> object and other times we will need to explicitly state that <I>operator[]</I> will not modify the object. We can use the <I>const</I> feature to overload <I>operator[]</I>. We now modify the definition of class <I>BitArray</I>:<P>
<pre>class BitArray {
public:
    int&amp; operator[](int sub)
        {...}
    int operator[](int sub) const
        {...}
...
};</pre>
The <I>const</I> in the second function is part of the signature and consequently becomes a criterion for selecting the correct function among several overloaded functions of the same name. We have solved one problem: we can now use <I>operator[]</I> for read-only access inside functions that don't permit us to modify <I>BitArray</I> objects. However, we are not finished yet because we don't know what the value is that we are going to deposit! Recall that <I>operator[]</I> has only two arguments: the implied argument (which is the array of bits) and the subscript.<P>
<h4><FONT COLOR="#000080"><A name="005D_0024">Class <B><I>BitField</I><A name="005D_0024"></B></FONT></h4></P>
Given the code:<P>
<pre>   BitArray x, b;
   x[6] = b[5];</pre>
How does the <I>operator[]</I> function on the left know that we want to deposit a value of one and not of some other value, perhaps zero? The answer is that it cannot. Only the <I>operator=</I> function knows this. In the last code fragment, <I>operator=</I> receives two integer values. But the <I>operator=</I> function needs to know:<P>
1)     the address of the representation of the array object (here the address of an <I>unsigned long</I>)<P>
2)     the subscript<P>
3)     the length of the bit field (in this example it is assumed to be one)<P>
4)     the value to be deposited in the array of bits.<P>
The problem, then, is to communicate these four pieces of information to the <I>operator=</I> function.<P>
To communicate the first three pieces of information we introduce a new class whose declaration looks something like this:<P>
<pre>   class BitField {
   public:
       BitField(unsigned long *data, unsigned int pos, unsigned width);
       void operator=(unsigned long rhs);
   private:
       unsigned long *_data;
       int _pos;
       int _width;
   };</pre>
We also change <I>BitArray</I> to accommodate this new change:<P>
<pre>class BitArray {
public:
    BitField operator[](int) {
        {...}
    int operator[](int) const {
        {...}
...
};</pre>
Now we have solved another problem. We have a function <I>BitField::operator=</I> which will be called by the compiler on our behalf when the following code is encountered:<P>
<pre>BitArray x, b;
x[6] = b[5];</pre>
<I>BitField::operator=</I> has access to all four of the necessary pieces of information to perform the deposit into the array of bits. When the compiler sees <I>x[6]</I> it notes that it is a modifiable lvalue and consequently calls function <I>BitField::operator[](int)</I>, which returns a <I>BitField</I> object.<P>
The compiler then looks for an appropriate assignment function and notes that class <I>BitField</I> has such a member function. This is then used to perform the actual masking to deposit the new value into the <I>unsigned long</I> which holds the actual representation of the array of bits. We might consider ourselves finished at this point. However, there is still another potential problem. If we code in the tradition of many C programmers, we may want to use a feature whereby we are allowed to have multiple assignments within a single statement, like the following:<P>
<pre>BitArray x;
x[3] = x[2] = x[1] = x[0] = 1;</pre>
This presents a problem because we declared our assignment operator function to be of type <I>void</I>, which means it is really a procedure that has no return value. So after we assign the value one to <I>x[0]</I> we have no value to assign to <I>x[1]</I>.<P>
How can we make our new class <I>BitField</I> compatible with other built-in types in C? The key to this problem is to consider something counterintuitive. We normally don't think of <I>operator=</I> as a function that returns a value. But this exactly why we are permitted to write expressions such as <I>a = b = c</I> in C and C++. We now have a definition of <I>BitField</I> that looks like this:<P>
<pre>class BitField {
public:
    BitField(unsigned long *data, unsigned int pos, unsigned int width);
    BitField&amp; operator=(unsigned long rhs);
private:
    unsigned long *_data;
    int _pos;
    int _width;
};</pre>
We could have declared the assignment operator as:<P>
<pre>BitField operator=(unsigned long)</pre>
which would have returned a <I>value</I> of type <I>BitField</I> instead of a <I>reference</I> to a <I>BitField</I>. This would have caused constructors and destructors for the <I>BitField</I> class to execute. Since C++ allows us to return references as function values we added the <I>&amp;</I> for efficiency at no cost. We still have not solved our problem however. <I>operator=</I> only accepts values of type <I>unsigned long</I>. Recall the fragment of code causing the problem:<P>
<pre>BitArray x;
x[3] = x[2] = x[1] = x[0] = 1;</pre>
While we now have the rightmost <I>operator=</I> returning a reference for use by the next rightmost <I>operator=</I>, we need a value of type <I>unsigned long</I> when in fact we have a reference to an object of type <I>BitField</I>. There are a couple of ways to resolve this problem. We shall now examine one of them.<P>
<h4><FONT COLOR="#000080"><A name="005D_0025">Conversion Operators<A name="005D_0025"></FONT></h4></P>
C++ has yet another feature called <I>conversion operators</I>, which convert from a user-defined type to a different type (often a built-in type). We may define such a function as:<P>
<pre>class BitField {
public:
    operator unsigned long() {
    {...}
};</pre>
Since this is a member function, we have a single implied argument and a function return value of type <I>unsigned long</I>. The compiler automatically inserts calls to this function to perform the conversions we need for statements containing multiple assignments. We now reexamine the example of multiple assignment operators one last time:<P>
<pre>BitArray x;
x[3] = x[2] = x[1] = x[0] = 1;</pre>
Progressing from right to left: The rightmost <I>operator[] </I>returns a reference to a <I>BitField</I> object for which its member function <I>operator[]</I> is invoked. The function returns a reference to a <I>BitField</I> object. This is a problem because the next <I>operator[]</I> wants an integer value, not a reference to a <I>BitField</I> object. The conflict is resolved by invoking the coversion operator which converts the reference to a <I>BitField</I> object to an integer value which is then used by the next <I>operator[]</I>.<P>
There is one scenario in which the conversion operator does not work as we would like. Consider some arbitrary constructor that accepts an integer, and a function that accepts a <I>const</I> argument of that type:<P>
<pre>struct X{
    X(unsigned int x){cout &lt;&lt; "Create X =" &lt;&lt; x &lt;&lt; endl; }
};
void f(const X&amp; x){cout &lt;&lt; "Function f"; }</pre>
We expect the conversion operator for class <I>X</I> to perform the conversion, and indeed it does when the <I>X</I> object is declared to be <I>const</I>. Unfortunately, the conversion will not accomodate the conversion to a constant object. The workaround, shown below, is to explicitly declare a temporary constant object to pass to the function.<P>
<pre>main(){
    X a;
    f(a[1]); //error
    const X temp = a;
    f(temp[1]); //OK
}</pre>
<h4><FONT COLOR="#000080"><A name="005D_0026">Other Applications<A name="005D_0026"></FONT></h4></P>
Stepping back a bit, we had a scenario where it was intuitive to use the subscript notation (<I>operator[]</I>) to access elements of a container object. The problem was that, unlike arrays of integers, the method for depositing into the object was quite different from extracting a value. Where else might this technique be useful?<P>
The most obvious extension is to accomodate array elements represented by multiple bits. We can specify the number of bits to be used for each element in the constructor for <I>BitArray</I>. <I>Bitfield</I> objects will then contain the address, bit position, and length (i.e., number of bits). This is demonstrated in <A href="list1.htm">Listing 1</a>,
 showing the file <I>bitarr.h</I>. The first argument to the constructor gives the width in bits. <A href="list2.htm">Listing 2</a>
shows the accompanying file <I>bitarr.cpp.</I><P>
Interested readers will want to modify this code to accomodate arrays whose representation requires more than a single long word of bits. We have a similar situation for a video display composed of pixels, where the <I>plot</I> and <I>readPixel</I> functions mentioned earlier are used for writing and reading pixels respectively. If we have previously programmed in Pascal, we might be tempted to pursue implementing a syntax to accommodate code like this:<P>
<pre>VideoDisplay v;
v[5,6] = v[20,10];</pre>
While this was possible in some older C++ compilers, it is not permitted in the current C++ language, because the underlying C language does not permit multiple arguments for <I>operator[]</I>. This is unfortunate, but there is a reasonable substitute:<P>
<pre>VideoDisplay v;
v(5,6) = v(20,10);</pre>
We can use the same technique of overloading <I>operator[] </I>twice, the second time with a <I>const</I> type qualifier, then defining a temporary class of objects (call it class <I>Pixel</I> for this example) for which the appropriate conversion operators and assignment operators are defined. Yet another application of this technique might be ISAM (indexed sequential access method) files to implement persistent objects. We may find it intuitive to access indexed records with the subscript or brackets notation when directly using separate functions to read and write indexed records.<P>

<h4><a href="../../../source/1994/feb94/heintze.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
