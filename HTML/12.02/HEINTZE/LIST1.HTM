<HTML><HEAD>
<TITLE>February 1994/Intuitive Access to Bit Arrays/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1<I> Definition of classes</I> BitField <I>and</I> BitArray</A></h4>
<pre>//file: BitArr.h copyright 1994 by Siegfried Heintze
#ifndef BITARR_H
#define BITARR_H
#include "Boolean.h"
#include &lt;assert.h&gt;
#include &lt;iostream.h&gt;

// Class of temporary objects to reference bit fields
class BitField{
public:
       BitField(unsigned long *data, unsigned int pos, unsigned width):
         _data(data), _pos(pos), _width(width)
       {
         assert(_pos+_width&lt;=32);
       }
       operator unsigned long(){
         unsigned long mask = 0xffffffff &gt;&gt; (32 - _width);
         unsigned long result = (*_data &gt;&gt; _pos) &amp; mask;
         return result;
       }
       
       //Let the compiler supply these as necessary:
       //  BitField(const BitField&amp; src);
       //  BitField&amp; operator=(const BitField&amp; rhs);
       //  ~BitField();
       
       // Assignment operator. This is the code that deposits
       //   an integer value into the packed array of bits.
       BitField&amp; operator=(unsigned long rhs){
         unsigned long mask = 0xffffffff &gt;&gt; (32 - _width);
         rhs &amp;= mask;
         rhs &lt;&lt;= _pos;
         mask &lt;&lt;= _pos;
         *_data &amp;= ~mask;
         *_data = rhs;
         return *this;
       }
private:
       unsigned long *_data;
       int _pos;
       int _width;
};

class BitArray{
public:
       // Default Constructor.
       //  Optional arguments:
       //   width:  number of bits in an array element
       //   val:    initial value of representation of bit array
       BitArray(unsigned int width=1, unsigned long val=0):
       _len(32), _data(val),_width(width){
       assert(_width &lt;= _len);
       }
       //Let the compiler supply these as necessary:
       //  BitArray(const BitArray&amp; src);
       //  BitArray&amp; operator=(const BitArray&amp; rhs);
       //  ~BitArray();
       
       // Return the number of bits in an array element
       unsigned int width() const {
         return _width;
       }
       
       // Return the index of the first element in the array
       unsigned int first() const {
         return 0;
       }
       
       // Return the index of the last element in the array
       unsigned int last() const {
         return _len/_width-1;
       }
       
       // Return the number of bits in the array
       unsigned int length()const{
         return _len;
       }
       
       // Fetch an array element
       unsigned long operator[](unsigned int s) const {
         s*=_width;
         assert(s+_width&lt;=_len);
         unsigned long mask = 0xffffffff &gt;&gt; (_len - _width);
         unsigned long result = _data;
         result &gt;&gt;= s;
         result &amp;= mask;
         return result;
       }
       
       // Possibly deposit a value into an array element.
       //  Defer actual deposit operation to BitField::operator=
       BitField operator[](unsigned int s) {
         return BitField(&amp;_data, s*_width, _width);
       }

private:
       unsigned long _data;
       // Actual representation of BitArray
       unsigned int _len;
       // number of bits in representation
       unsigned int _width;
       // number of bits in a single array element
};

#endif

/* End of File */
</pre>
</BODY>
</HTML>
