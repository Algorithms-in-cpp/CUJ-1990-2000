

<HTML>
<HEAD>

<TITLE>February 1994/Stepping Up To C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocfeb.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Stepping Up To C++<A name="0069_002A"><A name="0069_002A"></font></h2><P>
<h3 align="center"><A name="0069_0000"><A name="0069_0000">Overloading and Overriding</h3><P>
<h3 align="center"><font color="#800000">Dan Saks</font></h3><hr><blockquote><P>
<P><i><A name="0069_0000"><A name="0069_0000">Dan Saks is the founder and principal of Saks &amp; Associates, which offers consulting and training in C++ and C. He is secretary of the ANSI and ISO C++ committees. Dan is coauthor of C++ Programming Guidelines, and codeveloper of the Plum Hall Validation Suite for C++ (both with Thomas Plum). You can reach him at 393 Leander Dr., Springfield OH, 45504-4906, by phone at (513)324-3601, or electronically at dsaks@wittenberg.edu.</i></P><P>
In October, my wife Nancy suggested that our family should go to Disney World for vacation in early December. I was reluctant because I thought I had too much work to do. But that's been my excuse for weaseling out of a lot things for the past few years. OK, I let her talk me into it. But I made her promise to help me get caught up. And she did. And I almost did.<P>
The C++ standards committee met in November and passed almost twice as many motions as ever before at a single meeting. (I'll tell you about them in the not-too-distant future.) So I had to spend an additional two or three days that I hadn't planned on writing these longer-than-ever minutes. And all my other work slipped.<P>
So here I am now, sitting in my room at Disney's Carribean Beach Resort in Orlando, overloaded with work, while Nancy, Ben and Jeremy are over riding on the Big Thunder Mountain Railroad at the Magic Kingdom. I've got to hurry up and write this so I can join them.<P>
Many C++ programmers, even moderately experienced ones, confuse the terms overloading and overriding. For beginners, overriding is often a new term Even before they write their first line of C++, most programmers hear that C++ offers function and operator overloading. (It's one of the features that lures them to C++ in the first place.) New C++ programmers don't encounter the term <I>overriding</I> until they start using virtual functions. Then they confuse the words simply because they sound alike. Beginning C++ programmers usually err by speaking of <I>overloading</I> when they mean <I>overriding,</I> simply because they don't understand the subtle differences.<P>
Experienced programmers continue to confuse the terms because overloading and overriding have similar properties. And of course, the words continue to sound alike. It doesn't help when an overly-exuberent lecturer uses one word when he or she means the other and no one in the audience catches the gaff. I know that happened to me in some of my earliest presentations on C++. I don't believe I've made that mistake recently, but I can't promise I'll never do it again.<P>
OK, so what's the difference? In short, overloading means declaring the same symbol in the same scope to represent two or more different entities. Overriding means redefining a name in a derived class to hide a name inherited from a base class.<P>
In C++, you can overload both function identifiers and operators. For example,<P>
<pre>void put(FILE *f, char c);
void put(FILE *f, int i);
void put(FILE *f, const char *s);</pre>
overloads the identifier <I>put</I> by declaring three different functions with that name. The predefined operator <I>+</I> is inherently overloaded because it already applies to a variety of operand types. The declaration<P>
<pre>int operator+(complex z1, complex z2);</pre>
overloads operator <I>+</I> to handle complex numbers as well. I described many of the C++ overloading rules in detail in "Function Overloading," <I>CUJ,</I> November, 1991, and in a four-part series on "Operator Overloading" that appeared in every other <I>CUJ</I> from January through July, 1992.<P>
The following code demonstrates <I>overriding.</I> Overriding applies specifically to functions in class hierarchies. For example, given<P>
<pre>class B
    {
public:
    virtual void f();
    virtual int g(int i);
    };</pre>
the definition<P>
<pre>class D :
public B
    {
public:
    virtual void f();
    };</pre>
derives class <I>D</I> from <I>B</I> and overrides <I>B'</I>s<I> f</I> with <I>D'</I>s own version of <I>f. D</I> does not override <I>g,</I> so <I>D'</I>s <I>g</I> is exactly as inherited from <I>B</I>.<P>
Overloading and overriding interact in some complex and very subtle ways. By itself, each feature is a powerful programming tool (maybe too powerful). Together, these features produce much richer capabilities than most programs need.<P>
Overloading and overriding combine to produce some very puzzling diagnostic messages, and even more baffling run-time errors. That's the nature of C++. C++ provides sufficient capability for experienced programmers to write code that is more maintainable, yet no less efficient, than it would be in C. But in doing so, it gives naive programmers even more opportunities to get into trouble (as if C doesn't already offer enough).<P>
Some of the things I'm about to show you are pretty intricate. They are probably more complex than anything you're likely to want to do in real C++ programs. My advice, as always, it to keep things as simple as you can. Then why would I show you things you probably don't want to do? Because you're likely to do them by accident. Understanding these examples should help you recognize and correct your mistakes. And once in a great while, you might even find a reason to do these things intentionally.<P>
The following discussion of course assumes you're familiar with vtbls (virtual tables) and vptrs (pointers to virtual tables) as an implementation model for virtual functions in C++. I introduced them last month in "How Virtual Functions Work" (<I>CUJ</I>, January, 1994).<P>
<h4><FONT COLOR="#000080"><A name="0069_002B">Virtual and Non-virtual<B></B> <B></B>Overriding<A name="0069_002B"></FONT></h4></P>
A class can contain both virtual and non-virtual functions. For a given class, the translator creates an entry in the vtbl only for each virtual function in the class, not for the non-virtual functions.<P>
A derived class can override any of its inherited functions, be they virtual or not. When you override a function that's virtual in the base class, it automatically becomes virtual in the derived class. You can't turn off the dynamic binding when you override a virtual function. That is, you cannot override a virtual function with a non-virtual function. On the other hand, you can override a non-virtual function with either a virtual or a non-virtual function. When you override a function that's non-virtual in the base class, the overriding function is also non-virtual, unless declared so explicitly.<P>
When a C++ translator first encounters the definition for a class <I>D</I> derived from some base class <I>B</I>, it creates an image for <I>D'</I>s vtbl by copying <I>B'</I>s vtbl. (As always, I am describing a conceptual model for how the translation works. Any particular implementation may do it differently.) When it parses a declaration in <I>D</I> that overrides a virtual function <I>f</I>, the translator simply overwrites the entry for <I>f</I> in <I>D'</I>s vtbl to point to <I>D::f</I> instead of <I>B::f.</I> Thus, overriding a function that's virtual in <I>B</I> doesn't increase the size of <I>D'</I>s vtbl.<P>
The translator resolves all non-virtual function calls during translation, so it need not store any non-virtual function addresses in vtbls. Thus, overriding a non-virtual function with another non-virtual function has no effect on the vtbls at all. But, overriding a function that's non-virtual in <I>B</I> with a virtual function in <I>D</I> increases the size of <I>D'</I>s vtbl, adding a new entry to <I>D'</I>s vtbl that has no corresponding entry in <I>B'</I>s vtbl.<P>
<A href="list1.htm">Listing 1</a>
shows a simple inheritance hierarchy that mixes virtual and non-virtual overriding. The base class, <I>B</I>, has four member functions, but only two are virtual. Thus, the <I>D'</I>s vtbl has only two entries in it, for functions <I>f</I> and <I>h</I> as shown in <A href="fig1.htm">Figure 1</a>.
<P>
Class C in <A href="list1.htm">Listing 1</a>
derives from <I>B</I> and overrides three of the four functions it inherits. During translation, <I>C'</I>s vtbl starts out as a copy of <I>B'</I>s<I>. C::f</I> is virtual because it overrides virtual <I>B::f,</I> and the compiler replaces the first entry in <I>C'</I>s vtbl (corresponding to <I>f</I>) with the address of <I>C::f. C::g</I> overrides non-virtual <I>B::g.</I> Since <I>g'</I>s declaration in <I>C</I> doesn't include the virtual specifier, <I>C::g</I> is also non-virtual. <I>C</I> doesn't override the <I>h</I> it inherited from <I>B</I>, so the second entry in <I>C'</I>s vtbl (corresponding to <I>h</I>) continues to point to <I>B::h.</I><P>
<I>C::j</I> overrides non-virtual <I>B::j,</I> but <I>C</I> declares <I>j</I> as virtual. Therefore the compiler adds a new entry at the end of <I>C'</I>s vtbl corresponding to <I>j</I>, and fills it in with the address of <I>C::j.</I> The resulting vtbl for class <I>C</I> also appears in <A href="fig1.htm">Figure 1</a>.
<P>
Class <I>D</I> in <A href="list2.htm">Listing 2</a>
derives in turn from <I>C</I>, and overrides functions <I>h</I> and <I>j</I>. Both <I>h</I> and <I>j</I> are virtual in <I>C,</I> so they are also virtual in <I>D.</I> The translator replaces the entries for <I>h</I> and <I>j</I> in <I>D'</I>s vtbl with the addresses of <I>D::h</I> and <I>D::j,</I> respectively. <I>D'</I>s vtbl entry for <I>f</I> continues to point to <I>C::f,</I> as it did in <I>C'</I>s vtbl. See <A href="fig1.htm">Figure 1</a>
for <I>D'</I>s completed vtbl.<P>
<A href="list2.htm">Listing 2</a>
contains a test program that illustrates the behavior of the inheritance hierarchy defined in <A href="list1.htm">Listing 1</a>.
 The statement<P>
<pre>B *pb = &amp;c;</pre>
assigns the address of <I>c</I> to <I>pb,</I> so that <I>*pb</I> has static type <I>B</I> but dynamic type <I>C</I>. Thus, a non-virtual member function call applied to <I>*pb</I> selects a member function from class <I>B</I>, but a virtual function call applied to <I>*pb</I> selects from class <I>C</I>. You can resolve the non-virtual function calls merely by looking at <I>B'</I>s declaration in <A href="list1.htm">Listing 1</a>.
 You resolve the virtual function calls by looking at <I>C'</I>s vtbl in <A href="fig1.htm">Figure 1</a>.
<P>
<I>pb-&gt;g()</I> and <I>pb-&gt;j()</I> call <I>B::g</I> and <I>B::j,</I> respectively because both functions are non-virtual in <I>B. pb-&gt;g()</I> is straightforward because <I>C'</I>s vtbl doesn't even have an entry for <I>g. pb-&gt;j()</I> can be confusing because <I>C'</I>s vtbl has an entry for <I>j</I>. But the compiler always determines whether a call is virtual or non-virtual based on the static type of the object. In this case, <I>*pb</I> has static type <I>B</I> and <I>j</I> is non-virtual in <I>B</I>, so <I>pb-&gt;j()</I> ignores the vtbl and simply calls <I>B::j.</I><P>
<I>pb-&gt;f()</I> calls <I>C::f</I> because <I>f</I> is virtual in <I>B</I>, <I>*pb</I> is a <I>C</I> object, and <I>C</I> overrides <I>f.</I> Even though <I>h</I> is virtual in <I>B</I>, <I>pb-&gt;h()</I> still calls <I>B::h.</I> The call goes through <I>C'</I>s vtbl, but winds up at <I>B::h</I> anyway because C does not override <I>h</I>.<P>
I won't go over every call in <A href="list2.htm">Listing 2</a>,
 but I will call your attention to the calls, such as <I>pc-&gt;B::f(),</I> that explicitly qualify the function name with the name of a base class. Again, <I>*pc</I> has static type <I>C</I> and <I>f</I> is virtual in <I>C.</I> Without a qualified name, the call <I>pc-&gt;f()</I> behaves like a normal virtual function call, selecting the function's address from the vtbl for <I>D,</I> because <I>D</I> is the dynamic type of <I>*pc.</I> Looking in <I>D'</I>s vtbl in <A href="fig1.htm">Figure 1</a>
you can see that the entry for <I>f</I> points to <I>C::f,</I> so that's what gets called.<P>
On the other hand, using an explicit base class name qualifier on the function name turns off the virtual call mechanism and uses static binding. That is, even though <I>pc-&gt;f()</I> is a virtual call, <I>pc-&gt;B::f()</I> is not. The call ignores the dynamic type of <I>*pc</I> and invariably calls <I>B::f.</I> This rule exists so that a virtual function in a derived class can call the function it overrides in a base class without getting stuck in an infinite recursion. My article on "Virtual Functions" <I>(</I><I>CUJ</I><I>,</I> December, 1993) explains this behavior in greater detail, including a fairly practical example that relies on it.<P>
<h4><FONT COLOR="#000080"><A name="0069_002C">Overriding Overloaded Functions<A name="0069_002C"></FONT></h4></P>
You can overload virtual functions. That is, you can declare more than one virtual function with the same name in the same class, as in class <I>stream</I> shown in <A href="list3.htm">Listing 3</a>.
 As with any set of overloaded functions, each function signature (the sequences of types in a formal parameter list) in an overloaded set of virtuals must be sufficiently distinct for the compiler to tell them apart. The vtbl for the class contains a distinct entry for each virtual function name and signature. The vtbl for class stream appears in <A href="fig2.htm">Figure 2</a>.
 No surprises so far.<P>
Deriving from a base class with overloaded virtual functions behaves pretty much as you'd expect, as long as you override all of the overloaded functions, or none of them. But, if you derive from a base class with overloaded virtual functions and override some, but not all, of those overloaded virtual functions, the results may surprise you.<P>
All the functions in a given set of overloaded functions must be declared in the same scope. Another declaration for a function with the same name in an inner scope doesn't add to the overloaded set; it starts a new set and completely hides all of the overloaded functions of the outer scope while in the inner scope. The inner scope can access the overloaded functions in the outer scope only by explicitly using a <I>::</I> (the scope resolution operator).<P>
A class defines a new scope. The members of a class are in the scope of that class. Thus, a single member function declaration in a class hides all the overloaded functions with the same name declared in any enclosing scope, as shown in <A href="list4.htm">Listing 4</a>.
<P>
<A href="list4.htm">Listing 4</a>
contains the definition for a class <I>File,</I> with a member function <I>put</I> that writes a null-terminated string to a file. <I>File::put</I> uses one of the overloaded <I>put</I> functions declared at file scope to actually put the string. Unfortunately, none of those <I>put</I> functions at file scope are in scope inside the body of <I>File::put.</I> Therefore, you must precede the call with <I>::</I> to force the compiler to look for a function at file scope, as shown in the body of <I>File::put</I> in <A href="list4.htm">Listing 4</a>.
 Otherwise, the C++ compiler thinks the call to <I>put(s, f</I>) inside <I>File::put</I> is a (recursive) call to <I>File::put,</I> but with the wrong number of arguments.<P>
Similar behavior occurs if you derive class <I>File</I> from a base class that contains several functions named <I>put.</I> The declaration for <I>File::put</I> hides all the overloaded <I>put</I> functions in the base class while in the scope of class <I>File.</I> A call to an inherited <I>put</I> function inside a <I>File</I> member function must attach the base class name and a <I>::</I> before the function name.<P>
Now let's see what happens when a derived class overrides some, but not all, of the overloaded virtuals in its base class. <A href="list5.htm">Listing 5</a>
shows a base class <I>B</I> with three virtual functions <I>f(int), f(long)</I> and <I>f(char *). B'</I>s vtbl appears in <A href="fig3.htm">Figure 3</a>.
<P>
Class <I>C</I> derived from <I>B</I> overrides only <I>f(int)</I>. Therefore, only <I>f(int)</I> is visible in the scope of <I>C;</I> however, <I>C'</I>s vtbl still has three entries: one for each virtual function in its base class. <I>C'</I>s vtbl appears in <A href="fig3.htm">Figure 3</a>.
 It has the same layout and values as <I>B'</I>s vtbl, except the entry for <I>f(int)</I> points to <I>C::f(int)</I> instead of <I>B::f(int).</I><P>
A derived class never has fewer virtual functions (i.e., a smaller vtbl) than its base class. Some inherited virtual functions may be invisible in the derived class scope, but their addresses must still be in the vtbl. Remember, an object of a derived class is an object of its base class. A derived object has everything that its base object has, and maybe more. This applies to vtbls as well as the objects themselves. The vtbl for a derived class must have at least as many entries as the vtbl for its base class. Consider the consequences if this were not so.<P>
The virtual call mechanism relies on the assumption that a derived object is a base object. When a compiler encounters a virtual function call applied to an object, it simply translates the call into code that follows a vptr to a vtbl and selects the address of the appropriate function. The vtbl for the object involved in the call must have at least as many entries as the vtbl for the base class, or else the call might reach beyond the end of the object's vtbl and grab something that isn't a function address.<P>
Class <I>D</I> in <A href="list5.htm">Listing 5</a>
derives from <I>C</I> and overrides only <I>f(long)</I>. Again, its vtbl has three entries, as shown in <A href="fig3.htm">Figure 3</a>.
 The values in <I>D'</I>s vtbl as the same as in <I>C'</I>s, except for the value corresponding to <I>f(long)</I>.<P>
<A href="list6.htm">Listing 6</a>
is a test program that demonstrates the behavior of the function call bindings for the hierarchy in <A href="list5.htm">Listing 5</a>.
 The first call contains no surprises. <I>*pb</I> has static type <I>B</I> but dynamic type <I>C</I>. An expression that occurs to the right of <I>pb-&gt;</I> is in the scope of <I>B</I>. In the scope of <I>B</I>, the compiler can choose from three different functions named <I>f. f(1)</I> exactly matchs <I>f(int). f(int)</I> is virtual in <I>B</I>, so the compiler generates a virtual call to <I>f(int)</I>. At the time the program executes, <I>pb</I> actually points to a <I>C</I> object, and <I>C</I> overrides <I>f(int)</I>, so <I>pb-&gt;f(1)</I> calls <I>C::f(int).</I> The next two calls behave similarly, except that <I>C</I> does not override <I>f(long)</I> and <I>f(char *).</I><P>
You may find the call <I>d.f(1)</I> surprising. It appears that <I>f(1)</I> matches <I>f(int)</I> exactly, so at first it seems that it should call <I>D::f(int).</I> But <I>D</I> doesn't override <I>f(int)</I>, so shouldn't the expression actually call <I>C::f(int)</I>? Well, that's not what happens either. The expression to the right of <I>d</I>. is in the scope of <I>D</I>, where only <I>f(long)</I> is visible. Therefore the compiler promotes the argument <I>1</I> to <I>1L</I> and calls <I>D::f(long)</I>.<P>
You can study most of these calls on your own. I'll draw your attention to a couple of interesting cases.<P>
The call <I>d.C::f(1L)</I> uses explicit qualification to access an inherited function that's otherwise hidden. It looks like it should call an <I>f(long)</I>, but it dosen't. The expression to the right of the qualifier <I>C::</I> is in the scope of <I>C</I>, where only <I>f(int)</I> is visible. The compiler converts <I>1L</I> to <I>1</I> (an <I>int</I>) and calls <I>C::f(int)</I>. The explicit qualifier turns off the virtual call mechanism.<P>
The call <I>pc-&gt;f("hello")</I> is an error. The expression to the right of <I>pc-&gt;</I> is in the scope of <I>C</I>, where only <I>f(int)</I> is visible. <I>"hello"</I> has type <I>char *</I>, and there's no standard conversion from <I>char *</I> to <I>int</I>.<P>
<h4><FONT COLOR="#000080"><A name="0069_002D">Behaving Responsibly<A name="0069_002D"></FONT></h4></P>
As I mentioned earlier, I'm not suggesting that you'd ever want to write code like this. Quite to the contrary, I'm trying to shine a little light into a dark corner, and show you how can inadvertantly write some pretty confounding stuff.<P>
I think overloaded virtual functions are a useful feature. Common classes like the <I>istream</I> and <I>ostream</I> classes in <I>iostream.h</I> use this feature well. When you drive from a class with a set of overloaded virtual functions, you should override all or none of the functions in that set. In fact, this is a good guidelines even if the overloaded functions are non-virtual.<P>
Many compilers actually warn you when you violate this guideline. For example, when you compile <A href="list5.htm">Listing 5</a>
and <A href="list6.htm">Listing 6</a>
together, you may get a warning to the effect that the declarations of <I>f(int)</I> in <I>C</I> hides the declarations of <I>f(long)</I>n and <I>f(char *)</I> inherited from <I>B</I>.<P>
As with any guideline there are exceptions, but in this case they are rare. Remember that function and operator loading are there to help you write more intuitive code. If overloading makes it less so, then back off.<P>
So, Dan Saks, you've just finished your <I>CUJ</I> article. What are you going to do next?<P>

<h4><a href="../../../source/1994/feb94/saks.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
