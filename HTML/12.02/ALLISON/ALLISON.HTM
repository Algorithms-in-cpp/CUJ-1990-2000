

<HTML>
<HEAD>

<TITLE>February 1994/Code Capsules</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocfeb.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Code Capsules<A name="0079_002E"><A name="0079_002E"></font></h2><P>
<h3 align="center"><A name="0079_0000"><A name="0079_0000">Variable-Length Argument Lists</h3><P>
<h3 align="center"><font color="#800000">Chuck Allison</font></h3><hr><blockquote><P>
<P><i><A name="0079_0000"><A name="0079_0000">Chuck Allison is a regular columnist with CUJ and a software architect for the Family History Department of the Church of Jesus Christ of Latter Day Saints Church Headquarters in Salt Lake City. He has a B.S. and M.S. in mathematics, has been programming since 1975, and has been teaching and developing in C since 1984. His current interest is object-oriented technology and education. He is a member of X3J16, the ANSI C++ Standards Committee. Chuck can be reached on the Internet at allison@decus.org, or at (801)240-4510.</i></P><P>
If <I>printf</I> is not the most widely used function in the standard C library, it is certainly the most flexible. <I>printf</I>, and its companions <I>sprintf</I> and <I>fprintf</I>, are the workhorses of formatted output. Their ability to process a variable number of arguments makes these functions very useful indeed. The format string in the statement<P>
<pre>printf("%d, %s\n",n,s);</pre>
tells <I>printf</I> that it must extract an <I>int</I> and then a <I>pointer to char</I> from the argument space (usually the program stack). But how does <I>printf</I> get at the optional arguments? Well, I can't show you the inner workings of <I>printf</I>, but I can show you the mechanism C provides to handle variable-length argument lists. In this article I will show how you can write functions of your own that accept a variable number of arguments, and why you might want to do so.<P>
<h4><FONT COLOR="#000080"><A name="0079_002F">The Ellipsis Prototype Specification<A name="0079_002F"></FONT></h4></P>
<I>printf'</I>s function prototype in your compiler's <I>stdio.h</I> should look something like<P>
<pre>int printf(const char *, ...);</pre>
The ellipsis tells the compiler to allow zero or more arguments of any type to follow the first argument in a call to <I>printf</I>. The format string communicates the number and type of the caller's optional arguments to the <I>printf</I> function. For <I>printf</I> to behave correctly, the arguments that follow the format string must match the types of the corresponding edit descriptors in the format string. If the argument list contains fewer arguments than the format string expects, the results are undefined. If the argument list contains more arguments than expected, <I>printf</I> ignores them. The bottom line is that when you use the ellipsis in a function prototype you are telling the compiler not to type-check your optional arguments because you think you know what you're doing &#151; so be sure that you do.<P>
<h4><FONT COLOR="#000080"><A name="0079_0030">Variable-Length Argument Lists from Scratch<A name="0079_0030"></FONT></h4></P>
It's not too difficult to write your own functions that will accept a variable number of arguments. The program in <A href="list1.htm">Listing 1</a>
extracts the maximum of a list of integers. It uses a fixed integer argument to communicate the number of elements in the list. The program assumes that the list begins immediately after the integer <I>n</I> in memory, that is, at address <I>&amp;n + 1</I>.<P>
The program in <A href="list2.htm">Listing 2</a>
extends this technique to lists of mixed types. Since the pointer <I>p</I> must visit arguments of different size, I have defined it to be a <I>pointer to char</I><I>.</I> To extract an object of a certain type from the argument space, I just apply the appropriate cast and dereference, as in<P>
<pre>s = *(char **) p;</pre>
and I use pointer arithmetic to skip over the extracted object:<P>
<pre>p + = sizeof s;</pre>
The following macros, which automate this process, appear in <A href="list3.htm">Listing 3</a>:
<P>
<pre>#define first_arg(x,p)  p = (char *) &amp;x + sizeof(x)
#define next_arg(p,T,x) x = *(T*)p; p += sizeof(T)</pre>
<I>first_arg</I> initializes <I>p</I> with the address of the first argument that follows the fixed argument <I>x. next_arg</I> assigns an object of type <I>T</I> to <I>x</I> and then skips past it.<P>
<h4><FONT COLOR="#000080"><A name="0079_0031">The <B><I>va_list</I></B> Mechanism<A name="0079_0031"></FONT></h4></P>
The programs in <A href="list1.htm">Listing 1</a>
through <A href="list3.htm">Listing 3</a>
are okay for illustration purposes, but they aren't portable; they only work on platforms that store arguments linearly in order of increasing address and that leave no holes between arguments. Fortunately, Standard C defines a portable method for processing variable-length argument lists, with the macros defined in <I>stdarg.h</I> (see <A href="list4.htm">Listing 4</a>)
. The <I>stdarg</I> header defines a new type, <I>va_list</I> ("variable argument list"), which refers to the list of optional, trailing arguments in a function call. The statement<P>
<pre>va_start(args,npairs);</pre>
initializes <I>args</I> to point to the <I>va_list</I> adjacent to the fixed argument <I>npairs</I>. To extract an object from the list and "advance" to the next, call <I>va_arg</I>, specifying the desired type:<P>
<pre>n = va_arg(args,int);</pre>
To be completely portable, you must close a <I>va_list</I> with the <I>va_end</I> macro (although on my compiler it is just a no-op). <A href="list5.htm">Listing 5</a>
shows how to code a portable version of the <I>maxn</I> function from <A href="list1.htm">Listing 1</a>.
<P>
As you can see, to use variable-length argument lists you must provide two things:<P>
1)     At least one fixed argument (always the last before the ellipsis) to initialize the <I>va_list</I>, and<P>
2)     Some mechanism that communicates the number and/or type of arguments to the function.<P>
The following function prototype is both useless and syntactically invalid:<P>
<pre>void f(...);
/* Location of args unknown */</pre>
There are a number of ways to satisfy point 2). For example, the program in <A href="list6.htm">Listing 6</a>
concatenates a variable number of strings into its fixed string argument. The program processes one string after another until it finds a null pointer in the <I>va_list</I>. A call such as<P>
<pre>concat(s,NULL);</pre>
initializes <I>s</I> to the empty string.<P>
As another example, consider a certain screen interface library that supports data entry tables. The library has a function <I>table_put_row</I> that allows you to fill rows with initial data. For example, if you have defined the columns of a table to represent name, occupation and salary fields, you can populate the table like this:<P>
<pre>table_put_row(tp,0,"Sandra", "Executive","57000");
table_put_row(tp,1,"James", "Mechanic","45000");
table_put_row(tp,2,"Kimberly", "Musician","66000");
/* etc. */</pre>
where <I>tp</I> is a pointer to a table structure and the second argument is the row number. As you can see in <A href="list7.htm">Listing 7</a>,
 <I>table_put_row</I> doesn't need a parameter specifying the number of field arguments since it can infer that number directly from the <I>Table</I> structure.<P>
<h4><FONT COLOR="#000080"><A name="0079_0032"><I>va_lists</I><B> as Arguments<A name="0079_0032"></B></FONT></h4></P>
<A href="list8.htm">Listing 8</a>
presents a useful function, <I>fatal,</I> which prints a formatted message to <I>stderr</I> and exits a program gracefully. You call it as you would <I>printf,</I> with a format string and a list of parameters, such as<P>
<pre>fatal("Error %d on device %d\n", err,dev);</pre>
What you would like to do is just pass the format string and print arguments to some function that implements the <I>printf</I> machinery. The C library function <I>vfprintf</I> makes this very easy. All you have to do is initialize a <I>va_list</I> with the print arguments and pass it as the third argument. As you would expect, the C library includes the companion functions <I>vprintf</I> and <I>vsprintf</I> as well.<P>
<h4><FONT COLOR="#000080"><A name="0079_0033">Why the Fuss?<A name="0079_0033"></FONT></h4></P>
Programmers coming from most any other language may wonder why we need all of this machinery. For example, the FORTRAN programmer is quite accustomed to writing print statements that give no explicit information as to number or type of arguments in its argument list:<P>
<pre>*     Output two numbers:
     PRINT *, x, y</pre>
In a FORTRAN statement, to find the maximum of a list of numbers, only the numbers appear:<P>
<pre>PRINT *, MAX(1,3,2)</pre>
The reason programmers can do this in FORTRAN is that statements such as <I>PRINT</I> and <I>MAX</I> are <I>part of the language</I> (FORTRAN calls them <I>intrinsic functions</I>). The compiler knows their requirements and therefore can supply the appropriate information. In C, on the other hand, there is no input, output, or any other functionality built into the language except for what the operators provide. The C philosophy is to keep the language small and to supply needed functionality with <I>libraries</I>. Since the only communication between libraries and the compiler is the function call mechanism, you must provide a function all the needed information when you call it.<P>
<h4><FONT COLOR="#000080"><A name="0079_0034">An Application<A name="0079_0034"></FONT></h4></P>
In financial and other numerical applications you often want to express integers, such as monetary amounts, as groups of numbers separated by commas:<P>
<pre>$11,235,852</pre>
One approach is to convert the number to a string with <I>sprintf</I> and then traverse the string backwards, copying it to another string and inserting commas as needed. Another approach, which I present here, solves the more general problem of creating strings backwards.<P>
The program in <A href="list9.htm">Listing 9</a>
calls a function <I>prepend</I> to build a string backwards. You pass <I>prepend</I> three arguments: the output buffer, an offset which points to the first character in the populated portion of the string, and the string to prepend. After it's finished, <I>prepend</I> returns the new offset.<P>
The following diagrams show the state of <I>s[]</I> after each call to <I>prepend:</I><P>
<IMG SRC="figa.gif"><P>
<A href="list10.htm">Listing 10</a>
presents the implementation of <I>prepend</I> along with a function <I>preprintf</I>, which allows you to prepend strings with formatting. <I>preprintf</I> uses <I>vsprintf</I> to create the formatted string, and then calls <I>prepend</I> to tack it onto the front of the existing string.<P>
I can now implement a function <I>commas</I>, in terms of <I>prepend</I> and <I>preprintf</I> (see <A href="list11.htm">Listing 11</a>)
. As I extract each digit in turn, moving right to left by the usual remainder and quotient calculations, I push that digit onto a static character buffer, inserting commas where necessary. <I>commas</I> returns a pointer to the beginning of the completed string, which may or may not coincide with the beginning of the buffer. Note that the numeric base and the grouping size are parameterized.<P>
<h4><FONT COLOR="#000080"><A name="0079_0035">Conclusion<A name="0079_0035"></FONT></h4></P>
In this article I have illustrated the hows and whys of variable-length argument lists. The <I>stdarg</I> macros are a lot like a parachute &#151; you don't need one very often, but when you do, usually nothing else will suffice. Since these macros involve a relaxation of C's argument type-checking mechanism, be sure to use them with care.<P>

<h4><a href="../../../source/1994/feb94/allison.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
