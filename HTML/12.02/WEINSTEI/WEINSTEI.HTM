

<HTML>
<HEAD>

<TITLE>February 1994/On the Networks</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocfeb.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">On the Networks<A name="0077_002C"><A name="0077_002C"></font></h2><P>
<h3 align="center"><A name="0077_0000"><A name="0077_0000">Concurrent Development</h3><P>
<h3 align="center"><font color="#800000">Sydney S. Weinstein</font></h3><hr><blockquote><P>
<P><i><A name="0077_0000"><A name="0077_0000">Sydney S. Weinstein, CDP, CCP is a consultant, columnist, lecturer, author, professor, and President of Myxa Corporation, a consulting and contract programming firm specializing in databases, data presentation and windowing, transaction processing, networking, testing and test suites, and device management for UNIX and MS-DOS. He can be contacted care of Myxa Corporation, Inc., 3837 Byron Road, Huntingdon Valley, PA 19006-2320 or via electronic mail on the Internet/USENET mailbox syd@myxa.COM (dsinc!syd for those who cannot do Internet addressing).</i></P><P>
For years, UNIX developers have used SCCS and RCS to control source code and deal with tracking changes. But users of these two programs always have to deal with a potential problem. If more than one developer is working on a project, there is always the chance that the their efforts will collide. This collision occurs when the two developers both try to update the same file at the same time.<P>
RCS and SCCS solve this problem by allowing one of the developers to <I>lock</I> on file for editing. In doing so, the person who locks the file is the only one who can make changes to the file. This scheme works well, but leads to another problem, <I>deadlock</I>. Popular files get locked by almost everyone; and of course, with the one-lock-at-a-time method, the other developers must wait until the first developer is done with it. Those who miss the chance to grab a file may have to wait a while as its current holders develop their changes, integrate and test them, make them permanent, and release the lock.<P>
Peter Miller <I>&lt;pmiller@bmr.gov.au&gt;</I> provides a possible solution, <I>aegis</I>-<I>2.1</I>, posted as Volume 27, Issues 36-54 of <I>comp. sources. unix</I>. Quoting Peter:<P>
"The aegis program is a CASE tool with a difference. In the spirit of the UNIX Operating System, the aegis program is a small component designed to work with other programs."<P>
<I>aegis</I> is a project change supervisor. It provides a framework within which a team of developers may work on many changes to a program independently. <I>aegis</I> coordinates the integration of these changes back into the master source of the program, with as little disruption as possible. Resolution of contention for source files, a major headache in any project with more than one developer, is one of the <I>aegis's</I> major functions.<P>
<I>aegis</I> uses a software development model consisting of a project master source (or baseline) of a project, and a team of developers creating changes to be made to this baseline. When a change is complete, <I>aegis</I> integrates it with the baseline, to create a new baseline. <I>aegis</I> requires each change to be atomic and self-contained, and allows no change to cause the baseline to cease working. "Working" for a baseline is defined as passing its own tests. The tests are considered part of the baseline.<P>
To ensure that changes can't make the baseline stop working, <I>aegis</I> mandates that changes be accompanied by at least one test, and that all such tests complete successfully. These steadily accumulated tests form an ever increasing regression test suite for all later changes. <I>aegi</I>s also mandates a review stage for each change to the baseline.<P>
One benefit in using <I>aegis</I> is that there are only O(n) interactions between developers and the baseline. Contrast this number with the number of interactions for a master source that is being edited directly by the developers &#151; there are O(n!) interactions between developers, which makes adding "just one more" developer a potential disaster. Another benefit of <I>aegis</I> is that the project baseline always works. Always having a working baseline lets you always have a version available for demonstrations, or those "pre-release snapshots" developers are always forced to provide.<P>
<I>aegis</I> is often compared to CVS, the RCS tool for handling concurrent development. In effect, <I>aegis</I> adds baseline validity checks to CVS, since <I>aegis</I> requires a change to pass validity checks before it is added to the baseline.<P>
<h4><FONT COLOR="#000080"><A name="0077_002D">More for UNIX<A name="0077_002D"></FONT></h4></P>
Continuing with the highlights this month from <I>comp.sources.</I>unix: Gordon Ross <I>&lt;gwr@mc.com&gt;</I> extended <I>bootp-2.2. B</I>, posted as Volume 27, Issues 63 and 64. BOOTP is a server for booting systems over the network. New in this version is support for clients that need the server to honor the format of the options area, and support for an extended option area. In addition the source now works with SVR4 systems. A patch was issued in Volume 27, Issue 76.<P>
In addition, Gordon submitted a test program for exercising BOOTP servers. This program appears as Volume 27, Issue 65 and can be used to debug problems encountered when developing or using BOOTP servers.<P>
Uwe Doering <I>&lt;fas@geminix.inberlin.de&gt;</I> contributed an important re-release of FAS as<I> fas-2.11.0, in</I> Volume 27, Issues 67-74. The re-release contains an important change which affects users of FAS on SCO UNIX. This change fixes a bug in FAS which caused reliability problems (crashes) with SCO UNIX. Other changes in this new version include performance improvements, bug fixes, more options on hardware flow control, including DSR as well as CTS lines, and enhanced support for 57,600 and 115,200 bps modes.<P>
Much discussion has occurred on the net on how to verify that a file is the original file and is unmodified, especially with the often "lossy" connections used to transfer files around the network. Checksum programs can help verify a file's originality &#151; several checksum programs which have been developed over the years include MD5, Snefru-8, and the traditional CRC-32. Daniel J. Bernstein <I>&lt;djb@silverton.berkeley.edu&gt;</I> has combined all of these into a single package, <I>fingerprint,</I> which he submitted for Volume 27, Issues 79 and 80. <I>fingerprint</I> provides a common set of programs and C-callable libraries for producing a universal fingerprint of a file.<P>
If you find Make limited in what it can do, and would prefer a full language for makefiles complete with conditionals, loops, and all those other features you expect in a full language, consider <I>jam</I> from Christopher Seiwald <I>&lt;seiwald@vix.com&gt;. jam</I> is a make-like program that adds full language features, plus a centralized database for project-wide rules, as well as several other extensions. <I>jam</I> was posted as Volume 27, Issues 81-85.<P>
Wayne Davison <I>&lt;davison@borland.com&gt;</I> contributed <I>mthreads</I>, a news database manager that processes one or more newsgroups into a tree-structured list of articles related by their References and Subject lines. For each group you enable, <I>mthreads</I> produces a <I>.thread</I> file that <I>trn</I> (Threaded Read News) can read to get a quick summary of the articles in the group and how they are related. <I>mthreads</I> takes up about three to five percent of your news-spool if you enable all groups. (Any site which is not running INN must run <I>mthreads</I> to use <I>trn-3.3</I>.) <I>mthreads</I> is posted as Volume 27, Issues 90-93.<P>
Wayne followed this posting with a new release of Threaded RN, <I>trn-3.3</I>, as Issue 27, Volumes 94-105. <I>trn</I> is a newsreader that uses an article's references to display discussions in a natural reply-ordered sequence called threads. New in 3.3 is support for a default subscription list for new users, better handling of redirected and disabled groups, support for MIME, and various bug fixes.<P>
The collection of useflibraries grew once again with the contribution of <I>clc</I> by Panos Tsirigotis <I>&lt;panos@anchor.cs.colorado.edu&gt;</I> posted as Volume 27, Issues 106-126. The C Libraries Collection includes the following:<P>
<UL><li><I>dict</I>. Support for various types of data structures, including doubly-linked lists, hash tables and binary search trees.</li>
<li><I>fsma</I>. Support for quick memory allocation/deallocation of fixed-size objects.</li>
<li><I>misc.</I> A collection of generic functions including functions for managemeat of environment variables, a tree walk function to replace <I>ftw(3)</I>, and functions to get the basename/dirname of a pathname.</li>
<li><I>pq.</I> An implementation of priority queues using heaps.</li>
<li><I>pset.</I> Support for pointer sets, implemented as dynamic pointer arrays.</li>
<li><I>sio.</I> Support for fast stream I/O, optionally using memory mapping for input if the operating system supports it. <I>sio </I>din includes four types of functions: string matching functions (offering the Boyer-Moore, Knuth-Morris-Pratt, Rabin-Karp, and Shift-OR algorithms), string printing functions, string parsing functions, and string utility functions.</li>
<li><I>timer.</I> Support for multiple timers by multiplexing the timers provided by the operating system.</li>
<li><I>xlog.</I> This library provides logging objects which can be connected either to syslog or to a file. Objects connected to files may be customized to not exceed a certain file size.</li></UL>
David I. Bell <I>&lt;dbell@canb.auug.org.au&gt;</I> contributed a new release of <I>calc-2.9.0,</I> posted as Volume 27, Issues 127- 146. <I>calc</I> is an arbitrary precision C-like programmable calculator with many built-in functions. <I>calc'</I>s basic data types are integers, fractions, complex numbers, strings, matrices, associations, lists, files, and user-definable "objects." You can use <I>calc</I> interactively to evaluate expressions line by line, or you can write complicated programs in its C-like language. New in this version is ANSI C support, initialization of new objects and variables to zero instead of null, addition of static variable support, and many bug fixes.<P>
<h4><FONT COLOR="#000080"><A name="0077_002E">Plot your MISC<A name="0077_002E"></FONT></h4></P>
The major update in <I>comp.sources.misc</I> is version 3.5 of <I>gnuplot</I> from Alexander Woo <I>&lt;woo@playfair. stanford.edu&gt;</I>. Posted as Volume 40, Issues 13-45, <I>gnuplot</I> is a command-line driven interactive function plotting utility for UNIX, MSDOS, and VMS platforms. <I>gnuplot</I> was originally intended as a graphical program to allow scientists and students to visualize mathematical functions and data. Additions to this version of the software allow plots of three-dimensional functions and data files. <I>gnuplot</I> supports many different types of terminals, plotters, and printers and is easily extensible to include new devices. <I>gnuplot</I> handles both 2-D and 3-D coordinate spaces and objects. This release marks the end of Alexander's tenure as the coordinator of the <I>gnuplot</I> effort. He has passed the hat on to Alexander Lehmann, who has volunteered to coordinate the next release. Send all new contributions to <I>bug-gnuplot@ dartmouth.edu</I>.<P>
Angus Duggan <I>&lt;ajcd@dcs.ed.ac.uk&gt;</I> has submitted an update to <I>psutils</I> posted as Volume 39, Issues 93-96. This package is a set of utilities for manipulating PostScript documents. This version supports page selection and rearrangement, including arrangement into signatures for booklet printing, and page merging for <I>n</I>-up printing. In addition, this version includes several shell and perl scripts for converting many postscript output formats into the standard paging conventions so <I>psutils</I> can process them. A patch appeared in Volume 41, Issue 29 to add several new features and regularize several options across the utilities.<P>
Michael Peppler <I>&lt;mpeppler@itf.ch&gt;</I> re-released <I>Sybperl</I> at patch level 8 as Volume 39 Issues 101-103. <I>Sybperl</I> is a set of extensions to perl to add direct accesses to sybase databases via the dblibrary. Additions in this level include a user settable variable to control null return on queries and to control how binary data is formatted. The new patch also adds several internal calls to avoid packaging problems, and access to the bulk copy calls in dblibrary. Patch 9 was posted in Volume 40, Issue 5; it can set the application name for the sybase process and it fixes some bugs.<P>
Ted A. Campbell <I>&lt;tcamp@delphi.com&gt;</I> has contributed <I>bwbasic</I>, Bywater BASIC Interpreter/Shell, version 2.10, as Volume 40, issues 52-54. <I>bwbasic</I> implements a large superset of the ANSI Standard for Minimal BASIC (X3.60-1978) and a significant subset of the ANSI Standard for Full BASIC (X3.113-1987) in C. <I>bwbasic</I> also offers shell programming facilities as an extension of BASIC. New features in this version are compatibility with K&amp;R C compilers, implementation of ANSI-BASIC-style structured programming, enhancements to the interactive environment, bug fixes, and portability enhancements.<P>
Mike Gleason <I>&lt;mgleason@cse.unl.edu&gt;</I> contributed a new release of <I>ncftp </I>as Volume 40, Issues 76-81. <I>ncftp</I> is an alternative user interface for the <I>ftp</I> utility, <I>ncftp</I> offers a much more friendly and convient interface than standard <I>ftp</I> programs. New features in 1.6 includes support for the <I>term</I> package used by Linux, support for SCO Xenix, AIX and Dynix/PTX, incorporation of all the fixes from patches, and then some.<P>
Adam Costello <I>&lt;amc@wuecl.wustl.edu&gt;</I> contributed an improved paragraph formatter, <I>par</I>, as Volume 38, Issues 114-116. <I>par</I> is a filter which reformats each paragraph as it copies its input to its output. <I>par</I> generates each output paragraph from the corresponding input paragraph according to the following rules: <I>par</I> removes an optional prefix and/or suffix from each input line, divides the remainder of the line into words (delimited by spaces), joins the words into lines to make an eye-pleasing paragraph, then reattaches the prefixes and suffixes. If a line contains suffixes, <I>par</I> inserts spaces before them so that they all end in the same column. <I>par</I> provides many other options to control paragraph formatting. <I>par</I>'s main benefit over <I>fmt</I> is its support for prefix and suffix characters, and its allowance of leading indention.<P>
Panos Tsirigotis <I>&lt;panos@cs.colorado.edu&gt;</I> contributed <I>pst</I>, a program which extracts the text of a PostScript file and which tries to make that text appear as it does in the PostScript document. <I>pst</I> is posted as Volume 40, Issues 172-177. <I>pst</I> tries to avoid splitting words and to maintain paragraph boundaries. To achieve these goals, <I>pst</I> first tries to identify how the PostScript file was produced, so that it can use an appropriate text extraction algorithm. The user may also specify which of the available algorithms to use to extract text.<P>
On the patch front, <I>remind</I> received some additions via Patches 9 (Volume 39, Issues 115-118), 10 (Volume 40, Issues 48-50), and 11 (Volume 40, Issue 167-171). New features in patch 9 include display of moon phases (including little moon symbols in the PostScript calendar), ANSI color terminal support, flexibility for Sunday or Monday as start of week, better control of PostScript calendar printouts, plus the usual bug fixes. Patch 10 added 0S/2 support, more sorting options, MS-DOS and OS/2 test suites, and more PostScript tuning. Patch 11 adds release notes for UNIX and OS/2 for pop-up alarms, improvements for OS/2 and some optimizations, plus bug fixes.<P>
Aphael Manfredi <I>&lt;ram@acri.fr&gt;</I> issued a few more patches to dist-3.0 to handle more updates to the module library. Patch 12-13 (Volume 40, Issue 46-47) updated <I>dist</I> to use a never version of itself, and added many changes to the modules based on feedback from developers using the disk package. Patch 14 (Volume 40, Issue 128) fixes some bugs and adds some consistency checking.<P>
The C++ libraries for parsing UNIX-like command line options and arguments from Brad Appleton <I>&lt;brad@amber.ssd.csd.harris.com&gt;</I> received patches. Patch 2, for options, was posted as Volume 40, Issue 157. Patch 2 added hidden options and fixed some portability problems. Patch 3 for <I>cmdline</I> documented secret arguments to <I>cmdparse,</I> and fixed some bugs.<P>
<h4><FONT COLOR="#000080"><A name="0077_002F">Heavy Rolodexs<A name="0077_002F"></FONT></h4></P>
Though they're not too portable, and a bit heavy, computers make good rolodexs. Gregg Hanna <I>&lt;gregor@kafka.saic.com&gt;</I> has contributed as Volume 21, Issues 810, <I>mrolo, to comp.sources.x. mrolo</I> is a set of card file database programs designed to be simple yet robust, and was born out of frustration with <I>xrolo</I>'s and <I>xrolodex</I>'s many menus. The main program is <I>mrolo</I>, the Motif based card file program; the contribution also includes <I>crolo</I>, the curses-based equivalent. Some of <I>mrolo</I>'s features include:<P>
<UL><li>From the main screen you see a list of all cards and may scroll through them viewing/editing cards as desired. You may jump to a section of the card file by clicking on a lettered tab (A-Z) on the edge of the screen (implemented in <I>mrolo</I>) or by typing the upper-case letter (implemented in <I>crolo</I>).</li>
<li>You can search cards quickly by simply entering text in a text field on the main screen. (You can easily do a regular expression search, if you want, just start the text with a slash.)</li>
<li>There are no explicit save/load operations, the current display reflects the disk file's contents and <I>mrolo</I> verifies and writes changes at the time of the change.</li></UL>
New features in version 1.3 include regular expression matching, addition of <I>crolo</I> (curses version) for dial-up use, an "as of" feature for tracking card dating, filter constraints, and the usual bug fixes. Two patches appeared, Patch 1 in Volume 21, Issue 43 and patch 2 in Volume 44. Both are bug fix patches.<P>
George Ferguson <I>&lt;ferguson@cs.rochester.edu&gt;</I> additionally, published two patches to <I>xarchie.</I> Patch 2 (Volume 21, Issue 1) is labeled internally patch 8, and brings <I>xarchie</I> to 2.0.8. This patch fixes a minor bug in the X routines and adds additional server information. Patch 3 (Volume 21, Issue 7) takes <I>xarchie</I> to 2.0.9, adds more server info and fixes a misunderstanding in the FTP <I>cwd</I> command.<P>
Robert Andrew Ryan <I>&lt;rr2b+@andrew.cmu.edu&gt;</I> contributed <I>sxpc,</I> a program to compress the X protocol stream, as Volume 21, Issue 12. <I>sxpc</I> provides up to 75% compression of the X protocol stream. <I>sxpc</I>'s intended use is to improve the performance of X applications over a slow internet connection (e.g. <I>slip, cslip</I>, or <I>term</I>). <I>sxpc</I> assumes there is a Unix operating system at both ends of the link.<P>
Brian V. Smith <I>&lt;envbvs@epb12.lbl.gov&gt;</I> contributed patch 2 to <I>xfig</I> as Volume 21, Issues 21-36. <I>xfig</I> is an X program to draw and manipulate objects. New features include changes in minimum movements, display of lengths, not just resize/move on highlight, automatic use of scalable fonts if available, on screen rotation of text, double click support on more menu items, keyboard accelerators, and many bug fixes.<P>
Yearning for the "good old days" when outputting simple graphs didn't require so much window and event management code, Antoon Demaree <I>&lt;demaree@imec.be&gt;</I> contributed <I>xvig,</I> X Window Virtual Graphics as Volume 21, Issues 48-57. <I>xvig</I> is a simple graphics library that is I/O driven and supports opening windows, drawing shapes and text, and dealing with cursors. <I>xvig</I> produces simple graphs without scroll bars, pop-up menus, and fancy text features.<P>
<h4><FONT COLOR="#000080"><A name="0077_0030">Previews from <B><I>alt.sources</I><A name="0077_0030"></B></FONT></h4></P>
As usual, there's plenty in <I>alt.sources </I>so here are just a couple of highlights of what's to come in the mainstream groups.<P>
In a blast from the far past, James Hightower <I>&lt;jamesh@netcom.com&gt;</I> posted <I>focal</I>, a FOCAL interpreter. He didn't write it, and is interested in who did, but he posted it. It's from 1981, and provides a version of the FOCAL language as used to run on the old PDP-8 computers. <I>focal</I> was posted on October 16, 1993 in one part. Jonathan A. Chandross <I>&lt;jac@pilot.njin.net&gt;</I> saw it, tried to compile it, and failed, and re-posted a corrected version. Chandross also added a makefile, documentation, and an example FOCAL program. He posted his corrected version on October 22, 1993, also in one part.<P>
Thomas Driemeyer <I>&lt;thomas@bitrot.inberlin.de&gt;</I> posted a schedule planner based on X/Motif in 11 parts on November 21, 1993. <I>plan</I> displays a month calendar similar to <I>xcal</I>, but its every-day box is large enough to show appointments in small print. By pressing on a day box, you can list and edit the appointments for that day. <I>plan</I> also supports warn and alarm times and several methods of listing appointments.<P>
</BLOCKQUOTE>
</BODY>
</HTML>
