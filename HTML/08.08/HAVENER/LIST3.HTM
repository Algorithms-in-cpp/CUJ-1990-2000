<HTML><HEAD><TITLE>August 1990/Pricing A Meal: An Object-Oriented Example In C++/Listing 3</TITLE></HEAD><BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4><A name="01B9_00FD"><A name="01B9_00FD">Listing 3<A name="01B9_00FD"></h4><P>
<pre>// meal3.cxx - third attempt at 00P meal pricing program
#include &lt;stream.h&gt;

enum ENTREE {Steak,Fish};
enum DESSERT {Pie,Cake,Jello};
enum APPETIZER {Melon,ShrimpCocktail};

class Dessert   // An abstract class
             // - never instantiated by itself
   {
public:
   virtual double cost() = 0;  // pure virtual ==&gt;
                          // abstract class
   virtual double discount() { return .75; } // 25% off
   virtual const char* text() = 0;
   };

class Jello_obj : public Dessert
   {
public:
   double cost () {return .60;}
   const char* text() { return "Jello";}
   };

class Pie_obj : public Dessert
   {
public:
   double cost() {return 1.50;}
   double discount() { return 1.00; } // no discount
   const char* text() { return "Pie ";}
   };

class Cake_obj : public Dessert
   {
public:
   double cost() {return 1.00;}
   const char* text() { return "Cake ";}
   };

class Entree
   {
public:
   virtual double cost() = 0;
   virtual const char* text() = 0;
   };

class Fish_obj : public Entree
   {
public:
   double cost() {return 4.00;}
   const char* text() { return "Fish ";}
   };

class Steak_obj : public Entree
   {
public:
   double cost() {return 7.50;}
   const char* text() { return "Steak ";}
   };

class Appetizer
   {
public:
   virtual double cost() = 0;
   virtual const char* text() = 0;
   };

class Cocktail_obj : public Appetizer
   {
public:
   double cost() { return 2.00;}
   const char* text() { return "Cocktail ";}
   };

class Melon_obj : public Appetizer
   {
public:
   double cost() { return .85;}
   const char* text() { return "Melon ";}
   };

class Meal
   {
   Appetizer *a;
   Entree *e;
   Dessert *d;
public:
   Meal(APPETIZER=Melon,ENTREE=Fish,DESSERT=Jello);
   Meal ();
   double cost();
   void print();
   };

//-------------------------------------------
// class member function definitions

double Meal::cost() {return d-&gt;cost()*d-&gt;discount() +
       a-&gt;cost() + e-&gt;cost(); }

Meal::Meal(APPETIZER aval,ENTREE eval,DESSERT dval)
   {
   if [ dval == Jello ) d = new Jello_obj;
   else if ( dval == Pie ) d = new Pie_obj;
   else d = new Cake_obj;
   if ( eval == Steak ) e = new Steak_obj;
   else e = new Fish_obj;
   if ( aval == Melon ) a = new Melon_obj;
   else a = new Cocktail_obj;
   }

Meal::Meal() { delete a; delete e; delete d; }</FONT></FONT>

void Meal::print()
   {
   cout &lt;&lt; a-&gt;text() &lt;&lt; e-&gt;text() &lt;&lt; d-&gt;text() &lt;&lt;
       ", Meal cost =" &lt;&lt; a-&gt;cost() + e-&gt;cost() +
       d-&gt;cost()*d-&gt;discount() &lt;&lt; "\n";
   }
//-------------------------------------------
main()
   {
   Meal m1(Melon,Fish,Jello);
   Meal m2(Melon,Steak,Pie);
   Meal m3(ShrimpCocktail,Steak,Cake);
   m1.print(); m2.print(); m3.print();
   }
// ---- sample output below -----

Melon Fish Jello , Meal cost = 5.3
Melon Steak Pie , Meal cost = 9.85
Cocktail Steak Cake , Meal cost = 10.25</pre>

</BODY></HTML>
