


<HTML>
<HEAD>

<TITLE>August 1990/Questions & Answers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocaug.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Questions &amp; Answers<A name="01D5_0101"><A name="01D5_0101"></font></h2><P>
<h3 align="center"><A name="01D5_0000"><A name="01D5_0000">Array Vs. Pointer Names</h3><P>
<h3 align="center"><font color="#800000">Ken Pugh</font></h3><hr><blockquote><P>
<P><i><A name="01D5_0000"><A name="01D5_0000">Kenneth Pugh, a principal in Pugh-Killeen Associates, teaches C language courses for corporations. He is the author of C Language for Programmers and All On C, and is a member on the ANSI C committee. He also does custom C programming for communications, graphics, and image databases. His address is 4201 University Dr., Suite 102, Durham, NC 27707.</i></P><P>
<P><i>You may fax questions for Ken to (919) 493-4390. When you hear the answering message, press the * button on your telephone. Ken also receives email at kpugh@dukeac. ac. duke. edu (Internet) or dukeac!kpugh (UUCP).</i></P><P>
<B>Q</B><P>
Yesterday I spent several hours tracking down the following error. I have multiple source files, each of which accesses certain global variables. For example, consider these two files:<P>
<pre>   ------------file #1--------------
char   date[9];
main()
   {
   strcpy ( date, "01-01-90" );
   foo();
   puts ( date );
   }
   
   --------------file #2--------------
extern char *date;

foo()
{
puts ( date );
strcpy ( date, "02-02-90");
puts (date );
}</pre>
Both files compile without warnings (I had <I>#include</I>d the appropriate header files). The link step generated no warnings. However, when I ran the program, my computer entered the twilight zone. A little detective work with a symbolic debugger revealed that the value of <I>date</I> was <I>0</I>, despite the fact that the link map showed a valid storage address for <I>date</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The compiler I used yesterday was QuickC 2.0. Today I tried this small example on a VAX and got a memory protection fault. I had an associate try the problem under UNIX; he got a similar error. I also tried MSC 5.1; the program ran without errors, but the output seemed to show that <I>date</I> in <I>main</I> was stored in a different place than date in <I>foo()</I>. Turbo C ran the problem without any difficulty.</FONT></FONT></FONT></FONT></FONT></FONT><P>
I am sure you are aware that the solution is to replace the declaration in file #2 with:<P>
<pre>extern char date[];</pre>
My question is this: why does this error occur? When is a pointer not the same as an array name? I feel that I am missing something fundamental about pointers and arrays. Am I?<P>
Richard J. Wissbaum<br>
Aurora, CO<P>
<B>A</B><P>
You suffer from common pointer/array confusion, which can arise for many reasons, including the fact that square brackets have multiple meanings. To work towards a cure, let's examine some facets of arrays, pointers, and their symbols. Although your problem deals with external arrays, for the benefit of our readers, I'll start with automatic arrays. Assume that <I>ints</I> are two bytes long and that addresses (pointers) are four bytes long.</FONT></FONT><P>
In <A href="list1.htm">Listing 1</a>
<I>function</I>_1 contains an array, <I>good_auto_array</I>, declared as a local variable. The compiler allocates twenty bytes (10 times <I>sizeof(int)</I>) on the stack for <I>good_auto_array</I>, and four bytes for <I>integer_pointer</I>. You can make memory references with <I>integer_pointer</I> by using either form shown. Of course, you do not have to initialize it, but not doing so is the easy way to destroy your program.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The indexed form, <I>integer_pointer[1]</I>, is normally transformed into the indirect form, <I>*(integer_pointer+1)</I>, by the computer. (This translation does not always take place. I recently examined code produced by the DEC VAX compiler and different assembly instructions were generated depending on whether the source used the indexed form or the indirection form.) Likewise <I>good_auto_array[1]</I> is transformed into <I>*(good_auto_array + 1)</I>. Unlike <I>integer_pointer, good_auto_array</I> represents a constant address. Thus, you cannot assign anything to it, as</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>good_auto_array = integer_pointer;</pre>
Using the compile time operator <I>sizeof</I> on these two variables, <I>sizeof(good_auto_array)</I> would be 20 and <I>sizeof(integer_pointer)</I> would be four.</FONT></FONT></FONT></FONT></FONT></FONT><P>
The following erroneous declaration doesn't allow <I>function_2()</I> to compile, since you must state the size of the array when declaring a local variable.</FONT></FONT><P>
<pre>function_2()
   {
   int bad_auto_array[];    /*  Does not compile  */
   }</pre>
Now for passing an array as a parameter:<P>
<A href="list2.htm">Listing 2</a>
contains two functions which are passed an array as their sole parameter. The name of an array used without the subscript has the value of the address of the array. The address of <I>array_passed</I> is given to both <I>function_3</I> and <I>function_4</I>. Regardless of which way you declare <I>array_parameter</I>, you can reference it using either <I>function_4</I>'s indirect form or <I>function_3</I>'s index form. In both cases <I>array_parameter</I> is four bytes long (<I>sizeof(array_parameter)</I> yields 4) and like all function parameters, acts like a local variable. Thus, you could assign</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>   array_parameter = local_array;</pre>
As for globals<P>
<pre>extern int global_array[];
function_5()
   {
   global_array[1] = 5;
   }</pre>
Function_5 makes a reference to a global array. You must already have declared this global array using the form that includes its size. If you attempt <I>sizeof(global_array</I>), the compiler should report an error, as it cannot determine the actual size. The following declaration should appear either in this source file or in any other source file to which this file is linked.</FONT></FONT><P>
<pre>int global_array[10];   /*  Sets aside 10 times sizeof(int) */</pre>
When declaring global variables, you either make a definition or a reference. The form with the explicit size is a definition and sets aside storage. The form without the size and with the keyword <I>extern</I> simply makes a reference to a variable that will be linked to its definition at link time.</FONT></FONT><P>
You can make lots of references to <I>global_array</I> within all the linked source, but you may write only one definition. The ANSI standard sort of waffles on this point. A strictly conforming program will have only one definition for a global in all the sources files linked together. Some linkers will permit multiple definitions of the same global and treat all the ones after the first as references. The standard also permits the form</FONT></FONT><P>
<pre>extern int global_array[10];</pre>
to act as a definition, a form not permitted in K&amp;R.<P>
To cover all possible extern declarations, the committee came up with the concept of "tentative definition". Section 3.7.2 of the Standard gives examples of this, though I won't elaborate on it here.<P>
I prefer the general rule that works across all compilers:<P>
<I>One</I> declaration of the form<P>
<pre>int global_array [10];</pre>
and all other declarations of the form<P>
<pre>extern int global_array[10];</pre>
The definition of the global sets the source aside. When the linker matches a reference to that global, it checks only for a matching name, not whether the two items are the same data type. (I once had a linker that did not even care if the definition was for a data item and the reference was to a function. That caused some interesting debugging problems).<P>
Now if you declare global variables differently in two source files that are linked, the linker will not produce an error. The ANSI committee stated that this problem was outside their jurisdiction. You can avoid this problem with something similar to function prototypes, as shown shortly.<P>
Now to your problem (finally).<P>
<pre>char   date[9];
main()
   {
   strcpy ( date, "01-01-90" );
   foo();
   puts ( date );
   }</pre>
The external declaration of <I>date</I> allocates nine bytes. <I>strcpy</I> copies <I>"01-01-90"</I> into those bytes, and <I>sizeof(date)</I> is nine.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>extern char *date;

foo()
   {
   puts ( date );
   strcpy ( date, "02-02-90");
   puts (date );
   }</pre>
You declared <I>date</I> to be a pointer <I>(sizeof(date)</I> is four). The linker matched this reference to the <I>date</I> variable declared in the other file as an array of <I>char</I>. Referencing <I>date</I> in <I>foo()</I> uses the values in the first four bytes as an address. The <I>strcpy </I>in<I> foo()</I> copies <I>"02-02-90"</I> into that address.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The <I>strcpy</I> in <I>main()</I> placed values in the first four bytes in <I>date</I>. The values in the first four bytes of <I>date</I> in ASCII and their hexadecimal representation are</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>ASCII   0   1  -    0
HEX    30  31  2D  30</pre>
Since the PC stores addresses in reverse byte order, <I>strcpy()</I> will be passed <I>0x302D3130</I>. If you are lucky, this address is simply in your data space and will simply wipe out nine bytes of some trivial variables. If you are unlucky, however, the address is in your code space, and your instructions will change.</FONT></FONT></FONT></FONT><P>
Using function prototypes (even ones without parameter indications) and including them in all your source files will make the compiler check the function return types. It can check that the function is actually defined using the same type as the prototype.<P>
Similarly, if you set up a header file of <I>extern</I> declarations for all your external variables and include the header in all your source files, the compiler will check that your actual definition for the externals match the references to them.</FONT></FONT><P>
Following these lines, I would have a header file called <I>extern.h</I> which contains the code in <A href="list3.htm">Listing 3</a>.
 The other files would <I>#include</I> this file.</FONT></FONT></FONT></FONT><P>
Since you have <I>#include extern.h</I> in the file where the variable is declared, changing the definition without changing the header file, produces a compilation error for that file.</FONT></FONT><P>
An easy way to check external function and data definitions and references to them is to make the compiler create a symbol table that includes the function return types, parameter types, and external data types. This information is already created by the compiler and can be performed without the added baggage of including the source headers in every file.<P>
The checking algorithm that the compiler already performs on function prototypes could be employed in a program that reads the symbol files for all object files that are to be linked. Function prototype checking and external data type checking could occur without having to write extra source code specifically for that purpose.<P>
<h4><FONT COLOR="#000080"><A name="01D5_0102">Replies<A name="01D5_0102"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="01D5_0103">Stringizing<A name="01D5_0103"></FONT></h4></P>
As many have decried, there's plenty in the C language with which to pervert the meaning of "elegance", such as the ternary "?:", taking the value of assignments, the wonders of the comma operator, etc. With so much density permitted by the language proper, why waste time trying to get cute with the primitive C preprocessor?<P>
I refer, of course, to Josh Cohen's letter (<I>CUJ</I> 3/90 "Q&amp;A", p 34). I see things very differently than you do. What you call the "uglier" solution is in fact the simplest and therefore (dare I say it?) the most truly elegant.</FONT></FONT><P>
What's so painful about defining not one but two symbolic constants in this situation? I do it routinely, myself, where I know I'll need a numeral and a string. I make it easy mnemonically by using the same symbol but with a postfixed <I>q</I> for the "quoted" version, e.g.</FONT></FONT><P>
<pre>#define MAX 10
#define MAX_q "10"</pre>
and then get off and running. Let us remember that related <I>#defines</I> are usually placed in a common header location, so how horrible is it to do two of them? I mean, unless your program has hundreds of symbols that have to be available in both quoted and unquoted form, what's the big deal? Are you using <I>EDLIN</I> or something?</FONT></FONT></FONT></FONT><P>
And who even needs "plenty of comments"? I know for my own use, and could document it easily for others, the one simple commentary fact that "In the modules comprising this program, any preprocessor symbol ending with lower case <I>q</I> expands to the enquoted expansion of a similar symbol written without the <I>q</I>."</FONT></FONT></FONT></FONT><P>
When it comes to the code that depends on such symbol pairs, things get prettier, not uglier (i.e., you don't see one macro symbol as a parameter to another). I expect the preprocessor runs slightly faster, to boot, without going through substitution contortions. Certainly, the program runs much faster indeed than if we run <I>sscanf()</I> each time! (How could you even suggest it?!)</FONT></FONT><P>
Diehards who refuse to accept the preprocessor's limitations may wish to switch to Turbo C, which at least at version 2.0 sports the (we now know non-ANSI-conforming) preprocessing "feature" of expanding tokens after the stringizer, i.e., under Turbo they can indeed code:<P>
<pre>#define BOZO Clown
#define STRINGIZE (X) #X
printf("Bozo the %s",STRINGIZE(BOZO));</pre>
and get what the Standard does not provide. Then they can complete their clever machinations with<P>
<pre>#if !defined(__TURBOC__)
#error PORT FAILURE: Stringizing\
macro contraindicated!
#endif</pre>
and be the envy of the neighborhood.<P>
J. A. Jaffe<br>
Walnut Creek, CA<P>
Your comments are interesting. If I only had a couple of symbols, I'd probably do it your way. However, I like to make only one change. If two things need to change (even if they come one line apart), according to Murphy's law, only one of them will be changed.<P>
I would like to thank William M. Raike of Auckland, New Zealand, who also sent a reply regarding this topic. He uses Turbo C, which incorrectly does the expansion first. It is a bug, according to ANSI, rather than a feature. You people who are using it, would you rather have Borland leave it alone or fix it? (KP)<P>
<h4><FONT COLOR="#000080"><A name="01D5_0104">Function Redeclarations<A name="01D5_0104"></FONT></h4></P>
In replying to the first inquiry by Mr. Glenn Jordan in the April CUJ, you failed to address one of his points, which was the "Error 10: type mismatch in redeclaration of <I>getarray</I>" issued by Turbo C. The reason for the error is that when <I>main ()</I> called <I>getarray ()</I>, Turbo C built an implicit forward-declaration for <I>getarray</I> <I>()</I>, which gave the function the implied return-type of <I>int</I>. When <I>getarray ()</I> was later defined as type <I>void</I> , the compiler perceived a conflict.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Of course, the other compilers Mr. Jordan tried should have issued the same error (unless maybe ANSI has downgraded it to a warning, but the compiler should have said something. Note that had the <I>getarray ()</I> function definition appeared before its first call, there would have been no error, since the definition of a function serves as its declaration if and only if the definition occurs before the first time the function is called (and no explicit forward-declaration is present). Tricky business!</FONT></FONT><P>
John Lowenthal<br>
Brooklyn, New York<P>
<h4><FONT COLOR="#000080"><A name="01D5_0105"><I>sizeof</I><B> Operator<A name="01D5_0105"></B></FONT></h4></P>
Your answer in the April C Users Journal for Glenn Jordan's question concerning <I>sizeof</I> could have been more concise if it stressed that <I>sizeof</I> is a compile time operator, not a runtime function call, as it appears to be, (ref. K&amp;R Rev 2, page 135). The implications of it being a compile time operator makes it obvious that it cannot be used inside a subfunction to determine quantities like the size of a passed array.</FONT></FONT></FONT></FONT><P>
The answer to his question is that a function cannot get an array's allocated size. It must be passed this information.<P>
Incidentally, I enjoy your column very much, and I find it to be of great value, keep up the good work.<P>
Harry N. Bearman<br>
Fort Worth, TX<P>
<h4><FONT COLOR="#000080"><A name="01D5_0106">Keyboard Interrupt Processing<A name="01D5_0106"></FONT></h4></P>
Mike Drew wanted to know how to do interrupt processing when a key is pressed. You suggested that he chain <I>int 0x16</I>. This will not cause his toggle to be set until some later time when he tries to read a keystroke from BIOS. If he chains int <I>0x09</I>, the toggle can be set immediately, and the spurious keystrokes will never get into the buffer. The only drawback is you are running off the hardware scan code, so the key is otherwise unavailable.</FONT></FONT></FONT></FONT><P>
An outline for the package in Turbo C follows (<A href="list4.htm">Listing 4</a>)
. I have also attached a simple Turbo C routine (<A href="list5.htm">Listing 5</a>)
 I have used to map the scan codes on my keyboard. This works in the described manner, but does not chain the old interrupt.<P>
(Note: Bulletproof use of this technique requires capturing other interrupts to ensure that the old <I>0x09</I> interrupt is restored when the program exits, or placing the new interrupt in a TSR or device driver. In the latter case you don't need install and restore routines. Also, if you screw this up, its re-boot time.)</FONT></FONT><P>
Joseph W. Gibson<br>
Pasadena, CA<P>
<h4><FONT COLOR="#000080"><A name="01D5_0107">Of Mice And Men<A name="01D5_0107"></FONT></h4></P>
Here are additional replies to the question on the IBM-PC mouse. I included both listings, as I find it instructive to show how two people tackle the same problem.<P>
In the March Q?/A! column of <I>CUJ</I>, Michael Wiedmann asked how to determine whether a mouse was connected to a specific COM port. He went on to mention using <I>int 0x33</I>, function <I>0</I>, so I presume that he is using the Microsoft mouse and driver. I am not exactly sure what he wants to determine. Your answer appeared to assume that he meant, "is a mouse actually attached to the appropriate port?" Function <I>0</I> should detect that for him. If, instead, he means, "which port is allocated for mouse support?", there is a different function to determine that. The Microsoft interrupt function <I>36 </I>(decimal) returns the following information:</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
1. Which type of mouse is being supported (serial, bus, InPort, PS/2, or HP);<P>
2. Which version of the mouse driver is installed;<P>
3. Which IRQ is used by the mouse driver.<P>
The last point is the relevant point for determining which COM port is used by the mouse. However, there are two potential "gotchas". First, the PC uses <I>IRQ 3</I> for <I>COM1</I> and <I>IRQ 4</I> for <I>COM2</I>, while the AT uses <I>IRQ 4</I> for <I>COM1</I> and <I>IRQ 3</I> for <I>COM2</I>. So you have to find out which machine is being used. Address <I>0xFFFFE</I> in the BIOS identifies the machine as follows:</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>   <I>0xFC</I> is an AT
   <I>0xFD</I> is a PCjr
   <I>0xFE</I> is an XT
   <I>0xFF</I> is a PC</pre>
[from <I>The Programmer's Problem Solver</I> by Robert Jourdain. Brady Books,ISBN 0-89303-787-7]<P>
The second possible pitfall is that very old mouse drivers do not support function <I>36</I>. My original Microsoft Mouse User's Guide has functions <I>0-16</I> and <I>19</I> only. I don't know when function <I>36</I> was added.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
As a minor point, I should add that it is possible to configure a bus mouse to use <I>COM1</I> or <I>COM2</I> <I>IRQ</I>s without their physically being attached to the appropriate COM port. But, if the system is configured with an <I>IRQ</I> conflict, detecting the mouse is the least of your problems.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Pages 203 and 204 in the <I>Microsoft Mouse Programmer's Reference</I> [Microsoft Press, ISBN 1-55615-191-8] cover this function. I strongly recommend the book to Mr. Wiedmann.<P>
Thomas R. Clune<br>
Boston, MA<P>
This is a response to the question from Michael Wiedmann in the March 1990 Q?/A! column. He asked about determining which COM port on a PC compatible is used by a serial mouse. This can be accomplished with Interrupt <I>33H</I> Function <I>24H</I> (Get Mouse Information). This is one of the more recent functions which have been added to this interrupt. Microsoft originally used a <I>MOUSE. SYS</I> driver loaded through a <I>CONFIG.SYS</I> mechanism during boot, with the following old load syntax:</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>DEVICE=\path\M0USE.SYS</pre>
Some time back (I believe it was about two years ago) Microsoft changed to a <I>MOUSE.COM</I> driver which is loaded as a TSR. This driver can be placed in <I>AUTOEXEC.BAT</I>, but this is not required as long as it is loaded before needed by an application program. The <I>MOUSE.COM</I> driver can be removed from memory (<I>MOUSE OFF</I>), while the older <I>MOUSE.SYS</I> was permanent. The new load syntax for <I>MOUSE.COM</I> is simply:</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="01D5_0108">MOUSE<A name="01D5_0108"></FONT></h4></P>
The code provided in my enclosed listing (<A href="list6.htm">Listing 6</a>)
 includes a function which calls <I>INT 33H</I> Function <I>24H</I> and interprets the results. This interrupt returns information about the interrupt line used by the mouse. PC compatibles have a well-defined relationship between port addresses and interrupts for ports <I>COM1</I> and <I>COM2</I>. Unfortunately, no such relationship is guaranteed for additional serial ports such as <I>COM3</I> or <I>COM4</I>. Therefore, the information provided here is only useful for <I>COM1</I> and <I>COM2</I>. Port <I>COM1</I> uses interrupt <I>IRQ4</I>, while <I>COM2</I> uses <I>IRQ3</I>. The <I>mouse_info()</I> function returns the decoded COM number.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The mouse type (serial, bus, etc.), interrupt line, and mouse driver version number are also returned by <I>mouse_info()</I>. If the mouse driver is not loaded, the interrupt vector points to a return instruction, and no registers are changed. All returned values from <I>mouse_info()</I> will then be zero. Please note that the <I>REGS</I> union and <I>int86()</I> function are extensions to ANSI C available in Microsoft C and QuickC. Similar methods of calling 8086 family interrupts and communicating between registers and C variables should be available in other C implementations for the PC.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Bill Byrom<br>
Irving, Texas<P>
This is an answer to your request in the March 1990 issue. The answer concerns the question by Michael Wiedmann of West Germany on page 37.<P>
To determine if a mouse is using a serial COM port, and which one, I have provided the listing <I>mcheck.c</I> (<A href="list7.htm">Listing 7</a>)
. The <I>mcheck</I> routine first calls the <I>mouse_status()</I> routine to determine if a mouse driver is present. The <I>mouse_status()</I> routine will call interrupt 33 (hex) with a function code of zero to get the mouse status. If the mouse driver is available, then the <I>mouse_status()</I> routine will return <I>TRUE</I> (<I>1</I>) and report in the <I>mouse_info</I> structure the number of buttons the mouse has. If the mouse driver is not present, then the <I>mouse_status()</I> routine will return <I>FALSE (0)</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
If a mouse driver is present, then the <I>mouse_config()</I> routine will be called to get the configuration of the mouse. This routine will call interrupt <I>33</I> (hex) with a function code of <I>24</I> (hex) to obtain the mouse configuration. The <I>mouse_config()</I> routine will fill in the information, concerning mouse driver revision, the mouse type and the Interrupt Request Level (<I>IRQ</I>), in the <I>mouse_info</I> structure. The <I>m_info.m_type</I> has a value in the range from one to five as currently defined in the Microsoft Mouse specification. All other values are considered unknown by this routine. See the <I>mouse_type</I> character array for valid mouse types.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Once the mouse information is obtained, the next step is to determine if the mouse is a serial one, and if so, which <I>COM</I> port it is using. If the <I>m_info.m_type</I> has a value of two, which means serial mouse, then the <I>which_port()</I> routine is called to find out which serial interrupt vector the mouse is using. The <I>which_port()</I> routine compares the <I>COM1</I> and <I>COM2</I> interrupt vector segments against the mouse driver's interrupt vector segment using the <I>far</I> pointers <I>com1_vec</I>, <I>com2_vec</I> and <I>mouse_vec</I>. If neither vectors match, then <I>which_port()</I> will return zero, otherwise it will return one indicating that the mouse is using <I>COM1</I> or two (2) indicating that the mouse is using <I>COM2</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The <I>mcheck.c</I> routine was tested under Microsoft's QuickC v2.0, Microsoft's C v5.1 and Borland's TurboC v2.0. Tests were ran against Microsoft's Mouse Driver v6.36 in both Bus and Serial modes and against Mouse Systems Mouse Driver v5.03 in serial mode. It should be noted that the Mouse Systems driver I was using appears to have some problems when calling interrupt <I>33</I> (hex) function <I>24</I> (hex). It reported a driver major version as zero and an <I>IRQ</I> level of <I>89</I>. It even sometimes reported a mouse type of zero instead of two.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
To avoid possible mouse driver incompatibilities as stated above, simply call the <I>mouse_status()</I> routine to see if a mouse driver is present, and if so, call the <I>which_port()</I> routine directly to see if the mouse is using a serial port.</FONT></FONT></FONT></FONT><P>
David W. Gunnell<br>
Leesburg, VA<P>
<h4><FONT COLOR="#000080"><A name="01D5_0109">Floating Point Format<A name="01D5_0109"></FONT></h4></P>
I received four replies to this question. In addition to the ones below, I also heard from Michael Peppler of Geneva, Switzerland.(KP)<P>
This is in regard to the letter from Finnbarr P. Murphy in your <I>C Users Journal</I> column in the May 1990 issue. He wants to know about converting floating point numbers in the MS BASIC format to the IEEE format.<P>
This is a familiar problem to people who program in compiled BASIC such as Microsoft QuickBASIC. While I haven't used QuickBASIC in the last few years, I am aware of the solution provided by Microsoft. Versions 3.0 and higher of QuickBASIC handle floating point numbers internally in the IEEE format, but functions are provided which allow you to read a file containing MS BASIC format floating point numbers. These functions automatically convert the numbers to the IEEE format. You can then output the numbers to another file in the IEEE format so that in the future you have to deal only with the IEEE format. Page 320 of the QuickBASIC <I>Programming in BASIC</I> manual presents a sample program for converting a file from one format to the other.<P>
Perhaps more importantly for the C programmer, the library for Microsoft C contains functions <I>fmsbintoieee</I> and <I>dmsbintoieee</I> which convert single and double precision numbers respectively from the MS BASIC format to the IEEE format. According to the excellent book <I>Microsoft C Bible</I> by Barkakati, published by Howard Sams &amp; Co., these functions are in the libraries for MS C v4.0 and up. They are also available in Microsoft QuickC.</FONT></FONT></FONT></FONT><P>
I hope this information is of use to you and Mr. Murphy.<P>
Bernard H. Robinson, Jr.<br>
DeBary, FL<P>
Prior to QuickBASIC 4.0, all versions of BASIC (interpreters and compilers) stored floating points in Microsoft Binary Format.<P>
Microsoft has provided functions to convert between these two formats in their library. They are as follows:<P>
<I>dmsbintoieee</I> &#151; Converts Microsoft binary double-precision to IEEE format.</FONT></FONT></FONT></FONT><P>
<I>fmsbintoieee</I> &#151; Converts Microsoft binary single-precision to IEEE format.</FONT></FONT></FONT></FONT><P>
<I>dieeetomsbin</I> &#151; Converts IEEE double-precision to Microsoft binary format.</FONT></FONT><P>
<I>fieeetomsbin</I> &#151; Converts IEEE single-precision to Microsoft binary format.</FONT></FONT></FONT></FONT><P>
Vince Du Beau<br>
Carteret, New Jersey<P>
I'm no BASIC expert (or even a C expert), but I may be able to help with Finnbarr P. Murphy's question about BASIC floating point numbers in the May <I>C Users Journal</I>.<P>
Microsoft C uses the IEEE format for floating point numbers. Microsoft QuickBASIC before v4.0 (and I think, but am not sure, their other implementations, including the interpreters) used the so-called Microsoft Binary Format (MBF). Starting with QB 4.0, the programmer could choose either MSB or IEEE. The latter was the default. The QB 4.0 manual entitled <I>Learning and Using Microsoft QuickBASIC</I>, Appendix B, p. 247-252, discusses this. Pages 132-133 of the <I>BASIC Language Reference</I> covers the functions <I>CVSMBF</I> and <I>CVDMBF</I>, which can be used to convert MBF to IEEE.</FONT></FONT></FONT></FONT><P>
The encoding of MBF is given in the MASM 5.0 <I>Programmer's Guide</I>, p. 133-134. Like IEEE format, zero is represented by all bits clear and, for non-zero values, the integral portion of the mantissa is assumed to be one and not expressed. Short real format is encoded as follows: bits zero through 22: fractional part of the mantissa; bit 23: sign bit (set means negative); bits 24-31: exponent, biased by adding <I>81h</I> to the "real" exponent. Long real format: bits zero through 54: fractional part of the significant; bit 55: sign bit (set means negative); bits 56-64: exponent, again biased by adding <I>401h</I> to the "real" exponent.</FONT></FONT></FONT></FONT><P>
The easiest solution to the problem would probably be to write a BASIC program to read the files, convert the numbers to IEEE using <I>CVSMBF</I> or <I>CVDMBF</I>, and write the records back out. A combined C/Basic program could also be concocted. Since the program would have to start up in BASIC (see the sections in the manual on mixed-language programming), this solution would probably be more trouble than it was worth.</FONT></FONT></FONT></FONT><P>
I enjoy your columns each month and never fail to learn from them. I hope this has helped you and Mr. Murphy.<P>
Howard C. Sanner, Jr.<br>
Bladensburg, Md.<P>

<h4><a href="../../../source/1990/aug90/pugh.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
