


<HTML>
<HEAD>

<TITLE>August 1990/Using OOPs In Mac Designs</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocaug.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">Using OOPs In Mac Designs<A name="01C3_00F9"><A name="01C3_00F9"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="01C3_0000"><A name="01C3_0000">Richard Rathe, MD</font></h3><hr><blockquote><P>
<P><i><A name="01C3_0000"><A name="01C3_0000">Richard Rathe has worked with C<I></I> <I></I>since 1985. He is an assistant professor<I></I> <I></I>of family medicine at the University of<I></I> <I></I>Florida and a researcher in medical<I></I> <I></I>computing and informatics. You may<I></I> <I></I>contact Richard at Box J-215 JHMHC,<I></I> <I></I>University of Florida, Gainesville, FL<I></I> <I></I>32610</i></P><P>
The Macintosh lets users manipulate graphic screen elements with a mouse or keyboard. A typical Macintosh application will feature one or more windows of related text and graphic elements, such as those used to edit text. When a user initiates an action such as a mouse click, the action is recorded as an event and placed in a queue. The application must then respond to this event as appropriate.<P>
Since the burden of managing this complexity is left to the programmer, even simple Macintosh applications are prone to bugs and are difficult to maintain. Object-oriented programming techniques can help reduce the complexity. In this article, I use standard C to define window objects as part of a generic application. Any Macintosh program derived from these templates will easily support many windows of several different types.<P>
<h4><FONT COLOR="#000080"><A name="01C3_00FA">Object-Oriented Style<A name="01C3_00FA"></FONT></h4></P>
<I>Encapsulation</I> is the combination of data with functions that act on that data. Together, data and data-specific functions constitute a class. All or part of a class's data might be private, invisible outside the class. A class's functions are often called methods and are invoked in response to function call messages. An object is an actual instance of a class, a "value."<P>
A <I>polymorphic</I> function takes on different behavior depending on which object invokes it. The classic example is the <I>draw()</I> function in the world of circle, square, and triangle shaped objects. Three different (virtual) functions exist, one for each shape, but all share the same name. Sending a draw message to any shape object results in the correct version of <I>draw()</I> being called by virtue of late binding.</FONT></FONT></FONT></FONT><P>
Because object-oriented programming encourages deriving new classes from existing classes, it should increase your productivity. Code reuse minimizes maintenance headaches. A derived class might inherit most of its data and functionality from its parent, but might add new data elements or functions. You can also override specific functions by defining new functions that have the same name, but different behavior. Using derived classes takes advantage of <I>inheritance</I>.<P>
<h4><FONT COLOR="#000080"><A name="01C3_00FB">The <B><I>refCon</I></B> Field<A name="01C3_00FB"></FONT></h4></P>
The key to creating window objects on the Macintosh is the reference constant, or <I>refCon</I> field, provided as part of the built-in window data structure. These data structures and functions are part of the Macintosh ROM toolbox and can be called directly from an application as if they were language extensions. The application programmer uses this 32-bit integer to store application specific data, such as storing a pointer to an additional data structure.</FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="01C3_00FC">Event Records<A name="01C3_00FC"></FONT></h4></P>
The Macintosh maintains information about events in the <I>event record</I> data structure, which has the following fields:<P>
<UL><li>what</li>
<li>message</li>
<li>when</li>
<li>where</li>
<li>modifiers</li></UL>
The meaning of each of these fields depends on the type of event. For instance, a mouse-related event record might contain a pixel location in the <I>where</I> field.</FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="01C3_00FD"><I>GetNextEvent()<A name="01C3_00FD"></I></FONT></h4></P>
Each time a user, application, system, or network event occurs, the Macintosh OS creates a new event record and places it in the event queue. Your application can access this queue by calling the built-in function <I>GetNextEvent()</I>. You can use a related function, <I>WaitNextEvent()</I>, with newer versions of the system software to allow background multi-processing. In virtually every Macintosh application, <I>GetNextEvent()</I> is called repeatedly as part of an event loop (<A href="list1.htm">Listing 1</a>)
 to get event records off the queue for processing.</FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="01C3_00FE"><I>activate</I><B> Events<A name="01C3_00FE"></B></FONT></h4></P>
On the Macintosh, only one window is on top or "active," but you can change which window is active at any time. While the Macintosh system software draws the window frames, it's your application's responsibility to manage the windows' contents. A window becoming active generates an <I>activate</I> event. The previously active window generates an <I>inactivate</I> event. These events allow your application to do required window housekeeping.</FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="01C3_00FF"><I>update</I><B> Events<A name="01C3_00FF"></B></FONT></h4></P>
Whether a window is active or not, you may need to redraw all or part of it the screen changes. The system generates an <I>update</I> event in response to such a need.</FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="01C3_0100"><I>mouseDown</I><B> Events<A name="01C3_0100"></B></FONT></h4></P>
Mouse presses generate <I>mouseDown</I> events. The meaning of a given mousepress event depends on where it occurred. Basic tasks such as moving a window are handled by built-in functions. Complex tasks such as scrolling text must be handled by the application. Mouse clicks inside the menu bar are a separate issue not covered here.</FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="01C3_0101"><I>keyDown</I><B> Events<A name="01C3_0101"></B></FONT></h4></P>
A <I>keyDown</I> event record contains a key code and information about any modifier keys (command or option) that might have been used. The interpretation of a <I>keyDown</I> is entirely application-specific. When users hold down a key continuously, they generate an <I>autoKey</I> event.</FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="01C3_0102">Declaring Window Classes<A name="01C3_0102"></FONT></h4></P>
The generic event loop in <A href="list1.htm">Listing 1</a>
provides infrastructure for creating a window class. The <I>WIND typedef</I> (<A href="list2.htm">Listing 2</a>)
 defines generic window data and window messages/methods. Notice the use of the **<I>data handle</I>. A handle is a pointer to a pointer. The memory manager can compact the heap with the intermediate master pointer, while the application deals with the handle exclusively. Macintosh memory management makes extensive use of relocatable, handle-based memory blocks for things such as text and graphics. Following the window data, I declare standard window operations as pointers to functions.</FONT></FONT></FONT></FONT><P>
The function <I>create_t_window()</I> (see <A href="list3.htm">Listing 3</a>)
 creates an instance of the text window class. Both window and <I>WIND</I> data structures are allocated from the heap using the built-in functions <I>NewPtr()</I> and <I>NewWindow()</I>. The arguments to <I>New-Window()</I> specify the window rectangle, its title, visibility, and so on. The window methods are added, and finally the window class data <I>t_windinfo</I> is inserted into the <I>t_window refCon</I> field. The new window object joins the window list maintained by the system software.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="01C3_0103">Window Methods<A name="01C3_0103"></FONT></h4></P>
The window methods are specified in a separate file for each window class. The activate method for the text window class <I>t_activate()</I> (<A href="list4.htm">Listing 4</a>)
 takes a window pointer and a <I>WIND</I> data structure as its arguments. First, you obtain the <I>TextEdit</I> data handle. (<I>TextEdit</I> is the name for the built-in ROM functions that support simple text editing.) Then, you call any of several update functions depending on whether the <I>active-Flag</I> is set. These functions include: activate/ deactivate; hilite scroll bar; transfer to/from scrap buffer; and enable/disable menus.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="01C3_0104">Window Messages<A name="01C3_0104"></FONT></h4></P>
Window messages are dispatched from the event loop based on the event type. The activate event dispatcher in <A href="list5.htm">Listing 5</a>
simply obtains the <I>WIND</I> data structure and calls the dereferenced activate method *<I>windinfo</I>-&gt;<I>activateproc()</I>. The activate method is polymorphic, with the actual function call being determined at runtime. A summary of the entire process is shown in <A href="fig1.htm">Figure 1</a>.
</FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="01C3_0105">Off And Running<A name="01C3_0105"></FONT></h4></P>
The body of a typical application (see <A href="list6.htm">Listing 6</a>)
 consists of initialization and the main event loop. Once control is handed over to the user, the main event loop controls all interaction with the application. Window objects are created dynamically as needed. The appropriate window methods maintain the contents of each window, and the Macintosh operating system maintains the windows themselves.<P>
You can implement a variety of window classes with the object-oriented approach. Note that all text windows support editing, scrolling, cut/paste, find/replace, and disk access. A <I>list window class</I> provides spreadsheet-like tables to display data. These tables support the selection of individual cells and scrolling in two dimensions. Finally, the <I>picture window class</I> is used to display graphics. Refer to <A href="fig2.htm">Figure 2</a>
for an example application.<P>
The Macintosh lacks a standard console, so there's no place to display output from <I>printf()</I> or <I>assert()</I> statements used to debug programs. Therefore, I derived a <I>debugging window class</I> from the text window classes for this purpose. The debugging window class inherits most of the messages/methods of the text window class, but includes a new <I>debug()</I> function. Arguments to <I>debug()</I> are displayed in the debugging window. Debugging output can be scrolled, edited, and saved as a text file.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="01C3_0106">The Payoff<A name="01C3_0106"></FONT></h4></P>
Programmers will benefit from this object-oriented approach. Since global window pointers are no longer needed, the number of windows is dynamic. You can avoid the lengthy conditional or case statements used to dispatch events. Events will be "transparently" directed to the correct window regardless of the window's position or type. Each window will respond as expected to the events it receives. You can easily integrate new windows, created on the fly, into the application's display. Inheritance simplifies the definition of new window types since existing types form the basis for new window classes. Finally, reusable code and decreased window-related complexity help streamline the development of Macintosh applications.<P>
<h4><FONT COLOR="#000080"><A name="01C3_0107">Annotated Bibliography<A name="01C3_0107"></FONT></h4></P>
Apple Computer, Inc. <I>Inside Macintosh (vol I - V)</I>, Addison-Wesley (1984-1988). The definitive documentation for programming the Macintosh.<P>
Chernicoff, Stephen. <I>Macintosh Revealed (vol. I and II)</I>, Hayden Books (1987). A good programmer's introduction. Summarizes information found in <I>Inside Macintosh</I>. Unfortunately, the example code is written in Pascal.<P>
Jonathan Amsterdam, "Object-Oriented Mac Windows", <I>BYTE</I> (July 1989); 14(7) pages 277-287. A similar but more complicated approach to Macintosh window support using object-oriented techniques. Uses the <I>refCon</I> field to store window data and methods as discussed here.</FONT></FONT><P>
JS Linowes, "It's an Attitude," <I>BYTE</I> (Aug 1988); 13(8), pages 219-224. Another example of object-oriented programming techniques in "straight C."<P>

<h4><a href="../../../source/1990/aug90/rathe.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
