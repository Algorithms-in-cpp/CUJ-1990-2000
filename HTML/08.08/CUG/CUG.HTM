


<HTML>
<HEAD>

<TITLE>August 1990/New Releases</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocaug.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Departments</FONT></H2>

<hr><h2 align="center"><font color="#800000">New Releases<A name="01EB_010C"><A name="01EB_010C"></font></h2><P><HR>
<BLOCKQUOTE>
<h4><FONT COLOR="#000080"><A name="01EB_010D"><A name="01EB_010D"><A name="01EB_010D">CUG320 Convolution Image Process<A name="01EB_010D"></FONT></h4></P>
Contributed by Wesley G. Faler (MI), this volume contains a program that implements an image manipulation algorithm called "convolution". This program was used to generate the image on this issue's cover, and is the subject of an article starting on page 95 in this issue. The program takes an image file (<I>CUT</I> format) as input, applies the convolution algorithm to the image and generates a new image. The program was developed under MS-DOS using Turbo C v2.0 and its BGI features. The disk includes C source code, documentation, and sample scanned image files, such as a Klingon battle cruiser.</FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="01EB_010E">CUG321 Mouse Trap Library<A name="01EB_010E"></FONT></h4></P>
Written by James M. Curran (NJ), submitted by Michael Yokoyama (HI), this shareware package contains a collection of functions to control a mouse. These functions provide easy access to the low-level functions of the mouse interrupt, as well as a simplified system for defining buttons or hot spots on the screen. The disk includes small and large model libraries for Microsoft C v5.1, a sample test program, and documentation that describes each mouse function. The source code can be obtained directly from the author (24 Greendale Rd., Cedar Grove, NJ 07009-1313).<P>
<h4><FONT COLOR="#000080"><A name="01EB_010F">CUG322 Doctor's Tools<A name="01EB_010F"></FONT></h4></P>
This volume contains four programs, <I>Trace</I> by William M. Rogers, <I>RAM Test</I> by Dean Lance Smith, <I>Mkptypes</I> by Eric R. Smith, and <I>Malloc Leak Trace</I> by Michael Schwartz. The disk includes all the C source code and documentation for each program.<P>
Written by William M. Rogers (NJ), Trace is a collection of debugging macros. Using ANSI C features such as_<I>FILE_</I>and_<I>LINE_</I>, these macros provide enough information to trace the execution of a program. A sample test program is also included.</FONT></FONT></FONT></FONT><P>
Written by Dean Lance Smith and Mohammad Khurrum, RAM Test is an implementation of the ATS (Algorithmic Testing Sequence) algorithm developed by Knaizuk and Hartman and the ATS+ algorithm developed by Nair. The program tests RAM for any single or multiple stuck-at-0 or stuck-at-1 faults. The inputs to the program are the starting and ending addresses of any part of RAM. The output is the address of the location where the fault occurs and the type of the fault. Smith and Chaiyos Ruengsakulrach have also provided RAM Test programs that use MATS and MATS+ alogorithms. The programs can be compiled under MS-DOS using Turbo C.<P>
Written by Eric R. Smith (Canada), submitted by Thomas R. Clune (MA), Mkptypes is an ANSI prototype generator that takes as input one or more C source code files, and produces as output a list of function prototypes for the external functions defined in the input source files. The output prototypes are suitable for <I>#include</I>'ing in a C source file. The function definitions in the original source may be either "old-style" (in which case appropriate prototypes are generated for the functions) or "new-style" (in which case the definition includes a prototype already). The program is written in Standard C.</FONT></FONT><P>
Written by Michael Schwartz (WA), submitted by Henri de Feraudi (France), the Malloc Leak Trace Package is designed to help trace dynamic memory allocation leaks. The package provides the standard <I>malloc/free/realloc</I> interface, but keeps track of all <I>malloc</I>'d buffers, including their size, order of call, and address. Thus, you can see what <I>malloc</I>'d buffers haven't yet been freed at any point during program execution. This package is particularly useful with programs that perform many allocations before reaching some steady state because the package allows you to ignore the initial allocations and concentrate on the steady-state behavior.</FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="01EB_0110">CUG323 Fireworks And Adventure<A name="01EB_0110"></FONT></h4></P>
This volume contains two programs contributed by Dennis Lo and David Lo (Canada).<P>
Dennis Lo has written a graphics program, Explod, which generates an animated fireworks display. Explod works with Hercules, VGA, EGA, or CGA graphics cards. By specifying options on the command line, you can control some performance parameters such as video type, the number of simultaneous explosions on the screen, delay factor, the number of explosions to display before exiting, gravity, and wind. Lo has also provided a utility to create explosion data files to drive Explod. The disk includes a complete set of C source code and assembly files, sample explosion data files, executable code, and documentation. Explod compiles with Turbo C vl.5 or later and requires MASM v5.0. However, the program can be compiled with other compilers by changing the segment and group names.<P>
David Lo has written an adventure game called "Beyond The Tesseract". This adventure game recognizes two-word "verb-noun" commands for moving, taking inventory, manipulating objects, and saving the game. The program recognizes about 200 words. This adventure game is abstract and a bit on the technical side. Basic knowledge of the names of interesting mathmatical objects would be helpful in solving the puzzles. There is no carry limit and no death traps. The disk includes C source code and documentation. The program can be compiled using Turbo C vl.5 or later.<P>
</BLOCKQUOTE>
</BODY>
</HTML>
