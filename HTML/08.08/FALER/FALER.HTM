


<HTML>
<HEAD>

<TITLE>August 1990/Image Manipulation By Convolution</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocaug.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Graphics</FONT></H2>

<hr><h2 align="center"><font color="#800000">Image Manipulation By Convolution<A name="01AF_00EF"><A name="01AF_00EF"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="01AF_0000"><A name="01AF_0000">Wesley Faler</font></h3><hr><blockquote><P>
<P><i><A name="01AF_0000"><A name="01AF_0000">Wesley Faler is a senior Manufacturing Systems Engineering student at GMI Engineering  &amp; Management Institute in Flint, MI. He has worked with C for 2 years now, and interests include user interface coding, AI, and scientific computing. He is presently on the programming team that is writing the GMI CIM Lab system code. All comments should be sent to 1409 New York Ave., Flint, MI 48506.</i></P><P>
Several months ago, a project led me to a particularly interesting image manipulation algorithm called convolution, which is capable of finding edges, horizontal lines, vertical lines, and even diagonal lines in an image.<P>
Convolution is a reasonably simple process whereby we interpret an image's pixels in terms of how they fit with their neighbors. In other words, the image's pixels after convolution represent some function of their original neighbors. The following pseudocode makes the process a little clearer:<P>
<UL><li>For every pixel in the original image, redraw the pixel with a color that is a function of the colors of the original pixel's neighbors.</li>
<li>Continue the first step until the original image has been completely "convolved" into the new image.</li></UL>
This algorithm doesn't choose the function involving the original neighbors. I chose a simple and effective function: a weighted sum, including the original pixel.<P>
In a simple, one-dimentional example, a row of pixels is represented by (1 2 3 4), with each integer defining a pixel's color. The pixel colored (2) is the first that can be redrawn since it is the first (left to right) with left and right neighbors. Assume we apply a "convolution matrix" of (-5 0 6) to the pixel and its neighbors. The pixel's new color will be<P>
<pre>(1)(-5)+(2)(0)+(3)(6)</pre>
or (13). The convolved value for the original pixel colored (3) will be<P>
<pre>(2)(-5)+(3)(0)+(4)(6)</pre>
or (14). The two end pixels (1) and (4) cannot be convolved since there are no left or right points to which to apply the convolution matrix. They are assigned a value of (0). The new row of pixels is now (0 13 14 0).<P>
The two-dimentional case is similar, involving 2-D regions of pixels and a 2-D convolution matrix.<P>
<h4><FONT COLOR="#000080"><A name="01AF_00F0">Choosing A Convolution Matrix<A name="01AF_00F0"></FONT></h4></P>
How you choose the convolution matrix determines the final picture's appearance. The program in <A href="list1.htm">Listing 1</a>
accepts a file named <I>matrix.dat</I> that has the following format:</FONT></FONT><P>
<pre>&lt;matrix width&gt; &lt;matrix height&gt;
&lt;row 1,col 1 factor&gt; ... &lt;row 1,col w factor&gt;
<I>...            ...            ...</I>
&lt;row h,col 1 factor&gt; ... &lt;row h,col w factor&gt;</pre>
Note that both the width and height must be odd, since the matrix must have a center point.<P>
Some sample matrices will give you a feel for what convolution can do. For example, the matrix file<P>
<pre>3 3
-1 0 1
-1 0 1
-1 0 1</pre>
will light pixels that were on only the left edge of a dark-to-light transition on the screen (see <A href="fig1.htm">Figure 1</a>)
. Reversing the <I>1</I>s and <I>-1</I>s will detect a light-to-dark transition (i.e. lighting the "right" side of the object). Likewise, the matrix file:<P>
<pre>3 3
 1  1  1
 0  0  0
-1 -1 -1</pre>
will detect a dark-to-light transition from top to bottom (<A href="fig2.htm">Figure 2</a>)
. Switching the <I>1</I>s and <I>-1</I>s here allows you to detect top-side lines. To generate a picture of only an object's edges (like the image on this issue's cover), use the matrix file:<P>
<pre>3 3
-1 -1 -1
-1  8 -1
-1 -1 -1</pre>
Diagonal lines can be detected by using a matrix such as<P>
<pre>3 3
 0  1 0
-1  0 1
 0 -1 0</pre>
In choosing your own matrix, observe the following simple rules for best results:<P>
<UL><li>Make sure the sum of the factors in the matrix is positive or zero. A zero sum will eliminate extraneous pixels, while a small net positive sum can seem to fill in missing pixels. A negative sum usually filters out too many pixels (especially on a monochrome screen).</li>
<li>Use a zero in matrix locations where you are ambivalent about the color.</li>
<li>Use negative numbers for locations where you wish not to have color.</li>
<li>Use positive numbers for locations where you want a non-zero value.</li></UL>
<h4><FONT COLOR="#000080"><A name="01AF_00F1">The Program<A name="01AF_00F1"></FONT></h4></P>
<A href="list1.htm">Listing 1</a>
contains a program that accepts images in the CUT file format used by the Dr. Halo products. This format was easy to use with a hand scanner, but you may substitute any other means of getting a picture onto the screen. If you should replace the present routine for loading images <I>(load_cut (...)</I> ), be sure to set the global variables <I>minx, miny, maxx, maxy</I> to the image's location on the screen, but do not change the display page. To keep the convolution code reasonably clean, the program also requires that you leave at least <I>&lt;matrix height+1&gt;/2</I> and <I>&lt;matrix width+1 &gt;/2</I> margin on the top and left side of the image, respectively.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<I>CONVOLVE.C</I> was written in Turbo C 2.0 and the graphics calls should be fairly portable to other Cs. I frequently used pointers to minimize the execution time that several hundred thousand array accesses would normally take. The program could be further optimized by forcing it to ignore matrix entries of zero.</FONT></FONT><P>
When you run the program, it asks for the name of a CUT file to load and some information about image cleanup. If the file is not in the same directory, enter the path and the filename (including the .<I>CUT</I> extension).</FONT></FONT><P>
The image cleanup option will delete stray pixels before convolution. A single pixel with zero neighbors usually does not belong to a surface of interest. You can delete such pixels before convolution by answering <I>0</I> at the cleanup prompt. To disable the cleanup process, respond with -<I>1.</I><P>
Once the image has been convolved, press the space bar to switch between the original image (or cleaned image) and the convolved image. The effects of convolution become very apparent by simply holding down the space bar! Should you be fortunate enough to use the program on a color system, you can toggle colors by pressing the letters <I>A-P</I> (<I>A</I>=black, <I>B</I>=blue, etc...). Finally, hitting the <I>ESC</I> key will get you out (as will pressing any key during convolution).</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="01AF_00F2">Conclusion<A name="01AF_00F2"></FONT></h4></P>
The program works fine now, though you may wish to add the capability for single page display modes, developing a method to save convolved images, further optimization (assembly?), and the use of other image file formats.<P>
Convolution is an amazingly straightforward algorithm for image manipulation and can serve as the starting point for AI programs, contour analysis, or image recognition.<P>

<h4><a href="../../../source/1990/aug90/faler.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
