<HTML><HEAD><TITLE>August 1990/Image Manipulation By Convolution/Listing 1</TITLE></HEAD><BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4><A name="01AF_00F6"><A name="01AF_00F6">Listing 1<A name="01AF_00F6"></h4><P>
<pre>/**********************************************************/
/* CONVOLVE.C - Turbo C 2.0 implementation of image       */
/*                           convolution                  */
/* ----------   by Wesley G. Faler.  All code is "as is". */
/* There is NO copyright.  Use this code as you will, and */
/* if you make money at it, good for you.                 */
/**********************************************************/

#include&lt;stdlib.h&gt;
#include&lt;stdio.h&gt;
#include&lt;graphics.h&gt;
#include&lt;alloc.h&gt;
#include&lt;ctype.h&gt;

int load_cut(char *fname);
int load_convolution_matrix(char *fname);
int convolve_image(void);
int swap_pictures(void);

int minx,maxx,miny,maxy;
int LOADPAGE=0;
int ENHANCEPAGE=1;
int *cmat, *pmat, *vmat;
int cmx,cmy,cmnum;

struct palettetype palette,newpal;
int driver,mode;

int cleancut=-1;

int init_graphics(void)
{
 driver=DETECT; mode=0;
 detectgraph(&amp;driver,&amp;mode);
 if(driver==VGA) mode=VGAMED;
 initgraph(&amp;driver,&amp;mode,"");
 getpalette(&amp;palette);
 getpalette(&amp;newpal);
}

int cleanup_image(void)
{
 int i,j,num,x,y,k;

 if(cleancut&lt;0) return;
 setactivepage(LOADPAGE);
 setvisualpage(ENHANCEPAGE);
 for(x=minx;x&lt;maxx;x++) {
  for(y=miny;y&lt;maxy;y++) {
   if(getpixel(x,y)!=0) num=-1;
    else num=0;
   for(j=-1;j&lt;2;j++) {
    for(i=-1;i&lt;2;i++) {
     if(getpixel(x+i,y+j)!=0) num++;
    }
   }
   if(num&gt;cleancut) {
    k=getpixel(x,y);
    setactivepage(ENHANCEPAGE);
    putpixel(x,y,k);
    setactivepage(LOADPAGE);
   }
  }
 }
 k=ENHANCEPAGE; ENHANCEPAGE=LOADPAGE; LOADPAGE=k;
}

void show_test_image(void)
{
 int i;
 
 minx-cmx; miny=cmy;
 maxx=100+minx; maxy=100+miny;
 setcolor(1);
 moveto(minx,miny);
 randomize();
 for(i=0;i&lt;20;i++)
  lineto(random(100)+minx,random(100)+miny);
 for(i=0;i&lt;10;i++)
  fillellipse(random(50)+25+minx,random(50)+25+miny,
            random(25),random(25));
}

main( )
{
 char fname[50];
 int flag=0;

 load_convolution_matrix("matrix.dat");
 printf(".CUT file (1) or test image (0)?");
 scanf("%d",&amp;flag);
 flag= flag? 1:0;
 if(flag) {
  fflush(stdin);
  printf("filename to process:");
  gets(fname);
 }
 
 printf("Delete pixels with x or fewer neighbors. x=");
 scanf("%d",&amp;cleancut);
 if(cleancut&gt;8) cleancut=8;

 init_graphics();
 setactivepage(1); cleardevice();
 setactivepage(0); cleardevice();

 setactivepage(LOADPAGE); setvisualpage(LOADPAGE);
 if(flag) load_cut(fname);
  else show_test_image();
 cleanup_image();

 setvisualpage(ENHANCEPAGE);
 convolve_image();

 swap_pictures();
 restorecrtmode();
}

int toggle_colors(char c)
{
 c=tolower(c);
 c=c-'a';
 if(c&lt;0 || c&gt;=palette.size) return 0;
 newpal.colors[c]= palette.colors[c]-newpal.colors[c];
 setpalette(c,newpal.colors[c]);
 return 1;
}

int swap_pictures(void)
{
 int mode=0;
 char a;

 setvisualpage(LOADPAGE);
 for (;;) {
  a=getch();
  if(a==27) return;
  if(toggle colors(a)) continue;
  if(mode==0) setvisualpage(ENHANCEPAGE);
  if(mode==1) setvisualpage(LOADPAGE);
  mode=1-mode;
 }
}

int convolve_image(void)
{
 int i,j,k,nval;
 int *vx, *vy, *c;
 int colmax,offset,end,midy;
char **lines=NULL;
char *temp=NULL;

offset =-minx+(mcx/2);
end=cmy-1; midy=cmy/2;
lines=(char **)malloc(cmy*sizeof(char *));
for(i=0;i&lt;cmy;i++)
  lines[i]-(char *)malloc(sizeof(char)*(maxx-minx+cmx+1));
setactivepage(LOADPAGE);
for(j=-cmy/2;j&lt;cmy/2;j++) {
 for(i=minx-cmx/2;i&lt;(maxx+cmx/2+1);i++) {
  lines[j+midy][i+offset]-getpixel(i,j+miny);
 }
}
  colmax=getmaxcolor();
  for(j = miny;j&lt;maxy;j++) {
   setactivepage(LOADPAGE);
   for(i=j+cmy/2,k=minx-cmx/2,nval=maxx+cmx/2;k&lt;nval;k++)
    lines[end][k+offset] = getpixel(k,i);
   for(i=minx;i&lt;maxx;i++) {
    /* Load &amp; multiply neighbors into matrix */
    setactivepage(LOADPAGE);
    vx=vmat; vy=vmat+1; c=cmat; nval=0;
    for(k=0;k&lt;cmnum;k++) {
     if(*c) nval+= lines[(*vy)+midy][i+(*vx)+offset]*(*c);
     /* if(*c) nval+= getpixel(i+(*vx),j+(*vy)) * (*c); */
     c++;
     vx+=2; vy+=2;
    }
    /*  Cut off values too high or too low */
    if(nval&lt;0) nval=0;
    if(nval&gt;colmax) nval=colmax;
    /*  Place new pixel value */
    setactivepage(ENHANCEPAGE);
    putpixel(i,j,nval);
   }
   if(kbhit()) { getch(); break; }
   /* rotate line pointers */
   temp=lines[0];
   for(i=1;i&lt;cmy;i++) lines[i-1]=lines[i];
   lines[end]=temp;
  }
  for(i=0;i&lt;cmy;i++) {
   if(lines[i]!=NULL) free(lines[i]);
  }
  if(lines!=NULL) {
   free(lines);
  }
  return;
 }
 int build_offset_vectors(void)
 {
  int *t;
  int il,im,jl,jm,i,j;
  il=-cmx/2; im=cmx+il;
  jl=-cmy/2; jm=cmy+jl;
  t=vmat;
  for(j = jl;j&lt;jm;j++) {
   for(i=il;i&lt;im;i++) {
    *t++=i; *t++=j;
   }
  }
 }
 int load_convolution_matrix(char *fname)
 {
  /* Layout of matrix file:
     #x #y
     x0y0 x1y0 ... xny1
     .... .... ... ....
     x0ym x1ym ... xnym
  */
  FILE *mf;
 int *t;
 int i,j,im,jm;
 if( (mf=fopen(fname,"rt"))==NULL) {
  printf("Cannot load matrix file.\n");
  abort();
 }
 fscanf(mf,"%d%d",&amp;im,&amp;jm);
 if( (im&amp;1)==0 || (jm&amp;1)==0) {
  printf("Convolution matrix MUST have a center point.\n");
  abort();
 }
 if( (cmat=(int *)calloc(im*jm,sizeof(int)))==NULL ) {
  printf("Unable to calloc convolution matrix.\n");
  abort();
 }
 cmx=im; cmy=jm; cmnum=im*jm;
 t=cmat;
 for(j=0;j&lt;jm;j++) {
  for(i=0;i&lt;im;i++) {
   if( fscanf(mf,"%d",t++)!=1 ) {
    printf("Unable to read matrix.\n");
    abort();
   }
  }
 }
 fclose(mf);
 build_offset_vectors();
}

int load_cut(char *fname)
{
 static unsigned char st[3000];
 char *sp=st,*spend;
 int stp=0;
 int width,height;
 FILE *fp;
 int x,y,xl,yl;
 int i,n,len,d,j;
 
 fp=fopen(fname,"rb");
 width=getw(fp); height=getw(fp);
 xl =cmx; yl=cmy;
 minx=xl; miny=yl;
 maxx=xl+width; maxy=yl+height;
 if(maxy&gt;(getmaxy()-cmy)) {
  maxy=getmaxy()-cmy;
  height=maxy-yl;
 }
 getw(fp);
 y=yl-1;
 for(sp=st,n=0;n&lt;height;n++) {
  stp=getw(fp);
  for(sp=st,spend=st+stp;sp&lt;spend;) *sp++=getc(fp);
  sp=st; spend=sp+stp; x=xl; y++;
  while(sp&lt;spend) {
   if(*((unsigned char *)sp)&gt;0x80) {
    len=(*sp++) &amp; 0x7f;
    if(!(*sp)) { x+=len; continue; }
    setcolor(*sp++);
    moveto(x,y);
    linerel(len,0);
    x+=len;
    continue;
   } else {
    len=*sp++;
    for(j-0;j&lt;len;j++) putpixel(x++,y,*sp++);
    continue;
   }
  }
 }
  fclose(fp);
 }</pre>

</BODY></HTML>
