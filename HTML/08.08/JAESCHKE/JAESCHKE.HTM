


<HTML>
<HEAD>

<TITLE>August 1990/Doctor C's Pointers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocaug.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Doctor C's Pointers &reg;<A name="01D3_00FF"><A name="01D3_00FF"></font></h2><P>
<h3 align="center"><A name="01D3_0000"><A name="01D3_0000">Operators And The Precedence Table</h3><P>
<h3 align="center"><font color="#800000">Rex Jaeschke</font></h3><hr><blockquote><P>
<P><i><A name="01D3_0000"><A name="01D3_0000">Rex Jaeschke is an independent computer consultant, author and seminar leader. He participates in both ANSI and ISO C Standards meetings and is the editor of The Journal of C Language Translation, a quarterly publication aimed at implementers of C language translation tools. Readers are encouraged to submit column topics and suggestions to Rex at 2051 Swans Neck Way, Reston, VA 22091 or via UUCP at uunet!aussie!rex or aussie!rex@uunet.uu.net. </i></P><P>
Every useful C program contains statements which in turn, contain expressions. According to ANSI C "An expression is a sequence of operators and operands that specifies computation of a value, or that designates an object or a function, or that generates side effects, or that performs a combination thereof." As such, the C programs you write are full of operators and their operands.<P>
In this issue, I'll look at some of the more interesting aspects of C's operators and the operator precedence table.<P>
<h4><FONT COLOR="#000080"><A name="01D3_0100">The Operator Precedence Table<A name="01D3_0100"></FONT></h4></P>
In many languages such things as type conversion, procedure invocation, and array subscription are achieved via keywords, punctuators, or intrinsic functions. Not so with C, however. One of the most elegant aspects of C is that all operations are performed via operators. So by mastering the operator precedence table you can understand how to build expressions, then statements, and finally, programs.<P>
Operators in C are given precedence "values" according to their position in <A href="tab1.htm">Table 1</a>.
 (It is impossible to accurately represent this table without using footnotes or other such comments so these will follow below.)<P>
Each operator is shown only once in the table. However, some operators are overloaded and therefore, appear as many times as necessary. (For example, the unary indirection operator * is in the second row while the binary multiplication * is in the third row.) Note also, that the postfix versions of ++ and -- have higher precedence than their prefix counterparts with the former being in row one and the latter in row two.<P>
Let's see how to read the table correctly by using the following expression:<P>
<pre>a = b + c * d</pre>
This expression contains the three operators: assignment, addition, and multiplication. According to the precedence table multiplication has the highest precedence (it's in the row closest to the top, row three), followed by addition in row four, and finally by assignment in row 14. The table indicates the precedence of these operators in the absence of grouping parentheses. Let's rewrite this expression explicitly showing the grouping dictated by the table.<P>
<pre>(a = (b + (c * d)))</pre>
Of course, you can always use grouping parentheses yourself to either document or change the default precedence. For example:<P>
<pre>((a = (b + c)) * d)</pre>
produces an entirely different result.<P>
Since most table rows contain more than one operator it is possible to have an expression containing operators at the same precedence. To resolve this, we must look at the associativity column. This column tells us whether the operators in that row associate left-to-right or right-to-left &#151; in the expression as we have written it <I>not</I> as the operators exist in the table's row. For example:<P>
<pre>x * y / z
a = b = c </pre>
can be rewritten as:<P>
<pre>((x * y) / z)
(a = (b = c))</pre>
Even though multiplication and division have the same precedence we generally say that multiplication has higher precedence in this expression since these operators associate left-to-right.<P>
The precedence table is used by the compiler to construct an expression tree and <I>has nothing whatsoever to do with order of evaluation</I>. It is a very common mistake to say "order of evaluation" when you really mean "precedence." Consider the following example:<P>
<pre>a = b + c * d</pre>
The precedence of these operators is clear from the table. However, the order of evaluation of these operators is unspecified by the language. In this case it doesn't matter since the only side effect is the assignment and that can only be done after all the other expressions are evaluated. Let's use a different version of this same expression to show the problem.<P>
<pre>((*(a())) = (b() + (c() * d())))</pre>
What is the order of evaluation of the function call side effects? That is, in what order are the four functions called? The order is undefined and <I>cannot</I> be made explicit via grouping parentheses.<P>
<h4><FONT COLOR="#000080"><A name="01D3_0101">Postfix Operators<A name="01D3_0101"></FONT></h4></P>
The first row of the table contains the six postfix operators. C uses an operator to call a function. It's an unusual operator in that it consists of a postfix set of parentheses () which contain a possibly empty set of comma separated expressions having an object type. To call a function one simply names it and follows it with the function-call operator and an argument list. Since function calling is achieved via a run-time operator the operands' values need only be known at runtime. Specifically, the name of the function is not needed at compile time. What is needed is an expression that designates a function. This then permits a function to be called indirectly using a pointer to a function. For example:<P>
<pre>(*jmptable[i] ) ()</pre>
calls the function pointed to by the ith element in an array of function pointers called <I>jmptable</I>. The function actually called depends on the run-time value of the index <I>i</I>. This approach (and its corresponding flexibility) is not possible in most high-level languages.</FONT></FONT></FONT></FONT><P>
Similarly, the subscript operator <I>[]</I> is much more flexible in C than most other languages. It requires that one of its operands have an object pointer type (so that excludes pointers to incomplete and function types) and the other have an integer type. It does not require that the name of an array be present. Since subscripting is nothing more than dereferencing an object at some integer offset from a base address, only a base pointer is needed. As a consequence, you may arbitrarily subscript a pointer expression to one level. (Of course, whether the resulting expression produces defined behavior or not, depends on whether you go outside the bounds of the object to which you are pointing.)</FONT></FONT><P>
The ability to subscript a pointer gives rise to the identity<P>
<pre>a[i] is equivalent to *(a + i)</pre>
It also allows expressions such as "<I>abcd"[i]</I> and <I>f() [j]</I>. One of the biggest advantages of subscripting pointers is that space allocated by <I>malloc</I> and friends can be treated the same as that allocated statically or automatically. Subscripting pointers also permits multidimensional arrays to be referenced with less than the maximum number of dimensions. For example, given <I>int i [5] [4] [6]</I>;</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>i
i [2]
i [2] [3]
i [2] [3] [4]</pre>
are all valid expressions.<P>
Note that the order of the operands of <I>[]</I> is unspecified. That is, <I>a</I>[<I>i</I>] and <I>i</I> [<I>a</I>] are equivalent. This is not to suggest that you should write <I>2[i]</I> instead of i<I>[2]</I>, however, both are valid expressions under K&amp;R as well as ANSI C. Some mainstream compilers will not accept <I>2[i]</I> and while this in itself is not a big problem, it can make you suspicious about other possible (and illegal) shortcuts the compiler writers may have made. With <I>[]</I> being commutative some other interesting expressions are possible. For example:</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>a[i] [j] [k]
j[i[a]] [k]
k[j[i[a]]]</pre>
are all equivalent.<P>
The member selection operators<I> --&gt;</I> and . can always be written in terms of each other. For example, <I>s.m</I> is the same as <I>(&amp;s)--&gt;m</I> and <I>ps--&gt;m</I> is equivalent to <I>(*ps).m.</I> The dot operator requires its left operand to designate a structure although not necessarily by name. This makes expressions like <I>f( ).m</I> and <I>(*g( )).m</I> possible.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
ANSI C clearly indicates that the postfix versions of <I>++</I> and <I>--</I> have different precedence than their prefix counterparts. Historically, both prefix and postfix versions were combined in the second row. However, this gave rise to problems when faced with expressions such as:</FONT></FONT></FONT></FONT><P>
<pre>ps++<I>--&gt;</I>m</pre>
If the <I>--&gt;</I> has higher precedence that ++, this expression is ill-formed. However, many compilers treated it like</FONT></FONT></FONT></FONT><P>
<pre>(ps++)<I>--&gt;</I>m</pre>
By making postfix ++ and -- the same precedence as <I>--&gt;</I>, this problem was resolved since postfix operators associate left-to-right giving the same grouping as was previously assumed by these compilers. The promotion of postfix ++ and -- from row two to row one should break <I>no</I> existing code. It either now sanctions what your compiler might already be doing or it allows expressions previously rejected by your compiler.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="01D3_0102">Unary Operators<A name="01D3_0102"></FONT></h4></P>
All of the unary operators are in row two of the table. They are all prefix operators.<P>
The unary plus was an ANSI C invention. Originally, it had special grouping semantics but these were removed in a later draft version of the standard. The result of the unary plus operator is the value of its operand. The integral promotion is performed on the operand, and the result has the promoted type.<P>
An expression such as <I>-32768</I> consists of two source tokens; the unary minus operator and the integer constant <I>32768</I>. Note there is no such thing as a negative constant in C. The constant is non-negative and it is preceded by a unary minus operator. An interesting situation exists on 16-bit twos-complement machines where <I>-32768</I> is the smallest value that can be stored in an <I>int</I>. It so happens, that the type of <I>-32768</I> when written in this form is <I>not int</I>; it's <I>long int</I>, but that's another story.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
ANSI C has now made it possible to take the address of an array by using something like <I>&amp;arrayname</I>. Historically, compilers treated this as though you had written <I>&amp;arrayname[0]</I>, although some rejected it outright. (For a detailed discussion on pointers to arrays, refer to my column in the May 1990 issue of <I>The C Users Journal</I>.)</FONT></FONT></FONT></FONT><P>
In the early days of C, structures and unions were always passed by address just like arrays. However, once structure and union passing by value was introduced, an explicit <I>&amp;</I> was needed to construct the address of a structure. Some compilers issue a warning message if you pass a structure or union by value since they "believe" you might have omitted the &amp; by mistake.</FONT></FONT><P>
To call a function pointed to by a function pointer, you use the syntax:<P>
<pre>(*funptr) (arg-list)</pre>
ANSI C also permits this to be written as:<P>
<pre>funptr (arg-list)</pre>
so it looks like a "regular" function call. This is quite reasonable since an expression that designates a function is converted to a pointer to that function and as a result, the following expressions are equivalent.<P>
<pre>printf ("Hi there\n");
(*printf) ("Hi there\n");
(**printf) ("Hi there\n");
(***printf) ("Hi there\n");</pre>
The <I>sizeof</I> operator is rather unusual in that it uses a keyword rather than a symbol and it is evaluated at compile time. A <I>sizeof</I> expression produces a value of type <I>size_t</I>, an unsigned integer type defined in the standard headers <I>stddef.h, stdio.h, stdlib.h, string.h</I>, and <I>time.h</I>. This value represents the size in bytes of an object having the type specified. <I>sizeof</I> can only be applied to expressions having an object type. (It cannot be used with expression having incomplete or function type.) <I>sizeof</I> has two forms:</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>sizeof expression
sizeof (type)</pre>
Programmers almost always use parentheses even when they are not required. For example, in <I>sizeof(i)</I>, the parentheses are redundant grouping parentheses whereas in <I>sizeof(int)</I> they are a necessary part of the syntax. (For a detailed discussion on <I>sizeof</I>, refer to my column in the February 1988 issue of <I>CUJ</I>.)</FONT></FONT></FONT></FONT></FONT></FONT><P>
The cast operator can be used to convert an expression of one type to another with the following restrictions. You cannot cast to or from a structure or union type. You cannot cast to an array or function type. When you cast from an array or function type, the operand is first converted to a pointer. You may cast an expression to its own type and you may also cast an expression to type <I>void</I>. The latter explicitly discards the value of the expression and its use is mostly limited inside function-like macros that replace <I>void</I> functions.</FONT></FONT></FONT></FONT><P>
Strictly speaking, the cast operator has precedence lower than the unary operators but higher than the multiplicative operators. However, when shown in tabular form, it is always written along with the unary operators.<P>
<h4><FONT COLOR="#000080"><A name="01D3_0103">Other Operators<A name="01D3_0103"></FONT></h4></P>
The rest of the operators are quite straightforward, however, a few comments are in order.<P>
ANSI C states that expressions that both associate and commute are still controlled by the precedence table. For example:<P>
<pre>a * b * c</pre>
must be treated as being grouped like:<P>
<pre>(a * b) * c</pre>
The rules in K&amp;R permitted such expressions to be arbitrarily rearranged. Of course, different orderings might cause integer overflow (which may or may not prove fatal or erroneous). With floating-point operands, the results can be significantly different. On implementations where integer overflow is silent and recoverable, a compiler is still permitted to rearrange the grouping since you cannot tell the difference. Likewise for the bit operators |<I>, </I>&amp;<I>,</I> and ^<I>.</I></FONT></FONT></FONT><P>
In the early days of C, the compound assignment operators were written in the reverse order. For example, <I>+=</I> and <I>&gt;&gt;=</I> were written as <I>=+</I> and <I>=&gt;&gt;</I>, respectively. Unfortunately, this causes problems with expressions like <I>i =-5</I>. While you probably wanted to assign <I>-5</I><I> </I>to<I> </I><I>i</I>, you were, in fact, subtracting <I>5</I> from the current value of <I>i</I>. These old operators were declared archaic in the first edition of K&amp;R and are only supported by a handful of mainstream compilers. They are not part of ANSI C.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The comma operator is rather special and powerful and is discussed in my columns in the August 1988 and the November 1989 issues of <I>CUJ</I>. It is typically used only inside macros or in the first and third expressions of a <I>for</I> construct.</FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="01D3_0104">Miscellaneous Issues<A name="01D3_0104"></FONT></h4></P>
Only five operators give any guarantee about the order of evaluation. They are: &amp;&amp;<I>, ||, ?:, ()</I>, and comma operator. (For a detailed discussion on order of evaluation and sequence points, refer to my column in the July 1989 issue.)</FONT></FONT><P>
Only four operators are able to produce an <I>lvalue</I> expression. They are: <I>*, [], -&gt;</I>, and dot. (For a detailed discussion on <I>lvalues</I>, refer to my column in the August 1989 issue.)</FONT></FONT></FONT></FONT></FONT></FONT><P>
</BLOCKQUOTE>
</BODY>
</HTML>
