


<HTML>
<HEAD>

<TITLE>August 1990/Programmer's Toolkit</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocaug.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Book Reviews</FONT></H2>

<hr><h2 align="center"><font color="#800000">C Programmer's Toolkit<A name="01E5_0109"><A name="01E5_0109"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="01E5_0000"><A name="01E5_0000">Reviewed By Harold C. Ogg</font></h3><hr><blockquote><P>
<P><i><A name="01E5_0000"><A name="01E5_0000">Harold Ogg is Automation Librarian for Chicago State University. He holds an M.S. in Library Science and an M.Ed. in Information Systems and has been involved in library automation for a number of years. He is currently a member of the adjunct faculties of Indiana University Northwest and Triton College, where he teaches classes in computer science. He can be contacted at (312) 995-2541 or 995-2251 (office), or at (708) 628-8610 (home).</i></P><P>
<I>C Programmer's Toolkit</I> is a handy potpourri of callable routines and functions not part of the ANSI C standard library. The Toolkit includes a 360K floppy disk of source code for all the subroutines in the book, including the corresponding header files. The target machine/operating system is the PC and compatibles running MS-DOS or PC-DOS, but the material is easily adapted to UNIX environments or other micro/minicomputers and their operating systems.<P>
<I>C Programmer's Toolkit</I> features routines to invoke screen manipulations, handle strings, extend the capabilities of basic I/O operations, and perform some of the more complex mathematical, searching, and parsing algorithms. Its contents are reminiscent of the specialized libraries found in such packages as Roundhill's PANEL Plus II and the Greenleaf C Functions. What is lacking is the detail and depth that might be found in a collection such as the Wiley Scientific Subroutine package. However, the $200-$400 price tag is also missing; at $39.95, the <I>C Programmer's</I> <I>Toolkit</I> is a virtual bargain.<P>
The Toolkit might best be labeled a sampler of the aforementioned high-end packages. This is not to say that it copies or mimics any of them. On the contrary, the <I>C Programmer's Toolkit</I> can be a valuable aid in allowing the aspiring developmental programmer to make intelligent choices about whose libraries to affix his/her loyalty. The chapters lend enough explanation to the various genres of C libraries to allow programmers to identify those areas of supplemental routines necessary to realize success in their software coding projects.<P>
In addition to being a consumer's guide, the <I>C Programmer's Toolkit</I> is an excellent teaching tool for programmers who have advanced beyond the string print and file I/O stages. Each chapter contains ample material on which to base a study on a number of specific C topics. Purdum has deliberately avoided making the code machine specific in all but a very few instances. Targeted for Borland's Turbo C, Ecosoft's Eco-C88 and Microsoft's QuickC, the subroutines should be adaptable to most other C compilers as well. I ported a number of routines to Lattice C v3.4 and Microsoft C v6.0. With few exceptions, I had little difficulty in producing executable modules.<P>
The <I>C Programmer's Toolkit</I> is at the same time an experimenter's treasure trove. While it is possible that some chapters have a minimally adequate number of routines with which to develop distributable end-user products, there is certainly an ample supply of functions within topical groups to generate demonstration programs. The book contains sufficient material to create a reasonably sophisticated class project and even offer stand-alone attract mode presentations.<P>
The author expresses the intent to "extend the minimal ANSI set," a task he accomplishes quite well. In fact, his libraries are not seriously duplicative of tasks addressed in the extended function sets of any of the more popular C compilers. Many of the subroutines are not unique in performance, however, but their advantage lies in the availability in the book of their underlying source code. At least with the <I>C Programmer's Toolkit</I>, the aspiring C programmer can dissect the steps and logic of routines of particular interest to him or her, without paying considerable additional money for the privilege of examining library source.<P>
There is sufficient depth in some of the chapters that a neophyte programmer could reasonably create a major, complex program. The chapter on screen functions contains an adequate number of cursor placement routines and color manipulators to generate a full screen text editor. The video mode is set with <I>setvmode()</I>, and the cursor is addressed with <I>find_cursor(), get_cursor()</I><I>,</I> and <I>set_cursor()</I>. Text can be output in color with <I>colorchr()</I> or <I>colorstr()</I>, if desired, and borders/backgrounds can be determined with <I>border()</I> for frame color and <I>cls_c()</I> to clear the screen to a specific color. Video paging is possible with <I>getvpage()</I> and <I>setvpage()</I>, if needed. It is up to the individual programmer to create his or her own algorithms for such things as word insertion, line counting, and block moves.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The author offers a number of utility functions for tweaking strings. He includes some not-so-unusual character manipulation functions such as <I>strdelcn()</I> to delete <I>n</I> occurrences of a character and <I>strdigit()</I> to display a string as digits. But there are also some less typical tools such as the <I>strdollar()</I> routine to pass a double as a dollar string (e.g., to convert <I>12345.67</I> to <I>$12,345.67</I>), and <I>strsub()</I>, a masking routine to replace one string pattern with another. While these functions are rather self-evident to experienced programmers, showing some sample input and ouput would have clarified the discussion on string utilities (as it would have with subroutines in other parts of the book).</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<I>C Programmer's Toolkit</I> exhibits its "fun" side where it presents mouse functions and menuing systems. There are a dozen mouse-based subroutines, enough for the curious to determine "what makes it tick" and apply new knowledge to the handling of mouse events in more complex routines. The necessary functions are all present &#151; <I>mouse_press()</I> to ascertain whether a mouse button has been pressed; <I>mouse_counters()</I> to test for mouse movement; and <I>set_mouse()</I> to set the mouse position. The toolkit doesn't present enough information to construct a full-fledged drawing package, but by the end of the chapter, an experimenter will have gained much insight on the point-and-click and screen addressing aspects of mouse-based digitizer technology.</FONT></FONT></FONT></FONT></FONT></FONT><P>
What is conspicuously absent from the list of topics is much reference to graphics or windowing routines. However, the chapter on menuing systems more than compensates for this lack. The chapter describes sidebar and box menus and discusses data structures relevant to menuing. This is not so much a chapter of functions as one of code examples, with emphasis on highlighting (reverse video) bars and positioning selection lists.<P>
The book is presented in a clear, readable format with little clutter from page to page. On the negative side, the text could be upheld with more illustrations. This omission was acutely conspicuous in the screens, mouse and menuing discussions.<P>
The "Time and Dates" chapter is the one section of the book where most of the material is ordinary. <I>maketime()</I> and <I>timeset()</I> get and set system time, and <I>validdate()</I> checks for proper date input format. <I>Easter()</I> computes the value of the obvious, and <I>leapyear()</I> also checks for just what you'd imagine. The "Working with Numbers" chapter doesn't get too involved, emphasizing basic statistics, such as <I>Chi_square()</I> and <I>regression()</I>. There are some elementary matrix functions such as <I>put_mat()</I> to change a value in a matrix and <I>check_symmetry()</I> to check a matrix for symmetry. The remainder of the mathematics chapter is devoted to financial utilities and emphasizes the computation of compound interest.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The "Disk and Directory Control Functions" chapter becomes particularly MS-DOS specific. Certain utilities here could possibly have been more efficiently implemented through BIOS calls, but the value in this chapter lies in the principles the functions teach. There are functions to test for file size and disk capacity, and <I>killfile()</I> for file deletion. Setting file date and time, <I>sfiledate()</I> and <I>sfiletime()</I>, and some related time/date manipulators could possibly have been more appropriately placed in the "Time and Dates" chapter, but this arrangement does not detract from their usefulness.</FONT></FONT></FONT></FONT></FONT></FONT><P>
For any of its shortcomings, <I>C Programmer's Toolkit</I> is a no-nonsense, nitty-gritty kind of book. Explanations of functions accompany the code subroutines usually on the same page, and there are not paragraphs upon paragraphs of text to wade through before putting "hands on" to the functions. The author makes no pretense of offering an "all things to all programmers" book, and what is left is his collection of favorite tools, things which may have helped him understand the intricacies of the C language. And, he makes it obvious that he'd like to share the benefits of this collection with you.<P>
While not a powerful reference work, Toolkit carries a good index and arranges the functions in a logical order. Locating cross-referenced information is a simple matter , and relating functions from one part of the book to another is easy. There is no author's "pet project" that demands one-fourth to one-third of the book as an appendix. In other words, you don't buy <I>C Programmer's Toolkit</I> and spend money on hard copy of a special program you don't need. Purdum wants you to learn by example and use his utilities to write your own code. The resulting appendix &#151; if there is to be one &#151; is up to your own creativity.<P>
<I>C Programmer's Toolkit</I> is a good addition to any programmer's library for its alternate point-of-view on implementing standard programming routines. I recommend this book as a purchase for intermediate level programmers who wish to polish their skills and especially for educators who need fresh outlooks for teaching programming strategies.<P>
<I>C Programmer's Toolkit</I><br>
Jack Purdum<br>
Que Corp., 1990<br>
$39.95, 350 pages<br>
ISBN 0-88022-457-6<P>
</BLOCKQUOTE>
</BODY>
</HTML>
