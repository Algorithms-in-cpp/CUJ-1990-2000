


<HTML>
<HEAD>

<TITLE>August 1990/Evaluating Your Floating Point Library</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocaug.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">Evaluating Your Floating Point Library<A name="01C9_00FB"><A name="01C9_00FB"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="01C9_0000"><A name="01C9_0000">Gene Sheppard</font></h3><hr><blockquote><P>
<P><i><A name="01C9_0000"><A name="01C9_0000">Gene Sheppard has B.S. degrees in computer science and mathematics and is a software engineer for Solid State Systems, Inc. He has authored and designed software systems for business/inventory, graphics, and embedded systems, and has co-authored a paper on graphics which was published in the Journal of Pascal, Ada, &amp; Modula-2. You may contact Gene at 2610 Whitehaven Dr., Marietta, GA 30064 (404) 439-0146.</i></P><P>
Most numerical software is designed using a high level language compiler which in turn uses mathematical algorithms to approximate functions such as the sine and cosine functions. The operative word here is "approximate". The resulting values are the result of two different kinds of approximation: first, the hardware representation of the number is often approximate because the exact value cannot be contained in the largest variable type (e.g. 1/3 doesn't have a finite binary representation); second, the software can iterate through a potentially endless approximation algorithm only a limited number of times if the software is to achieve practical throughputs. Thus instead of returning exact values for complex functions, the math package returns values which its developer deems "close enough". Different developers, each with different audiences, reach different conclusions about how close is "close enough".<P>
Programs developed in fields such as mathematical physics, numerical analysis, and scientific programming are sensitive to small differences in precision and accuracy. In these fields an understanding of the limits of the floating point is imperative. This article will discuss topics germane to the evaluation of a system's numerical capabilities and ways to assist the reader in evaluating a floating point package.<P>
First, I will give some insight as to how a math package may estimate the transcendental functions to illustrate how problems may occur in numerical processing. Second, I will define the subtle differences between precision and accuracy. Finally, I will discuss code to evaluate the compiler's ability to handle numerical software.<P>
<h4><FONT COLOR="#000080"><A name="01C9_00FC">Trig Approximations<A name="01C9_00FC"></FONT></h4></P>
Many trig approximations are based on the Taylor series. (The series is defined in <A href="fig1a.htm">Figure 1a</a>
and expanded to show the first few terms in <A href="fig1b.htm">Figure 1b</a>.
) Notice that the series never ends, thus practical approximations based on it must be terminated after a finite number of terms have been evaluated. Herein is the problem. Not all math packages terminate at the same point, thereby giving rise to dissimilar results under different compilers.<P>
The function <I>Rn(X)</I><I> </I>&#151;<I> </I>otherwise known as Joseph Louis Lagrange's form of the remainder function &#151; is used to determine where to end the series. <I>(</I><I>X</I> is the parameter passed to the function and <I>n</I> is the number of iterations.) To estimate the sine function using the Taylor series to an accuracy of 0.00001, you would evaluate the remainder function until the result was less than 0.00001. If <I>n</I> were 10 then you would take the Taylor series out to 10 iterations to find your answer.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The developer's challenge is to evaluate only as many terms as necessary to supply the needed precision and accuracy. If he evaluates too many terms, his package will be unnecessarily slow; too few terms and the results won't be accurate or precise enough.<P>
<h4><FONT COLOR="#000080"><A name="01C9_00FD">Precision Vs. Accuracy<A name="01C9_00FD"></FONT></h4></P>
Precision refers to the number of digits used in the results of a numerical analysis and does not imply that all the digits are correct.<P>
On the other hand, "accuracy" is a measure of the correctness of each digit in the result. For example, the statement "PI = 3.14" is accurate to three places. The statement "PI = 3.139" has more precision than the first, but it is not as accurate.<P>
However<P>
<pre>"PI = 3.14159265358979323846264338327950288"</pre>
is as accurate as the first statement and has more precision than the second. Your software may format all output to 16 places, but if you don't validate the floating point routines, you'll never know how many of those digits are meaningful and how many are just spurious noise.<P>
The quality of numerical applications is also affected by the math package's dynamic range &#151; the range between the largest and smallest values the package can handle.<P>
For example, in a loop controlled by<P>
<pre>while( x &gt; TEST )</pre>
if <I>TEST</I> has a value of <I>10</I><I><SUP>-6</I></SUP> then the floating point package with which <I>x</I> is being calculated must have a dynamic range of at least <I>10</I><I><SUP>-6</I></SUP>. Otherwise the loop may never terminate.</FONT></FONT></FONT></FONT></FONT></FONT><P>
In a loop controlled by<P>
<pre>while( x ! = 0 )</pre>
the dynamic range will determine how close to zero <I>x</I> must become to terminate the loop.<P>
<h4><FONT COLOR="#000080"><A name="01C9_00FE">The Code<A name="01C9_00FE"></FONT></h4></P>
The four routines accompanying this article will provide useful information about most any math library and, with little modification, even about hardware-based floating point support. When you run the routines you should carefully inspect the results of each iteration for precision, accuracy, and gross failures.<P>
When you have identified an iteration in which the calculation is breaking down, you must then examine the contents of various variables before determining if the cause was a limitation in accuracy, precision, or dynamic range.<P>
Was the problem caused by blending precision operations by the inappropriate use of the <I>printf</I> function, or is the floating point package in error?</FONT></FONT><P>
Gross failures are perhaps the easiest to identify. Each routine will take most math packages to the their limits. If your system does not reach an error condition or overflow in 74 iterations, then expand the loop termination to a larger number.<P>
<h4>Listing 1</FONT></h4></P>
Code in <A href="list1.htm">Listing 1</a>
demonstrates the limitations of single precision. The variable <I>f</I> is single precision and the <I>printf</I> function is instructed to output in scientific notation. Everything is fine up to and including the 41st iteration in <A href="fig2.htm">Figure 2</a>,
 where things seem to go awry.</FONT></FONT></FONT></FONT><P>
It is not immediately clear if the math package is at fault. Closer inspection finds that the system's internal mechanism maintains a more precise value than can be printed. Calculators often follow the same practice; they have a limited display but maintain a much larger number inside. At the 42th iteration, the system's internal mechanism begins to manifest its limitation; this system's internal single precision has a dynamic range from <I>10e-37</I> to <I>10e+38</I>. Beginning at the 42nd iteration, garbage is produced until overflow errors begin to occur. At the 49th iteration, it can no longer handle the small numbers.</FONT></FONT><P>
<h4>Listing 2</FONT></h4></P>
Some compilers recognize the keyword <I>double</I>, but implement <I>double</I> and <I>float</I> identically. The program in <A href="list2.htm">Listing 2</a>
tests a system's double precision. The output starts with a number smaller than in <A href="list1.htm">Listing 1</a>
and the variable <I>f</I> is declared as <I>double</I>. Comparing the output from both <A href="list1.htm">Listing 1</a>
and <A href="list2.htm">Listing 2</a>
(<A href="fig2.htm">Figure 2</a>
and <A href="fig3.htm">Figure 3</a>)
 will show that this system really makes a distinction between single and double precision. In <A href="fig2.htm">Figure 2</a>
the system gives up after the 48th iteration and in <A href="fig3.htm">Figure 3</a>
the system does well on all 74 iterations.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
To find the breaking point of this system, I rewrote the loop to perform 310 iterations &#151; it broke down on the 304th iteration.<P>
<h4>Listing 3</FONT></h4></P>
<A href="list3.htm">Listing 3</a>
checks the <I>SIN</I> function for roundoff error and for subtle sensitivities to the way parameters are handled.</FONT></FONT><P>
This program is especially useful to C programmers because C wants to convert all arguments passed to the transcendental functions to <I>double</I> and roundoff error can become a problem if the programmer is not careful.</FONT></FONT><P>
In some implementations of the sine approximation, the argument is squared before the range is checked, resulting in an underflow internal to the function and garbage for a return value. This program tests whether the <I>SIN</I> function returns its argument unchanged when the argument is very close to zero. The <I>SIN</I> function should return correct values over the entire dynamic range of the floating point operations.</FONT></FONT></FONT></FONT><P>
The system used in my test seems to be in good health because both the returned value from the <I>SIN</I> function and the passed parameter do not show signs of being corrupted.</FONT></FONT><P>
<h4>Listing 4</FONT></h4></P>
This innocuous program is not as straightforward as it may seem.<P>
The program loops 25 times, computing roots of <I>x</I><I> </I>twice and assigning the product of these roots to <I>y</I>. In otherwords, <I>y</I> is theoretically identical to <I>x</I> because it is the square of <I>x'</I>s square root. The variables <I>y</I><I> </I>and <I>x</I> are checked and printed when found to be unequal.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
(Again, to avoid problems the argument must be of appropriate type. C allows the calling routine to pass arguments of a different type than is declared in the called routine.)<P>
The results, as indicated in <A href="fig5.htm">Figure 5</a>,
 are not as one might expect. Only seven of the 25 evaluations were found to be equal when using double precision variables. I evaluated this program using only single precision and found that <I>y</I> and <I>x</I> were equal.</FONT></FONT></FONT></FONT><P>
This may indicate that in my system either the square root function and/or the multiplication routines can't handle the results.<P>
<h4><FONT COLOR="#000080"><A name="01C9_0103">Perspective<A name="01C9_0103"></FONT></h4></P>
Anyone using or contemplating the development of numerical software should evaluate their system's numerical capabilities in order to gain confidence in their results. A starting point could be to adapt this code to test all of the functions in your math package. But, you should keep in mind that these tests aren't exhaustive, and that a solid math package doesn't guarantee solid results &#151; even after your math package has passed muster, your code can still introduce many subtle problems.<P>
<h4><FONT COLOR="#000080"><A name="01C9_0104">Additional Reading<A name="01C9_0104"></FONT></h4></P>
Cheney, Ward and David Kincaid. <I>Numerical Mathematics and Computing</I>. Monterey, CA: Brooks/Cole Publishing Company, 1980.<P>
<I>Encyclopedia of Computer Science</I>. New York: Van Nostrand Reinhold Company, 1976.<P>
Pachner, Jaroslav. <I>Handbook of Numerical Analysis Applications</I>. New York: McGraw-Hill, Inc., 1984.<P>
Press, William H. et al. <I>Numerical Recipes: The Art of Scientific Computing</I>. New York: Cambridge University Press, 1986.<P>
Smith, W. Allen. <I>Elementary Numerical Analysis</I>. New York: Harper &amp; Row, Publishers, 1979.<P>

<h4><a href="../../../source/1990/aug90/sheppard.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY></HTML>
