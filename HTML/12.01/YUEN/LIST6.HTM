<HTML><HEAD>
<TITLE>January 1994/Handling Time-Consuming Windows Tasks/Listing 6</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 6 <I>Member function definitions for class Cthread</I></A></h4>
<pre>#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include "cthread.hpp"

/* This module is compiler-specific. It relies on the
   structure of jmp_buf and the C function prolog and
   epilog to work properly */

/* The following definitions are for the Zortech V3.0
   C++Windows and OS/2 compilers */

#define WORDSTOREMOVE   3           //used for stack adjustment
typedef struct                      //jmp_buf map
       {
       long ip;                    //CS:IP
       short filler1;
       long sp;                    //SS:SP
       } *mapptr;

/* Used to transfer to the specified thread. The context
  of the running thread is saved in the thread object's
  private data area */
void Cthread::Transfer(Cthread &amp;thread)
{

       /* don't transfer control if the new thread's
          stack is corrupt */
       if ((thread.threadbody == NULL) ||
              (thread.threadbody-&gt;Overflowed)) return;

       /*  save old thread's context and transfer control */
       if (!setjmp(this-&gt;threadbody-&gt;Context))
              longjmp(thread.threadbody-&gt;Context, 1);

}

/* Used to create a thread object and copy a number of
   parameters to the thread's stack */
Cthread::Cthread(THDFN func, int stacksize,
              int *frame, int framesize)
{

       int i;
       mapptr ptr;

       /* allocate stack */
       stacksize /= sizeof(int);        //convert to out allocation unit
       stacksize = (stacksize &gt; THD_MAX_STACK) ? THD_MAX_STACK: stacksize;

       threadbody = (THDPTR) new char[i = (sizeof(THD) - sizeof(int) *
                    (THD_MAX_STACK - stacksize))];
       threadbody-&gt;Overflowed = 0;
       threadbody-&gt;TotalLen = i;
       if (threadbody == NULL)
              {
              printf("Thread creation failed...\n");
              }

       setjmp(threadbody-&gt;Context);  //initialize jmp_buf structure
       ptr = (mapptr) &amp;threadbody-&gt;Context;
       /* initialize stack with parameters if any */
       if (stacksize)
              {
              if ((frame != NULL) &amp;&amp; (stacksize &gt; framesize))
                     {
                     for (i = 0; i &lt; framesize; i++)
                            threadbody-&gt;Stack[stacksize - framesize + i] =
                                   *frame++;
                     stacksize -= framesize;
                     }
              //set stack pointer

              ptr -&gt;sp = (long) &amp;(threadbody-&gt;Stack[stacksize -
                      WORDSTOREMOVE]);
              }

       /* set up the start of the thread body */
       ptr-&gt;ip = (long) func;

}

/* Destructor */
Cthread::~Cthread(void)
{
       delete [threadbody-&gt;TotalLen] (char *) threadbody;
       threadbody = NULL;
}

// End of File
</pre>
</BODY>
</HTML>
