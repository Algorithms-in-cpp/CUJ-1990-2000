<HTML><HEAD>
<TITLE>January 1994/Handling Time-Consuming Windows Tasks/Listing 4</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 4<I> Member function definitions for class Csemq</I></A></h4>
<pre>#include &lt;stdlib.h&gt;
#include "csemq.hpp"

/* Constructor */
Csemq::Csemq()
{
  sem = 0L;
  priority = CSC_NO_THREAD;
}

/* Another Constructor */
Csemq::Csemq(long lValue)
{
  sem = 1Value;
  priority = CSC_NO_THREAD;
}

/* Used to return a thread for execution based on a
   round-robin-like scheduling algorithm */
int Csemq::Dequeue()
{
  int nTask = CSC_NO_THREAD;
  long task;

  long tmp;
  int i;

  if (sem &lt; 0)
    {

    //this implements a somewhat round-robin scheduling algorithm
    task = _lrotl(1, priority + 1);
    tmp = sem &amp; ~CSC_IDLE;

    /* scan the semaphore queue structure bit-by-bit */
    for (i = 0; i &lt; CSC_NO_THREAD + 1; i++)
      {
      if (task &amp; tmp)
        break;
      else
        task = _lrotl(task, 1);
      }

    sem &amp;= ~task;
    if (sem == CSC_IDLE)
      sem = 0;

    if (i &lt;= CSC_NO_THREAD)
      nTask = long (i + priority + 1) % 32L;

    }

  priority = nTask;

  return (nTask);
}

/* Used to put a thread in the semaphore queue */
void Csemq::Enqueue(int nThread)
{
  if ((nThread &lt;= CSC_NO_THREAD) || (sem &lt;= 0))
    {
    sem |= (1L &lt;&lt; nThread) | CSC_IDLE ;
    }
}

/* Used to update the semaphore count by the specified
   amount */
void Csemq::UpdateCount(long lValue)
{
  long lTmp;

  if (sem &gt;= 0)
    {
    lTmp = sem + lValue;
    if (lTmp &gt;= 0)
      sem = lTmp;
    }
}

/* Used to return an indicator to the caller telling
   it if the semaphore structure is a counter or a queue */
csemq_type Csemq::GetType()
{
  csemq_type nType = CST_COUNT;

  if (sem &lt; 0)
    nType = CST_QUEUE;

  return (nType);
}

/* Used to get the count of a semaphore */
long Csemq::GetCount()
{
  return (sem);
}

// End of File
</pre>
</BODY>
</HTML>
