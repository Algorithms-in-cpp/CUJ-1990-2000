<HTML><HEAD>
<TITLE>January 1994/A Short Floating- Point Type in C++/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2 Constructor functions and overloaded operators</A></h4>
<pre>inline sfloat::sfloat() {}

inline sfloat::sfloat( float f )
   {

   // Init conversion union
   u.f = f;

   // Get the sign
   if ( Signed )
      {
      if ( !fsfBias )
         {
         s = u.s[1];
         return;
         }
      s = (unsigned short)
           (( u.l &amp; fManSignMask ) &gt;&gt; sfBits );
      }
   else
      {
      s = 0;
      }

   // Get the exponent
   Exp = (unsigned short)
        (( u.l &amp; fExpMask ) &gt;&gt; fManBits ) -
        fsfBias;

   // Compress the exponent
   Exp = ( Exp &lt;&lt; ( sfExpShift )) &gt;&gt; sfManSignBits;

   // Get the mantissa
   Man = (unsigned short)(( u.l &amp; fManMask ) &gt;&gt;
        ( sfManShift ));

   s |= Man | Exp;

   }   // sfloat( float )

inline sfloat::sfloat( sfloat&amp; sf ) : s( sf.s ) {}

// Cast - conversion operators
inline sfloat::operator float()
   {

   // Get the sign - Init conversion union
   if ( Signed )

      {
      if ( !fsfBias )
         {j
         u.s.[1] = s;
         return ( u.f );
         }
      u.l = ( (unsigned long)
           (s &amp; sfManSignMask )) &lt;&lt; sfBits;
      }
   else
      {
      u.l = 0L;
      }

   // Get exponent
   u.l |= (unsigned long)((( s &lt;&lt; sfManSignBits ) &gt;&gt;
        fExpShift ) + fsfBias ) &lt;&lt; fManBits;

   // Get the mantisa
   u.l |= ( (unsigned long)( s &lt;&lt; fManShift1 )) &lt;&lt;
        fManShift2;

   return ( u.f );

   }   // operator(float)

// Overloaded operators

// Assigment operators
inline sfloat &amp;sfloat::operator+=( sfloat sf )
   {
   float f = (float)*this;
   f += (float)sf;
   *this = (sfloat)f;
   return ( *this );
   }   // operator+=

inline sfloat &amp;sfloat::operator-=( sfloat sf )
   {
   float f = (float)*this;
   f - = (float)sf;
   *this = (sfloat)f;
   return ( *this );
   }   // operator-=

inline sfloat &amp;sfloat::operator*=( sfloat sf )
   {
   float f = (float)*this;
   f *= (float)sf;
   *this = (sfloat)f;
   return ( *this );
   }   // operator*=

inline sfloat &amp;sfloat::operator/=( sfloat sf )
   {
   float f = (float)*this;j
   *this = (sfloat)f;
   return ( *this );
   }   // operator*=

// increment operators
inline sfloat sfloat::operator++()
   { return ( *this += 1.0f ); }

inline sfloat sfloat::operator--()
   { return ( *this - = 1.0f ); }

inline sfloat sfloat::operator++( int )
   {
   sfloat sf( *this );
   *this += 1.0f;
   return ( sf );
   }   // operator ++

inline sfloat sfloat::operator--(int )
   {
   sfloat sf( *this );
   *this - = 1.0f;
   return ( sf );
   } // operator --

// sign change operators
inline sfloat sfloat::operator+()
   { return ( *this ); }

inline sfloat sfloat::operator-()
   {
   sfloat sf( 0.0f ):
   return ( sf - *this );
   }   // operator -

// Logical operators
inline int operator==( sfloat sf1, sfloat sf2)
   { return ( sf1.s == sf2.s ); }

inline int operator&lt;=( sfloat sf1, sfloat sf2 )
   { return ( sf1.s &lt;= sf2.s ); }

inline int operator&gt;=( sfloat sf1, sfloat sf2 )
   { return ( sf1.s &gt;= sf2.s ); }

inline int operator&lt;( sfloat sf1, sfloat sf2 )
   { return ( sf1.s &lt; sf2.s ); }

inline int operator&gt;( sfloat sf1, sfloat sf2 )
   { return ( sf1.s &gt; sf2.s ); }

inline int operator!=( sfloat sf1, sfloat sf2 )
   { return ( !( sf1.s == sf2.s )); }j
// math operations
inline sfloat operator+( sfloat sf1, sfloat sf2 )
   { return ( sf1 += sf2 ); }

inline sfloat operator-( sfloat sf1, sfloat sf2 )
   { return ( sf1 - = sf2 ); }

inline sfloat operator*( sfloat sf1, sfloat sf2 )
   { return ( sf1 *= sf2 ); }

inline sfloat operator/( sfloat sf1, sfloat sf2 )
   { return ( sf1 /= sf2 ); }

// End of SFLOAT.INL
</pre>
</BODY>
</HTML>
