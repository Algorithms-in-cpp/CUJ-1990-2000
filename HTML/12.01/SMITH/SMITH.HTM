

<HTML>
<HEAD>

<TITLE>January 1994/A Short Floating- Point Type in C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjan.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Portability</FONT></H2>

<hr><h2 align="center"><font color="#800000">A Short Floating- Point Type in C++<A name="001C_0003"><A name="001C_0003"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="001C_0000"><A name="001C_0000">William Smith</font></h3><hr><blockquote><P>
<P><i><A name="001C_0000"><A name="001C_0000">William Smith is the engineering manager at Montana Software, a software development company specializing in custom applications for<I></I> <I></I>MS- DOS and Windows. You may contact him by mail at P.O. Box 663, Bozeman, MT 59771- 0663.</i></P><P>
<h4><FONT COLOR="#000080"><A name="001C_0004">Introduction<A name="001C_0004"></FONT></h4></P>
Even though a typical microcomputer can have up to ten times the memory of one just a few years ago, there are still programming problems where memory is a limiting factor. I frequently bump into memory limitations in embedded and data acquisition applications. Numerous times I have had to work with a large quantity of floating- point numbers in a confining space. A common situation is the acquisition of large amounts of data through a 14- bit (or smaller) A- to- D (Analog to Digital) converter.<P>
Storing these numbers as 32-bit <I>floats</I> always seemed like overkill to me and a waste of space. This was especially annoying when I had to store tens of thousands of points in an array and would hit some kind of a memory limitation such as a segment boundary, physical memory limit, or even a file or disk size limit. The standard <I>float</I> type works, but it represents a poor match to the problem to be solved. Matching the floating- point size to what an application needs can result in significant memory savings in data- intensive programs.<P>
I really only needed a 16-bit floating- point type instead of the native 32-bit <I>float.</I> At first, I played some games and stored the data as <I>short int.</I> But this forced me to convert the data to <I>float</I> to do anything useful with it. I wanted a short floating-point type. I even implemented one, albeit crudely, in C. C allowed me to do it, but the conversion process never was clean or transparent. With C++, I was finally able to do what I wanted. I was able to create a short floating-point type that I could use naturally in my applications. C++ can hide all the dirty work, such as conversions.<P>
The new type, which I call <I>sfloat,</I> even allowed me to control range and precision. Some situations called for a floating-point type that ranged between 0 and 10.0 and maximized the precision within that range. Other situations required a larger signed range but less precision. Being able to tailor the characteristics of the type to meet an application's needs was a practical feature I built into <I>sfloat</I>,<P>
I implemented the <I>sfloat</I> type in "Standard C++" (if there is such a beast). The code works with Microsoft C++ and Borland C++ under MS-DOS and MS-Windows. It has some dependencies on the size of the standard types <I>float, unsigned short int</I>, and <I>long</I>. It assumes that:<P>
<UL><li>a <I>float</I> is 32 bits</li>
<li>an <I>unsigned short int</I> is 16 bits</li>
<li>a <I>long</I> is 32 bits</li></UL>
It also assumes that the <I>float</I> type is that defined by the IEEE standard for 32-bit floating-point values. <A href="tab1.htm">Table 1</a>
gives the IEEE details. As long as a compiler and operating system conform to these restrictions, the code for <I>sfloat</I> will probably work in other environments.<P>
<h4><FONT COLOR="#000080"><A name="001C_0005">Implementation<A name="001C_0005"></FONT></h4></P>
<A href="list1.htm">Listing 1</a>,
 <I>sfloat.hpp</I>, defines a C++ class called <I>sfloat</I>. The class has numerous private static members, one protected member and numerous public member functions. There are even some non-member functions prototyped in sfloat.hpp.<P>
The static data provides a workspace for conversion between <I>sfloat</I> and <I>float</I>. This static data is class specific. All instances, or objects, of class <I>sfloat</I> share the same static data. The protected member <I>s</I> is the only object instance data. This member is unique to each instance of <I>sfloat</I>. In fact, the <I>sizeof</I> operator will report the size of <I>sfloat</I> to be the size of this member, 2 bytes.<P>
<h4><FONT COLOR="#000080"><A name="001C_0006">Constructors<A name="001C_0006"></FONT></h4></P>
One of the most elemental functions for a C++ class is the constructor. A constructor has the same function name as for the class. Furthermore, you can overload the constructor to provide construction from (conversion from) different types. The <I>sfloat</I> class has three constructors.<P>
<pre>sfloat();
sfloat(float f);
sfloat(sfloat&amp; sf);</pre>
<I>sfloat()</I> defines the "default" construction of an <I>sfloat</I> object, such as on the stack. The compiler would generate this function automatically if you do not specify it. <I>sfloat(float f)</I> converts a floating-point number to an <I>sfloat</I> to initalize the stored value. <I>sfloat(sfloat&amp; sf</I>) initializes the new object by making a copy of another <I>sfloat</I> object. These three constructors provide the functionality needed to support the following declarations using sfloat.<P>
<pre>sfloat sf1;
                // uses sfloat();
sfloat sf2 = 1.0f;
          // uses sfloat(float f);
sfloat sf3 = sf2;
        // uses sfloat(sfloat&amp; sf);</pre>
These three types of construction and initialization cover the minimum required to use <I>sfloat</I> type naturally. The code for the constructor functions resides in <A href="list2.htm">Listing 2</a>,
 <I>sfloat.inl. sfloat()</I> and <I>sfloat(sfloat&amp; sf)</I> are very simple. On the other hand, <I>sfloat(float f)</I> has to do a bit of work. It has to convert a <I>float</I> to an <I>unsigned short</I> and assign it to the object instance data member <I>s</I>.<P>
The conversion process used in <I>sfloat(float f)</I> truncates the mantissa bits to a lower precision. It also lowers the range of the exponent by discarding higher-order bits. The conversion process utilizes some of the static data members of class <I>sfloat</I> as a work space and to hold intermediate values. The bitwise shift operators &lt;&lt; and &gt;&gt; move the bits that will be kept from the <I>float</I> value into place before they are packed into an <I>unsigned short.</I><P>
Since none of the constructor functions allocate memory on the heap (free store) using <I>new</I> there is no need to define a destructor function. C++ will provide a default destructor that does nothing.<P>
<h4><FONT COLOR="#000080"><A name="001C_0007">Conversion to <B><I>float</I><A name="001C_0007"></B></FONT></h4></P>
We also need a way to convert an <I>sfloat</I> object to a <I>float</I>. To use conventional notation, we need to define the operator function<P>
<pre>sfloat::operator float()</pre>
<A href="list2.htm">Listing 2</a>,
 <I>sfloat. inl</I>, contains the definition of this function. You will notice that it's logic is just the reverse of <I>sfloat:: sfloat(float f)</I>. The shift operators once again move the bits of the <I>sfloat</I> into the proper locations in the 32 bits of a <I>float</I>. The extra bits are filled with zeros.<P>
<h4><FONT COLOR="#000080"><A name="001C_0008">Overloaded Operators<A name="001C_0008"></FONT></h4></P>
Operator overloading is one of the features of C++ that allow you to use new defined types just like the standard existing types. Operator overloading is not so much an object-oriented feature as a convenience. <A href="tab2.htm">Table 2</a>,
 an extract from <A href="list1.htm">Listing 1</a>,
 lists the operator functions defined for <I>sfloat</I>. This list includes all the operators that one commonly uses on floating-point numbers. These operator functions allow you to use objects of the class <I>sfloat</I> just like you would a standard floating-point type.<P>
Operator overloading is fairly straight-forward feature of C++ and covered well elsewhere. I recommend the "Stepping Up To C++" series of articles on "Operator Overloading" by Dan Saks (see <I>CUJ</I> January, March, May, and July 1992). I took a very simple approach to implementing these operators. I convert to <I>float,</I> use the predefined operations, then convert back to <I>sfloat.</I> For example, here is the code for the add-assignment operator:<P>
<pre>inline sfloat &amp;sfloat::
              operator+=(sfloat sf)
     {
     float f = (float)*this;
     f += (float)sf;
     *this = (sfloat)f;
     return ( *this );
     }    // operator+=</pre>
This techniques is not the most efficient (it has to do three type conversions), but it sure is simple. My needs for the <I>sfloat</I> type were data-size driven, not code-speed or code-size driven. Consequently I can live with the overhead of all those conversions. If you cannot, you could rewrite some of these routines to operate directly on the <I>sfloat</I> type.<P>
I would like to emphasize that you can get trapped into inefficiency with operator overloading. If you are not careful, your operator overloading can force unneeded object construction and destruction, especially for the operators <I>+, - , *</I>, and /. One trick to avoid this is to use the corresponding assignment operators (such as +=) with a reference return type to define the other math operators. This technique results in the interesting side effect that the operators <I>+, - , *</I>, and / are neither member or friend functions.<P>
<h4><FONT COLOR="#000080"><A name="001C_0009">Inlining<A name="001C_0009"></FONT></h4></P>
In implementing the <I>sfloat</I> class, I choose to inline the overloaded operator functions and the conversion functions. Inlining a function means that its code gets inserted into your compiled program each time the function is called. This can cause your program to bloat in size unexpectedly. If you find this happening, I recommend you do not inline at least the two conversion functions <I>sfloat::sfloat(float f)</I> and <I>sfloat::operator float()</I>. Both are fairly long. But experiment first. To discontinue inlining for a function, remove the inline modifier from its function definition and move the definition from the file <I>sfloat. inl</I>, (<A href="list2.htm">Listing 2</a>)
 to <I>sfloat.cpp</I> (<A href="list3.htm">Listing 3</a>)
.<P>
Some of operator functions are very short. You may wonder why I did not include their definitions with the class definition in the file <I>sfloat.hpp</I>. Instead I grouped all the inline functions in the file <I>sfloat. inl</I>. This is not quite standard, but I have to agree with Walter Bright, one of the C++ compiler pioneers. Inline function bodies appearing in the class body clutters the class definition (C++ <I>Report</I> October 1992).<P>
Including inline functions with the class definition also violates the separation of the implementation of a class function members from the class definition. For maintenance purposes, it is a good technique to isolate the two. The class definition is the class interface and should change less than the member function implementation.<P>
<h4><FONT COLOR="#000080"><A name="001C_000A">Controlling Range and Precision<A name="001C_000A"></FONT></h4></P>
The function <I>sfloatrange,</I> <A href="list3.htm">Listing 3</a>
(<I>slfoat.cpp</I>), provides a way to adjust the range, signedness, and precision of the <I>sfloat</I> type:<P>
<pre>friend void sfloatrange(
   unsigned short sfNumExpBits,
   unsigned short sfSigned);</pre>
The first parameter is the number of exponent bits. This can be any number from 1 to 8. The higher the number the larger the range of values that sfloat can represent. Eight bits is the same as for the standard <I>float</I> type. <A href="tab3.htm">Table 3</a>
shows the maximum value that <I>sfloat</I> can represent for each of the possible numbers of exponent bits.<P>
The second parameter determines whether or not <I>sfloat</I> is a signed value. If the value is signed, <I>sfloat</I> reserves one of its bits as a sign bit. The number of mantissa bits is the remaining bits out of 16 not used by the exponent or the sign. That number can range from a minimum of seven to a maximum of 15:<P>
<UL><li>The minimum of 7 results from specifying eight exponent bits and designating <I>sfloat</I> as signed.</li>
<li>The maximum of 15 results from specifying one exponent bit and designating <I>sfloat</I> as unsigned.</li></UL>
<A href="tab4.htm">Table 4</a>
lists all the possible numbers of mantissa bits and the corresponding (minimum) number of significant decimal digits.<P>
I have encountered a requirement to have an unsigned floating-point representation that needs only four significant digits and a range of four orders of magnitude (0 to 104). A combination of 11 mantissa bits, five exponent bits and no sign bit worked fine.<P>
The defaults, if you do not call <I>sfloatrange</I>, are eight exponent bits, a sign bit, and seven mantissa bits. This yields the same range as the standard <I>float</I>, but with much less precision. These values make the conversions between <I>sfloat</I> and <I>float</I> particularly easy. You can just use a union of a <I>float</I> and two <I>unsigned shorts</I>. To convert from a <I>float</I>, just store in the <I>float</I> member of the union and extract the second unsigned short. To convert from an <I>sfloat</I>, you reverse the process. Notice that the conversion functions do this for the special default range situation.<P>
There are limitations with range setting. The <I>sfloat</I> class uses static data to preserve the range information. This prevents you from tailoring the range individually for each instance (object) of the class. In other words, once you set the range, all <I>sfloat</I> objects have the same range. You could have each instance retain information about the number of exponent, mantissa, and sign bits, but this would require each object to store information about range and defeat the desire to save space. Use of static data also helps to speed up conversions.<P>
Use of static data to store the range information has repercussions in multitasking or multithreaded environments. Static data prevents the code for <I>sfloat</I> from being re-entrant. You cannot preserve different range information between tasks if the tasks are sharing the same code such as a Windows DLL (Dynamic Link Library).<P>
To keep <I>sfloat</I> small and make it re-entrant would require eliminating the size adjustability. This would force you to create a different class for each of the different range combinations used. Some real time or multitasking situations may demand you eliminate the range adjustability.<P>
<h4><FONT COLOR="#000080"><A name="001C_000B">Conclusions<A name="001C_000B"></FONT></h4></P>
Some of the basic features of C++ make the solution to specific problems elegant and easy compared to C. I have presented a short floating-point type <I>sfloat</I> that utilizes operator overloading for notational convenience. You can easily integrate this new type into your C++ applications. The <I>sfloat</I> type is a 16-bit (two-byte) floating-point representation that you can use instead of the standard four-byte <I>float</I>.<P>
The <I>sfloat</I> type has appeal in applications that need only 16 bits for a floating-point type and require the storage of large amount of data. If you have particular requirements on range, precision, and signedness, you can tailor this type to best match your needs. In this way, you can get as many as five significant decimal digits (only one less than the standard float) in the range 0.0 to 2.0. You can also trade precision for range to get the same range as the standard <I>float</I> but with only three significant digits.<P>

<h4><a href="../../../source/1994/jan94/smith.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
