<HTML><HEAD>
<TITLE>January 1994/Code Capsules/Listing 9</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 9 <I>Implementation of sets of integers</I></A></h4>
<pre>#if !defined(INTSET_H)
#define INTSET_H

#include &lt;iostream.h&gt;
#include &lt;stddef.h&gt;
#include "bits.h"

template&lt;size_t N&gt;
class Intset
{
public:

   // NOTE: The following constructors shouldn't be
   // necessary. The compiler-generated ones should
   // suffice. For some reason, Borland 3.1 requires
   // these (WATCOM does not).

   // Constructors
   Intset();
   Intset(const lntset&lt;N&gt;&amp; is);

   // Set operations
   Intset&lt;N&gt; operator-(const Intset&lt;N&gt;&amp; is) const;
   Intset&lt;N&gt; operator+(const Intset&lt;N&gt;&amp; is) const;
   Intset&lt;N&gt; operator*(const Intset&lt;N&gt;&amp; is) const;
   Intset&lt;N&gt; operator~() const;
   int operator==(const Intset&lt;N&gt;&amp; is) const;
   int operator!=(const Intset&lt;N&gt;&amp; is) const;
   int operator&lt;=(const Intset&lt;N&gt;&amp; is) const;
   int operator&gt;=(const Intset&lt;N&gt;&amp; is) const;

   // Member operations
   int contains(size_t n) const;
   Intset&lt;N&gt;&amp; insert(size_t n);
   Intset&lt;N&gt;&amp; remove(size_t n);

   size_t count() const;
   friend ostream&amp; operator&lt;&lt;(ostream&amp; os, const Intset&lt;N&gt;&amp; is)
     {is.print(os); return os;}

private:
   bits&lt;N&gt; bitset;

   int subsetof(const Intset&lt;N&gt;&amp; is) const;
   void print(ostream&amp; os) const;
};

template&lt;size_t N&gt;
Intset&lt;N&gt;::Intset()
{
   bitset.reset();
}

template&lt;size_t N&gt;
Intset&lt;N&gt;::Intset(const Intset&lt;N&gt;&amp; is)
{
   bitset = is.bitset;
}

template&lt;size_t N&gt;
inline Intset&lt;N&gt; Intset&lt;N&gt;::operator-(const Intset&lt;N&gt; &amp;is) const
{
   Intset&lt;N&gt; r(*this);
   r.bitset &amp;= ~is.bitset;
   return r;
}

template&lt;size_t N&gt;
inline Intset&lt;N&gt; Intset&lt;N&gt;::operator+(const Intset&lt;N&gt; &amp;is) const
{
   Intset&lt;N&gt; r(*this);
   r.bitset |=is.bitset;
   return r;
}

template&lt;size_t N&gt;
inline Intset&lt;N&gt; Intset&lt;N&gt;::operator*(const Intset&lt;N&gt; &amp;is) const
{
   Intset&lt;N&gt; r(*this);
   r.bitset&amp; = is.bitset;
   return r;
}

template&lt;size_t N&gt;
inline Intset&lt;N&gt; Intset&lt;N&gt;::operator~() const
{
   Intset&lt;N&gt; r(*this);
   r.bitset.toggle();
   return r;
}

template&lt;size_t N&gt;
inline int Intset&lt;N&gt;::operator==(const Intset&lt;N&gt; &amp;is) const
{
   return bitset == is.bitset;
}

template&lt;size_t N&gt;
inline int Intset&lt;N&gt;::operator!=(const Intset&lt;N&gt; &amp;is) const
{
   return bitset != is.bitset;
}

template&lt;size_t N&gt;
inline int Intset&lt;N&gt;::operator&lt;=(const Intset&lt;N&gt; &amp;is) const
{
   return subsetof(is);
}

template&lt;size_t N&gt;
inline int Intset&lt;N&gt;::operator&gt;=(const Intset&lt;N&gt; &amp;is) const
{
   return is.subsetof(*this);
}

template&lt;size_t N&gt;
inline int Intset&lt;N&gt;::contains(size_t n) const
{
   return bitset.test(n);
}

template&lt;size_t N&gt;
inline Intset&lt;N&gt;&amp; Intset&lt;N&gt;::insert(size_t n)
{
   bitset.set(n);
   return *this;
}

template&lt;size_t N&gt;
inline Intset&lt;N&gt;&amp; Intset&lt;N&gt;::remove(size_t n)
{
   bitset.reset(n);
   return *this;
}

template&lt;size_t N&gt;
inline size_t Intset&lt;N&gt;::count() const
{

   return bitset.count();
}

template&lt;size_t N&gt;
inline int Intset&lt;N&gt;::subsetof(const Intset&lt;N&gt;&amp; is) const
{
   bits&lt;N&gt; r(bitset);
   r &amp;= is.bitset;
   return bitset == r;
}

template&lt;size_t N&gt;
void Intset&lt;N&gt;::print(ostream&amp; os) const
{
   os &lt;&lt; '{';
   int first_time = 1;
   for (int i = 0; i &lt; N;++i)
      if (bitset.test(i))
      {
          if (!first_time)
             os &lt;&lt; ',';
          os &lt;&lt; i;
          first_time = 0;
      }
   os&lt;&lt;'}';
}

#endif

/* End of File */
</pre>
</BODY>
</HTML>
