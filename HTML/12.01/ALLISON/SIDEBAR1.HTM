<HTML><HEAD>
<TITLE>January 1994/Code Capsules/Sidebar</TITLE></HEAD><BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h3 align="center"><FONT FACE="Garamond" COLOR="#000080">Function Templates</FONT></h3><hr>
<BLOCKQUOTE>
Consider the <I>swap</I> function<P>
<pre>void swap(int&amp; x, int&amp; y)
{
    int temp = x;
    x = y;
    temp = y;
}</pre>
This works only for integer arguments. You need a different version of <I>swap</I> for each data type for which you want to swap elements. If you inspect the version for <I>doubles</I>:<P>
<pre>void swap(double&amp; x, double&amp; y)
{
   double temp = x;
   x = y;
   temp = y;
}</pre>
you'll notice that the only change was to substitute <I>double</I> for <I>int</I> in the text. This suggests a macro solution, with the data type as a parameter:<P>
<pre>// genswap.h
#define genswap(T) void swap(T&amp; x, T&amp; y) \
{                                        \
   T temp = x;                           \
   x = y;                                \
   y = temp;                             \
}</pre>
To generate different versions of <I>swap</I>, call <I>genswap</I> as needed:<P>
<pre>#include &lt;iostream.h&gt;
#include "genswap.h"

genswap(int)    // Awkward syntax,
genswap(double) // I'll admit.

main()
{
    int i = 1, j = 2;
    double x = 1.1, y = 2.2;
    swap(i,j);
    swap(x,y);
    cout &lt;&lt; i &lt;&lt; ',' &lt;&lt; j &lt;&lt; endl; // 2,1
    cout &lt;&lt; x &lt;&lt; ',' &lt;&lt; y &lt;&lt; endl; // 2.2,1.1
    return 0;
}</pre>
This has the advantage of allowing you to specify the function logic only once.<P>
A function template is much the same as the <I>genswap</I> macro, except that you don't have to explicitly generate the functions you need. After seeing the template definition<P>
<pre>template&lt;class T&gt;
void swap(T&amp; x, T&amp; y)
{
    T temp = x;
    x = y;
    y = temp;
}</pre>
the compiler automatically generates versions as needed when it finds a call to <I>swap</I>. (See <A href="list1.htm">Listing 1</a>.
) You can use any type, including built-ins, for the template argument.<P>
<h4>Class Templates</FONT></h4></P>
You can also parameterize class definitions. A good candidate is a stack, since the logic of stack operations is the same no matter what type the stack elements are. <A href="list2.htm">Listing 2</a>
and <A href="list3.htm">Listing 3</a>
have the definition of an integer stack class. To templatize this class, precede the class definition with the line<P>
<pre>template&lt;class T&gt;</pre>
as before, and change all occurrences of <I>int</I> that refer to the type of elements on the stack to <I>T</I> (see <A href="list4.htm">Listing 4</a>)
. You instantiate a specific stack class like this:<P>
<pre>Stack&lt;int&gt; s1(5);</pre>
The type of <I>s1</I> is <I>Stack&lt;int</I>&gt; ("stack of <I>int</I>"). The token <I>Stack</I> cannot appear unqualified outside of the class template definition. See <A href="list5.htm">Listing 5</a>
for an example of using <I>Stack</I> template classes. (Point of Terminology: A "class template" is the original template definition. A "template class" is a particular class instantiated from the class template, such as <I>Stack&lt;int&gt;.)</I><P>
Note that there is no separate <I>stack2.cpp</I> file. My compilers (Borland 3.1 and WATCOM 9.5) require the entire class implementation to be visible during compilation, so everything is in an <I>include</I> file.<P>
A class template can also have value parameters. The <I>bits</I> class in this article is a good example:<P>
<pre>template&lt;size_t N&gt;
class bits
{
     //...
};</pre>
The value for <I>N</I> must be a constant expression when instantiated:<P>
<pre>bits&lt;16&gt;b1;   // ok
const size_t n = 32;
bits&lt;n&gt; b2;   // ok
size_t m = 64;
bits&lt;m&gt; b3;   // nope - m not const</pre>
Since the specific values of <I>N</I> in a program are known at compile time, the array inside a <I>bits&lt;N&gt;</I> object can be placed on the stack, thus avoiding the need for dynamic memory management.<P>
A disadvantage of value parameters occurs with <I>friend</I> functions. Consider the <I>friend</I> function <I>operator&amp;</I> defined in the <I>bits</I> class. To define this outside of the class definition itself, you would have to write:<P>
<pre>template&lt;size_t N&gt;
bits&lt;N&gt; operator&amp;(const bits&lt;N&gt;&amp; b1, const bits&lt;N&gt;&amp; b2)
{
     //...
}</pre>
Since this is not a member function, the compiler recognizes it as a function template definition. Under the current definition of the language, global function templates can only have type arguments (e.g., class <I>T</I>), because a compiler uses overloading rules to resolve them. That's why I had to fully define all friends inside of the <I>bits&lt;N&gt;</I> class template definition. The joint C++ standards committee voted in November to allow out-of-line definitions of friend functions for class templates.<P>
</BLOCKQUOTE>
</BODY>
</HTML>
