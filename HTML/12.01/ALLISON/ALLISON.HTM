

<HTML>
<HEAD>

<TITLE>January 1994/Code Capsules</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjan.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Code Capsules<A name="0039_0011"><A name="0039_0011"></font></h2><P>
<h3 align="center"><A name="0039_0000"><A name="0039_0000">Bit Handling in C++, Part 2</h3><P>
<h3 align="center"><font color="#800000">Chuck Allison</font></h3><hr><blockquote><P>
<P><i><A name="0039_0000"><A name="0039_0000">Chuck Allison is a regular columnist with <I><B>CUJ</B></I> and a software architect for the Family History Department of the Church of Jesus Christ of Latter Day Saints Church Headquarters in Salt Lake City. He has a B.S. and M.S. in mathematics, has been programming since 1975, and has been teaching and developing in C since 1984. His current interest is object-oriented technology and education. He is a member of X3J16, the <I><B>ANSI C++</B></I> Standards Committee. Chuck can be reached on the Internet at allison@decus.org, or at (801)240-4510.</i></P><P>
<h4><FONT COLOR="#000080"><A name="0039_0012">The <B><I>bits</I></B> Class Template<A name="0039_0012"></FONT></h4></P>
The standard C++ library has two classes for bit manipulation: <I>bitstring</I> and <I>bits</I>. Last month I discussed the <I>bitstring</I> class, which defines objects that behave like an array of bits that expands or contracts according to your needs. This month's installment explains the <I>bits</I> class, an abstraction which extends C's bitwise semantics by allowing easy access to bits, by allowing an arbitrary (but fixed) number of bits in a bitset, and by adding important new functionality. Following last month's format, I present here an excerpt from the official proposal accepted by the standards committee, a working implementation, and examples of how to use the class.<P>
Class <I>bits</I> accommodates a fixed-length collection of bits. You can think of a <I>bits</I> object as an arbitrarily large unsigned integer. It is actually a class template, with the number of bits in the collection as the template parameter. (See the sidebar <a href="sidebar1.htm">"Templates in a Nutshell."</a>) It is highly suitable for interfacting with the host operating system, and is designed for efficiency. (It can be stack-based.) Here's a sample program run on a machine with 16-bit integers:<P>
<pre>// tbits.cpp:
// Set some bits and display the result
#include &lt;iostream.h&gt;
#include &lt;stddef. h&gt;
#include &lt;limits.h&gt;
#include "bits.h"

main()
{

const size_t SIZE = CHAR_BIT * sizeof(int);
bits&lt;SIZE&gt; flags;
enum open_mode {in, out, ate, app, trunc, binary};
              
flags.set(in);
flags.set(binary);
cout &lt;&lt; "flags:" &lt;&lt; flags &lt;&lt;" (0x" &lt;&lt; hex &lt;&lt; flags.to_ushort() &lt;&lt; ")\n";
cout &lt;&lt; "binary?" &lt;&lt; (flags.test(binary) ? "yes" : "no") &lt;&lt; endl;
return 0;
}

Output
flags: 0000000000100001 (0x21)
binary? yes</pre>
<h4><FONT COLOR="#000080"><A name="0039_0013">Member Function Descriptions<A name="0039_0013"></FONT></h4></P>
This section is a modified excerpt from the official proposal which describes the semantics of each member function. For a quick look at the class interface, see <A href="list6.htm">Listing 6</a>.
 Since the library group of the joint C++ standards committee is still deciding how to integrate exceptions into the standard library, I just mention them briefly here. The names and uses of exceptions are subject to change. I use <I>asserts</I> in place of exceptions in the implementation (see <A href="list7.htm">Listing 7</a>)
.<P>
<h4><FONT COLOR="#000080"><A name="0039_0014">1.0 Constructors<A name="0039_0014"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0039_0015">Synopsis<A name="0039_0015"></FONT></h4></P>
<pre><I>bits()</I>
<I>bits(unsigned long n)</I>
<I>bits(const string&amp; s)</I>
<I>bits(const bits&lt;N&gt;&amp; b)</I></pre>
<h4><FONT COLOR="#000080"><A name="0039_0016">1.1 Constructor <B><I>bits()</I><A name="0039_0016"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0039_0017">Description<A name="0039_0017"></FONT></h4></P>
Initializes all bits to zero.<P>
<h4><FONT COLOR="#000080"><A name="0039_0018">1.2 Constructor <B><I>bits(unsigned long n)</I><A name="0039_0018"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0039_0019">Description<A name="0039_0019"></FONT></h4></P>
Initializes the object with the <I>bits of n. If N &gt;sizeof(unsigned long) * CHAR_BIT</I>, sets the extra bits to zero.<P>
<h4><FONT COLOR="#000080"><A name="0039_001A">1.3 Constructor <B><I>bits(const string&amp; s</I></B>)<A name="0039_001A"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0039_001B">Description<A name="0039_001B"></FONT></h4></P>
Each character of <I>s</I> is interpreted as a bit (a string of <I>1</I>s and <I>0</I>s is expected). In typical integral fashion, treats the last (right-most) character of <I>s</I> as <I>bit 0</I>.<P>
<h4><FONT COLOR="#000080"><A name="0039_001C">Exceptions<A name="0039_001C"></FONT></h4></P>
Throws <I>invalid_argument</I> if a character other than <I>1</I> or <I>0</I> is encountered.<P>
<h4><FONT COLOR="#000080"><A name="0039_001D">1.4 Constructor <B><I>bits(const bits&lt;N&gt;&amp; b)</I><A name="0039_001D"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0039_001E">Description<A name="0039_001E"></FONT></h4></P>
Standard <I>copy</I> constructor.<P>
<h4><FONT COLOR="#000080"><A name="0039_001F">2.0 Destructor<A name="0039_001F"></FONT></h4></P>
No destructor required.<P>
<h4><FONT COLOR="#000080"><A name="0039_0020">3.0 Other Member Functions<A name="0039_0020"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0039_0021">3.1 Function <B><I>unsigned short to_ushort() const</I><A name="0039_0021"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0039_0022">Description<A name="0039_0022"></FONT></h4></P>
Converts the <I>n</I> least significant bits of <I>*this</I> (where <I>n == sizeof(unsigned short) * CHAR_BIT</I>) to an unsigned <I>short</I>. This is useful when the bits represent flags in a word passed to the operating system.<P>
<h4><FONT COLOR="#000080"><A name="0039_0023">Exceptions<A name="0039_0023"></FONT></h4></P>
Throws <I>overflow</I> if <I>N</I> &gt; <I>n</I> and any of the bits above position <I>n-1</I> are set.<P>
<h4><FONT COLOR="#000080"><A name="0039_0024">3.2 Function <B><I>unsigned long to_ulong() const</I><A name="0039_0024"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0039_0025">Description<A name="0039_0025"></FONT></h4></P>
Converts the <I>n</I> least significant bits of <I>*this</I> (where <I>n == sizeof(unsigned long) * CHAR_BIT</I>) to an unsigned <I>long</I>.<P>
<h4><FONT COLOR="#000080"><A name="0039_0026">Exceptions<A name="0039_0026"></FONT></h4></P>
Throws <I>overflow</I> if <I>N &gt; n</I> and any of the bits above position <I>n-1</I> are set.<P>
<h4><FONT COLOR="#000080"><A name="0039_0027">3.3 Function <B><I>string to_string() const</I><A name="0039_0027"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0039_0028">Description<A name="0039_0028"></FONT></h4></P>
Creates a string of <I>1</I>s and <I>0</I>s representing the contents of <I>*this</I>. As with unsigned integers, treats the last character as bit <I>0</I>.<P>
<h4><FONT COLOR="#000080"><A name="0039_0029">Returns<A name="0039_0029"></FONT></h4></P>
The temporary string of <I>1</I>s and <I>0</I>s.<P>
<h4><FONT COLOR="#000080"><A name="0039_002A">3.4 Function <B><I>bits&lt;N&gt;&amp; operator:(const bits&lt;N&gt;&amp; b)</I><A name="0039_002A"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0039_002B">Description<A name="0039_002B"></FONT></h4></P>
Standard assignment operator.<P>
<h4><FONT COLOR="#000080"><A name="0039_002C">Returns<A name="0039_002C"></FONT></h4></P>
A reference to <I>*this</I>.<P>
<h4><FONT COLOR="#000080"><A name="0039_002D">3.5 Function <B><I>int operator==(const bits&lt;N&gt;&amp; b) const</I><A name="0039_002D"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0039_002E">Description<A name="0039_002E"></FONT></h4></P>
Compares <I>*this</I> to <I>b</I> for equality. Two bitsets are equal if and only if their bit patterns are identical.<P>
<h4><FONT COLOR="#000080"><A name="0039_002F">Returns<A name="0039_002F"></FONT></h4></P>
Non-zero if the bitsets are equal, zero otherwise.<P>
<h4><FONT COLOR="#000080"><A name="0039_0030">3.6 Function <B><I>int operator!=(const bits&lt;N&gt;&amp; b) const</I><A name="0039_0030"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0039_0031">Description<A name="0039_0031"></FONT></h4></P>
Compares <I>*this</I> to <I>b</I> for inequality. Equivalent to <I>!operator==()</I>.<P>
<h4><FONT COLOR="#000080"><A name="0039_0032">Returns<A name="0039_0032"></FONT></h4></P>
Zero if the bitsets are equal, non-zero otherwise.<P>
<h4><FONT COLOR="#000080"><A name="0039_0033">3.7 Functions <B><I>set<A name="0039_0033"></B></I></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0039_0034">Synopsis<A name="0039_0034"></FONT></h4></P>
<pre><I>bits&lt;N&gt;&amp; set(size_t n, int val = 1)</I>
<I>bits&lt;N&gt;&amp; set()</I></pre>
<h4><FONT COLOR="#000080"><A name="0039_0035">Description<A name="0039_0035"></FONT></h4></P>
These functions set one or more bits. The function <I>set(size_t, int)</I> can reset a bit, depending on <I>val</I>.<P>
<h4><FONT COLOR="#000080"><A name="0039_0036">3.7.1 Function <B><I>bits&lt;N&gt;&amp; set[size_t n, int val)</I><A name="0039_0036"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0039_0037">Description<A name="0039_0037"></FONT></h4></P>
Sets the <I>nth</I> bit if <I>val</I> is non-zero, otherwise resets the bit.<P>
<h4><FONT COLOR="#000080"><A name="0039_0038">Returns<A name="0039_0038"></FONT></h4></P>
A reference to <I>*this</I>.<P>
<h4><FONT COLOR="#000080"><A name="0039_0039">Exceptions<A name="0039_0039"></FONT></h4></P>
Throws <I>out_of_range</I> if <I>n</I> is not in <I>[0,N-1]</I>.<P>
<h4><FONT COLOR="#000080"><A name="0039_003A">3.7.2 Function <B><I>bits&lt;N&gt;&amp; set()</I><A name="0039_003A"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0039_003B">Description<A name="0039_003B"></FONT></h4></P>
Sets all bits.<P>
<h4><FONT COLOR="#000080"><A name="0039_003C">Returns<A name="0039_003C"></FONT></h4></P>
A reference to <I>*this</I>.<P>
<h4><FONT COLOR="#000080"><A name="0039_003D">3.8 Functions <B><I>reset</I><A name="0039_003D"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0039_003E">Synopsis<A name="0039_003E"></FONT></h4></P>
<pre>bits&lt;N&gt;&amp; reset(size_t n)
bits&lt;N&gt;&amp; reset()</pre>
<h4><FONT COLOR="#000080"><A name="0039_003F">Description<A name="0039_003F"></FONT></h4></P>
These functions reset one or more bits.<P>
<h4><FONT COLOR="#000080"><A name="0039_0040">3.8.1 Function <B><I>bits&lt;N&gt;&amp; reset(size_t n)</I><A name="0039_0040"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0039_0041">Description<A name="0039_0041"></FONT></h4></P>
Resets the <I>nth</I> bit.<P>
<h4><FONT COLOR="#000080"><A name="0039_0042">Returns<A name="0039_0042"></FONT></h4></P>
A reference to <I>*this</I>.<P>
<h4><FONT COLOR="#000080"><A name="0039_0043">Exceptions<A name="0039_0043"></FONT></h4></P>
Throws <I>out_of_range</I> if <I>n</I> is not in <I>[0, N-1]</I>.<P>
<h4><FONT COLOR="#000080"><A name="0039_0044">3.8.2 Function <B><I>bits&lt;N&gt;&amp; reset()</I><A name="0039_0044"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0039_0045">Description<A name="0039_0045"></FONT></h4></P>
Resets all bits.<P>
<h4><FONT COLOR="#000080"><A name="0039_0046">Returns<A name="0039_0046"></FONT></h4></P>
A reference to <I>*this</I>.<P>
<h4><FONT COLOR="#000080"><A name="0039_0047">3.9 Functions <B><I>toggle</I><A name="0039_0047"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0039_0048">Synopsis<A name="0039_0048"></FONT></h4></P>
<pre>bits&lt;N&gt;&amp; toggle(size_t n)
bits&lt;N&gt;&amp; toggle()</pre>
<h4><FONT COLOR="#000080"><A name="0039_0049">Description<A name="0039_0049"></FONT></h4></P>
These functions toggle one or more bits.<P>
<h4><FONT COLOR="#000080"><A name="0039_004A">3.9.1 Function <B><I>bits&lt;N&gt;&amp; toggle(size_t n)</I><A name="0039_004A"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0039_004B">Description<A name="0039_004B"></FONT></h4></P>
Toggles the <I>nth</I> bit.<P>
<h4><FONT COLOR="#000080"><A name="0039_004C">Returns<A name="0039_004C"></FONT></h4></P>
A reference to <I>*this</I>.<P>
<h4><FONT COLOR="#000080"><A name="0039_004D">Exceptions<A name="0039_004D"></FONT></h4></P>
Throws <I>out_of_range</I> if <I>n</I> is not in <I>[0,N-1]</I>.<P>
<h4><FONT COLOR="#000080"><A name="0039_004E">3.9.2 Function <B><I>bits&lt;N&gt;&amp; toggle()</I><A name="0039_004E"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0039_004F">Description<A name="0039_004F"></FONT></h4></P>
Toggles all bits.<P>
<h4><FONT COLOR="#000080"><A name="0039_0050">Returns<A name="0039_0050"></FONT></h4></P>
A reference to <I>*this</I>.<P>
<h4><FONT COLOR="#000080"><A name="0039_0051">3.10 Function <B><I>bits operator~() const</I><A name="0039_0051"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0039_0052">Description<A name="0039_0052"></FONT></h4></P>
Toggles all the bits of a copy of <I>*this</I>.<P>
<h4><FONT COLOR="#000080"><A name="0039_0053">Returns<A name="0039_0053"></FONT></h4></P>
A toggled copy of <I>*this</I>.<P>
<h4><FONT COLOR="#000080"><A name="0039_0054">3.11 Function <B><I>int test(size_t n) const</I><A name="0039_0054"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0039_0055">Description<A name="0039_0055"></FONT></h4></P>
Tests if bit <I>n</I> is set.<P>
<h4><FONT COLOR="#000080"><A name="0039_0056">Returns<A name="0039_0056"></FONT></h4></P>
Non-zero if the bit is set, zero otherwise.<P>
<h4><FONT COLOR="#000080"><A name="0039_0057">Exceptions<A name="0039_0057"></FONT></h4></P>
Throws <I>out_of_range</I> if <I>n</I> is not in <I>[0,N-1]</I>.<P>
<h4><FONT COLOR="#000080"><A name="0039_0058">3.12 Function <B><I>int any() const</I><A name="0039_0058"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0039_0059">Description<A name="0039_0059"></FONT></h4></P>
Tests if any bits at all are set.<P>
<h4><FONT COLOR="#000080"><A name="0039_005A">Returns<A name="0039_005A"></FONT></h4></P>
<I>0</I> if all bits are <I>0</I>, non-zero otherwise.<P>
<h4><FONT COLOR="#000080"><A name="0039_005B">3.13 Function <B><I>int none() const</I><A name="0039_005B"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0039_005C">Description<A name="0039_005C"></FONT></h4></P>
Tests if no bits at all are set.<P>
<h4><FONT COLOR="#000080"><A name="0039_005D">Returns<A name="0039_005D"></FONT></h4></P>
Non-zero if all bits are <I>0, 0</I> otherwise.<P>
<h4><FONT COLOR="#000080"><A name="0039_005E">3.14 Function <B><I>bits&lt;N&gt;&amp; operator&amp;=(const bits&lt;N&gt;&amp; b)</I><A name="0039_005E"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0039_005F">Description<A name="0039_005F"></FONT></h4></P>
Performs a destructive <I>bitwise</I>-<I>AND</I> of <I>b</I> into <I>*this</I>.<P>
<h4><FONT COLOR="#000080"><A name="0039_0060">Returns<A name="0039_0060"></FONT></h4></P>
A reference to <I>*this</I>.<P>
<h4><FONT COLOR="#000080"><A name="0039_0061">3.15 Function <B><I>bits&lt;N&gt;&amp; operator/=(const bits&lt;N&gt;&amp; b)</I><A name="0039_0061"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0039_0062">Description<A name="0039_0062"></FONT></h4></P>
Performs a destructive <I>bitwise-OR</I> of <I>b</I> into <I>*this</I>.<P>
<h4><FONT COLOR="#000080"><A name="0039_0063">Returns<A name="0039_0063"></FONT></h4></P>
A reference to *this.<P>
<h4><FONT COLOR="#000080"><A name="0039_0064">3.16 Function<B><I> bits&lt;N&gt;&amp; operator^=(const bits&lt;N&gt;&amp; b)<A name="0039_0064"></B></I></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0039_0065">Description<A name="0039_0065"></FONT></h4></P>
Performs a destructive bitwise <I>exclusive-OR</I> of <I>b</I> into <I>*this</I>.<P>
<h4><FONT COLOR="#000080"><A name="0039_0066">Returns<A name="0039_0066"></FONT></h4></P>
A reference to <I>*this</I>.<P>
<h4><FONT COLOR="#000080"><A name="0039_0067">3.17 Function<B><I> bits&lt;N&gt;&amp; operator&gt;&gt;=(size_t n)<A name="0039_0067"></B></I></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0039_0068">Description<A name="0039_0068"></FONT></h4></P>
Shifts *<I>this</I> right destructively (i.e., in place) by <I>n</I> bit positions. Resets all bits if <I>n &gt; N</I>. To shift "right" by <I>n</I> means that bit <I>0</I> receives the value of bit <I>n</I>, bit <I>1</I> receives bit <I>(n+1)</I>, etc.<P>
<h4><FONT COLOR="#000080"><A name="0039_0069">Returns<A name="0039_0069"></FONT></h4></P>
A reference to *<I>this</I>.<P>
<h4><FONT COLOR="#000080"><A name="0039_006A">3.18 Function <B><I>bits&lt;N&gt;&amp; operator&lt;&lt;=(size_t n)<A name="0039_006A"></B></I></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0039_006B">Description<A name="0039_006B"></FONT></h4></P>
Shifts *<I>this </I>left destructively by <I>n</I> bit positions. Resets all bits if <I>n</I> &gt; <I>N</I>. To shift "left" by <I>n</I> means that bit <I>n</I> receives the value of bit <I>0</I>, bit <I>(n+1)</I> receives bit <I>1</I>, etc.<P>
<h4><FONT COLOR="#000080"><A name="0039_006C">Returns<A name="0039_006C"></FONT></h4></P>
A reference to *<I>this</I>.<P>
<h4><FONT COLOR="#000080"><A name="0039_006D">3.19 Function <B><I>bits&lt;N&gt; operator&gt;&gt;(size_t n) const<A name="0039_006D"></B></I></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0039_006E">Description<A name="0039_006E"></FONT></h4></P>
A non-destructive version of <I>operator&gt;&gt;=()</I>.<P>
<h4><FONT COLOR="#000080"><A name="0039_006F">Returns<A name="0039_006F"></FONT></h4></P>
The results of the shift in a temporary <I>bits</I> object.<P>
<h4><FONT COLOR="#000080"><A name="0039_0070">3.20 Function <B><I>bits&lt;N&gt; operator&lt;&lt;(size_t n) const<A name="0039_0070"></B></I></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0039_0071">Description<A name="0039_0071"></FONT></h4></P>
A non-destructive version of <I>operator&lt;&lt;=()</I>.<P>
<h4><FONT COLOR="#000080"><A name="0039_0072">Returns<A name="0039_0072"></FONT></h4></P>
The results of the shift in a temporary <I>bits</I> object.<P>
<h4><FONT COLOR="#000080"><A name="0039_0073">3.21 Function <B><I>size_t count( ) const<A name="0039_0073"></B></I></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0039_0074">Description<A name="0039_0074"></FONT></h4></P>
Counts the number of bits that are set.<P>
<h4><FONT COLOR="#000080"><A name="0039_0075">Returns<A name="0039_0075"></FONT></h4></P>
The number of <I>1</I> bits in <I>*this.</I><P>
<h4><FONT COLOR="#000080"><A name="0039_0076">3.22 Function <B><I>size_t length( ) const<A name="0039_0076"></B></I></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0039_0077">Description<A name="0039_0077"></FONT></h4></P>
Returns the fixed-size length of the object.<P>
<h4><FONT COLOR="#000080"><A name="0039_0078">Returns<A name="0039_0078"></FONT></h4></P>
<pre>   N.</pre>
<h4><FONT COLOR="#000080"><A name="0039_0079">4.0 Global Functions<A name="0039_0079"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0039_007A">4.1 Function <B><I>ostream&amp; operator&lt;&lt;(ostream&amp; os, const bits&lt;N&gt;&amp; b)</I><A name="0039_007A"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0039_007B">Description<A name="0039_007B"></FONT></h4></P>
Sends a sequence of <I>N 1</I>s and <I>0</I>s corresponding to the bit pattern of <I>*this</I> to the stream <I>os</I>,<P>
<h4><FONT COLOR="#000080"><A name="0039_007C">Returns<A name="0039_007C"></FONT></h4></P>
A reference to the stream <I>os.</I><P>
<h4><FONT COLOR="#000080"><A name="0039_007D">4.2 Function <B><I>istream&amp; operator&gt;&gt;(istream&amp; is, bits&lt;N&gt;&amp; b)</I><A name="0039_007D"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0039_007E">Description<A name="0039_007E"></FONT></h4></P>
Reads a sequence of up to <I>N 1</I>s and <I>0</I>s from the stream <I>is,</I> after skipping whitespace. The first non-bit character thereafter terminates the read and remains in the stream. The corresponding bit pattern is reproduced in <I>b</I>. Treats the last <I>1</I> or <I>0</I> read from the stream as bit <I>0</I> of <I>b.</I><P>
<h4><FONT COLOR="#000080"><A name="0039_007F">Returns<A name="0039_007F"></FONT></h4></P>
A reference to the stream <I>is.</I><P>
<h4><FONT COLOR="#000080"><A name="0039_0080">4.3 Function <B><I>bits&lt;N&gt;operator&amp; (const bits&lt;N&gt;&amp; b1, const bits&lt;N&gt;&amp; b2)</I><A name="0039_0080"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0039_0081">Description<A name="0039_0081"></FONT></h4></P>
Performs a <I>bitwise-AND</I> of <I>b1</I> and <I>b.</I><P>
<h4><FONT COLOR="#000080"><A name="0039_0082">Returns<A name="0039_0082"></FONT></h4></P>
The results of the <I>bitwise-AND</I> in a temporary <I>bits</I> object.<P>
<h4><FONT COLOR="#000080"><A name="0039_0083">4.4 Function <B><I>bits&lt;N&gt;operator / (const bits&lt;N&gt;&amp; b1, const bits&lt;N&gt;&amp; b2)</I><A name="0039_0083"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0039_0084">Description<A name="0039_0084"></FONT></h4></P>
Performs a <I>bitwise-OR</I> of <I>b1</I> and <I>b.</I><P>
<h4><FONT COLOR="#000080"><A name="0039_0085">Returns<A name="0039_0085"></FONT></h4></P>
The results of the <I>bitwise-OR</I> in a temporary <I>bits</I> object.<P>
<h4><FONT COLOR="#000080"><A name="0039_0086">4.5 Function <B><I>bits &lt;N&gt; operator^ (const bits&lt;N&gt;&amp; b1, const bits&lt;N&gt;&amp; b2)<A name="0039_0086"></B></I></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0039_0087">Description<A name="0039_0087"></FONT></h4></P>
Performs a bitwise <I>exclusive-OR</I> of <I>b1</I> and <I>b</I>.<P>
<h4><FONT COLOR="#000080"><A name="0039_0088">Returns<A name="0039_0088"></FONT></h4></P>
The results of the <I>exclusive-OR</I> in a temporary <I>bits</I> object.<P>
<h4><FONT COLOR="#000080"><A name="0039_0089">Design Notes<A name="0039_0089"></FONT></h4></P>
Having an expression instead of a type as a template parameter has the following effects:<P>
<UL><li>A <I>bits</I>-object can be stack-based, since its size is known at compile time. This means less run-time overhead and therefore better performance than <I>bitstring</I> objects.</li>
<li>Objects of different sizes (i.e., with a different number of bits) are different types, and therefore can't be combined in operations.</li>
<li>No global functions taking <I>bits</I> arguments are allowed under the current definition of the language unless you define them inline in the class definition. The standards committee is working to fix this. See the sidebar, "Templates in a Nutshell," for more detail.</li></UL>
Since a <I>bits</I> object is an extension of unsigned integers as far as bitwise operations are concerned, a collection of bits behaves like a number, in that bit <I>0</I> is the right-most bit. To be consistent with C bitwise operations, the statements<P>
<pre>bits&lt;8&gt; b;
b | = 5;
cout &lt;&lt; b &lt;&lt; endl;</pre>
give the result<P>
<pre>00000101</pre>
that is, the bits of <I>5</I> are <I>OR</I>ed with <I>b</I> (via the constructor <I>bits(unsigned long)</I>).<P>
As you can see in <A href="list7.htm">Listing 7</a>,
 I've taken some liberties in the implementation of this class by changing the type of the template parameter to a <I>size_t</I>. The reason for originally making the number of bits an <I>unsigned long</I> was to guarantee a minimum size across platforms (the ANSI C standard states that an <I>unsigned long</I> must be at least 32 bits wide). However, this would require that <I>count</I> and <I>length</I> return an <I>unsigned long</I>. As proof that this is unnatural, I offer the fact that I forgot to do so (the functions return a <I>size_t</I> because it "feels right") and no one on the committee noticed. (Actually, Bill Plauger finally noticed while he was editing the standard library documents, but that was four months after the <I>bits</I> class became official.) Furthermore, the corresponding functions in the <I>string</I> and <I>bitstring</I> classes also return a <I>size_t</I>. (They have no choice.) To be consistent with these classes, therefore, and because it just makes sense, I shall propose to the committee that we approve the obvious and make the template parameter a <I>size_t</I>.<P>
I'm also thinking of changing the name from <I>bits</I> to <I>bitset</I>. This would allow you to refer to an object as a "<I>bitset</I>" instead of always having to say a "<I>bits</I> object." (Who would ever call it a "<I>bits</I>"?) And one could argue that the function <I>to_ushort( )</I> is superfluous, since it is equivalent to <I>(unsigned short) to_ulong( )</I>.<P>
<h4><FONT COLOR="#000080"><A name="0039_008A">Implementation Notes<A name="0039_008A"></FONT></h4></P>
The Code Capsule "Bit Handling in C" (<I>CUJ</I>, November, 1993) provides a thorough explanation of the internals of using an integral array to store and access individual bits, so I won't repeat it here. The techniques found therein serve both the <I>bitstring</I> and <I>bits</I> classes. The implementation of the <I>string</I> class is in last month's installment ("Bit Handling in C++, Part 1," <I>CUJ</I>, December 1993). <A href="list8.htm">Listing 8</a>
has a test program that exercises most of the member functions of the <I>bits</I> class.<P>
<h4><FONT COLOR="#000080"><A name="0039_008B">Sets of Integers<A name="0039_008B"></FONT></h4></P>
For those of you who miss some of the high-level features of Pascal and Modula-2, the <I>bits</I> class gives you sets of integers almost for free. Just define a <I>bits</I> object of a size appropriate for your application and do the following:<P>
<pre><B>For the <B><I>set</I></B> operation: Do this:</B></pre><P>
<pre>insert x into s        <I>s. set(x)</I>
remove x from s        <I>s. reset(x)</I>
x member of s?         <I>s. test(x)</I>
complement of s        <I>s. toggle() or ~s</I>
s1 + s2 (union)        <I>s1 / s2</I>
s1 * s2 (intersection) <I>s2 &amp; s2</I>
s1 - s2 (difference)   see below
s1 &lt;= s2 (subset)      see below
s1 &gt;= s2 (superset)    see below</pre>
If this still seems too "low-level," it is a trivial matter to define a set-like interface to the <I>bits</I> class. <A href="list9.htm">Listing 9</a>
defines a class template called <I>Intset</I> that has all the basic <I>set</I> operations along with an <I>ostream</I> inserter. The only operations that take any thought at all (but only very little) are <I>set difference</I> and <I>subset</I>. To remove from <I>s1</I> the elements of <I>s2</I>, just reset in <I>s1</I> the bits that are set in <I>s2</I>:<P>
<pre>s1.bitset &amp;= ~s2.bitset;
// see Intset&lt;N&gt;::operator-</pre>
If <I>s1</I> is a subset of <I>s2</I>, then <I>s1</I> is nothing more nor less than the intersection of the two sets:<P>
<pre>s1 == s1 &amp; s2
// true iff s1 &lt;= s2</pre>
The test program in <A href="list10.htm">Listing 10</a>
shows how to use the <I>Intset</I> class.<P>
<h4><FONT COLOR="#000080"><A name="0039_008C">Conclusion<A name="0039_008C"></FONT></h4></P>
The acceptance of these two bit handling classes by the C++ standards committee shows that the needs of the system programmer have not been forgotten. Much of the hullabaloo over object-oriented technology emphasizes inheritance hierarchies of polymorphic, high-level abstract data types. These concepts are best left to specialized libraries and applications while the standard rightly focuses on commonly needed, low-level abstractions. If you have any comments on these classes, please contact me at the email address in the by-line at the bottom of the first page of this article.<P>

<h4><a href="../../../source/1994/jan94/allison.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
