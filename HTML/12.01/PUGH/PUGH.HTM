

<HTML>
<HEAD>

<TITLE>January 1994/Questions and Answers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjan.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Questions and Answers<A name="0037_000F"><A name="0037_000F"></font></h2><P>
<h3 align="center"><A name="0037_0000"><A name="0037_0000">Lint for C++</h3><P>
<h3 align="center"><font color="#800000">Kenneth Pugh</font></h3><hr><blockquote><P>
<P><i><A name="0037_0000"><A name="0037_0000">Kenneth Pugh, a principal in Pugh-Killeen Associates, teaches C and C++ language courses for corporations. He is the author of C Language for Programmers and All On C, and was a member of the ANSI C committee. He also does custom C programming for communications, graphics, image databases, and hypertext. His address is 4201 University Dr., Suite 102, Durham, NC 27707. You may fax questions for Ken to (919) 489-5239. Ken also receives email at kpugh@allen.com (Internet) and on Compuserve 70125,1142.</i></P><P>
A few months ago, a reader asked a question regarding the availability of Lint for C++. I replied that there was no product available at that time. In response to the column, Gimpel software, makers of PC-lint, sent me a beta copy of their new PC-lint for C/C++. I've used their C product on a number of programs with great success in finding obscure bugs &#151; especially on programs I inherited form other people. Their new version provides the same types of error analysis for C++ programs as the older versions did for C programs.<P>
The new version of PC-lint adds a number of C++ specific error messages. PC-lint analyzes the relationship of class data and class member functions and provides warnings about some common errors in class design. No existing compiler that I know about flags these errors. For example, PC-lint can report when a destructor for a base class is not virtual or does not exist. In this situation, using a collection of base class pointers that contain pointers to the derived classes will result in a call to the wrong destructor.<P>
Another common mistake that PC-lint catches is the use of a constructor for a class that calls <I>new</I>, without having a copy constructor or assignment operator declared for the class. Normally a class that allocates memory requires the declaration of an explicit copy constructor and an explicit assignment operator. These member functions usually need to allocate memory, unless the class implementation uses some form of reference counting.<P>
The new version of PC-lint also adds a few more C warnings, such as the warning issued for a missing semicolon at the end of a structure definition. Heeding this warning would eliminate the relatively obscure compiler messages that result from code such as the following:<P>
<pre>struct my_struct
    {
    int member;
    }
function(int x)
    {
    ...
    }</pre>
An important purpose of the original lint program was to catch parameter type mismatches. C++ has eliminated the need for this check by making function prototypes mandatory, but it has added the potential for a number of problems resulting from the misuse of classes. According to Gimpel Software, the list of possible C++ warnings that are analyzed will expand in the next version.<P>
<h4><FONT COLOR="#000080"><A name="0037_0010">A Discussion of Object Orientation<A name="0037_0010"></FONT></h4></P>
I just spent a week teaching an advanced C course. Most of the prepared material covered syntax and construction of complex objects, but all of the students were more interested in the design of objects.<P>
Designing good classes is one of the most rewarding aspects of C++. Using bad classes can be one of the most frustrating. Therefore, it's useful to develop criteria for determining how well a class is designed.<P>
The subjective measurements of a class's quality include coupling, cohesiveness, sufficiency, primitiveness, and completeness. Coupling is the degree of interdependence between objects. Classes that are friends of other objects are highly coupled; classes that just depend on the existence of other objects are loosely coupled.<P>
In a highly cohesive class, the data and function members work together as a single abstraction.<P>
The last three criteria, sufficiency, primitiveness, and completeness. A class should have a sufficient interface, which is one that provides all required operations. The class needs to contain all primitive operations, which are those requiring access to the hidden implementation. Finally, a class is complete if it provides all possible operations that a user might want to perform on it or with it. A class that is primative is easier to port to another system or to modify, as it has fewer member functions than a complete class. On the other hand, a complete class can be easier for users to employ in their code.<P>
An example is in order here. Suppose you created a file class called <I>File</I>. The most primitive interface for this class might look like:<P>
<pre>class File
    {
public:
    File(char * name, int mode);
    ~File();
    int read(char * buffer, int length);
    int write(char * buffer, int length);
    };</pre>
With this interface, the constructor might throw an exception if it could not open the file. Alternatively, <I>read</I> and <I>write</I> might return the appropriate error indication if the file could not be opened. The destructor will close the file if the constructor was able to open it. For simplicity's sake, I used an <I>int</I> for the constructor's <I>mode</I> parameter. You could use some type of enumerated parameter (e.g. enum <I>FILE_ACCESS_TYPE {READ_ONLY, WRITE_ONLY</I>, ....} ) instead for a clearer functional interface.<P>
The following primitive interface is similar:<P>
<pre>class File
    {
public:
    File();
    ~File();
    int open(char * name, int mode);
    int read(char * buffer, int length);
    int write(char * buffer, int length);
    int close();
    };</pre>
Notice, however, that the meaning of class <I>File</I> has changed. <I>File</I> no longer represents a particular file. Now, an object of class <I>File</I> can be reused in the same scope with a different file. The interface is still primitive. In particular, there is no <I>seek</I> function to go to a particular byte in the file. A user who needs to perform a <I>seek</I>, can use <I>read</I> and throw away the intervening data. To get to a previous position in the file, close the file, reopen it, and perform another <I>read</I>. Since <I>seek</I> can be implemented as a combination of primitive operations, it is not a primitive operation.<P>
Since many operating systems provide a <I>seek</I> operation, it would be more efficient to include that as part of the interface. On systems that did not have <I>seek</I>, the implementation could fake it with discardable <I>reads</I>. So a slightly less primitive, but more efficient interface would look like:<P>
<pre>class File
    {
public:
    File();
    ...
    long seek(long position, int direction);
    };</pre>
As a side note, you could replace the <I>long</I> parameter with a <I>typedef</I>, as the standard C <I>fseek</I> function uses. You could implement the <I>direction</I> parameter as an enumeration.<P>
<h4><FONT COLOR="#000080"><A name="0037_0011">Sufficiency<A name="0037_0011"></FONT></h4></P>
A typical user might want to find out the current file position. The primitive interface does not provide an operation for determining file position. The user could determine it by keeping track of the reads, writes, and seeks. Since this facility is commonly needed, a sufficient interface could be written as follows:<P>
<pre>class File
    {
public:
    File();
    ...
    long seek(long position, int direction);
    long tell();
    };</pre>
<h4><FONT COLOR="#000080"><A name="0037_0012">Toward Completeness<A name="0037_0012"></FONT></h4></P>
Users may occasionally reposition files to the first byte, using <I>seek(0, 0)</I>. You might code a convenient macro for this operation as follows:<P>
<pre>#define rewind() seek(0,0);</pre>
If <I>rewind</I> were a common operation, you might want to add the function to the interface. The function is not necessary, but may be generally useful. Adding a <I>rewind</I> function would make the interface more complete. The question is when to stop adding functions. Should you also include a<P>
<pre>search_for_a_byte_value(int byte_value)</pre>
function? Or should you let the user write a private version? The more member functions a class contains, the more overwhelming it can be. The fewer functions a class contains, the more code the user may have to write.<P>
<h4><FONT COLOR="#000080"><A name="0037_0013">Objective Criteria for Class Design<A name="0037_0013"></FONT></h4></P>
A few implicit objective criteria for adding functions exist. First, an object should perform the operations requested of it by the user. If the object cannot perform an operation, it should notify the user through an error return, an exception, or by some other means. Second, an object should do no harm. Using an object should not cause memory to be overwritten, or cause changes to other objects, unless those actions were truly intended. (Science fiction buffs may notice that these criteria are similar to Isaac Asimov's rules for robots.)<P>
The following example demonstrates the need for these rules. I spent a few days trying to use an object-oriented user interface generator for Microsoft Windows, DOS, and other systems. The documentation for the system assumes that you are new to C++, as it covers the language in some detail. On the other hand, the system uses pointers and pointers to tables of pointers to objects as part of the programmer interface.<P>
One of the objects the system supports represents a vertical list. One of the member functions for the vertical list object loads the object from persistent storage. The member function must open a corresponding file to get the data for the object. Unfortunately, the function failed to close that file. Not even the destructor for the object closed the file.<P>
In my application, this function error did not manifest itself until the fourth time through a particular series of operations. The program ran fine until it suddenly was unable to open a data file. I spent a number of hours to determine what unapparent error on my part had caused such a problem. The answer: my application had exceeded the open file limit; the object's storage file had been repeatedly opened without ever being closed.<P>
The failure of this object to obey one of the two "objective" rules (to not cause harm) definitely caused a lot of human grief.<P>
<h4><FONT COLOR="#000080"><A name="0037_0014">Questions and Answers<A name="0037_0014"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0037_0015">Pointer Types<A name="0037_0015"></FONT></h4></P>
<B>Q</B><P>
The C-program in <A href="list1.htm">Listing 1</a>
generates an unexpected warning when compiled using version 2.3.3 of gcc (no options specified). The diagnostic is:<P>
<pre>test.c: In function 'main':
test.c:12: warning: passing arg 1 of 'sub2' from incompatible
pointer type</pre>
The diagnostic is tied to my prototype on line 7 where I declare a single argument to be a pointer to an array of <I>const int</I> dimensioned <I>DIM2</I>. This should prevent any obvious assignments to the parameter <I>a</I> within <I>sub2</I>, which was my intention.<P>
I've run this by several people (including gcc tech support) and some agree with the compiler and others do not. I would appreciate your opinion.<P>
Michael G. Soyka<br>
Warren, RI<P>
<B>A</B><P>
This is a great followup to a question from last month. In that issue, I discussed the datatypes of variables such as:<P>
<pre>int int_array2d[1][10];</pre>
The type of <I>int_array_2d</I> usually reduces to <I>(int (*)[10]) </I>and <I>int_array</I> usually reduces to <I>(int *)</I>, so:<P>
<pre>pointer_to_int_array = int_array_2d;
pointer_to_int = int_array;</pre>
are compatible assignments. I use the phrase "usually reduces to" to emphasize that the type of an array is not the same as a pointer type. Let's add a <I>const</I> term to one set of these variables, as in the following:<P>
<pre>const int int_array_of_const[1];
const int *pointer_to_int_const;</pre>
The type of <I>int_array_of_const</I> usually reduces to <I>(const int *)</I>, so the assignment of<P>
<pre>pointer_to_int_const = int_array_of_const;</pre>
is proper. When using two-dimensionional arrays and pointers, typing becomes somewhat more complex. For the declarations<P>
<pre>const int int_array_2d_of_const[1][10];
const int (*pointer_to_array_of_const_int)[10];</pre>
the type of <I>int_array_2d_of_const</I> usually reduces to <I>(const int (*)[10])</I>, so the assignment is compatible. Now, the reduced type of <I>int_array_2d</I> from the first example was <I>(int (*)[10])</I>. That reduced type is not the same as <I>(const int (*)[10])</I>, which is the type of <I>pointer_to_array_of_const_int</I>. So<P>
<pre>pointer_to_int_array_of_const = int_array_2d;</pre>
yields a compiler warning, since these two expressions represent pointers to incompatible types. One expression represents a pointer to a <I>const</I> array, the other to a non<I>-const</I> array.<P>
A pointer to an <I>int</I> can be assigned to a pointer to a <I>const int</I>. This assignment simply adds "constness" to the object originally pointed at by the pointer to <I>int</I>. The C Standard does not include an example of this operation, but its effect seems to follow from the definition of <I>const</I>. The reverse operation is not allowed without a cast, as that would be taking away "constness."<P>
It seems appropriate to me to allow a programmer to add "constness" to an object at any level. I discussed this concept in a conversation with Chris Skelly, who has written for <I>The C User's Journal</I> and has written a book (soon to be published) on pointers. We agreed that it seems proper to be able to add "constness" to a data type with an assignment.<P>
However, according to P.J. Plauger, the C Standard does not require that a pointer to array of <I>const T</I> be assignment-compatible with a pointer to array of <I>T</I>. Some vendors may provide this latitude while others may not.<P>
I tried your program with the Borland C++ 3.1 and Microsoft C++ 7.0 compilers. Borland accepts it without complaint. Microsoft generates a message similar to gcc. I altered your original example as shown in <A href="list2.htm">Listing 2</a>
to better illustrate the problem.<P>
This program yielded an error reading:<P>
<pre>error C2440: 'initializing' : cannot convert
from 'int [1][1]' to 'const int (_near *)[1]'</pre>
The preceding diagnostic is valid for the line<P>
<pre>const int (*pointer_2d_to_const_2)[DIM2] = array_2d;</pre>
For reasons I explained before, the diagnostic may not be clearly worded, although it is valid. Note that the compiler had no problem with<P>
<pre>const int (*pointer_2d_to_const_1)[DIM2]: array_2d_of_const;</pre>
which implies that the conversion from <I>const int [1][1]</I> to <I>const int (_near *)[1]</I> is acceptable.<P>
Interestingly enough, the diagnostic does not appear when the program is compiled as a C program with Microsoft. This discrepancy is probably due to the more extensive type-checking performed by C++ compilers.<P>
One way to solve your problem is shown in <A href="list3.htm">Listing 3</a>.
 I use a <I>typedef</I> to eliminate one dimension from the other declarations. The use of <I>typedef</I> makes the array and pointers equivalent to the following declarations:<P>
<pre>int int_array[1];
const int *pointer_to_const int;</pre>
Along these same lines, I ran into an "interesting" problem when I needed to convert some old C code from the Microsoft <I>large</I> model to C++ under the <I>medium</I> model. Nobody would do this if they want to maintain their sanity. However, the requirement existed, so I plunged ahead. I did the conversion in two steps &#151; first to <I>large</I> model C++, then to <I>medium</I> model C++.<P>
The first step went relatively smoothly. I had already determined the interface to the C++ objects and created test implementations of the objects. I linked the overall test program using the test implementation and the results came out correct. Then I began the second step. My addition of <I>__far</I> to every pointer seemed to work fine. The compiler warned me about the few places that I missed, except... And it was a big exception:<P>
One of the original function prototypes was defined as follows:<P>
<pre>function (char *array[])</pre>
<I>array</I> was an array of pointers to character strings. Since I could use either pointer or array syntax for an argument, I would expect to be able to convert the prototype to:<P>
<pre>function (char __far * __far array[]);</pre>
I used the first <I>__far</I> because the array was going to contain elements which were far pointers to <I>char</I>. The second <I>__far</I> was for the array itself. This declaration should be logically equivalent to<P>
<pre>function (char __far * __far * array);</pre>
In fact, Microsoft's compiler accepts the former declaration form without a hint of a warning &#151; but the code compiles incorrectly. Garbage addresses are passed. Memory is overwritten. Windows crash. Beeps go off. For the first time in a long period, I had to invoke a debugger. With the switch to the second form of the declaration all the problems went away.<P>
This address problem occurs only with multiply-dimensioned arrays; it's similar to your <I>const</I> problem. There appears to be a fundamental disagreement in how to bind <I>__far</I> to arrays versus how to bind it to pointers. Since <I>__far</I> is not in the C Standard, compiler vendors can do it any way they wish. I just wish they would give me a warning.<P>

<h4><a href="../../../source/1994/jan94/pugh.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
