

<HTML>
<HEAD>

<TITLE>January 1994/Standard C</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjan.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Standard C<A name="002A_000B"><A name="002A_000B"></font></h2><P>
<h3 align="center"><A name="002A_0000"><A name="002A_0000">Technical Corrigendum 1</h3><P>
<h3 align="center"><font color="#800000">P.J. Plauger</font></h3><hr><blockquote><P>
<P><i><A name="002A_0000"><A name="002A_0000">P.J. Plauger is senior editor of The C Users Journal. He is convenor of the ISO C standards committee, WG14, and active on the C++ committee, WG21. His latest books are The Standard C Library, and Programming on Purpose (three volumes), all published by Prentice-Hall. You can reach him at pjp@plauger.com.</i></P><P>
<h4><FONT COLOR="#000080"><A name="002A_000C">Introduction<A name="002A_000C"></FONT></h4></P>
No sooner had the ANSI C Standard hit the streets in 1989 but people started asking questions about it. Some questions were simple requests for enlightenment, or how to interpret an apparent ambiguity or oversight. Others were direct challenges to the correctness or completeness of the C Standard itself. In each case, ANSI rules required that committee X3J11 respond to the query as a Request For Interpretation, or RFI.<P>
X3J11 did its best to respond to four dozen such RFIs. Unfortunately, the rules of the game did not permit us to easily change the wording of the C Standard. We often had to excuse what we wrote instead of simply making it a bit clearer. Equally unfortunately, those dozens of RFIs and the committee responses were slow to see the light of day. The first batch was only recently approved by ANSI for publication.<P>
Meanwhile, ISO committee JTC1-/SC22/WG14 assumed more and more responsibility for the C Standard. It didn't help that the ISO rules for interpreting and fixing language standards were, in their own way, as obscure and inappropriate as ANSI's. It was not until the August 1992 plenary meeting of SC22 that we laid down sensible procedures for responding to queries and challenges from the public.<P>
WGI4, with lots of cooperation from X3J11, has worked hard for the past year or so to catch up. We've now processed nearly five dozen Defect Reports (or DRs), the ISO analog to RFIs. All of the responses to date have been gathered into a Record of Responses (or RR) that is now being balloted within SC22. By the time you read these words, the ballot should be closed. I'll be astonished if the ballot yields any serious opposition. Too many experts from too many countries have labored for too many years for any major objections to remain hidden.<P>
A companion document to the Record of Responses, called a Technical Corrigendum (or TC), summarizes all the changes that WG14 now recommends to the ISO C Standard. The RR is <I>not</I> normative but the TC is. Most of the changes are designed to clarify wording that can be misread. A few resolve ambiguities or patch holes that are hard to argue away. Just one or two definitely change the rules of C &#151; to make the language more like what X3J11 meant instead of what we ended up saying. None of the changes add significant new features to Standard C, or take any away.<P>
What I present here are the actual instructions for changing the ISO C Standard (ISO/IEC 9899:1990). Be warned that they are in draft form &#151; they can still change in response to comments from the balloting. I expect such changes to be small, however. I have extracted changes to the appendixes and put them at the end. Otherwise, the changes occur in no particular page order. That's the way we responded to the questions as they came in.<P>
If you have the ANSI version instead (ANSI X3.159:1989), you'll find the leading digit of the subclause number differs. Usually, the ISO number is three higher. You'll also find that page numbers tend to be off by one, mostly. But even if you lack a copy of the C Standard in any form, you should make sense out of what follows.<P>
I've added my own commentary in <I>italics</I> to explain the reason for each change. The actual TC reproduces the Defect Report that led to the change, but I lack the space to do the same here. The words in <I><B>boldface</I></B><B> </B>are the meta-instructions from the TC describing where each change should occur.<P>
<h4><FONT COLOR="#000080"><A name="002A_000D">The Changes<A name="002A_000D"></FONT></h4></P>
<I><B>Some implementors wanted to avoid copying structures in a function returning a structure, even if that meant the return value might overlap a structure argument value. We wanted to clarify that this is not permissible:</B></I><P>
<I><B>Add to subclause 6.6.6.4, page 80:</B></I><P>
The overlap restriction in subclause 6.3.16.1 does not apply to the case of function return.<P>
<B>Example</B><P>
In:<P>
<pre>     struct s {double i;} f(void);
   
     union {struct {int f1;
                    struct s f2;} u1;
            struct {struct s f3;
                    int f4;} u2;
           } g;
     
     struct s f(void)
     {
     return g.u1.f2;
     }
     
     /* ... */
     
     g.u2.f3 = f();</pre>
the behavior is defined.<P>
<I><B>We missed one or two places where the C grammar is ambiguous. Sometimes it's hard to tell from context whether a type definition is being used a different way in a nested scope. We generalized the guideline originally laid down by Dennis Ritchie:</B></I><P>
<I><B>In subclause 6.5.4.3, page 68, change:</B></I><P>
In a parameter declaration, a single typedef name in parentheses is taken to be an abstract declarator that specifies a function with a single parameter, not as redundant parentheses around the identifier for a declarator.<P>
<I><B>to:</B></I><P>
If, in a parameter declaration, an identifier can be treated as a typedef name or as a parameter name, it shall be taken as a typedef name.<P>
<I><B>We got the words wrong regarding two declarations for the same name. We meant to have the later declaration assume the composite type of the two, even if the earlier declaration was in an outer scope. This is a substantive change to make Standard C behave as we intended:</B></I><P>
<I><B>In subclause 6.1.2.6, page 25, change:</B></I><P>
For an identifier with external or internal linkage declared in the same scope as another declaration for that identifier, the type of the identifier becomes the composite type.<P>
<I><B>to:</I></B><P>
For an identifier with internal or external linkage declared in a scope in which a prior declaration of that identifier is visible*, if the prior declaration specifies internal or external linkage, the type of the identifier at the latter declaration becomes the composite type. [*Footnote: As specified in 6.1.2.1, the latter declaration might hide the prior declaration.]<P>
<I><B>Here is a similar error regarding the determination of storage class. We meant the rule to apply across any two scopes, not just file scope and another one, so we fixed it:</B></I><P>
<I><B>In subclause 6.1.2.2, page 21, change:</B></I><P>
If the declaration of an identifier for an object or a function contains the storage-class specifier <I><B>extern</I></B>, the identifier has the same linkage as any visible declaration of the identifier with file scope. If there is no visible declaration with file scope, the identifier has external linkage.<P>
<I><B>to:</B></I><P>
For an identifier declared with the storage-class specifier <I><B>extern</I></B> in a scope in which a prior declaration of that identifier is visible*, if the prior declaration specifies internal or external linkage, the linkage of the identifier at the latter declaration becomes the linkage specified at the prior declaration. If no prior declaration is visible, or if the prior declaration specifies no linkage, then the identifier has external linkage. [*Footnote: As specified in 6.1.2.1, the latter declaration might hide the prior declaration.]<P>
<I><B>We wanted to clarify how a tentative array definition with unknown size gets completed. Adding an example changes no normative wording, but provides a useful hint to the reader:</B></I><P>
<I><B>Add to subclause 6.7.2, page 84:</B></I><P>
<B>Example</B><P>
If at the end of the translation unit containing<P>
<pre>     int i[];</pre>
the array <I>i</I> still has incomplete type, the array is assumed to have one element. This element is initialized to zero on program startup.<P>
<I><B>We wanted to clarify that array arguments become pointer arguments rather early in the life of a function prototype. You can treat arrays as pointers both for determining type compatibility and for forming a composite type:</B></I><P>
<I><B>In subclause 6.5.4.3, page 68, lines 23-25, change the two occurrences of:</B></I><P>
its type for these comparisons<P>
<I><B>to:</B></I><P>
its type for compatibility comparisons, and for determining a composite type.<P>
<I><B>A similar confusion recurs on just when a structure type becomes complete. We clarified that completion occurs at the closing brace in the structure definition:</B></I><P>
<I><B>In subclause 6.5.2.3, page 62, line 27, change:</B></I><P>
occurs prior to the declaration that defines the content<P>
<I><B>to:</B></I><P>
occurs prior to the <I>}</I> following the <I>struct-declaration-list</I> that defines the content<P>
<I><B>Yet another confusion recurs about when the size of an enumeration is known:</B></I><P>
<I><B>Add to subclause 6.5.2.3, page 63:</B></I><P>
<B>Example</B><P>
An enumeration type is compatible with some integral type. An implementation may delay the choice of which integral type until all enumeration constants have been seen. Thus in:<P>
<pre>     enum f { c = sizeof(enum f)};</pre>
the behavior is undefined since the size of the respective enumeration type is not known when sizeof is encountered.<P>
<I><B>Some people read the description of</I></B><B> fscanf </B><I><B>as requiring a conversion failure on</I></B><B> %n </B><I><B>when the input is exhausted. That was not our intent:</I></B><P>
<I><B>Add to subclause 7.9.6.2, page 138:</B></I><P>
<B>Example</B><P>
In:<P>
<pre>     #include &lt;stdio.h&gt;
     
     /* ... */
     
     int d1, d2, n1, n2, i;
     
     i = sscanf("123", "%d%n%n%d", &amp;d1, &amp;n1, &amp;n2, &amp;d2);</pre>
the value 123 is assigned to <I>d1</I> and the value 3 to <I>n1.</I> Because <I>%n</I> can never get an input failure the value of 3 is also assigned to <I>n2.</I> The value of <I>d2</I> is not affected. The value 3 is assigned to <I>i</I>.<P>
<I><B>We made clearer just what is meant by the implicit initialization of static objects to zero:</B></I><P>
<I><B>In subclause 6.5.7, pages 71-72, change:</B></I><P>
If an object that has static storage duration is not initialized explicitly, it is initialized implicitly as if every member that has arithmetic type were assigned 0 and every member that has pointer type were assigned a null pointer constant.<P>
<I><B>to:</I></B><P>
If an object that has static storage duration is not initialized explicitly, it is initialized implicitly according to these rules:<P>
<UL><li>if it has pointer type, it is initialized implicitly to a null pointer constant;</li>
<li>if it has arithmetic type, it is initialized implicitly to zero;</li>
<li>if it is an aggregate, every member is initialized (recursively) according to these rules;</li>
<li>if it is a union, the first named member is initialized (recursively) according to these rules.</li></UL>
<I><B>It was not completely clear that a newline always ends a preprocessing directive:</B></I><P>
<I><B>Add to subclause 6.8, page 86, Description:</B></I><P>
A new-line character ends the preprocessing directive even if it occurs within what would otherwise be an invocation of a function-like macro.<P>
<I><B>Some situations in Standard C are described as both constraint violations and undefined or implementation-defined behavior. We decided to clarify the precedence of errors:</B></I><P>
<I><B>Add to subclause 5.1.1.3, page 6:</I></B><P>
If a construct violates a constraint and is also specified as having undefined or implementation-defined behavior the constraint takes precedence.<P>
<B>Example</B><P>
An implementation shall issue a diagnostic for the translation unit:<P>
<pre>     char i;
     int i;</pre>
because in those cases where wording in this International Standard describes the behavior for a construct as being both a constraint error and resulting in undefined behavior, the constraint error shall be diagnosed.<P>
<I><B>Some people felt it was not obvious enough that the members of a structure or union inherit its storage class:</B></I><P>
<I><B>Add to subclause 6.5.1, page 58:</I></B><P>
A declaration of an aggregate or union with a storage-class specifier other than typedef implicitly causes all of its members to be given the storage-class specifier.<P>
<I><B>We wanted to clarify that assignment to a narrower type does indeed effectively stuff the value through a knothole, scraping off high-order bits:</B></I><P>
<I><B>Add to subclause 6.3.16.1, page 54:</I></B><P>
<B>Example</B><P>
In the fragment:<P>
<pre>        char c;
        int i;
        long l;
        
        l = ( c = i );</pre>
the value of <I>i</I> is converted to the type of the assignment-expression <I>c = i</I>, that is, <I>char</I> type. The value of the expression enclosed in parenthesis is converted to the type of the outer assignment-expression, that is, <I>long</I> type.<P>
<I><B>Some people were confused about the meaning of "ignored" when talking about unnamed structure or union members during initialization:</B></I><P>
<I><B>In subclause 6.5.7, page 71, line 39, change:</I></B><P>
All unnamed structure or union members are ignored during initialization.<P>
<I><B>to:</I></B><P>
Except where explicitly stated otherwise, for the purposes of this subclause unnamed members of objects of <I>struct</I> and <I>union</I> type do not participate in initialization. Unnamed members of <I>struct</I> objects have indeterminate value even after initialization. A <I>union</I> containing only unnamed members has indeterminate value even after initialization.<P>
<I><B>In subclause 6.5.7, page 72, lines 4-5, change:</I></B><P>
The initial value of the object is that of the expression:<P>
<I><B>to:</I></B><P>
The initial value of the object, including unnamed members, is that of the expression:<P>
<I><B>How macros get expanded is a source of confusion to many. We added yet another example to help clarify this difficult topic:</B></I><P>
<I><B>Add to subclause 6.8.3.3, page 90:</I></B><P>
<B>Example</B><P>
<pre>     #define hash_hash # ## #
     #define mkstr(a) # a
     #define in_between(a) mkstr(a)
     #define join(c, d) in_between(c hash_hash d)
     
     char p[] = join(x, y);
     /* equivalent to char p[] = "x ## y"; */</pre>
The expansion produces, at various stages:<P>
<pre>     join(x, y)
     
     in_between(x hash_hash y)
     
     in_between(x ## y)
     
     mkstr(x ## y)
     
     "x ## y"</pre>
In other words, expanding <I>hash_hash</I> produces a new token, consisting of two adjacent sharp-signs, but this new token is not the catenation operator.<P>
<I><B>Here's a one-word change, to clarify that we are talking about identifiers in general and not some (unspecified) one in particular</I></B><I>:</I><P>
<I><B>In subclause 7.1.2, page 96, lines 34-35, change:</I></B><P>
However, if the identifier is declared or defined in more than one header,<P>
<I><B>to:</I></B><P>
However, if an identifier is declared or defined in more than one header,<P>
<I><B>The functions</I></B><B> ftell </B><I><B>and</I></B><B> fgetpos </B><I><B>can often fail. Only values returned by successful calls are permitted in certain contexts:</I></B><P>
<I><B>In subclause 7.9.9.2, page 145, lines 39-40, change:</I></B><P>
a value returned by an earlier call to the <I>ftell</I> function<P>
<I><B>to:</I></B><P>
a value returned by an earlier successful call to the <I>ftell</I> function<P>
<I><B>In subclause 7.9.9.3, page 146, lines 10-11, change:</I></B><P>
a value obtained from an earlier call to the <I>fgetpos</I> function<P>
<I><B>to:</I></B><P>
a value obtained from an earlier successful call to the <I>fgetpos</I> function<P>
<I>We really didn't say clearly what is the type of a function call expression:</I><P>
<I><B>In subclause 6.3.2.2, page 40, line 35, change:</I></B><P>
The value of the function call expression is specified in 6.6.6.4.<P>
<I><B>to:</I></B><P>
If the expression that denotes the called function has type pointer to function returning an object type, that object type is the type of the result of the function call. The value of the function call is determined by the <I>return</I> statement that executes within the called function, as specified in 6.6.6.4. Otherwise, the function call has type <I>void</I>.<P>
<I><B>We used two different terms for "iteration structures" and "control structures." This change eliminates the form we used only once:</B></I><P>
<I><B>In subclause 5.2.4.1, page 13, lines 1-2, change:</I></B><P>
&#151; 15 nested levels of compound statements, iteration control structures, and selection control structures<P>
<I><B>to:</I></B><P>
&#151; 15 nested levels of compound statements, iteration statements, and selection statements<P>
<I><B>Some readers insisted on believing that an expression such as:</I></B><B> x&lt;3&amp;&amp;0&gt;x </B><I><B>must be parsed to include the token</I></B><B> &lt;3&amp;&amp;0&gt;, </B><I><B>and hence requires a diagnostic. It was easier to add a sentence to the C Standard than to continue to fight such perversity:</I></B><P>
<I><B>Add to subclause 6.1, page 18:</I></B><P>
There is one exception to this rule: a <I>header-name</I> preprocessing token is only recognized within a <I>#include</I> preprocessing directive, and within such a directive, a sequence of characters that could be either a <I>header-name</I> or a <I>string-literal</I> is recognized as the former.<P>
<I><B>Here is a similar, but milder, form of the same perversity:</B></I><P>
<I><B>Add to subclause 6.1.2, page 20:</I></B><P>
When preprocessing tokens are converted to tokens during translation phase 7, if a preprocessing token could be converted to either a keyword or an identifier, it is converted to a keyword.<P>
<I><B>More cleanup of header-name parsing:</B></I><P>
<I><B>In subclause 6.1.7, page 32, delete:</I></B><P>
<B>Constraint</B><P>
Header name preprocessing tokens shall only appear within a <I>#include</I> preprocessing directive.<P>
<I><B>Add to subclause 6.1.7, page 32:</I></B><P>
The <I>header-name</I> preprocessing token is recognized only within a <I>#include</I> preprocessing directive.<P>
<I><B>The </I></B><B>%0</B><I><B> conversion specifier in</I></B><B> fprintf </B><I><B>has some subtle implications. It is</I></B><B> not</B><I><B> the same as forcing a zero fill. Nor is it the same as forcing increased precision:</I></B><P>
<I><B>In subclause 7.9.6.1, page 132, lines 37-38, change:</I></B><P>
For <I>0</I> conversion, it increases the precision to force the first digit of the result to be a zero.<P>
<I><B>to:</I></B><P>
For <I>0</I> conversion, it increases the precision, if and only if necessary, to force the first digit of the result to be a zero.<P>
<I><B>Similarly, the matching rules for</I></B><B> fscanf </B><I><B>seem to need no end of clarification:</I></B><P>
<I><B>In subclause 7.9.6.2, page 135, change:</I></B><P>
An input item is defined as the longest matching sequence of input characters, unless that exceeds a specified field width, in which case it is the initial subsequence of that length in the sequence.<P>
<I><B>to:</I></B><P>
An input item is defined as the longest sequence of input characters which does not exceed any specified field width and which is, or is a prefix of, a matching input sequence.<P>
<I><B>In subclause 7.9.6.2, page 137, delete:</I></B><P>
If conversion terminates on a conflicting input character, the offending input character is left unread in the input stream.<P>
<I><B>Add to subclause 7.9.6.2, page 137:</I></B><P>
<I>fscanf</I> pushes back at most one input character onto the input stream.* Therefore, some sequences that are acceptable to <I>strtod, strtol,</I> or <I>strtoul</I> are acceptable to <I>fscanf</I>. [*Footnote: If conversion terminates on a conflicting input character, the offending input character is left unread in the input stream.]<P>
<I><B>The following change started out in an entirely different arena. We wanted to clarify that an implementation can add extra identifier characters, such as</I></B><B> $</B><I><B>, provided that it issues a diagnostic when they're used. But we discovered an ambiguity in how such extra characters would parse in a macro definition. So we decided to resolve the ambiguity and make the extension more usable:</B></I><P>
<I><B>Add to subclause 6.8, page 86, Constraints:</I></B><P>
If the first character of a <I>replacement-list</I> is not a member of the minimal basic source character set*, there shall be white-space separation between the <I>identifier</I> and the <I>replacement-list</I>. [*Footnote: "Minimal basic source character set" refers to the 90-odd basic source characters listed in subclause 5.2.1.]<P>
<I><B>We thought it was clear enough that library macros should be written sensibly, but not everyone seemed to agree:</B></I><P>
<I><B>Add to subclause 7.1.2, page 96:</I></B><P>
Any definition of a macro described in this clause shall expand to code that is fully protected by parentheses where necessary, so that it groups in an arbitrary expression as if it were a single identifier.<P>
<I><B>Here's a small but potentially misleading gaffe in an example:</B></I><P>
<I><B>Change subclause 7.12.2.3, page 172, line 16, from:</I></B><P>
<pre>        if (mktime(&amp;time_str) == -1)</pre>
<I><B>to:</I></B><P>
<pre>        if (mktime(&amp;time_str) ==
                         (time_t)-1)</pre>
<I><B>And a similar error in the index:</B></I><P>
<I><B>In the index, page 217, change:</I></B><P>
<I>static</I> storage-class specifier, 3.1.2.2, 6.1.2.4, <B>6.5.1</B>, 6.7<P>
<I><B>to:</I></B><P>
<I>static</I> storage-class specifier, 6.1.2.2, 6.1.2.4, <B>6.5.1</B>, 6.7<P>
<I><B>When we listed the rules for aliasing (accessing the same object by lvalues with different types), we were overly restrictive in describing the kinds of qualified types that are valid:</B></I><P>
<I><B>In subclause 6.3, page 38, lines 18-21, change:</I></B><P>
An object shall have its stored value accessed only by an lvalue expression that has one of the following types:36<P>
&#151; the declared type of the object,<P>
&#151; a qualified version of the declared type of the object,<P>
<I><B>to:</I></B><P>
An object shall have its stored value accessed only by an lvalue expression that has one of the following types: 36<P>
&#151; a type compatible with the declared type of the object,<P>
&#151; a qualified version of a type compatible with the declared type of the object,<P>
<I><B>Some of the functions declared in</I></B><B> &lt;string.h&gt; </B><I><B>take a length argument, which can be zero. We spelled out what happens when that argument is zero:</I></B><P>
<I><B>Add to subclause 7.11.1, page 162:</I></B><P>
Where an argument declared as <I>size_t n</I> determines the length of the array for a function, n can have the value zero on a call to that function. Unless explicitly stated otherwise in the description of a particular function, pointer arguments on such a call must still have valid values, as described in subclause 7.1.7 Use of library functions. On such a call, a function that copies characters shall copy zero characters, while a function that compares two character sequences shall return zero.<P>
<I><B>We made clear that the macros for signal numbers defined in</I></B><B> &lt;signal. h</B><I><B>&gt; must have distinct values:</B></I><P>
<I><B>In subclause 7.7, page 120, lines 14-16, change:</I></B><P>
and the following, each of which expands to a positive integral constant expression that is the signal number corresponding to the specified condition:<P>
<I><B>to:</I></B><P>
and the following, which expand to positive integral constant expressions with distinct values that are the signal numbers, each corresponding to the specified condition:<P>
<h4><FONT COLOR="#000080"><A name="002A_000E">Listing Undefined Behavior<A name="002A_000E"></FONT></h4></P>
<I><B>The UK delegation to WG14 wants a complete list of undefined behaviors in Appendix G.2. This is part of an ongoing effort to round out that list:</B></I><P>
<I><B>Add to subclause G.2, page 204:</I></B><P>
&#151; A program contains no function called <I>main</I>.<P>
<I><B>Add to subclause G.2, page 204:</I></B><P>
&#151; A storage-class specifier or type-qualifier modifies the keyword <I>void</I> as a function parameter-type-list.<P>
<I><B>Add to subclause G.2, page 204:</I></B><P>
&#151; For an array of arrays, the permitted pointer arithmetic in subclause 6.3.6, page 47, lines 12-40 is to be understood by interpreting the use of the word "object" as denoting the specific object determined directly by the pointer's type and value, <I>not</I> other objects related to that one by contiguity. Therefore, if an expression exceeds these permissions, the behavior is undefined. For example, the following code has undefined behavior:<P>
<pre>     int a[4][5];
     
     a[1][7] = 0; /* undefined */</pre>
Some conforming implementations may choose to diagnose an "array bounds violation," while others may choose to interpret such attempted accesses successfully with the "obvious" extended semantics.<P>
<I><B>Add to subclause G.2, page 204:</I></B><P>
&#151; If a fully expanded macro replacement list contains a function-like macro name as its last pre-processing token, it is unspecified whether this macro name may be subsequently replaced. If the behavior of the program depends upon this unspecified behavior, then the behavior is undefined.<P>
<B>Example</B><P>
Given the definitions:<P>
<pre>          #define f(a) a*g
          #define g(a) f(a)</pre>
the invocation:<P>
<pre>          f(2)(9)</pre>
results in undefined behavior. Among the possible behaviors are the generation of the preprocessing tokens:<P>
<pre>          2*f(9)</pre>
and<P>
<pre>          2*9*g</pre>
<I><B>Add to subclause G.2, page 204:</I></B><P>
&#151; A call to a library function exceeds an Environmental limit.<P>
<h4><FONT COLOR="#000080"><A name="002A_000F">Conclusion<A name="002A_000F"></FONT></h4></P>
I believe these changes are reasonably minor. The C Standard is honored by dozens of vendors, required by hundreds of customers, and validated by several agencies around the world. Yet it has seen remarkably few challenges for all that. Put another way, the C Standard has held up pretty well these past five years.<P>
Still, it doesn't hurt to fix the obvious flaws. The fewer ambiguities in a document, the fewer misunderstandings result. And, of course, the fewer questions get directed to those of us who generate answers.<P>
</BLOCKQUOTE>
</BODY>
</HTML>
