

<HTML>
<HEAD>

<TITLE>January 1994/Stepping Up To C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjan.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Stepping Up To C++<A name="002C_000D"><A name="002C_000D"></font></h2><P>
<h3 align="center"><A name="002C_0000"><A name="002C_0000">How Virtual Functions Work</h3><P>
<h3 align="center"><font color="#800000">Dan Saks</font></h3><hr><blockquote><P>
<P><i><A name="002C_0000"><A name="002C_0000">Dan Saks is the founder and principal of Saks &amp; Associates, which offers consulting and training in C++ and C. He is secretary of the<I></I><B> <I></B></I>ANSI and ISO C++ committees. Dan is coauthor of C++ Programming Guidelines, and codeveloper of the Plum Hall Validation Suite for<I><B> </B></I>C++ (both with Thomas Plum). You can reach him at 393 Leander Dr., Springfield OH, 45504-4906, by phone at (513)324-3601, or<I></I><B> <I></B></I>electronically at dsaks@wittenberg.edu.</i></P><P>
Last month, I introduced virtual functions. (See "Stepping Up<B> </B>to C++: Virtual Functions," <I>CUJ,</I> December 1993). I outlined how<B> </B>you might use virtual functions to implement a<B> </B>device-independent file system, and showed in detail how to create a class of<B> </B>geometric shapes with polymorphic behavior. I continue this<B> </B>month by explaining the mechanics of how virtual functions work.<B> </B>But first, a brief recap of the key concepts.<P>
Public inheritance in C++ defines an<B> </B>Is-A relationship between a derived class<B> </B>and its base. That is, given the definition<P>
<pre>class D : public B { ... };</pre>
<I>D</I> is publicly derived from <I>B</I><I>,</I> and any <I>D</I><B> </B>object is also a <I>B</I> object. A function that<B> </B>expects a pointer (or reference) to a <I>B</I><B> </B>object as its formal parameter will accept<B> </B>a pointer (or reference, respectively) to a<B> </B><I>D</I> object as well.<P>
More generally, converting a pointer<B> </B>to a <I>D</I> object into a pointer to a <I>B</I> object<B> </B>is a standard conversion that does not require a cast. For example, if <I>d</I> is an object of class <I>D</I> and <I>B</I> is a public base<B> </B>class of <I>D</I> you can write<P>
<pre>B *pb = &amp;d;</pre>
which converts <I>&amp;d</I> (an expression of type<B> </B><I>D</I><I> *</I>) to <I>B</I><I> *</I>. Binding a <I>D</I> object to a <I>B &amp;</I><B> </B>is also a standard conversion.<P>
When discussing the behavior of<B> </B>pointers to base and derived objects, it<B> </B>helps to distinguish the static type of an object from its dynamic<B> </B>type. The static type of an object is the type of the expression used<B> </B>to refer to that object. The dynamic type of an object is its "actual" type &#151; the object's type at the point where it was created.<P>
For example, using <I>pb</I> as defined and initialized above, <I>*pb</I> has<B> </B>static type <I>B</I> but dynamic type <I>D</I><I>.</I> Or, given<P>
<pre>B &amp;rb = d;</pre>
<I>rb</I> has static type <I>B</I> but dynamic type <I>D</I><I>.</I> The static type of <I>*</I><I>pb</I> is<B> </B>always <I>B</I><I>,</I> but its dynamic type may change during program<B> </B>execution. For example, if <I>b</I> is a <I>B</I> object, then<P>
<pre>pb = &amp;b;</pre>
changes the dynamic type of <I>*</I><I>pb</I> to <I>B</I><I>.</I><P>
A derived class inherits all the members of its base class. A derived class<B> </B>cannot discard any members it inherits,<B> </B>but it can override the definition of an<B> </B>inherited member function with a new<B> </B>definition.<P>
In C++, non-static member functions<B> </B>are non-virtual by default. C++ resolves<B> </B>non-virtual member function calls by<B> </B>static binding. That is, if <I>pb</I> is declared<B> </B>as a <I>B</I><I> *</I>, and <I>B</I> has a non-virtual member function <I> </I>, then <I>pb-&gt;f</I> always calls<B> </B><I>B'</I>s<I> f</I>. Even if, at the time of the call, <I>pb</I><B> </B>actually points to a <I>D</I> object (where <I>D</I> is<B> </B>derived from <I>B</I> and overrides <I> </I>), calling<B> </B><I>pb-&gt;f</I> still invokes <I>B'</I>s<I> f</I>, not <I>D'</I>s<I> f.</I><P>
On the other hand, virtual member<B> </B>function calls bind dynamically. If <I>pb</I> is<B> </B>a <I>B *</I> and <I>f</I> is declared as a virtual member function in <I>B,</I> then calling <I>pb-&gt;f</I> calls<B> </B><I>f</I> associated with the dynamic type of<B> </B><I>*pb</I><I>.</I> Thus, if <I>pb</I> actually points to a <I>B</I><B> </B>object, then <I>pb-&gt;f</I> calls <I>B's f.</I> But, if <I>pb</I><B> </B>actually points to a <I>D</I> object (where <I>D</I> is<B> </B>derived from <I>B</I> and overrides <I>f)</I>, then <I>pb-&gt;f</I> calls <I>D'</I>s<I> f.</I><P>
A class with at least one virtual member function is called a<B> </B>polymorphic type, and objects of such type exhibit polymorphism.<B> </B>Polymorphism lets you define a single interface for a hierarchy of<B> </B>subtypes that exhibit logically similar, but physically different, behavior. Using polymorphism, you can pass pointers or references<B> </B>to objects of a derived class type to functions that know the object<B> </B>only by its base class type. Yet, the object retains its dynamic type<B> </B>so that member function calls applied to that object invoke the<B> </B>derived class behavior.<P>
<A href="list1.htm">Listing 1</a>
shows the class definition for <I>shape</I><I>,</I> a polymorphic<B> </B>class for geometric shapes that I described last month. <A href="list2.htm">Listing 2</A><B> </B>shows the corresponding member function and static data member<B> </B>definitions. Class <I>shape</I> has three virtual functions, <I>area, name</I> and<B> </B><I>put,</I> and two non-virtual functions, <I>color</I> and <I>shape</I> (a constructor). <a href="list3.htm">Listing 3</a>
and <A href="list4.htm">Listing 4</a>
show the complete definitions for classes<B> </B><I>circle</I> and <I>rectangle</I><I>,</I> respectively, both derived from <I>shape</I><I>.</I><B> </B>Each derived class defines it own constructor (constructors are not<B> </B>inherited), and also overrides each of its inherited virtual functions<B> </B>with appropriate definitions.<P>
<A href="list5.htm">Listing 5</a>
contains a function that illustrates the power of polymorphism. Function <I>largest</I> locates the shape with the largest<B> </B>area from a collection of shapes. Since <I>shape</I> is a polymorphic<B> </B>type, calling <I>sa[i]-&gt;area</I> returns the area of a shape without the<B> </B>caller ever knowing exactly what kind of shape <I>*sa[i]</I> really is.<P>
<h4><FONT COLOR="#000080"><A name="002C_000E">vptrs and vtbls<A name="002C_000E"></FONT></h4></P>
Both the ARM (<a href="#1">Ellis and Stroustrup [1990]</a>) and the emerging<B> </B>C++ standard take pains to describe the behavior of virtual functions, as well as the rest of the C++ language, without suggesting<B> </B>any particular implementation strategy. However, the ARM does<B> </B>describe implementation techniques in the commentary at the end<B> </B>of chapter 10 on derived classes. I find that relying on a model<B> </B>implementation simplifies the description of many details of the<B> </B>behavior of virtual functions. The following is one such model.<P>
Typical C++ implementations add a single pointer to each object of a polymorphic class. That pointer is called a vptr (pronounced "VEE-pointer"). Whenever a constructor for a polymorphic class initializes an object, its sets that object's vptr to the<B> </B>address of a table of function pointers called a vtbl ("VEE-table").<B> </B>Each entry in the vtbl is the address of a virtual function. All<B> </B>objects of a given class share the same vtbl; that vtbl contains<B> </B>exactly one entry for each virtual function in that class.<P>
For example, <A href="fig1.htm">Figure 1</a>
shows the layout for an object of class <I>shape</I> (as defined in <A href="list1.htm">Listing 1</a>)
 along with its corresponding vtbl. Every <I>shape</I> object has the same two fields in the same order: a <I>vptr</I> and a _<I>colo </I> data member. The <I>vptr</I> points to <I>shape</I>'s vtbl, which contains the addresses of the virtual functions <I>shape: :area, shape::name</I> and <I>shape::put.</I> The non-virtual functions <I>shape::color</I> and <I>shape::shape</I> (the constructor) don't use any space in the vtbl, nor in the object itself.<P>
<A href="fig2.htm">Figure 2</a>
and <A href="fig3.htm">Figure 3</a>
show the layouts for <I>circle</I> and <I>rectangle</I> objects, respectively (as defined in <A href="list3.htm">Listing 3</a>
and <A href="list4.htm">Listing 4</a>,
 respectively), along with their corresponding vtbls. Notice that the initial portions of both <I>circle</I> objects and <I>rectangle</I> objects are <I>shape</I> objects, so a pointer to a <I>circle</I> or a <I>rectangle</I> is a pointer to a <I>shape</I><I>,</I> and the conversion from <I>circle</I><I> *</I> or <I>rectangle</I><I> *</I> to <I>shape</I><I> *</I> requires no pointer arithmetic.<P>
The vtbls for both derived classes have their function pointers in the same order as the vtbl for the base class, although the pointer values differ. For example, the vtbl entry for the <I>area</I> function is always first in every class derived (directly or indirectly) from shape. The vtbl entry for <I>name</I> is always second, and the entry for <I>put</I> is always third.<P>
Whereas a non-virtual function call generates a call instruction that refers directly to the function's address as determined during translation (compiling and linking), a virtual function call generates additional code to locate the function's address in the vtbl.<P>
The ARM suggests viewing a vtbl as an array of function addresses, so that each call locates the called function by subscripting into the vtbl. For example, if <I>ps</I> is a pointer to a <I>shape</I>, then<P>
<pre>a = ps-&gt;area ( );</pre>
translates into something like<P>
<pre>a = (*(ps-&gt;vtbl[0]))(ps);</pre>
and<P>
<pre>ps-&gt;put(cout);</pre>
translates into<P>
<pre>(*(ps-&gt;vtbl[2]))(ps, cout);</pre>
An expression of the form <I>ps-&gt;vtbl [n]</I> is the <I> </I>th entry in the vtbl of the object <I>*ps</I>, so <I>(*(ps-&gt;vtbl [n]))</I> is the <I>n</I>th virtual function itself. Actually, in C++ as in C, you need not explicitly dereference a pointer to a function in a call expression. Thus you can write<P>
<pre>(*(ps-&gt;vtbl[2])) (ps, cout);</pre>
as simply<P>
<pre>(ps-&gt;vtbl[2])(ps, cout);</pre>
Each virtual function may have a different signature (sequence of formal parameter types) and return type. So strictly speaking, you can't implement vtbls as arrays of pointers because an array requires all its elements to have the same type. For example, <I>shape::area</I> has type <I>double (*)()</I> and <I>shape::put</I> has type <I>void (*)(ostream &amp;)</I>.<P>
I prefer to model a vtbl as a struct in which all the members are pointers to functions. For instance, you can define the struct type for a vtbl for shapes as something like<P>
<pre>struct shape_virtual_table
    {
    double (*area)();
    const char *(*name)();
    ostream &amp;(*put)(ostream &amp;os);
    };</pre>
and define the actual <I>shape</I> vtbl as something like<P>
<pre>shape_virtual_table shape_vtbl =
    {
    &amp;shape::area,
    &amp;shape::name,
    &amp;shape::put
    };</pre>
Similarly, you can define the <I>circle</I> vtbl as something like<P>
<pre>shape_virtual_table circle_vtbl =
    {
    &amp;circle::area,
    &amp;circle::name,
    &amp;circle::put
    };</pre>
(I say "something like" because this code won't actually compile. The code only demonstrates the general layout of the vtbls.) Using this translation model,<P>
<pre>a = ps-&gt;area();</pre>
translates into<P>
<pre>a = (*ps-&gt;vtbl-&gt;area)(ps);</pre>
or simply<P>
<pre>a = ps-&gt;vtbl-&gt;area(ps);</pre>
and<P>
<pre>ps-&gt;put(cout);</pre>
translates into<P>
<pre>(*ps-&gt;vtbl-&gt;put)(ps, cout);</pre>
or just<P>
<pre>ps-&gt;vtbl-&gt;put(ps, cout);</pre>
A virtual function call with <I>n</I> arguments translates into a call (through a vtbl entry) with <I>n</I>+1 arguments. The additional argument is always the address of the object to which function applies; in the examples above, its value is always <I>ps</I><I>.</I> The additional argument becomes the value of <I>this</I> inside the called function. Virtual functions cannot be static members, so they always have an implicit <I>this</I> argument.<P>
Bear in mind that I'm describing only a typical implementation strategy. (<a href="#2">Colvin [1993]</a> describes a similar implementation of virtual method tables generated with the aid of macros that support object-oriented programming in C.) C++ translators may implement virtual functions somewhat differently, but the effect must be the same. The vptr need not be at the beginning of each polymorphic object. But, for any class <I>D</I> derived from polymorphic class B, <I>D</I>'s vptr must be at the same offset within <I>D</I> as <I>B</I>'s vptr is within <I>B</I>. Similarly, the function pointers in the vtbl need not be in the same order as the virtual function declarations in the class. But, for any <I>D</I> derived from a polymorphic <I>B</I>, the initial portion of <I>D</I>'s vtbl must have the same layout as <I>B</I>'s vtbl, even if <I>D</I>'s actual pointer values differ from <I>B</I>'s because <I>D</I> has overridden some of the virtual functions it inherited.<P>
In short, a C++ translator must insure that the base subobject of any derived object has the same layout as any other object of the same base type, and the base portion of a derived class vtbl must have the same layout as the base class vtbl. Hence, a translator need not see the declarations for any derived classes when translating a virtual call. Regardless of <I>p</I>'s dynamic type, a virtual call such as <I>p-&gt;f</I> always translates into code to<P>
<UL><li>construct <I>f</I>'s actual argument list</li>
<li>follow <I>p</I>'s vptr to a vtbl</li>
<li>transfer control to the function whose address is in the vtbl entry corresponding to <I>f</I>.</li></UL>
All polymorphic objects with a given dynamic type can share the same physical vtbl. Some C++ implementations actually manage to eliminate duplicate vtbls. Others produce multiple copies of vtbls, either due to limitations of the development environment or to provide better system performance. Many implementations offer compiler and linker options to let you decide.<P>
This implementation model shows that virtual functions introduce a small cost in both space and time:<P>
<UL><li>Adding one or more virtual functions to a class that previously had none adds a vptr to each object of that class.</li>
<li>Each polymorphic class adds at least one more vtbl to the program's data space.</li>
<li>Every constructor for a polymorphic class must initialize a vptr.</li>
<li>Every virtual function call must locate the address of the function by looking in a vtbl (requiring typically 2 to 4 additional machine instructions).</li>
<li>In C++, member functions are non-virtual by default because C++ tries to adhere to the principle that "you don't pay for what you don't use." If you're willing to pay for a virtual function call, you must say so explicitly.</li></UL>
<h4><FONT COLOR="#000080"><A name="002C_000F">Selective Overriding<A name="002C_000F"></FONT></h4></P>
A derived class may override all, some, or none of the virtual functions in its base class. A derived class inherits the function definitions for all virtual functions it does not override. <A href="list6.htm">Listing 6</a>
and <A href="fig4.htm">Figure 4</a>
together illustrate the effects of selectively overriding only some of the virtual functions inherited from a base class.<P>
<A href="list6.htm">Listing 6</a>
shows a simple class hierarchy and <A href="fig4.htm">Figure 4</a>
shows the corresponding vtbls. Class <I>B</I> defines three virtual functions, <I>f</I>, <I>g</I>, and <I>h</I>. Class <I>C</I> derived from <I>B</I> overrides only function <I>f</I>, so the entries for <I>g</I> and <I>h</I> in <I>C</I>'s vtbl continue to point to <I>B</I>'s <I>g</I> and <I>h</I>. Class <I>D</I> derived from <I>C</I> overrides only function <I>h</I>, so the entries for <I>f</I> and <I>g</I> in <I>D</I>'s vtbl are the same as in <I>C</I>'s vtbl. Since neither <I>C</I> nor <I>D</I> overrides <I>g</I>, all three vtbl's have the same value for <I>g</I>'s entry, namely <I>B</I>'s <I>g</I>.<P>
In <A href="list6.htm">Listing 6</a>,
 <I>pc</I> has static type <I>C</I> *. But by the time program execution reaches the declaration<P>
<pre>B &amp;rb = *pc;</pre>
<I>pc</I> has dynamic type <I>D</I> *. Thus all the calls applied to <I>rb</I> use <I>D</I>'s vtbl.<P>
<h4><FONT COLOR="#000080"><A name="002C_0010">Pure Virtual Functions<A name="002C_0010"></FONT></h4></P>
Sometimes when you design a type hierarchy, you find that you don't want to create the hierarchy's base class object. Rather, the base class serves only as the specification for a common interface for objects of types derived from it.<P>
For example, in a hierarchy that implements a device-independent file system (such as the one I sketched in my last column), the base class <I>file</I> defines the properties common to all <I>file</I> types. The derived classes define specific <I>file</I> types, like <I>disk_file</I> or <I>tape_file</I>, that are types for the real-live file objects in the system. But there is no such thing as a <I>file</I> that is not a <I>disk_file</I>, or a <I>tape_file</I>, or some other device-specific <I>file</I>. The base class only specifies the common <I>file</I> interface.<P>
In my shape hierarchy, I never really wanted to create objects whose dynamic type is <I>shape</I>. Class <I>shape</I> is only supposed to define the common properties for shapes. I implemented class <I>shape</I> so that objects of that type appear to be points, not because I needed a shape that's a point, but because I hadn't yet presented a way to avoid defining the function bodies for virtual functions. In fact, with early C++ dialects, you had no choice but to define phony function bodies. Now you can simply declare the functions as pure virtual functions.<P>
You declare a function as a pure virtual function by adding the pure virtual specifier <I>=</I> <I>0</I> at the end of the function declaration. <A href="list7.htm">Listing 7</a>
shows the definition for class <I>shape with area, name,</I> and <I>put</I> as pure virtual functions.<P>
A base class with at least one pure virtual function is called an abstract base class. You cannot declare objects of an abstract base class. However, you can declare pointers and references to an abstract base class:<P>
<pre>shape s;             // error
void f(shape *ps);   // ok
shape &amp;rs;           // ok</pre>
If a derived class does not override every pure virtual function in the base class with an "impure" virtual function, then the derived class is also an abstract base class. For example, class <I>D</I> in <A href="list8.htm">Listing 8</a>
is an abstract base class because it fails to override pure virtual function <I>g</I> with a function definition.<P>
In the model implementation, the vtbl entry for a pure virtual function is a null pointer.<P>
<h4>References</FONT></h4></P>
<a name="2">Colvin</a> [1993]. Gregory Colvin. "Extending C for Object-Oriented Programming," <I>The C Users Journal</I>, Vol. 11, No. 7, July 1993.<P>
<a name="1">Ellis and Stroustrup</a> [1990]. Margaret A. Ellis and Bjarne Stroustrup. <I>The Annotated C++ Reference Manual</I>. Addison- Wesley.<P>

<h4><a href="../../../source/1994/jan94/saks.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
