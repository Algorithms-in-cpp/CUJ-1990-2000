


<HTML>
<HEAD>

<TITLE>September 1992/Standard C</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocsep.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Standard C<A name="01D7_00E1"><A name="01D7_00E1"></font></h2><P>
<h3 align="center"><A name="01D7_0000"><A name="01D7_0000">Bugs</h3><P>
<h3 align="center"><font color="#800000">P.J. Plauger</font></h3><hr><blockquote><P>
<P><i><A name="01D7_0000"><A name="01D7_0000">P.J. Plauger is senior editor of The C Users Journal. He is secretary of the ANSI C standards committee, X3J11, and convenor of the ISO C standards committee, WG14. His latest books are The Standard C Library, published by Prentice-Hall, and ANSI and ISO Standard C (with Jim Brodie), published by Microsoft Press. You can reach him at pjp@plauger.com.</i></P><P>
<h4><FONT COLOR="#000080"><A name="01D7_00E2">Introduction<A name="01D7_00E2"></FONT></h4></P>
For the past two years, I have devoted this column to the Standard C library. A side effect of that effort has been a book. (See P.J. Plauger, <I>The Standard C Library</I>, Prentice Hall, 1992.) The book includes most of the earlier columns on the subject. More recently, these columns have been excerpts from the book. I still have a few more episodes to present here before I turn my attention to other matters.<P>
Among other things, <I>The Standard C Library</I> contains a fairly complete implementation of that library, itself written in Standard C. (You can buy the code disk from The C Users Group. Look for the ad near the center of this magazine.) I've shown as much as I can of the code in these columns. I know that seeing working code always helps me understand a specification better. Other programmers report the same thing. The code doesn't have to be the only way to implement the spec. It doesn't have to be the best way. So long as it is fairly <I>exemplary</I>, it can be a big help.<P>
Of course, it's also nice if the code is correct. That's why I tested the code I presented fairly extensively. I had access to the popular C Validation Suite from Plum Hall. That ensured that the code conformed fairly closely to the C Standard. I also had customers help me test the math functions fairly extensively. That let me assert that these functions never lose more than two bits of precision. I even made my own set of (far less ambitious) test programs.<P>
Nevertheless, the code still appeared with quite a few errors. I am a mere mortal, like most programmers. Try as I might, I couldn't test the code nearly as well as it required. I keep finding errors at a steady rate long after the book hit the streets. Worse, <I>other people</I> keep finding errors as well. They have been uniformly polite about reporting the errors to me, which I deeply appreciate. (I appreciate both the politeness and the reports, for different reasons.) But I wish the bugs weren't there to find.<P>
I figure it's time to issue a new release of the code disk. (Version 1.1 is now available from The C Users Group. Existing customers can upgrade at reduced cost.) I also figure that I owe my readers a measure of disclosure. Just what sort of errors does a putative expert (me) make when trying to write good code? Here's your chance to find out.<P>
I lump the errors I made into four broad categories:<P>
<UL><li><I>formatting errors</I> &#151; ways in which I violated my own coding standards</li>
<li><I>C</I> + + <I>incompatibilities</I> &#151; ways in which the code fails to be upward compatible with C++</li>
<li><I>C</I> <I>Standard incompatibilities</I> &#151; ways in which I misconstrued the standard in writing the code</li>
<li><I>botches</I> &#151; out and out screw ups</li></UL>
I address these categories in order.<P>
<h4><FONT COLOR="#000080"><A name="01D7_00E3">Formatting Errors<A name="01D7_00E3"></FONT></h4></P>
The first category, formatting errors, ranges from the trivial to the important. At least, you can call the errors trivial if all you care about is code execution. Inconsistent spacing or inappropriate comments don't hurt the final product, but they do cause maintenance problems. I made a number of such errors, which I won't bother to present in detail here.<P>
I have always been religious about formatting source code uniformly. I believe that makes code more readable. It makes it more maintainable by others. And it makes it easier to scan with various text-processing tools. The price you pay in finicky typing and editing is repaid many times over.<P>
The style I adopted for this project differs from my earlier styles. I insisted, for example, that no single source file spread over more than two facing pages. (That's 110 lines of code.) It was particularly dense, as a result. It also led me to indulge in heroics from time to time. Fixing a large file without exceeding my self-imposed limit often cost hours of thought. That's a price worth paying <I>only</I> for a tutorial presentation. A typical coding project should avoid such nonsense.<P>
Some of my formatting errors came from learning this new style. The first files I wrote had the most lapses. Others I can ascribe to a steady evolution of the style. I didn't always go back and catch everything that needed changing. A few arose in the normal course of rewriting code to make it better. Sometimes I ended up leaving dead wood behind. The most flagrant example, to me at least, is this expression statement from <I>malloc</I>:<P>
<pre>   _Aldata._Plast = qb ? qb : NULL;</pre>
This, of course, reduces to:<P>
<pre>   _Aldata._Plast = qb;</pre>
The second form not only executes a tad faster, it is much more readable.<P>
My coding style naturally emphasized portability. I was annoyed, therefore, to find that my development C compilers were a bit lax on type checking. (I started out with Borland's Turbo C++ v. 1.0 and the Gnu C compiler on the VAX.) Both let me be cavalier about matching pointer types, for example. Only when I moved to other, more ANSI-compliant compilers did I pick up a spate of diagnostics. Again, these caused no execution errors on the platforms I exercised. But they did make the code less portable.<P>
One violation of my coding standards created an accident waiting to happen. The function <I>tmpnam</I> originally contained the following code:<P>
<pre>   char fname[L_tmpnam];
   
   tmpnam(fname);
   if ((str = fopen(fname, "wb+")) != NULL)
       {    /* file successfully opened */
       str-&gt;_Tmpnam = malloc(sizeof (fname) + 1);
       strcpy(str-&gt;_Tmpnam, fname);
       }</pre>
Note what happens when the <I>malloc</I> fails. The code bulls ahead and copies the temporary file name using a null pointer for the destination. It also leaves the temporary file open. Bad news. My improved version instead reads:<P>
<pre>   char fn[L_tmpnam], *s;
   
   if ((str = fopen((const char *)tmpnam(fn),
       "wb+")) == NULL);
   else if ((s = (char *)malloc(sizeof (fn) + 1))
       == NULL)
       fclose(str); str = NULL;
   else
       str-&gt;_Tmpnam = strcpy(s, fn);</pre>
This is much more hygienic.<P>
By rough count, over two dozen files have turned up formatting errors to date. I believe that all were well worth fixing.<P>
<h4><FONT COLOR="#000080"><A name="01D7_00E4">C + + Incompatibilities<A name="01D7_00E4"></FONT></h4></P>
A major regret is that I didn't make the library code C+ + compliant before I froze the book. I had a C++ compiler handy, but I was running out of time. (Correction &#151; I was running out of <I>extensions</I>. I had already run out of time.) It turned out that an hour's work did the job, but I didn't dare risk the effort before the book was done.<P>
C++ -compliant code is C code that also meets the rules of C++. It's what Tom Plum and Dan Saks call "typesafe C." I consider that term a bit stretched, but it's accurate enough. C++ is somewhat pickier than C in compiling even the common dialect. Code that survives both kinds of translators is bound to be more conservative than even Standard C requires.<P>
I had another reason to launder my library code for C++ land. The Standard C library is a significant component of your typical C++ library. It has already been blessed as such by X3J16/WG21, the joint ANSI/ISO committee developing the C++ standard. I wanted to make sure that the library I wrote works well with current and future implementations of C++. And I didn't want to require that it be compiled as C code.<P>
Finally, I can't help but observe that C++ is a common fixture in more and more C compiler packages. For many, the distinction between the two dialects is already blurring. (As editor of <I>CUJ</I>, I often see articles accompanied by code that the author says is C. But the comments are delimited by C++ -style double slashes.) I figure the less the library code cares about C/C++ distinctions, the more widely usable it will be.<P>
So for all these reasons, I stuffed the library through a C++ compiler and shook out the nits. Two language differences led to numerous changes. One was the meaning of void pointers. The other was the use of braces in initializers.<P>
ANSI C introduced type <I>pointer to void</I> to solve a specific problem. With the inclusion of function prototypes, the language could now both check and convert arguments to library function calls. But that led to problems with, for example, a number of the string functions. Typical existing C programs have been pretty diverse in the types of pointers used in calls to, say, <I>memcpy</I>. The tighter type checking would require all sorts of diagnostics where none had occurred before. We on the ANSI committee X3J11 knew that would be unacceptable for a C language standard.<P>
So we defined <I>pointer to void</I> as a generic data-object pointer type. It has the same representation as a character pointer, but much more lax conversion rules. In fact, you can convert between a void pointer and any other data-object pointer type without writing a type cast. That gives the behavior we wanted for function arguments and return values.<P>
In this way, we intentionally differed from the emerging C++ practice. Stroustrup envisioned <I>pointer to void</I> as the root of a pointer type system. It thus serves as a generic pointer, to be sure. But the conversion rules are generous only in one direction. You have to type cast a void pointer before you can assign it to any other data-object pointer. Thus, C and C++ work much the same way for function arguments. But for function return values, you have to write many more type casts to reassure C++.<P>
The primary culprits are the memory-allocation functions <I>malloc</I> and <I>calloc</I>. I had to change essentially every one of these calls to include a type cast. The string functions whose names begin with <I>mem</I> also tend to return void pointers. That was the second largest batch of changes.<P>
The third largest batch was data initializers. I found that I had much less latitude in writing braces in C++ than in C. Partially bracketed initializers are a no-no. But so too are braces around a scalar initializer, as in:<P>
<pre>static const double sqrt2 =
    {1.41421356237309505};    /* BAD C++ */</pre>
I still don't know whether this is a C++ requirement or a peculiarity of Turbo C++. I haven't read the draft C++ standard in sufficient detail to find out. In either event, I figure that the tighter rules are probably a good idea. C compilers have been notoriously inconsistent in how they interpret initializers with elided braces. Even the C Standard seems to confuse more people than it helps in this area.<P>
There were two places where I ran afoul of more specific dialect differences. I was foolish enough to define the <I>rename</I> function as:<P>
<pre>int (rename)(const char *old, const char *new)</pre>
Since <I>new</I> is a C++ keyword, this line produced mysterious diagnostics. I changed the argument names to <I>oldnm</I> and <I>newnm</I>.<P>
The second problem occurred when I defined an enumeration inside a structure:<P>
<pre>typedef const struct {
    const char *_Name;
    size_t_Offset;
    enum {L_GSTRING, L_NAME, L_NOTE, L_SET,
    L_STATE, L_STRING, L_TABLE, L_VALUE
    }_Code;
    .....}</pre>
In C, this is a compact way of defining the enumeration constants and the structure both at once. In C++, however, the enumeration constants go out of scope at the end of the structure declaration. I had to pull the enumeration outside and give it a name:<P>
<pre>enum _Lcode {
    L_GSTRING, L_NAME, L_NOTE, L_SET,
    L_STATE, L_STRING, L_TABLE, L_VALUE
    };
typedef const struct {
    const char *_Name;
    size_t _Offset;
    enum _Lcode _Code;
    ....}</pre>
I wasn't crazy about writing all the extra type casts that C++ requires. Otherwise, I felt that the changes I had to make in this category were for the better.<P>
<h4><FONT COLOR="#000080"><A name="01D7_00E5">C Standard Compatibility<A name="01D7_00E5"></FONT></h4></P>
I thought I knew C pretty well. The Plum Hall Suite showed up several places where I was wrong. Several nasty customer programs showed a few more. Even so, I've learned about another handful in the past year.<P>
The header <I>&lt;float.h&gt;</I> tells you all about the properties of the floatingpoint representation. I made a point of deriving all the macros from a mimimum number of parameters. I spent hours getting all the expressions just right, twisty as they are. Still, I ignored some learned advice about how to compute the number of effective decimal digits (<I>DBL_DIG, FLT_DIG</I>, and <I>LDBL_DIG</I>). I was wrong to do so.<P>
If <I>m</I> is the number of bits in a binary mantissa, you'd think at first blush that the number of decimal digits is <I>m*log</I><SUB>10</SUB><I>2</I>. Not so. The actual number is (<I>m</I>--1)*<I>log</I><SUB>10</SUB><I>2</I>. That led to numerous corrections to the files <I>xfloat.c</I>, where I kept the values used by the <I>&lt;float.h&gt;</I>, and to the test program <I>tfloat.c</I>.<P>
I developed this neat little language for specifying locales. Unfortunately, I didn't make it easy to specify the value of the macro <I>CHAR_MAX</I>, defined in <I>&lt;locale.h&gt;</I>. You need that to specify items such as <I>mon_grouping</I> in <I>struct lconv</I>. So I tossed in the caret ^ as a symbol with that value in locale-file expressions.<P>
When any of the <I>printf</I> functions fail, they are supposed to return <I>EOF</I>. I overlooked that subtlety and just returned the count of characters transmitted. I had to change a macro definition in the file <I>xprintf.c</I> to fix it.<P>
Another <I>printf</I> problem arose with the behavior of the call:<P>
<pre>   printf("|#x|", 0);</pre>
Should this produce | <I>0x0 </I>| or simply | <I>0 </I>|? Whatever your sense of aesthetics may conclude, the C Standard calls for the latter form. (It takes what X3J11 likes to call "a careful reading of the Standard" to find this out.) Luckily, I was able to add a simple qualifier to a test to change from the first result to the second.<P>
Finally, I was surprised to learn that <I>asctime</I> is weirder than I thought. It wants to print dates as "<I>Sun Dec 2 06:55:15 1979\n", not </I>as <I>"Sun Dec 02 06:55:15 1979\n"</I>. Unfortunately, the more general function <I>strftime</I> can only produce the second form. I had to introduce a nonstandard extension to <I>strftime</I> to suppress the leading zero on days of the month. I also had to change several other files, including the test program <I>ttime</I>.<I>c</I>, to deal with the consequences.<P>
All in all, however, I feel that I came pretty close to conforming to the C Standard from the outset. I'm happy and relieved to now conform even closer.<P>
<h4><FONT COLOR="#000080"><A name="01D7_00E6">Botches<A name="01D7_00E6"></FONT></h4></P>
The last category is the most embarassing. I can't argue that I was learning a new style or a new language. I can't argue that I missed a subtle point. I just plain made mistakes.<P>
Interestingly enough, the bulk of the errors took one of two forms:<P>
<UL><li>Ask me to compute <I>a--b</I> and there's a good chance I'll actually compute <I>b--a</I> (three errors).</li>
<li>Ask me to trim an interval by incrementing a pointer and I'll often miss by one element (three errors).</li></UL>
Each of us is a sucker for certain kinds of errors. I think I know what sorts of botches to look for more carefully in future in my own code.<P>
Here are the nasties I (and others) have caught to date in the library code:<P>
The function <I>setlocale</I> ends by constructing a name for the current locale. If the locale is mixed, the name has different category components separated by semicolons. I botched the test for no subcategories (writing (<I>n</I> == <I>0</I>) instead of (<I>n</I> == <I>1</I>)). I also failed to skip over the semicolons as I inserted them into the locale name.<P>
I wrote this really neat additional function called _<I>Fmtval</I>. It uses the detailed locale information to format numbers and currencies for you. The heart of the function is a two-dimensional array of format strings. Unfortunately, I got the subscripts backwards between the declaration and the references. Don't ask me how that botch survived testing &#151; I don't know myself.<P>
Locales need lots of translation tables. The function <I>_Makeloc</I> allocates them as needed. It also marks allocated tables to be freed if the locale proves to be flawed. I got cute and recycled a table element also used sometimes by calls such as <I>isalpha(EOF)</I>. The effect was to muck up the behavior of such calls sometimes. I had to get even cuter to rescue my cute trick. (You'd think that I'd know better by now than to overload fields this way. I don't.)<P>
The sort function <I>qsort</I> is hard to get right. I rewrote it several times before it started sorting sanely. I should have rewritten it once more. A careful reader discovered that I was shortening a sort interval too aggressively. Once again, my testing proved inadequate. I failed to throw sets of random data at <I>qsort</I>. Otherwise, I would have found the error much sooner.<P>
The UNIX version of <I>system</I> did a laughably poor job of invoking the shell. I got the arguments all wrong. How the code survived testing is another mystery. Probably I ended up linking in the standard version of <I>system</I> instead of my own.<P>
<I>strtok</I> is a function with an ugly interface that can be implemented with surprisingly little code. That's if you call the other string functions to do all the work. Unfortunately, I chose to call <I>strpbrk</I>, which can sometimes return a null pointer, instead of its hardier cousin <I>strcspn</I>. Rather than add checks for a null pointer return, I rewrote the code to call the better function.<P>
The function <I>strxfrm</I> translates a string into a form suitable for performing locale-dependent orderings. My version calls another function <I>_Strxfrm</I> to do the actual translation. On each call, it passes the space left in the user-supplied buffer. Only I passed the negative of the proper amount. Thanks to unsigned arithmetic, that happens to work right most of the time. If the translation doesn't fit in the buffer, however, it writes beyond the end.<P>
I also got a subtraction backwards in <I>difftime</I>:<P>
<pre>   return (t0 &lt;= t1 ? (double)(t1 - t0)
       : -(double)(t1 - t0)); /* WRONG */</pre>
The complex expression is designed to work right even if the times (of type <I>time_t</I>) are unsigned. But the negative case is obviously wrong, if you think about it. Obviously, I didn't think about it enough. The correct version reads:<P>
<pre>   return (t0 &lt;= t1 ? (double)(t1 - t0)
       : -(double) (t0 - t1));</pre>
My last bogus subtraction occurred in computing local times. I followed the usual convention in specifying time zones &#151; offsets increase going West from Greenwich. Unfortunately, I corrected local time as if offsets increase going East. Luckily, I was able to change the sign of just one return value, in function <I>_Tzoff</I>, to fix everything.<P>
That bug led me to my last (or latest) discovery. Seems the code I wrote to parse the environment variable <I>TZ</I> was nonsense. It got all sorts of things wrong. I rewrote it (and tested it) just before I froze v. 1.1 of the code disk.<P>
<h4><FONT COLOR="#000080"><A name="01D7_00E7">Conclusion<A name="01D7_00E7"></FONT></h4></P>
The lessons to learn from this experience are hardly new. Programmers are not very good at testing their own code, however experienced they may be. Validation testing can catch the obvious conformance bugs, but not always the subtle ones. And they are not very helpful in testing the internal logic of a given implementation.<P>
I was at my best when I took time to write good tests. I was at my worst when I was in a hurry. I was helped immesurably by having tests developed by independent agencies.<P>
On the bright side, I can report that the rate of new bug discoveries is dropping off. (I like to think that that doesn't reflect a growing disinterest. I have reasons to believe otherwise.) Most of the reports I've received the past few months have either been repeats or misunderstandings on the part of the reporters. I appreciate even those. At the least, they show where the presentation or the code is confusing.<P>
I look forward to feedback on the new code disk. Keep those cards and e-mail rolling in, folks. And thanks.<P>
</BLOCKQUOTE>
</BODY>
</HTML>
