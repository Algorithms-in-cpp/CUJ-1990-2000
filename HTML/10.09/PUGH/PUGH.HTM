


<HTML>
<HEAD>

<TITLE>September 1992/Q & A</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocsep.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Q &amp; A<A name="01E2_00E7"><A name="01E2_00E7"></font></h2><P>
<h3 align="center"><A name="01E2_0000"><A name="01E2_0000">Pointers to Functions and Double Pointers</h3><P>
<h3 align="center"><font color="#800000">Ken Pugh</font></h3><hr><blockquote><P>
<P><i><A name="01E2_0000"><A name="01E2_0000">Kenneth Pugh, a principal in Pugh-Killeen Associates, teaches C language courses for corporations. He is the author of C Language for Programmers and All On C, and was a member on the ANSI C committee. He also does custom C programming for communications, graphics, image databases, and hypertext. His address is 4201 University Dr., Suite 102, Durham, NC 27707. You may fax questions for Ken to (919) 489-5239. Ken also receives email at kpugh@dukemvs.ac.duke.edu (Internet).</i></P><P>
For those on the West Coast, I'll be speaking at <I>C++ in Action</I>, September 21-25, at the Santa Clara Marriott. P.J. Plauger will be a keynote speaker.<P>
<B>Q</B><P>
I have run into a problem using an array of pointers to functions. The code in <A href="list1.htm">Listing 1</a>
generates the error message <I>size of structure array not known</I> when compiled with TC2.0.<P>
How can I access the two other functions in <I>array[]</I><I> </I>without using the notation <I>ptr=array[i]</I>; ? Why is it necessary to assign <I>ptr=array[0]</I>; rather than <I>ptr=array;</I>?<P>
Per Borgvad<br>
Norway<P>
<B>A</B><P>
I'll take a simpler example which will show what the problem is. Let's use <I>char</I> pointers. Consider the code<P>
<pre>char *char_pointer_array[] = {
"ABC", "DEF", "GEH"}; char
*char_pointer;</pre>
<I>char_pointer_array</I> is an array of <I>char</I> pointers. The name itself becomes, in most expressions, a pointer to <I>char</I> pointers (i.e. a double pointer). An element of <I>char_pointer_array</I> is a<I> </I><I>char</I> pointer. You can assign<P>
<pre>char_pointer =
char_pointer_array [0];</pre>
The value of *<I>char_pointer </I>is<I> A,</I> a <I>char</I><I>.</I> If you increment it<P>
<pre>char_pointer++;</pre>
then the value of *<I>char_pointer</I> would be <I>B</I>, the next <I>char</I> in the string. You cannot assign<P>
<pre>char_pointer : char_pointer_array;</pre>
since that would be attempting to assign a double pointer to a single pointer. If you had a variable as<P>
<pre>char **pointer_to_char_pointer;</pre>
and you assign<P>
<pre>pointer_to_char_pointer = char_pointer_array;</pre>
then its value is the address of <I>char_pointer_array[0]</I>. The value of *<I>pointer_to_char_pointer</I> is the address of the string <I>ABC</I><I>.</I> The value of **<I>pointer_to_char_pointer</I> is <I>A</I>, a <I>char</I>. If you increment it as<P>
<pre>pointer_to_char_pointer++;</pre>
then it contains the address of <I>char_pointer_array[1]</I>. The value of *<I>pointer_to_char_pointer</I> is the address of the string <I>DEF</I><I>.</I> The value of **<I>pointer_to_char_pointer</I> is <I>A</I>, a <I>char.</I><P>
In your question, <I>array</I> is an array of pointers to functions and <I>ptr</I> is a pointer to a function. You can make the assignment<P>
<pre>ptr = array[0];</pre>
because they are both pointers to functions. Of course, you could also make the assignment<P>
<pre>ptr = dummy1;</pre>
The one operation you cannot perform with a pointer to function is to increment it. The reason is the size of the thing pointed to (a function) is not a fixed size, so the increment operation is meaningless.<P>
If you have a variable as<P>
<pre>void (**pointer_to_function_pointer) ();</pre>
you can assign the array name to it, since it becomes a pointer to function pointers, as in<P>
<pre>pointer_to_function_pointer = array;</pre>
<I>pointer_to_function_pointer</I> contains the address of <I>array[0]. *pointer_to_function_pointer</I> is the address of <I>dummy1.</I> You can increment this variable, since the object it points to (pointers to functions) have fixed sizes (typically two or four bytes, depending on the compiler/processor). If you execute<P>
<pre>pointer_to_function_pointer++;</pre>
<I>pointer_to_function_pointer</I> now contains the address of <I>array[1]</I>. *<I>pointer_to_function_pointer</I> is the address of dummy2.<P>
To call the actual function (<I>dummy2</I>), you should use two indirection operators<P>
<pre>(**pointer_to_function_pointer) ();</pre>
You can leave off one of the # operators in ANSI C, but I prefer to use them to keep things consistent.<P>
As an example, if you wanted to call each function in turn, you could code it as in <A href="list2.htm">Listing 2</a>.
<P>
Older C compilers do not allow you to initialize automatic aggregates (arrays and structures). However static aggregates can be initialized. I suggest using static, even with ANSI compilers, since the initialization time is less. If you really need an array initialized every time into a function, simply <I>memcpy</I> an initialized static array into an automatic array.<P>
<B>Q</B><P>
The following code (<A href="list3.htm">Listing 3</a>)
 was extracted from a program, I wrote some time ago. Everything worked fine until I recompiled the program with MS C 6.0A (originally it was compiled with MS C 5.1). Suddenly the <I>sscanf</I> function didn't behave as I expected it to.<P>
All that <I>sscanf</I> has to do is to read two characters and three integers from an input string. The first format-specifier <I>%*[^PR]</I> is used to throw away any garbage that might precede the data. This works well if there is any garbage to throw away (as in <I>string[0]</I>). If not, the <I>sscanf</I> works with MS C 5.1 but it doesn't work with MS C 6.0 (the scan stops, before any data is read).<P>
I tried different compilers and got the results shown in <A href="tab1.htm">Table 1</a>.
 Now the question: "Who is right?"<P>
G. Prodasla<br>
Germany<P>
<B>A</B><P>
The standard states:<P>
"<I>[ </I>matches a nonempty sequence of characters from a set of expected characters (the scanset). The corresponding argument shall be a pointer to the initial character of an array large enough to accept the sequence and a terminating null character, which will be added automatically...."<P>
The operative work is <I>nonempty.</I> The <I>string[1]</I> input had no characters that were in the scanset. Therefore no conversion was performed. <I>FAIL</I> was the correct result. MSC 6.0A and Zortech C++ 3.0 are ANSI standard. Borland TC+ + 1.0 and MSC 5.1 are not.<P>
Let me explain your format statement for the benefit of our readers. You used * in the format specifier, which is the assignment suppression flag. Therefore you did specify the pointer to hold the characters. This assignment suppression flag can be used with any of the format specifiers.<P>
With the left bracket (<I>[</I>) format specifier, the left and right brackets surround a list of characters (the scanset) which are to be scanned in. Characters are read and placed in the array which was passed until a character not in the scanset is read. That is pushed back onto the input stream.<P>
The circumflex (^), as the first character following the left bracket, reverses the logic of the scanset. The scanset contains all characters that do not appear in the format up to the matching right bracket. So <I>[^PR]</I> states that you want to match any characters that are not <I>P</I> or <I>R</I>.<P>
<B>Q</B><P>
Thank you for your answer of my question from Oct. 26, 1991 in CUJ April 1992, page 105.<P>
I did not explain my question exactly enough. Often I only need <I>myfunction1</I> and <I>myfunction2</I> isolated and sometimes together. So I need <I>myfunction3</I> for ease of use, that is, if I need <I>myfunction1</I> and <I>myfunction2</I> together. In reality, I have about 10 functions, which I use sometimes isolated and sometimes together.<P>
With your answer I now can only use<I> myfunction1 </I>and <I>myfunction2</I> together, but not isolated (or did I see it wrong?). Thank you for your answer.<P>
Willi Fleischer<br>
Moerfelden, Germany<P>
<B>A</B><P>
For the benefit of our readers, let me summarize the previous question and answer. The writer wanted to be able to call functions that had variable parameter lists (<I>myfunction1</I>), from within a function that had a variable parameter list (<I>myfunction3</I>) (see <A href="list4.htm">Listing 4</a>)
. The calling function could get a <I>va_list</I> argument from its parameter list, but could not pass it to the called function.<P>
You will need to come up with some wrapper functions &#151; so that each function will have both a direct way to get to it and one that expects a <I>va_list</I> type argument. This is only a little bit of overhead. For example, you would have two functions for <I>myfunction1</I><I>:</I><P>
<pre>void myfunction1_va_list(char *format, va_list arg_ptr);
void myfunction1_direct(char *format, ... );</pre>
The latter function would look like<P>
<pre>void myfunction1_direct(char *format, ....)
   {
   va_list arg_ptr;
   va_start(arg_ptr, format);
   my_function1_va_list(format, arg_ptr);
   va_end (arg_ptr);
   };</pre>
The function you use the most could be called <I>myfunction1</I><I> </I>and the other could use the suffix.<P>
<B>Q</B><P>
I want to exceed the DOS 640K boundary. How do I do that?<P>
George Britwell<br>
San Francisco, CA<P>
<B>A</B><P>
This is a simple question with a long answer. There are a number of questions to answer. First, with what do you want to exceed the boundary &#151; code or data? Second, with what machines do you need to be compatible &#151; 8086, 236, 386?<P>
If you have a lot of code, there are several ways to exceed the boundary and stay compatible with all machines. You can use overlays. Most compiler/linker vendors provide some sort of overlay mechanism. It takes a little bit of work to be sure that you link your modules into the proper overlays. If you have structured your code well, this should be minor work.<P>
You can use dynamic overlays (such as provided by RTLINK and Borland's Zoom). You do not need to specify the overlay structure as with the prior method. The linker/dynamic loader will insure that the modules are loaded when needed. For many programs, this will work about as well as the prior method. It will work much better than the prior one if you did a poor job of laying out your overlays.<P>
Overlays work for code. The latest version of RTLINK overlays also work for static and external data, but not for allocated memory. With large data items, you might do best to keep them on a disk file and use a function to access the particular one of interest. This can be hidden from the program by clever function calls (see my book <I>All on C</I> for an example).<P>
If your program is to be run on machines for which you specify the hardware, then you can exceed the boundary by using either expanded or extended memory. Expanded memory is more compatible with the early processors. Extra memory is mapped into the 1MB address space at particular segment addresses. By calling an EMS manager, you can switch which block of expanded memory is at the address at any particular time.<P>
Expanded memory is simple to use for data items that do not need to be accessed simultaneously. It is very quick and efficient. No special version of MS-DOS is required, just some calls to interrupts. Michael Young's <I>MS-DOS Advanced Programming</I> (Software Engineering, Box 5068, Mill Valley, CA 94942) has information on how to access it.<P>
Extended memory is designed to be used in 80286 and 80386 protected mode as a type of virtual memory. The segment portion of an address is treated as a virtual segment. A page table is set up that translates this virtual segment into a real segment, which is then appended to the offset. This table also includes a few bits per entry that specify the protection mode (read only, read-write).<P>
There are several DOS extenders that can be purchased to utilize the protected mode. You compile a program using the large memory model of your current compiler. The object code can then be linked into a protected-mode executable and run using the DOS extender.<P>
There are a lot of details involved here, including how to access real memory (e.g. the screen) from your protected-mode program. Suffice it to say that it is possible. A good review of DOS extenders is in <I>Tech Specialist</I>, February 1991.<P>
Without using an extender, memory outside of the 640K boundary can be set up as a RAM disk. Microsoft supplies a RAM disk program with DOS 5.0. The disk could hold large blocks of data which don't fit into regular memory. They will be accessible much faster than if they were stored on a normal disk.<P>
Also for data, you can purchase several packages which replace the allocation functions. The <I>malloc</I> family of functions uses real memory with most compilers. These packages permit allocation of memory from extended memory, expanded memory, or even disk. Where the actual data is stored is transparent to your program. I've not used one of these, but several are advertised on the pages of this magazine.<P>
Or you could compile your program in 386 mode and get rid of the entire problem (assuming you have enough real memory). However, if you have to have compatibility with earlier processors, then this is not an option.<P>
<h4><FONT COLOR="#000080"><A name="01E2_00E8">Big File Notes<A name="01E2_00E8"></FONT></h4></P>
If you send out large data files to your users, of which only a portion represents data that has been updated, you might be interested in PATCH from the Pocketsoft people. The program can analyze the differences between your old file and your new file and create a delta file. This delta file might fit on a single disk. The user has a corresponding program (for which you get royalty-free distribution rights) for using the delta to update his/her data file. (KP)<P>
<h4><FONT COLOR="#000080"><A name="01E2_00E9">Non-ANSI =-<A name="01E2_00E9"></FONT></h4></P>
I would like to respond to the question from Dr.-Ing. Dieter Scharpf in the May issue, where he asks whether an ANSI-conforming compiler has the liberty to treat =- as an operator. You answered that =- is not a valid operator in ANSI C, and I agree completely. That form of compound assignment operator is considered an anachronism, used by some older versions of pre-ANSI C.<P>
Dr.-Ing. Scharpf then implies that the C compiler on his HP 9000 Series 700 incorrectly compiled the statement <I>x</I> =- <I>1.0</I>; as an instruction to subtract 1.0 from <I>x</I>. That would not be correct for an ANSI-conforming compiler, and the HP C compiler on that platform is certainly not intended to behave that way. In fact, I know of no HP C compiler that does recognize =-, except to produce a diagnostic warning that it will be treated as two separate operators. I have tried to duplicate the described misbehavior, but the compiler stubbornly generates the correct code, which is to assign -1.0 to <I>x</I>.<P>
If Dr.-Ing. Scharpf can duplicate the incorrect behavior he describes, we would very much appreciate a defect report and a sample program from him. By the way, I have one comment regarding the answer that you gave. Technically, the expression <I>x</I><I>=-</I><I>1</I> consists of four tokens, not three. The minus sign in that expression is a unary arithmetic operator, and not part of the integer constant.<P>
Walter Murray<br>
Mountain View, California<P>
Contrary to Dr. Dieter Scharpf's experience, I cannot obtain the archaic non-ANSI interpretation of =- with HP9000/700, HP-UX version 8.05. I tried this with the bundled non-ANSI compiler and with the optional ANSI <I>cc -</I><I>Aa</I> and non-ANSI compilers. All produced the modern interpretation, with no warning. Generally I have found HP C to be reasonably standard in its behavior, unlike their other languages.<P>
Tim Prince<br>
San Diego, CA<P>
Thanks for your responses. I've seen warnings on other compilers, but have never run into one that compiled it wrong. (KP).<P>

<h4><a href="../../../source/1992/sep92/pugh.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
