


<HTML>
<HEAD>

<TITLE>September 1992/Stepping Up To C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocsep.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Stepping Up To C++<A name="01D9_00E3"><A name="01D9_00E3"></font></h2><P>
<h3 align="center"><A name="01D9_0000"><A name="01D9_0000">Initialization vs. Assignment</h3><P>
<h3 align="center"><font color="#800000">Dan Saks</font></h3><hr><blockquote><P>
<P><i><A name="01D9_0000"><A name="01D9_0000">Dan Saks is the owner of Saks &amp; Associates, which offers consulting and training in C and C++. He is secretary of the ANSI C++ standards committee, and also contributing editor for Windows/DOS Developer's Journal. Dan recently finished his first book, C++ Programming Guidelines, written with Thomas Plum. You can write to him at 393 Leander Dr., Springfield, OH 45504, or dsaks@wit-tenberg.edu (Internet), or call (513)324-3601.</i></P><P>
In C++, initialization and assignment are similar, but clearly distinct, operations. The distinctions pervade the language, and understanding them is an important part of learning to program in C++.<P>
Although C also draws distinctions between initialization and assignment, the differences are not nearly so profound. For example, in C you usually can't distinguish the behavior of<P>
<pre>void f(T i)
    {
    T v=i;
    ...
    }</pre>
from the behavior of<P>
<pre>void f(T i)
    {
    T v;
    v = i;
    ...
    }</pre>
whenever <I>T</I> is a scalar (arithmetic or pointer), <I>struct</I>, or union type. That is, declaring an auto scalar, <I>struct</I>, or union variable <I>v</I> with initial value <I>i</I> generates the same code as declaring <I>v</I> with no initial value and then immediately assigning <I>i</I> to <I>v</I>. For the most part, C language data types have the same semantics in C++, so the preceding examples behave the same in C++ as they do in C.<P>
However, if you change <I>T</I> to a uniquely C++ type, like a reference type or a class type with constructors and destructors, then the examples might behave quite differently from each other. In fact, you can even declare <I>T</I> as a class type such that one of the above examples is valid while the other is not.<P>
The examples behave differently in C++ because initialization is different from assignment. Although I've contrasted initialization with assignment at various times in earlier columns, the issues are so important they deserve another, more detailed, look.<P>
<h4><FONT COLOR="#000080"><A name="01D9_00E4">Copying Objects<A name="01D9_00E4"></FONT></h4></P>
Objects are copied not only in initializations and assignments, but also in some less obvious places like argument passing and function return. For example, consider the function<P>
<pre>T f(T a)
    {
    T b;
    ...compute b from a ...
    return b;
    }</pre>
which accepts an argument of type <I>T</I> and returns a <I>T</I>. The compiler translates a call such as<P>
<pre>T x, y;
...
y = f(x);</pre>
into code that copies the value of actual argument <I>x</I> to formal parameter <I>a</I> just before it jumps to <I>f</I>. Similarly, the return statement in <I>f</I> generates code that copies the value of <I>b</I> to a temporary location (possibly machine registers) set aside to hold the return value. After returning, the assignment expression copies the function return value from the temporary to the object denoted by <I>y</I>.<P>
You might reasonably expect that C and C++ treat argument passing the same. But the language definitions use different words to describe argument passing semantics. The C standard says, "In preparing to call a function, the [actual] arguments are evaluated, and each [formal] parameter is assigned the value of the corresponding argument." On the other hand, the ARM (<I>The Annotated C++ Reference Manual</I>) states, "When a function is called, each formal argument is initialized with its corresponding actual argument." In short, C treats argument passing as assignment, but C++ treats it as initialization.<P>
There's a corresponding difference in the way the languages describe the <I>return</I> statement. The C standard states, "If the [return] expression has a type different from that of the function in which it appears, it is converted as if it were assigned to an object of that type." The C++ version of the same rule is, "If required, the expression is converted, as in an initialization, to the return type of the function in which it appears." Function return is an assignment in C, but an initialization in C++.<P>
Why the difference? For the C language types (common to C and C++), there really isn't any. C++ changed the wording of these rules to accommodate references and class objects.<P>
<h4><FONT COLOR="#000080"><A name="01D9_00E5">Initializing and Assigning References<A name="01D9_00E5"></FONT></h4></P>
Initializing a reference is markedly different from assigning to it. I described references in detail in an earlier column (<I>CUJ</I> September 1991), but they are an important part of this discussion, and worth reviewing.<P>
A declaration like<P>
<pre>int i, j;
...
int &amp;ri = i;</pre>
initializes (binds) <I>ri</I> to refer to <I>i</I>. It copies the address of <I>i</I> to the pointer that implements <I>ri</I>. On the other hand, a subsequent assignment to <I>ri</I> such as<P>
<pre>ri = j;</pre>
copies the value of <I>j</I> to the object referenced by <I>ri</I>.<P>
The initializer for a non-<I>const T &amp;</I> must be a modifiable lvalue of type <I>T</I>. Thus, neither<P>
<pre>double &amp;rd1 = 0.0;
double &amp;rd2 = i;</pre>
are valid (where <I>i</I> is an <I>int</I> as declared above). However, the initializer for a <I>const T &amp;</I> may have any type convertible to <I>T</I>, and it may even be an rvalue. Thus both<P>
<pre>const double &amp;rd1 = 0.0;
const double &amp;rd2 = i;</pre>
are valid. The compiler binds <I>rd1</I> to the address of a temporary <I>double</I> object initialized to 0.0, and binds <I>rd2</I> to a different temporary <I>double</I> object initialized by the value of <I>i</I> promoted to <I>double</I>.<P>
When you consider functions with reference arguments, it's not hard to see why C++ treats argument passing as initialization rather than assignment. For example, think about what happens when you call <I>f(i)</I> given the declarations<P>
<pre>int i;
void f(int &amp;r);</pre>
If argument passing behaved like assignment, then calling <I>f(i)</I> would assign <I>i</I> to the object referenced by formal parameter <I>r</I>. But then what does <I>r</I> refer to? Nothing, unless you decide the compiler should bind it to a temporary. But then any change to <I>r</I> inside <I>f</I> would alter the temporary object rather than the actual argument <I>i</I>. And, when the function returned, it would discard both <I>r</I> and the temporary, leaving <I>i</I> unchanged. Clearly, that is not the intent of passing non-<I>const</I> reference arguments. The intent is to bind formal parameter <I>r</I> to actual argument <I>i</I> (by initialization!) so that any change to <I>r</I> inside <I>f</I> alters <I>i</I> directly.<P>
There was a time when C++ compilers bound non-<I>const</I> references to temporaries. For example, early compilers let you call <I>f(12)</I>, binding <I>r</I> to a temporary <I>int</I> initialized to 12. Even worse, when you wrote<P>
<pre>float x;
void g(double &amp;r);</pre>
and called <I>g(x)</I> expecting <I>g</I> to alter <I>x</I>, you'd find that <I>x</I> never changed. Rather, the call would bind <I>r</I> to a temporary <I>double </I>initialized with the value of <I>x</I> promoted to <I>double</I>. This behavior proved to be, in the words of the ARM, "a major source of errors and surprises." Thus, binding a non-<I>const </I>reference to a temporary is now an error.<P>
<h4><FONT COLOR="#000080"><A name="01D9_00E6">Copying Class Objects<A name="01D9_00E6"></FONT></h4></P>
C++ uses constructors to initialize class objects, and uses assignment operators to assign to class objects. For example, if <I>a</I> is a previously declared object of class <I>X</I>, the declaration<P>
<pre>X b = a;</pre>
initializes <I>b</I> with a copy of <I>a</I> using <I>X</I>'s copy constructor. In contrast,<P>
<pre>X b;
...
b = a;</pre>
initializes <I>b</I> using <I>X</I>'s default constructor, and then replaces <I>b</I>'s value with a copy of <I>a</I>'s value using one of <I>X</I>'s assignment operators.<P>
Since argument passing is initialization, passing a class object by value calls a constructor. For example, given function <I>f</I> declared as<P>
<pre>void f(X x);</pre>
the call <I>f(y)</I> initializes formal parameter <I>x</I> using an <I>X</I> constructor that takes <I>y</I> as an argument. If <I>y</I> is an <I>X</I> object, the call uses the copy constructor. If <I>y</I> has some other type, the compiler uses whichever constructor accepts <I>y</I> as an argument.<P>
A function that returns a class object initializes its return value by calling a constructor. For example,<P>
<pre>X f(int i)
    {
    int j = i;
    ...
    return j;
    }</pre>
initializes the temporary <I>X</I> object returned by <I>f</I> using a constructor that accepts an <I>int</I> argument. A call such as<P>
<pre>X a;
...
a = f(10);</pre>
copies the <I>X</I> object returned by <I>f</I> to a using one of <I>X</I>'s assignment operators.<P>
In earlier columns, I introduced constructors and the default constructor (<I>CUJ</I> May 1991), copy constructors (<I>CUJ</I> September 1991), and assignment operators (<I>CUJ</I> January 1992). However, I intentionally omitted details that were inappropriate at the time. These functions are very important in C++ programming, and worth exploring in greater detail.<P>
<h4><FONT COLOR="#000080"><A name="01D9_00E7">Constructors and Default Constructors<A name="01D9_00E7"></FONT></h4></P>
A constructor for a class <I>X</I> is a special member function of <I>X</I> that initializes an <I>X</I> object when it is created. A constructor for class <I>X</I> always has the name <I>X</I>. For example,<P>
<pre>class X
    {
public:
    X(int n);
    ...
    };</pre>
has a constructor that accepts a single <I>int</I> argument. Hence, a declaration such as<P>
<pre>X x0(k);</pre>
(where <I>k</I> is an <I>int</I>) not only allocates storage for <I>x0</I>, but also applies the constructor to <I>x0</I> using <I>k</I> as the argument to the constructor.<P>
A constructor may have formal parameters, but not a return type. Constructors may be overloaded. For example,<P>
<pre>class X
    {
    x();
    X(int n);
    ...</pre>
has two constructors. The compiler selects the constructor it calls based on the argument list in the declaration. For example, the declaration<P>
<pre>X x1(10);</pre>
invokes <I>X(int n)</I>, passing 10 as the value of <I>n</I>.<P>
A declaration with no argument list, such as<P>
<pre>X x3;</pre>
calls the default constructor, <I>X()</I>. In general, a default constructor is any constructor that can be called with no arguments. Thus, a constructor with default argument values for all of its parameters is also a default constructor. For example, if the declaration<P>
<pre>X x3;      // calls X();</pre>
has the same effect as<P>
<pre>X x3(0);   // calls X(int n);</pre>
then you can combine the two constructors into a single constructor with a default argument, as in<P>
<pre>class X
    {
public:
    X(int n = 0);
    ...</pre>
Then the declaration<P>
<pre>X x3;</pre>
invokes <I>X(int n)</I>, supplying 0 as the value of <I>n</I>.<P>
Always remember that<P>
<pre>X x4(); // surprise?!</pre>
is not a declaration for an <I>X</I> object &#151; it's a declaration for a function <I>x4</I> that accepts no arguments and returns an <I>X</I>.<P>
<h4><FONT COLOR="#000080"><A name="01D9_00E8">Copy Constructors<A name="01D9_00E8"></FONT></h4></P>
A copy constructor is a constructor that initializes an object by copying a single object of the same type. Typically, you declare the copy constructor for class <I>X</I> as<P>
<pre>X(const X &amp;x)</pre>
But in general, any constructor for class <I>X</I> that can be called with a single argument of type <I>X</I> is a copy constructor. Thus, any of the following<P>
<pre>X(X &amp;x)
X(const X &amp;x, const char *p = 0)
X(X &amp;x, size_t n = 100)</pre>
is a valid alternative copy constructor for class <I>X</I>. However, <I>X's</I> copy constructor may not have an argument of type <I>X</I>, so that <I>X (X x)</I> is not valid.<P>
In effect, a copy constructor with a <I>const</I> argument promises not to change the object it copies. (This is true for any function with a <I>const</I> reference argument.) In most cases, this is what you want. A copy constructor with a non-<I>const</I> argument reserves the right to change the object it copies. I have never had occasion to write one. I guess these might be useful if your objects need to know if they have been copied.<P>
A class X can overload its copy constructors with both <I>const</I> and non-<I>const</I> arguments. For example, class <I>X</I> can have both<P>
<pre>X(const X &amp;)
X(X &amp;)</pre>
as copy constructors. In this case, when you declare an <I>X</I> object as a copy of another <I>X</I> object, the compiler uses <I>X(const X &amp;) </I>if the object being copied is a <I>const</I> object, and uses <I>X(X &amp;)</I> if the object being copied is non-<I>const</I>.<P>
For example, in <A href="list1.htm">Listing 1</a>,
 the declaration<P>
<pre>X x1(3);</pre>
declares <I>x1</I> as a non-<I>const</I> object using the constructor <I>X (int)</I>. The declaration<P>
<pre>const X x2(x1);</pre>
declares <I>x2</I> as a <I>const</I> object. However, it uses the constructor <I>X(X &amp;)</I>, not <I>X(const X &amp;)</I>, because the object it copies, <I>x1</I>, is a non-<I>const</I> object. The last declaration,<P>
<pre>X x3(x2);</pre>
declares <I>x3</I> as a non-<I>const</I> object initialized by copying <I>x2</I>. It uses <I>X(const X &amp;)</I> because <I>x2</I> is a <I>const</I> object. In short, the compiler selects the copy constructor to match the <I>const</I>-ness of the object being copied, not the <I>const</I>-ness of the object being declared.<P>
If class <I>X</I> has only <I>X(const X &amp;)</I> as its copy constructor, then every declaration needing a copy constructor uses it. There's no problem if the copied object is non-<I>const</I> &#151; you can always bind a <I>const</I> references to a non-<I>const</I> object. However, if class <I>X</I> has only <I>X(X &amp;x)</I> as its copy constructor, you cannot use it to copy <I>const</I> objects.<P>
For example, if you delete the <I>X(const X &amp;x)</I> constructor from <A href="list1.htm">Listing 1</a>,
 then the declaration<P>
<pre>X x3(x2);</pre>
becomes an error. The compiler will try to use <I>X(X &amp;x)</I> as the copy constructor, only to find that it cannot bind the non-<I>const </I>reference argument <I>x</I> to <I>const</I> object <I>x2</I>.<P>
<h4><FONT COLOR="#000080"><A name="01D9_00E9">The = Operator<A name="01D9_00E9"></FONT></h4></P>
For the most part, C++ treats the = operator as it does any other overloaded operator. For an object <I>a</I> of class <I>X</I>, the compiler interprets the expression <I>a = b</I> as the function call <I>a.operator=(b)</I>. The compiler selects whichever <I>X::operator</I>= accepts <I>b</I> as an argument.<P>
As in C, an = appearing in a C++ declaration indicates the presence of an initializer, as in<P>
<pre>X a = b;</pre>
This syntax is valid even when <I>X</I> is a class with constructors. Intuitively, the declaration means what you think it means &#151; it declares <I>a</I> as an <I>X</I> object initialized by <I>b</I>. In this context, the = operator doesn't call an <I>X::operator=</I>; it calls a constructor.<P>
Which brings me to one of my favorite C++ quiz questions: If <I>X</I> is a class with constructors, what if any, is the difference between<P>
<pre>X a(b);</pre>
and<P>
<pre>X a = b; // ?</pre>
Their meanings are very similar. In fact, if <I>b</I> is also of type <I>X</I>, the declarations mean the same thing, namely, "initialize <I>a</I> with a copy of <I>b</I> using <I>X</I>'s copy constructor." But, when <I>b</I> is not an <I>X</I>, the two declarations are subtly different. Whereas,<P>
<pre>X a(b);</pre>
means "initialize <I>a</I> using an <I>X</I> constructor that accepts <I>b</I> as an argument,"<P>
<pre>X a = b;</pre>
means "construct a temporary <I>X</I> object using an <I>X</I> constructor that accepts <I>b</I> as an argument, and copy the temporary to <I>a</I> using <I>X</I>'s copy constructor." More succinctly, it's equivalent to<P>
<pre>X a(X(b));</pre>
The ARM notes that a good compiler will often optimize away the temporary and initialize <I>a</I> directly from <I>b</I>. Most compilers do. If the compiler can't avoid creating the temporary, it must destroy it by calling <I>X's</I> destructor.<P>
An optimizing compiler must not forget that = initializers have different semantics from <I>()</I> initializers. For example, suppose <I>b</I> is an <I>int</I>, and you declare <I>X</I> as<P>
<pre>class X
    {
public:
    X(int);
private:
    X(const X &amp;);
    ...
    };</pre>
so that the copy constructor is private. (Constructors, like all other member functions, are subject to access specifiers.) Then the declaration<P>
<pre>X a(b);</pre>
works fine, as it always did, but now<P>
<pre>X a = b;</pre>
is an error, because the copy constructor is private. Even if the compiler can eliminate the temporary, it can't ignore the access restriction.<P>
And by the way, if <I>X</I> is a scalar,<P>
<pre>X a(b);</pre>
is supposed to be the same as<P>
<pre>X a = b;</pre>
For example, you should be able to initialize <I>int n</I> to 1 by writing either<P>
<pre>int n = 1;</pre>
or<P>
<pre>int n(1);</pre>
Unfortunately, not all compilers are yet up to this task.<P>
<h4><FONT COLOR="#000080"><A name="01D9_00EA">Generated Copy Constructors<A name="01D9_00EA"></FONT></h4></P>
If you don't declare a copy constructor for a class, the compiler typically defines one for you. If all the data members of <I>X</I> are scalar types (which do not have constructors), or class objects with copy constructors accepting <I>const</I> reference arguments, then the compiler declares <I>X</I>'s copy constructor as<P>
<pre>X(const X &amp;x)</pre>
Otherwise, the declaration is<P>
<pre>X(X &amp;x)</pre>
In other words, the only way the compiler will generate a copy constructor with a non-<I>const</I> reference argument is if the class has at least one member whose only copy constructor also has a non-<I>const</I> reference argument.<P>
Strictly speaking, the compiler doesn't actually define <I>X</I>'s generated copy constructor unless it's used somewhere in the program. If <I>X</I> has a member that is an object of a class with a private constructor, the compiler can't generate <I>X</I>'s copy constructor. A generated copy constructor is always <I>public</I>.<P>
The generated copy constructor always uses memberwise initialization. That is, each member of the constructed object gets initialized by the corresponding member of the copied object. For example, if <I>X</I> has data members <I>a</I> and <I>b</I>, the generated memberwise copy constructor behaves just like<P>
<pre>X(const X &amp;x) : a(x.a), b(x.b) { }</pre>
Often this is just the right behavior. It works fine for my rational number class. However, for classes with complex substructure, like strings and vectors, memberwise initialization is inappropriate.<P>
Consider a class <I>String</I> that stores variable-length strings in character arrays allocated from the <I>free</I> store. Each <I>String</I> object has a data member <I>str</I> that points to the first character in the array, and another member <I>len</I> that stores the array length (excluding the null character at the end). <A href="fig1.htm">Figure 1</a>
depicts the storage for a <I>String</I> whose value is <I>"Hello"</I>.<P>
<A href="list2.htm">Listing 2</a>
contains the declaration for a simple version of the <I>String</I> class, along with a simple test program. The class has only one constructor, <I>String(const char *s)</I>, that initializes a <I>String</I> to hold a copy of a null-terminated string <I>s</I>. A declaration such as<P>
<pre>String s1("Hello");</pre>
creates the <I>String</I> in <A href="fig1.htm">Figure 1</a>.
<P>
The constructor grabs storage for the <I>String</I>'s character array using the <I>new</I> operator. The <I>delete</I> operator in <I>String</I>'s destructor returns the storage to the free store. (The empty square brackets in<P>
<pre>delete [] str;</pre>
indicate that <I>str</I> points to the first character in an array, rather than to a single <I>char.</I>)<P>
Since the <I>String</I> class in <A href="list2.htm">Listing 2</a>
has no copy constructor, the compiler defines one that implements memberwise copy. <A href="fig2.htm">Figure 2</a>
shows the constructor's effect on the declaration<P>
<pre>String s2 : s1;</pre>
Immediately afterwards, both <I>s2</I> and <I>s1</I> share the same character array. This leads to all sorts of unpleasantness.<P>
For example, <I>String::operator+=(char)</I> appends a single character to the end of a <I>String</I>. In doing so, it deletes the <I>String's</I> character array, and allocates a new array that's one character longer. If, as happens in <A href="list2.htm">Listing 2</a>,
 <I>s1</I> and <I>s2</I> share the same array, the call <I>s1 += '!'</I> deletes the shared array, and allocates a new array for <I>s1</I>. Unfortunately, it leaves <I>s2's</I> <I>str</I> pointing to a deleted array.<P>
The cure is simple. Just write an explicit copy constructor that replicates the entire array, like the one in <A href="list3.htm">Listing 3</a>.
 This constructor performs a "deep copy" &#151; it copies the entire substructure of the object. It contrast, the default memberwise copy constructor does a only a "shallow copy."<P>
<h4><FONT COLOR="#000080"><A name="01D9_00EB">Generated Assignment Operators<A name="01D9_00EB"></FONT></h4></P>
If you don't declare an assignment operator for a class, the compiler defines one for you. If all the data members of <I>X</I> are scalar types, or class objects with assignment operators accepting <I>const</I> reference arguments, then the compiler declares <I>X</I>'s assignment operator as<P>
<pre>X &amp;operator=(const X &amp;x)</pre>
Otherwise, it declares the assignment operator as<P>
<pre>X &amp;operator=(X &amp;x)</pre>
and you won't be able to assign to an <I>X</I> object by copying a <I>const X</I> object. In either case, the operator returns a reference to its left operand (the object referenced by <I>this</I>).<P>
As with the generated copy constructor, the compiler doesn't actually define <I>X</I>'s generated <I>operator</I>= unless it's used somewhere in the program. If <I>X</I> has a member that is a <I>const</I> object, a reference, or an object of a class with a private <I>operator</I>=, the compiler can't generate <I>X</I>'s <I>operator</I>=.<P>
The generated assignment operator always uses memberwise assignment. That is, each member of the constructed object gets assigned the corresponding member of the copied object. For example, if <I>X</I> has data members <I>a</I> and <I>b</I>, the generated memberwise assignment behaves just like<P>
<pre>X &amp;operator=(const X &amp;x)
    {
    a = x.a;
    b = x.b;
    return *this;
    }</pre>
As with memberwise initialization, memberwise assignment is appropriate for shallow objects like rational numbers. But for classes like <I>Strings</I>, you should replace the generated assignment with one that does a deep copy. <A href="list4.htm">Listing 4</a>
shows a more appropriate assignment operator for Strings.<P>
For objects requiring deep copies, the essential difference between assignment and initialization is that, while initialization plies in virgin territory, assignment copies into previously initialized objects. Initialization can blithely overwrite storage, whereas assignment might have to discard resources before overwriting the links to them.<P>
In the case of <I>String</I> objects, <I>operator</I>= tests if the length of the source <I>String</I>'s array is different from the length of the destination <I>String</I>'s array. If they're the same, <I>operator</I>= simply copies the source array to the destination array. But if they're different, <I>operator</I>= deletes the old destination array and grabs a new one of the proper size. Then it proceeds to copy.<P>
<h4><FONT COLOR="#000080"><A name="01D9_00EC">Generated Default Constructors<A name="01D9_00EC"></FONT></h4></P>
If a class has no user-defined constructors, the compiler generates a default constructor as well as the copy constructor. For a class <I>X</I>, the generated default constructor behaves like<P>
<pre>x() { }</pre>
If all of <I>X</I>'s members are scalar types, this constructor acts like the empty function it appears to be. But, for any member of <I>X</I> that is an object of a class with a public default constructor, <I>X</I>'s default constructor initializes that member using that member's default constructor. If any member of <I>X</I> is an object of a class without a public default constructor, the compiler cannot generate <I>X</I>'s default constructor.<P>
The compiler will not define a default constructor for a class that has any user-defined constructors.<P>
<h4><FONT COLOR="#000080"><A name="01D9_00ED">Declarations as Executable Statements<A name="01D9_00ED"></FONT></h4></P>
In C++, a declaration is an executable statement, which you can place anywhere inside a block. For example, <A href="list1.htm">Listing 1</a>
intermixes declarations with other statements. You no longer need to put all your local declarations at the beginning of a block as required by C. However, you must still declare each block-local name before you use it.<P>
When I started programming in C++, I resisted this new freedom. I continued placing my declarations where nature intended them to be &#151; at the beginning of each block. That is, until I understood why C++ relaxed the rule.<P>
In C++, a class object declaration without an initializer invokes the default constructor. Each assignment into that object must test whether the object uses resources that must be released before assigning a new value. On the other hand, a declaration with an initializer simply constructs the object's initial value without releasing any resources. Thus, for almost any class <I>X</I> with constructors and <I>operator=</I>,<P>
<pre>X a = b; // direct initialization</pre>
generates smaller and faster code than<P>
<pre>X a;     // default initialization
...
a = b;   // assignment</pre>
Often, you don't know the value of the initializer until after you've done some processing. Rather than force you to use unnecessary default initialization, C++ simply lets you delay a declaration until you know its initial value.<P>
I generally recommend that you write the declaration of a block-scope object at its point of first use. But be careful about moving declarations inside loops. An object with a constructor and destructor declared inside a loop will be created and destroyed on each iteration.<P>

<h4><a href="../../../source/1992/sep92/saks.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
