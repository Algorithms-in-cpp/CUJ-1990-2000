<HTML><HEAD>
<TITLE>September 1992/SoftC Database Library/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1</A></h4>
<pre>/*
 Copyright (C) 1992 by Mark W. Schumann
  
  convtext.cpp -- Convert a text file into
  one or more existing Clipper files under
  marker-file control.
  
  Compiler: Borland C++ 2.0.
  Library: SoftC version 3.0.
  
  20 April 1992, by Mark W. Schumann
  Usenet: mark@wariat.ncoast.org
  
  Compile (Borland) with:
  
  bcc -ms -lm convtext.cpp scdbp20s.lib
*/


#include &lt;softc.h&gt;
#include &lt;sc_base.h&gt;
#include &lt;fstream.h&gt;
#include &lt;iostream.h&gt;
#include &lt;ctype.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

#define LINELENGTH 200

int convtext (char *);
char *strtrim (char *);
int nextmark (int, long &amp;, char *, char *);
int main (int argc, char *argv[])

{
   
   scdinit (5, 0);
   convtext ("POLLSEND.TXT");
   scdterm();
   
   }

int convtext (char *textfile)

{

ifstream ip;        // Text input stream.

char tempname[80];     // Builds file name.
char s[LINELENGTH+2];  // Text record buffer.
char *p;    // Throwaway pointer.

int dbf = -1;  // Output database handle.
long recno;    // Current record number.

int markdbf;        // Marker database handle.
char marktext[30];  // Text to indicate mark record.
char markfile[9];   // Output file indicated by mark.
long markrec = 0L;  // Current record in marker file.
int marklen;      // Length of marker for comparison.
   
   s[0] = ' ';         // Record status byte.
   
   ip.open (textfile);
if (!ip) {
   cout &lt;&lt; "Couldn't open "&lt;&lt; textfile &lt;&lt; ".\n";
   return -1;
   }

scddopenx (&amp;markdbf, "DATAMARK.DBF", 0);
if (scecode() &lt; 0) {
   cout &lt;&lt; "Couldn't open marker file. "
    &lt;&lt; "SoftC error was "&lt;&lt; scecode() &lt;&lt; '\n';
   return -1;
   }

nextmark (markdbf, &amp;markrec, marktext, markfile);
strtrim (marktext);
marklen = strlen (marktext);

while (ip.getline (&amp;s[1], LINELENGTH)) {
   
   sceclr();
   
   // Trim trailing newline.
   p = strchr (&amp;s[1], '\n');
   if (p != NULL) *p = '\0';
   
   // Next data marker record reached?
   if (strncmp (marktext, &amp;s[1], marklen) == 0) {
      
      // Close current output database.
      if (dbf != -1) scddclose (dbf);
      
      // Build full name of the target file.
      strcpy (tempname, markfile);
      strtrim (tempname);
      strcat (tempname, ".DBF");
      
      // Now open it.
      cout &lt;&lt; "\nOpening" &lt;&lt; markfile &lt;&lt; '\n';
      scddopenx (&amp;dbf, tempname,
       SC_RDWR | SC_EXCLUDE);
      
      scddsize (dbf, &amp;recno);
      
      // Use the next marker.
      nextmark (markdbf, markrec,
       marktext, markfile);
      
      if (scecode() &lt; 0) {
         cout &lt;&lt; "Error opening" &lt;&lt;
          tempname &lt;&lt; ". SoftC error was "&lt;&lt;
          scecode() &lt;&lt; '\n';
         break;
         }
      
      }
    
    else {
      
      if (dbf == -1) {
         cout &lt;&lt; "Input file doesn't begin with a" &lt;&lt;
          " data marker.\n";
         break;
         }
      
      recno++;
      
      // Write the record to the database.
      if (scddrputx (dbf, s, &amp;recno, SC_ADD) &lt; 0) {
         cout &lt;&lt; "Couldn't add record" &lt;&lt; recno
          &lt;&lt; "; SoftC error" &lt;&lt; scecode()
          &lt;&lt; ' ' &lt;&lt; scemsg() &lt;&lt; '\n';
         break;
           }
        else
           cout &lt;&lt; "Record number" &lt;&lt; recno
            &lt;&lt;" added.\r";
        
        }
     }
  
  cout &lt;&lt; '\n';
  ip.close();
  scddclose (markdbf);
  if (dbf != -1) scddclose (dbf);
  return 0;
  
  }


// Remove trailing whitespace from a string.

char *strtrim (char *s)

{

register char *p;
char *q = NULL; // Last printing character.
  
  for (p = s; *p; p++)
     if (!isspace (*p)) q = p;
  
  if (q != NULL)
     *++q : '\0';
  else
     [0] = '\0';
  
  return s;
  }


// This assumes that we have a marker text description
// in field 1 and marker file name in field 2. It is
// also counting on character buffers long enough to
// hold the results.

int nextmark (int dbf, long &amp;rec, char *text, char *file)

{
  
  scddrget (dbf, ++rec);
  scddfget (dbf, 1, text);
  scddfget (dbf, 2, file);
  return scecode();
  
  }
/* End of File */</pre>

</BODY>
</HTML>
