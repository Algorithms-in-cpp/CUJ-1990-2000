






<HTML>
     
     <HEAD>


          
          <TITLE>November 1996/Nesting For Statements Revisited</TITLE>
     </HEAD>
     
     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          
          <H2><A href="../tocnov.htm"><IMG src="../../toc.gif" ALT="Back to TOC" WIDTH="54" HEIGHT="54"></A>
          <FONT COLOR="#FF0000">Features</FONT></H2>
          
          <HR>
          
          <H2 ALIGN="center"><FONT COLOR="#800000"> Nested for Statements
          Revisited</FONT></H2>
          
          <H3 ALIGN="center"><FONT COLOR="#800000">Robin J. Leatherbarrow</FONT></H3>
          
          <BLOCKQUOTE>
               
               <p> Sometimes the best way to capture
                    looping logic is not in the program control structures but
                    in an object that lets you decide at run time how many loops
                    to iterate over.</p></BLOCKQUOTE>
          <HR>
          <BLOCKQUOTE>
               
               <P>When C and C++ provide insufficient loop control using
                    existing constructs, use a C++ class to extend the loop
                    control's capabilities. In the July 1996 issue of CUJ ("Nested
                    for Statements, CUJ, July 1996), James Bell presented a
                    solution to a problem concerning nested for statements. To
                    recap, C/C++ programs frequently use nested for statements
                    to cycle through a range of variables. For example, three
                    nested for loops can be used as follows:</P>

<PRE>
for (int i=0; i&lt;p; i++)
    for (int j=0; j&lt;q; j++)
        for (int k=0; k&lt;r; k++)
            DoSomething( i, j, k);
</PRE>
               
               <p>It is often the case that the number
                    of cycles in each loop, controlled by the values of the p,
                    q, and r variables above, are not known until run time.
                    Usually, however, the number of loops themselves (three in
                    this example) are known in advance, allowing them to be
                    hard-coded. The problem that James addressed concerned the
                    situation where the number of for statements cannot be 
                    predetermined, and is only known at run time. His solution
                    was to define a function that could be called in place of
                    the nested for loops, and which used recursion to iterate
                    over the required number of loops. </p>
               
               <p> I have recently had to implement a
                    nested for loop with an unknown number of loops, and was
                    interested in the algorithm used. However, the solution
                    given seemed to me to suffer from a few limitations. First,
                    the way that it was coded meant that a specific recursive
                    subroutine needed to be defined for each implementation.
                    Second, although not dogmatic about this, I am personally 
                    inclined to avoid recursion if possible; recursion can all
                    too easily result in run-time stack overflows that are
                    difficult to diagnose. Third, the implementation doesn't
                    resemble a normal for-loop construct, which makes following
                    the program logic more difficult and could affect
                    maintenance. Finally, it was coded in C, and my personal
                    preference is for C++. </p>
               
               <p> My solution is the CMultiFor class
                    shown in <A href="leathl1.htm">listings 1</a>
and
                    <A href="leathl2.htm">2</a>.
 The big advantage of this
                    class is that it can be used in a manner resembling a
                    standard for loop. This class lends itself to
                    general-purpose use, and does not require a specific routine
                    to be coded for each implementation. Using CMultiFor, you
                    can rewrite the three-loop construct above as:</p>

<PRE>
CMultiFor mfor;
mfor.Add( 0, p );
mfor.Add( 0, q );
mfor.Add( 0, r );
for ( mfor.Initialize();
      mfor.CarryOn();
      mfor.Increment() )
    DoSomething( mfor.Index(0),
                 mfor.Index(1),
                 mfor.Index(2) );
</PRE>
               
               <h4><FONT COLOR="#000080">Implementation
               Details</FONT></H4>
               
               <p>CMultiFor uses the CArray template
                    class, which is part of the Microsoft Foundation Classes --
                    replace this with an STL container class if you prefer. In
                    addition, CMultiFor uses the relatively primitive Windows
                    BOOL type to hold the result of the logical comparison; swap
                    this for C++'s new bool if your compiler can cope. </p>
               
               <p> The CMultiFor class contains various
                    member functions:</p>

<PRE>
void CMultiFor::Add( int start,
                     int end )
</PRE>
               
               <p>This adds a for loop. The for loop is
                    equivalent to:</p>

<PRE>
for (i = start; i &lt; end; i++ )
</PRE>
               
               <p>where start and end are defined by the
                    Add function, and i is the loop index for this for loop. The
                    for loops are executed in the order that they are added. For
                    example,</p>

<PRE>
mfor.Add( a, b );
mfor.Add( c, d );
mfor.Add( e, f );
</PRE>
               
               <p>will be equivalent to:</p>

<PRE>
for (int i=a; i&lt;b; i++)
    for (int j=c; j&lt;d; j++)
        for (int k=e; k&lt;f; k++)
</PRE>
               
               <p>As defined, CMultiFor assumes that the
                    loop indices increment at the end of each loop, and that the
                    loop continues while the loop index is less than the end
                    value. In addition, your code must define the values for
                    start and end before any of the loops are executed.</p>

<PRE>

void CMultiFor::Initialize();
</PRE>
               
               <p>Call this member function to
                    initialize the loop indices.</p>

<PRE>

BOOL CMultiFor::CarryOn();
</PRE>
               
               <p>This function tests whether the loop
                    should continue, and returns FALSE when the all loops have
                    exhausted their indices.</p>

<PRE>
void CMultiFor::Increment();
</PRE>
               
               <p>This increments the loop counters.</p>

<PRE>

int CMultiFor::Count()
</PRE>
               
               <p>This function returns the number of
                    nested for loops that have been defined.</p>

<PRE>

int CMultiFor::Index( int i )
</PRE>
               
               <p>The Index function returns the current
                    value of the loop counter for loop i.</p>
               
               <p><I>Dr. Robin J. Leatherbarrow is a
                    lecturer in Chemistry at Imperial College, University of
                    London, UK. He has a D.Phil. from Oxford University, and
                    uses C++ for various data analysis applications. Robin can
                    be reached at R.Leatherbarrow@ic.ac.uk.</I></p>

<h4><a href="../../../source/1996/nov96/leatherb.zip">Get Article Source Code</a></h4>

          </BLOCKQUOTE>
     </BODY>
</HTML>
