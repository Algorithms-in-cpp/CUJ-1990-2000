






<HTML>
     
     <HEAD>


          
          <TITLE>November 1996/3-D Lookup Table Color Matching/Listing 1</TITLE>
     </HEAD>
     
     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          
          <H4>Listing 1: File 3dtable.c</H4>
          
          <BLOCKQUOTE>

<PRE>
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include "3dtable.h"

struct match_array *creatematcharray(int rbits, int gbits,
    int bbits, struct rgb_color *palette, int palettesize)
{
int rval, gval, bval, len, r, g, b;
char *taken, *match, *same;
int i, set, sqstep, tp, maxtp, *entryr, *entryg, *entryb;
struct match_array *table;

if(rbits&lt;1 || rbits&gt;8 || gbits&lt;1 || gbits&gt;8 || bbits&lt;1 || bbits&gt;8)
  return NULL;
table=(struct match_array *)malloc(sizeof(struct match_array));
if (table==NULL) return NULL;

/* Set up some values: */
table-&gt;rb=rbits;
table-&gt;gb=gbits;
table-&gt;bb=bbits;
rval=1&lt;&lt;rbits;
gval=1&lt;&lt;gbits;
bval=1&lt;&lt;bbits;
len=rval*gval*bval;

/* Prepare table buffers: */
table-&gt;match=(char *)malloc(len*sizeof(char));
if (table-&gt;match==NULL)
  {
  free((void *)table);
  return NULL;
  }
taken=(char *)malloc(len*sizeof(char));
if (taken==NULL)
  {
  free((void *)table-&gt;match);
  free((void *)table);
  return NULL;
  };
memset((void *)taken, 0, len*sizeof(char));

/* Select colors to use for fill: */
set=0;
entryr=(int *)malloc(palettesize*sizeof(int));
entryg=(int *)malloc(palettesize*sizeof(int));
entryb=(int *)malloc(palettesize*sizeof(int));
same=(char *)malloc(palettesize*sizeof(char));
if (entryr==NULL || entryg==NULL || entryb==NULL || same==NULL)
  {
  free((void *)table-&gt;match), free((void *)table),
  free((void *)entryr), free((void *)entryg),
  free((void *)entryb), free((void *)same);
  return NULL;
  }
match=table-&gt;match;
for (i=0; i&lt;palettesize; i++)
  {
  same[i]=0;
  /* Compute 3d-table coordinates of palette rgb color: */
  r=palette[i].r&amp;0xff, g=palette[i].g&amp;0xff, b=palette[i].b&amp;0xff;
  r&gt;&gt;=8-rbits;
  g&gt;&gt;=8-gbits;
  b&gt;&gt;=8-bbits;
  /* Put color in position: */
  if (taken[b*rval*gval+g*rval+r]==0) set++;
  else same[match[b*rval*gval+g*rval+r]]=1;
  match[b*rval*gval+g*rval+r]=i;
  taken[b*rval*gval+g*rval+r]=1;
  entryr[i]=r; entryg[i]=g; entryb[i]=b;
  }

/* @@@ Fill match_array by steps: @@@ */
for (set=len-set, sqstep=1; set&gt;0; sqstep++)
  {
  for (i=0; i&lt;palettesize &amp;&amp; set&gt;0; i++)
    if (same[i]==0)
    {
    /* Fill all six sides of incremented cube
       (by pairs, 3 loops): */
    for (b=entryb[i]-sqstep; b&lt;=entryb[i]+sqstep; b+=sqstep*2)
      if (b&gt;=0 &amp;&amp; b&lt;bval)
        for (r=entryr[i]-sqstep; r&lt;=entryr[i]+sqstep; r++)
          if (r&gt;=0 &amp;&amp; r&lt;rval)
            { /* Draw one 3d line: */
            tp=b*rval*gval+(entryg[i]-sqstep)*rval+r;
            maxtp=b*rval*gval+(entryg[i]+sqstep)*rval+r;
            if (tp&lt;b*rval*gval+0*rval+r)
              tp=b*rval*gval+0*rval+r;
            if (maxtp&gt;b*rval*gval+(gval-1)*rval+r)
              maxtp=b*rval*gval+(gval-1)*rval+r;
            for (; tp&lt;=maxtp; tp+=rval)
              if (!taken[tp])
                taken[tp]=1, match[tp]=i, set--;
            }
    for (g=entryg[i]-sqstep; g&lt;=entryg[i]+sqstep; g+=sqstep*2)
      if (g&gt;=0 &amp;&amp; g&lt;gval)
        for (b=entryb[i]-sqstep; b&lt;=entryb[i]+sqstep; b++)
          if (b&gt;=0 &amp;&amp; b&lt;bval)
            { /* Draw one 3d line: */
            tp=b*rval*gval+g*rval+(entryr[i]-sqstep);
            maxtp=b*rval*gval+g*rval+(entryr[i]+sqstep);
            if (tp&lt;b*rval*gval+g*rval+0)
              tp=b*rval*gval+g*rval+0;
            if (maxtp&gt;b*rval*gval+g*rval+(rval-1))
              maxtp=b*rval*gval+g*rval+(rval-1);
            for (; tp&lt;=maxtp; tp++)
              if (!taken[tp])
                taken[tp]=1, match[tp]=i, set--;
            }
    for (r=entryr[i]-sqstep; r&lt;=entryr[i]+sqstep; r+=sqstep*2)
      if (r&gt;=0 &amp;&amp; r&lt;rval)
        for (g=entryg[i]-sqstep; g&lt;=entryg[i]+sqstep; g++)
          if (g&gt;=0 &amp;&amp; g&lt;gval)
            { /* Draw one 3d line: */
            tp=(entryb[i]-sqstep)*rval*gval+g*rval+r;
            maxtp=(entryb[i]+sqstep)*rval*gval+g*rval+r;
            if (tp&lt;0*rval*gval+g*rval+r)
              tp=0*rval*gval+g*rval+r;
            if (maxtp&gt;(bval-1)*rval*gval+g*rval+r)
              maxtp=(bval-1)*rval*gval+g*rval+r;
            for (; tp&lt;=maxtp; tp+=rval*gval)
              if (!taken[tp])
                taken[tp]=1, match[tp]=i, set--;
            }
    }
  }
free((void *)same);
free((void *)entryr);
free((void *)entryg);
free((void *)entryb);
free((void *)taken);
return table;
}

void deletematcharray(struct match_array *table)
{
if (table!=NULL)
  {
  free((void *)table-&gt;match);
  free((void *)table);
  }
}

int findcolor(struct match_array *table, struct rgb_color c)
{
int r=c.r, g=c.g, b=c.b;
if (r&lt;0) r=0; if (r&gt;255) r=255;
if (g&lt;0) g=0; if (g&gt;255) g=255;
if (b&lt;0) b=0; if (b&gt;255) b=255;
if (table!=NULL)
  {
  r&gt;&gt;=8-table-&gt;rb;
  g&gt;&gt;=8-table-&gt;gb;
  b&gt;&gt;=8-table-&gt;bb;
  return table-&gt;match[(b&lt;&lt;table-&gt;gb&lt;&lt;table-&gt;rb)+(g&lt;&lt;table-&gt;rb)+r];
  }
return -1;
}
/* End of File */
</PRE>  </BLOCKQUOTE>
     </BODY>
</HTML>
