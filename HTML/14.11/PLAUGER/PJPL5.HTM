



<HTML><HEAD>

<TITLE>November 1996/Standard C/C++/Listing 5</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4>
<A name="HEADING1">Listing 5: The header &lt;numeric&gt;</A></h4>


<pre>

// numeric standard header
#ifndef _NUMERIC_
#define _NUMERIC_
#include &lt;iterator&gt;
///namespace std {

        // TEMPLATE FUNCTION accumulate
template&lt;class InIt, class T&gt; inline
    T accumulate(InIt first, InIt last, T val)
    {for (; first != last; ++first)
        val = val + *first;
    return (val); }

        // TEMPLATE FUNCTION accumulate WITH BINOP
template&lt;class InIt, class T, class Binop&gt; inline
    T accumulate(InIt first, InIt last, T val, Binop binop)
    {for (; first != last; ++first)
        val = binop(val, *first);
    return (val); }

        // TEMPLATE FUNCTION inner_product
template&lt;class InIt1, class InIt2, class T&gt; inline
    T inner_product(InIt1 first, InIt1 last, InIt2 x, T val)
    {for (; first != last; ++first, ++x)
        val = val + *first * *x;
    return (val); }

        // TEMPLATE FUNCTION inner_product WITH BINOPS
template&lt;class InIt1, class InIt2, class T,
    class Binop1, class Binop2&gt; inline
    T inner_product(InIt1 first, InIt1 last, InIt2 x, T val,
        Binop1 binop1, Binop2 binop2)
    {for (; first != last; ++first, ++x)
        val = binop1(val, binop2(*first, *x));
    return (val); }

        // TEMPLATE FUNCTION partial_sum
template&lt;class InIt, class OutIt&gt; inline
    OutIt partial_sum(InIt first, InIt last, OutIt x)
    {return (first == last ? x
        : _Partial_sum(first, last, x, _Val_type(first))); }
template&lt;class InIt, class OutIt, class T&gt; inline
    OutIt _Partial_sum(InIt first, InIt last, OutIt x, T *)
    {T val = *first;
    for (*x = val; ++first != last; *++x = val)
        val = val + *first;
    return (++x); }

        // TEMPLATE FUNCTION partial_sum WITH BINOP
template&lt;class InIt, class OutIt, class Binop&gt; inline
    OutIt partial_sum(InIt first, InIt last, OutIt x, Binop binop)
    {return (first == last ? x : _Partial_sum(first, last,
        x, binop, _Val_type(first))); }
template&lt;class InIt, class OutIt, class Binop, class T&gt; inline
    OutIt _Partial_sum(InIt first, InIt last,
        OutIt x, Binop binop, T *)
    {T val = *first;
    for (*x = val; ++first != last; *++x = val)
        val = binop(val, *first);
    return (++x); }

        // TEMPLATE FUNCTION adjacent_difference
template&lt;class InIt, class OutIt&gt; inline
    OutIt adjacent_difference(InIt first, InIt last, OutIt x)
    {return (first == last ? x : _Adjacent_difference(first, last,
        x, _Val_type(first))); }
template&lt;class InIt, class OutIt, class T&gt; inline
    OutIt _Adjacent_difference(InIt first, InIt last,
        OutIt x, T *)
    {T val = *first;
    for (*x = val; ++first != last; )
        {T tmp = *first;
        *++x = tmp - val;
        val = tmp; }
    return (++x); }

        // TEMPLATE FUNCTION adjacent_difference WITH BINOP
template&lt;class InIt, class OutIt, class Binop&gt; inline
    OutIt adjacent_difference(InIt first, InIt last, OutIt x,
        Binop binop)
    {return (first == last ? x : _Adjacent_difference(first, last,
        x, binop, _Val_type(first))); }
template&lt;class InIt, class OutIt, class Binop, class T&gt; inline
    OutIt _Adjacent_difference(InIt first, InIt last, OutIt x,
        Binop binop, T *)
    {T val = *first;
    for (*x = val; ++first != last; )
        {T tmp = *first;
        *++x = binop(tmp, val);
        val = tmp; }
    return (++x); }

///};    // end of namespace std
#endif /* _NUMERIC_ */
//End of File
</pre>
</body></html>
