



<HTML><HEAD>

<TITLE>November 1996/Standard C/C++/Listing 2</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4>
<A name="HEADING1">Listing 2: Set template functions</A></h4>


<pre>

        // TEMPLATE FUNCTION includes
template&lt;class InIt1, class InIt2&gt; inline
    bool includes(InIt1 first1, InIt1 last1,
        InIt2 first2, InIt2 last2)
    {for (; first1 != last1 &amp;&amp; first2 != last2; )
        if (*first2 &lt; *first1)
            return (false);
        else if (*first1 &lt; *first2)
            ++first1;
        else
            ++first2;
    return (first2 == last2); }

        // TEMPLATE FUNCTION set_union
template&lt;class InIt1, class InIt2, class OutIt&gt; inline
    OutIt set_union(InIt1 first1, InIt1 last1,
        InIt2 first2, InIt2 last2, OutIt x)
    {for (; first1 != last1 &amp;&amp; first2 != last2; )
        if (*first1 &lt; *first2)
            *x++ = *first1++;
        else if (*first2 &lt; *first1)
            *x++ = *first2++;
        else
            *x++ = *first1++, ++first2;
    x = copy(first1, last1, x);
    return (copy(first2, last2, x)); }

        // TEMPLATE FUNCTION set_intersection
template&lt;class InIt1, class InIt2, class OutIt&gt; inline
    OutIt set_intersection(InIt1 first1, InIt1 last1,
        InIt2 first2, InIt2 last2, OutIt x)
    {for (; first1 != last1 &amp;&amp; first2 != last2; )
        if (*first1 &lt; *first2)
            ++first1;
        else if (*first2 &lt; *first1)
            ++first2;
        else
            *x++ = *first1++, ++first2;
    return (x); }

        // TEMPLATE FUNCTION set_difference
template&lt;class InIt1, class InIt2, class OutIt&gt; inline
    OutIt set_difference(InIt1 first1, InIt1 last1,
        InIt2 first2, InIt2 last2, OutIt x)
    {for (; first1 != last1 &amp;&amp; first2 != last2; )
        if (*first1 &lt; *first2)
            *x++ = *first1++;
        else if (*first2 &lt; *first1)
            ++first2;
        else
            ++first1, ++first2;
    return (copy(first1, last1, x)); }

        // TEMPLATE FUNCTION set_symmetric_difference
template&lt;class InIt1, class InIt2, class OutIt&gt; inline
    OutIt set_symmetric_difference(InIt1 first1, InIt1 last1,
        InIt2 first2, InIt2 last2, OutIt x)
    {for (; first1 != last1 &amp;&amp; first2 != last2; )
        if (*first1 &lt; *first2)
            *x++ = *first1++;
        else if (*first2 &lt; *first1)
            *x++ = *first2++;
        else
            ++first1, ++first2;
    x = copy(first1, last1, x);
    return (copy(first2, last2, x)); }
//End of File
</pre>
</body></html>
