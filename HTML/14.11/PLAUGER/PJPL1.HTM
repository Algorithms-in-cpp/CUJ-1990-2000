



<HTML><HEAD>

<TITLE>November 1996/Standard C/C++/Listing 1</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4>
<A name="HEADING1">Listing 1: Binary search template functions</A></h4>


<pre>

        // TEMPLATE FUNCTION lower_bound
template&lt;class FwdIt, class T&gt; inline
    FwdIt lower_bound(FwdIt first, FwdIt last, const T&amp; val)
    {return (_Lower_bound(first, last, val,
        _Dist_type(first))); }
template&lt;class FwdIt, class T, class Diff&gt; inline
    FwdIt _Lower_bound(FwdIt first, FwdIt last, const T&amp; val, Diff *)
    {Diff n = 0;
    _Distance(first, last, n);
    for (; 0 &lt; n; )
        {Diff n2 = n / 2;
        FwdIt m = first;
        advance(m, n2);
        if (*m &lt; val)
            first = ++m, n -= n2 + 1;
        else
            n = n2; }
    return (first); } 

        // TEMPLATE FUNCTION upper_bound
template&lt;class FwdIt, class T&gt; inline
    FwdIt upper_bound(FwdIt first, FwdIt last, const T&amp; val)
    {return (_Upper_bound(first, last, val,
        _Dist_type(first))); }
template&lt;class FwdIt, class T, class Diff&gt; inline
    FwdIt _Upper_bound(FwdIt first, FwdIt last, const T&amp; val, Diff *)
    {Diff n = 0;
    _Distance(first, last, n);
    for (; 0 &lt; n; )
        {Diff n2 = n / 2;
        FwdIt m = first;
        advance(m, n2);
        if (!(val &lt; *m))
            first = ++m, n -= n2 + 1;
        else
            n = n2; }
    return (first); } 

        // TEMPLATE FUNCTION equal_range
template&lt;class FwdIt, class T&gt; inline
    pair&lt;FwdIt, FwdIt&gt; equal_range(FwdIt first, FwdIt last, const T&amp; val)
    {return (_Equal_range(first, last, val,
        _Dist_type(first))); }
template&lt;class FwdIt, class T, class Diff&gt; inline
    pair&lt;FwdIt, FwdIt&gt; _Equal_range(FwdIt first, FwdIt last,
        const T&amp; val, Diff *)
    {Diff n = 0;
    _Distance(first, last, n);
    for (; 0 &lt; n; )
        {Diff n2 = n / 2;
        FwdIt m = first;
        advance(m, n2);
        if (*m &lt; val)
            first = +mm, n -= n2 + 1;
        else if (val &lt; *m)
            n = n2;
        else
            {FwdIt first2 = lower_bound(first, m, val);
            advance(first, n);
            FwdIt last2 = upper_bound(++m, first, val);
            return (pair&lt;FwdIt, FwdIt&gt;(first2, last2)); }} 
    return (pair&lt;FwdIt, FwdIt&gt;(first, first)); } 
        // TEMPLATE FUNCTION binary_search
template&lt;class FwdIt, class T&gt; inline
    bool binary_search(FwdIt first, FwdIt last, const T&amp; val)
    {FwdIt i = lower_bound(first, last, val);
    return (i != last &amp;&amp; !(val &lt; *i)); }
//End of File
</pre>
</body></html>
