






<HTML>
     
     <HEAD>


          
          <TITLE>November 1996/Standard C/C++</TITLE>
     </HEAD>
     
     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          
          <H2><A href="../tocnov.htm"><IMG src="../../toc.gif" ALT="Back to TOC" WIDTH="54" HEIGHT="54"></A>
          <FONT COLOR="#FF0000">Columns</FONT></H2>
          
          <HR>
          
          <H2 ALIGN="center"><FONT COLOR="#800000">Standard C/C++</FONT></H2>
          
          <H3 ALIGN="center"><FONT COLOR="#800000"> P. J. Plauger</FONT></H3>
          
          <H3 ALIGN="center"><FONT COLOR="#800000"> Last of the Algorithms</FONT></H3>
          
          <BLOCKQUOTE>
               
               <p> Rounding out STL's collection of
                    algorithms are a handful of operations that may be
                    classified as miscellaneous. They merit study no less than
                    their easily classified brethren.</p></BLOCKQUOTE>
          <HR>
          <BLOCKQUOTE>
               
               <h4><FONT COLOR="#000080">Introduction</FONT></H4>
               
               <p>This installment concludes a four-part
                    series on the algorithms provided by the Standard Template
                    Library (STL). (See "Standard C/C++: Algorithms,'' CUJ,
                    August 1996, "Standard C/C++: Introduction to &lt;algorithm&gt;,''
                    CUJ, September 1996, and "Standard C/C++: Ordering
                    Algorithms,'' CUJ, October 1996.) What's left are several
                    distinct groups of template functions. All but the last
                    group occupy the header &lt;algorithm&gt;.</p>
               
               <h4><FONT COLOR="#000080">Binary Searching</FONT></H4>
               
               <p><A href="pjpl1.htm">Listing 1 </A>shows
                    several template functions that search a sequence of
                    increasing values ordered by operator&lt;. As usual, I omit
                    the companion versions that take a function object argument
                    to specify the ordering rule:</p>
               <UL><LI> To determine the first element in an ordered sequence
                         not less than a specified value, call lower_bound. <BR>
                          </LI>
                    <LI> To determine the last element in an ordered sequence
                         not less than a specified value, call upper_bound. <BR>
                          </LI>
                    <LI> To determine both the lower and upper bounds for a
                         specified value in an ordered sequence as above, call
                         equal_range. <BR>
                          </LI>
                    <LI> To determine whether an ordered sequence contains a
                         member with ordering equivalent to a specified value,
                         call binary_search. Note that "equivalent ordering''
                         is not necessarily equality, as I described in the
                         August installment.</LI>
               </UL>
               
               <p>All of these functions perform a
                    traditional binary chop to locate the desired element or
                    elements in time proportional to the logarithm of the number
                    of elements in the sequence.</p>
               
               <h4><FONT COLOR="#000080">Set Operations</FONT></H4>
               
               <p><A href="pjpl2.htm">Listing 2</A>
                    shows several template functions that take as input two
                    sequences of increasing values, both ordered by operator&lt;.
                    Versions also exist that take a function object argument:</p>
               <UL><LI> To determine whether one ordered sequence includes
                         elements equivalent to each of the elements in a second
                         sequence, call includes. <BR>
                          </LI>
                    <LI> To merge two ordered sequences to generate a new
                         sequence, preserving no elements from the second
                         sequence with ordering equivalent to the first, call
                         set_union. This operation is roughly equivalent to
                         forming the union (logical OR) of two sets of values. <BR>
                          </LI>
                    <LI> To merge two ordered sequences to generate a new
                         sequence, preserving only elements from the first
                         sequence with ordering equivalent to the second, call
                         set_intersection. This operation is roughly equivalent
                         to forming the intersection (logical AND) of two sets
                         of values. <BR>
                          </LI>
                    <LI> To merge two ordered sequences to generate a new
                         sequence, preserving only elements from the first
                         sequence with ordering not equivalent to the second,
                         call set_difference. This operation is roughly
                         equivalent to forming the difference of two sets of
                         values. <BR>
                          </LI>
                    <LI> To merge two ordered sequences to generate a new
                         sequence, preserving only elements from either sequence
                         with ordering not equivalent to the other, call
                         set_symmetric_difference. This operation is roughly
                         equivalent to forming the symmetric difference of two
                         sets of values.</LI>
               </UL>
               
               <p>The implementation of all these
                    functions is fairly straightforward.</p>
               
               <h4><FONT COLOR="#000080">Heap Operations</FONT></H4>
               
               <p><A href="pjpl3.htm">Listing 3 </A>shows
                    several template functions that administer a sequence as a
                    heap (also defined in the August installment). The values in
                    a heap are ordered by operator&lt; in the versions shown
                    here. Versions also exist, as usual, that take a function
                    object argument:</p>
               <UL><LI> To reorder a sequence as a heap, call make_heap. <BR>
                          </LI>
                    <LI> To add an element to a heap, call push_heap. <BR>
                          </LI>
                    <LI> To remove the largest element from a heap, call
                         pop_heap. <BR>
                          </LI>
                    <LI> To sort a heap (in ascending order), call sort_heap.</LI>
               </UL>
               
               <p>The heap template functions maintain a
                    typical heap discipline within a sequence:</p>
               <UL><LI> Element zero is the top of the heap, and stores the
                         largest element. <BR>
                          </LI>
                    <LI> The child elements at 2 * k + 1 and <BR>
                          2 * k + 2, if present, are smaller than the parent
                         element at k.</LI>
               </UL>
               
               <p>Template function push_heap assumes
                    that the heap sequence has been extended with a new element
                    at the end. It copies this value, creating a "hole'' at the
                    end of the heap. Template function _Push_heap percolates the
                    hole toward the top of the heap until it is high enough or
                    until the new value is not greater than the parent of the
                    hole. The parameter j determines how high is "high 
                    enough.'' It is always zero in this case. </p>
               
               <P> Template function pop_heap calls _Pop_heap to swap the top
                    of the heap with the element at the end, then restore the
                    heap discipline. That function, in turn, tells _Adjust_heap
                    that a hole now exists at element zero, and that the value
                    originally stored at the end of the sequence must now be
                    properly inserted in the heap. </P>
               
               <P> Template function _Adjust_heap percolates a hole down the
                    heap until it has no children. It then calls _Push_heap to
                    percolate the hole back up the heap to the proper place to
                    store the specified value. _Adjust_heap is called from
                    template function _Partial_sort_copy (described las month)
                    and from several places among the heap template functions.
               </P>
               
               <P> Template function make_heap simply creates a hole at each
                    element in the first half of the heap sequence, then calls
                    _Adjust_heap to establish the heap discipline among the
                    children of that element.</P>
               
               <h4><FONT COLOR="#000080">Permutations</FONT></H4>
               
               <p><A href="pjpl4.htm">Listing 4</A>
                    shows two template functions that generate all the
                    permutations of a sequence ordered by operator&lt; (or a
                    function object, with companion versions):</p>
               <UL><LI> To permute the elements in a sequence, call
                         next_permutation. The template function returns false
                         when it leaves the elements all in ascending order. <BR>
                          </LI>
                    <LI> To permute the elements in a sequence, you can also
                         call prev_permutation. The template function returns
                         false when it leaves the elements all in descending
                         order. Note that this template function generates
                         permutations in exactly the reverse order of
                         next_permutation.</LI>
               </UL>
               
               <p>Template function prev_permutation
                    looks for the rightmost pair of adjacent elements that are
                    in sort order. If no such pair exists, the function restores
                    the initial permutation, by reversing the entire sequence,
                    and returns true. Otherwise, it rearranges the remainder of
                    the sequence, beginning with that pair, so as to generate
                    the next permutation, and returns true. (Walk through all 
                    the permutations of three or four elements to see how the
                    permutations are generated in lexicographically decreasing
                    order.) </p>
               
               <P> Template function next_permutation behaves the same as
                    prev_permutation, except that it inverts the predicates that
                    test the order of pairs of elements.</P>
               
               <h4><FONT COLOR="#000080">The Header &lt;numeric&gt;</FONT></H4>
               
               <p>The last batch of algorithm template
                    functions occupy the separate header &lt;numeric&gt;.
                    <A href="pjpl5.htm">Listing 5</a>
shows one way to
                    implement this header:</p>
               <UL><LI>To sum all the elements of a sequence, using operator+
                         or a specified binary operator, call accumulate. <BR>
                          </LI>
                    <LI>To sum the products of corresponding elements of two
                         sequences, using operator+ and operator* or two
                         specified binary operators, call inner_product. <BR>
                          </LI>
                    <LI>To generate a sequence of sums, each adding one more
                         element from a sequence, using operator+ or a specified
                         binary operator, call partial_sum. <BR>
                          </LI>
                    <LI>To generate a sequence of differences between adjacent
                         pairs of elements from a sequence, using operator- or a
                         specified binary operator, call adjacent_difference.
                    </LI>
               </UL>
               
               <p> Once again, all these operations are
                    straightforward.</p>
               
               <P><I>P.J. Plauger is senior editor of
                    C/C++ Users Journal. He is the author of the Standard C++
                    Library shipped with Microsoft's Visual C++, v4.2. For eight
                    years, he served as convener of the ISO C standards
                    committee, WG14. He remains active on the C++ committee,
                    WG21. His latest books are The Draft Standard C++ Library,
                    Programming on Purpose (three volumes), and Standard C (with
                     Jim Brodie), all published by Prentice-Hall. You can reach
                    him at pjp@plauger.com.</FONT></I></P><I> </I>
               
               <p></p>

<h4><a href="../../../source/1996/nov96/plauger.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
     </BODY>
</HTML>
