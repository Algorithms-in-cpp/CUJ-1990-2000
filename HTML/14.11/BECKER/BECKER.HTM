






<HTML>
     
     <HEAD>


          
          <TITLE>November 1996/Questions And Answers</TITLE>
     </HEAD>
     
     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          
          <H2><A href="../tocnov.htm"><IMG src="../../toc.gif" ALT="Back to TOC" WIDTH="54" HEIGHT="54"></A>
          <FONT COLOR="#FF0000">Columns</FONT></H2>
          
          <HR>
          
          <H2 ALIGN="center"><FONT COLOR="#800000">Questions &amp; Answers</FONT></H2>
          
          <H3 ALIGN="center"><FONT COLOR="#800000"> Pete Becker</FONT></H3>
          
          <H3 ALIGN="center"><FONT COLOR="#800000"> Traits to the Rescue</FONT></H3>
          
          <BLOCKQUOTE>
               
               <p> How can a program know the range of a
                    type without knowing the type in advance? Pete shows a
                    method based on the magic of traits.</p>
               
               <p>To ask Pete a question about C or C++,
                    send e-mail to pbecker@wpo.borland.com, use subject line:
                    Questions and Answers, or write to Pete Becker, C/C++ Users
                    Journal, 1601 W. 23rd St., Ste. 200, Lawrence, KS 66046.</p></BLOCKQUOTE>
          <HR>
          <BLOCKQUOTE>
               
               <p><h4>Q</h4> My implementation of an associative
                    test assumes that the comparison operators are defined for
                    Key, so I can compare between keys without knowing their
                    type in advance. But I also need to know the maximum and
                    minimum possible keys, which depend on the actual Key type
                    (e.g. -MAXINT...MAXINT in the case of int keys, "".."zzzzzz"
                    in the case of string keys, etc.) How can I let my
                    implementation know these values without knowing the type of
                    Key in advance? In other words, is there a way to associate
                    a constant value with a type, in the same way an operator is
                    associated with a type? </p>
               
               <P> <h4>A</h4> This is easy to do, with a technique developed by some
                    folks working on the ANSI/ISO standard, who ran into the
                    same problem in designing the string and iostream templates.
                    Their solution was to introduce an additional template that
                    defines various traits for the type that is being used.
                    Let's take a quick look at the sort of problem that this
                    solves in the string template, then we can look at your
                    specific problem.</P>
               
               <p>The goal of the basic_string template
                    in the ANSI/ISO working paper is to provide a uniform
                    interface to strings of more or less arbitrary character
                    types. The immediate motivation for this was the need for
                    both a string class to hold ordinary char types and a wide
                    string class to hold wide chars. These were originally two
                    separate classes, named string and wstring, with nearly 
                    identical interfaces. The differences between the two were
                    mostly in the argument types that their member functions
                    took: the string class took text arguments of type const
                    char *, and the wstring class took text arguments of type
                    const wchar_t *. Some people thought that this redundancy
                    was a bad thing, and proposed creating a template that could
                    be instantiated for any character-like type. </p>
               
               <p> This general string template quickly
                    ran into a problem, though. Depending on the actual
                    character type, there may be much more efficient ways of
                    implementing common operations such as copying a string of
                    characters. In a general-purpose template the only way to
                    copy a string of characters is to write a short loop that
                    copies individual characters:</p>

<PRE>

for( int i = 0; i &lt; length(); i++ )
     dest[i] = source[i];
</PRE>
               
               <p>Using a loop like that to copy char
                    types, however, is almost certainly much slower than using
                    the standard library functions that already know how to do
                    such copies:</p>

<PRE>

strcpy( dest, source );
</PRE>
               
               <p>or, if the string does not store a
                    null terminator in its text buffer,</p>

<PRE>

memcpy( dest, source, length() );
</PRE>
               
               <p>However, neither strcpy nor memcpy can
                    handle strings of wchar_t, nor can they handle strings of
                    arbitrary character types.</p>
               
               <p>One possible solution to this
                    efficiency problem would be to permit specialization of the
                    basic_string template for these particular types. That would
                    allow implementers to provide optimized versions of
                    basic_string for the most common types, char and wchar_t,
                    while still permitting users to create basic_strings of
                    their own types when needed. That's not much better than the
                     original proposal, though: it still involves two complete
                    implementations of nearly identical string classes, one for
                    chars and one for wchar_ts, and doesn't help users who need
                    to create fast implementations of basic_string for other
                    types. </p>
               
               <p> The solution that the ISO/ANSI
                    committee adopted was to create a traits template that tells
                    the basic_string template how to handle time-critical
                    operations efficiently. Rather than specialize the
                    basic_string template for each of the character types,
                    implementers can specialize the char_traits template -- a
                    much less daunting task -- and get the efficiency they need.
                    The skeleton of the char_traits template is shown in
                    <A href="beckl1.htm">Listing 1</a>.
 </p>
               
               <p> Now, that's still a fairly large
                    class, but it's nowhere near as large as the basic_string
                    class itself, and it's definitely much simpler than the
                    iostream hierarchy that it also supports. I'm not going to
                    go through it in detail: most of the members are
                    self-explanatory. Remember, though, that the purpose of this
                    template is to provide a default implementation of all of 
                    its members, which will probably work with most
                    character-like types. In order to work efficiently, it will
                    almost certainly have to be specialized for the particular
                    character type being used. </p>
               
               <p> For example, the working paper
                    requires that implementers provide a specialization for char
                    that looks like this:</p>

<PRE>

namespace std {
  struct char_traits&lt;char&gt; {
     typedef char char_type;
     typedef int int_type;
     typedef streampos pos_type;
     typedef streamoff off_type;
     typedef mbstate_t state_type;

     static void assign(
         char_type &amp;c1,
         const char_type &amp;c2 );
     static bool eq(
         const char_type &amp;c1,
         const char_type &amp;c2 );
     // remainder omitted.
  };
}
</PRE>
               
               <p><BR>
                     Looks a lot like the other one, doesn't it? In fact, the
                    interface to all of the standard specializations of
                    char_traits is the same except for the typedefs at the
                    beginning. These need to be changed to reflect the actual
                    type being specialized. To handle wide chars, the typedefs
                    look like this:</p>

<PRE>

namespace std {
  struct char_traits&lt;wchar_t&gt; {
     typedef wchar_t char_type;
     typedef wint_t int_type;
     typedef wstreampos pos_type;
     typedef wstreamoff off_type;
     typedef mbstate_t state_type;

     // remainder omitted.
  };
}
</PRE>
               
               <p>Since the member functions of
                    char_traits are all written in terms of these typedef names,
                    changing the typedefs themselves is all we need do to change
                    the entire interface. </p>
               
               <p> Each of these specializations has its
                    own implementation, which can be written with its particular
                    type in mind. So, for instance, to be able to use memcpy to
                    copy chars, we'd implement the copy member function of
                    char_traits&lt;char&gt; like this:</p>

<PRE>

static inline char_type *
     char_traits&lt;char&gt;::copy( char_type *s1,
                              const char_type *s2,
                              size_t n )
{
memcpy( s1, s2, n );
}
</PRE>
               
               <p>Now whenever<B> basic_string </B>needs
                    to copy characters around it can call traits&lt;char&gt;::copy
                    and get this more efficient version. In fact the call
                    involves a bit more indirection, but we need to look a bit
                    more at<B> basic_string </B>to see how this is actually
                    done<B>.</B></p>
               
               <p>In order to hook the traits class into
                    <B>basic_string</B> we need another template parameter. The
                    <B>basic_string</B> template actually looks like this:</p>

<PRE>

template &lt;class charT,
          class traits = char_traits&lt;charT&gt;,
          class Allocator = allocator&lt;charT&gt; &gt;
class basic_string;
</PRE>
               
               <p><BR>
                     Don't worry about the third template parameter. Allocators
                    aren't relevant to what we're discussing here. We're
                    interested only in the first two parameters, which describe
                    the character type that our string holds and the traits
                    class that <B>basic_string</B> should use. Note that the
                    traits class has a default type, which is simply the
                    char_traits template instantiation for the character type
                    being used. That's a convenience: it means that the standard
                    library can provide a definition for a string of ordinary
                    characters like this:</p>

<PRE>

typedef basic_string&lt;char&gt; string;
</PRE>
               
               <p><BR>
                     This tells the compiler that the name <B>string</B> refers
                    to basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt;
                    &gt;. Within the template we can use the name traits to
                    refer to the second parameter. That means that code within
                    the template that needs to copy chars around looks like
                    this:</p>

<PRE>

traits::copy( dest, source, length );
</PRE>
               
               <p>As we've seen above, for basic_string&lt;char&gt;,
                    traits::copy is an inline function that calls memcpy. That's
                    how we write an efficient string template. So, to get back
                    to your original question, how do we associate specific
                    values with a particular type? It's easy: write a template
                    and specialize it. <A href="beckl2.htm">Listing 2</A>
                    makes a stab at it. </p>
               
               <p> Notice that I've used the
                    numeric_limits template to specify the minimum and maximum
                    values for int. That's part of the standard library, and can
                    be used for any of the built-in integral types. As its name
                    suggests, it provides information about the numeric
                    properties of the built-in types. If you stick to built-in
                    types for your Key you don't need to provide your own
                    template to tell you the minimum and maximum values: they're
                    already provided for you by numeric_limits. I wouldn't
                    recommend extending numeric_limits to cover char arrays,
                    however; they're not really numeric types, and the things
                    you have to provide to specialize numeric_limits just don't
                    make sense for char arrays. Your design will be much cleaner
                    if you provide your own template that's specific to the task
                    you're working on, and pull the information you need from
                    numeric_limits when it makes sense to. </p>
               
               <p> Now you can write your code in terms
                    of range&lt;Key&gt;::min() and range&lt;Key&gt;::max(),
                    without having to worry about the details of the Key type.
                    Of course, you have to provide template specializations for
                    each of your Key types, but that's not a big job. Certainly
                    not as big as rewriting your template code for each Key
                    type.</p>
               
               <p><h4>Q</h4>
                    Your final realloc code in your
                    August 1996 C/C++ Users Journal article contains an
                    egregious bug, obvious at a glance. You can fix the bug and
                    make the code more natural by removing count++; from inside
                    the if{} and changing ptr[count-1] &#061; val; to ptr[count++] =
                    val;.</p>
               
               <p>You really should at least read your
                    code before publishing it (if you did read it, then you need
                    to work on your reading comprehension of C code). <BR>
                     -- Jim Balter</p>
               
               <p><h4>A</h4> You are, indeed, correct: the final
                    code snippet does not increment count correctly. That's the
                    sort of thing that happens when you incrementally change
                    code to illustrate different approaches. Is there an Evelyn
                    Wood reading comprehension course for C? o </p>
               
               <P><I> Pete Becker is Senior Development
                    Manager for C++ Quality Assurance at Borland International.
                    He has been involved with C++ as a developer and manager at
                    Borland for the past six years, and is Borland's principal
                    representative to the ANSI/ISO C++ standardization
                    committee. </FONT></I></P>

<h4><a href="../../../source/1996/nov96/becker.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
     </BODY>
</HTML>
