






<HTML>
     
     <HEAD>


          
          <TITLE>November 1996/Encapsulating Windows Controls/Listing 2</TITLE>
     </HEAD>
     
     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          
          <H4>Listing 2: Support for lists of strings</H4>

<PRE>

//LbweRep.h

//A class that allows conversions from std::list&lt;CString&gt;
//to std::vector&lt;CString&gt; and back.  Class used internally
//by ListBoxWithExtras to represent the list of strings.

#ifndef LBWEREP_H
#define LBWEREP_H

#include &lt;new.h&gt;
#include &lt;fstream.h&gt;
namespace std {
#include &lt;vector.h&gt;
#include &lt;list.h&gt;
#include &lt;deque.h&gt;
}

class LbweRep : public std::vector&lt;CString&gt;
{
public:
    LbweRep();
    ~LbweRep();
    LbweRep&amp; operator=(const std::list&lt;CString&gt;&amp;);
    LbweRep&amp; operator=(const std::vector&lt;CString&gt;&amp;);
    LbweRep&amp; operator=(const CStringList&amp;);
    void MakeList(std::list&lt;CString&gt;&amp;);
    void MakeVector(std::vector&lt;CString&gt;&amp; v) {v = *this;};
    void MakeCStringList(CStringList&amp;);
};

#endif

//lbwe.cpp

#include "stdafx.h"
#include "LbweRep.h"

//Construction and Destruction

LbweRep::LbweRep() {}
LbweRep::~LbweRep() {}

//The only purpose for LbweRep is to make using an LBWE
//easier.  The box will populate itself from an embedded public
//LbweRep object.  The box information is also available from
//the LbweRep at any time.  So this is a handy way to to get 
//data from either a modal or modeless LBWE.


LbweRep&amp; LbweRep::operator=(const std::vector&lt;CString&gt;&amp; v)

//Convert an std::vector&lt;CString&gt; into an LbweRep

{
    erase(begin(), end());
    for (unsigned i = 0; i &lt; v.size(); i++)
        push_back(v[i]);
    return *this;
}


LbweRep&amp; LbweRep::operator=(const std::list&lt;CString&gt;&amp; l)

// Convert an std::list&lt;CString&gt; into an LbweRep

{
    erase(begin(), end());
    std::list&lt;CString&gt;::const_iterator i;
    for (i = l.begin(); i != l.end(); i++)
        push_back(*i);
    return *this;
}

LbweRep&amp; LbweRep::operator=(const CStringList&amp; l)

// Convert CStringList to an LbweRep

{
    erase(begin(), end());
    POSITION pos = l.GetHeadPosition();
    while (pos)
    {
        push_back(l.GetNext(pos));
    }
    return *this;
}

void LbweRep::MakeCStringList(CStringList&amp; l)
//make CStringList from LbweRep
{
    l.RemoveAll();
    LbweRep::iterator i;
    for (i = begin(); i != end(); i++)
        l.AddTail(*i);
}

void LbweRep::MakeList(std::list&lt;CString&gt;&amp; l)
//makes list from LbweRep
{
    LbweRep::iterator i;
    l.erase(l.begin(), l.end());
    for (i = begin(); i != end(); i++)
        l.push_back(*i);
}

//End of File
</PRE>
     </BODY>
</HTML>
