<HTML>
     
     <HEAD>
<TITLE>March 1999/The Journeyman's Shop</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocmar.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">The Journeyman's Shop: Initialization and Cleanup, Part 1</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Pete Becker</FONT></H3>

<BLOCKQUOTE>

<p>You should be fastidious about initializing all variables, but not fanatical.</p>
</BLOCKQUOTE>
<HR>
<BLOCKQUOTE>
<p>About a year ago I spent a few days sightseeing in Rome. The weather was great: cool enough to walk around without getting overheated, but not so cold that I felt like I needed to bundle up to stay warm. So at about eight in the morning I walked the mile or so from my hotel to the Colloseum, through the Roman Forum and then through the Capitoline Museums. By the time I got out of the museums I had been on my feet for about five hours, and I soon found myself sitting on the steps of the Vittoriano, watching the early afternoon traffic flow around the Piazza Venezia.</p>
<p>The Piazza Venezia is an island of grass at the confluence of three major roads. Traffic circles counterclockwise around the Piazza, with no stop signs, no traffic lights, no controls of any kind. Here in Boston we'd call it a rotary, but that rather mundane word doesn't do justice to the beauty of the Piazza. And to those of us who battle with the horn-honking and intimidation of rotaries, it doesn't convey the orderliness of the liquid flow that I saw that day. The traffic patterns shifted to reflect the variations in the number of cars coming in and going out on each of the three roads. Here in the United States a traffic load like that would have resulted in utter chaos and near gridlock. In Rome the drivers seemed to view themselves as part of a larger enterprise, whose purpose was to get everyone to their destination as quickly as possible. They waited when waiting was appropriate, and moved when moving was appropriate. They trusted the other drivers and didn't view them as competitors. The result was that nobody had to wait for very long, and traffic moved quickly and smoothly through this major intersection.</p>
<p>In the United States we learn to drive in accordance with the fundamental principle of defensive driving. Assume that the driver of the car next to you is going to do something really stupid, and make sure you have a way out. For the most part we drive slowly and hesitantly, trying to make sure that we're safe, and ultimately increasing congestion and slowing everyone down. The drivers in Rome work with a different fundamental principle. They assume that the drivers around them are reasonably competent, and that they'll do something reasonable when faced with an unexpected situation; they drive accordingly, doing reasonable things that we view as too aggressive. The drivers in Rome know how to drive <a href="#1">[1]</a>.</p>
<p>Here in The Journeyman's Shop we approach programming in the same way that drivers in Rome approach driving: we assume that the other programmers we are working with are reasonably competent, and we don't put a lot of effort into making our code safe for use by beginners. That doesn't mean that we don't write code that's reasonably robust, even when it is misused. What it means is that we try to recognize the kinds of mistakes most likely to happen when people use our code, and add some sort of protection against those mistakes. We don't try to protect our code from every possible misuse. That takes far too much time, and offers very little benefit. We know that we'll get to our goal much faster, with no loss of safety, if we protect ourselves only from things that are likely to happen, and don't concern ourselves with things that shouldn't happen.</p>
<p>I saw a good example of over-protectiveness the other day in a message on comp.lang.c++. The writer explained that he always uses <B>void</B> in the declaration of a C++ function that takes no arguments, in case someone who is reading the code doesn't know that in C++ an empty argument list means that the function takes no arguments. Someone who just moved from C to C++ could make that mistake, because the two languages give different meanings to an empty argument list. But that's not the sort of mistake an experienced C++ programmer ought to be worried about. The newcomer will quickly learn this difference, and this memory aid will be of no value <a href="#2">[2]</a>.</p>
<p>Such a practice is not bad in itself, but this minor protection comes at a fairly high price. When I read this sort of code and see all those unnecessary <B>void</B>s it looks to me like the person who wrote it doesn't understand what an empty argument list means in C++. Now I have to be much more cautious in what I expect this person to be able to do, because the code suggests that he doesn't really understand C++. We're in a traffic jam, caused entirely by this tentativeness <a href="#3">[3]</a>. The solution is to pretend that we're in Rome. Instead of slowing everyone down to accommodate beginners, we should teach beginners good habits so that when they are ready they can move smoothly into the flow. In the long run we'll be much more productive.</p>

<h4><FONT COLOR="#000080">Initialization and Cleanup</FONT></H4>

<p>This month we're going to begin talking about initialization and cleanup. This is an area where errors are common, and often disastrous. Many of us have had the experience of hunting down that uninitialized pointer that crashed our application after it had been running for ten minutes (or, if you were particularly unlucky, ten days). Stabilizing that problem so that we can reproduce it consistently, which is the first step in identifying the problem and fixing it, can often be very difficult &#151; the problem comes and goes as we change our code, because the value that the pointer takes on depends on what code has been run before the function that creates it.</p>
<p>This is typical of the kinds of problems that result from uninitialized variables. They show up in unpredictable places, they disappear when we run the program under the debugger, and they move when we change the code. Because these problems are often so hard to track down, we must make a careful effort to avoid them. This means thinking about initializing every variable that we create. Some folks even insist that every variable be initialized when it is created, even if only to a recognizable value, such as <B>NULL</B> for a pointer. I don't go quite that far, but I do insist that not initializing a variable be the result of a deliberate, defensible decision. If you can't explain why it is safe to not initialize a particular variable, you haven't been paying enough attention to the code you are writing.</p>
<p>Initialization simply means setting a variable to a meaningful value. In some cases the compiler does this for you. That's okay if the value the compiler chooses really is appropriate for your program, but don't fall into the habit of simply accepting what the compiler gives you. Think about what makes sense in your program, and choose a value accordingly. Then make sure that you understand how to initialize the variable and when that initialization will occur. Every time you create a variable in your program, think about these three things: what should I initialize it to, how should I initialize it, and when should I initialize it. If initializing a variable involves allocating resources, then add two more items to the list: how should I dispose of the resource, and when should I dispose of the resource. If you develop this habit, your code will become much more robust.</p>
<p>This month we'll talk about C. Almost all of what we're going to be looking at also applies to C++, but in somewhat more complicated ways. Rather than try to point out the exceptions and qualifications as I go along, I'll sum them up when we get into C++ next month.</p>

<h4><FONT COLOR="#000080">Static Initializers</FONT></H4>

<p>In C, all variables at file scope that are of arithmetic type are initialized to zero. All file scope variables that are pointers are initialized to <B>NULL</B>. This lets you create global variables that are automatically initialized when the program starts. All you have to do is define them, and the compiler does the rest. For example:</p>

<pre>
int i;      /* initialized to 0 */
long j;     /* initialized to 0 */
void *data; /* initialized to NULL */
</pre>

<p>Now, this compiler-provided initialization is not particularly surprising to anyone with just a little bit of experience with C or C++. However, you'll occasionally encounter people who don't trust the compiler, and insist on explicitly initializing these variables. That's not necessary. The language definition requires that this initialization take place.</p>
<p>The rule for static initializers is actually broader than what I've stated above. It also applies to arithmetic types and pointer types that are members of arrays and structs:</p>

<pre>
/* all elements of data are initialized to 0 */
short data[20]; 

struct complex { double real; double imag; };

/* c.real, c.imag are initialized to 0.0 */
struct complex c;
</pre>

<h4><FONT COLOR="#000080">Explicit Initializers</FONT></H4>

<p>Explicit initializers, as the name suggests, are initializers that you write yourself. Once again, you're probably already quite familiar with them. They let you specify the value that your variable is initialized with.</p>
<p>For simple types such as integral types and pointers, an explicit initializer is simply an equal sign followed by the value that you want to initialize the variable with. In C, initializers for variables defined at file scope must be compile-time constants. That is, they must be values that the compiler can evaluate under a somewhat constrained set of rules. You cannot initialize file scope variables with values that must be computed at run time. For example:</p>

<pre>
void *buffer = malloc(100);
</pre>

<p>This initialization is not valid in C. However, as we'll see later, you can use an expression like this to initialize a variable that's local to a function.</p>
<p>When you need to initialize an array or a struct you use a form known as "aggregate initialization." In its simplest form, an aggregate initializer is simply a pair of curly braces containing a list of the initial values for the fields being initialized. The initial values are assigned to the elements that are being initialized in the order that both occur. For example,</p>

<pre>
int data1[5] = { 0, 1, 2, 3, 4 };
</pre>

<p>This creates an array of five integers, and initializes <B>data1[0]</B> to <B>0</B>, <B>data1[1]</B> to <B>1</B>, and so on. Structs work pretty much the same way:</p>

<pre>
struct complex
{
double real;
double imag;
};

struct complex c1 = { 1.0, 0.0 };
</pre>

<p>This creates a variable named <B>c1</B> of type <B>complex</B>, with the field <B>real</B> initialized to <B>1.0</B> and the field <B>imag</B> initialized to <B>0.0</B>.</p>
<p>When you start working with more complicated data structures, such as arrays of structs or structs that contain other structs, you have a choice. You can continue to simply list initial values in the order that their corresponding elements occur, or you can add additional pairs of braces to reflect the actual structure of the data. The first approach is simpler to write, but you have to be careful not to get lost. The second is usually easier to read, and gives you more control. Let's look at initializing an array of <B>complex</B>:</p>

<pre>
struct complex vector[3] = {1.0, 0.0, 0.0, 1.0, 1.0, 1.0};
</pre>

<p>This creates an array of three complex objects, and initializes <B>vector[0]</B> to <B>(1.0, 0.0)</B>, <B>vector[1]</B> to <B>(0.0, 1.0)</B>, and <B>vector[2]</B> to <B>(1.0, 1.0)</B>. If you need to figure out what the initial value assigned to <B>vector[1]</B> is from looking at this initializer, you have to count carefully. That's where the other form has an advantage:</p>

<pre>
struct complex vector2[3] = {{1.0, 0.0}, {0.0, 1.0}, {1.0, 1.0}};
</pre>

<p>Now it's easier to see which values go with which array element.</p>
<p>In both cases, if you supply fewer initializer values than there are elements to be initialized, all the remaining elements are initialized as if the variable had been declared in file scope. That is, the compiler sets their values to zero.</p>

<pre>
int data2[5] = { 1, 2 };
</pre>

<p>This statement initializes <B>data2[0]</B> to <B>1</B>, <B>data2[1]</B> to <B>2</B>, and the remaining three elements of <B>data2</B> to <B>0</B>.</p>
<p>There's also a shortcut that you can use when you're initializing an array. You can ask the compiler to figure out from the initializer how large the array actually is. We could have written the first example in this section like this:</p>

<pre>
int data3[] = { 0, 1, 2, 3, 4 };
</pre>

<p>The compiler would count the number of initializers and figure out that <B>data3</B> has five elements.</p>
<p>Finally, when you are initializing an array of <B>char</B> you can use a quoted string for an initializer:</p>

<pre>
char name[] = "The Journeyman's Shop";
</pre>

<p>This creates an array of 22 <B>char</B> elements, with each one holding the corresponding character from the initializer. Remember, this string has a terminating zero, and that's the value that goes into the last element of the array.</p>
<p>In C but not in C++ you're allowed to specify an array size that's one character too small for the quoted string:</p>

<pre>
char name1[21] = "The Journeyman's Shop";
</pre>

<p>Now there's no room for the terminating zero, and the array will be initialized with the characters up to but not including the zero. This only applies to character arrays that are one character too small. You can't use this to chop out an initializer consisting of an arbitrary set of characters from the beginning of the string.</p>
<p>I said earlier that one of the things you have to consider when you think about initialization is when the initialization should occur. I haven't said anything about that yet, because it really doesn't make much difference when you are initializing file scope variables in C. They'll be initialized before you get a chance to do anything with them. When you start looking at variables that are defined inside of functions, however, it's a different matter. We'll look at some examples shortly.</p>

<h4><FONT COLOR="#000080">Auto Variables</FONT></H4>

<p>Auto variables are the variables that we define inside of functions without the label <B>static</B>. They can be initialized in exactly the same way as file scope variables, with one important difference. If you do not specify an initializer for an auto variable it does not get initialized. This leaves the variable with an indeterminate value. Don't try to use the value held in an uninitialized variable. Doing so can crash your program. Make sure that you set it to a usable value before you try to use it.</p>
<p>All the examples we looked at above are valid forms of initialization for auto variables:</p>

<pre>
void f()
{
int i;      /* i has an indeterminate value */
long j;     /* j has an indeterminate value */
void *data; /* data has an indeterminate value */
void *buffer = malloc(100);
int data1[5] = { 0, 1, 2, 3, 4 };
struct complex c1 = { 1.0, 0.0 };
struct complex vector[3] = { 1.0, 0.0, 0.0, 1.0, 1.0, 1.0 };
struct complex vector2[3] = { {1.0, 0.0}, {0.0, 1.0}, {1.0, 1.0} };
int data2[5] = { 1, 2 };
int data3[] = { 0, 1, 2, 3, 4 };
char name[] = "The Journeyman's Shop";
char name1[21] = "The Journeyman's Shop";
}
</pre>

<p>Each of these initializations will be performed each time <B>f</B> is executed. This lets you begin execution with all of your auto variables in a known state.</p>
<p>Of course, the variables that you haven't initialized aren't in a known state, they're indeterminate. That's often a mistake, but sometimes it's intentional. You might not have enough information at the start of a function to initialize some of your auto variables. Since C only lets you define variables at the beginning of a block <a href="#4">[4]</a>, you have to either define such variables and not initialize them, or create otherwise unnecessary blocks just to allow initialization. For example, suppose you have written a function that takes a pointer to <B>char</B> and returns an <B>int</B>. This function displays the string on the console, reads an integer value that the user types in response to the prompt, and returns that value. Let's call it <B>get_integer</B>:</p>

<pre>
int get_integer(char *prompt);
</pre>

<p>Now let's write a function that concatenates a couple of strings to produce a prompt, then calls <B>get_integer</B>:</p>

<pre>
void test(char *part1, char *part2)
{
char prompt[128];
int val;
strcpy(prompt, part1);
strcat(prompt, part2);
val = get_integer(prompt);
/* code continues from here. */
}
</pre>

<p>Now, notice that I haven't initialized <B>val</B>. I was careful to assign a value to it as soon as I could, however, so that I won't accidentally use the indeterminate value that it has when execution of the function begins. The alternative, adding a block so that I can define <B>val</B> after I've figured out how to initialize it, looks like this:</p>

<pre>
void test(char *part1, char *part2)
{
char prompt[128];
strcpy(prompt, part1);
strcat(prompt, part2);
    {
    int val = get_integer(prompt);
    /* code continues from here. */
    }
}
</pre>

<p>I don't know about you, but I don't particularly like adding blocks just so that I can define new variables. I prefer to use blocks only as part of flow control statements such as <B>if</B>, <B>while</B>, <B>switch</B>, etc. I find it confusing to add blocks that don't reflect flow control. That is, I don't particularly like this technique for avoiding uninitialized variables. I much prefer the first version, even though it's possible to accidentally use <B>val</B> before it has been assigned a value.</p>
<p>Some people would insist on initializing <B>val</B>, even though the value it is initialized to will never be used. This seems to come out of a sense of tidiness. I think it's a mistake. You should initialize variables to meaningful values when those values are available. Don't give them meaningless values, just in case. That's not programming, it's fear.</p>
<p>In general, of course, when you write a function you should group statements that do related things together. That principle calls for initializing variables as close to the point where they are used as possible. For example:</p>

<pre>
void f()
{
int i;
/* do some things here that don't involve i */
for (i = 0; i &lt; 100; ++I)
    compute(i);
}
</pre>

<p>I suspect that nobody has a problem with deferring initialization of <B>i</B> to the point where it is actually used. It makes the code much easier to read.</p>
<p>The drawback to deferring initialization is that it isn't really initialization when we defer it. That is, it's not initialization in the technical sense in which the language definition uses the word. This means that some of the initialization constructs that we've looked at here cannot be used if we defer initialization:</p>

<pre>
void f()
{
char name[22];
struct complex c1;

name = "The Journeyman's Shop"; /* invalid */
c1 = { 1.0, 0.0 }; /* invalid */
}
</pre>

<p>However, in cases like this we do have alternatives available:</p>

<pre>
void f()
{
char name[22];
struct complex c1;
strcpy(name, "The Journeyman's Shop");
c1.real = 1.0;
c1.imag = 0.0;
}
</pre>

<p>Be a bit careful when you write late initializations like this: things sometimes aren't quite what they seem. In particular, you might be tempted to replace an aggregate initializer with a call to <B>memset</B>. For example:</p>

<pre>
void f()
{
void *data[5] = { 0 };
}
</pre>

<p>The above code initializes all five void pointers to <B>NULL</B> values. However, the following code might not do the same thing:</p>

<pre>
void f()
{
void *data[5];
memset(data, 0, sizeof(data));
}
</pre>

<p>The danger here is that a null pointer is not required to have a representation that is all zeroes, so setting the bytes of the pointers here to zero does not necessarily initialize them to null. On most systems this will, in fact, work, but it's not something you can count on. <I>Assigning</I> the value zero to a pointer gives you a null pointer because the compiler is required to do whatever is needed to create the value of a null pointer. Setting the bytes of a pointer to zero doesn't give the compiler a chance to intervene, and need not work <a href="#5">[5]</a>.</p>

<h4><FONT COLOR="#000080">Local Statics</FONT></H4>

<p>You can also mark a local variable as <B>static</B>, which means that the variable stays around throughout the execution of the program. It also means that, unlike an auto variable, it will be initialized only once, the first time the function that contains its definition is called. For example:</p>

<pre>
void count_down()
{
static int sec = 10;
printf("%d\n", sec--);
if (sec == 0)
    printf("Liftoff!\n");
}

int main()
{
int i;
for (i = 0; i &lt; 10; ++i)
    count_down();
return 0;
}
</pre>

<p>The first time <B>count_down</B> is called it will initialize <B>sec</B> to <B>10</B>, print out its value, and decrement it. Succeeding calls to <B>count_down</B> will not reinitialize <B>sec</B>, but will only print out its value and decrement it. That is, until <B>sec</B> reaches zero. A local static is especially useful when a function requires some sort of resource, but that function might not be called at all during program execution. Instead of allocating that resource whenever the program runs, allocate it in an initializer for a static variable in the function that needs it:</p>

<pre>
void f()
{
static char *buffer = malloc(10000);
/* code that uses buffer */
}
</pre>

<p>If <B>f</B> is never called, its buffer will not be allocated, and there will be more memory available for the rest of the program <a href="#6">[6]</a>.</p>

<h4><FONT COLOR="#000080">Cleanup and atexit Functions</FONT></H4>

<p>Whenever you allocate a resource you should think about how to dispose of it. In many cases this is easy to do. If you won't need that resource after exiting from the function that you allocated it in, you can simply dispose of it at the end of that function. Like this:</p>

<pre>
void f()
{
char *buffer = malloc(1000);
if (buffer != NULL)
    {
    /* do something with buffer... */
    }
free(buffer);
}
</pre>

<p>If you are allocating a resource that will be used in other parts of the program, however, making sure that this resource is released before the program exits is a bit more complicated. You might be tempted to put the cleanup code in <B>main</B>:</p>

<pre>
void *scarce_resource;

int main()
{
scarce_resource = get_resource();
process_data();
release_resource(scarce_resource);
return 0;
}
</pre>

<p>The problem with this approach is that if any of the code executed in the call to <B>process_data</B> calls <B>exit</B>, <B>process_data</B> will not return and the cleanup code will not be executed. If the resource that this cleanup code handles does not get released by the operating system when the program terminates, you've got a problem. The solution in C is to write a function that releases the resource, and register it with <B>atexit</B> <a href="#7">[7]</a>. After you've done this, whenever your program terminates by returning from <B>main</B> or by a call to <B>exit</B>, your cleanup function will be called. If the program terminates by a call to <B>abort</B> this does not happen.</p>
<p>For example, the Java library that I've been working on has a thread support package and a garbage collector, both of which need to be initialized at program startup and shut down at program termination. Each of these packages provides two functions for these operations: <B>int jt_init(void)</B> to initialize the thread package and <B>int gc_init(void)</B> to initialize the garbage collector; and <B>void jt_cleanup(void)</B> to shut down the thread package and <B>void gc_cleanup(void)</B> to shut down the garbage collector. By an odd coincidence, both cleanup functions have exactly the signature required by <B>atexit</B>. The library is written for use with a Java-to-C translator, so execution of the Java program begins in the C function <B>main</B>, which in a somewhat simplified form looks like this:</p>

<pre>
int main(int argc, char *argv[])
{
if (jt_init() != SUCCESS || atexit(jt_cleanup) != 0)
    exit(EXIT_FAILURE);
if (gc_init() != SUCCESS || atexit(gc_cleanup) != 0)
    exit(EXIT_FAILURE);
user_entry(format_args(argc, argv));
return 0;
}
</pre>

<p>The first line initializes the thread package and registers its cleanup function. If either of these operations fails, the application is terminated by the call to <B>exit</B> in the second line. Similarly, the third line initializes the garbage collector and registers its cleanup function. Again, if either of these operations fails, the application is terminated. Notice, however, that if this second initialization fails it is not necessary to explicitly call the thread package's cleanup function. The code has registered that function with <B>atexit</B>, and the C runtime library will call that function as the application exits.</p>
<p>There are a couple of things you need to know when you use <B>atexit</B>. First, the functions that you register are called in the reverse order of their registration. In the Java <B>main</B> function that I listed above, this means that <B>gc_cleanup</B> will be called first, then <B>jt_cleanup</B>. Second, the C standard requires implementers to support at least 32 registrations. Don't go over this limit, and always check that registration was successful, just in case.</p>

<h4><FONT COLOR="#000080">Errata</FONT></H4>

<p>Fred Tydeman pointed out several mistakes I made in my discussion of floating-point errors in my December column:</p>
<p><I>C9X is not adopting IEEE-754 specs for all floating-point [operations]. It is allowing that [IEEE-754] to be one of the bindings for floating-point.</I></p>
<p><B>HUGE_VAL</B><I> already can be positive infinity (see footnote 104) in C89.</p>
<p>"Dividing positive infinity by zero produces NaN" is wrong. It is +/- infinity (depends upon the signs of the infinity and the zero).</p>
<p>"... we won't ever get back to a normal value" is wrong. 1 / infinity is zero.</I></p>
<p>There are three classes of programmers when it comes to understanding floating-point math: the ones who think it's easy because it's not much different from integer math; the ones who think it's hard because it's not at all like integer math; and the ones who truly understand it. I suspect that most programmers are in the first category &#151; they simply haven't dealt with the complexities of floating-point math enough to recognize its dangers. If you're in this category, please take a couple of hours to read through a good discussion of how floating-point math actually works. That will put you firmly in the second category. Once there, you'll know enough to recognize cases where you're in over your head and need help from someone in the third category. That's a very specialized group. People get Ph.D.s in numerical analysis, and after that they speak a completely different language. But if you can get someone who truly understands this sort of thing to write the tricky code for you, and you have learned to recognize what's tricky and what isn't, you should not be afraid of floating-point math.</p>
<p>As for me, I'm in the second category, with occasional ambitions to get into the third. The danger here is that it is much harder to get into the third category than most people think, so it's easy to kid ourselves into believing that we know enough about floating-point math to be able to discuss it sensibly. If we're lucky, someone will remind us that we really don't know as much about it as we think we do.</p>

<h4><FONT COLOR="#000080">Coming Up</FONT></H4>

<p>Next month we'll talk about what C++ and Java require us to deal with in terms of initialization and cleanup. That means constructors, destructors, exceptions, and <B>finally</B> blocks.</p>

<h4><FONT COLOR="#000080">Notes</FONT></H4>

<p><a name="1"></a>[1]  Please note that I said that they assume that the other drivers are "reasonably competent." I am not advocating the Indy-500 tactics that you often see when driving between Santa Cruz and San Jose on Route 17. Competitive driving is for trained professionals only, and has no place on public highways.</p>
<p><a name="2"></a>[2]  I'm not claiming that using <B>void</B> in a declaration is never appropriate. If we're writing a header that has to compile as both C and C++, for example, then we must follow the C rule. But we do this because there is an identifiable technical reason for doing it, not out of a general sense that it might be safer.</p>
<p><a name="3"></a>[3]  I'm not saying that beginners shouldn't protect themselves with this sort of technique. But they should regard things like this as temporary aids, and at some point decide to take off the training wheels.</p>
<p><a name="4"></a>[4]  The next C standard, C9X, will allow auto variables to be defined at any point in a function, just as C++ does.</p>
<p><a name="5"></a>[5]  The same problem arises with floating-point values. Setting the bytes to zero does not necessarily produce a valid floating-point value.</p>
<p><a name="6"></a>[6]  One warning, however: many compilers don't handle initialization of static variables correctly in multi-threaded programs. The danger here is that two threads will call the same function at the same time, and the initializer will be run twice. On the other hand, if you're calling <B>count_down</B> from multiple threads without doing any synchronization yourself, the results probably won't make sense anyway.</p>
<p><a name="7"></a>[7]  In C++ you can use <B>atexit</B>, but destructors provide a more powerful mechanism. We'll look at destructors next month.</p>

<p><i>Pete Becker is Technical Project Leader for Dinkumware, Ltd. He spent eight years in the C++ group at Borland International, both as a developer and manager. He is a member of the ANSI/ISO C++ standardization committee. He can be reached by email at <B>petebecker@acm.org</B>.</i></p>

</BLOCKQUOTE>
</BODY>
</HTML>
