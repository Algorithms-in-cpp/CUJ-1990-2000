<HTML>
     
     <HEAD>
<TITLE>March 1999/import java.*</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocmar.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">import java.*: Using Primitive Types and Wrappers</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Chuck Allison</FONT></H3>

<BLOCKQUOTE>

<p>The primitive types of C/C++ are much the same in Java, except that they're even more primitive and more predictable.</p>
</BLOCKQUOTE>
<HR>
<BLOCKQUOTE>
<p>A <I>pure</I> object-oriented programming language treats each datum as a complete object. This makes for a uniform way to handle data, but it also adds overhead in both time and space that can sometimes be a significant disadvantage. If all you want to do is process integers, for example, you'd rather not bother with the heap space and implicit pointer indirection that using objects would bring about. This explains why C++ is preferable to SmallTalk for time-critical applications. Everything in SmallTalk, even an integer, is an object. C++, on the other hand, has efficient built-in integer and floating-point types, so you only incur object overhead when you explicitly ask for it.</p>
<p>Java allows you to choose either data-handling paradigm. It has built-in numeric types similar to those in C++, but it also provides <I>wrapper</I> classes for integral and floating-point objects (see <A HREF="tab1.htm">Table 1</A>). You usually use the wrapper classes only when complete objects are required, such as in collections. In this article I'll talk about built-in (or primitive) types, wrappers, and operators.</p>
<p>The most significant feature of Java's primitive types is that they are truly portable. Because C was conceived primarily as a systems programming language, its data types are tailored to each host system and therefore vary in size from platform to platform. Building portable programs in C/C++ can consequently require conditional compilation to determine the correct numeric type to use. In Java, on the other hand, an <B>int</B> is a 32-bit two-compliant integer wherever you go. On systems where the size of a machine word is not 32 bits, there could be a small performance penalty, but for applications that can spare a nanosecond here and there (i.e., most applications) no one will ever notice. This uniform data size for primitive types renders unnecessary the need to recompile code for different platforms, thus allowing pre-interpreted byte codes to run on any platform that has a Java Virtual Machine. That's portability.</p>

<h4><FONT COLOR="#000080">Size, sizeof, and Signs</FONT></H4>

<p>The C and C++ standards require a <B>long</B> to be at least 32 bits, and that's exactly what most compilers give you, but Java mandates that you get 64 bits, resulting in a range over 4 billion times larger. C/C++ compilers are also at liberty to make <B>float</B> and <B>double</B> the same size, but again, Java guarantees distinct sizes of 32 and 64 bits respectively. Because of the fixed sizes of primitive types, and because of the way objects are created in Java, there is no need for a <B>sizeof</B> operator.</p>
<p>There is no <B>unsigned</B> qualifier in Java. Except for <B>boolean</B> and <B>char</B>, all types are signed. A <B>boolean</B> holds only two values, <B>true</B> and <B>false</B>, so signedness doesn't apply. The <B>char</B> type represents a Unicode character, which is the industry standard 16-bit encoding covering the range [0, 65535]. (For more on Unicode, see my article "The Standard C Library, Part 3," <I>CUJ,</I> February 1995, p. 94). All the other numeric types are signed. This makes it a little tedious to enforce non-negative parameter values, but it also avoids the signed/unsigned mismatch problems that occur all too frequently in C++.</p>
<p>A key use of <B>unsigned</B> in C++ is in zero-filling an integer when right-shifting. For example, the result of the expression</p>

<pre>
x &gt;&gt; 3
</pre>

<p>may differ among C/C++ compilers when <B>x</B> is signed and negative. Most implementations will propagate the sign bit into the upper three slots of the result. To guarantee zero-fill instead of sign extension, you must declare <B>x</B> as <B>unsigned</B>. Once again, Java is more precise. With the normal right-shift operator (<B>&gt;&gt;</B>) you always get sign extension. If you want zero-fill semantics you use the <B>&gt;&gt;&gt;</B> operator, as in</p>

<pre>
x &gt;&gt;&gt; 3
</pre>

<h4><FONT COLOR="#000080">Operators</FONT></H4>

<p>Speaking of operators, Java follows C very closely by providing identical bitwise operators, the ternary conditional operator, and the full array of binary operators, including the handy assignment operators C programmers are so fond of (see <A HREF="tab2.htm">Table 2</A>). As far as precedence goes, unary operators are high priority, assignment operators are low, and everything else in-between is pretty much as you would expect. The bitwise operators have the same priority as in C, so you have the same surprises you've always had. So when in doubt, use parentheses. Operators in Java also associate as they do in C: unary and assignment operators group right-to-left, everything else groups left-to-right. The logical and conditional operators also obey the short-circuit semantics that C programmers are used to. For example, if <B>i</B> is less than <B>N</B> in the following expression, then <B>a[i]</B> is not even evaluated:</p>

<pre>
if (i &lt; N &amp;&amp; a[i] != 0)
</pre>

<p>The most interesting feature of Java operators for C/C++ programmers is what's missing. You already know there is no <B>sizeof</B> operator. Since Java does not use explicit pointers you won't find the pointer operations: unary <B>&amp;</B> and <B>*</B>, and the <B>-&gt;</B> operator. There is also no general comma operator, although you can place comma-separated sequences of expressions in the initialization and iteration parts of a <B>for</B> loop as you can in C. The only other surprise is the addition of the <B>&gt;&gt;&gt;</B> operator mentioned above, and the <B>instanceof</B> operator, discussed in the Wrappers section below.</p>
<p>The equality operator (<B>==</B>) requires some special care in Java. When comparing primitive types, it is similar to C with one improvement: Java's type system catches the following common error:</p>

<pre>
if (x = y) // Oops! Meant to type ==
</pre>

<p>Java expects the target of a logical expression to be of type <B>boolean</B>, but the type of an assignment is the type of its (possibly promoted) left operand, so unless <B>x</B> is a <B>boolean</B>, the compiler will flag the typo above as an error.</p>
<p>But when it comes to objects, <B>==</B> is rarely what you want. For example, if <B>x</B> and <B>y</B> are instances of class <B>Foo</B>, then the expression <B>x == y</B> compares the objects' handles, not the values of the objects' fields. I'll reveal the secrets of this mystery in a future column. (If you know Lisp, the situation is analogous to <B>eq</B> vs. <B>equal</B> in that language). For now, just remember not to use <B>==</B> to compare objects, but to use the <B>equals</B> method instead.</p>
<p>A final word on operators that C programmers will find interesting. It concerns how Java evaluates operands. Java always fully evaluates the operands of a binary operator left-to-right. Guaranteed. For example, in the expression <B>f() + g()</B> you can count on any side effects of <B>f</B> being complete before the call to <B>g</B>. C, on the other hand, makes no guarantees whatsoever on the order of evaluation of operands, which is why the C standards committee had to define sequence points to give programmers some control over side effects. You don't need to worry about sequence points in Java.</p>

<h4><FONT COLOR="#000080">Literals and Constants</FONT></H4>

<p>Objects can contain objects which contain objects seemingly ad infinitum, but even the most complex objects ultimately reduce to primitive types, and primitive types ultimately get initialized with literal values, whether in source code or from external input. The program in <A HREF="fig1.htm">Figure 1</A> illustrates the various types of literals.</p>
<p>As you can see, literals are similar to those in C++. The <B>boolean</B> literals are <B>true</B> and <B>false</B>. Unadorned numeric literals are of type <B>double</B> if they have a decimal point, and <B>int</B> if they don't. As in C, a leading <B>0</B> denotes an octal <B>int</B>, and a <B>0x</B> prefix introduces a hexadecimal number. Any numeric expression can initialize a <B>double</B>. If you want to be explicit, you can use an <B>f</B> suffix for <B>float</B> and a <B>d</B> for <B>double</B>. In all cases the letter you use to identify the type of a numeric literal can be either upper or lower case, but a lower case <B>l</B> is discouraged since you can too easily mistake it for the digit <B>1</B>. There are no suffixes for <B>short</B> and <B>byt</B>e. You either assign an <B>int</B> literal in the correct range, or you cast to the appropriate type as needed (see Conversions and Casts below).</p>
<p>Character literals occur between single quotes, as in C, except that you can also specify a Unicode character escape sequence with a lower case <B>u</B>, as in <B>'\u001c'</B>, much like in C++. Unicode escape sequences are always interpreted as hexadecimal. Java does not support 32-bit ISO 10646 characters like C++ does (e.g., <B>'\U0000001c'</B>). Java supports most of the character escape sequences that C does, such as <B>'\n'</B>, <B>'\t'</B>, etc., except for <B>'\a'</B> (audible bell) and <B>'\v'</B> (vertical tab).</p>
<p>The Java equivalent of <B>const</B>, as far as variables are concerned, is the <B>final</B> keyword, which suggests that a variable cannot be changed (i.e., it has its <I>final</I> value). The following declares a constant <B>int</B>:</p>

<pre>
final int max = 32767;
</pre>

<p>Local final variables should always be initialized in their declaration. In future installments you'll see alternative initialization techniques for class data members.</p>

<h4><FONT COLOR="#000080">Conversions and Casts</FONT></H4>

<p>You can always assign a numeric value to a wider type, such as a <B>float</B> to a <B>double</B> or an <B>int</B> to a <B>long</B>. Assigning the other way usually requires a cast, as in</p>

<pre>
// A "narrowing" conversion
int i = 2;
byte b = (byte) i; // note C-style cast
</pre>

<p>Java's cast syntax is identical to C (i.e., the target type precedes the operand in parentheses). If a literal represents a value small enough to fit into the range of the target variable then a cast is not required. For example:</p>

<pre>
// 127 is an int literal; 128 would fail
byte b = 127;
</pre>

<p>If you substituted 128 for 127 above the compiler would complain, since 128 is outside the range of a byte. Narrowing conversions often result in a loss of information, including sign, since you lose bits off the top. For example, substituting 128 for 127 above would initialize <B>b</B> to -128. Starting with the bit representation of 128 (<B>0...010000000</B>, i.e., 24 zeroes, a one, then seven zeroes), the upper 24 zeroes are dropped, and the remaining eight bits are interpreted as a signed integer.</p>
<p>Like standard numeric conversions in C, widening conversions occur implicitly for primitive types when you use them in an expression or as parameters to a function. Binary numeric and comparison operations, for example, follow this simple logic:</p>

<pre>
if either operand is a double then
    convert the other to double if needed
else if either operand is float then
    convert the other to float if needed
else if either operand is long then
    convert the other to long if needed
else
    convert both to int as needed
</pre>

<p>Passing a <B>byte</B> as an argument to a function expecting an <B>int</B> likewise causes an implicit conversion of the <B>byte</B> to an <B>int</B>. You don't, however, get implicit conversions from a primitive type to a class object like you do with single argument constructors in C++. For example, if you have a class <B>Foo</B> with a constructor that takes a single <B>int,</B> and a function <B>f</B> that takes a single <B>Foo</B> argument, you can't call <B>f(1)</B>, nor even <B>f((Foo)1)</B>. Why? Because objects must always be created via the <B>new</B> operator, so the correct form is <B>f(new Foo(1))</B>. The key motivation for implicit conversions via single-argument constructors in C++ was to complement operator overloading, which doesn't exist in Java. One less thing to worry about.</p>

<h4><FONT COLOR="#000080">Wrappers</FONT></H4>

<p>The wrapper classes listed in <A HREF="tab1.htm">Table 1</A> provide methods and constants relevant to their corresponding primitive type. You can, for example, inquire as to the range of values, as the program in <A HREF="fig2.htm">Figure 2</A> illustrates.</p>
<p>Many classes in the Java library work with generic objects, or, in other words, with instances of the <B>Object</B> class. A class that does not explicitly extend another class implicitly extends <B>Object</B>, so all classes inherit from <B>Object</B> one way or the other. A collection class, such as <B>Vector</B>, can act as a generic container in that it holds objects of type <B>Object</B>, and can therefore hold any Java object. But primitive types are not objects, so a <B>Vector</B> cannot hold integers or any other numeric type directly. The work-around is to populate the <B>Vector</B> with objects of type <B>Integer</B>, the wrapper for <B>int</B>. The following program uses this technique to store ten integers in a <B>Vector</B>.</p>

<pre>
import java.util.*; // Import the Vector class

public class UseVector {
    public static void main(String[] args) {
        Vector v = new Vector();
        for (int i = 0; i &lt; 10; ++i)
            v.addElement(new Integer(i));
        for (int i = 0; i &lt; v.size(); ++i)
            System.out.print(v.elementAt(i) + " ");
    }
}

/* Output:
0 1 2 3 4 5 6 7 8 9
*/
</pre>

<p>The wrapper classes have a number of useful methods. Each integer-related type has an <B>atoi</B> equivalent for converting a string representation of a number to a number. For example, <B>Integer</B> has <B>parseInt</B>, <B>Long</B> has <B>parseLong</B>, and so on. Each wrapper type also has functions that return its value in all numeric formats, e.g., <B>byteValue</B>, <B>longValue</B>, <B>doubleValue</B>, etc. The following program converts strings to <B>int</B> and <B>float</B>.</p>

<pre>
public class ParseNums {
    public static void main(String[] args) {
        int i = Integer.parseInt("123");
        int j = Integer.parseInt("4f", 16);
        float x = Float.valueOf("123.45").floatValue();
        System.out.println("i = " + i + "," + "j = " + j + ","
            + "x = " + x);
        System.out.println("i = " + Integer.toBinaryString(i));
    }
}

/* Output:
i = 123,j = 79,x = 123.45
i = 1111011
*/
</pre>

<p>There is no parse function for the floating-point wrapper types. All wrappers except <B>Character</B> have a <B>valueOf</B> method that parses a string but returns a wrapper object, not a primitive, so I used that for the <B>Float</B> example above.</p>
<p>The six numeric wrapper classes all inherit from the <B>Number</B> abstract class, which defines the methods <B>byteValue</B>, <B>intValue</B>, etc. This allows you to define classes that can process any numeric type, simply by writing to the interface of the <B>Number</B> class.</p>
<p>If you ever want to verify that an object is an instance of a particular type you can use the <B>instanceof</B> operator. For example, if you have a function that takes a single <B>Number</B> parameter, <B>f(Number n)</B>, say, you can verify that the argument is of a type derived from <B>Number</B>, as follows:</p>

<pre>
void f(Number n) {
    If (n instanceof Number)
        // go ahead (n is a Byte, Short, Integer, etc.)
    else
        // error
}
</pre>

<p>The <B>instanceof</B> operator returns <B>true</B> if its left operand is an instance of its right operand or of any class that inherits from its right operand.</p>
<p>The <B>Character</B> wrapper contains a number of methods for classifying characters, similar to the functionality found in the C header <B>&lt;ctype.h&gt;</B>, such as <B>isDigit</B>, <B>isISOControl</B>, <B>isLetter</B>, <B>isLetterOrDigit</B>, <B>isSpaceChar</B>, <B>isUpperCase</B>, <B>toUpperCase</B>, etc. The methods <B>IsJavaIdentifierStart</B> and <B>IsJavaIdentifierPart</B> identify a character as a valid part of an identifier. Java identifiers can begin with a dollar sign, an underscore, or a valid <I>letter</I> from any Unicode script. The following are valid Java identifiers:</p>

<p>A$very_long$identifier<br>
pre&ccedil;o<br>
<FONT FACE="Symbol">pme</FONT>
</p>

<p>In the beginning of this article I mentioned that the wrappers incur a performance hit compared to using primitive types. To prove that point, the program in <A HREF="list1.htm">Listing 1</A> creates an identity vector in an array of 250,000 <B>int</B>s, computes its sum, and then displays the elapsed time using a <B>Date</B> object. <A HREF="list2.htm">Listing 2</A> shows a program that does the same thing using <B>Integer</B> objects. When I run these programs on my 400 mHz Pentium II, the primitive version takes 50 milliseconds while the object version takes 1,710 ms, which is slower by a factor 34. (I'm using JDK 1.1.7A). So use primitive types whenever you can!</p>

<h4><FONT COLOR="#000080">Arbitrary Precision Arithmetic</FONT></H4>

<p>Java provides two classes for arbitrary-precision arithmetic: <B>BigInteger</B> and <B>BigDecimal</B>, both of which inherit from <B>Number</B>. There are methods in each for the usual numeric and logical operations. <A HREF="list3.htm">Listing 3</A> shows an example of <B>BigInteger</B>.</p>
<p>The number of bits is derived from a two's-complement representation of the number. <B>BigInteger</B> also has methods for shifting and primality testing.</p>

<h4><FONT COLOR="#000080">Wrap-up</FONT></H4>

<p>Java's primitive types resemble C's built-in types very closely in name, and somewhat closely in functionality. For me, the key feature is that primitives are portable across all platforms that implement a Java Virtual Machine. I also like not worrying about signed vs. unsigned issues that sometimes bite you in C. Java's operators are almost 100% identical to those of C, except there is no need for pointer operations, and Java has the <B>&gt;&gt;&gt;</B> and <B>instanceof</B> operators. Wrappers provide the features that <B>&lt;limits.h&gt;</B> does in C, and then some. In typical Java style, the functionality you need is where you expect it to be: in appropriately-named classes. You may sometimes end up doing a little more typing than you do in C, what with class name prefixes and all, but you probably will do less hunting for the right identifiers.</p>

<p><i>Chuck Allison is Consulting Editor and a columnist with <I>CUJ</I>. He is the owner of Fresh Sources, a company specializing in object-oriented software development, training, and mentoring. He has been a contributing member of J16, the C++ Standards Committee, since 1991, and is the author of <I>C and C++ Code Capsules: A Guide for Practitioners</I>, Prentice-Hall, 1998. You can email Chuck at <B>cda@freshsources.com</B>.</i></p>

<h4><a href="../../../source/1999/mar99/allison.zip">Get Article Source Code</a></h4>



</BLOCKQUOTE>
</BODY>
</HTML>
