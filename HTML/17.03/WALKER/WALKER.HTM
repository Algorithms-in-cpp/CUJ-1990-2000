<HTML>
     
     <HEAD>
<TITLE>March 1999/enum++ &#151; An enum Class Code Generator</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocmar.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">enum++ &#151; An enum Class Code Generator</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Arthur P. Walker</FONT></H3>

<BLOCKQUOTE>

<p>Neither C nor C++ have truly first-class enumerations. But you can add them to C++ with this handy generator.</p>
</BLOCKQUOTE>
<HR>
<BLOCKQUOTE>
<p>The C++ <B>enum</B> expands upon the original C implementation by making each <B>enum</B> declaration a distinct type, and by disallowing casual conversions between <B>enum</B> and integral types. Despite these enhancements, however, the C++ <B>enum</B> still lacks several features that would greatly enhance its usefulness. These shortcomings include:</p>

<UL><LI>C++ I/O libraries represent enums as <B>int</B>s, which are inherently meaningless without explicit knowledge of the enumerated type.</LI>
    <LI>The scope of enum symbols is that of the <B>enum</B> type itself, which means two enums cannot use the same symbol name when in the same scope.</LI>
    <LI>There is no standard way to iterate through the symbols that comprise the enum.</LI></UL>

<p>Implementing an enum-like class to correct these shortcomings will typically require that the code be modified in several places any time a change is made to the list of enum symbols. This problem multiplies as more and more enum-like classes are defined. To avoid these maintenance issues, I created <B>enum_gen</B>, an enum class code generator.</p>
<p>Generating an enum class using <B>enum_gen</B> is quite simple. First, create a text file containing the enum definition using standard C/C++ syntax. Next, invoke <B>enum_gen</B> with the enum definition file as an argument. That's it. As output, <B>enum_gen</B> creates a <B>.h</B> and a <B>.cc</B> file containing the enum class definition and implementation. The following snippet shows an example of an enum definition:</p>

<pre>
enum SwitchState
{
    OFF = 0,
    LOW = 33,
    MED = 66,
    HI = 100
};
</pre>

<p><A HREF="list1.htm">Listing 1</A> shows the public interface of the class generated by <B>enum_gen</B> from this enum definition. (Space considerations prevent listing the full text of the <B>enum_gen</B>'d code. The full source code, plus the enum generator code is available on the <I>CUJ</I> ftp site. See p. 3 for downloading instructions.)</p>
<p><B>enum_gen</B> follows the same rules used by C and C++ for assigning integer values to enum symbols that are not explicitly given a value. <B>enum_gen</B> deviates from C++ practice by requiring unique symbol values as well as unique symbol names. In addition to the symbols specified by the user-defined enum declaration, <B>enum_gen</B> adds the symbol <B>_UNDEFINED</B> to each enum class; <B>_UNDEFINED</B> is the default value of an uninitialized enum variable.</p>
<p>As might be expected, stream I/O with an <B>enum_gen</B>'d class is performed using the symbol strings. On input, if an unrecognized string is read into an enum class variable, the variable will be assigned a value of <B>_UNDEFINED</B>.</p>
<p>Enum class symbols are static members of the enum class, and thus must be specified using C++ scope resolution (e.g. <B>MyEnum::ON</B>).</p>
<p>Iteration through an enum symbol list is performed using <B>operator++</B> and <B>operator--</B>. Enum symbol iteration is performed according to the order that the symbols are defined in the symbol list, <I>not</I> according to the sorted order of their integer values.</p>
<p><B>enum_gen</B>'d classes more closely meet my needs for type-safe, bounded symbol sets than standard C++ enums. While enum classes aren't going to make or break your next project, they're nice to have in your toolbox when you need them. <B>enum_gen</B> makes implementation of enum classes trivial, and thus more likely to be useful in day-to-day development tasks.</p>

<p><i>Art Walker is a principal software engineer with the Essex Corp. of Columbia, MD. He can be reached at <B>awalker@essexcorp.com</B>.</i></p>

<h4><a href="../../../source/1999/mar99/walker.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY>
</HTML>
