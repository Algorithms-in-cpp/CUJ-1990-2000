<HTML><HEAD>
<TITLE>March 1999/A Signal Command and Control Class for Unix/Listing 5</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 5: Demonstration program that sets up multiple functionality for SIGUSR1 and SIGUSR2 signals using CmdControl class</A></h4>
<pre>
#include &lt;unistd.h&gt;
#include &lt;std/csignal.h&gt;
#include &lt;std/string.h&gt;
#include "CmdControl.h"

void simulate_report();
void reset_globals();
void raise_diagnostics();
void lower_diagnostics();
void demonstration1 ();
void demonstration2 ();
void demonstration3 ();
void demonstration4 ();
void shutitdown (int);

CmdControl *usr1hdle;
CmdControl *usr2hdle;

int main(void){

    int k;

    // create instances of CmdControl class for
    // SIGUSR1 and SIGUSR2 signals
    usr1hdle = new CmdControl(SIGUSR1);
    usr2hdle = new CmdControl(SIGUSR2);

    // Associate commands with desired functions
    // when sending the SIGUSR1 signal
    usr1hdle-&gt;set_action( "REPORT", simulate_report);
    usr1hdle-&gt;set_action( "RESET", reset_globals);
    usr1hdle-&gt;set_action( "HIGHER DIAGNOSTICS", raise_diagnostics);
    usr1hdle-&gt;set_action( "LOWER DIAGNOSTICS", lower_diagnostics);

    // Associate commands with desired functions 
    // when sendng the SIGUSR2 signal
    usr2hdle-&gt;set_action( "DEMO1", demonstration1);
    usr2hdle-&gt;set_action( "DEMO2", demonstration2);
    usr2hdle-&gt;set_action( "DEMO3", demonstration3);
    usr2hdle-&gt;set_action( "DEMO4", demonstration4);

    // Disassociate a command with a function 
    usr2hdle-&gt;unset_action("DEMO4");

    // Test the is_used function  member
    if ( usr2hdle-&gt;is_used("DEMO4") == 0 )
        cout &lt;&lt; "DEMO4 is not used for SIGUSR2" &lt;&lt; endl;

    if ( usr1hdle-&gt;is_used("REPORT") == 1 )
        cout &lt;&lt; "REPORT is used for SIGUSR1" &lt;&lt; endl;

    // invalid use of CmdControl::cmd_handler
    // any instance of SIGTERM should generate an error
    // message.
    signal(SIGTERM, CmdControl::cmd_handler);

    // Use the standard approach to provide handling to
    // the interrupt signal
    signal(SIGINT, shutitdown);

    // just run forever until stopped by interrupt
    while (true)
        sleep(1);

    return 0;
}


void simulate_report() {

    cout &lt;&lt; "Diagnostics report."&lt;&lt; endl;
}

void reset_globals() {
    
    cout &lt;&lt; "Reseting globals" &lt;&lt; endl;
}

void raise_diagnostics () {
    cout &lt;&lt; "raising application's diagnostic level." &lt;&lt; endl;
}

void lower_diagnostics () {
    cout &lt;&lt; "lowering application's diagnostic level." &lt;&lt; endl;
}

void demonstration1 () {
    cout &lt;&lt; "demonstration 1 running." &lt;&lt; endl;
}

void demonstration2(){
    cout &lt;&lt; "demonstration 2 running." &lt;&lt; endl;
}

void demonstration3(){
    cout &lt;&lt; "demonstration 3 running." &lt;&lt; endl;
}

void demonstration4(){
    cout &lt;&lt; "demonstration 4 running." &lt;&lt; endl;
}

void shutitdown(int in_signal){
    delete usr1hdle;
    delete usr2hdle;
    exit(1);
}

- End of Listing -
</pre>
</BODY>
</HTML>
