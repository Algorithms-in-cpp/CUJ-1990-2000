<HTML>
     
     <HEAD>
<TITLE>March 1999/Comparing Fortran 90 and C++ Valarrays</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocmar.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Comparing Fortran 90 and C++ Valarrays</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Shyam Bhat and B. Arun</FONT></H3>

<BLOCKQUOTE>

<p>Template class valarray was added to the Standard C++ Library to attract numerical programmers. It appears to be working.</p>
</BLOCKQUOTE>
<HR>
<BLOCKQUOTE>
<h4><FONT COLOR="#000080">Introduction</FONT></H4>

<p>Finite Element Analysis is extensively used in Engineering and Scientific applications, and routinely generates very large systems of equations. These are usually solved using a variation of Gaussian Elimination, and almost always in Fortran. We have tested an alternative implementation using the C++ STL (Standard Template Library), based on slices and valarrays. In this article we compare the solution times between C++ and Fortran 90. We found C++ to be faster.</p>

<h4><FONT COLOR="#000080">Numerical Background</FONT></H4>

<p>In the FEM (Finite Element Method), the system is modeled using a stiffness matrix formulation. This matrix represents the relationship between displacements at nodes of elements, and applied loads at these nodes, based on properties of elements. A variety of 2-D and 3-D elements may be used in combination to model the system. Based on the modeling, up to six equations are generated per node for static analysis. With thousands of nodes, the total number of equations runs into tens of thousands or more.</p>
<p>These equations are solved using variants of the Guassian elimination method. The unknowns being solved for are the node displacements, given a set of applied loads.</p>
<p>A system of n equations can be expressed as a single matrix equation:</p>

<BLOCKQUOTE>
<p><I>v * disp = rhs</I></p>
</BLOCKQUOTE>

<p>where <I>v</I> is an n x n square stiffness matrix; <I>disp</I> is an n-length vector of unknown displacements; and <I>rhs</I> is an n-vector of applied forces. We consider the cases (which are the majority) where <I>v</I> is symmetric, and banded. A <I>banded</I> matrix is one for which all non-zero elements are found in diagonal bands near the main diagonal. Due to symmetry, only the upper triangular matrix must be stored; and due to bandedness, only a band portion of this triangular matrix must be stored, since the zero valued items beyond the bands do not contribute to the solution.</p>
<p>We use a variation on the technique for storing banded matrices. We store <I>v</I> as a one-dimensional vector, made up of sub-vectors. Each of these sub-vectors is a taken from a column of the matrix, starting from the first non-zero element of each column, down to the diagonal. (This method is known as "Skyline" storage. Interested readers may refer to extensive literature [<a href="#1">1</a>-<a href="#5">5</a>].)</p>
<p>Matrix <I>v</I> can be decomposed as <I>L * diag * Lt</I>, where <I>L</I> is the lower triangle, <I>diag</I> is a matrix whose diagonal is the same as <I>v</I>'s and whose other elements are zero, and Lt is the transpose of <I>L</I>. The matrix <I>L</I> will also be stored using the skyline storage method; in fact the elements of <I>v</I> will be replaced by those of <I>L</I> after decomposition. Once the decomposition has been carried out, the solution for a given force can be carried out by a back substitution process. Back substitution is particularly easy since <I>L</I> is triangular. However, accessing the elements of <I>L</I> is complicated by <I>L</I>'s representation as a one-dimensional vector.</p>
<p>The pseudocode for the decomposition algorithm appears in <A HREF="fig1.htm">Figure 1</A>. The pseudocode for the back substitution used in solving <I>L * diag * Lt * disp = rhs</I> is shown in <A HREF="fig2.htm">Figure 2</A>. (Note that the pseudocode assumes that arrays start at index 1, not index 0 as in C/C++.) The Fortran 90 and C++ implementations are described below. The Fortran and C++ source code is available on the <I>CUJ</I> ftp site in this month's download (see p. 3 for instructions).</p>

<h4><FONT COLOR="#000080">Fortran 90 Implementation</FONT></H2>

<p>We implemented the algorithm in Fortran 90 with the Microsoft Fortran PowerStation v. 4.0 compiler, and we used most of the new Fortran facilities provided. We performed all computations using double precision. Some of the salient features are as follows:</p>

<UL><LI>We used modules with allocatable arrays for the matrices. This also localized the storage and access of vectors.</LI>
    <LI>We used pointers, to minimize copying and extraction. Both scalar and array pointers have been used.</LI>
    <LI>We used slice arrays for compact/optimized numerical operations. Thus, in subroutine <B>ldldecom</B>, we use</LI></UL>
<pre>
      ptwk1vc = ptsk1vc / diag(nj1 : j-1);
</pre>
<UL><UL>where <B>ptwk1vc</B> and <B>ptsk1vc</B> are array pointers, and <B>nj1:j-1</B> represents a slice.</UL>
    <LI>We used intrinsic functions, such as <B>dot_product</B>, with slice vectors, for very compact and optimal inner loops (where computation effort is 90% of total).</LI>
    <LI>We stored the matrix <I>v</I> as a one-dimensional vector, indexing it via two auxiliary integer vectors. Vector <B>nrow</B> locates the starting row of each column (as per the skyline storage);</LI></UL>

<p>Vector <B>ncol</B> locates the position in <I>v</I> of each column start row. The mapping of <I>(i,j)</I> is <I>v[ncol[j] + i - nrow[j]]</I>.</p>
<p>We used full optimization on the Fortran compiler, with maximize speed option, under the release compilation. The use of slices provides for an elegant notation in Fortran, which is unmatched by C++. However, the overall organization of Fortran leaves much to be desired for this task.</p>

<h4><FONT COLOR="#000080">C++ Implementation</FONT></H4>

<p>We used the Microsoft Visual C++ 5.0 compiler, with full optimization and maximize speed enabled.</p>
<p>The C++ STL provides valarrays to facilitate numerical computations. Valarrays are supposed to support aggressive optimizations (which is, of course, compiler dependent) for numerical computations. Valarrays also support use of slices, so we were able to simulate use of slices in Fortran. Together with C++ classes, this provided for elegant and optimal coding.</p>
<p>The two-dimensional stiffness matrix <I>v</I> is stored as a one dimensional <B>valarray&lt;double&gt;</B> denoted as <B>v</B>. The diagonal of the matrix is stored in a separate <B>valaray&lt;double&gt;</B> as <B>diag</B>, for faster access. Both <B>v</B> and <B>diag</B> use column major order. The start of each column is stored in a <B>vector&lt;Sliceiter&gt;</B> of slice iterators, to provide faster access to individual columns. This storage method also takes advantage of the jagged (skyline) shape of the matrix.</p>
<p>We have implemented slice iterators (<B>Sliceiter</B>) along the lines of STL iterators, albeit in simpler fashion. Since the stride is always one, the iterator stores only the start position. A reference to the <B>valarray&lt;double&gt;</B> representing <B>v</B> is also stored in the iterator, for fast lookup. The use of <B>Sliceiter</B> provides a clean interface to the user, hiding the details of mapping the two-dimensional matrix to the compact skyline storage scheme used.</p>

<h4><FONT COLOR="#000080">Typical Program Flow</FONT></H4>

<p>The program flow is as follows</p>
<p>1.  Read number of columns &#151; <B>ndf</B>.</p>
<p>2.  For each column, read number of elements per column and a list of the elements in the column. These are read into a <B>vector&lt;double&gt;</B>. </p>
<p>3.  Compute the size of the valarray <B>v</B>, based on cumulative column sizes. </p>
<p>4.  Allocate the main array, and set up the auxiliary <B>Sliceiter</B> array for each column. </p>
<p>5.  Perform forward decomposition of the matrix. This step overwrites <B>v</B> so as to conserve space. </p>
<p>6.  Read in any number of force vectors, and solve for displacements. These displacements are overwritten on the force vectors.</p>

<h4><FONT COLOR="#000080">Comparison between Fortran and C++</FONT></H4>

<p>All programs were run on a Pentium 150 MHz PC, with 48 MB of EDO RAM, and 100 MB of free disk space, on Microsoft NT Workstation 4.0. Time was measured using the <B>_ftime</B> runtime functions. We tested four problems, and found that the C++-based program typically ran 5% faster than Fortran. This could definitely be improved further. The solution times are in milliseconds, and are shown for the decomposition and back substitution functions only (see <A HREF="tab1.htm">Table 1</A>). Typically, back substitution takes only 3% of the time needed for decomposition. The length of <B>v</B> is also shown. The length is greatest for Problem 1, consisting of 520,000 items. Since we used double precision, this required 48 MB of memory. We have restricted problems to this size so as to avoid any disk paging by the OS, which would lead to incorrect evaluation of performance.</p>

<h4><FONT COLOR="#000080">Conclusions</FONT></H4>

<p>C++ is well suited for FEM solution algorithms. Very elegant implementations are possible, which are also faster. The entire FEM modeling process, including element representation, equation generation, solving, and storing results, involves object-oriented processes. FEM lends itself to C++ very well. It is time to make a shift from Fortran to C++, both to take advantage of the latest development systems, and for the sake of easy maintenance and upgrading of code.</p>

<h4><FONT COLOR="#000080">References</FONT></H4>

<p><a name="1"></a>[1]  A. Jennings. "A Compact Storage Scheme for the Solution of Symmetric Linear Simultaneous Equations," <I>Computer Journal</I> #9, 1966, pp. 281-285.</p>
<p><a name="2"></a>[2]  E. L. Wilson, K. J. Bathe, and W. P. Doherty. "Direct Solution of Large Systems of Linear Equations," <I>Computers and Structures</I> #4, 1974, pp. 363-372.</p>
<p><a name="3"></a>[3]  R. J. Taylor. "Solution of Linear Equations by a Profile Solver," <I>Engineering Computations</I> #2, 1985, pp. 344-350.</p>
<p><a name="4"></a>[4]  E. L. Wilson. "Static Condensation Algorithm," <I>International Journal for Numerical Methods in Engineering</I> #8, 1974, pp. 199-203.</p>
<p><a name="5"></a>[5]  P. V. Marcal (editor). "General Purpose Finite Element Computer Programs," <I>Proceedings of Seminar of the A. S. M. E.,</I> Winter Annual Meeting, New York, November 1970.</p>
<p><a name="6"></a>[6]  Bjarne Stroustrup. <I>The C++ Programming Language,</I> Third Edition (Addision-Wesley, 1997). See Chapter 22, "Numerics."</p>

<p><i>Shyam S. Bhat has a Bachelors Degree, and ten years' experience in the Civil Engineering field. He has six years' experience as a software developer, specializing in computer-based analysis, design, and engineering drawings. He has six years' experience in C++ and 18 years' in Fortran.</i></p>

<p><i>B. Arun has a Masters Degree in Civil Engineering. He has had two years' experience in C++ and six years' in Fortran.</i></p>

<p><i>Both authors work for IMI Software in Hyderabad, India.</i></p>

<h4><a href="../../../source/1999/mar99/bhat.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY>
</HTML>
