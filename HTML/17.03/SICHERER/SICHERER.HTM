<HTML>
     
     <HEAD>
<TITLE>March 1999/Portable Run-Time Multilanguage Support with Lingua</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocmar.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Portable Run-Time Multilanguage Support with Lingua</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Anneke Sicherer-Roetman</FONT></H3>

<BLOCKQUOTE>

<p>Message text is the bane of any multilanguage program, but you can get a lot of help with them from this remarkably simple package.</p>
</BLOCKQUOTE>
<HR>
<BLOCKQUOTE>
<h4><FONT COLOR="#000080">Introduction</FONT></H4>

<p>Lingua is a small package that I wrote a few years ago and still use on a regular basis. I designed the Lingua package to help C programmers develop applications that must be released in multiple languages. With Lingua, the end-user gets an executable, and one datafile for every supported language. The datafile contains all user interface text in the application.</p>
<p>Since a language can be chosen at run time, you needn't use different executables for different languages. You need only compile one executable and make a text data file for every supported language. It's easy to create support later for yet another language, then send only the new data file to interested customers. Lingua was written in pure ANSI C and is thus completely portable.</p>

<h4><FONT COLOR="#000080">Lingua Package Overview</FONT></H4>

<p>The package consists of a utility, Lingua, and a module, <B>ui_text.c</B>. You must compile <B>ui_text.c</B> and link it with your application program. This module is the same for any language and is very small (about 4 K when compiled with Borland C++).</p>
<p>You need to prepare a text file for every supported language, according to a specified format. Lingua then encrypts the text file so users cannot alter or corrupt the file. The encrypted text files are shipped with the application. One of them is loaded by the module <B>ui_text.c</B> at run time so that the application's user interface texts are all in the desired language. It is also possible to switch languages at run time.</p>

<h4><FONT COLOR="#000080">How to Use Lingua</FONT></H4>

<p>Do not use any literal strings in your source code; instead, use symbolic identifiers, or mnemonics. For example, instead of using <B>"Press any key"</B>, use <B>ANYKEY</B>. You can write your application however you like, so long as you observe this main rule and put an <B>#include "ui_text.h"</B> statement at the start of every source file in which these mnemonics appear.</p>
<p>Create and maintain a text source file with all literal text for the program written in your first language of choice. This file can have any name, but Lingua can use only files with the <B>.txt</B> extension. The lines in this text file should all begin (at the first position!) with the mnemonic that will be used in the application. Following the mnemonic is the literal string that should be substituted at run time. <A HREF="list1.htm">Listing 1</A> shows an example of a Lingua text source file.</p>
<p>Comment lines must begin with <B>#</B>. In literal strings, the underscore character (<B>_</B>) signifies a leading or trailing space, and a single dash character (<B>-</B>) denotes an empty string. If you want a character other than <B>_</B> to signify a leading or trailing space, you can change it using the <B>#SPACE</B> directive.</p>
<p>String arrays, in which not every item has its own mnemonic, are represented by a <B>[</B> directly after the mnemonic, followed by one or more lines starting with only a <B>[</B>. Multi-line strings are represented by a <B>/</B> directly after the mnemonic, followed by one or more lines starting with only a <B>/</B>.</p>
<p>By default, Lingua loads all the text at once into memory when you call the function <B>ui_loadtext</B>. This is typically done at the start of an application. You delete the text at the end of the application by calling <B>ui_unloadtext</B>. If desired, you can specify that part or all of the text be read from the file only when necessary. To specify this behavior, use the directive <B>#FILE</B> in the text file (see <A HREF="list1.htm">Listing 1</A>). All text after this directive will be loaded only when necessary. All text before <B>#FILE</B> will be loaded as soon as <B>ui_loadtext</B> is called and will remain resident in memory. You could place all frequently used strings before <B>#FILE</B> and seldom-used or very long strings after <B>#FILE</B>. Note that if <B>#FILE</B> is used, the text datafile will remain open between <B>ui_loadtext</B> and <B>ui_unloadtext</B>, which is otherwise not the case. Also note that <B>#FILE</B> may occur only once in the text file.</p>
<p>Beware of one snag when using the <B>#FILE</B> directive: every mnemonic defined after <B>#FILE</B> results in a pointer to the same file buffer. When using two consecutive strings, the latter will overwrite the former. This leads to problems with statements like:</p>

<pre>
printf("%s%s\n",TENTH,ELEVEN);
</pre>

<p>The above will result in printing "eleven" twice. Instead, use:</p>

<pre>
printf("%s",TENTH);
printf("%s",ELEVEN);
</pre>

<p>Apart from this snag, the use of Lingua is totally transparent so long as, at run time, you do not reference any mnemonic before <B>ui_loadtext</B> is called.</p>

<h4><FONT COLOR="#000080">Updating the Data File</FONT></H4>

<p>Whenever any mnemonic in the text file has been added, edited, or deleted, run the utility Lingua by issuing a command such as:</p>

<pre>
lingua francais
</pre>

<p>where <B>francais</B> is the name of the text file. Then recompile your program's source code (just as you would had you edited literal strings in the source code). If you change only the literal text in the text file, you need only run Lingua; you needn't recompile your program's source code in this case.</p>
<p>You can give an optional version number or other string as a second argument for the Lingua utility. Use this same version number as the second parameter in the call to <B>ui_loadtext</B>. This can be a useful feature because it enables <B>ui_loadtext</B> to reject a file that was built for a previous version of your application program.</p>
<p>Lingua creates two files: <B>ui_text.h</B> and an <B>.etf</B> (Encrypted Text File). The <B>.etf</B> file must be shipped with the application. The header file <B>ui_text.h</B> must be included in all source files that contain calls to <B>ui_loadtext</B> and <B>ui_unloadtext</B>, or that contain mnemonics. Since this header is not language dependent, no recompilation for another language is necessary. It contains only macros for the mnemonics, which are language independent. <A HREF="list2.htm">Listing 2</A> shows a sample header.</p>
<p>When your application is finished (when is an application ever finished?), copy the original <B>.txt</B> file and change the literal strings in the copy to another language. Warning: do not change the mnemonics that begin each line! When you run Lingua on this text file, a new <B>.etf</B> file is created (and also <B>ui_text.h</B>, but this one is identical to the one from the original language).</p>

<h4><FONT COLOR="#000080">Inside the Application Program</FONT></H4>

<p>In the application program, start with a call to <B>ui_loadtext</B> (in the module <B>ui_text.c</B>). End the application program with a call to <B>ui_unloadtext</B>. It is also possible to load another language into the program after completing a call to <B>ui_unloadtext</B>. Simply call <B>ui_loadtext</B> again with a new language file argument.</p>
<p>Lingua also writes a checksum at the start of the <B>.etf</B> file. <B>ui_loadtext</B> returns <B>1</B> if the file was read and decoded successfully and if the computed checksum is equal to the one in the file; if not, it returns zero. You can then handle an error condition in your application (but in what language?).</p>
<p><A HREF="list3.htm">Listing 3</A> shows an example application that uses the <A HREF="list1.htm">Listing 1</A>'s text.</p>
<p>The module <B>ui_text.c</B> uses the <B>fopen</B> family of file functions. For programmers who do not like to use these, all file handling in <B>ui_text.c</B> is done via macros defined in an include file, <B>files.inc</B>, that can be changed to contain other file functions.</p>
<p>The Lingua package source code is available in electronic form and also includes makefiles for Unix and DOS/Windows. This source archive also contains a shareware Borland C++ Builder component that can be dropped on the main form of an application to make a BCB application multilingual.</p>

<h4><FONT COLOR="#000080">How Lingua Works</FONT></H4>

<p><A HREF="list4.htm">Listing 4</A> shows the source code of the module <B>ui_text.c</B>. The include files <B>lingua.h</B> and <B>files.inc</B> can be seen in <A HREF="list5.htm">Listing 5</A> and <A HREF="list6.htm">Listing 6</A> respectively. (The source code for the Lingua utility is not shown here, but is available on the <I>CUJ</I> ftp site. See p. 3 for downloading instructions.)</p>
<p>For simplicity, this discussion begins with only the handling of the strings that are loaded permanently into memory.</p>
<p>The Lingua utility starts by writing some declarations in the header file <B>ui_text.h</B>. It then reads the input file twice. During the first pass, Lingua writes the mnemonics and their sequential numbers in the text source file to <B>ui_text.h</B> in the form of <B>#define</B> statements that connect each mnemonic with an element of a global array <B>ui_text</B> (defined in <B>ui_text.c</B>):</p>

<pre>
#define SECOND  ui_text[2]
#define THIRD   (ui_text+3)
</pre>

<p>The first line denotes a single string, the second line a string array.</p>
<p>Lingua also determines the corresponding strings' lengths and computes an offset for each string. These offsets are written to the <B>.etf</B> file. During the second pass, the strings themselves are encrypted and written to the <B>.etf</B> file. Finally, Lingua computes a checksum and writes it to the <B>.etf</B> file together with a total count of strings and characters.</p>
<p>Lingua thus generates an encrypted text file and a header file <B>ui_text.h</B>. By including <B>ui_text.h</B> in your source files, the preprocessor replaces the mnemonics in the source code by the corresponding <B>ui_text[n]</B> identifiers. <B>ui_text[n]</B> is a pointer that points to the <B>n</B>-th element of a pointer table. The element in the pointer table points into a character buffer, which I call the string area.</p>
<p>The <B>ui_loadtext</B> function in the <B>ui_text.c</B> module reads the counts and allocates memory for a string area (<B>char *ui_textbuffer</B>) and a table of pointers into this area (<B>char **ui_text</B>, declared globally). It then reads the offsets, calculates the pointers, puts these in the table, and then reads the strings and puts these in the string area. Now all <B>ui_text </B>pointers point to the corresponding literal strings. A checksum is also computed and compared with the one stored in the <B>.etf</B> file. The <B>ui_unloadtext</B> function releases all used memory.</p>
<p>For the strings that appear after the <B>#FILE</B> directive, it's a bit more complicated. Single strings and string arrays are handled differently here.</p>
<p>The generated <B>#define</B> statements in <B>ui_text.h</B> look like this:</p>

<pre>
#define TWELVE   ui_filetext(3)
#define FOURTEEN (ui_filearray(6))
</pre>

<p>The first line denotes a single string, the second line a string array.</p>
<p>Here too, the offsets are computed from the string lengths and written to the <B>.etf</B> file. Also during the second pass, the strings are encrypted and written to the <B>.etf</B> file. For arrays, the size of the array is also written to the <B>.etf</B> file prior to writing the strings of the array.</p>
<p><B>ui_loadtext</B> reads the counts and allocates memory for a table of offsets into the <B>.etf</B> file (<B>unsigned long *ui_file</B>). It then reads the offsets and puts these in the table. It leaves the <B>.etf</B> file open.</p>
<p>The parameter <B>n</B> of the function <B>ui_filetext(n)</B> gives the index into the offset array <B>ui_file</B>. The string at that offset is then read from the file into a dynamically allocated character buffer <B>char *ui_filebuffer</B>. If the previously requested string was at the same file offset as the newly requested one, no re-reading is done. The address of <B>ui_filebuffer</B> is passed to the program as the return value of <B>ui_filetext</B>.</p>
<p>For arrays in the <B>.etf</B> file, the function <B>ui_filearray(n)</B> is used instead. First, the size of the array is read from the file at the offset found at <B>ui_file[n]</B>. Then, the strings at this offset are read from the file into the dynamically allocated character buffer <B>ui_filebuffer</B>. At the same time, a pointer array char <B>**ui_fileptr</B> is allocated and filled with pointers into <B>ui_filebuffer</B>. The return value of <B>ui_filearray</B> is the address of <B>ui_fileptr</B>. The <B>ui_unloadtext</B> function releases all used memory and closes the <B>.etf</B> file.</p>
<p>From this discussion, the reason for the above-mentioned snag in using the <B>#FILE</B> directive should be clear. There is only one string or string array from the file present in memory at one time. So, never use two different strings from a file in the same expression; put them in temporary variables first. Apart from this, the usage of Lingua is completely transparent.</p>

<h4><FONT COLOR="#000080">Conclusion</FONT></H4>

<p>I have written many applications with Lingua. I prefer its simplicity, efficiency, and complete portability over other more elaborate schemes, and certainly over methods that force you to distribute different executables for different languages. Maintenance is easy and lends itself to code management systems and project makefiles because the source file is a normal text file and Lingua is a command-line utility.</p>
<p>I'm interested in hearing about how you've used Lingua in your applications, and welcome any improvements or suggestions you may have. The next obvious step is to rewrite Lingua to Unicode instead of single-byte characters, which should not be too difficult. If you want to do it, please let me know about it also.</p>

<p><i>Anneke Sicherer-Roetman started her career as a research chemist and holds a doctorate in chemisty. She then became a Unix systems manager and a programmer, and practiced both occupations for more than ten years. Recently she became a software engineer in a company that produces software and instrumentation for behavioral research (Windows 95/NT platform). She has also run a small educational software company together with her husband for 12 years. She has been coding in C for 12 years and in C++ for 6 years. She can be reached at <B>sicherer@sichemsoft.nl</B> or <B>a.sicherer@noldus.nl</B>.</i></p>

<h4><a href="../../../source/1999/mar99/sicherer.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY>
</HTML>
