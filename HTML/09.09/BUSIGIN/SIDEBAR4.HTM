<HTML><HEAD>
<TITLE>September 1991/The QNX Operating System/Sidebar</TITLE></HEAD><BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h3 align="center"><FONT FACE="Garamond" COLOR="#000080">Update: Quantum Releases A Posix Compliant Version Of QNX</FONT></h3>
<hr>
<BLOCKQUOTE>
In June 1991, Quantum started shipping QNX v4.0. This new version of their operating system is POSIX compliant &#151; at least as far as is possible &#151; as not all of the areas of the POSIX standard have been completed and ratified.<P>
The term POSIX stands for Portable Operating System Interface and refers to a group of standards that are being developed under the auspices of the IEEE. The POSIX standard is actually a group of proposed standards which encompass the following areas:<P>
1003.1 System Interface<br>
1003.2 Shell and Utilities<br>
1003.3 Test Methods<br>
1003.4 Real Time<br>
1003.5 Ada Bindings<br>
1003.6 POSIX Security<br>
1003.7 System Admin<br>
1003.8 POSIX Networking<br>
1003.9 FORTRAN Bindings<P>
The purpose of IEEE's POSIX is to provide an industry standard operating system environment which is based on the UNIX operating system.<P>
An important point is that POSIX is not an implementation of an operating system and its environment, it is a definition. This allows operating system vendors to produce POSIX compliant systems which "look" similar to both the programmer and user, but which may be quite different as far as their internal architecture, performance, etc.. It is this flexibility which allowed Quantum to produce an operating system which is both POSIX compliant and which also takes special advantage of their message passing, client-server based architecture.<P>
<h4>First Impressions Of QNX 4.0</FONT></h4></P>
Since I have only recently obtained QNX 4.0, I am not in a position to review it. Hence, the following is merely a brief summary of my first impressions of Quantum's new operating system.<P>
As well as POSIX compliance, Quantum appears to have made many significant improvements in the following areas:<P>
<UL><li>v4.0 is even more "modular" than v2.15 (only the operating system processes that are needed on a given node need to be running).</li>
<li>Task/process scheduling of equal priority tasks has been improved and can be tailored on a per process basis. Scheduling of multiple processes that have equal priority and which are <I>ready</I> can be done by FIFO, round robin, or adaptive (priority decay) methods.</li></UL>
Note: Higher priority processes always immediately pre-empt a lower priority process, regardless of scheduling methods used &#151; essential for real-time systems.<P>
<UL><li>Server processes can request that messages be received in time order or priority order.</li>
<li>Server processes no longer have to run at fixed priority levels. They may choose to have their priority dynamically adjusted. This change is significant in that it eliminates the priority inversion problem which could "bushwack" the unwary real time system designer using v2.15.</li>
<li>The native C-Compiler for QNX 4.0 is WATCOM C.</li>
<li>A number of inter-task communication methods have been added and the <I>signal_port</I> and (software) port mechanism have been enhanced.</li>
<li>The QNX shell complies with the IEEE POSIX standard. (This is very similar to the AT&amp;T System V shell.)</li>
<li>File system performance appears to have been significantly increased due to a complete redesign.</li></UL>
These, and many other changes are beyond the scope of the present article. What is clear, is that QNX 4.0 has not been re-written just to comply with POSIX standards, it has been re-written for the purpose of enhancing its real-time performance as well. How well this has been achieved would be a good topic for a follow up article.<P>
</BLOCKQUOTE>
</BODY>
</HTML>
