


<HTML>
<HEAD>

<TITLE>September 1991/Stepping Up To C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocsep.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Stepping Up To C++<A name="0201_0103"><A name="0201_0103"></font></h2><P>
<h3 align="center"><A name="0201_0000"><A name="0201_0000">Reference Types</h3><P>
<h3 align="center"><font color="#800000">Dan Saks</font></h3><hr><blockquote><P>
<P><i><A name="0201_0000"><A name="0201_0000">Dan Saks is the owner of Saks &amp; Associates, which offers consulting and training in C, C++ and Pascal. He is also a contributing editor of TECH Specialist. He serves as secretary of the <I><B>ANSI C++</B></I> committee and is a member of the <I><B>ANSI C</B></I> committee. Readersc an write to him at 287 W. McCreight Ave., Springfield, OH 45504 or by email at dsaks@wittenberg. edu.</i></P><P>
References provide an alternative to pointers as a way of binding a name to an object. A reference declaration is just like a pointer declaration, except for using <I>&amp;</I> instead of *. For example,<P>
<pre>int &amp;ri;</pre>
declares <I>r</I> to have type <I>reference to int.</I> Just as many programmers often pronounce <I>int</I> * as "int star," I often pronounce <I>int</I> <I>&amp;</I> as "int ref."<P>
With few exceptions (described later), you must initialize a reference when you declare it. For example,<P>
<pre>int i;
...
int &amp;ri = i;</pre>
initializes <I>ri</I> to refer to <I>i</I>. Henceforth, using <I>ri</I> in an expression is just like using <I>i</I>. For example,<P>
<pre>ri = 4;
int j = ri + 2;</pre>
assigns 4 to <I>i</I>, and then initializes <I>j</I> to 6.<P>
A reference is essentially a constant pointer that is automatically dereferenced each time it's used. The preceding example is equivalent to the following code using an explicit pointer:<P>
<pre>int i = 3;
int *const cpi = &amp;i;
...
*cpi = 4;
int j = *cpi + 2;</pre>
This analogy with pointers clearly shows that initializing a reference is different from assigning to a reference. Initializing a reference assigns the address of an object to the pointer implementing that reference. Assigning to the reference assigns through the pointer to the referenced object.<P>
In fact, no C++ operator operates on a reference. Every operator applied to a reference applies to the referenced object, not to the reference itself. For example, if <I>ri</I> is an <I>int</I> <I>&amp;</I>, then ++<I>ri</I> increments the <I>int</I> referenced by <I>ri</I>, and <I>&amp;ri</I> is the address of that <I>int</I>. If <I>rs</I> is a reference to a <I>struct S</I> with member <I>m</I>, then <I>rs.m</I> (not <I>rs-&gt;m</I>) accesses member <I>m</I> of the <I>S</I> object referenced by <I>rs</I>.<P>
In short, a reference is a pointer with object semantics. That is, an expression of type <I>reference to T</I> is implemented as a pointer, but you use the expression as if it were an object of type <I>T</I>.<P>
<h4><FONT COLOR="#000080"><A name="0201_0104">Initializing References<A name="0201_0104"></FONT></h4></P>
Once you initialize a reference you cannot change it to refer to a different object. That is why the pointer equivalent of<P>
<pre>int &amp;ri;</pre>
is a constant pointer declared as<P>
<pre>int *const cpi;</pre>
Note that this is different from both<P>
<pre>const int *pci;
int const *pci;</pre>
either of which declares <I>pci</I> as a (modifiable) pointer to a constant <I>int</I>.<P>
In general, the initializer for a reference to type <I>T</I> should be an lvalue of type <I>T</I>. For example,<P>
<pre>char s[] = "hello";
char &amp;rc = s[0];</pre>
binds <I>rc</I> (of type <I>char &amp;</I>) to the first character of <I>s</I> (of type <I>char</I>). Note that neither<P>
<pre>char &amp;rc = s;
char &amp;rc = &amp;s[i];</pre>
are valid, because they attempt to initialize a <I>char &amp;</I> with a <I>char</I> *.<P>
A reference can refer to a <I>const</I> object. In this case, if the initializing expression is not an lvalue, the generated code uses a temporary object to hold the initial value and binds the reference to that temporary. For example,<P>
<pre>const double &amp;rcd = 1.0;</pre>
compiles as something like<P>
<pre>const double temp = 1.0;
double *const cpd = &amp;temp;</pre>
The initializing expression for a <I>const T &amp;</I> need not have type <I>T</I>; it can have an expression of any type with a standard or user-defined conversion to type <I>T</I>. For example,<P>
<pre>const double &amp;rcd = 1;</pre>
promotes <I>1</I> to <I>double</I> to initialize the temporary. Or, if <I>X</I> is a class with a constructor <I>X (int)</I>, then<P>
<pre>const X &amp;rcx: = 1;</pre>
is roughly equivalent to<P>
<pre>const X temp (1);
X *const cpx = &amp;temp;</pre>
Here, the constructor call <I>x(1)</I> is a user-defined conversion from type <I>int</I> to type <I>X</I>. The resulting <I>X</I> object is the initial value of the temporary.<P>
Early dialects of C++ <a href="#ref1">[1]</a> created temporaries even for non-<I>const</I> references. That is,<P>
<pre>double &amp;rd = 1;</pre>
was allowed, and bound the reference to a modifiable temporary. The commentary in the revised C++ language definition <a href="#ref2">[2]</a> explains that binding references to modifiable temporaries proved to be "a major source of errors and surprises." Consequently, the revised language definition prohibits creating temporaries to initialize references to non-<I>const</I> objects. Many of today's C++ implementations still follow the older, more forgiving, rule. Some implementations produce warnings when they create temporaries for non-<I>const</I> references. You should heed those warnings.<P>
The lifetime of a temporary created to initialize a reference lasts until the end of the scope in which that temporary is created. For example, in<P>
<pre>void f()
   {
   ...
   const int &amp;rci = 1;
   ...
   }</pre>
the temporary bound to <I>rci</I> survives until <I>f</I> returns. If the temporary has a class type with a destructor, destroying the temporary includes calling that destructor. For example, suppose class <I>X</I> in the following has both a constructor and a destructor:<P>
<pre>for (int i = 0; i &lt; n; ++i)
   {
   ...
   const X &amp;rcx = i;
   ...
   }</pre>
Each iteration of the loop creates a new temporary (using the constructor), binds its address to <I>rcx</I>, and then destroys that temporary (using the destructor).<P>
A reference declaration with an explicit <I>extern</I> specifier need not have an initializer. For example,<P>
<pre>extern int &amp;ri;</pre>
is valid. Furthermore, you cannot add an initializer to the declaration of a reference that is a member of a class. Rather, you must initialize the reference member in the class constructor(s), as shown in <A href="list1.htm">Listing 1</a>.
<P>
Class <I>X</I> in <A href="list1.htm">Listing 1</a>
has two data members, <I>int i</I> and <I>int &amp;ri</I>, and a constructor <I>X(int *)</I>. The constructor uses a list of <I>mem-initializers</I><P>
<pre>i(*p), ri(*p)</pre>
to initialize member <I>i</I> to the value of <I>*p</I>, and initialize member <I>ri</I> to reference the integer addressed by <I>p</I>. Calling this constructor with<P>
<pre>X x1(&amp;n);</pre>
creates an <I>X</I> object <I>x1</I> whose member i is initialized with the value of <I>n</I>, and whose member <I>ri</I> refers to <I>n</I>.<P>
When initialization is the same as assignment, as with <I>int </I>member <I>i</I>, you can use an assignment in the constructor's body instead of the <I>mem-initializer</I>. That is, you can write the constructor as<P>
<pre>X(int *p) : r(ri) { i = *p; }</pre>
However, initializing a reference is not the same as assigning to a reference, so you must initialize a reference member with <I>a mem-initializer</I>.<P>
<h4><FONT COLOR="#000080"><A name="0201_0105">Passing Arguments By Reference<A name="0201_0105"></FONT></h4></P>
In practice, you're not likely to use references as ordinary variables or as class data members. References are much more useful as an alternative method for argument passing.<P>
C always passes function arguments by value. A function call copies each actual argument (with appropriate type conversion) to the storage for the corresponding formal argument. For example, given the function declaration<P>
<pre>void f(long L, double d);</pre>
the call<P>
<pre>f(1, 2);</pre>
promotes the first actual argument, <I>1</I>, to <I>long</I> and copies it to storage for formal argument <I>L</I>, and promotes the second actual argument, <I>2</I>, to <I>double</I> and copies it to storage for formal argument <I>d</I>. (Argument evaluation in C and C++ does not necessarily proceed from left to right; the order is implementation-defined.)<P>
Since the storage for a formal argument is distinct from the storage for its corresponding actual argument, changing the value of the formal argument inside the function doesn't affect the value of the actual argument. For example, the simple function<P>
<pre>void inc(int i) { ++i; }
...
inc(n);</pre>
increments its local copy of the argument and discards the incremented value when it returns. Calling <I>inc(n)</I> has no effect on <I>n</I>.<P>
In C, if you want <I>inc</I> to modify its operand, you pass a pointer to the operand instead. That is, you write <I>inc</I> as<P>
<pre>void inc(int *pi) { ++*pi; }</pre>
and apply the address-of operator <I>&amp;</I> to the operand <I>n</I> when you call the function, as in<P>
<pre>inc(&amp;n);</pre>
In C++, you can also write <I>inc</I> to modify its operand by using a reference type as the argument type and omit the <I>&amp; </I>from the function call:<P>
<pre>void inc(int &amp;ri) { ++ri; }
...
inc(n);</pre>
The function call initializes the formal reference argument <I>ri</I> to refer to the actual argument <I>n</I>. The increment expression ++<I>ri</I> applies to object referenced by <I>ri</I>, namely <I>n</I>, and not to <I>ri</I> itself.<P>
Once again, C++ makes an important distinction between initialization and assignment that C does not. At the time of the call, the formal reference argument is initialized to refer to the corresponding actual argument, just as if the reference had been declared with an initializer:<P>
<pre>int &amp;ri = n;</pre>
This is not the same as assignment to a reference, like<P>
<pre>ri = n;</pre>
which copies the value of <I>n</I> to the object referenced by the (previously initialized) reference <I>ri</I>.<P>
C++ programmers don't agree on using reference arguments instead of pointer arguments. Many programmers with experience in languages that support call-by-reference argument passing (like FORTRAN, Pascal and PL/I) find reference arguments more convenient than pointer arguments. Others believe that functions should avoid modifying their arguments. They prefer using explicit pointer arguments, or function return values, like<P>
<pre>int inc(int i) { return i + 1; }</pre>
I prefer using function return values wherever possible, but having programmed in languages that support call-by-reference, I do not find using pointer arguments to be any more readable than using reference arguments.<P>
<h4><FONT COLOR="#000080"><A name="0201_0106">Constant Reference Arguments<A name="0201_0106"></FONT></h4></P>
When a function does not modify its argument, passing by value provides the proper functionality; however, it might be expensive if the argument is large. For example, suppose you have a function<P>
<pre>int f(X x);</pre>
that examines but does not alter <I>x</I>, and that <I>X</I> is a class type declared as<P>
<pre>struct X
   {
   int n;
public:
   x() { ... }
   ...
   };</pre>
Class <I>X</I> has only one data member, <I>n</I>, so passing an <I>X</I> object to <I>f</I> by value is only as costly as passing an <I>int.</I> Now, suppose you enhance the program, and in so doing, add several data fields to <I>X</I>:<P>
<pre>struct X
   {
   int n;
   double d1, d2;
   char s[N];
public:
   x() { ... }
   ...
   };</pre>
These additional members dramatically increase the size of <I>X </I>objects, making the calls to <I>f</I> fairly expensive because each call copies an entire <I>X</I>.<P>
Of course, you can rewrite function <I>f</I> to pass its argument via a <I>const</I> pointer:<P>
<pre>int f(const X *p);</pre>
Passing the <I>X</I> object via a pointer avoids unnecessary copying, and the <I>const</I> qualifier prevents inadvertent modification of the object via the pointer <I>p</I>. Unfortunately, you must rewrite the body of <I>f</I> to use -&gt; instead of . (dot) whenever you access a member of *<I>p</I>. You must also change every call to <I>f</I> to pass the address of its argument explicitly.<P>
Using a <I>const</I> reference argument avoids this dilemma. Passing the argument as a constant reference is just as efficient as passing via a pointer, but much more convenient. You simply declare <I>f</I> as<P>
<pre>int f(const X &amp;x);</pre>
You need not change any code in the body of <I>f</I>, nor any of the calls to <I>f</I>.<P>
<h4><FONT COLOR="#000080"><A name="0201_0107">Copy Constructors<A name="0201_0107"></FONT></h4></P>
C++ requires a reference argument as the declaration of any copy constructors. A copy constructor for a class <I>X</I> is a constructor that initializes an <I>X</I> object by copying another <I>X</I> object. You must be able to call a copy constructor by passing a single argument of type <I>X</I>. For example, consider:<P>
<pre>X x;
...
X y(x);</pre>
The declaration of <I>x</I> uses the default constructor. It initializes the members of <I>x</I> with default values. The declaration of <I>y </I>uses the copy constructor to initialize <I>y</I> using <I>x</I>'s value.<P>
If you do not declare a copy constructor for a class <I>X</I>, the translator will generate one automatically, declared implicitly as either<P>
<pre>X::X(const X &amp;);</pre>
or<P>
<pre>X::X(X &amp;);</pre>
If all data members of <I>X</I> have primitive types or class types with copy constructors of the first form, then the generated copy constructor will also use that form. Otherwise, the generated copy constructor will be of the second form.<P>
A generated copy constructor initializes each member of the constructed object with the corresponding member of the copied object. That is, if class <I>X</I> has members <I>a</I> and <I>b</I>, then the generated copy constructor behaves just like<P>
<pre>X::X(const X &amp;x)
  : a(x.a), b(x.b) { }</pre>
This default behavior is called <I>memberwise initialization</I>. If it does not produce appropriate behavior for class objects, you must write an explicit copy constructor with the desired behavior. <A href="list2.htm">Listing 2</a>
shows a rudimentary class for variable-length character strings that needs an explicit copy constructor.<P>
The <I>String</I> class stores variable-length strings in character arrays allocated from the free store. Each <I>String</I> has a data member <I>str</I> that stores the pointer to the first character in the array, and another member <I>len</I> that stores the array length (plus one for a \<I>0</I> at the end). Class <I>String</I> has two constructors. The first constructor, <I>String(const char</I> *), initializes a <I>String</I> to hold a copy of a null-terminated string. For example, the declaration<P>
<pre>String s1("hello");</pre>
initializes <I>s1</I> to hold a copy of "hello".<P>
The second constructor, <I>String(const String &amp;)</I>, is the explicit copy constructor. It initializes a <I>String</I> to hold a copy of the text in another <I>String</I>. For example,<P>
<pre>String s2(s1);</pre>
initializes <I>s2</I> to hold a copy of <I>s1</I>. This copy constructor allocates a new character array from the free store and copies the contents of <I>s1</I>'s array into this new array. On the other hand, the default copy constructor would simply have initialized <I>s2</I> to refer to the same character array used by <I>s1</I> (<I>s1.str</I> and <I>s2.str</I> would point to the same array). With the default copy constructor, changes made to <I>s1</I> would corrupt the value of <I>s2</I>.<P>
The sample main program demonstrates that <I>s2</I>'s storage is distinct from <I>s1</I>'s storage, by using the member function <I>String::cat(char).s1. cat('!')</I> appends the single character <I>'!'</I> to the end of <I>s1. String::cat(char)</I> allocates a new, larger character array from the free store to hold the new string and returns the old character array to the free store. If you execute the program using an explicit copy constructor, <I>s1.cat('!')</I> has no effect on <I>s2</I>. If you comment out the explicit copy constructor and run the program, calling <I>s1.cat</I> corrupts <I>s2</I>.<P>
<h4><FONT COLOR="#000080"><A name="0201_0108">Functions Returning References<A name="0201_0108"></FONT></h4></P>
A function can return a reference. A call to a function returning a reference can be used as an 1value as well as an rvalue. That is, if you declare function <I>f</I> as<P>
<pre>int &amp;f(int);</pre>
then<P>
<pre>f(i) = j;</pre>
stores the value of <I>j</I> into the <I>int</I> referenced by the return value of <I>f(i)</I>. You can still use <I>f(i)</I> as an rvalue, as in<P>
<pre>j = f(i);</pre>
which copies the value of the <I>int</I> referenced by <I>f</I>(<I>i</I>) into <I>j</I>.<P>
<A href="list3.htm">Listing 3</a>
illustrates a simple but practical use for functions returning references. It adds a new member function <I>sub</I> to class <I>String</I>, such that <I>s.sub(i) </I>returns a reference to the <I>i</I>th character of <I>String s</I>. For example, given<P>
<pre>String s("hello");</pre>
then <I>s.sub(4)</I> returns a reference to the fourth character of <I>s</I> (containing <I>o</I>). The assignment<P>
<pre>s.sub(0) = 'H';</pre>
changes the value of <I>s</I> to <I>"Hello"</I>. The loop in the main function of <A href="list3.htm">Listing 3</a>
uses <I>s1. sub(i)</I> as both an 1value and an rvalue to convert <I>s1</I> to uppercase.<P>
If <I>String::sub</I> returns a <I>char</I> (rather than a <I>char &amp;</I>), then you could not use <I>s.sub(i)</I> as an 1value. If <I>String::sub</I> returns a <I>char</I> *, you would have to dereference that pointer to access the character, as in<P>
<pre>*s.sub(0) : 'H';</pre>
Note that the return expression <I>str[i]</I> in <I>String::sub</I> is of type <I>char</I>, not <I>char &amp;.</I> C++ converts the expression in the <I>return</I> statement to the return type of the function as if it were initializing (not assigning to) a reference variable. That is, the translator converts the return expression to the return type as if you had declared the return value as a reference variable, such as<P>
<pre>char &amp;return_value = str[i];</pre>
<h4><FONT COLOR="#000080"><A name="0201_0109">Dangling References<A name="0201_0109"></FONT></h4></P>
A dangling reference is a reference bound to an object that no longer exists. Dangling references, like dangling pointers, can cause very subtle bugs in C++ programs.<P>
A function that returns a reference to one of its local variables produces a dangling reference. For example, function <I>f </I>in <A href="list4.htm">Listing 4</a>
returns a reference to its local variable <I>i</I>. However, the return from <I>f</I> discards <I>i</I>'s storage, so the assignment<P>
<pre>f() = 2;</pre>
writes to a nonexistent object (typically somewhere in an inactive stack frame).<P>
The <I>String</I> class in <A href="list3.htm">Listing 3</a>
provides another opportunity to create a dangling reference. Consider the following code:<P>
<pre>String s("hello");
char &amp;rc = s.sub(0);
...
s.cat('?');
...
rc = 'H';</pre>
The declaration of <I>rc</I> binds it to first character of the current value of <I>s</I>. The call to <I>s.cat('?')</I> assigns a new value to <I>s</I> and destroys the old value (including the character bound to <I>rc</I>). <I>rc</I> is now dangling. The assignment to <I>rc </I>produces unpredictable results.<P>
The constructor in <A href="list5.htm">Listing 5</a>
also produces a dangling reference. Class <I>X</I> has a data member that's a reference. The constructor <I>X(int)</I> binds that data member to the address of the formal argument to the constructor. But the return from the constructor destroys the storage for the formal argument, leaving <I>x.r</I> dangling.<P>
In short, to avoid dangling references, don't bind a reference to an object whose lifetime ends before the reference's lifetime ends.<P>
<h4><FONT COLOR="#000080"><A name="0201_010A">Limitations On References<A name="0201_010A"></FONT></h4></P>
Reference types have some interesting limitations. Remember that operators applied to a reference apply to the referenced object, not to the reference. This is true for the <I>sizeof</I> operator. Thus, for any type <I>T, sizeof(T &amp;)</I> == <I>sizeof(T)</I>. In other words, you can't take the size of a reference. This has several ramifications.<P>
You cannot declare arrays of references, such as<P>
<pre>T &amp;r[N];</pre>
because the compiler can't determine the size of each element. Similarly, you cannot declare pointers to references, like<P>
<pre>T &amp;*p;</pre>
because pointer arithmetic, like array subscripting, relies on the size of the type to which the pointer points. In addition, you cannot declare references to references, nor references to bit-fields.<P>
You cannot declare both <I>f(X)</I> and <I>f(X &amp;)</I> in the same scope. Although C++ lets you overload functions, the argument lists must be sufficiently different to allow the compiler to unambiguously match a function call with a function declaration. For example, if you try to declare both<P>
<pre>void f(int);
void f(int &amp;);</pre>
in the same scope, the compiler can't tell if the function call in<P>
<pre>int k;
...
f(k);</pre>
should pass <I>k</I> by value or by reference. Most C++ compilers will not wait for the call to <I>f</I> to issue a diagnostic; they will reject the second function declaration as indistinct from the first.<P>
<h4><FONT COLOR="#000080"><A name="0201_010B">Readings<A name="0201_010B"></FONT></h4></P>
<a name="ref1">[1]</a>     Stroustrup, Bjarne, <I>The C</I>++ <I>Programming Language</I>, Addison-Wesley, Reading, MA, 1986.<P>
<a name="ref2">[2]</a>     Ellis, Margaret A. and Bjarne Stroustrup, <I>The Annotated C</I>++ <I>Reference Manual</I>, Addison-Wesley, Reading, MA, 1990.<P>

<h4><a href="../../../source/1991/sep91/saks.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
