


<HTML>
<HEAD>

<TITLE>September 1991/Doctor C's Pointers&reg;</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocsep.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Doctor C's Pointers&reg;<A name="01FF_0101"><A name="01FF_0101"></font></h2><P>
<h3 align="center"><A name="01FF_0000"><A name="01FF_0000">Data Structures, Part 6</h3><P>
<h3 align="center"><font color="#800000">Rex Jaeschke</font></h3><hr><blockquote><P>
<P><i><A name="01FF_0000"><A name="01FF_0000">Rex Jaeschke is an independent computer consultant, author and seminar leader. He participates in both ANSI and ISO C<I></I> <I></I>Standards meetings and is the editor of The Journal of C Language Translation, a quarterly publication aimed at implementors of C<I></I> <I></I>language translation tools. Readers are encouraged to submit column topics and suggestions to Rex at 2051 Swans Neck Way, Reston,<I></I> <I></I>VA 22091 or via UUCP at rex<I></I>@<I></I>aussie.com.</i></P><P>
The two previous installments implemented a linked list in an array. This installment will construct the list using nodes allocated by <I>malloc</I> instead. To accommodate the new approach and to make the project more manageable, the program has been completely reorganized. It does, however, still have much the same flavor as before.<P>
<h4><FONT COLOR="#000080"><A name="01FF_0102">The Revised Problem<A name="01FF_0102"></FONT></h4></P>
Both approaches strive to create a list of nodes and to perform various operations on individual nodes or on the list as a whole. However, rather than have each node simply contain some integer data, we make it deal with strings. Each node contains a unique string and an occurrence count. The list is doubly linked and the nodes are stored in alphabetical order. That is, the forward pointer from one node points to the node containing the string in the next highest order alphabetically. Likewise, the backward pointer points to the next lowest string entry. Of course, the strings being input could arrive in any order. Given the input strings '<I>Green</I>', '<I>Red</I>', and '<I>Blue</I>', the corresponding nodes created should be linked in order of string value '<I>Blue</I>', '<I>Green</I>', and '<I>Red</I>'. Note that '<I>black</I>' comes after '<I>Red</I>' since (at least in the ASCII character set) uppercase letters have lower values than lowercase letters.<P>
The structure template for a node is declared as follows:<P>
<pre>typedef struct node {
/* ptr to next node in list */
   struct node *pfwd;
/* ptr to prev node in list */
   struct node *pbwd;
/* ptr to node's string value */
   char *pstring;
/* occurrence count */
   unsigned count;
} Node;</pre>
Unlike in the previous solution, the forward and backward links are real pointers, not just array indices. In each case, they point to objects of the same type as the object in which they are contained. While C does not permit self-referential structures, it does allow this construction. Note that an object of type <I>struct node</I> can contain <I>pointers</I> to like objects but not to actual <I>instances</I> of that object type. The type <I>struct</I> <I>node</I> is still an unknown size when these pointer members are declared. However, the compiler isn't interested in that type, just the size of a pointer to that type. And the size of a pointer to a structure is independent of the type of that structure.<P>
<I>typedef</I> was used to make the type a bit more logical. The idea is that programmers should use the more logical name <I>Node</I> instead of <I>struct node</I>. (Even though structure and union tag names are in a different name space than <I>typedef</I> names, I chose to spell the two differently to avoid possible programmer confusion.) However, since the name <I>Node</I> is not defined until the end of that declaration, we must use a tag name for the structure so we can refer to that type in the first two member declarations.<P>
If we did not need pointers such as this, the structure tag name could have been omitted. As we have seen, the tag name is necessary in this case. As such, we run the risk of a user actually using <I>struct tag</I> instead of the more logical <I>Node</I>. Unfortunately, this style defeats the purpose of an information hiding mechanism such as <I>typedef</I> or <I>#define</I>, which is to let the user deal with just the logical name without the underlying details. If they do this, the underlying details can be changed with no resulting ill effects.<P>
Note that the string corresponding to each node is not actually stored in that node. Rather, a pointer to the start of the string is stored there. This allows strings to be of arbitrary length. However, we must then allocate space for each new string as it arrives. If we knew the maximum length of the strings, we could have made <I>pstring</I> an array of <I>char</I> instead. However, each node would then have contained that whole array even if the strings in the array were much smaller.<P>
This version of the program has less options than in previous installments. For example, there is no provision for inserting a node since this version eliminates that need by storing the node in alphabetical order after adding it. That is, the user doesn't say where to insert the node since the program determines its location automatically based on the string's value. Since the list is already maintained in sorted order there is no need for the sort option either. Also, there is no need for the options that search for the first and last occurrences since each node's string is unique. The other missing option is one for changing a node's data. This could have been provided but requires some interesting decisions to be made. The possibilities will be discussed in a future column.<P>
<h4><FONT COLOR="#000080"><A name="01FF_0103">The Code<A name="01FF_0103"></FONT></h4></P>
As in previous installments, the code is heavily commented. Therefore, I'll comment only on fragments of special interest. Note that although the program will be shown in separate parts, all were originally compiled in one source file.<P>
In <A href="list1.htm">Listing 1</a>,
 the pointers <I>proot_node</I> and <I>ptail_node</I> keep track of the beginning and end of the list. <I>pfree_node</I> points to the start of a list of free nodes. The counter <I>nodes_in_use</I> is incremented each time we allocate memory for a new node and decremented when a node is removed. It is only used with the <I>count_nodes</I> option. In fact, <I>nodes_in_use</I> could be eliminated altogether if you were willing to count the actual number of nodes each time <I>count_nodes</I> was requested instead.<P>
In order to simplify user-command processing, commands are selected by number. If the user selects a number less than zero or greater than the maximum, the selection is invalid. To avoid the <I>switch/case</I> construct (used in previous installments) or a nested if/else construct, we now use a jump table. A jump table is a table of addresses each of which points to the corresponding function to be called to service that particular command.<P>
The table, called <I>actions</I>, is an array of function pointers. Since the dimension was omitted, the compiler determines it from the initializer list, allowing us to easily add (or remove) entries from the table. Since each element of an array must have the same attributes, each function pointer must point to a function having the same argument list and return type. In this case, all processing functions have no arguments or return values.<P>
The array <I>actions</I> is defined as follows:<P>
<pre>static const void (*actions[])(void) = {
..
};</pre>
By giving it a storage duration of <I>static</I>, we ensure that the array is allocated and initialized before <I>main</I> begins execution. (Most compilers do this at compile time). Making it automatic would have been okay too. However, if the table were in a function called alot, it would be expensive because the program would allocate and initialize the table <I>every</I> time that function was called. Also, by using the <I>const</I> type qualifier, we prohibit our program from modifying the elements in the table.<P>
The <I>while</I> loop appears infinite. However, if the exit option is selected, the exit-processing function calls the library routine <I>exit() </I>, which terminates the program.<P>
The single statement used to actually invoke the selected action is as follows:<P>
<pre>(*actions[code])( );</pre>
The <I>code</I> entered is used as an index into the jump table, producing a pointer to the corresponding function. We dereference that pointer, giving us an expression which designates that function. We then call that function using the function-call operator <I>()</I>. The grouping parentheses (in both the expression and the table definition) are necessary since without them we would appear to have an array of functions, which is not possible in C.<P>
<A href="list2.htm">Listing 2</a>
shows the header <I>linklist.h.</I> The exit option simply informs the user if any nodes still exist in the list and gives them the opportunity to exit or not. In <A href="list3.htm">Listing 3</a>,
 the macro <I>EXIT_SUCCESS</I> (which was invented by ANSI C) is defined in <I>stdlib.h.</I><P>
The <I>help</I> function in <A href="list4.htm">Listing 4</a>
is quite obvious. Note, however, that the option numbers displayed must match the order of initializers in the jump-table actions defined in <I>main</I>.<P>
<A href="list5.htm">Listing 5</a>
shows how to add a node. The process for adding a node is quite complicated since the node being added could be the first node in the list, a new first or last node, or a duplicate of an existing node.<P>
The function <I>locate_node</I>, in <A href="list6.htm">Listing 6</a>,
 is called by various functions to either see if the given string already exists in the list, and if so, at what address. If the string doesn't exist, the function finds the address of the node preceding where such a string would be inserted.<P>
To get a new node we could simply call <I>malloc</I> each time. Then when a node is removed, we could free up the space it occupied using <I>free.</I> However, in <A href="list7.htm">Listing 7</a>,
 I chose not to free up such memory, but instead to add a pointer to it at the front of a free-node list much like in the previous installment. Therefore, we only <I>malloc</I> a new node if none is left in the free node list.<P>
<h4><FONT COLOR="#000080"><A name="01FF_0104">Next Month<A name="01FF_0104"></FONT></h4></P>
The other options will be the subject of next month's installment. Also, I will show a way to allow the user to enter commands as case-insensitive text, bypassing the numeric menu options used so far.<P>

<h4><a href="../../../source/1991/sep91/jaeschke.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
