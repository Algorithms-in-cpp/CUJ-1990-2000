


<HTML>
<HEAD>

<TITLE>September 1991/From PC To Mainframe With HLLAPI</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocsep.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Communications and Networks</FONT></H2>

<hr><h2 align="center"><font color="#800000">From PC To Mainframe With HLLAPI<A name="01FB_00FD"><A name="01FB_00FD"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="01FB_0000"><A name="01FB_0000">Douglas Connoly</font></h3><hr><blockquote><P>
<P><i><A name="01FB_0000"><A name="01FB_0000">Douglas Connolly is a Professional Staff Member of the Senate Democratic Policy Committee of the U.S. Senate. He has been programming in C for two and one half years and has written HLLAPI programs that are used by Democratic offices throughout the U.S. Senate to access the Senate mainframe computer. He graduated from the University of Michigan with high honors for research in the history of science. Mr. Connolly can be reached at 419 Hart Office Building, Washington, D.C. 20510. (202) 224- 5554.</i></P><P>
<h4><FONT COLOR="#000080"><A name="01FB_00FE">Introduction<A name="01FB_00FE"></FONT></h4></P>
The popularity of using PCs to access mainframe computers offers new opportunities for the C programmers, as well as the promise of better software for users. With the right 3270 emulation software, it is now possible to write programs that communicate directly with a mainframe computer and take advantage of the mainframe's vast resources. This communication is provided by HLLAPI, IBM's High Level Language Application Program Interface (pronounced "hi-happy" at IBM).<P>
HLLAPI handles the interface between programs written in high-level languages such as C and the 3270 emulation software running on a PC. HLLAPI allows a C program to perform the same functions that an operator can perform on a 3270 terminal, such as:<P>
<UL><li>logging on to a mainframe application</li>
<li>transferring a file</li>
<li>updating a database record</li>
<li>performing a query</li></UL>
Such programs can simplify a user's tasks at a terminal, or fully automate a task &#151; replacing the user interaction altogether. Because any operation carried out at a terminal can be controlled from C, the programmer can even create a user-friendly frontend for an organization's mainframe, allowing programs to be selected from a menu and seamlessly integrating mainframe operations with those performed on a PC. All these objectives can be accomplished with surprising ease using HLLAPI.<P>
HLLAPI is valuable not only for the level of control it offers but also for its portability. Though created by IBM, HLLAPI is also supported by a number of other vendor's 3270 emulation packages, including some that run under Windows 3.0. HLLAPI is also available under OS/2 Extended Edition's Communication Manager, making it relativity painless to port an application written in C to OS/2.<P>
This article describes the basics of writing C programs that use HLLAPI. A set of C utility functions simplify getting started with HLLAPI and solve some commonly encountered mainframe problems. These functions form the foundation of a program called <I>HOSTCOM</I>, which provides the routine functions of a 3270 terminal. <I>HOSTCOM</I> demonstrates how to write a HLLAPI program and serves as a platform for developing more complex programs.<P>
All the code presented here was developed using Borland's Turbo C 2.0 and has been tested with the following emulation software:<P>
(1)     IBM 3270/Personal Communications<P>
(2)     IBM Entry Level Emulation Program<P>
(3)     Attachmate Extra! for DOS<P>
(4)     RabbitGATE from Rabbit Software.<P>
There should be few, if any, problems in using this code with other emulation software packages that support HLLAPI.<P>
<h4><FONT COLOR="#000080"><A name="01FB_00FF">The Programmed Operator<A name="01FB_00FF"></FONT></h4></P>
A HLLAPI program carries out the same activities as a person sitting at a 3270 terminal. The functions available in HLLAPI so closely parallel the actions of an operator that, according to IBM's guidelines, you can think of a HLLAPI program as a "programmed terminal operator." A HLLAPI program establishes a session (i.e., a connection) with a host (a mainframe computer) and then carries out its operations. The exact same steps a human operator takes are followed by a HLLAPI program.<P>
Instead of using the keyboard, the HLLAPI program sends keystrokes to the mainframe in the form of null-terminated strings. In place of the screen, the program has access to a string containing the presentation space, which directly matches the information displayed for a human operator. A program can check its connection with a mainframe using HLLAPI functions that report the connection status. The mainframe does not know &#151; and does not need to know &#151; whether it is receiving commands from a person sitting at a terminal or from a HLLAPI program.<P>
<h4><FONT COLOR="#000080"><A name="01FB_0100">HLLAPI Program Organization<A name="01FB_0100"></FONT></h4></P>
The three basic parts of a HLLAPI program are:<P>
(1)     establishing the connection between a program and the host<P>
(2)     obtaining and analyzing the presentation space<P>
(3)     sending keystrokes<P>
The functions in the accompanying listings, while modular in design, are directed toward developing the sample program <I>HOSTCOM.</I><P>
Mainframe applications are notoriously inconsistent in their behavior. A successful HLLAPI program depends not only on how well you define your objective but on how thoroughly you identify inconsistencies in the mainframe application you are using. Your program's reliability will ultimately depend on how well it interacts with the mainframe application.<P>
HLLAPI consists of 36 functions, each of which is accessed by specifying a function number along with the other required parameters. (See <A href="tab1.htm">Table 1</a>.
) This article focuses on just nine of these functions &#151; the minimum you need to know, but enough to achieve fairly sophisticated results. These functions are described in <A href="tab2.htm">Table 2</a>.
<P>
The prototype for a function call is:<P>
<pre>void HLLC(int &amp;func, char *data_string,
   int &amp;string_length, int &amp;parm_4);</pre>
These parameters are used as follows:<P>
<I>func</I> &#151; one of the 36 HLLAPI function numbers.<P>
<I>data_string</I> &#151; a pointer to the presentation space. Some functions (not covered in this article) use this parameter to point to data items (e.g., to copy a string to and from a field in the presentation space).<P>
<I>string_length</I> &#151; the length of the string pointed to by <I>data_string</I>. Function 6, <I>Search_Presentation_Space</I>, uses this parameter to return the offset of the supplied string in the presentation space.<P>
<I>parm_4</I> &#151; on a function call, the fourth parameter used only by function 99, <I>Convert_Position_or_RowCol</I>, to specify the offset of the cursor in the presentation space. Every HLLAPI function uses the fourth parameter to return a code reporting the success of the function. A return code of zero indicates the function was executed successfully. A value greater than zero indicates either detection of an error condition which prevented the function from being carried out or information about the host state that was detected after the function was executed.<P>
Not all four parameters are used by every function. In some cases assigning a value is irrelevant because a value is implied by the function call. You must always supply all four parameters when making a call, however.<P>
<A href="list1.htm">Listing 1</a>
contains a separate C function for each HLLAPI function used here, except for the HLLAPI functions <I>Query_Cursor_Location</I> and <I>Convert_Position_or_RowCol</I>, which are both used in the function <I>dspy_cursor</I>. The listing also documents the return codes for each HLLAPI function and details how each of the four parameters is used. The functions used directly by <I>HOSTCOM</I> are in <A href="list2.htm">Listing 2</a>,
 which contains more complex functions that are built upon individual HLLAPI calls. These functions return values that are used by <I>process_error</I> to index into the error message array in <A href="list4.htm">Listing 4</a>,
 which is fully described below.<P>
<h4><FONT COLOR="#000080"><A name="01FB_0101">The Host Connection<A name="01FB_0101"></FONT></h4></P>
The first step in any HLLAPI program is to establish a connection between the program and the host. This connection is created by a call to <I>connect_ps_space</I>, as shown in <A href="list2.htm">Listing 2</a>.
 This function calls <I>connect_ps</I>, in <A href="list1.htm">Listing 1</a>,
 and uses a <I>switch</I> statement to translate the return value to an index, which can be used with the error message array. This organization is used throughout the code presented here.<P>
Once a connection is established, a program can proceed with its operations. But before using a HLLAPI function, you should verify that the communication line (the connection between your PC and the mainframe) is not busy. During the time a function is executing and again when the host responds, the communication line is busy. (The time between these two events is a kind of "no man's land" which will be discussed below.) A call made during this time would either fail or yield misleading results. HLLAPI provides the <I>Wait</I> function which indicates when the communication line is not busy. This function is implemented as <I>host_wait</I> in <A href="list2.htm">Listing 2</a>.
 Calling <I>host_wait</I> before any other HLLAPI function will ensure that the function executes successfully.<P>
The last step your program should take is to call the function <I>reset_connection</I>, in <A href="list2.htm">Listing 2</a>.
 This function uses the HLLAPI function <I>Reset</I> to break the connection between your program and the host and to reset the HLLAPI interface to its default settings. (Functions that modify the defaults are outside the scope of this article.)<P>
A program that simply makes and breaks a host connection looks like this:<P>
<pre>main()
{
   int err;
   err = connect_ps_space();
   if (!err) /* connect successful? */
      err = reset_connection();
   if (err)  /* any errors? */
      process_error(err);
}</pre>
<h4><FONT COLOR="#000080"><A name="01FB_0102">The Presentation Space<A name="01FB_0102"></FONT></h4></P>
The presentation space is an area in memory whose contents correspond to the information that would appear on a terminal screen. The HLLAPI function <I>Copy_Presentation_Space</I> transfers this data to an area of memory pointed to by a specified pointer. Once your program obtains this data, you can search the presentation data for mainframe prompts, extract information from it, or, as is done by <I>HOSTCOM</I>, display the data. By searching the presentation space for prompts, you can determine when and how the mainframe has responded to an action initiated by your program.<P>
Two functions show how to use the presentation space. <I>update_ps</I> in <A href="list2.htm">Listing 2</a>
obtains a copy of the current presentation space and displays it on the screen. <I>update_ps</I> relies on the HLLAPI function <I>Copy_Presentation_Space</I> and requires a pointer to an area the size of the presentation space &#151; 1,920 bytes (24 lines by 80 characters) &#151; plus one additional byte to serve as a <I>NUL</I> terminator. This last byte is required because of the way HOSTCOM displays the presentation space. For each line in the presentation space, the characters leading up to the first alphanumeric character are ASCII spaces, 0x20, and the characters following the last alphanumeric character to the end of the line are <I>NULs, 0x00</I>. There are no newline characters. <I>update_ps</I> converts all the <I>NUL</I> characters to spaces. Thus the presentation space can be treated as a single string, and can be displayed with one function call. Further, you can search the presentation space using the string functions in the Standard C library.<P>
You need not rely on the standard library to search the presentation space, however. The function <I>find_msg</I> in <A href="list2.htm">Listing 2</a>
uses a HLLAPI function that returns the offset in the presentation space of a specified string. For example, to determine whether the host will allow you to sign on, you might write:<P>
<pre>int rtn;

rtn = find_msg("READY FOR SIGN
ON");

switch(rtn) {
   case (0):    /* msg not found */
      puts("Host is not ready\n");
      break;
   case (-1):   /* msg found */
/* your sign on func */
      your_sign_on();
      break;
   default:
      process_error(rtn);
}</pre>
<I>find_msg</I> returns -1 if it finds the search string. A positive number indicates an error condition, and can be used to index into the error message array.<P>
<h4><FONT COLOR="#000080"><A name="01FB_0103">Sending Keystrokes<A name="01FB_0103"></FONT></h4></P>
Keystrokes are sent to the host in the form of a <I>NUL</I>-terminated string. The function keys and various special keys are represented as two characters: @ (at sign) followed by the key code. A listing of these keys is in <A href="tab3.htm">Table 3</a>.
<P>
There are two kinds of input:<P>
<UL><li>the standard alphanumeric characters, along with the keys that position the cursor &#151; tab, return, backspace and delete</li>
<li>the Attention Identifier (AID) keys, which cause the host to carry out some action. These include the enter key and the function keys.</li></UL>
An AID key can cause the mainframe application to be busy for some time (retrieving a database record, for example). During this time, which could be seconds or minutes, an attempt to send additional input would be rejected. Calling <I>host_wait</I> does not indicate when it is safe to send additional input because <I>host_wait</I> only indicates the status of the communication line &#151; not the mainframe application.<P>
Two input functions are provided for greater flexibility:<P>
<UL><li><I>keys_to_host</I> sends a string of keystrokes to the host</li>
<li><I>input_to_host</I> sends a single AID key to the host</li></UL>
Both functions call <I>host_wait</I> to verify that the communication line is clear. <I>input_to_host</I> also detects when the host will accept another AID key, and uses the same procedure a human operator would. A human would hit the reset key, wait a few seconds, then retype the AID key until successful. <I>input_to_host</I> repeats the same steps until successful, an error is detected, or the user hits the escape key.<P>
For many mainframe applications you can detect when the host has completed an operation by looking for confirmation in the presentation space &#151; but you cannot depend on this. I have dealt with mainframe applications that are occupied for minutes on end without providing any indication in the presentation space when they are ready for additional input. This problem is typical of the difficulties you may run into when controlling a mainframe application from a HLLAPI program.<P>
<h4><FONT COLOR="#000080"><A name="01FB_0104">A Sample HLLAPI Program<A name="01FB_0104"></FONT></h4></P>
<I>HOSTCOM</I> is a sample HLLAPI program designed to emulate a terminal: its two primary tasks are to display the contents of the presentation space (simulating a terminal screen) and to handle input from the keyboard. In addition, <I>HOSTCOM</I> implements a simple error reporting function and provides certain enhancements over a 3270 terminal. The code for <I>HOSTCOM</I> is in <A href="list3.htm">Listing 3</a>
and <A href="list4.htm">Listing 4</a>.
 <A href="list5.htm">Listing 5</a>
is the header file.<P>
To complete the terminal-emulation environment, <I>HOSTCOM</I> displays a status indicator on the left side of the 25th line that notifies the user when the host is ready for keyboard input. Rather than the usual status indicator symbols used by 3270 terminals, <I>HOSTCOM</I> displays <I>Ready</I> when the keyboard may be used, <I>Sending</I> when a command is being transmitted to the mainframe, and <I>TIME n</I>, with <I>n</I> incrementing every two seconds, to indicate that <I>HOSTCOM</I> is trying to resend an AID key. The sending and time messages are controlled by <I>input_to_host. host_wait</I> displays a <I>Waiting</I> message while the communication line is busy.<P>
When a key is waiting in the keyboard buffer, <I>HOSTCOM</I> sends the key to either <I>keys_to_host</I> or <I>input_to_host</I>, depending on the type of the key. Then the display is updated and the cursor positioned by a call to <I>display_cursor</I>. Two HLLAPI functions are required to position the cursor:<P>
<UL><li><I>Query_Cursor_Location</I> reports the position of the cursor in the presentation space as a single offset</li>
<li><I>Convert_Position_or_RowCol</I> converts this offset to a row/column expression.</li></UL>
<I>HOSTCOM</I> keeps track of the position of the cursor to protect the user from backspacing into a protected field &#151; a useful feature not found on a 3270 terminal.<P>
<I>HOSTCOM</I> uses the direct video function <I>write_string</I> for all screen output. The function <I>set_vid</I> detects the active video mode and sets a pointer to the active video memory. <I>set_vid</I> also determines the screen attributes for color or monochrome.<P>
<h4><FONT COLOR="#000080"><A name="01FB_0105">Error Reporting<A name="01FB_0105"></FONT></h4></P>
The function <I>process_error</I> is called when any function in <A href="list2.htm">Listing 2</a>
returns a value greater than zero. <I>process_error</I> displays a message describing the error and provides a menu from which to select one of four actions. Simple user-caused errors can be corrected by entering a 3270 clear or reset command, options 1 or 2. A major problem, such as a faulty communication line, requires exiting the program, option 4. Because <I>HOSTCOM</I> was designed with development in mind, option 3 permits ignoring the error and continuing the program.<P>
<h4><FONT COLOR="#000080"><A name="01FB_0106">Making A Graceful Exit<A name="01FB_0106"></FONT></h4></P>
Before terminating a program, you should log out of the mainframe application you are using. Failure to do so can create annoying problems, such as being unable to log back into an application since it has no record of your exit. When you try to exit <I>HOSTCOM</I>, the function <I>check_signon</I> determines whether you are signed on to an application, by analyzing information contained in the OIA.<P>
<h4><FONT COLOR="#000080"><A name="01FB_0107">The OIA<A name="01FB_0107"></FONT></h4></P>
The 25th line of a 3270 terminal displays information about the connection between the terminal and the mainframe and is called the Operator Information Area (OIA). This information is accessible to a program through the HLLAPI function <I>Copy_OIA</I>, which returns a 103-character string containing the data. The full extent of the OIA is outside the scope of this article, but is described in most emulation software documentation. Only the fourth byte of the OIA is used by <I>HOSTCOM</I>. This byte indicates whether the host is signed on to an application. A HEX dump of the OIA string can be viewed in <I>HOSTCOM</I> by pressing the key F7.<P>
<h4><FONT COLOR="#000080"><A name="01FB_0108">Running HOSTCOM<A name="01FB_0108"></FONT></h4></P>
If you are using one of the four supported emulation packages, you can run<I> HOSTCOM </I>by entering (at the MS-DOS prompt):<P>
<pre>HOSTCOM n</pre>
where <I>n</I> is <I>0</I> for IBM Personal Communications/3270, <I>1</I> for IBM Entry Level Emulator Program, <I>2</I> for Attachmate, and <I>3</I> for RabbitGATE. Specifying <I>4</I> will run the program in simulated mode for testing purposes and using 5 will run it in simulated mode and display test data on the screen.<P>
<h4><FONT COLOR="#000080"><A name="01FB_0109">Adding Your Own Options<A name="01FB_0109"></FONT></h4></P>
As presented, <I>HOSTCOM</I> is only a slight improvement over the mainframe session provided directly by your terminal emulation software. But using <I>HOSTCOM</I> to automate some mainframe tasks can make it quite useful. With <I>HOSTCOM</I> you can automate many mainframe tasks using just the functions <I>keys_to_host, input_to_host</I>, and <I>find_msg.</I><P>
Consider signing on to a mainframe. I will assume that signing on requires entering an application name, waiting for the mainframe to request a password, depressing the tab key twice (to move the cursor to a password field), then typing the password, followed by <I>enter</I>. Assuming the application is called <I>MYAPP</I> and your password is <I>ROSEBUD</I>, you could automate the task of signing on as shown in <A href="list6.htm">Listing 6</a>.
<P>
<I>sign_on</I> will return zero on success, -1 if the application is not available, and a value greater than zero if an error is encountered. <I>find_msg</I> searches for either a confirmation of the sign on request or an indication that the application is not available. You will have to change the function to correspond to the prompts and messages used in your organization. You could call this function from <I>HOSTCOM</I> by adding the following lines to the switch statement in <I>main</I> in <A href="list3.htm">Listing 3</a>,
 assuming it would be invoked by depressing the key F2:<P>
<pre>case K_F2:
   err = sign_on();
   if (err == -1) {
      write_string(1, 1,
         "App not Available",stat_attr);
      while (!receive_esc())
         ; /* wait for escape */
   }
   break;</pre>
When this function is executed, the status indicator will indicate <I>Ready/Sending/Waiting</I> as each part of the sign on operation is carried out.<P>
<h4><FONT COLOR="#000080"><A name="01FB_010A">Compiling And Running<A name="01FB_010A"></FONT></h4></P>
The connection between a program and the emulation software is made with a Language Interface Module (LIM). A LIM is a small object file that is linked with your C object files to form an executable program. LIMs are included with IBM's emulation software and with some other packages as well. IBM includes a separate LIM for small, medium, and large C model programs: <I>hllc_s.obj, hllc_m.obj</I>, and <I>hllc_l.obj</I>, respectively. (IBM also supplies LIMS for Pascal, BASIC, and COBOL, along with guidelines for writing a LIM.) When your program makes a HLLAPI call, the LIM generates a software interrupt and passes the function number and parameters to the emulation software.<P>
Be sure your emulation software is configured to support HLLAPI. This requires running a program that becomes memory resident or specifying an option during program installation. Once the emulation software is configured and loaded, you need only enter the name of your HLLAPI program at the MS-DOS prompt.<P>
<h4><FONT COLOR="#000080"><A name="01FB_010B">Emulation Software Considerations<A name="01FB_010B"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="01FB_010C">RabbitGATE<A name="01FB_010C"></FONT></h4></P>
This package consists of hardware (a controller and gateway) and software to bring 3270 emulation to PC-based networks. The RabbitGATE emulation software requires that a HLLAPI program power-on a session before using it. This is accomplished by sending a special power-on string using the <I>Send_Key</I> function. (See <I>rabbit_power[]</I> in <A href="list3.htm">Listing 3</a>.
) Sending the same string a second time powers the session off. It is necessary to power a session off before terminating a program in order to prevent leaving the connection in a "bound" (locked up) state. <I>HOSTCOM</I> handles this automatically.<P>
<h4><FONT COLOR="#000080"><A name="01FB_010D">Attachmate Extra! for DOS<A name="01FB_010D"></FONT></h4></P>
This highly-rated program is completely compatible with HLLAPI and works with a variety of 3270 cards. However, I have experienced one problem with v2.0. If a HLLAPI program sends two consecutive clear commands to the host, subsequent attempts to send input result in a "keyboard locked" error message, and all attempts to clear the condition fail. <I>HOSTCOM</I> uses the variable <I>clear_key</I> to prevent this situation.<P>
<h4><FONT COLOR="#000080"><A name="01FB_010E">IBM Entry Level Emulator<A name="01FB_010E"></FONT></h4></P>
This program does not support some of the more advanced HLLAPI functions and supports only one session, but runs on PCs with as little as 128K of RAM.<P>
<h4><FONT COLOR="#000080"><A name="01FB_010F">Other Emulation Software Packages<A name="01FB_010F"></FONT></h4></P>
The code presented here should work with any emulation software that supports HLLAPI. The only modification you may have to make involves the session identification. Every mainframe session has associated with it what is called the short name of the host presentation space, or the Presentation Space Identification (PSID). This is a single character or number that must be supplied when using the functions <I>Connect_Presentation_Space </I>and<I> Query_Cursor_Location</I>. Each of the emulation packages discussed previously uses a different default PSID. <I>connect_ps</I> and <I>dspy_cursor</I> in <A href="list1.htm">Listing 1</a>
select the correct PSID for the active emulation software. If you are writing a program that supports multiple sessions or a different emulation package, check the emulation software documentation to determine how the PSID is assigned. You will have to modify <I>connect_ps</I> and <I>dspy_cursor</I>. In addition, you will have to change the line in <A href="list3.htm">Listing 3</a>
that assigns <I>argcv[1] </I>to <I>hllapi_level</I>.<P>
<h4><FONT COLOR="#000080"><A name="01FB_0110">Where To Go From Here<B><A name="01FB_0110"></B></FONT></h4></P>
The code presented here has introduced the basics of HLLAPI programs and successful interaction with mainframes. While other functions are available in HLLAPI, you can accomplish a lot using the nine functions described here. Using just these functions, I have written HLLAPI programs that use a pop-up menu interface to select mainframe applications, cut and paste text between a mainframe and WordPerfect, download text from a mainframe to an ASCII file, and print text on standard and PostScript printers. Here are some ideas you might explore using <I>HOSTCOM:</I><P>
<UL><li>Add detection and display of the Host screen attributes. (Use Function 14, <I>Query Field Attribute</I>.)</li>
<li>Add a pop-up menu interface.</li>
<li>Print screens of text or capture to a file. You could create what amounts to a file transfer (to capture e-mail messages, for example) without making any changes to the mainframe application by (1) saving the data contained in the presentation space, (2) sending the appropriate key to get the next screen of data, and (3) testing each screen with <I>find_msg</I> to determine if the last screen of text has been reached.</li>
<li>Use <I>Send File</I> (Function 90) and <I>Receive File</I> (Function 91) to pass data between PC and mainframe applications.</li></UL>

<h4><a href="tab4.htm">Table 4</a></h4>

<h4><a href="../../../source/1991/sep91/connolly.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
