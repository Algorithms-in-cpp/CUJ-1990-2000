

<HTML>
<HEAD>

<TITLE>November 1995/C++ Pointers and Dynamic Memory Management</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocnov.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Book Reviews</FONT></H2>

<hr><h2 align="center"><font color="#800000">C++ Pointers and Dynamic Memory Management<A name="01B1_00F1"><A name="01B1_00F1"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="01B1_0000"><A name="01B1_0000">reviewed by Chuck Allison</font></h3><hr><blockquote><P>
<P><i><A name="01B1_0000"><A name="01B1_0000">Chuck Allison is a former columnist with CUJ and a Senior Software Engineer in the Information and Communication Systems Department of the Church of Jesus Christ of Latter Day Saints in Salt Lake City. He has a B.S. and M.S. in mathematics, has been programming since 1975, and has been teaching and developing in C since 1984. His current interest is object-oriented technology and education. He is a member of X3J16, the ANSI C++ Standards Committee. Chuck can be reached on the Internet at 72640.1507@compuserve.com.</i></P><P>
Pointers and dynamic memory are undoubtedly the most powerful constructs of the C language, yet also the most difficult concepts to master. C++ only complicates these concepts, so you'd better be prepared before you tread the deep waters of object-oriented programming. This book offers some preparation, as a fairly complete treatise on C pointers, as well as a good introduction to the new features of pointers in C++. It is actually a sequel to the author's <I>C Pointers and Dynamic Memory Management</I>. Although I'm not familiar with the prequel, I would imagine that much of it is repeated here, since at least half the book covers pointers from the C perspective, making it quite self-contained. The book targets beginning to moderately-experienced programmers who are familiar with the syntax and basic constructs of C and C++. A companion diskette contains the code shown in the book.<P>
<h4><FONT COLOR="#000080"><A name="01B1_00F2">Topics Covered Reasonably Well<A name="01B1_00F2"></FONT></h4></P>
The book's most striking contribution is probably its 3-dimensional container analogy, used to depict pointers to data elements. Most authors, myself included, employ the usual 2-d notation, as in<P>
<IMG SRC="equat.gif"><P>
for the declarations<P>
<pre>int i = 7;
int *ip = &amp;i;</pre>
The 3-d metaphor is especially effective when a referenced object spans more than one byte, such as a long integer: the outside of the "container" has demarcations for four bytes, but the inside holds a single value. This clearly shows that pointers point to the beginning of an object. With that understanding, readers can easily see why they can't dereference a pointer to void without a cast, as Daconta explains on page 36:<P>
"So the compiler has a starting point; big deal! It cannot use just a starting point. It needs to know where to finish. In other words, it needs to know how many bytes of data to get."<P>
Since this is also a book about memory management, the author thoroughly investigates the three types of memory: static (which he calls global), automatic (i.e., the stack), and dynamic (or heap memory). The book contains a good discussion of stack frames for those interested in the details of how functions are called and arguments are passed.<P>
The ensuing discussion explains that there are basically two variations of storage class for any identifier: static or automatic. (Even the pointers that refer to dynamic memory fall into one of these categories). Daconta then erroneously identifies const and volatile as storage class specifiers. These two keywords are actually <I>type specifiers</I>, and have nothing to do with a variable being automatic or static. The storage class specifiers in C++ are:<P>
<pre>auto
register
static
extern
mutable</pre>
mutable is a relatively new C++ keyword (1992) which applies only to class data members, and const behaves a little differently than in C, but Daconta explains neither of these facts anywhere.<P>
Daconta does a good job explaining multi-dimensional arrays, which actually are not defined in either language. C++ uses without change C's notion of "arrays of arrays." For example, the declaration<P>
<pre>int a[3][4];</pre>
defines a as an "array of 3 arrays of 4 integers." To define a pointer that behaves identically to a in expressions, you do not do this:<P>
<pre>int **p = a;</pre>
A good compiler will even give you a warning about incompatible pointer types in that expression. Since the first element of the array a is an "array of 4 integers," you must declare p as a pointer to such, as in<P>
<pre>int (*p)[4] = a;</pre>
Now p[i][j] is equivalent to a[i][j].<P>
The book also includes a chapter on traditional data structures, such as linked lists and hash tables. These are excellent vehicles for illustrating both pointers and heap memory and how they work together. The author also uses templates in this chapter, which is the preferred way to implement homogeneous containers in C++.<P>
He has sprinkled a few "OOP Warnings" and other guidelines throughout the book to alert the reader to common pitfalls. For example, after an example that uses a global variable in an illustration of the various types of scope in C, he says:<P>
"OOP WARNING: The Source 2.2 demonstration of globals was just a demonstration and not a recommendation. Globals should be avoided in object-oriented programming because they provide no protection for data. Thus they violate the entire purpose of encapsulation."<P>
I would insert a "usually" before the phrase "be avoided," but the idea is sound.<P>
In explaining function pointers, Daconta either isn't aware of the simpler alternate syntax, or he doesn't like it. For example, in a typical generic sorting function, he calls a compare function via dereferencing:<P>
<pre>void isort(int (*cmp)(char *, char *), char ** date, int length)
{
   ...
   ... (*cmp)(data[j], data[j-1]) ...
   ...
}</pre>
The ANSI C committee decided long ago that the explicit dereferencing operation is redundant, since the only thing you can do with a function pointer in a function-call context is invoke the function. Therefore, you can render the call more readably as<P>
<pre>cmp(data[j], data[j-1])</pre>
which is superior to the former version just like a[i] is more readable than *(a + i).<P>
The last two chapters delve into the mysteries of memory management. Chapter 14 implements a debugging heap allocator, while Chapter 15 explores the joys of Intel's segmented x86 architecture, which hopefully will become a non-issue in today's emerging 32-bit world.<P>
<h4><FONT COLOR="#000080"><A name="01B1_00F3">Coverage of C++<A name="01B1_00F3"></FONT></h4></P>
As far as C++-specific issues go, the book covers the new and delete operators; the interaction of constructors, assignment operators, and destructors; the this pointer; abstract classes; polymorphism; and the inner-workings of virtual functions. That's the good news. My greatest disappointment in this book is its incomplete coverage of C++ (which supposedly is the reason for the book's existence in the first place). When the author tries to go beyond the basics, he is a man of few words and not a few misconceptions.<P>
A common point of confusion for novices is the copy constructor. Exactly when is it called? It is only partially correct to say "a copy constructor is called when passing an object to a function," which is essentially what Daconta says on page 63:<P>
"It is important to understand that the copy constructor is specific to the passing of objects to functions."<P>
This statement can be misleading. The copy constructor is used to <I>initialize</I> one object from another of the same type. What's important to understand is that objects passed to or returned from a function by value are done so by <I>initialization</I>, which means that a constructor (not necessarily the copy constructor) is called. For example, if I have a class Foo with a single-integer-argument constructor, Foo::Foo(int), and a function f with the following signature:<P>
<pre>void f(const Foo&amp; x);</pre>
then the call<P>
<pre>f(2);</pre>
does not call the copy constructor, but instead passes Foo(2) as a temporary object to f. Furthermore, if a function g returns a Foo object, it may or may not use the copy constructor. If g contains the statement<P>
<pre>return 2;</pre>
it will again use Foo(2). You will not come to thoroughly understand initialization or the proper role of the copy constructor from this book.<P>
Furthermore, the copy constructor is usually defined with a const reference argument, as in<P>
<pre>Foo(const Foo&amp;);</pre>
whereas the author always uses<P>
<pre>Foo(Foo&amp;);</pre>
which is valid C++, but semantically incomplete, since there's rarely a need to modify the passed object. This reveals Daconta's lack of appreciation for the role of const in C++. He doesn't even use it until page 264, long after the naive reader has picked up some bad habits. In fact, nowhere in the book does he even mention const member functions. Like many unwary C++ programmers, he falls prey to the operator[] problem. In his "safe" String class, he defines<P>
<pre>char&amp; operator[](int index)
{
   assert(index &lt; _sz);
   assert(index &gt;= 0);
   return _storage[index];
}</pre>
Now what happens if I have a const String object? I cannot even call this function, since it is not a const member function. For this reason, experienced C++ programmers always define two versions of operator[], in this case<P>
<pre>char&amp; operator[](int);
char operator[](int) const;</pre>
The general practice for any type T is:<P>
<pre>T&amp; operator[](int);
const T&amp; operator[](int) const;</pre>
An early introduction of const would also simplify the explanation of the this pointer. In a typical C++ implementation, every non-const, non-static member function of class T receives a hidden parameter called this with the following declaration:<P>
<pre>T * const this;</pre>
which means that the value of this itself cannot be modified. For const, non-static functions it is declared like this:<P>
<pre>const T * const this;</pre>
which prevents you from altering the value of any non-static data members. These are not new concepts here, just normal C-language pointer access rules.<P>
Yet sometimes you need to override the const-ness of a member function to alter some implementation-specific data member so you "cast away" const, as in<P>
<pre>T *This = (T*) this;
This-&gt;x = ... // override const</pre>
or better yet, use the language operator made for this very purpose:<P>
<pre>const_cast&lt;T*&gt;(this)-&gt;x == ...</pre>
C++ provides four new cast operators for handling pointers:<P>
<pre>dynamic_cast
static_cast
const_cast
reinterpret_cast</pre>
These operators were voted into the standard over two years ago, and have been available in Borland C++ for some time. It's too bad that the author doesn't know about them, but even worse that he doesn't use const as the designers of C++ intended.<P>
There is another time bomb lurking in his "safe" String class. If he should ever add a binary operator, such as operator+ for concatenation, his class will fail on an expression such as<P>
<pre>String s;
s + "hello";</pre>
Why? Because he has provided implicit conversions both to and from char *, via the following member functions:<P>
<pre>// This should be const char *,
// of course
String(char *instr);
// Better if this is operator const
// char*, too
operator char*();</pre>
You can't do mixed-mode operations such as s + "hello" when both conversions are available, because the compiler doesn't know which one to pick: should it convert s to char *, or "hello" to String? The convention is to favor conversions from simpler to more complex types, so he should keep the single-argument constructor here, and provide an explicit conversion to char *. For example, he could replace the conversion operator with a member function having a suggestive name, such as<P>
<pre>const char* to_cstr() const; // Note the usage of const</pre>
and use it like any other member function:<P>
<pre>printf("%s",s.to_cstr());</pre>
Throughout the book Daconta checks for a null pointer to see if the new operator failed to allocate memory. The standards committee determined long ago that the compiler should throw exceptions when memory is exhausted. I don't think the word "exception" appears anywhere in the book (at least not in the index), and his examples will not work on a standard-conforming compiler. To his credit, he does mention the set_new_handler function, which allows the programmer to regain control when new fails, but his example prints error messages to cerr, which is likely to require more of the already-exhausted heap.<P>
Daconta also doesn't know about operator new[] and operator delete[], for allocating and deallocating array memory, both on the global or class level (again, Borland C++ has supported them for some time). He states on page 192:<P>
"When allocating an array of objects X, the global operator will be used, even if a class operator exists."<P>
That's just plain wrong. He even goes so far as to disassemble a program to discover that his compiler uses a different allocator for arrays. If he only knew about operator new[], he could save himself and his readers a lot of head scratching. (For an illustration of the semantics of these special functions, see Listing 23 - Listing 25 of my former column, "Code Capsules: Dynamic Memory Management, Part 2," <I>CUJ</I>, November 1994.)<P>
Daconta's treatment of placement new is even more puzzling. He gives it only these few lines:<P>
"You can pass additional arguments to new using placement syntax. A very common example of this is to initialize objects at a specified address:<P>
<pre>void *operator new(size_t, void *p)
{return p;}"</pre>
His "example" is not an example at all, but the canonical implementation for the single-address placement new. If he had used a less trivial example to illustrate class-based operator new(), he would've found a use for it. Placement new was invented to accommodate per-class allocators, which save significantly on standard heap allocator overhead. See my article quoted above for such an example.<P>
Another concept that often taxes readers imaginations is the virtual base class; no treatment of inheritance in C++ is complete without it. Since the obvious implementation is via pointers, it makes sense for this book to cover the topic. It does not.<P>
Perhaps the biggest embarrassment of all is Daconta's treatment of class member pointers. When I read the back cover, I was excited when I saw this item from a bulleted-list:<P>
<UL><li>Covers all aspects of pointers including: pointer pointers, function pointers, and even class member pointers.</li></UL>
I thought, "Great! Someone is finally going to write something substantial about member pointers!" Imagine my disappointment when I found only 15 text lines, which in Daconta's wordy style don't say a lot. All he mentions is that you can define pointers to <I>data</I> members, for example, for a class age, he defines a pointer to a data member, a, like this:<P>
<pre>// requires public data member a
int age::* aap = &amp;age::a;</pre>
He then qualifies the example by saying that you wouldn't really want to use pointers to data members anyway, since data should be encapsulated. That's it.<P>
Well of course you wouldn't want to do that! Member pointers were invented mainly to get at <I>member functions</I>, which he should have illustrated. See the second edition of Stroustrup's <I>The C++ Programming Language</I>, page 167 for a canonical example. Member pointers come in handy in software tools when the actual member function that needs to be called is not known at compile time, like callbacks in a windowing system. You can see an example of this sort in the second edition of Stan Lippman's <I>C++ Primer</I>, pp. 250-256.<P>
<h4><FONT COLOR="#000080"><A name="01B1_00F4">Summary<A name="01B1_00F4"></FONT></h4></P>
Giving credit where credit is due, this is a very good book for pointers and dynamic memory management in C. It also nicely covers the basics of the new and delete operators, and inheritance and polymorphism in C++. If the author knew as much about C++ as he does about the internals of memory management or about Intel's x86 architecture, this would have been a great book. Beyond learning the basics, I'm afraid that novice programmers reading this book might pick up some bad habits and erroneous ideas. You might consider waiting for the second edition.<P>
Title:        <I>C++ Pointers and Dynamic Memory Management</I><br>
Author:      Michael C. Daconta<br>
Publisher:   Wiley - QED<br>
Pages:       464<br>
Price:       US$ 39.95<br>
ISBN:        0-471-04998-0<P>
</BLOCKQUOTE>
</BODY>
</HTML>
