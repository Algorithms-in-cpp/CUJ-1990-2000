



<HTML><HEAD>

<TITLE>July 1996/HTML Programming with Objects/Listing 1</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4>
<A name="HEADING1">Listing 1: Source code for HTML class</A></h4>


<pre>

//hello.cpp
#include "html.h"
void
main(int argc, char *argv[]){
    Pause::init(argc, argv);
    cout &lt;&lt; (Html() &lt;&lt; "Hello, world!");
    }
//html.h
#if !defined(HTML_DEFINED)
#define HTML_DEFINED
#include "strClass.h"
    class
BlockOption : public String{
    friend ostream&amp; operator &lt;&lt; ( ostream&amp; out, BlockOption&amp; option);
protected:
    String name;
public:
    BlockOption(BlockOption&amp; b) :
        String((String&amp;) b), name(b.name){}
    BlockOption(const char * const _name, 
                const char * const value):
        name(_name), String(value){}
    BlockOption(const char * const _name) : name(_name){}
    CAST_INJECTORS(BlockOption)
    };
CAST_IOMANIP(BlockOption)
ostream&amp; operator &lt;&lt; ( ostream&amp; out, BlockOption&amp; b);
class Block;
ostream&amp; operator &lt;&lt; ( ostream&amp; out, Block&amp; b);
class Block : public String {
    friend ostream&amp; operator &lt;&lt; ( ostream&amp; out, Block&amp; b);
protected:
    String tag;
    BlockOption* option[10];
    unsigned blockOptionCount;
public:
    Block():tag(),blockOptionCount(0){}
    Block(const char * const _tag):
        tag(_tag),blockOptionCount(0){}
    Block( Block&amp; sourceBlock);
    ~Block();
    Block&amp; operator&lt;&lt;( BlockOption&amp; opt );
    Block&amp; filter(const char * text);
    CAST_INJECTORS(Block)
    Block&amp; operator&lt;&lt; ( Block&amp; b ){
        (ostrstream&amp;)*this &lt;&lt; b;
        return *this;
        }
};
CAST_IOMANIP(Block)
class Anchor : public Block{
public:
      Anchor(const char * const ref) : Block("a"){
        (Block&amp;)*this &lt;&lt; BlockOption( "HREF", ref);
        }
    CAST_INJECTORS(Anchor)
Anchor&amp; filter(const char * text)
    { ((Block&amp;)*this).filter(text); return *this;}
};
CAST_IOMANIP(Anchor)
class Html : public Block {
    friend ostream&amp; operator &lt;&lt; ( ostream&amp; out, Html &amp;html);
protected:
    String title;
    int isIndex;
    static int responseHeader;
public:
    Html(const char * const _title, int _isIndex =0) : 
        Block("body"), title(_title), isIndex(_isIndex){};
    Html() : Block("body"), title(), isIndex(0){};
    static void noResponseHeader(){ responseHeader =0;}
    CAST_INJECTORS(Html)
    Html&amp; operator &lt;&lt; ( Block&amp; b ) {
        ((ostrstream&amp;)(Block&amp;)(*this)) &lt;&lt; b ;
        return *this;
        }
    Html&amp; filter(const char * text)
        { ((Block&amp;)*this).filter(text); return *this;}
};
CAST_IOMANIP(Html)
ostream&amp; operator &lt;&lt; ( ostream&amp; out, Html &amp;html);
#endif
//html.cpp
#include "html.h"
void message( char* code, unsigned long line,
              char* file, char* date){
    cout &lt;&lt; (
        Html("Error")
        &lt;&lt; (Block("H1") &lt;&lt; "Error!")
        &lt;&lt;    (Block("DL")
            &lt;&lt; "\n&lt;DT&gt;CODE&lt;DD&gt;" &lt;&lt; code
            &lt;&lt; "\n&lt;DT&gt;LINE&lt;DD&gt;" &lt;&lt; line
            &lt;&lt; "\n&lt;DT&gt;FILE&lt;DD&gt;" &lt;&lt; file
            &lt;&lt; "\n&lt;DT&gt;DATE&lt;DD&gt;" &lt;&lt; date
            &lt;&lt; "\n"
            )
        );
    }
//********************* Block messages ************************
    Block&amp; Block :: operator&lt;&lt; ( BlockOption&amp; opt ){
        if(blockOptionCount &lt; 10)    // Deep copy the option
            option[blockOptionCount++] = new BlockOption(opt);
        return *this;
    }
    Block::Block( Block&amp; b): String(b), tag(b.tag){
        for(blockOptionCount =0;
            blockOptionCount &lt; b.blockOptionCount;
            blockOptionCount++
            )
            option[blockOptionCount] =
                new BlockOption(*b.option[b.blockOptionCount]);
    }
    Block::~Block(){
        unsigned k =0;
        while(k &lt; blockOptionCount) delete option[k++];
    }
    Block&amp; Block::filter(const char * text){
        char *s =(char*)text, c;
        while( (c =*s++) != 0 )
            switch(c){
                case '&amp;':  *this &lt;&lt; "&amp;amp"; break;
                case '&lt;':  *this &lt;&lt; "&amp;lt";  break;
                default:  *this &lt;&lt; c;
            }
        return *this;
    }
    ostream&amp; operator&lt;&lt; ( ostream&amp; out, Block&amp; b){
        out &lt;&lt; "&lt;" &lt;&lt; b.tag;
        unsigned k =0;
        while(k &lt; b.blockOptionCount)
            out &lt;&lt; b.option[k++];
        out &lt;&lt; "&gt;" ;
        return out &lt;&lt; (String&amp;)b &lt;&lt; "&lt;/" &lt;&lt; b.tag &lt;&lt; "&gt;\n";
    }
//********************* BlockOption **************************
    ostream&amp; operator&lt;&lt; ( ostream&amp; out, BlockOption&amp; b){
        out &lt;&lt; " ";
        out &lt;&lt; b.name;
        out &lt;&lt; "=\"";
        out &lt;&lt; (String&amp;)b;
        out &lt;&lt; "\"";
        return out;
    }
//******************** Html messages *************************
    int Html::responseHeader =1;
    ostream&amp; operator&lt;&lt;( ostream&amp; out, Html&amp; body){
        Block htmlBlock("html");
        if( body.title.notNull() || body.isIndex ){
            Block head("head");
            if(body.title.notNull()){
                Block title("title");
                title &lt;&lt; body.title;
                head &lt;&lt; title;
                }
            if( body.isIndex )
                head &lt;&lt; "&lt;isIndex&gt;";
            htmlBlock &lt;&lt; head;
            }
        htmlBlock &lt;&lt; (Block&amp;)body;
        if(Html::responseHeader)
            out &lt;&lt; "Content-type: text/html\n\n";
        else
            out &lt;&lt; "Suppress:  Content-type: text/html\n\n";
        return out &lt;&lt; htmlBlock &lt;&lt; endl;
    }
//strClass.h
#if !defined(STRINGCLASS_DEFINED)
#define STRINGCLASS_DEFINED
#include &lt;strstrea.h&gt;
#include &lt;string.h&gt;
/************************ Pause *****************************
To force a pause() at exit, include:
    Pause::init(argc, argv);
at the beginning of main(), and include "-pause"
as a command line arguement.
*/
class Pause{
    static char *programName;
    static int noPause;
    friend ostream&amp; operator&lt;&lt;(ostream&amp; out, Pause&amp; pause);
    friend void pause();
public:
    static void init(int argc, char *argv[]);
  };
//************************ String *****************************
//    ostream&amp; operator &lt;&lt;(ostream&amp; out, Pause&amp; pause);
#define MESSAGE(s) message(#s,__LINE__,__FILE__,__DATE__)
#define ASSERT(s) if((s)==NULL){ \
    MESSAGE(s); \
    exit(1); \
    }
extern void message( char* code, unsigned long line, 
                     char* file, char* date);
#define CAST_INJECTORS(CLASS) \
    CLASS&amp; operator&lt;&lt; (char _c) { \
        (ostrstream&amp;)*this &lt;&lt; _c;    return *this; } \
    CLASS&amp; operator&lt;&lt; (signed char _c) { \
        (ostrstream&amp;)*this &lt;&lt; _c;    return *this; } \
    . . .
    //portions omitted to save space
    //complete macro available on code disk -- mb
    . . .
#include &lt;iomanip.h&gt;
#ifdef _MSC_VER // for Microsoft's parameterized io manipulators
#define CAST_IOMANIP(CLASS) \
    inline CLASS&amp; operator \
&lt;&lt;(CLASS&amp; _s, const SMANIP(int)&amp; _f) { \
    (ostream&amp;)_s &lt;&lt; _f ; return _s; \
    } \
    inline CLASS&amp; operator \
&lt;&lt;(CLASS&amp; _s, const SMANIP(long)&amp; _f) { \
    (ostream&amp;)_s &lt;&lt; _f ; return _s; \
    }
#else // for Borland's template class io manipulators
#define CAST_IOMANIP(CLASS) \
    inline CLASS&amp; operator \
&lt;&lt;(CLASS&amp; _s, smanip&lt;int&gt;&amp; _f) { \
    (ostream&amp;)_s &lt;&lt; _f ; \
    return _s; \
    } \
    inline CLASS&amp; operator \
&lt;&lt;(CLASS&amp; _s, smanip&lt;long&gt;&amp; _f) { \
    (ostream&amp;)_s &lt;&lt; _f ; \
    return _s; \
    }
#endif
class String : public ostrstream{
    String&amp; replace(const char * const str);
public:
    CAST_INJECTORS(String)
    String() : ostrstream(){}
    String(const char * const s){(ostrstream&amp;)*this &lt;&lt; s;}
    String(String&amp; str){
        if(str.notNull())
            (ostrstream&amp;)*this &lt;&lt; (const char * const)str;
    }
    String&amp; testType(){ return *this;}
    String&amp; setNull();
    int notNull(){ return rdbuf()-&gt;out_waiting();}
    int isNull(){ return !notNull();}
    String&amp; operator= (const char * const val) {
        return replace(val);
        }
    int operator!= ( String&amp; val) {
        return (strcmp((char*)*this,(char*)val) != 0);
        }
    int operator== ( String&amp; val) {
        return !strcmp((char*)*this,(char*)val);
        }
    operator char*  (void);
};
    inline ostream&amp; operator&lt;&lt;(ostream&amp; out, String&amp; s){
    return (out &lt;&lt; (char *)s);
    }
CAST_IOMANIP(String)
#endif
//strClass.cpp
#include "strClass.h"
#include &lt;stdlib.h&gt;
void pause(){
    cerr &lt;&lt; Pause::programName 
         &lt;&lt; ":  press [Enter] to continue...";
    cin.unsetf(ios::skipws);
    char x;
    cin &gt;&gt; &amp;x;
    cin.clear();
    cin.setf(ios::skipws);
}
//********************* Pause messages ************************
int Pause::noPause = -1;
char* Pause::programName ="";
void Pause::init(int argc, char *argv[]){
    programName = *argv++;
    if(noPause == -1){
        noPause = 1;
        while( --argc &amp;&amp; noPause )
            if( !strcmp( *argv++, "-pause") ){
                noPause =0;
                atexit(pause);
                }
        }
}
//******************** String messages *************************
String::operator char*  (void){
    streampos pos =tellp();
    (ostrstream&amp;)*this &lt;&lt; ends; //append null byte to the buffer
    char *s =str();             // get a pointer to the buffer
    rdbuf()-&gt;freeze(0);         // unfreeze the buffer
    seekp(pos);          //backup over the terminal null byte
    ASSERT((ios&amp;)*this); //test for inability to allocate buffer
    return s;
    }
String&amp; String::setNull(){
    seekp(0);                // rewind the buffer
    rdbuf()-&gt;freeze(0);    // unfreeze the buffer
    return *this;
    }
String&amp; String::replace(const char * const str){
    return setNull() &lt;&lt; str; // put the new string in the buffer
    }
//End of File
</pre>
</body></html>
