






<HTML>
     
     <HEAD>


          
          <TITLE>July 1996/Standard C/C++/Listing 4</TITLE>
     </HEAD>
     
     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          
          <h4>Listing 4: &lt;memory&gt;, part 5</h4>

<PRE>

        // TEMPLATE CLASS _Temp_iterator
template&lt;class T&gt;
    class _Temp_iterator
        : public iterator&lt;output_iterator_tag, void, void&gt; {
    typedef T _FARQ *Pty;
public:
    _Temp_iterator(_PDFT n = 0)
        {const pair&lt;Pty, _PDFT&gt; pnpair =
///            get_temporary_buffer&lt;T&gt;(n);
            get_temporary_buffer(n, (Pty)0);    ///
        Buf.Begin = pnpair.first;
        Buf.Cur = pnpair.first;
        Buf.Hiwater = pnpair.first;
        Buf.Len = pnpair.second;
        Pb = &amp;Buf; }
    _Temp_iterator(const _Temp_iterator&lt;T&gt;&amp; x)
        {Buf.Begin = 0;
        Buf.Cur = 0;
        Buf.Hiwater = 0;
        Buf.Len = 0;
        *this = x; }
    ~_Temp_iterator()
        {if (Buf.Begin != 0)
            {for (Pty first = Buf.Begin;
                first != Buf.Hiwater; ++first)
                _Destroy(&amp;*first);
            return_temporary_buffer(Buf.Begin); }}
    _Temp_iterator&lt;T&gt;&amp; operator=(const _Temp_iterator&lt;T&gt;&amp; x)
        {Pb = x.Pb;
        return (*this); }
    _Temp_iterator&lt;T&gt;&amp; operator=(const T&amp; val)
        {if (Pb-&gt;Cur &lt; Pb-&gt;Hiwater)
            *Pb-&gt;Cur++ = val;
        else
            {_Construct(&amp;*Pb-&gt;Cur, val);
            Pb-&gt;Hiwater = ++Pb-&gt;Cur; }
        return (*this); }
    _Temp_iterator&lt;T&gt;&amp; operator*()
        {return (*this); }
    _Temp_iterator&lt;T&gt;&amp; operator++()
        {return (*this); }
    _Temp_iterator&lt;T&gt;&amp; operator++(int)
        {return (*this); }
    _Temp_iterator&lt;T&gt;&amp; Init()
        {Pb-&gt;Cur = Pb-&gt;Begin;
        return (*this); }
    Pty First() const
        {return (Pb-&gt;Begin); }
    Pty Last() const
        {return (Pb-&gt;Cur); }
    _PDFT Maxlen() const
        {return (Pb-&gt;Len); }
private:
    struct Bufpar {
        Pty Begin;
        Pty Cur;
        Pty Hiwater;
        _PDFT Len;
        } Buf, *Pb;
    };
/* End of File */
</PRE>
     </BODY>
</HTML>
