






<HTML>
     
     <HEAD>
          <TITLE>July 1996/C/C++ Sources</TITLE>
     </HEAD>
     
     <BODY BGCOLOR="#FFFFFF">
          
          <H2><FONT COLOR="#FF0000"><A href="../tocjul.htm"><IMG src="../../toc.gif" ALT="Back to TOC" WIDTH="54" HEIGHT="54"></A>
          Columns</FONT></H2>
          
          <HR>
          
          <H2 ALIGN="CENTER"><FONT COLOR="#800000">C/C++Sources</FONT></H2>
          
          <H3 ALIGN="CENTER"><FONT COLOR="#800000">Victor R. Volkman</FONT></H3>
          
          <H3 ALIGN="CENTER"><FONT COLOR="#800000">X and Windows Code from the
          Web</FONT></H3>
          
          <BLOCKQUOTE>
               
               <p>This month Victors journey takes him
                    to a couple of X sites, and past volumes of code to do
                    everything from calculating differential equations to
                    playing .WAV files.</p></BLOCKQUOTE>
          <HR>
          <BLOCKQUOTE>
               
               <P><IMG HEIGHT="30" WIDTH="24" src="volkman1.gif"> =
                    Documentation    <IMG HEIGHT="32" WIDTH="31" src="volkman2.gif"> = Source
                    code    <IMG HEIGHT="32" WIDTH="32" src="volkman3.gif"> = Links</P>
               
               <H4><IMG HEIGHT="32" WIDTH="31" src="volkman4.gif"><FONT COLOR="#000080">Freedock: Application Dock for Windows</FONT></H4>
               
               <P>Freedock, by Sean Gordon &lt;sean.gordon@dundee.attgis.com&gt;
                    is a Windows "dock" program that includes the full
                    source code in C. A dock is kind of a miniature version of
                    Program Manager that holds icons for the small number of
                    applications that you really use every day. Freedock also
                    provides the nicety of remembering your preferred window
                    geometry for each application that you register with it as
                    well. This saves you from having to continually rearrange 
                    your windows each time you start up an application. A
                    previewer allows you to check or change the window
                    geometry without actually launching the applications. The
                    entire dock can be scaled in a way similar to the MS Office
                    Manager dock. <A href="volkf1.htm">Figure 1</a>
shows
                    Freedock being configured for launching Microsoft Money.</P>
               
               <P>Freedock includes compiled versions of a Win16 executable for
                    Windows 3.1 (FREEDK16.EXE) and a Win32 executable for
                    Windows 95 and NT (FREEDK32.EXE). The Freedock archive
                    includes source code written in C for use with Borland C/C++
                    or Microsoft Visual C/C++ v1.5 (16-bit) and v2.0 (32-bit).
                    In the Win32 version, you can choose to start applications
                    in separate memory.</P>
               
               <P>Gordon advises: "If it does not do everything you want
                    it to do, you can modify the source code and add
                    functionality to it." Freedock is freeware and any
                    programs derived from its source must remain freeware.
                    Available via ftp at ftp://ftp.coast.net/SimTel/win3/desktop/freedk25.zip 119,414 bytes. CUJ reader Eli Zaretskii &lt;eliz@is.elta.co.il&gt;
                    points out that a complete list of official mirror sites is
                    available at ftp://ftp.coast.net/SimTel/msdos/filedocs/dowload.inf(8K).</P>
               
               <H4><IMG HEIGHT="32" WIDTH="31" src="volkman5.gif"><FONT COLOR="000080">SWMP: Sound Wizards Module Player</FONT></H4>
               
               <P>The Sound Wizards Module Player (SWMP) by Beat Rigazzi &lt;rigazzi@iamexwi.unibe.ch&gt;
                    is a driver for playing .MOD sound files through any digital
                    audio card (e.g. SoundBlaster compatible). The .MOD audio
                    file format was first popularized by the Amiga computer,
                    long before the introduction of Windows 3.1 and its .WAV
                    file standard. The .MOD file is a multichannel sampled audio
                    file which supports four, six, or eight simultaneous
                    channels. The .MOD file has fewer limitations than the .WAV
                    file and for that reason has become widely used by
                    electronic music and game producers (especially in Europe).</P>
               
               <P>SWMP includes several example .MOD tracks for you to
                    experiment with as well as a stand-alone MS-DOS player
                    program (SWMP.EXE). For developers, SWMP provides an API and
                    calling interfaces for Borland C/C++, assembler, and Pascal.
                    You can integrate the library simply by including the header
                    file and linking in MOD_DRV.OBJ (source not provided).</P>
               
               <P>The driver has a small API but you can start your first .MOD
                    file playing with as few as three function calls. A powerful
                    hardware detection routine can autodetect the operating
                    parameters of a SoundBlaster, SoundBlaster Pro, or Gravis
                    UltraSound digital audio adapter. This lets users avoid
                    having to remember obscure DMA and I/O port settings.</P>
               
               <P>SWMP is freeware and can be incorporated into other freeware
                    programs. If you want to use SWMP in a commercial product,
                    you must contact the author first. Available via ftp at
                    ftp://garbo.uwasa.fi/pc/sound/swmp141.zip 666,923 bytes</P>
               
               <H4><IMG HEIGHT="32" WIDTH="31" src="volkman6.gif"><FONT COLOR="000080">ACE: Adaptive Communication Environment</FONT></H4>
               
               <P>Douglas C. Schmidt &lt;schmidt@cs.wustl.edu&gt; maintains the
                    Adaptive Communication Environment (ACE) home page
                    (http://www.cs.wustl.edu/~schmidt/ACE.html) which organizes all related documentation and
                    source code. ACE is an object-oriented platform-independent
                    network programming toolkit. ACE encapsulates many UNIX and
                    Windows NT API layers with type-secure and object-oriented
                    interfaces. The primary focus is on multitasking and
                    Inter-Process Communication (IPC) layers. It encapsulates
                    the following facilities:</P>
               <UL><LI> IPC mechanisms: UNIX sockets, TLI, Named pipes (UNIX
                         and NT), STREAM pipes </LI>
                    <LI> Event multiplexing: select() and poll() </LI>
                    <LI> Threads: Solaris, POSIX Pthreads, and Win32 threads</LI>
                    <LI> Explicit dynamic linking facilities: dlopen/dlsym/dlclose </LI>
                    <LI> Memory-mapped files: file access with the speed of RAM</LI>
                    <LI> System V IPC: shared memory, semaphores, message queues </LI>
                    <LI> Remote Procedure Calls: Sun RPC and GNU rpc++ </LI>
               </UL>
               
               <P>Additionally, ACE contains a higher-level network programming
                    framework that integrates and enhances the lower-level C++
                    wrappers. This framework supports the dynamic configuration
                    of concurrent network daemons composed of application
                    services. This is similar to the "inetd" mechanism
                    in UNIX.</P>
               
               <P>ACE is currently being used in a number of commercial
                    products, such as ATM signaling software, PBX monitoring,
                    network management for mobile communications systems, and an
                    enterprise-wide distributed medical imaging system for
                    medical engineering.</P>
               
               <H4><IMG HEIGHT="32" WIDTH="31" src="volkman7.gif"><FONT COLOR="000080">Diffpack: Object-Oriented Framework for PDEs</FONT></H4>
               
               <P>The "Diffpack home page"
                    (http://www.oslo.sintef.no/avd/33/3340/diffpack/) organizes all related documentation and
                    source code for the SINTEF Diffpack project at the
                    University of Oslo (Norway). The goal of Diffpack is to
                    develop a fully object-oriented framework in C++ for
                    solution of partial differential equations (PDEs). PDEs
                    often arise in the mathematical modeling of physical
                    processes involving, for example, fluid mechanics or waves. 
                    The best demonstration of Diffpacks power can be seen by
                    looking at some of the successful application areas in which
                    its used:</P>
               <UL><LI> Standard model PDEs </LI>
                    <LI> 1-D/2-D/3-D linear wave equations </LI>
                    <LI> Convection-diffusion problems </LI>
                    <LI> Boussinesq equations </LI>
                    <LI> Two-phase porous media flow </LI>
                    <LI> Nonlinear 3-D wave equations </LI>
                    <LI> Incompressible Navier-Stokes </LI>
                    <LI> 2-D/3-D linear elasticity </LI>
                    <LI> Stochastic ODEs </LI>
                    <LI> Stochastic groundwater flow </LI>
                    <LI> Solidification of alloys </LI>
               </UL>
               
               <P>Of course, the raw data from Diffpack is much more useful if
                    you have something to visualize it with. Diffpack can
                    interface with gnuPlot and
                    plotmtv. You can even construct MPEG movies from multiple
                    visualization frames. <A href="volkf2.htm">Figure 2</A> shows a Diffpack
                    visualization of a finite element based simulator for
                    two-phase (oil/water) porous media flow.</P>
               
               <P>Diffpack has been certified to run on any of the following
                    environments: Hewlett Packard HP-UX 9.05 and C++ 3.50,
                    Silicon Graphics IRIX 5.2 and C++ 3.2.1, Sun Sparc Solaris
                    2.3/SunOS 5.3 and C++ 4.0</P>
               
               <H4><IMG HEIGHT="32" WIDTH="31" src="volkman8.gif"><FONT COLOR="000080">Fresco: A Fresh Look at User-Interfaces</FONT></H4>
               
               <P>The Fresco Home Page (http://www.faslab.com/fresco/HomePage.html) is maintained by Denis Bohm &lt;denis_bohm@interramp.com&gt;
                    and provides detailed documentation and source code on the
                    Fresco user-interface system. Fresco is an object-oriented
                    application programming interface (API) for graphical user
                    interfaces, covering functionality in Xlib and Xt, and
                    adding structured graphics and application embedding. The
                    Fresco specification and sample implementation are under
                    development by the X Consortium as an open, multi-vendor
                    standard. Fresco offers a broad range of functionality,
                    including low-level display and window management,
                    structured graphics hierarchies, and UI widgets such as
                    buttons and editors. An application may choose to use part
                    of Fresco within another environment, such as using Fresco
                    structured graphics capabilities from within Xt, or an
                    application may choose to use Fresco solely. Fresco uses the
                    CORBA standard object model, which allows for object
                    distribution and provides a high-level Interface Definition
                    Language (IDL).</P>
               
               <P>Fresco has been certified to run on the following platforms:</P>
               <UL><LI> SUN Sparc: Solaris 2.4, Sun C 3.0.1, X11 </LI>
                    <LI> MIPS: IRIX 5.2, C 3.2.1, X11 </LI>
                    <LI> Pentium: Windows NT 3.5, VC 2.0, X11 </LI>
                    <LI> Pentium: Windows NT 3.5 &amp; Windows 95, VC 2.1, Win32 </LI>
                    <LI> PowerPC: Macintosh </LI>
               </UL>
               
               <P>Other users have reported success using Fresco in Linux,
                    SunOS, Hewlett-Packard HP-UX, and OSF/1 environments. You
                    can get to Fresco via ftp://ftp.gmd.de/gmd/ginaplus/.</P>
               
               <H4><FONT COLOR="000080">Focus on Software Tools</FONT></H4>
               
               <P>A "software tool" is a program that simplifies the
                    writing of a target program. The most popular type of
                    software tools are code generators. A code generator
                    produces an extensive infrastructure based on a relatively
                    small input. For example, the classic UNIX YACC tool
                    generates a LALR(2) bottom-up parser based on the grammar
                    that you describe. Nowadays, the most common example of a
                    software tool is the "visual" programming
                    environment, which provides a wizard to generate code. My
                    web search on "software tools" turned up 20,000
                    hits, most of which turned out to have a very liberal view
                    of what constitutes a software tool. I will list only a few
                    here.</P>
               
               <H4><IMG HEIGHT="32" WIDTH="32" src="volkman9.gif"><FONT COLOR="000080">X-Windows Software Tools Page</FONT></H4>
               
               <P>The COnceptual Learning Of Science (COLOS) consortium
                    maintains an X-Windows software tools page
                    (http://hpwww.ec-lyon.fr/colosHp/software/all_program). The page contains links to many useful
                    X11 development tools including:</P>
               <UL><LI> makeAppDef: converts standard X11 App-defaults files to C </LI>
                    <LI> ui2C: parses a user interface description file and generates C code </LI>
                    <LI> xDev: generates C code for simulations in X-Windows</LI>
                    <LI> other X-Windows code in C </LI>
               </UL>
               
               <H4><IMG HEIGHT="32" WIDTH="32" src="volkma10.gif"><FONT COLOR="000080">Software Tools Page</FONT></H4>
               
               <P>The Software Tools Page (http://www-cmpo.mit.edu/~djboccip/Links_soft.html) provides links to software
                    packages and Internet resources that deal with a variety of
                    software tools. This list goes beyond software tools for C
                    programming to includes links to areas of software tools for
                    mathematics, visualization, and HTML/WWW development. In
                    this case, software tools has been extended to mean more
                    than the earlier definition.</p>
               
               <P><I>Victor R. Volkman received a BS in Computer Science from
                    Michigan Technological University. He has been a frequent
                    contributor to the C/C++ Users Journal since 1987. He is the
                    author of the book Windows Programming with Shareware Tools.
                    He can be reached at the HAL 9000 BBS (313)663-4173, URL
                    http://www.HAL9K.com/, or email to sysop@hal9k.com.</I></P></BLOCKQUOTE>
     </BODY>
</HTML>
