






<HTML>
     
     <HEAD>


          
          <TITLE>July 1996/C++ Theory and Practice/Listing 1</TITLE>
     </HEAD>
     
     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          
          <H4><A name="HEADING1">Listing 1: Definitions for the scanner and
               token classes that can look ahead at most one token</A></H4>

<PRE>

//
// scanner.h
//
// Copyright (C) 1996 by Dan Saks.
// May be copied for private, non-commercial
// use, provided this copyright notice
// remains intact.
// All other rights reserved.
//

#ifndef SCANNER_H_INCLUDED
#define SCANNER_H_INCLUDED

#include &lt;iostream.h&gt;
#include &lt;limits.h&gt;
#include &lt;string&gt;

class token
    {
    friend class scanner;
public:
    enum category
        {
        AMPERSAND = '&amp;',
        COMMA = ',',
        ...
        };
    token();
    string text() const;
    category kind() const;
private:
    token(category, const string &amp;);
    category the_kind;
    string the_text;
    };

const char *image(token::category);

class scanner
    {
public:
    scanner(istream &amp;);
    token get();
    token unget();
    token current() const;
    void reset();
private:
    token scan();
    token previous_token;
    token current_token;
    token next_token;
    istream &amp;in_stream;
    struct pair
        {
        char const *text;
        token::category kind;
        };
    static pair const keyword[];
    scanner(const scanner &amp;);
    scanner &amp;operator=(const scanner &amp;);
    };

//
// inline function definitions ...
//

#endif
/* End of File */
</PRE>
     </BODY>
</HTML>
