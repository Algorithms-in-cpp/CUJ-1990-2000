






<HTML>
     
     <HEAD>


          
          <TITLE>July 1996/C++ Theory and Practice/Listing 3</TITLE>
     </HEAD>
     
     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          
          <H4><A name="HEADING1">Listing 3: The header that defines scanner
               and token classes that can look ahead an unlimited number of
               tokens</A></H4>

<PRE>

//
// scanner.h
//
// Copyright (C) 1996 by Dan Saks.
// May be copied for private, non-commercial
// use, provided this copyright notice 
// remains intact.
// All other rights reserved.
//

#ifndef SCANNER_H_INCLUDED
#define SCANNER_H_INCLUDED

#include &lt;assert.h&gt;
#include &lt;deque.h&gt;
#include &lt;iostream.h&gt;
#include &lt;limits.h&gt;
#include &lt;string&gt;

class token
    {
    friend class scanner;
public:
    enum category
        {
        AMPERSAND = '&amp;',
        COMMA = ',',
        LEFT_BRACKET = '[',
        LEFT_PAREN = '(',
        RIGHT_BRACKET = ']',
        RIGHT_PAREN = ')',
        SEMICOLON = ';',
        STAR = '*',
        NO_MORE = CHAR_MAX + 1,
        SCOPE,
        INT_LITERAL,
        IDENTIFIER,
        NAME,
        TYPE_KEYWORD,
        CONST,
        VOLATILE,
        NO_SUCH,
        NO_VALUE
        };
    token();
    string text() const;
    category kind() const;
private:
    token(category, const string &amp;);
    category the_kind;
    string the_text;
    };

const char *image(token::category);

class scanner
    {
public:
    scanner(istream &amp;);
    token backup();
    token current() const;
    token get();
    void mark();
    void reset();
private:
    token scan();
    token current_token;
    istream &amp;in_stream;
    deque&lt;token&gt; in_queue;
    deque&lt;token&gt;::iterator in_queue_iterator;
    bool getting_from_queue;
    bool looking_ahead;
    struct pair
        {
        char const *text;
        token::category kind;
        };
    static pair const keyword[];
    scanner(const scanner &amp;);
    scanner &amp;operator=(const scanner &amp;);
    };

//
// token inline functions
//
inline
token::token()
    :   the_kind(NO_VALUE)
    {
    }

inline
token::token(category c, const string &amp;s)
    :   the_kind(c), the_text(s)
    {
    }

inline
string token::text() const
    {
    return the_text;
    }

inline
token::category token::kind() const
    {
    return the_kind;
    }

//
// scanner inline functions
//
inline
scanner::scanner(istream &amp;s)
    :   in_stream(s),
        looking_ahead(false),
        getting_from_queue(false)
    {
    }

inline
token scanner::current() const
    {
    return current_token;
    }

#endif
/* End of File */
</PRE>
     </BODY>
</HTML>
