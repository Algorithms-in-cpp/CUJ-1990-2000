<HTML><HEAD>
<TITLE>July 1994/Structure Mapping Techniques in C++/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2 <I>Classes that descend from</I> Field</A></h4>
<pre>/*=============================================*/
/* Integer and String Field Implementations    */
/*=============================================*/

#define DEREF( field, type, data ) \
   (*(type *)&amp;((char *)data)[ field<I>-</I>&gt;getOffset() ])

class IntField : public Field {
   int &amp;deRef( void *data ) {
      return DEREF( this, int, data );

   }
public:
   IntField( char *name, int offset )
      :Field( name, offset ) {}

   const char *getTypeName () { return "int"; }

   char *toString( char *string, void *data ) {
      sprintf( string, "%d", deRef( data ) );
      return string;
   }
   
   void fromString( void *data, char *string ) {
      deRef( data ) = atoi( string );
   }

   void assign( void *dest, void *srce ) {
      deRef( dest ) = deRef( srce );
   }

   int compare( void *lhs, void *rhs ) {
      return deRef( lhs ) <I>-</I> deRef( rhs );
   }
};

class CharField : public Field {
   char* &amp;deRef( void *data ) {
      return DEREF( this, char*, data );

   }
public:
   CharField( char *name, int offset )
      :Field( name, offset ) {}

   const char *getTypeName () { return "char*"; }
   
   char *toString( char *string, void *data ) {
      return strcpy( string, deRef( data ) );
   }

   void fromString( void *data, char *string) {
      strcpy( deRef( data ), string );
}

   void assign( void *dest, void *srce ) {
      strcpy( deRef( dest ), deRef( srce ) );
   }
   
   int compare( void *lhs, void *rhs ) {
      return strcmp( deRef( lhs ), deRef( rhs ) );
   }
};
/* End of File */</pre>
</BODY>
</HTML>
