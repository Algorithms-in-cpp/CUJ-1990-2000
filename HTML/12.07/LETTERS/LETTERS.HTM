

<HTML>
<HEAD>

<TITLE>July 1994/We Have Mail</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjul.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Departments</FONT></H2>

<hr><h2 align="center"><font color="#800000">We Have Mail<A name="014F_00AE"><A name="014F_00AE"></font></h2><hr>
<BLOCKQUOTE>
<A name="014F_0000"><A name="014F_0000">Missing Listing<P>
<I>In his article, "Intuitive Access to Bit Arrays," </I>CUJ<I>, February 1994, Siegfried Heintze provided a code listing,</I> BitArr.h<I>, which contained the line:</I><P>
<pre>#include "Boolean.h"</pre>
<I>However, the listing for </I>Boolean.h<I> was not provided in the article or on the monthly code disk. The contents of </I>Boolean.h<I> are shown as follows:</I><P>
<pre>#ifndef_BOOLEAN_H
#define_BOOLEAN_H
typedef int Boolean;
const Boolean TRUE = 1;
const Boolean FALSE = 0;
#endif</pre>
<I>This file is also available on this month's code disk.</I><P>
Dear Mr Plauger,<P>
I have been buying <I>CUJ</I> for a couple of years now and some issues have been useful to me. Others would have been extremely useful had the code been portable.<P>
An issue in the latter category is that for September 1993. I was delighted to see that it covered Windows programming. However, after spending a weekend working through it, I have finished up with only one thing I can use, the code for accessing Windows Help. Even then, I had some trouble with it as I am a novice on the subject of Windows. For some strange reason, I found I could not get the program to create a window with:<P>
<pre>wc.lpszClassName = "HELPDEMO";</pre>
I finished up declaring the program name as follows:<P>
<pre>char ProgName[] = "Help demo program";</pre>
and then<P>
<pre>wc.lpszClassName = ProgName;</pre>
worked just fine.<P>
The other point about this program is that I could only get Mercury to come up underlined in green on the table of contents. Is this how it should be?<P>
Getting back to the subject of portability, I use Turbo C/C++ at home and Borland C/C++ at work. I have no access to Microsoft C/C++ and so got nowhere with the article by David Singleton on <I>cout</I> and <I>cerr</I> for Windows, mainly because it appears to depend very heavily on Microsoft<I>-</I>specific header files and techniques.<P>
I almost succeeded with porting the code in Philip Joslin's article entitled "Using the Windows DIB Color Table." However, I could only guess at values for the various PAL constants and failed miserably in attempting to assign the palette value to the <I>bmiColors</I> structure near the end of the last listing. I tried the following statements:<P>
<pre>if (options &amp; PAL_IMAGEINVERT)
   dispRec<I>-</I>&gt;bmi<I>-</I>&gt;bmiColors[i] = (RGBQUAD)e;
else
   dispRec<I>-</I>&gt;bmi<I>-</I>&gt;bmiColors[255<I>-</I>i] = (RGBQUAD)e;</pre>
But the cast would not work. My thoughts were that, in programs like this, the author could perhaps cater for both the Microsoft and the Borland products by using some preprocessor statements, e.g.:<P>
<pre>#ifdef TURBO
    ...
#else
    ...
#endif</pre>
This would certainly help to maximise the use readers make of the published code.<P>
In my efforts to learn Windows programming, I have discovered the interesting fact that Borland seems to treat any file starting with cO as a library file, which causes all kinds of strange errors in a regular program starting this way. I would have thought that, if this is indeed their policy, they could at least have drawn it to the attention of developers. Messrs. Chris H. Pappas and William H. Murray have a book out on Windows Programming, supposedly portable between Microsoft C/C++ and Borland C/C++, which completely overlooks this point so that all the code for chapters 1 to 9 starts with the prefix cO.<P>
Maurice Arnold<br>
11 Fulham Close<br>
Hampton Park 3976<br>
Melbourne<br>
Victoria<br>
Australia<P>
Keith Bugg replies:<P>
<I>1.     The code was set up for Turbo C++ for Windows. If you is using a different compiler, you are most likely experiencing compatibility problems. Check this first.</I><P>
<I>2.     In the sample program, the planets Mercury, Venus, Earth, and Mars should ALL be hypertexted (i.e., underlined &amp; in green), not just Mercury. The most likely cause here is: 2.1 Missing token of {\uldb}. Each entry in the </I>.RTF<I> file for these planets should read: {\uldb Venus}, etc. 2.2 Failure to</I> #define GO_VENUS, GO_EARTH,<I> etc. Check the error file. It is very easy to get the braces in the wrong place &#151; depending on where they are, the compiler may or may not give a helpful message...</I><P>
<I>Lastly, I would be glad to look at your code. If you can email me the source code, I'll try to help you straighten it out. The Windows Help compiler is very mute, and unforgiving, about errors in the </I>.RTF<I> file. You are welcome to contact me on CompuServe at 70312,3612, or by writing to me at 122 E. Morningside Drive, Oak Ridge, TN 37830. &#151; Keith</I><P>
<I>P.S. I'm pretty sure 1 or 2, or both, is the problem. Other readers have contacted me &amp; the only problem they had was finding Listing 7!! When "done right," the program does work as advertised.</I><P>
David Singleton replies:<P>
<I>Yes, you are quite right, the code I published is non</I><I>-</I><I>portable in that it does depend on Microsoft's Foundation Classes (MFC). If you do not have MFC, the cour/cerr programs will not work "as is." I deliberately designed the program to use the MFC to get and to demonstrate the productivity leverage that comes from using a set of library classes.</I><P>
<I>You may wish to note that MFC is also distributed with the Symantec C++ system. Had I been a Borland user as you are, I would have used what I could from the Borland OWL class library. By your definition, the code would have been equally non</I><I>-</I><I>portable, but you would have been able to use it.</I><P>
<I>I think that I will stop here as I feel that I am in danger of starting a "religious argument" about the meaning and definition of portability. Nevertheless, I would be delighted to give you any help that I reasonably can. You may contact me via CompuServe at 100265.3612 or by writing to me at 30 The Albany, Sunset Avenue, Woodford Green, Essex IG8 0TJ, ENGLAND.</I><P>
<I>Best wishes,</I><P>
<I>David Singleton.</I><P>
Philip Joslin replies:<P>
<I>It would appear from Mr. Arnold's letter that he is trying to cast apples into oranges. The intent of the code given in my article was to specifically use palette entries. The "bmiColors" array in the BITMAPINFO structure referenced by his display record corresponds to palette indices and not to real 24</I><I>-</I><I>bit color values (which the RGBQUADs do). The code presented in the article is geared solely towards palette indices. For example, when the </I>SetDIBitsToDevice<I> is called, the last parameter is</I> DIB_PAL_COLORS <I>and not </I>DIB_RGB_COLORS<I>. This indicates to GDI that the "color values" found within the color table (bmiColors) of the DIB are palette indices and not RGBQUADs. This is born out in the SDK development reference manuals in their description of the </I><I>BITMAPINFO</I><I> structure:</I><P>
<I>"...for functions that use DIBs, the bmiColors member can be an array of 16</I><I>-</I><I>bit unsigned integers that specify an index into the currently realized logical palette instead of the explicit RGB values. In this case, an application using the bitmap must call DIB functions with the wUsage parameter set to </I>DIB_PAL_COLORS.<I>" (Programmer's Reference, Vol. 3, MS</I><I>-</I><I>Windows SDK)</I><P>
<I>If the compiler were to allow RGBQUADs (which are in actuality DWORD values) to be cast to the color table integer entries, their values, whatever they may be, would be assumed by GDI to be indices. I would think that some pretty odd happenings might result.</I><P>
<I>Best wishes,</I><P>
<I>Philip Joslin</I><P>
Salutations:<P>
<I>CUJ</I> published an article on Japanese character encoding several years ago that left me hungry. I now have the opportunity to research the character sets directly, and I thought I would share my results.<P>
In the following, my romanizations use the non<I>-</I>standard expedient of repeating vowels. Thus, "oo" and "ou" are both two syllables of the long "o" sound. Also, I apologize in advance to purists whom I will offend with my casual misuse of grammatical terms.<P>
There is a JIS standard 8<I>-</I>bit character set including the 7<I>-</I>bit ASCII set and the katakana characters. (JIS X 0201<I>-</I>1975 and JIS X 0209<I>-</I>1276.) It varies from the ASCII in position 0x5C [backslash], where it has the international yen symbol, x. There are four other substitutions that may not be strictly observed in the pasokon (PC) universe: 0x27 [apostrophe], 0x60 [grave], 0x7c [vertical bar], and 0x7f [delete]; similar characters, no curves or gaps. The missing characters are available in the 16<I>-</I>bit JIS standard character sets.<P>
The x character seems to be used instead of backslash, both in C compilers and in Japanese MS<I>-</I>DOS. I have not had a chance to find out whether DOS or C compilers would accept the 16<I>-</I>bit backslash.<P>
The katakana 8<I>-</I>bit extension includes the following punctuation:<P>
0xal is kuten, the Japanese period;<P>
0xa2 and 0xa3 are the left and right, quoting half brackets;<P>
0xa4 is tooten, the Japanese comma;<P>
0xa5 is the special word separator;<P>
0xb0 is chouon, the sound lengthener;<P>
0xde is dakuten, the voiced consonant indicator;<P>
0xdf is handakuten, the plosive consonant indicator.<P>
The particle "wo" is 0xa6. The subscript modifiers run from 0xa7 to 0xaf:<P>
<pre>a, 0xa7;     i, 0xa8;   u, 0xa9;   e, 0xaa;
o, 0xab;    ya, 0xac;  yu, 0xad;  yo, 0xae;
tsu, 0xaf;</pre>
The regular syllables, except for "wo," run from 0xbl to 0xdd<P>
<pre>a, 0xb1;   i, 0xb2;   7, 0xb3;   e, 0xb4;
o, 0xb5;   ka, 0xb6;  ki, 0xb7;  ku, 0xb8;
ke, 0xb9;  kp, 0xba;  sa, 0xbb;  si, 0xbc;
su, 0xbd;  se, 0xbe;  so, 0xbf;  ta, 0xc0;
ti, 0xc1;  tu, 0xc2;  te, 0xc3;  to, 0xc4;
na, 0xc5;  ni, 0xc6;  nu, 0xc7;  ne, 0xc8;
no, 0xc9;  ha, 0xca;  hi, 0xcb;  hu, 0xcc;
he, 0xcd;  hp, 0xce;  ma, 0xcf;  mi, 0xd0;
mu, 0xd1;  me, 0xd2;  mo, 0xd3;  ya, 0xd4;
yu, 0xd5;  yo, 0xd6;  ra, 0xd7;  ri, 0xd8;
ru, 0xd9;  re, 0xda;  ro, 0xdb;  wa, 0xdc;
w0, 0xa6;  'n, 0xdd.
(si for shi; ti for chi; tu for tsu; hu for fu; 'n for
the nasal.)</pre>
Most of the PC<I>-</I>class machines seem to use an eight<I>-</I>bit character set as their boot<I>-</I>time or internal font, and several variations exist in the undefined areas. The PC<I>-</I>9800 series (NEC's market<I>-</I>leading 80x86 line) has graphics characters, a backslash, and the kanji for time and for yen in the gaps.<P>
Sharp's X68000 series (doing surprisingly well) fills the gaps with hiragana, the cursive style of syllabic character. Backslash, tile, and the normal vertical bar are at 0x80, 0x81, and 0x82. The hiragana follow from 0x86 to 0x9f, replicating the katakana pattern's first two rows including chouon; and then from 0xe0 to 0xfd, replicating the katakana's last two rows except for dakuten and handakuten.<P>
My primary references for the foregoing were:<P>
Pasokon Yougojiten ISBN 4<I>-</I>87408<I>-</I>550<I>-</I>4, a PC jargon dictionary.<P>
Waapuro Pasokon Kanji Jiten ISBN 4<I>-</I>7916<I>-</I>0358<I>-</I>3, a JIS Kanji code map/reference dictionary for word processing.<P>
X68000 Tekunikaru Deetabuuku ISBN 4<I>-</I>87148<I>-</I>426<I>-</I>2. X68000 technical reference.<P>
Shinban PC<I>-</I>9800 Shiriizu Tekunikaru Deetabukku ISBN 4<I>-</I>7561<I>-</I>0434<I>-</I>7, PC9800 series technical reference.<P>
PS: I had intended to make a full article out of this information, including a katakana character bit map and a rudimentary text editor with a romaji<I>-</I>to<I>-</I>katakana input filter. Unfortunately, my computer is state<I>-</I>side and I am here before I had a chance to put the article together. I think the foregoing is the essence of that article. When I can afford to buy a Powerbook, or even when I can get my wife's Wapuro to recognize its floppy drive, I might take a stab at explaining the 16<I>-</I>bit codes.<P>
Joel Matthew Rees<br>
c/o Takeshi Kusuda<br>
1<I>-</I>21<I>-</I>25 Kaminoshima<I>-</I>cho<br>
Amagasaki<I>-</I>shi, Hyogo<I>-</I>ken<br>
661 Japan<P>
<I>I have long been grateful that I am a native English speaker, so I've never suffered the problems of learning English as a second language. Your letter reminds me why I'm glad I never had to learn all the forms of Japanese writing as well. (It also underscores the importance of supporting this rich lexicography in modern programming languages.) &#151; pjp</I><P>
Dear Mr. Plauger,<P>
Your recent column regarding the clarification of some issues of the C standard has sparked me to ask some questions that have nagged me for a few years. I apologize for being lazy, as I do not have a copy of the standard available, and even if I did, I usually find it a bit daunting. (The mind boggles at the joining of the jargon<I>-</I>ridden computer industry and infinite<I>-</I>length<I>-</I>sentence legal<I>-</I>ese!)<P>
Both questions relate to the use of the <I>void *</I><I> </I>datatype. Examples are easiest for me, as I am not confident with the language terminology.<P>
1.     The function<I> </I><I>qsort</I> accepts a comparison routine as an argument, which for this example, I will assume is <I>strcmp</I><I>.</I> The prototypes I have seen are often something like:<P>
<pre>   void qsort( void   *base,
             size_t element_count,
             size_t element_size,
             int    (*compare)(const void *,
                    const void *) );
   int strcmp(const char *s1, const char *s2);</pre>
Note: I am not sure what the standard is for these two functions, but, in any case, this example will suffice for my question. Lets now assume that somewhere <I>strcmp</I> is passed to <I>qsort.</I> When I enable the <I>-vindictive</I><I> </I>option on my compiler (i.e. maximum checking against the standard) I receive errors to the effect that the datatype of the last argument to<I> </I><I>qsort</I> does not match the prototype. I accept that this is true, but I have often wondered why the special rules regarding <I>void</I> *do not apply in this case. Does the Standard define the action in this case? Or is my compiler simply taking the lazy option in an obscure part of the syntax?<P>
2.     For reasons too boring to go into here, my current project uses a wrapper over the <I>malloc</I><I> </I>group of routines. The allocator function of this group has a prototype that looks like this:<P>
<pre>   typedef int   STATUS;
      /* just for your info */
   
   extern STATUS MEM_Allocate(size_t amount,
                          void **pointer);</pre>
The idea is that the allocation will return a pointer to any arbitrary object, with the return<I>-</I>value indicating what happened. An example calling sequence would then be:<P>
<pre>   char   *s;
   STATUS   sts;
   
   sts = MEM_Allocate(100, &amp;s);</pre>
When I do this I get errors about incorrect datatype for the last argument of <I>MEM_Allocate. </I>As with the last question, this is true. But, again, why don't the special rules for <I>void </I>* come into play?<P>
My interest here is purely academic &#151; I have overcome both problems by creating the appropriate temporaries or type<I>-</I>casting. But I also suspect that there are good reasons for the errors, and hence I may just be creating problems for the future by "turning<I>-</I>off'" the errors.<P>
The only reasonable answer I can come up with is that these errors relate to the fact that I may be asking the language to do conversions between <I>void *</I> and a <I>SOMETYPE</I> * across compilation units. But I am not sure, as I would have thought the compiler would generate the correct conversion logic using generated temporaries. I further assume that I am getting away with my type<I>-</I>casting, etc. because on all the machines I use, all pointers are the same size regardless of the object that they point to.<P>
What am I missing here? Thanks for any assistance.<P>
David Brown<br>
<I>dcb@atb.ch</I><P>
<I>Both issues you raise have been discussed within X3J11 and WG14. Both are intentional limitations to the extent to which C will automatically convert between a pointer to char and a pointer to void. You've done the right thing by adding type casts to reassure the translator that you know what you're doing. The code happens to be portable because of the requirement that a pointer to character type have the same representation as a pointer to void. &#151; pjp</I><P>
P.J. Plauger:<P>
When <I>CUJ</I> published David Burki's article, "Date Conversions" (Feb. 1993, pages 29<I>-</I>34), I confess that I was mildly surprised that the Journal would bother with such material. Surely, I thought, everyone has already written his own date manipulation routines by now? As each succeeding issue appeared, and more letters about date manipulations appeared with them, I began to understand that I was at least half wrong. It seems that everyone <I>is</I> writing his own routines. That <I>is</I> the problem.<P>
When Joao de Magalhaes's letter appeared in the January 1994 issue and succinctly described this situation as a problem, I decided that the time finally had come to speak up.<P>
Over the years, I have researched and written a group of date/time routines which cover all of the basics <I></I>&#151; day of week, interconversions among Julian Day Number (JD#), Julian calendar and Gregorian calendar, days between dates, days until/since a date, date N days after/before a date, etc. These routines go farther afield to cover Gregorian Easter, Julian Easter, epact, lunar phase, and so on. There are some esoterica, such as a set of functions for manipulating Mayan calendar dates, and basic astrology/astronomy functions. Still another group covers the DOS date/time area <I></I>&#151; packing and unpacking DOS file date/times, getting and setting system date and time, and so, on. Too many! And still not enough.<P>
These routines are already documented, because I run my own shop and insist upon that. They work as an integrated set, at least for our purposes. And they are correct, as far as our testing has been able to determine. Programmers who have spent time to investigate this area are aware that a fair number of the published routines are limited in scope, easy to misapply, or are just plain wrong.<P>
So much for foreground activity. In the background, I have been toying for about a year and a half with the notion of cobbling this material together and publishing it as a book. There are on the order of a hundred functions, and they fill most of a three<I>-</I>ring binder. The general gist of the book would be a "Standard C date/time library," and the general flavor would be along the lines of Louis Baker's <I>C Tools</I> <I></I>&#151; introduction, discussion, source code, test bed, example code, commentary and bibliography (where relevant) for each function. That's not terribly different from your <I>Standard C Library</I> format, for that matter.<P>
So, this is do<I>-</I>able. And there is apparently a need. A lot of obvious questions remain, however:<P>
1.     Is this material, in general, marketable in book form?<P>
2.     What application areas should be covered?<P>
3.     How can I go about getting some corrective feedback before going to print? We have standardized on type <I>double</I> for JD#, for example, and fold dates and times together as single JD#s. We like this scheme, but aren't married to it. If the rest of the world hates it, I'm willing to consider cogent arguments for change. My concern is not to rush to print, but to produce a book that is generally useful and integrated. Above all, I would appreciate your thoughts on this subject, particularly in the areas of setting useful standards, portability, and setting up a procedure for reviewing the code outside the confines of our own shop.<P>
If you think that this idea warrants further work, I can supply relevant header files and some explanatory write<I>-</I>up on the next pass. Several of the older functions are still passing structures by value (I wonder what idiot coded that...?), and are part of a maintenance cycle that is going on right now. Real work permitting, that should be complete soon.<P>
Sincerely,<P>
Lance Latham<P>
<I>I would not expect a huge market for a book as specialized as you describe, but I certainly see reasonable interest out there. As you observe, time and date calculations are a never</I><I>-</I><I>ending source of complexity. If you can provide solutions that are reasonably solid and packaged in a useful form, as you believe you've done, there will be plenty of people eager to read what you write.</I><P>
<I>Your next step should be to produce an outline (or table of contents), a preface, and a sample chapter or two. Then you can shop for a publisher. A good one will provide you with editorial guidance in whipping your book into shape and making your code most presentable. Good luck. &#151; pjp</I><P>
Dear Mr. Plauger:<P>
Recently, I was working on a C++ program and I needed to write data to and from a file, but keep the input and output classes separate. I remembered reading something about this before, so I checked all my magazines and found the reference on page 109 of the July 1993 <I>C Users Journal.</I><P>
According to the article, "To open a file for both input and output in a future conforming implementation, you will have to replace..." the <I>fstream</I> declaration with the following:<P>
<pre>int mode = ios::bin | ios::trunc | ios::out | ios::in;
ofstream f("recs.dat", mode);
ifstream g(f.rdbuf(), ios::bin);</pre>
I tried the idea in the program I was working on, but was unable to get it to compile. The following is one of the code samples I used for testing.<P>
<pre>#include &lt;stdio.h)
#include &lt;fstream.h&gt;

main()
{
   char temp[255];
   int mode = ios::binary | ios::out | ios::in;
   ofstream f("test.fil", mode);
   ifstream g(f.rdbuf(), ios::binary);
   
   f &lt;&lt; "test\n" &lt;&lt; flush;
   g.seekg(OL);
   g &gt;&gt; temp;
   cout &lt;&lt; temp;
   return 0;
}</pre>
After some trial and error, I came up with an alternative that seems to work fine on both my Watcom C/C++ compiler and the Borland compiler I tested it on. The line containing <I>ifstream</I> in the sample program needed to be replaced by the following in order to execute properly:<P>
<pre>ifstream g(f.rdbuf()<I>-</I>&gt;fd());</pre>
Also in order to read what has been previously written to the file, you need to be sure to flush the output buffer to disk after you write to the file.<P>
I thought this information might be as useful to your readers as it was to me.<P>
Thanks for a great magazine. Looking forward to future thought<I>-</I>provoking issues.<P>
Sincerely,<P>
Laura Michaels<br>
Intercomp<br>
P.O. Box 6514<br>
Delray Beach, FL 33484<P>
<I>I'm not surprised. This is an area of iostreams where you can expect considerable change as the</I> <I>C</I>++ <I>Standard comes into wider use. Thanks for telling others how to do the job with today's technology. &#151; pjp</I><P>
We Have Mail<P>
The letter of Mr. Joao C. de Magalhaes published in the January 1994 issue contains a number of errors and/or misinterpretations of matters related to calendars and astronomical time. Time is a complicated subject, so, as an astronomer, I am never surprised when people have trouble with it.<P>
First, the work he cites, Seidelmann, P. K. (ed.), <I>Explanatory Supplement to the Astronomical Almanac</I>, University Science Books, Mill Valley 1992 (ISBN 0<I>-</I>935702<I>-</I>68<I>-</I>7), is the current authority on these matters. This book is a model of clear, precise definition and discussion of calendars both civil and ecclesiastic, time, time scales, and astronomical coordinate systems and frames. I can recommend it highly to anybody with an interest in these subjects at any level from casual curiosity up. Further, it contains a wealth of validated, codeable algorithms and procedures for time<I>-</I>related calculations and conversions.<P>
Mr. de Magalhaes' discussions of Julian date (JD), modified Julian date (MJD), and the epoch J2000 are not quite right. To begin with a bit of background, the system of Julian dates was established by astronomers to permit the unambiguous definition of the date and time of an astronomical observation, measured as days and decimal fraction after JD 0.0, which is Greenwich noon, 1 January 4713 BC, Julian proleptic calendar. This date was chosen to be well before any known recorded astronomical observations so that all Julian dates would be positive. For precise work, the time scale (such as Universal Time (UT) or dynamical time) should be specified. The Julian date starts at noon because the European and North American astronomers who established this system didn't want to have to worry about changing the Julian day number, the integral part of a Julian date, during the course of a night's observations.<P>
There is no discrepancy between the years in the definition given above (and in Seidelman) for JD 0.0 and that given by Mr. de Magalhaes, because there is no year zero in the BC/AD system. The year 1 BC is followed by the year 1 AD. However, the definition of modified Julian Date (MJD) should have been given as:<P>
<pre>MJD = (Julian date) <I>-</I>2400000.5</pre>
Modified Julian dates begin at midnight, not noon. Again, for precise work the time scale should be specified. The use of MJD is not restricted to the Coordinated Universal Time (UTC) scale, though that is probably the scale in which it is most often reckoned.<P>
J2000 is the designation of an instant in time; in astronomical parlance, an "epoch." This time is:<P>
<pre>J2000 = 1.5 January 2000 = JD 2451525.0 TDB</pre>
or noon of 1 January 2000 on the Barycentric Dynamical Time (TDB) scale.<P>
To describe the use of J2000 requires a bit more background. Many astronomical coordinate systems, including inertial systems, are described in terms of the orientation of the Earth's axis of rotation.<P>
Because the direction in space pointed to by the Earth's north pole is not fixed &#151; there are both short period and long period components (up to about 25,000 years for precession) in its very complicated motion in the sky &#151; it is customary to specify a standard epoch for such coordinate systems so that their orientation is described precisely. These standard epochs are changed about every 50 years for practical reasons related to how astronomers specify the coordinates of astronomical objects in catalogues and use or determine these coordinates for or from observations. The previous standard epoch is designated B1950. J2000 (defined above) is the current standard epoch. The epoch of B1950 was not conventionally used as the origin of a time scale, and it is not expected that J2000 will be so used, either. Julian dates, or modified Julian dates, will continue to be used indefinitely.<P>
Concerning the date<I>-</I>of<I>-</I>Easter algorithm from Carmony, L.A. and Holliday, R. L., <I>A First Course in Computer Science with Turbo Pascal</I>, Freeman &amp; Co., New York 1991 (ISBN 0<I>-</I>7167<I>-</I>8216<I>-</I>2), I believe I can explain why the domain is restricted to 1900<I>-</I>2099. Although I have not analyzed the algorithm in detail, it is probably restricted because it assumes that leap years occur every four years, as was the case in the Julian calendar. In the presently<I>-</I>used Gregorian calendar, a leap year occurs only when the value of<P>
<pre>leap = (year %4 == 0 &amp;&amp; year % 100 != 0 || year % 400 == 0)</pre>
is one (true). Thus, the years 1900 and 2100 are not leap years, but 2000 is. 1900 can be included in the domain because Easter occurs after the trouble point, the end of February.<P>
A discussion of the ecclesiastical determination of the date of (western) Easter can be found in Seidelmann, Section 12.22 (pp. 581<I>-</I>583). An algorithm for calculating the date of (western) Easter, valid for any Gregorian year, is given on p. 582. A discussion of the history of the Gregorian calendar, and why and how it replaced the Julian calendar, can be found in Seidelmann, Section 12.23 (pp. 583<I>-</I>584).<P>
Sincerely yours,<P>
John G. Kirk<br>
Santa Barbara Activity<br>
5266 Hollister Avenue, Ste. 117<br>
Santa Barbara, CA 93111<I>-</I>2066<P>
<I>Wow. It's always nice to find a calendar junkie who's even more obsessive than I am. Thanks. &#151; pjp</I><P>
Dear Mr. Plauger,<P>
Constance Veeney from The Netherlands wrote to me on the subject of the Easter Day function, adapted from Carmony and Holliday, which I included in my letter published in <I>CUJ</I> January 1994 issue. She points out that there's a remarkable similarity between that function and an Easter Day algorithm by Gauss, and most kindly provided me with the COBOL source code.<P>
As a matter of fact, it appears that the Pascal code in Carmony and Holliday is a subset of Gauss' algorithm for the domain 1900<I>-</I>2099, while Gauss' algorithm domain is 1583<I>-</I>2199. Unfortunately the C version would be a bit too long to present in a short letter.<P>
Sincerely,<P>
Joao C. de Magalhaes<br>
R. Almeida Garrett 16 5E<br>
P<I>-</I>2795 CARNAXIDE<br>
PORTUGAL<P>
Dear Mr. Plauger,<P>
I write to report a bug in the function <I>free</I> in your book <I>The Standard C Library</I>. The symptoms are that the <I>return</I> commented as "erroneous call" is frequently taken and memory is lost.<P>
<A href="list1.htm">Listing 1</a>
shows the function, with the line I suspect faulty highlighted. The code is trying to find a value of <I>qp</I> which is less than <I>q</I> (the address of the area being freed) but for which <I>qp-_Next</I> is after <I>q</I>. That is, the block <I>q</I> should be chained immediately after <I>qp</I>.<P>
I suggest the test <I>&lt;</I> should be reversed to <I>&gt;</I>.<P>
For reference/indication of what some people still use: I run the QC C compiler which accepts most of K&amp;R, and was written by Jim Colvin for the Z80. The Z80 in question is my own design of 14 year's vintage. I am currently moving the compiler to a (radically different) NS32016<I>-</I>based home<I>-</I>brew and, wanting to use compliant library functions, am slowly typing in the contents of your volume, debugging hardware, compiler, and libraries as I go.<P>
Yours sincerely,<P>
PL Woods<br>
14, Cromwell Road<br>
Muswell Hill, London<br>
England N10 2PD<P>
<I>You're quite right, it's a bug. My brother, Dave Plauger, reported it last year. (His company, Mercury Computers, licenses the Standard C library.) I admire your persistence in working in such a minimalist environment. &#151; pjp</I><P>
Editor,<P>
I got the code for the data compression article by Philip Gage and tested it on a Sun Sparc running SunOs v4.1.1. I compiled the code as was in your archive using gcc <I>-</I>O, and timed using time(1). For the text file I used a Post<I>-</I>Script file, and for the binary file I used a Post<I>-</I>Script viewer executable (gv(1)).<P>
I tested against compress(1), an LZW compressor, and gzip, an LZ77 compressor. Times are sys+user obtained from time(1). Times can vary 10% or so using time(1), and I made no effort to average them, although I did run some tests more than once for sanity checking. Note these times are not real time, which is strongly affected by system load. <A href="list2.htm">Listing 2</a>
shows the results.<P>
I don't know if these numbers mean gcc has a lousy code generator, or that Gage's code has constructs that run slowly on Sun. The numbers do strongly suggest testing on the target architecture before drawing conclusions.<P>
Regardless, it's an interesting idea.<P>
David X Callaway<br>
<I>dxc@dwroll.att.com</I><P>
P.J.,<P>
Just a quick note to tell you that I really think that <I>CUJ</I> has gome through a metamorphosis recently. Frankly, I had made up my mind a while back not to renew my subscription since I found the magazine increasingly less useful. My wife renewed it for me anyway and I must say that I am pleased that she did. The last several issues have been quite useful and interesting. I know that it is difficult to keep finding fresh topics to cover in fresh ways but you seem to have done it.<P>
thanks,<P>
Dave Rogers<br>
<I>dave@rsd.dl.nec.com</I><br>
CIS: 76672,2455<br>
M &amp; R Software, Inc.<P>
<I>Thanks to both you and your wife. &#151; pjp</I><P>
P.J. Plauger<P>
In the Jan. '94 issue of <I>CUJ</I>, Manual Lopez of Dallas, TX asks whether anyone knows a source for a PC edition of the VI text editor called PC/VI or VIPC.<P>
Well, no, actually I don't know where to get this, but I can tell you that there's an excellent version of VI called ELVIS which is both maintained by real live people and freely available in C source form. I've used many VI emulators, and only ELVIS really "feels like" the Berkeley Unix VI we all know and love (or hate, as the case may be).<P>
ELVIS runs not only on MS<I>-</I>DOS but also on Unix System V, Unix 4.3BSD, SunOS, SCO XENIX<I>-</I>286 and <I>-</I>386, Coherent 3.x and 4.0, Minix<I>-</I>ST and <I>-</I>PC, AmigaDOS 2.04, and Atari TOS. So if you want a VI clone which runs on all your platforms, ELVIS is probably the best choice.<P>
ELVIS version 1.7 may be retrieved from uunet:/systems/gnu/elvis<I>-</I>1.7.tar.gz (it's 198,371 bytes in gzip format), and rumor has it that version 1.8 will be released soon. The primary author of ELVIS is Steve Kirkendall, <I>kirkenda@cs.pdx.edu</I><I>.</I> Steve is a friendly and helpful guy who takes pride in his work.<P>
Bob Weissman<br>
171 Easy Street<br>
Mountain View, CA, 94043<br>
<I>bobw@procase.com</I><P>
<I>Thanks for the information. &#151; pjp</I><P>
Bill,<P>
A letter for your esteemed organ, etc. etc.:<P>
Reading the January 1994 edition of <I>The C Users Journal</I> made me realize how quietly my company has marketed QA C++ &#151; seeing the Gimpels follow suit with a C++ lint product is most gratifying (we went live with such a product in 1992).<P>
Of course, the Gimpel product, based on PC<I>-</I>lint for C cannot really do justice to the problematic edifice that is C++, although I'm sure they will catch up over the next few years. The C++ do's and don'ts have many sources &#151; Plum/Saks, Meyers, Cargill, and Henricson/Nyquist (their excellent public domain <I>Programming in C</I>++: <I>Rules and Guidelines</I>) &#151; which all C++ tools would do well to incorporate.<P>
I commend Gimpel Software for following Programming Research's lead in this area.<P>
Regards,<P>
Sean Corfield<br>
<I>sean.Corfield@prl0.co.uk</I><P>
<I>Nice of you to mention your own product in passing, Sean. Cheers. &#151; pjp</I><P>
P.J. Plauger:<P>
I'm not sure I agree with reader Russell Hansberry that ANSI C standards for embedded systems are necessary. I've been doing embedded C programming for years (sometimes developing rommable applications). When doing embedded programming, it is necessary to understand how the underlying implementation works. Stdio functions often aren't useful except <I>sprintf</I> to format a string if necessary). A prudent approach may be to assume you have nothing. Every function call is a function call you provide. You can provide whatever parts of the library you actually need, and make it reentrant (or understand why it isn't reentrant, and implement appropriate protections around it). ANSI C does two things:<P>
1)     provides a set of functions you can assume are there<P>
2)     provides a specification for the language<P>
For embedded work, the second is useful, the first is of dubious value.<P>
marty<br>
<I>leisner@sdsp.mc.xerox.com</I><br>
<I>leisner@eso.mc.xerox.com</I><P>
P.J. Plauger<P>
I do appreciate the nature of English, American English, and technical English to bend, adapt, and conjure up new words on demand, but I have to object to your complexification in the <I>CUJ</I> Editor's Forum from February. Really, rather than "complexify," what is wrong with standard English such as "complicate?" I cannot for the life of me see any nuance in your context which might differentiate the two.<P>
Other than that, keep up the good work.<P>
Ciao from NZ,<P>
Arnim<P>
<I>My standard for English is the venerable Oxford English Dictionary. While it brands "complexify" as "rare," it does give a citation dating back to 1830. I believe the dominant language in New Zealand then was Maori. &#151; pjp</I><P>

<h4><a href="../../../source/1994/jul94/letters.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
