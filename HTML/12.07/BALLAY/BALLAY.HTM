

<HTML>
<HEAD>

<TITLE>July 1994/A Tool for Checking C Coding Conventions</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjul.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Software Tools</FONT></H2>

<hr><h2 align="center"><font color="#800000">A Tool for Checking C Coding Conventions<A name="013B_009D"><A name="013B_009D"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="013B_0000"><A name="013B_0000">Helene Ballay and Rainer Storn</font></h3><hr><blockquote><P>
<P><i><A name="013B_0000"><A name="013B_0000">Helene Ballay is studying computer science and electrical engineering at the Ecole Nationale Superieure des Telecommunications de Bretagne in France and has a programming background in Pascal, Ada, and C. She may be reached at ENST Bretagne ZA, BP832, F-29285 Brest Cedex, e-mail: ballay@enst.enst-bretagne.fr.</i></P><P>
<P><i>Rainer Storn has studied electrical engineering and holds a PhD from the University of Stuttgart, Germany. He is currently leading a group at Siemens AG, Germany which is working on the analysis, design, and implementation of communication systems. His company address is Siemens AG, ZFE ST SN 26, D-81739 Muenchen, Otto-Hahn-Ring 6. He can be reached via rainer.storn@2fe.siemens.de or storn@icsi.berkeley.edu.</i></P><P>
<h4><FONT COLOR="#000080"><A name="013B_009E">Introduction<A name="013B_009E"></FONT></h4></P>
It is vital for the success of a software project that all programmers adhere to a certain programming discipline &#151; to foster efficient communication between people, prevent errors, and hence save valuable project time. As one means of achieving this for a C software project, virtually every company sets up its own coding conventions. These conventions are supposed to somehow tame C's loose typing, its latitude with pointers, and its high degree of orthogonality. The last item means that each language structure can be combined with nearly every other language structure to produce a meaningful and valid statement.<P>
The coding conventions from different companies and book authors are mostly the same. And a lot of those conventions lend themselves to automatic checking, a welcome relief for software reviewers who can henceforth concentrate on other important issues during code review. That is why we decided to write a tool for checking C coding conventions and make it publicly available. [Available on this month's code disk &#151; mb]<P>
The C coding conventions that you will find in this paper do not form a complete set, but show only the subset which is easily checkable by a tool. A C convention will be indicated in the text by the notation "C&lt;number&gt;)" to separate it from the explanatory text. For example, C1) will indicate the first C convention, C2) the second one, and so on. For most of the conventions, we add a short explanation of why we think they are reasonable.<P>
<h4><FONT COLOR="#000080"><A name="013B_009F">Including "stdtyp.h"<A name="013B_009F"></FONT></h4></P>
<A href="list1.htm">Listing 1</a>
shows the file <I>"stdtyp.h"</I><I>.</I> You should include this in every C source file. It provides replacements for a group of forbidden keywords, which the tool reports on. The following conventions are checked:<P>
C1) The logical operators <I>&amp;&amp;</I> and // shall be replaced by <I>AND</I> and <I>OR</I> to avoid confusion with bitwise operators <I>&amp;</I> and /.<P>
C2) Comparison for equality == shall be replaced by <I>EQ</I> to avoid confusion with the assignment operator =, comparison for non equality <I>!</I><I>=</I> shall be replaced by <I>NEQ</I> for homogeneity.<P>
Consider the following example to understand the reason behind conventions C1) and C2):<P>
<pre>while (c = ' ' || c == '\t' | c == '\n')
{
   c = getc(f);
}</pre>
Two peculiarities can be found in this example which the programmer probably didn't intend but the compiler will not complain about because of C's orthogonality. These peculiarities wouldn't have shown up if you had stuck to the conventions and written<P>
<pre>while ((c EQ ' ') OR (c EQ '\t') OR (c EQ '\n'))
{
   c = getc(f);
}</pre>
As an aside note that parentheses have been used lavishly in this example in order to provide a more readable layout of the code. The parenthesizing, however, will not be enforced by the tool.<P>
C3) The keywords <I>extern</I> and <I>static</I> shall be replaced by <I>IMPORT</I> and <I>LOCAL</I> to obtain homogeneity. There is also a keyword <I>EXPORT</I> (see <I>"stdtyp.h"</I> for usage).<P>
C4) The type names <I>long, short, char,</I><I> </I>and<I> int</I> shall be replaced by the types defined in <I>"stdtyp.h"</I><I> </I>(<I>LONG, ULONG, SHORT, USHORT, CHAR, UCHAR</I><I>,</I> and<I> </I><I>BIT-FIELD</I>)<I> </I>to facilitate portability between different processors and compilers<I>.</I><P>
C5)<I> </I>The name <I>l</I> (letter "1") for a variable shall be avoided because it is too easily confused with <I>1</I> (number one).<P>
C6) The <I>goto</I> statement shall be replaced by other statements, such as <I>break, return</I><I>,</I> and <I>continue.</I><P>
C7)<I> </I>C's shorthand notation (+=, -=, *=, /=) shall be replaced by an explicit notation because it is easier to read<I>.</I><P>
As a C expert you might not agree that, for example<P>
<pre>sum = sum + a*b;</pre>
is easier to read than<P>
<pre>sum += a*b;</pre>
In large projects, however, it is often the case that not all programmers are C experts. Pascal and FORTRAN veterans who have to adopt C generally find the implicit notation awkard to read, and have the feeling that it hampers their understanding of a program. Hence, for the sake of a team-oriented program development, this convention should be acceptable also to C experts.<P>
C8) The notation =- may be misunderstood by a C compiler's "greedy" parsing algorithm, so use = <I>-(.....)</I> instead.<P>
The classic example by Ward, which shows what a missing space character can do and which justifies the above convention, is the code fragment<P>
<pre>k=-(joe(14)+12*BYTES);</pre>
which can be misinterpreted by a compiler's greedy parser, if it maintains compatibility with very old C conventions, as<P>
<pre>k = k - (joe(14)+12*BYTES);</pre>
although the programmer intended to write<P>
<pre>k = -(joe(14)+12*BYTES);</pre>
C9) Pointer to pointer shall be replaced by the index notation.<P>
This convention is again a concession to non C experts who find it much easier to read and write code which says, for example<P>
<pre>j = twodim[2][7];</pre>
instead of<P>
<pre>j = *(*(twodim+2)+7);</pre>
Even C experts start to adopt the array notation as more compilers treat the array notation as efficiently as the pointer notation.<P>
C10) Names starting with an underscore or names that contain a double underscore are reserved and shouldn't be used.<P>
C11) Tabs shall be replaced by spaces, as different editors often exhibit different tab settings. Using tabs can result in an odd-looking source code layout when switching from one editor to another. The layout of the source code, however, is very important for ease of readability.<P>
<h4><FONT COLOR="#000080"><A name="013B_00A0">Right Places<A name="013B_00A0"></FONT></h4></P>
Another group of coding conventions deals with the proper placement of C statements.<P>
C12) <I>typedef, EXPORT, IMPORT, LOCAL, auto, register</I><I>,</I> and <I>volatile</I> shall be placed at the beginning of the declaration.<P>
C13) Braces, <I>{</I> and <I>}</I>, shall be placed on a separate line. An exception to this are <I>enum</I> declarations and <I>do-while</I> loops. This convention is meant to foster the Allman style bracing layout or one of its variations. This style seems to offer the clearest visual source code structuring. It also helps during program development when you adopt the habit of first opening and closing a brace before you enter the first statement inside a conditional clause or a loop. It is good style to begin, for example, with<P>
<pre>if (count &gt; 0)
{
.....
}
else
{
.....
}</pre>
before you enter the statements belonging to the <I>if</I> or <I>else</I> branch. This remains true even if there is only a single statement in each branch. Quite often additional statements have to be added later, and also quite often programmers forget to add the necessary braces. Hence it is good practice to type the braces first.<P>
C14) The; should be at the end of a line, i.e., there shall be no more than one statement in a single line. Of course, <I>for</I>-loops constitute an exception to this convention, which is meant to increase the readability of the source code.<P>
<h4><FONT COLOR="#000080"><A name="013B_00A1">Naming Conventions<A name="013B_00A1"></FONT></h4></P>
Naming conventions are very important in a software project. They increase the readability of the source code, and good readability prevents a lot of errors. Naming conventions facilitate communication among programmers. You understand each other's code more quickly. Unfortunately, most naming conventions are project or application specific. Nevertheless, you might find the conventions C15) and C16) useful.<P>
C15) Names of structures should all begin with <I>S</I>_, names of enumerations with <I>E</I><I>_</I>, names of unions with <I>U</I>_, names of constants with <I>C</I>_ (an exception are hexadecimal constants, which should start with <I>M</I>_ because those are assumed to serve as bit masks), and names of typedefs with <I>T</I>_.<P>
C16) A pointer name shall have the suffix _<I>ptr</I>. The tool checks pointers to the types defined in <I>"stdtyp.h"</I>, pointers to functions, and pointers to <I>struct, typedef, union</I>, and <I>enum</I> (but only if their names follow the C convention C15)). It does not check names of pointers to a type defined in the define section of the C module.<P>
<h4><FONT COLOR="#000080"><A name="013B_00A2">Switch selection<A name="013B_00A2"></FONT></h4></P>
C17) There shall be no program code between the <I>switch</I> statement and the first case label.<P>
C18) There shall be a <I>break</I> in every <I>case</I> selection of a <I>switch</I> statement. If it is necessary to deviate from this rule, extensive comments are mandatory (the tool always prints a warning if a <I>break</I> is missing).<P>
C19) Every <I>switch</I> selection should exhibit a <I>default</I> label to encourage the programmer to deal also with the error case.<P>
<h4><FONT COLOR="#000080"><A name="013B_00A3">Miscellaneous<A name="013B_00A3"></FONT></h4></P>
C20) Implicit tests for zero shall not be used, neither in normal code nor in preprocessor commands. The keywords that the tool is searching for are <I>if,</I><I> </I><I>while</I>, and <I>elsif</I>.<P>
The reason behind C20) is that it is more difficult to understand a statement like<P>
<pre>while (func(p,q) &amp;&amp; *in_ptr)
{
.....
}</pre>
than a statement which looks like this:<P>
<pre>while ((func(p,q) NEQ 0) AND (*in_ptr NEQ 0))
{
.....
}</pre>
As a side effect of this convention you will find that the tool sometimes detects typos if you have written an incomplete control flow statement which, by means of the typo, has changed into an implicit zero test statement.<P>
C21) Assignments in control flow statements shall be avoided.<P>
This convention is one of those that many C programmers have objections to because it deprives you of a part of C's power. However, assignments in control flow statements often produce precedence errors and can render the source code awkward to read. Consider, for example, the code fragment which was basically taken from Koenig:<P>
<pre>while (c = getc(in) NEQ EOF)
   put(c,out);</pre>
Can you spot the error? The assignment operator has lower precedence than the comparison operator, so this fragment will not do what was intended.<P>
C22) Pointer value zero shall be implemented via the pointer constant <I>NULL</I>.<P>
C23) When using functions returning status information (such as <I>malloc, calloc, realloc, fopen</I><I>()</I>, etc.) the return values shall be checked for validity before the result is used. This test shall be done with an <I>if</I> instruction.<P>
For example:<P>
<pre>fin_ptr = fopen("INPUT.DAT","r");
if (fin_ptr EQ NULL)
{
   printf("\nCannot open INPUT.DAT");
   exit(1);
}</pre>
The tool exhibits a weakness here. No warning is issued <I>if</I> the if statement found just after the call of the function does not concern the returned value.<P>
C24) The address of a variable and the variable itself should not be used in the same statement, because the variable could be altered in an unpredictable manner, as there is usually no prescribed order of evaluation.<P>
For example:<P>
<pre>a = b + func(&amp;b);
/* order of evaluating b is not    */
 * prescribed, so this statement   */
 * might fail to serve its purpose. */
help = b;         /* That's better. */
a    = b + func(&amp;help);</pre>
C25) An enumeration type shall not be defined within a structure. It should be defined outside to make the code easier to read.<P>
C26) The <I>?</I><I> :</I> operator should be avoided, and constructs like <I>if</I><I>.....</I><I>else</I> shall be used instead to enhance readability of the source code.<P>
<h4><FONT COLOR="#000080"><A name="013B_00A4">The Tool cck<A name="013B_00A4"></FONT></h4></P>
A tool called cck is provided with this month's code disk, and from the online sources listed on page 5. (It's much too large to reprint here.) cck is not protected by copyright and is in the public domain. The volume includes full source code, called cck.c, which is of course written according to the C conventions above. To use cck you must have stdtyp.h available as an include file. stdtyp.h is also provided along with cck. To use the tool, type:<P>
<pre>cck &lt;input-file&gt; &lt;output-file&gt;</pre>
The input file is your C program and the output file is the file where cck will print its results. Do not use the suffix .c for your output file. To avoid overwriting important files, an output file with the suffix .c stops cck. If the output file already exists, cck asks you if you really want to overwrite it.<P>
The first part of cck.c is based on cc.c (CUG 152.13) written by I. Jennings and David N. Smith. It counts opened braces, brackets, comments, and double quotes. It writes each line of the program being checked, preceded by the line number, the number of opened braces, brackets, comments, and double quotes into the output file. This helps locate where punctuation is missing or where extraneous punctuation has been added (see <A href="list4.htm">Listing 4</a>)
. If there are unbalanced braces, brackets, double quotes, or comments, an appropriate message is printed in the output file, the output file is closed, and cck ends.<P>
If there are not enough comments in a function, a message will be printed to the output file showing the actual number of comment lines along with the desirable number. The ratio of comment lines to non-comment lines of code should be at least 20%. This ratio is determined between the opening and closing braces of every function in the source code. The value of 20% is rather low because it is assumed that an explanatory function header will be provided between the function name and the opening brace.<P>
If everything is correct, the output file will be overwritten and no listing will be printed.<P>
The second part of the program does some parsing and prints warnings (see <A href="list3.htm">Listing 3</a>)
. The parsing is based on grep.c (CUG 152.08) written by David N. Smith. cck checks the C coding conventions listed above and writes a warning for each violation into the output file.<P>
<h4><FONT COLOR="#000080"><A name="013B_00A5">Example and Conclusion<A name="013B_00A5"></FONT></h4></P>
An example shows best what cck is doing. <A href="list2.htm">Listing 2</a>
contains a small C program which doesn't look overly strange. The checker cck, however, complains about many things, as you can see in <A href="list3.htm">Listing 3</a>.
 <A href="list4.htm">Listing 4</a>
eventually shows a program version which satisfies cck. Of course cck is no substitute for error-detecting programs like lint, but it isn't meant to be. cck helps to encourage all programmers in a development team adhere to a given programming discipline and style. If this can be achieved, you have made an important step towards success in your software project.<P>
<h4>References</FONT></h4></P>
[1]     Storn, R., "Coding Conventions for C SW-Projects," Siemens AG, zfe st ack 21, Mar. 1993, company internal paper.<P>
[2]     Ward, R., <I>Debugging C,</I> Que Corporation, 1986.<P>
[3]     Koenig, A., <I>C Traps and Pitfalls, </I>Addison-Wesley, 1989.<P>
[4]     Straker, D., <I>C-Style Standards and Guidelines</I>, Prentice-Hall, 1992.<P>
[5]     Plum, T., <I>C Programming Guidelines, 2nd Edition,</I> Plum Hall.<P>
<h4>Sidebar: <a href="sidebar1.htm">"A Matter of Style"</a></h4>

<h4><a href="../../../source/1994/jul94/storn.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
