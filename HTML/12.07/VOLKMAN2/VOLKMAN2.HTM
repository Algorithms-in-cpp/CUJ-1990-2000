

<HTML>
<HEAD>

<TITLE>July 1994/CUG PRODUCT FOCUS</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjul.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">CUG PRODUCT FOCUS<A name="0149_00AB"><A name="0149_00AB"></font></h2><P>
<h3 align="center"><A name="0149_0000"><A name="0149_0000">WTWG</h3><P>
<h3 align="center"><font color="#800000">Victor R. Volkman</font></h3><hr><blockquote><P>
<P><i><A name="0149_0000"><A name="0149_0000">Victor R. Volkman received a BS in Computer Science from Michigan Technological University. He has been a frequent contributor to C/C++ Users Journal since 1987. He is currently employed as Senior Analyst at H.C.I.A. of Ann Arbor, Michigan. He can be reached by dial<I>-</I>in at the HAL 9000 BBS (313) 663<I>-</I>4173 or by Usenet mail to sysop@hal9k.com.</i></P><P>
<h4><FONT COLOR="#000080"><A name="0149_00AC">Introduction<A name="0149_00AC"></FONT></h4></P>
This abstract is derived directly from original documentation by David Blum. The Windows Text/Windows Graphics Windows (or WTWG) windows system, by David Blum, is a user<I>-</I>interface system for MS<I>-</I>DOS that allows you to write C programs with modern interface features including the mouse, windows, and menus. WTWG handles PC hardware details, such as video modes, display pages and enhanced keyboards, freeing up programmers to concentrate on higher<I>-</I>level tasks. WTWG includes memory management (expanded memory and disk<I>-</I>swapping virtual memory) and error handling.<P>
The routines in these libraries provide screen, keyboard, and mouse management in either text or graphics modes for Turbo C/C++, Borland C++, Zortech C++, and Microsoft C v5. Data collection by C++ forms is new to WTWG 2.0 and constitutes a major improvement. WTWG accepts input from files, command<I>-</I>line arguments, or user input on<I>-</I>screen, and can both display data and write it to a file. WTWG can perform automatic validation of data. Using C++ virtual functions, the library can be extended to provide validated input of any custom data type. WTWG works identically at the source code level in standard DOS, 386<I>-</I>protected mode DOS, text mode, or graphics mode.<P>
<h4><FONT COLOR="#000080"><A name="0149_00AD">System Requirements and Capabilities<A name="0149_00AD"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0149_00AE">Memory<A name="0149_00AE"></FONT></h4></P>
Most windows packages for the IBM PC operate in text mode only. Saving a text<I>-</I>mode screen takes about 4KB of ram, so memory isn't a big deal in text mode. In graphics mode, especially on color monitors (depending on resolution, etc.) saving a screen can take over 100KB. It's not practical to use so much conventional RAM for most serious graphics programs. Some other method of storage must be found. Most large graphics<I>-</I>oriented programs can use expanded memory, but not all PCs have expanded memory. The solution is to use a simulated heap composed of "virtual" memory.<P>
The libraries include a memory management routine that allocates this simulated heap memory from expanded memory, the DOS far heap, or a disk file, as required by the particular system configuration in use. The actual location of the data is transparent to the calling routines. Memory use is ultimately limited only by available disk space.<P>
Unfortunately, to achieve this virtual memory capability the manager must allocate a 64KB buffer for disk I/O. Using this buffer will not allow debugging of programs in the Turbo C integrated environment unless you have expanded memory in your system. To allow for debugging, a separate version of the memory management routine, <I>heapdbg.c</I><I>,</I> is provided. This module doesn't do disk allocation or expanded memory management so allocatable memory is limited, but with it you can run the integrated debugger, TD, or CodeView.<P>
For programs compiled under the <I>large</I> memory model, the routines <I>wmalloc</I> and <I>wrealloc</I> guarantee the return of a <I>normalized</I> pointer. If you use these routines exclusively, and never call <I>malloc</I><I>, </I><I>calloc</I><I>, </I><I>realloc</I>, or similar, you will avoid segmentation errors (very difficult to debug, intermittent errors in large programs). In addition, the file <I>WSYS.H</I> (intended only for compiling the WTWG source code) contains a <I>NORMALIZE</I> macro that adjusts the segment/offset values of far pointers to help you explicitly avoid these problems. If you use C++ you must redefine the <I>NORMALIZE</I> macro to include a typecast. All WTWG routines are written in C. Future releases will be in C++ but will use a separate <I>NORMALIZE</I> macro.<P>
<h4><FONT COLOR="#000080"><A name="0149_00AF">Video Modes and Monitors<A name="0149_00AF"></FONT></h4></P>
Whether in text or graphics modes, WTWG automatically detects the monitor. WTWG stores the monitor type in the variable <I>wmonitor</I>. Values used are:<P>
<pre>TEXTONLY version: 'M' = MGA 'C'= CGA
graphics/text version:
   'V' <I>-</I> VGA: text modes (25 line and 50 line),
         and all 16 color graphics (640*350, 640*480, 800*600)
   'E' <I>-</I> EGA: text (25 and 43 line), graphics ( 640*350 )
   'H' <I>-</I> Hercules text or graphics modes
   'S' <I>-</I> SuperVGA (256 color modes) monitor.
         
         (also, TIGA, IBM8514 etc if your graphics
         drivers support them.</pre>
The variable <I>wmode</I> tells you if you're in text mode or graphics mode. The only possible values are <I>T</I> or <I>G</I>.<P>
<h4><FONT COLOR="#000080"><A name="0149_00B0">Display Features<A name="0149_00B0"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0149_00B1">Opening and Closing Windows<A name="0149_00B1"></FONT></h4></P>
Some windows systems (especially Microsoft Windows) ask windows to "redraw" themselves. Requiring a window to redraw itself makes for complex programs. Other window systems keep in<I>-</I>memory images of the window and redraw the windows for you. WTWG does neither. Programming effort and execution overhead (both speed and RAM) are less with WTWG than with other systems. The disadvantage of WTWG is you can't write true multitasking programs using this package.<P>
After initialization, WTWG automatically opens a full<I>-</I>screen window. Full screen operation using <I>wputs</I><I>, </I><I>wprintf</I>, and <I>wputc</I> can proceed identically to ANSI stream output. Alternatively, you can open and close smaller windows.<P>
The global variable <I>w0</I> always points to the currently open window. Through <I>w0</I> you can access members of the <I>WINDOW</I> structure. For instance,<P>
<I>w0-&gt; winx</I> gives the current x position (starts at 0).<P>
<I>w0-&gt; winxmax</I> gives the highest valid x position.<P>
<I>w0-&gt; winattr</I> gives the current attribute.<P>
Windows are kept on a LIFO stack. Calling <I>wopen</I> creates a window, <I>wclose</I> closes the most recently created window. The most recently created window is the active window.<P>
You can change the order of the stack by calling <I>wreopen</I> to place an older window on top of the stack, or <I>wbury</I> to place the current window on the bottom of the stack. This obviously requires some caution. You can <I>wreopen</I> the full screen window at any time by calling <I>wreopen</I><I> </I>(<I>wfullscreen</I>), but you must be sure to <I>wbury</I> it when done.<P>
<h4><FONT COLOR="#000080"><A name="0149_00B2">Self-adjusting Windows<A name="0149_00B2"></FONT></h4></P>
You can use functions <I>wsetlocation</I> and <I>wlocate</I> to automatically position the next window opened. You call <I>wsetlocation</I> to set your options, and then call <I>wlocate</I> to calculate window a position that matches those options. Options include the following: center window on screen, place window relative to current window, relative to current cursor position, or at absolute positions. You can also specify x,y offsets relative to the option. This feature lets you open a window one line below current position (useful for error messages and pulldown menu functions).<P>
WTWG's high<I>-</I>level routines call <I>wlocate</I> so you can control their window locations by calling <I>wsetlocation</I> first.<P>
<h4><FONT COLOR="#000080"><A name="0149_00B3">WTWG Coordinate System<A name="0149_00B3"></FONT></h4></P>
WTWG uses a consistent coordinate system. In all function prototypes, <I>x</I> is horizontal, <I>y</I> is vertical, and the order is always x,y. Coordinate numbering starts with 0 (not 1) and ends with <I>winxmax/winymax</I> (or <I>wxabsmax/wyabsmax</I>). (Variables with <I>max</I> in the name specify the largest valid value for that coordinate, i.e., <I>wxabsmax</I> is the largest valid x<I>-</I>value, which is typically 79 for an 80<I>-</I>column screen. (Do not assume that <I>wxabsmax</I> is always 79, on Hercules monitors in graphics modes it is 89 (720 pixels = 90 characters across). If you add Super VGA support (800*600 is easy), then <I>wpxabsmax</I> =799 and <I>wxabsmax</I> =99. <I>winxmax</I> refers only to the current window and is referenced as a member of the <I>WINDOW</I> structure (i.e., <I>w0-&gt;winxmax</I>). Variables with names containing <I>px</I> or <I>py</I> refer to pixels rather than text<I>-</I>mode character counts; i.e., <I>w0-&gt;wpxmax</I> is the largest valid horizontal pixel number in the current window and <I>wpxabsmax</I> is the largest valid horizontal pixel on the screen.<P>
For all routines that refer to absolute positions (<I>wxabs</I><I>,</I><I> wyabs</I>), <I>x</I> is horizontal and <I>y</I> is vertical. Counting begins at (0,0) in the upper left corner of the screen. In graphics modes, <I>wpxabs</I><I>, </I><I>wpyabs</I> values refer to absolute pixel count, (0,0) being top left corner of screen.<P>
Within a window, WTWG uses a local coordinate system with (0,0) being the upper left corner of the open window, wherever that may be on the screen. For a window having ten columns, the value of <I>w0-&gt;winxmax</I> would be 9. Text output would take place at the current position in the window which is given by <I>w0-&gt;winx</I> and <I>w0-&gt;winy</I>. The same sort of coordinates apply in graphics modes.<P>
Example:<P>
(<I>w0-&gt;winxmax</I>) is the last valid x value in the current window.<P>
(<I>w0-&gt;winx</I>) is the current x coordinate in the current window.<P>
The first two parameters to <I>wopen</I> specify x,y of the top left position of the first text byte in the window. WTWG places any borders above and to left of this spot. The next two parameters are the number of columns <I>(</I><I>xmax+1</I><I>)</I> and number of rows <I>(</I><I>ymax+1</I><I>)</I> in the window, again not counting borders. Window coordinates are referenced starting at 0, but the number of rows/columns desired is referenced starting at 1.<P>
<h4><FONT COLOR="#000080"><A name="0149_00B4">Text Output<A name="0149_00B4"></FONT></h4></P>
You can send text to the screen via functions <I>wputc</I><I>, </I><I>wputs</I><I>,</I> or <I>wprintf</I>. The <I>current location</I> (insertion point) is updated appropriately. You can discover the current location by referencing <I>w0-&gt;winx</I> and <I>w0-&gt;winy</I>. The next byte of text output will take place at that spot. You can change that spot with <I>wgoto(new_x, new_y)</I>.<P>
The behavior of <I>wputc/wputs/wprintf</I> at line endings and at the bottom of a window is called the "put style" and is controlled by the variable <I>(</I><I>w0-&gt;winputstyle</I><I>).</I> You can change the put style for the current window. By default <I>wputc/wputs/wprintf</I> behave exactly like their ANSI counterparts <I>putc/puts/printf</I><I>,</I> i.e., at the last column text wraps to the beginning of the next line, and after the last line the window scrolls up one line. WTWG honors ANSI escape codes. Within each window, you can specify different text behaviors. You can turn off text wrapping at the end of a line and window scrolling after the last line. WTWG can both ignore and print ANSI escape sequences. '\<I>n</I>' can generate a <I>CR/LF</I> or just a <I>LF.</I> The flag <I>w0-&gt;winputstyle</I> controls all of these choices. When you close a window, the previous window's put style is restored.<P>
You can turn wrap/scroll on or off for the current window using <I>wturnwrapon</I> and <I>wturnwrapoff</I>.<P>
Window colors are specified as <I>unsigned</I><I> </I><I>char</I><I>.</I> The first four bits specify the background, the low four bits set the foreground. For example, <I>wsetattr</I><I>((</I><I>RED</I><I>&lt;&lt;4)+</I><I>YELLOW</I><I>)</I> sets yellow letters on red background, <I>wgetattr</I> returns the current attribute as <I>unsigned char</I><I>.</I><P>
On Hercules monitors, text mode colors behave just like they do for other programs (<I>GREEN</I> = white, <I>BLUE</I> = underline, <I>RED</I> = invisible). In graphics mode, only colors that include <I>GREEN</I> or <I>BLUE</I> will be white, all others will be black. So, <I>(</I><I>GREEN</I><I>&lt;&lt;4)+</I><I>YELLOW</I> is a bad choice because in Hercules graphics mode it will show up as solid (unreadable). This color representation scheme is called <I>dithering</I>. The HP laserjet driver <I>whplj_dump</I> uses the same dithering scheme so if you are consistent in your choice of colors your programs will look okay on <I>HERCULES</I><I>, </I><I>PAPER</I>, and also <I>VGA</I> monitors.<P>
WTWG manages the cursor automatically: the cursor is off by default and is turned on by <I>wgets</I> when the user has to type something. On exit the cursor is turned on again. In graphics modes WTWG creates a pseudo<I>-</I>cursor for user input (typing). In text mode, if you really want a cursor bad enough, you can call <I>wturn_cursor(ON) </I>or<I> </I><I>wturn_cursor(OFF)</I>, but most of the time it is handled for you.<P>
<h4><FONT COLOR="#000080"><A name="0149_00B5">User Interface Features<A name="0149_00B5"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0149_00B6">Keyboard Input<A name="0149_00B6"></FONT></h4></P>
The program detects the enhanced keyboard at startup. WTWG handles all that nonsense about character/scan codes (see Turbo C manual for <I>getch</I><I>)</I> automatically &#151; a single call to <I>wgetc</I> always returns a single character. Because the enhanced keyboard has a large number of characters, the return type of <I>wgetc</I> is an <I>int</I>, with a range of <I>-</I>32k to +32k. Actual keys on the keyboard use values of only <I>1</I> thru about 300. Value <I>128</I> is reserved for the mouse. All routines that ask for or return keyboard values expect <I>int</I> data; if you use <I>char</I> or <I>unsigned char</I><I>,</I> errors may occur.<P>
<I>wgetc</I> incorporates the following features:<P>
1)     Merges mouse and keyboard into one virtual device.<P>
2)     Searches for hotkeys and calls specified routines.<P>
3)     Traps keyboard input to send to a file, or redirection to read a file as keyboard input.<P>
4)     If the user doesn't press a key after three minutes blanks the screen. Screen blanking happens in text or graphics mode, for EGA, VGA, or HERCULES displays.<P>
Example:<P>
<pre>int keystroke;
/* 'char keystroke' would be wrong */
keystroke = wgetc();
if ( keystroke == FKEY(1) ) {...}
else
if ( keystroke == ESCAPE ) {...}
else
if ( keystroke == ALT_TAB ) {...}
/* actual value is 293 */
else
if ( keystroke == WMOUSE ) {...}
/* mouse used */
else
...etc...</pre>
<h4><FONT COLOR="#000080"><A name="0149_00B7">Mouse<A name="0149_00B7"></FONT></h4></P>
WTWG supports automatic use of 2<I>-</I>and 3<I>-</I>button mice. WTWG turns off the mouse when not actually accepting user input to allow graphics<I>-</I>mode screen drawing without producing garbage on the screen (try turning the mouse ON and drawing a circle with the mouse moving on a EGA/VGA screen). When the video display is changed to a high page number WTWG disables the mouse if required by the monitor/mode combination (not all monitors and modes support the mouse on pages higher than page 0). If you want to display the mouse cursor at other times, you can use <I>wmouse_turn</I>(ON) and <I>wmouse_turn</I> (<I>OFF</I>) but you must be sure to use these calls in pairs or the poor little critter will get confused.<P>
Most mouse drivers do not work in 800*600 mode. If you add a Super VGA 800*600 driver (available through third parties for Turbo C), you will need to write a mouse driver.<P>
The flash graphics (ZORTECH) super VGA modes and supervga mouse drivers do work with WTWG.<P>
<h4><FONT COLOR="#000080"><A name="0149_00B8">Buttons<A name="0149_00B8"></FONT></h4></P>
Buttons are areas onscreen that the mouse can point to and select. WTWG translates mouse selection of a button to a key value that you associated with the button.<P>
Example:<P>
<pre>wbutton_add ( "Press Me", 3, 5, 9,
            'P', WBTN_BOX );
/* The words Press Me are placed at
   x=3, y=5 in a box of length 8+1.
   (1is for terminal NULL) The value
   'P' is assigned to the button. */
wbutton_add ( "F10 <I>-</I> QUIT", 3, 8, 11,
            FKEY(10), 0 );
/* The words F10 <I>-</I> QUIT are placed at
   x=3, y=8 for length 10+1. No box is
   drawn. The value FKEY(10) is
   assigned to the button. */
keystroke = wgetc ();
/* if the left button was released
   with the mouse in the 1st button
   area defined above, keystroke='P'
   the 2nd button area,
   keystroke= FKEY(10)
   NOTE also: if P was pressed
   on the keyboard, keystroke='P',
   not 'p' if F10 was pressed,
   keystroke = FKEY(10) */
if ( keystroke == 'P' )
   ... either mouse click in button or
      'P' on keyboard...
else
if ( keystroke == FKEY(10) )
   ...

keystroke= wgetc_button();
   /* waits until user gives acceptable
      input. ignores keys not matching
      current buttons. All keys
      translated to upper case, so no
     further validation is needed */</pre>
<h4><FONT COLOR="#000080"><A name="0149_00B9">Scrollbars<A name="0149_00B9"></FONT></h4></P>
Scrollbars are vertical bars that can be set to a "value" by positioning on them with the mouse. You create scrollbars with <I>wscrollbar_add</I><I>,</I> just as you create buttons with <I>wbutton_add</I>. WTWG assigns a unique keystroke code to the scrollbar, which should not be a valid keyboard key (i.e., <I>-</I><I>1</I> works, so does 600) You specify screen location and length of scrollbar, and a <I>virtual range</I>. The value of the scrollbar will then be a <I>long int</I> between 0 and the virtual range. The function <I>wscrollbar_scroll</I> tracks the mouse while the left button is down and returns the new value for the scrollbar. You can redraw the pointer on the scrollbar to show a new value by calling <I>wscrollbar_reset</I>.<P>
WTWG provides for higher level interaction with the user via the following functions:<P>
<UL><li><I>wpromptc</I> &#151; Prompt for a single keystroke.</li>
<li><I>wprompts</I> &#151; Prompt for a string of specified length.</li>
<li><I>wprompts_validate </I>&#151; Prompt user for string, validate string before return.</li>
<li><I>wpicklist</I> &#151; Chose an item from a null<I>-</I>terminated list of strings.</li>
<li><I>wmultipick</I> &#151; Provide multiple choices from a list of strings.</li>
<li><I>Wform::getscreen </I>&#151; Manage C++ screen form.</li>
<li><I>wscanform</I> &#151; (old version) Get multiple items of data, with validation.</li>
<li><I>wprompt_color</I> &#151; Get color, or get foreground/background text attributes.</li></UL>
<h4><FONT COLOR="#000080"><A name="0149_00BA">Hotkeys<A name="0149_00BA"></FONT></h4></P>
Hotkeys are keys that activate a routine independent of the main program. For example, the function keys in the Turbo C are all hotkeys. The same is true for QuickC.<P>
The easy way to install a hotkey handler is to call the <I>whotkey_install </I>function, specifying both the key value and the function, as in:<P>
<pre>void myfunc (void);
/* function that does something */

winit ( mode );
whotkey_install ( HOME, myfunc );</pre>
WTWG will call the function <I>myfunc </I>whenever the HOME key is pressed. If the function is already active at the time of the keypress, it will not be called twice, and the keystroke will be passed through.<P>
WTWG includes a number of useful hotkey routines: context<I>-</I>sensitive help (<I>whelp_install</I>), pulldown menus (<I>wpulldown</I>), HP LaserJet screen dump (<I>whplj_install</I>), ability to use the mouse center button to act like a hotkey (<I>wmspopup &amp; wpopfkey</I>), and a simple keyboard macro recorder (<I>wmacro_install</I>).<P>
Note that WTWG's hotkey features allow you to write traditional programs (the program controls when keyboard action takes place and what is done with user actions) or event<I>-</I>driven programs (the keyboard manager gets a key and decides which routine should be given the new input). If your program has one main routine that asks the user a series of questions and then takes action, there is no need for hotkeys, menus, etc. If the majority of your program is reached by hotkeys (or pulldown menus, which are implemented as a hotkey) then it is eventdriven. Such programs are made up of many <I>void func(void)</I> functions that communicate with each other by way of global<I>-</I>scope variables.<P>
A more complex, and more flexible way to install hotkeys is to point the global variable <I>wkeytrap</I> to the function that scans for the key and executes the subtask. In this case you must hang on to the addresses of any previously installed hotkey routines and chain to them in your hotkey routine, otherwise the help and menu systems won't work (or any other hotkeys you invent). If you use the first method, you won't have to worry about this stuff.<P>
Within the source code of the library, example programs that use the complex method of creating hotkeys may be found in <I>wpulldn.c</I> (pulldown menus &#151; checks for ALT+letter and for mouse click on menu bar) and <I>wmspopup.c</I> (checks for mouse center button).<P>
<h4><FONT COLOR="#000080"><A name="0149_00BB">Popup Menus<A name="0149_00BB"></FONT></h4></P>
Popup menus are lists of choices that the user can make. In WTWG, you create popup menus via the function <I>wpicklist.</I> You pass the function a title for your menu, and a pointer to an array of strings (one string for each choice), terminated by a null pointer. <I>wpicklist(title, list)</I> displays the list, allows the user to choose one element, and returns the element number (first element number is 0). If the user presses ESCAPE, the return value is equal to the number of choices. You can use the return value as an index to the list of choices.<P>
Example:<P>
<pre>int choice;
char *my_list[] =
               {"ONE", "TWO", "THREE",
                "FOUR" ,NULL};

choice = wpicklist ( "Choose a number",
                  my_list );
/* a box with the choices pops on the
   screen and disappears after a
   choice is made */

if ( my_list [choice] == NULL ) {
   ... user pressed ESCAPE...
   }
else {
   ... choice=0 means selection was
      "ONE", etc...
   }</pre>
<h4><FONT COLOR="#000080"><A name="0149_00BC">Pulldown Menus<A name="0149_00BC"></FONT></h4></P>
Pulldown menus have a way of neatly organizing large programs. Each choice in a menu is either a submenu or a function. The functions are declared as <I>void menu_func(void)</I>. The menu manager then acts as an event<I>-</I>driven interface, so your functions are called only when the user activates the menu.<P>
You create pulldown menus from a tree of tables, organized hierarchically. Each tables is an array of the type <I>WMENU</I> (a <I>typedef</I> in <I>window.h</I>). One table element produces one menu choice. You create nested menus by setting a pointer in the <I>WMENU</I> structure to another table of <I>WMENU</I>s. Each table element references a function of type <I>void</I> with no parameters (i.e., <I>void</I> <I>menu-func(void)</I>); these functions do the indicated tasks. You can place all the startup code and menu tables is one file, and place the functions in other files, and so build complex programs by a mix<I>-</I>and<I>-</I>match approach. At program startup, you call <I>wpulldown_install</I> to setup the menu onscreen. This routine also places a trap in <I>wgetc</I> so any hotkey from the menu table is recognized and control is passed to the menu. Menu items may also be selected by mouse. F1 gives context<I>-</I>sensitive help for each item in the menu tree.<P>
<h4><FONT COLOR="#000080"><A name="0149_00BD">Data Entry Forms<A name="0149_00BD"></FONT></h4></P>
WTWG supports data<I>-</I>entry forms using a table<I>-</I>driven approach. This feature has been revised in WTWG v2.0 to take advantage of C++. (The old version is also supplied in the volume).<P>
<h4><FONT COLOR="#000080"><A name="0149_00BE">Help<A name="0149_00BE"></FONT></h4></P>
WTWG supports online context<I>-</I>sensitive help. You place the help text in a file called <I>HELPFILE. HLP.</I> Help topics all start with the character '@'in column 1. The text for that topic follows. Text should be 50 columns by five lines, per topic. To create cross references to other topics, enclose the other topic in braces with a digit from 1<I>-</I>9. i.e.: {# topic}, where # represents the digit.<P>
Here is an example of an entry in a help file:<P>
<pre>@ow to quit      &lt;&lt;&lt; name of topic
To quit using the program, press ALT<I>-</I>X
or select "File<I>-</I>Quit" from the main menu.
Be sure to save your work.
See also {1 File<I>-</I>Quit} {2 File<I>-</I>Save}
               &lt;&lt;&lt; hypertext x<I>-</I>refs
@next topic starts here....</pre>
After you've created the help file the next step is to use the program <I>MAKEHX. EXE</I> to create a help index file which will be named <I>helpfile. HX.</I> Then, in your C program, you install the online help program with <I>whelp_install ("helpfile")</I>. The help topic changes appropriately with different choices in pulldown menus or with different input lines in FORMS. You can also change the help index explicitly. Sample files are provided with the volume.<P>
<h4><FONT COLOR="#000080"><A name="0149_00BF">Miscellaneous Features<A name="0149_00BF"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0149_00C0">Error handling<A name="0149_00C0"></FONT></h4></P>
To terminate a program due to an error, WTWG provides the routine <I>werror</I> to assign an exit code, restore the video mode, write an error message, then shut down the program.<P>
If you use <I>perror,</I> or <I>puts</I> in a graphics mode program, or on a high video page, then your error message will be lost when the video mode is restored. Even worse, using some other windows packages, if you call <I>exit</I> from a bizarre video mode, your PC screen will be unreadable (this is especially true in Hercules mode). The <I>werror</I> routine solves all these problems.<P>
If you run out of memory, <I>malloc</I> returns a null pointer. If you test for this and then write an error message, exit, your message might get lost (when the graphics mode changes back to text mode the screen is erased). The shutdown routine requires some available memory. WTWG provides functions <I>wmalloc, wfarmalloc,</I> and <I>wrealloc</I> to correctly handle the situation of running out of memory. These functions do the testing for you, and deal with error messages correctly.<P>
You can use <I>watexit</I> to install routines you want to have executed at shutdown time.<P>
<h4><FONT COLOR="#000080"><A name="0149_00C1">C++ Streams<A name="0149_00C1"></FONT></h4></P>
If you use C++ you can use stream output by calling <I>wout,</I> just like <I>cout,</I> Stream output goes to the current window. WTWG provides manipulators for clearing the window, setting colors, and <I>goto(x,y)</I> positions.<P>
Example:<P>
<pre>wout &lt;&lt; wout_attr ( BLUE ) &lt;&lt; wout_clear() &lt;&lt; "Hello World";</pre>
Defined manipulators are:  which are just<P>
          like calling:<P>
<pre><I>wout_attr ( char a )</I>       <I>ws</I>etattr(a)
<I>wout_clear (void)</I>          <I>wclear ()</I>
<I>wout_goto ( int x, int y ) wgoto ( x, y )</I>
<I>wout_clearline (void)      wclearline ()</I></pre>
<h4><FONT COLOR="#000080"><A name="0149_00C2">Acknowledgements<A name="0149_00C2"></FONT></h4></P>
The overall plan of the WTWG routines is somewhat unique. WTWG's mode<I>-</I>independent windows system is based wholly on the author's original ideas. In addition, to the author's knowledge, WTWG's method of mouse and keyboard integration is unique, as is its use of an eight<I>-</I>bit character size, which allows simplifications and speed enhancements. However, WTWG could not have been built without benefit of existing resources.<P>
Most of the low<I>-</I>level video access methods were derived from <I>Turbo C Programming On the IBM PC</I>, by Lafore. The basics of the 43/50<I>-</I>line EGA<I>-</I>mode logic comes from <I>DOS Power Tools,</I> by Somerson. Other IBM PC hardware routines were derived from <I>DOS Programmers Guide</I>, by Dettman.<P>
The revised logic for using the enhanced keyboard in <I>wkbd.c</I> comes from the article "Controlling the Keyboard Buffer," by Steve Gruel, <I>CUJ</I>, July 1990. The <I>wout</I> stream for C++ comes from "A Console Stream Class for Borland C++," by Al Williams, <I>CUJ</I>, January 1992.<P>
The author would also like to thank Sasha Drachev, who provided many suggestions that went into version 2, and who did much of the testing.<P>
</BLOCKQUOTE>
</BODY>
</HTML>
