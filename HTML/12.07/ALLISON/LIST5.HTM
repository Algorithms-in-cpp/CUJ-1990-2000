<HTML><HEAD>
<TITLE>July 1994/Code Capsules/Listing 5</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 5 <I>Derives exception classes from the standard exception hierarchy</I></A></h4>
<pre>// ddir3.cpp
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;io.h&gt;
#include &lt;string.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;dirent.h&gt;
#include &lt;dir.h&gt;
#include &lt;iostream.h&gt;
#include &lt;fstream.h&gt;
#include &lt;strstream.h&gt;
#include &lt;cstring.h&gt;
#include &lt;except.h&gt;

// Exception classes
class Dir_err : public runtime
{
public:
   Dir_err(const string&amp; s) : runtime(s){}
};

class Bad_dir : public Dir_err
{
public:
   Bad_dir(const string&amp; s) : Dir_err(s){}
};

class Dir_open_err : public Dir_err
{
public:
   Dir_open_err(const string&amp; s) : Dir_err(s){}
};

class File_del_err : public Dir_err
{
public:
   File_del_err(const string&amp; s) : Dir_err(s){}
};

class Dir_del_err : public Dir_err
{
public:
   Dir_del_err(const string&amp; s) : Dir_err(s){}
};

// Put response file in root directory
char response_file[L_tmpnam+1] = "\\";
// (Change this to "/" for UNIX)
main(int argc, char **argv)
{
   char *old_path = getcwd(NULL,MAXDIR);
   void rd(char *);

   // Initialize response file for DOS "del" command
   tmpnam(response_file+1);
   ofstream(response_file) &lt;&lt; "Y\n";

   // Delete the directories
   while (--argc)
   {
      try
      {
         rd(*++argv);
      }

      // Catch exceptions
      catch(const Bad_dir&amp; x)
      {
         cerr &lt;&lt; "Invalid directory: "
             &lt;&lt; x.what() &lt;&lt; endl;
      }
      catch(const Dir_open_err&amp; x)
      {
         cerr &lt;&lt; "Error opening directory: "
             &lt;&lt; x.what() &lt;&lt; endl;
      }
      catch(const File_del_err&amp; x)
      {
         cerr &lt;&lt; "Error deleting file: "
             &lt;&lt; x.what() &lt;&lt; endl;
      }
      catch(const Dir_del_err&amp; x)
      {
         cerr &lt;&lt; "Error deleting directory: "
             &lt;&lt; x.what() &lt;&lt; endl;
      }
      catch(const Dir_err&amp; x)
      {
         cerr &lt;&lt; "Directory error:"
             &lt;&lt; x.what() &lt;&lt; endl;
      }
   }

   // Clean-up
   remove(response_file);
   chdir(old_path);
   return 0;
}

void rd(char* dir)
{
   // Log onto the directory that is to be deleted
   if (chdir(dir))
      throw Bad_dir(dir);
   cout &lt;&lt; strlwr(dir) &lt;&lt; endl;

   // Delete all normal files via OS shell
   const size_t SH_CMD_LEN = 14;
   char sh_cmd[L_tmpnam+SH_CMD_LEN+1];
   ostrstream(sh_cmd,sizeof sh_cmd) &lt;&lt; "del *.* &lt;"
                              &lt;&lt; response_file
                              &lt;&lt; " &gt;&gt;null"
                              &lt;&lt; ends;
   system(sh_cmd);

   // Delete any remaining directory entries
   DIR *dirp;
   struct dirent *entry;
   if ((dirp = opendir(".")) == NULL)
      throw Dir_open_err(dir);
   while ((entry = readdir(dirp)) != NULL)
   {
      struct stat finfo;

      if (entry-&gt;d_name[0] == '.')
         continue;
      stat(entry-&gt;d_name,&amp;finfo);
      if (finfo.st_mode &amp; S_IFDIR)
         rd(entry-&gt;d_name);      // Subdirectory
      else
      {
         // Enable delete of file, then do it
         chmod(entry-&gt;d_name,S_IWRITE);
         if (unlink(entry-&gt;d_name))
            throw File_del_err(entry-&gt;d_name);
      }
   }
   closedir(dirp);

   // Remove the directory from its parent
   chdir("..");
   if (rmdir(dir))
      throw Dir_del_err(dir);
}

// End of File
</pre>
</BODY>
</HTML>
