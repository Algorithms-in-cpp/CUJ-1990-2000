

<HTML>
<HEAD>

<TITLE>July 1994/Code Capsules</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjul.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Code Capsules<A name="0145_00A7"><A name="0145_00A7"></font></h2><P>
<h3 align="center"><A name="0145_0000"><A name="0145_0000">C++ Exceptions</h3><P>
<h3 align="center"><font color="#800000">Chuck Allison</font></h3><hr><blockquote><P>
<P><i><A name="0145_0000"><A name="0145_0000">Chuck Allison is a regular columnist with CUJ and a software architect for the Family History Department of the Church of Jesus Christ of Latter Day Saints Church Headquarters in Salt Lake City. He has a B.S. and M.S. in mathematics, has been programming since 1975, and has been teaching and developing in C since 1984. His current interest is object-oriented technology and education. He is a member of X3J16, the ANSI C++ Standards Committee. Chuck can be reached on the Internet at 72640.1507@compuserve.com.</i></P><P>
In last month's article I discussed the various control structures available in C: conditions, loops, non-local jumps, and signals. I showed how the <I>setjmp/longjmp</I> facility (non-local jumps) allows you to specify an alternate return from a function to handle exceptional conditions. But jumping out of a function into a context higher up in the call chain can be risky in C++. The main problem, as <A href="list1.htm">Listing 1</a>
illustrates, is that the automatic variables created in the execution path between the <I>setjmp</I> and <I>longjmp</I> may not be properly destroyed. Fortunately C++ provides an alternate return method that know how to invoke the appropriate destructors, via the C++ exception-handling mechanism.<P>
<h4><FONT COLOR="#000080"><A name="0145_00A8">Stack Unwinding<A name="0145_00A8"></FONT></h4></P>
The program in <A href="list2.htm">Listing 2</a>
is a rewrite of <A href="list1.htm">Listing 1</a>
using exceptions. You turn on exception handling in a region of code by surrounding it with a <I>try</I> block. You place <I>exception handlers</I> immediately after the try block. An exception handler is like a function definition without a name, and is introduced by the keyword <I>catch</I>. You raise an exception with a <I>throw</I> expression. The statement<P>
<pre>throw 1;</pre>
in <A href="list2.htm">Listing 2</a>
causes the compiler to search for a handler that can catch an integer exception. (Exceptions are C++ objects, though they usually don't have data or function members. Their main purpose is to transmit type information from one part of the program to another.) The ellipsis specification (<I>catch(...)</I>) can catch any type, so control will pass to the handler in <I>main()</I>. But before control passes to this handler the program invokes destructors for all automatic objects constructed since execution entered the <I>try</I> block. This process of destroying automatic variables on the way to an exception handler is called <I>stack unwinding</I>.<P>
As you can see, executing a <I>throw</I> expression is semantically similar to calling <I>longjmp</I>, and a handler is like a <I>setjmp</I>. Just as you cannot <I>longjmp</I> into a function that has already returned, you can only <I>throw</I> to a handler associated with an "active" try block, i.e., one that execution control has not yet exited. After a handler executes, control passes to the first statement occurring after all the handlers defined in the source text (which is <I>return 0</I> in this case).<P>
The notable differences between exceptions and the <I>setjmp/longjmp</I> facility are:<P>
1)     Exception handling is a <I>language mechanism</I>, not a library feature. The overhead of passing control is invisible to the programmer.<P>
2)     The compiler generates code to keep track of all automatic variables with destructors and to execute those destructors when necessary (i.e, it unwinds the stack).<P>
3)     Local variables in the function that contains the try block are "safe" &#151; you don't need to declare them <I>volatile</I> to keep them from being corrupted as you do with <I>setjmp</I>.<P>
4)     The program finds handlers by matching the type of the exception object thrown. This methodology allows you to handle categories of exceptions with a single handler, and to classify them via inheritance (see "Grouping Exceptions" below).<P>
5)     Exception handling is a <I>run</I><I>-</I><I>time</I> mechanism. You can't always tell which handler will catch a specific exception by examining the source code.<P>
The last point is significant. C++ exception handling allows a clean separation between error <I>detection</I> and error <I>handling</I>. A library developer may create code to detect when an error occurs, such as an argument out of range, but won't know how to handle the error. You, the user, can't detect an error condition in a library function, but you know how your application needs to handle one, should it occur. Hence exceptions constitute a protocol for run-time communication between components of an application.<P>
It is also important to realize that C++ exception handling is designed around the <I>termination model</I>. That is, when an exception occurs, there is no direct way to get from the handler back to the throw point and resume execution where you left off, as you can in languages like Ada that obey the <I>resumption model</I>. C++ exceptions are for rare, synchronous events. (In this context, a synchronous event is one that your program causes. This is as opposed to an asynchronous event, which occurs due to forces your program can't control, such as the user pressing the attention key.)<P>
<h4><FONT COLOR="#000080"><A name="0145_00A9">Catching Exceptions<A name="0145_00A9"></FONT></h4></P>
Since exceptions are a run-time and not a compile-time feature, the standard working paper specifies the rules for matching exceptions to catch-parameters a little differently than those for finding an overloaded function to match a function call. You can define a handler for an object of type <I>T</I> in one of the following ways (the variable <I>t</I> is optional, just as it is for functions in C++):<P>
<pre>catch(T t)
catch(const T t)
catch(T&amp; t)
catch(const T&amp; t)</pre>
Such a handler can catch exception objects of type <I>E</I> if:<P>
1)     <I>T</I> and <I>E</I> are the same type, or<P>
2)     <I>T </I>is an accessible base class of <I>E</I> at the throw point, or<P>
3)     <I>T </I>and <I>E</I> are pointer types and there exists a standard pointer conversion from <I>E</I> to <I>T</I> at the throw point.<P>
<I>T</I> is an accessible base class of <I>E</I> if there is an inheritance path from <I>E</I> to <I>T</I> with all derivations either public or protected, or if <I>E</I> is a friend of <I>T</I>. To understand (3), let <I>E</I> be a type pointing to type <I>F</I>, and <I>T</I> a type that points to type <I>U</I>. Then there exists a standard pointer conversion from <I>E</I> to <I>T</I> if<P>
<UL><li><I>T</I> is the same type as <I>E</I> except it may have added any or both of the qualifiers <I>const</I> and <I>volatile</I></li>
<li><I>T</I> is a <I>void</I> *</li>
<li><I>U</I> is an unambiguous, accessible base class of <I>F</I>. <I>U</I> is an unambiguous base class of <I>F</I> if <I>F</I>'s members can refer to members of <I>U</I> without ambiguity (this is usually only a concern with multiple inheritance).</li></UL>
The bottom line of all these rules is that exceptions and catch parameters must either match exactly, or the exception must be derived from the type of the catch parameter. For example, in the following, the exception thrown in <I>F</I> is not caught:<P>
<pre>#include &lt;iostream.h&gt;

void f();

main()
{
   try
   {
      f();
   }
   catch(long)
   {
      cerr &lt;&lt; "caught a long" &lt;&lt; endl;
   }
   return 0;
}

void f()
{
   throw 1;   // not a long!
}</pre>
When the system can't find a handler for an exception, it calls the standard library function <I>terminate()</I>, which by default aborts the program. You can substitute your own termination function by passing its address as a parameter to the <I>set_terminate()</I> library function.<P>
In the following the exception thrown in <I>F</I> is caught, since there is a handler for an accessible base class:<P>
<pre>#include &lt;iostream.h&gt;

class B {};
class D : public B {};

void f();

main()
{
   try
   {
      f();
   }
   catch(B&amp;)
   {
      cerr &lt;&lt; "caught a B" &lt;&lt; endl;
   }
   return 0;
}

void f()
{
   throw D();
}</pre>
<h4><FONT COLOR="#000080"><A name="0145_00AA">Grouping Exceptions<A name="0145_00AA"></FONT></h4></P>
Last month's program for deleting directories appears in <A href="list3.htm">Listing 3</a>
using character-string exceptions instead of <I>setjmp</I> and <I>longjmp</I>. Note that the <I>char</I> * handler uses its parameter to print out an appropriate message. If your application uses a large number of exceptions, you may prefer to use different classes for the different types of exceptions. The program in <A href="list4.htm">Listing 4</a>
defines the following class hierarchy:<P>
<pre>Dir_err
     Bad_dir
     Dir_open_err
     File_del_err
     Dir_del_err</pre>
Although this program does not throw a <I>Dir_err</I> exception explicitly, it is a good idea to have a <I>Dir_err</I> handler anyway. Then if you add a new exception, <I>Dir_read_err</I>, say, in the future, but forget to add a corresponding handler, the program will still catch such exceptions as long as you derive <I>Dir_read_err</I> from <I>Dir_err</I>. Be sure to place the handler for base-class exceptions after the definitions of all the derived-type handlers. When you throw an exception, the run-time mechanism searches the handlers in source-code order for a match. If you place a base-class handler such as <I>Dir_err</I> in front of the derived-type handlers, <I>Dir_err</I> will catch all exceptions of derived type, rendering any subsequent handlers unreachable.<P>
Since some errors fit naturally into more than one category, exception hierarchies provide a meaningful use for multiple inheritance, for example:<P>
<pre>class Disk_write_error : public Disk_error,
                     public Write_error
{};</pre>
Exception classes are mainly used to classify the type of exception being thrown; they usually carry very little functionality or data. Hence, users of exception classes can enjoy the benefits of multiple inheritance, without the complications such as ambiguous references to inherited members.<P>
<h4><FONT COLOR="#000080"><A name="0145_00AB">Standard Exceptions<A name="0145_00AB"></FONT></h4></P>
In March 1994 the standards committee decided that the standard C++ library will only throw exceptions derived from the following hierarchy:<P>
<pre>exception
    logic
        bad-cast
        domain
    runtime
        range
        alloc</pre>
Logic exceptions are due to errors in the internal logic of a program. Domain errors are a type of logic error that violate the preconditions of a function, for example, by using an out-of-range index or attempting to use a bad file descriptor. As another example, the <I>bit-string</I> class from the standard library throws an <I>out-of-range</I> exception (derived from <I>domain</I> despite its name) if you ask it to set a bit that doesn't exist:<P>
<pre>bitstring&amp; bitstring::set(size_t pos,
int val )
{

   if (pos &gt;= nbits_)
      out-of-range
      ("invalid position").raise();
   set_(pos,val );
   return *this;
}</pre>
The library throws all exceptions by calls to the member function <I>exception::raise()</I>.<P>
The <I>bad-cast</I> exception class pertains to C++'s run-time type identification facility (RTTI), and is outside the scope of this article.<P>
Run-time errors are those that you cannot easily predict, either in theory or by careful analysis of source code, and are usually due to forces external to a program. A range error is a run-time error that violates a postcondition of a function, an example being arithmetic overflow from valid arguments. The other kind of run-time exception is the <I>alloc</I> exception, which occurs when heap memory is exhausted (see "Memory Management" below).<P>
The program in <A href="list5.htm">Listing 5</a>
redefines the directory exceptions of <A href="list4.htm">Listing 4</a>
to fit into the standard exception hierarchy. The directory errors are clearly run-time exceptions, since they depend on the return status of system services, not errors in the code. The <I>exception</I><I> </I>base class provides a member function <I>what()</I>, which returns the string argument that created the exception. I use this function to pass information about the error to the excetion handler.<P>
If you have Borland C++ 4.0, you will need to insert the text of <A href="list6.htm">Listing 6</a>
somewhere near the end of the standard header file <I>&lt;except.h&gt;</I> to make the new standard exception names available. Even though vendors like Borland and Watcom faithfully track the progress of the standards committee, their current versions were released before the standards committee redefined the standard names in March.<P>
<h4><FONT COLOR="#000080"><A name="0145_00AC">Resource Management<A name="0145_00AC"></FONT></h4></P>
While stack unwinding takes care of destroying automatic variables, there may still be some cleanup left to do. As the program in <A href="list7.htm">Listing 7</a>
shows, the file opened in <I>f</I> will not get closed if you throw an exception in the middle of <I>f</I>. One way to guarantee that a resource will be deallocated is to catch all exceptions in the function where the deallocation takes place. In <A href="list8.htm">Listing 8</a>
the handler in <I>f</I> closes the file and then passes whatever exception occurred on up the line by <I>rethrowing</I> it (that's what <I>throw</I> without an argument does). This technique could become tedious, however, if you use the same resource in many places.<P>
A better method arranges things so that stack unwinding will deallocate the resource automatically. In <A href="list9.htm">Listing 9</a>
I create a local class <I>File</I> whose constructor opens the file and whose destructor closes it. Since the <I>File</I> object <I>x</I> is automatic, its destructor is guaranteed to execute as the stack unwinds. You can use this technique, which Bjarne Stroustrup calls "Resource Allocation is Initialization," to safely handle any number of resources.<P>
<h4><FONT COLOR="#000080"><A name="0145_00AD">Constructors and Exceptions<A name="0145_00AD"></FONT></h4></P>
One of the motivations for adding exceptions to the language was to compensate for the constructors' inablity to return a value. Without benefit of exceptions, handling resource errors that occur inside of constructors becomes very awkward. A typical practice is to use an internal state variable and test it before using the resource. The program in <A href="list10.htm">Listing 10</a>
uses the file pointer returned from <I>fopen</I> to determine if the resource is available or not. The <I>operator void*()</I> member function returns a non-zero pointer value if all is well, so you can test the state like this:<P>
<pre>if (x)
   // All is well
else
   // Resource unavailable</pre>
(In the future, a standard-conforming compiler will allow you to use an <I>operator bool</I> member function for this purpose.)<P>
Having to test an object before each use can be quite tedious. As <A href="list11.htm">Listing 11</a>
illustrates, it may be more convenient to throw an exception directly from the constructor.<P>
<h4><FONT COLOR="#000080"><A name="0145_00AE">Memory Management<A name="0145_00AE"></FONT></h4></P>
Before exceptions, if a <I>new</I> operation failed to allocate an object it returned a null pointer, just like <I>malloc</I> does in C:<P>
<pre>T *tp = new T;
if (tp)
   // Use new object</pre>
The standard C++ working paper now stipulates that a memory allocation failure should result in an <I>alloc</I> exception. The standard library as well as third-party libraries may make extensive use of heap memory, so a memory allocation request can occur when you least expect it. Therefore, most any program you write should be prepared to handle an <I>alloc</I> exception.<P>
The obvious way to handle an <I>alloc </I>exception is to supply an <I>alloc</I> handler:<P>
<pre>catch(alloc)
{
   cerr &lt;&lt; "Out of memory" &lt;&lt; endl;
   abort();
}</pre>
Depending on your application, you may be able to do something more interesting than this, such as recover some memory and try again.<P>
Another way of handling out-of-memory conditions is to replace parts of the memory allocation machinery itself. When execution encounters a statement such as<P>
<pre>T *tp = new T;</pre>
it calculates the amount of storage required (say, N) and calls the standard library function <I>operator new(size_t) </I>(with an argument of <I>N</I>). If <I>N</I> bytes are not available, <I>operator new()</I> calls the <I>new handler</I>, an unnamed function that by default throws an <I>alloc</I> exception. You can either define your own <I>operator new(size_t)</I> to displace the default version, or you replace the default new handler with a function of your own. A typical custom new handler tries to free up some memory and returns, allowing <I>operator new()</I> to try again. If you can't come up with any more memory, then you should either throw an <I>alloc</I> exception or abort the program.<P>
To install a function, <I>nh()</I>, as a new handler, pass it to the standard library function <I>set_new_handler</I>, which returns a pointer to the currently-installed handler, in case you want to restore it later:<P>
<pre>void nh();
void (*old_handler)();

// Install custom new-handler
old_handler = set_new_handler(nh);

...
//do some processing here
...

// Restore the old one
set_new_handler(old_handler);</pre>
If you want your program to revert to the traditional behavior, where <I>new</I> returns a null pointer, call:<P>
<pre>set_new_handler(0);</pre>
[This is not gauranteed by the draft C++ Standard, but is recommended as a "common extension" &#151; pjp]<P>
<h4><FONT COLOR="#000080"><A name="0145_00AF">Exception Specifications<A name="0145_00AF"></FONT></h4></P>
You can enumerate the exceptions that a function will throw with an <I>exception specification</I>:<P>
<pre>void f() throw(A,B)
{
   // Whatever
}</pre>
This definition states that while <I>f</I> is executing, only exceptions of type <I>A</I> or <I>B</I> will be thrown. Besides being good documentation, this run-time system feature ensures that only the allowable types of exceptions occur. In the event of any other exception, control passes to the standard library function <I>unexpected</I>, which by default terminates the program. The definition of <I>f</I> above is equivalent to:<P>
<pre>void f()
{
   try
   {
      // Whatever
   }
   catch(A)
   {
      throw;       // rethrow
   }
   catch(B)
   {
      throw;       // rethrow
   }
   catch(...)
   {
      unexpected();
   }
}</pre>
You can provide your own <I>unexpected</I> handler by passing its address to the standard library function <I>set_unexpected</I>. The definition<P>
<pre>void f() throw
{
   // Whatever
}</pre>
disallows <I>any</I> exceptions while <I>f</I> is executing; that is, it is equivalent to:<P>
<pre>void f()
{
   try
   {
      // Whatever
   }
   catch(...)
   {
      unexpected();
   }
}</pre>
The challenge posed by exception specifications is that a function such as <I>f </I>may call other functions that throw other exceptions. You must know what exceptions can be thrown by those functions and either include them in the specification for <I>f</I>, or handle them explicitly within <I>f</I>. This situation creates a problems if <I>f</I> calls services whose future versions add new exceptions. If those new exceptions are derived from <I>A</I> or <I>B</I>, you don't have a problem, but that is not likely to happen with commercial libraries. The standards committee is still debating on whether to use exception specifications in the standard library or not.<P>
<h4><FONT COLOR="#000080"><A name="0145_00B0">Afterword<A name="0145_00B0"></FONT></h4></P>
Perhaps the most important thing to say about exceptions is that you should only use them in truly exceptional circumstances. Like <I>setjmp</I> and <I>longjmp</I>, they interrupt your program's normal flow of control. Your code should contain relatively few exception handlers compared to its number of functions. In addition, exceptions have been designed for synchronous events only; don't mix exceptions and asynchronous events, such as signals.<P>

<h4><a href="../../../source/1994/jul94/allison.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
