

<HTML>
<HEAD>

<TITLE>July 1994/Standard C/C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjul.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Standard C/C++<A name="0141_00A3"><A name="0141_00A3"></font></h2><P>
<h3 align="center"><A name="0141_0000"><A name="0141_0000">The Header &lt; istream&gt;</h3><P>
<h3 align="center"><font color="#800000">P.J. Plauger</font></h3><hr><blockquote><P>
<P><i><A name="0141_0000"><A name="0141_0000">P.J. Plauger is senior editor of C/C++ Users Journal. He is convenor of the ISO C standards committee, WG14, and active on the C++ committee, WG21. His latest books are The Standard C Library, and Programming on Purpose (three volumes), all published by Prentice-Hall. You can reach him at pjp@plauger.com.</i></P><P>
I continue my detailed review of iostreams. (See "Standard C: Introduction to Iostreams," <I>CUJ</I>, April 1994, "Standard C: The Header <I>&lt;ios&gt;</I>,<I> CUJ</I><I>,</I> May 1994, and <I>Standard C: The Header</I> <I>&lt;</I><I>streambuf</I><I>&gt;</I>, <I>CUJ</I><I>,</I> June 1994.) This month, we finally get to one of the more visible classes, class <I>istream</I>. It is the principal inhabitant of the header <I>&lt;istream&gt;</I>. <A href="list1.htm">Listing 1</a>
shows one way to implement this header.<P>
Class <I>istream</I> is derived from the virtual public base class <I>ios</I> to help you read from a stream. Actually, in the jargon of iostreams, you <I>extract</I> characters from a stream, since the stream is not necessarily associated with an external file that you have to read. The best known object of this class is <I>cin</I><I>,</I> which controls input from the standard input stream, also controlled by <I>stdin</I><I>.</I> You can also create <I>istream</I> objects that control files you open by name, or strings of text stored in memory, as we shall see in future installments.<P>
Most of the <I>istream</I> member functions fall into one of two broad categories:<P>
<UL><li>unformatted input functions, which extract arbitrary sequences of <I>char</I> values, such as uninterpreted text or arbitrary binary data</li>
<li>formatted input functions, which extract sequences that match certain text patterns and convert them to encoded values of the various scalar and string data types.</li></UL>
The former group mostly overloads the names <I>get</I> and <I>read</I><I>.</I> It is analogous to the Standard C library's <I>fgetc</I> and <I>fread</I>, but a bit easier to use. For example, you can extract a line of text with:<P>
<pre>if (cin.getline(buf, sizeof (buf)))
   &lt;input succeeded&gt;</pre>
The test is true (nonzero) only if the function extracts a non-empty line, that can fit in <I>buf,</I> from the stream controlled by the <I>istream</I> object <I>cin</I><I>.</I> A "line" is delimited (terminated) by an optional third argument of type <I>char</I><I>,</I> which defaults to '/<I>n</I>'. The function stores the null-terminated line in <I>buf,</I> discarding the delimiter.<P>
The latter group of functions overloads <I>operator&gt;&gt;</I> to make a family of <I>extractors.</I> It is analogous to the Standard C library's <I>fscanf</I> and friends, but with a variety of often touted advantages. For example, you can extract an octal integer with:<P>
<pre>int n;
if (cin &gt;&gt; oct &gt;&gt; n)
   &lt;input succeeded&gt;</pre>
The test is true only if the extractor extracts a non-empty field that matches the pattern for octal integers, and the converted value can be properly represented in an object of type <I>int.</I><P>
Extractors are sexier than unformatted input functions. They are second in popularity only to <I>inserters</I> (formatted output functions) as a selling point for iostreams over more conventional Standard C input and output. But they also take a deal of explaining. I therefore confine my attention this month to describing the unformatted input functions in some detail. Next month, I can then cover extractors with a better foundation.<P>
<h4><FONT COLOR="#000080"><A name="0141_00A4">Input Discipline<A name="0141_00A4"></FONT></h4></P>
Remember that all input and output in iostreams is mediated by objects of class <I>streambuf</I>. (See last month's column.) An object of class <I>istream</I> finds its related <I>streambuf</I> object via a pointer in its base class <I>ios</I><I>.</I> A member function of class <I>istream</I> can extract and consume the next available input character by calling <I>rdbuf()-&gt;sbumpc()</I><I>.</I> It can put back a character by calling <I>rdbuf()-&gt;sputbackc(ch</I><I>)</I>. (It can perform several other related functions as well, but these are the most robust, given the underlying I/O machinery in many implementations.)<P>
There is one small problem, however. It is perfectly permissible for the pointer to <I>streambuf</I> to be null. It is also quite possible that the pointer is non-null, but the stream is in some error state that should discourage extracting. Thus, it behooves any input function to look before it leaps.<P>
The canonical way to play safe is to wrap every input function with two calls to <I>istream</I> member functions:<P>
<pre>if (ipfx(noskip))
   &lt;perform any input&gt;
isfx();</pre>
The "prefix" function <I>ipfx(int)</I> verifies that the stream is both ready and willing to supply input, or at least to support calls on the <I>streambuf</I> member functions described above. It also performs other initializiation operations and, if you so request, will skip any white space in the input stream. As a rule, formatted input functions skip leading white space while unformatted input functions do not.<P>
The "suffix" function <I>isfx()</I> performs any necessary wrapup operations after each input member function does its work. As you can see from <A href="list1.htm">Listing 1</a>,
 this implementation defines <I>isfx()</I> as an inline empty function &#151; it has nothing to do. But that is not always the case for an arbitrary implementation. If you write an input function that uses the <I>istream</I> object <I>is</I>, always call <I>is.ipfx(noskip)</I> and <I>is</I>. <I>isfx()</I> as shown above.<P>
<A href="list2.htm">Listing 2</a>
shows the file istream.c. It defines the two functions you are likely to need any time you declare an object of class <I>istream,</I> its destractor and <I>ipfx(int).</I> Note the use of the pointer <I>tie</I> to an object of class <I>ostream</I>. You "tie" an output stream to another stream to ensure that it gets flushed at appropriate times. <I>cout,</I> for example, is conventionally tied to <I>cin</I>, and possibly<I> cerr </I>as well. You want to flush out any prompts to the console display before you solicit input from the console keyboard.<P>
<h4><FONT COLOR="#000080"><A name="0141_00A5">Exception Handling<A name="0141_00A5"></FONT></h4></P>
The prefix and suffix functions have been part of iostreams for many a year. You will find similar creatures when we discuss class <I>ostream</I> and its inserters, later on. But the draft C++ Standard introduces yet another source of surprises, which calls for even more machinery. All sorts of functions can throw exceptions. The input functions have clearly defined responsibility when exceptions occur during their execution.<P>
If the Standard C++ library had complete control over matters, it would not have to worry so much. Input functions could simply avoid calling functions that might throw exceptions. But that is not the case. Any call to <I>rdbuf()-&gt;sbumpc()</I>, for example, can result in a call to a <I>streambuf</I> virtual member function. And any object of class <I>streambuf</I> can actually represent a derived class, with programmer-supplied virtual member functions. The library can thus never know when a call on a <I>streambuf</I> member function might throw an exception.<P>
The draft C++ Standard is clear about what happens when an exception occurs during execution of an input (or output) member function. The function must call <I>setstate(failbit)</I>, then rethrow the exception. The structure of an arbitrary input function must now look like:<P>
<pre>try {
   if (ipfx(noskip))
      &lt;perform any input&gt;
   isfx();
   }
catch (...) {
   setstate(failbit);
   throw;
   }</pre>
Note that the act of setting <I>failbit</I> can also raise an exception, of class <I>ios::failure</I>. Should that happen, the original exception never gets rethrown. (See "Standard C: The Header <I>&lt;ios&gt;, CUJ</I>, May 1994.)<P>
One problem remains. Not all implementations of C++ support exceptions yet. And not all people who use C++ are comfortable with the use of exceptions when they are provided &#151; for a variety of reasons I won't detail here. So I've chosen to implement exception handling in input and output functions with macros. The above code actually looks like:<P>
<pre>_TRY_I0_BEGIN
   if (ipfx(noskip))
      &lt;perform any input&gt;
   isfx();
_CATCH_IO_END</pre>
The obvious expansion replaces the exception-handling code. I also have definitions for these macros that invoke the Microsoft exception-handling macros. Still another set effectively turns off exception handling, for implementations that can do nothing better. The choice is determined in a header that gets included indirectly by <I>&lt;istream&gt;</I><I>.</I><P>
<h4><FONT COLOR="#000080"><A name="0141_00A6">Unformatted Input<A name="0141_00A6"></FONT></h4></P>
Now you have enough background to understand how the unformatted input functions work. <A href="list3.htm">Listing 3</a>
shows the simplest of these. Member function <I>get()</I> extracts a single character and delivers it as the value of the function. A failure to extract the requested character, for any reason, is reflected in a return value of <I>EOF</I>.<P>
The only thing new here is the setting of the private member object <I>_Chcount</I>. Each of the unformatted input functions stores in this object a count of the number of characters it extracts. You can access this stored value by calling the member function <I>gcount()</I>. Obviously, a subsequent call to another unformatted input function overwrites the stored value.<P>
Equally obviously, the overhead in obtaining a single character via <I>get()</I> is substantially higher than for the Standard C library function <I>getchar()</I>. The latter is almost invariably implemented as a macro that fetches a character straight from an input buffer more often than not. The former is almost impossible to treat similarly, given the prefix/suffix and exception handling required by the draft C++ Standard. Thus, you should favor methods that extract many more characters for each call, whenever possible, if performance is an issue.<P>
<A href="list4.htm">Listing 4</a>
shows the function <I>get(char&amp;)</I>. You use it instead of <I>get()</I> when you want to chain operations, as in:<P>
<pre>is.get(c1).get(c2);</pre>
(a practice not universally admired). The variants <I>get(unsigned char&amp;)</I> and <I>get(signed char&amp;)</I> simply call this function. <I>get(char&amp;)</I>, in turn, calls <I>get()</I> to do the serious work. You can guess what this implies about the performance considerations I raised above.<P>
<A href="list5.htm">Listing 5</a>
shows the function <I>get(char *, int, char)</I>. It too has its variants for <I>unsigned char</I> and <I>signed char</I>. You use it to extract a sequence of characters up to, but not including, a delimiter character. If that sounds much like <I>getline(char *, int, char)</I>, which I described earlier, you're right. <A href="list6.htm">Listing 6</a>
shows the plain <I>char</I> version of this threesome of unformatted input functions. Compare the two functions and you will find only small differences in the handling of the delimiter and the reporting of errors.<P>
In a nutshell, both deliver null-terminated strings guaranteed not to contain an instance of the delimiter. Both complain if end-of-file is encountered while extracting characters, or if the buffer ends up holding an empty string. But <I>get</I> doesn't actually consume the delimiter, nor does it get upset if it fills the buffer before it sees a delimiter. (This behavior of <I>getline</I> is not entirely consistent with current practice, a topic of ongoing discussion within the C++ standards committees.)<P>
If you want rather less logic, consider function <I>read(char *, int)</I>, shown in <A href="list11.htm">Listing 11</a>.
 It simply reads until a count is exhausted, or until no more characters can be extracted.<P>
Lest you think that iostreams are always at a disadvantage compared to Standard C input/output, take a close look at <A href="list7.htm">Listing 7</a>.
 It shows the function <I>get(streambuf&amp;, char</I><I>)</I>, which extracts characters and writes them directly to a <I>streambuf</I> up to, but not including, a delimiter. Thus, you can write:<P>
<pre>cin.get(*cout.rdbuf(), '\n');</pre>
to copy the next line from <I>cin</I> directly to <I>cout</I>. In this case, copying can be quite fast. (A related extractor is even faster, since it doesn't have to check for delimiters.) Note the use of still more macros for exception handling. I leave it to your imagination to guess what they do, in general. In this context, they deal specifically with exceptions raised while writing (inserting, actually) characters to the stream controlled by <I>sb</I>. Such exceptions are caught, but not rethrown.<P>
<h4><FONT COLOR="#000080"><A name="0141_00A7">Related Functions<A name="0141_00A7"></FONT></h4></P>
A handful of additional functions sometimes proves handy in conjunction with the unformatted input functions. <A href="list8.htm">Listing 8</a>
shows the function <I>ignore(int, int)</I>. It simply extracts and discards characters up to a specified count, or until a specified delimiter is extracted and discarded.<P>
<A href="list9.htm">Listing 9</a>
shows the function <I>peek()</I>, which lets you see the next character to be extracted without actually consuming it. <A href="list10.htm">Listing 10</a>
shows the function <I>putback(char)</I>, which lets you "put back" an extracted character. (It doesn't really modify the input stream, but the next extraction will deliver up the character.) And <A href="list13.htm">Listing 13</a>
shows the related function <I>ungetc()</I>. It backs up a character position without altering the apparent contents of the input stream. With either of these two functions, you shouldn'count on backing up more than one character position between extractions. Portable support for such antics is not guaranteed.<P>
Finally, <A href="list12.htm">Listing 12</a>
shows the function <I>sync()</I><I>.</I> It simply calls the public "synchronizing" function <I>pubsync()</I> in the associated <I>streambuf</I> object. Typically, such an operation flushes an output stream to the associated external file. Some systems use calls like this to discard pending characters from an interactive input stream, but that is <I>not</I> mandated by the draft C++ Standard. Don't count on it. In fact, I'm not sure what portable use you can make of this particular member function.<P>
In any event, that ends the list of <I>istream</I> member functions not associated with formatted input. We'll visit the remainder in detail next month.<P>

<h4><a href="../../../source/1994/jul94/plauger.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
