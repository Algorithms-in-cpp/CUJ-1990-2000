<HTML><HEAD>
<TITLE>July 1994/Dealing With Uncertain Inputs: Exploratory Software Engineering/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2 <I>Second cut at the grammar after initial tests</A></I></h4>
<pre>{
/*
 File:   CONV.SYN - AnaGram syntax file for
                 conversion program;
        Version 2
*/
#include "string.h"
#include "convutil.h"
}
[
  parser file name = "conv.cpp"
]

grammar
 -&gt; record?..., eof

(void) record
 -&gt; valid record, newline                   =cleanUp();
 -&gt; bad data, newline                       =cleanUp();

bad data
 -&gt; error               =wrError(PCB.line, PCB.column);

(void) valid record
 -&gt; "class", attribute list                =putClass();
 -&gt; "instanceVariable",
      attribute list           =putInstanceVariable();
// six other record types handled similarly

attribute list
 -&gt; tab, attribute
 -&gt; attribute list, tab, attribute

(void) attribute
 -&gt; "name@", id value:a                =atAdd(NAME, a);
 -&gt; "file@", string value:a           =atAdd(FILEN, a);
 -&gt; "line@", string value:a            =atAdd(LINE, a);
// twelve other attribute types handled similarly

// ------------ string value syntax -------------------
(Attribute *) string value
 -&gt; value contents              =makeStringAttribute();

// ------------ id value syntax -----------------------
(Attribute *) id value
 -&gt; scoped name:sn,
     name remainder:s          =makeIdAttribute(sn,s);

(char *) scoped name
 -&gt; scoped name term:head                        =head;
 -&gt; scoped name:sn, "::",
     scoped name term:t            =extendScope(sn,t);

(char *) scoped name term
 -&gt; identifier:i                                    =i;

(char *) name remainder
 -&gt;                 =makeHeap(""); //remainder is empty
 -&gt; value contents         =release(); //remaining text

// =============== lexical definitions ================
eof              = -1 + 0 + ^Z
name follow char = 'a-z' + 'A-Z' + '_' + ' ~ + '0-9'
name start char  = 'a-z' + 'A-Z' + '_' + '~'
newline          = '\n'
tab              = '\t'
value char       = ~(eof + tab + '@' + newline)

[
  sticky {name string}
]
(char *) identifier
 -&gt; name string                           =release();

(void) name string
 -&gt; name start char:c                =collectFirst(c);
 -&gt; name string, name follow char:c       =collect(c);

(void) value contents
 -&gt; value char:c                     =collectFirst(c);
 -&gt; value contents, value char:c          =collect(c);

// Supporting C++ code follows
{

StringAttribute *makeStringAttribute() {
  StringAttribute *a = new StringAttribute(release());
  return a;
}

IdAttribute *makeIdAttribute(char * sn, char *s) {
  IdAttribute * a;
  a = new IdAttribute(sn,s);
  delete sn;
  delete s;
  return a;
}

char* extendScope(char *sn, char *t) {
  char * nsn;  // string for new scoped name
  nsn = new char[strlen(sn) + strlen(t) + 3];
  strcpy(nsn, sn);
  strcat(nsn, "::");
  strcat(nsn, t);
  delete sn;
  delete t;
  return nsn;
}

int main(int argc, char * argv[]) {
  if (FALSE == setErrorFile(argv[1])) {
    fprintf(stderr, "Couldn't open error file\n");
    return 1;
  }
  conv();
  return 0;
}
}

/* End of File */
</pre>
</BODY>
</HTML>
