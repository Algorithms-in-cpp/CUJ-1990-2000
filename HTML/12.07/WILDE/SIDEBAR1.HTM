<HTML><HEAD><TITLE>July 1994/Dealing With Uncertain Inputs: Exploratory Software Engineering/Sidebar</TITLE></HEAD><BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h3 align="center"><FONT FACE="Garamond" COLOR="#000080">Syntax Files and Parser Generators</FONT></h3><hr>
<BLOCKQUOTE>
A parser generator, such as AnaGram or yacc, is a program that writes programs (see <A href="fig4.htm">Figure 4</a>)
. The parser generator reads a syntax file and produces a C or C++ parser file. Users can then compile the parser file, along with its support code, into an executable parser program.<P>
The parser program will read input and try to match it against the grammar in the syntax file. For example, the lines:<P>
<pre>grammar
-&gt; record?..., eof
(void) record
-&gt; valid record, newline = cleanUp();
-&gt; bad data, newline = cleanUp();</pre>
in <A href="list2.htm">Listing 2</a>
state that the whole input (caller <I>grammar</I>) is a sequence of records followed by an end-of-file. The <I>record </I>is defined to be a <I>valid record </I>or<I> bad data</I> followed by a <I>newline</I>. Later productions define <I>valid record</I>, and <I>bad data</I>, and so on. The process continues until the grammar gets down to a definition in terms of specific characters, such as the following:<P>
<pre>name start char = 'a-z' + 'A-Z' + '_' + '~'</pre>
which states that a <I>name start char</I> can be any lower case or upper case alphabetic character, or the special characters '_', or '~'.<P>
Productions can be recursive, such as:<P>
<pre>attribute list
-&gt; tab, attribute
-&gt; attribute list, tab, attribute</pre>
which says that an <I>attribute list</I> is a <I>tab</I>, followed by a sequence of one or more <I>attributes</I> seperated by <I>tabs</I>.<P>
As the parser program executes, it will match the input it reads against this grammar. When a production is matched, the program executes the reduction procedure listed after the '=' in the syntax file. Reduction procedures are just fragments of C or C++ code which are often calls to functions in the support code file. For example, the following fragment:<P>
<pre>(char *) scoped name term
-&gt; identifier:i = i;
.
.
(char *) identifier
-&gt; name string = release();
(void) name string
-&gt; name start char:c = collectFirst(c);
-&gt; name string, name follow char:c = collect(c);</pre>
defines a <I>name string</I> (recursively) to be a <I>name start char</I>, possibly followed by any number of <I>name follow chars</I>. When the parser program finds the <I>name start char</I>, it assigns the char to the variable <I>c</I> and passes <I>c</I> to the function <I>collectFirst,</I> which empties a global input buffer and puts <I>c </I>at the beginning of the buffer. Then when each <I>name follow char</I> is found, it is passed to the <I>collect</I> function, which adds it to the end of the buffer. When no more <I>name follow chars </I>are found, the name string is complete and the generated parser will recognize that it now has a complete identifier, so it calls the <I>release</I> function. This function copies the buffer into a null-terminated string on the heap and returns a pointer to the string. The pointer is called the "semantic value" of the identifier, and is available in the scoped name term production as the variable <I>i</I>. Thus results can be passed from one production to another as needed.<P>
Note that in AnaGram the semantic values are given C/C++ types so that the compiler can do type checking. Thus (<I>char</I> *) in the above example means that the result returned by <I>release</I> is expected to be a character pointer while (<I>void</I>) tells the compiler that <I>collectFirst</I> and <I>collect</I> do not return any value.<P>
The best known parser generator comes from the UNIX world and is called yacc ("yet another compiler compiler") from its original application as an aid to compiler writers. A variety of parser generators are available both commercially and in the public domain.<P>
</BLOCKQUOTE>
</BODY>
</HTML>
