

<HTML>
<HEAD>

<TITLE>June 1993/Curve Fitting with Extrapolation</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjun.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Scientific and Numerical Applications</FONT></H2>

<hr><h2 align="center"><font color="#800000">Curve Fitting with Extrapolation<A name="012E_008C"><A name="012E_008C"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="012E_0000"><A name="012E_0000">Lowell Smith</font></h3><hr><blockquote><P>
<P><i><A name="012E_0000"><A name="012E_0000">Lowell Smith is a retired aerospace engineer (Hercules Aerospace Company). He first programmed in FORTRAN in 1962 on the IBM 1620, then later on the IBM 1130 and various IBM 360/370 models. After getting an IBM PC in 1982, he began using Pascal and C. He has never worked as a programmer, but has programmed many engineering applications over the years. He can be reached via 73377.501@compuserve.com.</i></P><P>
<h4><FONT COLOR="#000080"><A name="012E_008D">Introduction<A name="012E_008D"></FONT></h4></P>
Engineering models frequently require functional representations of empirical data that may be defined at arbitrary intervals. A least-squares fitted polynomial provides a simple approach to the problem, but may deviate from expected values between data points, particularly for polynomials of higher degree.<P>
Chebyshev polynomials can be used for a fit which very closely approximates the optimal minimax solution &#151; minimizing the maximum deviations. Algorithms for implementing the method are well documented in <I>Numerical Recipes in C</I> (Press et al., 1992). Prince (December 1992) describes the use of this method for fitting analytical functions such as <I>sin(x), cos(x)</I>, etc.<P>
The use of Chebyshev polynomials requires evaluation of the candidate function at specific values of <I>x</I>. This is no problem for continuous analytical functions, but engineering data to be fit are usually available at only a limited number of points.<P>
The algorithm described in <I>Numerical Recipes in C</I> for interpolation/extrapolation using rational functions provides a means for accurately estimating data at the abscissa values required for use of Chebyshev polynomials. It has the added benefit that it performs surprisingly accurate extrapolation for a wide variety of data.<P>
The RPFT code described here is based on the algorithms defined in <I>Numerical Recipes in C</I>. It fits both polynomials and rational functions to arbitrary sets of <I>(x, y)</I> data points. The rational function has the form:<P>
<IMG SRC="equat1.gif"><P>
The extrapolation feature permits fitting somewhat beyond the limits of the available data.<P>
<h4><FONT COLOR="#000080"><A name="012E_008E">Operation<A name="012E_008E"></FONT></h4></P>
The program requirements are defined in the help screen shown in <A href="fig1.htm">Figure 1</a>.
 The help screen is displayed whenever a command-line error is encountered and when the program is invoked with no command-line arguments.<P>
Checking is provided to trap most input errors. Optional keyboard input for calculating test results is permitted at the end of the run. Those data are echoed to the screen via <I>stderr</I> to avoid confusion when <I>stdout</I> is redirected.<P>
To illustrate the use of the program with extrapolation beyond the available data, I fit a fifth degree polynomial to the heat of formation data for HCl in water. The input data shown in <A href="list1.htm">Listing 1</a>
was taken from Wagman, et al. (1992) with some data omitted. The logarithmic transformation of <I>x</I> values was used because of the extended range of the data. The upper limit for the curve fit was chosen well beyond the included data to illustrate the use of extrapolation. A screen dump for the run is given in <A href="fig2.htm">Figure 2</a>.
<P>
The resulting polynomial is plotted in <A href="fig3.htm">Figure 3</a>
along with a conventional least-squares polynomial. Data points not included in the analysis are shown to verify the effectiveness of the extrapolation.<P>
The maximum error is 1.03 at <I>x</I> = 1.5. For a better fit I would use two polynomials, possibly with overlapping ranges, particularly if reasonable extrapolation beyond the lower limit were needed.<P>
Rational functions often give a better fit and also can be extrapolated for moderate distances beyond the range over which they are fit. For the second example, I fit a rational function to <I>sin(x)</I> for<I> x </I>between 0 and 3.14. The input data at intervals of 0.2 (except the last point) were provided with 16 significant digits. The option <I>-DIG</I> = 16 was used to get maximum accuracy in the coefficients. Fourth order polynomials were specified for both numerator and denominator (<I>NN</I> = 4 and <I>ND</I> = 4).<P>
The results are shown in <A href="fig4.htm">Figure 4</a>.
 Note that the error curve reflects the minimax nature of the fit between the lower and upper limits. Also, the rational function extrapolates reasonably well beyond the limits. The error at<I> x </I>= -0.5 is 0.00584 and that at 3.5 is 0.000031.<P>
The maximum error is 0.28 for <I>x</I> = -3, which is well outside the limits of the curve fit. When the analysis is redone with limits of -3 and +6 to take advantage of the extrapolation feature of the code, the maximum error is 0.00328 between those limits.<P>
<h4><FONT COLOR="#000080"><A name="012E_008F">Code Structure<A name="012E_008F"></FONT></h4></P>
The code is given in <A href="list2.htm">Listing 2</a>.
 It is normally compiled on a PC in the small model. It will compile and run without error in the large model, but that should never be necessary. It will accept over 1,000 data points using the small model on a machine with 640KB memory. The allocation failure error messages indicate the location of the error in the code if problems are encountered.<P>
All program options are specified on the command line as indicated in the help screen shown in <A href="fig1.htm">Figure 1</a>.
 <I>main</I> first calls<I> commd </I>to parse the command line and check for obvious errors.<P>
The <I>inpt</I> routine is then called to read the <I>(x, y)</I> data from the input file and check for obvious errors such as missing values or negative values with logarithmic transformation. <I>inpt</I> then calculates either the Chebyshev polynomials or the abscissa and function values required for the rational polynomial fit. The diagonal rational function interpolation routine <I>ratint</I> is used for interpolation or extrapolation to determine values between or beyond data points as required.<P>
The arrays required for the input data are freed prior to return. If <I>NN</I> is greater than 0, <I>ratlsq</I> is then called for the rational function analysis. The number of abscissa values used is <I>npt,</I> which is <I>NPFAC</I> times the total number of coefficients. <I>Numerical Recipes in C</I> recommends that you <I>#define NPFAC</I> to be 8, and that is used here. In some cases a better fit might be possible with a larger value.<P>
The analysis proceeds by iteration with the weighting factors <I>wt[]</I> and <I>ee[]</I> adjusted after each iteration to minimize the maximum error. Functions <I>dsvdcmp</I> for singular value decomposition and <I>dsvbksb</I> for back substitution are used for the solution in each iteration.<P>
The estimated maximum absolute error is displayed after each iteration. The coefficient set returned is that for the iteration with the smallest estimated error.<P>
If <I>ND</I> is zero, <I>chebpc</I> is called to transform the Chebyshev coefficients generated by <I>inpt</I> to the interval -1 to 1. <I>pcshft</I> then generates the polynomial coefficients. <I>sprintf</I> and <I>sscanf</I> are used to round the coefficients to the specified number of digits (default is 7).<P>
For the polynomial fit, a single column of coefficients is listed. For the rational function, a column is listed for both the numerator and the denominator.<P>
At the end of the run, optional input for trial <I>x</I> values is provided. This, like all error messages, is directed to <I>stderr</I> to avoid confusion when output is redirected.<P>
<h4>References</FONT></h4></P>
Press, W.H., et al. 1992. <I>Numerical Recipes in C, Second Edition</I>, Cambridge, MA: Cambridge University Press.<P>
Prince, Tim. December, 1992. "Tuning Up Math Functions," <I>C Users Journal.</I> Lawrence, KS: R&amp;D Publications.<P>
Wagman, D.D., et al. 1992. "The NBS Tables of Chemical Thermodynamic Properties: Selected Values for Inorganic and C1 and C2 Organic Substances in SI Units," <I>Journal of Physical and Chemical Reference Data</I>. Vol. 11, Supplement No. 2. National Bureau of Standards, Washington, CD 20234.<P>

<h4><a href="../../../source/1993/jun93/smith.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
