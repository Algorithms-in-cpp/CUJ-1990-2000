

<HTML>
<HEAD>

<TITLE>June 1993/Recovering Corrupted Waveforms</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjun.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Scientific and Numerical Applications</FONT></H2>

<hr><h2 align="center"><font color="#800000">Recovering Corrupted Waveforms<A name="0135_008E"><A name="0135_008E"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0135_0000"><A name="0135_0000">Thomas E. Janzen</font></h3><hr><blockquote><P>
<P><i><A name="0135_0000"><A name="0135_0000">Thomas E. Janzen was born in Chicago and raised in Seattle and Los Angeles. A musician and performance artist, he has published in computer music, particularly about his improvising program, AlgoRhythms. As a software engineer, he has developed software to test integrated circuits, to test newly manufactured workstations, and to analyze measurements. He is currently unemployed in Hudson, Massachusetts, and can be reach by email at tej@world.std.com.</i></P><P>
<h4><FONT COLOR="#000080"><A name="0135_008F">Introduction<A name="0135_008F"></FONT></h4></P>
When you look at something, it moves. When you try to measure a quantity, it changes. When you measure the rise time of a step function through a network of microwave switches and semi-rigid cables, it is corrupted by the network, cables, and even by the oscilloscope used to sample the waveform. Removing the corruption introduced by experimental set-ups is an old problem. Many rules-of-thumb have been recommended to reconstruct data as it is before it enters measurement equipment. Some that I have used include:<P>
<UL><li>averaging many samples of the same event</li>
<li>smoothing the data with filters</li>
<li>using simple arithmetic corrections</li></UL>
Averaging is usually sound if the event repeats exactly and many times. Filtering distorts the data, but can be effective if the noise and the signal can be separated cleanly by the filter. Simple corrections generally assume the similarity of the data to mathematical functions that have simple characteristics. If the waveform does not conform to those assumptions and the measurements call for extreme accuracy, then the simple corrections are no longer reliable.<P>
The relationship between an original signal, the impulse response of an electrical or acoustical network, and the output of the network can be expressed with the operation known as <I>convolution</I>. If the output and impulse response are known, then the inverse operation, <I>deconvolution</I>, can recover an approximation of the original input. I present here an implementation in C of an approach to direct deconvolution.<P>
<h4><FONT COLOR="#000080"><A name="0135_0090">Convolution<A name="0135_0090"></FONT></h4></P>
Convolution is a widely useful function. In one dimension, it can express the relationship between the sound heard by the violinist and that heard in the last row of the balcony. It can also express the way an electrical signal is altered by passive networks and cables. Convolution can be used in digital signal processing to create finite-impulse-response filters. Convolution is the basis of important theorems in statistics and Fourier analysis.<P>
In two dimensions, convolution can be applied to anti-aliasing functions in graphics, or the response of an optical system. I will restrict myself to convolution in the time domain in one dimension. My experience is in transmission line corruption of electrical signals.<P>
Convolution in the continuous, real domain is defined as follows:<P>
<IMG SRC="equat1.gif"><P>
Convolution follows the associative, commutative, and distributive laws:<P>
<UL><li>Associative:</li>
<pre>(<I>f</I> * <I>g</I>) * <I>h</I> = <I>f</I> * (<I>g</I> * <I>h</I>)</pre>
<li>Commutative:</li>
<pre><I>f</I> * <I>g</I> = <I>g</I> * <I>f</I></pre>
<li>Distributive:</li>
<pre><I>a</I> (<I>f</I> * <I>g</I>) = (<I>af</I> * <I>ag</I>)</pre></UL>
Here, <I>a</I> is a constant, <I>f</I> and <I>g</I> are functions.<P>
The theorem in statistics is as follows:<P>
If two independent random variables, <I>X</I> and <I>Y</I>, have a joint density function <I>f</I>(<I>x,y</I>), the density function of <I>U = X</I> + <I>Y</I> is <I>X</I> * <I>Y</I>.<P>
The theorem in Fourier analysis can be written, using <I>F</I> as the Fourier operation:<P>
<pre><I>F</I>{<I>f</I> * <I>g</I>} = <I>F</I>{<I>f</I>} * <I>F</I>{<I>g</I>}</pre>
In the continuous domain, convolution operates on functions. But in practical engineering, discrete data is the rule. Such digitally-sampled waveforms might be downloaded from oscilloscopes or read from audio samplers in the backplane of your computer. In the discrete domain, the integral becomes a summation:<P>
<IMG SRC="equat2.gif"><P>
The arrays <I>f</I> and <I>g</I> should begin with zeros, by nature. If the function is truncated to meet this requirement, errors will be produced. If the truncation causes a small step, the errors may be small. If it causes a large step, the errors will be severe.<P>
Convolution is not difficult to express in C with arrays and <I>for</I> loops. <A href="list1.htm">Listing 1</a>
shows a function that convolves two arrays, <I>f</I> and <I>g</I>, and puts the result in array <I>y</I>. Note that you must provide sufficient storage for all three, defined by <I>sequence_len</I> times the size of a <I>double</I> on your system. Because convolution follows the commutative law, it doesn't matter how you arrange the two known functions in the arguments <I>f</I> and <I>g</I>. The array arguments <I>f</I> and <I>g</I>, and the length <I>sequence_len</I> are declared <I>const</I> because the convolution function does not change them.<P>
The number of multiplications performed by this function is:<P>
<IMG SRC="equat3.gif"><P>
Although it is true that the commutative law allows us to treat the two convolving functions interchangeably, in practice they usually have an asymmetrical relationship. One of the functions under the summation is a stimulus to a system (such as a cap gun firing in a theater) and the other function under the summation is the unit impulse response of the system (the shot and its reverberation heard from a particular seat in the theater).<P>
Once the impulse response is known, it can be used on other signals (such as a synthesized violin sound) to emulate the response of the system (giving the sound of playing a synthesized violin in the hall, without actually going there). In this case, the cap gun shot was also a suitable impulse for directly measuring a concert hall. When a new stimulus is convolved with the impulse response of the system, we get the simulated response of the system to that new stimulus.<P>
<h4><FONT COLOR="#000080"><A name="0135_0091">Deconvolution<A name="0135_0091"></FONT></h4></P>
Under some circumstances, the result of convolution is known, while one of the convolving functions is unknown (<I>f</I> or <I>g</I> above). In order to find the unknown function, it is necessary to invert the convolution function. This new function is called deconvolution. It is described in a paper by N.S. Nahman (1986). The expression for deconvolution in the discrete domain is:<P>
<IMG SRC="equat4.gif"><P>
This is implemented in C in <A href="list2.htm">Listing 2</a>.
 Although the result is called <I>h</I> as if it were an impulse response, this function can be called to find either function under the convolution summation, whether it is an impulse response, or a stimulus function.<P>
The number of multiplications performed by this function can be found from:<P>
<IMG SRC="equat5.gif"><P>
The following restrictions appear to hold in order for this approach to direct deconvolution to work:<P>
1.     The two functions, one the result of convolution and the other one of the functions under the summation, should both begin with zero.<P>
2.     The known function from under the summation must have a non-zero value in element [1]. Otherwise the division will overflow.<P>
3.     The impulse response, known or not, must have an area between -1 and +1. Otherwise the system response is not passive, because it is amplifying the input. The described technique does not converge if this is so. You can measure the area of the impulse response if it is the known function under the summation by adding all of the elements in the array. If the system response is unknown and has an area greater than one, the given technique will not give a good answer.<P>
4.     The sequences must really be "consistent," that is, related by a system response that is passive and without feedback. Otherwise this technique will not return a useful answer.<P>
5.     The response must be later in time (in higher array positions) than then either the impulse response or the input. This is part of being consistent. Note that the impulse response includes time delay in the system that is being stimulated. You are free to experiment with shifting the impulse response back and forth within the array that holds it, to simulate different delays.<P>
6.     The impulse response, whether known or not, must be truncated (finite); zero should appear in the first and last array elements. This introduces errors, but the errors may be tolerable if the truncated function is close to the original function.<P>
7.     The members of the array of the known function under the summation should be between -1 and +1. You are free to scale all values in the stimulus and response in such a way as to make the response magnitude smaller in value than that of the stimulus, and then re-scale them to true values later.<P>
8.     If either function is at all noisy, deconvolution may not give a useful answer. This is true for two reasons:<P>
<UL><li>Noise injected separately into the output is not consistent with (the result of) any event on the input.</li>
<li>The output is not consistent with noise introduced on the input after the input was introduced to the network under test.</li></UL>
Since there is always noise, deconvolution is always an approximation. The judgement of the experimenter is required to decide whether to accept an approximation or try again. To clean up data prior to deconvolution, use noise-reduction techniques:<P>
<UL><li>Average several samples of the same repeating event.</li>
<li>Filter in the time domain. For example, convolve the data with a rectangular pulse with unit area. The function at the top of <A href="fig1.htm">Figure 1</a>
was synthesized using <I>fun_step</I> in <A href="list3.htm">Listing 3</a>.
 Noise was added using <I>fun_noise</I> in <A href="list3.htm">Listing 3</a>.
 (A header for the library in <A href="list3.htm">Listing 3</a>
is in <A href="list4.htm">Listing 4</a>.
) A unit pulse was built by <I>fun_unit_step</I> in <A href="list3.htm">Listing 3</a>
and convolved with the noisy function to produce the smoothed function on the bottom of <A href="fig1.htm">Figure 1</a>.
</li></UL>
Since filtering distorts test data, it gives good results only when the filter can easily separate the noise from the desired signal.<P>
<h4><FONT COLOR="#000080"><A name="0135_0092">Applying Deconvolution<A name="0135_0092"></FONT></h4></P>
The convolution function is intended for two different situations.<P>
<h4><FONT COLOR="#000080"><A name="0135_0093">Situation 1:<A name="0135_0093"></FONT></h4></P>
<B>Known functions:</B> The calculated or sampled system impulse response, and the sampled response to a stimulus function.<P>
<B>Unknown function:</B> The stimulus function.<P>
<B>Call:</B><P>
<pre>deconvolve_wave(ary_len, system_impulse_response,
     response_to_the_stimulus, stimulus_function)</pre>
<B>Result:</B> In <I>stimulus_function</I>, the approximate, reconstructed stimulus that caused the response.<P>
<h4><FONT COLOR="#000080"><A name="0135_0094">Situation 2:<A name="0135_0094"></FONT></h4></P>
<B>Known functions:</B> The sample of a short, wide-bandwidth event, and the sampled response to the short event.<P>
<B>Unknown function:</B> The system impulse response.<P>
<B>Call:</B><P>
<pre>deconvolve_wave(ary_len, short_wide_band_event,
   response_to_the_short_event, impulse_response);</pre>
<B>Result:</B> In <I>impulse_response</I>, the estimated impulse response of the system.<P>
My work measuring high-speed circuits required extreme accuracy. I hand-built a network of semi-rigid coaxial cables (resembling model copper pipes), microwave switches, and an oscilloscope with high-speed sampling heads. As careful as I was, this setup had reflections and discontinuities that corrupted the signal, but in a passive way. The resulting signal was still fairly clean, but did have small bumps and valleys in it on the scope face. In addition, the high-frequency components were slightly attenuated. I needed the switches and cables to automate the selection of signals for measurement under the control of a microcomputer; manual cable-moving was much too slow. In order to correct for corruptions, I deconvolved the sampled waveform against the known impulse response of the system in order to recover the signal as it was before entering the matrix.<P>
First, I measured the step response of the system. (See <A href="fig3.htm">Figure 3</a>.
) Stimulating the matrix with a high-performance step generator, I used the scope to sample the step twice. First, I bypassed the cable network, and directly connected the step generator to the scope using a special higher-performance head that was unsuitable for day-to-day use (the top of <A href="fig3.htm">Figure 3</a>)
. Second, I connected the step generator to the cables and switch matrix used for measurements, and used the usual sampling head (bottom of <A href="fig3.htm">Figure 3</a>)
. This gave me:<P>
<UL><li>the step function straight from the generator</li>
<li>the step response of the cables and the usual sampling head</li></UL>
By deconvolving these two functions (as in Situation 2, above), I found the impulse response of the lower-performance sampling head and cable network. Note that the step-generator produced a pulse that was not much faster than the network and scope. A faster step generator was not for sale anywhere at the time. The calculated step response was then not as meaningful as it should have been. It was merely the best I could do. When measuring the response of a system, always use a step or impulse that is faster (wider in bandwidth) than the estimated system response.<P>
When sampling a test circuit through the network using the usual (lower-bandwidth) sampling head, I could deconvolve the sampled waveform against the calculated impulse response to find an approximation of the signal as it was before it entered the switching matrix and sampling head.<P>
<A href="fig2.htm">Figure 2</a>
shows four waveforms. The top waveform is a step synthesized by <I>fun_step_real</I> in <A href="list3.htm">Listing 3</a>,
 and is typical of some high-speed circuits. Below the step is an ideal impulse response synthesized by <I>fun_unit_gauss_dens</I> in <A href="list3.htm">Listing 3</a>.
 These two functions were convolved with the function in <A href="list1.htm">Listing 1</a>
to produce the third waveform, which is slightly smoothed and delayed by the impulse response. The fourth waveform is a reconstructed impulse response by calling <I>deconvolve_wave</I> in <A href="list2.htm">Listing 2</a>
as follows:<P>
<pre>deconvolve_wave(array_length,
             step_on_top,
             third_waveform,
             reconstructed_-
             response);</pre>
This reconstructed response is somewhat noisy, even when ideal data arrays were used. This may be due to the truncation (zeroed first member) of the impulse response and input waveform.<P>
<h4><FONT COLOR="#000080"><A name="0135_0095">Calculating Risetimes<A name="0135_0095"></FONT></h4></P>
As stated above in the section on convolution, a joint density function of two gaussian density distributions is also gaussian, and its standard deviation is the root of the sum of the squares of the standard deviations of the original independent random variables.<P>
<IMG SRC="equat6.gif"><P>
This is true of any interval along the horizontal axis measured between the same vertical values (probabilities). This is also true if the functions are inverted (1 - ). The rising edge of some pulse circuits closely resembles one side of an inverted gaussian density distribution (synthesized by <I>fun_step_real</I> in <A href="list3.htm">Listing 3</a>)
.<P>
The impulse response of many high-performance pulse measurement systems are also close to gaussian density distributions. This approximation can be exploited for correcting the measurements of pulse edge times (for example, the time it took an edge to move from 20% full value to 80% full value). The output edge time may be said to be the root of the sum of the squares of the system rise time and the input rise time.<P>
<IMG SRC="equat7.gif"><P>
(See <A href="fig4.htm">Figure 4</a>.
)<P>
However, as demands for accuracy and bandwidth increase, this approximation weakens. Deconvolution can make a better approximation.<P>
<h4><FONT COLOR="#000080"><A name="0135_0096">Conclusion<A name="0135_0096"></FONT></h4></P>
The technique presented here for direct deconvolution is an approximation with many restrictions. Nevertheless, it is very useful both for characterizing the impulse response of a passive system and for recovering stimulus functions prior to corruptions introduced by a wide variety of networks &#151; electrical, acoustic, and mechanical. It could even be used to decompose a statistical density function from a joint density function, although it is typically not necessary to call on such unusual techniques to do so.<P>
The presentation here was simplified. For a more sophisticated and general approach, see N.S. Nahman's paper in the References below. Although I did not incorporate deconvolution into my test process, my attempts with it were very promising, and you may find it so as well.<P>
<h4><FONT COLOR="#000080"><A name="0135_0097">Government Publications<A name="0135_0097"></FONT></h4></P>
I first read about deconvolution in a paper from the National Institute of Standards and Technology. To order papers or a catalog from the NIST, contact the General Services Administration in your area, or the Government Printing Office at<P>
Superintendent of Documents<br>
U.S. Government Printing Office<br>
Washington, DC 20402<br>
(202)783-3238<P>
NTIS may be contacted at:<P>
National Technical Information Service<br>
5285 Port Royal Road<br>
Springfield, VA 22161<P>
Your local Department of Commerce District Office may have some NIST publications.<P>
Dr. Nahman's paper (below) is now available from<P>
Kluwer Academic Publishers<br>
190 Old Derby St.<br>
Hingham, MA 02043<P>
<h4>References</FONT></h4></P>
Blood, William R. 1983. <I>MECL</I><I> </I><I>System Design Handbook</I>. Motorola.<P>
Foley, James D.; van Dam, Andries; Feiner, Steven K.; Hughes, John F. 1990. <I>Computer Graphics</I><I> </I><I>Principles and Practice</I>. Addison-Wesley Publishing Company. Reading.<P>
Lovrich, Al; Simar, Ray Jr. 1986. "Implementation of FIR/IIR Filters with the TMS32010/TMS32020," <I>Digital Signal Processing Applications with the TMS320 Family</I>. Texas Instruments.<P>
Nahman, N.S. 1986. Software Correction of Measured Pulse Data. In <I>Fast Electrical and Optical</I><I> </I><I>Measurements</I>, eds. J.E. Thompson and L.H. Luessen, pp. 351-417. NATO Advanced Studies Institute Series E, no. 108. Dordrect; Netherlands: Martinus Nijhoss Publishers.<P>
Spiegel, Murray R. 1974. <I>Fourier Analysis with Applications to Boundary Value Problems</I>. McGraw-Hill: New York.<P>
Spiegel, Murray R. 1975. <I>Probability and Statistics</I>. McGraw-Hill: New York.<P>
(C) 1993 Thomas E. Janzen.<P>

<h4><a href="../../../source/1993/jun93/janzen.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
