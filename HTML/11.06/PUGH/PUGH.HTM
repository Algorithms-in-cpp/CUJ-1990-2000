

<HTML>
<HEAD>

<TITLE>June 1993/Questions & Answers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjun.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Questions &amp; Answers<A name="01A6_0098"><A name="01A6_0098"></font></h2><P>
<h3 align="center"><A name="01A6_0000"><A name="01A6_0000">Dynamic Program Suspension</h3><P>
<h3 align="center"><font color="#800000">Kenneth Pugh</font></h3><hr><blockquote><P>
<P><i><A name="01A6_0000"><A name="01A6_0000">Kenneth Pugh, a principal in Pugh-Killeen Associates, teaches C and C++ language courses for corporations. He is the author of C Language for Programmers and All On C, and was a member of the ANSI C committee. He also does custom C programming for communications, graphics, image databases, and hypertext. His address is 4201 University Dr., Suite 102, Durham, NC 27707. You may fax questions for Ken to (919) 489-5239. Ken also receives email at <I>kpugh@dukemvs.ac.duke.edu</I> (Internet) and on Compuserve 70125,1142. <I></I></i></P><P>
<B>Q</B><P>
We enjoy reading The <I>C Users Journal</I>, more than other programmers' magazines. We think we have detected a lack of, or need for, a dynamic program suspender. Perhaps a reader of CUJ might have a solution. We do not know how to write one or even how to suggest one could write it, but here is a list of its operational parameters: <P>
1.     Activate by a hot-key or time clock event.<P>
2.     Active program, in-memory data, and other system requirements stored on disk.<P>
3.     Normal MS-DOS environment becomes active (as if the previous program had terminated normally).<P>
4.     At a later time (whenever required), the suspended program could be reloaded from either a normal MS-DOS environment, or even spawned/executed from within an active program.<P>
5.     On resumption, program should continue execution as if nothing had happened.<P>
6.     Repeat above as required.<P>
This utility has been sorely missed by us for a while now. We often write small programs to amuse ourselves; however, they sometimes require days to complete. In a normal working environment this is not a welcome feature of any program. If we could use the spare time available, usually at night, to run our toy programs, we would be able to complete our toying. Example toy programs: <P>
<UL><li>PI to a gazillion decimal places</li>
<li>PENTOMINO placing</li>
<li>FACTORIZATION of large numbers</li>
<li>CROSSWORD creation</li></UL>
We thank you from Australia,<P>
Jim Eadie<br>
George Leake<br>
Melbourne, Australia<P>
<B>A</B><P>
There are several ways to perform the operations you have requested. The simplest is to get a multitasking overlay to MS-DOS, such as DESQview or Microsoft Windows, or a multitasking operating system that has multiple DOS windows, such as OS/2.<P>
These systems allow you to run multiple programs simultaneously. They vary in the control that you have over the percentage of time that each program is allowed. The simplest one to set up and use is DESQview. I have used it for a number of years to perform operations similar to the ones you requested.<P>
DESQview provides true timesharing between programs that can fit into memory. Each program runs in its own window. The window that receives the keyboard input is the foreground window. The remainder of the windows are background windows. You can switch the foreground window at any time using the <I>Alt</I> key.<P>
Every clock tick (about 18 times/second), the executive is called and decides which program to execute next. In the setup procedure, you specify the percentage of time to be devoted to the foreground program and the background programs. If you specify a very small percentage or even zero percentage for a background program, then you will hardly notice that it is present.<P>
DESQview will use extended memory as well as conventional memory to run programs. If all the programs you are attempting to run cannot fit into memory, DESQview will swap out background programs to disk. When you switch to a swapped-out program, it will swap in that program and swap another out to disk.<P>
You have a fair amount of control over each window. You can specify that the program is not to be swapped out. This would be the case for a program that needs to respond to interrupts, such as a communications program. You can prevent the window from being closed until the program terminates. I use this for word-processing windows to be sure my files are saved before exiting DESQview. You can prevent the CPU from being shared when the program is the foreground program. You can also say that the program should not run when it is in the background. <P>
To use DESQview in your application, you can open up a window and run your long-running program in it. The window should be set up to run only when it is the foreground window, to be not closable, and to be swappable. Then open another window or several other windows and run your daily programs in them. When you are through for the day, simply switch to the long-running program.<P>
Alternatively, you could purchase or obtain a routine like X-SPAWN, which swaps the current program out to disk and spawns another program. When that program terminates, the current program is swapped back in. The program that executes could be <I>COMMAND.COM</I>, so a DOS command prompt would appear. When you typed <I>EXIT</I>, the previous program would be resumed.<P>
The program performing the XSPAWN would contain the algorithm you are computing. It could check periodically or on a signal for keystrokes. If a keystroke occurred, it would call XSPAWN. I prefer using the DESQview approach. Programs do not need to be aware that they are sharing the machine with any other programs. (KP).<P>
<h4><FONT COLOR="#000080"><A name="01A6_0099">Error Handling<A name="01A6_0099"></FONT></h4></P>
<B>Q</B><P>
This response comments on your March 1993 column, wherein James Brown explained how he uses <I>gotos</I> to consolidate error handling near the bottom of a routine. I often use a similar technique, which is illustrated in <A href="list1.htm">Listing 1</a>.
 The basic concept is similar in that the code falls through terminating procedures. However, for the benefit of some purists, this method does not use <I>gotos</I> although it does use multiple returns. The code sample also provides for an error message although this is not necessary. This method is particularly handy where, as in the code sample, the cleanup code is not called from within the same function.<P>
Andy Levinson<br>
Studio City, CA<P>
<B>A</B><P>
Thank you for your contribution. It demonstrates a nice way of centralized error handling without <I>gotos</I>. It also spurred me to think more about error handling. The complexity of error handling can be reduced if each object, as a buffer or a file, contains its own internal state. The state is set when an initialization function is called and then tested when a termination function is called. These functions need to be called explicitly, rather than implicitly, as is done in C++.<P>
<A href="list2.htm">Listing 2</a>
shows an example following James Brown's listing in the March issue. The <I>Buffer_initialize</I> and <I>Buffer_terminate</I> routines are fairly simple. The state of a <I>Buffer</I> variable is kept in the variable itself. If the value of the variable is <I>NULL</I>, then no memory is currently allocated. The only difference between this and using just <I>malloc</I> and <I>free</I> is that the value of <I>pointer</I> is reset to <I>NULL</I> when it is freed in <I>Buffer_terminate</I>. Note that each <I>Buffer</I> variable has to be initialized before it can be terminated. However, it can be allocated unsuccessfully (i.e. <I>Buffer_allocate</I> returned <I>FAILURE</I>) and <I>Buffer_terminate</I> can be called without causing a problem. <A href="list3.htm">Listing 3</a>
is an example that follows along the lines of your code.<P>
The <I>File</I> structure includes the current state and the buffer pointer. Normally, I would write the <I>open</I> and <I>read</I> operations as separate functions. They are kept together here to parallel your example. I expanded your implicit states of <I>1</I> and <I>2</I> to the four that are listed in <I>enum File_state</I>, even though the operations upon termination are the same in two cases.<P>
As I do with <I>Buffer_initialize</I> and <I>Buffer_allocate</I>, I would separate the operations of initializing and opening the file. This would add a line of code to initialize each <I>File</I> variable, but it would simplify the testing of other operations' return values.<P>
The code in <A href="list4.htm">Listing 4</a>
shows how multiple <I>File</I> objects could be used in the same function. Each <I>File</I> variable has to be initialized. However, <I>File_terminate</I> can be called without erroneous results for variables that have not been successfully initialized.<P>
These functions might seem like overkill for the simple errors that can be generated with these types. However, the same technique can be applied to more complex objects.<P>

<h4><a href="../../../source/1993/jun93/pugh.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
