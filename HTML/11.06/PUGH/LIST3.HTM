<HTML><HEAD>
<TITLE>June 1993/Questions & Answers/Listing 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 3<I> Keeping a state in a structure</I></A></h4>
<pre>enum File_state { UNOPENED, BUFFER_ALLOCATED, FILE_OPEN,
RECORD_READ};
char * File_state_strings[] = {"Unopened", "Buffer allocation",
"File open", "File reading"};

typedef struct
   {
   enum File_state state;  // Current state of file
   int file_id;    // Id from open
   char *buffer;   // Buffer for read
   } File;

int File_initialize(File * file, char *filename, char *purpose);
void File_terminate(File * file);

#define SUCCESS 1
#define FAILURE 0

main()
   {
   File file;
   int return_code;
   if (File_initialize(&amp;file, "filename", "purpose") == SUCCESS)
      {
      return_code = 0;
      /* Do whatever required */
      }
   else
      return_code = 1;
   File_terminate(&amp;file);
   exit(return_code);
   }

int File_initialize(File * file, char *filename, char *purpose)
   {
   int read_count;
   int return_code = FAILURE;
   file-&gt;state = UNOPENED;
   if (Buffer_initialize(&amp;file-&gt;buffer, BUFSIZ, "file buffer")
      == SUCCESS)
      file-&gt;state = BUFFER_ALLOCATED;
   if (file-&gt;state == BUFFER_ALLOCATED)
      {
      file-&gt;file_id = open(filename, 0_RDONLY);
      if (file-&gt;file_id &gt;= 0)

         file-&gt;state = FILE_OPEN;
      }
   if (file-&gt;state == FILE_OPEN)
      {
      read_count = read(file-&gt;file_id, file-&gt;buffer, BUFSIZ);
      if (read_count &gt; 0)
         {
         file-&gt;state = RECORD_READ;
         return_code = SUCCESS;
         }
      }
   if (return_code != SUCCESS)
      fprintf(stderr, "Filename %s purpose %s error at %s",
         filename, purpose, File_state_strings[file-&gt;state]);
   return return_code;
   }

void File_terminate(File * file)
   {
   /*** Maintenance note - fall through required ***/
   switch(file-&gt;state)
      {
   case RECORD_READ:
   case FILE_OPEN:
      close(file-&gt;file_id);
   case BUFFER_ALLOCATED:
      Buffer_terminate(&amp;file-&gt;buffer);
   case UNOPENED:
      break;
   default:
      fprintf("Error in File_terminate -- illegal state");
      }
   return;
   }

/* End of File*/
</pre>
</BODY>
</HTML>
