

<HTML>
<HEAD>

<TITLE>June 1993/Natural Language Expansions for Tense and Number</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjun.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">Natural Language Expansions for Tense and Number<A name="0149_0090"><A name="0149_0090"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0149_0000"><A name="0149_0000">Russell Suereth</font></h3><hr><blockquote><P>
<P><i><A name="0149_0000"><A name="0149_0000">Russell Suereth has been consulting for over 12 years in the New York City and Boston areas. He started designing and coding systems on IBM mainframes and now also builds PC software systems. You can write to Russell at 84 Old Denville Rd, Boonton, NJ 07005, or call him at (201) 334-0051.</i></P><P>
This article expands the natural language processor presented in "A Natural Language Processor" (<I>CUJ</I>, April 1993) to include tense and number. Tense and number help determine the grammatical usage of auxiliaries and verbs, and derive meaning from the sentence. Tense indicates the time of the action or state: past, present, or future. Number indicates how many: one or more than one. These simple meanings help identify similar information between sentences. The processor uses similar information in sentences to generate an appropriate response.<P>
I added and expanded several processes to implement tense and number. This natural language processor can now accept input sentences with auxiliary combinations, identify tense and number, and use meaning to generate grammatical responses. These expansions enable the natural language processor to process tense and number, and to respond more correctly.<P>
<h4><FONT COLOR="#000080"><A name="0149_0091">Extracting Auxiliary and Verb Information<A name="0149_0091"></FONT></h4></P>
The processor uses auxiliary and verb information from the dictionary to help identify tense and number. Auxiliaries, words such as is, <I>have</I>, and <I>would</I>, can be combined to create other auxiliaries such as <I>would have</I> and <I>would have been.</I> Underlying structures identify auxiliary combinations in the input sentence.<P>
Underlying structures define the kinds of input sentences that can be processed. The original processor had two underlying structures that defined two kinds of input sentences. In this article, I expand the underlying structures to accept auxiliary combinations. For instance, the structure <I>NAME-AUX-VERB-PREP-DET-NOUN</I> accepted <I>Jim could run in the race</I>. I expanded the structure to <I>NAME-AUX-AUX-VERB-PREP-DET-NOUN</I> and <I>NAME-AUX-AUX-AUX-VERB-PREP-DET-NOUN</I>. These structures accept <I>Jim could be running in the race</I> and <I>Jim could have been running in the race.</I><P>
<A href="list1.htm">Listing 1</a>
and <A href="list2.htm">Listing 2</a>
show only the expanded code for the original processor. This expanded code can be a model for processing tense and number, or added to the original processor. You can get the complete processor code, including the expansions for tense and number from the various sources for <I>CUJ</I> online source code (see page 6).<P>
<I>check_underlying</I> contains the expanded structures. <I>check_type</I> matches the underlying structure to the input sentence. If the input sentence has the underlying structure, <I>check_underlying</I> concatenates the auxiliary words to the auxiliaries array. Then <I>get_aux</I> is called to find the auxiliary in the dictionary.<P>
The dictionary contains the auxiliary tense, number, meaning, and usage. <I>get_aux</I> reads each dictionary record and calls <I>match_aux</I> to match the auxiliary with the dictionary word. If the match is successful, <I>match_aux</I> extracts the tense, number, meaning, and usage for later use. The natural language processor uses this information to match the input sentence auxiliary with the verb, and to retrieve the correct verb when generating a response.<P>
The existence of a matching, underlying structure determines the processor's success in understanding an input sentence. The coded, underlying structures could be expanded further with code for phrase structures such as <I>AUX, AUX-AUX</I>, and <I>AUX-AUX-AUX</I>. Such an expansion would reduce the number of coded, underlying structures but would accept more kinds of input sentences.<P>
The processor also extracts verb and pronoun information from the dictionary to later help determine that an input sentence is grammatical, and retrieve the correct verb for a generated response. <I>match_record</I> extracts the verb and pronoun information according to the word type. That is, for the word type <I>VERB</I>, the processor extracts the verb root, usage, tense, and number. For the word type <I>PRON</I>, it extracts only the pronoun number.<P>
The dictionary in this expanded processor has new words and information for processing tense and number, and a new layout for the new information. <A href="list3.htm">Listing 3</a>
shows the new dictionary. <A href="fig2.htm">Figure 2</a>
shows the dictionary layout.<P>
<h4><FONT COLOR="#000080"><A name="0149_0092">Determining Tense from Auxiliary and Verb<A name="0149_0092"></FONT></h4></P>
The processor determines tense primarily by matching auxiliary tenses with verb tenses. For example, in the sentence <I>Jim had run in the race</I>, the processor matches the tenses of the auxiliary <I>had</I> with the tenses of the verb <I>run</I>. The auxiliary <I>had</I> is defined in the dictionary as past tense. The verb <I>run</I> is defined as past, present, and future. The past tense matches successfully and so the sentence is past tense. If no match is successful, then the auxiliary and verb don't agree and the sentence is in error.<P>
<I>check_aux_verb</I> matches the auxiliary with the verb. The routine first processes sentences that have an auxiliary. If the auxiliary and verb usage don't match, then the sentence tense and usage are unknown. If the auxiliary and verb usage match, then each auxiliary tense is matched with each verb tense. If the number of successful tense matches is one, then the matched tense and usage are assigned to the sentence tense and usage.<P>
The usage helps identify the correct verb that can be used with the auxiliary. Some kinds of verbs can't be used with a specific auxiliary. A correct verb is in <I>was running</I> and an incorrect verb is in <I>was run</I>. The verb <I>run</I> has a <I>ROOT</I> usage, <I>was</I> and <I>running</I> have an <I>ING</I> usage. The <I>ING</I> usage identifies a verb that ends with <I>ing</I>, <I>NOAUX</I> identifies a verb with no auxiliary, and <I>ROOT</I> identifies the main form of the verb. If the auxiliary and verb usage match, then that verb may be used with the auxiliary.<P>
Some auxiliary and verb combinations have more than one tense match. Consider, for example, the sentence <I>Jim can run in the race</I>. The auxiliary <I>can</I> is in the dictionary as present and future tense. The verb <I>run</I> is in the dictionary as past, present, and future tense. This auxiliary and verb combination may be present or future tense. More than one tense match causes the tense to be unclear. In this case, you must use an alternative method to determine tense.<P>
<h4><FONT COLOR="#000080"><A name="0149_0093">Determining Tense from a Previous Sentence<A name="0149_0093"></FONT></h4></P>
Input sentence context determines tense when auxiliary and verb tenses have more than one match. The processor determines sentence context by analyzing information in previous sentences. Look at the sentences <I>Jim will run in the finals, and Jim can run in the first lane</I>. The second sentence tense is unclear when only that sentence is analyzed. The auxiliary <I>can</I> is in the dictionary as present and future tense, and <I>run</I> is in the dictionary as past, present, and future. The second sentence may be present or future tense. But when the tense of the first sentence is also analyzed, then the second sentence tense can be determined and becomes future tense.<P>
However, a previous sentence tense may be irrelevant or forgotten if that previous sentence occurred long ago. For example, the speaker says <I>Jim will run in the finals</I> and fifteen sentences later says <I>Jim can run in the first lane</I>. The listener may not be sure <I>first lane</I> refers to the finals. The sentence about the finals may even be forgotten. When no recent sentence indicates the tense, the listener assumes the tense is present.<P>
<I>check_aux_verb</I> looks at the previous three sentences when the number of successful tense matches is greater than one. The current sentence's subject, action, and possible tenses are matched with the previous three sentences' subject, action, and tense. If a match is successful, then the matching sentence tense is assigned to the current sentence tense. If no match is successful, then the current sentence tense is present.<P>
<h4><FONT COLOR="#000080"><A name="0149_0094">Determining Tense with No Auxiliary<A name="0149_0094"></FONT></h4></P>
Some sentences don't have an auxiliary. In these sentences, the processor uses the verb to determine the input sentence tense. When the verb is past tense, then the sentence is past tense. The sentence <I>Jim ran in the race</I> is past tense. When the verb is not past tense, then the sentence tense is unclear. The sentence <I>Jim runs in the race</I> may be present or future tense. The previous three sentences are used to determine the tense when the tense is unclear.<P>
<I>check_aux_verb</I> also processes tense when the input sentence has no auxiliary. The current sentence's subject, action, and possible verb tenses are matched with the previous three sentence's subject, action, and tense. If a match is successful, then the previous sentence tense is assigned to the current sentence tense. If no match is successful, then the current sentence tense is present.<P>
<h4><FONT COLOR="#000080"><A name="0149_0095">Determining Number<A name="0149_0095"></FONT></h4></P>
The sentence subject determines number. The number can be singular or plural depending on whether the subject refers to one or more than one. The sentence <I>He runs in the race</I> shows a singular subject, <I>They run in the race</I> shows a plural subject. The auxiliary, verb, and subject number in a grammatical sentence must be all singular or all plural.<P>
Many verb forms are both singular and plural. For example, <I>running</I> is singular in <I>He is running in the race,</I> and plural in <I>They are running in the race</I>. Many auxiliaries also can be singular and plural. For example, <I>could be</I> is singular in <I>He could be running in the race</I>, and plural in <I>They could be running in the race</I>. But some auxiliaries and verbs can be only singular or plural. <I>check_number</I> matches the auxiliary, verb, and subject number. If the match is successful, the matched number is assigned to the sentence number. If the match is unsuccessful, the sentence number is unknown.<P>
Number is used to identify the correct verb in a generated response. Using number enables the correct verb to be extracted from the dictionary. The sentence <I>Jim runs in the race</I> has a correct verb because <I>Jim</I> and <I>runs</I> are singular. A subject and verb that agree help make the response grammatical and effective.<P>
<h4><FONT COLOR="#000080"><A name="0149_0096">Meaning and the Response<A name="0149_0096"></FONT></h4></P>
The original processor generated only two kinds of responses. It returned a simple <I>OK</I> when given a statement, and someone's location when given a question. The previous sentence that matched the same subject and action words gave the location for the response. Previous sentences were matched by the same words to identify similar information. But similar information is often determined by meaning rather than by the same words.<P>
The expanded response process uses tense and the auxiliary's meaning to help identify similar information, making the natural language processor sound more human. <A href="fig1.htm">Figure 1</a>
shows an example. The processor responded with correct information because it used tense and auxiliary meaning when it matched the sentences. The tense matched because the two sentences refer to past tense. The auxiliary meaning matched because <I>did</I> and <I>had been</I> mean <I>PARTICULAR_POINT_OF_TIME</I><I>.</I><P>
The processor currently assigns auxiliary meaning only when the auxiliary exists. Auxiliary meaning helps match similar information between sentences. A sentence without an auxiliary meaning can't be properly matched to another sentence. A further processor expansion can derive an auxiliary meaning from the sentence when no auxiliary exists. The derived auxiliary meaning will allow a sentence without an auxiliary to be properly matched.<P>
<h4><FONT COLOR="#000080"><A name="0149_0097">Matching Sentences for the Response<A name="0149_0097"></FONT></h4></P>
When the processor generates a response, it searches in previous sentences for similar information. The processor uses the most accurate information in the response. There are four separate matches the processor uses to find information for the response. The first match has the highest probability that the information is accurate, the last match has the lowest probability that the information is accurate. People in conversation respond in a similar manner. A person may not have enough knowledge for a correct response. But that person may create an alternative response to show knowledge about the information.<P>
The first match criterion is subject, action, tense, and auxiliary meaning. Subject and action are always in the match criteria for the response. This ensures that all matched sentences have the same subject and action. The sentences <I>Jim had been running in the race</I> and <I>Where did Jim run?</I> match because <I>had been</I> and <I>did</I> have the same tense and meaning. <I>make_response</I> matches information in the current sentence with information in previous sentences. In the first match, the <I>subjects, actions, tenses</I>, and <I>aux_meaning</I> arrays match the current sentence to a previous sentence. When a match is successful, <I>make_answer</I> generates a response with information from the previous, matched sentence (see <A href="fig1.htm">Figure 1</a>)
.<P>
The second match criterion is subject, action, and tense. The <I>subjects, actions</I>, and <I>tenses</I> arrays match the current sentence to a previous sentence. Here, the sentences <I>Jim had been running in the race</I> and <I>Where would Jim run?</I> match because <I>had been</I> and <I>would</I> have the same tense.<P>
The third match criterion is subject, action, and auxiliary meaning. The <I>subjects, actions</I>, and <I>aux_meaning</I> arrays match the current sentence to a previous sentence. The sentences <I>Jim should have run in the race</I> and <I>Where should Jim run?</I> match because <I>should</I> and <I>should have</I> have the same meaning. The tense is different, and so the response may not give the correct information. Because of this, the processor prefaces the response with <I>I'm not sure, but</I>.<P>
The fourth match criterion is the same as in the original processor. Only subject and action are matched. The <I>subjects</I> and <I>actions</I> arrays match the current sentence to a previous sentence. The sentences <I>Jim is running in the race</I> and <I>Where will Jim run?</I> match because they have the same subject and action. But the tense and auxiliary meaning don't match so the response may be incorrect. Because of this, the processor prefaces the response with <I>I'm not sure, but</I><I>.</I> When the four matches are unsuccessful, the processor can't find the similar information. Then <I>make_response</I> moves the statement <I>I don't know</I> to the response.<P>
<h4><FONT COLOR="#000080"><A name="0149_0098">Extracting the Correct Verb<A name="0149_0098"></FONT></h4></P>
The correct verb helps ensure a grammatical response. <I>make_answer</I> generates a response by moving appropriate words to the response variable. The appropriate subject and auxiliary are first moved to the response. Then <I>get_verb</I> is called to extract the correct verb and move it to the response. <I>get_verb</I> reads each record in the dictionary and calls <I>match_verb</I> to find the correct verb. <I>match_verb</I> matches the passed tense, number, and usage with the tense, number, and usage of the current dictionary record. When a match is successful, the correct verb is extracted from the dictionary and moved to the response. After the verb is extracted, the place where the action occurred is also moved to the response.<P>
<h4><FONT COLOR="#000080"><A name="0149_0099">Processing the Pronoun<A name="0149_0099"></FONT></h4></P>
The processor compares several word types to determine that the sentence agrees in tense and number. Another word type that must agree in number is the pronoun, words such as <I>he</I><I>, </I><I>she</I><I>,</I> and <I>they</I><I>.</I> A pronoun can replace the name in the sentence, and be the sentence subject. Pronouns must be defined in the underlying structures, be identified as singular or plural, and be used properly in a response.<P>
The structure <I>PRON-AUX-VERB-PREP-DET-NOUN</I> (<A href="list1.htm">Listing 1</a>)
 is for a statement, and <I>WH-AUX-PRON-VERB</I> (<A href="list1.htm">Listing 1</a>)
 is for a question. These structures allow the input sentences <I>He is running in the race</I> and <I>Where did he run?</I><P>
Number is extracted from the dictionary and identifies that the pronoun is singular or plural. <I>match_record</I> extracts the pronoun number and assigns it to the subject number. Subject number is used to determine number agreement and to extract the correct verb.<P>
Pronouns in a generated response must have their first letter changed to upper or lower case. If the pronoun is the first word in the response, then it must be uppercase. If the pronoun is not the first word, then it must be lower case. <I>make_answer</I> has the code for the pronoun in a response. The <I>subjects_type</I> array has an entry for each sentence. Each entry identifies that the subject is a name or a pronoun. If the response's subject is a pronoun, then the subject's first letter is changed. <I>check_subject</I> assigns values to the <I>subjects_type</I> array. Pronoun letter change helps the processor use the pronoun properly in a response.<P>
<h4><FONT COLOR="#000080"><A name="0149_009A">Conclusion<A name="0149_009A"></FONT></h4></P>
Several processes are required to process tense and number. The processes described in this article extract auxiliary and verb information; determine tense from the auxiliary and verb, a previous sentence, or with no auxiliary; determine number; match sentences for the response; extract the correct verb; and process the pronoun. Each of these processes is an expansion of the original natural language processor.<P>
Further expansions to the processor can process time features. These expansions identify time words such as <I>last week</I>, match time meaning with auxiliary meaning, generate a response from time meaning, and generate a response to explain time and number errors.<P>
The processes described in this article expand the natural language processor to include tense and number. Tense and number are used to extract the correct verb for a grammatical response. Tense and the auxiliary are used to match similar information between sentences. This match enables the processor to generate a response based on word meaning. These expansions provide the processor with more accurate responses.<P>
(C) Copyright 1993 Russell Suereth.<P>
<h4><FONT COLOR="#000080"><A name="0149_009B">Bibliography<A name="0149_009B"></FONT></h4></P>
Liles, Bruce L. 1971. <I>An Introductory Transformational Grammar.</I> Englewood Cliffs: Prentice-Hall.<P>
Quirk, Randolph, and Sidney Greenbaum. 1973. <I>A Concise Grammar of Contemporary English.</I> San Diego: Harcourt Brace Jovanovich.<P>
Suereth, Russell. April 1993. "A Natural Language Processor." <I>The C Users Journal.</I> Lawrence, KS: R&amp;D Publications.<P>

<h4><a href="../../../source/1993/jun93/suereth.zip">Get Article Source Code</a></h4>

</BODY>
</HTML>
