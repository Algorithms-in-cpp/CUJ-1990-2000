<HTML><HEAD>
<TITLE>June 1993/Code Capsules/Listing 5</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 5<I> Searches a directory tree for a specific entry</I></A></h4>
<pre>/* findfile.c: Search all directories for a file */

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;assert.h&gt;
#include &lt;dirent.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;dir.h&gt;
#include &lt;io.h&gt;
#include &lt;string.h&gt;

/* Change these for UNIX */
#define SEPSTR "\\"
#define OFFSET 2

void visit_dirs(char *dir, char *file);

main(int argc, char *argv[])
{
   if (argc &gt; 1)
   {
      char *file = argv[1];
      char *root = (argc &gt; 2) ? argv[2] : SEPSTR;

      visit_dirs(root,file);
   }
   return 0;
}

void visit_dirs(char *dir, char *file)
{
   DIR *dirp;
   struct dirent *entry;
   struct stat finfo;
   char *curdir = getcwd(NULL,FILENAME_MAX);

   /* Enter the directory */
   assert(chdir(dir) == 0);

   /* Process current directory */
   if (access(file,0) == 0)
   {
      char *tempdir = getcwd(NULL,FILENAME_MAX);
      char *sep = strcmp(tempdir+OFFSET,SEPSTR) ?
                SEPSTR : "";
      printf("%s%s%s\n",
            strlwr(tempdir+OFFSET),sep,strlwr(file));
      free(tempdir);
   }

   /* Descend into subdirectories */
   assert((dirp = opendir(".")) != NULL);
   while ((entry = readdir(dirp)) != NULL)
   {
      if (entry-&gt;d_name[0] == '.')
         continue;
      stat(entry-&gt;d_name,&amp;finfo);
      if (finfo.st_mode &amp; S_IFDIR)
         visit_dirs(entry-&gt;d_name,file);
   }

   /* Cleanup */
   closedir(dirp);
   chdir(curdir+OFFSET);
   free(curdir);
}

/* End of File */
</pre>
</BODY>
</HTML>
