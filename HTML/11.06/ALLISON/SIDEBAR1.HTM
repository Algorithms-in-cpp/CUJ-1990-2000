<HTML><HEAD><TITLE>June 1993/Code Capsules/Sidebar</TITLE></HEAD><BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h3 align="center"><FONT FACE="Garamond" COLOR="#000080">Defensive Programming with <I>assert</I></FONT></h3><hr>
<BLOCKQUOTE>
At key points in well-organized programs you can make assertions, such as "the index points to the next open array element." You should test these assertions during development with the ANSI C <I>assert</I> macro, and document them for the maintenance programmer (who is often yourself). You could represent the assertion above, for example, as<P>
<pre>#include &lt;assert.h&gt;
. . .
assert(nitems &lt; MAXITEMS &amp;&amp; i == nitems);
. . .</pre>
If the condition holds, all is well and execution continues. Otherwise, <I>assert</I> prints a message containing the condition, the file name, and line number, and then calls <I>abort</I> to exit the program.<P>
Use <I>assert</I> to validate the internal logic of your program. If a certain thread of execution is clearly impossible, say so with a call <I>assert (0)</I>:<P>
<pre>switch (color)
{
    case RED:
      . . .
    case BLUE:
      . . .
    case GREEN:
      . . .
    default:
      assert (0);
}</pre>
Every function essentially has a contract with its users to "give me input that satisfies certain conditions and I'll give you this output." You can enforce the contract by validating parameters with <I>assert</I>. A function that takes a string argument, for example, should make sure the string really exists:<P>
<pre>char *f(char *s)
{
  assert(s);
  . . .</pre>
Assertions are for programmer errors, of course, not for end-user errors. Nothing a user does should create a <I>NULL</I> pointer; that's clearly your fault, so it is appropriate to use <I>assert</I> in such cases. My custom is to use asserts generously throughout my code and then replace assertions that might be affected by the user with more bulletproof exception handling. Any remaining assertions should not be needed in released code (because it's debugged, right?), so I define the macro <I>NDEBUG</I> to disable them. You can either include the statement<P>
<pre>#define NDEBUG</pre>
in the beginning of the code, or define the macro on the command line if your compiler allows it. (Most support the <I>-D</I> option for this purpose.) With <I>NDEBUG</I> defined, all assertions expand to a null macro, but the text remains in the code for documentation.<P>
</BLOCKQUOTE>
</BODY>
</HTML>
