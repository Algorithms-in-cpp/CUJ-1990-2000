<HTML><HEAD>
<TITLE>June 1993/Code Capsules/Listing 7</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 7<I> Deletes a directory tree</I></A></h4>
<pre>/* ddir.c: Remove directory tree */

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;io.h&gt;
#include &lt;string.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;assert.h&gt;

/* All POSIX-compliant systems have this one */
#include &lt;dirent.h&gt;

/* Borland C also requires this one */
#include &lt;dir.h&gt;

/* This is required to redirect stderr on DOS */
#include "stderr.h"

/* DOS-specific macros - change for other OS */
#define CMD_FORMAT "del *.* &lt;%s &gt; nul"
#define CMD_LEN 17

/* Change this to "/" for UNIX */
char Response_file[L_tmpnam+1] = "\\";

void rd(char *);
main(int argc, char **argv)
{
   FILE *f;
   char *old_path = getcwd(NULL,FILENAME_MAX);

   /* Create response file for DOS del command */
   tmpnam(Response_file+1);
   assert((f = fopen(Response_file,"w")) != NULL);
   fputs("Y\n",f);
   fclose(f);

   /* Delete the directories */
   while (--argc)
      rd(*++argv);

   /* Clean-up */
   remove(Response_file);
   chdir(old_path);
   free(old_path);
   return 0;
}

void rd(char * dir)
{
   char sh_cmd[L_tmpnam+CMD_LEN];
   DIR *dirp;
   struct dirent *entry;
   struct stat finfo;

   /* Log onto the directory that is to be deleted */
   assert(chdir(dir) == 0);
   printf("%s:\n",strlwr(dir));

   /* Delete all normal files via OS shell */
   hide_stderr();
   sprintf(sh_cmd,CMD_FORMAT,Response_file);
   system(sh_cmd);
   restore_stderr();

   /* Delete any remaining directory entries */
   assert((dirp = opendir(".")) != NULL);
   while ((entry = readdir(dirp)) != NULL)
   {
      if (entry-&gt;d_name[0] == '.')
         continue;
      stat(entry-&gt;d_name,&amp;finfo);
      if (finfo.st_mode &amp; S_IFDIR)
         rd(entry-&gt;d_name);    /* Subdirectory */
      else
      {
         /* Enable delete of file, then do it */
         chmod(entry-&gt;d_name,S_IWRITE);
         assert(unlink(entry-&gt;d_name) == 0);
      }
   }
   closedir(dirp);

   /* Remove the directory from its parent */
   assert(chdir("..") == 0);
   assert(rmdir(dir) == 0);
}

/* End of File */</pre>

</BODY>
</HTML>
