

<HTML>
<HEAD>

<TITLE>June 1993/Code Capsules</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjun.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Code Capsules<A name="01AA_009C"><A name="01AA_009C"></font></h2><P>
<h3 align="center"><A name="01AA_0000"><A name="01AA_0000">File Processing, Part 2</h3><P>
<h3 align="center"><font color="#800000">Chuck Allison</font></h3><hr><blockquote><P>
<P><i><A name="01AA_0000"><A name="01AA_0000">Chuck Allison is a software architect for the Family History Department of the Church of Jesus Christ of Latter Day Saints Church Headquarters in Salt Lake City. He has a B.S. and M.S. in mathematics, has been programming since 1975, and has been teaching and developing in C since 1984. His current interest is object-oriented technology and education. He is a member of X3J16, the ANSI C++ Standards Committee. Chuck can be reached on the Internet at <I></I>allison@decus.org<I></I>, or at (801)240-4510.</i></P><P>
<h4><FONT COLOR="#000080"><A name="01AA_009D">Portability with POSIX<A name="01AA_009D"></FONT></h4></P>
In the early 1980s an organization called /<I>usr</I>/<I>group</I> (the UNIX Users' association, now called Usenix) began an effort to standardize both C and the C programming environment. Much of that they defined applied to all environments and became the basis for the Standard C library. Another part of their work resulted in a set of functions to access UNIX system services (UNIX was the most common C programming environment at the time). These functions constitute the C language bindings of what now is called POSIX (Portable Operating System Interface). Fortunately, many environments (including MS-DOS and of course, the many flavors of UNIX) provide most or all of these functions. POSIX compliance, therefore, can be important when moving applications from one platform to another. Here is a simple recipe for maximizing portability:<P>
1.     Program in Standard C.<P>
2.     If step 1 is too restrictive, use only POSIX-compliant functions.<P>
3.     If steps 1 and 2 aren't possible, isolate system-dependent code in separate modules. This will minimize how much code you'll have to rewrite when porting to another system. There are cross-platform tools available that do some of this work for you.<P>
There is of course much more to POSIX than C language bindings (bindings for other languages and a specification for a command shell, for example). This month's article illustrates most of the POSIX functions that pertain to file processing.<P>
I tested <A href="list1.htm">Listing 1</a>,
 <A href="list2.htm">Listing 2</a>,
 and <A href="list3.htm">Listing 3</a>
with Borland C++ 3.1, Zortech C 3.0, Microsoft C 6.00A, and Mix Software's POWERC 2.20. (If you use Microsoft C/C++ 7.0, you must compile with <I>OLDNAMES. LIB.)</I> Of these four compilers, only Borland's supports the directory I/O functions required for <A href="list4.htm">Listing 4</a>,
 <A href="list5.htm">Listing 5</a>,
 <A href="list6.htm">Listing 6</a>,
 and <A href="list7.htm">Listing 7</a>.
 All seven listings should run on any UNIX platform (with some obvious modifications as described in the comments).<P>
<h4><FONT COLOR="#000080"><A name="01AA_009E">POSIX File I/O<A name="01AA_009E"></FONT></h4></P>
The definition of the <I>FILE</I> structure in your <I>stdio.h</I> include file probably contains an integer that represents a <I>file handle</I> (or file discriptor). (Look for a member named something like <I>fd, _file, or fildes</I>). A file handle, a unique, non-negative integer assigned by the file system, identifies an access path into a file. POSIX file-access functions use file handles instead of file pointers to perform basic operations comparable to those offered in the Standard C library, but with typically less overhead. <A href="tab1.htm">Table 1</a>
contains a comparison of POSIX and Standard C functions. Other POSIX file access-functions are listed in <A href="tab2.htm">Table 2</a>.
<P>
<h4><FONT COLOR="#000080"><A name="01AA_009F">Copying Files<A name="01AA_009F"></FONT></h4></P>
<I>cat.c</I> (<A href="list1.htm">Listing 1</a>)
 copies the files indicated on the command line to standard output. For example, the command<P>
<pre>   cat file1 file2 &gt;file3</pre>
combines <I>file1</I> and <I>file2</I> into a new file, <I>file3.</I> This program uses Standard C functions for reading and writing. The only POSIX functions are in the line<P>
<pre>   FILE *std_out = fdopen (fileno(stdout), "wb");</pre>
This line enables writing to standard output in binary mode, in case one of the user files is not a text file. (See last month's "Code Capsule" for a discussion of binary mode.) It associates a new file pointer with standard output, without creating a new handle. (In other words, the file pointers <I>stdout</I> and <I>std_out</I> share the same file handle.)<P>
The function <I>filecopy</I> (<A href="list2.htm">Listing 2</a>)
 opens an input and an output file in binary mode. The <I>open</I> system call returns -1 if the open fails. (In fact, most POSIX functions return -1 upon failure.) <I>fcntl.h</I> defines the flags used to define <I>INPUT_MODE</I> and <I>OUTPUT_MODE</I>. The third argument in the open of the output file specifies that if the file doesn't already exist, the newly created file should not be write-protected. (<I>sys/stat.h</I> defines <I>S_IWRITE</I>.) Any include file prefixed with <I>sys</I>/ is a POSIX include file (although many, such as <I>io.h</I> and <I>fcntl.h</I>, have no prefix). On most systems, you need to include <I>sys/types.h</I> before <I>sys/stat.h</I>. The <I>read</I> and <I>write</I> functions both return the number of bytes transferred.<P>
The program <I>cp.c</I> in <A href="list3.htm">Listing 3</a>
uses <I>filecopy</I> to copy one or more files to a given directory. The <I>stat</I> function fills a structure with basic file information, including these members:<P>
<pre>   set_mode    file mode (directory indicator, file permissions)
   st_size     file  size in bytes
   st_mtime    time of last data modification</pre>
Testing <I>st_mode</I> with the mask <I>S_IFDIR</I> (from <I>sys/stat.h</I>) determines whether the file is a directory. The forward slash character is a directory separator for pathnames in all POSIX systems. (Note the <I>sprintf</I> statement in function <I>cp.</I>) Only the command line of the MS-DOS shell (<I>COMMAND. COM</I>) requires a backslash character as the separator character. Both slash characters are totally interchangeable within MS-DOS programs. For maximum portability, the names of files and directories should only use characters from the portable filename character set: alphanumerics, the period, and the underscore.<P>
<h4><FONT COLOR="#000080"><A name="01AA_00A0">Reading Directory Entries<A name="01AA_00A0"></FONT></h4></P>
The most widely-used operating systems that support C development today have a hierarchical directory structure. POSIX defines functions to create, delete, and navigate among directories, as well as functions to read the entries in a directory (see <A href="tab3.htm">Table 3</a>)
. The program <I>list.c</I> in <A href="list4.htm">Listing 4</a>
prints a listing of the current directory to standard output. To read a directory, you must first get a pointer to a <I>DIR</I> structure with the <I>opendir</I> function. Successive calls to <I>readdir</I> return a pointer to a <I>struct dirent</I> structure (which contains the entry name) or <I>NULL</I> when all entries have been read. These structures and functions are declared in <I>dirent.h.</I><P>
As shown in <A href="fig1.htm">Figure 1</a>,
 <I>list</I> displays the name, permissions, size, and time of last modification of each file. The characters in the permissions column mean<P>
<UL><li><I>d</I> &#151; the entry is itself a directory</li>
<li><I>r</I> &#151; the user has read permission</li>
<li><I>w</I> &#151; the user has write permission</li></UL>
The file system creates the first two entries: "." refers to the current directory and ".." to its parent. You can't alter them directly (hence no <I>w</I> permission). The token / in POSIX functions (and \ in MS-DOS's) refers to the root directory. Since the modification time is a standard time value (<I>time_t</I>), I use the Standard C function <I>ctime</I> to display it. (See the "Code Capsule" in the January 1993 issue for a discussion of time and date functions).<P>
The program <I>findfile.c</I> in <A href="list5.htm">Listing 5</a>
searches a directory tree for all occurrences of a specified entry. On my MS-DOS system, the command<P>
<pre>   findfile himem.sys \</pre>
searches the entire disk for the file <I>himem.sys</I>, and prints<P>
<pre>   \dos\himem.sys
   \windows\himem.sys</pre>
To restrict the search to a specific directory tree, change the second argument, for example, to<P>
<pre>   findfile himem.sys \dos</pre>
To make a UNIX version of this utility, replace the defined constants with<P>
<pre>   #define SEPSTR "/"
   #define OFFSET 0</pre>
<I>OFFSET</I> skips over the disk identifier and colon (e.g., <I>C</I>:) that precede the full pathname returned by <I>getcwd</I> under MS-DOS. The function call <I>getcwd(NULL,FILENAME_MAX)</I> returns a pointer to a dynamically-allocated string that represents the current working directory (<I>FILENAME_MAX</I> is defined in <I>stdio.h</I>). If <I>access(file,0</I>) returns 0, then <I>file</I> exists. (<I>file</I> can also be a directory name.) <I>chdir(dir)</I> makes <I>dir</I> the current working directory. <I>visit_dirs</I>, a recursive function that visits all subdirectories in a directory tree, restores the original working directory when it returns.<P>
<h4><FONT COLOR="#000080"><A name="01AA_00A1">Redirecting Standard Error<A name="01AA_00A1"></FONT></h4></P>
When you enter a command such as<P>
<pre>   cat file1 file2 &gt;file3</pre>
the command shell disconnects the internal file handle for standard output from the console and connects it to <I>file3</I> before it loads the program <I>cat</I>. When <I>cat</I> terminates, the shell reconnects the handle to the console. <A href="list6.htm">Listing 6</a>
shows how to do the same thing with standard error. The function <I>redir_stderr</I> gets a handle to the new destination by calling <I>open</I>. Then it creates a new handle to the original destination with <I>dup</I> (this is for restoring it later). Finally, it redirects the output by disconnecting it from the original destination and connecting it to the new one with <I>dup2.</I><P>
When you don't need the redirection anymore, call <I>restore_stderr</I>, redirects standard error back to its original destination and discards the duplicate handle.<P>
A handle created with <I>dup</I> is "synchronized" with the original, so that if you change file position with <I>lseek</I> on one handle, the position is updated for the other handle also.<P>
You may be wondering why you can't just use a call to <I>freopen</I> to redirect standard error. This works fine within a single program, but <I>freopen</I> has no effect if you initiate another program from within your program (using <I>system</I>, say), because only the local file pointer changes. To have such changes persist across subprocesses you must use <I>dup2.</I><P>
The program <I>ddir.c</I> in <A href="list7.htm">Listing 7</a>
illustrates most of the concepts mentioned in this article. It deletes an entire directory tree by following these steps:<P>
1.     Make the root of the tree the current working directory.<P>
2.     Delete all files within that directory with a shell command (in this case the MS-DOS <I>del</I> command).<P>
3.     Any entry left in the directory is either a <I>protected file</I> or a <I>subdirectory.</I><P>
For a protected file, lower the protection with <I>chmod</I> and delete the file explicitly with <I>unlink.</I> (You can use <I>remove </I>in MS-DOS, but you shouldn't in UNIX; <I>unlink</I> works for both.)<P>
For a subdirectory, recursively repeat the whole process starting with step 1) on the subdirectory.<P>
4.     Ascend to the parent directory and delete the directory in question with <I>rmdir</I>.<P>
All three of standard input, standard output, and standard error are redirected by the time the shell command passed to <I>system</I> is executed. When you issue a shell command to delete all files in a directory (<I>del</I> *. *), MS-DOS prompts you for a confirmation (<I>Y</I> or <I>N</I>). To bypass this prompt, I redirect standard output to the null device (the "bit bucket") so it doesn't appear, and create a file with the letter <I>Y</I> in it and redirect standard input to come from that file, so there is no pause for console input. If any files can't be deleted (or if there are none to delete), MS-DOS sends a message to standard error. I redirect standard error to the null device before calling <I>system</I> so these messages also will not appear.<P>
The functions in this article give you the control over your environment which is critical for robust applications. While these techniques aren't universally portable, they apply to the many platforms that are POSIX compliant (or soon will be, e.g., OpenVMS and Windows NT).<P>
<h4>Sidebar: <a href="sidebar1.htm">"Defensive Programming with <I>assert</I>"</a></h4>

<h4><a href="../../../source/1993/jun93/allison.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
