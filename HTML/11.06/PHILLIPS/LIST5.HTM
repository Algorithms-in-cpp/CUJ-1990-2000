<HTML><HEAD>
<TITLE>June 1993/Image Processing, Part 10: Segmentation Using Edges and Gray Shades/Listing 5</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 5 erode_image_array &#151;<I> the erosion subroutine</I></A></h4>
<pre>    /*******************************************
    *
    *   erode_image_array (..
    *
    *   This function erodes pixels. If a pixel
    *   equals value and has more than threshold
    *   neighbors equal to 0, then set that
    *   pixel in the output to 0.
    *
    *******************************************/

erode_image_array(the_image, out_image, value, threshold)
   short the_image[ROWS][COLS], out_image[ROWS][COLS],
   threshold, value;
{
   int   a, b, count, i, j, k,
        length, width;

     /***************************
     *
     *   Loop over image array
     *
     ****************************/

   for(i=0; i&lt;ROWS; i++)
      for(j=0; j&lt;COLS; j++)
         out_image[i][j] = the_image[i][j];

   printf("\n");

   for(i=1; i&lt;ROWS-1; i++){
      if( (i%10) == 0) printf("%3d", i);
      for(j=1; j&lt;COLS-1; j++){
         if(the_image[i][j] == value){
            count = 0;
            for(a=-1; a&lt;=1; a++){
               for(b=-1; b&lt;=1; b++){
                    if(the_image[i+a][j+b] == 0)
                       count++;
               }  /* ends loop over b */
            }  /* ends loop over a */
            if(count &gt; threshold) out_image[i][j] = 0;
         }  /* ends if the_image == value */
      }  /* ends loop over j */
   }  /* ends loop over i */

)  /* ends erode_image_array */

/* End of File */
</pre>
</BODY>
</HTML>
