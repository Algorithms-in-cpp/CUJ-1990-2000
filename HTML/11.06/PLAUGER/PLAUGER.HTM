

<HTML>
<HEAD>

<TITLE>June 1993/Standard C</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjun.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Standard C<A name="01A2_0094"><A name="01A2_0094"></font></h2><P>
<h3 align="center"><A name="01A2_0000"><A name="01A2_0000">Large Character Set Functions</h3><P>
<h3 align="center"><font color="#800000">P.J. Plauger</font></h3><hr><blockquote><P>
<P><i><A name="01A2_0000"><A name="01A2_0000">P.J. Plauger is senior editor of The C Users Journal. He is convenor of the ISO C standards committee, WG14, and active on the C + + committee, WG21. His latest books are The Standard C Library, published by Prentice-Hall, and ANSI and ISO Standard C (with Jim Brodie), published by Microsoft Press. You can reach him at<I></I> <I>pjp@plauger.com.</I></i></P><P>
<h4><FONT COLOR="#000080"><A name="01A2_0095">Introduction<A name="01A2_0095"></FONT></h4></P>
This is the second in a series of columns on the facilities being added to Standard C. (See "Standard C: Large Character Set Support," <I>C Users Journal,</I> May 1993.) I spent the last column describing the motivation behind adding support for manipulating large character sets in C. I described the changes to existing functions in the Standard C library. I also introduced the new header &lt;<I>wchar.h</I>&gt; that declares all sorts of additional functions.<P>
My goal this month is to show you many of those new functions. I do so in the context of how you might actually <I>use</I> them, should the need arise. One day, your enterprise might feel moved to sell code into Japan, China, or the Arab world. You might find an advantage in writing code that is truly international in its handling of text. Or you might want to manipulate text in numerous fonts and colors. If so, you'll find no more sophisticated machinery than what's already in Standard C, at least not in any other standardized programming language. The additions described here make for a particularly rich environment for manipulating large character sets.<P>
I remind you that what I'm describing here is part of a "normative addendum" to the ISO C Standard. It is still subject to balloting within SC22, the parent committee of the C standards committee WG14. It may change in response to comments or criticism. But we've been reviewing it within WG14 for about three years now. I think it's mostly stable.<P>
<h4><FONT COLOR="#000080"><A name="01A2_0096">Traditional Character Classification<A name="01A2_0096"></FONT></h4></P>
The existing header &lt;<I>ctype.h</I>&gt; declares a number of functions for classifying (one-byte) characters. They have proved their worth in many a C program over the past two decades. An important part of processing text involves classifying characters in various ways. Some of those classifications occur so often that they're worth capturing in standard library functions. Thus, the functions declared in &lt;<I>ctype.h</I>&gt; help you test quickly for characters in a number of common classes. These classes include lower-case letters, upper-case letters, digits, punctuation, and so forth.<P>
Not all the classes are exactly the same across implementations. You can be sure that <I>isdigit</I> returns true (nonzero) only for the ten decimal digits. You can be sure that <I>ispunct</I> returns true for all the punctuation required to write a C program. <I>ispunct</I> also often returns true for such characters as the at sign <I>@</I>, <I>but it doesn't have to</I>. It might return true for additional characters that you don't expect. In short, Standard C says that the punctuation class is to some extent <I>implementation defined</I>.<P>
That's not the end of it. When we put locales in Standard C, we allowed for additional changes to the character classification functions. A program starts out in the <I>"C"</I> locale, where the behavior is pretty traditional. You can call the function <I>setlocale</I>, however, to change to a new locale. If that locale specifies a new category <I>LC_CTYPE</I>, several of the functions declared in &lt;<I>ctype.h</I>&gt; can begin behaving differently. They can recognize additional punctuation, or lower-case letters, or a few other critters.<P>
The proper style these days for classifying characters is thus to use the &lt;<I>ctype.h</I>&gt; functions religiously. They are more likely to get the right answer regardless of execution character set and regardless of current locale.<P>
<h4><FONT COLOR="#000080"><A name="01A2_0097">Wide Character Classification<A name="01A2_0097"></FONT></h4></P>
Now imagine the additional possibilities that come with a <I>really</I> large character set. You still want the old classifications. ASCII is a common subset of the various Kanji codes, for instance. And you still have occasion to parse numbers and names based on English-language rules. But you now face two additional considerations:<P>
<UL><li>The existing character classes may sensibly include characters not representable as single-byte characters.</li>
<li>Some implementations may see fit to define whole new classes of characters.</li>
<li>To address the first consideration, the new header &lt;<I>wchar.h</I>&gt; provides parallels for all the functions delcared in &lt;<I>ctype.h</I>&gt;:</li></UL>
<pre>int iswalnum(wint_t wc);
int iswalpha(wint_t wc);
int iswcntrl(wint_t wc);
int iswdigit(wint_t wc);
int iswgraph(wint_t wc);
int iswlower(wint_t wc);
int iswprint(wint_t wc);
int iswpunct(wint_t wc);
int iswspace(wint_t wc);
int iswupper(wint_t wc);
int iswxdigit(wint_t wc);
wint_t towlower(wint_t wc);
wint_t towupper(wint_t wc);</pre>
I described the new type <I>wint_t</I> last month. It represents all valid values of the wide-character type <I>wchar_t</I>, plus the value <I>WEOF</I> for wide-character end-of-file.<P>
These functions essentially behave the same as their older cousins for characters that are also representable as single-byte characters. (The language in the normative addendum is twisty, but that's what it amounts to.) Some can also return true for additional wide characters, by an extension of the same latitude granted their older cousins.<P>
The parallels break down in two cases, both involving the exclusion of whitespace. The older functions <I>isgraph</I> and <I>ispunct</I> are defined in terms of what other functions accept, minus the space character <I>'</I> <I>'</I>. The newer functions <I>iswgraph</I> and <I>iswpunct</I> are defined in terms of what the analogous functions accept, <I>minus the characters accepted by iswspace</I>. That certainly includes the space character, but it might also include others, even single-byte white-space characters. We on WG14 couldn't resist the temptation to properly generalize these functions, even at the cost of some backward compatibility.<P>
What this means in practice is really rather simple, despite my nit-picking descriptions. You can change your programs to handle large character sets mostly by:<P>
<UL><li>replacing <I>char</I> declarations for text objects with <I>wchar_t</I> declarations</li>
<li>replacing calls to the functions declared in &lt;<I>ctype.h</I>&gt; with their analogs declared in &lt;<I>wchar.h</I>&gt;</li></UL>
If you run into problems, I've indicated a few subtle differences that can bite. Chances are, however, that you will have far more trouble getting the obvious code changes right than finding subtle changes in the definition of white space.<P>
<h4><FONT COLOR="#000080"><A name="01A2_0098">New Classifications<A name="01A2_0098"></FONT></h4></P>
Look at all the ways we've found it convenient to classify one-byte characters over the years. Now imagine all the possibilities when you have a character set with thousands of elements. Actually, not even the Japanese could imagine the new classificationss they might want. The one thing they were sure of is that various people <I>would</I> want new ones.<P>
So what they proposed was an open-ended set of new classifications. An implementation publishes a list of <I>property</I> <I>names</I>. These are just null-terminated strings like so many other names in C. (They could be multibyte strings, but who knows or cares? All you have to do is read them in printed form and be able to reproduce them as string literals in a program you write.)<P>
To make use of one of these new classifications, you obtain its <I>handle</I> by calling the function <I>wctype</I>, declared in &lt;<I>wchar.h</I>&gt;, as in:<P>
<pre>static wctype_t hirigana = wctype("hirigana");</pre>
I described the type <I>wctype_t</I> briefly last month. All you need to know is that it is declared in &lt;<I>wchar.h</I>&gt; as some scalar type that you can use as an argument to <I>iswctype</I> (also declared in that header). <A href="list1.htm">Listing 1</a>,
 for example, shows a possible function that tests whether an entire wide-character string is hirigana. It assumes, of course, that <I>"hirigana"</I> is a legitimate classification name, as in the example above.<P>
How many such classifications are there? That depends on the implementation. Every implementation must accept 11 names, corresponding to the 11 standard classification functions &#151; <I>"alpha", "alnum", "cntrl"</I>, etc. The promise is that an expression such as <I>iswctype(wc, wctype("upper"))</I> is entirely equivalent to <I>iswupper(wc)</I>. An implementation may or may not accept additional names.<P>
The set of accepted classification names can even change with locale. A call to <I>setlocale</I> that changes the category <I>LC_CTYPE</I> can switch to a new set of character classifications. (It can even switch to a new encoding for wide characters, within limits, but that latitude is probably more theoretical than practical.)<P>
As some of you may know, I have an implementation of the Standard C library that includes support for extensible locales. (See my book, <I>The Standard C Library</I>, Prentice Hall, 1992.) I am currently adding the facilities in &lt;<I>wchar.h</I>&gt; to that implementation. The new code supports added notation for locale files, so you can add an open-ended set of wide-character classifications to any locale.<P>
My suspicion is that it will take several years for people to agree on the commonest classifications for each large character set. In the meantime, there's little use to be made of this added capability. Remember, it's not portable, and it's not likely to correspond to anything in existing code. Just bear it in mind for future use.<P>
<h4><FONT COLOR="#000080"><A name="01A2_0099"><I>&lt;string.h&gt;</I><B> Revisited<A name="01A2_0099"></B></FONT></h4></P>
If you like manipulating null-terminated strings of <I>char</I> in C, you'll probably also like doing the same sorts of things with large character sets. So the header &lt;<I>wchar.h</I>&gt; declares analogs for all our old friends from the standard header &lt;<I>string.h</I>&gt; (<A href="list2.htm">Listing 2</a>)
. Note the general substitution of <I>wcs</I> (Wide-Character String) for <I>str</I> (String), except that <I>strstr</I> became the more sensible <I>wcsstr</I> instead of the pedantic <I>wcswcs</I>. You might also note that the lack of any <I>mem</I> analogs in wide-character land. So far, the committee has heard no strong plea for them. You can mostly use the older functions even with the larger character types.<P>
A quick glance reveals that the new functions differ from the older ones in a simple way. Where the functions declared in <I>&lt;</I><I>string.h</I><I>&gt;</I> have an argument or return value that involves type <I>char</I>, the newer functions instead use type <I>wchar_t</I>. Thus, you can convert an existing program that manipulates strings mostly by<P>
<UL><li>replacing pointer to <I>char</I> and array of <I>char</I> declarations for string objects with analogous <I>wchar_t</I> declarations</li>
<li>replacing calls to the <I>str</I> functions declared in &lt;<I>string.h</I>&gt; with their analogs declared in &lt;<I>wchar.h</I>&gt;</li>
<li>fixing calls to the <I>mem</I> functions, where necessary, by multiplying the size arguments by <I>sizeof (wchar_t)</I></li></UL>
WG14 mostly resisted the urge to "fix" the string functions, to ease this sort of migration.<P>
A closer glance, however, reveals that one of the functions has indeed been fixed. The function <I>strtok</I> has always been notorious in the C library. It is the only string function that requires the use of static memory, to retain state information between calls. <I>strtok</I> certainly has plenty of company throughout the rest of the Standard C library. Still, it's a pity that this one function could have been kept pure with just a bit more work, yet traditionally was not.<P>
So WG14 bowed to temptation in this area. The added argument <I>wchar_t **ptr</I> is the address of a pointer object that the caller must provide to the function <I>wcstok</I>. This pointer takes the place of the static memory used in the older <I>strtok</I>. By providing pointers to different objects, you can keep track of where you are in different wide-character strings. Thus, you can now parse multiple (wide character) strings at the same time. The cost is that you have more work to do in converting existing code.<P>
<h4><FONT COLOR="#000080"><A name="01A2_009A"><I>&lt;time.h&gt;</I><B> Revisited<A name="01A2_009A"></B></FONT></h4></P>
The header <I>&lt;time.h&gt;</I> has three functions that produce null-terminated character strings. Two are the traditional functions <I>asctime</I> and <I>ctime</I>. The third is the function invented by X3J11, <I>strftime</I>. You can do essentially everything with the new function, and then some, that you could do with the older ones. Hence, WG14 decided to provide a wide-character version of only the new one:<P>
<pre>size_t wcsftime(wchar_t *s, size_t maxsize, const wchar_t *format,
   const struct tm *timeptr);</pre>
<I>wcsftime</I> differs from <I>strftime</I> in two ways:<P>
<UL><li>Its <I>format</I> argument, which controls the formatting of the generated string, is a wide-character string.</li>
<li>The generated string is also a wide-character string.</li></UL>
Note that <I>strftime</I> treats its <I>format</I> argument as a multibyte string. Assuming the implementation is tidy enough, it can thus also generate well-formed multibyte strings. Hence, the existing C Standard already provides all the machinery needed to format times using large character sets.<P>
WG14 nevertheless elected to add <I>wcsftime</I>. The idea is to eliminate wherever possible the need to represent any multibyte strings within a program. That in turn eliminates the need to convert back and forth between multibyte and wide character forms. And that, in the short run, makes it easier to convert programs to manipulating text represented with a large character set instead of the current single-byte sets. In the long run, that will also keep programs cleaner.<P>
So to convert time strings to wide-character form:<P>
<UL><li>First convert any calls to <I>asctime</I> or <I>ctime</I> to their equivalents in terms of <I>strftime</I>.</li>
<li>Replace pointer to <I>char</I> and array of <I>char</I> declarations for string objects with analogous <I>wchar_t</I> declarations.</li>
<li>Replace calls to <I>strftime</I> with calls to <I>wcsftime</I>, declared in <I>&lt;wchar.h&gt;</I>.</li></UL>
<h4><FONT COLOR="#000080"><A name="01A2_009B"><I>&lt;stdlib.h&gt;</I><B> Revisited<A name="01A2_009B"></B></FONT></h4></P>
A handful of the functions declared in <I>&lt;stdlib. h&gt;</I> convert arithmetic representations to text strings &#151; <I>strtod, strtol</I>, and <I>strtoul.</I> These three functions now have wide-character analogs:<P>
<pre>double wcstod(const wchar_t *nptr, wchar_t **endptr);
long int wcstol(const wchar_t *nptr, wchar_t **endptr, int base);
unsigned long int wcstoul //(const wchar_t *nptr, wchar_t **endptr, int base);</pre>
Again, the new versions don't add much new functionality. The characters they generate are all representable in single-byte form. (A possible exception is how an implementation chooses to print an overflow or other forms such as NaNs, but that is not likely to involve much Arabic or Kanji.) What you win, once again, is the ability to work purely with wide-character strings.<P>
On the other hand, several other functions declared in <I>&lt;stdlib.h&gt;</I> have been supplemented considerably. These are the ones that help you walk along multibyte strings, or that convert between multibyte and wide-character forms. We added them because experience to date says we should. Each fills some gap we found in the minimal set of conversion functions in the current C Standard.<P>
The first addition looks simple enough:<P>
<pre>int wctob(wint_t wc);</pre>
This function takes a wide-character argument (or <I>WEOF</I>, as I discussed last month). It determines whether that wide character can be represented as a single-byte multibyte character in the initial shift state. If that is possible, the function returns the value of the single-byte representation. Otherwise, it returns <I>EOF</I>. (Note that the <I>int</I> return is really the "metacharacter" type used by <I>fgetc</I> and other functions, as I also discussed last month.)<P>
What does <I>wctob</I> buy you? It is certainly convenient, for one thing. It's a nuisance to do the equivalent using existing functions:<P>
<UL><li>Set up a wide-character string consisting of the argument <I>wc</I> followed by a null wide character.</li>
<li>Convert it to a multibyte string in yet another buffer, by calling <I>wcstombs</I>.</li>
<li>Check that the converted string consists of a single (non-null) character, followed by the null terminator.</li>
<li>Pick up that character as the value of interest, then clean up the mess.</li></UL>
But nuisancy as this sequence is, it is still not guaranteed to give you what you want. The C Standard does <I>not</I> require that <I>wcstombs</I> generate the most economical string (although it probably will). It might have redundant shift codes at the start and/or end of the converted string. Thus, <I>wctob</I> is both essential and convenient. It even turns out to simplify the description of other functions.<P>
<h4><FONT COLOR="#000080"><A name="01A2_009C">Remembering Shift States<A name="01A2_009C"></FONT></h4></P>
I noted earlier that <I>strtok</I> had the bad grace to retain static memory. Well, X3J11 had the bad grace to indulge that same unfortunate practice in some of the functions we added. Among these were the functions that convert back and forth between wide-character and multibyte encodings. We did so to keep the external interfaces simpler, figuring that the functions wouldn't be used that often. We were wrong.<P>
So part of the proposed addition is a set of functions that do the same as existing conversion functions, but ask the caller to provide a pointer to the state memory. (Note the similarity to <I>wcstok</I>, described above.) The functions use the state memory to keep track of the current shift state, for multibyte encodings that are state dependent, that is. You provide a pointer to an object of (nonarray) type <I>mbstate_t</I>, declared as usual in <I>&lt;wchar. h&gt;</I>.<P>
The functions decide how best to use this storage on your behalf. You can initialize the <I>mbstate_t</I> object to zero and be sure that it represents the initial shift state. Or you can call any of several functions (described below) in such a way that they enter the initial shift state. You can also test such an object to see whether it represents the initial shift state, by calling the function:<P>
<pre>int sisinit(const mbstate_t *ps);</pre>
The functions that use this new state memory are analogous to existing functions, with an <I>r</I> (for Restartable) added in the middle of the name:<P>
<pre>int mbrlen(const char *s, size_t n, mbstate_t *ps);
int mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps);
int wcrtomb(char *s, wchar_t wc, mbstate_t *ps};
size_t mbsrtowcs(wchar_t *dst, const char **src, size_t len, mbstate_t *ps);
size_t wcsrtombs(char *dst, const wchar_t **src, size_t len, mbstate_t *ps);</pre>
You can convert from using the existing functions mostly by providing your own state objects, but even that is optional. All these functions supply their own internal state, just like the bad old days, if you ask them. The harder part of the conversion involves a number of small changes in behavior, which I won't bother to describe here. I suspect very few readers of this column today have invested much in code that fiddles with large character sets already.<P>
<h4><FONT COLOR="#000080"><A name="01A2_009D">Coming Soon<A name="01A2_009D"></FONT></h4></P>
There is still one batch of added functions that I have yet to describe. They let you read and write new creatures called <I>wide-character streams.</I> That is the topic of next month's column.<P>

<h4><a href="../../../source/1993/jun93/plauger.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
