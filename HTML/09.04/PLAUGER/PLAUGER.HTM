


<HTML>
<HEAD>

<TITLE>April 1991/Standard C</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocapr.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Standard C<A name="00B0_006E"><A name="00B0_006E"></font></h2><P>
<h3 align="center"><A name="00B0_0000"><A name="00B0_0000">Implementing &lt;locale.h&gt;</h3><P>
<h3 align="center"><font color="#800000">P.J. Plauger</font></h3><hr><blockquote><P>
<P><i><A name="00B0_0000"><A name="00B0_0000">P.J. Plauger is senior editor of The C Users Journal. He is secretary of the ANSI C standards committee, X3J11, and convenor of the ISO C standards committee, WG14. His latest book is Standard C, which he co-authored with Jim Brodie. You can reach him at pjp@plauger.uunet.</i></P><P>
<h4><FONT COLOR="#000080"><A name="00B0_006F">Introduction<A name="00B0_006F"></FONT></h4></P>
Last month, I introduced the header <I>&lt;locale.h&gt;</I> and described its brief history. I showed how to adapt a program to the default locale, and how to partially revert behavior to the <I>"C"</I> locale when necessary. Now it's time to look at some implementation details.<P>
The easiest part is the function <I>localeconv</I>. All it must do is return a pointer to a structure describing (parts of) the current locale. That structure has type <I>struct lconv</I>, which is defined in <I>&lt;locale.h&gt;</I>. Here are the easy parts of the implementation. <A href="list1.htm">Listing 1</a>
shows the file <I>locale.h.</I> <A href="list2.htm">Listing 2</a>
shows <I>localeco.c</I>. (The name is chopped to eight letters because of file naming restrictions on MS-DOS and other systems.) Packed in with <I>localeconv</I> are the structures holding the current and <I>"C"</I> locales.<P>
I have defined additional fields in <I>struct lconv</I>, over and above those specified by the C Standard. One field points at the name of the locale. Another links these structures together into a list. (Initially, the <I>"C"</I> locale is the only entry on the list.) The remaining fields contain information that changes with a change in locale. The Standard C library I have written defines several such fields. Here, I show only the ones that I've discussed in earlier columns. You can see what is involved in controlling the tables used by the functions in <I>&lt;ctype. h&gt;</I>.<P>
<h4><FONT COLOR="#000080"><A name="00B0_0070">What the Standard Says<A name="00B0_0070"></FONT></h4></P>
The <I>setlocale</I> function introduces many more implementation isses than <I>localeconv</I>. I showed what the Standard says about <I>localeconv</I> last month. Here is what it has to say about <I>setlocale:</I><P>
<h4><FONT COLOR="#000080"><A name="00B0_0071">4.4.1 Locale Control<A name="00B0_0071"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="00B0_0072">4.4.1.1 The <B><I>setlocale</I></B> Function<A name="00B0_0072"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="00B0_0073">Synopsis<A name="00B0_0073"></FONT></h4></P>
<pre>#include &lt;locale.h&gt;
char *setlocale(int category,
const char *locale);</pre>
<h4><FONT COLOR="#000080"><A name="00B0_0074">Description<A name="00B0_0074"></FONT></h4></P>
The <I>setlocale</I> function selects the appropriate portion of the program's locale as specified by the <I>category</I> and <I>locale</I> arguments. <I>setlocale</I> can change or query the program's entire current locale or portions thereof. The value <I>LC_ALL</I> for <I>category</I> names the program's entire locale; the other values for <I>category</I> name only a portion of the program's locale. <I>LC_COLLATE</I> affects the behavior of the <I>strcoll</I> and <I>strxfrm</I> functions. <I>LC_CTYPE</I> affects the behavior of the character handling functions101 and the multibyte functions. <I>LC_MONETARY</I> affects the monetary formatting information returned by localeconv. <I>LC_NUMERIC</I> affects the decimal-point character for the formatted input/output functions and the string conversion functions, as well as the non-monetary formatting information returned by the <I>localeconv</I> function. <I>LC_TIME</I> affects the behavior of the <I>strftime</I> function.<P>
A value of "<I>C</I>"for <I>locale</I> specifies the minimal environment for C translation; a value of <I>" "</I> for <I>locale</I> specifies the implementation-defined native environment. Other implementation-defined strings may be passed as the second argument to <I>setlocale</I>.<P>
At program startup, the equivalent of<P>
<pre>setlocale(LC_ALL, "C");</pre>
is executed.<P>
The implementation shall behave as if no library function calls <I>setlocale</I>.<P>
<h4><FONT COLOR="#000080"><A name="00B0_0075">Returns<A name="00B0_0075"></FONT></h4></P>
If a pointer to a string is given for <I>locale</I> and the selection can be honored, the <I>setlocale</I> function returns a pointer to the string associated with the specified <I>category</I> for the new locale. If the selection cannot be honored, <I>setlocale</I> returns a null pointer and the program's locale is not changed.<P>
A null pointer for <I>locale</I> causes <I>setlocale</I> to return a pointer to the string associated with the <I>category</I> for the program's current locale; the program's locale is not changed.102<P>
The pointer to string returned by <I>setlocale</I> is such that a subsequent call with that string value and its associated category will restore that part of the program's locale. The string pointed to shall not be modified by the program, but it may be overwritten by a subsequent call to <I>setlocale</I>.<P>
<B>Forward references:</B> formatted input/output functions (4.9.6), the multibyte character functions (4.10.7), the multibyte string functions (4.10.8), string conversion functions (4.10.1), the <I>strcoll</I> function (4.11.4.3), the <I>strftime</I> function (4.12.3.5), the <I>strxfrm</I> function (4.11.4.5).<P>
<B>Footnotes:</B><P>
101. The only functions in 4.3 whose behavior is not affected by the current locale are <I>isdigit</I> and <I>isxdigit</I>.<P>
102. The implementation must arrange to encode in a string the various categories due to a heterogeneous locale when <I>category</I> has the value <I>LC_ALL.</I> [<I>end of excerpt</I>] <P>
<h4><FONT COLOR="#000080"><A name="00B0_0076">Implementing <B><I>setlocale</I><A name="00B0_0076"></B></FONT></h4></P>
<I>setlocale</I> clearly has a number of tasks to perform. It must determine what locales to switch to, based on the category and name you specify when you call the function. It must find locales already in memory, or read in newly specified locales from a file. (I describe the general case, of course. A minimal implementation can recognize only the <I>"C"</I> and <I>" "</I> locales, which can be the same.) And it must return a name that it can later use to restore the current locale.<P>
The last task is one of the hardest because you can construct a <I>mixed locale</I>, containing categories from various locales. For example, you can write:<P>
<pre>#include &lt;locale.h&gt;
.....
   char *s1, s2;
   
   setlocale(LC_ALL, "");
   s1 = setlocale(LC_CTYPE, "C");
   if ((s2 = malloc(strlen(s1) + 1)))
      strcpy(s2, s1);</pre>
The first call switches to the <I>native</I> locale, which is some locale preferred by the local operating environment. The second call reverts one category to the <I>"C"</I> locale. You must make a copy of the string pointed to by <I>s1</I> because intervening calls to <I>setlocale</I> might alter it. If you later make the call<P>
<pre>setlocale(LC_ALL, s2);</pre>
the locale reverts to its earlier mixed state.<P>
<I>setlocale</I> must contrive a name that it can later use to reconstruct an arbitrary mix of categories. The C Standard doesn't say how to do this, or what the name looks like. It only says that an implementation must do it.<P>
The scheme I settled on was to paste qualifiers on a locale name if it contains mixed categories. Say, for example, that the base locale is <I>"USA"</I>. That gives you American date formats, the English alphabet, and so on. But an application adapts the monetary category to the special conventions of accounting &#151; a locale exists called <I>"acct"</I>. The name that characterizes this mixed locale is <I>"USA;monetary:acct"</I>.<P>
I use semicolons to separate components of the mixed locale name. Within a component, a colon separates a category name from its locale name. The base locale has no category name qualifier. When <I>setlocale</I> constructs a name, it adds components only for categories that differ from the base locale.<P>
Perhaps now you can understand some of the complexity of <I>setlocale</I>. <A href="list3.htm">Listing 3</a>
shows the source file <I>setlocal.c.</I> Much of its logic is concerned with parsing a name to determine which locale to use for each category. Another big chunk of logic builds a name that <I>setlocale</I> can later digest. Everything else is small potatoes by comparison.<P>
To determine the native locale, I inspect the environment variable <I>LOCALE</I>. That strikes me as a reasonable channel for determining what locale to favor. It's akin to using the environment variable <I>TZ</I> to determine what time zone you're in. The environment variable is inspected at most once during program execution.<P>
You will also see code that copies information into the <I>"C"</I> locale on the first call to the function. I adopted that ruse to avoid a nasty snowball effect. It's easy enough to pile all the various locale-dependent tables into one structure. Do so, however, and you get the whole snowball regardless of how little of it you use. I felt it was better to have <I>setlocale</I> do a bit more work to avoid this problem. You don't want to drag in 10Kb of code when you use only <I>isspace</I> from the library.<P>
I offloaded some of the work to an internal function called <I>_Getloc</I>. <A href="list4.htm">Listing 4</a>
shows the file <I>xgetloc.c</I>, or at least most of it. This function determines whether a locale exists in memory. If a locale does not exist in memory, <I>_Getloc</I> should go looking for it. I have stubbed that code out for this presentation, because it takes a whole column just to describe how you can make your own locale files and read them in at runtime.<P>
<A href="list5.htm">Listing 5</a>
shows the file <I>xsetloc.c</I>. It contains the function <I>_Setloc</I>, which actually copies new information into the current locale. It also copies information out to the various bits of static data affected by changes in the locale. A call to <I>setlocale</I> drags in all this stuff. I don't know how to avoid this particular snowball. At least you can avoid it if you leave locales alone.<P>
I have tested this code at least superficially. It should not contain major errors. Be wary of small gaffes, however.<P>
<h4><FONT COLOR="#000080"><A name="00B0_0077">Conclusion<A name="00B0_0077"></FONT></h4></P>
What I have presented here is just the basic machinery you need to support locales. It is enough to let you build additional locales directly into the library. Just add static declarations of type <I>struct lconv</I> and initialize them as you see fit. Be sure to change<I>_Clocale._Next</I> to point at the list you add.<P>
The real fun of locales is defining an open-ended set. To do that, you must be able to specify a locale without altering C code. I have developed considerable additional machinery that lets you do so. Next month, I will show you the code that reads locale files.<P>

<h4><a href="../../../source/1991/apr91/plauger.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
