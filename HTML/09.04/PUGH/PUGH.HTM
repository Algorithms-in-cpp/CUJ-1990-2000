


<HTML>
<HEAD>

<TITLE>April 1991/Questions and Answers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocapr.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Questions and Answers<A name="00B4_0072"><A name="00B4_0072"></font></h2><P>
<h3 align="center"><A name="00B4_0000"><A name="00B4_0000">More Pointer Problems</h3><P>
<h3 align="center"><font color="#800000">Ken Pugh</font></h3><hr><blockquote><P>
<P><i><A name="00B4_0000"><A name="00B4_0000">Kenneth Pugh, a principal in Pugh-Killeen Associates, teaches C language courses for corporations. He is the author of C Language for Programmers and All On C, and was a member on the ANSI C committee. He also does custom C programming for communications, graphics, image databases, and hypertext. His address is 4201 University Dr., Suite 102, Durham, NC 27707. You may fax questions for Ken to (919) 493-4390. When you hear the answering message, press the * button on your telephone. Ken also receives email at kpugh@dukemvs.ac.duke.edu (Internet).</i></P><P>
<B><B>Q</B></B><P>
I have a wall full of technical manuals, none of which even begins to discuss the <I>OBJ</I> file format. Can you tell me where I can get information on <I>OBJ</I> file internals?<P>
Dennis Taylor <br>
Vancouver, BC<br>
CANADA<P>
<B>A</B><P>
You did not say which system you are working on. The Intel Relocatable Object Module Format is in the back of the <I>Microsoft MS-DOS Programmer</I>'<I>s Reference Manual</I>. The date on this edition is 1984. Perhaps they have removed it from the later editions.<P>
<B>Q</B><P>
I hope you can help me. I have a problem compiling a certain C source code (<A href="list2.htm">Listing 2</a>)
 with Microsoft Quick C.<P>
The file is <I>DSAT.C</I><I>,</I> a dynamic string array test program. It consists of three functions plus a <I>main</I> to coordinate them. The first, <I>wordcount</I>, is flawless. The second, <I>str_to_ptrarray</I>, does not work the way I want it to, and I do not know why.<P>
The <I>str_to_ptrarray</I> function should break the passed string into words (characters separated with a space) and compose a null-terminated string array of the words in the pointer array supplied. The function returns the number of words.<P>
Hence,<P>
<pre>int nwords;
char mystr[ ] = "This is a test.",
   **strlist;
nwords = str_to_ptrarray(mystr,
   &amp;strlist);</pre>
should return the values with results as in <A href="list1.htm">Listing 1</a>.
<P>
The function allocates all space necessary for the transformation and I want to keep it that way! I do not want to have to calculate memory usage each time I call the function separately &#151; I want the function to handle it.<P>
Inside the function, it works perfectly with QuickC 2.00 (as you can see with my four lines of debugging), but outside the function (back in <I>main</I>, for example) the work has gone poof. I get the first element along with a null pointer assignment runtime error (R6001). With QuickC 2.51, it does not seem to do anything, and the compiler gives me a Near Pointer Error.<P>
Then <I>free_ptrarray</I> simply frees the memory allocated by the <I>str_to_ptrarray</I> function.<P>
I have looked at this for too long. I need your help. Why does this not work? Am I missing a fundamental rule of C programming? Please please please help! Your time is profoundly appreciated. Thank you.<P>
Anthony Whitford<br>
Sidney, BC<br>
CANADA<P>
<B>A</B><P>
Ah, triple pointers &#151; more than twice as bad as double pointers. I have to admit, it took me a few minutes to figure out what was wrong with your program. I got slightly different errors the first time I ran it, but that was due to mistyping. For future reference, if you or another reader has a problem, please send the code on a 5.25-inch MS-DOS disk.<P>
Your problem revolves around the precedence of the index operator <I>[ ]</I> and the indirection operator *. The former has higher precedence.<P>
<pre>*ptrarray [count]</pre>
is evaluated as:<P>
<pre>* (ptrarray [count])</pre>
or equivalently as:<P>
<pre>* (* (ptrarray + count))</pre>
This adds the value of <I>count</I> to <I>ptrarray</I> before doing the indirection.<P>
What you want is:<P>
<pre>(*ptrarray) [count]</pre>
which is equivalent to:<P>
<pre>* ((*ptrarray) + count)</pre>
Simply replace all instances of <I>*ptrarray[x]</I> with <I>(*ptrarray)[x]</I>, and your problems should be solved.<P>
The lines below <I>/* THIS IS A NEW PRINTF */ </I>clarify the difference. Run your program again and see what values are printed out. (If you use the large memory model, use <I>"%lx".</I>)<P>
Two brief comments on the code. First, I dislike dealing with anything more than double pointers. You can eliminate the use of the double pointer (except for the actual assignment to the parameter) by having a local variable called <I>local_ptr_array</I> and declared as:<P>
<pre>char **local_ptr_array;</pre>
The code would read like:<P>
<pre>if  ((local_ptr_array =
   (char **)calloc(words + 1,...)))
. . .
local_ptr_array[index] = . . .</pre>
At the end, simply code:<P>
<pre>/*  Set the address in the parameter */
*ptr_array = local_ptr_array;</pre>
This would have eliminated your problems, because no indirection operator would have been involved.<P>
Second, I would replace the calls to <I>calloc</I> as:<P>
<pre>(*ptrarray) [index] =
   (char *)calloc((size_t)(strlen(cptr) + 1),
      sizeof (**ptrarray [index] ) );</pre>
with:<P>
<pre>(*ptrarray) [index] =
   (char *)calloc((size_t)(strlen(cptr) + 1),
      sizeof(char));</pre>
Since you cast the return to <I>char</I> *, the size of the elements should be the size of a <I>char</I>. Although your approach is technically correct, it appears slightly less readable.<P>
<B><B>Q</B></B><P>
I need to be able to execute a program (<A href="list3.htm">Listing 3</a>)
 in UNIX, and no matter what the return value for that program is, I need to return zero (success). This is because my menu system beeps and displays unwanted messages when the user hits the interrupt key to abort the program.<P>
My solution is to write a shell program that performs the following:<P>
<pre>1) fork a process
2) if parent then
   2.1. ignore interrupt
   2.2. wait for child to finish
3) if child then
   3.1. execute the program passed as an argument
4) return zero</pre>
The problem is that if the interrupt key is pressed, then the program returns 2000 instead of zero. If the program ends normally, then the program returns zero (fine). Also, if I instruct the program to return any value other than zero, it does so even if the interrupt key is pressed (as it should).<P>
Tim Riley<br>
Miami Lakes, FL<P>
<B>A</B><P>
Good question. I tried it on my UNIX machine (a Sequent) and got exactly the same results as you did. It looks OK to me (either that or I'm tired out after considering triple pointers). Any thoughts out there? (KP)<P>
<h4><FONT COLOR="#000080"><A name="00B4_0073">Reader's Replies<B><A name="00B4_0073"></B></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="00B4_0074">The Function Prototype<B><A name="00B4_0074"></B></FONT></h4></P>
I write regarding Firdaus Irani's Q?/A! question about his problems with the compare function for <I>qsort</I> in Turbo C++ (which you duplicated in Microsoft C). I may have missed something, but my understanding is that <I>qsort</I> is defined as accepting a pointer to a function that returns an <I>int</I> and takes two <I>const void</I> * parameters. Thus, when Mr. Irani defined his function as taking two <I>unsigned char</I> ** parameters, there was a mismatch. I have used the <I>qsort</I><I> </I>function under Turbo C, Turbo C++, Microsoft C 5.1 and 6.0, and IBM C/400 (on the AS/400), and the implementation has always been as described. Further, the documentation with both Turbo C(++) and Microsoft C state that <I>qsort</I> is defined in ANSI C.<P>
To use <I>qsort</I> as Mr. Irani desires, he should declare his function as:<P>
<pre>int comp (const void *, const void *);</pre>
and call <I>qsort</I> just as he did. His <I>comp</I> function should be as follows:<P>
<pre>int comp (void const *a, void const *b)
   {
   return (strcmp(*((unsigned char **) a),
                   *((unsigned char **) b));
}</pre>
The casts take care of the warnings on the parameters to the <I>strcmp</I> function.<P>
The important thing to note here is that the <I>const void *</I> parameters to the compare function of <I>qsor</I><I>t</I> are so that any type of item can be compared. For instance, in a utility I have written, I have a structure I use for building a typical directory tree, defined as follows:<P>
<pre>typedef struct
   {
   char achPathName[MAXPATH];
      //MAXPATH is defined in the C header files
   char achPathPic[MAXPATH];
   unsigned short usPath Level;
   } DIR_INFO;</pre>
This structure is used to hold a directory path name (such as <I>C: \TC\INCLUDE</I>), a path "picture" that corresponds to the path name (such as -- --<I>INCLUDE</I>), and the level of the directory, the root being 0. An array of these structures is declared as:<P>
<pre>DIR_INFO stDirInfo[MAX_DIRS];
   //MAX_DIRS is a #define</pre>
After filling this array using <I>findfirst</I> and <I>findnext</I>, I want to sort it alphabetically (yet maintain the proper levels). To do this I declare a compare function for <I>qsort</I>:<P>
<pre>int DirSort(const void *, const void *);</pre>
I then call <I>qsort</I> with:<P>
<pre>qsort(stDirInfo, usCurNumDirs,
   sizeof(stDirInfo[0]), DirSort);
   //usCurNumDirs = # of directories found</pre>
The <I>DirSort</I> function is shown in <A href="list4.htm">Listing 4</a>.
<P>
Using the <I>(DIR_INFO *)</I> cast, I can sort the array of structures based on a structure member.<P>
Again, I may have missed something, but I thought the usage was straightforward. Despite PJP's note to the contrary, I certainly don't see how this is a bug in Turbo C++, especially if this is the ANSI definition for the <I>qsort</I> function.<P>
A. Donnie Hale, Jr.<br>
Hilliard, OH<P>
Regarding the TC++ question from Firdaus Irani, I have come across the same question and solved it in <A href="list5.htm">Listing 5</a>.
 As I think about it, I think that TC++ is correct, because as I understand C++ will not automatically cast a void pointer, it must be done explicitly. The following works correctly and does not require changes to the <I>stdlib.h.</I><P>
I greatly appreciate your column, many of the questions hit close to home.<P>
Jay Holovacs<br>
Warren, NJ<P>
In regard to a question from Firdaus Irani in the December 1990 issue of the <I>C User</I>'<I>s Journal</I>, page 92, using <I>qsort</I>.<P>
The problem is not in the Turbo C++, but in Firdaus Irani's usage of the function. First, any compare function always has the prototype:<P>
<pre>int compare(const void *, const void *);</pre>
The arguments to the compare function are then cast to the appropriate type within the user-defined compare function.<P>
My example (see <A href="list6.htm">Listing 6</a>)
 has three different sort functions. I read in a list of student names and their corresponding grades. The three data structures are:<P>
<UL><li>n array of a structure containing the students' names and grades,</li>
<li>n array of the students' names, and</li>
<li>n array of the students' grades.</li></UL>
Each structure is sorted (the array of structure is sorted by its grade entry) and the results were printed.<P>
<pre>Input file used:

Martin    3.5
Sheila    4.0
Marcel    2.7
Henry     2.9
Kemberly  3.8
Cindy     1.7</pre>
The resulting output file (sorted structure, sorted names, sorted grades):<P>
<pre>Cindy     1.70  Cindy     1.70
Marcel    2.70  Henry     2.70
Henry     2.90  Kimberly  2.90
Martin    3.50  Marcel    3.50
Kimberly  3.80  Martin    3.80
Sheila    4.00  Sheila    4.00</pre>
The user must cast the argument type within the compare function (see the compare function definitions). I do not think that there is a bug in Turbo C++'s <I>qsort.</I><P>
Martin Schlapfer<br>
Scotts Valley, CA<P>
I have enclosed a question and answer from your December 1990 <I>C Users Journal</I> column. I think both you and P.J. Plauger missed the boat on this one.<P>
F. Irani asks why he gets an error when attempting to use <I>qsort</I>. He changed the prototype for <I>qsort</I> in <I>stdlib.h</I> to get rid of the error message <I>(!)</I> and asks "Does that mean I have to make changes to <I>stdlib</I> every time I try to compile a program using <I>qsort</I> that calls a compare function with different parameter types?". He says he got no help from Borland tech support. I don't think he got any from you or PJP either.<P>
I think you should have answered him like this:<P>
Don't change your <I>stdlib.h</I><I>.</I> The prototype for <I>qsort</I> indicates what <I>qsort</I> expects from you, and fooling the compiler is not the answer. The answer is to give <I>qsort</I> just what it expects: a compare function that is defined to receive <I>void</I> * pointers. If you are actually comparing <I>unsigned char</I> **, then you must use a cast inside your compare function.<P>
For example your <I>comp</I> should have been:<P>
<pre>int comp(const void *a, const void *b)
   {
   return strcmp((char *)*(unsigned char **)a,
                 (char *)*(unsigned char **)b);
}</pre>
Note the casts to <I>char</I> *. This is because <I>strcmp</I> is defined to expect <I>char</I> *, even though it is guaranteed to compare the strings as if they are unsigned characters. (See sec. 4.11.4 in the ANSI standard.)<P>
Now, aside from the annoying error messages, why is it wrong to define the compare function to accept something other than <I>void</I> * pointers?<P>
When you call a function, you must pass it what it expects. Likewise, when a library function calls your function, your function must expect what the library function passes. There is nothing in the standard to prevent an implementation from having different representations for different types of pointers (except that <I>void * </I>pointers must have the same representation and alignment requirements as <I>char</I> * pointers, according to sec. 3.1.2.5). If a function call passes <I>void *</I> and the function is defined to expect <I>unsigned char</I> **, anything can happen. This is potentially just as dangerous as passing an <I>int</I> to a function expecting a <I>long.</I> The function picks up what it expects from the stack (or registers), and it had better be right. The whole purpose of the prototype system is to protect against mistakes like these, and arbitrarily changing a prototype to get rid of an error or warning message is like turning off an alarm system because it keeps going off. Better to find the problem, understand it, and fix it.<P>
P.S. It occurs to me that some of the misunderstanding may be due to a perception that, since <I>void *</I> pointers may be arbitrarily assigned to and from other pointer types without casts, that they may also be passed to a function expecting a different pointer type, or that a function defined to accept a <I>void *</I> may be passed a different type. This is wrong. The compiler "knows" how to deal with assignments and can do the necessary casting automatically. The compiler can automatically cast a pointer when it is passed, if a prototype is in scope. But in the case of <I>qsort</I>, the calling is being done "blindly" by <I>qsort</I>, which has no knowledge of what it is really dealing with. So it passes <I>void</I> * pointers. There is no way for the compiler to automatically convert these on the "receiving end."<P>
Raymond Gardner<br>
Englewood, CO<P>
You are right that there are some misconceptions with pointers to <I>void</I>. C++ has tightened the usage of <I>voi</I><I>d</I> pointers, so that assignment requires a cast, but Standard C permits assignments without casts. For the benefit of our readers, let's examine the uses for <I>void</I> pointers. The major area is in places where <I>char</I> * was employed before. For example, the prototype for <I>memset</I> is:<P>
<pre>memset(void *address, int byte, size_t length);</pre>
We can pass <I>memset</I> something like:<P>
<pre>struct s_test
   {
   int member;
   . . .
   };
struct s_test test;
memset(&amp;test, 0, sizeof(test));</pre>
You do not have to cast something like this:<P>
<pre>memset( (void *) &amp;test, 0, sizeof(test));</pre>
because <I>void</I> * is assignment-compatible with any other pointer.<P>
Now let's take the case of <I>qsort.</I><I> </I>Suppose you want to compare structures of <I>s_test</I> type in a function that would be passed to <I>qsort</I>. Your function must be prototyped as<P>
<pre>compare_test_struct(const void *one, const void *two);</pre>
to meet the <I>_fcmp(const void *, const void *)</I> requirement in the <I>qsort</I> prototype.<P>
The function would need to look like:<P>
<pre>compare_test_struct(const void *one, const void *two)
    {
    if  (  ((struct s_test *) one) -&gt;
        member &gt; ((struct s_test *) 
        two) -&gt; member)
        return 1;
. . .
}</pre>
or<P>
<pre>compare_test_struct(const void *one, const void *two)
   {
   struct s_test *one_test = one; 
   struct s_test *two_test = two 
   if ( one_test-&gt;member &gt; 
      two_test -&gt; member)
      return 1;
. . .
}</pre>
Either way appears to make more hidden the real purpose of the function - to compare two structures. The parameters <I>one</I> and <I>two</I> will have to contain valid beginning addresses for structures. Of course,<I> qsort </I>is designed to supply valid ones.<P>
Note that you can call <I>qsort</I> with any function that expects two <I>void</I> pointers and the prototype will not complain. With the above and your example function, you could code:<P>
<pre>struct s_test struct_array[10] =
   { /* Some list */... };
qsort (struct_array, 10,
   sizeof(struct s_test), comp);</pre>
or<P>
<pre>char *array_of_strings[10];
qsort(array_of_strings, 10,
   sizeof(char *), compare_test_struct);</pre>
These are both equally valid prototype-wise, but absolutely wrong. You may get a storage access error in the latter case, if the variable alignment is not proper. The prototype for <I>qsort</I> in this case has not protected you from shooting yourself in the foot.<P>
The compare functions as coded above are not useful for general usage, as they do not expect pointers to structures of <I>s_test</I> type. You could do the same trick as you did for <I>strcmp</I><I>.</I> That is, you could code the functions as:<P>
<pre>compare_test_struct_for_qsort(const void *one, const void *two) 
   { 
   return compare_test_struct_normal( 
      (struct s_test *) one,
      (struct s_test *) two);
   }

compare_test_struct_normal(struct s_test *one, struct s_test *two)
   {
   if ( one-&gt;member &gt; two-&gt;member)
     return 1;
. . .
}</pre>
Then if you wanted to use the comparison function in a normal mode, you would code:<P>
<pre>struct s_test test_a, test_b;

compare_test_struct_normal (&amp;test_a, &amp;test_b);</pre>
And if you wanted to call <I>qsort</I>, you would use:<P>
<pre>qsort(struct_array, 10, sizeof(struct s_test),
   compare_test_struct_for_qsort);</pre>
However, the overhead of a double function call will cut down the efficiency of the sort.<P>
Since it appears that using a prototype of the form:<P>
<pre>int strcmp(const void *, const void *)</pre>
where <I>qsort</I> is called will eliminate the prototype error, I would opt for that solution to this tiny incongruity in the prototype system. (KP)<P>
<I>[All of these responses are on the money. They also cast useflight on a notoriously thorny topic. Tom Plum forced X3J11 to consider the problems surrounding the prototype for </I><I>qsort</I><I> at some length. We never did resolve the issue to his satisfaction.</I><P>
<I>I can</I>'<I>t determine whether my response was incorrect. My back issues of</I> CUJ <I>are half a world away. I recall responding to a specific diagnostic that Mr. Irani showed. I have caught the C part of Turbo C++ out in this area, and the Gnu C compiler as well. It was easy for me to believe that Turbo C could botch type checking involving void pointer arguments. Whether or not it does, these letters address the basic issue much better than I did. Thanks. (PJP)]</I><P>
<h4><FONT COLOR="#000080"><A name="00B4_0075">Automatic Buffers<B><A name="00B4_0075"></B></FONT></h4></P>
I'm writing about the sticky automatic buffer that was the subject of Doug Oliver's 9/90 CUG and John Brand's 1/91 CUG letters - used in the function <I>repeat_format</I>. This function returns a pointer to local storage that was not guaranteed to be valid. I was hoping someone else would point out the reason why this technique should never be used, but no one did. Hence this letter.<P>
Using this technique will introduce some of the hardest-to-find bugs you'll ever see. The reason automatic storage isn't guaranteed valid is because an interrupt service routine (ISR) occurring at precisely the right moment will trash the buffer.<P>
One of the reasons the bugs will be hard to find is that standard PC interrupts (e.g., the clock) seem to switch to their own stacks after using only 10 bytes or so of the user stack. Other drivers (e.g., an ethernet drive) may or may not use a local stack. Depending on the PC's hardware configuration, the buffer may be trashed seemingly at random with a probability proportional to the frequency of interrupts and the length of the delay before the user function copies the buffer to "safe" storage. Thus, the program may always work just fine on the author's machine but may develop annoying random quirks after it is distributed.<P>
Some CPUs (e.g., 68030) have a separate stack for interrupts and are not subject to this problem. However, the operating system may reclaim the stack space for use elsewhere, causing sporadic memory protection faults.<P>
In any case, this technique is non-portable. I suggest that it be replaced with a call to <I>malloc</I> or <I>strdup</I>.<P>
As long as I'm writing, I'll throw in my contribution to the external variable declaration dialog (Andreas Lang, Bill Sharar II, David Hanson, Larry Leonard). <A href="list7.htm">Listing 7</a>
shows a technique I've used for years.<P>
This technique is similar to Mr. Leonard's solution. Your initialization of:<P>
<pre>array[15] INIT( {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15} );</pre>
doesn't work in my system (And I'm assuming others. Did you compile your example?) because the preprocessor does not honor the braces around the aggregate initializer in the macro instantiation, instead assuming that the commas separate actual arguments. Compound data objects can be declared as <I>w</I> is in my example or using a variation of the technique you presented as Listing 2
(1/91 CUG).<P>
Don Drantz<br>
Eden Prairie, MN<P>
I agree with you on the use of automatic storage. I prefer for the user to pass the address of a buffer that would be filled in with the appropriate information. Using  <I>malloc</I> inside a function without a warning that memory might not be available is not a wise idea. Of course, one could return the address of a static buffer (even some library routines do it), but that makes multi-user libraries not feasible.<P>
I have to admit I didn't compile my example. It was so ugly that I didn't have the heart to send it to the compiler. (KP)<P>

<h4><a href="../../../source/1991/apr91/pugh.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
