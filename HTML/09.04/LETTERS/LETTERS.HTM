


<HTML>
<HEAD>

<TITLE>April 1991/We Have Mail</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocapr.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Departments</FONT></H2>

<hr><h2 align="center"><font color="#800000">We Have Mail<A name="00C4_007E"><A name="00C4_007E"></font></h2>
<hr>
<BLOCKQUOTE>
<A name="00C4_0000"><A name="00C4_0000">Dear Dr. Plauger,<P>
The code in your reply to Dale Wharton's letter (<I>CUJ</I> October 1990, p. 130) did not work when I compiled it using Borland's C+ +. As am amateur programmer I hesitate to suggest errors, but there seem to be three problems (<A href="list1.htm">Listing 1</a>)
.<P>
1.     The expression <I>(s-prt)</I> in <I>prt[4*(s-prt)]</I> should be <I>(s-esc)</I> to give the offset of the desired character in <I>esc[]</I>. This is then multiplied by 4 to give the offset in <I>prt[].</I><P>
2.     The multiplier 4 is only valid if each string in <I>prt[]</I> is 4 characters in length (including the terminating null). It is necessary to pad the characters <I>BS</I>, <I>HT, LF</I>, and <I>CR</I> with a space to achieve this.<P>
3.     The expression <I>printf("[%s]", prt[4*(s-esc)])</I> caused an error, "abnormal program termination," possibly from memory overwriting. I think this could be because <I>prt[4*(s-esc)]</I> returns a single character and <I>printf</I> used with <I>%s</I> requires a pointer to a string. If <I>prt+4*(s-esc)</I> is substituted the program works.<P>
I enjoy the <I>C Users Journal</I>, which I discovered by chance some years ago. The articles, particularly your "Standard C," deal with the finer points of the language not covered in any textbooks. The glimpse of the problems you deal with in the standards committee is most interesting.<P>
Many thanks for an intersting journal.<P>
Yours sincerely,<P>
Leonard Carter<br>
P.O.Box 7<br>
Northbridge N.S.W. 2063<br>
Australia<P>
<I>Thanks for the corrections. By the way, I see we're practically neighbors, at least for the year. I am in Bondi N.S.W. through the end of 1991. &#151; pjp</I><P>
Dear Rex,<P>
I have a couple of comments regarding your and other columns in <I>CUJ</I>.<P>
1.     I assume that puzzles are aimed primarily toward the beginning C programmer and keep wondering why you don't use function prototypes. For example on the examples, you don't define <I>main</I> as returning <I>void</I>. Yet <I>main</I> ends without returning a value as it defaults to an <I>int</I>. Also, should you not declare <I>main</I> to have a <I>void</I> parameter list? I have noticed that this is common among articles in CUJ or DDJ, etc. I feel that increasing the warning level to the highest level and fixing such omissions with correct declarations and coerced values helps to decrease errors. It also forces the programmer to acknowledge those times when he/she assigns <I>int</I> values to a <I>char</I>, etc. I remember when I first began using prototypes that I made a lot of mistakes without really thinking about them. Responding to the compiler warnings made me realize those times when I declared an <I>int function</I> then didn't return a value upon exiting it. It only takes one "minor" error with the resultant days of debugging to realize the value of function prototypes.<P>
To me, if the teacher doesn't do something then why should the student?<P>
2.     In example 3 would it have made more sense to first tell the student that C doesn't not allow you to equate two strings, a.k.a. <I>if ( "fred" == "mary")</I> as you did in the last paragraph rather than spend several paragraphs "blowing their minds" before dropping the simple answer on them. If this example was aimed at an accomplished programmer, then just pointing out the mistake would have solved it. But I doubt very seriously that novices would understand your explanation in the first place. If they don't understand that you can't equate two strings, they sure will not understand stuff like <I>&amp;"end"[0]</I>.<P>
In my opinion, it's is better to just tell a beginner, "Don't do that," and let it go at that. As they learn and understand, it will be easier to teach exactly why.<P>
The same basic thing happened in example 1, you never really came out and said, "Before you store a string of characters, then you must allocate storage space to hold the string with a <I>char buff[4]</I> statement. A pointer does not allocate storage space but simply contains the address of the string and not the string itself." This is the one common thread that seems to bind beginning programmers <I></I>&#151; they all try to declare a <I>char</I> pointer and then start storing the whole world in it.<P>
I apologize if I appear to be raking you over the coals, I'm really not. I really enjoy your articles and look forward to them each month. I have been programming in C for five or six years in both the DOS and Xenix environment and still have problems with C, particularly with complex pointer assignments. That is another reason for using a compiler that does strong type checking, to be sure the compiler agrees that the declaration is the same as yours.<P>
Sincerely,<P>
P. Lyle Mariam, P.E.<br>
Manager of Software Development<br>
# 5 Oak Forest Ct.<br>
St. Charles, MO 63303<P>
<I>Rex responds:</I><P>
<I>Re 1: While I'm sure novice C programmers could answer some of the puzzles, I consider many of them to be reasonably well advanced. In fact, I cover all five parts of this series in my advanced C seminars. If you knew the answers and the explanations to most puzzles, I suggest you are well above average based on my experience teaching introductory and advanced C for five years.</I><P>
<I>I agree whole-heartedly that function prototypes can and should be used. However, you are confusing a function prototype (which is an abbreviation for a new-style function declaration) with the new way of writing a function definition. Let me explain.</I><P>
<I>I don't define </I><I>main</I><I> as having a </I><I>void</I><I> return type since it does not. Standard C says that </I><I>main</I><I> has a return type of </I><I>int</I><I>. I rarely return an actual value from </I><I>main</I><I>, however. Standard C says that if you drop through the closing brace of </I><I>main</I><I> or have a return without a value, the value returned (and hence the program's exit status code) is undefined. Since I am not checking the exit status code outside the program that doesn't matter. If you want me to exit with a value of zero to make it cleaner, then my program does strange things on VAX/VMS where such a value does not represent success and the command-line processor produces a silly message. I could, instead, include </I><I>&lt;stdlib.h&gt;</I><I> and return </I><I>EXIT_SUCCESS.</I><I> However, this is unnecessary and merely clutters up the otherwise simple example. In short it serves as a distraction.</I><P>
<I>I don't like the fact that Standard C allows you to not return a value from a non-</I><I>void</I><I> function, but that's the way it's always been. I do, however, like compilers that produce a warning in such cases (as does Turbo C). Interestingly, such a compiler will still complain even if I use</I><I> exit(EXIT_SUCCESS)</I><I> from </I><I>main</I><I> because I still don't have a </I><I>return</I><I> statement with a specific value.</I><P>
<I>Yes I could write </I><I>int</I><I> </I><I>main(void)</I> {. . .}<I>. However, Standard C does not require me to do so and it is not incorrect to omit the void. The simple fact that there are no formal argument names inside the parentheses tells the compiler this function expects no arguments. Explicitly saying there are none is redundant. If you extract prototypes from the source by hand, putting the </I><I>void</I><I> there will make your job easier. However, if you use an automatic prototype generator, such as is supplied with Microsoft and Watcom C, the compiler inserts the void for you.</I><P>
<I>In the case of a function prototype, I agree that </I><I>int main()</I><I>;</I><I> and int main(void);</I><I> are quite different. Argument list checking is lost in the former case. However, this is in a prototype, not a function definition.</I><P>
<I>So as a major supporter and teacher of Standard C, I defend my style as being quite reasonable and acceptable.</I><P>
<I>Re 2: You suggest I should have said, "C doesn't allow you to equate two strings." As far as I can see, one of the first things C programmers learn about is arrays and strings. They also learn that strings are nothing more than null-terminated arrays. Very soon after, they learn or discover that you cannot perform operations on arrays as a whole. As such, I saw no need to state the basics up-front.</I><P>
<I>Since the puzzle series was intended to be useful to readers having a broad range of experience, the solutions are quite detailed. If you don't know all the gory details, I provide them. If you do, you skip over them. &#151; rj</I><P>
Dear Mr. Ward:<P>
Enclosed, please find my renewal. You have a good publication, and I look forward to receiving it each month.<P>
I am prompted to write to you for two reasons.<P>
First, I read your comment (January 1991 issue) to the subscriber who was not renewing due to lack of source code. I guess I too am perplexed as to his real complaint. Additionally, though, I have been frustrated by the inability to obtain "machinable" code. I would like to indicate my support for a BBS through which we could obtain <I>both</I> source code from the articles as well as the code from the library. I am currently in need of some code from the library which we order under separate cover. That will slow down the project at hand, as we will have to wait for the shipment. A BBS would be a true benefit. I truly hope that you can implement it in the very near future. I wish I could help with the logistics.<P>
Finally, there is an issue of the journal I would like to obtain. You never seem to mention in your advertisements that back issues are available. Are they? If so, how can they be ordered and at what cost? I am after the issue with the first article by Tsvi Bar-David, "Building A Text Editor."<P>
Thanks for a good publication and your dedication to the promotion of the C language.<P>
Sincerely,<P>
Gregory L. Filter<br>
87 Lathrop<br>
Battle Creek, MI 49017<P>
<I>I know a bulletin board would be helpful, but I also know from our experience and that of other specialized magazine publishers that bulletin boards require a relatively large investment in staff time. We aren't ready to make that committment just yet.</I><P>
<I>As for back issues, those that are still available are $7.50 each (domestic &#151; see the C Users Order Form on page 80). Even if the issue is not available, we can photocopy the article in question. You should call first to check availability. We try to keep our unsold inventory at a minimum, so availability changes rapidly. &#151; rlw</I><P>
Dear Editor,<P>
Dr. Timothy Prince laments, "Why do the gurus do this to us?" in his "Pennies in Long Double" article. He should have answered his own question. The floating-point gurus are trying to solve the problem of measurements. Money is not a measurement, it is a count, and integers are appropriate for counts. Measurements are always approximate with some margin of error. Counts are always exact.<P>
If C had fixed point numbers, they would be an appropriate representation for U.S. money. In their absence, integer counts of pennies are a more appropriate representation. Dr. Prince uses the solution to a different problem on the basis of a superficial similarity of appearence in print, complains that it doesn't work right, and then hacks away until it looks good. He hasn't solved the problem, just buried it in extended precision where it hasn't bitten him recently. The inevitable errors have just been postponed.<P>
What the gurus tell you is true. Your job is to find what it is true of.<P>
Sincerely,<P>
Jeffrey L. Taylor<br>
P.O. Box 5000<br>
Davis, CA 95616<P>
<I>That's certainly a valid viewpoint. I think Mr. Prince has a valid viewpoint too. &#151; pjp</I><P>
Dear Sirs:<P>
We are working very extensively with QNX. <I>The C Users Journal</I> is very much MS-DOS/UNIX oriented. Could it be possible for you to introduce articles about QNX into your very fine journal?<P>
Thanks for your consideration.<P>
Yours truly,<P>
Jorg Kempmann<br>
IBK<br>
Pirolstr. 12<br>
D W-3150 Peine<br>
Germany<P>
<I>Watch this space. &#151; pjp</I><P>
Dear Dr. Plauger,<P>
The attached code (<A href="list2.htm">Listing 2</a>)
 illustrates what I consider to be a rather undesirable new "feature" of versions 6.00 and 6.00A of the Microsoft C compiler. Namely, the comparison <I>if(a+b == a)</I> can give a different result from that of <I>if((a+b) == a)</I>. There appears to be no such distinction in version 5.1 of Microsoft C or with any other C compiler I have tried.<P>
Dwayne Phillips recently reviewed the book <I>Numerical Recipes in C</I> for your journal (December 1990, pp.103-105.) <I>Numerical Recipes</I> algorithms (e.g., their singular value decomposition) use <I>if(a+b == a)</I> to detect when <I>b</I> is a negligibly small addition to <I>a</I>. I believe these algorithms were intended to be highly portable across C implementations.<P>
Is there some good reason why this feature is not a "bug"?<P>
I would like you to either address this problem in your "Standard C" column or else refer my question to one of your regular columnists. Thank you.<P>
Sincerely,<P>
Robert L. Obenchain,<br>
Research Scientist<br>
Eli Lilly and Company<br>
Lilly Corporate Center, MC730,<br>
Drop 2233<br>
Indianapolis, IN 46285<br>
Tel: (317)276-3150 FAX: (317)276-2095<P>
<I>Looks like a bug to me. The expression must group the same with or without the parentheses, or behave "as if" it were grouped properly. &#151; pjp</I><P>
Dear Mr. Ward:<P>
The review of <I>Numerical Recipes in C</I> by Dwayne Phillips (December 1990) damns an outstanding book with faint praise. While there is nothing specific in the review that I can take issue with, I was disappointed in the lack of enthusiasm for a book that is the best in its field of numerical textbooks.<P>
The book's strength is that it gives you enough mathematical depth to understand the strengths and weaknesses of various numerical techniques, without losing you amidst the mathematical trees. The result is an eminently practial reference book for working programmers and scientists. This balance of depth and practicality is unique in the literature.<P>
My group had bought a set of scientific libraries from IMSL for about $10,000 for a departmental license for routines that would run on both Sun SparcStations and Intel 368 machines. IMSL is the granddaddy of scientific libraries; it was developed on mainframes in FORTRAN and has been ported to hundreds of mainframe and minicomputer environments. I have been able to replace all the IMSL calls with routines developed from <I>Numerical Recipes</I>, at a cost of about $120 (book plus source disk). There are no licensing restrictions, and because I have the source, I don't worry about paying lots of money to move to a different environment in the future. Most important of all, I understand my routines much deeper than I understand IMSL's "black box" routines.<P>
Now those who spend their lives studying numerical techniques may be able to point out the drawbacks of <I>Numerical Recipes </I>vs<I>.</I> IMSL. IMSL is undoubtedly superior in error detection and probably robustness and detection of stability problems. However I have used IMSL to benchmark <I>Numerical Recipes</I>, and on my set of problems, at least, the two methods have produced equivalent results to well within the accuracy of my data.<P>
Finally, I would like to add that I was motivated to write by a letter from Mr. Farah (January 1991) asking for recommendations for a linear fitting routine. I have used the <I>Numerical Recipes</I> routines to produce a very flexible generalized least-squares fitting routine. Full use of <I>Numerical Recipes</I> requires a background approximately at the level of a bachelor's degree in mathematics. Hopefully anyone charged with producing scientific software will have such a background. If so, run, don't walk, to buy this book.<P>
John Caron<br>
1406 Sunshine Canyon Dr.<br>
Boulder, CO 80302<P>
<I>See the next letter for an opposing view. &#151; pjp</I><P>
Dear Editor:<P>
Regarding the book review of <I>Numerical Recipes</I> <I>in</I> <I>C</I> by Dwayne Phillips (<I>CUJ</I>, December 1990), I strongly disagree with the suggestion that including the source code rules out the use of the book as a college text. The reason is that the C code in the book is very poor and clumsy, being more representative of FORTRAN code than of well-written C. It would be very instructive to students if they were asked to improve the programming to see how much faster the routines can be when using the full power of C.<P>
I agree that the book is very readable and the publisher did a marvelous job, and it is a useful collection. But the authors admit their distaste for C and go on to demonstrate a lack of understanding of C and of what makes computers work efficiently. They also demonstrate their inability to change or learn new tricks. Because C is different they balk at learning how to use it and, instead, demand it operate like FORTRAN. They suggest that it is not suitable for scientific programming and, to make that point, prove they just don't understand.<P>
Well, I can demonstrate that, while C is different from FORTRAN, when properly used, it is much faster. The rich syntax permits programming either in a FORTRAN-like style or a more efficient style. By the way, I am not a computer scientist, but rather a mathematical physicist. My early programming, all in FORTRAN or BASIC, was not concerned with runtime efficiency. I maintain that C is just as suitable for scientific programming as is FORTRAN, but can be much faster. I have tested the basic FFT in the book against one properly coded in C to find that theirs is 40% slower. In the case of their sorting routines, the well-coded heapsort can be 35% faster and the quicksort more than double the speed of theirs. In addition, the quicksort can be written in a way such that a presorted array is processed faster than an unsorted array (rather than being a slowest case), and one need not designate a scratch stack with the chance that it may not be large enough. It is possible to use the application stack for scratch without using recursion (which would repeatedly and wastefully push the return address and frame pointer on the stack). Although it is not recursion, this latter innovation also cannot be done in FORTRAN at all.<P>
The efficiency of their matrix routines can be greatly improved by proper use of the power of C. I am writing a book which I will probably call "Numerical Efficiency in C." In this book, I will not only demonstrate the items above, but will provide a new heretofor unpublished iterative matrix inverter. It converges much faster than previous iterative methods, and it is numerically more stable than any previously published inversion method. With good programming it should be faster than Gauss Jordan methods or SVD for large matrices. But for small matrices, is is slowed by some preliminary setup overhead. The crossover is probably about 6x6 or 8x8. But against poorly programmed methods, it may always be faster. Preliminary studies suggest a 12x12 complex double precision inversion that is as much as four times faster than other methods. Also, because of better stability, matrices that could not be inverted by other methods in single precision can be with this method.<P>
Let me address some of the remarks about C in <I>Recipes</I>. They complain that one cannot just use <I>x**2</I> to square <I>x</I>, and that even defining the macro <I>SQR(x) ((x)*(x))</I> results is two computations of <I>x=sin(y) </I>to achieve <I>(sin(y)) **2</I>. They did not conceive of using<P>
<pre>#define SQR(x) (((z=x))*(z))</pre>
where <I>z</I> is a "scratch" <I>float</I> variable. Here the extra set of parentheses is to ensure <I>x </I>is put in <I>z</I> first. Parentheses have the highest precedence. It should not be necessary, but one of the things C compilers have been negligent about is following precedence rules.<P>
They complain that<P>
<pre>subroutine(a,n,m)
float a[n][m];</pre>
is illegal. But one can achieve the same thing with<P>
<pre>#define ma(i,j) (*(a + i*n + j))
subroutine (a,n,m)
float *a; int n,m ;</pre>
No, this is not clumsy. The amount of computation to get the matrix element is exactly the same as using FORTRAN <I>a(j,i)</I>. I don't recommend its use inside of intensive loops because it's inefficient. Does that imply that FORTRAN array notation gives inefficient code? Yes!!! Let me terminate with such an example.<P>
In <I>Recipes</I> they use a pointer to pointer device to avoid the multiplication in addressing two dimensional array elements. That's a useful device that can be done only in C, not in FORTRAN. Consider a simplistic matrix multiplier. <A href="list3.htm">Listing 3</a>
is the C equivalent of what FORTRAN would do. An optimizer might remove <I>i*coll</I> to the outer loop. If it does, the inner loop would contain only one multiplication for index evaluation. To get the value from <I>aray2, k*col2</I> must be added to <I>j</I> and the result added to pointer <I>aray2</I>. To get the value from <I>arayl</I>, two integers must be added to the pointer. To get the destination pointer, two integers must be added to <I>aray3</I>. But these last two integers are constant during the innermost loop, and therefore the pointer is constant. A <I>super</I> optimizer might notice that and take destination pointer out of the innermost loop. Then <I>each</I> product on the right would be accumulated into memory, at the location pointer. But that's still wasteful, as explained below.<P>
Each product first resides in a floating point register of the processor. When it is moved to memory, that consumes time. That time is large for micro-computers and many minicomputers because the word size and format inside the FP processor is different from that in memory.<P>
<A href="list4.htm">Listing 4</a>
overcomes all the problems by straightforward good C programming. The individual products are accumulated in a FP register before being moved to memory.<P>
Another small saving is obtained in the loop control. Comparing to zero is always more efficient than comparing two variables or comparing to nonzero.<P>
Essentially the second part uses low level methods unavailable to other languages.<P>
Sincerely,<P>
Morton Rudin<br>
P.O. Box 2715<br>
Gardena, CA 90247<P>
<I>Thanks for the alternate view. &#151; rlw</I><P>
<I>I agree with much of what Mr. Rudin says. Having cut my teeth on FORTRAN long before C was invented, I still carry a fondness for that language. But writing C as "FORTRAN with semicolons" can lead you to clunky and suboptimal code. It does no good to view C as an inadequate successor.</I><P>
<I>On the other hand, serious numerical programmers can point to areas where FORTRAN is truly superior to C. The C standards committee fixed the worst problems with floating-point arithmetic, but we failed to solve the problem of unrestricted pointer aliasing in C. Because FORTRAN is a less powerful language, it can be optimized more aggressively than C. Those are some of the areas being addressed by the Numerical C Extensions Group. &#151; pjp</I><P>
Dear Mr. Plauger,<P>
Concerning your December 1990 edition, I am sad to tell you that M. Johnson's fine attempt to turn us to "Writing MS-DOS Device Drivers" in C happens to be non-fruitful because his Code has been shortened beyond understandability. I know that it is a very tricky thing to put such an elaborate treat into a newsletter, but by writing all his assembler code you just can't get the point of the device driver mechanics unless you have written one before, preferably in assembler language. Please remember that Mr. Duncan is not head to everybody's family and please provide the rest of the story to us plain ordinary folks out in the software prairie. I do confess that I got a glimpse at the meaning by parallel reading <I>Dr. Dobbs</I> farewell 1990 issue, but I am still not sure that I understood the truth in full. Anyway thanks for all your nice work so far and I wish you and all the R&amp;D staff all the best for 1991.<P>
Yours,<P>
Klaus-Guenter Albrecht<br>
Seerobenstrasse 27<br>
D-6200 Wiesbaden 1<br>
West-Germany<P>
<I>See the letter following. &#151; pjp</I><P>
Dear CUJ,<P>
I'm unhappy. The article, "Writing MS-DOS Device Drivers," in the December 1990 <I>CUJ</I> was of great interest to me because I once tried to do just that. I didn't have much time, ran into lots of problems, and finally ended up doing the job another (much less elegant) way. Finding an article that showed how the job could be done, especially with MSC v4.0, promised to be an answer to my past prayers and a solution to future problems. But it wasn't.<P>
The terrible problem of interfacing DOS to C at the device driver level has to be done in asm and the article mentions several <I>.ASM</I> and .<I>INC</I> files. But they weren't printed in the article. I ordered the code disk thinking that surely they would be on it. But they weren't.<P>
Now then, where/how can I get the <I>.ASM</I> and <I>.INC</I> files? I really want to see them.<P>
Best regards,<P>
C. J. Robinson<br>
5036 17th Ave. South<br>
Minneapolis, MN 55417<P>
<I>I am the major driving force on this magazine toward keeping printed code to a minimum. If we occasionally cut too deep, I probably deserve the blame. You should always be able to get the full code text supplied by the author in machine-readable form, however. I don't know where the ball got dropped on this occasion.</I><P>
<I>I realize that asking for a code diskette may be less convenient to someone in Wiesbaden than having all the text shipped with the issue. Sometimes, it's the best compromise we can manage. &#151; pjp</I><P>
<I>And I am the major driving force for making certain articles fit the needs of our readers and not some abstract "ideal." Never fear, on any magazine the publisher is a fairly potent advocate, and I advocate as much real-world code as necessary to make the information directly usable. &#151; rlw</I><P>
<I>All interested parties can now obtain the full source code on the December code disk.&#151; hth</I><P>
Dear Mr. Plauger,<P>
I appreciate the article "Pennies In Long Double" by Timothy Prince (<I>CUJ</I>, January 1991), which explores subtle points of rounding in floating point arithmetic. I would like to add a few notes.<P>
Borland's latest compiler, Turbo C++, has a new option to eliminate the problem Dr. Prince noted with successive assignments, as shown by<P>
<pre>double d = 0.99;
int i = (d *= 100.0);</pre>
Using the <I>-ff-</I> option causes the compiler to assign 99 to <I>i</I> (as desired) because it forces an intermediate cast to <I>double</I> before conversion to <I>int</I>, instead of direct conversion from the internal 80-bit temporary format. It should be noted that Standard C doesn't guarantee 99, however, because of possible differences in rounding and truncation during the evaluation of <I>d</I>.<P>
Numbers can be rounded in Standard C by using <I>floor(x + 0.5)</I>. This should be more robust than adding and subtracting <I>1.0/DBL_EPSILON</I>, as suggested in the article.<P>
Dr. Prince implies that there are compilers which would, during optimization, eliminate the cast resulting from an intermediate assignment to an unused variable, thus making<P>
<pre>int i; double d; d = i = 3.14;</pre>
assign the value 3.14 to <I>d</I> when the unused assignment to <I>i</I> is removed. If any compiler were that bad, I would consider it seriously broken and want it fixed!<P>
Thad Smith III<br>
T3 Systems<br>
2001 N. 75th St.<br>
Boulder, CO 80301<P>
<I>The C Standard requires that a value be "stuffed through a knothole" any time it is assigned to a data object. That is true of the operator </I>*=<I> as well as</I> =.<I> It is true whether an optimizer merges separate expressions or eliminates "unused" ones. Sounds like Turbo C++ conforms only when you use the </I><I>-ff-</I><I> flag. &#151; pjp</I><P>
Dear Dr. Plauger,<P>
I have just received my three subscriptions (September, December, and January). This is really strange! Normally, I receive the journal one month after its release. Now, I have two past subscriptions and a newly released one. Can you shed light to this? How long does it really take the journal to reach me?<P>
Also, included in the January issue is the entry form for the Bad C Pun Contest. I'm surprised to read my mail "containing my Bad C Puns" to Robert in the September issue. What a coincidence! Well, I have decided to submit them formally. I hope I'm not yet late.<P>
In an article "Paving the Migration Path" by Dan Saks, he discussed something about converting a program from C to C++. In my case, I still adhere to the rule, "If it ain't broke, don't fix it.".<P>
Best Regards. By the way, what does "P.J." mean in your initials?<P>
"C"incerely yours,<P>
Victor Caballero<br>
World Health Organization<br>
UN Avenue. P.O. Box 293<br>
Manila, Philippines<P>
<I>The initials stand for Phillip James. I don't dislike either name, I just don't use either one. My family relabeled me Bill practically at birth, for bizarre and almost inexplicable reasons. I decided in my teens to be P.J. Plauger professionally. My friends call me Bill or P.J. &#151; pjp</I><P>

<h4><a href="../../../source/1991/apr91/letters.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
