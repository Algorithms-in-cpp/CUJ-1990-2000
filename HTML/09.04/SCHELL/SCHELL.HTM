


<HTML>
<HEAD>

<TITLE>April 1991/Some Small C++ Classes</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocapr.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">Some Small C++ Classes<A name="00AE_006C"><A name="00AE_006C"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="00AE_0000"><A name="00AE_0000">Joe Schell</font></h3><hr><blockquote><P>
<P><i><A name="00AE_0000"><A name="00AE_0000">Joe Schell received his B.A. in mathematics from the<I></I> <I></I>University of Colorado. He has been programming 15<I></I> <I></I>years as a hobby, five of those years in C. Joe specializes<I></I> <I></I>in writing C/C+ + libraries. You can contact him at P.O.<I></I> <I></I>Box 7039, Boulder, CO 80306.<I></I></i></P><P>
I have read a number of books and articles on C++. All of them have code in them, but none of them seem to have any small classes that are useful. I define a small class as one that is solely contained in the header file. Additionally the methods (the functions of the class) should be simple and will probably compile as in-line code. <P>
Here are a few small classes that should be useful. I will describe four classes: <I>boolean, byte, word,</I> and <I>check_heap</I>. The first handles <I>true</I> and <I>false</I> values. <I>byte</I> and <I>word</I> handle 8-bit and 16-bit values that are found in memory. <I>check_heap</I> is a debugging tool that determines if constructors and destructors are handling  memory allocation correctly.<P>
<h4><FONT COLOR="#000080"><A name="00AE_006D"><I>boolean</I><B> Class<A name="00AE_006D"></B></FONT></h4></P>
I modeled the <I>boolean</I> class on the <I>boolean</I> type in Pascal. The implementation was easy, and the code should be mostly self-explanatory. I did have some doubts over some implementation details. Initially I was going to make the ++ force the <I>boolean</I> to <I>true</I><I> </I>and the &#173; &#173; operator force it to <I>false</I>. But that didn't add anything since the programmer could simply set the Boolean value if he wants to force it to a specific value. So, instead these two operators reverse the value of the Boolean.<P>
In Pascal, the true and false values are constant. The <I>const</I> keyword does the same thing for the C+ + values. The only methods that can be called for a <I>const boolean</I> are <I>operator int( ), operator </I><I>~</I><I>( )</I>, and <I>make_string</I>. Those methods are defined as constant by the use of <I>const</I> in front of the function definition and  because they don't modify the Boolean value.<P>
Initially, the <I>make_string</I> method was actually implemented as the conversion operator for <I>char*: operator char*( )</I>. Although this method seems intuitive, C++ v2.0 does not have a precedence order for picking an <I>int </I>conversion over a <I>char*</I> conversion in conditional statements.<P>
Most of my code in the last two years has used Booleans in conditionals &#151; although I have never printed <I>true/false</I>. So the choice of the conversion operator was easy. It is interesting to look at the line <I>false</I> = <I>true</I>; in <I>testbool.cpp</I>. Because <I>true</I> is a constant, that line should produce an error message. In Turbo C++, it produces a warning message. A similar line using a <I>const int</I> does produce an error message. The code for the <I>boolean</I> class is in <I>boolean.hpp</I>. The test routine <I>testbool.cpp</I> will check it. <P>
<h4><FONT COLOR="#000080"><A name="00AE_006E"><I>check_heap</I><B> Class<A name="00AE_006E"></B></FONT></h4></P>
I developed the next class while I was working on some constructors and destructors that allocated and deallocated memory. I needed to test that the heap was being handled correctly after the destructors were called. Because I had several different simultaneous tests, a class was the perfect way to handle it. Look at the file <I>testheap</I><I><B>.</I></B><I>cpp</I> for several examples<P>
The <I>check_heap</I> variable is declared at the beginning of a suspected problem area. The method <I>test</I> is called any number of times after that. <I>test</I> will send an error message to <I>cerr</I> if the heap is different than when an instance of the class is declared. I found this useful even in places where I knew that the heap was supposed to be  different. When using this class, keep in mind that it is often useful to pass a class instance to a function as the following line does in <I>testheap</I><I><B>.</I></B><I>cpp.</I><P>
<pre>test_value(t);</pre>
Don't forget that <I>main</I> creates a temporary value for <I>t</I>. It is this temporary value that actually gets passed to <I>test_value</I>. Because the destructor for the temporary doesn't get called until the end of <I>main</I>, an error message is produced. (Even after two years of using C++ and the <I>check_heap</I> class, I still forget this detail all the time.) The best way to avoid the problem is to insert another function call level into the code. You can use <I>test_test_value</I><I>.</I> The temporary value is created inside this function and destroyed before it returns.<P>
If there is a problem when <I>test</I> is called, the function will print out the difference from when it started and the current position. I seldom find that number of any real use, but it has helped me occasionally when I had no idea where the problem was. I just start poking at random items until the difference changes by a little bit. Then I know I am in the right area.<P>
Since that difference can be useful, I spent a lot of time making sure that the number it printed made some kind of sense. PC compatibles use a segmented memory structure, so the code must adjust for different memory models. The macro <I>CHECK_HEAP_diff_</I> makes this adjustment. It is possible that <I>test</I> will not be inlined even though it looks as though it should be. However, it is certainly not worth the effort of keeping it in a separate source file. I prefer to keep it all in the header file. The code for <I>check_heap</I> is in <I>chkheap.hpp.</I><P>
<h4><FONT COLOR="#000080"><A name="00AE_006F"><I>byte</I><B> And </B><I>word</I><B> Classes<A name="00AE_006F"></B></FONT></h4></P>
The last two classes are <I>byte</I> and <I>word</I>. These classes could almost be implemented as <I>typedefs</I><I>,</I> except that they check for valid values. <I>byte</I> is used just like an <I>unsigned char.word</I> is used just like an <I>unsigned int</I>. If a larger value is assigned to either one, then an error message is generated at runtime. In the test code <I>testbyte.cpp, byte</I> is used like a pointer to <I>char</I>, and <I>word</I> is used like a pointer to <I>int</I>. For example:<P>
<pre>d = (byte*)test_byte;
...
z = (word*)(&amp;test_word);</pre>
This is permissible only when the byte class is the same size as a <I>char</I> and the <I>word</I> class is the same size as an <I>int</I>. In particular, the <I>byte</I> class will not work on a 286 or 386 when word alignment is used. To check the size I have included the two <I>#if</I> directives that are at the end of the <I>byte.hpp</I> file. They will produce a compile-time error if the sizes do not match. I would probably not use these as pointers to <I>ints</I> or <I>chars</I> though. They are intended to point to various locations directly in memory, as when you access data for the serial ports or the keyboard directly. Note that on PC compatibles, these can also be used as <I>far</I> pointers in the following manner:<P>
<pre>byte far *b = far_address_of_byte;</pre>
<h4><FONT COLOR="#000080"><A name="00AE_0070">Some Final Comments<A name="00AE_0070"></FONT></h4></P>
I find the file <I>form.h</I> to be useful. It does not contain any classes, and it is only needed for the function <I>form</I>. I haven't found any way to use the Turbo C++ <I>form</I> function and still use <I>iostream.h</I>, so I made my own function.<P>
I use the following naming scheme for my files. The extension <I>hpp</I> is used for <I>include</I> files which have classes in them. The extensions <I>h</I> and <I>hh</I> are used as they are in C. The extension <I>cpp</I> indicates a C++ source file, containing either classes or final applications such as the testing routines. The <I>c</I> extension is used for C code only. I make this distinction because I write in C and C++, and I need to keep the two separate. In addition, when I am looking through code I want to be able to distinguish between include files with classes and those without classes. These distinctions make life a little easier for me.<P>

<h4><A HREF="list1.htm">Listing 1</A></h4>
<h4><A HREF="list2.htm">Listing 2</A></h4>
<h4><A HREF="list3.htm">Listing 3</A></h4>
<h4><A HREF="list4.htm">Listing 4</A></h4>
<h4><A HREF="list5.htm">Listing 5</A></h4>
<h4><A HREF="list6.htm">Listing 6</A></h4>
<h4><A HREF="list7.htm">Listing 7</A></h4>

<h4><a href="../../../source/1991/apr91/schell.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY>
</HTML>
