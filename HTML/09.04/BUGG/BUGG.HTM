


<HTML>
<HEAD>

<TITLE>April 1991/Of Mice And Menus</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocapr.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   User Interfaces</FONT></H2>

<hr><h2 align="center"><font color="#800000">Of Mice And Menus<A name="00A8_0066"><A name="00A8_0066"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="00A8_0000"><A name="00A8_0000">Keith Bugg</font></h3><hr><blockquote><P>
<P><i><A name="00A8_0000"><A name="00A8_0000">Keith Bugg is currently a senior software engineer with Analysas Corp. His ten years experience as a programmer/analyst includes five years in C, all on the DEC VAX or the PC. Readers may contact him at 122 E. Morningside Drive, Oak Ridge, TN 37830, (615) 482-9515.</i></P><P>
Including a mouse in your application enhances its ease of use and friendliness. Novice users can find the large keyboard intimidating. Using a mouse to navigate a program can reduce this apprehension. Also, using a mouse lowers the learning curve &#151; the simplicity of "point and click" reinforces the user's intuition.<P>
The programmer benefits from the improved data integrity a mouse supplies. In a classic menu-driven system, the program must read the user's keystroke(s), validate results, and report on them. In a mouse-driven system, the user can only select a valid option. If the user clicks the mouse on a vacant area of the screen, the program simply ignores the clicks.<P>
I describe here the design and implementation of a C program that allows a mouse to select options in a menu-driven application. The sample program demonstrates many of the technical issues, and can serve as a template in your collection of tools. I developed the code for an IBM PC running MS-DOS. The program requires a Microsoft mouse (or compatible), its associated driver, and the Microsoft mouse library, <I>MOUSE.LIB.</I> I used the Microsoft C compiler, but the code should work with other compilers with a minimum of changes. Whatever compiler you choose, you must buy <I>MOUSE.LIB</I>. It is available from Microsoft as part of the <I>Microsoft Mouse Programmer's Guide</I>, and costs about $25.<P>
A program using the Microsoft mouse can be compiled in any of the memory models, and then linked with <I>MOUSE.LIB</I>, as in this example: <P>
<pre>cl/AM  /c myprogram.c
   (creates a medium model but does not link)
link myprogram.obj,MOUSE.LIB
   (creates executeable of 'myprogram')</pre>
The Microsoft compiler switch <I>/AM</I> determines the memory model, in this case medium. Use <I>/AS</I> for small, <I>/AC</I> for compact, and <I>/AL</I> for large and huge.<P>
The mouse library contains all the routines needed to manipulate the mouse. Utilities include reading the cursor, writing the cursor, and determining the status of mouse buttons. The Microsoft mouse performs 23 functions.<P>
The call to <I>mouse</I> uses four parameters which are declared as integers and passed by reference, as in <I>mouse (&amp;m1, &amp;m2, &amp;m3, &amp;m4)</I>. (Each argument of type pointer to <I>int</I>.) The first parameter indicates the command to be performed. The others provide additional information, such as cursor coordinates or button selection. <A href="tab1.htm">Table 1</a>
summarizes the calls most widely used.<P>
Mouse coordinates differ from screen coordinates by a factor of eight when in text mode, because each character is an 8-by-8 pixel group. The upper left-hand corner of the screen is the origin. It has coordinates (0, 0). The lower right-hand corner of the screen has coordinates (632, 192), assuming the usual 25 lines of 80 characters each. <P>
BIOS calls solve most of the technical design issues that affect including a mouse in a program. A mouse-driven program should begin by checking the target platform for the existence of a mouse and its driver. Your program can then adapt automatically to machines without a mouse. Incidentally, you might want menu options to be selected via the keyboard whether your target platform has a mouse or not. The sample program does not include this mode of operation, but you can easily include it. Programming for the arrow keys, the function keys, and other special keys (such as Home and End) is fairly straightforward. <P>
The next issue concerns manipulating the cursors. You must control both the default text cursor and the mouse cursor. Use BIOS calls to control the text cursor. You can also use BIOS calls to access the video display. The sample program displays the example menu using BIOS calls. Use an array of structures to define the menu. Each element holds the text of the menu option plus the screen and mouse coordinates. With this approach, you can make changes easily.<P>
When using a mouse in your applications, you should disable the control-break interrupt, and restore it upon termination. If you don't, and the user types a control-break, the program could return control to <B>DOS</B> with the text cursor off and the mouse cursor still on. This situation could confuse and frustrate the user. Remember that an important reason to using a mouse is to create a level of comfort and to reduce complexity. You access the control break interrupt by calling <I>signal</I>. See the Microsoft C documentation for a description of this function. <P>
Although it is beyond the scope of this article, bear in mind that a well-designed application would save and restore the target platform's configuration. This includes the graphics mode and screen color, for example. The focus of this article is more on the fundamental requirements. At that level, little difference exists between a mouse-driven program and a traditional program. Both give the user information, wait for a response, and take action. <P>
The sample program executes an infinite loop waiting for an event to occur. It ignores meaningless events such as clicking the mouse button on a vacant area of the menu. It processes valid ones such as backlighting a menu option when the mouse cursor is moved into it. Knowing the mouse's characteristics is essential for organizing the logic flow of an application.<P>
Interfacing a mouse to an application brings a versatile and elegant dimension to the user-interface. All well-engineered software emphasizes what to do over how to do it. Mouse-driven programs are no exception. You can use the sample program as a template for other programs. Here are some suggestions: a pop-up calculator, a control panel in a process-control environment, a cut-and-paste buffer for a text editor, or a help screen with hypertext capabilities.<P>
<h4>References</FONT></h4></P>
<I>Microsoft Mouse Programmer's Reference Guide</I> by Microsoft Press.<P>
<I>C Power Users Guide</I> by Herb Schildt <P>

<h4><A HREF="list1.htm">Listing 1</A></h4>

<h4><a href="../../../source/1991/apr91/bugg.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
