


<HTML>
<HEAD>

<TITLE>April 1991/Doctor C's Pointers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocapr.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Doctor C's Pointers&reg;<A name="00B2_0070"><A name="00B2_0070"></font></h2><P>
<h3 align="center"><A name="00B2_0000"><A name="00B2_0000">Data Structures, Part I</h3><P>
<h3 align="center"><font color="#800000">Rex Jaeschke</font></h3><hr><blockquote><P>
<P><i><A name="00B2_0000"><A name="00B2_0000">Rex Jaeschke is an independent computer consultant, author and seminar leader. He participates in both ANSI and ISO C<I></I> <I></I>Standards meetings and is the editor of The Journal of C Language Translation, a quarterly publication aimed at implementors of C<I></I> <I></I>language translation tools. Readers are encouraged to submit column topics and suggestions to Rex at 2051 Swans Neck Way, Reston,<I></I> <I></I>VA 22091 or via UUCP at uunet!aussie!rex or aussie!rex@uunet.uu.net.</i></P><P>
This month I embark on a new series on data structures. Probably the single biggest strength of C is its wealth of basic and derived data types &#151; everything from simple scalars and one-dimensional arrays to arrays of pointers to functions returning pointers to arrays of objects.<P>
<h4><FONT COLOR="#000080"><A name="00B2_0071">Introduction<A name="00B2_0071"></FONT></h4></P>
C is an expensive language to learn. In theory, it should only be pursued vigorously if the benefits significantly outweigh the costs. Unless you can master the extensive data typing capabilities C provides, you will not be able to completely understand or exploit the language. If you don't think you need many the data capabilities C provides, you should either use a much safer language with less power or learn more about the capabilities C has so you can see how you might use them.<P>
When most people come to a new language, they think in terms of the capabilities of their old languages for quite a while. If their old language didn't support a given capability (for example, pointers to functions), they may not even know about that capability, or have any real idea why they would want to use it. So the more educated you can become about C's data structure capabilities, the better off you'll be. I hope this series will help.<P>
I plan to cover the following topics:<P>
<UL><li>simple arrays and array operations (such as insertion, deletion, and searching)</li>
<li>arrays of pointers versus multi-dimensional arrays</li>
<li>the use of <I>malloc</I> and friends to extend arrays</li>
<li>stacks, queues, deques, and linked lists (single, double, circular, and lattice)</li>
<li>recursion</li>
<li>pointers to functions and tables thereof</li>
<li>trees</li></UL>
This is an ambitious agenda, and no doubt there will be digressions along the way. However, I will try to adhere to something along these lines.<P>
If you wish to read a little on your own, I recommend Donald E. Knuth's <I>The Art of Computer Programming, Volume 1: Fundamental Algorithms.</I> Addison-Wesley ISBN 0-201-03809-9. Chapter 2 (Information Structures) runs some 230 pages and is full of useful information on data structures. Although much of this was written more than 20 years ago, it is still quite relevant.<P>
<h4><FONT COLOR="#000080"><A name="00B2_0072">Simple Array Manipulations<A name="00B2_0072"></FONT></h4></P>
The following, rather large, program defines an array of integers. It allows the user to manipulate the array either as a whole or by its individual elements. (I'll call them nodes.) The complete set of operations are:<P>
<UL><li>Add a new node to the end</li>
<li>Change a user-selected node</li>
<li>Display a user-selected node</li>
<li>Insert a new node between nodes or before the first node</li>
<li>Remove a user-selected node</li>
<li>Search for first occurrence of a node value</li>
<li>Search for last occurrence of a node value</li>
<li>Report the number of nodes</li>
<li>Sort the nodes in ascending order</li>
<li>Show all entries in the table</li><</UL>
The array is defined with only four nodes. However, by changing the macro <I>MAX_NODES</I> you can make the number anything you choose. (I chose four so I can easily fill the array and test the error checking for full arrays, etc.)<P>
I use <I>scanf</I> to get user-supplied input. If you want robust error recovery on invalid input, <I>scanf</I> is difficult (if not impossible) to use. That is a separate issue, not directly relevant to the main theme. So I have chosen to ignore input validation for the most part. If you want, you can easily supply input that will break the program.<P>
The commands are defined using macros, so you can change the characters used. You could also obtain input using a mouse-driven menu. Again, that is peripheral to the main topic.<P>
Throughout the series, I will adapt this program to use different data structures behind the scenes. For example, in this first part I use a simple automatic one-dimensional array. Next, I use one allocated at runtime via <I>malloc.</I> Eventually, in a future installment, I will use a dynamically allocated linked list.<P>
<A href="list1.htm">Listing 1</a>
shows a program that allocates memory for an array <I>ary</I>:<P>
<pre>int ary[MAX_NODES];</pre>
It permits the user to perform various operations on the whole array or on specific elements (or nodes) within it. They may, for example<P>
<UL><li>add, remove, or change a node</li>
<li>display or sort the whole array</li></UL>
The program is designed as an introductory example of using data structures with C.<P>
I will not discuss the code much because it is clearly laid out and the identifier names are self-explanatory. I tested the program by creating a text file of commands mixed with various expected and unexpected inputs. I then fed that to the program using command-line redirection. This is not only convenient for testing, but allows for a crude batch facility to process large amounts of production data acquired through other means.<P>
You might take issue with my use of <I>goto </I>in the cases <I>SEARCH_FNODE</I> and <I>SEARCH_LNODE.</I> I find many programmers of the structured programming faith (of which I am one) taking their dislike for <I>goto</I> to the extreme. If you think <I>goto</I> should <I>never</I> be used, I suggest you think how to build a machine that does not have branch or jump instructions. Even Pascal, supposedly the ultimate structured language, has a <I>goto</I>.<P>
The problem with <I>goto</I> is that programmers inevitably write code that branches to irresponsible places &#151; that's why C's <I>break</I> and <I>continue</I> are so nice. The compiler works out where to go instead. In any event, I believe my <I>goto</I> solution as presented in <A href="list1.htm">Listing 1</a>
is more elegant and efficient than any structured solution I've seen for the problem. My rule is, "Use <I>goto</I> only when absolutely necessary and then only in a forward direction in a local scope." End of sermon on <I>goto.</I><P>
<h4><FONT COLOR="#000080"><A name="00B2_0073">Dynamically Allocated Arrays<A name="00B2_0073"></FONT></h4></P>
The first version of the program defined <I>ary</I> as having automatic storage duration. This was an arbitrary choice &#151; it could just as easily have been static for my purposes.<P>
Standard C provides a family of routines to allocate memory at runtime. I will refer to this as <I>dynamic memory allocation.</I> (See my column "The Memory Management Library" in <I>CUJ</I> Vol. 8, No. 1.) With careful design, you can easily change from using an automatic or static object to a dynamic one. The only changes you need to make to the program are as follows:<P>
<pre>#include &lt;stdlib.h&gt;

main()
{
   int *ary;/* ary is now a pointer, NOT an array */
   ...
   ary = malloc(MAX_NODES * sizeof(int));
   if (ary == NULL) {
      printf ("Cannot allocate memory for ary\n");
      exit(2);
}</pre>
You need the header <I>stdlib.h</I> to declare the memory allocation functions. Since the array does not exist at compile-time, <I>ary</I> is now simply a pointer to an <I>int</I><I>,</I> not an array of <I>int</I><I>.</I> By allocating the same amount of memory as before, but now at runtime, you can make <I>ary</I> point to the first element in the allocated array. Where <I>ary</I> was previously the name of an array and was converted to <I>&amp;ary[0] </I>in all the right places, it is now the address of the first <I>int</I> in the allocated space. In short, <I>ary</I> can be used in exactly the same way as before. (This is possible since C permits a pointer expression, such as <I>ary</I>, to be arbitrarily subscripted to one level. Because <I>a[i]</I> is equivalent to <I>*(a + i)</I>, the two subscripted forms are completely interchangeable.)<P>
<h4><FONT COLOR="#000080"><A name="00B2_0074">Variable Size Arrays<A name="00B2_0074"></FONT></h4></P>
Using <I>malloc</I> is a step in the right direction, but the array is still limited to a fixed number of nodes. You can fix this by replacing the constant <I>MAX_NODES</I> with a variable <I>max_nodes</I> and using <I>realloc</I> to extend the array if it fills. Again, with the proper initial design, the changes needed are small and localized. For example:<P>
<pre>int *ptr;
int max_nodes = 1;

ary = malloc(max_nodes * sizeof(int));
if (ary == NULL) {
   printf ("Cannot allocate initial memory"
      "for ary\n");
   exit(2);
}</pre>
By initializing <I>max_nodes</I> to 1, you start out allocating an array of only one element. Of course, if your application always used at least 20, for example, this initializer should be changed. There's no point extending the array by one node 20 times if you know up front what you're going to do.<P>
The only other changes are to the cases <I>ADD_NODE</I> and <I>INSERT_NODE</I><I>.</I> Instead of complaining when the table is full, these operations can now extend the array by one node, as follows:<P>
<pre>if (nodes_in_use == max_nodes) {
   ptr = realloc(ary,
      (max_nodes + 1) * sizeof(int));
   if (ptr == NULL) {
      printf("Cannot allocate new node\n");
      break;
   }
   ary = ptr;
   ++max_nodes;
}</pre>
Now you have a version that is limited only by the amount of memory available at runtime. Note though that <I>realloc</I> might not be able to allocate memory contiguously, in which case it has to go the more expensive route of allocating a new space, copying the old array contents to it, and freeing the old copy. <I>realloc</I> has another limitation. Say, for example, there are 1,000 bytes of memory available to begin with. Once the allocated array uses about 500 of these, there is insufficient memory left for <I>realloc</I> to make a copy before it frees the original. While only half of available memory is used, <I>realloc</I> might not be able to use the other half.<P>
<I>realloc</I> lets you extend the array by one node with a very small amount of code, but it is probably not efficient over the long run. You might want to extend the array by a cluster of nodes (say 5 to 10 at a time). Or you might chose to use a linked list instead to avoid the need for <I>realloc</I> to copy any of the existing array.<P>
In my <I>realloc</I> version, I chose not to shrink the array when a node was deleted. This was an arbitrary choice. You could argue that it would be good housekeeping to do so. You could also argue that by not freeing deleted nodes you can maintain a cache of available nodes when the next addition or insertion is needed.<P>
<h4><FONT COLOR="#000080"><A name="00B2_0075">Final Comments<A name="00B2_0075"></FONT></h4></P>
All examples in this article work and are useful, but they probably have inefficiencies. For example, inserting and deleting nodes requires all subsequent nodes to be shuffled toward or away from the end, respectively. As the node count increases, these operations become increasingly expensive. You can avoid this expense by using linked lists. You will see in future installments that such lists have their own unique problems.<P>

<h4><a href="../../../source/1991/apr91/jaeschke.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
