<HTML><HEAD>
<TITLE>October 2000/An Improved Variant Type Based on Member Templates/Listing 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 3: Definition of class variant2_t</A></h4>
<pre>
// This variant holds the copy of the original value in
// an object of a class specially designed to ensure proper copy
// and conversion.
class variant2_t
{
  public :

   variant2_t() : data ( NULL ) {}
  ~variant2_t() { delete data; }

  template&lt;typename T&gt; variant2_t ( T v )
    :data(new Impl&lt;T&gt;(v))
    {}

  template&lt;typename T&gt; operator T () const
    { return * CastFromBase&lt;T&gt;(data); }

  private :

    struct ImplBase
    {
      virtual ~ImplBase() {}
    } ;
    template&lt;typename T&gt;
    struct Impl : ImplBase
    {
      Impl ( T v ) : data ( v ) {}
      T data ;
    } ;

    template&lt;typename T&gt; Impl&lt;T&gt;* CastFromBase(ImplBase* v)
    {
      Impl&lt;T&gt;* p = dynamic_cast&lt;Impl&lt;T&gt;*&gt;(v);
      if ( p == NULL )
       throw invalid_argument ( typeid(T).name() +
                                string(" is not a valid type")
                              ) ;
      return p ;
    }

    ImplBase* data ;
} ;

// usage:
variant2_t _int( 2 ) ;
variant2_t _dbl( 3.14 ) ;
variant2_t _str( string( "Hellow"));
cout &lt;&lt; (int)   _int &lt;&lt; endl ;
cout &lt;&lt; (double)_dbl &lt;&lt; endl ;
cout &lt;&lt; (string&amp;)_str &lt;&lt; endl ;

</pre></pre></body></html>
