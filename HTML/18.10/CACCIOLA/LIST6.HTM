<HTML><HEAD>
<TITLE>October 2000/An Improved Variant Type Based on Member Templates/Listing 6</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 6: The class ArgumentList</A></h4>
<pre>
#ifndef ARGLIST_H
#define ARGLIST_H

#include&lt;vector&gt;

#include"variant.h"

class ArgumentList
{
  public:

    // Ctor, Dtor, CopyCtor, and Assign ommited
    // because the defaults are apropriate.

    template&lt;typename T&gt; void push_back ( T Value )
      { _container.push_back ( variant_t ( Value ) ) ; }

    // NOTE: This returns a COPY of the value at pos idx.
    template&lt;typename T&gt; T operator [] ( size_t idx ) const
      { return _container [ idx ] ; }

    // This form returns a REFERENCE and not a COPY.
    template&lt;typename T&gt; const T &amp; at ( size_t idx ) const
      { return _container [ idx ].get&lt;T&gt;() ; }

    bool   empty() const { return _container.empty(); }
    size_t size () const { return _container.size (); }

  private:
    std::vector&lt;variant_t&gt; _container ;
} ;

#endif


</pre></body></html>
