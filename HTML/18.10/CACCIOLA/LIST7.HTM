<HTML><HEAD>
<TITLE>October 2000/An Improved Variant Type Based on Member Templates/Listing 7</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 7: A test program that demonstrates various uses of the ArgumentList class</A></h4>
<pre>
#include&lt;iostream&gt;
#pragma hdrstop
#include &lt;condefs.h&gt;

#include "arglist.h"

using namespace std ;

void show ( const ArgumentList &amp; args )
{
  cout &lt;&lt; "List contents:" &lt;&lt; endl ;

  // If your compiler can determine the template 
  // specialization parameter from the left side of the 
  // assigments, you can write: args[0], etc...
  int    i = args.at&lt;int&gt;   (0);
  double d = args.at&lt;double&gt;(1);
  string s = args.at&lt;string&gt;(2);

  cout &lt;&lt; "int   : " &lt;&lt; i &lt;&lt; endl ;
  cout &lt;&lt; "double: " &lt;&lt; d &lt;&lt; endl ;
  cout &lt;&lt; "string: " &lt;&lt; s &lt;&lt; endl ;

  // Used when show() is called from test_recursion().
  if ( args.size() &gt; 3 )
  {
    // The whole list was pushed as the last element.
    const ArgumentList &amp; list = args.at&lt;ArgumentList&gt;(3);
    show ( list ) ;
  }
}
void wrong ( const ArgumentList &amp; args )
{
  cout &lt;&lt; "Trying to retrieve the wrong argument." &lt;&lt; endl;
  cout &lt;&lt; "This will throw invalid_argument" &lt;&lt; endl ;
  string s = args.at&lt;string&gt;(0);
}

void test_recursion( ArgumentList &amp; args )
{
  cout &lt;&lt; endl &lt;&lt; "Testing type-recursion" &lt;&lt; endl ;

  cout &lt;&lt; "Pushing the list itself as the fourth element." 
       &lt;&lt; endl ;
  args.push_back ( args ) ;

  show ( args ) ;
}

void test()
{
  // These variables are allocated in the heap to show
  // how ArgumentList copies the values.
  int    * i = new int    ( 33 ) ;
  double * d = new double ( 3.14 ) ;
  string * s = new string ( "This is a string" ) ;

  // Creates a list with 3 elements.
  ArgumentList args ;
  args.push_back ( *i ) ;
  args.push_back ( *d ) ;
  args.push_back ( *s ) ;

  cout &lt;&lt; "Testing ArgumentList." &lt;&lt; endl
       &lt;&lt; endl
       &lt;&lt; "Creating a list with 3 elements:" &lt;&lt; endl
       &lt;&lt; "int   : " &lt;&lt; *i &lt;&lt; endl
       &lt;&lt; "double: " &lt;&lt; *d &lt;&lt; endl
       &lt;&lt; "string: " &lt;&lt; *s &lt;&lt; endl ;

  delete i ;
  delete d ;
  delete s ;

  show ( args ) ;

  // wrong() will try to peek up the string at the wrong position.
  try
  {
    wrong ( args ) ;
  }
  catch ( invalid_argument&amp; x )
  {
    cout &lt;&lt; "exception invalid_argument: " &lt;&lt; x.what() &lt;&lt; endl ;
  }

  // This show that ArgumentList can be safely copied.
  cout &lt;&lt; endl &lt;&lt; "Copying the entire argument list... " &lt;&lt; endl ;
  ArgumentList copy = args ;
  show ( copy ) ;

  // This shows that ArgumentList can even contain elements of 
  // type ArgumentList.
  test_recursion(copy) ;
}
void main()
{
  try
  {
    test() ;
  }
  catch ( invalid_argument&amp; x )
  {
    cout &lt;&lt; "unexpected exception invalid_argument: " 
         &lt;&lt; x.what() &lt;&lt; endl ;
  }
  catch ( ... )
  {
    cout &lt;&lt; "Unexpected exception" &lt;&lt; endl ;
  }
}

/*
OUTPUT:

Testing ArgumentList.

Creating a list with 3 elements:
int   : 33
double: 3.14
string: This is a string
List contents:
int   : 33
double: 3.14
string: This is a string
Trying to retrieve the wrong argument. 
This will throw invalid_argument
exception invalid_argument: string is not a valid type

Copying the entire argument list... 
List contents:
int   : 33
double: 3.14
string: This is a string

Testing type-recursion
Pushing the list itself as the fourth element.
List contents:
int   : 33
double: 3.14
string: This is a string
List contents:
int   : 33
double: 3.14
string: This is a string
*/

</pre></body></html>
