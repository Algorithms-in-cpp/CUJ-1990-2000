<HTML><HEAD>
<TITLE>October 2000/An Improved Variant Type Based on Member Templates/Listing 5</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 5: A test program that demonstrates various uses of variant_t</A></h4>
<pre>
#include&lt;iostream&gt;
#include&lt;sstream&gt;
#include&lt;vector&gt;
#pragma hdrstop
#include &lt;condefs.h&gt;

#include "variant.h"

using namespace std ;

// test0() shows the basic construction and use of variant_t with
// various types.
void test0()
{
  variant_t _int ( 2 ) ;
  variant_t _dbl ( 3.14 ) ;
  variant_t _str ( string ( "This is a string" ) ) ;
  // IMPORTANT NOTE: The above statement COULD NOT have been
  //  variant_t _str ( "This is a string" ) ;
  // The expression "This is a string" is of type
  //  const char *, which is just a pointer.
  // The copy of a pointer is just another pointer of the
  // same value, not a new membory block with a copy of
  // the contents of the original block.
  // The value copied and stored in _str would be the
  // pointer value and not the character array contents.

  cout &lt;&lt; "BEGIN test0" &lt;&lt; endl ;
  cout &lt;&lt; (int)   _int  &lt;&lt; endl ;
  cout &lt;&lt; (double)_dbl  &lt;&lt; endl ;
  cout &lt;&lt; (string)_str  &lt;&lt; endl ;
  cout &lt;&lt; "END test0"   &lt;&lt; endl &lt;&lt; endl ;
}

// test1() show how variant_t can be used as efficient
// return values. The internal data is not copied but shared
// among the various variant_t objects involved.
variant_t test1_aux()
{
  return variant_t ( string ( "This is a string" ) ) ;
}
void test1()
{
  cout &lt;&lt; "BEGIN test1"       &lt;&lt; endl ;
  cout &lt;&lt; (string)test1_aux() &lt;&lt; endl ;
  cout &lt;&lt; "END test1"         &lt;&lt; endl &lt;&lt; endl ;
}

// test2() shows an invalid convertion throwing
// invalid_argument.
void test2()
{
  cout &lt;&lt; "BEGIN test2" &lt;&lt; endl ;
  try
  {
    variant_t _dbl(3.14);
    char* n = _dbl ; (n);
  }
  catch ( invalid_argument&amp; x )
  {
    cout &lt;&lt; "exception invalid_argument: " &lt;&lt; x.what() &lt;&lt; endl ;
  }
  cout &lt;&lt; "END test2" &lt;&lt; endl &lt;&lt; endl ;
}

// test3() shows an array of variant_t
void test3()
{
  cout &lt;&lt; "BEGIN test3" &lt;&lt; endl ;
  variant_t Array [3];
  Array[0]=2;  // int
  Array[1]=3.14; // double
  Array[2]=string("This is a string");
  cout &lt;&lt; (int)   Array[0] &lt;&lt; endl ;
  cout &lt;&lt; (double)Array[1] &lt;&lt; endl ;
  cout &lt;&lt; (string)Array[2] &lt;&lt; endl ;
  cout &lt;&lt; "END test3" &lt;&lt; endl &lt;&lt; endl ;
}

// test4() shows a vector&lt;variant_t&gt;
string print ( variant_t const&amp; aVar )
{
  ostringstream ss ;
  if ( aVar.is_type&lt;int&gt;() )
  {
    ss &lt;&lt; "int: " &lt;&lt; (int)aVar ;
  }
  else if ( aVar.is_type&lt;double&gt;() )
  {
    ss &lt;&lt; "double: " &lt;&lt; (double)aVar ;
  }
  else if ( aVar.is_type&lt;string&gt;() )
  {
    ss &lt;&lt; "string: " &lt;&lt; (string)aVar ;
  }
  return ss.str();
}

void test4()
{
  cout &lt;&lt; "BEGIN test4" &lt;&lt; endl ;
  vector&lt;variant_t&gt; Vector ;
  Vector.push_back ( 2 ) ;
  Vector.push_back ( 3.14 ) ;
  Vector.push_back ( string("This is a string") ) ;
  std::transform ( Vector.begin() ,
                   Vector.end  () ,
                   ostream_iterator&lt;string&gt; ( cout , "\n" ) ,
                   print
                 ) ;
  cout &lt;&lt; "END test4" &lt;&lt; endl &lt;&lt; endl ;
}

int main()
{
  test0() ;
  test1() ;
  test2() ;
  test3() ;
  test4() ;

  return 0 ;
}

/*
OUTPUT:

BEGIN test0
2
3.14
This is a string
END test0

BEGIN test1
This is a string
END test1

BEGIN test2
exception invalid_argument: char * is not a valid type
END test2

BEGIN test3
2
3.14
This is a string
END test3

BEGIN test4
int: 2
double: 3.14
string: This is a string
END test4
*/

</pre></body></html>
