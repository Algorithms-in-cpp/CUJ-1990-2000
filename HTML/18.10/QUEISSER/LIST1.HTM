<HTML><HEAD>
<TITLE>October 2000/Classes for Reading and Writing Parameter Blocks/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: NamedVal.h &#151; Defines classes SimpleDB, IOAble, IOParamBlock, and template class NamedVal</A></h4>
<pre>
#ifndef __NAMEDVAL_H__
#define __NAMEDVAL_H__

#include &lt;string&gt;
#include &lt;iostream&gt;
#include &lt;strstream&gt;
#include &lt;vector&gt;

// Minimal INI file or registry interface. Console I/O for 
// testing will be overridden by real I/O functions 
class SimpleDB {
public:
   virtual void Write(const char *section, const char *key, 
                      const char *valStr) {
     std::cout &lt;&lt; "[" &lt;&lt; section &lt;&lt; "]   " &lt;&lt; key &lt;&lt; "=" 
               &lt;&lt; valStr &lt;&lt; std::endl; 
   } 
   virtual void Read(const char *section, const char *key, 
                     char *valStr, int maxBufLen) {
     std::cout &lt;&lt; "enter value for [" &lt;&lt; section &lt;&lt; "] key=" 
               &lt;&lt; key &lt;&lt; std::endl;
     std::cin &gt;&gt; valStr;
   }
};

class IOAble {
public:
   virtual void Write(SimpleDB &amp;db, const char *section)=0;
   virtual void Read(SimpleDB &amp;db, const char *section)=0;
};

class IOParamBlock
{
public:
   std::vector&lt;IOAble *&gt; ioVars;
   void AddVar(IOAble *v) { ioVars.push_back(v); }
   void WriteAll(SimpleDB &amp;db, const char *section) { 
      int i; 
      for (i=0; i&lt;ioVars.size(); i++) 
         ioVars[i]-&gt;Write(db, section);
   }
   void ReadAll(SimpleDB &amp;db, const char *section) { 
      int i; 
      for (i=0; i&lt;ioVars.size(); i++) 
         ioVars[i]-&gt;Read(db, section);
   }
};


// Template class that wraps a value of type T and has a string 
// as its name. Can also be inserted into IOParamBlock for 
// automatic IO
template &lt;class T&gt; class NamedVal : public IOAble {
protected:
   std::string name;
   T val;
public:
   NamedVal(const char *varName, const T&amp; initialVal=T()) 
      : name(varName), val(initialVal) {}
   NamedVal(const NamedVal &amp;rhs) { 
      name = rhs.name; val = rhs.val; }
   NamedVal(IOParamBlock *parent, const char *varName, 
      const T&amp; initialVal=T()) : name(varName), val(initialVal)
   { parent-&gt;AddVar(this); }

   // conversion operators to make this class look like T
   operator T &amp; ()    { return val; }
   T* operator &amp; ()   { return &amp;val; }
   // allow assignment of a value of type T
   NamedVal&lt;T&gt; &amp; operator = (const T&amp; rhs) {
      val=rhs; return *this; }
   const char *Name() { return name.c_str(); }

   virtual void Write(SimpleDB &amp;db, const char *section) {
      char buf[100]; std::strstream strs;
      strs &lt;&lt; val; strs &gt;&gt; buf; db.Write(section, Name(), buf);
   }
   virtual void Read(SimpleDB &amp;db, const char *section) {
      char buf[100]; db.Read(section, Name(), buf, 100);
      std::strstream strs; strs &lt;&lt; buf; strs &gt;&gt; val;
   }
};

// declare a named variable
#define DECL_NAMED_VAL(type,name) NamedVal&lt;type&gt; name
// define, construct, allocate a named variable
#define DEF_NAMED_VAL(type,name) NamedVal&lt;type&gt; name(#name)
#define DEF_NAMED_VAL_I(type,name,val) \
   NamedVal&lt;type&gt; name(#name,val)
#define CONSTRUCT_NAMED_VAL(name) name(#name)
#define CONSTRUCT_NAMED_VAL_I(name, val) name(#name, val)
#define NEW_NAMED_VAL(type,name) name=new NamedVal&lt;type&gt;(#name)
#define NEW_NAMED_VAL_I(type,name,val) \
   name=new NamedVal&lt;type&gt; (#name,val)
// construct a NamedVal and insert into IOParamBlock
#define CONSTRUCT_AUTOIO_VAL(name, val) name(this, #name, val)

#endif //__NAMEDVAL_H__
</pre></body></html>
