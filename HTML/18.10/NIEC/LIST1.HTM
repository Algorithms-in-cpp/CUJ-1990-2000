<HTML><HEAD>
<TITLE>October 2000/Optimizing Substring Operations in String Classes/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1:	Making a substring from a substring-optimized string object</A></h4>
<pre>
void
OptStr::MakSubStr(int SubOff, // Offset where the sub-string 
                              // should start.               
                  int SubLen) // Length of sub-string to be  
                              // formed.                     
{
   if (SubOff &lt; 0)      // If offset is before beginning of  
   {                    // string.                           
      SubLen += SubOff; // Set length to start at beginning. 
      SubOff = 0;       // Start at beginning.               
   }
   // Insure SubLen is positive and doesn't extend past the  
   // end of string.                                         
   SubLen = MinInt(SubLen,Len-SubOff));
   SubLen = MaxInt(0,SubLen);

   Len = SubLen;        // Set the sub-string's length.      
   if (Len)             // If the length is not 0, then      
      Off += SubOff;    // Set sub-string's starting offset. 
   else                 // Oherwise, if length is 0, then    
      Off = 0;          // Zero sub-string's starting offset.
}
</pre></body></html>
