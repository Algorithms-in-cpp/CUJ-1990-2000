<HTML>   
     <HEAD>
<TITLE>October 2000/The New C</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tococt.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">The New C: Introducing C99</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Randy Meyers</FONT></H3>

<BLOCKQUOTE>
<p>C99 is much like C89, but with more of the same &#151; lots more of the same.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H4><FONT COLOR="#000080">Introduction</FONT></H4>

<p>You might not have noticed, but a major revision <a href="#ref1">[1]</a> to the ANSI/ISO C Standard, called C99, was approved last December. Also, you might not have noticed, but you might already be using the new C language, or at least parts of it.</p>
<p>The reason for this is that the committee took a pretty conservative approach in adding features to C. Almost all of the new features have been implemented and have proved their worth in existing C implementations. Although no implementation yet supports all of C99, many implementations have supported different parts of C99 for years.</p>
<p>This is good news for C programmers. Perhaps you have been avoiding an extension in your favorite compiler because it was not portable. If that extension is a feature of the new C Standard, you can start using the feature knowing it will spread to other compilers as the industry rolls out C99-compliant compilers.</p>
<p>It almost goes without saying that the new Standard is upwardly compatible with the old. There are a few incompatibilities, but they are very minor, and the committee worked very hard to minimize problems. For example, see the discussion of new keywords below.</p>

<H4><FONT COLOR="#000080">Names and History</FONT></H4>

<p>Programming languages evolve over time, and the usual practice is to refer to a language not only by its name, but also the year in which it was defined. (In lectures five years ago, I could get a laugh by giving some examples of this rule: ALGOL 68, C89, Fortran 77, and Fortran 4. Alas, this geeky humor has a Y2K bug: these days 2004 springs to mind before 1904.) Thus, the new language and the Standard that defines it are called C99. The original C Standard <a href="#ref2">[2]</a> is called either C89 or C90. (ANSI published the document in 1989, but ISO renumbered the sections and published the document in 1990.) There was a minor update <a href="#ref3">[3]</a> to C89 called C95 that you probably did not notice unless you process Japanese, Korean, or Chinese text, since it mostly added more library functions that process wide and multibyte characters. (Java proponents sometimes erroneously claim that Java was the first language to support large character sets. Such support was in Standard C in 1989.)</p>
<p>Perhaps the greatest influence on C99 was the Numerical C Extensions Group, or NCEG. The NCEG was a subcommittee of J11, the ANSI C committee, that started working on a technical report <a href="#ref4">[4]</a> after C89 was finalized. The NCEG Tech Report was not a standard, it was a call for implementations to experiment and gain experience with a set of well described extensions. The majority of these extensions dealt with numerical programming in C (IEEE arithmetic, complex numbers), but some had more general purpose or promoted optimization (variable length arrays, parallel processing, the <B>restrict</B> keyword).</p>
<p>In some cases, NCEG extensions were invented by the subcommittee. In others, vendors brought extensions already implemented in their compilers to the committee for review and feedback. Since the tech report was not a standard, vendors were free to pick and choose which extensions to implement, and to modify the extensions based on customer experience.</p>
<p>This real world experience is very valuable. Language features can interact in surprising ways, and sometimes a language feature will cause a run-time penalty even if the feature is never used. (For example, on some C++ implementations, the mere existence of multiple inheritance as a feature slows down programs that use only single inheritance.) The experimentation with NCEG extensions not only improved the extensions themselves, but also improved their specification, and gave the C committee confidence that the interactions and costs of the language features were known.</p>

<H4><FONT COLOR="#000080">The C99 That Isn't</FONT></H4>

<p>Not all NCEG extensions were added to C99. Perhaps the biggest example is the NCEG parallel-processing support, which was based on the C* Language (pronounced C-Star) from Thinking Machines. The manufacturers of parallel computers have various idiosyncratic extensions to write explicitly parallel programs, and the NCEG Technical Report did not change this. Since there is still little consensus on the best way to program parallel computers, such a feature is not yet suitable for including in Standard C.</p>
<p>In other cases, NCEG extensions were modified when added to C99. The NCEG support for complex numbers included separate imaginary datatypes, such as <B>double_ imaginary</B>. The imaginary data types were made optional in C99.</p>
<p>However, the biggest feature considered for, but not included in, C99 did not come from the NCEG, but from C++. For about a year, the committee worked on a subset of C++ object-oriented features. Included in the subset were single (but not multiple) inheritance, virtual functions, member access control (public, private, protected), constructors, and destructors. This mix of features was similar to C++ in the late 1980s.</p>
<p>This resemblance to early C++ was both a plus and a minus. On the positive side, this set of features was responsible for the initial popularity of C++, and the set of features was known to work well together with well understood costs and interactions. On the negative side was the question, "Isn't the natural evolution of the C++ of the 1980s the C++ of the 1990s? If so, what is the value in C starting down that path since the C++ of the 1990s already exists?" Ultimately, for a variety of reasons, some logistical, the committee abandoned adding object-oriented features to C.</p>
<p>The remainder of this article will briefly list the different features that are in C99. Future articles in this series will describe individual features in greater detail.</p>

<H4><FONT COLOR="#000080">Keywords</FONT></H4>

<p>C99 has the following new keywords: <B>inline</B>, <B>restrict</B>, <B>_Bool</B>, <B>_Complex</B>, and <B>_Imaginary</B>.</p>
<p>The last three of the new keywords start with an underscore followed by an upper case letter in order to avoid conflicts with user identifiers in existing programs (<B>bool</B> in particular is common). However, the header <B>&lt;stdbool.h&gt;</B> defines a macro named <B>bool</B> that expands to <B>_Bool</B>, and the header <B>&lt;complex.h&gt;</B> defines a macro <B>complex</B> that expands to <B>_Complex</B>, and (if supported) a macro <B>imaginary</B> that expands to <B>_Imaginary</B>. The preferred style (once you determine it will not cause conflicts with identifiers in your program) is to include the appropriate header and use <B>bool</B>, <B>complex</B>, or <B>imaginary</B> rather than the underscore keywords. In the rest of this column, I will assume the proper headers have been included.</p>

<H4><FONT COLOR="#000080">New Types</FONT></H4>

<p>C99 has the following additional new types:</p>

<UL><LI>   <B>long long</B> and <B>unsigned long long</B>: integers with at least 64 bits.
<LI>   <B>bool</B>: a Boolean data type (with the same meaning as C++) that stores only 0 and 1. However, in order to make pointer arithmetic, arrays, and <B>sizeof</B> work, most implementations will store a non-bitfield <B>bool</B> in a byte rather than a bit.
<LI>   <B>float complex</B>, <B>double complex</B>, and <B>long double complex</B>: complex numbers corresponding to the three traditional floating-point types.
<LI>   <B>float imaginary</B>, <B>double imaginary</B>, <B>long double imaginary</B>: imaginary numbers corresponding to the three traditional floating-point types. The imaginary types are an optional part of the C Standard, and might not be commonly available.</UL>

<H4><FONT COLOR="#000080">Extended Integers</FONT></H4>

<p>C99 allows implementations to define additional integer datatypes. All of the semantic rules dealing with integers in the C Standard were generalized to allow such "extended integers" to follow predictable rules and behave like any other integer type.</p>
<p>The new header <B>&lt;stdint.h&gt;</B> contains typedefs for integers of various sizes in bits (e.g., <B>int32_t</B>) or properties (like fast computation). The header also contains typedefs for the largest signed and unsigned integer types supported by the implementation, and (if such a type exists) a typedef for the integer type capable of holding the value of a pointer.</p>
<p>The header <B>&lt;inttypes.h&gt;</B> defines macros that are the <B>printf</B> and <B>scanf</B> format specifiers suitable for reading or writing values of all the different types named by typedefs in <B>&lt;stdint.h&gt;</B>.</p>

<H4><FONT COLOR="#000080">Floating Point</FONT></H4>

<p>The new header <B>&lt;fpenv.h&gt;</B> defines functions to allow you to control the floating-point environment, including rounding modes, status flags, and exception state.</p>
<p>The header <B>&lt;math.h&gt;</B> contains many new library functions. The new header <B>&lt;complex.h&gt;</B> contains math functions for complex numbers.</p>
<p>The new header <B>&lt;tgmath.h&gt;</B> defines type-generic function-like macros for many math functions (like intrinsic functions in Fortran or overloaded functions in C++). For example, after including <B>&lt;tgmath.h&gt;</B>, the call <B>sin(x)</B> will expand into a call to whichever sine function in the library takes an argument whose type is the same as the type of <B>x</B>.</p>
<p>C99 provides an optional specification of exactly how C behaves on a machine with IEEE floating-point arithmetic, including the rules for handling infinities, NaNs, signed zeroes, conversions, and expression evaluation.</p>
<p>C99 supports a new hexadecimal floating-point constant, which allows floating-point constants to be written without any loss of accuracy due to the decimal-to-binary conversion of traditional floating-point constants.</p>
<p>The header <B>&lt;float.h&gt;</B> contains additional information about the implementation.</p>
<p>New standard pragmas allow control of certain aspects of expression evaluation.</p>

<H4><FONT COLOR="#000080">Arrays</FONT></H4>

<p>The bounds of an array can now be a run-time expression; such arrays are called "variable length arrays," or VLAs for short. VLAs may not have static storage duration, and thus may not be declared at file scope, but they may be function parameters or local to a function. If local to a function, the correct amount of space for a VLA is allocated when the block containing the array is entered and the declaration of the VLA is reached. The storage is deallocated when leaving the block.</p>
<p>The last member of a struct may be an array with no bounds expression, called a flexible array member. If such a struct is allocated using <B>malloc</B>, the programmer can request additional storage to allow the flexible array member to be an array of any desired size.</p>
<p>Type qualifiers may appear after the <B>[</B> in the declaration of an array parameter to a function. Once the compiler has changed the type of the parameter from array to pointer, the type qualifiers modify the pointer type.</p>

<H4><FONT COLOR="#000080">Features From C++</FONT></H4>

<p><B>//</B> comments are in C99.</p>
<p>Declarations do not have to appear at the start of a block. They may be intermixed with executable statements.</p>
<p>The <B>if</B>, <B>switch</B>, <B>while</B>, <B>do</B>, and <B>for</B> statements are now all blocks, as if a <B>{</B> preceded the statement and a <B>}</B> followed it. The first expression in a <B>for</B> statement (the initialization expression) may now be a declaration of the loop variable, which has scope of just the <B>for</B> statement.</p>
<p>Type qualifiers (<B>const</B>, <B>volatile</B>, <B>restrict</B>) may be redundantly specified.</p>

<H4><FONT COLOR="#000080">Convenience Features</FONT></H4>

<p>The enumerator list in the declaration of an enum type may have a trailing comma.</p>
<p>The minimum translation limits have been increased. Compilers are required to translate more complex programs.</p>
<p>Implementations must now support mixed-case external names. (C89 permitted implementations to force all external names to all upper case or all lower case.)</p>

<H4><FONT COLOR="#000080">Optimization Features</FONT></H4>

<p>Functions can be declared inline to encourage the implementation to eliminate function call overhead by inline substituting the body of the function at a call site. Inline functions may be extern.</p>
<p>A pointer can be declared with the <B>restrict</B> keyword. For example:</p>

<pre>
int *restrict p;
</pre>

<p>tells the optimizer that the pointer <B>p</B> is the only way to access the object to which <B>p</B> points. This potentially permits the compiler to produce much better code.</p>
<p>The keyword <B>static</B> may appear after the <B>[</B> in the declaration of an array parameter. This tells the optimizer that the array really is as big as specified, and may permit better code to be generated.</p>

<H4><FONT COLOR="#000080">Initialization</FONT></H4>

<p>A new feature, designated initializers, permits you to name the particular member or array element being initialized. For example:</p>

<pre>
struct S {
  int i;
  float f;
  int a[2];
};

struct S x = {
  .f=3.1,
  .i=2,
  .a[1]=9
};
</pre>

<p>Compound literals permit you to create an anonymous object and initialize it anywhere the value of such an object could appear. Syntactically, a compound literal is a cast followed by a brace-enclosed initializer. For example, if <B>f</B> is a function that takes an argument of type struct <B>S</B> above, you could write:</p>

<pre>
f((struct S) {2, 3.1, {0,9}});
</pre>

<H4><FONT COLOR="#000080">Preprocessor</FONT></H4>

<p>Macros may take a variable number of arguments. In the macro body, the special identifier <B>__VA_ARGS__</B> expands into a list of the variable arguments.</p>
<p>A macro argument may consist of no tokens.</p>
<p>C99 has a preprocessor operator of the form:</p>

<pre>
_Pragma ( string-literal )
</pre>

<p>This pragma operator behaves exactly as if a normal <B>#pragma</B> directive was encountered with the value of the string literal as its argument. However, the <B>_Pragma</B> operator may appear anywhere (not just at the beginning of a line) and macro bodies may contain <B>_Pragma</B>.</p>
<p>There are additional predefined macro names indicating the version of the C Standard supported, which optional parts of the C Standard are supported, and whether the implementation is hosted or freestanding (whether there is an operating system and C library the program can call).</p>
<p>Every function has the following implicit local variable:</p>

<pre>
static const char __func__[]
= "function-name";
</pre>

<p>where <B>function-name</B> is the name of the function. (Actually, <B>__func__</B> does not exist unless referenced in the function.) The <B>assert</B> macro uses <B>__func__</B> to report the function containing a failing assertion. (This is not a preprocessor feature, but it is similar to <B>__FILE__</B> and <B>__LINE__</B>.)</p>
<p>Preprocessor arithmetic is performed in the largest signed and unsigned integer types the implementation supports.</p>

<H4><FONT COLOR="#000080">Program Correctness</FONT></H4>

<p>C89 assumes an implicit type of <B>int</B> when a type is needed but never specified. This might happen when a variable is declared without a type, or a function does not have a declared return value. C99 requires a diagnostic be issued for these cases. Most implementations will issue a warning message, and then assume <B>int</B> in order to avoid breaking programs that relied on implicit <B>int</B>.</p>
<p>C99 requires a diagnostic if a return statement fails to return a value in a non-void function. It also requires a diagnostic if a return statement returns a value in a void function.</p>

<H4><FONT COLOR="#000080">Internationalization</FONT></H4>

<p>Accented letters, Non-English letters, and ideograms from languages like Chinese may be used in identifier names, including external identifiers.</p>
<p>The ISO 10646 Standard <a href="#ref5">[5]</a> is a universal character set whose goal is to have character codes for all characters in all languages. ISO 10646 has both two-byte and four-byte character codes, and is a superset of Unicode. C99 permits you to represent any character in ISO 10646 by <B>\u</B> followed by four hex digits or <B>\U</B> followed by eight hex digits, where the hex digits are the character code in ISO 10646 for the character. These constructs are called the Universal Character Names or UCNs. You may use UCNs in strings, character constants, or identifiers.</p>
<p>Additional functions to process multibyte characters and wide characters are in the library.</p>
<p>The header <B>&lt;iso646.h&gt;</B> contains macros for some operators in C that require trigraphs to be used in some character sets.</p>
<p>Digraphs that are synonyms for some trigraphs are provided.</p>

<H4><FONT COLOR="#000080">Library</FONT></H4>

<p>In addition to new functions mentioned elsewhere in this article, the library contains some new specialized forms of <B>printf</B> and <B>scanf</B>. All <B>printf</B> and <B>scanf</B> family functions support new format conversion specifiers.</p>
<p>The <B>strftime</B> function supports additional conversion specifiers.</p>
<p>A new function, <B>va_copy</B>, is added to <B>&lt;stdarg.h&gt;</B>. It makes a copy of the variable argument pointer.</p>

<H4><FONT COLOR="#000080">Next Month</FONT></H4>

<p>Next Month we'll take a look at C99's new <B>restrict</B> keyword, and examine what restricted pointers can do to improve performance.</p>

<H4><FONT COLOR="#000080">References</FONT></H4>

<p><a name="ref1">[1]</a>  ISO/IEC 9899:1999, Programming Languages &#151; C. 1999.</p>
<p><a name="ref2">[2]</a>  ISO/IEC 9899:1990, Programming Languages &#151; C. 1990.</p>
<p><a name="ref3">[3]</a>  ISO/IEC 9899 Amendment 1, Programming Languages &#151; C Integrity. 1995.</p>
<p><a name="ref4">[4]</a>  X3/TR-17:1997, Numerical C Extensions. 1997.</p>
<p><a name="ref5">[5]</a>  ISO/IEC 10646, Information technology &#151; Universal Multiple-Octet Coded Character Set (UCS).</p>

<p><i><B>Randy Meyers</B> is consultant providing training and mentoring in C, C++, and Java. He is the current chair of J11, the ANSI C committee, and previously was a member of J16 (ANSI C++) and the ISO Java Study Group. He worked on compilers for Digital Equipment Corporation for 16 years and was Project Architect for DEC C and C++. He can be reached at <B>rmeyers@ix.netcom.com</B>.</i></p>

</blockquote></body></html>
