<HTML><HEAD>
<TITLE>October 2000/The Journeyman's Shop/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: The new version of the header fp.h</A></h4>
<pre>
// class fp

#ifndef FP_H
#define FP_H

#include &lt;iosfwd&gt;
#include &lt;limits&gt;
#include &lt;string&gt;

class fp
{    // naive floating point implementation

public:

    fp();
    explicit fp(const char *);
    explicit fp(double);
    
    fp&amp; operator += (const fp&amp;);
    fp&amp; operator -= (const fp&amp;);
    fp&amp; operator *= (const fp&amp;);
    fp&amp; operator /= (const fp&amp;);
    friend fp operator - (const fp&amp;);
    
    friend bool operator == (const fp&amp;, const fp&amp;);
    friend bool operator != (const fp&amp;, const fp&amp;);
    friend bool operator &lt;  (const fp&amp;, const fp&amp;);
    friend bool operator &lt;= (const fp&amp;, const fp&amp;);
    friend bool operator &gt;  (const fp&amp;, const fp&amp;);
    friend bool operator &gt;= (const fp&amp;, const fp&amp;);

    static const fp zero;
    static const fp one;
    static const fp two;

    friend std::string to_string(const fp&amp;);
    friend std::ostream&amp; operator &lt;&lt; (std::ostream&amp;, const fp&amp;);

    enum round_mode
        {
        rm_nearest,
        rm_down,
        rm_up,
        rm_zero
        };
    static void set_round(round_mode m) {rm = m;}
    static round_mode get_round() {return rm;}

    enum fp_exception
        {
        div_by_zero        = 0x01,
        exp_underflow    = 0x02,
        exp_overflow    = 0x04,
        inexact            = 0x08,
        invalid            = 0x10
        };
    typedef fp (*exc_hnd)(fp_exception, fp);
    static void set_flag(fp_exception);
    static bool get_flag(fp_exception);
    static void clear_flags();
    static void set_flags(int);
    static int get_flags();
    static exc_hnd set_handler(fp_exception, exc_hnd);
    static exc_hnd get_handler(fp_exception);

private:
    fp(int e, int f, bool neg);

    bool eq(const fp&amp;) const;
    bool lt(const fp&amp;) const;

    fp&amp; add(const fp&amp;, const fp&amp;);
    fp&amp; normalize(int, long);
    bool round(long&amp;);
    void convert(double);
    long lf() const;
    
    enum fpx
        { dbz, exu, exo, ine, inv, EXC_COUNT };
    static fp exception(fpx, fp);

    bool is_neg;
    unsigned char exp;
    int frac;
    static round_mode rm;

    static exc_hnd exc_hndlrs[EXC_COUNT];
    static const exc_hnd def_hndlrs[EXC_COUNT];
    static unsigned char exc_flg;
    
    static const fp pinf;
    static const fp ninf;
    static const fp qnan;
    static const fp snan;
    static const fp pmax;
    static const fp nmax;
    static const fp nzero;
    
    static fp ex_dbz(fp_exception, fp);
    static fp ex_exu(fp_exception, fp);
    static fp ex_exo(fp_exception, fp);
    static fp ex_ine(fp_exception, fp);
    static fp ex_inv(fp_exception, fp);

    friend fp def_dbz(fp_exception, fp);
    friend fp def_exu(fp_exception, fp);
    friend fp def_exo(fp_exception, fp);
    friend fp def_ine(fp_exception, fp);
    friend fp def_inv(fp_exception, fp);
    
};

fp operator + (const fp&amp;, const fp&amp;);
fp operator - (const fp&amp;, const fp&amp;);
fp operator * (const fp&amp;, const fp&amp;);
fp operator / (const fp&amp;, const fp&amp;);

inline bool operator == (const fp&amp; f1, const fp&amp; f2)
    {    // return f1 equal to f2
    return f1.eq(f2);
    }

inline bool operator != (const fp&amp; f1, const fp&amp; f2)
    {    // return f1 not equal to f2
    return !f1.eq(f2);
    }

inline bool operator &lt;  (const fp&amp; f1, const fp&amp; f2)
    {    // return f1 less than f2
    return f1.lt(f2);
    }

inline bool operator &lt;= (const fp&amp; f1, const fp&amp; f2)
    {    // return f1 less than or equal to f2
    return !f2.lt(f1);
    }

inline bool operator &gt;  (const fp&amp; f1, const fp&amp; f2)
    {    // return f1 greater than f2
    return f2.lt(f1);
    }

inline bool operator &gt;= (const fp&amp; f1, const fp&amp; f2)
    {    // return f1 greater than or equal to f2
    return !f1.lt(f2);
    }

#endif    /* FP_H */
</pre></body></html>
