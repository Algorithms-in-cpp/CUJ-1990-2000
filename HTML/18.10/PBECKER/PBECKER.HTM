<HTML>   
     <HEAD>
<TITLE>October 2000/The Journeyman's Shop</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tococt.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">The Journeyman's Shop: When Bad Things Happen to Good Numbers</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Pete Becker</FONT></H3>

<BLOCKQUOTE>
<p>It takes a lot of preparation to write really robust floating-point code.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>One way to tell whether a piece of code was written by a beginner or by an experienced professional is to look at how it handles errors. Beginners often start by writing code that implements the desired algorithm, then, if they think of it, adding code to handle errors. The result can be a hodge-podge of ad hockeries, abandoning a computation when an input error produces noticeable symptoms, or attempting to patch a computation that has gone astray, rather than detecting input conditions early that will lead to problems later and taking appropriate steps to limit the damage before starting the real work. Here in The Journeyman's Shop we've learned that error handling is often the most difficult part of implementing an algorithm. We've learned that spending time identifying potential sources of problems and deciding how to handle them before we start writing code reduces the time we spend implementing and debugging an algorithm. We've also learned that analyzing possible problems before coding can help us understand an algorithm better, sometimes producing insights that result in much simpler and cleaner code for the algorithm itself. We all enjoy writing code &#151; that's the most obviously productive part of our job &#151; and we look forward to the feeling of satisfaction that we get when our code passes all of the rigorous tests that we've prepared for it. Experience teaches us that a furious rush toward this end can lead to disappointment, while a more deliberate pace, postponing completion until we've built a sound foundation, ultimately produces a more satisfying result.</p>

<H4><FONT COLOR="#000080">Avoiding Numerical Errors</FONT></H4>

<p>In numerical analysis the above rule works overtime. The biggest difficulty is often not writing the code, but deciding what code to write. In an earlier column we looked at some of the sources of errors in floating-point computations <a href="#ref1">[1]</a>. A numerical analyst has to understand those sources of errors and design a computation so that those errors won't invalidate the result. I'm not qualified to do that, so I won't try to discuss it in detail. But I do want to give one example, to emphasize how easily numerical computations can go astray if we aren't careful.</p>
<p>Back in high school we all learned the closed form solution for the roots of a quadratic equation. Given an equation of the form</p>

<pre>
ax<SUP>2</SUP> + bx + c = 0
</pre>

<p>we can find its roots with the following formulae:</p>

<pre>
x1 = (-b + sqrt(b<SUP>2</SUP> - 4ac))/2a
x2 = (-b - sqrt(b<SUP>2</SUP> - 4ac))/2a
</pre>

<p>We also learned that if <B>4ac</B> is greater than <B>b<SUP>2</SUP></B>, the equation has no real roots. Obviously, if we are going to write code to compute the roots of a quadratic equation, we have to watch out for these cases. In Java we might be tempted to simply ignore the problem, and rely on the square root function to detect the attempt to take the square root of a negative number and throw an exception. In C and C++ we don't have that option. The behavior of the <B>sqrt</B> function is undefined when it is called with a negative number, so we have to write code to detect this case and handle it appropriately:</p>

<pre>
double disc = b*b - 4*a*c;
if (disc &lt; 0)
   printf("no real roots\n");
else
   {
   /* continue the computation */
   }
</pre>

<p>That's also the right solution in Java; it makes the control flow clear, and doesn't abuse the exception mechanism by using it to handle ordinary, non-exceptional conditions.</p>
<p>The possibility of having no real roots is inherent in solving quadratic equations. When we try to solve them using floating-point math we introduce an additional set of complications that don't come with the original problem. Rather, they arise from our use of limited-precision representations of values that often cannot be expressed exactly in a finite number of bits. That is, we run into the roundoff errors that we discussed earlier. The simplest example is the case where the equation has only one root. In that case, as you probably remember, the value of the discriminant, <B>b<SUP>2</SUP> - 4ac</B>, is zero. But that's only true in the theoretical world of abstract algebra. In the concrete world of finite representations of floating-point values, the values of <B>a</B>, <B>b</B>, and <B>c</B> have been rounded to fit in floating-point variables, so they might not have the exact values that theory would indicate. Further, the multiplications that we have to make to calculate the discriminant can introduce additional roundoff errors. When we get around to subtracting <B>4ac</B> from <B>b<SUP>2</SUP></B> we have probably introduced enough errors into those two values that the result of the subtraction will not be zero. So in our algorithm we will probably erroneously conclude that we do not have a single root, but that we either have no roots or two roots.</p>
<p>Even if <B>b<SUP>2</SUP></B> is much larger than <B>4ac</B> we still can run into problems. There's another subtraction here which could magnify roundoff errors and produce incorrect results. If <B>b</B> is positive, then the numerator in the calculation of <B>x1</B> is equivalent to</p>

<pre>
sqrt(disc) - b
</pre>

<p>and if <B>sqrt(disc)</B> and <B>b</B> are fairly close in value, roundoff errors can easily dominate the result. Similarly, if <B>b</B> is negative, the numerator in the calculation of <B>x2</B> is equivalent to</p>

<pre>
b - sqrt(disc)
</pre>

<p>and again roundoff errors can easily dominate the result.</p>
<p>The important thing to notice here is that one of the two results can be obtained only by subtracting two numbers that may be close together. So numerical analysts usually don't use this formula for solving quadratic equations. They use other approaches. One of those approaches is to divide both sides of the original equation by <B>a</B> and rename the coefficients so that the equation looks like this:</p>

<pre>
x<SUP>2</SUP> + 2bx + c = 0
</pre>

<p>Note that we've also expressed the coefficient of <B>x</B> as <B>2b</B>, rather than <B>b</B>. That is, the value of <B>b</B> that we'll use in solving this equation is the new coefficient of <B>x</B>, divided by 2. Now the two solutions can be written as:</p>

<pre>
x1 = -b + sqrt(b<SUP>2</SUP> - c)
x2 = -b - sqrt(b<SUP>2</SUP> - c)
</pre>

<p>This doesn't eliminate the problem we saw earlier in calculating the discriminant, but if we have the added information that the product of the two roots will be <B>c</B>, we can eliminate the second subtraction. Here's how: if <B>b</B> is negative, we first get the value of <B>x1</B> from our formula. This involves the addition of two positive numbers, so it avoids the magnification of roundoff errors that subtraction produces. Once we have that result, we divide it into <B>c</B> to get the value of <B>x2</B>. Similarly, if <B>b</B> is positive, we first get the value of <B>x2</B> from our formula, and divide it into <B>c</B> to get the value of <B>x1</B>. In both cases we've avoided one of the subtractions that could have led to erroneous results <a href="#ref2">[2]</a>.</p>

<H4><FONT COLOR="#000080">Detecting Numerical Errors</FONT></H4>

<p>Sometimes the best approach to a calculation is simply to do it and check afterwards whether the result is sensible. For example, we may know two different ways of computing the result we're looking for, one of which is fast when it works, but can end up dividing by zero for some input values, and the other of which is much slower, but works for all input values. In that case we might decide to try the first one, and if it fails, drop back to the second. To do this our code must be able to detect a division by zero, so that it can switch to the slower method.</p>
<p>If you try this with the floating-point emulator that we've been building in the past few columns, you'll see that it doesn't handle this sort of situation gracefully. Giving the four-function calculator an expression that divides by zero terminates the program:</p>

<pre>
d:&gt; 4bang 1.0/0.0
floating-point error: divide by zero
d:&gt;
</pre>

<p>That doesn't help much if you need to detect the failure in order to try another approach. So these days, many floating-point systems provide less abrupt failure mechanisms. Most of these follow, more or less, the specifications set out in the IEEE Standard for Binary Floating-Point Arithmetic (IEEE-754) <a href="#ref3">[3]</a>. The IEEE specification provides for error handling through exceptions, flags, traps, and special floating-point values that indicate that errors have occurred. In the remainder of this column we'll see how these error handling mechanisms are defined, by looking at how they can be implemented in our floating-point emulator.</p>

<H4><FONT COLOR="#000080">Floating-Point Exceptions</FONT></H4>

<p>A floating-point exception is not the same thing as an exception in C++. They just happen to have the same name, and a certain superficial similarity, since they both deal with computations that have somehow gone astray. Don't confuse the two terms: a floating-point exception has nothing to do with a C++ exception <a href="#ref4">[4]</a>.</p>
<p>A floating-point exception occurs when something goes wrong in a floating-point computation. IEEE-754 defines five types of floating-point exception: invalid operation, division by zero, overflow, underflow, and inexact. For each of these exception types you can install your own handler, known as a "trap handler," which will be called whenever an exception of the corresponding type occurs. If you don't install your own trap handler, the default behavior of an IEEE-754 implementation is to set a flag indicating the type of exception that occurred and, depending on the type of exception, to produce a special value that indicates that an exception occurred. The flags are sometimes known as "sticky bits." They are set when an exception occurs, but floating-point computations never clear them. That means that when a computation has finished you can check the flags to see if any exceptions occurred.</p>
<p>With an updated emulator that supports IEEE-754 exceptions, the four-function calculator produces the following output for division by zero:</p>

<pre>
d:&gt; 4bang 1.0/0.0
Inf (+,128,0)
d:&gt;
</pre>

<p>That is, the result of <B>1.0/0.0</B> is the special value Infinity. Unlike the previous version of the emulator, dividing by zero does not terminate execution, so we can continue with our computation without having to know that we divided by zero:</p>

<pre>
d:&gt; 4bang 1.0/0.0+1.0
Inf (+,128,0)
d:&gt;
</pre>

<H4><FONT COLOR="#000080">Exception Handling</FONT></H4>

<p>With that in mind, let's look at the code that implements the default behavior of the five IEEE-754 categories of exceptions. <a href="list1.htm">Listing 1</a> is the new version of the header file <B>fp.h</B> <a href="#ref5">[5]</a>. There's been quite a bit added to support floating-point exceptions. The enumerated type <B>fp_exception</B>, which indicates the type of the exception that occurred, has been moved from the private section to the public section. It is followed by a type declaration, to simplify trap handling, then five functions that deal with flags and two functions that deal with traps. We'll look at those in the next column. The private section of class <B>fp</B> now has an additional enumerated type, <B>fpx</B>; and the static member function <B>exception</B>, which is called whenever an exception occurs, now takes a second argument, of type <B>fp</B>, and returns a result, also of type <B>fp</B>. These are followed by seven new static data members that are a convenient way of getting the special floating-point values that we'll be looking at later.</p>
<p>The static member <B>exc_handlers</B> is an array of pointers to functions. When an exception occurs, the function <B>exception</B> uses the type code to generate an index into this array and call the corresponding exception handler.</p>
<p>The class <B>fp</B> also has five static member functions that implement the default handling for the five exception types. Their names take the form <B>ex_XXX</B>, where the letters <B>XXX</B> are replaced by a three-letter code for the exception type that the particular function handles. The class also declares five friend functions, with names of the form <B>def_XXX</B>, where <B>XXX</B>, again, is a code for the exception type that the function handles. This two-layer system makes trap handling simpler. The member functions <B>ex_XXX</B> implement the default trap handling. Since user-installed traps cannot be members of the class <B>fp</B>, the trap handling mechanism must be able to manage non-member functions. That's the reason for the <B>def_XXX</B> functions: they are installed as the default trap handlers, and each of them simply calls the corresponding <B>ex_XXX</B> function. Since the function <B>exception</B> does not have to distinguish between default handling and user-installed trap handlers, it is very simple to write:</p>

<pre>
fp fp::exception(fpx except, fp arg)
   {   // handle floating-point exceptions
   return exc_hndlrs[except]
      ((fp_exception)(1 &lt;&lt; except), arg);
   }
</pre>

<H4><FONT COLOR="#000080">Default Handlers</FONT></H4>

<p>The handling of the inexact exception is the simplest: when rounding drops low bits from a value the inexact flag is set. Here's the code that does this:</p>

<pre>
fp fp::ex_ine(fp::fp_exception except, fp arg)
   {
   set_flag(except);
   return arg;
   }
</pre>

<p>The function <B>set_flag</B>, as its name suggests, sets the flag corresponding to the specified type of exception. All the default exception handlers call this function. After calling <B>set_flag</B>, this handler just returns the value of its second argument. The value that an exception handler returns will be used in the floating-point computation in place of the value that triggered the exception. In this case we want to use the rounded value that has already been computed, so the exception handler simply returns that value.</p>
<p>On division by zero, the default behavior is to set the flag and return positive or negative infinity, depending on the signs of the operands in the division. The default handler looks like this:</p>

<pre>
fp fp::ex_dbz(fp::fp_exception except, fp arg)
   {
   set_flag(except);
   return arg.is_neg ? ninf : pinf;
   }
</pre>

<p>This code relies on a trick that doesn't conform to the IEEE-754 standard: the value passed in <B>arg</B> has its sign set according to the sign of the desired result. The function uses that sign value to determine the sign of the infinite value that it returns.</p>
<p>On overflow, the default behavior is to set a flag and to return a value that depends on the sign of the result and on the rounding mode. When the rounding mode is set to round toward zero, overflows produce the largest finite representable value with the appropriate sign. When the rounding mode is round down, an overflow in the positive direction produces the largest positive finite representable value. When the rounding mode is round up, an overflow in the negative direction produces the largest negative finite representable value. In all other cases an overflow produces an infinity with the appropriate sign. The code for the default overflow handler looks like this:</p>

<pre>
fp fp::ex_exo(fp::fp_exception except, fp arg)
   {
   set_flag(except);
   return rm == rm_nearest
         ? arg.is_neg ? ninf : pinf
      : rm == rm_zero
         ? arg.is_neg ? nmax : pmax
      : rm == rm_down
         ? arg.is_neg ? ninf : pmax
         : arg.is_neg ? nmax : pinf;
   }
</pre>

<p>Underflow requires us to introduce a new concept. In the previous versions of the emulator, when an arithmetic operation produced a value whose exponent was too small to represent, we converted the value to zero. IEEE-754 provides the notion of gradual underflow: when an exponent is too small to represent, the value is represented with the smallest representable exponent and a denormalized fraction, that is, a fraction in which the high bit is not one. In our emulator, the smallest representable exponent is <B>-127</B>. The smallest normalized value has an exponent of <B>-127</B> and a fraction of <B>0x4000</B>. If we divide this value by two, since we can't decrease the exponent below <B>-127</B>, we decrease the fraction by dividing it by two, producing a value with an exponent of <B>-127</B> and a fraction of <B>0x2000</B>. The smallest positive non-zero value that can be represented has an exponent of -127 and a fraction of <B>1</B>. If we divide this value by two we end up with an exponent of <B>-127</B> and a fraction of <B>0</B>, which is the representation for the value zero.</p>
<p>The thing to keep in mind when dealing with denormals is that when the fraction has high-order bits equal to zero it has fewer significant bits than a normalized value. So gradual underflow is accompanied by gradual loss of precision. Sometimes that's okay. If the low bits that are discarded in producing the denormalized fraction are all zero, then the denormalized fraction hasn't actually lost any bits, and subsequent computations using this value won't be compromised by the denormalization. Consequently, an underflow exception is generated only when the result of a computation is too small to represent in normalized form and some low-order non-zero bits were discarded in producing the denormalized value.</p>
<p>The underflow handler is called with a floating-point value whose exponent is 192 more than the exponent that would have been generated, and a normalized fraction. That is, the value that the handler gets is 2192 times the correct value. This value can be represented with full precision in a normal floating-point value. Our default handler simply removes this factor of 2192 to produce the actual exponent, then shifts the fraction, denormalizing it:</p>

<pre>
fp fp::ex_exu(fp::fp_exception except, fp arg)
   {
   set_flag(except);
   int ex = arg.exp - 192;
   int fr = arg.frac &gt;&gt; -ex;
   return fp(0 - BIAS, fr, arg.is_neg);
   }
</pre>

<p>Finally, the invalid operation exception introduces another special value, NaN, short for "not a number." These come in two forms: signaling NaNs and quiet NaNs. Floating-point computations never produce signaling NaNs. They arise only if you write code to create them. We'll see later how NaNs propagate through floating-point computations. The default handler for an invalid operation exception sets the flag to indicate that this exception occurs and returns a quiet NaN. It looks like this:</p>

<pre>
fp fp::ex_inv(fp::fp_exception except, fp)
   {
   set_flag(except);
   return qnan;
   }
</pre>

<H4><FONT COLOR="#000080">Generating Exceptions</FONT></H4>

<p>Now that we've seen the code that handles floating-point exceptions we need to look at where these functions are called. The code changes from the old emulator are mostly tedious additions to the member functions <B>fp::add</B>, <B>fp::operator *=</B>, <B>fp::operator /=</B>, and <B>fp::normalize</B>.</p>
<p>The new version of <B>fp::add</B> is in <a href="list2.htm">Listing 2</a>. The code begins by testing whether either argument is a NaN. If so, the result of the addition is also a NaN. Then it checks for addition of infinities of opposite signs. Such an operation doesn't have any sensible result, so it generates an invalid operation exception. As we saw earlier, the default behavior for an invalid operation exception is to return a NaN. Next, the function checks whether its first argument is an infinity. If so, it returns that value. If not, it checks whether its second argument is an infinity. If so, it returns that value. Finally, if none of those special cases has occurred, it falls through into the addition code for ordinary floating-point values.</p>
<p>The order of these tests is important. Any arithmetic operation on a NaN must produce a NaN <a href="#ref6">[6]</a>, so we check for NaN values first. Any operations involving infinities but no NaNs must produce either a NaN (for addition of infinities of opposite signs) or an infinity, so we check next for infinities. Once we've dealt with any NaNs and infinities we're left with two floating-point values. We don't have to look for denormals here &#151; ordinary arithmetic operations work correctly with denormals.</p>
<p>The new version of <B>fp::operator *=</B> is in <a href="list3.htm">Listing 3</a>. It begins by converting its arguments with the macro <B>ARG</B>. This macro checks whether its argument is a signaling NaN, and if so, raises an invalid operation exception <a href="#ref7">[7]</a>. As we saw earlier, the default result of an invalid operation exception is a quiet NaN <a href="#ref8">[8]</a>. After these adjustments, the code checks whether either of the function's arguments is a NaN, and if so, assigns that NaN to the return value. If neither argument is a NaN, the code checks for the two cases of infinity times zero and zero times infinity. These trigger an invalid operation exception, resulting, again, in a NaN. If neither of these cases has occurred, the code checks whether either argument is zero. If so, it returns a value of zero with the appropriate sign. Next it checks whether either value is infinity, and if either one is, it returns a value of infinity with the appropriate sign. Otherwise it does the multiplication and returns the result.</p>
<p>The code for <B>fp::operator /=</B> is in <a href="list4.htm">Listing 4</a>. It looks quite a bit like the code for <B>fp::operator *=</B>. The first difference is in the tests that produce an invalid operation exception. For multiplication, zero times infinity is an invalid operation. For division, infinity divided by infinity and zero divided by zero are invalid operations. The second difference is in the handling when the second argument is zero, which triggers a division by zero exception.</p>
<p>Finally, the function <B>fp::normalize</B> has been changed a bit from the previous version. The new code is in <a href="list5.htm">Listing 5</a>. The function <B>round</B> has been changed to return a Boolean value indicating whether any low-order bits will be discarded in the rounding. The code saves the result of the call to <B>round</B> for later use. The tests for underflow and overflow at the end of the function have to test more cases because of the additional rules imposed by IEEE-754.</p>
<p>The first test checks whether the exponent is smaller than the smallest representable exponent. If so, we have to denormalize the result. If rounding the result will discard non-zero bits we have an underflow exception. If not, we just generate a denormalized value.</p>
<p>The next test checks whether the exponent is larger than the largest representable exponent. If so, we have an overflow exception.</p>
<p>The next test checks whether rounding will discard non-zero bits. If so, we have an inexact exception.</p>
<p>If we get through all those tests, we have the pieces of a properly normalized value, and we simply generate that value and return.</p>

<H4><FONT COLOR="#000080">Trying It Out</FONT></H4>

<p>After you've downloaded the code from the <I>CUJ</I> web site, build the four-function calculator and try out some of the edge cases we've talked about. You'll need to compile <B>4bang.cpp</B> and <B>fp.cpp</B>. The four-function calculator is a bit limited in the form of input that it takes, so you sometimes have to be a little tricky to hit the edge cases. But with a little ingenuity and some carefully placed parentheses you can generate anything you'd like. Here are a few things you might try.</p>
<p>To generate infinity:</p>

<pre>
d:&gt; 4bang 1.0/0.0
Inf (+,128,0)
d:&gt;
</pre>

<p>To generate negative infinity:</p>

<pre>
d:&gt; 4bang -1.0/0.0
-Inf (-,128,0)
d:&gt;
</pre>

<p>To generate NaN:</p>

<pre>
d:&gt; 4bang 0.0/0.0
NaN (+,128,1)
d:&gt;

d:&gt; 4bang (1.0/0.0)/(-1.0/0.0)
NaN (+,128,1)
d:&gt;
</pre>

<H4><FONT COLOR="#000080">Next Month</FONT></H4>

<p>Next month we'll wrap up this exploration of floating-point math, looking at user-defined trap handlers and the changes made to the C language definition by the recent C99 revision.</p>

<H4><FONT COLOR="#000080">References</FONT></H4>

<p><a name="ref1">[1]</a>  <a href="../../18.07/becker/becker.htm">"The Journeyman's Shop: Error in Floating-Point Computations,"</a> <I>CUJ,</I> July 2000.</p>
<p><a name="ref2">[2]</a>  This approach is taken from Forman S. Acton, <I>Real Computing Made Real</I> (Princeton University Press 1996), ISBN 0-691-03663-2, p. 5.</p>
<p><a name="ref3">[3]</a>  Available for purchase at <B>shop.ieee.org/store/</B>.</p>
<p><a name="ref4">[4]</a>  Some compilers turn floating-point exceptions into C++ exceptions, but this is not allowed by the C++ language definition.</p>
<p><a name="ref5">[5]</a>  Complete code is available at <B>www.cuj.com/code</B>.</p>
<p><a name="ref6">[6]</a>  We'll see next month that comparisons of values involving NaNs produce Boolean results.</p>
<p><a name="ref7">[7]</a>  This doesn't conform to the IEEE-754 standard, because it ends up generating two exceptions when an argument to <B>operator *=</B> is a signaling NaN: one when the signaling NaN is converted to a quiet NaN, and another when the code later tests for a NaN.</p>
<p><a name="ref8">[8]</a>  The same check is performed in <B>fp::operator+</B> and <B>fp::operator-</B> before these functions call <B>add</B>.</p>

<p><i><B>Pete Becker</B> is Technical Project Leader for Dinkumware, Ltd. He spent eight years in the C++ group at Borland International, both as a developer and manager. He is a member of the ANSI/ISO C++ standardization committee. He can be reached by email at <B>petebecker@acm.org</B>.</i></p>

<h4><a href="../../../source/2000/oct00/pbecker.zip">Get Article Source Code</a></h4>
</blockquote></body></html>
