<HTML>
<HEAD>
<TITLE>October 2000</TITLE></HEAD>     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          <BLOCKQUOTE> <IMG SRC="../logo.gif" ALT="{logo}" WIDTH="310" HEIGHT="100">
               
               <H3><FONT COLOR="#000080">October 2000<BR>
                Volume 18 Number 10</FONT></H3>
               
<H3><FONT COLOR="#FF0000">OBJECTS AND COMPONENTS</FONT></H3>

<H4><A HREF="cacciola/cacciola.htm">An Improved Variant Type Based on Member Templates</A></H4>
<p><b>Fernando Cacciola</b><br>
<i>C has generic pointers and varying length argument lists for flexibility. C++ has templates for even more flexibility, and better type safety in the bargain.</i></p>

<H4><A HREF="queisser/queisser.htm">Classes for Reading and Writing Parameter Blocks</A></h4>
<p><b>Andrew Queisser</b><br>
<i>Fortran IV let you read and write variables by name since the 1960s. It still makes sense to do so in C++.</i></p>

<H3><FONT COLOR="#FF0000">FEATURES</FONT></H3>
<H4><A HREF="nash/nash.htm">Introduction to Function Try Blocks</A></H4>
<p><b>Alan Nash</b><br>
<i>Exceptions can occur in the darndest places. Fortunately, try blocks can also be written in most of those places.</i></p>

<H4><A HREF="niec/niec.htm">Optimizing Substring Operations in String Classes</A></H4>
<p><b>Todd Niec</b><br>
<i>If reference counting is good for operations on whole strings, it should be good for operations on substrings too.</i></p>

<H3><FONT COLOR="#FF0000">C/C++ CONTRIBUTING EDITORS</FONT></H3>

<H4><A HREF="meyers/meyers.htm">The New C: Introducing C99</A></H4>
<p><b>Randy Meyers</b><br>
<i>C99 is much like C89, but with more of the same &#151; lots more of the same.</i></p>

<H4><A HREF="pbecker/pbecker.htm">The Journeyman's Shop: When Bad Things Happen to Good Numbers</A></H4>
<p><b>Pete Becker</b><br>
<i>It takes a lot of preparation to write really robust floating-point code.</i></p>

<H4><A HREF="tbecker/tbecker.htm">STL &amp; Generic Programming: The Template Compilation Model</A></H4>
<p><b>Thomas Becker</b><br>
<i>Templates change the way compilers and linkers interact, often in ways that are hard to fathom.</i></p>

<H4><A HREF="schmidt/schmidt.htm">Uncaught Exceptions: Sunshine Superman</A></H4>
<p><b>Bobby Schmidt</b><br>
<i>Bobby answers several questions from the fringes of valid C++.</i></p>

<H4><A HREF="bootle/bootle.htm">Post-Mortem Debunker: Angelology</A></H4>
<p><b>Stan Kelly-Bootle</b><br>
<i>Stan muses on pinheads who get rich and heads of pins that are angel poor.</i></p>

<H3><FONT COLOR="#FF0000">DEPARTMENTS</FONT></H3>

<H4><A HREF="editor/editor.htm">Editor's Forum</A></H4>
<H4><A HREF="newprod/newprod.htm">New Products</A></H4>
<H4><A HREF="letters/letters.htm">We Have Mail</A></H4>

<H3><FONT COLOR="#FF0000">C++ EXPERTS FORUM &#151 WEB-EXCLUSIVE</FONT></H3>
<p>In this new, web-only component of CUJ, we continue publication of the columns that were popular in the former C++ Report magazine. The following articles are featured on the CUJ website this month:

<H4><A HREF="../cexp1810/kreft/kreft.htm">Are Set Iterators Mutable or Immutable?<br>
Portability Issues in Using the Standard Library</A></h4>
<p><b>Klaus Kreft and Angelika Langer</b><br>
<i>The C++ Standard mandates that containers such as <B>std::set</B> provide both mutable and immutable iterators. Unfortunately, mutable iterators turn out to be dangerous when used with sets. If you use one to modify an element of a set, you risk corrupting the underlying data structure. Langer and Kreft explain why this is so, and they discuss some of the less-than-desirable solutions – including non-portable implementations of the standard library. The authors then propose a more sensible, and portable, solution using iterator adapters.</i></p>

<H4><A HREF="../cexp1810/alexandr/alexandr.htm">Generic&lt;Programming&gt;: Mappings between Types and Values</A></H4>
<p><b>Andrei Alexandrescu</b><br>
<i>In C++, you can do a lot more things at compile time than may be immediately obvious, including selecting the right algorithm based on an integer constant, and determining if one type supports conversion to another type. Andrei Alexandrescu shows us a handful of remarkably simple, reusable templates that make such compile-time magic possible.</i></p>

<H4><A HREF="../cexp1810/martin/martin.htm">Engineering Notebook: Developing at a Sustainable Pace</A></h4>
<p><b>Robert C. Martin</b><br>
<i>Death marches, 12-hour workdays, and crash development schedules produce something besides programmer burnout – buggy code that’s impossible to maintain. Robert Martin explains why so many projects fail, and lays out the path for a healthy approach to software development.</i></p>

</BLOCKQUOTE></BODY></HTML>
