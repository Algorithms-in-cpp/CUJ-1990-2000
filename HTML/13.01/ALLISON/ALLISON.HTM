

<HTML>
<HEAD>

<TITLE>January 1995/Code Capsules</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjan.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Code Capsules<A name="002A_0011"><A name="002A_0011"></font></h2><P>
<h3 align="center"><A name="002A_0000"><A name="002A_0000">The Standard C Library, Part 1</h3><P>
<h3 align="center"><font color="#800000">Chuck Allison</font></h3><hr><blockquote><P>
<P><i><A name="002A_0000"><A name="002A_0000">Chuck Allison is a regular columnist with CUJ and a Senior Software Engineer in the Information and Communication Systems Department of the Church of Jesus Christ of Latter Day Saints in Salt Lake City. He has a B.S. and M.S. in mathematics, has been programming since 1975, and has been teaching and developing in C since 1984. His current interest is object-oriented technology and education. He is a member of X3J16, the ANSI C++ Standards Committee. Chuck can be reached on the Internet at 72640.1507@compuserve.com.</i></P><P>
Although it may not seem like it, C is a very small language. In fact, it was first implemented on a very small platform by today's standards. The first C compiler I owned ran on a Commodore 64! C's simplicity and compactness make it ideal for systems programming and for developing programs that run in <I>embedded</I> systems, such as in automobiles or cameras.<P>
A key difference between C in such freestanding environments and C in a <I>hosted</I> environment, such as a desktop or mid-range computer, is the presence of the Standard C library. In a freestanding environment a conforming compiler only needs to provide the types and macros specified in <I>&lt;float.h&gt;</I>, <I>&lt;limits.h&gt;</I>, <I>&lt;stdarg.h&gt;</I>, and <I>&lt;stddef.h&gt;</I>. By contrast, in hosted environments, programmers who work on typical data processing projects take the library for granted &#151; in fact, they think of it as part of the language. A large portion of everyday C code consists of library calls. Even I/O facilities like <I>printf</I> and <I>scanf</I> are part of the library, not the language.<P>
The Standard C library consists of functions, type definitions, and macros declared in fifteen header files. Each header more or less represents a domain of programming functionality, such as I/O or string processing operations. Some macros and type definitions, such as <I>NULL</I> and <I>size_t</I>, appear in more than one header file for convenience.<P>
In this article I divide the Standard library into three groups (see <A href="tab1.htm">Table 1</a>, <A href="tab2.htm">Table 2</a>, and 
<A href="tab3.htm">Table 3</a>)
. Group I represents library components that you should understand thoroughly if you want to consider yourself a C programmer. Too often I have seen programs that "reinvent" basic library facilities such as <I>memcpy</I> or <I>strchr</I>. Such programs should not be executed, but sometimes I think their programmers should be (or at least fired). To receive your paycheck in good conscience, though, you should really master Group II as well. And although you may need the functions in Group III only once in a blue moon, you should be familiar enough with them that you know how to use them when that need arises.<P>
I certainly don't plan to review the entire library in this article. If you want a comprehensive reference, there is nothing better than Plauger's book, <I>The Standard C Library</I> <a href="#1">[1]</a>. For tips, tricks, and tutorials, you can read most of the back issues of this column (which started in October, 1992). What I will do here is bring to light some of the library functions you may have overlooked, and some behavior you may not be aware of.<P>
<h4><FONT COLOR="#000080"><A name="002A_0012">Group I &#151; For the "Adequate" C Programmer<A name="002A_0012"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="002A_0013"><I>&lt;ctype. h&gt;<A name="002A_0013"></I></FONT></h4></P>
The functions in <I>&lt;ctype.h&gt;</I> support typical operations for handling single characters (see <A href="tab4.htm">Table 4</a>)
. For example, to determine if a character C is upper case, use the expression <I>isupper(c)</I>. Many old-time C programs are peppered with expressions such as<P>
<pre>   ('A' &lt;= c &amp;&amp; c &lt;= 'Z')</pre>
instead, which makes poor reading. Putting such an expression in a macro helps, as in<P>
<pre>   #define ISUPPER(c) ('A' &lt;= c &amp; c &lt;= 'Z')</pre>
But this makes expressions with side effects (such as <I>ISUPPER(c++)</I>) unreliable. And of course this test for uppercase membership works only with a character set that encodes the alphabet contiguously, such as ASCII. By contrast, the character classification functions in <I>&lt;ctype.h&gt;</I> are safe and portable across all platforms.<P>
It is important not to assume that ASCII is always the execution character set. For example, ASCII control characters comprise the code 127 and those less than 32, but only seven control characters behave uniformly across all environments: alert ( '\<I>a</I>'), backspace ( '\<I>b</I>'), carriage return ( '\<I>r</I>'), form feed ( '\<I>f</I>''), horizontal tab ( '\<I>t</I>'), newline ( '\<I>n</I>'), and vertical tab ( '\<I>v</I>'). The only character-handling functions that do not change behavior when you change locale are <I>isdigit</I> and <I>isxdigit</I>.(See Group III next month for more on locales).<P>
Although you can assume that the digits <I>'</I><I>0'</I> through <I>'9'</I> have contiguous codes in all C execution character sets, the hexadecimal digits, being alphabetic characters, do not. The function <I>atox</I> in <A href="list1.htm">Listing 1</a>
shows how to convert a hexadecimal string to an integer value. Unfortunately, it only works for ASCII-like character sets. The offending line is:<P>
<pre>   digit= toupper(*s) - 'A' + 10;</pre>
There is no guarantee that the expression<P>
<pre>   toupper(*s) - 'A'</pre>
will give the correct result. The version in <A href="list2.htm">Listing 2</a>
works on any platform because it stores all hexadecimal digits contiguously in its own array. It searches the array with <I>strchr</I> and then uses pointer arithmetic to compute the value of the digit.<P>
<h4><FONT COLOR="#000080"><A name="002A_0014"><I>&lt;stdio.h&gt;<A name="002A_0014"></I></FONT></h4></P>
The author of <A href="list1.htm">Listing 1</a>
and <A href="list2.htm">Listing 2</a>
could have avoided a lot of trouble if he had only understood <I>scanf</I> formatting a little better. As <A href="list3.htm">Listing 3</a>
illustrates, the "<I>%x</I>" edit descriptor does all the work of reading hexadecimal numbers for you. Unlike the previous two versions, it even handles a leading plus or minus sign. Both <I>scanf</I> and <I>printf</I> are laden with features that so many programmers overlook. For more detail on these two functions, see the Code Capsules in the October 1992 and November 1992 issues of <I>CUJ</I>.<P>
The <I>printf/scanf</I> families of functions shown in <A href="tab5.htm">Table 5</a>
perform <I>formatted I/0</I>. Furthermore, they provide these facilities for three types of <I>streams:</I> standard streams, file streams, and string (i.e., in-core) streams. Formatting operates identically on the different types of streams, but of necessity the function names and calling sequences are somewhat different.<P>
The <I>&lt;stdio.h&gt;</I> component of the Standard C library provides two other classes of input/output facilities: <I>character I/0</I> and <I>block I/0</I> (see <A href="tab6.htm">Table 6</a>
and <A href="tab7.htm">Table 7</a>)
. The functions in <A href="list4.htm">Listing 4</a>
and <A href="list5.htm">Listing 5</a>
copy one file to another using character I/0 and block I/0 functions respectively. Note that since <I>fread</I> does not return an error code, I must make an explicit call to <I>ferror</I> to detect a read error.<P>
As <A href="tab7.htm">Table 7</a>
illustrates, <I>&lt;stdio.h&gt;</I> provides functions for file positioning. The time-worn functions <I>fseek</I> and <I>ftell</I> work reliably only on files opened in binary mode, and are limited to file positions that can be represented by a long integer. To overcome these limitations, the ANSI committee invented <I>fgetpos</I> and <I>fsetpos</I>, which use the abstract type <I>fpos_t</I> (<A href="tab8.htm">Table 8</a>)
 as a file position indicator.<P>
The program in <A href="list6.htm">Listing 6</a>
puts <I>fgetpos</I> and <I>fsetpos</I> to good use in a simple four-way scrolling browser for large files. The browser keeps only one screen's worth of text in memory. If you want to scroll up or down through the file, it reads (or re-reads) the adjacent text and displays it. When scrolling down (i.e., forward) through the file, the program pushes the file position corresponding to the old screen data on a stack, and reads the next screenful from the current file position. To scroll up, the program retrieves the file position of the previous screen from the stack. For the complete program, and for more detailed information about file I/0, see the Code Capsule in the May 1993 edition of <I>CUJ</I>.<P>
<h4><FONT COLOR="#000080"><A name="002A_0015"><I>&lt;stdlib.h&gt;<A name="002A_0015"></I></FONT></h4></P>
The header <I>&lt;stdlib.h&gt;</I>  is a bit of a catch-all. It defines types, macros, and functions for memory management, sorting and searching, integer arithmetic, string-to-number conversions, sequences of pseudorandom numbers, interfacing with the environment, and converting multi-byte strings and characters to and from wide character representations (see <A href="tab9.htm">Table 9</a>)
. The program in <A href="list7.htm">Listing 7</a>
uses all four memory management functions to sort a text file. Whenever its array of pointers to <I>char</I> fills up, it expands it with <I>realloc</I>, which preserves the original contents. See "Code Capsules: Dynamic Memory Management, Part 1," <I>CUJ</I>, October 1994, for an in-depth treatment of memory management in C. For more information on the sort function <I>qsort</I>, see the Code Capsule "Sorting with <I>qsort</I>," <I>CUJ</I>, April 1993. The search function, <I>bsearch</I>, searches a sorted list for a given key. Like <I>qsort</I>, you supply <I>bsearch</I> with a compare function and it returns a pointer to the array element containing the key (see <A href="list8.htm">Listing 8</a>)
.<P>
The program in <A href="list9.htm">Listing 9</a>
illustrates some of <I>&lt;stdlib.h&gt;</I>'s seldom-used functions. It shuffles a deck of 52 cards by creating a randomized sequence of the numbers 0 through 51. The <I>srand</I> function seeds the pseudo-random generator by encoding the current time and date. To derive the suit and denomination from a number, I divide the number by 13, the number of cards in each suit. The remainder of this division is the denomination (0 through 12 corresponding to ace through king), and the quotient represents the suit as follows:<P>
0 == clubs<P>
1 == diamonds<P>
2 == hearts<P>
3 == spades<P>
The <I>div</I> function computes the quotient and remainder all at once and stores the result in a structure of type <I>div_t</I><I>..</I><P>
The functions in the <I>scanf</I> family call <I>strtol</I> to convert character strings to integers. Using <I>strtol</I> directly, however, you can read numbers in any base from 2 to 35, as the program in <A href="list10.htm">Listing 10</a>
illustrates. <I>strtol</I> updates <I>nextp</I> through its second argument so you can progress through the string, converting one number after another. The functions <I>strtoul</I> and <I>strtod</I> behave similarly for <I>unsigned longs</I> and <I>doubles</I> respectively. With <I>strtol</I>, I can write a superior version of the <I>atox</I> conversion function, as shown in <A href="list11.htm">Listing 11</a>.
<P>
Everyone reading this column is probably familiar with the functions <I>exit</I> and <I>abort</I>. You may not know, however, that you can "register" functions to be called automatically at program exit. These functions are usually called "exit handlers" and you register them with the <I>atexit</I> function, like this:<P>
<pre>   void my_handler();
   atexit(my_handler);</pre>
An exit handler must take no arguments and must return <I>void</I>. Upon normal exit (i.e., return from <I>main</I> or a call to <I>exit</I>), C calls all of your handlers in the reverse of the order that they were registered. You can register up to 32 exit handlers.<P>
The <I>getenv</I> function allows you to query strings in your host environment. For example, to find the current setting of the <I>PATH</I><I> </I>variable, which is common to many environments, you can do the following:<P>
<pre>   char *path = getenv("PATH");</pre>
The pointer refers to memory outside of your program, so if you want to keep the value, you'll have to copy it to a program variable before the next call to <I>getenv</I>.<P>
<h4><FONT COLOR="#000080"><A name="002A_0016"><I>&lt;string. h&gt;<A name="002A_0016"></I></FONT></h4></P>
The functions defined in <I>&lt;string.h&gt;</I> are shown in <A href="tab10.htm">Table 10</a>.
 All the functions with the <I>str</I> prefix work on null-terminated strings, and the <I>mem</I>-functions process raw memory. You've already seen <I>strchr</I> in <A href="list2.htm">Listing 2</a>,
 and its companion <I>memchr</I> in <A href="list9.htm">Listing 9</a>.
 To transfer raw bytes from one location to another, use <I>memcpy</I>, or <I>memmove</I>, if the source and destination buffers overlap. (Judging by the number of times I've seen <I>memcpy</I> reinvented in others' code, I believe that it is the most overlooked function in the standard library).<P>
The string search functions also go too often unused. The program in <A href="list12.htm">Listing 12</a>
uses <I>strstr</I> to extract all lines from a text file that contain a given string. Due to their cryptic names, the following three <I>&lt;string.h&gt; </I>functions are probably the least used:<P>
1)     <I>size_t strspn(char *s1, char *s 2)</I><I>;</I> "Spans" the characters from <I>s2</I> occurring in <I>s1</I>. In plain English, <I>strspn</I> returns the <I>index</I> of the first character in <I>s1</I> which is not in <I>s2.</I><P>
2<I>)     </I><I>size_t strcspn(char *s1, char *s2)</I><I>;</I> "Spans" the characters not in <I>s2</I> occurring in <I>s1</I>. In other words, <I>strcspn</I> returns the <I>index</I> of the first character in <I>s1</I> that is also in <I>s2</I>.<P>
3)     <I>char *strpbrk(char *s1, char *s2)</I><I>;</I> Returns a <I>pointer</I> to the first character from <I>s2</I> that occurs in <I>s1</I>. It's kind of like a cross between <I>strchr</I> and <I>strcspn</I>.<P>
The program in <A href="list13.htm">Listing 13</a>
illustrates these functions. For more on string handling, see the "Code Capsule" in the December 1992 issue (vol. 10, no. 12).<P>
<h4><FONT COLOR="#000080"><A name="002A_0017">Summary<A name="002A_0017"></FONT></h4></P>
Although you may not agree totally with my categorization of Standard C library components, I hope I have caused you to think about your own practices and level of expertise. Whatever our opinions, one bit of advice is indisputably in order: know and use the Standard library! Next month I'll cover Group II.<P>
<h4><FONT COLOR="#000080"><A name="002A_0018">Further Reading<A name="002A_0018"></FONT></h4></P>
<a name="1"></a>[1]     Plauger, P. J. <I>The Standard C Library</I>. Prentice-Hall, 1992. ISBN 0-13-131509-9.<P>

<h4><a href="../../../source/1995/jan95/allison.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
