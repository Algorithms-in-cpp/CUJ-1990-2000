<HTML><HEAD>
<TITLE>January 1995/Standard C/C++/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1 <I>The class </I>strstreambuf</A></h4>
<pre>class strstreambuf : public streambuf {
public:
       strstreambuf(int alsize_arg: 0);
       strstreambuf(void* (*palloc_arg)(size_t),
                  void (*pfree_arg)(void*));
       strstreambuf(char* gnext_arg. int n. char* pbeg_arg = 0);
       strstreambuf(unsigned char* gnext arg. int n,
              unsigned char* pbeg_arg = 0);
       strstreambuf(signed char* gnext_arg, int n,
                  signed char* pbeg_arg = 0);
       strstreambuf(const char* gnext_arg, int n);
       strstreambuf(const unsigned char* gnext_arg, int n);
       strstreambuf(const signed char* gnext_arg. int n);
       virtual ~strstreambuf();
       void freeze(int = 1);
       char* str();
       int pcount();
protected:
//      virtual int overflow(int c = EOF);     inherited
//      virtual int pbackfail(int c = EOF);    inherited
//      virtual int underflow();        inherited
//      virtual int uflow();    inherited
//      virtual int xsgetn(char* s. int n);   inherited
//      virtual int xsputn(const char* s. int n);     inherited
//      virtual streampos seekoff(streamoff off, ios::seekdir way,
//          ios::openmode which = ios::in | ios::out);    inherited
//      virtual streampos seekpos(streampos sp,
//          ios::openmode which = ios::in | ios::out); inherited
//      virtual streambuf* setbuf(char* s. int n);    inherited
//      virtual int sync();     inherited
private:
//      typedef T1 strstate;   exposition only
//      static const strstate allocated;       exposition only
//      static const strstate constant;        exposition only
//      static const strstate dynamic; exposition only
//      static const strstate frozen;  exposition only
//      strstate strmode;      exposition only
//      int alsize;    exposition only
//      void* (*palloc)(size_t);       exposition only
//      void (*pfree)(void*);  exposition only
};
</pre>
</BODY>
</HTML>
