

<HTML>
<HEAD>

<TITLE>January 1995/Standard C/C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjan.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Standard C/C++<A name="0028_000F"><A name="0028_000F"></font></h2><P>
<h3 align="center"><A name="0028_0000"><A name="0028_0000">The Header &lt;strstream&gt;</h3><P>
<h3 align="center"><font color="#800000">P.J. Plauger</font></h3><hr><blockquote><P>
<P><i><A name="0028_0000"><A name="0028_0000">P.J. Plauger is senior editor of C/C++ Users Journal, He is convener of the ISO C standards committee, WG14, and active on the C++ committee, WG21. His latest books are The Draft Standard C++ Library, and Programming on Purpose (three volumes), all published by Prentice-Hall. You can reach him at pjp@plauger.com.</i></P><P>
<h4><FONT COLOR="#000080"><A name="0028_0010"><I>Special Notice &#151; C++ Draft Public Review<A name="0028_0010"></I></FONT></h4></P>
<I>The US public review of the draft C++ standard is scheduled to begin as early as April 1995. For detailed information on how to get a copy of the draft and how to submit comments, send a message to the reflector</I> c++std-notify@research.att.com<I>. &#151; pjp</I><P>
<h4><FONT COLOR="#000080"><A name="0028_0011">Introduction<A name="0028_0011"></FONT></h4></P>
The header <I>&lt;strstream&gt;</I> defines three classes that cooperate to help you read and write character sequences stored in memory (a.k.a. "string buffers"):<P>
<UL><li><I>strstreambuf</I>, derived from <I>streambuf</I><I> </I>to mediate access to an in-memory character sequence and grow it on demand</li>
<li><I>istrstream</I>, derived from <I>istream</I> to construct a <I>strstreambuf</I> object with an input stream and to assist in extracting from the stream</li>
<li><I>ostrstream</I>, derived from <I>ostream</I> to construct a <I>strstreambuf</I> object with both input and output streams and to assist in inserting into the stream</li></UL>
An in-memory character sequence is, in many ways, the simplest kind of stream buffer. The buffer maintained by the controlling <I>streambuf</I> object is not merely a window on some separate representation, like an external file. Rather, the buffer <I>is</I> the character sequence in its entirety.<P>
Nevertheless, a <I>strstreambuf</I> object can control a variety of in-memory character sequences:<P>
<UL><li>an array of characters all of whose elements are defined from the outset</li>
<li>an array of characters whose initial elements contain a null-terminated string</li>
<li>an initially empty array of characters that can grow on demand, with storage allocated by <I>new</I> expressions and freed by <I>delete</I> expressions</li>
<li>an initially empty array of characters that can grow on demand, with storage allocated and freed by functions supplied by the program</li></UL>
All these choices are reflected in a plethora of constructors for the three classes defined in <I>&lt;strstream&gt;</I>.<P>
<h4><FONT COLOR="#000080"><A name="0028_0012">The Simple Choices<A name="0028_0012"></FONT></h4></P>
Despite all the options, three simple choices stand out. You can initialize an <I>istrstream</I> object to control a constant array of characters. You can then extract from its associated input stream, but you cannot insert to the output stream. The result is effectively an <I>istream</I> object where you dictate the stream contents purely within the program. Or you can initialize an <I>ostrstream</I> object to control a non-constant array of characters. You can then insert into its associated output stream to store into the array.<P>
Your third simple choice is to initialize an <I>ostrstream</I> object to control an initially empty <I>dynamic</I> output stream that can grow on demand. The result is effectively an <I>ostream</I> object where you capture the stream contents purely within the program. You can then capture the final stream contents before the <I>ostrstream</I> object is destroyed. Class <I>strstreambuf</I> supplies several member functions to help you capture these contents. For an object <I>x</I> of class <I>strstreambuf</I>, here's what you can do:<P>
<UL><li>Call <I>x.str()</I> to obtain a pointer to the start of the controlled character sequence. The function<I> freezes</I> the racter sequence to prevent further insertions. Freezing also prevents the destructor for <I>x</I> from freeing the character sequence <I></I>&#151; you assume that responsibility when you obtain the pointer.</li>
<li>Call <I>x.freeze()</I> to freeze the character sequence, or<I> x. freeze(0)</I> to unfreeze it. The latter call is particularly helpful if you've learned what you need from an earlier <I>x.str()</I> call and now want the destractor to free the character sequence for you.</li>
<li>Call <I>x. pcount()</I> to count the number of characters inserted in the sequence. The count is useful information for arbitrary character values, or if you don't insert a null character at the end of the character sequence.</li></UL>
Here is the obvious use for the manipulator <I>ends,</I> by the way. (See "Standard C/C++: The Header <I>&lt;ostream&gt;," </I><I>CUJ,</I> September 1994.) It's a clear way to supply a null character at the end of an in-memory character sequence.<P>
I end this brief introduction by mentioning the ghost at the banquet table. The Standard C library has long supported a similar capability. You can obtain formatted input from an in-memory character sequence by calling <I>sscanf.</I> You can write formatted output to an in-memory character sequence by calling <I>sprintf</I> or <I>vsprintf.</I> (All three functions are declared in <I>&lt;stdio.h&gt;.)</I> So how are these three classes any better? The answer is easy:<P>
<UL><li>An <I>istrstream</I> object looks like any other <I>istream</I> object controlling an input stream. And an <I>ostrstream</I> object looks like any other <I>ostream</I> object controlling an output stream. The older functions oblige you to know that you're dealing with an in memory character sequence. And you always have to know exactly where the sequence resides.</li>
<li>Unlike <I>sscanf</I>, an <I>istrstream</I> object can control a sequence of arbitrary character values. It can have embedded null characters. Equally, it doesn't need a terminating null character.</li>
<li><I>sprintf</I> writes to an array of fixed length whose length is nevertheless not known to the function. You avoid storage overwrites only by restricting every single conversion specification. By contrast, an <I>ostrstream</I> object can control a sequence of known length. Insertions fail before storage overwrite occurs. Or the object can control a <I>dynamic</I> sequence of arbitrary length. Insertions fail only when heap storage is exhausted.</li></UL>
I believe these are ample reasons to cultivate a knowledge of the header <I>&lt;strstream&gt;</I>.<P>
<h4><FONT COLOR="#000080"><A name="0028_0013">What the Draft Standard Says<A name="0028_0013"></FONT></h4></P>
Class <I>strstreambuf</I> is the first of several classes derived from <I>streambuf.</I> (I describe more in future installments, on the headers <I>&lt;sstream&gt;</I> and <I>&lt;fstream&gt;</I>.) What makes each such stream buffer unique is the way it overrides the virtual member functions in the base class. The exception classes exhibit uniqueness in a small way, by overriding the virtual member function <I>do_raise.</I> (See "Standard C: The Header <I>&lt;exception&gt;," </I><I>CUJ</I>, February 1994.) But the stream buffers indulge in specialization big time.<P>
The convention within the draft C++ Standard is to comment out virtual member functions in the derived class. Each such comment is labeled <I>inherited.</I> The suggestion is that an implementation need not provide an overriding definition if the definition in the base class does the job.<P>
For the classes derived from <I>streambuf,</I> however, these comments are often misleading. <A href="list1.htm">Listing 1</a>,
 for example, shows how the draft C++ Standard defines the class <I>strstreambuf.</I> Several critical virtual member functions <I>must</I> have overriding definitions to satisfy the semantic requirements of the class. (The descriptions of these functions in the draft C++ Standard are often hard to read as well. They represent standardese at its legalistic extreme. But those descriptions are also the definitive word on how a class behaves in peculiar circumstances. Turn to them when tutorials prove inadequate.)<P>
<A href="list2.htm">Listing 2</a>
shows how the draft C++ Standard defines the class <I>istrstream</I>, and <A href="list3.htm">Listing 3</a>
shows how it defines the class <I>ostrstream.</I> These are derived from the classes <I>istream</I> and <I>ostream</I>, respectively, to facilitate operations with stream buffers of class <I>strstreambuf</I>.<P>
<h4><FONT COLOR="#000080"><A name="0028_0014">Using the Header<A name="0028_0014"></FONT></h4></P>
You include the header <I>&lt;strstream)</I> to make use of any of the classes <I>istrstream, ostrstream,</I> or <I>strstreambuf.</I> Objects of these classes let you read and write in-memory character sequences just as if they were conventional files. You can choose among four patterns of access:<P>
<UL><li>read only</li>
<li>write only</li>
<li>simple read/write</li>
<li>sophisticated read/write</li></UL>
I deal with each of these options in turn.<P>
<h4><FONT COLOR="#000080"><A name="0028_0015">Read-Only String Buffers<A name="0028_0015"></FONT></h4></P>
If all you want to do is read an in-memory character sequence, construct an object of class <I>istrstream</I> to specify the character sequence and control extractions from it. For a null-terminated string <I>s</I>, you can write:<P>
<pre>   istrstream strin(s);</pre>
The character sequence begins at <I>s</I> and continues up to, but not including, the terminating null character that follows.<P>
To control an array of <I>n</I> characters <I>s</I> with arbitrary values, you can write:<P>
<pre>   istrstream strin(s, n);</pre>
In either case, <I>s</I> can be either a pointer to <I>char</I> or a pointer to <I>const char.</I> Whichever way you construct the <I>istrstream</I> object, the resultant stream buffer (pointed at by <I>strin.rdbuf())</I> does not support insertions. You <I>must</I> specify an initial character sequence <I></I>&#151; class <I>istrstream</I> has no default constructor. The character sequence remains unchanged for the life of the <I>istrstream</I> object. (I suggest you refrain from altering the contents of the character sequence by other means, if that is possible, while the <I>istrstream </I>object controls accesses to it.)<P>
Positioning within a read-only stream is fairly simple. A <I>streamoff</I> value is effectively an index into the character sequence. Thus:<P>
<pre>   strin. rdbuf()-&gt;pubseekoff(0 ios::beg);</pre>
sets the stream position at the beginning (position zero) of the character sequence. If the length of the sequence is nonzero, the next character extracted will be the first character in the sequence. Any attempt to set the stream position to a negative value, or beyond the end of the character sequence, will fail. You can also call <I>streambuf::pubseekpos</I>, as above, but that is less necessary for an in-memory character sequence. Do so for code that shouldn't need to know what flavor stream buffer it is really dealing with. (For more discussion of stream positioning, see "Standard C: The Header <I>&lt;streambuf&gt;," </I><I>CUJ</I><I>,</I> June 1994.)<P>
For what it's worth, you can also call <I>strin.str()</I> for a read-only character sequence. The call does <I>not</I> freeze the character sequence, since it is not dynamically alterable. The function merely returns a pointer to the beginning of the character sequence, just as for a character sequence you construct (as described below). This is always the beginning of the character sequence you specified when constructing the object.<P>
If you do call <I>strin.str()</I> for a read-only character sequence as above, be warned. The call <I>strin.rdbuf()-&gt;pcount()</I> will <I>not </I>return the length of the sequence. Since no output stream exists, this call returns zero. You must determine the length of the sequence by some other means, such as positioning the stream at the end and inspecting the resultant stream offset.<P>
<h4><FONT COLOR="#000080"><A name="0028_0016">Write-Only String Buffers<A name="0028_0016"></FONT></h4></P>
If all you want to do is create an in-memory character sequence, construct an object of class <I>ostrstream</I> to control insertions into it. You can write:<P>
<pre>   ostrstream strout;</pre>
then insert into <I>strout</I> just like any other output stream. The character sequence can grow dynamically to arbitrary length. (The actual limit is usually <I>INT_MAX</I>, defined in <I>&lt;limits.h&gt;</I>, or when a storage allocation request fails.)<P>
If you want a null-terminated string, be sure to insert a null character last, as with:<P>
<pre>   strout &lt;&lt; ends;</pre>
It will <I>not</I> be supplied for you when you call <I>strout.str()</I>. For a sequence of arbitrary characters, you can determine the number of characters you inserted by calling <I>strout.pcount()</I>. But see the warning below.)<P>
Positioning within a write-only stream is also fairly simple. You can work mostly with <I>streamoff</I> values, as for read-only streams described above. A few caveats are in order, however:<P>
<UL><li>Current practice seems to vary on where you can set the stream position. The safest bet is to move only to character positions with values already defined <I></I>&#151; either at construction or as a result of earlier insertions.</li>
<li>Some confusion is also endemic about the interaction of stream positioning requests and the value returned by a call such as <I>strout.pcount()</I>.</li>
<li>Even an implementation that obeys the draft C++ Standard can still surprise. Strictly speaking, <I>ostrstream::pcount </I>calls <I>strstreambuf::pcount,</I> which does not return a count of all insertions. Rather, it returns the difference between <I>the current output stream position and the initial output stream position.</I> The former can be left other than at the end of the character sequence by stream-positioning requests. The latter can be set beyond the beginning of the character sequence by a more sophisticated <I>strstreambuf </I>constructor, as described below.</li></UL>
As usual, my advice is to avoid such delicate areas in code you hope to keep portable. If you insist on pushing the limits of clearly defined behavior, expect surprises.<P>
Your goal in creating a write-only character sequence is to capture the final result, as a rule. Call <I>strout.str()</I> to freeze the character sequence and return a pointer to its initial character. Remember that freezing the character sequence tells the <I>strstreambuf</I> destructor <I>not</I> to free storage for the character sequence. You must either free the storage yourself or be sure to call <I>strout.freeze(0)</I> before <I>strout</I> is destroyed.<P>
<h4><FONT COLOR="#000080"><A name="0028_0017">Simple Read/Write String Buffers<A name="0028_0017"></FONT></h4></P>
If you want to create an in-memory character sequence that you can read as well as write, you need two objects to control the input and output streams. First, construct an object of class <I>ostrstream</I> to supply the <I>strstreambuf</I> object and control insertions, then construct an object of class <I>istream</I> to control extractions. You can write:<P>
<pre>   ostrstream strout;
   istream strin(strout. rdbuf());</pre>
much as I have described several times in earlier installments for setting up a bidirectional stream. (See, for example, "Standard C: Introduction to Iostreams," <I>CUJ</I><I>,</I> April 1994.) You can then insert into <I>strout</I> just like any other output stream. And once you have inserted characters, you can extract them from <I>strin</I> just like any other input stream.<P>
A few caveats are in order, however. Try to extract beyond the last character in the sequence and you will encounter end-of-file. Once you extend the sequence by inserting characters, you can successfully extract again, but not until you clear <I>eofbit</I> if it is set in the <I>istream</I> object. Once again, this status bit proves less than trustworthy.<P>
You can position the input and output streams separately or jointly. As usual, positioning operations demand a modicum of caution:<P>
<UL><li>The draft C++ Standard specifies a default third argument value <I>which = ios::in | ios::out for streambuf::pubseekoff</I>. (It specifies the same for the default second argument to <I>streambuf::pubseekpos.) </I>Thus, unless you supply an actual <I>which</I> argument that selects only one stream &#151; <I>ios::in</I> or <I>ios::out</I> &#151; a call to this member function endeavors to position both streams in tandem. Seldom does that make sense. When both reading and writing an in-memory character sequence, always specify the <I>which</I> argument on such calls.</li>
<li>The draft C++ Standard is even nastier at times. If the second argument to <I>streambuf::pubseekof</I> is <I>ios::cur</I>, a tandem positioning operation will fail. For such relative positioning requests, you should <I>always</I> specify a <I>which </I>argument that selects only one stream.</li></UL>
Note that the second caveat applies even to read-only or write-only in-memory character sequences.<P>
As an important aside, here is a warning regarding the member function <I>rdbuf</I>. Several classes in the Standard C++ library are derived from either <I>istream</I> or <I>ostream.</I> These include <I>istrstream</I> and <I>ostrstream,</I> in this particular header. All such derived classes also provide a member function <I>rdbuf()</I> that <I>hides</I> the member function in the base class <I>ios.</I><P>
Why is this so? All such derived classes also provide a member object of a class derived from <I>streambuf.</I> In this header, that derived class happens to be <I>strstreambuf.</I> Consider, for example, the call <I>istr.rdbuf(),</I> for an object <I>istr</I> of class <I>istrstream.</I> It returns a pointer to the <I>strstreambuf</I> member object in <I>istr. </I>And the return type is indeed <I>pointer to</I><I> strstreambuf,</I> not <I>pointer to</I><I> streambuf</I> as in the base class <I>ios.</I><P>
A generic pointer to the base <I>streambuf</I> gets you to all the inherited member functions. It even gets you to the proper overriding definitions of virtual member functions. But to access any member functions peculiar to the derived class, you need such a specialized pointer. Again in this particular case, the member functions <I>freeze, pcount,</I> and <I>str</I> are peculiar to class <I>strstreambuf,</I> not its base class.<P>
Potential confusion arises, however, once you make a call such as <I>istr.rdbuf(strout.rdbuf())</I>. The critical pointer in the <I>ios</I> subobject now designates a different stream buffer. <I>But a subsequent call to </I>istr.rdbuf()<I> still returns a pointer to the member object within </I>istr. To get the pointer actually used by inserters and extractors, you must make the hairy call <I>((ios&amp;)istr).rdbuf()</I>.<P>
Got all that? If not, don't worry too much about it. The bottom line is that you should follow a fundamental style rule. Alter the stored stream buffer pointer <I>only </I>in an object of class <I>istream</I> or <I>ostream. </I><I>Never</I> do so in an object of a class derived from one of these. Even better, do as I did above &#151; use a special <I>istream</I> or <I>ostream </I>object constructed from the outset to share an existing stream buffer. With either approach, there's never a second stream buffer lying around to cause confusion.<P>
<h4><FONT COLOR="#000080"><A name="0028_0018">Sophisticated String Buffers<A name="0028_0018"></FONT></h4></P>
You can get even fancier with the classes defined in <I>&lt;strstream&gt;</I>. What follows is an assortment of more sophisticated setups.<P>
Say you want to use an existing character array to store a character sequence, and you want to read the character sequence once you write it. If you declare:<P>
<pre>   ostrstream strout(s, n);
   istream strin(strout.rdbuf());</pre>
then <I>strout</I> controls the sequence of <I>n </I>characters beginning at <I>s.</I> Both the read position and the write position are at the beginning of the character sequence. In this case, you cannot extend the sequence by inserting at or beyond character position <I>n</I>.<P>
Here's a variation on this scenario. Say you want to use an existing character array to store a character sequence, and the array already stores a null-terminated string. You want to begin extracting from the beginning of the character sequence, but you want to begin inserting at the <I>end</I> of the null-terminated string (first replacing the terminating null). If you declare:<P>
<pre>   ostrstream strout(s, n, ios::app);
   istream strin(strout.rdbuf());</pre>
then you get the desired behavior. Insertions effectively append characters to an initial null-terminated string, but won't continue past the end of the character array. For extractions, see the caveat above about the behavior of <I>eofbit</I>.<P>
If you want to get fancier, you have to construct a <I>strstreambuf</I> object directly. This class has <I>lots</I> of constructors with <I>lots</I> of options. I describe here just the two that I feel are genuinely useful and safe.<P>
Say you want to construct an in-memory character sequence that you know will get very large. You'd like to suggest, when constructing the <I>strstreambuf</I> object, that the object allocate space for a large sequence right off the mark. That can save lots of execution overhead in reallocating storage as the character sequence grows. Equally, you might want to construct a number of character sequences all of which will be fairly small. You'd like to suggest that each such object allocate only a small number of characters. That can save lots of unused storage. If you declare:<P>
<pre>   strstreambuf sb(n);
   istream strin(&amp;sb);
   ostream strout(&amp;sb);</pre>
for some <I>int</I> value <I>n</I>, the constructor should take the hint. What it does with it is up to the implementation, but at least you get to make the suggestion.<P>
Another approach to storage allocation is to do the job yourself. So your final interesting choice is to begin with two functions like:<P>
<pre>#include &lt;stdlib. h&gt;

void *my_alloc(size_t n)
   {    // allocate n chars
   return (malloc(n));
   }

void my_free(void *p)
   {    // free allocated storage
   free(p);
   }</pre>
Tailor these basic functions as you see fit. Then you can declare:<P>
<pre>   strstreambuf sb(&amp;my_alloc,
                &amp;my_free);
   istream strin(&amp;sb);
   ostream strout(&amp;sb);</pre>
The two functions you supply will be called, in place of <I>new</I> and <I>delete </I>expressions, to allocate and free storage for character sequences.<P>
<h4><FONT COLOR="#000080"><A name="0028_0019">Next Month<A name="0028_0019"></FONT></h4></P>
That's a capsule summary of how to use string buffers, as specified by the draft C++ Standard. Next month, I'll show you one way to implement this header, and discuss some of the interesting challenges it presents.<P>
<I>This article is excerpted in part from P.J. Plauger</I>, The Draft Standard C++ Library, <I>(Englewood Cliffs, N.J.: Prentice-Hall, 1995.)</I><P>

<h4><a href="../../../source/1995/jan95/plauger.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
