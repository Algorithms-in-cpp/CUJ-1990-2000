

<HTML>
<HEAD>

<TITLE>January 1995/Portable Byte Ordering in C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjan.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Portability</FONT></H2>

<hr><h2 align="center"><font color="#800000">Portable Byte Ordering in C++<A name="001C_0003"><A name="001C_0003"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="001C_0000"><A name="001C_0000">Philip J. Erdelsky</font></h3><hr><blockquote><P>
<P><i><A name="001C_0000"><A name="001C_0000">Philip J. Erdelsky, Ph.D., is an R&amp;D Engineer for Data/Ware Development, Inc., in San Diego, California. He has been writing software in C and C++ for more than ten years. He can be reached at 75746.3411@compuserve.com.</i></P><P>
<h4><FONT COLOR="#000080"><A name="001C_0004">Which End is Up?<A name="001C_0004"></FONT></h4></P>
I once facetiously asked a computer scientist where he stood on one of the greatest issues facing computing science. He must have sensed my mood, because he answered "squarely on the fence" before I could tell him what the issue was.<P>
The issue, of course, was byte order. Some CPUs, such as the Intel 80X86 family, store multi-byte words in little-endian order, with the least significant byte (the little end) at the lowest address. Others, such as the Motorola 680X0 family, store them in big-endian order, with the most significant byte (the big end) at the lowest address. The terms "big endian" and "little endian" are supported by a literary allusion to Jonathan Swift's classic novel <I>Gulliver's Travels,</I> in which two nations fought a war to determine whether soft-boiled eggs should be opened at the big end or the little end.<P>
Each byte order has its own small advantage. Due to historical accident, numbers are written in big-endian order in English and other major western languages. That makes a memory dump easier to read if big-endian order is used. Addition, subtraction, and multiplication are done in little-endian order, so a little-endian CPU sometimes has a slight speed advantage when performing these operations in multiple precision.<P>
Could the world standardize on one byte order in the foreseeable future? It does not seem likely. The world cannot even decide which side of the road to drive on. The difference becomes a problem when little-endian and big-endian devices communicate with each other. It can be even more of a problem when their operating code has to be ported from one CPU to another with a different byte order.<P>
Writing a conversion routine is no problem. An experienced C programmer can whip one up in a minute. However, finding all the places where conversions are required can be difficult, unless the code was written with conversion in mind. That is where the techniques of C++ come in.<P>
First of all, a communication standard has to be established. If two devices communicate through a SCSI channel, all multi-byte values should be sent over the channel in big-endian order, which is the SCSI standard. Then conversions must be made to and from the CPU byte order, so the program can perform valid arithmetic operations on the data.<P>
<h4><FONT COLOR="#000080"><A name="001C_0005">The Types and Classes<A name="001C_0005"></FONT></h4></P>
<A href="list1.htm">Listing 1</a>
shows the header file <I>endian.h,</I> which contains nearly all the code. <A href="list2.htm">Listing 2</a>
shows the file <I>endian.cpp,</I> which defines a useful union &#151; all the other code needed besides the header. The header defines three simple types, with names that are fairly standard:<P>
<UL><li><I>BYTE </I>&#151; a single unsigned byte</li>
<li><I>WORD</I> &#151; a two-byte unsigned word</li>
<li><I>DWORD</I> &#151; a four-byte unsigned double word</li></UL>
Variables of type <I>WORD</I> and <I>DWORD</I> are implicitly assumed to be in the order appropriate for the CPU, so the program can compute with them freely.<P>
The code also defines four classes of single and double words in specific byte orders:<P>
<UL><li><I>BEWORD</I> &#151; a big endian <I>WORD</I></li>
<li><I>BEDWORD</I>  &#151; a big endian <I>DWORD</I></li>
<li><I>LEWORD</I> &#151; a little endian <I>WORD</I></li>
<li><I>LEDWORD</I> &#151; a little endian <I>DWORD</I></li></UL>
Of course, two of these types are substantially the same as <I>WORD</I> and <I>DWORD</I>, but the programmer does not need to know that while coding. The restrictions of C++ will prevent the program from performing arithmetic operations directly on them. This is important because such operations will become invalid when the program is ported to a CPU with a different byte order.<P>
<h4><FONT COLOR="#000080"><A name="001C_0006">Conversions<A name="001C_0006"></FONT></h4></P>
Conversions from CPU order to big-endian or little-endian order are performed by a member function or by a class constructor. For example:<P>
<pre>LEWORD y(0xABCD);
BEWORD x;
x.set(0x1234);</pre>
It is also possible to overload <I>operator</I>=, but this can cause problems in some implementations when unions containing these special types are initialized or assigned.<P>
Conversions from big endian or little endian order to CPU order are performed by a member function called value. For example, the following code adds 3 to a big endian<I> WORD</I>: <P>
<pre>BEWORD x;
x.set(x.value() + 3);</pre>
An attempt to do this in a nonportable fashion will be flagged as a compile-time error: <P>
<pre>BEWORD x;
x = x + 3; // ERROR!</pre>
In this case, Turbo C++ reports, "Operator cannot be applied to these operand type." <P>
The compiler knows the byte order of the CPU on which its object code will run, but will not reveal it at preprocessing time. If the programmer has this information, the code can be made more efficient by defining either_<I>BIG_ENDIAN</I> or _<I>LITTLE_ENDIAN</I> (but not both!) to indicate the byte order to be used. For example, if _<I>BIG_ENDIAN</I> is defined, then <I>x.set(0x1234)</I>, when <I>x</I> is of type <I>BEWORD</I>, will generate the code for a simple assignment.<P>
If neither _<I>BIG</I><I>_</I><I>ENDIAN</I> nor _<I>LITTLE</I><I>_</I><I>ENDIAN</I> is defined, the compiler will generate less efficient code that will work on any CPU. For example, if <I>x</I> is of type <I>BEWORD</I>, <I>x.set(0x1234)</I> will generate code that performs the following operations:<P>
<pre>y = 0x1234
first byte of x = y &gt;&gt; 8
second byte of x = y</pre>
If shifting is a particularly slow operation, it might be advisable to include a quick test for byte order at run time, and skip the shifting if the byte order of the CPU is the same as that of the word or double word being converted.<P>
If _<I>RUN</I><I>_</I><I>TIME</I><I>_</I><I>ENDIAN</I> is defined, the code will define a quick test, big_endian, which returns a true value (1) if it is executed on a big_endian CPU and a false value (0) otherwise. The code will also define a similar test called <I>little</I>_<I>endian</I>. These tests are used to skip the shifts where possible. In most implementations of C++, the tests involve no more code than testing a flag. Indeed, that is precisely how they are implemented. The initialized union _<I>endian</I> compiles with a 1 in either _<I>endian.half[0]</I> or _<I>endian.half[1]</I>, depending on the byte order of the CPU.<P>
It is possible to overload operators, but it is generally more efficient to convert all multi-byte values to the CPU's byte order and use the regular operators. The only exceptions are <I>operator</I>== and <I>operator!=</I>, which do not depend on byte order as long as both operands use the same byte order, and tests against zero, which are implemented as the member functions <I>zero</I> and <I>nonzero</I>.<P>
All member functions have been defined inline, which makes them run fast and generates absolutely no code for member functions that are not called. If minimizing code size is desirable, it may be advisable to code some of them separately.<P>

<h4><a href="../../../source/1995/jan95/erdelsky.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
