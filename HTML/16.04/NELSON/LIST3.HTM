


<HTML><HEAD>

<TITLE>April 1998/Disk-Based Container Objects/Listing 3</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4>
<A name="HEADING1">Listing 3: bsort.cpp &#151; Binary-tree sort example, sorts words in text file</A></h4>


<pre>
#include &lt;iostream.h&gt;
#include &lt;string.h&gt;
#include "bintree.h"

#define MAXLINE     132 /* max line length */
#define MAXWORD 40    /* maximum word length */
#define DELIMCHARS  " .!@#$%&amp;*()+=?,&#180;\"[]{}:;&lt;&gt;-\r\n"

class WordSort {
    char tok[MAXWORD];  /* word string (key) */
    int zero;   /* ensures tok is asciiz */
    streampos t_ofst;  /* offset into text file */
  public:
    void Sort();
    friend int operator&lt; ( const WordSort &amp;lh,
                           const WordSort &amp;rh )  {
        return( strcmp(lh.tok, rh.tok) &lt; 0 );
        }
    friend int output( WordSort&amp; rec, void *arg )
        {
        cout &lt;&lt; rec.tok &lt;&lt; " " &lt;&lt; rec.t_ofst &lt;&lt; endl;
        return 0;   /* no updates */
        }
};

void WordSort::Sort()   {
    TDBinarySearchTree&lt;WordSort&gt; Bt;
    char  linebuf[MAXLINE];
    WordSort rec;
    streampos  pos;
    char  *ptok;
    rec.zero = 0;

    while( 1 )  {
        pos = cin.tellg();
        ptok = NULL;
        cin.getline( linebuf, MAXLINE );
        if( cin.gcount() == 0 )
                break;     /* end of file */
        while( 1 ) {
            ptok = strtok( ptok ? NULL : linebuf,
                                        DELIMCHARS );
            if( ptok == NULL )
                    break;  /* end of line */
            strncpy( rec.tok, ptok, MAXWORD );
            rec.t_ofst = pos + (ptok - linebuf);
            //Bt.Add( rec );  /* save-n-sort record */
            Bt &lt;&lt; rec;  /* like iostreams */
        }
    }

    Bt.ForEach( output, 0 );   /* print results */
}

int main()
{  /* Use redirection symbols '&lt;' and '&gt;' to specify
    * input and output files. Default uses cin, cout.
    */
    WordSort    ws;
    ws.Sort();
    return 0;
}
// EOF
</pre>
</body></html>
