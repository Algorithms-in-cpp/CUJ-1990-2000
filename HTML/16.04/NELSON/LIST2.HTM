


<HTML><HEAD>

<TITLE>April 1998/Disk-Based Container Objects/Listing 2</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4>
<A name="HEADING1">Listing 2: bintree.h &#151; Disk-based binary search tree</A></h4>


<pre>
#ifndef __BINTREE_H
#define __BINTREE_H
#include "listman.h"
#include "vector.h"

/* Select node type and file management scheme */
#define Nd   TDBinarySearchTreeNode
#ifndef FM
#define FM   DirectFile  /* CachedFile on code disk */
#endif
#define CACHESIZE   25  /* #default cache nodes */

template &lt;class T&gt; class TDBinarySearchTree
{
    TDListManager&lt;Nd&lt;T&gt;, FM&gt; *_Lm;
  public:
    TDBinarySearchTree( const char *fname = 0,
                        int nn = CACHESIZE)    {
        _Lm = new TDListManager
               &lt;Nd&lt;T&gt;, FM&gt; (fname, nn, 0);
    }
    ~TDBinarySearchTree() { delete _Lm; }
    ulong ItemCount() const
        { return _Lm-&gt;ItemCount(); }
    void ItemCount( ulong c )
        { _Lm-&gt;ItemCount( c ); }
    ulong ListSize() const
        { return _Lm-&gt;ListSize(); }
    int Add( const T&amp; );
    void ForEach( int (*)(T&amp;, void *), void * );
    friend TDBinarySearchTree&lt;T&gt;&amp; operator &lt;&lt;
      ( TDBinarySearchTree&lt;T&gt;&amp; bt, const T&amp; obj )
        {   bt.Add( obj );
            return bt;
        }
};

template &lt;class T&gt;
int TDBinarySearchTree&lt;T&gt;::Add( const T&amp; item )
{   Nd&lt;T&gt; newnode, pnode;
    filepos p, q;
    int addleft;
    _Lm-&gt;GetFree( newnode );
    q = _Lm-&gt;Head();
    while( q )  {
        p = q;
        _Lm-&gt;ReadNode( pnode, p );
        addleft = 0;
        if( item &lt; pnode.Data )     {
            q = pnode.Left;
            addleft = 1;
        }
        else
            q = pnode.Right;
    }
    if( _Lm-&gt;Head() == 0 )
        _Lm-&gt;Head( newnode.Free );
    else  {
        if( addleft )
            pnode.Left = newnode.Free;
        else
            pnode.Right = newnode.Free;
        _Lm-&gt;WriteNode( pnode, pnode.Free );
    }
    newnode.Left = newnode.Right = 0;
    newnode.Data = item;
    _Lm-&gt;WriteNode( newnode, newnode.Free );
    ItemCount( ItemCount() + 1 );
    return 1;
}

template &lt;class T&gt; void TDBinarySearchTree&lt;T&gt;::
ForEach( int (*ifn)(T&amp;, void *), void *args )
{  /* Do an inorder traversal. ifn() returns !0 if
    * node was modified and must be updated.
    */
    Nd&lt;T&gt; node;
    filepos p;
    TDStackAsVector&lt;filepos&gt; stk;  /* temp stack */
    p = _Lm-&gt;Head();
    while( 1 )  {
        while( p )  {  /* traverse left subtree */
            _Lm-&gt;ReadNode(node, p);
            stk.Push(p);
            p = node.Left;
        }
        if( stk.Pop(p) == 0 )
            break;
        _Lm-&gt;ReadNode(node, p);
        if( ifn( node.Data, args ) )  /* update node */
            _Lm-&gt;WriteNode(node, p);  /* if modified */
        p = node.Right;   /* goto right subtree */
    }
}
#endif  // EOF
</pre>
</body></html>
