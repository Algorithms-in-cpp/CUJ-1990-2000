


<HTML><HEAD>

<TITLE>April 1998/Disk-Based Container Objects/Listing 1</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4>
<A name="HEADING1">Listing 1: listman.h &#151; Disk-based container list manager</A></h4>


<pre>
#ifndef __LISTMAN_H
#define __LISTMAN_H
#include "dfile.h"

typedef ulong filepos;     /* file position type */

template &lt;class T&gt; struct TDSingleLinkNode  {
    filepos Next, Free;
    T Data;
    };

template &lt;class T&gt; struct TDDoubleLinkNode  {
    filepos Prev, Next, Free;
    T Data;
    };

template &lt;class T&gt; struct TDBinarySearchTreeNode  {
    filepos Left, Right, Free;
    T Data;
    };

template &lt;class Nd, class FM&gt; class TDListManager
{   /* Nd is node type, FM is File manager type */
    FM *_Fm;   /* -&gt; file manager */
    struct header {
        filepos Head, Tail, Free;
        ulong NodesAllocated;   /* total count */
        ulong ItemCount;        /* active count */
        } _Hdr;

    #define HDRSIZE  sizeof(header)

   /* BEG_OFFSET places 1st node at specified offset
    * into container file (see vectman.h).....
    */
    #ifndef BEG_OFFSET
    #define BEG_OFFSET  HDRSIZE
    #endif

  public:
    TDListManager(const char *fname, int nn, int m) {
        _Fm = new FM( nn, sizeof(Nd), fname, m );
        _Hdr.Head = _Hdr.Tail = _Hdr.Free = 0;
        _Hdr.ItemCount = _Hdr.NodesAllocated = 0;
        _Fm-&gt;ReadAt( 0, (void *) &amp;_Hdr, HDRSIZE );
    }
    ~TDListManager() {  WriteHeader();
                        delete _Fm;    }
    filepos Head() const { return _Hdr.Head; }
    void   Head(filepos hd) { _Hdr.Head = hd; }
    filepos Tail() const { return _Hdr.Tail; }
    void   Tail(filepos tl) { _Hdr.Tail = tl; }
    ulong ItemCount() const { return _Hdr.ItemCount; }
    void ItemCount( ulong c ) {  _Hdr.ItemCount = c; }
    ulong ListSize() const
        { return _Hdr.NodesAllocated; }
    int WriteHeader();
    void GetFree( Nd&amp; );
    void PutFree( Nd&amp; );
    virtual int ReadNode(Nd&amp; t, ulong pos)
        { return _Fm-&gt;ReadNode( (void *) &amp;t, pos ); }
    virtual int WriteNode(const Nd&amp; t, ulong pos)    {
        return _Fm-&gt;WriteNode((const void *) &amp;t, pos );
        }
};

template &lt;class Nd,class FM&gt;
int TDListManager&lt;Nd,FM&gt;::WriteHeader()
{
    if( _Fm-&gt;tempused() )
        return 1;   /* return if non-persistent */
    return _Fm-&gt;WriteAt( 0, (void *) &amp;_Hdr, HDRSIZE );
}

template &lt;class Nd,class FM&gt;
void TDListManager&lt;Nd,FM&gt;::GetFree( Nd&amp; node )
{   /* Get address of next free node in the file;
     * Assign new address to node.Free ....... */
    if( _Hdr.Free == 0 )   /* get new node  */
        node.Free = ( _Hdr.NodesAllocated++
                         * sizeof(Nd) ) + BEG_OFFSET;
    else    {  /* Get next free node from file... */
        filepos _free = _Hdr.Free;
        ReadNode( node, _free );
        _Hdr.Free = node.Free;
        node.Free = _free;
    }
}

template &lt;class Nd,class FM&gt;
void TDListManager&lt;Nd,FM&gt;::PutFree( Nd&amp; node )    {
    filepos _free = node.Free;
    node.Free = _Hdr.Free;
    _Hdr.Free = _free;
    WriteNode( node, _free );
}
#endif // EOF
</pre>
</body></html>
