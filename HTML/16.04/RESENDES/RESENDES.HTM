





<HTML>
     
     <HEAD>

<TITLE>April 1998/Introduction to CORBA Distributed Objects</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<H2><A href="../tocapr.htm"><IMG src="../../toc.gif" ALT="Back to TOC" WIDTH="54" HEIGHT="54"></A>
<FONT COLOR="#FF0000">Object-Oriented Programming</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Introduction to CORBA Distributed Objects</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Robert Resendes and Marc Laukien</FONT></H3>
<BLOCKQUOTE>
<p>Sharing
data between programs on different machines, written in different languages,
has always been a problem. CORBA makes it rather easier.</p></BLOCKQUOTE><hr>

<BLOCKQUOTE>
<h4><FONT COLOR="#000080">Introduction</FONT></H4>

<p>The
concept of distributed computing has been around for years, as evidenced by
technologies such as remote shells, remote procedure calls (RPCs), and the
ubiquitous web protocol HTTP/CGI. The Common Object Request Broker Architecture
(CORBA) [1] takes this concept to a higher level by introducing object-oriented
(OO) design principles (i.e., encapsulation, inheritance, and polymorphism) as
well as platform and language independence. CORBA brings all this to
distributed programming without making it any harder than the techniques you
currently use for non-distributed programming.<p>
This article briefly covers some CORBA basics and then guides you through the
development of a simple client/server application in the following flavors:</p>
<UL>
<p>1) a baseline non-distributed (single process) C++ application<p>
2) a distributed C++ client/server application using CORBA <p>
3) a distributed Java client and C++ server (above) using CORBA</p>
</UL>
<h4><FONT COLOR="#000080">CORBA in Brief</FONT></H4>

<p>The
Object Management Group (OMG) is an 800+ member consortium that develops the
CORBA standard. This standard defines how distributed objects cooperate
regardless of their location, platform, and programming language. CORBA version
2.0 introduces and defines the Internet Inter-ORB Protocol (IIOP), which
insures vendor interoperability over TCP/IP (the lingua franca of the Internet)
based networks. IIOP enables you, for example, to develop a PC-based Java
client with one vendor's CORBA product and transparently communicate with a
Unix-based C++ server built with another CORBA-compliant product. This
interoperability combined with an OO design paradigm makes CORBA a very
powerful integration technology. See the online resources listed at the end of
this article for more introductory information on CORBA.<p>
The OMG also specifies extensions to the core standard, called CORBA Services,
that add the scalability and robustness required of real-world applications.
Examples of standardized services are Naming, Event, Transaction, Persistence,
and Security (the first two being the most widely available). The service
specifications are freely available at the OMG website (see the online
resources section) and designed by industry experts, saving you both time and
expense.</p>

<h4><FONT COLOR="#000080">CORBA Architecture</FONT></H4>

<p>CORBA
relies heavily on the Proxy design pattern [2] to achieve platform and language
independence. A proxy is a surrogate for another object. In CORBA's case, a
proxy acts as a client-side reference to a "real" server-side object. A
client invokes a method on the local proxy object, which packs the input
parameters for delivery to an Object Request Broker (ORB) (see <A href="fig1.htm">Figure 1</a>)
. The
ORB then locates the desired service and passes the input parameters to the
appropriate Object Adapter (OA), which in turn invokes the actual method.
Output parameters and return values, if any, follow the reverse path back to
the client. From the client's perspective, the proxy acts just like the real
object since it hides all the communication details within itself.</p>

<h4><FONT COLOR="#000080">CORBA IDL</FONT></H4>

<p>CORBA
also achieves platform and language independence through its Interface
Definition Language (IDL). As the name implies, you use IDL to define the
interfaces for your distributed services. Defining interfaces is conceptually
similar to defining abstract C++ classes with only pure virtual member
functions. You then use an IDL compiler to generate the particular language
mapping(s) for your development environment. Official mappings exist for C,
C++, Smalltalk, Ada, COBOL, and Java as of this writing. Thus, a single IDL
specification suffices for developing interoperable distributed objects in a
heterogeneous environment.<p>
IDL syntax closely resembles C++ syntax in that it supports the following:</p>
<UL><LI>Basic types: short, long, float, double, char, boolean, and octet</LI>
    <LI>Complex types: structures, unions, arrays, enumerations, strings and
        typedefs</LI>
    <LI>Exception types: system and user-defined</LI>
    <LI>Interface type: the conceptual equivalent of a C++ abstract base class with
        pure virtual methods</LI>
    <LI>Modules: the equivalent of C++ namespaces</LI>
    <LI>(Interface) Inheritance: single and multiple</LI>
    <LI>C++ style comments and preprocessor directives</LI>
</UL>
<p>IDL adds support for the following:</p>
<UL><LI>Object type: the root interface for all other interfaces</LI>
    <LI>Any type: a general purpose, type-safe container for any other data type</LI>
    <LI>Sequence type: the conceptual equivalent of STL vectors</LI>
    <LI>in, inout, and out specifiers: for specifying method parameter
        directionality</LI>
</UL>
<p>CORBA had to take a pragmatic approach to its language support since it had
to map into many other, potentially non-OO, languages. As a result, IDL does
not support the following:</p>
<UL><LI>Pointers: all non-interface types are passed by value while interface
        types are passed by reference.</LI>
    <LI>Overloading: you cannot define two methods with the same name and different
        parameters.</LI>
    <LI>Overriding: you cannot re-declare a method in a derived interface</LI>
</UL>

<h4><FONT COLOR="#000080">A "Fortune Teller" Example</FONT></H4>

<p>Here's
a concrete example using a simple "fortune teller" service. A client of the
fortune service submits a month value to a fortune-teller factory [2] which in
turn provides a fortune-teller server (object) for that specific month. Clients
use the fortune-teller server to retrieve their fortune message and lucky
number and print them to the screen.<p>
I present this example in three different versions. The first develops a
baseline (non-CORBA) client/server application as a single C++ process. The
second creates individual C++ client and server programs that communicate via
CORBA. The third develops a Java client that communicates with the existing C++
server via CORBA. Hopefully, these last two examples will show you how easy it
is to produce distributed systems with CORBA.<p>
The C++ programs were compiled on a Windows 95 machine using MS VC++ v5.0 and
Object-Oriented Concepts' (OOC) OmniBroker/C++ v2.0.2 mapping. The Java client
was compiled using Sun's JDK v1.1.5 and used OOC's v2.0.2 Java mapping. The
source code should be portable to any other OmniBroker supported platform with
very little modification. See page 3 for information on how to download the
source for these examples.</p>

<h4><FONT COLOR="#000080">Example 1 &#151; C++ without CORBA</FONT></H4>

<p>Listings
1 through 3 cover the source code used for this example. In <A href="list1.htm">Listing 1</a>,

fortune.h declares the Teller_impl and Factory_impl classes. The
Factory_impl::getFortune method takes an integer month value and returns a
Teller_impl object created specifically for the given month. getFortune throws
an outOfBounds exception, naturally enough, whenever the given month value is
out of bounds (i.e., not between 1 and 12 inclusive). The Teller_impl class
declares the methods to get a fortune message and a lucky number.<p>
<A href="list2.htm">Listing 2</a>
contains the source for fortune.cpp, which implements the above
classes. The Factory_impl constructor creates a list of Teller_impl objects
which are initialized from a static array of fortune messages. The
Factory_impl::getFortune method either returns a pointer to the appropriate
Teller_impl object in its list or throws an exception for invalid input. The
Teller_impl constructor stores a copy of its string argument (the fortune
message) and keeps a running count of Teller_impl objects, whose current value
is used for the lucky number. The Teller_impl::getMessage and
Teller_impl::getLuckyNmuber methods return their respective stored values. The
destructors clean up any dynamically allocated memory.<p>
Driver.cpp, shown in <A href="list3.htm">Listing 3</a>,
 drives this version of the fortune-teller
program. The driver checks that at least one command-line argument was passed
and then instantiates a Factory_impl object. The program interprets the first
command-line argument as a month value and uses it to obtain a pointer to the
desired Teller_impl object. The program then uses this pointer to display the
fortune message and lucky number to the screen. All the methods are wrapped in
a try-catch block to handle possible exception conditions.<p>
To run this program use the following command line:</p>

<pre>
C:\example1&gt; driver &lt;month value&gt;
</pre>

<h4><FONT COLOR="#000080">Example 2 &#151; Developing with CORBA</FONT></H4>

<p>CORBA
development requires a few additional steps over the previous example. This
process is summarized in <A href="fig2.htm">Figure 2</a>.
 The first step is to develop an IDL
specification that describes the system. Step 2 passes this specification
through the IDL compiler to generate client-side "stub" code and server-side
"skeleton" code. Referring back to <A href="fig1.htm">Figure 1</a>,
 you can think of stub and
skeleton code as the equivalents of the Proxy and OA components respectively.
In steps 3 and 4 you develop the server implementation and driver code and link
it with the generated skeleton code to produce a server executable. You then
develop your client driver in step 5 and link it with the generated client stub
code in step 6 to produce a client executable. You now have the components for
a simple distributed system.</p>

<h4><FONT COLOR="#000080">Writing the IDL Code</FONT></H4>

<p>The
IDL specification used for this example is shown in <A href="list4.htm">Listing 4</a>.
 Fortune.idl is a
direct translation of fortune.h (<A href="list1.htm">Listing 1</a>)
 into CORBA IDL. I have made this
direct translation for comparative purposes and not because of any imposed
language limitation. A direct translation from an existing system interface
into IDL is generally considered a poor design choice. The interfaces have been
wrapped in a module block, which is not explicitly necessary but is good
practice. (Note: OmniBroker prefixes the generated classes with the module
name, which is an approved CORBA mapping alternative, since many compilers do
not yet support namespaces.) Step 1 is now complete.</u></b></p>
<p>Step 2 is to run the (C++) IDL compiler on fortune.idl using the following
command:</p>

<pre>
C:\example2&gt; idl fortune.idl
</pre>
<p>The
idl compiler will generate the following four files in the current
directory:</p>
<UL><LI>fortune.h, fortune.cpp: the client-side stub code</LI>
    <LI>fortune_skel.h, fortune_skel.cpp: the server-side skeleton code</LI>
</UL>
<p>The content of these files is not listed since the details are not
particularly important to this discussion. Keep in mind that the particulars
(e.g., generated file names and class names) in the examples below are specific
to OmniBroker. Other vendors may use a different naming scheme but the
procedure will be the same.</p>

<h4><FONT COLOR="#000080">Implementing the Server in C++</FONT></H4>

<p>Step
three puts "meat" on the skeleton code by developing the implementation
classes. <A href="list5.htm">Listing 5</a>
(fortune_impl.h) shows the class declarations for
Fortune_impl and Teller_impl. This is essentially the same source code shown in
<A href="list1.htm">Listing 1</a>.
 The main difference is that both classes now inherit from their
respective "skel"-eton classes, which contain the server-side hooks into the
ORB. (CORBA also defines a delegation model for implementation objects, but the
inheritance model is the easiest to understand and will be used here.) I've
also changed the return values for the Teller_impl::getLuckyNumber and
Factory_impl::getFortune methods to CORBA_Long and FortuneModule_Teller_ptr
(a generated convenience type) respectively for CORBA compliance. You can
always check the method signatures in the IDL-generated files to find out what
types you should use. The last difference is that the outOfBounds exception
declaration is omitted in <A href="list5.htm">Listing 5</a>
since it is already defined in the IDL
specification.<p>
The implementation code in <A href="list6.htm">Listing 6</a>
(fortune_impl.cpp) is also very similar to
the code shown in <A href="list2.htm">Listing 2</a>.
 The method signatures have changed, as discussed
above, and the source now #includes fortune_impl.h and CORBA.h instead of
fortune.h. String management is so common that CORBA introduces its own
methods, which allows vendors to optimize their allocation schemes without
overriding the global new and delete operators. Therefore, string allocations
that used new and delete in <A href="list2.htm">Listing 2</a>
have been changed to use
CORBA_string_alloc and CORBA_string_free methods in <A href="list6.htm">Listing 6</a>.
 The
CORBA_string_alloc method automatically allocates extra storage for the
terminating null character, so the "+1" argument in <A href="list2.htm">Listing 2</a>
is no longer
necessary.<p>
Memory management becomes a complicated issue in distributed systems. As a
result, you need to be aware of client- and server-side responsibilities
regarding storage associated with method parameters and return values (which
should be spelled out in your ORB's documentation). In this case, string and
object return values must be "duplicated" prior to returning any references
from the server. As a result, the Teller_impl::getMessage and
Factory_impl::getFortune methods use the appropriate "duplicate" methods
before returning any references. By the same token, freeing object references
requires the use of the appropriate "free" methods: CORBA_string_free for
strings and CORBA_release for objects. CORBA uses a reference counting scheme
for objects, which is managed via the "duplicate" and "release" methods.
Using the delete operator would bypass this reference counting mechanism and
potentially leave dangling references.<p>
<A href="list7.htm">Listing 7</a>
(server.cpp) shows the driver code for the server process. First, it
includes the implementation header. Second, the server initializes the ORB and
OA objects prior to creating any implementation objects. The server then
creates a factory object and saves its interoperable object reference (IOR) to
an external file so the client can subsequently obtain a handle to it. With
everything now in order, the server enters the main loop. This source file
completes step 3. Producing an executable from it completes step 4.<p>
Besides the signature and memory management changes discussed above, nothing
really appears in the source to indicate that the implementation code is
distributed. All the communication details have been hidden inside the skeleton
code; you write your implementation code just like before. If you have ever had
to program using a low-level (and error prone) socket API, then you should
already be in love with CORBA at this point.</p>

<h4><FONT COLOR="#000080">Implementing the Client in C++</FONT></H4>

<p>Steps
5 and 6 are very straightforward. The stub header is included in this case, as
shown in <A href="list8.htm">Listing 8</a>
(client.cpp). The client initializes the ORB prior to
working with any CORBA objects (the OA is not required for client programs).
The client then obtains the externalized reference generated by the server.
This reference is returned as a generic Object type, the root of all interface
types, and must be "narrowed" to the appropriate interface. A simple
C++-style cast operator would not work here since the narrowing process may
involve communications with the server. At this point, the object references
can be used just like handles to the real objects themselves. The rest of the
code is essentially the same as that shown in <A href="list3.htm">Listing 3</a>.
 (The _var types used
in <A href="list8.htm">Listing 8</a>
are generated "smart pointer" convenience types that
automatically release their objects when they go out of scope.)<p>
The above client code is wrapped in a try-catch block, as before, but contains
a new catch statement for CORBA_SystemException exceptions. Now that method
invocations (can potentially) go across a network, there are more things that
can go wrong than in the first example. In fact, with very few exceptions,
every IDL method is capable of throwing a CORBA_SystemException (or a
derivative) and should be handled. Compiling and linking this code produces a
client executable and completes step 6.<p>
Again, aside from obtaining the external object reference and handling an extra
exception type, the source gives no indication that this code is distributed.
All the communication details are hidden on the client side as well.<p>
In order to run multiple clients simultaneously, use:</p>

<pre>
C:\example2&gt; start server
C:\example2&gt; client
</pre>

<h4><FONT COLOR="#000080">Example 3 &#151; Java Client with CORBA</FONT></H4>

<p>CORBA/Java
development follows the same steps shown in <A href="fig2.htm">Figure 2</a>.
 For this example, only
the client portion will be developed since the server side is already built. To
carry out step 2, run the IDL specification from the last example through the
(Java) IDL compiler (jidl) using the following command:</p>

<pre>
C:\example3&gt; jidl ..\example2\fortune.idl
</pre>
<p>This
command generates Java stub, skeleton, and support classes in the Fortune
subdirectory.<p>
The client code for this example is shown in <A href="list9.htm">Listing 9</a>.
 (Although I don't cover
Java syntax here, it is similar enough to C++ that readers should be able to
understand the code and following discussion.) First, the appropriate packages
are imported at the top of the file. <A href="list9.htm">Listing 9</a>
then defines a client class with
a static main method. This method performs the same functions as the previous
C++ client code: it initializes the ORB, obtains the external reference to the
factory implementation, loops on user input and then displays the results to
the screen. Writing this source completes step 5 and compiling it completes
step 6.<p>
To run this example, use the following commands:</p>

<pre>
C:\example3&gt; start ..\example2\server
C:\example3&gt; java client
</pre>
<p>To
run multiple clients simultaneously use:</p>

<pre>
C:\example3&gt; start java client
</pre>

<h4><FONT COLOR="#000080">Conclusion</FONT></H4>

<p>I
hope this article has shown how easy it is to develop distributed object
systems with CORBA, and that CORBA delivers on its promise of platform and
language independence. CORBA technology is mature, industry supported, and not
necessarily expensive. There are plenty of quality CORBA ORBs available at
little or no cost. In fact CORBA ORBs are currently being shipped with the
latest versions of Netscape's browser and Sun's JDK.<p>
There are many books and Internet sites that provide good information on CORBA.
Check out the Online Resources and Further Reading sections (below) for some
starting points. Also, be sure to read the <a href="sidebar.htm">sidebar</a>
on CORBA "Gotchas" before
diving headlong into your own CORBA development.</p>

<h4><FONT COLOR="#000080">References</FONT></H4>

<p>[1]
Object Management Group. The Common Object Request Broker: Architecture and
Specification, revision 2.1, Document 97-09-01 (Object Management Group,
Framingham, MA, 1997).<p>
[2] E. Gamma, R. Helm, R. Johnson, and J. Vlissides. Design Patterns: Elements
of Reusable Object-Oriented Software (Addison-Wesley, Reading, MA, 1995).</p>

<h4><FONT COLOR="#000080">Online Resources</FONT></H4>

<p>Source
code for the examples used in this article</p>

<pre>
   ftp://ftp.mfi.com/pub/cuj/1998/1604/resendes.zip
</pre>

<p>OmniBroker CORBA 2.0 compliant ORB (free for non-commercial use)</p>

<pre>
   http://www.ooc.com/ob/
</pre>
<p>Java
Development Kit. Sun's Java development environment for Win95/NT and Solaris
(free)</p>

<pre>
   http://www.javasoft.com/products/jdk/1.1/index.html
</pre>
<p>Microsoft
Visual C++. Microsoft's C++ development environment</p>

<pre>
   http://www.microsoft.com/products/prodref/197_ov.htm
</pre>
<p>Object
Management Group. The source for CORBA information and specifications</p>

<pre>
   http://www.omg.org/
</pre>
<p>CORBA
2.1 Specification</p>

<pre>
   http://www.omg.org/corba/corbiiop.htm
</pre>
<p>CORBA
Services Specification</p>

<pre>
   http://www.omg.org/corba/sectrans.htm
</pre>
<p>Free
CORBA Page. A great resource for free/trial/commercial CORBA ORBs</p>

<pre>
   http://adams.patriot.net/~tvalesky/freecorba.html
</pre>
<p>Doug
Schmidt's homepage. A great resource for CORBA tutorials, articles, and source
code.</p>

<pre>
    http://siesta.cs.wustl.edu/~schmidt/
</pre>
<p>CORBA FAQ</p>

<pre>
    http://www.cerfnet.com/~mpcline/Corba-FAQ/index.html
</pre>

<h4><FONT COLOR="#000080">Further Reading</FONT></H4>

<p>Jon
Siegel. CORBA Fundamentals and Programming (John Wiley &amp; Sons, 1996). ISBN:
0471121487.<p>
T.J. Mowbray and R. Zahavi. The Essential CORBA: Systems Integration Using
Distributed Objects (John  Wiley &amp; Sons/OMG, 1995). ISBN: 0471106119.<p>
Orfali, Harkey, and Edwards. The Essential Distributed Objects Survival Guide
(John Wiley &amp; Sons, 1996). ISBN: 0471129933.
</p>
<p><i>Robert Resendes holds an MS in Electrical Engineering from the University
of Massachusetts and currently works for the Naval Undersea Warfare Center. He
is currently using CORBA, C++, and Java to build distributed object systems as
part of an internal R&amp;D project. He can be reached at
resendes@cstlmail.npt.nuwc.navy.mil.<p>
Marc Laukien is founder and president of Object-Oriented Concepts, Inc. He is
the main author of OmniBroker, which is a CORBA-2.0 compliant ORB that supports
C++ and Java mappings. His current technical interests involve distributed
systems, object-oriented programming, and design patterns. He can be reached at
ml@ooc.com.
</i></p>

<h4><a href="../../../source/1998/apr98/resendes.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</body></html>
