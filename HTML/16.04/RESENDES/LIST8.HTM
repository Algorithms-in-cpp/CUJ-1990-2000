


<HTML><HEAD>

<TITLE>April 1998/Introduction to CORBA Distributed Objects/Listing 8</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4>
<A name="HEADING1">Listing 8: Client main driver in CORBA application</A></h4>


<pre>
//
// File: client.cpp
//
#include &lt;OB/CORBA.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;

#include "fortune.h"
int
main(int argc, char* argv[]) {

 try {
   // Init ORB
   CORBA_ORB_var orb = CORBA_ORB_init(argc, argv);
   // Obtain externalized Factory object reference.
   const char* refFile = "factory.ior";
   ifstream in; in.open(refFile);
   if(in.fail()){
      cerr &lt;&lt; "Can't open " &lt;&lt; refFile &lt;&lt; " for reading." &lt;&lt; endl;
      return 1;
   }

   char s[1000]; in &gt;&gt; s;
   CORBA_Object_var obj = orb -&gt; string_to_object(s);
   assert(!CORBA_is_nil(obj));

   // Narrow object reference
   Fortune_Factory_var fv = Fortune_Factory::_narrow(obj);
   assert(!CORBA_is_nil(fv));

   int month = 0;
   int done = 0;
   cout &lt;&lt; "Enter month value (1 to 12" &lt;&lt; ", 0 to quit)" &lt;&lt; endl;

   // Loop
   while (done == 0) {
      cout &lt;&lt; "\nMonth: ";
      cin &gt;&gt; month;
      if (month != 0) {
       // Get fortune server
       Fortune_Teller_var tv = fv-&gt;getFortune(month);
       assert(!CORBA_is_nil(tv));
      
       // Display results
       cout &lt;&lt; "Fortune for " &lt;&lt; tv-&gt;getMessage() &lt;&lt; endl;
       cout &lt;&lt; "Lucky # is: " &lt;&lt; tv-&gt;getLuckyNumber() &lt;&lt; endl;
      }
      else { done = 1; }
    }
  }
  // Check for error conditions
  catch(Fortune_Factory::outOfBounds&amp;)
  {
    cerr &lt;&lt; "Month value was out "
         &lt;&lt; "of bounds ... exiting."
         &lt;&lt; endl;
    return 1;
  }
  catch(CORBA_SystemException&amp; ex)
  { 
    cerr &lt;&lt; "Communications failure:" &lt;&lt; endl;
    cerr &lt;&lt; "\t" &lt;&lt; ex.reason(); 
    return 1;
  }
   
  return 0;
}
//End of File
</pre>
</body></html>
