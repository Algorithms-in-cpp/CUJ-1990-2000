


<HTML><HEAD>

<TITLE>April 1998/Counting Objects in C++/Sidebar</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<H2 ALIGN="center"><FONT COLOR="#800000">Placement new and placement delete</FONT></H2><hr>
<BLOCKQUOTE>
<p>The
C++ equivalent of malloc is operator new, and the C++ equivalent of free is
operator delete. Unlike malloc and free, however, operator new and operator
delete are overloadable functions, and as such they may take different numbers
and types of parameters. This has always been the case for operator new, but
until relatively recently, it wasn't valid to overload operator delete.<p>
The "normal" signature for operator new is:</p>

<pre>
void * operator new(size_t) throw (std::bad_alloc);
</pre>
<p>(To
simplify things from now on, I'll omit exception specifications. They're not
germane to the points I want to make.) Overloaded versions of operator new are
limited to adding additional parameters, so an overloaded version of operator
new might look like:</p>

<pre>
void * operator new(size_t, void *whereToPutObject)
{ return whereToPutObject; }
</pre>
<p>This
particular version of operator new &#151; the one taking an extra void* argument
specifying what pointer the function should return &#151; is so commonly useful
that it's in the Standard C++ library (declared in the header &lt;new&gt;) and
it has a name, "placement new." The name indicates its purpose: to allow
programmers to specify where in memory an object should be created (where it
should be placed).<p>
Over time, the term placement new has come to be applied to any version of
operator new taking additional arguments. (This terminology is actually
enshrined in the grammar for C++ in the forthcoming International Standard.)
Hence, when C++ programmers talk about the placement new function, they mean
the function above, the one taking the extra void* parameter specifying where
an object should be placed. When they talk about a placement new function,
however, they mean any version of operator new taking more than the mandatory
size_t argument. That includes the function above, but it also includes a
plethora of operator new functions that take more or different parameter
types.<p>
In other words, when the topic is memory allocation functions, "placement
new" means "a version of operator new taking extra arguments." The term can
mean still other things in other contexts, but we don't need to go down that
road here, so we won't. For details, consult the suggested reading at the end
of the article.<p>
By analogy with placement new, the term "placement delete" means "a version
of operator delete taking extra arguments." The "normal" signature for
operator delete is:</p>

<pre>
void operator delete(void*);
</pre>
<p>So
any version of operator delete taking one or more arguments beyond the
mandatory void* parameter is a placement delete function.<p>
Let us now revisit an issue discussed in the main article. What happens when an
exception is thrown during construction of a heap object? Consider again this
simple example:</p>

<pre>
class ABCD { ... };
ABCD *p = new ABCD;
</pre>
<p>Suppose
the attempt to create the ABCD object yields an exception. The main article
pointed out that if that exception came from the ABCD constructor, operator
delete would automatically be called to deallocate the memory allocated by
operator new. But what if operator new is overloaded, and what if different
versions of operator new (quite reasonably) allocate memory in different ways?
How can operator delete know how to correctly deallocate the memory?
Furthermore, what if the ABCD object being created used placement new, as
in:</p>

<pre>
void *objectBuffer = getPointerToStaticBuffer();
ABCD *p = new (objectBuffer) ABCD; // create an ABCD object in a static buffer
</pre>
<p>(The)
placement new didn't actually allocate any memory. It just returned the pointer
to the static buffer that was passed to it in the first place. So there's no
need for any deallocation.<p>
Clearly, the actions to be taken in operator delete to undo the actions of its
corresponding operator new depend on the version of operator new that was
invoked to allocate the memory.<p>
To make it possible for programmers to indicate how the actions of particular
versions of operator new can be undone, the C++ Standards committee extended
C++ to allow operator delete to be overloaded, too. When an exception is thrown
from the constructor for a heap object, then, the game is played a special way.
The version of operator delete that's called is the one whose extra parameter
types correspond to those of the version of operator new that was invoked.<p>
If there's no placement delete whose extra parameters correspond to the extra
parameters of the placement new that was called, no operator delete is invoked
at all. So the effects of operator new are not undone. For functions like (the)
placement version of operator new, this is fine, because they don't really
allocate memory. In general, however, if you create a custom placement version
of operator new, you should also create the corresponding custom placement
version of operator delete to go with it.<p>
Alas, most compilers don't yet support placement delete. With code generated
from such compilers, you almost always suffer a memory leak if an exception is
thrown during construction of a heap object, because no attempt is made to
deallocate the memory that was allocated before the constructor was invoked. o
</p></BLOCKQUOTE>
</body></html>
