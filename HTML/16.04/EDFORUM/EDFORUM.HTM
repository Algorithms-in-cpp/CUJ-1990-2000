





<HTML>
     
     <HEAD>

<TITLE>April 1998/Editor's Forum</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<H2><A href="../tocapr.htm"><IMG src="../../toc.gif" ALT="Back to TOC" WIDTH="54" HEIGHT="54"></A>
<FONT COLOR="#FF0000">Departments</FONT></H2>

<HR>
<BLOCKQUOTE>
<H2 ALIGN="center"><FONT COLOR="#800000">Editor's Forum</FONT></H2><hr>
<p>Now that the C++ Final Draft International Standard (FDIS) has been
released, I guess it's safe to talk about some of the things that didn't quite
make it into the Standard. These were features submitted by a contingent of
committee members primarily concerned with enterprise computing. Unfortunately
for them, they proposed their additions too late to be seriously considered by
the standards committee in this iteration. But sufficient public support might
help these proposals make it into the next version of the Standard, albeit many
years from now. So here they are for your consideration:</p>
<LI>Another new-style cast operator:</LI>

<pre>
void out_cast&lt;T&gt;(const U &amp;u);
</pre>

<p>Intended
as a companion to the relatively new static_cast, dynamic_cast, and friends,
out_cast would cast the object u out of process scope, rendering it
inaccessible to other program entities from that point forward. It was seen as
a quick way to eliminate corrupted business objects, as in:</p>

<pre>
Manager m;
//... m does something questionable
out_cast&lt;int&gt;(m); // he's outta here!
</pre>

<LI>New facets. The Enterprise Contingent, as they came to be known, made a strong
    case that programming in a corporate environment was in many ways equivalent to
    the daunting task of internationalization. Thus, they proposed that the
    Standard include two new internationalization facets, corporate_put and
    corporate_get. (For an explanation of C++ locales and facets, see
    ``Internationalization Using Standard C++,'' by Angelika Langer and Klaus
    Kreft, CUJ, September 1997.)</LI>
<p>When a program was imbued with the corporate_put facet, an inserter would
translate strings from a process environment to a corporate environment. For
example, the line:</p>

<pre>
cout &lt;&lt; "The project was a total disaster." &lt;&lt; endl;
</pre>
<p>would
cause the console to print:</p>

<pre>
More research is required before conformance of the project to stated objectives
can be assessed.
</pre>
<p>Likewise,
the corporate_get facet would facilitate translation of strings from the
corporate environment to the process environment. For example, when a program
was imbued with the corporate_get facet, its extractors would translate the
string:</p>

<pre>
To help recoup losses incurred in the recent acquisition, some adjustment in
employment levels may be expected.
</pre>
<p>to:</p>

<pre>
We hear that McDonald's is hiring.
</pre>
<p>Although
it's taken a good eight years to get the C++ Standard to FDIS stage, some
members of the Enterprise Contingent feel that the standardization committee
passed over their proposals too quickly. "They're just no fun anymore," said
one disgruntled member. Personally, I think it's high time we thanked the
Standards Committee for a job well done. However, if you want to lend your
support to the Enterprise Contingent, you can do so by visiting the their
website: http://www.april\\fools!.com.</p>
<p>Marc Briand<br>
Editor-in-Chief</p>
</BLOCKQUOTE>
</body></html>
