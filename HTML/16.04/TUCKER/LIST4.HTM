


<HTML><HEAD>

<TITLE>April 1998/Reading Java Class Files in C++/Listing 4</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4>
<A name="HEADING1">Listing 4: A utility for extracting class declaration information from a Java class file</A></h4>


<pre>
#include &lt;iostream&gt;
#include "JavaClassFile.h"

using namespace std;

wstring MassageType( const wstring &amp;wstrType );

int main(int argc, char **argv)
{

    if ( argc &lt; 2 )
    {
        wcerr &lt;&lt; _U("syntax: ClassDump &lt;filename&gt;") &lt;&lt; endl;
        exit(0);
    }

    JavaClassFile cfile(argv[1]);

    if ( cfile.IsOpen() )
    {
        WORD wAccess;
        WORD wCount;

        wAccess = cfile.GetClassAccess();

        if ( wAccess &amp; JavaClassFile::ACC_PUBLIC) 
            wcout &lt;&lt; _U("public ");
        if ( wAccess &amp; JavaClassFile::ACC_FINAL) 
            wcout &lt;&lt; _U("final ");
        if ( wAccess &amp; JavaClassFile::ACC_ABSTRACT) 
            wcout &lt;&lt; _U("abstract ");
        if ( wAccess &amp; JavaClassFile::ACC_INTERFACE) 
            wcout &lt;&lt; _U("interface ");
        else
            wcout &lt;&lt; _U("class ");

        wcout &lt;&lt; MassageType(cfile.GetClassName()) &lt;&lt; _U(" ");

        wCount = cfile.GetInterfaceCount();
        if ( wCount )
        {
        wcout &lt;&lt; _U("implements ");

            for ( WORD wCur = 0; wCur &lt; wCount; wCur++ )

            {
                wcout &lt;&lt; MassageType(cfile.GetInterfaceName(wCur));
                if ( wCur == wCount-1 )
                    wcout &lt;&lt; _U(" ");
                else
                    wcout &lt;&lt; _U(", ");
            }
        }

        wcout &lt;&lt; _U("extends ") &lt;&lt;
            MassageType(cfile.GetSuperClassName()) &lt;&lt; endl;
        wcout &lt;&lt; _U("{") &lt;&lt; endl &lt;&lt; endl;
        wCount = cfile.GetFieldCount();
        if ( wCount )
        {
            wcout &lt;&lt; _U("\t// Fields") &lt;&lt; endl;

            for ( WORD wCur = 0; wCur &lt; wCount; wCur++ )
            {
                wcout &lt;&lt; _U("\t");

                WORD wAccess = cfile.GetFieldAccess(wCur);

                if ( wAccess &amp; JavaClassFile::ACC_PUBLIC) 
                    wcout &lt;&lt; _U("public ");
                if ( wAccess &amp; JavaClassFile::ACC_PRIVATE) 
                    wcout &lt;&lt; _U("private ");
                if ( wAccess &amp; JavaClassFile::ACC_PROTECTED) 
                    wcout &lt;&lt; _U("protected ");
                if ( wAccess &amp; JavaClassFile::ACC_STATIC) 
                    wcout &lt;&lt; _U("static ");
                if ( wAccess &amp; JavaClassFile::ACC_FINAL) 
                    wcout &lt;&lt; _U("final ");
                if ( wAccess &amp; JavaClassFile::ACC_VOLATILE) 
                    wcout &lt;&lt; _U("volatile ");
                if ( wAccess &amp; JavaClassFile::ACC_TRANSIENT) 
                    wcout &lt;&lt; _U("transient ");

                wcout &lt;&lt; MassageType(cfile.GetFieldType(wCur))
                      &lt;&lt; _U(" ");
                wcout &lt;&lt; cfile.GetFieldName(wCur) &lt;&lt; _U(";") &lt;&lt; endl;
            }
            wcout &lt;&lt; endl;
        }

        wCount = cfile.GetMethodCount();
        if ( wCount )
        {
            wcout &lt;&lt; _U("\t// Methods") &lt;&lt; endl;
 
            for ( WORD wCur = 0; wCur &lt; wCount; wCur++ )
            {
                wcout &lt;&lt; _U("\t"); 
                WORD wAccess = cfile.GetMethodAccess(wCur);

                if ( wAccess &amp; JavaClassFile::ACC_PUBLIC) 
                    wcout &lt;&lt; _U("public ");
                if ( wAccess &amp; JavaClassFile::ACC_PRIVATE) 
                    wcout &lt;&lt; _U("private ");
                if ( wAccess &amp; JavaClassFile::ACC_PROTECTED) 
                    wcout &lt;&lt; _U("protected ");
                if ( wAccess &amp; JavaClassFile::ACC_STATIC) 
                    wcout &lt;&lt; _U("static ");
                if ( wAccess &amp; JavaClassFile::ACC_FINAL) 
                    wcout &lt;&lt; _U("final ");
                if ( wAccess &amp; JavaClassFile::ACC_ABSTRACT) 
                    wcout &lt;&lt; _U("abstract ");
                if ( wAccess &amp; JavaClassFile::ACC_SYNCHRONIZED) 
                    wcout &lt;&lt; _U("synchronized ");
                if ( wAccess &amp; JavaClassFile::ACC_NATIVE) 
                    wcout &lt;&lt; _U("native ");

                wcout &lt;&lt; MassageType(cfile.GetMethodReturnType(wCur))
                      &lt;&lt; _U(" ");
                wcout &lt;&lt; cfile.GetMethodName(wCur) &lt;&lt; _U("(");

                WORD wArgCount = cfile.GetMethodArgCount( wCur );
                if ( wArgCount )
                {
                    wcout &lt;&lt; _U(" ");

                    for ( WORD wCurArg = 0;
                          wCurArg &lt; wArgCount;
                          wCurArg++ )
                    {
                        wcout &lt;&lt; MassageType(
                            cfile.GetMethodArgType(wCur, wCurArg));
                        if ( wCurArg != (wArgCount-1) )
                            wcout &lt;&lt; _U(",");
                        wcout &lt;&lt; _U(" ");
                    }
                }
                wcout &lt;&lt; _U(");") &lt;&lt; endl;
            }
            wcout &lt;&lt; endl;
        }
        wcout &lt;&lt; _U("}");
    }
    else
    {
        cout &lt;&lt; argv[1] &lt;&lt; " is not a valid class file" &lt;&lt; endl;
    }
    return 0;
}

wstring MassageType( const wstring &amp;crwstrType )
{
    wstring wstrT = crwstrType;

    int nIndex = wstrT.find(_U('/'));
    while ( nIndex != wstring::npos )
    {
        wstrT[nIndex] = _U('.');
        nIndex = wstrT.find(_U('/'));
    }

    return wstrT;
}
//End of File
</pre>
</body></html>
