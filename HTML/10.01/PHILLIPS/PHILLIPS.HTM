


<HTML>
<HEAD>

<TITLE>January 1992/Image Processing</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjan.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">Image Processing<A name="0024_0009"><A name="0024_0009"></font></h2><P>
<h3 align="center"><A name="0024_0000"><A name="0024_0000">Part 6: Advanced Edge Detection</h3><P>
<h3 align="center"><font color="#800000">Dwayne Phillips</font></h3><hr><blockquote><P>
<P><i><A name="0024_0000"><A name="0024_0000">Dwayne Phillips works as a computer and electronics<I></I> <I></I>engineer with the United States Department of Defense. He has<I></I> <I></I>a Ph.D. in electrical and computer engineering at Louisiana<I></I> <I></I>State University. His interests include computer vision,<I></I> <I></I>artificial intelligence, software engineering; and programming<I></I> <I></I>languages.</i></P><P>
<h4><FONT COLOR="#000080"><A name="0024_000A">Introduction<A name="0024_000A"></FONT></h4></P>
This is the sixth in a series of articles on images and image processing. The first five articles in the series discussed reading and writing images (TIFF format), displaying them, printing them, histograms and histogram equalization, and basic edge detection. This article will cover some advanced techniques in edge detection.<P>
There are many different methods of edge detection. Image Processing Part 5: Writing Images to Files and Basic Edge Detection (<I>CUJ</I>, October 1991) discussed some basic techniques. This article discusses some unusual and advanced ideas and looks at four edge detectors. The first two do not use the convolution operation &#151; they use only subtraction. The third edge detector can vary the level of detail of the edges it will detect. The fourth edge detector will detect edges in unevenly lit images. Then an edge detector is used to enhance the appearance of an original image. Finally, these new operators are integrated into the C Image Processing System (CIPS). <A href="photo1.htm">Photograph 1</a>
shows the original image used by all the operators.<P>
The first edge detector is the homogeneity operator<a href="#ref1">[1]</a> which uses subtraction to find an edge. <A href="fig1.htm">Figure 1</a>
shows an example of this operator. The operator subtracts each of the pixels next to the center of a 3x3 area from the center pixel. The result is the maximum of the absolute value of these subtractions. Subtraction in a homogeneous region (one that is a solid gray level) produces zero and indicates an absence of edges. A region containing sharp edges, such as area 2 of <A href="fig1.htm">Figure 1</a>,
 has a large maximum.<P>
The first section of <A href="list1.htm">Listing 1</a>
shows the homogeneity function. This function is similar in form to the edge detectors discussed in the previous article of this series. First, the function checks to see if the output image exists. If the output image does not exist, the homogeneity function creates it by calling <I>create_allocate_tiff_file</I>. The homogeneity function reads in the image array and goes into the processing loop.<P>
In the loop over <I>ROWS</I> and <I>COLS</I>, the code performs the subtraction and finds the maximum absolute value of the subtractions. The homogeneity operator requires thresholding (which you can specify). A perfectly homogeneous 3x3 area is rare in an image. If you do not threshold, the result looks like a faded copy of the original. Thresholding at 30 to 50 for a 256 gray level image gives good results.<P>
<A href="photo2.htm">Photograph 2</a>
shows the result of the homogeneity operator. This operator gives a good rendition of the edges in the original house image. This is a quick operator that performs only subtraction &#151; eight operations per pixel &#151; and no multiplication.<P>
The next edge detector is the difference operator, another simple operator that uses subtraction. Recall that edge detection is often called image differentiation (detecting the slope of the gray levels in the image). The difference operator performs differentiation by calculating the differences between the pixels that surround the center of a 3x3 area.<P>
<A href="fig2.htm">Figure 2</a>
shows an example of the difference operator. The difference operator finds the absolute value of the differences between opposite pixels, the upper left minus lower right, upper right minus lower left, left minus right, and top minus bottom. The result is the maximum absolute value. The results shown in <A href="fig2.htm">Figure 2</a>
are similar but not exactly equal to those from the homogeneity operator in <A href="fig1.htm">Figure 1</a>.
<P>
The second part of <A href="list1.htm">Listing 1</a>
shows the <I>difference_edge</I> function, which is similar to the homogeneity function. The routine creates an output image file if necessary and reads in the input image array. The <I>difference_edge</I> function loops over the input image array and calculates the absolute values of the four differences. You can specify that <I>difference_edge</I> threshold the output. As in the homogeneity case, the difference operator requires thresholding.<P>
<A href="photo3.htm">Photograph 3</a>
shows the result of the difference edge detector. This result is similar to the shown in <A href="photo2.htm">Photograph 2</a>.
 The difference edge detector did detect more of the brick and mortar lines than the homogeneity operator. You can choose between the two edge detectors depending on how much detail you want. The difference operator is faster than the homogeneity operator. The difference operator uses only four integer subtractions per pixel, while the homogeneity operator uses eight subtractions per pixel. These compare to the nine multiplications and additions for the convolution-based edge detectors discussed in the fifth article.<P>
The next operator to examine is the difference of Gaussians edge detector, which allows you to vary the width of a convolution mask and adjust the detail in the output[<a href="#ref2">2</a>,<a href="#ref3">3</a>]. The results in <A href="photo2.htm">Photograph 2</a>
and <A href="photo3.htm">Photograph 3</a>
are good. Suppose, however, we wanted to detect only the edges of the large objects in the house image (door, windows, etc.) and not detect the small objects (bricks, leaves, etc.).<P>
You can use convolution masks and vary the width of the mask to eliminate details. If a mask is wide, then convolving an image will smooth out details, much like averaging. If you look at stock market prices by the minute, you see many variations. If you look at the average stock market price over each hour, the variations begin to disappear. If you look at the average stock market price over each week, then the variations disappear and you see general trends in prices. If you convolve an image with a wide, constant mask, you smooth the image. If you use a narrower, varying mask, the details remain.<P>
<A href="fig3.htm">Figure 3</a>
shows two example masks. These masks are difference of Gaussians or Mexican hat functions. The center of the masks is a positive peak (16 in the 7x7 masks &#151; 19 in the 9x9 mask). The masks slope downward to a small negative peak (-3 in both masks) and back up to zero. The curve in the 9x9 mask is wider than that in the 3x3 mask. Notice how the 9x9 mask hits its negative peak 3 pixels away from the center while the 7x7 masks hits its peak 2 pixels away from the center. Also, notice these masks use integer values. Most edge detectors of this type use floating point numbers that peak at +1. Using integers greatly increases the speed; my 80286 machine does not have a math co-processor and numerous floating point calculations are out of the question.<P>
<A href="fig4.htm">Figure 4</a>
illustrates how the narrower mask will detect small edges the wide mask misses. Each area in <A href="fig4.htm">Figure 4</a>
has a small pattern similar to the brick and mortar pattern in the house image. This pattern has small objects (bricks) with many edges. If you convolve the 7x7 mask in <A href="fig3.htm">Figure 3</a>
with the 7x7 area in <A href="fig4.htm">Figure 4</a>,
 the result is +40; the 7x7 mask detected an edge at the center of the 7x7 area. If you convolve the 9x9 mask in <A href="fig3.htm">Figure 3</a>
with the 9x9 area in <A href="fig4.htm">Figure 4</a>,
 the result is -20; the 9x9 mask did not detect any edges. The "hat" in the 9x9 mask was wide enough to smooth out the edges and not detect them.<P>
The first section of <A href="list2.htm">Listing 2</a>
shows the two masks and the function <I>gaussian_edge</I>. <I>gaussian_edge</I> has the same form as the other edge detectors. The routine creates an output image file if necessary and reads the input image array. An additional size parameter (either 7 or 9) specifies mask width. The inner loop over <I>a</I> and <I>b</I> varies with this parameter. The processing portion is the same as the other convolution mask edge detectors presented in "Image Processing, Part 5." With <I>gaussian_edge</I>, you can use thresholding to produce a clear edge image or you can leave it off to show the strength of the edges.<P>
<A href="photo4.htm">Photograph 4</a>
shows the result of edge detection using the narrower 7x7 mask and <A href="photo5.htm">Photograph 5</a>
shows the result of the wider 9x9 mask. The narrower mask (<A href="photo4.htm">Photograph 4</a>)
 detected all the edges of the bricks, roof shingles, and leaves. The wider mask (<A href="photo5.htm">Photograph 5</a>)
 did not detect the edges of small objects, only edges of the larger objects. <A href="photo4.htm">Photograph 4</a>
may be too cluttered for your application, so you would use the wider mask. If you want fine detail, then the narrower mask is the one to choose.<P>
You can modify other edge detectors to detect edges on different size objects. The homogeneity operator can take the difference of the center pixel and a pixel that is two or three pixels away. The difference edge detector can take the difference of opposite pixels in a 5x5 or 7x7 area instead of a 3x3 area. The quick mask (see Part 5) can change from 3x3 to 5x5 with the center value equal to 4 and the four corners equal to -1. Try these changes as a homework project. You need the code in <I>gaussian_edge</I> that changes the size of the convolution and the call to the <I>fix_edges</I> function.<P>
One problem with detecting edges involves uneven lighting in images. The contrast-based edge detector<a href="#ref4">[4]</a> helps take care of this problem. In well lit areas of an image the edges have large differences in gray levels. If the same edge occurs in a poorly lit area of the image, the difference in gray levels is much smaller. Most edge detectors result in a strong edge in the well-lit area and a weak edge in the poorly-lit area.<P>
The contrast-based edge detector takes the result of any edge detector and divides it by the average value of the area. This division removes the effect of uneven lighting in the image. You find the average value of an area by convolving the area with a mask containing all <I>1</I>s and dividing by the size of the area.<P>
<A href="fig5.htm">Figure 5</a>
illustrates the contrast-based edge detector. You can use almost any edge detector as the basis for this operation. <A href="fig5.htm">Figure 5</a>
uses the quick edge detector from the last article (Part 5). The edge in the well-lit area is an obvious and strong edge. Convolving the quick mask with this area yields 100. The edge in the poorly-lit area is easy to see, but convolving with the quick mask results in 10, a weak edge that thresholding would probably eliminate. This distinction should be avoided. The well-lit and poorly-lit edges are very similar; both change from one gray level to another gray level that is twice as bright.<P>
Dividing by the average gray level in the area corrects this discrepancy. <A href="fig5.htm">Figure 5</a>
shows the smoothing mask that calculates the average gray level. Convolving the well-lit area yields an average value of 83. Convolving the poorly-lit area yields an average value of 8. Dividing (integer division) the strong edge in the well-lit area by 83 yields 1. Dividing the weak edge by 8 also result of 1. The two edges from unevenly-lit areas yield the same answer and you have consistent edge detection.<P>
The last section of <A href="list1.htm">Listing 1</a>
shows the <I>contrast_edge</I> function that follows the same steps as the other edge detector functions. The difference is in the processing loop over <I>a</I> and <I>b</I>, which calculates two convolutions: <I>sum_n</I> (the numerator or quick edge output) and <I>sum_d</I> (the smoothing output). After the loops over <I>a</I> and <I>b</I>, divide <I>sum_d</I> by 9 and divide <I>sum_n</I> by this result. The <I>e_mask</I> at the beginning of <A href="list1.htm">Listing 1</a>
replaces the quick mask (from Part 5), with every element in the quick mask multiplied by 9. You need the larger values &#151; dividing by the average gray level could reduce the strength of all edges to zero.<P>
<A href="photo6.htm">Photograph 6</a>
shows the result of the regular quick edge detector. <A href="photo7.htm">Photograph 7</a>
shows the result of dividing the quick edge result by the average value to produce contrast-based edge detection. Notice the inside of the upstairs and downstairs windows. <A href="photo6.htm">Photograph 6</a>
(quick edge) shows edges inside the downstairs windows, but not inside the upstairs windows. <A href="photo7.htm">Photograph 7</a>
(contrast-based) shows details inside the downstairs and upstairs windows. Refer to the original image (<A href="photo1.htm">Photograph 1</a>)
. The downstairs windows are shaded and the upstairs windows are not. Contrast-based edge detection gives better results in uneven lighting.<P>
You can use contrast-based edge detection with any edge detector. As a project, try modifying the homogeneity edge detector by dividing its result by the average gray level. But first multiply the result of homogeneity by a factor (9 or more) so dividing does not reduce edge strengths to zero. Modify any of the other edge detectors in a similar manner.<P>
A good application of edge detectors is to enhance edges and improve the appearance of an original image. Detect the edges in an image and then overlay these edges on top of the original image to accent its edges. The last section of <A href="list2.htm">Listing 2</a>
shows the <I>enhance_edges</I> function, which repeats the <I>quick_edge</I> function from the last article with a few added lines of code. Examine the code right after the loops over <I>a</I> and <I>b</I>. If the result of convolution (the sum variable) is greater than a user-chosen threshold, then the output image is assigned that value. If not, then the output image is assigned the value from the input image. The result is the input image with its strong edges accented.<P>
<A href="photo8.htm">Photograph 8</a>
shows the result of enhancing the edges of <A href="photo1.htm">Photograph 1</a>.
 The edges of the bricks, the siding in the left, and the lines on the garage door are all sharper.<P>
You can use any edge detector to enhance the edges in an input image. You just add the option of taking the edge detector result or a value from the input image. An interesting project would be to use the 9x9 Gaussian mask to detect the edges of large objects and use these edges to enhance the input image.<P>
Some new code incorporates these edge detectors into the C Image Processing System (CIPS). <A href="list3.htm">Listing 3</a>
shows the changes to the main program file <I>cips.c</I><I>.</I> I modified case 8 to include the new types of edge detection (<I>detect_type</I> == 5, 6, 7, or 8). I also added case 9 for edge enhancement. The last part of <A href="list3.htm">Listing 3</a>
shows the new version of <I>show_menu</I> that allows the user to select case 8 or 9.<P>
<A href="list4.htm">Listing 4</a>
shows the new version of <I>get_edge_options</I> (<I>file edge.c</I> from Part 5). The new version allows you to select from among eight available edge detectors. You can select thresholding, specify a threshold value, and specify 7x7 or 9x9 Gaussian edge detection.<P>
<A href="list4.htm">Listing 4</a>
shows the new version of the <I>mainedge</I> application program discussed in Part 5. You can run an edge detector over all of the 100x100 sections of an image without interacting with CIPS; instead <I>mainedge</I> uses command-line parameters. There are seven command-line parameters &#151; I can never remember the correct order. Just type <I>mainedge</I> <I>&lt;return&gt;</I> and the program will remind you of the order. <I>mainedge</I> loops over the 100x100 blocks and calls the specified edge detector function. The edge detector does the rest.<P>
Try these edge detectors and do a few of the projects. There a countless combinations to try and you can no doubt invent an edge detector tailored for your application.<P>
<h4>References</FONT></h4></P>
<a name="ref1">1.</a>     "Recognizing Objects in a Natural Environment: A Contextual Vision System (CVS)," Martin A. Fischler, Thomas M. Strat, Proceedings Image Understanding Workshop, pp. 774-796, Morgan Kaufman Publishers, May 1989.<P>
<a name="ref2">2.</a>     <I>Digital Image Processing</I>, Kenneth R. Castleman, Prentice-Hall, 1979.<P>
<a name="ref3">3.</a>     <I>Vision in Man and Machine</I>, Martin D. Levine, McGraw-Hill, 1985.<P>
<a name="ref4">4.</a>     <I>Contrast Based Edge Detection</I>, R.P. Johnson, Pattern Recognition, Vol. 23, No. 3/4, pp. 311-318, 1990.<P>

<h4><a href="../../../source/1992/jan92/phillips.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
