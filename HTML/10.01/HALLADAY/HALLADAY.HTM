


<HTML>
<HEAD>

<TITLE>January 1992/A Practical Use For Multiple Threads</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjan.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">A Practical Use For Multiple Threads<A name="0040_000B"><A name="0040_000B"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0040_0000"><A name="0040_0000">Steve Halladay and Mike Wiebel</font></h3><hr><blockquote><P>
<P><i><A name="0040_0000"><A name="0040_0000">Steve Halladay and Mike Wiebel currently work for Storage-Tek in Louisville, CO. Steve and Mike have over ten years of multi-threaded programming experience. Steve holds an M.S. in computer science from Brigham Young University. He is also the author of the multi-threaded software Multi-C and CSIM. Mike has a B.S. in computer science from Colorado State University. You can contact Steve or Mike at (303) 673-6683.</i></P><P>
Though trade journals have given significant attention to multi-threaded programming, especially the use of C's <I>setjmp</I> and <I>longjmp</I> facilities, there remains a great deal of confusion in the practical application of multi-threaded techniques. In fact, the examples used to demonstrate multi-threaded functionality are often contrived or unrealistic.<P>
Multi-threaded programming can in fact be applied to everyday programming problems. This article presents one such problem and shows how multi-threaded programming simplifies the program solution.<P>
<h4><FONT COLOR="#000080"><A name="0040_000C">Parallel Recursive Data Structure Access<A name="0040_000C"></FONT></h4></P>
Several years ago we undertook the building of a large text retrieval system. The retrieval system would read the text of documents and classify them in terms of subject matter. The process of reading through the documents was processor intensive and normally run in batches after hours.<P>
As the retrieval system reads the text, it creates a recursive data structure representing the subject matter of each document. After reading a batch of documents, the system would traverse all the data structures to write them to disk as though they were a single virtual data structure.<P>
The nature of the structure made it desirable to use recursion to traverse the data structure. Recursion, however, would prevent traversing a single data structure concurrently with the others. We combined multi-threaded constructs with a simple recursive algorithm to traverse many data structures concurrently.<P>
Consider, for example, the problem of concurrently traversing multiple binary trees. An individual binary tree is a data structure that lends itself to recursive traversal. However, multiple binary trees make using recursion difficult. In <A href="fig1.htm">Figure 1</a>,
 the pre-order traversal of the first binary tree results in visiting nodes 1, 5, 7 and 9. Pre-order traversal of the second binary tree would visit 3, 6, 8 and 10. To traverse both trees as if they were one virtual tree, you would want to visit the nodes as follows: 1, 3, 5, 6, 7, 8, 9 and 10.<P>
<h4><FONT COLOR="#000080"><A name="0040_000D">The Single Threaded Approach<A name="0040_000D"></FONT></h4></P>
The program in <A href="list1.htm">Listing 1</a>
constructs multiple binary trees that contain random values and then traverses the trees as if they were one virtual tree. <A href="list1.htm">Listing 1</a>
contains both the single threaded and multiple threaded examples. The programmer selects the single thread version by compiling the program with the <I>SINGLE_THREAD</I> macro defined.<P>
The <I>main</I> function calls <I>BuildTree</I> to create each random binary tree. Binary trees consist of <I>NODE</I>s, each of which has left and right sub-tree pointers, and a key. Once created, the <I>trees</I> array has the address of the root of each tree in the array.<P>
<I>BuildTree</I> creates the random binary trees by generating random keys. <I>BuildTree</I> inserts the random keys into the tree by calling <I>AddKey.AddKey</I> then performs a standard recursive binary tree insertion by traversing left or right depending upon the magnitude of the key value.<P>
Once <I>main</I> creates the random binary trees, <I>MergeTrees</I> traverses them. In the single threaded example, <I>MergeTrees</I> starts at the root node of each tree and moves iteratively from node to node. The single threaded example first moves to the left-most node, pushing those nodes onto a stack. The <I>for</I> and <I>while</I> loops within <I>MergeTrees</I> perform the initial traversal to the left-most node of each tree.<P>
After the single threaded version locates the left-most node of each tree, <I>MergeTrees</I> iteratively finds and prints the lowest key until it has visited all nodes of all trees. To find the lowest key, <I>MergeTrees</I> calls <I>DisplayLowest</I>, which compares the key of the node from each tree and prints the lowest of the keys. Once <I>DisplayLowest</I> prints the lowest key, <I>MergeTrees</I> calls <I>TraverseRightSub</I>.<P>
<I>TraverseRightSub</I> locates the next lowest key within the tree. It moves as far left as possible from the current node's right sub-tree. If no right sub-tree exists, <I>TraverseRightSub</I> will at least pop the stack, causing the parent node to be on the top of the stack. In any event, the effect of <I>TraverseRightSub</I> is to leave the stack with the next lowest value on the top of the stack. This traversal allows <I>DisplayLowest</I> to continue to operate as previously described.<P>
<h4><FONT COLOR="#000080"><A name="0040_000E">A Multi-Threaded Example<A name="0040_000E"></FONT></h4></P>
The multi-threaded approach to traversing many concurrent binary trees is a simple extension to traversing a standard single tree. The idea is to traverse each tree individually using the standard recursive algorithm. A separate thread traverses each tree. Before a node in a tree can be visited, its key must be compared with the keys of all other trees about to be visited. The nodes with the lower keys are visited first.<P>
<A href="list1.htm">Listing 1</a>
also contains a multi-threaded approach. The <I>#else</I> section of the listing contains this example. Compiling the p rogram with the <I>SINGLE_THREAD</I> macro not defined yields the multi-threaded example. This example uses the Multi-C library, which supports portable, non-preemptive multi-threaded constructs such as thread creation, scheduling, inter-thread communication, etc.<P>
The multi-threaded solution creates the random binary trees using the same procedures as in the single threaded version. However, it uses a different implementation of <I>MergeTrees</I>.<P>
In the multi-threaded example <I>MergeTrees</I> creates a separate thread for each binary tree by calling <I>MtCCoroutine</I>, a Multi-C function that creates a new thread of execution. Each new thread begins executing in the <I>PrintTree</I> routine. When the new thread completes the <I>PrintTree</I> routine, it will terminate execution and yield the processor to other threads. The original thread that created the sub-tree threads will continue to execute to completion.<P>
When the original thread completes by returning from <I>main</I>, the sub-tree threads will begin execution in <I>PrintTree</I>, a standard recursive binary tree traversal routine. The first thread created will be the first to start executing. It first traverses the left sub-tree, then visits the current node by calling <I>PrintNode</I>. Finally <I>PrintTree</I> traverses the right sub-tree.<P>
<I>PrintNode</I> guarantees that the node about to be visited has the smallest key of any of the trees' current nodes. <I>PrintNode</I> compares its current key to the other trees' keys using the <I>static</I> variable <I>CurrentKey</I>. When using the Multi-C library, each thread has its own stack, so <I>auto</I> variables are thread-specific. The remainder of memory is accessible to all threads. Therefore threads share <I>static</I> variables (though they are local to a procedure) and can use them as a simple means of inter-thread communication. An alternative solution to inter-thread communication would be to use Multi-C's thread mailboxes. Thread mailboxes allow threads to receive information from other currently executing threads.<P>
<I>CurrentKey</I> is initialized with a number that is the largest integer so that all keys will be less than it. As threads execute <I>PrintNode</I>, each thread compares its key to <I>CurrentKey</I>. If the thread's key is less than <I>CurrentKey</I>, the thread makes its key the <I>CurrentKey</I> and calls <I>MtCYield</I>. <I>MtCYield</I> is a Multi-C library function that causes the thread to suspend execution and allows another thread to begin. The yielding thread resumes execution when <I>MtCYield</I> returns.<P>
As threads yield, the Multi-C scheduler reschedules them for execution using a round robin algorithm. <I>CurrentKey</I> will equal the thread's current key when all other threads have executed and it is the lowest of the threads' keys. Threads wait for this condition to occur while executing a loop within <I>PrintNode. PrintNode</I> finally visits the node when the executing thread's key is equal to the <I>CurrentKey</I>. Then recursion within the thread's tree continues.<P>
<h4><FONT COLOR="#000080"><A name="0040_000F">Comparing Complexities<A name="0040_000F"></FONT></h4></P>
To compare the complexities of the two approaches quantitatively, we refer to work initiated several years ago by Maurice Halstead at Purdue. Dr. Halstead started a calculus he called "Software Science," in which he defines a measure of program volume as:<P>
<pre>V = N log2 n
N = N1 + N2
n = n1 + n2</pre>
Where:<P>
<pre>V = the program volume
N = the program length
N1 = the total number of operators
N2 = the total number of operands
n = the vocabulary size
n1 = the unique operator count
n2 = the unique operand count</pre>
The volume program metric allows us to compare relative complexities of the two approaches. <A href="tab1.htm">Table 1</a>
contains the empirical and calculated values for each approach. While the rules used for counting operators and operands are not necessarily the same as those used by Halstead, they are at least consistent for both examples. We counted only the operators and operands in the code for <I>MergeTrees</I>, since it contains the only differences in the two approaches.<P>
<A href="tab1.htm">Table 1</a>
shows the volume for each implementation of <I>MergeTrees</I>. Program volume is an estimate of effort required to understand the workings of a program. The other metrics in <A href="tab1.htm">Table 1</a>
are used to calculate the program volume. The volume of the single threaded example is slightly greater than three times the multi-threaded example. This implies the single threaded example is three times more complex than the multi-threaded example.<P>
We also counted the number of lines of code for each example, shown in <A href="tab1.htm">Table 1</a>,
 as another measure of program complexity. We defined the number of lines of code in the examples as the total number of lines minus blank lines and lines only containing comments. It is interesting to notice that this measure also shows the single threaded approach is more complex by roughly three times.<P>
<h4><FONT COLOR="#000080"><A name="0040_0010">Conclusion<A name="0040_0010"></FONT></h4></P>
The program described here is a tightly coupled multi-threaded program. In such programs each thread performs the same task, but on different data. Loosely coupled multi-threaded programs have threads that perform nearly unrelated activities. Examples of these programs include communications file servers, AI applications, simulations, and games (see the sidebar entitled <a href="sidebar1.htm">Loosely Coupled Multi-threaded Programs</a>).<P>
Multi-threaded programming is not a cure-all. It is something that every programmer should have in her or his bag of tricks. Since multi-threaded programming is portable, it is applicable without machine dependent restrictions.<P>
Like other programming techniques, multi-threaded programming presents a learning curve. As the programming community becomes familiar with multi-threading techniques, we will discover more ways to use it to simplify our programming lives.<P>

<h4><a href="../../../source/1992/jan92/halladay.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
