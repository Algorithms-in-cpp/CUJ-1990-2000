


<HTML>
<HEAD>

<TITLE>January 1992/A Console Stream Class For Borland C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjan.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   User Reports</FONT></H2>

<hr><h2 align="center"><font color="#800000">A Console Stream Class For Borland C++<A name="0044_000D"><A name="0044_000D"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0044_0000"><A name="0044_0000">Comments By AI Williams</font></h3><hr><blockquote><P>
<P><i><A name="0044_0000"><A name="0044_0000">Al is the author of DOS 5: A Developer's Guide (M&amp;T Press). He can be reached at 310 Ivy Glen Ct., League City, TX 77573; or on Compuserve at 72010, 3574.</i></P><P>
For my first programming job under Borland C++, I wanted to write a program that used both stream I/O and text windows to handle I/O to and from the screen. Most C++ programmers prefer using stream I/O instead of the <I>printf/scanf</I> functions. To implement the text windows, I set out to develop a simple C++ window manager. I planned to use Borland's <I>window()</I> function, but soon found that the streams library did not support console I/O (analogous to the functions in <I>CONIO.H</I>).<P>
<h4><FONT COLOR="#000080"><A name="0044_000E">Stream I/O<A name="0044_000E"></FONT></h4></P>
Some examples of stream output in Borland C++ are:<P>
<pre>cout &lt;&lt; "Hello World\n";
cout &lt;&lt; "Your age is " &lt;&lt; ur_age;</pre>
Both examples use <I>cout</I>, a predefined output stream corresponding to <I>stdout</I>. The first example sends the cliche string <I>"Hello World\n"</I> to <I>cout</I>. The second example prints a string and a numeric variable (<I>ur_age</I>).<P>
The &lt;&lt; operator, while usually the shift left operator, has been overloaded to return a stream or a stream reference. The operator used in this sense allows running multiple I/O statements together, as in the second example. The compiler interprets the statement as:<P>
<pre>(cout &lt;&lt; "Your age is ") &lt;&lt; ur_age;</pre>
Since the first &lt;&lt; operator returns a stream (<I>cout</I>, in fact), the statement is equivalent to:<P>
<pre>cout &lt;&lt; "Your age is ";
cout &lt;&lt; ur_age;</pre>
Stream input is similar:<P>
<pre>cin &gt;&gt; ur_age;
cin &gt;&gt; name &gt;&gt; phone_number;</pre>
C++ predefines the <I>cin</I> stream to be the same as <I>stdin</I>. Unlike <I>scanf()</I>, stream input doesn't require pointers to the input variables. In the previous examples, <I>ur_age</I> is just an unsigned integer variable. The equivalent <I>scanf()</I> calls are:<P>
<pre>scanf ("%d" ,&amp;ur_age);
scanf("%s %s",name,phone_number);</pre>
The C++ library defines input and output operators for the predefined types. It is simple to add custom &lt;&lt; operators to print user-defined types. <A href="list1.htm">Listing 1</a>
shows a date class and an operator to print it on an output stream. <A href="list1.htm">Listing 1</a>
also includes an overloaded &gt;&gt; operator to input a date. Of course, you can use the same techniques to add stream I/O for structures and unions, too.<P>
The <I>ostream</I> class that <A href="list1.htm">Listing 1</a>
uses is the base class of all output streams. The <I>istream</I> class is the base for input streams. These stream classes, which are subclasses of the <I>ios</I> class, supply methods for formatted and unformatted I/O.<P>
Each stream has a buffer that sends and receives characters. For example, <I>cout</I> uses a buffer that sends characters to the <I>stdout</I> device. These buffers are either instances of the <I>streambuf</I> class, or instances of a subclass of <I>streambuf</I>. The buffer classes handle all the problems of managing a buffer and interfacing with the stream class. You are free to derive subclasses of the <I>streambuf</I> class that talk to different devices.<P>
Since the new class will inherit methods from <I>streambuf</I>, you don't have to rewrite any of the buffer management methods that already exist. You must only describe how the new stream differs from its base class. This technique is known as "design by difference." Design by difference is part of what makes object-oriented programming so attractive.<P>
The C++ library also supplies subclasses of <I>streambuf</I>. The <I>filebuf</I> class allows you to create buffers to access files. The <I>strstreambuf</I> class works with streams that operate on strings, similar to C's <I>sscanf()</I> and <I>sprintf()</I> functions.<P>
<h4><FONT COLOR="#000080"><A name="0044_000F">Console Streams<A name="0044_000F"></FONT></h4></P>
<I>VSTREAM.H</I> and <I>VSTREAM.CPP</I> (<A href="list2.htm">Listing 2</a>
and <A href="list3.htm">Listing 3</a>)
 provide a console output stream called <I>conout</I> for your programs. These files create a class, <I>Conbuf</I>, that is a subclass of <I>streambuf</I>.<P>
The only methods that must be defined for <I>Conbuf</I> are <I>do_sputn()</I>and <I>overflow()</I>. The methods that manage stream output don't change. The <I>ostream</I> class calls <I>do_sputn()</I> to output one or more characters. The <I>overflow()</I> method handles buffer overflow. Since the console stream does not require a buffer, the <I>overflow()</I> method simply prints the offending character using <I>do_sputn()</I>.<P>
<I>VSTREAM.CPP</I> creates a single instance of the <I>Conbuf</I> class (<I>conbuf</I>), and stores a pointer to it in the global variable <I>conout</I>. You can then use <I>conout</I> as <I>cout</I> was used in the earlier examples.<P>
Deriving <I>Conbuf</I> is a good example of the design by difference technique. You don't have to worry about buffer management, formatting, and other idiosyncrasies of stream output. You only have to describe the difference between console output and the normal output streams.<P>
<h4><FONT COLOR="#000080"><A name="0044_0010">The Window Manager<A name="0044_0010"></FONT></h4></P>
The window manager's design meets some simple goals:<P>
<UL><li>Windows can be as large as the screen, but no larger.</li>
<li>Windows can have frames, or not.</li>
<li>When the manager removes a window, it restores any windows that become visible.</li>
<li>Windows can be forced to the top of the window stack.</li>
<li>Only the top window can be accessed.</li>
<li>The window manager supports streams.</li></UL>
The <I>region</I> class, shown in <A href="list4.htm">Listing 4</a>
and <A href="list5.htm">Listing 5</a>,
 is the base class for windows. This class simply saves and restores portions of the screen using C++'s dynamic memory allocation.<P>
The <I>win</I> class, built on top of the <I>region</I> class, provides all the basic window functions. The manager defines windows with the Borland library function <I>window()</I>. Therefore, all the output calls in <I>CONIO.H</I> and the new <I>conout</I> stream will automatically write to the top window.<P>
The <I>boxwin</I> class is another example of design by difference. Containing just one function to draw a box, <I>boxwin</I> reuses all the code of its base class, <I>win</I>. <A href="list6.htm">Listing 6</a>
and <A href="list7.htm">Listing 7</a>
contain the window class library. <A href="list8.htm">Listing 8</a>
is a demo program of the windows in action. Thanks to C++ constructors, you can simply define a window in your program, and it appears on the screen. When your program deallocates the window or it goes out of scope, the window vanishes just as easily.<P>
<h4><FONT COLOR="#000080"><A name="0044_0011">Inside The Window Class<A name="0044_0011"></FONT></h4></P>
To understand the window class, you must first start with the class named <I>region</I>. The <I>region</I> class simply saves and restores a specified area of the screen. The constructor for this class takes four arguments that specify the <I>x</I> and <I>y</I> coordinates of the screen region to use. If the fifth argument, <I>save</I>, is zero, the constructor will set up the region, but not save the screen area. Otherwise, the region reads the contents of the screen (the default action). Setting <I>save</I> to zero is useful for programs like the window class that require finer control over the timing of region's actions.<P>
The <I>region</I> class has three public methods besides the constructor and destructor methods. The <I>reinit</I> method causes the region to read the screen, discarding the previous contents of the region (if any). The <I>restore</I> method causes the region to redisplay the saved area of the screen. This call also discards the contents of the region. Finally, a call to <I>discard</I> will destroy the region's contents without changing the screen.<P>
The window class <I>win</I> maintains a stack of windows. The class variable <I>topwin</I> points to the current top window. Notice that <A href="list6.htm">Listing 6</a>
declares <I>topwin</I> as a <I>static</I> member of the class. This declaration allows all instances of <I>win</I> to share the same <I>topwin</I> variable. A similar variable, <I>lastwin</I>, points to the last window in the stack. Pointers thread the stack together in both directions. The pointers <I>next</I> (toward the bottom of the stack) and <I>prev</I> (toward the top of the stack) contain links to adjacent windows. Of course, these pointers are not <I>static</I> - each window has its own <I>next</I> and <I>prev</I> pointer.<P>
The remaining data members of <I>win</I> are not <I>static</I>. They store the cursor location, the window's color, a pointer to the next window, and a margin value used for bordered windows.<P>
The top window's region buffer remains empty. Only windows that are inactive store their contents in the region. This is also true of the cursor location values.<P>
The <I>win</I> class has only one public method (excepting the constructor and destructor). This method, <I>maketop</I>, forces the given window to the top of the stack. If the window is already at the top, no action results.<P>
<h4><FONT COLOR="#000080"><A name="0044_0012">More Fun With Windows<A name="0044_0012"></FONT></h4></P>
You will probably want to add functionality to the windows package. For instance, you might want different box types, or to be able to move and resize the windows. For serious use, you could add some simple methods to change various private members, such as a <I>setcolor</I> method to change a window's color.<P>
The built-in stream classes can take manipulators that control certain formatting attributes. The standard headers <I>IOSTREAM.H</I> and <I>IOMANIP.H</I> declare these manipulators. The following statement, for example, uses the hex manipulator:<P>
<pre>cout &lt;&lt; hex &lt;&lt; 16;</pre>
This statement prints 16 in hex (10) instead of decimal.<P>
Adopting this syntax for managing the console stream would be quite natural. You could write<P>
<pre>conout &lt;&lt; color_red &lt;&lt; "RED" &lt;&lt; color_white &lt;&lt; " ALERT";</pre>
or, alternately:<P>
<pre>conout &lt;&lt; concolor(0x70) &lt;&lt; "Text";</pre>
Other manipulators could duplicate functions found in <I>CONIO.H</I>. For example, you could use a manipulator to set the cursor's location. Although this would be an ambitious addition, it would make the stream class much more natural to use.<P>

<h4><a href="../../../source/1992/jan92/williams.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
