


<HTML>
<HEAD>

<TITLE>January 1992/An OS/2 MIDI Device Driver</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjan.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Portability</FONT></H2>

<hr><h2 align="center"><font color="#800000">An OS/2 MIDI Device Driver<A name="0022_0007"><A name="0022_0007"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0022_0000"><A name="0022_0000">Carl M. Benda</font></h3><hr><blockquote><P>
<P><i><A name="0022_0000"><A name="0022_0000">Mr. Benda is a programmer in the Charlotte Lab of the Services Sector Division of IBM. He holds an MS in computer science from the University of North Carolina - Charlotte, and an MS in materials engineering from Worcester Polytechnic Institute.</i></P><P>
The market currently offers many excellent software packages that include device drivers for the MPU-401, the standard PC Musical Instrument Digital Interface (MIDI). Almost all of the packages, however, run under MS-DOS, while almost none runs under OS/2. No commercial driver interface at the time of this writing is available for OS/2 2.0. (The 32-bit version of OS/2 currently in beta-test.) This article partially fills the gap by describing a simple device driver written mostly in C for handling interrupt-driven I/O to and from the Roland MPU-401.<P>
<h4><FONT COLOR="#000080"><A name="0022_0008">Writing Device Drivers For OS/2<A name="0022_0008"></FONT></h4></P>
There are several reasons why so few commercial MIDI device drivers exist for OS/2. First, OS/2 drivers are more complex than their MS-DOS counterparts. To understand OS/2 device drivers, it is necessary to look at the structure of the operating system and see where the device driver fits into the operating system (<A href="fig1.htm">Figure 1</a>)
.<P>
In MS-DOS, any program can read and write to any portion of the RAM, whereas in OS/2, device drivers are required to handle hardware addresses and interrupt handling. OS/2 device drivers exist in a multitasking environment and so must handle requests from multiple processes and threads of execution within a single process. Before the driver can complete a request from one process, it may have to handle additional requests from a different process.<P>
OS/2 device drivers also have the special responsibility of being well behaved in terms of not disrupting other portions of the system. Since drivers run at the <I>RING 0</I> execution level, they have ultimate access to all of the system's memory and resources. If an OS/2 device driver does not have a proper initialization routine, the system will crash at boot time.<P>
OS/2 device drivers in most implementations consist of two segments. The first segment is for data, and the second is for code. This scheme presents two problems when writing the code for the device driver entirely in C.<P>
First, the C compiler for OS/2 puts the code segment first in the program and the data segment last. An OS/2 device driver, however, must have the data segment first in the program. In this data segment, the first item must be the <I>device header</I>. The device header contains startup information that is critical to how the operating system treats that device driver. Second, it is necessary to prevent the C compiler from inserting the C startup code before the device header. I accomplish this by linking in a small assembly language function.<P>
<h4><FONT COLOR="#000080"><A name="0022_0009">Implementing The Device Driver<A name="0022_0009"></FONT></h4></P>
This article presents all the necessary pieces for generating a MIDI device driver. This OS/2 device driver handles interrupts from the Roland MPU-IMC, which is a PS/2 Micro Channel adapter card that generates interrupts using <I>IRQ 9</I>. When the card generates an interrupt, the device driver gathers the information from the adapter's addresses: <I>0x331h</I> for the commands and status, and <I>0x330h</I> for any data bytes coming from other MIDI devices. From these addresses the device driver places the data into a shared memory buffer that may be accessed by an application program.<P>
The assembly code in <A href="list1.htm">Listing 1</a>
serves as the startup code to replace the C compiler's normal startup code. The remaining portions for a minimal MIDI OS/2 device driver appear in <A href="list2.htm">Listing 2</a>,
 <A href="list3.htm">Listing 3</a>,
 <A href="list4.htm">Listing 4</a>,
 and <A href="list5.htm">Listing 5</a>.
<P>
The OS/2 device driver must be linked with a definitions file which has the name of the MIDI library as the entry point into the device driver. For this device driver, a definitions file would contain the lines<P>
<pre>LIBRARY MIDI
PROTMODE</pre>
The OS/2 <I>config.sys</I> file must reference the subdirectory and filename of the device driver so that at boot time, the OS/2 kernel can load the device driver and run the <I>Init</I> routine.<P>
OS/2 is much like DOS in the way it handles interrupts. When the hardware generates a level <I>9</I> interrupt, the operating system immediately runs the code entry point named by the <I>SetIRQ</I> routine. Thus OS/2 responds to the hardware in more of a real-time fashion.<P>
<h4><FONT COLOR="#000080"><A name="0022_000A">Conclusion<A name="0022_000A"></FONT></h4></P>
The next logical step from this device driver would be to write an application that uses its interface.<P>
<h4>Sidebar: <a href="sidebar1.htm">"MIDI Data Management"</a></h4>

<h4><a href="../../../source/1992/jan92/benda.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
