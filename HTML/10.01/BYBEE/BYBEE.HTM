


<HTML>
<HEAD>

<TITLE>January 1992/A Portable VMS-Style Input Line Routine</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjan.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Portability</FONT></H2>

<hr><h2 align="center"><font color="#800000">A Portable VMS-Style Input Line Routine<A name="0020_0005"><A name="0020_0005"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0020_0000"><A name="0020_0000">Robert Bybee</font></h3><hr><blockquote><P>
<P><i><A name="0020_0000"><A name="0020_0000">Robert Bybee is Senior Electrical Engineer at Scientific Games,<I></I> <I></I>Atlanta Georgia, where he is involved with hardware and software<I></I> <I></I>design of point-of-sale terminals used in state lottery systems. He<I></I> <I></I>was previously with Chromatics, a manufacturer of color graphic<I></I> <I></I>computer systems, and Telecorp Systems, which builds voice<I></I> <I></I>response and telephone call processing computers. He has a BSEE<I></I> <I></I>from the University of Virginia and is currently seeking an MBA at<I></I> <I></I>Georgia State University. Robert has been programming computers<I></I> <I></I>for 23 years, with 10 years of C experience, and has been designing<I></I> <I></I>hardware for over 15 years. He can be contacted at 5011<I></I> <I></I>Brougham Court, Stone Mountain GA 30087.</i></P><P>
When a program needs to read a line of text input, the programmer often resorts to using a standard C library function, such as <I>gets()</I>. Depending on the operating system, this function will permit only minimal input editing, perhaps limited to the backspace key.<P>
The DEC VAX-VMS operating system, however, provides far more sophisticated facilities to edit command-line input. The MS-DOS world has produced similar facilities, such as the public-domain DOSEDIT, Peter Norton's NDE, and the DOS-KEY program in MS-DOS 5.0. Of course, if you're writing code for embedded systems or non-DOS machines, you may not be able to use any of these.<P>
The <I>get_str()</I> routine presented here duplicates the functions found in these systems. It provides a way to gather commands or input strings from the user, emulating most of the VMS keystrokes. You can change the code easily to respond to other keystrokes if you don't like VMS-style editing.<P>
<h4><FONT COLOR="#000080"><A name="0020_0006">Command Line Recall<B><A name="0020_0006"></B></FONT></h4></P>
<I>get_str()</I>'s most useful feature is its ability to scroll through previously entered commands, edit them, and transmit them again. This functionality comes in handy when you make a typing error and must retype almost the same command. Moreover, when running test programs, I find myself retyping the same series of commands, time and time again. With the touch of a few cursor keys, <I>get_str()</I> redisplays these earlier commands for you to enter. The number of lines in its "history buffer" is a compile-time decision.<P>
When entering a command, or after recalling a previous command, you often need more than a simple backspace key to edit the command. <I>get_str()</I> supports left and right cursor motion, moving to the start and end of the line, and both insert (push-right) and overtype modes of text entry.<P>
<h4><FONT COLOR="#000080"><A name="0020_0007">Display Dependencies<A name="0020_0007"></FONT></h4></P>
I wrote <I>get_str()</I> to support a "least common denominator" output device. The routine will run on a PC display screen, a VT100 terminal connected to a serial port, or nearly any other type of terminal or display, provided the display can backspace (move the cursor left) without erasing the character that the cursor lands on. <I>get_str()</I> makes no other assumptions about the control-codes accepted by its output device.<P>
<h4><FONT COLOR="#000080"><A name="0020_0008">Keyboard Dependencies<A name="0020_0008"></FONT></h4></P>
The next problem is the type of keyboard device to support. It is possible to avoid all keyboard dependencies by forcing the operator to type <I>CTRL</I>-characters for all editing operations. However, people accustomed to using the cursor keys will find such a solution unacceptable.<P>
Most terminals have at least a backspace key and four cursor arrow keys. VMS lets the left and right arrow keys move the cursor in the current line. It uses the up and down arrows to move forward and backward through previous commands. And it uses the <I>DELETE</I> key on a VT100 to delete one character to the left of the cursor. Under VMS, all other command-line editing functions are performed using control keys. The key assignments are:<P>
<pre><I>CTRL-A</I>  switches between insert
        and overtype mode
<I>CTRL-H</I>  moves to the beginning
        of the line
<I>CTRL-E</I>  moves to the end of the line
<I>CTRL-R</I>  recalls the last line entered
<I>CTRL-X</I>  erases the line</pre>
<I>get_str()</I> duplicates all of these, except <I>CTRL-H.</I> The backspace key on a VT100 terminal and PC keyboard both generate this character. There are probably historical reasons why VMS uses this key to move the cursor to the start of the line, and uses <I>DELETE</I> to erase one character.<P>
All too often, I find myself hitting the <I>BACKSPACE</I> key instead of <I>DELETE</I> when I want to delete a character under VMS. I can't fix VMS, but I can fix <I>get_str()</I>. In this code, <I>CTRL-B</I> moves the cursor to the beginning of the line, and both <I>DELETE</I> and <I>BACKSPACE</I> erase one character. If you want true VMS emulation in this regard, change the value <I>CTRL ('B')</I> to <I>BACKSPACE_KEY</I> (line 100), and remove the reference to <I>BACKSPACE_KEY</I> on line 79.<P>
<h4><FONT COLOR="#000080"><A name="0020_0009">Code Description<A name="0020_0009"></FONT></h4></P>
I wrote the code in this article to compile under either Turbo C 2.0 or Borland C++ 2.0. If you port the code to a different compiler or environment, you need to change only the <I>sys_getchar()</I> and <I>sys_putchar()</I> functions. To support a different keyboard, the <I>get_char_esc()</I> routine would also require attention.<P>
<A href="list1.htm">Listing 1</a>
contains the <I>get_str()</I> function and supporting routines. Lines 22-25 define four constants, <I>UP_ARROW,</I> <I>DOWN_ARROW, RIGHT_ARROW,</I> and <I>LEFT_ARROW</I>, which pass the notion of a cursor movement between <I>get_chr_esc()</I> and <I>get_str()</I>. I defined these values to be the same as the PC keyboard scan codes for the four arrow keys, but they could really be any four non-ASCII constants if you don't need to read input from a PC keyboard.<P>
Lines 30-33 declare the size of the history list, called <I>lastlines</I>, which stores previously entered commands. The first and last entries in this list must be blank, so declaring <I>MAX_RECALL</I> as 22 allows for the two blank strings plus 20 prior commands. The <I>RECSUB</I> macro generates a subscript into the list and handles modulo arithmetic so that the subscript is always between <I>0</I> and <I>MAX_RECALL</I> minus one.<P>
<I>RECALL_LEN</I> defines the longest line you can type into the <I>get_str()</I> routine. You can make it as long as you like. You can also expand <I>MAX_RECALL</I> to permit more than 20 commands in your buffer. All it costs is memory.<P>
The VMS command interpreter does not treat its history list as a circular buffer. You can't scroll around in one direction indefinitely. You can use the up-arrow until you reach the oldest command in the list, then you get a blank line and the up-arrow stops working. The down-arrow takes you one step toward the most recently entered command, and it too stops working at the end of the list.<P>
The <I>get_str()</I> routine begins on line 60. You pass it the address of the buffer in which to store the input line, and the length of that buffer. On line 73, <I>get_str()</I> goes into a "forever" loop, where it gathers up characters and performs the editing functions. It breaks out of the loop when <I>RETURN</I> is pressed.<P>
After calling the routine <I>get_chr_esc()</I>, which gets a character from the user, <I>get-str()</I> enters a large <I>if</I> statement that handles all of the cursor keys and control-characters. If the character isn't anything special, the function stores it in the buffer.<P>
The other functions in <A href="list1.htm">Listing 1</a>
are fairly simple. <I>cursor_right()</I> moves the cursor one position to the right by sending out the character that is already under the cursor. This operation moves the cursor without relying on any terminal-dependent control or escape codes.<P>
<I>cursor_left</I> <I>()</I>moves the cursor one position to the left. It depends upon the terminal responding to <I>CTRL-H</I> as a backspace. In a string in C, the character <I>'\b'</I> is a backspace, <I>CTRL-H</I>, hex value 08. Note that this value does not erase the character to the left of the cursor. To do that, as in the function <I>clear_line()</I>, a three-character string is sent out: backspace, space, backspace.<P>
<I>get_str()</I> calls the final function in <A href="list1.htm">Listing 1</a>,
 <I>get_char_esc()</I>, to get a character. This function in turn calls <I>sys_getchar()</I> to get a character from the user, and passes most characters through unchanged. If, however, <I>get_char_esc()</I> detects an escape (ESC), it looks at the next two characters to see if they represent a VT100 terminal's arrow keys. A VT100 puts out the following escape codes when you press a cursor key:<P>
<pre>up    ESC [ A
down  ESC [ B
right ESC [ C
left  ESC [ D</pre>
<I>get_char_esc()</I> translates these three-character sequences into a single integer, so <I>get_str()</I> can process it easily. For simplicity, these integers are the same four integer values the BIOS produces when a PC's arrow keys are struck. If you plan to use <I>get_str()</I> with a terminal whose arrow keys don't produce the VT100 escape sequences above, you must modify <I>get_char_exc()</I>.<P>
<h4><FONT COLOR="#000080"><A name="0020_000A"><I>sys getchar </I><B>And </B><I>sys_putchar</I><A name="0020_000A"></FONT></h4></P>
<I>get_str()</I> uses these two functions for all of its input and output. I isolated them in this fashion for portability, since these functions were voted "most likely to change" when the boss says, "By the way, we're going to OS/2 tomorrow."<P>
On lines 37-47 of <A href="list2.htm">Listing 2</a>,
 <I>sys_putchar()</I> sends one character to the display. Its only frill is that it expands a line-feed character, '\n', to a carriage-return and line-feed pair. Depending on how you use <I>get_str()</I>, you may want to prevent this translation.<P>
<I>sys_getchar()</I>, found on lines 50-63, waits for a character from the user. In the MS-DOS environment, the function calls the Turbo C <I>bioskey()</I> function to wait for the next keystroke. <I>bioskey()</I> returns a 16-bit integer, whose high byte is the PC keyboard scan code, and the low byte is the ASCII value of that character (if any), or <I>00</I> if it's a non-ASCII key. <I>sys_getchar()</I> checks that the key is ASCII, and if so, strips off the scan code before returning it.<P>
If you need to do background processing while waiting for the next character, you could modify <I>sys_getchar()</I> to call an idle function until a key is ready.<P>
<A href="list2.htm">Listing 2</a>
also contains a simple <I>main()</I> routine for testing the code. It reads an input line using <I>get_str()</I> and prints the results in quotes so you can see what was received. To leave the program, type <I>quit</I>.<P>
<h4><FONT COLOR="#000080"><A name="0020_000B">Storing More Commands<A name="0020_000B"></FONT></h4></P>
VMS stores the most recently entered command into the bottom of the history buffer, so that a single up-arrow keystroke will recall it. If this command matches the previously entered command, <I>get_str()</I> doesn't store it, since doing so would only waste space in the buffer.<P>
As the program stands, if you enter two or more commands repeatedly,<P>
<pre>EDIT XX
RUN XX</pre>
these two commands will eventually occupy the entire history list. You might consider improving the code here: before entering a command into the list, remove the command if it already exists anywhere in the list. While this would allow the list to hold more unique commands, it would be the non-VMS thing to do.<P>
<h4><FONT COLOR="#000080"><A name="0020_000C">Limiting The Search<A name="0020_000C"></FONT></h4></P>
Under VMS and in <I>get_str()</I>, striking an up-arrow or down-arrow immediately replaces the input line with the previous (or next) entry from the history list. If you accidentally hit an up-arrow while typing a command, everything you've typed is lost.<P>
Some MS-DOS keyboard enhancers have a different philosophy. If you type one or two characters and then press the up-arrow, you will scroll through a subset of the history list. Your subset is limited to those entries beginning with the characters you have already typed. If you wanted to recall a command that began with the letter D, you would simply type "D" and a few up-arrows until the command appeared.<P>
This feature resembles the "command completion" functionality built into some flavors of UNIX. On those systems, you can type a partial filename or command, press <I>ESC</I>, and the system will fill in the remainder of the name if it can.<P>
You could modify <I>get_str()</I> to include this functionality. The code that handles the up and down arrow keys, lines 120-142 of <A href="list1.htm">Listing 1</a>,
 would skip any entries that didn't match the partial input line. You would also keep a copy of that partial line, otherwise the next up-arrow keystroke would overwrite it.<P>
Something as simple as an input-line reader can really enhance the usefulness of your programs. At the time I wrote this code, I was working for a die-hard VAX person, who was very pleased to see a VMS-like front-end attached to our embedded-system diagnostics. If your users are familiar with VMS, the <I>get_str()</I> routine will warm their hearts, too.<P>

<h4><a href="../../../source/1992/jan92/bybee.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
