


<HTML>
<HEAD>

<TITLE>January 1992/Stepping Up To C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjan.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Stepping Up To C++<A name="004A_0013"><A name="004A_0013"></font></h2><P>
<h3 align="center"><A name="004A_0000"><A name="004A_0000">Operator Overloading, Part 1</h3><P>
<h3 align="center"><font color="#800000">Dan Saks</font></h3><hr><blockquote><P>
<P><i><A name="004A_0000"><A name="004A_0000">Dan Saks is the owner of Saks &amp; Associates, which offers consulting and training in C, C++ and Pascal. He is also a contributing editor of Windows/DOS. He serves as secretary of the ANSI C++ committee and is a member of the ANSI C committee. Readers can write to him at 287 W. McCreight Ave., Springfield, OH 45504 or by email at dsaks@wittenberg.edu.</i></P><P>
No programming language can be all things to all programers. No matter how many features a language has, there's always someone who wants just one more. A language like FORTRAN that caters to numerical applications provides integer and real numbers in a variety of precisions, and even throws in complex numbers, but does nothing for programmers who want rational (exact fractional) numbers or set algebras. The list of wants is never ending.<P>
Although you can't create a language with everything that every programmer could ever want, you can design a language that gives programmers the tools to create the data types they need <a href="#ref1">[1]</a>. This is the approach taken by C++. As explained by Bjarne Stroustrup, the inventor of C++:<P>
"C++ has no high-level data types and no high-level primitive operations. For example, there is no matrix type with an inversion operator or a string type with a concatenation operator. If a user wants such a type, it can be defined in the language itself. In fact, defining a new general-purpose type or application-specific type is the most fundamental programming activity in C++. A well designed user-defined type differs from a built-in type only in the way it is defined and not in the way it is used" <a href="#ref2">[2]</a>.<P>
C++ programmers create new types by defining classes. A class defines both the representation of class objects and the operations that can be performed on those objects. C++, like C, has many operators that apply to built-in types. For user-defined types to appear as if they were built-in, programmers need the ability to define new meanings for operators when they are applied to user-defined types.<P>
For example, C++ has no built-in support for complex numbers, but you can define complex numbers as a class:<P>
<pre>class complex
   {
public:
   complex ();
   ...
private:
   double r, i; // real and imaginary parts
   };</pre>
Class names are type names in C++, so<P>
<pre>complex c1, c2;</pre>
is all your users need do to declare <I>c1</I> and <I>c2</I> as complex variables. But, if you implement complex addition as a member function called <I>add</I>, then users must write<P>
<pre>c1.add(c2);</pre>
to add <I>c2</I> to <I>c1</I>, and they will know that complex numbers are not built in. For complex numbers to look built-in, users must be able to write<P>
<pre>c1 = c1 + c2;</pre>
or<P>
<pre>c1 += c2;</pre>
In fact, you can make complex numbers look built-in using a feature known as operator overloading. This month's column shows how to define and use overloaded operators.<P>
<h4><FONT COLOR="#000080"><A name="004A_0014">Rational Numbers<A name="004A_0014"></FONT></h4></P>
I'll begin my explanation of operator overloading by implementing a class for rational numbers (fractions), with values such as 1/2 or -3/4. Whereas floating point numbers represent numbers such as 1/3 and 4/9 only approximately, rational numbers represent them exactly.<P>
My rational number class uses long integers to store the numerator and denominator of the fraction. The class defines four overloaded binary operators: + (addition), -- (subtraction), * (multiplication), and / (division), along with constructors and an output function. <A href="list1.htm">Listing 1</a>
shows the header <I>rational.h</I> that defines the class.<P>
The declaration of an overloaded operator is just like the declaration of a function, except that the name of the function is the keyword <I>operator</I> followed by the operator symbol. For example, the member function declaration<P>
<pre>rational operator+(rational r);</pre>
in <A href="list1.htm">Listing 1</a>
declares a member function called <I>operator+</I> that accepts one argument of type <I>rational</I> and returns a <I>rational</I>.<P>
For the most part, there's nothing magical about a function name like <I>operator+</I>. Had I named the function <I>add</I>, the function declaration would look like just another ordinary member function declaration:<P>
<pre>rational add(rational r);</pre>
You can call <I>operator+</I> just as you would call any other member function. That is, if <I>r1, r2</I> and <I>r3</I> are rationals, then<P>
<pre>r3 = r1.operator+(r2);</pre>
adds <I>r1</I> and <I>r2</I> using <I>rational::operator+</I>, and then copies the result to <I>r3</I>. Obviously, there must be some other advantage to overloading operators, because this syntax for calling <I>operator+</I> is no more readable than<P>
<pre>r3 = r1.add(r2);</pre>
If there is any magic here, it's that for any object <I>x</I> of a class type, the expression <I>x+y</I> means <I>x.operator+(y)</I>. In other words, for rationals <I>r1</I> and <I>r2</I>, the expression <I>r1+r2</I> is a familiar shorthand syntax for calling <I>r1.operator+(r2)</I>.<P>
<A href="list2.htm">Listing 2</a>
shows a small test program that uses rationals, and <A href="list3.htm">Listing 3</a>
shows the output from that program. Note that this implementation of rational numbers doesn't reduce fractions to their simplest form. That is a detail I will address later.<P>
In <A href="list2.htm">Listing 2</a>,
 a rational declaration such as<P>
<pre>rational r2 (3, 5);</pre>
uses the constructor<P>
<pre>rational::rational(long n, long d);</pre>
to initialize <I>r2</I> with the value <I>3/5</I> (three-fifths). Although <I>3</I> and <I>5</I> are <I>int</I> (not <I>long int</I>) constants, a C++ compiler applies integral promotions to the arguments if necessary to find a constructor with a signature that matches the call. (See my earlier column, "Function Name Overloading," <I>CUJ</I>, Nov. 1991, for an explanation of function signatures.)<P>
Notice that you can call that constructor to create rational numbers on the fly for use in expressions. For example, in the statement<P>
<pre>r2 = r2 * rational(2, 3) + r1;</pre>
the subexpression <I>rational(2, 3)</I> calls the constructor to create a temporary rational object whose value is <I>2/3</I>. Aside from the fact that rational constants must be written as <I>rational (x, y)</I> instead of <I>x/y</I>, expressions involving rationals look like expressions involving primitive types.<P>
Nearly all the built-in unary and binary operators can be overloaded. Only<P>
<pre>. . * : : ? : sizeof # # #</pre>
cannot. (.* is the dereferencing operator for pointers to members, which I have not yet covered in this column. # and ## are preprocessing operators for stringizing and pasting.) The ANSI C++ committee is even considering allowing overloaded. <I>(dot)</I>. The operators that are both unary and binary,<P>
<pre>+ - * &amp;</pre>
can be overloaded both ways.<P>
Overloading operators does not change their precedence or associativity. For example,<P>
<pre>r2 = r2 * rational(2, 3) + r1;</pre>
is evaluated as<P>
<pre>r2 = ((r2 * rational(2, 3)) + r1);</pre>
because * has higher precedence than + and + has higher precedence than =. You cannot create new operator tokens by overloading. For example, you cannot create ** as an exponentiation operator.<P>
I will present an implementation of the overloaded rational operators shortly. But first, I must explain a little about the underlying mechanism of member function calls.<P>
<h4><FONT COLOR="#000080"><A name="004A_0015">Using The Keyword <B><I>this</I><A name="004A_0015"></B></FONT></h4></P>
A class member function operates implicitly on the class object to which the function is applied. For example, suppose class <I>T</I> looks like<P>
<pre>class T
   {
public:
   void f(const T &amp;r);
   void g(const char *s);
   ...
private:
   int m, n;
   ...
   };</pre>
Then the call<P>
<pre>x.f(y);</pre>
means "apply member function <I>f</I> to object <I>x</I> using <I>y</I> as an argument." Inside the body of <I>f</I>, an unqualified reference to a class member, say <I>m</I>, is a reference to the <I>m</I> member in the <I>T</I> object for which the member was called. For instance, given the previous function call, the assignment in<P>
<pre>void T::f(const T &amp;r)
   {
   ...
   m = r.m * n;
   ...
   }</pre>
multiplies <I>y</I>'s <I>m</I> (referring to <I>y</I> through <I>r</I>) times <I>x</I>'s <I>n</I> and stores the result in <I>x</I>'s <I>m</I>. The compiler knows how to find <I>y</I>, because it was passed explicitly as the argument <I>r</I>. But how does <I>f</I> know where to find <I>x</I>?<P>
The member function <I>f</I> actually has a hidden extra argument that's the address of the object to which the function applies. A call such as<P>
<pre>x.f(y);</pre>
translates into the C-like function call<P>
<pre>f(&amp;x, y);</pre>
Inside the member function, you can refer to the hidden argument by the keyword <I>this</I>. In every member function of class <I>T</I>, the compiler implicitly declares this as a pointer whose type is <I>T *const</I>. In other words, the member function declaration<P>
<pre>void T::f(int i);</pre>
translates into the C-like declaration<P>
<pre>void f(T *const this, int i);</pre>
Note that the <I>this</I> pointer itself is const, but <I>*this</I> is not const. This means you can't alter the pointer, but you can alter the object it addresses.<P>
Inside the body of a member function, every unqualified reference to a data member of T is implicitly prefixed with <I>this</I>-&gt;. For example, inside f, the statement<P>
<pre>m = r.m * n;</pre>
compiles as if it were written as<P>
<pre>this-&gt;m = r.m * this-&gt;n;</pre>
Also, if <I>f</I> calls another member function from its own class, such as<P>
<pre>g("hello");</pre>
the call compiles as if it were written as<P>
<pre>g(this, "hello");</pre>
<h4><FONT COLOR="#000080"><A name="004A_0016">Implementing <B><I>rational's</I></B> Operators<A name="004A_0016"></FONT></h4></P>
<A href="list4.htm">Listing 4</a>
shows the source file <I>rational.cpp</I> that implements the member functions for the <I>rational</I> class. All of the operator functions use the same implementation strategy:<P>
1)     create a local rational object called <I>result</I>;<P>
2)     compute <I>result's</I> numerator;<P>
3)     compute <I>result's</I> denominator;<P>
4)     return (a copy of) <I>result</I>.<P>
The four operator functions apply the formulae shown in <A href="tab1.htm">Table 1</a>.
<P>
As I explained earlier, a class member function operates implicitly on the class object to which the member is applied. The expression<P>
<pre>r1 + r2</pre>
compiles as<P>
<pre>r1.operator+(r2)</pre>
which means "apply member function <I>operator+</I> to <I>r1</I> using <I>r2</I> as the argument." In the body of <I>operator+</I>, <I>num</I> and <I>denom</I> not prefixed with <I>r</I>. refer to the <I>num</I> and <I>denom</I> of the left operand, and <I>r.num</I> and <I>r.denom</I> refer to the <I>num</I> and <I>denom</I> of the right operand.<P>
Class <I>rational</I> has two constructors: a default (parameter-less) constructor and another two-argument constructor that initializes the numerator and denominator explicitly. I needed the two-argument constructor to create <I>rational</I> number objects with specific values. I used the default constructor to declare <I>rational</I> variables when I didn't care about the initial value, as in the first line inside the body of each operator function in <A href="list4.htm">Listing 4</a>.
 The compiler generates a default constructor only if the class has no other constructors. Had I not declared the default constructor explicitly, then the class would not have a default constructor, and a declaration like<P>
<pre>rational result;</pre>
would be illegal.<P>
It turns out that, at least for this application, you don't really need a default constructor. By using the expressions for the numerator and denominator as arguments to the two-argument constructor, you can compute the results in a temporary object and return the temporary. That is, for any expressions <I>n</I> and <I>d</I> that are convertible to <I>long int</I>, you can rewrite<P>
<pre>rational result;
result.num = n;
result.denom = d;
return result;</pre>
as simply<P>
<pre>return rational(n, d);</pre>
The simplified implementations for the rational operators appear in <A href="list5.htm">Listing 5</a>.
<P>
<h4><FONT COLOR="#000080"><A name="004A_0017">Assignment Operators<A name="004A_0017"></FONT></h4></P>
In addition to using the four overloaded rational operators, the program in <A href="list2.htm">Listing 2</a>
also applies the assignment operator = to <I>rationals</I>. In fact there are two assignments:<P>
<pre>r1 = (r1 + r2) / rational(1, 2);
r2 = r2 * rational(2, 3) + r1;</pre>
which work as you'd expect, even though the <I>rational</I> class doesn't define <I>operator=</I>.<P>
If a class doesn't define <I>operator=</I>, the compiler generates a default version. The generated <I>operator=</I> performs what is called a memberwise copy &#151; it copies each member of the right-hand operand to the corresponding member of the left-hand operand. For each member of the class that is itself a class object, memberwise copy uses that member's <I>operator=</I>.<P>
For a class <I>T</I>, the generated assignment operator is declared as either<P>
<pre>T &amp;T:: operator=(const T &amp;);</pre>
or<P>
<pre>T &amp;T::operator=(T &amp;);</pre>
If all of <I>T</I>'s members are primitive types or class types with assignment operators of the first form, then <I>T</I>'s assignment operator also uses that form. Otherwise, <I>T</I>'s assignment operator uses the second form.<P>
Notice that both forms of the overloaded assignment operator return a reference to a class object. At first, you might expect that assignment has a <I>void</I> return. The most common use for assignment is as a single statement like<P>
<pre>r1 = r2;</pre>
But in C++, as in C, assignments are not just statements; they are expressions that can be used in other expressions, such as<P>
<pre>if ((r1 = r2) != 0)</pre>
or<P>
<pre>r1 = r2 = r3;</pre>
= is right-associative (grouped from right to left), so the latter statement is interpreted as<P>
<pre>r1 = (r2 = r3);</pre>
When applied to built-in types, the <I>=</I> <I>operator</I> yields the value of its left operand. The default <I>operator=</I> for a class type preserves this behavior for class types.<P>
Whenever you explicitly overload an assignment operator, you should have the function return a reference to its left operand. That is, the return statement in an overloaded assignment should be something resembling<P>
<pre>return *this;</pre>
Note that a function returning a reference cannot use<P>
<pre>return this;</pre>
When a function returns a reference, the return statement binds the return expression value to the returned reference using the same semantic rules as a reference declaration. When you declare a reference such as<P>
<pre>rational &amp;r1 = r2;</pre>
<I>r2</I> must be a <I>rational</I> or a <I>rational &amp;;</I> it cannot be a <I>rational</I> <I>*</I>. You cannot initialize a reference with the address of another rational:<P>
<pre>rational &amp;r1 = &amp;r2;</pre>
because the type of <I>&amp;r2</I> is <I>rational *</I>. By this rule, the return expression of a function that returns a reference must be an object and not a pointer.<P>
<pre>return *this;</pre>
binds the reference to an object, but<P>
<pre>return this;</pre>
is an error because it attempts to bind a reference to a pointer. <A href="list6.htm">Listing 6</a>
shows an implementation for <I>rational::operator=</I> that has the same functionality as the default memberwise assignment generated by the compiler.<P>
Overloaded definitions for the other assignment operators, like <I>+=</I> and <I>*=</I>, should also return a reference to the left operand. <A href="list7.htm">Listing 7</a>
shows the definition of class <I>rational</I> extended to include definitions for <I>+=</I>, -<I>=</I>, <I>*=</I>, and /<I>=</I>. The implementation of each assignment is very similiar to its corresponding binary operator.<P>
<A href="list8.htm">Listing 8</a>
shows an implementation of <I>rational::operator+</I>= and another version of <I>rational::operator+</I> rewritten in terms of <I>rational::operator+=</I>. <I>operator+=</I> computes its result directly in the left operand and then returns a reference to that operand (by referring to <I>this</I>). <I>operator+</I> creates a local rational called <I>result</I>, initialized by copying <I>this</I> using the (default memberwise) copy contructor. <I>operator+</I> computes <I>result</I> using <I>operator+</I>=, and returns a copy of (not a reference to) that result.<P>
<A href="list9.htm">Listing 9</a>
shows an implementation of <I>rational::operator</I>-<I>=</I> written in terms of <I>rational::operator</I>-. The <I>operator</I>- in <A href="list9.htm">Listing 9</a>
is the same as the one in <A href="list5.htm">Listing 5</a>.
 <I>operator</I>-<I>=</I> computes its result in its left operand (<I>*this</I>) using both <I>operator</I>- and <I>operator=</I>, and then returns a reference to that left operand.<P>
<h4><FONT COLOR="#000080"><A name="004A_0018">Reducing Fractions To Simplest Form<A name="004A_0018"></FONT></h4></P>
The output from my little test program in <A href="list3.htm">Listing 3</a>
shows that the rational operators don't reduce fractions to their simplest form. For example the fraction 22/10 equals 11/5, and -270/150 equals -9/5. <A href="list3.htm">Listing 3</a>
shows that each arithmetic operation on a rational makes both the numerator and denominator grow. Unless you eliminate the common multiples in the numerator and denominator, they will overflow after only a few more operations.<P>
I solved this problem by adding a private member function <I>rational::simplify</I>. The revised class definition appears in <A href="list10.htm">Listing 10</a>
and the member function definitions appear in <A href="list11.htm">Listing 11</a>.
 <I>simplify</I> divides both the numerator and denominator by the greatest common divisor, which is computed by calling <I>gcd. gcd</I> is a non-member function because I thinks it's a general-purpose function that should eventually go into an application-independent library of math functions. (This version of <I>gcd</I> is based on one by Niklaus Wirth <a href="#ref3">[3]</a>. I don't know if it's optimal, but it seems to work well for this application.)<P>
I rewrote all the rational binary operators in terms of their corresponding assignment operators. Every assignment operator calls <I>gcd</I>. This assures that each arithmetic operation on rationals always leaves the resulting fraction in its simplest form. <A href="list12.htm">Listing 12</a>
shows the revised output of the test program with simplified fractions.<P>
My technique is an improvement, but it doesn't prevent every avoidable overflow. Consider this example:<P>
<pre>(999999/1000000) * (1000000/3)</pre>
The result of this <I>multiply</I> is <I>333333/1</I>, but the numerator overflows before the <I>simplify</I> function reduces the fraction to its simplest form. A more robust implementation would eliminate the greatest common divisor before multiplying, not after.<P>
I will continue this discussion of overloaded operators in my next column.<P>
<h4><FONT COLOR="#000080"><A name="004A_0019">Inquiring Minds Want To Know...<A name="004A_0019"></FONT></h4></P>
I recently received this question via electronic mail:<P>
Your article on reference types in the <I>C Users Journal</I> (September 1991) struck a cord with me, but not as you might expect. I should add that I am a spotty reader of <I>CUJ</I>, so I hope I am not dealing with an old issue.<P>
In your opening remarks, you say "Just as many programmers often pronounce <I>int</I> <I>*</I>as "<I>int</I> star," I often pronounce <I>int</I> &amp; as "<I>int ref</I>." I have been programming in C++ for about a year now, and have been following it with interest longer than that. And, I must admit, with not a little embarrassment, that I DON'T KNOW HOW TO PRONOUNCE IT! Is it "C Plus Plus" (which I always use), or "C Incremented"? My "intellectually minded" colleagues and I have been arguing this for at least a year. I have never seen a definitive statement about this very important topic.<P>
Could you please answer this, and put my mind to ease? Maybe even publish the answer. Thanks in advance.<P>
David D. Hathaway<br>
762 N. Ripley St.<br>
Alexandria, VA 22304<br>
<I>76104.1042@CompuServe.COM</I><P>
It's pronounced "C plus plus." That's the way I've heard the inventor Bjarne Stroustrup pronounce it, and he says so in his latest book <a href="#ref2">[2]</a>.<P>
<h4>References</FONT></h4></P>
<a name="ref1">[1]</a>     Jagger, Mick and Keith Richard, "You Can't Always Get What You Want," Let It Bleed. Gideon Music, 1968.<P>
<a name="ref2">[2]</a>     Stroustrup, Bjarne, <I>The C++ Programming Language</I>, 2nd. ed. Addison-Wesley, 1991.<P>
<a name="ref3">[3]</a>     Wirth, Niklaus, <I>Algorithms + Data Structures = Programs</I>. Prentice-Hall, 1976.<P>

<h4><a href="../../../source/1992/jan92/saks.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
