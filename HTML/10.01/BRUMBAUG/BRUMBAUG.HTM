


<HTML>
<HEAD>

<TITLE>January 1992/Porting C Libraries To C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjan.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Portability</FONT></H2>

<hr><h2 align="center"><font color="#800000">Porting C Libraries To C ++<A name="001C_0003"><A name="001C_0003"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="001C_0000"><A name="001C_0000">David Brumbaugh</font></h3><hr><blockquote><P>
<P><i><A name="001C_0000"><A name="001C_0000">David Brumbaugh is a project manager at Advanced Information Services, a systems integrator in Peoria, IL. He has been programming in C for over five years and in C++ for over a year. He can be reached by mail at 2807 N. Renwood Ave., Peoria, IL 61604.</i></P><P>
Most C programmers have large investments in existing C libraries. If C++ is to fulfill the promise of reusable software, the C libraries of today cannot suddenly become obsolete. Usually, existing libraries can be given "OOPness" by encapsulating their functions in C++ classes. Furthermore, if those classes are well-designed, they can enhance an application's portability, readability, and maintainability.<P>
<h4><FONT COLOR="#000080"><A name="001C_0004">C++ And C<A name="001C_0004"></FONT></h4></P>
For all practical purposes, C++ is a superset of C. C++ can be linked with code compiled by a C compiler if the functions are prototyped and enclosed in the linkage specifier:<P>
<pre>extern "C" { }</pre>
This declaration lets you use C libraries directly, without modification. Of course, you must have a compatible object file to begin with. You can link a Turbo C 2.0 library and a Turbo/Borland C+ + program, but you cannot use the declaration to link a Turbo/Borland C+ + program and a Microsoft C 5.1 library. (I know because I tried.) While this scheme doesn't exploit C+ +'s bent towards OOP, almost anything your old C libraries can do can be made to work in C++.<P>
<h4><FONT COLOR="#000080"><A name="001C_0005">Terms<A name="001C_0005"></FONT></h4></P>
Cutting away the object-oriented jargon leaves little difference between a <I>method</I> and a <I>function</I>. Objects contain both data and functions. In OO jargon, these are attributes and methods. (For the purposes of this article, I use "method" to denote a class's member function and "function" to mean a traditional C function.) In many cases libraries already contain most of the code for the methods. To make the libraries OO, you simply need to wrap classes around the libraries.<P>
<h4><FONT COLOR="#000080"><A name="001C_0006">Preparation<A name="001C_0006"></FONT></h4></P>
In many cases, it is not necessary to wrap libraries. A library that is not often used or has no common thread probably is not a candidate for wrapping. On the other hand, a method may need some functions found in a library that is not wrapped itself. In this case, simply enclose the C function in <I>extern "C"</I> { } and call it as necessary. Often you can use conditional compilation in the library's header file. (See <A href="list1.htm">Listing 1</a>.
 The <I>__cplusplus</I> macro is Turbo/Borland C++ specific.)<P>
Before wrapping a class around a library, ask yourself what advantages you expect. Typically, these might include:<P>
<UL><li><B>Common Access</B>. By overloading methods, it isn't necessary to create functions named <I>replaceString</I>, <I>replaceInt</I>, <I>replaceReal</I>. A <I>replace</I> method will suffice. Code becomes more readable and, in turn, more maintainable.more readable and, in turn, more maintainable.</li>
<li><B>Reusable Code</B>. Object-oriented code is more reusable because it encourages encapsulation. In traditional programming, programmers tend to reuse code by using an editor's "cut and paste" functions. While this works, the same code in different locations frequently requires slight changes in variable names, function names, or control structures. An object-oriented style enhances code reusability by localizing and formalizing the areas being changed.</li>
<li><B>Localized Impact of Changes</B>. Changes in understanding, requirements, and design prompt changes in program code. A typical problem arises when two areas of a program call the same function. If that function is subsequently modified to accommodate a change in one of the two areas, the other area may behave improperly. An object-oriented solution creates a descendant of the object in the first area, where the change is needed. All other code remains the same. Again, the change is local and formal.</li>
<li><B>Portability of Applications</B>. By isolating platform-specific libraries from your application in <I>private</I> and <I>protected</I> methods, you can change the implementation details of a specific class without touching the actual application code (this is a variation on number three). While preparing to wrap the library in a class, remember that in C++, all functions need prototypes. Most libraries come with a header file containing the prototypes. If your library doesn't come with such a header file, you must make one in order to use the functions in C++.</li></UL>
C++ has several keywords not found in C: <I>asm, catch, class, delete, friend, inline, new, operator, private, protected, public, template, this and virtual</I><a href="#ref1">[1]</a>. If any of your library functions have these names, you will have problems. To work around this, remove the prototype of the offending function from the header file using conditional compilation. Write a new function, with a different name, in C that calls the library function (see <A href="list2.htm">Listing 2</a>
for an example).<P>
The final consideration for encapsulation concerns the availability of source code. If you have purchased the source code for a commercial library, you may want to avoid the overhead of wrapping, and simply use the cut and paste method to build classes from the original source.<P>
<h4><FONT COLOR="#000080"><A name="001C_0007">Designing Classes Around Libraries<A name="001C_0007"></FONT></h4></P>
Since a class encapsulates both data and functions, you must identify data structures in the library that can become attributes of your class. As a general rule, data structures should be made <I>protected</I> variables. You will want to group common functions and data structures into a class.<P>
Once you have identified the common data structures, determine the class protocol. A class protocol is the list of methods used to send messages to objects of the class. In C++, the class protocol is the set of <I>public</I> methods and data items. Use generic names for the methods in your protocol. A database library may have several read functions: <I>db_read_int(), db_read_str(), db_read_float()</I>, etc. The protocol for this set of functions would be <I>read(int &amp;), read(char *), read(float &amp;</I>), etc. The bodies of these methods would contain calls to the proper library functions.<P>
Avoid the temptation to give class methods library-specific names. Create general classes that permit inheritance in the future. For example, a generic database class could have descendants that call two completely different database libraries. Changing from one database to another would require no changes to the application.<P>
Just because a function is in a library does not mean it must be represented in the class. In the example that follows, the <I>Pfm_List</I> class concerns itself with a single table in a database. It does not need database creation or administration functions.<P>
Round out the class with internal methods. In C++, methods designated as <I>private</I> or <I>protected</I> are internal and are used by other methods. The library will generally dictate the internal methods, but don't allow it to dictate the overall class concept.<P>
<h4><FONT COLOR="#000080"><A name="001C_0008">Pinnacle File Manager Tables<A name="001C_0008"></FONT></h4></P>
I have translated into C+ + an example that I wrote for an earlier <I>CUJ</I> article, "Object-Oriented Programming In C" (July 1990). I used the Pinnacle File Manager v3.5 by Vermont Database Corporation as the library to encapsulate. (If you wish to run the code in the examples, you can obtain a free sample disk that is limited to 100 records per table from Vermont Database Corporation by calling 802-253-4437.)<P>
I first needed to decide how to implement the list concept I presented in July 1990. Turbo C++ came with a <I>Container</I> class library, which met some of the needs I was trying to meet with the <I>LIST_CLASS</I>. Should I try to fit my code into their hierarchy or create my own hierarchy? I finally decided to use my own. This hierarchy is shown in <A href="fig1.htm">Figure 1</a>.
<P>
A <I>D_List</I> defines the operations you would normally perform on a list. The list will be ordered in some way, even if only in a physical order. The list will have a "top" and an "end," and will include the concept of a "current" member. The methods in <A href="tab1.htm">Table 1</a>
are common to all lists.<P>
<h4><FONT COLOR="#000080"><A name="001C_0009">The Files<A name="001C_0009"></FONT></h4></P>
<I>LISTCLAS.H</I> (<A href="list3.htm">Listing 3</a>)
 defines the abstract class <I>D_List.</I> <I>LISTCLAS.CPP</I> (<A href="list4.htm">Listing 4</a>)
 defines the source code. Note the large number of purely <I>virtual</I> functions. The <I>D_Array</I> descendant of <I>D_List</I> is a list in memory. Since it uses no commercial libraries, it is outside the scope of this article. The next class in the hierarchy, <I>Pfm_List</I>, is a class specifically designed to use the protocol defined in <I>D_List</I> to access a Pinnacle File Manager database table. This is a case of making a library fit your design, rather than designing around a library.<P>
Because the scope of the class is limited to a single list (table), wrapping the Pinnacle File Manager functions does not take full advantage of the manager's advanced features. Since the class hierarchy was in place before I had PFM, I will add more features to the class when I need them, either directly or through inheritance. I may also choose to create a <I>friend</I> class to apply some of the other features.<P>
<I>PINCLASS.H</I> (<A href="list5.htm">Listing 5</a>)
 defines <I>Pfm_List</I><I>.</I> Note the <I>extern</I> <I>"C"</I> { } around the inclusion of <I>PINNACLE.H</I><I>,</I> informing the C++ compiler that I intend to use the C functions defined in <I>pinnacle.h.</I> The data structures used by Pinnacle, <I>DB</I> and <I>DBTAB</I>, are <I>private</I>, providing enforced data encapsulation. The other methods (functions) are defined as <I>public.</I> In addition to the required constructors and destructors, two additional methods, <I>DB_Handle()</I> and <I>TableHandle()</I>, interface with other classes and functions requiring database access.<P>
<I>PINCLASS.CPP</I> (<A href="list6.htm">Listing 6</a>)
 contains the source code for the class <I>Pfm_List</I>. Note that the <I>DB_ </I>functions are the same functions defined between extern <I>"C"</I> brackets. This is where we "wrap" the C+ + classes around the library.<P>
The sample application is an imaginary payroll list. <I>PAYLIST.H</I> and <I>PAYLIST.CPP</I> (<A href="list7.htm">Listing 7</a>
and <A href="list8.htm">Listing 8</a>)
 define the class and code for the class specific to the application.<P>
<I>PTEST.CPP</I> (<A href="list9.htm">Listing 9</a>)
 tests the classes. It is simply a small program that runs through the major methods of the classes. Note that with the exception of the constructor, there is no database specific code. You can see that if the company decided to port the PC application elsewhere, all the changes would occur within the <I>PayList</I> class.<P>
Other files include the script for creating the database (<A href="list10.htm">Listing 10</a>)
 and the database itself (<I>PAYROLL.DB</I>), which is included on the code disk.<P>
<h4><FONT COLOR="#000080"><A name="001C_000A">Conclusion<A name="001C_000A"></FONT></h4></P>
One of the major advantages of C++ is its compatibility with the vast number of existing C libraries. In addition to protecting your investment, the encapsulation of libraries can enhance maintainability, portability, and ease of use.<P>
<h4><FONT COLOR="#000080"><A name="001C_000B">Bibliography<A name="001C_000B"></FONT></h4></P>
<a name="ref1">[1]</a>     Stevens, A1, <I>Teach Yourself C++</I>, MIS:Press, Portland Oregon, 1990.<P>

<h4><a href="../../../source/1992/jan92/brumbaug.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
