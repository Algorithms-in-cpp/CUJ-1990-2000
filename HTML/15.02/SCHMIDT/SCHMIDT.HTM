






<HTML>
     
     <HEAD>


          
          <TITLE>February 1997/The Learning C/C++urve</TITLE>
     </HEAD>
     
     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          
          <H2><A href="../tocfeb.htm"><IMG src="../../toc.gif" ALT="Back to TOC" WIDTH="54" HEIGHT="54"></A>
          <FONT COLOR="#FF0000">Columns</FONT></H2>
          
          <HR>
          
          <H2 ALIGN="center"><FONT COLOR="#800000">The Learning C/C++urve</FONT></H2>
          
          <H3 ALIGN="center"><FONT COLOR="#800000"> Bobby Schmidt</FONT></H3>
          
          <H3 ALIGN="center"><FONT COLOR="#800000">Further Adventures in
          Abstraction</FONT></H3>
          
          <BLOCKQUOTE>
               
               <P>True or false? Has Bobby beaten boolean types to death? The
                    real answer is more abstract than you might think at first.</P>
               
               </BLOCKQUOTE>
          <HR>
          <BLOCKQUOTE>
               <P><B><I>Copyright &copy; 1997 Robert H. Schmidt</I></B></P>
               <p>This month I continue my broad
                    overview of C abstraction techniques, ending with a preview
                    of how we'll apply those techniques and extend them into the
                    misty realm of C++.</p>
               
               <h4><FONT COLOR="#000080">Enumerations</FONT></H4>
               
               <p>Sherman, cast the Wayback machine to
                    January 1996, the first column of my Boolean series, and the
                    first trial Boolean implementation in that column:</p>

<PRE>
typedef int boolean

#define false 0
#define true 1
</PRE>
               
               <p>This attempt uses macros and type
                    definitions, the two abstraction methods I touched on last
                    month. Here the typedef names and implements the abstracted
                    type boolean, while the #defines name and implement
                    abstracted values of that abstracted type. </p>
               
               <p> These three definitions have no
                    innate linkage to one another. We must choose to
                    conceptually bundle together the two values (false and
                    true), and to bundle that pair in turn with the type
                    (boolean). To me, part of the attraction of abstraction [<A href="#NOTE1">1</a>]

                    is reducing your conscious enforcement of cohesion. With
                    this solution, you must take three things unrelated (from
                    the language's perspective) and consciously treat them as if
                    they are related. </p>
               
               <p> I would argue that a more abstracted
                    (and certainly more functionally cohesive) solution would
                    bundle the three elements together from both yours and the
                    language's perspectives. In fact, such a solution exists,
                    forming the third trial Boolean implementation in that same
                    early '96 column series:</p>

<PRE>
enum boolean
    {
    false,
    true
    };
</PRE>
               
               <p>Now all names are intrinsically
                    connected. The enumeration simultaneously defines both the
                    abstracted type name and its abstracted values.</p>
               
               <p>Beyond cohesion, enumerations make
                    some improvements (e.g., false and true obey scope) but
                    don't fix everything. In particular, whereas you know the
                    typedefed Boolean is the size of int, you have no such
                    security with the enumeration Boolean. According to the C
                    Standard, the implementation can make any enumeration the
                    size of whatever integral type it sees fit. </p>
               
               <p> Also, enumerations mix with their
                    underlying integral implementations so easily that, as a
                    type-safety mechanism, their usefulness is limited:</p>

<PRE>
enum boolean
    {
    false,
    true
    };

int i = true;       /* OK */
enum boolean b = 2; /* OK */
</PRE>
               
               <p>Thus, enumerations are really no more
                    absolutely abstracted than typedefs. In many contexts, you
                    are still conscious of their underlying implementation.
                    Their principle abstraction benefit, in my view, is the
                    cohesion between enumeration type names and collateral
                    enumeration values.</p>
               
               <h4><FONT COLOR="#000080">Arrays</FONT></H4>
               
               <p>Because C arrays so easily decay into
                    pointers to their first elements, they are what I consider a
                    fragile type. Arrays remind me of hydrogen peroxide (H<SUB>2</SUB>0<SUB>2</SUB>),
                    which is just busting to decompose into free hydrogen (H<SUB>2</SUB>)
                    and oxygen (O<SUB>2</SUB>) at the slightest provocation [<A href="#NOTE2">2</a>]
.
                    </p>
               
               <p> As an example, consider</p>

<PRE>
typedef char string[100];

string s = "g'day"; /* OK */
char *p = s;        /* OK */
</PRE>
               
               <p>You could argue that the conversion
                    from zero-terminated char array literal ("g'day")
                    to string does not destroy the abstraction, since such
                    literals embody C's notion of a conceptual string type. Put
                    another way, the conversion moves a "string" from
                    C's realm into a "string" in yours &#151; there is no
                    change of abstracted meaning. </p>
               
               <p> I don't believe this same reasoning
                    applies to strings turning themselves into char *s. This
                    conversion not only betrays an abstracted entity's
                    implementation as char-based, but reduces the abstraction to
                    a non-abstraction (pointer). </p>
               
               <p> The relationship between an
                    abstracted string and a physical pointer is not necessarily
                    unambiguous. You could presume the pointer refers to the
                    first string element. You could presume it points to the
                    last, allowing easier string concatenation. You could even
                    presume the pointer references a copy of the string, and
                    that modifying through the pointer does not change the 
                    original string. </p>
               
               <p> Experienced C programmers, of course,
                    will no doubt consider the first presumption self-evident. I
                    would counter that it is only C's history of treating arrays
                    as pointers that renders this at all evident. To those
                    experienced in other languages, this relationship is not
                    axiomatic. </p>
               
               <p> I find array-to-pointer decay one of
                    C's (and C++'s) greatest design weaknesses, with respect to
                    the typing system. I am abundantly aware of the expressive
                    power, especially of being "close to the machine,"
                    such array/pointer synonyms offer. But I would counter that
                    in large projects, the domain in which these synonyms prove
                    necessary are often overshadowed by the domain in which they
                    are unneeded or even detrimental [<A href="#NOTE3">3</a>]
.</p>
               
               <h4><FONT COLOR="#000080">Structures</FONT></H4>
               
               <p>The only way you can well and truly
                    create your own unique type in C is with a structure [<A href="#NOTE4">4</a>]
:</p>

<PRE>
struct node
    {
    void *data;
    struct node *next;
    };
</PRE>
               
               <p>Unfortunately, structures betray their
                    struct-ness when used in declarations:</p>

<PRE>
struct node x;
</PRE>
               
               <p>To make this type more abstracted,
                    combine it with a typedef:</p>

<PRE>
struct node
    {
    void *data;
    struct node *next;
    };
typedef struct node node;

struct node x; /* OK */
node y;        /* also OK */
</PRE>
               
               <p>Such structures achieve abstraction by
                    not magically converting themselves into other types:</p>
               <UL><LI>Unlike scalar types, structures don't convert to and
                         from other scalar types. </LI>
                    <LI> Unlike enumerations, structures don't convert to and
                         from integral types. </LI>
                    <LI> Unlike arrays, structures don't convert to pointer
                         types.</LI>
               </UL>
               
               <p> In short, to paraphrase Gertrude
                    Stein, a structure is a structure is a structure. It
                    converts to nothing else, and is converted from nothing
                    else. Even typecasts yield to this abstraction barrier:</p>

<PRE>
struct s1
    {
    int i1;
    };

struct s2
    {
    int i2;
    };

struct s1 x1;
/* error */
struct s2 x2 = (struct s1) x1;
</PRE>
               
               <p>As a follow-up to our previous
                    example, structures can increase the abstraction of arrays:</p>

<PRE>
struct string
    {
    char data[100];
    };
typedef struct string string;
</PRE>
               
               <p>Now the earlier valid definitions</p>

<PRE>
string s = "g'day"; /* error */
char *p = s;        /* error */
</PRE>
               
               <p>fail &#151; string is no longer freely
                    miscible with char *.</p>
               
               <p>As I see it, the principle abstraction
                    "gotcha" with structures is that you can't access
                    their implementation without using structure-specific
                    syntax:</p>

<PRE>
int main(void)
    {
    string x;
    strcpy(x.data, "fair dinkum");
    return 0;
    }
</PRE>
               
               <p>Here the token . (dot) says that x is
                    a structure. So while structure types are abstracted with
                    respect to other types, structure objects are not so
                    abstracted.</p>
               
               <h4><FONT COLOR="#000080">Functions</FONT></H4>
               
               <p>To help abstract away a structure's
                    implementation, replace direct structure member references
                    with function calls that hide those references. For
                    instance, you can change the last example to:</p>

<PRE>
char *string_data(string *s)
    {
    return s-&gt;data;
    }

int main(void)
    {
    string x;
    strcpy(string_data(&amp;x), "fair dinkum");
    return 0;
    }
</PRE>
               
               <p>or even</p>

<PRE>
void string_copy(string *t,
                 char const *s)
    {
    strcpy(t-&gt;data, s);
    }

int main(void)
    {
    string x;
    string_copy(&amp;x, "fair dinkum");
    return 0;
    }
</PRE>
               
               <p>Such function abstraction is
                    especially valuable for initializing structure objects, both
                    as a C-specific design technique and in anticipation of
                    C++'s constructors. Not only does this technique promote
                    abstraction, but it also allows structure objects to perform
                    complex initialization. Rather than simply allowing you to
                    set a variable to a certain bit pattern, construction can 
                    perform functions that are logically part of the object's
                    construction but physically not part of the object at all.
                    </p>
               
               <p> Consider a variation of our string
                    structure that hides a char array allocated from the heap
                    and caches its current length:</p>

<PRE>
struct string
    {
    size_t length;
    char *data;
    };

typedef struct string string;
</PRE>
               
               <p>To construct an empty string object
                    requires something like</p>

<PRE>
string x;

x.length = 0;
x.data = NULL;
</PRE>
               
               <p>To construct a string object from a string literal:</p>

<PRE>
char const *initial_value = "wombat";

string y;

y.length = strlen(initial_value);
y.data = malloc(y.length);
strcpy(y.data, initial_value);
</PRE>
               
               <p> This shows that fully constructing a
                    string object requires you to call functions that are not
                    part of that object, and to expose those calls to the whole
                    world. Creating a function constructor yields the more
                    abstracted</p>

<PRE>
void string_construct
        (string *s, char const *data)
    {
    if (data == NULL)
        {
        s-&gt;length = 0;
        s-&gt;data = NULL;
        }
    else
        {
        s-&gt;length = strlen(data);
        s-&gt;data = malloc(s-&gt;length);
        strcpy(s-&gt;data, data);
        }
    }

int main(void)
    {
    string x;
    string y;
    string_construct(&amp;x, NULL);
    string_construct(&amp;y, "wombat");
    return 0;
    }
</PRE>
               
               <p>You can even combine this with macros,
                    as I hinted last month:</p>

<PRE>
#define STRING(s, data)\
        string s; \
        string_construct(&amp;s, (data))

int main(void)
    {
    STRING(x, NULL);
    }
</PRE>
               
               <p>Unfortunately, because C does not let
                    you mix statements with declarations, you can't use STRING
                    multiple times in the same scope:</p>

<PRE>
int main(void)
    {
    STRING(x, NULL);
    STRING(y, "wombat");
    return 0;
    }
</PRE>
               
               <p>This is tantamount to</p>

<PRE>
int main(void)
    {
    string x;
    string_construct(&amp;x, NULL);
    string y;
    string_construct(&amp;y, "wombat");
    return 0;
    }
</PRE>
               
               <p>which is not valid C (but is valid
                    C++). One possible workaround:</p>

<PRE>
string string_construct(char const *data)
    {
    /* implementation left as an exercise
       for the student */
    }

#define STRING(s, data)\
    string s = string_construct(data)

int main(void)
    {
    STRING(x, NULL);
    STRING(y, "wombat");
    return 0;
    }
</PRE>
               
               <p>which expands to</p>

<PRE>
int main(void)
    {
    string x = string_construct(NULL);
    string y = string_construct("wombat");
    return 0;
    }
</PRE>
               
               <p>Since C allows you to initialize
                    structure objects:</p>

<PRE>
string x = {0, NULL};
</PRE>
               
               <p>extending that notion of
                    initialization to full-on construction is not a huge leap.
                    The converse &#151; adapting C++ destructors to C &#151; is less
                    simple, since C has no concept of "de-initialization"
                    and no provision for automatically calling a destruction
                    function when an object goes out of scope.</p>
               
               <p>Nonetheless, by hiding an object's
                    construction this way, you leave open the possibility of
                    changing what it means to construct that object, without
                    allowing that object's users to be (unduly) sensitive to the
                    change.</p>
               
               <h4><FONT COLOR="#000080">Encapsulation Via
               Scope</FONT></H4>
               
               <p>One age-old encapsulation technique
                    involves reducing a name's scope. In the example</p>

<PRE>
int i = -1;

int main(void)
    {
    int j;
    while (i &lt; 0)
        {
        int k;
        /* ... */
        }
    return i;
    }
</PRE>
               
               <p>i is not encapsulated at all (it is
                    potentially accessible to the entire program), j is
                    encapsulated some (accessible only to main), and k is
                    encapsulated most of all (accessible only to the while-loop
                    body).</p>
               
               <p>While this example shows encapsulation
                    within a function, you can also encapsulate within data:</p>

<PRE>
int i = -1;

struct s
    {
    int j;
    };
</PRE>
               
               <p>As before, i is not encapsulated at
                    all, while j is encapsulated within struct s, and is only
                    accessible via the . or -&gt; operators.</p>
               
               <p>By limiting a name's scope, you rein
                    in the domain over which that name can possibly be used.
                    This not only promotes abstraction (by concealing
                    conceptually hidden names from the largest possible
                    audience), but reduces the chances of name collision
                    (inadvertently using the same name in the same scope for
                    multiple purposes).</p>
               
               <h4><FONT COLOR="#000080">Encapsulation Via
               Translation Unit</FONT></H4>
               
               <p>Another time-honored encapsulation
                    tactic keeps all names at global scope, but hides them from
                    one-another at translation time:</p>

<PRE>
/* translation unit 1 */

int e;
static int s;

/* translation unit 2 */

extern int e;   /* same 'e' as in unit 1 */
static int s;   /* new 's' */
</PRE>
               
               <p> Each s has the same type (int) and
                    the same scope (global), yet each is unique. Because they
                    have internal linkage (i.e., are declared static at global
                    scope), the names are not visible across translation unit
                    boundaries. Contrast this to e, which has external linkage
                    and is thus visible in both translation units. </p>
               
               <p> To harness translation units for type
                    abstraction:</p>
               <UL><LI>Determine the functionally cohesive pieces that make up
                         that type. </LI>
                    <LI>Move the type's "public" interface into a
                         header file. </LI>
                    <LI>Move the type's "private" implementation into
                         a separate C source file. Functions and data declared
                         in the header must have external linkage. Other
                         functions and data should be declared static. </LI>
                    <LI> Include the header everywhere the type's interface is
                         needed, but include the implementation in exactly one
                         file.</LI>
               </UL>
               
               <p>One possible adaptation of this
                    strategy to our string example yields:</p>

<PRE>
/*
 *  our_string.h
 */

typedef struct string
    {
    void *private;
    }
string;

void string_construct(string *, char const *);

/*
 * our_string.c
 */

#include "our_string.h"
typedef struct string_implementation
    {
    /* same as 'string' from previous example */
    }
string_implementation;

static void string_implementation_construct
        (string_implementation *s,
        char const *data)
    {
    /*  same as 'string_construct' from previous example */
    }

void string_construct
        (string *s, char const *data)
    {
    string_implementation_construct
            (s-&gt;private, data);
    }
</PRE>
               
               <p>Points to ponder:</p>
               <UL><LI> Users know only of string's name, and that it is a
                         struct. The implementation members are hidden through
                         layers of data indirection (void *private) and function
                         indirection (string_construct). </LI>
                    <LI> The implementation members are known to our_string.c,
                         which fleshes them out with a private hidden structure
                         string_implementation. </LI>
                    <LI> The publicly viewable string_construct manipulates
                         abstracted strings. That function calls a private
                         hidden string_implementation_construct manipulating the
                         "real" data behind the abstracted string.</LI>
               </UL>
               
               <p>This technique brings us perilously
                    close to a typical C++ class implementation, and concludes
                    our survey of C abstraction fundamentals.</p>
               
               <h4><FONT COLOR="#000080">What's it All Mean,
               Alfie?</FONT></H4>
               
               <p>Highlights from these last two
                    columns:</p>
               <UL><LI> C does not explicitly endorse abstraction, but does
                         permit it some. Typedefs, structures, and functions all
                         put named wrappers around functionally-cohesive
                         implementations. </LI>
                    <LI> Encapsulation is a means to the end of abstraction,
                         putting a barrier between code pieces. Just as with
                         abstraction, C tolerates but does not endorse
                         encapsulation. Examples include local objects,
                         structure members, and separate compilation. </LI>
                    <LI> You can't ever hide implementation completely. Some
                         code at some level must be aware of how something is
                         implemented. The trick is to minimize the amount of
                         code that is aware.</LI>
               </UL>
               
               <p>On this last point, note that C++
                    still forces you to stay amazingly aware of underlying
                    implementations:</p>
               <UL><LI> Inline function bodies and private member declarations
                         typically appear in header files, which can be included
                         in other translation units, and thus are not textually
                         hidden from users. </LI>
                    <LI>The implementations of baroque class hierarchies like
                         Microsoft's MFC or Standard C++'s STL require careful
                         dissection, so that you may understand the otherwise
                         impenetrable error messages and correctly trump the
                         appropriate type behavior. </LI>
                    <LI>Because C++'s object construction can involve a
                         (theoretically) unbounded number of function calls (vs.
                         C's, which simply allocates some possibly initialized
                         bits), analyzing an object's space/time costs often
                         requires knowing how that object is implemented.</LI>
               </UL>
               
               <h4><FONT COLOR="#000080">And The Winner is ...</FONT></H4>
               
               <p>Having established a minimal set of C
                    abstraction techniques, we are now ready to tackle a Real
                    World Problem: an e-mail client that uses Microsoft's
                    messaging interface (MAPI). Before you start fibrillating,
                    know that I pick this example because</p>
               <UL><LI>I have recent experience writing such a program. </LI>
                    <LI>It actually offers numerous opportunities to explore
                         abstraction. </LI>
                    <LI>It encompasses an application that I presume all of you
                         can relate to.</LI>
               </UL>
               
               <p>I promise, even if you are not a
                    Windows wonk, you can still profit from this discussion. If
                    you have @microsoft.com in your e-mail name, know that I am
                    not looking to skewer your benefactor. I'm sure many other
                    large interfaces sets suffer similar limitations; it's just
                    that I happen to be familiar with this one.</p>
               
               <h4><FONT COLOR="#000080">Erratica</FONT></H4>
               
               <p>And finally, the letters keep pouring
                    in! Next month I'll hit the virtual mailbag for more
                    dialectics on Hungarian notation and related matters.</p>
               
               <h4><FONT COLOR="#000080">Notes</FONT></H4>
               
               <p><A name="NOTE1">1</a>.
 Sounds like
                    something Don King would say, doesn't it? <BR>
                    <A name="NOTE2">2</a>.
 In case you've ever wondered, this
                    very fragility explains hydrogen peroxide bottles being
                    brown. Light accelerates the decomposition. Dark bottles
                    help preserve the peroxide's integrity. <BR>
                    <A name="NOTE3">3</a>.
 Just ask anyone who's taken
                    sizeof(array) where array is a parameter name, only to find
                    array has decayed into a pointer. <BR>
                    <A name="NOTE4">4</a>.
 I discuss structs explicitly, but
                    the same notions apply to unions as well. </p>
          </BLOCKQUOTE>
<P><I>Bobby Schmidt is a freelance writer, teacher, consultant, and programmer. He is also a member of the ANSI/ISO C standards committee, an alumnus of Microsoft, and an original "associate" of (Dan) Saks & Associates. In other career incarnations, Bobby has been a pool hall operator, radio DJ, private investigator, and astronomer. You may summon him at 3543 167th Ct NE #BB-301, Redmond WA 98052; by phone at (206) 881-6990, or via Internet e-mail as rschmidt@netcom.com.</FONT></I></P>
     </BODY>
</HTML>
