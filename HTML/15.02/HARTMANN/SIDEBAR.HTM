






<HTML>
     
     <HEAD>


          
          <TITLE>February 1997/A Reusable PID Control Class/Sidebar</TITLE>
     </HEAD>
     
     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          
          <H2 ALIGN="center"><FONT COLOR="#800000">T</FONT><FONT COLOR="#800000">he
          PID Algorithm</FONT></H2>
          
          <HR>
          <BLOCKQUOTE>
               
               <p>To effectively use and tune a PID
                    control loop, it helps to have a basic understanding of how
                    each term affects the control. A few analogies may help
                    illustrate this: the proportional term is like a rubber
                    band. As a rubber band is stretched, it exerts a force
                    proportional to how much it is distorted from its original
                    shape. The integral term is more difficult to analogize,
                    because its output depends upon a time history, not an
                    instantaneous value. Since the proportional term alone
                    cannot always force the output completely to the set-point,
                    the integral term is added to "pull" the output in
                    the rest of the way. The integral term can do this because
                    it "sums up" errors (even small ones) over time.
                    The integral term can also make the controller quicker to
                    respond. The derivative term is analogous to a shock
                    absorber. It is used to minimize controller overshoot.</p>
               
               <H4>Mathematical Description</H4>
               
               <P ALIGN="LEFT">The formula used by an analog PID controller is:
                    <BR>
                    <BR> <IMG src="sidebar1.gif" ALT="{short description of image}" WIDTH="232" HEIGHT="33">
               </P>
               
               <p>where: K<SUB>c</SUB> = proportional
                    gain
                    <BR> K<SUB>I </SUB>= reset multiplier
                    <BR> K<SUB>D</SUB> = derivative time
                    <BR> e(t) = error (as a function of time)
                    <BR> m(t) = controller output deviation</p>
               
               <p>To convert this formula for use in a
                    discrete or digital environment, rewrite the integral as a
                    summation and replace the derivative with a first-order
                    difference approximation:
                    <BR>
                    <BR> <IMG src="sidebar2.gif" ALT="{short description of image}" WIDTH="247" HEIGHT="35"></p>
               
               <p>where: T = sampling interval
                    <BR> e<SUB>i</SUB> = error at ith sampling interval
                    <BR> e<SUB>i-1</SUB> = error at previous sampling interval</p>
               
               <p>In many implementations, the above
                    equation is rewritten as:
                    <BR>
                    <BR><IMG src="sidebar3.gif" ALT="{short description of image}" WIDTH="226" HEIGHT="29">
                    </p>
               
               <p>Notice that the term constants have
                    been renamed because of the different equation form. This is
                    very important, especially when using conventional tuning
                    methods. o </p></BLOCKQUOTE>
     </BODY>
</HTML>
