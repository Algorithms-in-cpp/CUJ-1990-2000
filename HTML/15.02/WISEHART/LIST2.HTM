



<HTML><HEAD>

<TITLE>February 1997/Software for Fail-Safe Applications/Listing 2</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4>Listing 2:	The AnalogInput class</h4>

<pre>
class AnalogInput
{
    friend MasterRun;
    friend Configure;
    const Address inputA_, inputB_;
    Bool safe_;
    Time lastReset_;
    Auditor *auditor_;
    Signal scaleFactor_;

    void reset() {
    const Time time = mtime();
    if( time &gt; lastReset_ + Global::resetHoldoff )
        safe_ = Global::true;
    lastReset_ = time;
    }
    void scaleFactor( const Signal&amp; scale ){ scaleFactor_ = scale; }

public:
    Bool ready()          const { return safe_; }
    Signal scaleFactor()  const { return scaleFactor_; }
    Signal offsetWindow() const { return Global::voltWin * 2.; }
    Signal errorWindow()  const { return Global::over 
                                  - Global::under; }
    Signal level() {
    if( ! safe_ ) {
        auditor_-&gt;fault();
        return Global::analogError;
    }

    const Signal aLevel = readAnalog( inputA_ ),
        bLevel = readAnalog( inputB_ ) * scaleFactor_,
        averageLevel = ( aLevel + bLevel ) / 2.,
        aAbsLevel = abs( aLevel ),
        bAbsLevel = abs( bLevel );
    auditor_-&gt;refresh();

    if( aAbsLevel &lt; Global::voltWin &amp;&amp; 
        bAbsLevel &lt; Global::voltWin )
        return averageLevel;

    if( sign( aLevel ) == sign( bLevel ) &amp;&amp;
        aAbsLevel &lt; Global::over * bAbsLevel + Global::voltWin &amp;&amp;
        aAbsLevel &gt; Global::under * bAbsLevel - Global::voltWin )
        return averageLevel;

    auditor_-&gt;fault();
    safe_ = Global::false;
    return Global::analogError;
    }
};
/* End of File */
</pre>
</body></html>
