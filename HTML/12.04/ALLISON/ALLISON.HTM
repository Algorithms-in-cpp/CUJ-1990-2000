

<HTML>
<HEAD>

<TITLE>April 1994/Code Capsules</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocapr.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Code Capsules<A name="00CC_0060"><A name="00CC_0060"></font></h2><P>
<h3 align="center"><A name="00CC_0000"><A name="00CC_0000">Visibility in C</h3><P>
<h3 align="center"><font color="#800000">Chuck Allison</font></h3><hr><blockquote><P>
<P><i><A name="00CC_0000"><A name="00CC_0000">Chuck Allison is a regular columnist with CUJ and a software architect for the Family History Department of the Church of Jesus Christ of Latter Day Saints Church Headquarters in Salt Lake City. He has a B.S. and M.S. in mathematics, has been programming since 1975, and has been teaching and developing in C since 1984. His current interest is object-oriented technology and education. He is a member of X3Jl6, the ANSI C++ Standards Committee. Chuck can be reached on the Internet at<I></I> <I>allison@decus.org,</I> or at (801)240-4510.<I></I></i></P><P>
<h4><FONT COLOR="#000080"><A name="00CC_0061">What's in a Name?<A name="00CC_0061"></FONT></h4></P>
Every token in a C program that begins with a letter or an underscore, other than a keyword or macro, names one of the following entities:<P>
<UL><li>data object</li>
<li>function</li>
<li>type definition (typedef)</li>
<li>tag for a structure, union, or enumeration</li>
<li>member of a structure, union</li>
<li>enumeration constant</li>
<li>label</li></UL>
These entities are active at certain times and places in your program, depending on how and where their declarations appear. Whether or not you are aware of it, when you declare an identifier you determine its <I>scope,</I> <I>lifetime, linkage</I>, and <I>namespace</I>. In this article I will illustrate these inter-related concepts as Standard C defines them.<P>
<h4><FONT COLOR="#000080"><A name="00CC_0062">Scope<A name="00CC_0062"></FONT></h4></P>
The scope of an identifier is the region of your program's text where you can use that identifier (in other words, where it is <I>visible</I>). There are four types of scope in Standard C:<P>
1)     Block &#151; a region within a pair of matching <I>{}</I>-braces that begins where the declarator first appears and ends with the first subsequent closing brace<P>
2)     Function Prototype &#151; the region in a function prototype from where the identifier occurs to where the last closing parenthesis appears<P>
3)     Function &#151; the entire body of a function<P>
4)     File &#151; the region in a source file from where an identifier first appears outside of any block to the end of the source file<P>
Formal parameters have the same scope as if they were declared in the outermost block of their function. Identifier names are optional in function prototypes, and serve only for documentation if they appear. Block scope and function prototype scope together are sometimes referred to as <I>local</I> <I>scope</I>.<P>
In <A href="list1.htm">Listing 1</a>,
 the optional identifier <I>val</I> serves as documentation only, and is not visible outside the prototype for the function <I>f. f</I>'s formal parameter <I>i</I> is visible immediately after the opening brace that defines <I>f</I>. Since each block introduces a new scope, the <I>i</I> initialized by <I>j</I> in the innermost block temporarily hides the <I>i</I> in the outer block. The value of <I>j</I> is available to initialize <I>i</I> in the inner block because <I>j</I> was declared first. If <I>j</I> had been declared like this:<P>
<pre>{
   int j = i;    /* outer i */</pre>
then <I>j</I> would have received the value <I>1</I>. There is no conflict because the inner <I>i</I> isn't visible until the next statement.<P>
An identifier is visible as soon as its declarator is complete. The following declaration is ill-formed:<P>
<pre>int i = i;</pre>
Since <I>int i</I> is sufficient to declare an integer named <I>i</I>, the <I>i</I> on the right is the same as on the left, and <I>i</I> is left uninitialized.<P>
Only labels have function scope. There's a difference between function scope and the scope of a function's outermost block. Labels which have function scope are visible throughout the function, even before they are "declared," but identifiers with block scope are visible only after their point of declaration and can be hidden by other declarations in nested blocks.<P>
An identifier declared outside of any block or function parameter list has file scope. Such identifiers are sometimes referred to as <I>global</I>, and are visible from their point of declaration until the end of the translation unit, unless they are hidden by an identifier with the same name having block scope.<P>
The program in <A href="list2.htm">Listing 2</a>
illustrates function and file scope. Since the identifier <I>i</I> with file scope (the one initialized to <I>13</I>) is visible only after its declaration, it would be an error to try to use it in the main program. The global <I>i</I> is not available anywhere in <I>f1</I> since <I>f1</I> has a parameter named <I>i</I>. The innermost block of <I>f1</I> in turn hides that parameter with its own <I>i</I> (the types don't have to be the same). Since <I>f2</I> declares no identifiers named <I>i</I>, it has access to the global <I>i</I>. The declarations of <I>fl</I> and <I>f2</I> in <I>main</I> inject those names into the body of <I>main</I> only. It would be an error, for example, to call <I>f2</I> from <I>f1</I>.<P>
<h4><FONT COLOR="#000080"><A name="00CC_0063">Minimal Scoping<A name="00CC_0063"></FONT></h4></P>
Thoughtful placement of declarations can greatly enhance the readability of a program. Most programmers still seem to follow the convention, required by languages such as FORTRAN and COBOL, of placing all declarations together in a single section of the source code. This gives you the advantage of always knowing where to look for variable definitions. But when a program gets large, you spend a good deal of time flipping back and forth between the declaration of an identifier and its point of use. Those of you who program in Microsoft Windows know that <I>Hungarian notation</I>, a convention of encoding the type of an identifier into its name, evolved as a means of compensating for the distance between a name's declaration and its use. At the risk of inciting a flurry of letters to the editor, I would like to suggest instead a simple technique known to C++ programmers which, when coupled with modular design, renders strange-looking Hungarian names unnecessary in most cases. I call it <I>minimal scoping</I>. Simply put, it means to declare an identifier as close as possible to its first use.<P>
For example, what do you infer from the following program segment?<P>
<pre>void f(void)
{
   int i, j;
   ...
}</pre>
Even though you may only use <I>i</I> and <I>j</I> in a small portion of <I>f</I>, the declaration says that they are available <I>everywhere</I> within the function. Therefore, <I>i</I> and <I>j</I> have more scope than they deserve. If, for example, <I>i</I> and <I>j</I> only apply under certain conditions, you can easily limit their scope by declaring them within an appropriate inner block:<P>
<pre>void f(void)
{
   ...
   if (&lt;some condition&gt;)
   {
      int i, j;
      /* only use i and j here */
   }
   ...
}</pre>
Another advantage to this practice is that <I>i</I> and <I>j</I> aren't even allocated if the condition is false &#151; they don't exist outside their block. C++ encourages minimal scoping by allowing declarations to appear anywhere a statement can, as in:<P>
<pre>for (int i = 0; i &lt; n; ++i)
   ...</pre>
The index <I>i</I> is visible from its point of declaration to the end of its block. Minimal scoping aids readability because you don't even see identifiers until you need to &#151; when they add meaning to the program.<P>
<h4><FONT COLOR="#000080"><A name="00CC_0064">Lifetime<A name="00CC_0064"></FONT></h4></P>
The lifetime, or <I>storage durations</I> of an object is the period from the time it is created to the time it is destroyed. Objects that have <I>static</I> duration are created and initialized once, prior to program startup, and are destroyed when the program terminates normally. Objects with file scope, as well as objects declared with the <I>static</I> specifier at block scope, have static duration. <A href="list3.htm">Listing 3</a>
shows an example of the latter. The variable <I>n</I> is initialized once at program startup and retains its last-assigned value throughout the program. (Its scope, however, is just the body of the function <I>count</I>.)<P>
Function parameters and objects declared within a block without the <I>extern </I>or <I>static</I> specifier have <I>automatic</I> duration. Such objects are created anew every time execution enters their block. Every time execution enters a block normally, that is, not as the result of a <I>goto</I>, then any initialization you may have specified is also performed. When execution falls through or jumps past the end of a block, or returns from a function, all automatic variables in that scope are destroyed.<P>
The program in <A href="list4.htm">Listing 4</a>
illustrates both static and automatic duration with the familiar factorial function. The token n!, pronounced "n-factorial" (without yelling), denotes the product of all positive integers up to and including n. For example,<P>
<pre>3! = 3 x 2 x 1
4! = 4 x 3 x 2 x 1
etc.</pre>
Most math textbooks give the following equivalent recursive definition instead:<P>
<IMG SRC="equat.gif"><P>
You can render this definition concisely in C with the following recursive function:<P>
<pre>long fac(long n)
{
   return (n &lt;= 1) ? 1 : n * fac(n-1);
}</pre>
When <I>n</I> is greater than 1, <I>fac</I> calls itself recursively, with an argument equal to one less than it started with. This action temporarily suspends the current scope and creates a new one, with its own copy of <I>n</I>. This process continues until the most deeply nested copy of <I>n</I> is equal to <I>1</I>. This scope terminates and returns <I>1</I> to the scope that called it, and so on up to the original invocation. For example, consider the execution of the expression <I>fac(3)</I>:<P>
<pre>fac(3):  return (3 &lt;= 1) ? 1 : 3 * fac(2);</pre>
This calls fac(2):<P>
<pre>fac(2):  return (2 &lt;= 1) ? 1 : 2 * fac(1);</pre>
which in turn calls fac(1):<P>
<pre>fac(1):  return (1 &lt;= 1) ? 1 : fac(0);</pre>
which returns 1:<P>
<pre>fac(1):  return 1;</pre>
fac(2) now resumes and returns the following to fac(3):<P>
<pre>fac(2):  return 2 * 1;</pre>
which returns the value 6 to the original caller.<P>
The program in <A href="list4.htm">listing 4</a>
traces this recursive computation by wrapping the factorial formula with statements to print the value coming into the function and the computed value going out. This program keeps track of how deep the recursion has nested with the static variable <I>depth</I>. Since <I>depth</I> has static duration, it is allocated and initialized once prior to program startup and retains its value across function calls (including recursive ones). Only automatic variables, like <I>n</I>, are replicated with each recursive call. The <I>auto</I> keyword is purely documentary, since all variables with block scope are automatic by default.<P>
<h4><FONT COLOR="#000080"><A name="00CC_0065">Linkage<A name="00CC_0065"></FONT></h4></P>
According to the rules of linkage, two same-named identifiers can refer to the same object, even if they occupy different translation units. There are three types of linkage in C:<P>
1)     External linkage &#151; names across translation units in a program<P>
2)     Internal linkage &#151; names throughout a single translation unit<P>
3)     No linkage &#151; certain objects are unique, hence, they have no linkage<P>
Both functions and global objects declared wihout the <I>static</I> keyword have external linkage. There must be only one <I>definition</I> of each such object, but there may be many declarations that refer to that definition. For example, if the following declaration occurs at file scope in a file:<P>
<pre>/* file1.c */
int x;</pre>
then it can used in another file at any scope where the following occurs:<P>
<pre>/* file2.c */
extern int x;</pre>
The <I>extern</I> specifier in essence says, "find an object named x defined at file scope." The <I>extern</I> specifier is not required to link to a function with external linkage:<P>
<pre>/* file1.c */
int f(void)
{</pre>
return 1;<P>
<pre>}

/* file2.c*/
int f(void); /* extern specifier assumed for functions
              - links to f in file1.c */</pre>
Although the C standard doesn't explicitly define it, you can think of objects with external linkage as constituting a new scope: that of objects visible across translation units. On the street this is known as <I>program scope</I>.<P>
Functions and global objects declared with the <I>static</I> specifier have internal linkage. Identifiers with internal linkage are visible only within their translation unit. This use of the keyword <I>static</I> has little to do with the static storage duration specifier discussed previously. It's a good idea to commit the following pseudo-formulas to memory:<P>
<pre>static + block scope == static storage duration
static + file scope == internal linkage</pre>
The first use of <I>static</I> alters lifetime, the second linkage. If you think this is confusing, C++ muddies the waters further by introducing a third use of the term (static class members). I'll spare you that one until next month.<P>
Certain program entities, which are always unique, are said to have no linkage. These entities include objects having block scope but no <I>extern</I> specifier, function parameters, and anything other than function or object, such as a label, tag name, member name, typedef name, or enumeration constant.<P>
The source files in <A href="list5.htm">Listing 5</a>
and <A href="list6.htm">Listing 6</a>
comprise a single executable program that illustrates the different types of linkage. <A href="list5.htm">Listing 5</a>
is similar to <A href="list2.htm">Listing 2</a>
except that functions <I>f1</I> and <I>f2</I> are private to the source file, and a function from the source file in <A href="list6.htm">Listing 6</a>
is added to the executable program. The integer <I>i</I> at file scope in <A href="list5.htm">Listing 5</a>
has external linkage because it does not carry the <I>static</I> specifier. A variable of the same name in another file can refer to it if declared with the <I>extern</I> specifier, as <A href="list6.htm">Listing 6</a>
does. (It is an error to have two <I>definitions</I> of the same object with external linkage, e.g., two <I>i</I>'s modified by neither <I>static</I> nor <I>extern</I>.)<P>
The functions <I>f1</I> and <I>f2</I> have internal linkage because they use the <I>static</I> specifier. The <I>float</I> object named <I>i</I> in <I>f1</I> has no linkage because it is declared at block scope without the <I>extern</I> specifier. The integer <I>j</I> in <A href="list6.htm">Listing 6</a>
has internal linkage because of the <I>static</I> specifier, and the function <I>f3</I> has external linkage because of the absence of the <I>static</I> specifier.<P>
The following three lines from <A href="list5.htm">Listing 5</a>
require particular explanation:<P>
<pre>extern void f1(int);   /* Internal Linkage */
extern void f2(void);  /* Internal Linkage */
extern void f3(void);  /* External Linkage */</pre>
Since the <I>extern</I> specifier means "link with something at file scope," the declarations <I>f1</I> and <I>f2</I> in <I>main</I> link respectively with the functions of the same name in the same file, which happen to have internal linkage. It is important that you declare <I>f1</I> and <I>f2</I> <I>static</I> at file scope before the <I>extern</I> references in <I>main</I>, or else the compiler will assume that they have external linkage (like it does for <I>f3</I>), which conflicts with the actual function definitions later in the file.<P>
<h4><FONT COLOR="#000080"><A name="00CC_0066">Namespaces<A name="00CC_0066"></FONT></h4></P>
An identifier can play various roles in a C program. For example, in the following excerpt, <I>pair</I> is both a function name and a structure tag:<P>
<pre>struct pair {int x; int y;};

void pair(struct pair p)
{
    printf("(%d,%d)\n",p.x,p.y);
}</pre>
The compiler keeps separate lists of identifiers used in different roles, so there is no danger of ambiguity. These lists are called <I>namespaces</I>. There are four different types of namespaces in standard C:<P>
1)     labels<P>
2)     tags for structures, unions, and enumerations<P>
3)     members of structures and unions<P>
4)     ordinary identifiers (i.e., all others: data objects, functions, types, and enumeration constants).<P>
Each function keeps its own list of labels. Each translation unit and each block keeps its own set of namespaces for tags and for ordinary identifiers, which is what allows an inner scope to hide like- named entities at outer scopes. Each structure or union type keeps its own list of identifiers. Enumeration constants belong to the space of ordinary identifiers, since you use them like objects in a program.<P>
The program in <A href="list7.htm">Listing 7</a>
uses the following namespaces (arbitrary names are mine):<P>
<UL><li>tag-global &#151; <I>struct-union-enum</I> tags defined at file scope. A redefinition of <I>struct foo</I> at block scope would hide the one from an enclosing scope.</li>
<li>global-foo-member &#151; the member names of the <I>struct foo</I> defined at file scope. Any redefinitions of <I>struct foo</I> at block scope would essentially be new types, and would keep their own list of member names.</li>
<li>ordinary-global &#151; any data objects, functions, typedefs or enumeration constants defined at file scope (in this case, a <I>struct foo</I> object, which is hidden by a like-named object in <I>main</I>).</li>
<li>ordinary-main-1 &#151; ordinary identifiers defined at the outer scope main (a <I>struct foo</I> object which hides the global one).</li>
<li>ordinary-main-2 &#151; ordinary identifiers defined in the inner block of main (<I>struct foo x</I>, and the integer <I>foo</I>, which hides the <I>struct foo</I> of the same name in the enclosing scope).</li>
<li>label-main &#151; labels defined in <I>main</I> (<I>foo</I>:)</li></UL>
The comments in the source file indicate the namespace that claims each use of the identifier <I>foo</I>. I hope you find this program a little (nay, a lot) confusing. My monotonous overuse of a single identifier was for illustrative purposes only. You should only reuse names for good reason &#151; and I can't think of any at the moment, without discussing C++ overloading. If you see such code in "real life," treat it like a sensitive government document: DESTROY BEFORE READING!<P>
<h4><FONT COLOR="#000080"><A name="00CC_0067">Summary<A name="00CC_0067"></FONT></h4></P>
There's a lot to a name in a C program. Each identifier has a scope (where it is visible), a lifetime (when it is active), a linkage (whether remote uses of the same name refer to the same entity), and a namespace (its role among identifiers). If this article hasn't made sense to you (but I hope it has), guess what: it gets worse! I can't think of a single concept I've discussed here that C++ doesn't affect. Now you know the subject of next month's article.<P>

<h4><a href="../../../source/1994/apr94/allison.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
