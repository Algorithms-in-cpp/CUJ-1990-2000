

<HTML>
<HEAD>

<TITLE>April 1994/Expanding a Conversation Processor for Time</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocapr.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   User Interfaces</FONT></H2>

<hr><h2 align="center"><font color="#800000">Expanding a Conversation Processor for Time<A name="00B6_0050"><A name="00B6_0050"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="00B6_0000"><A name="00B6_0000">Russell Suereth</font></h3><hr><blockquote><P>
<P><i><A name="00B6_0000"><A name="00B6_0000">Russell Suereth has been consulting for over 12 years in the New York City and Boston areas. He started designing and coding systems on IBM mainframes and now also builds PC software systems. You can write to Russell at 84 Old Denville Rd, Boonton, NJ 07005. Russell Suereth is now completing a book, to be published this summer by R&amp;D Technical Books, entitled Processing Human Conversations. He has extended his basic processor to deal with more complex issues such as idioms, generating questions, and identifying general themes.</i></P><P>
This article expands the language processor presented in "A Natural Language Processor," <I>CUJ</I>, April 1993, to include time. That processor could accept input sentences from a user, and within certain limited contexts, accurately interpret their meaning. The processor can now recognize time words and phrases to process more kinds of input sentences. I've included additional processes for tense and number in the article. These additional processes help clarify the meanings of ambiguous sentences, and generate an error response when tense or number don't agree.<P>
The code presented here is the part of the language processor that deals with time. The complete processor is not shown here, but it is available on the code disk.<P>
<h4><FONT COLOR="#000080"><A name="00B6_0051">Defining Time Words and Phrases<A name="00B6_0051"></FONT></h4></P>
Time phrases are sequences of words that clarify when an event occurs. Without time phrases the event can only be recognized as occurring in the past, present, or future, by examining the tense of the sentence in which the event occurs.<P>
Time phrases identify events by specific time, elapsed time, or habitual actions. Specific time is indicated by the day, month, year, or clock time. The sentence "Jim runs <I>at one o'clock</I>" identifies the specific time Jim runs. Elapsed time is indicated by a duration. The sentence "Jim runs <I>for one hour</I>" identifies the length of time Jim runs. Habitual actions are indicated by words such as "each" and "every." The sentence "Jim runs <I>every day</I>" identifies the action Jim often performs.<P>
A time word is a word that clarifies when an event occurs. The word may stand on its own, or be part of a time phrase. Words such as "Tuesday," "midnight," and "morning" are time words, but the words "at," "in," and "last" are also time words when used in a time phrase. The processor identifies time words by matching the input sentence to an underlying structure.<P>
<h4><FONT COLOR="#000080"><A name="00B6_0052">Identifying Time Words and Phrases<A name="00B6_0052"></FONT></h4></P>
<A href="list1.htm">Listing 1</a>
contains the code for this article. The main routine calls the <I>check_underlying</I> and <I>check_time</I> routines to identify time words in the input sentence. The <I>check_underlying</I> routine matches the input sentence to the underlying structures. If the match is successful, then the sentence is processed. Time words are words that match an underlying structure and have a TIME word type. The processor recognizes adjacent time words as a time phrase and assigns the value TIMEPHRASE to these words. The <I>check_time</I> routine copies the time phrase into the times array. The times array contains a time phrase entry for each input sentence.<P>
<h4><FONT COLOR="#000080"><A name="00B6_0053">Deriving Time Meaning<A name="00B6_0053"></FONT></h4></P>
The processor derives time meaning from specific time words in the input sentence. Some time words and their meanings are shown in <A href="tab1.htm">Table 1</a>.
 When one of these words occurs in a sentence and indicates time, that word's time meaning is assigned to the sentence.<P>
The main routine calls <I>derive_time_meaning</I> which looks at the input sentence's time phrase. If a time phrase word matches a coded time word, then that word's time meaning is assigned to the <I>time_meaning</I> array. The <I>time_meaning</I> array contains a time meaning entry for each input sentence.<P>
<h4><FONT COLOR="#000080"><A name="00B6_0054">Interpreting Auxiliary Meaning<A name="00B6_0054"></FONT></h4></P>
Many sentences contain auxiliary phrases which qualify the certainty of a particular event's occurrence. Example phrases are "could be" and "must have been." The auxiliary phrase helps the processor understand the sentence. On the other hand, the sentence can't be fully understood if the auxiliary meaning is unclear. Unclear auxiliary meaning occurs when the sentence has no auxiliary, when the auxiliary has more than one meaning, or when the auxiliary meaning is ambiguous. If the auxiliary meaning is unclear, the processor can use the auxiliary and sentence tense to determine a clear meaning. <A href="tab2.htm">Table 2</a>
shows unclear auxiliary and tense combinations with their clear meaning.<P>
<h4><FONT COLOR="#000080"><A name="00B6_0055">Handling <B><I>No</I></B> Auxiliary<A name="00B6_0055"></FONT></h4></P>
The auxiliary meaning is unclear when the sentence has no auxiliary. Sentences with no auxiliary have an implied auxiliary meaning. The processor uses the sentence tense to identify the implied meaning. For example, the sentence "Jim ran in the race" has no auxiliary and is past tense. That sentence is similar to another sentence with past tense "Jim had run in the race." The auxiliary "had" means a particular point of time. When an input sentence has no auxiliary and is past tense, the processor assigns the particular point of time meaning to the sentence. In another example, the sentence "Jim runs in the race" has no auxiliary and is present tense. That sentence is similar to another sentence with present tense "Jim is running in the race." The auxiliary "is," used in the present tense, means limited duration. When an input sentence has no auxiliary and is present tense, the processor assigns the limited duration meaning to the sentence.<P>
The main routine calls <I>derive_aux_meaning</I> to derive a clear auxiliary meaning from an unclear meaning. The <I>derive_aux_meaning</I> routine looks at the auxiliaries entry for the sentence. If the auxiliary's string length is zero, then the sentence has no auxiliary and the routine looks at the tenses entry. If the tenses value is <I>PAST</I>, then <I>PARTICULAR_POINT_OF_TIME</I> is assigned to the auxiliary meaning. If tenses is <I>PRESENT</I>, then <I>LIMITED_DURATION</I> is assigned to the auxiliary meaning. If tenses is <I>FUTURE</I>, then the processor assigns <I>FIXED_PLAN</I> to the auxiliary meaning.<P>
<h4><FONT COLOR="#000080"><A name="00B6_0056">Handling Ambiguous Auxiliaries<A name="00B6_0056"></FONT></h4></P>
An ambiguous auxiliary is also potentially confusing to the processor. An example is the auxiliary "could be" in the sentence "Jim could be running in the race." In the present tense, "could be" has two meanings. That sentence in the present tense means "Jim is able to run in the race," or "Jim is permitted to run in the race." The auxiliary meaning remains ambiguous because "could be" has two meanings in the present tense. In the future tense, "could be" has one meaning. That sentence in the future tense means "It is possible that Jim will run in the race." The auxiliary meaning is clarified because "could be" has only one meaning in the future tense.<P>
The <I>derive_aux_meaning</I> routine looks for specific ambiguous auxiliaries in the sentence's auxiliaries entry. If a specific ambiguous auxiliary is found, then the routine assigns a clear meaning to the sentence's auxiliary meaning. The routine assigns a clear meaning based on the value in the sentence's tenses entry.<P>
<h4><FONT COLOR="#000080"><A name="00B6_0057">Asking for Specific Meaning<A name="00B6_0057"></FONT></h4></P>
The processor can clarify ambiguous auxiliary meaning when certain tenses are used. But when the auxiliary meaning remains ambiguous, then the processor generates a response that asks for more specific meaning. <A href="fig1.htm">Figure 1</a>
shows a processor session with ambiguous auxiliary meaning in the input sentence.<P>
The <I>make_response</I> routine calls <I>ask_meaning</I> to generate a response that asks about ambiguous auxiliary meaning. The <I>ask_meaning</I> routine looks for specific auxiliaries in the sentence's auxiliaries entry. If a specific auxiliary is found, then the routine generates a response. The routine also looks at the sentence's tenses and numbers entries. These entries help identify the appropriate auxiliaries that can be used to make the response grammatical.<P>
<h4><FONT COLOR="#000080"><A name="00B6_0058">Error Handling<A name="00B6_0058"></FONT></h4></P>
Time phrases can refer to an event in the past, present, or future. This time reference must match the past, present, or future tense of the sentence. If the time and tense conflict, then the sentence doesn't make sense and is ungrammatical. An example is the sentence "Jim had run next week." The time and tense don't match because "had run" refers to the past, while "next week" refers to the future.<P>
The <I>make_response</I> routine calls <I>check_agreement</I> to identify agreement errors in the input sentence. The <I>check_agreement</I> routine looks at the <I>time_meaning</I> and tenses entries for the input sentence. If the <I>time_meaning</I> entry is <I>LAST</I>, and the tenses entry is <I>PRESENT</I> or <I>FUTURE</I>, then a<I>greement_error</I> is called to generate an agreement error response. If the <I>time_meaning</I> entry is <I>NEXT</I>, and the tenses entry is <I>PAST</I>, then <I>agreement_error</I> is called for the agreement error response. The <I>check_agreement</I> routine also calls <I>agreement_error</I> when either the sentence number or sentence tense are in error.<P>
The processor generates an error response for three kinds of grammar conflicts in the input sentence. A grammar conflict between time meaning and auxiliary meaning is shown in the sentence "Jim will run last week." A grammar conflict between auxiliary tense and verb tense is shown in the sentence "Jim will ran in the race." A grammar conflict among subject, auxiliary, and verb number is shown in the sentence "Jim are running in the race." The explanation response gives a detailed reason why the input sentence is ungrammatical. <A href="fig2.htm">Figure 2</a>
shows the explanation responses for the above ungrammatical input sentences.<P>
The <I>check_agreement</I> routine calls <I>agreement_error</I> to generate the explanation response. The <I>agreement_error</I> routine is passed a value in the <I>error_type</I> parameter that identifies the kind of grammar conflict. If the <I>error_type</I> is <I>TIME_MEANING_ERROR</I>, then the time and auxiliary meaning conflict and the routine generates an appropriate explanation response. If the <I>error_type</I> value is <I>TENSES_ERROR</I>, then the auxiliary and verb tense conflict and an explanation response is generated. If the <I>error_type</I> value is <I>NUMBER_ERROR</I>, then the subject, auxiliary, and verb number conflict and an explanation response is generated.<P>
<h4><FONT COLOR="#000080"><A name="00B6_0059">Responses Based on Meaning<A name="00B6_0059"></FONT></h4></P>
The processor generates a response based on auxiliary meaning when the sentence is grammatical. In the original processor the generated response was a simple "OK." This expanded processor creates an interesting response based on the auxiliary meaning. Given the input sentence "Jim is running in the race," the processor assigns the limited duration meaning to the sentence. The processor then generates the response "When will Jim stop running" based on that auxiliary meaning. <A href="tab3.htm">Table 3</a>
shows auxiliary meanings and associated example responses.<P>
The <I>make_response</I> routine calls <I>aux_meaning_response</I> to generate a response based on auxiliary meaning. The <I>aux_meaning_response</I> routine looks for specific auxiliary meanings in the input sentence. If a specific auxiliary meaning is found, then a response for that meaning is generated with words from the input sentence. The routine also checks the sentence tense, number, and subject type so appropriate words can be used to create a grammatical response.<P>
<h4><FONT COLOR="#000080"><A name="00B6_005A">Summary<A name="00B6_005A"></FONT></h4></P>
Several processes are required to process time. The processes described in this article identify time phrases and words in the sentence; derive time meaning from the sentence; derive a clear auxiliary meaning from an unclear meaning; generate a response that asks about unclear meaning; determine time and sentence tense agreement; generate a response that explains grammar conflicts; and generate a response based on meaning.<P>
Further expansions to the processor could compare one time to another; include time when matching input sentences; generate interesting responses based on time meaning; and allow ungrammatical sentences to be fully processed.<P>
Processing time helps the processor identify grammatical sentences, and to derive more meaning from the sentence. As a result, the processor can generate responses that, at times, almost appear human.<P>
<h4><FONT COLOR="#000080"><A name="00B6_005B">Bibliography<A name="00B6_005B"></FONT></h4></P>
Liles, Bruce L. 1971. <I>An Introductory Transformational Grammar</I>. Englewood Cliffs: Prentice-Hall.<P>
Quirk, Randolph, and Sidney Greenbaum. 1973. <I>A Concise Grammar of Contemporary English</I>. San Diego: Harcourt Brace Jovanovich.<P>
Suereth, Russell. "A Natural Language Processor." <I>The C User's Journal</I>. April, 1993.<P>
Suereth, Russell. "Natural Language Expansions for Tense and Number." <I>The C User's Journal</I>. June, 1993.<P>

<h4><a href="../../../source/1994/apr94/suereth.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
