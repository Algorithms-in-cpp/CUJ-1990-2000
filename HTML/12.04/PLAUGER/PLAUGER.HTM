

<HTML>
<HEAD>

<TITLE>April 1994/Standard C</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocapr.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Standard C<A name="00CA_005E"><A name="00CA_005E"></font></h2><P>
<h3 align="center"><A name="00CA_0000"><A name="00CA_0000">Introduction to lostreams</h3><P>
<h3 align="center"><font color="#800000">P.J. Plauger</font></h3><hr><blockquote><P>
<P><i><A name="00CA_0000"><A name="00CA_0000">P.J. Plauger is senior editor of The C Users Journal. He is convenor of the ISO C standards committee, WG14, and active on the C++ committee, WG21. His latest books are The Standard C Library, and Programming on Purpose (three volumes), all published by Prentice-Hall. You can reach him at pjp@plauger.com.</i></P><P>
The largest single component of the Standard C++ library is the package called "iostreams." It consists of a whole slew of classes that work together to make input and output look simple. The commonest application is probably the classic:<P>
<pre>#include &lt;iostream&gt;
.....
cout &lt;&lt; "Hello, world." &lt;&lt; endl;</pre>
which writes the message <I>Hello</I><I>, </I><I>world</I>. followed by a newline character to the standard output stream (same as <I>stdout</I>).<P>
This simple expression is the tip of a rather large iceberg. Let's look a bit below the surface.<P>
As you might guess, the header &lt;<I>iostream</I>&gt; declares all the necessary classes. (Existing implementations of C++ may append a <I>.h</I><I>,</I> or a <I>.hpp</I><I>,</I> to the header name.) The class we care about for this example is <I>ostream</I><I>,</I> each of whose objects controls a stream into which you can <I>insert</I> characters. That stream can be an output file, a text string that grows dynamically in memory, or lots of other things.<P>
In this particular case, <I>cout</I> is a static object of class <I>ostream</I> whose name has global linkage. It conspires rather intimately with <I>stdout,</I> the familiar Standard C library object of type pointer to <I>FILE</I><I>,</I> to help you write formatted text to the standard output stream. You can freely intermix expressions such as the one above with more traditional calls such as to <I>putchar</I> or <I>printf</I> and get the result you'd expect.<P>
(Translation: you don't have to worry about two different buffering mechanisms saving up characters and writing reordered blocks of characters to the standard output stream. Again, existing implementations don't always make this promise, at least not unless you perform some magic incantation at run time. And then you can often expect a degradation of performance. The draft C++ Standard hopes to encourage better synchronization of C and C++ I/O, if only to the standard streams.)<P>
The header <I>&lt;iostream&gt;</I> declares two similar objects of class <I>ostream</I><I>:</I><P>
<UL><li><I>cerr</I><I>,</I> which controls writes of unbuffered text to the standard error stream, in cooperation with <I>stderr</I>, and</li>
<li><I>clog</I>, which also cooperates with <I>stderr</I> but which won't necessarily force text to be written out at the end of each insertion operation.</li></UL>
<h4><FONT COLOR="#000080"><A name="00CA_005F">Inserters<A name="00CA_005F"></FONT></h4></P>
Now let's take a closer look at the first part of the example expression:<P>
<pre>cout &lt;&lt; "Hello, world." .....</pre>
The class <I>ostream</I> overloads the left-shift operator repeatedly with member functions to provide a rich set of <I>inserters</I>. These each encode a right-hand operand by various rules (akin to the conversion specifications for <I>printf</I>), then insert the encoded text in the stream controlled by the <I>ostream</I> object. In this particular case, the inserter called is:<P>
<pre>ostream&amp; operator&lt;&lt;(const char* s);</pre>
This function knows to write the null-terminated string pointed to by <I>s</I> to the output stream controlled by <I>cout</I><I>.</I> Put another way, the function inserts each of the characters from the string into the controlled stream up to but not including the terminating null.<P>
More complicated inserters turn binary integer and floating-point values into sequences of characters that human beings can read. For example, the inserter:<P>
<pre>ostream&amp; operator&lt;&lt;(int n);</pre>
lets you write expressions like:<P>
<pre>cout &lt;&lt; i;</pre>
that inserts, say, the sequence -<I>123</I> in the controlled stream to represent the value &#151;123 stored in the integer object <I>i</I>.<P>
C programmers have been doing the same sort of thing for decades by writing:<P>
<pre>printf("%s %d\n", s, i);</pre>
So what's the big deal? Well, the inserter approach offers a few advantages:<P>
<UL><li>The translator picks the appropriate inserter to match the right hand operand type. No need to make sure that conversion specifiers in a format string line up with the proper arguments. There is that much less chance that the value will be interpreted incorrectly.</li>
<li>The notation is often convenient. You can string inserters out left to right, as in the original example above, to perform a series of insertions one after the other.</li>
<li>The notation can be augmented in various clever ways, as with the <I>end1</I> in the original example.</li></UL>
<h4><FONT COLOR="#000080"><A name="00CA_0060">Manipulators<A name="00CA_0060"></FONT></h4></P>
I won't elaborate much on that last point in this column. All you need to know for now is that inserting <I>endl</I> in an output stream has the effect of inserting a newline character (<I>'\n'</I>) then flushing output to the controlled stream. It is but one of many interesting <I>manipulators</I> you can use with the inserter notation.<P>
Other manipulators make up for one of the shortcomings of the inserter notation. Remember that with <I>printf</I> you can write some pretty fancy conversion specifications, such as:<P>
<pre>printf("%+10d\n", i );</pre>
to force a plus sign on positive output and pad the generated text to (at least) ten characters. But <I>operator&lt;&lt;</I> takes only two operands. There is no place to smuggle in that extra formatting information.<P>
The solution is to squirrel away the extra information in the <I>cout</I> object before performing the insertion. You can do this by calling member functions, as in:<P>
<pre>cout.setf(showpos), cout.width(10);
cout &lt;&lt; i;</pre>
Or you can use still more magic manipulators to achieve the same effect, as in:<P>
<pre>cout &lt;&lt; showpos &lt;&lt; setw(10) &lt;&lt; i;</pre>
As you can see, it's possible to have manipulators that take arguments. But that involves even more chicanery &#151; a topic for much later in this series.<P>
(In case you're wondering, the effect of <I>showpos</I> endures for subsequent insertions, in either of the above forms. I won't show how to turn it off here. But the field width evaporates after the first inserter that makes use of it.) <P>
<h4><FONT COLOR="#000080"><A name="00CA_0061">Extractors<A name="00CA_0061"></FONT></h4></P>
You can probably guess what's coming next. The header <I>&lt;iostream&gt;</I> also supports reading and decoding text from various streams, including input files. It declares the object <I>cin</I><I>,</I> which helps you <I>extract</I> characters from the standard input stream, in cooperation with <I>stdin</I><I>.</I> As you might further guess, this object is of class <I>istream</I>, the obvious companion to <I>ostream</I>.<P>
Thus, you can write code involving <I>extractors,</I> such as:<P>
<pre>int n;
cin &gt;&gt; n;</pre>
to read a sequence of characters and decode them by the usual rules for encoded integer input. The "usual" rules are much as for the function <I>scanf</I>:<P>
<UL><li>Skip any leading whitespace.</li>
<li>Gobble one or more characters that look like a valid encoded integer and convert them to <I>int</I> representation.</li>
<li>If no such characters are found, or if the result can't be properly represented, report a failure.</li></UL>
One small difference exists between inserters and extractors. You can insert the <I>value</I> of an expression into a stream. (This is usually called an "r-value" by old-line C programmers.) But you extract from a stream a value into an <I>object.</I> (Those same C programmers would call this an "l-value," but the times and the terms they are a-changing.) A corresponding difference appears in C &#151; you call <I>printf</I> with arbitrary expressions for value arguments and you call <I>scanf</I> with pointer arguments to designate the objects to store into.<P>
In C++, you declare extractors with <I>reference</I> arguments, as in:<P>
<pre>istream&amp; operator&gt;&gt;(int&amp; <I>n</I>);</pre>
That ampersand lets you write a bald <I>n</I>, but still ensures that a real live 1-value gets bound to the corresponding parameter within the function. No worry about null pointers or other pointer type mismatches.<P>
You can also play tricks with extractors, by the way, much like that <I>end1</I> shorthand I showed earlier. If all you want to do, for example, is consume any pending white space from the standard input stream, you can write: <P>
<pre>cin &gt;&gt; ws;</pre>
and the job is done. Similarly, you can communicate various bits of formatting information through other manipulators. much as with output streams. Once again, I won't begin to explain the magic behind that bald <I>ws</I> manipulator. Just note for now that such tricks are possible. <P>
<h4><FONT COLOR="#000080"><A name="00CA_0062">A Little History<A name="00CA_0062"></FONT></h4></P>
These <I>iostreams</I> have several clear advantages over the formatted I/O functions of the Standard C library. Little wonder that every implementation of C++ has for years offered some version of iostreams, however much the implementation may vary in its support for other common library classes. Jerry Schwarz, now at Lucid Technology, gets credit for developing the earliest version of iostreams, for helping it become so widespread, and for seeing the package through several major revisions. He is also responsible for drafting the specification of iostreams in the draft standard C++ library.<P>
Unfortunately, little has been written on the detailed architecture of iostreams. About the only commercially available guide is a book by Steve Teale <a href="#1">[1]</a>, which deals with a slightly dated version of the package. Since the draft C++ standard progresses even beyond the current field version, Teale's book offers only limited guidance. Still, it's better than what you typically get from the vendor of a C++ translator.<P>
For many class libraries this lack of information would not be a problem. But Schwarz designed iostreams to be extensible in several important ways: <P>
<UL><li>You can overload <I>operator&lt;&lt;</I> to define additional inserters, or <I>operator</I>&gt;&gt; to define additional extractors for classes you define.</li>
<li>You can define a host of manipulators that work with objects of class <I>ostream</I>, class <I>istream</I>, or both.</li>
<li>You can derive new classes from class <I>streambuf</I>, then over-ride several of its virtual member functions, to control sources and sinks of characters of your own devising.</li></UL>
Such power is not without its complexity. And complexity can be mastered safely only with careful guidance. To date, programmers have relied on access to bits and pieces of library source code to get that guidance. Where such code is not available, or where it varies among implementations, adequate guidance has been lacking. Standardizing iostreams is thus a major step toward helping the package realize its full potential.<P>
<h4><FONT COLOR="#000080"><A name="00CA_0063">Base Class <B><I>ios</I><A name="00CA_0063"></B></FONT></h4></P>
Let's begin with some basic architecture. Classes <I>ostream</I> and <I>istream</I> have several requirements in common:<P>
<UL><li>Both must control a stream through the agency of some object of class <I>streambuf</I>.</li>
<li>Both must maintain some notion of the state of the controlled stream, including a history of any errors that have occurred and how to report future errors.</li>
<li>Both must memorize a host of formatting options, as I described earlier.</li>
<li>Both must define a number of common nested types for describing the member functions and objects needed to effectuate the above requirements.</li></UL>
To provide all these services, both classes derive from the virtual public base class <I>ios</I><I>.</I> <A href="list1.htm">Listing 1</a>
shows how class <I>ios</I> is declared in the draft C++ Standard. Two kinds of members are commented out:<P>
<UL><li>Those labeled <I>exposition only</I> are merely indicative of what kind of information the class must maintain. Don't expect an actual implementation to have exactly such a member with exactly such a name. (The italicized names aren't even reserved.)</li>
<li>Those labeled <I>optional</I> can be present in an implementation for backward compatibility with some widespread existing practice. A conforming implementation may, however, choose to omit such members.</li></UL>
Note that class <I>ios</I> is a <I>virtual</I> base for both <I>ostream</I> and <I>istream</I>. That is more a matter of compatibility with past practice than of necessity. Some implementations control a stream that can be both read and written by declaring an object of class <I>iostream</I>, defined something like:<P>
<pre>class iostream : public istream, ostream {..... };</pre>
Were the base <I>ios</I> not virtual, this class would end up with <I>two</I> such subobjects, not just one. That would lead to all sorts of confusion in trying to control the bidirectional stream. Making the base virtual does add a bit of complexity here and there, particularly with initialization, but it permits the traditional definition of class <I>iostream</I> for those who want to keep using it.<P>
This class is <I>not</I> a part of the draft C++ standard, however, because it is no longer necessary. The preferred way to control a bidirectional stream is with two separate objects, one of class <I>ostream</I> and one of class <I>istream</I>. Both point to the same <I>streambuf</I> object, which is the only agent who really has to know that the stream can be both read and written. (That is part of the reason why an object of class <I>ios</I> contains a pointer to a separate <I>streambuf</I> object, instead of the object itself.)<P>
<h4><FONT COLOR="#000080"><A name="00CA_0064">In Times to Come<A name="00CA_0064"></FONT></h4></P>
Class <I>ios</I> takes a lot of declaring, as you can see from <A href="list1.htm">Listing 1</a>.
 For all that, it is neither a big nor a very complex class. Still, all that declaring demands a comparable amount of explaining. And class <I>ios</I> does lie at the heart of the entire iostreams class hierarchy. I plan to devote the next installment of this column to a careful study of this class, and the subtler implications of its semantics. Only after such a detailed introduction do classes <I>ostream</I> and <I>istream</I> begin to make sense.<P>
Class <I>streambuf</I> is equally fundamental to iostreams. You can get quite a lot of use out of iostreams without ever declaring a <I>streambuf</I> object in anger. But if you want to know how the whole works hangs together, or if you want to extend iostreams in nontrivial ways, you <I>must</I> know how this class behaves in detail.<P>
Manipulators are yet another topic. Many are simple and easy to explain once you know the basics of the classes <I>ios</I><I>, </I><I>ostream</I>, and <I>istream</I>. But all those manipulators with arguments derive from one of several "interesting" template classes. (In many existing implementations, they are built atop even more interesting macros.)<P>
Two library classes show some of the power of class <I>streambuf</I><I>.</I> Class <I>strstreambuf</I> provides capabilities very akin to the Standard C library function <I>sprintf</I>. You can use inserters and extractors to manipulate in-memory text strings. Class <I>stringstreambuf</I> is similar, except that it eases conversion between such in-memory strings and objects of the standard library class <I>string</I><I>.</I> (I'll discuss class <I>string</I> in detail <I>much</I> later.)<P>
Finally, we return to the objects that manipulate external files. Class <I>filebuf</I> lets you open files by name, much as with <I>fopen</I>, then manipulate them as iostreams. And the objects <I>cin</I><I>, </I><I>cout</I><I>, </I><I>cerr</I><I>,</I> and <I>clog</I> have their own tale as well. It turns out that initializing these creatures, as required by the draft C++ Standard, is no mean feat.<P>
The description of the iostreams facilities occupies about half the library portion of the draft C++ Standard. It's going to take quite some time to review it in adequate detail. Bear with me.<P>
<h4>References</FONT></h4></P>
<a name="1">[1]</a>     Steve Teale, C++ <I>IOStreams Handbook</I>, Addison-Wesley, 1993.<P>
<P>

<h4><a href="../../../source/1994/apr94/plauger.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
