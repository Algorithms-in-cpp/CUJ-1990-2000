

<HTML>
<HEAD>

<TITLE>April 1994/Questions & Answers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocapr.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Questions &amp; Answers<A name="00D3_0066"><A name="00D3_0066"></font></h2><P>
<h3 align="center"><A name="00D3_0000"><A name="00D3_0000">Pointers and Arrays</h3><P>
<h3 align="center"><font color="#800000">Kenneth Pugh</font></h3><hr><blockquote><P>
<P><i><A name="00D3_0000"><A name="00D3_0000">Kenneth Pugh, a principal in Pugh-Killeen Associates, teaches C and C++ language courses for corporations. He is the author of All On C, C for COBOL Programmers, and UNIX for MS-DOS Users, and was a member of the ANSI C committee. He also does custom C/C++ programming and provides SystemArchitectonics<I>sm</I> services. His address is 4201 University Dr., Suite 102, Durham, NC 27707. You may fax questions for Ken to (919) 489-5239. Ken also receives email at kpugh@allen.com (Internet) and on Compuserve 70125,1142.</i></P><P>
<B>Q</B><P>
I keep referring back to your article in <I>CUJ</I>, October '93, p.123 about "array of pointers to char" vs. "pointer to array of n chars." On page 124 near the bottom you declare<P>
<pre>char *array_p_char[NUMBER_OF_STRINGS];</pre>
Now, I've had a very hard time allocating this array of pointers dynamically. Here's what I tried:<P>
<pre>char   * pc1      = new  char;
    // returns char *
char   * pc2      = new  char[n];
    // returns char *
char  ** ppc3     = new  char*;
    // returns char * *
char  ** ppc4     = new (char(*));
    // returns char * *
char   * pc5      = new (char*)[n];
    // returns char *     (what's
char   * pc6      = new (char(*))[n];
    // returns char *      this?)
char  ** ppc7     = new  char*[n];
    // returns char * *    (hurray!)
char (** ppc8)[1] = new (char(*)[n]);
    // returns char[1] * * (huh?)</pre>
I can understand <I>pc1</I><I>, </I><I>pc2</I><I>,</I> and <I>ppc3</I> very well, but I begin to wonder at <I>ppc4</I>. Why does it need parentheses? Is it the same as <I>ppc3</I>?<P>
What kind of data structure(s) are returned for <I>pc5</I> and <I>pc6</I>? Are they the same?<P>
<I>ppc7</I> seems to be what I'm looking for? Is it?<P>
What kind of data structure is <I>ppc8</I>? What is returned by <I>new</I>? If <I>ppc3</I> and <I>ppc4</I> are the same, why are <I>ppc7</I> and <I>ppc8</I> different?<P>
Thank you for a very useful article and for any answers you can provide for this one obscure area.<P>
For the sake of completeness, how do you allocate the <I>array_p_char</I> using <I>malloc()</I>?<P>
Hans Salvisberg<br>
Berne, Switzerland<P>
<B>A</B><P>
My column on pointers seems to have generated a good deal of feedback. Let me review a couple of points before answering your specific questions.<P>
If you wish to allocate memory for a set of characters, you can do it one of two ways &#151; statically or dynamically. Suppose you need a set of <I>SIZE_OF_STRING</I> characters. Then you can use either of the following:<P>
<pre>#define SIZE_OF_STRING 10
char char_array[SIZE_OF_STRING];</pre>
or<P>
<pre>char *p_char_array;
p_char_array = mal-
loc(SIZE_OF_STRING * sizeof(char));</pre>
The <I>sizeof(char)</I> function is not absolutely necessary, since in all installations <I>sizeof(char)==1</I> but I include it for completeness. Now if you want to allocate a number of these strings (say <I>NUMBER_OF_STRINGS</I>), you have three choices. First, you can statically allocate storage for everything. The code will look like this:<P>
<pre>#define SIZE_OF_STRING 10
#define NUMBER_OF_STRINGS 5
char char_array[NUMBER_OF_STRINGS]
             [SIZE_OF_STRING];</pre>
Second, you can statically declare an array of pointers, and dynamically allocate the strings. For example:<P>
<pre>char *array_p_char[NUMBER_OF_STRINGS];
for (i = 0; i &lt; NUMBER_OF_STRINGS]; i++)
    {
    array_p_char[i] =
       malloc(SIZE_OF_STRING * sizeof(char));
    }</pre>
(This code supplies the answer to your last question.) Third, you can dynamically allocate everything, which includes the array of pointers and all the strings targeted by these pointers. You might implement this approach as follows:<P>
<pre>char **p_p_char;
p_p_char = malloc(NUMBER_OF_STRINGS *
               sizeof(char *));
for (i = 0; i &lt; NUMBER_OF_STRINGS];
    i++)
   {
   p_p_char[i] =
      malloc(SIZE_OF_STRING *
            sizeof(char));
   }</pre>
For the C++ crowd, let me paraphrase the prior <I>malloc</I> calls using <I>new</I>. The code to allocate a single array of chars becomes:<P>
<pre>char *p_char_array;
p_char_array = new
char[SIZE_OF_STRING];</pre>
To create an array of pointers to chars, the code becomes:<P>
<pre>char *array_p_char[NUMBER_OF_STRINGS];
for (i = 0; i &lt; NUMBER_OF_STRINGS];
    i++)
   {
   array_p_char[i] = new char
                  [SIZE_OF_STRING];
   }</pre>
To create a similar data structure bound to a double pointer, you can use the following:<P>
<pre>char **p_p_char;
p_p_char = new char *
         [NUMBER_OF_STRINGS];
for (i = 0; i &lt; NUMBER_OF_STRINGS];
    i++)
   {
   p_p_char[i] = new char
               [SIZE_OF_STRING];
   }</pre>
Now I will return to your examples. Taking them in order:<P>
<pre>char   * pc1      = new char;</pre>
This statement dynamically allocates memory for a single char and stores a pointer to the allocated memeory in <I>pc1</I>. (See <A href="fig1.htm">Figure 1a</a>.
)<P>
<pre>char   * pc2      = new char[n];</pre>
This statement dynamically allocates memory for <I>n</I> chars and stores a pointer to the allocated memory in <I>pc2</I> (<A href="fig1.htm">Figure 1b</a>)
. This statement works just like the combined statements<P>
<pre>char *p_char_array;
p_char_array = new char
            [SIZE_OF_STRING];</pre>
which I provided in a previous example.<P>
<pre>char  ** ppc3     = new  char*;
char  ** ppc4     = new (char(*));</pre>
These statements perform identical allocation operations. The additional parentheses in the second statement do nothing. Both statements allocate memory for a <I>char *</I>, that is, for a pointer to char (<A href="fig1.htm">Figure 1c</a>)
.<P>
<pre>char   * pc5      = new (char*)[n];
char   * pc6      = new (char(*))[n];</pre>
These statements compile without errors &#151; that sort of mystifies me; The <I>new</I> returns <I>char *</I>, but I expected it to return a <I>char **</I>, which would point to a memory block big enough for <I>n</I> pointers to char.<P>
What is actually being allocated is unclear to me. I asked P.J. Plauger about this mystery. He suggested that there are some subtleties in the C++ standard that dictate when you need to write parentheses and when sometimes even parentheses won't do. Different implementors probably interpret the rules differently and may even vary in how well they get their own rules right. Perhaps a reader can come up with an explanation of what these allocations really do.<P>
<pre>char  ** ppc7     = new  char*[n];</pre>
This statement allocates memory for <I>n</I> pointers to char (<A href="fig1.htm">Figure 1d</a>)
. For each pointer to <I>char</I>, you should allocate memory in the following manner:<P>
<pre>ppc7[i] = new char[m];</pre>
Your final example,<P>
<pre>char (** ppc8)[1] = new (char(*)[n]);</pre>
throws us into an entirely different ballgame. (I could probably devote an entire book to all the possible combinations of <I>*</I>, <I>()</I>, and <I>[].</I>) You have declared <I>ppc8</I> to be a pointer to a pointer. What is the second pointer pointing at? It is pointing at objects of type <I>char[1]</I>, that is, array of 1 <I>char</I>. The <I>new</I> operator is going to allocate a pointer, pointing at <I>char[n]</I>, that is, array of <I>n char</I><I>. </I><I>new</I> returns the address of a memory block long enough to hold a single pointer to something of type <I>char[n]</I>.<P>
I'll suggest a rule of thumb for declaring and allocating complex types. Make up a variable of the type you are trying to allocate. Assign the address of that variable to the type of pointer you are using. Compile it. If it works, then you have allocated the right type.<P>
When you use <I>[]</I> and a size specifier with <I>new</I>, you are allocating an array of objects of the type you specified, not just a single object of that type. This size does not enter into the type specification. As a substitute for your example code, you could try:<P>
<pre>char c;
char *p3;
char (*p4);
char (*pc8)[n];
char   * pc1      = &amp;c;   // Okay
char   * pc2      = &amp;c;   // Okay
char  ** ppc3     = &amp;p3;  // Okay
char  ** ppc4     = &amp;p4;  // Okay
char   * pc5      = &amp;p4;  // n of these
                      // Compile error
char   * pc6      = &amp;p4;  // n of these
                      // Compile error
char  ** ppc7     = &amp;p3   // n of these
                      // Compile error
char (** ppc8)[1] = &amp;pc8; // does not make sense</pre>
For those who might have been confused by the description of <I>ppc8</I>, let me provide a few simpler examples.<P>
<pre>char *array_p_char[NUMBER_OF_STRINGS];</pre>
In this statement <I>array_p_char</I> is an array containing <I>NUMBER_OF_STRINGS</I> elements. What is each element in <I>array_p_char</I>? It is a pointer. What does the pointer point to? It points to a <I>char</I>.<P>
If you add parentheses in the right place, as in:<P>
<pre>char *(array_p_char[NUMBER_OF_STRINGS]);</pre>
then the meaning stays the same. (The resulting data structure is shown in <A href="fig2.htm">Figure 2a</a>.
) If you add them in another place, then the meaning changes (see <A href="fig2.htm">Figure 2b</a>)
.<P>
<pre>char (*p_array_char)[SIZE_OF_STRING];</pre>
I've changed the variable names here to reflect the new meaning. First and foremost <I>p_array_char</I> is a pointer. What does it point to? It points to arrays of length <I>SIZE_OF_STRING</I> elements. What is each element in such an array? Each element is a <I>char</I><I>.</I> What would such a pointer be used to point to? Data objects which are compatible. For example:<P>
<pre>char arrays_of_chars[NUMBER_OF_STRINGS][SIZE_OF_STRING];
p_array_char = &amp;arrays_of_chars[0];</pre>
I use the address operator on the first element, rather than the name of the array to emphasize the correspondence. If you increment <I>p_array_char</I>, you will point to the next element in the array, i.e. <I>arrays_of_chars[1]</I>.<P>
If you need a variable that points to <I>p_array_char</I>, you would declare and initialize it as:<P>
<pre>char (**p_p_array_char)[SIZE_OF_STRING] =
   &amp;p_p_array_char;</pre>
Now you can see why managers get gray hairs when they try to read C code. I strongly recommend avoiding variables with more than one level of indirection. You rarely need those kind of variables anyway. Normally you can eliminate them by using inline functions or macros.<P>
<h4><FONT COLOR="#000080"><A name="00D3_0067">Templates<A name="00D3_0067"></FONT></h4></P>
In a recent C++ class, my students asked a number of questions regarding templates. Although templates are part of the C++ draft standard, not all vendors support them. Templates are useful for creating packages of functions that support multiple data types; with templates, you don't have to resort to void pointers or similar items. To demonstrate the value of templates, I first show how you use a common C library function, <I>qsort</I>, without the benefit of templates. Then I show how to use templates to get an equivalent function but with simpler code.<P>
<I>qsort</I> is declared as follows:<P>
<pre>qsort(void * array, size_t number_elements,
   size_t size_of_element,
   int (*compare_function)(const void *,const void *));</pre>
To use <I>qsort</I> with an integer array, you need to supply a comparison function, such as:<P>
<pre>int int_compare(const void * first, const void * second)
   {
   if ( * (int *) first &lt; * (int *) second)
      return -1;
   else ( * (int *) first == * (int *) second)
      return 0;
   else
      return 1;
   }</pre>
You call the function within the argument list to <I>qsort</I> as in:<P>
<pre>#define SIZE_OF_ARRAY 10;
int int_array[SIZE_OF_ARRAY];
qsort(int_array, SIZE_OF_ARRAY, sizeof(int),
   int_compare);</pre>
(In the next column, I'll examine some of alternative function declarations. for the comparison function.)<P>
Moving to C++, you can declare a class such as <I>Date</I>, for example:<P>
<pre>class Date
   {
public:
   compare(Date &amp;);
   ...
   };</pre>
and a compare function such as:<P>
<pre>Date_compare(const void *, const void *)
   {
return (Date *) first -&gt; compare( * (Date *) second);
   }</pre>
You could then call the <I>qsort</I> function as follows:<P>
<pre>#define SIZE_OF_ARRAY 10;
Date date_array[SIZE_OF_ARRAY];
qsort(date_array, SIZE_OF_ARRAY, sizeof(Date),
   Date_compare);</pre>
Now to simplify things you can declare the <I>sort</I> function as a template, as in:<P>
<pre>template &lt;class Type&gt;
sort(Type *array, size_t size)
   {
   // Definition of function
   // comparisons using Type::compare(Type &amp;);
   }</pre>
You can now call this function with the following:<P>
<pre>sort(date_array, SIZE_OF_ARRAY);</pre>
The template must appear in the source file in which this statement is used. The compiler will generate a corresponding function definition using <I>Date</I> as the value of <I>Type</I>.<P>
Inside <I>sort</I>, the <I>sizeof</I> an element is not needed, because it is compiled for the type <I>Date</I>. To use this <I>sort</I> function, you must provide a <I>compare</I> member function for every type of class you attempt to sort.<P>
What happens if you use this template in two source files that get linked together into a program? It is possible that the same function (e.g. <I>sort&lt;Date&gt;</I>) has been generated in both files. In this case, the linker better be smart. The linker must detect that both functions were generated from templates, use only one function, and not produce an error message. Alternatively, keep all template definitions in one and only one source file. Then the linker does not have to be so smart.<P>
<h4><FONT COLOR="#000080"><A name="00D3_0068">Using Macros for Practice<A name="00D3_0068"></FONT></h4></P>
Using macros can help you understand templates, since they are somewhat similar in concept. For example, suppose you have two source files, <I>sort.htp</I>, and <I>sort.ctp</I>. The <I>sort.htp</I> contains<P>
<pre>#define glue(a,b) a##b
#define sort_function_name(class_name) \
   glue(class_name,_sort)

sort_function_name(class_name * array, unsigned_int size);</pre>
The <I>sort.ctp</I> file contains<P>
<pre>#include "sort.htp"
sort_function_name(class_name * array, unsigned_int size)
   {
   // Definition for sort
   }</pre>
To use the sort function for <I>Dates</I>, you can create two source files, <I>datesort.h</I> and <I>datesort.cpp</I>. Let <I>datesort.h</I> contain<P>
<pre>#undef class_name
#define class_name Date
#include "date.h"
#include sort.htp</pre>
and let <I>datesort.cpp</I> contain<P>
<pre>#include "datesort.h"
#include sort.ctp</pre>
You will eventually compile <I>datesort.cpp</I> and link it into your program. In these source files that call one of the sort functions, you simply include the <I>datesort.h</I> at the top, as in:<P>
<pre>#include "datesort.h"

#define SIZE_OF_ARRAY 10;
Date date_array[SIZE_OF_ARRAY];
Date_sort(date_array, SIZE_OF_ARRAY);</pre>
<h4><FONT COLOR="#000080"><A name="00D3_0069">Templates vs. Macros<A name="00D3_0069"></FONT></h4></P>
You can use this macro technique with classes, such as containers. For example, instead of defining a template, such as<P>
<pre>// File array.h template &lt;class Type&gt;
class Array
   {
   // Definition of member functions
   Type get_member (int index);
   ...
   };
// All class definitions</pre>
and including it into another file, as in:<P>
<pre>#include "array.h"
Array&lt;int&gt; my_array;</pre>
You could set up the macro files as previously shown and use:<P>
<pre>#include "intarray.h"
int_Array my_array;</pre>
What are the advantages of macros over templates, if your current compiler supports templates? Not many. The major advantage is portability to compilers that don't support templates. The macro version of <I>sort</I> hides the implementation from the user. If you decide to change how <I>sort</I> works, you only need to compile a single file. Depending on how you design the template version of <I>sort</I>, you may have to compile all files which use the template. The major disadvantage to macros is having to create the header and implementation files for each class that uses a sort function.<P>
What are the advantages of using a sort template over the generic <I>qsort</I> function? Type checking. And that's a big plus for C++.<P>
</BLOCKQUOTE>
</BODY>
</HTML>
