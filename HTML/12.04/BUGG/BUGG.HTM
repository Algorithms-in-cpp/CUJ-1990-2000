

<HTML>
<HEAD>

<TITLE>April 1994/Creating Spin Controls for Windows</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocapr.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   User Interfaces</FONT></H2>

<hr><h2 align="center"><font color="#800000">Creating Spin Controls for Windows<A name="00B8_0052"><A name="00B8_0052"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="00B8_0000"><A name="00B8_0000">Keith E. Bugg</font></h3><hr><blockquote><P>
<P><i><A name="00B8_0000"><A name="00B8_0000">Keith Bugg is a principal at Tristar Systems, Inc., which provides software consultants and technical training for Windows and DEC platforms. Direct queries to CompuServe ID 72203,3612.</i></P><P>
Users of MS-Windows programs often need a convenient way to input a value that falls within a certain range. For example, users of a process control system may need to set the temperature of a vessel within a range of 100 to 200 F. Because of their simplicity and intuitive feel, spin controls often provide the best user interface in such applications; a spin control is one that allows the user to change an input value by clicking on an up or down arrow (or other appropriate icon). Clicking the up arrow increases the value; clicking the down arrow decreases it. As the arrows are clicked, the new value is displayed to the user via an edit box control and/or a graphical image (e.g., the temperature could be displayed as a thermometer).<P>
In this article, I present a simple implementation of spin controls in C++. A sample program accompanies the text and should serve as a jumping-off point for future exploration. The sample program's spin controls allow the user to specify a date within a given range. The program demonstrates one of the benefits of spin controls: they can prevent the user from entering invalid inputs. In this example, spin controls keep the user from entering an invalid date (including leap years).<P>
<h4><FONT COLOR="#000080"><A name="00B8_0053">Creating Spin Controls<A name="00B8_0053"></FONT></h4></P>
From a Windows programming perspective, a spin control consists of three fundamental parts: a read-only text box for displaying the current value, an up arrow control for increasing the value, and a down arrow control for decreasing the value. These controls can be placed on the screen in either a vertical or horizontal orientation. <A href="fig1.htm">Figure 1</a>
illustrates some typical spin controls. (The reason the text box is marked read-only is to prevent the user from clicking in the box and directly entering a value.) The controls are implemented as bit maps. Most Windows development kits supply a plethora of bit maps, among which are the familiar up/down arrows used here. By making a connection between an object (the edit box) and an event (a mouse click within the outlines of a bit map) you create a spin control.<P>
<h4><FONT COLOR="#000080"><A name="00B8_0054">Making the Connection<A name="00B8_0054"></FONT></h4></P>
In essence, spin control software is simply a matter of managing rectangles on the screen. The connections between the edit box and its controls are established by the following steps:<P>
1.     Load into memory the control bit maps using <I>LoadBitmap</I>; note sizes.<P>
2.     Create a memory Device Context (DC) via <I>CreateCompatibleDC</I>.<P>
3.     Select bit maps into memory DC via <I>SelectObject</I>;<P>
4.     Copy bitmaps using <I>BitBlt</I> to the output DC; note their positions.<P>
5.     Trap left mouse click event; test if cursor was inside bit map.<P>
6.     Process accordingly; update edit box as necessary.<P>
Save the bit map sizes and positions and map these into <I>RECT</I> objects; the API function <I>PtInRect</I> can then indicate if the mouse scores a "hit."<P>
<h4><FONT COLOR="#000080"><A name="00B8_0055">The Sample Program<A name="00B8_0055"></FONT></h4></P>
The sample Windows program demonstrates the preceding actions in more detail. This program builds a main window with a menu bar containing one option. When selected, the option invokes a dialog box which is associated with the date processor (see <A href="fig2.htm">Figure 2</a>)
. The function of most interest is <I>DateDialog</I>; the other stuff is mostly the grunt work to build the window, menu, etc. When the dialog box is initialized, the program creates edit boxes as child windows and maps them to the dialog box; these edit boxes show the current day and year, respectively. The program creates a combobox for the month and populates it with the names of the twelve months. (The months are not sorted alphabetically because the index into the combobox equals the numerical month; thus January is 0, February is 1, etc.) Next, the program loads the bit maps for the up and down arrows and saves each bit map's width and height in variables. The program then creates a memory device context by calling <I>CreateCompatibleDC</I>. The date processor is initialized with a default date of 15-Jan-1993. Finally, the program defines the bit maps as rectangles, and maps them to the screen. (These rectangles have been hard-coded for simplicity's sake.)<P>
The Windows messages of major interest here are <I>WM_PAINT, WM_LBUTTONDOWN</I>, and <I>WM_RBUTTONDOWN. WM_PAINT</I> causes the current value of the date to be displayed, while the button messages effect changes in the date values. The program responds to <I>WM_PAINT</I> by selecting the bit map objects (both the up and down arrows, in sequence) into the memory DC created earlier; these objects are then copied to the screen's DC via the <I>BitBlt</I> function.<P>
The message handlers for the buttons are much more involved, but they have more to do. First, the handlers record the position of the mouse cursor at the time of the click. The program calls the Windows API function <I>PtInRect</I> to determine if the cursor is in one of the rectangles occupied by a bit map. If the cursor lies within a bit map region, the current date value is incremented or decremented. Range checking is also enforced here; note the usual nasty code that checks for leap years.<P>
The right button down message handler requires even more code, since it supports year "slewing." Slewing refers to the ability to update the value continuously by holding the mouse button down while in one of the bit maps. The slewing works as follows: once the program know the cursor is in one of the year control arrows, it starts another loop. This new loop calls <I>PeekMessage</I> to see what's in the pipeline. This loop immediately gets the mouse position &#151; if the user has moved out of the rectangle, the year stops slewing (even if the button is still down). Also, if the program finds a <I>WM_RBUTTONUP</I> message, the loop breaks and the year stops slewing.<P>
The rest of the program is concerned with housekeeping chores and exiting. Most noteworthy in this regard are the <I>DeleteDC</I> and <I>DeleteObject</I> functions. These functions free up the memory locked for loading the bit maps and the memory DC.<P>
I built this program with Borland's Turbo C++ v 3.1, but it should port easily to most Windows-SDK-type platforms. To build this program, you will need to create your own <I>MAKE</I> file and include <I>SPIN.C, SPIN.RC</I>, and <I>SPIN.DEF</I>. These correspond to <A href="list1.htm">Listing 1</a>,
 <A href="list2.htm">Listing 2</a>
and <A href="list3.htm">Listing 3</a>,
 respectively.<P>
<h4><FONT COLOR="#000080"><A name="00B8_0056">Ups and Downs of Spin Controls<A name="00B8_0056"></FONT></h4></P>
As a Windows programmer, spin controls can save you a lot of work while increasing software reliability. This reliability results from a simple property of spin controls &#151; values are <I>selected</I>, not <I>entered</I>. This property allows your program to easily enforce ranges, data typing, defaulting, and other ammenities.<P>
Spin controls can also have a down side. For starters, the target platform <I>must</I> have a mouse. Writing a keyboard interface is clearly possible, but messy. Also, the value being updated should span a relatively narrow range. It would be poor design to force the user to click through 1000 values, for example. A slider control would be more appropriate for values with a wide range.<P>
<h4><FONT COLOR="#000080"><A name="00B8_0057">Final Remarks<A name="00B8_0057"></FONT></h4></P>
For certain Windows programs, spin controls can provide a very user-friendly control that pays extra dividends by way of increasing quality and reliability. Likely candidates are process control systems, multi-media applications (e.g., volume controls), and data base front ends. The construction of spin controls by the technique described in this article lends itself quite readily to object orientation, or at least to a DLL.<P>
Spin controls are widely available from Microsoft and other vendors in the guise of Visual Basic Custom Controls (VBXs). I've found these to be reliable and cost-effective; if you do a lot of development work, you may be better off to purchase a VBX. One caveat: VBXs will not be supported under Windows NT (in their current form, at least), so pick your battles carefully. You might want to hedge your bet and encapsulate the concepts of the sample program into a C++ class for spin controls.<P>
<h4><FONT COLOR="#000080"><A name="00B8_0058">Bibliography<A name="00B8_0058"></FONT></h4></P>
The algorithm for the leap year calculations is from <I>The C Programming Language</I> by Kernighan &amp; Ritchie, 2nd. edition.<P>

<h4><a href="../../../source/1994/apr94/bugg.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
