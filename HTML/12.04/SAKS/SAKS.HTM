

<HTML>
<HEAD>

<TITLE>April 1994/Stepping Up To C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocapr.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Stepping Up To C++<A name="00CF_0062"><A name="00CF_0062"></font></h2><P>
<h3 align="center"><A name="00CF_0000"><A name="00CF_0000">Compilation Firewalls, Part 1</h3><P>
<h3 align="center"><font color="#800000">Dan Saks</font></h3><hr><blockquote><P>
<P><i><A name="00CF_0000"><A name="00CF_0000">Dan Saks is the president of Saks &amp; Associates, which offers consulting and training in C++ and C. He is secretary of the ANSI and ISO C++ committees. Dan is coauthor of C++ Programming Guidelines, and codeveloper of the Plum Hall Validation Suite for C++ (both with Thomas Plum). You can reach him at 393 Leander Dr., Springfield OH, 45504-4606, by phone at (513)324-3601, or electronically at dsaks@wittenberg.edu.</i></P><P>
In many ways, C++ classes provide solid support for data<B> </B>abstraction. A class gathers the representation of a data type (its data<B> </B>members) along with the operations on that type (the member and<B> </B>friend functions) into a single, clearly-defined program unit.<B> </B>Access specifiers (the keywords <I>public, protected</I><I>,</I> and <I>private</I>)<B> </B>clearly distinguish those parts of the class that clients (users of the<B> </B>class) can access from those parts that only the class supplier can<B> </B>access. A well-written class defines an abstract type with complete<B> </B>and consistent behavior that you can use<B> </B>with little or no concern for how it<B> </B>works.<P>
Many classes provide behavior that<B> </B>you can implement in more than one<B> </B>way. For example, you can implement<B> </B>the abstract behavior of a symbol<B> </B>dictionary using any number of concrete<B> </B>structures, like a binary tree, a B-tree or<B> </B>a hash table. Depending on the<B> </B>anticipated volume of data and the<B> </B>application's speed and memory requirements,<B> </B>you might store the entire dictionary in<B> </B>dynamic memory, or keep only the<B> </B>retrieval keys in memory and store the rest<B> </B>on disk.<P>
No one implementation of a<B> </B>particular abstraction is right for all<B> </B>applications. Estimating system performance<B> </B>during analysis and design can guide you<B> </B>in selecting a good implementation. But<B> </B>you won't really know if you made the<B> </B>right choice until you measure the<B> </B>assembled application's performance using<B> </B>real-live data. The measurements may<B> </B>indicate that another implementation<B> </B>yields better performance. If the class is well written, you simply<B> </B>slip a different implementation behind a given class interface and<B> </B>rebuild the application without modifying any client source code.<P>
C++ lets you do all this, but there's one hitch. Almost<B> </B>invariably when you change the class implementation, you change the<B> </B>declarations for one or more private members. And those<B> </B>declarations are in the header that defines the class. If you use a <I>make</I><B> </B>system (or the project system that comes with many development<B> </B>systems), rebuilding the application will recompile every source<B> </B>file that directly or indirectly includes the header for the revised<B> </B>class. (If you don't use <I>make</I> or its equivalent, you may get some<B> </B>real surprises when you test the application.) When your<B> </B>application is large, the lengthy build times can really reduce your<B> </B>productivity.<P>
Actually, providing alternative implementations is a special<B> </B>case of the more general problem,<B> </B>namely, that any change to the private<B> </B>part of a class forces you to recompile<B> </B>source code that <I>appears</I> unaffected by<B> </B>the change. The root of problem is that<B> </B>C++ syntax does not physically separate<B> </B>all of a class's implementation details<B> </B>from its client interface. Another way to<B> </B>look at this is that a class's compilation<B> </B>interface typically is wider than its<B> </B>public interface.<P>
The <I>compilation interface</I> of a class<B> </B>is what a compiler needs to know about<B> </B>that class to compile source code that<B> </B>uses the class. The compilation interface<B> </B>consists of the entire class definition <B>&#151; </B>the member declarations (<I>private</I> and<B> </B><I>protected</I> as well as well as <I>public</I>), the <I>friend</I><B> </B>declarations, and the inline function<B> </B>definitions. The <I>public interface</I> is what a<B> </B>client programmer needs to know (yea<B> </B>verily, is allowed to access) about a<B> </B>class when writing code that uses that<B> </B>class. The public interface consists only<B> </B>of public members and friends of the<B> </B>class.<P>
Why was C++ designed with this apparent flaw? As with any language, C++ has its share of design trade-offs. C++ places space and time efficiency of generated code at a higher premium than the speed and convenience of the translation process. The lack of physical separation between class interface and implementation offers real benefits in both storage efficiency and run-time performance.<P>
Morever, if you really need to physically separate a class interface from its implementation, C++ offers you a choice of programming conventions that will do this. By following these conventions, you can write any class so that its compilation interface is essentially the same as its public interface. <a href="#booch">Booch [1991]</a> refers to this process as building "compilation firewalls," so that changes in the implementation of one class don't trigger a massive recompilation.<P>
The two most common techniques for building compilation firewalls in C++ use the following:<P>
<UL><li>"Cheshire Cat" classes</li>
<li>Protocol classes</li></UL>
This month, I'll present Cheshire Cat classes. Next month I'll explain protocol classes and consider the costs of each approach.<P>
I'll begin by presenting a sample application that has a class with two distinct implementations for the same public interface. Like many complete C++ programming examples, it requires quite a bit of explanation, including a few side trips. So bear with me and I'll to get to the point as quickly as possible.<P>
<h4><FONT COLOR="#000080"><A name="00CF_0063">A Cross-Reference Program<A name="00CF_0063"></FONT></h4></P>
<I>xr</I> is a simple cross-reference generator which I've used as an example in earlier columns. (See "Writing Your First Class," <I>CUJ</I>, March 1991; "Your First Class," <I>CUJ</I>, May 1991 and/or "Rewriting Modules as Classes," <I>CUJ</I>, July 1991.) <I>xr</I> prints an alphabetized list of words appearing in a document read from standard input. The program views its input as a sequence of words (a sequence of letters and digits starting with a letter) separated by non-words (such as spaces, punctuation, and digits). <I>xr</I> prints each word on a separate line followed by a list of line numbers on which that word appears in the document.<P>
For example, if the word "object" appears in the input once on lines 3, 19, and 100, and twice on line 81, then the output entry for object is<P>
<pre>object     3  19  81  100</pre>
The program makes the simplifying assumption that all line numbers found will fit on a single output line. That is, it doesn't include any logic to break a long output line at a nice, neat place.<P>
The program spans several source and header files. <A href="list1.htm">Listing 1</a>
shows the <I>main</I> module. <I>main</I> uses the <I>getword</I> function to scan the input and pick out each word that goes in the cross-reference. <I>main</I> delegates the work of collecting and printing cross-reference entries to a single local object <I>x</I> of type <I>xrt</I>.<P>
<I>xrt</I> is the cross-reference table class. The <I>xrt</I> class definition appears in <I>xrt.h</I> (<A href="list2.htm">Listing 2</a>)
, and its implementation appears in <I>xrt.cpp</I> (<A href="list3.htm">Listing 3</a>)
. This particular implementation uses a binary tree to store the cross-reference entries in alphabetical order.<P>
<I>xrt</I> is a <I>handle</I> class. That is, <I>xrt</I> consists merely of a pointer (a handle) to an associated data structure (the body) that does the real work. That pointer is the private data member <I>root,</I> which is a pointer to a <I>treenode</I>.<P>
<I>xrt.h</I> declares, but does not define, class <I>treenode</I>. The declaration<P>
<pre>class treenode;</pre>
declares <I>treenode</I> as an <I>incomplete type</I>. You cannot declare <I>objects</I> of an incomplete type, because the type declaration doesn't provide any object size or layout. However, you can declare pointers and references to objects of incomplete type, just like <I>xrt::root</I> in <A href="list2.htm">Listing 2</a>.
<P>
Why did I declare <I>treenode</I> as an incomplete type? Why didn't I define the class at the time I declared it? <I>xrt</I> and <I>treenode</I> are mutually referential types. That is, the definition for <I>xrt</I> refers to <I>treenode</I>, and the definition for <I>treenode</I> refers to <I>xrt.</I> As in C, the only way to do this in C++ is by using pointers to incomplete types. You declare one class (in this case, <I>treenode</I>) as an incomplete type, then define the second class <I>(xrt)</I> with members that are pointers to the incomplete type. Then you complete the incomplete type by defining it.<P>
<I>xrt.h</I> does not complete <I>treenode</I>, because it doesn't have to. Only <I>xrt.cpp</I> uses <I>treenode</I>, so only <I>xrt.cpp</I> completes <I>treenode</I> before using it. Client code, like <I>main,</I> which includes <I>xrt.h</I>, should not be aware that <I>treenodes</I> even exist. Therefore it shouldn't matter to that code that the type remains incomplete.<P>
Leaving <I>treenode</I> incomplete in <I>xrt.h</I> has the added advantage of removing implementation details from the header. Changes in the structure of a <I>treenode</I> don't induce changes in the header. The incomplete type acts as a compilation firewall. This mechanism is a foundation of the Cheshire Cat technique. As you will see shortly, the Cheshire Cat technique is a set of uniform stylistic conventions for building compilation firewalls from handle classes and incomplete types.<P>
You could argue that leaving <I>treenode</I> incomplete in <I>xrt.h</I> also adds a little more security to the interface. <I>xrt.h</I> declares <I>treenode</I> at file scope, so any compilation that includes <I>xrt.h</I> adds <I>treenode</I> to its global namespace. But a <I>treenode</I> should be invisible to client code. If you can't make it invisible, the next best thing you can do is render it unusable. Leaving <I>treenode</I> incomplete seems to do just that. The compiler will reject any client code that tries to create an object of incomplete type <I>treenode</I>.<P>
Unfortunately, nothing prevents client code from inadvertantly completing the incomplete type. Client code that completes type <I>treenode</I> may be in for some real surprises if it supplies its own definition for <I>treenode</I> that differs from the one in <I>xrt.cpp</I>. If the code makes it past the linker, the program may exhibit very subtle run-time errors.<P>
The completed class <I>treenode</I> in <I>xrt.cpp</I> specifies the layout for each node in the binary tree. It pairs a word with a sequence of line numbers on which that word occurs in the input. It also contains left and right subtrees, implemented as <I>xrt</I> objects.<P>
<I>treenode</I> uses a pointer to a dynamically-allocated null terminated character string that holds the spelling of a word. It uses an object of class type <I>lns</I> (line number sequence) to hold the set of line numbers associated with that word. (Earlier versions of this program that I published use the name <I>In_seq</I> instead of <I>Ins.</I>)<P>
<h4><FONT COLOR="#000080"><A name="00CF_0064">Alternative Implementations for <B><I>lns</I><A name="00CF_0064"></B></FONT></h4></P>
<I>lns</I> has a simple interface with only four member functions:<P>
<UL><li>the constructor, <I>lns(unsigned)</I>, initializes an<I> lns </I>object to hold a single line number</li>
<li>the destructor, <I>~lns()</I>, releases all the resources used by an <I>lns</I></li>
<li><I>add(unsigned)</I> adds a line number to the end of a sequence</li>
<li><I>print()</I> writes an <I>Ins</I> to <I>stdout</I>.</li>
<li>I will present two slightly different implementations in which</li></UL>
a) an <I>lns</I> consists of a single pointer to the first element in a singly-linked list of line numbers, and<P>
b) an <I>lns</I> consists of a pair of pointers: one to the first element in a singly-linked list of line numbers, and another to the last element.<P>
The definition for class <I>lns</I> using a single pointer appears in <I>lns1a.h</I> (<A href="list4.htm">Listing 4</a>)
, and the corresponding member function definitions appear in <I>lns1a.cpp</I> (<A href="list5.htm">Listing 5</a>)
. Like <I>xrt, lns</I> is a handle class; the handle is a pointer to the first node in the linked list. Unlike <I>xrt,</I> which uses an incomplete global type as its body class, <I>lns</I> uses a private nested type node. (I first discussed nested types in "Nested Classes," <I>CUJ</I>, July 1993.)<P>
A nested class is in the scope of its enclosing class. Therefore, I didn't bother adding a prefix to the name node (as in <I>lns_node)</I>, because the fully-qualified name of the node class is <I>lns::node</I>. Furthermore, since <I>lns::node</I> is private, it's inaccessible to client code.<P>
Rather than define <I>lns::node </I><I>in situ</I> (at the point of its declaration inside class <I>lns</I>), I prefer to use the new C++ feature that allows forward declaration of nested classes. The declaration<P>
<pre>class node;</pre>
inside class <I>lns</I> declares <I>lns::node</I> as an incomplete type. The subsequent declaration<P>
<pre>node *first;</pre>
declares <I>first</I> as a pointer to the nested <I>node</I> type. Since that is the only use of <I>node</I> inside the <I>lns</I> class definition, I've delayed defining <I>lns::node</I> until after completing the <I>lns</I> class definition.<P>
As of this writing, I have only one compiler that supports forward declaration of nested classes, Borland 4.0 for DOS and Windows, but I've grown fond of this feature very quickly. I think nested classes are great for namespace and access control, but nested classes defined in situ can really clutter the enclosing class definition. I think forward declarations are much more readable. Granted, there are times when you must complete the nested class inside the enclosing class, but I find they are fairly uncommon. I'll be using this feature whenever I can.<P>
By the way, the default behavior of the Borland compiler is to warn you that you should be using the fully qualified name <I>lns::node</I> inside the definition of <I>lns::node</I> rather than using the unqualified name node. That is, the folks at Borland want you to write the class definition as<P>
<pre>class lns::node
   {
public:
   lns::node(unsigned n);
   unsigned number;
   lns::node *next;
   };</pre>
I don't see the need for this warning, so I turned it off using the <I>-w-nst</I> compiler switch.<P>
If your compiler does not yet support forward declaration of nested classes, then move the <I>node</I> definition back inside the <I>lns</I> definition. Specifically, delete the forward declaration for <I>node</I> that appears inside class <I>lns</I>. Then move the complete definition for <I>lns::node</I> into <I>lns</I> in place of the deleted declaration. Be sure to delete <I>Ins::</I> from the heading of the nested class.<P>
<I>lns1a.h</I> in <A href="list4.htm">Listing 4</a>
contains two inline member function definitions. I prefer to place inline member function definitions outside their class definitions for the same reason I prefer forward class declarations. It's a little more verbose, but a lot more orderly.<P>
Outside the scope of class <I>lns,</I> you must refer to the <I>lns::node</I> constructor as <I>lns::node::node.</I> The body of the <I>lns</I> constructor is in the scope of class <I>lns</I>, so it can refer to <I>lns::node</I> as just <I>node</I>.<P>
<I>lns::add</I> always adds a new line number at the end of the list. Therefore, this implementation using a single pointer to the head of the list must scan the list every time to find the last element just to tack the new number on the end. As an alternative, <I>lns</I> can maintain a separate pointer to the last element in the list. This eliminates the need to scan the list each time and greatly simplifies the logic of <I>lns::add</I>, at the cost of one additional pointer per cross-reference entry. The header for this implementation is <I>lns1b.h</I> (<A href="list6.htm">Listing 6</a>)
. The corresponding member function definitions are in <I>lns1b.H</I> (<A href="list7.htm">Listing 7</a>)
.<P>
<A href="list8.htm">Listing 8</a>
shows a makefile that will build the entire cross-reference program. It refers to the <I>lns</I> header and source file as <I>lns.h</I> and <I>lns.cpp</I>, respectively. To build the program using the <I>lns</I> implementation with one pointer, copy <I>lns1a</I>. * to <I>lns</I>.*, and then run <I>make</I>.<P>
To use the other <I>lns</I> implementation, copy <I>lns1b</I>.* to <I>lns</I>.*, and run <I>make</I>. You should see <I>make</I> rebuild the entire program, because all the source files depend on <I>lns.h</I>, which just changed. (Some systems, notably MS-DOS, don't update the time stamp on the file that's the target of a copy. When you run <I>make</I> after copying the <I>lns</I> files, nothing happens because <I>make</I> thinks all the files are up-to-date. If that happens, you should use a utility like <I>touch</I> to update the time stamps on the <I>lns</I>.* files. Then make will know that the files have changed.)<P>
Both versions of the <I>lns</I> class are in what <a href="#coplien">Coplien [1992]</a> calls the <I>canonical form</I>, where the class definition contains private data members that reflect a particular implementation. When you change the implementation, you typically change the header as well as the source file. Changing the header can trigger a massive recompilation.<P>
To avoid recompilation whenever you change the <I>lns</I> implementation, you must design a single <I>lns</I> header that works with both implementations, as well as with any others as yet unwritten. The Cheshire Cat technique helps you do just that.<P>
<h4><FONT COLOR="#000080"><A name="00CF_0065">Cheshire Cat Classes<A name="00CF_0065"></FONT></h4></P>
<a href="#carolan">Carolan [1989]</a> coined the term "Cheshire Cat" to describe his technique for separating the implementation details for a class from its public interface using handle classes and incomplete types. You can transform a class <I>X</I> from its canonical form to its Cheshire Cat form by following these steps:<P>
1. move <I>X</I>'s private members to a separate implementation details class outside <I>X</I>'s header file<P>
2. declare the implementations details class as an incomplete type in <I>X</I>'s header<P>
3. replace <I>X</I>'s private members with a single pointer to the implementation details class<P>
4. rewrite <I>X</I>'s public members as non-inline functions which operate on and manage an implementation details object.<P>
<A href="list9.htm">Listing 9</a>
shows <I>lns2.h</I> containing a new definition for class <I>lns</I> as a Cheshire Cat class. The public members are the same as before (in <A href="list4.htm">Listing 4</a>
and <A href="list6.htm">Listing 6</a>)
, but the private data is now just a single pointer, <I>dp</I>, to an object of incomplete type <I>lns::details</I>. This one header now serves both implementations for class <I>lns</I>.<P>
<A href="list10.htm">Listing 10</a>
shows <I>lns2a.cpp</I>, the implementation of <I>lns</I> using a single pointer. The completed definition for nested type <I>lns: :details</I> looks almost identical to the <I>lns</I> class in canonical form that appears in <A href="list4.htm">Listing 4</a>.
 The only difference is the class name, and hence, the names appearing in the declarations for the constructor and destructor (<I>details</I> instead of <I>lns</I>). By the same token, the nested class <I>lns::details::node</I> is identical to class <I>lns::node</I> in <A href="list4.htm">Listing 4</a>,
 except for its name. The fully-qualified name <I>lns: :details::node</I> indicates that <I>node</I> is a nested class within a nested class.<P>
The constructor for <I>lns::details::node</I> is the same as the constructor for <I>lns::node</I> in <A href="list4.htm">Listing 4</a>.
 Similarly, all the member functions for <I>lns::details</I> are the same as the corresponding functions in <A href="list4.htm">Listing 4</a>.
 Again, all I've done is push the functionality of <I>lns</I> in canonical form down into the <I>lns::details</I> class.<P>
At the end of <A href="list10.htm">Listing 10</a>
are the new public member function definitions of <I>lns</I> itself. The constructor creates the <I>details</I> object. The destructor destroys it. And each of the other member functions does what it always did, except now it invokes the corresponding member function of the <I>details</I> class to do the real work.<P>
I wrote <I>lns2a.cpp </I>(<A href="list10.htm">Listing 10</a>)
 to make it easier for you to recognize the similarities with <I>lns1a.cpp</I> (<A href="list5.htm">Listing 5</a>)
. In practise, you need not maintain such a rigorous separation between the handle object (in this case, of type <I>lns</I>) and the body object (of type <I>details</I>). After all, what's the point of hiding <I>details</I>' data members from <I>lns</I>; they're all part of the same implementation. You can safely make the data members of <I>lns::details</I> public because <I>details</I> itself is private to <I>lns</I>. I don't think this compromises the design at all.<P>
For example, if the <I>lns::details</I> data member's are public, you can rewrite the <I>lns</I> constructor as<P>
<pre>lns::lns(unsigned n)
   {
   dp = new details;
   dp-&gt;first = new node(n);
   }</pre>
and simply eliminate the <I>lns::details</I> constructor altogether.<P>
<A href="list11.htm">Listing 11</a>
shows <I>lns2b.cpp</I>, the implementation of class <I>lns</I> using two pointers. In this implementation, the <I>lns::details</I> data members are public. <I>lns::details</I> has no member functions, and all the work they would have done is in the <I>lns</I> member functions. If you compare this Cheshire Cat class with its canonical form (<A href="list6.htm">Listing 6</a>
and <A href="list7.htm">Listing 7</a>)
, you should still recognize the common functionality.<P>
I'll continue my look at compilation firewalls next month.<P>
<h4>References</FONT></h4></P>
<a name="booch"></a>Booch [1991]. Grady Booch, Software Development '91 Conference Keynote Address "Object-Oriented Technology: An Engineering Perspective."<P>
<a name="carolan"></a>Carolan [1989]. John Carolan, "Constructing Bullet-Proof Classes," <I>C++ at Work '89 Proceedings</I>. SIGS Publications.<P>
<a name="coplien"></a>Coplien [1992]. James O. Coplien, <I>Advanced C</I>++ <I>Programming Styles and Idioms</I>. Addison-Wesley.<P>

<h4><a href="../../../source/1994/apr94/saks.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
