

<HTML>
<HEAD>

<TITLE>April 1994/Approximate String Matching</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocapr.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">Approximate String Matching<A name="00C4_0058"><A name="00C4_0058"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="00C4_0000"><A name="00C4_0000">Thomas Phillips</font></h3><hr><blockquote><P>
<P><i><A name="00C4_0000"><A name="00C4_0000">Thomas Phillips, CCP, is a member of the ACM, IEEE:CS, ACL, SIAM, and AMTA. His interests include linguistics, computational<I></I> <I></I>linguistics, parallel processing, and cognitive science. He can be reached via e-mail at 72713.2100@compuserve.com.</i></P><P>
<h4><FONT COLOR="#000080"><A name="00C4_0059">Introduction<A name="00C4_0059"></FONT></h4></P>
People aren't perfect. Unfortunately, computers often demand perfection, sometimes unjustly. One example is when the user must type in a word or a string of words to tell a program what to do. Suppose you have a database filled with names and addresses; you can write a program that allows a user to search by name, but if you're not careful the program will be too selective. Let's say the last name is Xavier, but the user thinks the name is spelled Zavier. If your program uses a simple <I>strcmp</I>, it won't find the name. What you need is a function to perform approximate matches. That's what <I>freq_match</I> does (see <A href="list1.htm">Listing 1</a>)
 &#151; it finds the closest match based on frequency distributions.<P>
<h4><FONT COLOR="#000080"><A name="00C4_005A">Matching via Frequency Distributions<A name="00C4_005A"></FONT></h4></P>
The frequency distribution of a word shows how many times each letter occurs. For example, the frequency distribution of the word "LETTER" would be: L-1, E-2, T-2, R-1. If you find the frequency distributions of two different words, you can compare them for similarity in spelling.<P>
The function <I>freq_match</I> uses the array <I>freq_count[]</I> to compare the distributions of two words. Each element in <I>freq_count[]</I> holds the distribution for its respective character. For example, the ASCII value for an 'a' is 97 (or 61H). If a word being analyzed contained three a's (like aardvark), then <I>freq_count[97]</I> would equal 3. (Note that <I>freq_count[0]</I> shouldn't really be used; you would only expect one NULL in a string.)<P>
<h4><FONT COLOR="#000080"><A name="00C4_005B">Comparing Two Distributions<A name="00C4_005B"></FONT></h4></P>
Once <I>freq_count[]</I> is loaded with the distribution for one word (what I call the <I>mask</I> word), it's simple to calculate a number that tells how closely the mask word matches another word (the <I>test</I> word). I call this number the <I>divergence</I>. To start, let <I>freq_count[]</I> hold the frequency distribution of the mask word. Next, subtract from it the frequency distribution of the test word. Take the words "aardvark" and "apple," for example. The mask word is "aardvark," so<P>
<pre>freq_count['a'] is 3,
freq_count['r'] is 2,
freq_count['d'] is 1,
freq_count['v'] is 1,
freq_count['k'] is 1,
and all others are 0.</pre>
After the first letter of "apple" is processed, <I>freq_count['a']</I> equals 2. This is because my algorithm subtracts while it processes the test word. After all the letters of the test word have been processed, <I>freq_count[]</I> will be as follows:<P>
<pre>freq_count['a'] is 2,
freq_count['r'] is 2,
freq_count['d'] is 1,
freq_count['v'] is 1,
freq_count['k'] is 1,
freq_count['p'] is -2,
freq_count['l'] is -1,
and freq_count['e'] is -1.</pre>
Finally, the algorithm adds up the absolute values of each of <I>freq_count's</I> elements. The elements not listed (such as <I>freq_count['q']</I>) are assumed to contain zeros. The total, or divergence, is 11. This huge divergence indicates that "aardvark" and "apple" are quite disimilar. However, had I compared "aardvark" with its misspelling, "ardvark," I would have arrived at a divergence of 1, indicating extreme similarity.<P>
<h4><FONT COLOR="#000080"><A name="00C4_005C">Using <B><I>freq_match</I><A name="00C4_005C"></B></FONT></h4></P>
Using the <I>freq_match</I> function requires two steps. First, the program must initialize the distribution array by passing it a valid mask word and an empty string for the test word. An example would be:<P>
<pre>freq_match("aardvark", "");</pre>
The second parameter must be an empty string &#151; <I>find_match</I> uses this empty string as a switch enabling initialization. Since <I>freq_match</I> stores the mask word's frequency distribution in a static array (<I>freq_count[]</I>), it only needs to load each unique mask word once. In subsequent calls to <I>freq_match</I>, the first parameter is ignored as long as the second parameter is not an empty string. The second parameter should contain a valid test word. For example, once "aardvark" has been loaded, you can test its divergence from "apple" by using this statement:<P>
<pre>divergence = freq_match("", "apple");</pre>
The return value will be 11.<P>
To use <I>freq_match</I>, call it for each word in your list of test words. Keep track of the minimum divergence and its corresponding test word. After you've gone through the entire list of words (or optionally stopping when you find a divergence of zero), accept the test word with the minimum divergence as the most similar word.<P>
<h4><FONT COLOR="#000080"><A name="00C4_005D">Anagrams and Other Problems<A name="00C4_005D"></FONT></h4></P>
Frequency distributions are great for most approximate matches, unfortunately, they can't discriminate between a word and one of its anagrams. For example, "TAB" is an anagram for "BAT." The frequency distribution for either of these words is: T-1, A-1, B-1. One possible solution to this problem is to test the first or last letters of the mask and test words. If one or both match, then reduce the divergence by some constant number. If they don't match, increase the divergence. For example:<P>
<pre>divergence+=(mask_word[0]==test_word[0]) ?
          ((divergence&gt;0) ? -1 : = 0) : 1;</pre>
This strategy will slow down the matching process, though. In addition, it can introduce some of its own problems (like matching "BIG" with "BOG").<P>
Should you throw away <I>strcmp</I> and use <I>freq_match</I> for all of your string matching needs? Obviously no, but there are places where <I>freq_match()</I> is very useful. <I>freq_match</I> works best when a mask word must be found in a relatively small list of test words (a few hundred or less). Typically, you would use this function in applications where human errors are also frequent &#151; and that covers a lot of ground.<P>

<h4><a href="../../../source/1994/apr94/phillips.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
