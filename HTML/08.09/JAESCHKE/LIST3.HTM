<HTML><HEAD><TITLE>September 1990/Doctor C's Pointers/Listing 3</TITLE></HEAD><BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4><A name="0201_0129"><A name="0201_0129">Listing 3<A name="0201_0129"></h4><P>
<pre>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#define NUMELEM(a) (sizeof(a)/sizeof(a[0]))

struct tag {
   int count;
   char *desc;
};

main()
{
   int cmpstia(const void *, const void *);
   int cmpstid(const void *, const void *);
   int cmpstsa(const void *, const void *);
   int cmpstsd(const void *, const void *);
   
   static struct tag array[] = {
      {123, "beds"},
      {27, "tables"},
      {17, "chairs"},
      {95, "desks"}
   };
   int (*cmpfun[])(const void *, const void *) = {
      cmpstia, cmpstid, cmpstsa, cmpstsd
   };
   int option = 0;
   int i;
   
   puts("1. Sort by ascending count");
   puts("2. Sort by descending count");
   puts("3. Sort by ascending description");
   puts("4. Sort by descending description\n");
   
   while (1) {
      printf("Enter option: ");
      scanf("%1d", &amp;option);
      if (option &lt; 1 || option &gt; 4)
         puts("Invalid option");
      else
         break;
   }
   
   qsort(&amp;array[0], NUMELEM(array), sizeof(struct tag),
      cmpfun[option - 1]);
   
   for (i = 0; i &lt; NUMELEM(array); ++i)
      printf("array[%d]: count = %3d, desc = &gt;%s&lt;\n",
         i, array[i].count, array[i].desc);
   
   return 0;
}

/*  compare ints in ascending order */

int cmpstia(const void *pe1, const void *pe2)
{
   return ((struct tag *)pe1)-&gt;count -
      ((struct tag *)pe2)-&gt;count;
}

/*  cmpstid ints in descending order */

int cmpstid(const void *pe1, const void *pe2)
{
   return ((struct tag *)pe2)-&gt;count -
      ((struct tag *)pe1)-&gt;count;
}

/*  compare strings in ascending order */

int cmpstsa(const void *pe1, const void *pe2)
{
   return strcmp(((struct tag *)pe1)-&gt;desc,
      ((struct tag *)pe2)-&gt;desc);

}

/*  compare strings in descending order */

int cmpstsd(const void *pe1, const void *pe2)
{
   return -strcmp(((struct tag *)pe1)-&gt;desc,
      ((struct tag *)pe2)-&gt;desc);
}

Output:

1. Sort by ascending count
2. Sort by descending count
3. Sort by ascending description
4. Sort by descending description

Enter option:1
array[0]: count =  17, desc = &gt;chairs&lt;
array[1]: count =  27, desc = &gt;tables&lt;
array[2]: count =  95, desc = &gt;desks&lt;
array[3]: count = 123, desc = &gt;beds&lt;

Enter option:2
array[0]: count = 123, desc = &gt;beds&lt;
array[1]: count =  95, desc = &gt;desks&lt;
array[2]: count =  27, desc = &gt;tables&lt;
array[3]: count =  17, desc = &gt;chairs&lt;

Enter option:3
array[0]: count = 123, desc = &gt;beds&lt;
array[1]: count =  17, desc = &gt;chairs&lt;
array[2]: count =  95, desc = &gt;desks&lt;
array[3]: count =  27, desc = &gt;tables&lt;

Enter option:4
array[0]: count =  27, desc = &gt;tables&lt;
array[1]: count =  95, desc = &gt;desks&lt;
array[2]: count =  17, desc = &gt;chairs&lt;
array[3]: count = 123, desc = &gt;beds&lt;
</pre>
</BODY></HTML>
