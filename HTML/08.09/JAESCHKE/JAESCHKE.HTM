


<HTML>
<HEAD>

<TITLE>September 1990/Doctor C's Pointers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocsep.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Doctor C's Pointers &reg;<A name="0201_011B"><A name="0201_011B"></font></h2><P>
<h3 align="center"><A name="0201_0000"><A name="0201_0000">Using The Quicksort Function</h3><P>
<h3 align="center"><font color="#800000">Rex Jaeschke</font></h3><hr><blockquote><P>
<P><i><A name="0201_0000"><A name="0201_0000">Rex Jaeschke is an independent computer consultant, author and seminar leader. He participates in both ANSI and ISO C Standards meetings and is the editor of The Journal of C Language Translation, a quarterly publication aimed at implementers of C language translation tools. Readers are encouraged to submit column topics and suggestions to Rex at 2051 Swans Neck Way, Reston, VA 22091 or via UUCP at uunet!aussie!rex or aussie!rex@uunet.uu.net.</i></P><P>
For quite some time, the C library has had a sort function called <I>qsort</I>. According to ANSI C, qsort now lives in the header <I>stdlib.h</I>. Prior to ANSI C, this header did not exist so <I>qsort</I> was often declared in some other header or more likely, explicitly declared by the programmer each time it was used.</FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0201_011C">Introduction<A name="0201_011C"></FONT></h4></P>
<I>qsort</I> uses the quicksort method to sort the elements of an array into ascending order. Its prototype is:</FONT></FONT><P>
<pre>void qsort(void *base, size_t
   nmemb, size_t size,
   int (*compar)(const void *,
   const void *));</pre>
where <I>base</I> is the address of the first element of the array to be sorted; <I>nmemb</I> is the number of elements to be sorted starting at address base; <I>size</I> is the number of bytes in each element in the array; and <I>compar</I> is a pointer to a user-supplied function to be used in element comparisons. (You may recall from previous discussions that <I>size_t</I> is a type declared in a number of standard headers besides <I>stdlib.h</I>; it is the unsigned integer type returned by the <I>sizeof</I> operator.) The comparison function returns a negative value if the first argument tests less than the the second, a zero if they are equal, else a positive value. This is just like the library function <I>strcmp</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Since a <I>void</I> pointer is assignment-compatible with any data pointer, the first argument to <I>qsort</I> may be the address of any data type. When <I>qsort</I> is actually called, the pointer passed will be converted, as if by assignment, to a <I>void</I> pointer. (For most systems, such a cast results in no code being generated since all their pointer types have the same representation.)</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<I>qsort</I> walks through an array, given the base address, element size, and element count, using some interesting casts. Note that <I>base</I> is not a <I>const</I> <I>void</I> * since <I>qsort</I> typically must modify some or all of the elements in the array passed. However, both arguments to <I>compar</I> are pointers to <I>const</I> <I>void</I> since the comparison function should not modify the data it's comparing.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0201_011D">Sorting A List Of Integers<A name="0201_011D"></FONT></h4></P>
To ease into using <I>qsort</I> we'll begin by sorting an array of six <I>ints</I> into ascending order.</FONT></FONT></FONT></FONT><P>
The array of six <I>ints</I> has automatic storage duration. Historically, such arrays were not permitted to have initializer lists, although ANSI C now supports this capability. If your compiler complains, simply add the <I>static</I> keyword to the declaration.</FONT></FONT></FONT></FONT><P>
After you define the comparison function <I>cmpia</I>, calling <I>qsort</I> is quite straightforward.</FONT></FONT></FONT></FONT><P>
<I>cmpia</I> compares two <I>ints</I> whose addresses are passed. However, <I>cmpia</I> takes two <I>void</I> pointers, not <I>int</I> pointers. Since you cannot dereference a <I>void</I> pointer, a private copy of each argument is made in an <I>int</I> pointer. Note that without the <I>const</I> qualifier on the <I>int</I> pointers, your compiler may issue a warning since assigning a pointer to <I>const</I> to a pointer to non-<I>const</I> can lead to undefined behavior. Using two <I>int </I>pointers, you can easily compare the underlying <I>ints</I> and return the appropriate indicator, as shown.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
I have developed the habit of using <I>return 0</I> at the end of <I>main</I>, otherwise my compiler warns me I've failed to return a value from a non-<I>void</I> function. I find this message annoying so rather than ignore it, or worse yet, declare <I>main</I> (incorrectly) as a <I>void</I> function, I take the trouble of actually returning this exit status code even if it is never used. On some systems (VAX/VMS, for example), zero might not signify a success value, in which case you should either return the <I>stdlib.h </I>macro <I>EXIT_SUCCESS</I> or some other passive value.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The variables <I>pi1</I> and <I>pi2</I> are really unnecessary and can be replaced by a cast as follows (although you could argue the code is not as clear):</FONT></FONT></FONT></FONT><P>
<pre>int cmpia(const void *pe1, const void *pe2)
{
   if (*(int *)pe1 &lt; *(int *)pe2)
      return -1;
   else if (*(int *)pe1 == *(int *)pe2)
      return 0;
   else
      return 1;
}</pre>
An even simpler solution eliminates the test as well.<P>
<pre>int cmpia(const void *pe1, const void *pe2)
{
   return *(int *)pe1 - *(int *)pe2;
}</pre>
To sort the elements into descending order, you simply reverse the sense of the comparison function as follows:<P>
<pre>int cmpid(const void *pe1, const void *pe2)
{
   return *(int *)pe2 - *(int *)pe1;
}</pre>
which produces the output:<P>
<pre>descending integer order

array[0] = 25
array[1] = 24
array[2] = 22
array[3] =  3
array[4] =  3
array[5] = -5</pre>
<h4><FONT COLOR="#000080"><A name="0201_011E">The Need For Custom Comparisons<A name="0201_011E"></FONT></h4></P>
The comparison function is called directly from <I>qsort</I>, not from the user-written program. One consequence of following the prescribed interface is that you need a custom-built version of the comparison function for each type of comparison. <I>cmpia</I> and <I>cmpid</I> can handle only ascending and descending sorts for <I>signed ints</I>. They cannot handle such orders for arrays of type <I>char, short</I>, or <I>long int</I>. Each type requires its own version.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Consider the case where the input array contains unsigned integer values (of any type). In such cases we must revert to the <I>if</I> tests shown in <A href="list1.htm">Listing 1</a>
since subtracting one unsigned value from another can never result in a negative value.</FONT></FONT><P>
If you called the comparison function directly, you could make it more general-purpose so as to handle ascending and descending orders for a given type. Doing so would require an extra argument, however, and <I>qsort</I> calls the comparison function with only two. Of course, you could always use a global flag. In any event, the tradeoff would be using several smaller and probably faster, individual comparison functions versus using a few larger, more general-purpose ones that make decisions on which way to sort.</FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0201_011F">Sorting A List Of Strings<A name="0201_011F"></FONT></h4></P>
<I>qsort</I> is described as sorting the elements in an array. However, what if a given array does not actually contain the data to be sorted, but rather pointers to that data? <A href="list2.htm">Listing 2</a>
contains code in which the strings are pointed to by an array of pointers to <I>char</I>.</FONT></FONT></FONT></FONT><P>
Now this is very useful. <I>qsort</I> doesn't necessarily sort based on the contents of the array elements. In fact, <I>qsort</I> simply traverses the underlying array a pair of elements at a time, swapping those elements as directed by the comparison function. And since we write the source to that function, we can chose to interpret the data directly or to treat the element as a pointer (to some level) to the data to be sorted.</FONT></FONT></FONT></FONT><P>
In this example, <I>cmpstra</I> is given the addresses of two <I>char </I>pointers, hence the (<I>char</I> **) casts on <I>pe1</I> and <I>pe2</I>. The expression *(<I>char</I> **)<I>pe1</I> has type <I>char</I> * and its value is the address of the first string. Since <I>strcmp</I> will do the job nicely, we call it directly.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
A function that simply calls another function and does no other work should raise a red flag &#151; that perhaps the first function should really be a macro. However, you cannot take the address of a macro and <I>qsort</I> needs a function address as its last argument.</FONT></FONT><P>
To sort the strings in descending order, you simply negate the result returned from <I>strcmp.</I></FONT><P>
<pre>int cmpstrd(const void *pe1, const void *pe2)
{
   return -strcmp(*(char **)pe1, *(char **)pe2);
}</pre>
The output will be<P>
<pre>descending string order
array[0] = xyz
array[1] = abc
array[2] = Xy
array[3] = Abc
array[4] = 1234</pre>
<h4><FONT COLOR="#000080"><A name="0201_0120">Sorting Structures<A name="0201_0120"></FONT></h4></P>
Sorting an array of structures is a little more complicated. In this example each element in the array of structures contains an object count and description for some arbitrary objects, in this case furniture pieces. It might be useful to sort the structures into either ascending or descending order by count or by description, at the user's pleasure. <A href="list3.htm">Listing 3</a>
contains one solution.<P>
The array <I>cmpfun</I> is a list of function pointers which correspond to the option entered, making it easier to setup the last argument to <I>qsort.</I></FONT></FONT></FONT><P>
The validation of the input option is hardly robust, but adequate for this example.<P>
<h4><FONT COLOR="#000080"><A name="0201_0121">Using The <B><I>offsetof</I></B> Macro<A name="0201_0121"></FONT></h4></P>
Note how each comparison function in <A href="list3.htm">Listing 3</a>
is locked into the structure type. The explicit <I>struct</I> pointer cast is needed to access the correct member within that structure. Consider the case where each structure contains a number of members of the same type. It should be possible to use a general-purpose comparison function that works for all of them. This arrangement, however, would require a global variable the user could set to indicate the offset of the member to be compared.</FONT></FONT><P>
By using the address passed into the comparison function, you could perform some fancy pointer casts to access any given type of object at any offset from the structure's beginning. In fact, given the structure address as a <I>void</I> pointer and the offset, you don't even need to know the structure's type. That is, the comparison function would work for all structure types containing a given member type. You would compute the offset value using the <I>offsetof</I> macro in <I>stddef. h</I><I>.</I> Sounds great, let's give it a try.</FONT></FONT></FONT></FONT></FONT></FONT><P>
The function <I>cmpstia</I> in <A href="list4.htm">Listing 4</a>
contains some real pointer expressions. The program actually works and in the bargain, I've finally found a use for <I>offsetof</I>. In fact, I'm sure the code is portable, as well as ANSI-conforming.</FONT></FONT></FONT></FONT><P>
This approach can, in fact, be used to sort any <I>ints</I>; they don't even have to be in a structure. To sort an array of <I>ints</I><I>,</I> simply define <I>offset</I> to be zero so that the pointers passed to the comparison function are treated as actually pointing to an <I>int</I> rather than to the base of a structure containing an <I>int</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0201_0122">Multikey Sorts<A name="0201_0122"></FONT></h4></P>
<I>qsort</I> sorts elements according to one key. To sort elements using two keys, you must first sort them on the primary key. Then for each unique primary key value, you count up the number of duplicates and use <I>qsort</I> to sort them once you make <I>base</I> point to the first in that sublist. You then repeat the process for other keys.</FONT></FONT></FONT></FONT></FONT></FONT><P>
Consider the case of an array of pointers to strings. You wish to search first on columns 1-4 then on 10-15. You could use <I>strncmp</I> for the comparisons for both keys, but you would need a global variable to notify <I>strncmp</I> where to begin comparing.</FONT></FONT><P>
The code that lets your comparison function know where to start is relatively straightforward although I'm not sure this method is the best way to write an efficient multikey sort.<P>
<h4><FONT COLOR="#000080"><A name="0201_0123">Special Sorting Orders <A name="0201_0123"></FONT></h4></P>
There are other sorting sequences than those used here. For example, a dictionary sort would ignore case and possibly punctuation as well. A telephone directory sort might treat names beginning with 'Mac' and 'Me' the same. A phonetic sort would ignore certain letter patterns resulting in more duplicates. How could you implement these with <I>qsort</I>?</FONT><P>
The comparison function must make a private copy of the converted input data before it performs the comparison. In no case is the function permitted to modify the elements to which its arguments point. (They have the <I>const</I> protection) And in any event, you don't want to modify them since you could not restore them later on.</FONT></FONT><P>
If you could know the maximum length of the strings, you could allocate a local buffer (automatic if the code is to be reentrant, else static is OK) to store converted strings prior to comparison. If this size was not known, you could use <I>strlen</I> and <I>malloc</I> to allocate memory dynamically. However, allocating and freeing memory every time the comparison function is called could be quite expensive. And an even bigger issue is converting the same input strings many many times, since the conversion is done each time the comparison function is called.</FONT></FONT></FONT></FONT><P>
A much better solution would be a two-dimensional array of pointers. The first pointer in each row would point to the original string, and the second would point to the converted string. Then you sort based on the second pointer finally traversing the array via the first pointer to get the sorted strings. That is, the comparison function is not involved in the string conversion at all.<P>

<h4><a href="../../../source/1990/sep90/jaeschke.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
