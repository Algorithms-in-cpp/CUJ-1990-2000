


<HTML>
<HEAD>

<TITLE>September 1990/Complex Function Library</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocsep.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">Complex Function Library<A name="01FD_0117"><A name="01FD_0117"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="01FD_0000"><A name="01FD_0000">Maynard A. Wright, P. E.</font></h3><hr><blockquote><P>
<P><i><A name="01FD_0000"><A name="01FD_0000">Maynard A. Wright is a self-employed consultant in telecommunications based in Citrus Heights, California with 28 years of experience in the industry. Wright is registered as a professional electical engineer in California and is currently active in two working groups which are developing national standards for telecommunications (ANSI/ECSA TIM1.3 and IEEE P743). He was awarded the Centennial Medal of the Institute of Electrical and Electronics Engineers (IEEE) in 1984 and currently holds both local and national positions in IEEE. You can contact him at 6930 Enright Drive, Citrus Heights, CA 95621 (916) 726-1673.</i></P><P>
As an engineer I occasionally program, usually to model some aspect of a communications system. Until recently I used FORTRAN almost exclusively because much of what I do involves manipulating complex variables. For short throwaway programs I have often used BASIC. FORTRAN's convenient operations on variables of complex type are superior to those in BASIC. The BASIC code is rife with the sines, cosines and arctangents that are required to implement polar-to-rectangular and rectangular-to-polar conversions, and the code is not nearly as readable as its FORTRAN counterpart.<P>
A recent project required writing code for a client's staff who didn't speak FORTRAN. I bought a Microsoft QuickC compiler and quickly found that tasks which are best done in FORTRAN by linking in an assembly routine can be done directly in C. QuickC code is also portable to other compilers and systems.<P>
Unfortunately for me, C lacks a complex data type. I solved this by using the same techniques that work well in BASIC. A language as versatile as C must have a better solution.<P>
David Messerschmitt <a href="#note1">[1]</a> proposes passing structures to and returning structures from functions to produce readable complex functions. This method provides source code that seems every bit as readable as that of FORTRAN:<P>
<pre>FORTRAN:    Z = X + Y
C:          z = cmplx_add(x, y);</pre>
where <I>x, X, y, Y, z</I> and <I>Z</I> are complex. Although the FORTRAN code is identical to an algebraic expression, the C code is equally clear as long as the reader is aware of the complex library functions prefixed by <I>cmplx</I>_ or by the letter <I>c</I>. BASIC or C code without the complex data type would require several statements to perform the same computation, depending on whether the arguments were available in rectangular or polar form and on the desired form of the return.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Although Messerschmitt's method seems an excellent way to handle complex functions in C, at least some C texts imply dark happenings if structures are passed to and/or returned from functions. Most of the warnings include the qualifier "long," but at least one reference, the <I>QuickC v1.01 Programmer's Guide</I> <a href="#note2">[2]</a>, states that you should not write functions that have structure or <I>union</I> return types due to the large size of such objects. The reader is left, however, with a sense that functional doom awaits those who ignore such admonitions.</FONT></FONT><P>
The warnings left me a little uneasy about writing my own C complex function library in order to cast off my last ties to FORTRAN. How large is long when applied to a structure? Two <I>doubles</I> occupy 16 bytes on my system. Is that long in the sense of the concern about structure arguments and returns?</FONT></FONT><P>
<I>[Editor's note: The sky won't fall, but programmers who return structures risk creating non-portable code and inefficient code. One cannot portably return structures because many preANSI compilers did not support structure passing by value. Compilers that do support structure passing usually do so with some type of copy mechanism. It is potentially very inefficient to copy an entire structure from the calling routine into a local space and then copy the structure back at exit.]</I><P>
In order to test the waters a bit, I wrote three versions of a function to calculate the complex hyperbolic sine of a complex argument: one which accepts a structure containing two <I>doubles</I> and returns a structure of the same form as proposed by Messerschmitt, a second which accepts a pointer to a global array containing two <I>doubles</I> and returns a pointer to another such array, and a third which obtains space for <I>doubles</I> representing arguments and returns using <I>malloc()</I> and accepts and returns pointers to that space.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The source code (<A href="list1.htm">Listing 1</a>, <A href="list2.htm">Listing 2</A>, and
<A href="list3.htm">Listing 3</a>)
 was compiled and linked using QuickC's <I>QCL.EXE</I><I>.</I> The computation of the complex hyperbolic sine was performed 5,000 times in a <I>for</I> loop in each version. Execution was timed using <I>getticks()</I> as described in Proficient C, pages 144-146 <a href="#note3">[3]</a>. Since I only wanted to compare the three versions' runtime converting the BIOS ticks to actual elapsed time was unnecessary. <A href="table1.htm">Table 1</a>
contains the values obtained by compiling, linking and running the functions on an 8088 XT clone with an installed 8087.</FONT></FONT></FONT></FONT><P>
<A href="list3.htm">Listing 3</A>'s longer runtime results from calling <I>malloc()</I> and then <I>free()</I> during every iteration of the program. Using pointers to global arrays seems to provide about a five percent improvement in execution speed over passing and returning structures. Using the array pointers, however, makes the source code considerably less readable and makes functions considerably less independent. This militates in favor of using Messerschmitt's structures.</FONT></FONT></FONT></FONT><P>
Armed with this data, I wrote a complex function library containing complex add, subtract, multiply and divide and most of the various transcendental functions. <A href="list4.htm">Listing 4</a>
contains the source code for the library, and <A href="list5.htm">Listing 5</a>
shows the associated header file. I have thoroughly tested functions <I>ctanh</I> (complex hyperbolic tangent) and <I>catnh</I> (inverse complex hyperbolic tangent). All the other functions in the library have been tested to at least some extent.</FONT></FONT></FONT></FONT><P>
To avoid conflict with the complex structure type of the Microsoft C library declared in <I>math.h</I>, the structure type used by the complex function library is named <I>cmplx_nmbr</I>. Using Microsoft's declaration of type <I>complex</I> in <I>math.h</I> is tempting, but doing so inhibits porting to other compilers because the <I>complex</I> type is not part of the ANSI standard. Microsoft uses the complex type only in implementing the <I>cabs()</I> function, which accepts a structure containing two <I>doubles</I> and returns a single <I>double</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The complex function library includes a rudimentary error handler <I>err_hndlr()</I>, which is invoked if <I>errno</I> is non-zero after computing the return value of each function. For most applications I envision, terminating execution seems appropriate for any call to <I>err.hndlr()</I>; therefore, the function is written to carry out that action.</FONT></FONT></FONT></FONT></FONT></FONT><P>
The library as presented here does not include all possible transcendental functions. The code for additional functions may be added by looking up the appropriate closed form expressions in mathematical reference works. Functions which do not exist in closed form may be calculated by using truncated infinite series.<P>
With some compilers, there may be considerable benefit derived from specifying the various functions as independent source files and building a library from the resulting independent object modules. I have not done this primarily to keep all the source code in one file.<P>
About the time I thought I had this all wrapped up, Louis Baker introduced his efficient complex arithmetic and matrix macros <a href="#note5">[5]</a>. I wrote another inverse complex hyperbolic sine routine using his technique and compared it with the other three. The source code, in <A href="list6.htm">Listing 6</a>,
 results in<P>
<pre>                        Baker
.OBJ file size           1470
.EXE file size          24210
run time in BIOS ticks    180</pre>
Although the correspondence between <A href="list6.htm">Listing 6</a>
and <A href="list1.htm">Listing 1</a>
through <A href="list3.htm">Listing 3</a>
may not be exact, <A href="list6.htm">Listing 6</a>
is the fastest of them all. The code, however, does not allow a function return to be shown as an <I>lvalue</I>. For maximum readability I use Messerschmitt's structure passing techniques. To squeeze maximum efficiency out of a program, I use Baker's <I>defines</I> or some combination of the techniques already discussed.</FONT></FONT></FONT></FONT><P>
In C, complex structures can be defined in any manner the user desires. The FORTRAN compiler I use requires the two components of a variable declared <I>COMPLEX</I> to be <I>REAL*4</I>, which is comparable to type <I>float</I> in C. This limitation can be quite serious when writing code to perform tasks such as the analysis of transmission lines with high-standing wave ratios. Such lines exhibit impedances with very high and very low values, which may cause loss-of-precision errors when only single-precision variables are available.</FONT></FONT></FONT></FONT></FONT></FONT><P>
<I>zin.c</I> (<A href="list7.htm">Listing 7</a>)
 is a transmission line input impedance program which uses the complex function library. <I>Zin</I> will work for the complex impedances encountered in telephone cable pairs as well as with the high-frequency approximations appropriate to radio transmission lines.</FONT></FONT></FONT></FONT><P>
<I>Zin</I> tandems transmission line sections together to solve such problems as the input impedance of a quarter-wave matching section or the series connection of cable pairs of differing impedances. <I>Zin</I> avoids divide by zero errors by accepting zero impedance inputs and adding a very small number to such an input.</FONT></FONT></FONT></FONT><P>
<I>Zin</I> implements Equation 7.19 of <a href="#note4">[4]</a>:</FONT></FONT><P>
<pre>   Zi / Zo = tanh[(a + jb)d + arctanh(Zt / Zo)]</pre>
where<P>
<pre>   Zi = the input impedance to the line
   Zo = the characteristic impedance of the line
   Zt = the impedance terminating the line
   a  = the attenuation constant of the line
   b  = the phase constant of the line
   d  = the length of the line</pre>
Note that if, in FORTRAN, <I>a + jb</I> (the complex propagation constant of the transmission line or cable pair) is moved into a complex variable <I>CPROP</I>, the code for the preceding equation is:</FONT></FONT></FONT></FONT><P>
<pre>   ZI : (CTANH(CPROP*L+CATNH(ZT/ZO))*ZO</pre>
where:<P>
<pre>   CTANH() = complex hyperbolic tangent function
   CATNH() = inverse complex hyperbolic tangent
           function
   L       = the length of the line (usually as a
           REAL*4)</pre>
This code is almost identical to the algebraic form and is very readable. None of the C techniques resemble the algebraic form as much as does one possible FORTRAN implementation.<P>
The terminal interface portion of <I>zin</I> is relatively user-friendly and rejects inputs that cannot be converted to valid <I>doubles</I> via the keyboard input function <I>get_real()</I><I>. </I><I>Zin</I> and <I>get_real()</I> use Microsoft cursor positioning commands. Though these commands reduce portability, porting to Mix Power C requires only a few minutes.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<I>Zin</I> could be modified to eliminate non-ANSI functions, but the user-friendliness of <I>get_real()</I> depends on repositioning the cursor either following an input error diagnostic message or on completion of input in order to write the converted value over what was actually entered.</FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="01FD_0118">Summary<A name="01FD_0118"></FONT></h4></P>
The complex function library discussed and presented here is something of an experiment in C. The complex function library has been useful in implementating programs such as <I>zin</I> and in wooing me away from FORTRAN.<P>
<h4>References</FONT></h4></P>
<a name="note1">[1]</a>     David G. Messerschmitt, "A Transmission Line Modeling Program Written in C," <I>IEEE</I> <I>Journal on Selected Areas in Communications</I>, Vol. SAC-2, No. 1, January, 1984.<P>
<a name="note2">[2]</a>     <I>Microsoft QuickC Programmer's Guide</I>, Microsoft Corporation, 1987.<P>
<a name="note3">[3]</a>     Augie Hansen, <I>Proficient C</I>, Microsoft Press, 1987.<P>
<a name="note4">[4]</a>     Robert A. Chipman, <I>Theory and Problems of Transmision Lines</I>, Schaum's Outline Series, McGraw-Hill, 1968.<P>
<a name="note5">[5]</a>     Louis Baker, "Complex Arithmetic And Matrices In C," <I>The C Users Journal</I>, May, 1990.<P>


<h4>Sidebar: <A HREF="sidebar.htm">Comples Number Applications</A></h4>

<h4><a href="../../../source/1990/sep90/wright.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY></HTML>
