


<HTML>
<HEAD>

<TITLE>September 1990/XMODEM, XMODEM-1K, And XMODEM/CRC</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocsep.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Communications</FONT></H2>

<hr><h2 align="center"><font color="#800000">XMODEM, XMODEM-1K, And XMODEM/CRC<A name="01F9_0113"><A name="01F9_0113"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="01F9_0000"><A name="01F9_0000">Jonathan Ward</font></h3><hr><blockquote><P>
<P><i><A name="01F9_0000"><A name="01F9_0000">Jonathan Ward is a software engineer for PANDE, Inc. You may contact him at 14275 Midway Rd., Suite 220, Dallas, TX 75244 (214) 242-8628.</i></P><P>
XMODEM, created in 1978 by Ward Christensen, is probably the most available file transfer protocol. XMODEM's simplicity and easy implementation have made it an immediate success. This article will discuss the original XMODEM protocol, as well as several of its many enhancements.<P>
<h4><FONT COLOR="#000080"><A name="01F9_0114">Original XMODEM<A name="01F9_0114"></FONT></h4></P>
XMODEM is a half duplex, 8-bit protocol which transfers files by sending a portion of the file in a data structure called a packet and then waiting for a response to that packet. If the response is positive (indicating successful transmission) the next packet is sent. If the response is negative, the packet is resent.<P>
The original XMODEM protocol transferred 128-byte data blocks with a 1-byte checksum for error detection. The layout of the XMODEM packet is:<P>
<I>SOH</I>(<I>0×01</I>)<br>
Packet Number<br>
<I>1</I>'s Complement of Packet Number<br>
Data (128 bytes)<br>
Arithmetic checksum<P>
All fields except the data field are one byte. The data field contains 128 bytes of either ASCII or binary data that is usually obtained from the file being transferred.<P>
<A href="fig1.htm">Figure 1</a>
shows a simplified progression of a typical transmission. The receiver initiates the transfer by asking the sender to transmit the first data packet. For the original XMODEM, this start character is a <I>NAK (0x15)</I>. Once a packet has been sent, the sender waits for the receiver to respond to the packet. If the receiver responds with an <I>ACK (0x06)</I>,  indicating that the packet was received successfully, the sender transmits the next packet. A <I>NAK</I> indicates the receiver did not receive the packet successfully and sender resends the packet.</FONT></FONT></FONT></FONT></FONT></FONT><P>
After transferring all the packets, the sender signals end-of-transmission with an <I>EOT (0x04)</I> and waits for an <I>ACK</I>. The transmission is complete once the sender receives an <I>ACK.</I></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="01F9_0115">Receiver Time-Outs<A name="01F9_0115"></FONT></h4></P>
The sender and receiver do not wait indefinitely for responses. The protocol sets maximum time and retry figures for the different transmission states.<P>
The receiver initiates the transfer by sending a start character. If no data is received within 10 seconds, the start character is sent again. This process is repeated 10 times before the receiver gives up.<P>
While receiving the packet data, the receiver allows a one-second time-out for each character. There is no retry count. If more than one second elapses between received characters, the packet is <I>NAK</I>ed.</FONT></FONT><P>
After receiving a packet, the receiver sends the packet response. The receiver then waits for the beginning of a packet or for an <I>EOT</I>. If it doesn't receive characters within 10 seconds, the packet response is sent again. If the receiver receives nothing after transmitting the response code 10 times, it aborts the download.</FONT></FONT><P>
There is no time-out or retry on the receiver for the final <I>ACK</I>.</FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="01F9_0116">Sender Time-Outs<A name="01F9_0116"></FONT></h4></P>
Once started, the sender simply waits for a start character from the receiver. If the sender doesn't receive a character or if it counts more than 10 invalid start characters within 60 seconds, it aborts the transfer.<P>
After transferring a packet, the sender waits for the response from the receiver. The time-out for the response is 10 seconds. If no response is received within that time, the packet is resent. After 10 retransmissions of the same packet, the transfer will be aborted.<P>
The final <I>EOT</I> has a time-out of 60 seconds. If no <I>ACK</I> is received within that time, the sender aborts the transfer and returns an appropriate error.</FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="01F9_0117">Relaxed Time-Outs<A name="01F9_0117"></FONT></h4></P>
Several implementations of XMODEM offer a feature called relaxed time-outs or relaxed timing. Relaxed timing allows extra time between characters and packets for large systems like CompuServe. I have excluded relaxed timing from my implementation.<P>
<h4><FONT COLOR="#000080"><A name="01F9_0118">Graceful Abort<A name="01F9_0118"></FONT></h4></P>
Original XMODEM does not provide any method for aborting a download in progress. However, the XMODEM protocol now supports a graceful abort enhancement. When the sender is waiting for a start character, an <I>ACK</I> or <I>NAK</I> after packet transmission, or the final <I>ACK</I>, a <I>CAN</I><I> </I><I>(0x18)</I> character indicates that the receiver has aborted the download.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Likewise, when the receiver is waiting for the first character of the packet, reception of a <I>CAN</I> character indicates that the sender has aborted the download.</FONT></FONT><P>
Some implementations of XMODEM abort the download after receiving a single <I>CAN</I>, while others abort after three consecutive <I>CAN</I> characters. My implementation requires two consecutive <I>CAN</I>s to abort. Because line noise can some sometimes garble characters into a <I>CAN</I>, requiring multiple consecutive <I>CAN</I> characters avoids aborting transfers due to line noise.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
If you are trapped in an XMODEM transfer and wish to abort, hit <I>CTRL-X</I> several times. <I>CTRL-X</I> transmits the <I>CAN</I> character and should abort the transfer.</FONT></FONT></FONT></FONT></FONT></FONT><P>
If the receiver or sender encounters an unrecoverable error condition, XMODEM should abort the transfer on both ends. My implementation sends eight <I>CAN</I> characters followed by eight BACKSPACES (<I>0x08</I>) (so that the <I>CAN</I>s are not displayed as received data).</FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="01F9_0119">XMODEM-1K<A name="01F9_0119"></FONT></h4></P>
XMODEM-1K, an enhanced XMODEM, transmits 1,024 bytes of data per packet rather than the original 128 bytes. To indicate the larger packet size to the receiver, the first character of the packet sent is an <I>STX (0x02)</I>. The layout of the XMODEM-1K packet is:</FONT></FONT><P>
<I>STX </I>(<I>0x02</I>)<br>
Packet Number<br>
<I>1</I>'s Complement of Packet Number<br>
Data (1024 bytes)<br>
Arithmetic checksum<P>
XMODEM-1K may send data in either 128-byte packets or in the larger 1,024-byte packets. This flexibility necessitates the STX in the 1K packets. Once a packet has been sent as either 128-byte or 1,024-byte, it can't be resent in a different size packet.<P>
Other than the larger packet size and the ability to mix large and small packets, XMODEM-1K does not differ from XMODEM.<P>
<h4><FONT COLOR="#000080"><A name="01F9_011A">XMODEM/CRC<A name="01F9_011A"></FONT></h4></P>
XMODEM/CRC offers an increased error detection rate. XMODEM and XMODEM-1K use an arithmetic checksum to detect transfer errors. This 1-byte checksum detects 95 percent of all errors and is generated by summing all the bytes in the data field (excluding the SOH/STX, the packet number, and 1's complement packet number) modulo 256. However, XMODEM/CRC uses a 16-bit CRC (Cyclic Redundancy Check) instead of the checksum. This enhancement causes the error detection rate to exceed 99.997 percent.<P>
The new packet layouts are:<P>
<B>128-byte packet</B><br>
<I>SOH (0x01)</I><br>
Packet Number<br>
<I>1</I>'s Complement of Packet Number<br>
Data (128 bytes)<br>
16-bit CRC<P>
<B>1024-byte packet</B><br>
<I>STX </I>(<I>0x02</I>)<br>
Packet Number<br>
<I>1</I>'s Complement of Packet Number<br>
Data (1024 bytes)<br>
16-bit CRC<P>
The CRC is calculated by using the binary representation of the data stream as the coefficients of a polynomial. The 128-byte packet would produce a polynomial of degree 1,023 (128 x 8 bits). This polynomial is then divided by the CRC polynomial using modulo-2 arithmetic, the remainder of which is the CRC. For XMODEM, the CRC polynomial is the CCITT polynomial:<P>
<pre><I>X</I><SUP>16</SUP> + <I>x</I><SUP>12</SUP> + <I>x</I><SUP>5</SUP> + 1</pre>
The high-byte of the 16-bit CRC is sent first followed by the low-byte.<P>
The receiver determines whether packets are sent using CRC or checksum to detect errors. If the receiver wishes to transfer with CRC error detection, it sends the start character <I>C</I> (<I>0x43</I>) with a three-second time-out and a retry count of four. If the sender cannot transmit using CRC, it ignores the <I>C</I> and continues waiting for a <I>NAK</I>. If sender does not respond to the <I>C</I> start character, the receiver will send a <I>NAK</I> to attempt transfer using the checksum.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The receiver should always attempt to transfer using CRC and then back down to checksum if the CRC attempt fails.<P>
<h4><FONT COLOR="#000080"><A name="01F9_011B">My Implementation<A name="01F9_011B"></FONT></h4></P>
I have implemented XMODEM, XMODEM/CRC, and XMODEM-1K transfer protocols. Rather than developing separate routines to handle each combination of these, I have written one routine for sending and one for receiving. The receive routine attempts to transmit using CRC block checking but will fall back to checksum if the CRC request fails. An argument passed to the send routine specifies which data block size to use (128 or 1,024). See <A href="list1.htm">Listing 1</a>
for the header for the XMODEM routines.<P>
<h4><FONT COLOR="#000080"><A name="01F9_011C">Encapsulating XMODEM<A name="01F9_011C"></FONT></h4></P>
I decided to make the transfer protocol oblivious to the serial I/O by providing medium-level serial functions for the transfer routines. Pointers to these functions are passed as arguments to the XMODEM transfer routines simplifying adaptation to different hardware configurations and avoiding the peculiarities of different UARTs, DUARTs, ACIAs, SIOs, etc.<P>
To display transfer status information and manually abandon the transfer, pointers to functions for these purposes are also passed to the transfer routines.<P>
<h4><FONT COLOR="#000080"><A name="01F9_011D">Serial Receive Interface<A name="01F9_011D"></FONT></h4></P>
I constructed two functions as an interface to the low-level serial routines. The first returns a single character received from the serial port. It is declared as:<P>
<pre>int uart_receive (long ms_timeout,
     unsigned int *error_flag);</pre>
The <I>uart_receive</I> function returns the ASCII code for the received character or a value of <I>RECEIVER_TIMEOUT</I> if a character is not received within the time specified in <I>ms_timeout</I>. <I>RECEIVER_TIMEOUT</I> may be defined as anything that is not a valid ASCII character. I chose -<I>1</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The <I>ms_timeout</I> argument contains the number of milliseconds to wait for a character (if none has already been received). The constant <I>MS_PER_SEC</I> is defined as <I>1000L</I> to aid in conversions. If the time-out value is <I>0L</I> and no characters have been received, the <I>uart_receive</I> function should immediately time-out.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The <I>error_flag</I> argument points to an unsigned integer that will be initialized to indicate hardware errors detected, i.e., parity error, overrun. Several constants are defined as different bits in the error flag. They are:</FONT></FONT><P>
<pre>#define RE_OVERRUN_  0x01
#define RE_PARITY_   0x02
#define RE_FRAMING_  0x04</pre>
You test these error conditions by <I>AND</I>ing the constant with the variable containing the error flags. A <I>TRUE</I> test indicates that flag is set and the error condition occurred. If you don't have access to these error conditions, then the XMODEM routines need never know them. Simply set the error flag to <I>0</I>.</FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="01F9_011E">Serial Transmit Interface<A name="01F9_011E"></FONT></h4></P>
The second serial interface function transmits characters:<P>
<pre>int uart_transmit (char xmit_char);</pre>
This function transmits the character value in the <I>xmit_char</I> argument. Two return values are possible: <I>TRANSMITTER_OK </I>indicates there are no errors with the transmitter, <I>TRANSMITTER_OFFLINE</I> indicates the receiving computer is no longer connected. The offline condition can be detected by loss of the carrier detect signal or some other hardware line. It may also be ignored entirely by always returning <I>TRANSMITTER_OK.</I></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
You can use these functions with polled or interrupt-driven serial routines. Either way, the functions simplify the transfer protocol by keeping serial I/O out of the way.<P>
<h4><FONT COLOR="#000080"><A name="01F9_011F">Status Display Interface<A name="01F9_011F"></FONT></h4></P>
A function to display the transfer status is declared as<P>
<pre>void display_xfer_stats (
   long blocks_transferred,
   long bytes_transferred,
   const char *status_message);</pre>
The <I>bytes_transferred</I> argument contains the number of bytes that have been successfully transferred. If it is -<I>1L</I>, the number of bytes displayed should not be disturbed.</FONT></FONT></FONT></FONT><P>
The <I>blocks_transferred</I> argument contains the total number of data blocks that have been transferred. If <I>blocks_transferred</I> is -<I>1L</I>, the total data blocks displayed should not be disturbed.</FONT></FONT></FONT></FONT><P>
The <I>status_message</I> argument points to the status message to be displayed. It may also be <I>NULL</I> if no status message is to be displayed.</FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="01F9_0120">Abort Transfer Interface<A name="01F9_0120"></FONT></h4></P>
A function for testing an abort condition may be provided to the send and receive routines. Its prototype is:<P>
<pre>int check_abort (void);</pre>
The function returns a non-zero value if the user aborted the transfer manually by pressing the <I>ESC</I> or <I>CTRL-C</I> keys.</FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="01F9_0121">Receiving<A name="01F9_0121"></FONT></h4></P>
<A href="list2.htm">Listing 2</a>
shows the XMODEM receive function. Its prototype is:<P>
<pre>int xmodem_recv (
   FILE *f,
   int   (*transmit) (char),
   int   (*receive) (long,
        unsigned int *),
   void  (*dispstat) (long, long,
        const char *),
   int   (*check_abort) (void));</pre>
The <I>f</I> argument points to a file that must already be opened for writing.</FONT></FONT><P>
To transfer data, the receiver begins by requesting a packet from the sender. The receiver sends a <I>C</I> in an attempt to transfer using CRC instead of checksum for error detection. If it doesn't receive a response within three seconds, it resends the <I>C</I>. This process is repeated four times. If the attempt to use CRCs fails, the receiver reverts to checksum error detection and sends a <I>NAK</I> to request the first data packet. If there is no response within 10 seconds, it sends another <I>NAK</I>. This is repeated 10 times. If there is no response from the sender after 10 <I>NAK</I>s the transmission is automatically aborted.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The only valid characters for the beginning of a packet are: <I>SOH</I>, for a 128-byte packet, <I>STX</I>, for a 1K packet, or two consecutive <I>CAN</I>s for an aborted transfer. All other characters are ignored.</FONT></FONT></FONT></FONT></FONT></FONT><P>
<I>SOH</I> and <I>STX</I> signal the beginning of a packet. The next two bytes received are the block number (modulo 256 and starting with one) and the <I>1's</I> complement of the block number respectively. These two bytes are compared, and if they don't represent the same block number, the packet will be <I>NAK</I>ed.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Following the block numbers are the data block and the CRC or checksum. The data portion of the packet is collected and a checksum or CRC is generated. After receiving the data block and the block check, the receiver compares the generated checksum or CRC to the received checksum or CRC. If they are not the same, the packet is <I>NAK</I>ed.</FONT></FONT><P>
Once the receiver successfully receives a packet, it compares the received block number to the expected block and to the previously received block number. If the received block number doesn't match either of these other numbers, the packets have gotten out of sequence and the transmission must be aborted since XMODEM does not resynchronize block numbers that are out of sequence.<P>
If the received block number matches the next expected block number, the block data is written to the file and an <I>ACK</I> is sent.</FONT></FONT><P>
If the received block number matches the previously received block number, the packet is <I>ACK</I>ed, but the data is <I>not</I> written since it was written when the block was successfully received the first time. The received block number might match the previously received block number for two reasons. First, if the <I>ACK</I> for the previous block was converted into a <I>NAK</I> because of line noise, the sender would resend the last packet. Second, some senders may assume that anything that is not an <I>ACK</I> must be a <I>NAK</I>, and would resend the last packet if the<I> ACK</I> was garbled.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
After successfully receiving a packet, the receiver must wait for the start of the next packet or an <I>EOT</I>. For the sender to know that the file was successfully received, the <I>EOT</I> <I>must be ACK</I>ed.</FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="01F9_0122">Sending<A name="01F9_0122"></FONT></h4></P>
<A href="list3.htm">Listing 3</a>
shows the XMODEM send function. The prototype for the XMODEM send function is:<P>
<pre>int xmodem_send (
   FILE  *f,
   int    (*ransmit) (char),
   int    (*receive) (long,
         unsigned int *),
   void   (*dispstat) (long, long,
         const char *),
   int    (*check_abort) (void));</pre>
The <I>f</I> argument points to the file to be transferred. This file must already be open for reading.</FONT></FONT><P>
The sender is much simpler than the receiver. It begins by waiting for a start character. Valid characters are: <I>C</I>, to indicate CRC block checking; <I>NAK</I>, to indicate checksum block checking; or two consecutive <I>CAN</I>s, to indicate that the transfer has been aborted. If the sender receives no character within 60 seconds, or if it receives 10 invalid characters, the transfer is aborted.</FONT></FONT></FONT></FONT></FONT></FONT><P>
After receiving a valid start character, the sender prepares and transmits the first packet, including the block start character (<I>SOH</I> or <I>STX</I> depending on the data size), the block number, the one's complement block number, the data block, and the checksum or CRC.</FONT></FONT></FONT></FONT><P>
The sender waits for a response from the receiver. Valid responses are: <I>ACK</I>, indicating that the packet was successfully received; <I>NAK</I>, indicating the packet was not successfully received; or two consecutive <I>CAN</I>s, to cancel the transfer. All other characters are invalid and are ignored. If the sender doesn't receive a character within 10 seconds (or receives a <I>NAK</I>), it retransmits the packet. If it receives an <I>ACK</I>, the sender prepares and sends the next packet, and the cycle is repeated. After the last packet is sent and <I>ACK</I>ed, the sender sends an <I>EOT</I> to indicate end of transfer. The receiver must <I>ACK</I> to <I>EOT</I> for the sender to know that the transfer completed successfully.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="01F9_0123">XMODEM Problems<A name="01F9_0123"></FONT></h4></P>
XMODEM presents several problems:<P>
<UL><li>The original file size is not preserved in the transmission.</li>
<li>The modification time and date stamp, as well as the original filename, are lost.</li>
<li>The last packet is padded with CP/M <I>EOF</I> (<I>0x1A</I>) characters, which can cause problems under operating systems where file size and check information are embedded in the file header. I believe this is the case with the Commodore Amiga.</FONT></FONT></FONT></FONT></li>
<li>Only one file can be sent at a time.</li></UL>
The YMODEM protocol makes several enhancements to XMODEM to solve these problems.<P>
<h4><FONT COLOR="#000080"><A name="01F9_0124">Does It Work?<A name="01F9_0124"></FONT></h4></P>
I have successfully used my XMODEM routines to transfer files to and from local BBSs with great success.<P>
Different implementations of XMODEM handle different events. The length of time-outs varies widely. Some implementations will not fall back to checksum error detection if the sender doesn't recognize the CRC start character. Error situations seem to be handled differently as well. I handled these events following whatever documentation I could find.<P>
After implementation, I discovered a problem with interrupt-driven, buffered serial I/O, which involved the sender's packet response time-out. After transmitting a packet, the sender immediately begins waiting for the response. While this situation works fine with polled I/O, interrupt-driven serial routines buffer the data to send. When the sender starts waiting for the response, very little of the packet may have been sent. At 300 baud, it takes 35 seconds to transfer a 1K packet, and I'd bet that even a 4.77 MHz PC doesn't need 35 seconds to dump 1,000 bytes into a buffer. Even at 1,200 baud, the time-out is cut pretty close. It is left as an exercise for the reader to determine the best method of solving this problem. Here are some suggestions:<P>
<UL><li>Ignore the problem, buy a faster modem (9,600 baud or so), and be done with it.</li>
<li>Pad the time-out values to account for the baud rate.</li>
<li>Modify the transmit routine to wait until the transmit buffer is empty before returning.</li>
<li>Devise a method of checking the number of characters in the transmit buffer.</li></UL>
<h4><FONT COLOR="#000080"><A name="01F9_0125">Documentation<A name="01F9_0125"></FONT></h4></P>
The best documentation for XMODEM and its derivatives is online. I located a half dozen document files describing the XMODEM protocol. Some were just an overview while others were quite in-depth. Interestingly enough, the texts I own which describe XMODEM don't do nearly as well as the public domain document files.<P>
<h4><FONT COLOR="#000080"><A name="01F9_0126">Conclusion<A name="01F9_0126"></FONT></h4></P>
XMODEM and its extensions are easy to implement. If you need to implement file transfer capability in an application, XMODEM is a good choice if the volume of data to transmit is small or if you are using a slow modem. If you are using a high-speed modem or are transferring large volumes of data, other transfer protocols like YMODEM-G and ZMODEM are more efficient, but a little more difficult to implement.<P>

<h4><a href="../../../source/1990/sep90/ward.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
