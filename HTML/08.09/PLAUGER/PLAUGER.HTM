


<HTML>
<HEAD>

<TITLE>September 1990/Standard C</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocsep.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Standard C<A name="01FF_0119"><A name="01FF_0119"></font></h2><P>
<h3 align="center"><A name="01FF_0000"><A name="01FF_0000">With Gun And Reel</h3><P>
<h3 align="center"><font color="#800000">P. J. Plauger</font></h3><hr><blockquote><P>
<P><i><A name="01FF_0000"><A name="01FF_0000">P.J. Plauger has been a prolific programmer, textbook author, and software entrepreneur. He is secretary of the ANSI C standards committee, X3J11, and convenor of the ISO C standards committee, WG14. His latest book is Standard C which he co-authored with Jim Brodie.</i></P><P>
Last month, I discussed the ground rules by which the Standard C library must operate. I reviewed name space issues from the points of view of both users and implementors. I did much the same for the fifteen standard headers. I also showed ways to implement some of the tricker aspects of the Standard C library.<P>
Part of my motivation is to quell criticism of the ANSI C standard. People new to the party often shoot from the hip. They take one look, pass judgement, and start calling people bad names. It is very easy to find things to criticize in anything as complex as a programming language standard. If you haven't been privy to all the micro decisions along the way, it is even easier to conclude that mistakes were made. If your favorite feature is omitted or strangely altered, it is too easy to assume stupidity or malice.<P>
As an active member of committee X3J11, I know that plenty of thought went into the formation of the C standard. The library, in particular, was the subject of much refinement and compromise. Many of us had to give up our pet notions and allow ourselves to be educated. I firmly believe that the result is quite good. If another procedural language has a better specified library, I don't know what it is.<P>
Another part of my motivation is to demonstrate that the Standard C library is capable of reasonable implimentation. It is often easier to show a way to do something than to argue at length about whether it can be done. If the demonstration can be made readable and at all elegant, so much the better.<P>
With this column, I am taking a new departure. My plan is to continue reviewing the Standard C library in further detail. I will talk about both how the library can be used and how it can be implemented.<P>
As often as possible, I will present credible examples and real code. The code will be highly portable Standard C as much as possible. (I assume that an implementation will tolerate "replacement" C code for standard library functions.) I can't promise that the code will be bug free, but I'll certainly try to keep it that way.<P>
I also can't predict at this point how long this process will continue. It should make a good change of pace from essays on the C language proper or on how the standard is flawed. Think of it as a travelogue &#151; With Gun and Reel Down the Standard C Library. I'll do my best to keep the slide show interesting.<P>
I begin with the standard header <I>&lt;assert.h&gt;</I>. It is not the first one addressed in the C standard, but it is alphabetically the first on the list. I see no compelling reason to address topics in any other order.</FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="01FF_011A">The Header <B><I>&lt;assert.h&gt;</I><A name="01FF_011A"></B></FONT></FONT></h4></P>
Here's what the C standard says about <I>&lt;assert.h&gt;</I>. I quote verbatim:</FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="01FF_011B">4.2 Diagnostics <B><I>&lt;assert.h&gt;</I><A name="01FF_011B"></B></FONT></FONT></h4></P>
The header <I>&lt;assert.h&gt;</I> defines the <I>assert</I> macro and refers to another macro,</FONT></FONT></FONT></FONT><P>
<pre>NDEBUG</pre>
which is <I>not</I> defined by <I>&lt;assert.h&gt;</I>. If <I>NDEBUG</I> is defined as a macro name at the point in the source file where <I>&lt;assert.h&gt;</I> is included, the <I>assert</I> macro is defined simply as</FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>#define assert(ignore) ((void)0)</pre>
The <I>assert</I> macro shall be implemented as a macro, not as an actual function. If the macro definition is suppressed in order to access an actual function, the behavior is undefined.</FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="01FF_011C">4.2.1 Program Diagnostics<A name="01FF_011C"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="01FF_011D">4.2.1.1 The <B><I>assert</I></B> Macro<A name="01FF_011D"></FONT></FONT></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="01FF_011E">Synopsis<A name="01FF_011E"></FONT></h4></P>
<pre>#include &lt;assert.h&gt;
void assert(int expression);</pre>
<h4><FONT COLOR="#000080"><A name="01FF_011F">Description<A name="01FF_011F"></FONT></h4></P>
The <I>assert</I> macro puts diagnostics into programs. When it is executed, if <I>expression</I> is false (that is, compares equal to 0), the <I>assert</I> macro writes information about the particular call that failed (including the text of the argument, the name of the source file, and the source line number &#151; the latter are respectively the values of the preprocessing macros <I>__FILE__ </I>and <I>__LINE__</I>) on the standard error file in an implementation-defined format.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
[Footnote 97: The message written might be of the form<P>
Assertion failed: <I>expression</I>, file <I>xyz</I>, line <I>nnn</I>]<P>
It then calls the <I>abort</I> function.</FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="01FF_0120">Returns<A name="01FF_0120"></FONT></h4></P>
The <I>assert</I> macro returns no value.</FONT></FONT><P>
<B>Forward references:</B> the <I>abort</I> function <B>(§4.10.4.1).</B></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="01FF_0121">Using Assertions<A name="01FF_0121"></FONT></h4></P>
The sole purpose of this header is to provide a definition of the macro <I>assert.</I> You use the macro to enforce assertions at critical places within your program. Should an assertion prove to be untrue, you want the program to write a suitably revealing message to the standard error stream and terminate execution abnormally. Thus, you might write:</FONT></FONT><P>
<pre>#include &lt;assert.h&gt;

.....

assert(0&lt;=idx &amp;&amp;
     idx &lt; sizeof a/sizeof a[0]);
   /*  a[idx] is now safe */</pre>
Any code you write following the assertion can be simpler. It need not check whether the index <I>idx</I> is in range. The assertion sees to that. And should this "impossible" situation arise while you are debugging the program, you get a handy diagnostic. The program does not stumble on to generate spurious problems at a later time.</FONT></FONT><P>
Please note that this is hardly the best way to write production code. It is generally ill-advised for a program in the field to terminate abnormally. No matter how revealing the accompanying message may be to you the programmer, it is assuredly cryptic to the user. Some form of error recovery and continuation is almost always preferred. Any diagnostics should be in terms that the user can understand.<P>
What you want is some way to introduce assertions during debugging. That lets you catch the worst logic errors and document the assertions you need early on. Later, you might add code to recover from errors that truly can occur during execution. You want to leave the assertions in as documentation, but you want them to generate no code.<P>
<I>&lt;assert.h&gt;</I> gives you just this behavior. You can define the macro <I>NDEBUG</I> to alter the way <I>assert</I> expands. If <I>NDEBUG</I> is <I>not</I> defined at the point where you include <I>&lt;assert.h&gt;</I>, the header defines the active form of the macro <I>assert</I>. It expands to an expression that tests the assertion and prints an error message if the assertion is false.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
If <I>NDEBUG</I> is defined, however, the header defines the passive form of the macro. It expands to a placeholder expression that does nothing. In either case, <I>assert</I> behaves essentially like a function that takes a single <I>int</I><I> </I>argument and returns a <I>void</I> result.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
How you control the macro expansion is a matter of taste. One style of programming is to change the source code. Once you believe that assertions should be disabled, just add a line before you include the header:<P>
<pre>#define NDEBUG/* disable assertions */
#include &lt;assert.h&gt;</pre>
That neatly documents that assertions are henceforth inoperative. The only drawback comes when you have to turn debugging back on again. (I can assure you that eventually you will.) You must edit the source file to remove the macro definition.<P>
Many implementations support a somewhat more flexible approach. They let you define one or more macros outside any C source files. You specify these definitions in a command script or <I>make</I> file that rebuilds the program. A <I>make</I> file can be a better place to document that assertions are to be disabled, and can also be an easier file to replicate and alter when you must revert to more primitive debugging phases. <I>&lt;assert.h&gt;</I> is designed with such a capability in mind, though nothing in the C standard requires it.</FONT></FONT></FONT></FONT></FONT></FONT><P>
This header has an additional peculiarity. All other headers are idempotent. Including any of them two or more times has the same effect as including the header just once. In the case of <I>&lt;assert.h&gt;</I>, however, its behavior can vary each time you include it. The header alters the definition of <I>assert </I>to agree with the current definition status of <I>NDEBUG</I>.</FONT></FONT></FONT></FONT></FONT><P>
The net effect is that you can control assertions in different ways throughout a source file. Performance may suffer dramatically, for example, when assertions occur inside frequently executed loops. Or an earlier assertion may terminate execution before you get to the revealing parts. In either case, you may need to turn assertions on and off at various places throughout a source file.<P>
So to turn assertions on, you write<P>
<pre>#undef NDEBUG
#include &lt;assert.h&gt;</pre>
And to turn assertions off, you write<P>
<pre>#define NDEBUG
#include &lt;assert.h&gt;</pre>
Note that you can safely define the macro even if it is already defined. So long as you always write the same (empty) definition, the code will produce no diagnostics. This license is called "benign redefinition."<P>
<h4><FONT COLOR="#000080"><A name="01FF_0122">Implementing <B><I>&lt;assert. h&gt;</I><A name="01FF_0122"></B></FONT></FONT></h4></P>
This header requires very little code, but it must be carefully crafted. To respond properly to <I>NDEBUG</I>, the header must have the general structure:</FONT></FONT><P>
<pre>#under assert  /*  remove any
          existing definition */
#ifdef NDEBUG
#define assert(test) ((void(0)
          /*  passive version */
#else
#define assert(test) &lt;active version&gt;
#endif</pre>
The initial <I>#undef</I> is innocuous if no macro definition of <I>assert</I> currently exists. It is very necessary, however, if the definition is to change. The passive version of the macro is closely spelled out by the C standard. Note that the name of the dummy argument is unimportant. (No valid program you can write can tell the difference if the name varies.)</FONT></FONT><P>
All that remains is to write the active version of the macro. An obvious but naive way to provide the needed functionality is to write the active version as:<P>
<pre>#define assert(test) if (!(test)) \
   fprintf(stderr, \
"Assertion failed: %s, file %s, line %i\n", \
   #test, __FILE__, __LINE__) UNACCEPTABLE</pre>
This form is unacceptable for a variety of reasons:<P>
<UL><li>The macro must not directly call any of the library output functions, such as <I>fprintf</I>. Nor may it refer to the macro <I>stderr</I>. These names are properly defined only in the standard header <I>&lt;stdio. h&gt;</I>. The program may not have included that header, and the standard header <I>&lt;assert.h&gt;</I> must not. A program can define macros that rename any or all of the names from another header, provided it doesn't include that header. That mandates a function with a secret name to do the actual output.</li>
<li>The macro must expand to a <I>void</I> expression. The program can contain an expression such as <I>(assert(0 &lt; x)</I>,<I> </I><I>x</I><I> </I><I>&lt; y)</I>. That rules out use of the <I>if</I> statement, for example. Any testing must make use of one of the conditional operators within an expression.</li>
<li>The macro should expand to fairly efficient and compact code. Otherwise, programmers will tend to avoid writing enough assertions. This version involves a function call with five arguments, a space waster that can be avoided.</li></UL>
Let's assume that we will add a function named _<I>Assert</I> to the library. (A name of this form is reserved to implementors. The program may not contain a macro with such a name. Even if the implementation supports external names with only a single case, the name is still reserved to the implementor. You'll see a lot of names of this form as part of the library code.) The first design decision is whether to test the assertion within the function or inline. Each approach has its merits.</FONT></FONT><P>
Say the first argument to the function captures the result of the test:<P>
<pre>void _Assert (test, &lt;other parameters&gt;);
#define assert(test) _Assert(test, &lt;other arguments&gt;)</pre>
The function returns immediately if its first argument is non-zero. Otherwise, it uses the other arguments to compose a suitable error message.<P>
Alternatively, the test can be performed inline:<P>
<pre>void _Assert (&lt;parameters&gt;);
#define assert(test) ((test) || _Assert(&lt;arguments&gt;))</pre>
The first form better enforces the requirement that the test has the proper type. The second tolerates tests with pointer and floating types as well. (You may enjoy that license until the day you have to move your large program to a more restrictive implementation.)<P>
It is hard to say in general which form generates more compact code. That depends strongly on the implementation. The first form, however, results in a function call on every execution. A rather ambitious global optimizer might eliminate some calls, but don't count on it. The second calls the function at most once, when the program is about to terminate.<P>
I favor the second form, with the inline test, despite the weaker checking. (The checking is no worse than what the passive version of the macro supplies.) Many current optimizers can check a broad range of assertions at translation time. They can often eliminate <I>all</I> of the code for an obviously true assertion.<P>
The remaining issue is how best to encode the diagnostic message. Here, the string creation operator <I>#x</I> really pays off. The trick is to form all the information into string literals at translation time. Then string literal concatenation merges the pieces to produce a single argument.</FONT></FONT><P>
One nuisance is that the built-in macro __<I>LINE__ </I>is not a string literal, but a decimal constant. To convert it to the proper form requires an additional layer of processing. That is performed by adding to the header a secret macro _<I>STR</I>.</FONT></FONT></FONT><P>
<A href="list1.htm">Listing 1</a>
contains the final version of the standard header <I>&lt;assert. h&gt;</I>.</FONT></FONT><P>
The definition of <I>assert</I> composes the diagnostic information into a single string of the form:<P>
<pre>xyz:nnn expression</pre>
(to use the notation of the C standard). It is a bit more compact than the canonical form with the words "file" and "line" in it. A smart version of the function _<I>Assert</I> can parse the diagnostic message and supply the missing bits if it chooses. The version shown in <A href="list2.htm">Listing 2</a>
does not, since the precise format of the message is implementation defined.</FONT></FONT><P>
Calling other library functions from within this one causes no problems. Any library function may call any other. (Injecting the name of a library function into a program via a standard header is another matter.) Because the translator composes the diagnostic message, the simpler library function <I>fputs</I> suffices. No need to invoke the full power of output formatting.</FONT></FONT><P>
As you can see, neither the header <I>&lt;assert.h&gt;</I> itself nor the support function <I>_Assert</I> involves much code. Opportunities abound, nevertheless, for going astray. Past implementations of this facility have committed essentially every one of the sins I outlined here. The C standard has gone a long way toward making the use of <I>assert</I> more uniform. A careful implementation is needed to finish the job.</FONT></FONT></FONT></FONT></FONT></FONT><P>

<h4><a href="../../../source/1990/sep90/plauger.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
