

<HTML>
<HEAD>

<TITLE>September 1994/Questions & Answers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocsep.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Questions &amp; Answers<A name="0179_00CB"><A name="0179_00CB"></font></h2><P>
<h3 align="center"><A name="0179_0000"><A name="0179_0000">Parentheses with new Operator</h3><P>
<h3 align="center"><font color="#800000">Kenneth Pugh</font></h3><hr><blockquote><P>
<P><i><A name="0179_0000"><A name="0179_0000">Kenneth Pugh, a principal in Pugh-Killeen Associates, teaches C and C++ language courses for corporations. He is the author of<I></I> All On C, C for COBOL Programmers<I></I>, and <I></I>UNIX for MS-DOS Users<I></I>, and was a member of the ANSI C committee. He also does custom C/C++ programming and provides SystemArchitectonics<I>sm</I> services. His address is 4201 University Dr., Suite 102, Durham, NC 27707. You may fax questions for Ken to (919) 489-5239. Ken also receives email at <I></I>kpugh@allen.com <I></I>(Internet) and on Compuserve 70125,1142.</i></P><P>
<B>Q</B><P>
In the April issue starting on page 115, you discuss certain uses of <I>new</I> expressions. You say, "He (Plauger) suggested that there are some subtleties in the C++ standard that dictate when you need to write parentheses and when sometimes even parentheses won't do. Different implementors probably interpret the rules differently and may even vary in how well they get their own rules right. Perhaps a reader can come up with an explanation of what these allocations really do."<P>
OK, allow me to set it all straight. The rules of early C++ only allowed a simple name (one word) to be used as the type of a <I>new-</I> expression. It was C++ 2.0 that introduced an extended syntax. The extended syntax has not changed to this day, and has two forms. The first form figures out for itself where the type expression ends, and allows a restricted form of types. The second form is explicitly parenthesized. Like an <I>if</I> or <I>while</I> statement, the parens are part of the syntax and are not grouping parens. This is what happens in (1).<P>
<pre>char* pc5= new (char*) [n];  (1)</pre>
The <I>new</I>-expression subexpression here is not <I>new(char*) [n]</I> as intended, but <I>new(char*)</I> only. You might consider this an order-3-of-precedence goof. To make it perfectly clear, (1) does the same thing as (2) and (3) below.<P>
<pre>char** temp= new (char*);     (2)
char* pc5= temp[n];           (3)</pre>
You can see that this does produce a <I>char*</I>, and is a totally nonsense <I>char*</I>. The expression will allocate one (<I>char*</I>) and return a pointer to it, a <I>char**.</I> That is then subscripted in the normal way, adding <I>n</I> and dereferencing. There is no mystery why the final type is a <I>char*</I>, not a <I>char**</I> as originally expected.<P>
The misconception here is the usage of the parentheses. The '(' indicates that this is the "explicitly parenthesized form" of <I>new</I>, and the type to allocate is delimited by the balanced parentheses. Either new char*[n] or new((char*[n]) would have been correct.<P>
There are no subtleties here to worry about. A C++ programmer should be taught that the parentheses are part of the syntax of <I>new</I>, as with <I>if</I> and <I>while</I>, and are not grouping parentheses in an expression. There is a second form of <I>new</I> that does not use the parentheses. If a '(' appears where the type name goes, the parser uses the parenthesized form, otherwise it doesn't.<P>
In addition, I would like to point out that (4) does the same thing as (1). The extra parentheses are redundant.<P>
<pre>char* pc6= new (char(*))[n];    (4)</pre>
Eric Nagler has tried these (1 and 4) on a variety of compilers, and surprised me by getting compile errors on some. So it looks like there is some truth to Plauger's statement about compilers differing on the application of the rules. But, this is just a case of a botched parser, not a moving target or unclear specifications. The way <I>new</I> parses was well documented in the C++ 2.0 reference manual, is explained in the Annotated C++ Reference Manual <a href="#1">[1]</a> (ARM), and sits today in the draft working paper without change to this aspect of its meaning.<P>
Using a <I>new</I>-expression in C++ is not as difficult as some people make it out to be. You just have to know the rules. Banging on it to see what happens may lead to enlightenment, but often leads to confusion.<P>
P.S. For details on the grammar of <I>new</I>-expressions, see section 5.3.3 in the ARM or the draft working paper. Also my own work <I>The C</I>++ <I>Test of Knowledge (or, the Guru's Handbook)</I> contains an explanation of this exact problem.<P>
John Dlugosz<br>
Warminster, PA<P>
<B>A</B><P>
Thanks for your clarification. Sometimes it just takes a pinpoint of light to illuminate the entire problem. For readers transitioning from C, let me suggest the following code for comparison. This analogy will show why you probably have not encountered the same problem with C. In C, the <I>malloc</I> function allocates memory in a fashion similar to <I>new.</I> In C, you use:<P>
<pre>char * pc;
pc = (char *) malloc(sizeof(char));</pre>
In C++, you allocate a pointer to <I>char</I> with <I>new,</I> as in:<P>
<pre>char * pc_cpp;
pc_cpp = new char;</pre>
In C, you could assign a value to this pointer to <I>char</I> with:<P>
<pre>pc = ((char **) malloc(sizeof(char *)))[2];</pre>
This is syntactically correct, although you probably would never write something like this. The hideous expression on the right converts the <I>void *</I> pointer into a <I>char **</I> pointer and then dereferences it one level by using the []'s. Note that the resulting value references memory that has not been allocated to the program. The cast is required since <I>malloc</I> returns a <I>void *</I> and you cannot use a pointer of that type in any expression.<P>
The equivalent assignment in C++ is:<P>
<pre>char *pc_cpp;
pc_cpp = new (char *)[2];</pre>
Note that the <I>new</I> operator in C++ returns a typed pointer (<I>char **</I>), so that a cast is not required to use the subscript. This is the form which John comments on in his reply. Again, the resulting value references non-allocated memory, so it's a meaningless assignment. The above form is typographically close to a meaningful assignment, such as:<P>
<pre>char **pc_cpp_good;
pc_cpp_good = new char * [2];</pre>
This allocates an array of two pointers to <I>chars,</I> and it does represent valid, working code.<P>
You probably would never write the erroneous C statement, as it looks ugly. However, just as the original questioner did, you might accidentally attempt to code the meaningless assignment in C++.<P>
Let me use some actual numbers to further illustrate the problem. If <I>malloc</I> returns <I>100</I>, then the value that is assigned to pc is <I>100 + 2 * sizeof(char *</I>). This value will be <I>108</I> (with four-byte pointers). In C++, if <I>new</I> returns <I>100</I>, then the value assigned to <I>pc_cpp</I> is the same.<P>
If you attempt to execute either of<P>
<pre>*pc = 7;
*pc_cpp = 7;</pre>
then you will be writing over memory that is not allocated to you. For MS- DOS users, you may receive a "Memory allocation error &#151; System halted" message, when your program exits. On other systems, there may be no apparent error.<P>
Note that the original statements which perform the allocation do not save the address of the allocated memory. You have lost those values. If you attempt to execute either of<P>
<pre>free (pc);
delete pc_cpp</pre>
you will be passing addresses to <I>free</I> and <I>delete</I> which have not been allocated. The resulting error can be similar or worse than that caused by the previously mentioned assignments.<P>
As John stated, section 5.3.3. of the ARM shows that parentheses can be used around the type name. It does take a bit of parsing practice to create all the possible forms using the <I>new</I> operator. Section 5.3.3 has examples of only the simpler forms. One sample shows that you can code the following:<P>
<pre>int (* p_array)[10];
p_array = new int[20][10];</pre>
This will allocate space for 20 elements in an array, each the size of <I>int [10]</I>. The type returned by the <I>new</I> operator, as shown by the ARM is <I>int (*)</I> <I>[10],</I> so the assignment works properly.<P>
Given John's explanation above, you could have:<P>
<pre>int i;
i = new (int[20])[10];</pre>
The <I>new</I> operator allocates the size of 20 ints. <I>new</I> returns a pointer to ints. The subscript dereferences the pointer and returns the value of the 11th element in the array that was allocated.<P>
If this all seems difficult to understand, then do as I typically do with complicated expressions. Hide this complexity in layers of objects. You should be able to arrange your objects so that you never need to use expressions that are difficult to understand. For example, you could design the first sample as:<P>
<pre>class X
   {
private:
   int array[10];
   };

X * px;

px = new X[20];</pre>
<I>px</I> points to an object that represents an array of 20 by 10 <I>ints</I>. This design avoids multiple <I>[]</I>'s and multiple <I>*</I>'s.<P>
I figure that if compiler writers (as shown in letters last month) and ex-compiler writers (such as P.J. Plauger) have questions on a syntax matter with parenthesized expressions and the <I>new</I> operator, then mere mortals should probably avoid such constructions.<P>
<h4><FONT COLOR="#000080"><A name="0179_00CC">Persistent Objects &#151; An Alternative<A name="0179_00CC"></FONT></h4></P>
<B>Q</B><P>
In the March of 1994 issue <I>C Users Journal</I>, you answered a questioned from Paul Waldo...it was interesting to note that his problem could have been solved using Objective-C...instead of the kludge you suggested using C++. It is too bad that Objective-C does not get as much airplay as C++...considering that C++ is so garbled in the first place. Mind you this is just one engineer's opinion (-:<P>
A short code fragment (<A href="list1.htm">Listing 1</a>)
 demonstrates one solution to the question posed by Paul. This example is not complete or checked for accuracy, merely an example of what can be done with Objective-C. Other things I like about Objective-C.<P>
1.     Objective-C is more elegant than C++<P>
2.     Portable to MAC, SUN, SGI, IBM (Aix &amp; OS2) etc.<P>
3.     Dynamic binding and run-time checking.<P>
More can be found in the FAQ on usenet for Objective-C<P>
Once <I>object</I> is written it can be brought back in. This is just a rough idea of how it could be written. <I>StoreOn:</I> is inherited from <I>Object.</I> You would have to implement a <I>Store:On:</I> method to save the class <I>vars</I> for <I>Entry.</I><P>
Jeff Bakst<br>
MediaScape<P>
<B>A</B><P>
Thanks for your reply. I looked at Objective-C a few years back, but stayed with C++. It's always good to look at another language to see what features your favorite one may be lacking.<P>
<h4><FONT COLOR="#000080"><A name="0179_00CD">Persistent Objects &#151; Another Alternative<A name="0179_00CD"></FONT></h4></P>
<B>Q</B><P>
I would like to suggest an improvement on one of your answers to Paul Waldo about run-time typing. You provided a good example of an <I>Entry</I> class with a save method, but it would be best if the <I>Entry</I> class 3didn't have to know what children it had, if any. Not knowing allows the class to be extensible in the future without modification of the <I>Entry</I> class.<P>
For example, as it stands, if we create a new type of <I>Entry</I>, say <I>Adjustment</I>, then the <I>Entry</I> class and the <I>Account</I> class must both be modified. The problem is compounded if the class is in a library or immutable for some reason.<P>
An alternate solution is to move the save and restore capabilities outside of the <I>Entry</I> and <I>Account</I> classes altogether, using separate classes that I usually refer to as <I>builder</I> and <I>probe</I> classes. They are often the same class, in which case I usually call the class a <I>Conversion,</I> and the prototype might look like:<P>
<pre>class EntryConversion
   {
   public:
      virtual Entry* Retrieve(istream&amp;) const= 0;
      virtual int    Save(ostream&amp;,
const Entry*) const = 0;
   };</pre>
The <I>Retrieve</I> and <I>Save</I> methods are used to read and write to the streams. Note that <I>Retrieve</I> will check the type id at the head of the stream and rewind the stream if it is of the wrong type. (It is probably even safer to read the type outside of the <I>Conversion</I> object, since not all streams may be rewound, but that just complicates the explanation.)<P>
Here's some typical implementations:<P>
<pre>// Returns NULL for failure.
//
Entry* CheckConversion::Retrieve(istream&amp; is) const
   {
   Check* rval= (Check*)NULL;
   Entry_type type;
   if (is &gt;&gt; type)
      {
      if (type == Entry_check)
         {
         rval = new Check;
         // Read entries from
         // stream into Check...
         }
      else
         // rewind stream
      }
   return(rval);
   }

// This implementation will not write
// the object unless it is of the
// proper type. See implementation
// of Entry::Save().
//
int CheckConversion::Save(ostream&amp; os, const Entry* entry) const
   {
   int rval = 0;
// failure
   if (entry!=NULL &amp;&amp;
      entry-&gt;type_of()==Entry_check)

      {
      ostream &lt;&lt; Entry_type;
      // Write remainder of Check
      // values into stream...
      rval = 1;
// success
      }
   return(rval);
   }</pre>
Here, the base <I>Entry</I> class knows about nothing except <I>EntryConversions</I>, and we could perhaps have some static methods/attributes dealing with the list of known <I>Conversions:</I><P>
<pre>class Entry
   {
   public:
      //...
      static void
           Learn(EntryConversion*);
      static Entry*
          Retrieve(istream&amp;);
      static int
          Save(ostream&amp;,
              const Entry*);
   private:
      static EntryConversion** known;
   };</pre>
When we want to save or restore an <I>Entry</I>, we simply examine our dynamically created list of conversions until we find a match, and then use that to save or restore it. The <I>Entry</I> class itself no longer needs to know what, if anything, inherits from it:<P>
<pre>// Returns NULL for failure.
//
Entry* Entry::Retrieve(istream&amp; is)
   {
   Entry* rval = (Entry*)NULL;
   for (int i=0; known[i]!=NULL; i++)
      {
      rval = known[i]-&gt;Retrieve(is);
      if (rval != NULL)
         break;
         // Ah! success
      }
   return(rval);
   }

// Returns 0 for failure, 1 for success.
//
int Entry::Save(ostream&amp; os, const Entry* entry)
   {
   int rval = 0;
// failure
   for (int i=0; known[i]!=NULL; i++)
      {
      rval = known[i]-&gt;Save(os, entry);
      if (rval != 0)
         break;
// Ah! success
      }
   return(rval);
   }</pre>
The drawback to this approach is that we must "teach" the <I>Entry</I> class its conversions. <I>Entry</I> could still learn the default classes in the base <I>Entry</I> class constructor, or we could provide some external initialization. Either way, what we would end up with is some code like:<P>
<pre>Entry::Learn(new CheckConversion());
Entry::Learn(new DepositConversion());

Entry::Learn(new WithdrawalConversion());</pre>
Now, if we add an <I>Adjustment</I> class inheriting from <I>Entry</I>, none of the existing framework needs change, even if the base <I>Entry</I> class bootstraps itself with the default <I>Conversions</I>. All we need do is define our <I>AdjustmentConversion</I> class, and somewhere in our new application teach the <I>Entry</I> class the new <I>Conversion</I>, This is particularly important when attempting to distribute object libraries.<P>
Another big advantage is that this totally separates the storage mechanism from the class itself. With a little more indirection, we can create the <I>Conversions</I> in such a way that the <I>Entry</I> class does not even need to know that we are using streams; we might use non-volatile RAM or some other non-stream method of object storage and the <I>Entry</I> hierarchy still need not change.<P>
There are several disadvantages. First, the code is obviously more complex, and this is often a big hurdle, especially for people who are relatively new to developing OO applications. Second, it depends a lot more on convention for success; if someone forgets to teach their new <I>Conversion</I> to the <I>Entry</I> class, it will not be readily apparent why the system is failing.<P>
Last, the initialization problem is nontrivial. Even if we decide that the Entry class should bootstrap itself with the known <I>EntryConversions</I>, what if we do a <I>Retrieve</I> before we have created an <I>Entry</I>? The known array of <I>Conversions</I> will be empty, and it will fail. blah.<P>
Anyway, the article piqued my interest, since I have been dealing with similar problems quite a bit recently.<P>
Burt Smith<br>
Jeffersonville, PA<P>
<B>A</B><P>
Thanks for your solution. As is usual, there are many ways to climb a mountain. The long way is more gradual and the short way is steeper. Each route has its tradeoffs.<P>
<h4>References</FONT></h4></P>
<a name="1"></a>[1]     Ellis and Stroustrup. 1990. <I>The Annotated C++ Reference Manual</I>, Reading, MA: Addison-Wesley.<P>

<h4><a href="../../../source/1994/sep94/pugh.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
