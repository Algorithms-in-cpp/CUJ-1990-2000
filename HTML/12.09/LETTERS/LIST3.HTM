<HTML><HEAD>
<TITLE>September 1994/We Have Mail/Listing 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 3 <I>Zigler's compression technique</I></A></h4>
<pre>  typedef struct
     {
     int      cnt         ;         /* count nodes to root           */
     DWORD    path        ;         /* bit-encoded path to root      */
     }        HPATH       ;

/**** Module Semiglobals ****/

static DWORD      Cnt[512] ,         /* Huffman tree node counts      */
                  OutSize  ,         /* track size of compressed file */
                  ByteCtr  ;         /* length of input file          */
static char       Out8     ;         /* code byte to compressed file  */
static int        Cnt8     ;         /* code bit counter              */
static HPATH   *  Hp       ;         /* ptr to HPATH base             */
HTREE          *  Ht       ;         /* ptr to Huffman tree base      */

static int pascal encode( void )
   {
   register int     c         ,     /* chars from input file         */
                 h         ;     /* follows path through tree     */
   int              ncnt      ;     /* count nodes to root           */
                 child     ;     /* child of current node         */
   HPATH         *  php       ;     /* pointer to HPATH array        */
   DWORD            acc = 0L  ;     /* accumulator for code bits     */
  
   for ( c = 0; c &lt; 256 ; c++ )     /* get Huffman codes             */
      {
      if ( Cnt[c] &gt; 0 )            /* if char found in input        */
         {
         php  = Hp + c;           /* php-&gt;Hp[c]                     */
         h    = c;
         ncnt = 0;
         acc  = 0L;
         do
           {
           ncnt++;
           acc &lt;&lt;== 1;
           child = h;                 /* child = current node      */
           h = Ht[h].parent;          /* go to parent node         */
           if ( child == Ht[h].left ) /* "look back" at child node */
              (int)acc &lt;&lt;= 1;         /* encode left child node    */
           }
         while( Ht[h].parent != -1 );
         php-cnt  = ncnt;              /* save node count           */
         php-path = acc;               /* save encoded path         */
         }
      }
   while ( (c = getc(fi)) != EOF &amp;&amp; OutSize &lt; ByteCtr )
      {
      php = Hp + c;
      ncnt = php-cnt;
      acc = php-path;
      while ( ncnt-- )
         {
         emit( (int)acc &amp; 1 );
         acc &gt;&gt;= 1;
         }
      }                            /* while(getc())                 */
   if ( --BytesFree 0 )           /* if out of disk space          */
      longjmp( JumpBuf, ErrWrite );
   if ( ++OutSize &lt; ByteCtr )
      {
      OutBuffer[pBuf++] = Out8 &lt;&lt; ( 8 - Cnt8 );    /* pad last byte */
      _write( OutHandle, OutBuffer, pBuf );
      }
   return ( OutSize &gt;= ByteCtr );
   }                                   /**** encode()             ****/
   
static void pascal emit( register int bit )
   {
   
   if (Cnt8 == 8 )
      {
      if ( --BytesFree &lt;= 0 )               /* if out of disk space */
         longjmp( JumpBuf, ErrWrite );
      else if ( pBuf &gt;= OUTBUFFSIZE )       /* if buffer full       */
         {
         _write( OutHandle, OutBuffer, pBuf ); /* write to output  */
         pBuf = 0;
         }
      OutBuffer[pBuf++] = Out8;
      OutSize++;
      Cnt8 = 0;
      }
   Out8 = ( Out8 &lt;&lt; 1 ) | bit;
   Cnt8++;
   }

/* End of File */</pre>

</BODY>
</HTML>
