

<HTML>
<HEAD>

<TITLE>September 1994/Standard C/C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocsep.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Standard C/C++<A name="0177_00C9"><A name="0177_00C9"></font></h2><P>
<h3 align="center"><A name="0177_0000"><A name="0177_0000">The Header &lt;ostream&gt;</h3><P>
<h3 align="center"><font color="#800000">P.J. Plauger</font></h3><hr><blockquote><P>
<P><i><A name="0177_0000"><A name="0177_0000">P.J. Plauger is senior editor of C/C++ Users Journal. He is convenor of the ISO C standards committee, WG14, and active on the C++ committee, WG21. His latest books are <I>The Draft Standard C++ Library</I>, and <I>Programming on Purpose</I> (three volumes), all published by Prentice-Hall. You can reach him at pjp@plauger.com.</i></P><P>
<h4><FONT COLOR="#000080"><A name="0177_00CA">Introduction<A name="0177_00CA"></FONT></h4></P>
I continue my detailed review of iostreams. The previous two columns were on the header <I>&lt;istream&gt;.</I> It defines the class <I>istream,</I> which you need to <I>extract</I> characters from an input stream. (See "Standard C: The Header <I>&lt;istream&gt;," </I><I>CUJ,</I> July 1994, and "Standard C: Extractors," <I>CUJ,</I> August 1994.)<P>
This month, I switch to its companion header &lt;<I>ostream</I>&gt;. As you might guess, it defines the class <I>ostream</I>, which helps you <I>insert</I> characters into an output stream. Class <I>ostream</I> is the obvious complement to class <I>ostream.</I> I have intentionally modeled this discussion after that of its predecessor, to highlight the structural similarities.<P>
For convenient reference, <A href="list1.htm">Listing 1</a>
shows how the draft C++ Standard defines the class <I>ostream.</I> You might want to look it over now, then refer back to it as needed in the discussion that follows.<P>
Class <I>ostream,</I> like <I>istream</I>, is derived from the virtual public base class <I>ios</I>. The best known object of this class is <I>cout,</I> which controls output to the standard output stream &#151; the same C-style stream controlled by <I>stdout</I>, declared in <I>&lt;stdio.h&gt;.</I> You can also create <I>ostream</I> objects that control files you open by name, or strings of text stored in memory, as later columns will reveal.<P>
Most of the <I>ostream</I> member functions fall into one of two broad categories:<P>
<UL><li>unformatted output functions, which insert sequences of arbitrary <I>char</I> values, such as uninterpreted text or binary data</li>
<li>formatted output functions, which convert encoded values of the various scalar and string data types and insert the resultant sequences</li></UL>
The former group uses the name <I>put</I> and overloads the name <I>write</I>. It is analogous to the Standard C library's <I>fputc</I> and <I>fwrite</I>, declared in <I>&lt;stdio.h&gt;</I>, but a bit easier to use. For example, you can insert an arbitrary character sequence with:<P>
<pre>   if (cout.write(buf, n))
      &lt;output succeeded&gt;</pre>
The test is true (nonzero) only if the member function successfully inserts all <I>n</I> characters from <I>buf</I> to the stream controlled by the <I>ostream</I> object <I>cout</I>. <P>
The latter group of member functions overloads <I>operator&lt;&lt;</I> to make the basic family of inserters. It is analogous to the Standard C library's <I>fprintf</I> and friends, but with a variety of advantages. For example, you can insert an octal integer with:<P>
<pre>   int n;
   if (cout &lt;&lt; oct &lt;&lt; n)
      &lt;output succeeded&gt;</pre>
The test is true only if the second inserter inserts all the characters required to represent the <I>int</I> value <I>n</I> as an octal integer in text form.<P>
Inserters are the single most popular selling point for iostreams over more conventional Standard C input and output. (Extractors are a close second.) But they are easier to explain after you gain more familiarity with the unformatted output functions. I return to inserters in more detail next month. <P>
<h4><FONT COLOR="#000080"><A name="0177_00CB">Prefix and Suffix Functions<A name="0177_00CB"></FONT></h4></P>
Remember that all extractions and insertions in iostreams are mediated by objects of class <I>streambuf</I>. (See "Standard C: The Header <I>&lt;streambuf&gt;," </I><I>CUJ</I><I>,</I> June 1994.) There is one small problem, however. It is perfectly permissible for the pointer to <I>streambuf</I> to be null. It is also quite possible that the pointer is non-null, but the stream is in some error state that should discourage inserting. Thus, it behooves any output function to look before it leaps. The canonical way to play safe is to wrap every inserter member function with two calls to <I>ostream</I> member functions:<P>
<pre>   if (opfx())
      &lt;perform any output&gt;
   osfx();</pre>
The "prefix" function <I>opfx(int)</I> verifies that the stream is both ready and willing to accept output, or at least to support calls to the <I>streambuf</I> member functions. It also performs other initialization operations.<P>
The "suffix" function <I>osfx</I>( ) performs any necessary wrapup operations after each output member function does its work. In particular, if the format flag <I>unitbuf </I>is set, the function flushes the associated stream buffer. Such "unit buffering" is often a happy compromise between the better performance of full buffering and the tighter synchronization with external files of no buffering at all. If you write an output function that uses the <I>ostream</I> object <I>x</I> and makes direct calls to its associated <I>streambuf</I> object, always call <I>x.opfx() </I>and <I>x.osfx()</I> as shown above.<P>
Inserters must also handle exceptions, for much the same reasons that extractors do. (See the July 1994 installment, described above.) Any call to <I>rdbuf()-&gt;sputc( )</I> can result in a call to the virtual member function <I>streambuf::overflow,</I> which can be a programmer-supplied virtual member function for a derived class. So as with extractors, the library can never know when a call on a <I>streambuf</I> member function might throw an exception.<P>
The draft C++ Standard says that when an exception occurs during execution of an output (or input) member function the function must call <I>setstate(badbit),</I> then rethrow the exception. The structure of an arbitrary output function must now look like:<P>
<pre>   try {
      if (opfx())
         <I>&lt;perform any output&gt;</I>
      osfx();
      }
   catch (...) {
      setstate(badbit);
      throw;
      }</pre>
Note once again that the act of setting <I>badbit</I> can also raise an exception, of class <I>ios::failure</I>. (See "Standard C: The Header <I>&lt;ios&gt;</I>," <I>CUJ,</I> May 1994.) Should that happen, the original exception never gets rethrown. <P>
<h4><FONT COLOR="#000080"><A name="0177_00CC">Unformatted Output Functions<A name="0177_00CC"></FONT></h4></P>
Now you have enough background to understand how the unformatted output functions work. The simplest of these is the member function <I>put(char)</I>. It inserts a single character &#151; probably by calling<I> rdbuf()-&gt;sputc(char</I>) inside the sandwich shown above &#151; and delivers it as the value of the function. A failure to insert the requested character, for any reason, is reflected in a return value of <I>EOF</I>.<P>
Obviously, the overhead for inserting a single character via <I>put(char)</I> is substantially higher than for the Standard C library function <I>putchar(int),</I> declared in <I>&lt;stdio.h&gt;</I>. The latter is almost invariably implemented as a macro that stores a character straight into an output buffer more often than not. Thus, it behaves much like <I>streambuf::sputc(char)</I>. But <I>ostream::put(char)</I> is almost impossible to treat similarly, given the prefix/suffix calls and exception handling required by the draft C++ Standard. You should thus favor methods that insert many more characters for each call, whenever possible, if performance is an issue.<P>
If you want rather less logic per character, consider the member function <I>write(const char *, int)</I> (or its alternate forms for constant arrays of <I>signed char</I> or <I>unsigned char).</I> It simply inserts characters until a count is exhausted, or until no more characters can be inserted.<P>
For still faster copying from another stream buffer, consider the inserter <I>operator&lt;&lt;(streambuf&amp;)</I>. Actually a <I>formatted</I> input function, it extracts characters from its stream buffer argument and writes them directly to the stream buffer controlled by the <I>ostream</I> object. Thus, you can write:<P>
<pre>cout &lt;&lt; *cin.rdbuf();</pre>
to copy the remaining characters from <I>cin</I> directly to <I>cout.</I> In this case, copying can be quite fast. Related <I>istream</I> member functions can copy up to, but not including, a delimiter you specify.<P>
The member function <I>flush()</I> simply calls the public "synchronizing" function <I>rdbuf()-&gt;pubsync()</I> (assuming the associated <I>streambuf</I> object is present). Typically, such an operation flushes an output stream to the associated external file. Several mechanisms exist to ensure that synchronization occurs at judicious times:<P>
<UL><li>You can create a stream buffer that is unbuffered (as with the class <I>stdiobuf,</I> to be covered in a future installment).</li>
<li>You can set the format flag <I>unitbuf,</I> described above, to flush output after every call to a formatted or unformatted output function.</li>
<li>You can use the manipulator <I>endl</I>, to both insert a newline character ('/<I>n'</I>) and flush output.</li>
<li>You can <I>tie</I> the <I>ostream</I> object to another <I>istream</I> or <I>ostream</I> object, to flush output on any call to a prefix function for that other object. (See the May 1994 installment, described earlier.) </li></UL>
And, of course, the stream buffer will be flushed when it is destroyed. You need call <I>flush()</I> for an <I>ostream</I> object only if you can't be certain that timely synchronization will occur in the normal course of affairs. <P>
<h4><FONT COLOR="#000080"><A name="0177_00CD">Using &lt;ostream&gt;<A name="0177_00CD"></FONT></h4></P>
You have little or no occasion to include the header <I>&lt;ostream&gt;</I> directly. Like <I>&lt;ios&gt;, &lt;streambuf&gt;,</I> and <I>&lt;istream&gt;,</I> described in earlier installments, it is another header invented by the Committee simply to split the iostreams declarations into more manageable pieces. But the chances are just as good that you'll use the <I>contents</I> of <I>&lt;ostream&gt;</I> in a program. Class <I>ostream</I> is the base class for all classes that support insertions into a stream buffer, the classic way to mediate all output in the iostreams package. The base class summarizes what is <I>common</I> to all such output classes.<P>
If you include the header <I>&lt;iostream&gt;</I>, you can use the <I>ostream</I> object <I>cout</I> to write the standard output stream. Similarly, you can use the <I>ostream</I> objects <I>cerr</I> or <I>clog</I> to write the standard error stream. Otherwise, you typically create an object <I>derived</I> from <I>ostream</I> to mediate output to a stream buffer you create at the same time. (The Standard C++ library does so in the headers <I>&lt;strstream&gt;, &lt;sstream&gt;</I>, and <I>&lt;fstream&gt;</I>.)<P>
The only occasion you have for declaring an <I>ostream</I> object directly is to mediate output to a stream buffer created separately. You can, for example, set up a bidirectional stream various ways. I repeat here the way I showed a while back:<P>
<pre>#include &lt;fstream&gt;
   .....
   ifstream istr("abc", ios::in | ios::out);
   ostream ostr(istr.rdbuf());</pre>
or:
<pre>#include &lt;fstream&gt;
   .....
   ifstream istr("abc", ios::in | ios::out);
   ostream ostr;
   ostr.rdbuf(istr.rdbuf());</pre>
Given an <I>ostream</I> object <I>x</I>, you can perform a whole host of operations on it. Many are inherited from the base class <I>ios</I>, which I described several months back. (May 1994, as before.) You can also call:<P>
<UL><li><I>predefined manipulators,</I> such as <I>x &lt;&lt;</I> <I>endl</I>, to alter the state of the output sequence or values stored in <I>x</I></li>
<li><I>character output functions,</I> such as <I>x.put(),</I> to insert sequences of one or more characters</li>
<li><I>scalar inserters,</I> such as <I>x &lt;&lt; n</I>, for an <I>int n, to</I> convert an internal representation to a sequence of characters that represents its value and insert the sequence.</li>
<li><I>support functions,</I> such as <I>x.flush()</I>, to help you write your own manipulators and extractors </li></UL>
I deal with the first two groups here. The next two are covered as part of next month's essay. <P>
<h4><FONT COLOR="#000080"><A name="0177_00CE">Predefined Manipulators<A name="0177_00CE"></FONT></h4></P>
All the manipulators defined for class <I>ios</I> also apply to objects of class <I>ostream</I>, naturally enough. The same is true for the <I>ios</I> member functions that have the same effect as the manipulators. Not all have meaningful effect, however. For an <I>ostream</I> object, the relevant information depends on the scalar type being inserted. I describe the particulars later, with the inserters for each group of types.<P>
One flag affects <I>all</I> formatted and unformatted output functions. The format flag <I>unitbuf</I> calls for the output stream to be flushed by a call to the suffix function <I>ostream::osfx()</I>. The following formatting information affects all the string and scalar formatted output functions, except for the three character types:<P>
<UL><li>the field width, which determines the <I>minimum</I> number of characters to insert</li>
<li>the fill character, which determines the character to add repeatedly to meet the minimum width requirement</li>
<li>the format flags in the <I>adjustfield</I> group, which determine whether fill characters are added at some internal point in the conversion <I>(internal)</I>, before the conversion <I>(right),</I> or after the conversion <I>(left)</I></li></UL>
The "internal" point in a numeric conversion is generally where you would add leading zeros, or those * characters on checks. For a hexadecimal conversion, it is to the right of the <I>0x</I> or <I>0X</I> prefix. For all others, it is immediately before the leading digit.<P>
The header <I>&lt;ostream&gt;</I> declares two peculiar member functions:<P>
<pre>ostream&amp; operator&lt;&lt;(ostream&amp; (*pf)(ostream&amp;));
ostream&amp; operator&lt;&lt;(ios&amp; (*pf)(ios&amp;));</pre>
It is the magic that makes the manipulators defined for class <I>ios</I> work as "pseudo-extractors" with <I>ostream</I> objects. The first supports manipulators intended to work <I>only</I> with <I>ostream</I> objects.<P>
Three such creatures are defined by the Standard C++ library, all declared in <I>&lt;ostream&gt;.</I> (The template class <I>omanip,</I> defined in <I>&lt;iomanip),</I> also defines manipulators for <I>ostream</I> objects.) You can write:<P>
<pre>x &lt;&lt; endl;</pre>
to insert a newline character ('<I>/n'</I>) and flush the output stream. This inserter is both a convenient shorthand and a useful way to synchronize the output stream periodically with an interactive file, such as a terminal display.<P>
Similarly, the manipulator <I>ends</I> inserts a null character ('\0') without flushing the stream. You use this manipulator primarily to insert a terminating null character after generating an in-memory character sequence.<P>
The manipulator <I>flush</I> flushes the output stream without inserting a character. You use this manipulator only when you can't be certain that a necessary synchronization has occurred.<P>
<h4><FONT COLOR="#000080"><A name="0177_00CF">Character Output Functions<A name="0177_00CF"></FONT></h4></P>
Class <I>ostream</I> provides several member functions for inserting sequences of one or more characters. Here is my attempt to characterize them all in a way that highlights their critical differences. Each of the member functions that follows:<P>
<UL><li>pads with fill characters to the specified field width, then sets the field width to zero, only if  its description says "pads to field width"</li>
<li>sets <I>badbit</I> if it fails to insert all characters</li></UL>
With those blanket rules in mind, here is the list of functions you might use to insert sequences of characters:<P>
<UL><li><I>operator&lt;&lt;(char ch), operator(signed char ch), operator&lt;(unsigned char ch)</I> &#151; inserts <I>ch</I></li>
<li><I>operator&lt;&lt;(const char *s) </I><I></I>&#151;<I> (n</I> is <I>strlen(s)</I>, where <I>strlen</I> is declared in <I>&lt;string.h&gt;)</I>. Inserts <I>n</I> characters beginning at <I>s</I>, pads to field width</li>
<li><I>operator&lt;&lt;(streambuf&amp; sb</I>) <I></I>&#151; extracts remaining characters from the streambuf <I>sb</I> (and inserts them in <I>*this</I>), stops on an insertion failure (character not extracted) or on any exception (exception <I>is</I> rethrown)</li>
<li><I>put(char ch</I>) <I></I>&#151; inserts <I>ch</I></li>
<li><I>write(const char *s, int n), write(const signed char *s, int n), write(const unsigned char *s, int n</I>) <I></I>&#151; inserts <I>n</I> characters beginning at <I>s</I></li></UL>
<h4><FONT COLOR="#000080"><A name="0177_00D0">Conclusion<A name="0177_00D0"></FONT></h4></P>
I can't counsel you on which of these member functions to use. That decision depends heavily on the particular need, and the style of programming you favor. I do suggest as before, however, that you pick one or two of these choices, learn them well, and stick with them.<P>
The unformatted output functions are far less extensive than their cousins, the unformatted input functions. The latter group has many options for <I>parsing</I> input, if only to look for delimiter characters. Unformatted input functions also have to worry about end-of-file during extractions, and how best to respond to it. By contrast, the unformatted output functions know exactly what they want to insert. The failure of any insertions is generally considered a disastrous error, not some condition to work around.<P>
Even so, class <I>ostream</I> offers a rich assortment of options just for inserting uninterpreted character data. It's easy to get befuddled by all the choices.<P>

<h4><a href="../../../source/1994/sep94/plauger.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
