<HTML><HEAD>
<TITLE>September 1994/Code Capsule/Listing 14</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 14 <I>Interface and inline functions for fractional arithmetic class</A></I></h4>
<pre>#include &lt;iostream.h&gt;
class ostream;
class istream;

class Rational
{
public:
   Rational(int n = 0, int d = 1);

   // Operations for rationals
   friend Rational operator+(const Rational&amp;, const Rational&amp;);
   friend Rational operator-(const Rational&amp;, const Rational&amp;);
   friend Rational operator*(const Rational&amp;, const Rational&amp;);
   friend Rational operator/(const Rational&amp;, const Rational&amp;);
   Rational operator-() const;

   // I/O operations
   friend ostream&amp; operator&lt;&lt;(ostream&amp;, const Rational&amp;);
   friend istream&amp; operator&gt;&gt;(istream&amp;, Rational&amp;);

private:
   int num;
   int den;
   void reduce();
};

inline Rational::Rational(int n, int d)
{
   num = n;
   den = d;
   reduce();
}

inline Rational operator+(const Rational&amp; a, const Rational&amp; b)
{
   Rational r(a.num * b.den + b.num * a.den, a.den * b.den);
   r.reduce();
   return r;
}

inline Rational operator-(const Rational&amp; a, const Rational&amp; b)
{
   Rational r(a.num * b.den + b.num a.den * b.den);
   r.reduce();
   return r;
}

inline Rational operator*(const Rational&amp; a, const Rational&amp; b)
{
   Rational r(a.num * b.num, a.den * b.den);
   r.reduce();
   return r;
}

inline Rational operator/(const Rational&amp; a, const Rational&amp; b)
{
   Rational r(a.num * b.den, a.den * b.num);
   r.reduce();
   return r;
}

inline Rational Rational::operator-() const
{
   return Rational(-num,den);
}

/* End of File */
</pre>
</BODY>
</HTML>
