

<HTML>
<HEAD>

<TITLE>September 1994/Extending the Windows File Manager</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocsep.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Windows Programming</FONT></H2>

<hr><h2 align="center"><font color="#800000">Extending the Windows File Manager<A name="016F_00C1"><A name="016F_00C1"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="016F_0000"><A name="016F_0000">Trevor Harmon</font></h3><hr><blockquote><P>
<P><i><A name="016F_0000"><A name="016F_0000">Trevor Harmon works for Microdyne Development Technologies, which provides custom controls and other tools for Microsoft Windows programmers. He is currently pursuing degrees in Computer Engineering and German. Trevor can be reached on CompuServe at 73771,3307 or on the Internet at73771.3307@compuserve.com.Trevor.</i></P><P>
When Microsoft introduced Windows 3.1, it redesigned the File Manager and replaced it with a friendlier and more flexible version. Among its many enhancements the new File Manager included an open, documented interface to allow integration with other programs. These programs, called Extensions, can supplement the Windows File Manager by adding a custom menu to its menu bar. The custom menu can provide access to external programs and, in effect, add new features to the File Manager.<P>
The number of applications that take advantage of this interface is growing. Naturally, Microsoft's MS-DOS 6.x includes a File Manager Extension for a quick path to its disk-management utilities. You might choose to create these same types of Extensions for your products. Or, if you see a feature that File Manager lacks, you can build an Extension to fill the gap. This article will help you create a File Manager Extension. It includes a sample program which is a trivial, but complete, Extension illustrating the components of File Manager Extensions and serving as a framework for writing your own.<P>
<h4><FONT COLOR="#000080"><A name="016F_00C2">How Extensions Work<A name="016F_00C2"></FONT></h4></P>
A File Manager Extension is simply a Windows DLL with one addition: an external callback function called <I>FMExtensionProc</I>. This function connects the DLL with the File Manager and receives all notification messages sent to the DLL. These messages, defined in the header file <I>WFEXT.H</I>, indicate certain File Manager events, such as loading of the Extension or selection of an item from the Extension's menu.<P>
<I>FMExtensionProc</I> can also query the File Manager for information. By calling the standard <I>SendMessage</I> API function, <I>FMExtensionProc</I> can retrieve drive information or the names of selected files. It can also tell the File Manager to update its windows or reload its Extensions.<P>
<h4><FONT COLOR="#000080"><A name="016F_00C3">Messages From File Manager<A name="016F_00C3"></FONT></h4></P>
When File Manager starts, it looks for an [AddOns] section in the file <I>WINFILE.INI</I>. File Manager reads the first five entries in this section, locates the DLL specified by each entry, and sends an <I>FMEVENT_LOAD</I> message to each DLL's <I>FMExtensionProc</I>. Note that if the [Addons] section, an entry, or even a DLL is missing, File Manager does not issue any error messages. Also, although File Manager attempts to load up to five of the listed DLLs, only the first four will work properly.<P>
File Manager sends three parameters to <I>FMExtensionProc</I>: the File Manager's window handle, the Extension message number, and a 32bit <I>lParam</I> that supplies data specific to each message. In the case of <I>FMEVENT_LOAD, lParam</I> contains a pointer to an <I>FMS_LOAD</I> structure.<P>
The sample program (<A href="list1.htm">Listing 1</a>)
 shows how this structure is filled. The first field, <I>dwSize</I>, holds the size of the structure and is used for version checks. The second, <I>szMenuName</I>, contains the title string of the Extension menu and therefore must have less than <I>MENU_TEXT_LEN</I> characters. Like any other Windows menu, this string may include an ampersand (&amp;) character to indicate the menu label's underlined letter. The third field, <I>hMenu</I>, holds the Extension menu.<P>
To fill <I>hMenu</I>, the sample program calls <I>LoadMenu</I>, which retrieves the Extension menu from <I>FMEXT.RC</I>. Alternatively, you can use <I>LoadMenuIndirect</I> to supply the <I>hMenu</I> field. Note that each item in the menu should have an ID between 1 and 99.<P>
The last field, <I>wMenuDelta</I>, is unique to each Extension and is used by File Manager to prevent menu conflicts between Extensions. All Extensions have menu IDs ranging from 1 to 99. When an Extension references one of its menu items, it should add <I>wMenuDelta</I> to the menu ID to produce a unique identifier. This procedure allows several Extensions to operate on the same File Manager while still having menu IDs between 1 and 99. Unlike the first three fields, which must be initialized by the Extension, <I>wMenuDelta</I> is initialized by the File Manager. File Manager begins by calculating an ID that is higher than all other menu IDs and saves this value as a unique <I>wMenuDelta</I> in the <I>FMS_LOAD</I> structure.<P>
In addition to <I>FMS_LOAD</I>, File Manager relays four other messages that notify an Extension of events. File Manager sends <I>FMEVENT_INITMENU</I> whenever the user clicks on the Extension's menu. This message contains the menu handle in the high-order word of <I>lParam</I> and the menu-delta value in the low-order word. <I>FMEVENT_INITMENU</I> allows the Extension to update check marks or disabled items on its menu. The sample program includes an example of <I>FMEVENT_INITMENU</I>; notice that the program adds the <I>wMenuDelta</I> value to the menu item ID when calling <I>CheckMenuItem</I>.<P>
The File Manager sends <I>FMEVENT_SELCHANGE</I> if the user changes any selections in the File Manager. An Extension's modeless dialog box may respond to this message if it wants to update its display of selections. File Manager does not use 1Param in <I>FMEVENT_SELCHANGE</I>.<P>
File Main sends <I>FMEVENT_USER_REFRESH</I> when the user chooses the File Manager's Window | Refresh menu. This message serves as a broadcast to all Extensions telling them that they should refresh their windows. <I>lParam</I> is not used.<P>
File Manager sends the <I>FMEVENT_UNLOAD</I> message just before it unloads an Extension; <I>lParam</I> again is not used. An Extension can use this message to clean itself up, just as a DLL performs cleanup in the Windows Exit Procedure (WEP). Because the sample program does not allocate memory or perform other such tasks when starting, it does not respond to <I>FMEVENT_UNLOAD</I>.<P>
Lastly, the File Manager sends menu item IDs if the user clicks on the matching menu item. Rather than send the <I>WM_COMMAND</I> message that Windows executables receive, File Manager sends the actual ID to <I>FMExtensionProc</I> and does not add the <I>wMenuDelta</I> value to it.<P>
<h4><FONT COLOR="#000080"><A name="016F_00C4">Messages to the File Manager<A name="016F_00C4"></FONT></h4></P>
Communication between the File Manager and its Extensions can travel in two directions. The File Manager sends a notification message to an Extension, and the Extension can send command messages back to the File Manager to get information. For instance, an Extension can send the <I>FM_GETDRIVEINFO</I> message to obtain data on the current File Manager drive.<P>
The example program illustrates this message. In the function <I>FillDriveInfoDlg</I>, which runs when the user selects the Drive Information menu, the sample code calls <I>SendMessage</I> with a pointer to an <I>FMS_GETDRIVEINFO</I> structure as the <I>lParam</I> parameter. When the File Manager receives <I>FM_GETDRIVEINFO</I>, it fills <I>FMS_GETDRIVEINFO</I> with the byte capacity, free space, current path, volume label, and network sharepoint of the current drive. (Look in the Windows <I>WFEXT.H</I> header for the complete definition of <I>FMS_GETDRIVEINFO.</I>)<P>
Probably the most commonly used File Manager Extension message is FM_GET<I>FILESEL</I>. When combined with <I>FM_GETSELCOUNT</I>, this message can retrieve the currently selected items in the File Manager window. The sample Extension demonstrates the procedure, first by sending the <I>FM_GETSEL-COUNT</I> message to the File Manager with no parameters. The value returned is the number of items selected. The example code then executes a loop; each time through the loop it calls <I>SendMessage</I> with the <I>FM_GETFILESEL</I> message, containing the index of the selected item for which it wants information, and a pointer to an <I>FMS_GETFILESEL</I> structure. This structure holds the date and time stamp, size, attributes, and name of the selected file. (For the <I>bAttr</I> field, <I>00100000</I> = archive, <I>00010000</I> = directory, <I>00000100</I> = system, <I>00000010</I> = hidden, and <I>00000001</I> = read-only.) After each call to <I>SendMessage</I>, the sample program copies the item name from the structure and adds it to a list box for display.<P>
File Manager provides two extra messages similar to <I>FM_GETSELCOUNT</I> and <I>FM_GETFILESEL</I>. These messages, <I>FM_GETSELCOUNTLFN</I> and <I>FM_GETFILESELLFN</I>, return network-style long file names and should only be sent if you design your Extension to run on a network.<P>
To learn which window has the File Manager's focus, an Extension can send <I>FM_GETFOCUS</I> without parameters. The return value will be one of the following, depending on the current input focus: <I>FMFOCUS_DIR</I> for directory window, <I>FMFOCUS_TREE</I> for tree window, <I>FMFOCUS_DRIVES</I> for drive bar, or <I>FMFOCUS_SEARCH</I> for Search Results window.<P>
The other two messages an Extension can send do not retrieve information from the File Manager; they instruct it to carry out a task. <I>FM_REFRESH_WINDOWS</I> asks the File Manager to refresh its windows in the same way it would if the user selected Window | Refresh. An Extension can send this message if it modifies any files or directories and wants the File Manager to reflect the current display. The Extension should set the <I>wParam</I> parameter to zero if it wants the File Manager to refresh only the active window; <I>wParam</I> should be non-zero if the Extension wants all windows updated. <I>lParam</I> is not used.<P>
The <I>FM_RELOAD_EXTENSIONS</I> message causes the File Manager to unload and then reload all Extensions listed in <I>WINFILE.INI</I>. This message allows an Extension to uninstall itself. The sample program gives an example of this type of self-removal. The program first prompts the user to make sure the Extension should be uninstalled. It then calls <I>WritePrivateProfileString</I> to delete the Generic File Manager Extension entry from <I>WINFILE.INI.</I> Finally, the program sends the <I>FM_RELOAD_EXTENSIONS</I> message to the File Manager with no parameters.<P>
<h4><FONT COLOR="#000080"><A name="016F_00C5">Installing the Sample Program<A name="016F_00C5"></FONT></h4></P>
The included source code demonstrates most of the above operations. To install it, you must first compile it into a DLL. The program source is in <A href="list1.htm">Listing 1</a>,
 and a header is provided in <A href="list2.htm">Listing 2</a>.
 Be sure to include <I>FMEXT.RC</I> (<A href="list3.htm">Listing 3</a>)
 and <I>FMEXT. DEF</I> (<A href="list4.htm">Listing 4</a>)
 along with <I>FMEXT.C</I> in your MAKE or project file.<P>
Next, you must tell the File Manager where to find your DLL. Edit the File Manager's <I>WINFILE.INI</I> initialization file and look for the [AddOns] section, adding it yourself if it does not exist. Under [AddOns], on a separate line, type the description of your Extension. Because File Manager sees the name only as a placeholder, anything you type will suffice. For the sample program, however, you should title it Generic File Manager Extension so the Extension will be able to remove it later. Follow the name with an equals sign and the full filespec of your DLL.<P>
<h4><FONT COLOR="#000080"><A name="016F_00C6">Conclusion<A name="016F_00C6"></FONT></h4></P>
Blend these messages together and you will have a File Manager Extension that places your program on a common foundation with many Windows programs. This rare open standard combines products from widely disparate vendors into a solid yet dynamic file-management tool. That sentence may sound like a glowing advertisement from Microsoft, but I stubbornly believe the File Manager Extension interface sets an example for future products. It all adds up to an easier life for Windows users.<P>
<h4>Sidebar: <a href="sidebar1.htm">"Extensions for Windows NT"</a></h4>

<h4><a href="../../../source/1994/sep94/harmon.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
