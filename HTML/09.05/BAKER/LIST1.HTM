<HTML><HEAD>
<TITLE>May 1991/Digital Signal Processing: A Tutorial/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1</A></h4>
<pre>/* fast Fourier transform (FFT)


from Handbook of C tools for Scientists and Engineers by L. Baker

DEPENDENCIES:

header file complex.h required

*/
#include &lt;stdio.h&gt;
#include "complex.h"
#define twopi 6.283185307

int iterp;/* global to return count used*/

#define max(a,b) (((a)&gt;(b))? (a): (b))
#define abs(x) ((x)? (x):-(x))
#define DOFOR(i,to) for(i=0;i&lt;to;i++)

main(argc,argv) int argc;char **argv;
{int i,ii,nh,n=16;
double invn,exp(),dt=.25,omega,realpt,imagpt;
struct complex w[32],wi[32], data[32];
nh=n&gt;&gt;1;
DOFOR(i,n)
   {
   CMPLX(data[i], exp(-dt*(i)),0.);
   };
/* caveat*/ data[0].x=.5;/*not 1. see text*/
printf(" before transform:\n");
DOFOR(i,n){printc(&amp;(data[i])) ;printf("\n");}
invn=1./n;
fftinit(w,wi,n);
printf(" w factors:\n");
DOFOR(i,n){printc(&amp;(w[i])) ;printc(&amp;(wi[i])) ;printf("\n");}
printf(" transformed:\n");
fft(data,w,n);
DOFOR(i,n){printc(&amp;(data[i])) ;printf("\n");}
printf(" scaled by dt and compared to analytic answer:\n");
DOFOR(i,n)
   {
   ii= (i-nh) ? i : n-i ;
   omega= twopi*ii/(n*dt);
   realpt= 1./(1.+omega*omega);
   imagpt= -realpt*omega;
   printf(" %f %f  %f %f\n", dt*data[i].x,dt*data[i].y, realpt,imagpt);
   }
/* inverse fft*/
fft(data,wi,n);
printf(" transformed back and scaled by 1/N:\n");
DOFOR(i,n)
   {
   CTREAL(data[i],data[i],(invn));
   printc(&amp;(data[i]));printf("\n");
   }
exit(0);
}



int bitr(k,logn) int k,logn;
{
int ans,j,i;
ans=0;
j=k;
DOFOR(i,logn)
   {
   ans=(ans&lt;&lt;1)+(j&amp;1);
   j=j&gt;&gt;1;
   }
return(ans);
}
int log2(n) int n;
{
int i;
i=-1;/* will return -1 if n&lt;=0 */
while(1)
   {
   if(n==0)break;
   n=n&gt;&gt;1;
   i++;
   }
return(i);
}

printc(x) struct complex *x;
{
printf("%f %f",x-&gt;x,x-&gt;y);
return;
}

fftinit(w,wi,n) int n; struct complex w[],wi[];
{
int i;
double realpt, imagpt,cos(),sin();
double factr,angle;
factr=twopi/n;
DOFOR(i,n)
   {angle=i*factr;
   realpt=cos(angle);imagpt=sin(angle);
   CMPLX(w[i],realpt,imagpt);
   CMPLX(wi[i],realpt,(-imagpt));
   }
return;
}


fft(x,w,n) int n; struct complex w[],x[];
{
int n1,logn,i,j,k,l,logl,p;
struct complex s,t;
logn=log2(n);
n1=n&gt;&gt;1;
j=logn-1;
/* transform*/
k=0;
DOFOR(logl, logn)
   {
   do{
   DOFOR(i,n1)
      {
      p=bitr((k&gt;&gt;j),logn);
      l=k+n1;
          CONJG(s,w[p]);
          CMULT(t,s,x[l]);
          CSUB(x[l],x[k],t);
          CADD(x[k],t,x[k]);
          k++;
      };/* dofor i*/
   k+=n1;
   }while (k&lt;n);
k=0;
j--;
n1=n1&gt;&gt;1;
}


/*reorder*/
for(i=1; i&lt;n; i++)
   {
   k=bitr(i,logn);
   if (i&gt;k)
      {
      /*exchange i,k elements*/
      CLET(s,x[i]);
      CLET(x[i],x[k]);
      CLET(x[k],s);
      }

   };

return;
}
</pre>
</BODY>
</HTML>
