


<HTML>
<HEAD>

<TITLE>May 1991/Digital Signal Processing: A Tutorial</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmay.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Numerical Applications</FONT></H2>

<hr><h2 align="center"><font color="#800000">Digital Signal Processing: A Tutorial<A name="00C6_0080"><A name="00C6_0080"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="00C6_0000"><A name="00C6_0000">Louis Baker</font></h3><hr><blockquote><P>
<P><i><A name="00C6_0000"><A name="00C6_0000">Louis Baker has a Ph.D. in astronomy and has written books with code in C<I></I> <I></I>and Ada for McGraw-Hill. He may be reached at Mission Research Corp., 1720<I></I> <I></I>Randolph SE, Albuquerque NM 87106.</i></P><P>
Numerous chips are now optimized for digital signal processing (DSP). To get the high performance necessary for many applications, these chips have special instruction sets and register structures. As a consequence, they often have special compilers and languages as well. DSP chips play important roles in applications as diverse as radar, sonar, and compact disk players. Here is an overview of digital signal processing. It should give you a feeling for what it is and how you can use it.<P>
<h4><FONT COLOR="#000080"><A name="00C6_0081">Time Domain And Frequency Domain<A name="00C6_0081"></FONT></h4></P>
In the good old days, signal processing was accomplished with analog networks. Components such as inductors and capacitors were used. Such a network is conveniently characterized by its <I>frequency response</I>, which describes the behavior of the system at each frequency. A signal in the form of a sine wave with a period <I>T</I> between adjacent wave crests has a frequency of 1/<I>T</I>. (See <A href="fig1.htm">Figure 1</a>.
) The units for frequency is the inverse of a second. It is officially named the Hertz (Hz).<P>
An example of signal processing is sending and receiving an amplitude-modulated (AM) radio signal. Amplitude modulation multiplies the radio frequency signal (called the carrier) by the sound signal. If the sound signal is a sine wave, the resulting signal is that shown in <A href="fig2.htm">Figure 2a</a>.
 The envelope of the signal has the same frequency as the sound wave. The resulting signal can be shown to be equivalent to three pure sine waves, at frequencies <I>F</I>, <I>F</I>+<I>f</I>, and <I>F</I>+<I>f</I>, where <I>F</I> is the carrier frequency and <I>f</I> is the modulating signal. The signal represented as a collection of pure sine waves is called the <I>frequency-domain</I> representation. The signal represented as a function of time is the <I>time-domain</I> representation. In addition to the carrier, two sidebands are present. With a technique called single-sideband or SSB modulation, you can transmit only one of the sidebands.<P>
At the receiver, you want to extract the audio signal, in this case the pure frequency <I>f</I>. First, you use a rectifier to block the negative values of the signal. (See <A href="fig2.htm">Figure 2b</a>.
) I don't show the frequency-domain picture because rectifying produces an infinite sequence of frequencies, all multiples of <I>f</I>. Finally, you smooth this result by putting this signal through a low-pass filter (see below), to get the audio signal (<A href="fig2.htm">Figure 2c</a>)
.<P>
With the advent of microelectronics capable of computing at megahertz frequencies, much of this processing can be done by periodically sampling the signal at high frequency. For example, if you sampled at some multiple of the carrier frequency, you would get the results similar to those shown in <A href="fig2.htm">Figure 2d</a>.
 These samples could then be digitally processed by the equivalent of a low-pass filter to get similar results.<P>
<h4><FONT COLOR="#000080"><A name="00C6_0082">Fourier And Z Transforms<A name="00C6_0082"></FONT></h4></P>
Fourier analysis is the process of resolving a signal that is a complicated function of time into the summation of a number of sine waves. Many readers of <I>The C Users Journal</I> have probably heard of the FFT or Fast Fourier transform, which performs such a decomposition. <A href="list1.htm">Listing 1</a>,
 taken from <I>C Tools for Scientists and Engineers</I> <a href="#ref1">[1]</a>, gives a program to do the FFT. It illustrates its use for a simple decaying pulse. The code computes with complex numbers <a href="#ref2">[2]</a>. It uses a header file, <I>complex. h</I> (see <A href="list2.htm">Listing 2</a>)
, which is contained in references <a href="#ref1">1</a> and <a href="#ref2">2</a>. To check the results, the same code performs the inverse FFT. You should get back the input you started with. See <A href="list3.htm">Listing 3</a>
for the results. The decomposition of signals into their frequency components is fundamental to many forms of signal analysis, for example, determining the power spectrum of a signal.<P>
The <I>Z</I> transform is a closely related form specially suited to analyzing periodically sampled functions. If the signal is sampled with period <I>T</I>, (i.e., every <I>T</I> seconds), it will have values that can be denoted <I>s[t]</I>. You can treat <I>s[0]</I> as the value at <I>t=0, s[1]</I> the value at <I>t=T</I>, etc. If you denote by <I>1/Z</I> the operation of delaying by one unit of <I>T</I>, then you can symbolically denote the signal s as<P>
<pre>S(Z) = s[0] + (1/Z)s[1] +
(1/Z)(1/Z)s[2]</pre>
and so forth. If you assign <I>Z</I> = <I>e</I><I>i2</I><I></I>p<I></I>fT<I>, then </I>S(Z)<I> is the Fourier transform of the time domain sequence </I>s[i]<I> into the function of frequency </I>S(f)<I>. (Since </I>S<I> is a function of </I>Z<I> and </I>Z<I> is a function of the frequency </I>f<I>, </I>S<I> may be expressed as a function of </I>f<I>.)</I><P>
This list does not exhaust all the possible transforms of interest in DSP. The Walsh transform is similar to the Fourier transform, but it uses rectangular pulses instead of sine waves. The Walsh transform, therefore, is somewhat less expensive computationally because transcendental functions do not need to be evaluated. See the review article by Bracewell <a href="#ref3">[3]</a> for a more complete list of tranforms.<P>
<h4><FONT COLOR="#000080"><A name="00C6_0083">Filters<A name="00C6_0083"></FONT></h4></P>
A filter takes an input signal and selectively passes its desirable frequency components through, filtering out or reducing other frequencies. The low-pass filter previously mentioned passes the lower frequencies, such as the audio signal, and blocks the high frequencies, such as the carrier.<P>
You can implement a filter by starting with the sequence of signal values <I>s[n]</I>. Fourier transform them into <I>S[f]</I>, multiply by a filtering function, and perform the inverse transformation to obtain the transformed sequence of time values. For a low-pass filter, for example, you might attenuate or even set to zero the higher frequency components. In doing so, you must avoid a number of pitfalls. You must treat negative frequencies properly. In effect, they are present to correctly include phase shifts of the frequency components. Aliasing effects, in which one frequency component can erroneously contribute to the effects of another, can also cause problems. See reference 1 for a more complete discussion.<P>
The more economical approach followed by most DSP applications is to work in the time domain. If you let <I>y[t]</I> denote the filtered sequence, the general digital filter looks like:<P>
<pre>   y[n] = Axy[n] + Bxy[n-1] + ...
     + axs[n] + bxs[n-1] + ...</pre>
Note that in general the filter output at any time can depend upon previous output values as well as previous input values. If it does depend upon previous output values, it is called recursive. Filters that are not recursive have the property that if the input shuts off after some time, the output will do the same. Such filters are called Finite-Impulse Response (FIR) filters, because their response to an impulse input (a signal that lasts for just one sampling period) is finite in extent. In general, if the coefficients <I>A, B,</I> etc. are nonzero and the filter output depends upon previous output values, this will not be the case. The filter can ring forever. Such filters are called Infinite-Impulse Response (IIR) filters. Filters with <I>b=c=...=0</I> are called all-pole filters. They arise from designs using the maximum entropy method to develop optimal filters.<P>
<h4><FONT COLOR="#000080"><A name="00C6_0084">Filters And Digital Filtering<A name="00C6_0084"></FONT></h4></P>
Filter design requires rather sophisticated mathematics. (See references <a href="#ref4">4</a> and <a href="#ref5">5</a>.) <A href="list4.htm">Listing 4</a>
contains a generic digitial filter routine. It is a series of multiply-accumulate cycles. Such MAC operations are the bread and butter of DSP chips, which are designed to perform such operation sequences naturally. The simplicity of the operations is what makes digital filtering attractive, particularly in hardware.<P>
Consider the simplest imaginable low-pass filter:<P>
<pre>y [n] = .5(s[n]+s[n-1])</pre>
The output is the average of the most recent two input signal values. A constant (DC) component of the signal, such as the sequence<I> 1, 1, 1, 1,...</I> will be unaffected. The higest-frequency component representable, namely <I>1, -1, 1, -1, </I>etc. will be completely attenuated, with output <I>0, 0, 0, ...</I> This is the simplest type of moving-average filter, in which the window of visible signal values is the most recent two values. A more general filter of the form:<P>
<pre>y[n] = (s[n] + s[n-1] + ... + s[n-K])/(K+1)</pre>
can be easily constructed. Other common windows can be based on other weightings, such as the Hamming window with size<I> 2N--1</I>:<P>
<pre>a[n] = .54 + .46xcos((n+(N-1))p/N)</pre>
The choice of windowing function decides the compromise between attenuating undesired frequencies and minimizing effects on the desired frequencies.<P>
Averaging or windowing filters can often be constructed more economically by using recursive filters. An example from reference 4 is:<P>
<pre>y[n] = y[n-1] + .05x(x[n]-x[n-20])</pre>
which behaves similarly to a filter in which we average over the most recent 20 signal values. In effect, the recursive term <I>y[n-1]</I> maintains memory of the summation.<P>
The simplest high-pass filter would be:<P>
<pre>y[n] = (s[n] - s[n-1])</pre>
Note that a constant component would be zeroed out. A more general form of high-pass filter would be<P>
<pre>y[n] =-ay[n-1] + (s[n] - s[n-1])</pre>
Many other types of filters are possible. Band-pass filters block or attenuate both lower and higher frequencies outside of a the band. Band-stop filters block or reject a range of frequencies. This article just scratches the surface of this subject. For more details, see references <a href="#ref4">4</a> and <a href="#ref5">5</a>.<P>
<h4>References</FONT></h4></P>
<a name="ref1">[1]</a>     L. Baker, <I>C Tools for Scientists and Engineers</I>, McGrawHill, 1989.<P>
<a name="ref2">[2]</a>     L. Baker, "Complex Numbers and Matrices in C," <I>CUJ</I>, May, 1990, p.59.<P>
<a name="ref3">[3]</a>     R. N. Bracewell, "Numerical Transforms," <I>Science</I>, 248, May 11, 1990, p. 697-704.<P>
<a name="ref4">[4]</a>     P. A. Lynn, <I>An Introduction to The Analysis and Processing of Signals</I>, 2nd. ed, (Indianapolis, IN: H. W. Sams, 1982).<P>
<a name="ref5">[5]</a>     N. K. Bose, <I>Digital Filters</I>, (N.Y.: North-Holland, 1985).<P>

<h4><a href="../../../source/1991/may91/baker.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
