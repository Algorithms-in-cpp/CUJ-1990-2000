


<HTML>
<HEAD>

<TITLE>May 1991/Allocating Multiple char Arrays</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmay.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">Allocating Multiple char Arrays<A name="0102_008A"><A name="0102_008A"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0102_0000"><A name="0102_0000">Art Shipman</font></h3><hr><blockquote><P>
<P><i><A name="0102_0000"><A name="0102_0000">Arthur Shipman is a computer consultant working in the upstate New York area. He has a B.A. in mathematics from Mt. St. Mary College. He writes in Assembler, BASIC, and C on MS-DOS machines. You can contact him at P.O. Box 390, Westbrookville, NY 12785.</i></P><P>
When you copy a record from a file to memory, allocating memory for the fields of the record as an array of strings avoids multiple calls to <I>malloc</I> and reduces allocation bookkeeping. However, you must build a more complex data structure, in contrast to allocating memory for a single string. Allocating an array of pointers to a set of strings, plus the strings themselves, involves a hierarchy of memory allocation. The routine <I>CreateRecord</I> in <A href="list1.htm">Listing 1</a>
handles such complex allocation.<P>
<I>CreateRecord</I> allocates memory for any array of strings whose maximum lengths are known in advance. The operation of the function is best explained in database terms: records, fields, and field lengths. <I>CreateRecord</I> takes three parameters: an integer <I>nfields</I> that gives the number of fields in a database record, an integer array of field lengths <I>flen[],</I> and an initialization character <I>InitString.</I> The initialization character is typically <I>'\0'</I> or <I>SPACE. CreateRecord</I> returns a pointer to an array of initialized fields. Thus, with little more than a set of field sizes, this function can create empty records for data entry or for input from a file.<P>
<I>CreateRecord</I> performs a single memory allocation and returns one pointer to the allocated memory. (See <A href="fig1.htm">Figure 1</a>.
) The pointer points to an array of initialized pointers to <I>char.</I> These point in turn to a set of strings located in the allocated block following the pointer array. Each string is itself initialized to the <I>InitString</I> character value.<P>
<h4><FONT COLOR="#000080"><A name="0102_008B">Simple Allocation<A name="0102_008B"></FONT></h4></P>
<A href="fig2.htm">Figure 2</a>
illustrates a simple allocation of memory where <I>malloc</I> assigns a pointer to a portion of available memory. Such an allocation might be coded<P>
<pre>P = malloc(size);</pre>
where <I>P</I> represents a pointer declared in your code. The boxes in the figure represent the allocated memory, and the arrow represents <I>P</I> receiving the address of the start of the memory block. This kind of allocation is inadequate, however, when creating an array of pointers similar to <I>P</I>. Only <I>P</I> is initialized to a certain value. None of the pointers in the array that <I>P</I> accesses is initialized.<P>
To use the pointers <I>P[i]</I> to designate strings, you must assign each its own portion of memory. The <I>for</I> loop<P>
<pre>for(i=0; i&lt;limit; i++)
   P[i] = malloc(size[i]);</pre>
calls <I>malloc</I> for each pointer <I>P[i]</I>. Counting the original call, creating <I>N</I> fields requires <I>N+1</I> calls to <I>malloc.</I> The overhead of function calls and allocation bookkeeping now begins to mount. <A href="fig3.htm">Figure 3</a>
illustrates the ungainly process.<P>
Note also that you must call <I>free N+1</I> times to release the memory when it is no longer needed. Forgetting to free <I>P[i],</I> and simply freeing the original pointer <I>P</I> releases only one of the <I>N+1</I> allocations. The rest remain allocated, and their memory becomes inaccessible.<P>
<h4><FONT COLOR="#000080"><A name="0102_008C">Multiple Array Allocation<A name="0102_008C"></FONT></h4></P>
A substantially improved scheme sums the field lengths, and calls <I>malloc</I> only twice: once to assign the array of pointers to <I>P,</I> and once to allocate the space to which these pointers will point.<P>
However, avoiding the individual calls to <I>malloc</I> skirts the assignment of addresses to the pointer array and the allocation of space for strings. Initializing these pointers must still be handled, even if not in conjunction with calls to <I>malloc.</I><P>
This approach still lacks finesse. If <I>P</I> points to a single database record, a single call to <I>free</I> should release the memory. However, since <I>malloc</I> was called twice to create the record, you must call <I>free</I> twice in its disposal.<P>
<I>CreateRecord</I> overcomes these problems by calculating the total memory required for the array of pointers plus the fields that these pointers will reference. A single <I>malloc</I> call allocates the required memory in a single block (<A href="fig1.htm">Figure 1</a>)
. <I>CreateRecord</I> then divides this space between the pointers and the referenced fields. It assigns the field addresses to the pointer array and initializes the string space. Finally, <I>CreateRecord</I> returns a single pointer with which you can later free the entire allocation block.<P>
<I>CreateRecord</I> has several advatages over the default allocation functions of standard C for complex allocation:<P>
<UL><li><I>CreateRecord</I> efficiently creates arrays of strings often needed in C.</li>
<li>The single call to <I>malloc</I> keeps both function call overhead and memory allocation overhead to a minimum.</li>
<li>The return value is a pointer to an array of pointers that <I>CreateRecord</I> automatically initialized. Each points to a string whose length is predetermined by the caller.</li>
<li>The strings can be initialized to any character value.</li>
<li>The single memory allocation keeps the array of pointers with the character arrays they reference, in a single block of memory. While not necessary for proper operation of pointer arrays, this organization helps clarify what is happening in memory.</li>
<li>Since <I>malloc</I> is called only once, deallocating the entire allocated block requires just one call to <I>free</I>.</li></UL>
<h4><FONT COLOR="#000080"><A name="0102_008D">Conclusion<A name="0102_008D"></FONT></h4></P>
A single allocation of memory is a straightforward act. But allocating an array of pointers, coupled with assigning memory to those array elements, is significantly more complex. <I>CreateRecord</I> minimizes the information required to perform such an allocation, and handles the process with a minimum of overhead. It produces an array that can be controlled and destroyed using a single pointer. In sum, it relieves the complexity involved in creating multiple character arrays.<P>

<h4><a href="../../../source/1991/may91/shipman.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
