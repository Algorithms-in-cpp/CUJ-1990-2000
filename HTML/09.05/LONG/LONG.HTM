


<HTML>
<HEAD>

<TITLE>May 1991/Orbit Propagation</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmay.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Numerical Applications</FONT></H2>

<hr><h2 align="center"><font color="#800000">Orbit Propagation<A name="00F3_0086"><A name="00F3_0086"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="00F3_0000"><A name="00F3_0000">Rodney Long</font></h3><hr><blockquote><P>
<P><i><A name="00F3_0000"><A name="00F3_0000">Rodney Long has worked as an engineer and programmer for more than 15 years in industry and government, including work on the NASA Space Shuttle and U.S. Air Force Global Positioning System projects. He may be reached at 19003 Swan Drive, Gaithersburg, MD 20879.</i></P><P>
The prediction problem in orbital mechanics is this &#151; given the position and velocity of an orbiting object at some initial time <I>t0</I>, find the position and velocity at some second (usually later) time <I>t</I>. (A time-indexed table of such positions and velocities is called an <I>ephemeris</I>.)<P>
This article discusses the prediction problem of orbital mechanics. It provides sample C code implementations for some of the classical and modern computations that solve that problem. You don't need a course in orbital mechanics to use this code, but you do need some grasp of the concepts and terminology. I have provided the essentials here and recommend <I>Fundamentals of Astrodynamics</I> <a href="#ref1">[1]</a> for further study.<P>
<h4><FONT COLOR="#000080"><A name="00F3_0087">Orbital Predictors<A name="00F3_0087"></FONT></h4></P>
Orbit predictors fall into two classes &#151; analytic and numerical. Analytical orbit predictors use an exact mathematical expression for the solution. Numerical orbit predictors offer only an approximate mathematical expression for the solution.<P>
For orbit prediction, exact expressions are available for the solutions of objects moving in <I>two-body </I>or<I> Keplerian motion,</I> which involves modeling the motion of an object being accelerated only by the gravitational force from a second object. In two-body modeling, the two objects are treated as <I>point-masses,</I> which means the entire mass of each object is considered to be concentrated at one mathematical point. This is the simplest model used for orbital motion.<P>
<I>Analytic</I> orbit predictors evaluate these exact expressions and are called <I>orbit propagators</I>. Orbit propagators require relatively few numerical calculations and execute quickly.<P>
When you want to model the orbit motion precisely, you must use a numerical method, because orbiting objects are subject not only to the point-mass gravitational force, which produces their Keplerian motion, but also to a range of other forces that <I>perturb</I> or modify this motion.<P>
Which perturbing forces are significant to model depends on the particular orbiting object and its orbit. For example, for low-altitude Earth satellites, drag forces due to the earth's atmosphere are highly significant. Other forces commonly modeled in space-tracking systems include point-mass effects of the sun and moon, perturbations due to the scattered concentrations of mass within the earth, thrust effects (if the orbiting object has engines), and solar pressure due to the bombardment of the object from particles originating in the sun.<P>
Because no exact mathematical expressions exist to model this complex, perturbed motion, you must use numerical approximations. These techniques are orbit <I>integrators</I>, as distinguished from the analytic orbit propagators. Orbit integrators require many numerical calculations. Also, depending on the forces being modeled, the integrator may need to repeatedly access databases of empirical data, containing such information as ephemeris for the sun and moon, atmosphere models, etc. For these reasons, integrators have computationally-intensive, slower execution.<P>
Integrators do the actual tracking of orbiting objects. Perturbations change the orbital motion too significantly to allow for practical use of a propagator for long-term tracking. Nevertheless, propagators are a valuable method of getting a quick first approximation of an object's path. They provide short-duration predictions for an object not subject to severe perturbing forces, such as a small, unpowered, high-altitude earth satellite. An orbit propagator may also perform a consistency check on an integrator. By setting all the non-Keplerian forces in the integrator to zero, you should get the positions and velocities output from the integrator to match those output by the propagator.<P>
Almost all major space-tracking systems incorporate propagators as part of their systems. For example, the original space-tracking program for the space shuttle used a program called the Analytic Ehpemeris Generator (AEG), which solved the equations of motion by a variation of parameters method. The Goddard Trajectory Determination System (GTDS), used for general-purpose satellite tracking at Goddard Space Flight Center in Greenbelt, MD, contains a propagator called TWOBDY which uses a <I>universal variables</I> analytic algorithm. You will find a C version of TWOBDY at the end of this article.<P>
<h4><FONT COLOR="#000080"><A name="00F3_0088">Two-Body Orbital Mechanics<A name="00F3_0088"></FONT></h4></P>
Consider an earth satellite with a reference coordinate system as in <A href="fig1.htm">Figure 1</a>.
 Note that the X-Y plane passes through the equator, while the Z-axis lies along the earth's rotation axis. The positive X-axis is usually defined to point toward a relatively unchanging part of the celestial sphere (usually the First Point of Aries).<P>
Under Keplerian motion, the fundamental equation governing the motion of this object is:<P>
<pre>RDD = - (mu/r<SUP>3</SUP>)*R</pre>
where:<P>
R = (x,y,z) is the position of the object, <br>
RDD = R&#168; is the acceleration of the object,<br>
r = the magnitude of <I>R</I>,<br>
mu = g(mr + mo),<br>
g = the universal gravitational constant,<br>
mc = mass of the "central body" (the Earth), and<br>
mo = mass of the orbiting object.<P>
(Uppercase denotes vectors in the above equation.)<P>
In the context of one very small object orbiting a much larger one, the term <I>mu</I> is usually approximated by <I>g</I><I>*</I>(<I>mc</I>), since <I>mc</I><I> &gt;&gt; </I><I>mo</I>.<P>
Objects under Keplerian motion move in paths that are conic sections; this follows from the previous fundamental equation. The central body lies at one focus of the conic section. The point in the orbit when the object most closely approaches the earth is called <I>periapsis</I> or <I>perigee</I>. The point in the orbit when the object is farthest from the earth is called <I>apoapsis</I> or <I>apogee</I>. From the fundamental equation, you may derive an equation that displays the conic nature of the orbits, namely:<P>
<pre>r = p/(1 + e * cos(nu))</pre>
where:<P>
<I>r</I> is defined as above,<br>
<I>p</I> = the semi-latus rectum of the conic section which the object travels on,<br>
<I>nu</I> = the angle, measured in the orbit plane between (1) a line from focus to periapsis, and (2) a line from focus to the object's current position, and<br>
<I>e</I> = the eccentricity of the conic section.<P>
<I>Nu</I> is called the "true anomaly" of the object. If you know <I>nu</I> and you know where periapsis is, you know the object's position. See <A href="fig2.htm">Figure 2</a>.
<P>
The value of <I>e</I> determines the type of conic section that the orbit describes:<P>
<UL><li><I>e</I><I> </I>&lt;<I> </I><I>1</I> implies that the orbit is an ellipse.</li>
<li><I>e</I><I> </I>=<I> 1</I> is a parabolic orbit.</li>
<li><I>e</I><I> </I>&gt;<I> </I><I>1</I> implies that the object travels on one branch of a hyperbola.</li></UL>
I am using the word "orbit" in a more general sense than the usual case of a closed curve, since parabolas and hyperbolas don't fall into that category. The case <I>e = 0</I> is a circular orbit, a special case of an ellipse.<P>
For elliptical orbits, the object's state (position and velocity) will repeat periodically. For the parabolic and hyperbolic cases, the position will obviously change indefinitely as the object continues to move away from the central body. But what happens to the velocity? The answer is, for the parabola, the velocity approaches zero as the distance from the central body increases. For the hyperbola, however, it is possible for the object to have a finite non-zero velocity regardless of how far it has traveled. Whether the hyperbolic object's velocity approaches zero or some constant non-zero value depends on how much initial velocity it is given when launched into its orbit.<P>
Earth satellites follow elliptical orbits; many of them are circular to a high degree. Some comets follow parabolic paths, but parabolic orbits are otherwise rare in nature <a href="#ref1">[1]</a>. Earth-launched interplanetary missions follow hyperbolic paths.<P>
<h4><FONT COLOR="#000080"><A name="00F3_0089">Keplerian Elements<A name="00F3_0089"></FONT></h4></P>
Six <I>Keplerian elements</I> geometrically describe the orbit. They are defined as follows:<P>
<UL><li><I>a</I> = the semi-major axis of the orbit</li>
<li><I>e</I> = the eccentricity of the orbit</li>
<li><I>i</I> = the inclination of the orbit plane with respect to the X-Y plane</li>
<li><I>lan</I> = the longitude of the ascending node, or the angle, measured in the X-Y plane, between the positive X-axis and the point at which the object crosses the X-Y plane when ascending in the positive Z direction</li>
<li><I>w</I> = the argument of periapsis, or the angle, measured in the orbit plane, between the X-Y plane and periapsis</li>
<li><I>M</I> = the mean anomaly, defined below</li></UL>
<I>a</I> and e define the shape of the orbit. i defines the tilt of the orbit plane with respect to the X-Y plane. <I>w</I> defines the orientation of the orbit within the orbit plane. And <I>lan</I> defines where the orbit intersects the X-Y plane with the object ascending. See <A href="fig3.htm">Figure 3</a>.
<P>
If you know these five elements, you know the two-body orbit completely, but you don't know where your object is in the orbit. The element <I>M</I> provides this information. <I>M</I> determines the orbiting object's location, relative to periapsis.<P>
Knowing the six Cartesian coordinates for position and velocity is equivalent to knowing the six Keplerian elements. Any good orbital mechanics text will explain the conversion of one system to the other (see Reference <a href="#ref1">1</a>). I have written two C functions, <I>c2ke</I> and <I>k2ce</I>, to perform the conversions in both directions. The C code in <A href="list1.htm">Listing 1</a>
shows the calling sequences and sample executions.<P>
<h4><FONT COLOR="#000080"><A name="00F3_008A">Solving Orbit Prediction For Ellipses<A name="00F3_008A"></FONT></h4></P>
Define the mean anomaly <I>M</I> by:<P>
<pre>M = (mu/a<SUP>3</SUP>)<SUP>1/2</SUP> * [t - tp]</pre>
where:<P>
<I>mu</I> and <I>a</I> are defined as before,<br>
<I>t</I> = time corresponding to current position of the object, and<br>
<I>tp</I> = time that the object went through its periapsis point.<P>
If you know the first five Keplerian elements and <I>tp</I>, you can compute <I>M</I> for any desired time <I>t</I>.<P>
The <I>eccentric anomaly</I><I> E</I> is defined (for elliptical orbits) by circumscribing a circle around the ellipse, then dropping a perpendicular from a point <I>p</I> on the circle so it passes through the current position of the object on the ellipse (see <A href="fig4.htm">Figure 4</a>)
. The angle between the major axis and a line drawn from the center of the circle to <I>p</I> is called the eccentric anomaly. (In <A href="fig4.htm">Figure 4</a>,
 F is the central body, O is the orbiting object, and C is the center of the cirsumscribed circle.)<P>
The equation of Kepler that relates the mean anomaly <I>M </I>to the eccentric anomaly <I>E</I> is:<P>
M = E - e*sin(E)<P>
The relationship between <I>E</I> and the true anomaly <I>nu</I> is given by:<P>
<pre>cos(E) = (e + cos(nu)) 1 + e*cos(nu))</pre>
which may be re-arranged to give:<P>
<pre>cos(nu) : (e - cos(E)) e*cos(E) - 1)</pre>
Knowing these equations and that <I>E</I> and <I>nu</I> must always lie in the same half of the plane, you can convert from <I>nu</I> to <I>E</I> or vice versa. <A href="list2.htm">Listing 2</a>
gives a short C function to carry out the conversion. Inputs are one of the angles, and an indicator specifying which type of input is being converted. Given the value of either <I>M</I><I>,</I><I> E</I>, or <I>nu</I>, plus the orbit eccentricity, you can use the above equations to compute the values of the remaining two quantities.<P>
Unlike the previous equations, Kepler's equation does not allow you to solve explicitly for <I>E</I> or <I>sin (E)</I>. Instead, you must make a first estimate, and then iteratively improve your previous estimate, usually by Newton's method. <A href="list3.htm">Listing 3</a>
is a C function <I>sk</I> that solves Kepler's equation for <I>E</I><I>.</I> The inputs are the mean anomaly <I>M</I><I>,</I> the starting estimate <I>E0</I> for the solution to Kepler's equation, the orbit eccentricity <I>e</I>, and two parameters, <I>mi</I> and <I>t</I><I>,</I> which determine when the iteration will terminate. If two successive estimates for the eccentric anomaly differ in absolute value by less than <I>t</I><I>,</I> the procedure stops. Otherwise, it continues for a maximum of <I>mi</I> iterations. <A href="list3.htm">Listing 3</a>
also provides a sample execution of <I>sk</I><I>.</I><P>
Now, remember that:<P>
<pre>M = (mu/a<SUP>3</SUP>)<SUP>1/2</SUP> * [t - tp]</pre>
Hence for a given orbit, if you know the time of periapsis <I>tp</I><I>, </I>then, in order to find the position and velocity at time <I>t</I><I>,</I> you<P>
1.     Compute the mean anomaly <I>M</I><I>.</I><P>
2.     Solve Kepler's equation for <I>E</I><I>.</I><P>
3.     Use the equations for <I>E</I> and <I>nu</I> to compute <I>nu</I><I>.</I><P>
4.     Use the Keplerian orbit parameters plus <I>nu</I> to compute position and velocity.<P>
(To find the position and velocity at <I>t</I> given the eccentric anomaly <I>E0</I> at any time <I>t0</I><I>,</I> with <I>t0</I> not necessarily the time of periapsis, is only slightly more difficult.)<P>
In spite of being a time-tested method, the classic approach has at least two drawbacks, already implicit in what I have described earlier. The first difficulty is numerical. The classical method requires the iterative computation of the quantity (<I>E - e*sin(E)</I>)<I>,</I> until this quantity matches a given <I>M</I> to within a satisfactory tolerance. Beware of subtracting nearly equal quantities. In the case where <I>E</I> is small, <I>sin(E)</I> is approximately <I>E</I> (remember that sin(x) = x - x<SUP>3</SUP>/3! + x<SUP>5</SUP>/5! - ...). Morever, if the orbit is near-parabolic, e is close to 1. Under these conditions, <I>E</I> is very close to <I>e*sin(E)</I>, and the subtraction may result in a signficant loss of precision.<P>
The second objection to the classical prediction approach is that it is not general. For elliptical orbits, you solve Kepler's equation, but for parabolas and hyperbolas you must use similar equations involving the "parabolic (hyperbolic) eccentric anomalies" <I>D</I> and <I>F</I>.<P>
For at least 25 years, an approach that gets around both the numerical difficulty and the lack of generality has been available.<P>
<h4><FONT COLOR="#000080"><A name="00F3_008B">The Universal Variables Solution<A name="00F3_008B"></FONT></h4></P>
The algorithm described here was published in the NASA Contractor Report by W.H. Goodyear <a href="#ref3">[3]</a>.<P>
The universal variables algorithm unifies the separate approaches to orbit prediction for elliptical, parabolic, and hyperbolic orbits by providing one procedure that iteratively solves for a "generalized eccentric anomaly" which plays the role of <I>D</I><I>,</I><I> E</I><I>,</I> and <I>F</I>. Moreover, it does not suffer from the numerical instabilities of the classic method.<P>
This generalized anomaly, denoted <I>psi</I><I>,</I> is defined implicitly by:<P>
<pre>    dt/d(psi) = r</pre>
where:<P>
t = the time variable, and<br>
r = orbit radius at t<P>
Through some lengthy mathematical manipulations (shown in the NASA report), you can formulate a generalized Kepler equation in terms of <I>psi</I><I>:</I><P>
<pre>    t = t0 + r0 * s1 + sig0 * s2 + mu * s3</pre>
where:<P>
t = time value corresponding to psi,<br>
t0 = time value corresponding to psi0,<br>
r0 = orbit radius corresponding to psi0,<P>
s1,s2,s3 = functions of psi which may be evaluated by series expansions,<br>
sig0 = the dot product of the position and velocity at time t0, and<br>
mu is as previously defined.<P>
Now suppose you know the position and velocity (<I>r0, v0</I>) at time <I>t0</I><I>,</I> and you want to know the position and velocity (<I>r, v</I>) at time <I>t</I>. Let <I>tau</I> be defined by <I>tau</I><I> =</I><I> t - t0</I><I>.</I> Then define <I>dtau</I> by:<P>
<pre>   dtau(psi) = r0 * s1(psi) + sig0 * s2(psi) +
               mu * s3(psi) - tau</pre>
where the terms that are functions of <I>psi</I> are explicitly displayed. By finding the value of <I>psi</I> to make <I>dtau(psi) = 0</I>, you find the value of <I>psi</I> that corresponds to the desired output time <I>t</I>.<P>
Then, you will be able to compute <I>r</I> and <I>v</I> at time <I>t</I>, as functions of this <I>psi</I>. The <I>TWOBDY</I> algorithm does just this, using the Newton method for adjusting the estimates. When looking for the Newton step in the code, you should know that the derivative of <I>dtau</I> with respect to <I>psi</I> is given by:<P>
<pre>   d(dtau)/d(psi) = r0 * s0 + sig0 * s1 + mu * s2</pre>
and that this quantity is also equal to the orbit radius at time <I>t</I>.<P>
If the Newton step does not bring <I>psi</I> to within acceptable bounds on an iteration, <I>TWOBDY</I> tries several other adjustments to the current <I>psi</I>. If the resulting <I>psi</I> is acceptable, Newton iteration continues. If all of the alternative adjustments fail, iteration is halted, and the assumption is that <I>psi</I> may not be improved further. Reaching a <I>psi</I> such that <I>dtau(psi) = 0</I> also halts the iteration.<P>
The abstract and advanced concepts used in <I>TWOBDY</I>, and the many intermediate calculations, may obscure the basically simple logic of the modified Newton algorithm. For this reason, I have provided a brief pseudo-code summary in <A href="fig5.htm">Figure 5</a>.
<P>
The C version, <I>twobdy</I>, of the TWOBDY program follows the public domain FORTRAN version fairly closely, although C structures have been added for input and output, and some general program structure has been incorporated. Note that <I>psi</I> is output into the "input" structure, which facilitates using a good initial estimate of <I>psi</I> when making iterative calls to <I>twobdy</I>.<P>
I have submitted to the C Users' Group Library expanded versions of the codes in this article. The volume includes both Keplerian-to-Cartesian and Cartesian-to-Keplerian routines, as well as a version of <I>twobdy</I> that outputs partial derivatives in addition to position, velocity, and <I>psi</I>.<P>
<h4><FONT COLOR="#000080"><A name="00F3_008C">Bibliography<A name="00F3_008C"></FONT></h4></P>
<a name="ref1">[1]</a>     Bate, R., et. al., <I>Fundamentals of Astrodynamics</I>, Dover, 1971.<P>
<a name="ref2">[2]</a>     Atkinson, K., <I>An Introduction to Numerical Analysis</I>, John Wiley and Sons, 1978.<P>
<a name="ref3">[3]</a>     Goodyear, W.H., "A General Method for the Computation of Cartesian Coordinates and Partial Derivatives of the Two-Body Problem," <I>NASA Contractor Report</I>, NASA CR-522, September 1966.<P>

<h4><A HREF="list4.htm">Listing 4</A></h4>
<h4>Sidebar: <A HREF="sidebar.htm">Analytic vs. Numerical</A></h4>

<h4><a href="../../../source/1991/may91/long.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>


