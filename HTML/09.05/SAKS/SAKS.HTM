


<HTML>
<HEAD>

<TITLE>May 1991/Stepping Up To C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmay.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Stepping Up To C++<A name="011B_0098"><A name="011B_0098"></font></h2><P>
<h3 align="center"><A name="011B_0000"><A name="011B_0000">Your First Class</h3><P>
<h3 align="center"><font color="#800000">Dan Saks</font></h3><hr><blockquote><P>
<P><i><A name="011B_0000"><A name="011B_0000">Dan Saks is the owner of Saks &amp; Associates, which offers consulting and training in C, C++ and Pascal. He is also a contributing editor of TECH Specialist. He serves as secretary of the ANSI C++ committee and is a member of the ANSI C committee. Readers can write to him at 287 W. McCreight Ave., Springfield, OH 45504 or by email at dsaks@wittenberg.edu.</i></P><P>
In my last column, I demonstrated a strategy for easing into C++. You transform an existing C program with poor encapsulation into a C++ program with better encapsulation. (See "Writing Your first Class," <I>CUJ</I>, March 1991). This month, I will explain the resulting C++ program in more detail and present further improvements.<P>
<h4><FONT COLOR="#000080"><A name="011B_0099">A Brief Recap<A name="011B_0099"></FONT></h4></P>
<I>xr</I> is a simple cross-reference generator that prints an alphabetized list of words appearing in a document. Each word in the output is followed by the sequence of line numbers in the document on which that word appears.<P>
The cross-reference generator uses two kinds of data structures &#151; a binary tree and linked lists. The program contains only one binary tree. Each node in the tree stores a word along with that word's sequence of line numbers. The binary tree is not implemented as a class. The cross-reference table module <I>xrt.cpp</I> uses static data and functions to hide the tree structure from <I>main.main </I>accesses the table through a narrow interface of external functions declared in <I>xrt.h</I> and implemented in <I>xrt.cpp</I><I>.</I><P>
The line numbers for each word are actually stored in a singly-linked list rooted in the tree node for that word. The line number sequences are implemented as a class called <I>ln_seq</I><I>.</I> All the implementation details (including the fact that line number sequences are lists) are hidden inside the class. I presented two slightly different implementations of <I>ln_seq</I> &#151; one using a single pointer to the first node in the list, and another with pointers to both the first and last nodes in the list. The header that declares the second version of <I>ln_seq</I> appears in <A href="list1.htm">Listing 1</a>.
 The code is in <A href="list2.htm">Listing 2</a>.
<P>
<h4><FONT COLOR="#000080"><A name="011B_009A">Basic Anatomy<A name="011B_009A"></FONT></h4></P>
The syntax for <I>class</I> declarations is an extension of the syntax for <I>structs.</I> In its simplest form, a <I>class</I> declaration looks like:<P>
<pre>class class_name
   {
   member_declaration;
   ...
   };</pre>
Class members can be data just like in a <I>struct. first</I> and <I>last</I> are the data members of <I>ln_seq</I>. Class members can also be functions. <I>ln_seq, add</I>, and <I>print</I> are the function members of <I>ln_seq</I>. Class members can even be other types, such as <I>classes, structs</I>, and <I>enums</I>.<I>listnode</I> is a type member of <I>ln_seq</I>.<P>
The notation <I>X::m</I> identifies member <I>m</I> of class <I>X</I> as distinct from member <I>m</I> of any other class. <I>X::m</I> is subtly different from <I>y.m</I> (where <I>y</I> is an object of class <I>X</I>)<I>. X::m</I> refers to an element of a class type, but <I>y.m</I> refers to a member of the specific object <I>y</I>. For example, the declaration:<P>
<pre>class ln_seq
   {
   ...
   void print();
   ...
   };</pre>
declares (but does not define) a member function <I>print</I> of class <I>ln_seq</I>. The function definition appears later as:<P>
<pre>void ln_seq::print( )
   {
   ...
   }</pre>
If you declare an object:<P>
<pre>ln_seq seq;</pre>
then <I>seq.print( )</I> calls <I>ln_seq::print</I> applied to object <I>seq</I>. If you declare:<P>
<pre>ln_seq *p;</pre>
then <I>p-&gt;print( )</I> applies <I>ln_seq::print</I> to <I>*p</I>.<P>
<h4><FONT COLOR="#000080"><A name="011B_009B">Access Specifiers<A name="011B_009B"></FONT></h4></P>
The access specifiers <I>public</I> and <I>private</I> control a client's access to class members. (A client is a program component that accesses a class from outside that class.) A client has complete access to public members &#151; it can call public member functions, inspect public data members, and modify any non-<I>const</I> public data members. A client has no access to private members, except via public member functions.<P>
An access specifier can appear before any member declaration in the class declaration:<P>
<pre>class class_name
   {
access_specifier:
   member_declaration;
   ...
access_specifier:
   member_declaration;
   ...
   };</pre>
Each access specifier determines the accessibility of the members that follow it, until the next specifier. In <A href="list1.htm">Listing 1</a>,
 the public specifier applies to the functions <I>ln_seq, add</I>, and <I>print</I>. The private specifier applies to <I>struct listnode</I> and data members <I>first</I> and <I>last.</I><P>
Access specifiers are optional. By default, class members are private. Thus, you can move the private members above the public members and omit the <I>private</I> specifier from the declaration of <I>ln_seq</I>, as shown in <A href="list3.htm">Listing 3</a>.
 The choice between the class layouts in <A href="list1.htm">Listing 1</a>
and <A href="list3.htm">Listing 3</a>
is a matter of personal style. I prefer using explicit access specifiers and placing the public members first, as in <A href="list1.htm">Listing 1</a>.
 (It's a habit I acquired from Lippman<a href="#ref1">[1]</a>.)<P>
Unfortunately, I've had difficulty formatting my classes consistently because of minor glitches in the current crop of C++ compilers. I've found that occasional mysterious compilation errors disappear when I juggle the declaration order of class members.<P>
The default access specifier for a <I>struct</I> is public. Thus:<P>
<pre>struct X
   {
   T a;
   };</pre>
is in most ways equivalent to:<P>
<pre>class X
   {
public:
   T a;
   };</pre>
<h4><FONT COLOR="#000080"><A name="011B_009C">Constructors<A name="011B_009C"></FONT></h4></P>
A constructor is a member function that initializes an object. A constructor has the same name as its class. Although it has no return type, it may have parameters. <I>ln_seq</I> has a constructor with no arguments that sets the <I>first</I> and <I>last</I> pointers to <I>null</I> (see <A href="list2.htm">Listing 2</a>)
.<P>
A constructor is called whenever an auto (or register) object is declared. For example:<P>
<pre>int foo()
   {
   ln_seq seq;
   ...</pre>
calls the constructor to initialize the data members of auto object <I>seq</I>. The <I>new</I> operator also calls a constructor when it creates an object. (In C++, the dynamic memory area managed by the <I>new</I> and <I>delete</I> operators is called the "free store". It is often the same memory area as the heap used by <I>malloc</I> and <I>free</I>.) For example:<P>
<pre>ln_seq *p;
// ...
p = new ln_seq;</pre>
allocates storage to hold an object of class <I>ln_seq</I>, and applies the constructor to that storage before copying the object's address to <I>p</I>.<P>
No constructor is invoked when creating an object using <I>malloc</I>. For example:<P>
<pre>p = (ln_seq *)malloc(sizeof(ln_seq));</pre>
doesn't call a constructor, and leaves *<I>p</I> uninitialized. Thus, as you migrate from C to C++, you should replace calls to <I>malloc</I> (and its cousins <I>calloc</I> and <I>realloc</I>) with calls to <I>new</I>, which invoke a constructor.<P>
If you don't declare constructors for class <I>X</I>, C++ creates <I>X::X( )</I>, a default constructor with no arguments. The generated default constructor for an ordinary C <I>struct</I>, such as <I>listnode</I> in <A href="list1.htm">Listing 1</a>,
 is just an empty function that does nothing. If the <I>struct</I> has members with non-empty constructors, such as <I>struct treenode</I> in <A href="list4.htm">Listing 4</a>,
 the generated default constructor invokes the members' constructors.<P>
At a glance, a <I>treenode</I> of the binary tree looks like an ordinary C <I>struct</I> &#151; it has neither function members nor access specifiers. However, <I>treenode</I> has a member:<P>
<pre>ln_seq lines;</pre>
with a non-empty constructor. Thus, the generated constructor for <I>treenode</I> applies <I>ln_seq'</I>s constructor to initialize lines. <I>treenode'</I>s constructor is invoked by:<P>
<pre>t = new treenode;</pre>
in <I>addtree</I> (see <A href="list4.htm">Listing 4</a>)
.<P>
A class can have more than one constructor. For example, <A href="list5.htm">Listing 5</a>
adds a second constructor <I>ln_seq(unsigned)</I> to the declaration of class <I>ln_seq</I>. This additional constructor initializes a line number sequence with a first line number. A declaration such as:<P>
<pre>ln_seq seq(n);</pre>
initializes <I>seq</I> to contain line number <I>n</I>. It offers a compact and efficient alternative to using:<P>
<pre>ln_seq seq;
...
seq.add (n);</pre>
<A href="list6.htm">Listing 6</a>
shows an implementation for <I>ln_seq::ln_seq (unsigned)</I>.<P>
Using this constructor in the cross-reference generator requires further changes. All of the <I>ln_seq</I> objects in the program are data members of <I>treenode</I>. The generated default constructor for <I>treenode</I> invokes the <I>ln_seq</I> default constructor. To use the alternate <I>ln_seq</I> constructor, you must create another <I>treenode</I> constructor that invokes <I>ln_seq(unsigned)</I> instead of <I>ln_seq( )</I>. You must also modify <I>addtree</I> to use this new <I>treenode</I> constructor. These changes appear in <A href="list7.htm">Listing 7</a>.
<P>
I changed <I>treenode</I> from a <I>struct</I> to a <I>class</I>. All the members of <I>treenode</I> are still public, so I could have left the keyword <I>struct</I> in the declaration for <I>treenode</I>. However, I used the keyword <I>class</I> to emphasize that <I>treenode</I> is no longer just a collection of data.<P>
The <I>treenode</I> constructor is defined as:<P>
<pre>treenode::treenode(unsigned n)
   : lines(n) { }</pre>
The construct <I>lines(n)</I> between the : and the { is an initializer. It initializes <I>treenode:: lines</I> using the <I>ln_seq(unsigned)</I> constructor. Without this initializer, lines will be initialized with the default constructor <I>ln_seq( ).</I><P>
Initializers can initialize class members that have primitive types. For example, you can embellish the <I>treenode</I> constructor to initialize the <I>left</I> and <I>right</I> pointers using either:<P>
<pre>treenode::treenode(unsigned n)
   : lines(n)
   {
   left = right = 0;
   }</pre>
or:<P>
<pre>treenode::treenode(unsigned n)
   : lines(n), left(0), right(0)
   { }</pre>
I don't believe that one notation has an advantage over the other for members with primitive types.<P>
Using the explicit <I>treenode</I> constructor, I replaced the lines:<P>
<pre>t = new treenode;
...
t-&gt;lines.add(n);</pre>
in <I>addtree</I> with:<P>
<pre>t = new treenode(n);</pre>
I also replaced the last lingering call to <I>malloc</I> with a call to the <I>new</I> operator. The expression <I>new char[n]</I> returns a pointer to an array of <I>n chars</I> allocated from the free store.<P>
<h4><FONT COLOR="#000080"><A name="011B_009D">Destructors<A name="011B_009D"></FONT></h4></P>
The cross-reference program allocates memory from the free store to build the table, but it never releases that memory. This program can afford to be cavalier with the free store because it builds just one table that exists for the duration of the program. The program terminates immediately after printing the table, effectively discarding the table. If the cross-referencer were part of a larger application with other uses for the free store, then the table's storage should be recycled when it is no longer needed.<P>
The destructor for a class is a special member function that destroys the value of an object of that class. That is, a destructor typically releases resources, such as memory or files, used by an object. The destructor is called implicitly just before the object itself is destroyed. The destructor for class <I>X</I> is denoted <I>X::</I><I>~</I><I>X()</I>. A class can have only one destructor. That destructor cannot have any arguments.<P>
<A href="list8.htm">Listing 8</a>
shows an implementation of <I>In_seq::</I><I>~</I><I>ln_seq( )</I> that frees the storage used by a line number sequence. The destructor uses the C++ operator <I>delete</I>, instead of the Standard C function <I>free,</I> to return the storage to the free store.<P>
The destructor is called implicitly when an object goes out of scope. For example, in:<P>
<pre>void foo()
   {
   ln_seq seq;
   ...
   seq.add(n);
   ...
   seq.print();
   }</pre>
the scope of <I>seq</I> extends to the end of <I>foo</I>. The compiler generates a call to <I>~</I><I>ln_seq</I> just prior to the return from <I>foo</I>. At runtime, the destructor frees the <I>listnodes</I> referenced by <I>seq,</I> and the function return discards the storage for <I>seq</I> itself.<P>
Just as the <I>new</I> operator invokes a constructor when allocating an object, the <I>delete</I> operator invokes the destructor when freeing that object. <I>delete</I> calls the destructor just before it returns storage to the free store. For example, if you declare <I>p</I> as:<P>
<pre>ln_seq *p = new ln_seq;</pre>
then:<P>
<pre>delete p;</pre>
applies <I>~</I><I>ln_seq</I> to *<I>p</I> and then frees the storage for *<I>p.</I><P>
If you don't define a destructor for a class with members that have destructors, the compiler generates a destructor for you. For example, now that class <I>ln_seq</I> has a destructor, <I>treenode</I> (<A href="list7.htm">Listing 7</a>)
 has an implicit destructor that applies <I>~</I><I>ln_seq</I> to <I>lines.</I><P>
<I>treenode</I>'s pointer members, <I>word, left,</I> and <I>right</I>, do not have destructors. However, they reference storage that should be deleted when a <I>treenode</I> is destroyed. Therefore, the generated destructor won't discard an entire subtree. If you want to discard a subtree, you must write an explicit destructor that deletes the storage referenced by the pointer members.<P>
<A href="list9.htm">Listing 9</a>
shows a new implementation of <I>xrt.cpp,</I> the cross-reference table. <I>class treenode</I> has an explicit destructor that uses the <I>delete</I> operator to destroy objects referenced by the pointer members. The line number sequence <I>lines</I> is destroyed by an implicit call to <I>~</I><I>ln_seq.</I><P>
The member:<P>
<pre>char *word;</pre>
references an object with a primitive type. Primitive types don't have destructors, so:<P>
<pre>delete word;</pre>
merely returns storage to the free store. However, the members:<P>
<pre>treenode *left, *right;</pre>
reference other <I>treenodes.</I> Because <I>treenode</I> has a destructor (you're looking at it), calling:<P>
<pre>delete left;</pre>
applies the destructor to *<I>left</I> recursively before freeing the storage for *<I>p</I>. The recursion appears infinite, but in fact it stops on <I>null</I> pointers. The preceding <I>delete</I> statement behaves as if it were:<P>
<pre>if (left != 0)
   delete left;</pre>
Now that <I>treenode</I> has a destructor that destroys a subtree, all you need is:<P>
<pre>delete root;</pre>
to discard the entire cross-reference table. <I>root</I> is a static data object hidden in <I>xrt.cpp</I> and <I>main</I> (in <I>xr.cpp</I>) cannot access <I>root</I> directly. Thus <I>xrt.cpp</I> has a new external function <I>xrt_destroy</I> that deletes <I>root</I>. You must add <I>xrt_destroy</I> to <I>xrt.h</I> (see <A href="list10.htm">Listing 10</a>)
 and call it from <I>main</I> after printing the table (see <A href="list11.htm">Listing 11</a>)
.<P>
<h4><FONT COLOR="#000080"><A name="011B_009E">More Good Things To Come<A name="011B_009E"></FONT></h4></P>
The cross-reference table is looking more and more like a class. The interface functions in <I>xrt.h</I> will be public member functions of class <I>xrt</I> &#151; <I>xrt_add, xrt_print,</I> and <I>xrt_destroy</I> will become <I>xrt::add, xrt::print</I> and <I>xrt::</I><I>~</I><I>xrt,</I> respectively. The static data object <I>root</I> in <I>xrt.cpp</I> will be a private data member <I>xrt::root,</I> initialized to null by the constructor <I>xrt::xrt</I>. I'll transform the cross-reference table into a class in my next column.<P>
<h4><FONT COLOR="#000080"><A name="011B_009F">A Change In Style<A name="011B_009F"></FONT></h4></P>
In some of the listings in my last column, I inadvertantly used both <I>0</I> and <I>NULL</I> to represent the null pointer constant. I meant to always use <I>0</I>. The listings in this article use <I>0</I> consistently.<P>
In days gone by, I was fairly adamant about using <I>NULL</I> to represent the null pointer constant. I was distressed to find that nearly all C++ literature uses <I>0</I> instead of <I>NULL</I>. For some C++ implementations, using <I>NULL</I> creates some problems.<P>
According to the C standard, a null pointer constant is either an integral constant expression with value <I>0</I>, or such an expression cast to <I>void</I>*. Thus some C implementations, such as Microsoft C 6.0, define <I>NULL</I> as:<P>
<pre>#define NULL ((void *)0)</pre>
Many C++ implementations use AT&amp;T's <I>cfront</I> translator to compile C++ into C. These use a separate C compiler as a back-end to compile the C into object code. For example, Glockenspiel C++ 2.0 for MS-DOS and OS/2 is a <I>cfront</I> translator that uses Microsoft C 6.0 as its back-end.<P>
Glockenspiel C++ uses the standard C headers supplied by Microsoft C. Thus, Glockenspiel C++ compiles:<P>
<pre>char *p = NULL;</pre>
as:<P>
<pre>char *p = ((void *)0);</pre>
Although assignment of a <I>void</I>* to a <I>char</I>* is valid in C, it is not valid in C++. (See my column on "Paving the Migration Path", <I>CUJ</I>, January 1991.) If you insist on using <I>NULL</I>, you must write the initializer as:<P>
<pre>char *p = (char *)NULL;</pre>
Because the integer constant <I>0</I> is compatible with any pointer type, you might as well write the initializer as:<P>
<pre>char *p = 0;</pre>
In fact, there's no real advantage to using <I>NULL</I> instead of <I>0</I> in either C++ or Standard C. <I>NULL</I> is just an artifact of traditional C. Before C had function prototypes, programmers used <I>NULL</I> to ensure that null pointer arguments were the correct size.<P>
With the advent of prototypes, the only remaining use for <I>NULL</I> is to provide the correct size for a null pointer passed as an unchecked argument to a function with a variable-length argument list. For example, in:<P>
<pre>printf("null looks like %p\n", NULL);</pre>
<I>NULL</I> is an unchecked argument (corresponding to the ... in the function prototype). Using <I>0</I> instead of <I>NULL</I> might pass the wrong sized object. I now prefer to write the call as:<P>
<pre>printf("null looks like %p\n", (void *)0);</pre>
The current draft of the C++ standard (based on <a href="#ref2">[2]</a>) doesn't include <I>(void *)0</I> as a null pointer constant, and makes no statement regarding the symbol <I>NULL</I>. I hope that, for compatibility with C, the eventual C++ standard stipulates that <I>NULL</I> must be defined so that:<P>
<pre>char *p = NULL;</pre>
is valid.<P>
<h4>References</FONT></h4></P>
<a name="ref1">[1]</a>     Lippman, Stanley B., <I>C++</I> <I>Primer</I>. Addison-Wesley, Reading, MA, 1989.<P>
<a name="ref2">[2]</a>     Ellis, Margaret A. and Stroustrup, Bjarne, <I>The Annotated C++ Reference Manual.</I> Addison-Wesley, Reading, MA, 1990.<P>

<h4><a href="../../../source/1991/may91/saks.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
