


<HTML>
<HEAD>

<TITLE>May 1991/X Window Programming</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmay.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">X Window Programming<A name="00FE_0088"><A name="00FE_0088"></font></h2><P>
<h3 align="center"><A name="00FE_0000"><A name="00FE_0000">Part 2: The X Library</h3><P>
<h3 align="center"><font color="#800000">Eric F. Johnson and Kevin Reichard</font></h3><hr><blockquote><P>
<P><i><A name="00FE_0000"><A name="00FE_0000">Johnson and Reichard are authors of X Window Applications Programming, Advanced X Window Applications Programming, and Power Programming Motif (all MIS: Press, 800-MANUALS). Johnson can be reached at erc@pai.mn.org via UUCP mail. Reichard's Compuserve address is 73670, 3422.</i></P><P>
The X Window System is a graphical network-based windowing system that runs under UNIX, VMS, AmigaDOS and, to some extent, MS-DOS. With the companion C program, we introduce here the lowest level of X Window programming using the X library. The X library and the X Window System are extremely complex. Our goal here is to describe enough of the X library for you to start writing X programs.<P>
<h4><FONT COLOR="#000080"><A name="00FE_0089">The X Library<B><A name="00FE_0089"></B></FONT></h4></P>
The X library is a library of C functions that allow you to design windowed graphics applications. The X library has functions to create windows, such as <I>XCreateSimpleWindow</I>, and draw lines, such as <I>XDrawLine</I>. Under the hood, the X library, or Xlib, translates commands such as <I>XDrawLine</I> into the underlying X network protocol.<P>
This X network protocol allows you to display X programs across a network. For example, you can run an X program on a Sun SPARCStation and display its windows on a 386 clone. X can separate client applications (the programs you'll write) from the X server (the program that actually draws the dots on a screen). The X Window usage of client and server is reversed from the norm. With X, the X server runs on the machine on your desk and draws the dots on your monitor. X client programs can also run on the machine on your desk, or they can run on any host that is connected over a network.<P>
<h4><FONT COLOR="#000080"><A name="00FE_008A">Opening And Closing A Display<A name="00FE_008A"></FONT></h4></P>
Because X is based on networking and separates the client applications from the server, your first X call must connect you with an X server. The Xlib function is <I>XOpenDisplay</I>. See <A href="list1.htm">Listing 1</a>.
 Almost every X program needs to include the file <I>/usr/include/X11/Xlib.h</I>, which contains necessary definitions for the X library. Most X programs also include <I>/usr/include/X11/Xutil.h</I>, which contains more definitions.<P>
You need to pass the name of a display to <I>XOpenDisplay</I>. The display name is the name of the connecting X server. If you have a <I>DISPLAY</I> environment variable set correctly, then you can pass <I>NULL</I> to <I>XOpenDisplay</I>, which is what we'll do in our sample program. There are many rules for setting display names, but the basic idea is simple. A display name consists of three parts:<P>
<UL><li>the network host name of the machine</li>
<li>the display number (which of the possibly many X servers on the machine we're connecting with)</li>
<li>the screen number (if your workstation has multiple screens for a single keyboard and mouse).</li></UL>
In most cases, both display and screen numbers are zero for the first (and usually only) X server and the first screen. Thus, a machine named <I>nokomis</I> would have an X display name of:<P>
<pre>nokomis:0.0</pre>
Note the colon and the period. If you don't have a <I>DISPLAY</I> environment variable set (or have it set incorrectly), consult the X Window user guide that came with your system. There are so many variants for display names that there isn't enough space to go into them all here.<P>
<I>XOpenDisplay</I> returns a pointer to a <I>Display</I> structure. You won't access fields of this structure directly &#151; there are a number of Xlib functions to access the <I>Display</I> structure.<P>
When you're done with an X program, your program should call <I>XCloseDisplay</I> to shut down the connection to the server:<P>
<pre>Display *display;
XCloseDisplay( display );</pre>
After you call <I>XCloseDisplay</I>, don't use the <I>Display</I> pointer again because it is no longer valid.<P>
<h4><FONT COLOR="#000080"><A name="00FE_008B">Creating A Window<B><A name="00FE_008B"></B></FONT></h4></P>
Once you open a connection to an X server, your next step is creating a window. The easiest method is to use <I>XCreateSimpleWindow</I>. See <A href="list2.htm">Listing 2</a>.
 <I>XCreateSimpleWindow</I> returns a window ID that you'll need in most drawing functions. You can easily determine the <I>x</I> and <I>y</I> location (X places the origin in the upper left corner) or the width and height of the window, but determining the parent window and the colors is more difficult.<P>
All X screens have a root window, which is effectively the screen background. When you first create a window, you'll want to use the root window as a parent. If you then create subwindows, you'll want to use your window as a parent. To get the root window, you can use the macros <I>RootWindow</I> and <I>DefaultScreen</I>.<P>
<pre>Display *display;
int screen;
Window rootwindow;

screen = DefaultScreen( display );
rootwindow = RootWindow( display, screen );</pre>
<I>DefaultScreen</I> returns the default screen (usually the only screen) for the connected X server. <I>RootWindow</I> returns the root window for the given display (X server) and screen on the display.<P>
<h4><FONT COLOR="#000080"><A name="00FE_008C">Determining Colors<B><A name="00FE_008C"></B></FONT></h4></P>
X models color in a number of different ways, all of which are complex. For simplicity, our sample program will use monochrome black-and-white. You can get color values for black-and-white by using the macros <I>BlackPixel</I> and <I>WhitePixel</I>:<P>
<pre>Display *display;
int screen;
unsigned long border_color,
   background_color;

border_color = BlackPixel
   ( display, screen );
background_color = WhitePixel
   ( display, screen );</pre>
<h4><FONT COLOR="#000080"><A name="00FE_008D">The Window Manager<A name="00FE_008D"></FONT></h4></P>
Once you've created a window, you need to tell the window manager about the window. The window manager is an X Window program that places title bars on windows and controls how these windows are placed on the screen and resized. Unlike Macintosh or Microsoft Windows, X allows the choice of window managers (if any). Three of the most common window managers are the Motif window manager (mwm), the Open Look window manager (olwm) and the Tab window manager (formerly Tom's window manager, twm).<P>
In order for the window manager to make the correct decisions about what to do with your new window, you must send it some information. Your program is supposed to put together and send off quite a lot of information, but for this beginning program, we'll concentrate on a few basics. When you start writing more Xlib applications, you should consult the <I>Inter-Client Communications Conventions Manual</I>, or ICCCM, which describes how a well-behaved X Window program should act.<P>
For now, we'll use the Xlib function <I>XSetStandardProperties</I>. See <A href="list3.htm">Listing 3</a>.
 <I>XSetStandardProperties</I> provides the window manager and a session manager (if they are present) with information about your window. The window name usually goes on the title bar. The icon name goes with an icon (if your window is iconified). The icon bitmap is an optional bitmap to use for your window's icon. (In our sample program, we'll pass the X Window constant <I>None</I> for the icon bitmap.)<P>
The command-line parameters, <I>argc</I> and <I>argv</I>, are passed to <I>XSetStandardProperties</I>. Note the reversed order &#151; <I>argv</I> comes first when calling <I>XSetStandardProperties</I>.<P>
The <I>XSizeHints</I> structure contains information about the size and location of your window. It also contains increments, and maximum and minimum values to help control how your window is resized. Unfortunately, the <I>XSizeHints</I> structure is defined differently between Release 3 (and earlier releases) and Release 4 of X. (X11 Release 4 is the most current version of X, but many vendors have not yet upgraded. Differences between releases can cause problems.) The sample program works fine under both Release 3 and Release 4 &#151; we're not doing anything fancy. <A href="list4.htm">Listing 4</a>
shows the <I>XSizeHints</I> structure.<P>
In Release 4, a new function dynamically allocates space for an <I>XSizeHints</I> structure, <I>XAllocSizeHints</I>:<P>
<pre>XSizeHints *sizehints;
sizehints = XAllocSizeHints();</pre>
We use malloc in our sample program, which works in both Releases 3 and 4 of X.<P>
The flags field of the <I>XSizeHints</I> structure contains bit masks that tell the X library which of the many fields in the <I>XSizeHints</I> structure you filled in. (You don't have to fill in all of the fields.) In our sample program, we'll just fill in the position (<I>x, y</I>) and the size (<I>width, height</I>). If you're running under Release 4, those four fields are considered obsolete. Use the <I>base_width</I> and <I>base_height</I> fields for the size instead. (You should fill in enough information to be compatible with both Release 3 and Release 4.)<P>
The flag bits for the position and size are <I>PPosition</I> and <I>PSize.</I> The leading <I>P</I> tells the window manager that our program chose the position and size. If the user had passed the position and size as command-line parameters, the flags should be <I>USPosition</I> and <I>USSize</I> instead. Use an OR operation to combine the flags for the fields you set. For now, we'll just use <I>PPosition</I> and <I>PSize.</I> See <A href="list5.htm">Listing 5</a>.
<P>
In Release 4, <I>XSetStandard Properties</I> is considered obsolete. It still exists in the Release 4 Xlib, but you should use the new <I>XSetWMProperties.</I> If your system doesn't have this function, you're out of luck.<P>
<h4><FONT COLOR="#000080"><A name="00FE_008E">Asking For Input<A name="00FE_008E"></FONT></h4></P>
The X server will only send your window the type of events you ask for. If your program doesn't use the keyboard at all and you don't ask for keyboard events, you will never see them.<P>
Because most programs do want events, you should call <I>XSelectInput</I> to ask for the event types your program wants. (We'll describe more on events later in this article.)<P>
<pre>Display *display;
Window window;
long event_mask;
XSelectInput( display, window, event_mask );</pre>
The event mask is a set of bits indicating what event types you want. OR together the individual bits. For example, to ask for <I>Expose</I> and <I>ButtonPress</I> events, the <I>event_mask</I> would look like:<P>
<pre>event_mask = ButtonPressMask | ExposureMask;</pre>
<h4><FONT COLOR="#000080"><A name="00FE_008F">Making The Window Appear<A name="00FE_008F"></FONT></h4></P>
When you create a window in X, nothing appears. Creating a window in X allocates data structures for the window in both your program and the X server. To make the window appear on the screen, you must use the function <I>XMapWindow.</I><P>
<pre>Display *display;
Window window;

XMapWindow( display, window );</pre>
For performance reasons, the X library caches a number of X protocol requests and then sends out the requests in a batch. This cuts down on the number of relatively slow network packets. The X library normally hides all this from you, except for one rule. After you've called a number of Xlib functions and want to see the results of these calls, use the <I>XFlush</I> function.<P>
<pre>Display *display;
XFlush( display );</pre>
<I>XFlush</I> flushes the cache of network requests to the server. By planning where you call <I>XFlush,</I> you can improve the performance of your programs. If you don't see the results of your drawing commands (which we'll go into later), it may be because you forgot to call <I>XFlush.</I><P>
If you're following along in the sample program, you should now be seeing the new window appear on the screen.<P>
<h4><FONT COLOR="#000080"><A name="00FE_0090">What Are Events?<A name="00FE_0090"></FONT></h4></P>
The next step is using events. Events are messages sent by the X server to your (X client) programs. The user generates events by pressing a key or clicking the mouse. Events are also generated when the X server determines that your program needs to redraw all or part of its window.<P>
X applications should be event_driven. That is, X programs should loop, getting the next event from the X server and then acting on the event. This event loop defines most of what the program does. If you've ever programmed for the Macintosh or Microsoft Windows, you'll understand this.<P>
<h4><FONT COLOR="#000080"><A name="00FE_0091">Getting The Next Event <A name="00FE_0091"></FONT></h4></P>
There are a number of Xlib functions for getting events. The easiest is <I>XNextEvent.</I><P>
<pre>Display *display;
XEvent *event;

XNextEvent( display, event );</pre>
<I>XNextEvent</I> blocks awaiting the next X window event to come down the pike from the X server. The <I>XEvent</I> structure is a <I>union</I> of a number of different types of events. Each element in the <I>union</I> has fields that make sense to its particular type of event.<P>
<pre>typedef union _XEvent
   {
   int type;
   XAnyEvent xany;
   XButtonEvent xbutton;
   ...
   XExposeEvent xexpose;
   ...
   } XEvent;</pre>
In the sample program, we'll handle two types of events &#151; <I>ButtonPress</I> and <I>Expose.</I><P>
<h4><FONT COLOR="#000080"><A name="00FE_0092"><I>Button Press </I><B>Events<A name="00FE_0092"></B></FONT></h4></P>
A <I>ButtonPress</I> event occurs whenever the user depresses a button on the pointer (usually the mouse, but it could be a trackball or something more exotic). A <I>ButtonRelease</I> event occurs when the user lets up on a mouse button. Both events use the same structure. See <A href="list6.htm">Listing 6</a>.
<P>
For our purposes, the important fields are the <I>x</I>, <I>y</I> location, which specifies where the mouse was in the window, and the button field. This field will be set to one of:<P>
<pre>Button1
Button2
Button3
Button4
Button5</pre>
This indicates which button was pressed. Normally, on a three-button mouse, <I>Button1</I> is the leftmost mouse button, <I>Button2</I> the center button, and <I>Button3</I> the rightmost button.<P>
Your application will get <I>ButtonPress</I> events only when the mouse cursor is actually inside your window and the user depresses a mouse button. Mouse and keyboard events go to the window in which the mouse pointer resides (although some window managers may modify this).<P>
<h4><FONT COLOR="#000080"><A name="00FE_0093"><I>Expose</I><B> Events<A name="00FE_0093"></B></FONT></h4></P>
In any windowing system that allows for overlapping windows, your application's window may be partially (or totally) covered by other windows. When those other windows are moved off your window, an area on your window needs to be refreshed. There's always been a debate about who is responsible for refreshing this area &#151; the window system or should your program? In X, the usual answer is your program.<P>
Unlike other windowing systems, like AmigaDOS, the X Window System doesn't guarantee that what you draw into a window will stay there. In fact, with X, you can assume the opposite. At any given moment, all X programs need to be able to redraw all or part of their windows.<P>
When you need to redraw part of your window, the X server will send an <I>Expose</I> event. See <A href="list7.htm">Listing 7</a>.
 Each <I>Expose</I> event pertains to a single rectangle, given by the location of its origin <I>(x, y</I> &#151; the upper left corner of the rectangle) and its size <I>(width, height).</I> When you get such an event, your program is supposed to redraw the contents of that rectangular area.<P>
<I>Expose</I> events usually come in groups. That is, your program will receive a number of <I>Expose</I> events, each with one rectangular part of the full exposed area (which may be odd-shaped). Your program can then redraw the given rectangle. Or it can wait until all the <I>Expose</I> events arrive for a batch and then redraw either the whole window (the easy way) or just that part of the window that was exposed. To know when a whole batch has arrived, check the count field. The count field will be zero (0) when the last <I>Expose</I> event of a batch has arrived.<P>
<h4><FONT COLOR="#000080"><A name="00FE_0094">Creating A Graphics Context<A name="00FE_0094"></FONT></h4></P>
When an <I>Expose</I> event arrives, your program will need to redraw part of its window. To draw with the X library, you must first create a graphics context or GC. A graphics context contains information about a virtual pen &#151; the pen size, the pen color, whether lines are to be drawn dashed, and so on. Use <I>XCreateGC</I> to create a GC. See <A href="list8.htm">Listing 8</a>.
<P>
You can also create a graphics context to draw into a pixmap (essentially an off-screen window). Just replace the window ID with a pixmap ID. The same goes for most of the drawing functions in Xlib, including the ones we'll describe in this article.<P>
There are a host of options for the mask and <I>xgcvalues</I> parameters, none of which are needed for our simple drawing purposes. In our sample program, we'll create a <I>GC</I> more like:<P>
<pre>gc = XCreateGC( display,
   window,
   OL,
   (XGCValues *) NULL );</pre>
Once we've created a graphics context, we need to set up the foreground drawing color. (The background drawing color is used only for text.) <I>XSetForeground</I> sets the foreground drawing color of a graphics context.<P>
<pre>Display *display;
GC gc;
unsigned long foreground_color;

XSetForeground( display, gc, foreground_color );</pre>
We need to call both <I>XCreateGC</I> and <I>XSetForeground</I> before we draw. Remember to eventually call <I>XFlush</I> to actually send out these requests to the X server.<P>
<h4><FONT COLOR="#000080"><A name="00FE_0095">Drawing Lines And Rectangles<A name="00FE_0095"></FONT></h4></P>
You can draw lines by using the Xlib function <I>XDrawLine</I>. See <A href="list9.htm">Listing 9</a>.
 The graphics context controls the drawing color, pen size, dashing and so on.<P>
You can use <I>XDrawRectangle</I> to draw the outline of a rectangle.<P>
<pre>Display *display;
Window window;
GC gc;
int   x, y; * upper left corner */
unsigned int width, height; /*
size of rectangle */

XDrawRectangle ( display,
   window,
   gc,
   x, y,
   width, height );</pre>
<A href="list10.htm">Listing 10</a>
shows how you can fill a rectangle with <I>XFillRectangle</I>. (If the Xlib function is <I>XDrawSomething</I>, for instance <I>XDrawRectangle</I>, an outline of the Something shape is drawn. If the function is <I>XFillSomething</I>, then a filled object is drawn.)<P>
<h4><FONT COLOR="#000080"><A name="00FE_0096">A Sample Program<A name="00FE_0096"></FONT></h4></P>
We've put together a sample program based on what we've described so far. The code is in the file <I>xlib1.c</I>, shown in <A href="list11.htm">Listing 11</a>.
 First, the sample program sets up a display connection to an X server with <I>XOpenDisplay</I>. The program creates a window and a graphics context. Then <I>XMapWindow</I> puts the window visibly on the screen and <I>XFlush</I> sends out all requests to the X server.<P>
The program then goes into an event loop. If the user clicks a mouse button in our window, then we quit the program. If the X server sends an <I>Expose</I> event, our program waits until the last event of a batch arrives (when the count field is zero). When this happens, the <I>Redraw</I> function redraws a simple picture (a few lines and rectangles).<P>
Note that we never draw anything into the window when we first create it. In X, there is no initial drawing. Always wait until an <I>Expose</I> event arrives and then draw &#151; even the first time. When the window first appears, don't worry, the X server will send our program an <I>Expose</I> event, one that looks the same as all other <I>Expose</I> events. This can be a tricky part of the X library.<P>
Look over the code and try out the program. When you run it, the window it creates should look like <A href="fig1.htm">Figure 1</A><P>
<h4><FONT COLOR="#000080"><A name="00FE_0097">Compiling And Linking<A name="00FE_0097"></FONT></h4></P>
To compile and link the <I>xlib1</I> program, you need to link in the X library, usually <I>/usr/lib/libX11.a.</I> A common UNIX command for this is:<P>
<pre>cc -o xlib1 xlib1.c -lX11</pre>
You may have to use the -<I>I</I> option to specify where the X11 include files are located, and the <I>-L</I> option to specify the X11 library location.<P>
If your system uses the include file <I>stdlib.h</I> to predeclare <I>malloc</I>, define <I>SYSV</I>, as in<P>
<pre>cc -DSYSV -o xlib1 xlib1.c -lX11</pre>
On some 386 versions of UNIX, you may need to link in the networking libraries as well (since the X Window System is a network-based windowing system). On SCO's Open Desktop 1.0, you'll need a command like:<P>
<pre>cc -o xlib1 -DLAI_TCP -Di386 \
-DSYSV Dsysv xlib1.c -lX11 \
-ltlisock -lsocket -lnsl_s</pre>
On Interactive's 386/ix (depending on the version), you'll need a command like:<P>
<pre>cc -o xlib1 xlib1.c -lX11 -linet</pre>
The X manuals that came with your system should have more information on compiling X programs.<P>

<h4><a href="../../../source/1991/may91/johnson.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
