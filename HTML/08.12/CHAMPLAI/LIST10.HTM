<HTML><HEAD><TITLE>December 1990/An Object-Based Real-Time Executive/Listing 10</TITLE></HEAD><BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4><A name="027C_0186"><A name="027C_0186">Listing 10 (basicdd.c) Basic Device Driver Task<A name="027C_0186"></h4><P>
<pre>#include &lt;synrtx.h&gt;

#define ACQUIRE    0
#define RELEASE    1
#define EXCEPTION  2
#define NOBODY     (task_t)0

static task_t owner;

static handler Acquire(msg_t *msg_p) {
   register task_t caller = msg_p-&gt;srcTid;
   register task_t self   = msg_p-&gt;dstTid;

   owner = caller;

   /* interrupt caller.Grant */
   msg_p-&gt;srcTid = self;
   msg_p-&gt;dstTid = caller;
   msg_p-&gt;dstHid = /* caller's GRANT handler id */
   msg_p-&gt;type   = msg_type_SYNC;
   task_interrupt(&amp;msg);
}

static handler Release(msg_t *msg_p) {
   register TID caller = msg_p-&gt;srcTid;
   register TID self   = msg_p-&gt;dstTid;

   if (owner == caller)
      owner = NOBODY;
   else {
      /* interrupt self.Exception(caller) */
      msg_p-&gt;srcTid = msg_p-&gt;dstTid = self;
      msg_p-&gt;dstHid = EXCEPTION;
      msg_p-&gt;type   = msg_type_WORD;
      msg_p-&gt;value.w = (word)caller;
      task_interrupt(msg_p);
   }
}

static handler Exception(msg_t *msg_p) {
   io_putf("Illegal Access to Device Driver by Task #%w\n", msg_p-&gt;value.w);
}

task BasicDeviceDriver(void) {
   task_setHandler(3, Acquire, Release, Exception);

   owner = NOBODY;
   loop {
      task_enableWait(NO_TIMEOUT, 1, ACQUIRE);
      do  /* The owner can now used the device ...
          *  only the client (owner) can release it.
          */
         task_enableWait(NO_TIMEOUT, 2, RELEASE, EXCEPTION);
      while (owner != NOBODY);
      }
   }
}
</pre>
</BODY></HTML>
