


<HTML>
<HEAD>

<TITLE>December 1990/An Object-Based Real-Time Executive</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocdec.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">An Object-Based Real-Time Executive<A name="027C_016C"><A name="027C_016C"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="027C_0000"><A name="027C_0000">Michel de Champlain</font></h3><hr><blockquote><P>
<P><i><A name="027C_0000"><A name="027C_0000">Michel de Champlain is president of Cnapse, which specializes in C &amp; C+ + training, real-time executives, and reusable software components. He is a faculty member in the Computer Science Department at College Militaire Royal St-Jean. He has an M.S. in computer science and is currently completing a Ph.D. at Ecole Polytechnique, Montreal. You can contact him at Cnapse, 11 Laurier, Suite 102, Chambly, Quebec, Canada J3L 9Z7, (514) 447-7221.</i></P><P>
<h4><FONT COLOR="#000080"><A name="027C_016D">Introduction<A name="027C_016D"></FONT></h4></P>
The Synapse<a href="#ref1">[1]</a><a href="#ref2">[2]</a> Real-Time eXecutive<a href="#ref3">[3]</a> is a small object-based real-time executive library that is easy to learn and use, where each object is a task. Small real-time systems and device drivers are its main application area.<P>
The concurrent programming model is asynchronous message passing via interrupts. Tasks communicate by sending interrupt messages to handlers (also called methods). This inter-task communication concept is in fact a natural extension of the hardware and software interrupts uniformly available in high-level systemcall facilities. SynRTX also provides dynamic priority and time slice options, along with task identifiers, to allow the control of scheduling and dispatching decisions. SynRTX's actual implementation runs on IBM PCs and compatibles.<P>
SynRTX requires an encapsulation mechanism, which structures an application by separating it into compilation units. The compilation unit (or task unit) describes abstract object type (AOT) that operates by a fixed set of operations (or methods) executed by handlers. A SynRTX real-time application is composed of one or more task units, where each task unit is in a file that defines one task and must be compiled separately.<P>
The name of a task and its handlers are the only exportable entry points. Constants, variables, devices, and handlers are declared and referenced locally (using static class) in the task unit. Modularity in a real-time application in SynRTX is achieved through information hiding, which enforces a rigorous separation between tasks.<P>
<A href="fig1.htm">Figure 1</a>
shows a task symbol that emphasizes the only visible interface of a task unit: the task name and its handler entry points.<P>
<h4><FONT COLOR="#000080"><A name="027C_016E">Input/Output In A Multitasking Context<A name="027C_016E"></FONT></h4></P>
Input and output statements have been implemented in the SynRTX library for three reasons:<P>
<UL><li>The SynRTX library implements integer, character, and string input-output statements to easily test real-time applications. This basic support I/O eases software development. These statements can be replaced (or ignored) if more powerful device drivers are written.</li>
<li>The statements offer complete mutual exclusion while executing I/O.</li>
<li>These statements are extremely useful as practical examples in tutorials. I/O statements are <I>io_Get*</I> (input) or <I>io_Put*</I> (output).</FONT></FONT></FONT></FONT></li></UL>
Here is an example program. It reads the following three lines of input:<P>
<pre>A
65535
Hello!</pre>
The example program is:<P>
<pre>typedef unsigned short word;
char aChar;
word aWord;
char aString[7];
io_getc (&amp;aChar);
io_getw(&amp;aWord);
io_gets(aString);
*/ aChar  =  'A', aWord = 65535, and aString
   = "Hello!" */
io_puts("\naChar = "); io_putc(aChar);
io_puts("\naWord = "); io_putw(aWord);
io_puts("\naString = "); io_puts(aString);</pre>
<I>io_get*</I> statements read items from the keyboard (<I>c</I> for a character, <I>w</I> for a word, and <I>s</I> for a string). An <I>io_get*</I> item is a variable reference. <I>io_put*</I> statements write items to the screen. An <I>io_put*</I> item is an expression or a string constant. There is also a <I>printf</I> equivalent:</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>io_putf("\naChar = %c aWord = %w aStrin9 = %s",
        aChar, aWord, aString);</pre>
<h4><FONT COLOR="#000080"><A name="027C_016F">Scheduling And Communication<A name="027C_016F"></FONT></h4></P>
A task is a separate "thread of control" that executes concurrently with other tasks. It is an independent active entity with a collection of statements executed strictly in sequence that goes into action automatically when the task is started. A task ends by executing a <I>task_terminate</I> statement in its body. Concurrent execution of a task is created and scheduled by the <I>task_start</I> statement, with actual parameters if required.</FONT></FONT></FONT></FONT><P>
To meet performance requirements, some real-time applications use explicit control over the scheduling and dispatching regime. SynRTX specifies the time slice and the priority of tasks during the creation of a task, a desirable feature in many applications. When dealing with excessive loads, an application needs to control scheduling and dispatching decisions along with dynamic adjustment of priorities and time slices. <A href="list1.htm">Listing 1</a>
shows most of the scheduling control statements in one task.<P>
A real-time application must respond to a series of external asynchronous hardware interrupts, which may occur at any time. On the software side, multitasking independently executes tasks that send messages to other tasks via software interrupts. SynRTX supports both hardware and software interrupts, as well as the handlers that serve them. This notion is completely <I>CPU</I> independent. It brings a uniform degree of abstraction to interruptios and handlers. This uniform abstraction is seldom available in traditional operating systems.</FONT></FONT><P>
Inter-task communication requires that asynchronous tasks be allowed to exchange messages (information) or signals (synchronization only) with each other. SynRTX's concurrent programming model is built around asynchronous message passing via interrupts. Communication between tasks is effected by sending interrupt messages to handlers. This flexibility of this mechanism allows both asynchronous and synchronous message passing. It also offers unidirectional or bidirectional information transfer, where and when required.<P>
Handlers are intended to receive asynchronous interrupt messages. A handler is an interrupt service routine (ISR). It is declared solely in the task unit that it is dedicated to serve. Once an interrupt call has been sent, the handler body is executed to assure mutual exclusion in the body during its execution. Although there are two kinds of handlers, software and hardware, only software handlers can receive parameters from interrupts. A handler behaves like a "critical section procedure." It returns to the point of interrupt when the service is completed.<P>
SynRTX also supports an interface to hardware interrupts. These interrupts are similar to inter-task communication between a driver task and a hardware device task.<P>
Asynchronous inter-task communication is a natural mechanism based on the importance of interrupts in real-time systems. SynRTX offers asynchronous message passing as a general communication construct.<P>
In <A href="fig2.htm">Figure 2</a>,
 a single arrow indicates an asynchronous interrupt with no information (data) in the message from the calling task to the interrupted task.<P>
<A href="list2.htm">Listing 2</a>
and <A href="list3.htm">Listing 3</a>
show a task <I>Receiver</I> that awaits the reception of an interruption from task <I>Sender</I>, via the statement <I>task_enableWait</I> in the task entry of <I>Receiver</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Synchronous of inter-task communication requires a rendezvous between tasks that desire to transfer data unidirectionally or bidirectionally. The sender is blocked until the other task (the receiver) sends back an interrupt. Then both tasks continue.<P>
In <A href="fig3.htm">Figure 3</a>,
 a single arrow with a small circle represents an asynchronous interrupt with information (data) in the message.<P>
<A href="list5.htm">Listing 5</a>
shows a task <I>Receiver</I> that waits to receive an interruption with data from another task <I>Sender</I>, shown in <A href="list4.htm">Listing 4</a>,
 by means of the <I>task_enableWait</I> statement in <I>Receiver</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="027C_0170">Mutual Exclusion Among Tasks<A name="027C_0170"></FONT></h4></P>
Mutual exclusion among tasks requires that access by asynchronous tasks to the same critical section of code be serialized. When tasks need to update common data, the data may be corrupted if more than one update takes place in parallel. In SynRTX, handlers guarantee mutually exclusive access to global data in a task. A handler guarantees that only one task is active inside a handler at a given time.<P>
<A href="fig4.htm">Figure 4</a>
shows how mutual exclusion is achieved using handlers. The task <I>Observer</I> (<A href="list8.htm">Listing 8</a>)
 waits for an event, and increments the <I>eventCount</I> in task <I>Update</I> (<A href="list7.htm">Listing 7</a>)
 when it sees one. The task <I>Reporter</I> (<A href="list9.htm">Listing 9</a>)
 waits for a while, then prints and resets the <I>eventCount</I> in the <I>Update</I> task. The task <I>Update</I> is started first to initialize <I>count</I> with the value zero and give fair access to the <I>Reporter</I> and the <I>Observer</I> by rotating interrupt priorities.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Tasks competing for shared devices must synchronize their accesses. Once a resource is acquired by a task, another task claiming the device should be blocked until the owner task releases it. <A href="fig5.htm">Figure 5</a>
illustrates a basic device driver. Each task must follow the same access protocol: acquire the device, use it, and finally release it.<P>
The task <I>BasicDeviceDriver</I> (<A href="list10.htm">Listing 10</a>)
 blocks itself by the <I>task_enableWait</I> statement when the device is available. The <I>Acquire</I> handler keeps the task identification (the caller) in <I>owner</I>, and acknowledges it by sending an interrupt to the caller's <I>Grant</I> handler. The owner can use the device, and is the sole task that can release it. The <I>Release</I> handler verifies whether the task attempting to release the device is really the owner, then frees the device by assigning <I>NOBODY</I> to the owner. Otherwise, an exception (implemented as a local handler to the server task) is raised to indicate which task does not respect the access protocol.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="027C_0171">A Simple Keyboard Device Driver Example<A name="027C_0171"></FONT></h4></P>
The keyboard device driver shown in <A href="fig6.htm">Figure 6</a>
is composed of two tasks: a keyboard client and a keyboard server. The server task has five handlers (one hardware and four software).<P>
The <I>Keyboard</I> hardware handler (see <A href="list11.htm">Listing 11</a>)
 serves every keyboard interrupt at vector 9. A hardware interrupt service routine should be as fast as possible, reducing latency to a minimum. You achieve this goal by sending a software interrupt to the keyboard server task itself through <I>Getchar handler</I>, allowing a fast return from the hardware interrupt. The three software handlers <I>Acquire, Release, and Exception</I> support the device driver access protocol explained earlier. Finally, the <I>Hit</I> handler polls the first-in first-out character buffer and returns (via an interrupt) one character to the keyboard client task if the buffer is not empty.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The keyboard client task in <A href="list12.htm">Listing 12</a>
is a straightforward server exerciser that repeats forever the following protocol: acquire the keyboard, echo every character typed on the screen, release the keyboard when a character <I>r</I> is hit, and free the server for 10 seconds.</FONT></FONT><P>
Several keyboard client tasks can be created. These tasks compete for the keyboard trying to acquire it every time they are run. In fact, every keyboard client is a potential "virtual keyboard" that could be (in a windowing application, for example) attached to a specific window.<P>
<h4><FONT COLOR="#000080"><A name="027C_0172">Conclusion<A name="027C_0172"></FONT></h4></P>
I have described the SynRTX real-time executive designed on an explicit inter-task communication primitive, the interrupt. The mutual exclusion embedded in handlers is a simple, high- level, and easy-to-build rapid device driver prototype in C (certainly more readable than low-level semaphores). A handler in SynRTX achieves its mutual exclusion because only one task at a time can be running in a handler. Several classical task coordinate problems <a href="#ref1">[1]</a> like readers/writers, bounded-buffer, dining philosophers, event timer, and robot arm controller have been solved elegantly and implemented successfully.<P>
Device driver programming is not easy. SynRTX helps to make application development quicker and reduces the complexity of multitasking. The bottom line is that a task unit implemented as an object operated on by a set of handlers is suitably comprehensive.<P>
<h4>References</FONT></h4></P>
<a name="ref1">[1]</a>     de Champlain, M., "Synapse: A Real-Time Programming Language," M.S. Thesis, Computer Science Department, Concordia University, September 1989. Synapse is a real-time programming language designed by the author as part of his M.S. Thesis. SynRTX is the library that provides all services needed by the language.<P>
<a name="ref2">[2]</a>     de Champlain, "Synapse: A Small and Expressive Object-based Real-Time Programming Language," ACM SIGPLAN Notices, May 1990.<P>
<a name="ref3">[3]</a>     Cnapse, "SynRTX/PC - Synapse Real-Time eXecutive for the IBM/PC and Compatibles," Programmer's Manual v2.03, August 1990.<P>

<h4><A HREF="list6.htm">Listing 6</A></h4>

<h4><a href="../../../source/1990/dec90/champlai.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY></HTML>
