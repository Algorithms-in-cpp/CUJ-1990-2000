<HTML><head><TITLE>December 1990/We Have Mail/Listing 1</TITLE></head><BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4><A name="02A7_0186"><A name="02A7_0186">Listing 1<A name="02A7_0186"></h4><P>
<pre>unsigned short crc16(char *pcDataPtr, unsigned short usLength)
{
  /* this routine calculates a byte-wise CCITT CRC-16 of a block
    of data of length usLength and pointed to by pcDataPtr */

  unsigned short usCrc;
  unsigned short usData;

  /* At this point, to facilitate register optimization, we either make a
    local copy of the global variable that holds the current CRC,
    or we initialize the local copy to the starting value OxFFFF.
    We do the latter if we are using this routine to calculate the CRC of
    ONLY the block pointed to by pcDataPtr, as in this case. */

  usCrc = 0xFFFF;

  while(usLength--)
  {
    /* The algorithm requires the data bits in the high byte. */
    usData = (*(pcDataPtr++)) &lt;&lt; 8;

    /* This block of code calculates the CRC for one byte of data. */
    usCrc  = ((usCrc &amp; 0x00FF) &lt;&lt; 8) + (usCrc &gt;&gt; 8);
    usCrc  = usCrc ^ usData;
    usData = usCrc &amp; 0xFF00;
    usData = usData &lt;&lt; 4;
    usCrc  = usCrc ^ usData;
    usData = usCrc &amp; 0xFF00;
    usData = usData &gt;&gt; 5;
    usCrc  = usCrc ^ usData;
    usData = usData &gt;&gt; 7;
    usCrc  = usCrc ^ usData;
  };

  /* We get the CRC ready for transmission. */
  usCrc = (((usCrc &amp; 0x00FF) &lt;&lt; 8) + (usCrc &gt;&gt; 8));
  return(usCrc);
}
</pre>
</BODY></HTML>
