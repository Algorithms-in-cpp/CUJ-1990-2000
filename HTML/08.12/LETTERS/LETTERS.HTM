


<HTML>
<HEAD>

<TITLE>December 1990/We Have Mail</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocdec.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Departments</FONT></H2>

<hr><h2 align="center"><font color="#800000">We Have Mail<A name="02A7_0183"><A name="02A7_0183"></font></h2><hr>
<BLOCKQUOTE>
<A name="02A7_0000"><A name="02A7_0000">Dear C Users Journal:<P>
I have two comments to make concerning Bill Plauger's column in the September 1990 issue.<P>
The implementation of <I>assert</I> shown on page 16 is:</FONT></FONT><P>
<pre>void _Assert (&lt;parameters&gt;);
#define assert(test) \     ((test) | | \
   _Assert (&lt;arguments&gt;))</pre>
A complete example is next to it in <A href="list1.htm">Listing 1</a>.
<P>
The idea is to use | | to take the place of an <I>if</I> statement. However, I did not understand the use of <I>logical-OR</I> with a <I>void</I> type as the second parameter. I looked it up in Standard C (by Plauger and Brodie), and it states that both arguments must be scalar. On page 29 of the same book, it clearly shows that <I>void</I> is not a scaler.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
I'm wondering what | | could do in that situation. It returns an <I>int</I> anyway, not a <I>void</I> which is the correct type that the macro is supposed to expand into. If | | is supposed to evaluate the first argument, and then evaluate the second only if the first was non-zero but not return a result if the second argument is <I>void</I>, that is something I had never heard before.</FONT></FONT></FONT></FONT></FONT></FONT><P>
It sounds useful though, so I checked the Standard. Alas, section 3.3.14 states "The result has type <I>int</I>."</FONT></FONT><P>
I think what he meant was something more like:<P>
<pre>#define assert(test) \
   (void) ((test) | | \
   _Assert (&lt;arguments&gt;), 0)</pre>
The other point I want to make was that defining one's own <I>assert</I> should be more common than it is. For example, I use a text-based windowing system in my programs. Using an <I>assert</I> that wrote to standard output would not work. Instead, I wrote my own that knew how to output to the screen under that library.</FONT></FONT></FONT></FONT><P>
A programmer can also enhance <I>assert</I> to his own tastes and practices. For example, the built-in <I>assert</I> will call <I>abort()</I>, which had the undesirable side effect of not freeing up any EMS the program was using. So I would have to periodically reboot after a few abnormal terminations when I ran out of EMS. I wrote my own assert to call <I>exit()</I> instead, which I knew to be safe under the circumstances I was debugging under, and served me much better.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Likewise, my windowing system does not take well to an <I>abort ()</I>. My own <I>assert</I> has a popup window which lets me select <I>Exit</I>, <I>Abort</I>, or <I>Resume</I>. I normally exit, but can still abort under dire conditions. And letting me resume allows me to assert suspicious conditions as well as outright errors, and to assert things that would be far too difficult to compose a complete test for but are OK if they have a false hit every once in a while. Or perhaps I know that this bug is just cosmetic, and I can go on with the next test instead of starting over.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
To summarize, you would be well advised to use <I>assert</I> statements or something like it during testing and development. Crafting your own debugging aids in the same light can pay big dividends.</FONT></FONT><P>
John M. Dlugosz<br>
2629 Glenhaven<br>
Plano, TX 75023<P>
<I>Mr. Dlugosz is right, as is so often the case. John's magazine articles frequently clarify the darker aspects of computer programming. See my apology and corrections at the end of the "Standard C" column. &#151; pjp</I><P>
Dear Mr. Ward,<P>
Re:  CUG disk #236 ("start-up disk") <I>CFLOW.C</I></FONT><P>
I have taken the trouble and analyzed the <I>CFLOW.C</I> program. I will share my findings with you:</FONT></FONT><P>
1) The program fails to identify any function declarations which have whitespace (tabs or blanks) between function name and the left parenthesis.<P>
2) The program fails to process (input) programs correctly, if their last line has no linefeed, i.e. if an <I>EOF</I> is reached at the end of this last program line.</FONT></FONT><P>
3) The nesting of tests should strictly be:<P>
If not within comment, are we perhaps within a double quote?<P>
If not within a double quote, are we perhaps within a single quote?<P>
The current logic is wrong.<P>
4) The programs fails to handle cases which have three double quotes in a <I>printf</I> argument, one destined to be printed (preceded by a backslash).</FONT></FONT><P>
5) The program fails to handle cases which have single quotes directly imbedded in <I>printf</I> arguments (or in string literals for that matter).</FONT></FONT><P>
6) The program arbitrarily assumes that single quotes are three <I>char</I>s wide (the normal case, agreed). It therefore identifies two double quotes if it hits any four-character quotes (those with backslashes, backslash followed by two single quotes e.g.).</FONT></FONT><P>
You will agree that in such a case it is better to reinvent the wheel rather than rely on poor code. I strongly suggest you withdraw <I>CFLOW</I> from the library.</FONT></FONT><P>
Best regards,<P>
L. Engbert, Engbert UB<br>
Taunusstrasse 8, D-6384<br>
Schmitten 1<br>
West Germany<P>
<I>Ouch. - pjp</I><P>
<I>CUG 329 UNIX Tools for PC includes a better </I><I>cflow</I><I>. -Kenji</I></FONT><P>
Dear Howard,<P>
I believe that R&amp;D Publications needs to create an online presence in the programming world. There are several good reasons to go online, and with careful planning, costs can be limited. The reasons for going online include maintaining competitiveness, electronic mail for authors and readers, reader services, and product sales.<P>
The computer magazine business is notoriously competitive. Readers vote with their subscriptions to the magazines which best meet their needs. Some of the largest technical computer magazines have online services. These online services, such as <I>PC Magazine's</I> PC Magnet and <I>Byte's</I> BIX, have helped establish them as being on the leading edge of technology. Nowadays, computer users expect more than just printed pages from a magazine and want to interact with it and through it.<P>
Electronic mail for authors and readers provides the interactive dimension to online services. Readers can ask simple questions or pose difficult problems and together share solutions. For authors, an online connection means an easier method to submit stories, receive proofs, and correspond with readers. <I>Computer Language</I> routinely receives manuscripts through their online system. This can be faster and cheaper than overnight mail.<P>
In addition to electronic mail, you can provide other reader services with an online system. First, many readers are anxious to try out source code printed in the magazine but are unwilling to spend the hours necessary to type it in correctly. Many of these people won't go through the trouble of mailing an order for a diskette and waiting around for it to be mailed back either. Online availability of source code from the magazines is what these readers want. I have been providing this service for readers of <I>The</I> <I>C Gazette</I> for the last 18 months. Last, an online service can provide another channel for sales. Interactive ordering forms can provide the reader with the means to purchase books, diskettes, and even subscription renewals. Of course, online services can also generate revenue themselves if a fee is charged for registration, extended access time, or file transfer privileges.<P>
Thus far I have avoided mentioning the specific vehicle for "online services." There are many avenues available including starting your own forum on existing networks like CompuServe, Genie, Delphi, and Prodigy. The alternative route is bulletin board system (BBS). Advantages of the BBS include control of costs, ability to scale up the level of service, and no limits on file storage.<P>
These have been my ideas on this subject and I thought I should share them with you.<P>
Respectfully,<P>
Victor R. Volkman<br>
5145 Pontiac Trail<br>
Ann Arbor, MI 48105<P>
<I>Mr. Volkman, a regular contributor to CUJ, has a valid point. We are increasing the use of electronic mail at a rapid rate. I intend to depend heavily on it if I am to edit this magazine from Down Under for a year</I>.<P>
<I>R&amp;D Publications has a fledgling BBS as well. To what extent it will be used as Victor describes, or when, has yet to be determined. That, in the end, is for Robert Ward to decide.</I> - <I>pjp</I><P>
Attention: Microsoft Product Support<br>
Technician Mr. Dan Kirby<br>
Dear Mr. Kirby,<P>
Thank you for your prompt (4 September) response to my problem concerning the <I>IDE</I> for Quick C 2.51 always opening in the <I>/h</I> (maximum lines) mode whether CGA, EGA, or VGA.</FONT></FONT></FONT></FONT><P>
Based on your suggestions, I quickly tracked the problem to the file <I>REMIND.COM</I> which was called as the last item of my <I>AUTOEXEC.BAT</I>. This program was distributed by the late "Micro Cornucopia" in their General Utilities disk MS-36 and possibly has received wider distribution. The 13K <I>COM</I> program contains the words, "Copyright (C) 1984 Borland Inc ... display 80x25eP," perhaps indicating that it was written/compiled in an early Turbo Pascal. The <I>DOC</I> file gives the author as R. Schnapp.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Your "mode co80" also worked. I'll retain <I>REMIND.COM</I>, insure that <I>MODE.COM</I> is available, and add the appropriate <I>mode co80</I> command as the last call to <I>AUTOEXEC.BAT</I> on the computer in which QC 2.51 is installed.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Microsoft should still be interested in why the problem occurs in Quick C 2.51 but does not occur in the MS BASIC 7.1 QBX environment and take corrective actions. Thank you again.<P>
Very truly yours,<P>
David W. Fischer<br>
4609 Braeburn Drive<br>
Fairfax, VA 22032-1830<P>
Dear Sirs:<P>
I have a couple of comments on Rex Jaeschke's useful article, "Using the Quicksort Function" (<I>CUJ</I>, September 1990).</FONT></FONT><P>
We must use <I>if</I> tests as in <A href="list1.htm">Listing 1</a>
of that article not only for unsigned values but for any types whose difference cannot always be expressed in an <I>int</I> return value, such as <I>long</I> or <I>float</I>. (This is probably clear to most users, but it was not made explicit.)</FONT></FONT></FONT></FONT></FONT></FONT><P>
For multi-key sorts, Mr. Jaeschke states that <I>qsort</I> sorts elements according to one key, and outlines a method for sorting on multiple keys, which he admits may not be the most efficient. Actually, <I>qsort</I> knows nothing about keys; what it does know about is only one compare function, but that function may incorporate comparisons for as many keys as desired. The usual method for handling multiple keys in the compare function is first to compare according to the primary key and, if unequal, return with the appropriate positive or negative value. If equal, however, then compare according to the secondary key, etc. That is, proceed on down the line of keys until the highest of them produces an unequal comparison. The function can then return a positive or negative value without examining lesser keys. Only if the last key also compares equal is there a zero return value for the compare function. With such a compare function, <I>qsort</I> sorts on multiple keys in one pass. Hope this helps.</FONT></FONT></FONT></FONT></FONT></FONT><P>
Sincerely,<P>
Stuart T. Baird<br>
927 Parkview Drive F-301<br>
King of Prussia, PA 19406<br>
<I>Mr. Baird is correct. - pjp</I><P>
Dear Robert,<P>
I have seen a bunch of articles about sorting lately, so the attached table might be of interest. What inspired me to send it is the oft-repeated comment "<I>qsort</I> is the fastest..." I got into this testing because I have an application that may do 100,000+ calls to a sort. The final word is you must test with actual data &#151; Shell's may be the best for some things, but if all the real data are almost sorted, an insertion sort is faster.</FONT></FONT><P>
Note one bit of unfairness in the times: <I>qsort()</I> has the overhead of a function call for comparison where the rest had the comparison in-line. The test is realistic for me, since I don't have the <I>qsort()</I> source and thus was stuck with the call.</FONT></FONT></FONT></FONT><P>
<A href="tab1.htm">Table 1</a>
shows the times for various sorting algorithms. <I>qsort()</I> is the standard SYS/V library function; Shell's sort is the implementation in K&amp;R; Shell's sort II is the implementation in <I>Algorithms</I>, 2nd Ed., Sedgewick; insertion sort is per Sedgewick; heapsort is from <I>Numerical Recipes in C</I>. Count is the size of the array. Sorting performed on an array of integers:</FONT></FONT><P>
<I>same</I> &#151; all elements in the array = 1<P>
<I>sorted</I> &#151; elements are 0 to count &#151;1 in numerical order<P>
<I>reversed</I> &#151; elements are count &#151; 1 to 0 in reverse numerical order<P>
<I>random</I> &#151; elements are generated by <I>drand48()*count</I> calls</FONT></FONT><P>
Times are in seconds obtained from clock(3C); all testing on 3B2-700 running Sys V.3.2.1; programmed in C and compiled with:<P>
<pre>cc -0 shell.c -lmalloc</pre>
Simply yours,<P>
David X. Callaway<br>
1B49 Independence Rd.<br>
Fort Collins, CO 80526<P>
Dear Editor:<P>
Your September 1990 issue featured an article on CRC-16 calculation. The algorithm presented was a straight software emulation of the hardware solution to the problem of calculating CCITT compatible 16-bit Cyclic Redundancy Checks. Since software solutions are usually more efficient if they are byte-oriented rather than bit-oriented, as a hardware solution would be, I was asked by my employer to develop such a byte-wise algorithm for the same problem. By running a symbolic model of the bit manipulations involved in calculating the new CRC after one byte has been processed, I was able to develop a solution that does not involve a loop to handle each bit separately, but processes all eight bits in parallel. As expected, the algorithm performed much faster than the standard bit-oriented version. In my own informal timing tests, I replaced the bit-oriented routine in your example program by the byte-oriented routine I developed for Argilla Corporation and compiled both versions on Microsoft C 6.0 to 80286 code for MS-DOS. The result was a performance increase by 500 percent over the version you published. <A href="list1.htm">Listing 1</a>
is the code required to calculate the inverted and byte swapped (for transmission) CRC of a message. For the test cases and examples, please see Bob Felice's article in the September 1990 issue of <I>The C Users Journal</I>.<P>
Ammo Goettsch<br>
Argilla Corporation<br>
(and a student at USA)<br>
Mobile, Alabama<P>
Dear Robert,<P>
SUBJECT: <I>qsort</I>, September issue.</FONT></FONT><P>
An easier way to do multi-key sorts given, e.g., a <I>struct</I> like this:</FONT></FONT><P>
<pre>struct stuff
   {
   char str [20]
   int cnt;
   int subcnt;
   }</pre>
To sort <I>struct stuff * array[]</I>, use a comparison function, as in <A href="list2.htm">Listing 2</a>.
 It seems a lot more straightforward than sorting on one key and then sorting sub-blocks of data by another key (and even better, it works).</FONT></FONT><P>
Also, to sort reversed, as on p. 30, use:<P>
<pre>return(strcmp(p1, p2))
   /* forward, or * /
return(strcmp(p2, p1))
   /* backward */</pre>
In other words, just reverse the pointers.<P>
Simply yours,<P>
David X Callaway<br>
IB49 Independence Rd.<br>
Fort Collins, CO 80526<P>
Dear Sirs,<P>
I'd like to point out a problem with Arthur Held's article "Function Returns: How to Use Them" in your October issue. I wouldn't bother, except the article was obviously intended for beginners in C and contains a glaring syntactical error which might cause some confusion and frustration to new users.<P>
Held writes the ternary operator to convert<I> ch </I>to upper case with the following syntax:</FONT></FONT><P>
<pre>(if ch &gt;= 'a' &amp;&amp; ch &lt;= 'z' ?
   ch - ('a' - 'A') : ch);</pre>
As many readers have informed you, I'm sure, the <I>if</I> is incorrect. The ternary operator does not require an<I> if</I>. The correct syntax is:</FONT></FONT></FONT></FONT><P>
<pre>(ch &gt;= 'a' &amp;&amp; ch &lt;= 'z' ?
   ch - ('a' - 'A') : ch);</pre>
Note the outer parentheses are unnecessary but harmless, and do serve to group the ternary operator together. Unfortunately the article contains the same error three times. Also, in Held's first example, the programmer will need to assign the result of this ternary operator to something in order to actually save the converted <I>ch</I>. The corrected syntax I gave above still doesn't do this. A beginner might be confused about that as the ternary operator is probably something quite unique from anything they've used before.</FONT></FONT><P>
On another more positive note, I'd like to provide a little input for beginners that might have read this article. I noticed Held used the <I>printf</I> function to display string constants when giving examples of prompts and error messages. Certainly this is a common practice and I'm not picking on Held. A hint: if you are going to output a string constant, it can be very beneficial to use the <I>puts</I> or <I>fputs</I> function. They deal explicitly with string constants and thus don't suffer the overhead of linking in all the baggage to print every kind of integer, character, and floating point like <I>printf</I> will. If <I>printf</I> is not needed anywhere in your code, avoiding it and using <I>puts</I> or <I>fputs</I> instead can greatly reduce the size of the executable.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
I think your mix of beginner and advanced material is wonderful, and serves a great purpose in the C community. I consider myself an advanced C programmer, having worked with C exclusively in many major projects over the past eight years. Having received your publication over the last two or three years, I can honestly say I get something out of every issue. <I>The C Users Journal</I> is consistently the best publication I receive.<P>
Thanks for the good work,<P>
John T. Pearson<br>
3405 Elmwood Ave.<br>
Lubbock, TX 79407-4027<P>
<I>Mr. Pearson is quite correct. The errors he cites are egregious. We can only hope that a less overworked editorial staff will catch more such gaffes before they see the light of day. - pjp</I><P>
Dear Sir:<P>
I am a current subscriber in your magazine and I am interested in finding a font editor for stroked fonts of Borland graphics library. Your help will be highly appreciated.<P>
Sincerely,<P>
John Kolias<br>
74 Lelas Karagiani Str.<br>
Athens 11361, Greece<P>
<I>Anybody? - pjp</I><P>
Mr. Ward:<P>
If some of my emotion leaks in your direction please forgive me because it is not my intent. I believe that you, as well as I, are simply the victims in this matter. The <I>perp</I>, as the cops like to say, is SoftC in Vol. 326. They have used you to market for them, at your expense, a very uncompetitive product. It is unknown at this time if the product even works or how many bugs it has, and it is economically unfeasible to find out. In brief, it is because their product costs $100 for the source code and that is for <I>one user </I>on<I> one computer</I> at a time per their license agreement in <I>license.doc</I> and <I>manual.doc</I> on Vol. 326. I have plans to produce and market a dBase access utility for $49.95. This means that I would be $50.05 in the hole for every copy I sold, using SoftC's library, per their license agreement. You're probably thinking, "Why don't I just use the runtime library, it's cheaper." The problem is that I don't want the whole load, just a couple of read functions and once I buy the source at $100, I'm restricted per the license from using any portion of it except on one computer at a time, thus $100/copy royalty on a $49.95 package. If SoftC was the only player it would be take it or leave it. But they're not. CodeBase 4 from Sequiter Software is available at full retail for $295 with source code and with <I>no royalties</I> and they have windows and menus on top of the dBase access routines.</FONT></FONT></FONT></FONT><P>
So the bottom line is I got skunked for $8 and you're doing the dirty work for SoftC for free and our group (CUG) is being abused by a greedy and cheap marketing operation.<P>
Tom Curren<P>
Dear Mr. Ward,<P>
Regarding your request for books covering the information engineering area:<P>
There are literally hundreds of texts with titles like <I>Information Systems In Business, </I>or<I> Management Information Systems</I>. They cover some of the topics described in your material. I am not familiar with titles that would emphasize engineering. Three titles which have been used in our program (which doesn't mean they are any good) are:<P>
<I>Management Information Systems</I>, K. Laudon and J. Laudon, Macmillan Publishing Company.<P>
<I>Management of Business Systems</I>, R. McLeod, Macmillan Publishing Company.<P>
<I>Foundation of Business Systems</I>, P.  Flaatten, et. al., Dryden Publishing.<P>
In addition, I am sure that any text salesperson would happily talk your ear off about offerings that fit your needs.<P>
Tim Shaftel<P>
Dear Sir or Madam:<P>
Congratulations on an excellent magazine. I look forward to receiving each issue, which I read cover to cover. I have not been able to read the Volume 8, Number 6 edition because I did not receive it. I would greatly appreciate it if you would send it to me. Thank you very much and keep up the good work.<P>
Sincerely,<P>
Calvin Trainor<br>
63 Pincarrow Rd.<br>
Winnipeg, MB R3Y 1E6<P>
Dear Sir:<P>
In testing Rex Jaeschke's assertion that there is no such thing as a negative constant in C ("Operators And The Precedence Table," <I>The C Users Journal</I>, August 1990) I find that the code generated by one compiler yields the size of an <I>int</I> when asked for <I>sizeof(-32768)</I> and that the code coughed out by a competing compiler returns the size of a <I>long</I>. With either compiler, constants more negative than <I>-32768</I> are tagged as <I>longs</I> and those less negative but still less positive than <I>+32768</I> are sized as <I>int</I>s.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
This seems to mean that the compiler that is capable of storing <I>-32768</I> in an <I>int</I>-sized object is indeed using a signed format to store the constant. Rex's comment therefore leads me to ask whether this behavior is just an unusual practice in C or whether it constitutes a violation of the ANSI Standard.</FONT></FONT></FONT></FONT><P>
Although this side issue proved to be interesting, the exposition of the precedence table in the article was quite valuable to me, and I look forward to future columns by Doctor C.<P>
Sincerely,<P>
Maynard A. Wright<br>
6930 Enright Drive<br>
Citrus Heights, CA 95621<P>
Rex Responds:<P>
<I>Thanks for your kind words.</I><P>
<I>Assuming the compiler is running on a twos-complement 16-bit machine (like the Intel 80x86 series and not using a DOS extender), if it stores </I><I>-32768</I><I> in an int it is defficient. Here's why. The grammar for an integer constant token in ANSI C does not include a sign. Therefore, the expression </I><I>-32768</I><I> consists of two tokens, the unary minus operator and the constant </I><I>32768</I><I>.</I></FONT><P>
<I>According to the Standard, (page 28, lines 37-41), "The type of an integer constant is the first of the corresponding list in which its value can be represented. Unsuffixed decimal: </I><I>int</I><I>, </I><I>long int</I><I>, </I><I>unsigned long int</I><I>; unsuffixed octal or hexadecimal; </I><I>int</I><I>, </I><I>unsigned int</I><I>, </I><I>long int</I><I>, </I><I>unsigned long int</I><I>; suffixed by the letter u or U: </I><I>unsigned int</I><I>, </I><I>unsigned long int</I><I>; suffixed by the letter l or L: </I><I>long int</I><I>, </I><I>unsigned</I><I> </I><I>long int</I><I>; suffixed by both the letters u or U and l or L: </I><I>unsigned long int</I><I>."</I></FONT><P>
<I>32768</I><I> is an unsuffixed decimal and it won't fit into an </I><I>int</I><I> so </I><I>long</I><I> is tried and that works; </I><I>long</I><I> is its type. The negation is applied to the result of that </I><I>long int</I><I>. If you look carefully, you will see that the rules are different for decimal and octal/hex. The following program demonstrates this.</I></FONT><P>
<pre>#include &lt;stdio.h&gt;

main()
{
   printf("sizeof(-32768)      = %lu\n",
      (unsigned long)sizeof(-32768));
   printf("sizeof(0x8000)       = %lu\n",
      (unsigned long)sizeof(0x8000));
   printf("sizeof(0100000)     = %lu\n",
      (unsigned long)sizeof(0100000));
}</pre>
<I>The values </I><I>-32768</I><I>, </I><I>0x8000</I><I>, and </I><I>0100000</I><I> have exactly the same bit pattern when stored in 16 bits. However, the type of the first expression is </I><I>long</I><I> while that of the second and third is </I><I>unsigned int</I><I>. The correct output produced is:</I></FONT><P>
<pre>sizeoff(-32768)   = 4
sizeof(0x8000)    = 2
sizeof(0100000)   = 2</pre>
<I>I tried this program with six DOS compilers and one did perform as you reported. It was the Power C v1.2.1 compiler from MIX. I wonder if that's the one you found too.</I><P>
<I>Incidently, the original K&amp;R (page 180 section 2..4.1) allows you to come to the same conclusions provided you recognize the minus is not part of the constant token.</I><P>
<I>And in case anyone is wondering why I used the casts; the type of the result of </I><I>sizeof, size_t,</I><I> </I><I>is implementation-defined and it can either be unsigned or unsigned long. Since I need to choose a print edit mask I chose the larger of the two and cast the expression just in case. If it was already unsigned long the cast is vacuous. If it wasn't, the correct code will be generated to make it work. It's a very subtle porting issue.</I></FONT><P>

<h4><a href="../../../source/1990/dec90/letters.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY></HTML>
