


<HTML>
<HEAD>

<TITLE>December 1990/Buffering Mouse Events</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocdec.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Device Control</FONT></H2>

<hr><h2 align="center"><font color="#800000">Buffering Mouse Events<A name="0278_0168"><A name="0278_0168"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0278_0000"><A name="0278_0000">Michael Kelly</font></h3><hr><blockquote><P>
<P><i><A name="0278_0000"><A name="0278_0000">Michael Kelly has held a variety of jobs, including auto mechanic and electro-mechanical technician. For the past three years, he has been engaged in a program of self-study concerning programming and related subjects. Joining the C Users' Group stimulated his interest in writing portable code. He intends to enter the computer field in some professional capacity. Kelly can be reached at 254 Gold St., Boston, MA 02127.</i></P><P>
This article demonstrates a technique for asynchronously buffering mouse events in a queue. This approach, written in C and assembler, has several advantages over polling.<P>
First, the mouse driver forwards information as events are detected instead of when your program finally asks for it. A user can become annoyed with an application where moving the mouse moves the cursor on the screen, but clicking a button does nothing. The event queuing approach provides users with a consistent feel. When a program is ready to process mouse events, it should activate the handler and turn on the mouse cursor. When the program is busy for a while, executing a user selection perhaps, it should turn off the mouse cursor, de-activate the handler, and either free the queue memory (if needed by your program), or adjust the queue pointers to indicate an empty condition.<P>
Second, capturing all mouse input with one handler makes isolating system-dependent code easier. You can construct mouse interface functions to send messages to your portable application code, and change only the mouse managment module to accommodate other environments.<P>
Third, this technique allows your application code to take on some of the "event-driven" feel common to many windowing environments. You can test this paradigm before making an investment.<P>
<h4><FONT COLOR="#000080"><A name="0278_0169">Implementation Details<A name="0278_0169"></FONT></h4></P>
The queue is implemented as a circular, singly-linked list, with pointers <I>head </I>and<I> tail</I> that chase each other around the queue in a manner reminiscent of the PC BIOS keystroke buffer. I represented the queue as a linked list rather than as an array of structures to avoid multiplies (a very slow operation on the 8088) inside the mouse handler. Handler exectution disables interrupts, and the handler is likely to be called many times per second. The queue test driver program in <A href="list1.htm">Listing 1</a>
uses <I>INT</I> <I>33H, Function OCH</I> to register the mouse event handler with the mouse driver. The test driver should work with devices compatible with the Microsoft Mouse Driver Interface. Once you have initialized the mouse and registered the handler, the mouse driver will execute a <I>far</I> call to the handler when it senses a mouse event corresponding to one or more of the event types set during handler registration.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
On entry to the handler (<A href="list2.htm">Listing 2</a>)
, the machine registers <I>DX, CX, BX, and AX</I> contain information about the mouse cursor vertical position, mouse cursor horizontal position, mouse button status, and type of mouse events in effect at the time of the call, respectively. Also, the <I>DS</I> register is left pointing to the mouse driver's data segment, rather than that owned by the application. These peculiarities, combined with the need for the handler to execute quickly, dictate that it be written in assembler.</FONT></FONT></FONT></FONT><P>
To function properly, <I>HANDLER</I> must know the internal representation of a link in the queue, be able to access the pointers <I>head</I> and <I>tail</I>, and follow the same protocol as the function that removes events from the queue. In this example if <I>tail -&gt;next </I>equals<I> head,</I> the queue is considered to be full and <I>HANDLER</I> exits. Otherwise, <I>HANDLER</I> stores the mouse event information in the queue, sets the member variable <I>valid</I> to <I>1</I>, and advances<I> tail </I>by one link. The dequeuing function resets the <I>valid</I> member variable to<I> 0 </I>before moving <I>head</I>, then processes the mouse events.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<A href="list3.htm">Listing 3</a>
and <A href="list4.htm">Listing 4</a>
define the C functions responsible for queue construction and destruction. The <I>set_que()</I> function performs memory allocation, list linking, and initialization of <I>head</I> and <I>tail</I>. Its sole parameter, <I>que_entries</I>, is the desired number of event entries in the queue. If successful, <I>set_que</I> returns 1, and <I>head</I> and <I>tail</I> both point to the first link in the list. If <I>set_que</I> is unable to allocate the requested number of links, it calls <I>free_que()</I> to release any memory allocated to the queue, and returns 0.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<A href="list1.htm">Listing 1</a>
contains a trivial test driver program. If a mouse is detected, the driver calls <I>set_que()</I>. If <I>set_que()</I> returns 1, the handler is registered with all event bits set. The program pokes a character to the screen at the mouse cursor position (if you're running on a CGA or EGA monitor in text mode 2 or 3) while the user drags the mouse using the left mouse button. It terminates when the user presses the right mouse button.</FONT></FONT></FONT></FONT><P>
Included on the code disk is a small model link library <I>(TC_MOUSE. LIB </I>and <I>TC_MOUSE. H)</I> containing most of the mouse interface functions. If you use a compiler other than Turbo C v1.5+ you can use <I>int86()</I> and <I>int86x()</I>, loading the registers as described in <A href="tab1.htm">Table 1</a>
to accomplish the same ends.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4>References</FONT></h4></P>
Dettman, Terry, <I>DOS Programmer's Reference</I>, Que Corp., 1988.<P>
Duncan, Ray, <I>Advanced MS-DOS Programming</I>, 2nd Edition, Microsoft Press, 1988.<P>

<h4><a href="../../../source/1990/dec90/kelly.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY></HTML>
