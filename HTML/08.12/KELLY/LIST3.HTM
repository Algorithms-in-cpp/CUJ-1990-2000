<HTML><head><TITLE>December 1990/Buffering Mouse Events/Listing 3</TITLE></head><BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4><A name="0278_0170"><A name="0278_0170">Listing 3 (mouseq.c)<A name="0278_0170"></h4><P>
<pre>/*     TITLE:     Mouse Event Queue;

  FUNCTION:  Handles construction and destruction of an event
         queue to ease MicroSoft-compatible mouse event
         management;

  FILENAME:  MOUSEQ.C;

  COMPILER:  TURBO C V. 1.5+ Small Memory Model;

  REQUIRES:  MOUSEQ.H;


*/


#include &lt;stdlib.h&gt;
#include "mouseq.h"

static unsigned int num_links = 0;
EVENT *head = NULL, *tail = NULL;

/*
 *  int set_que(unsigned int que_entries);
 *
 *  attempts to create a circular, singly linked list large
 *  enough to store "que_entries" number of mouse events
 *
 *  on success:    head and tail point to first link in list
 *                 local variable num_links equals que_entries
 *
 *  returns:       1
 *
 *  on failure:    calls free_que() to free memory allocated
 *                 before an allocation failure, if any
 *
 *  returns:       0
 */
int set_que(unsigned int que_entries)
{
   if(que_entries &lt; 3)
  return 0;

   head = (EVENT *) malloc(sizeof(EVENT));
   if(! head)
  return(0);

   tail = head;
   head-&gt;next = NULL;
   head-&gt;xcoord = 0;
   head-&gt;ycoord = 0;
   head-&gt;buttonbits = 0;
   head-&gt;maskbits = 0;
   head-&gt;valid = 0;

   num_links = 1;

   while(--que_entries) {
  tail-&gt;next = NULL;
  tail-&gt;next = (EVENT *) malloc(sizeof(EVENT));
  if(! tail-&gt;next) {
     free_que();
     return 0;
  }
  else
     ++num_links;

  /*
   *  could have used calloc() to zero members of EVENT structure
   *  but for this example it is done explicitly
   */
  tail = tail-&gt;next;
  tail-&gt;xcoord = 0;
  tail-&gt;ycoord = 0;
  tail-&gt;buttonbits = 0;
  tail-&gt;maskbits = 0;
  tail-&gt;valid = 0;
   }

  /*
   *  make queue circular, then point head and tail
   *  to first link in list
   *  if handler() sees tail-&gt;next == head, it assumes the
   *  event queue is full, and returns to the mouse driver
   */
  tail-&gt;next = head;
  tail = tail-&gt;next;

  return 1;

}

void free_que()
{
  EVENT *linkptr = NULL, *prev_linkptr = NULL;

  if(! num_links)     /* num_links set by set_que() */
 return;

  linkptr = head-&gt;next;

  /*
   * save link pointer int prev_linkptr
   * bump link pointer to next position
   * then free the previous link pointer
   */
  do  {

 prev_linkptr = linkptr;
 linkptr = linkptr-&gt;next;
 if(prev_linkptr)
     free(prev_linkptr);
  }
  while(--num_links);

  if(head)
 free(head);

   head = tail = NULL;
}</pre>
</BODY></HTML>
