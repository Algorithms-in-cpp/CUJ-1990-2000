<HTML><head><TITLE>December 1990/Inter-Process Communication With Sockets/Listing 3</TITLE></head><BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4><A name="028A_0179"><A name="028A_0179">Listing 3 (client.c)<A name="028A_0179"></h4><P>
<pre>/*
 *   Basic client process for time accounting system, non-network version.
 *   This process (and those that are linked to it) are run as commands
 *   and send events to the server process.
*/

#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;netdb.h&gt;
#include &lt;stdio.h&gt;
#include "time_entry.h"

main(argc, argv)
    int argc;
    char *argv[];
{

    int skt_id,    /* Socket descriptor */
       msg_sock,  /* Socket that will accept messages */
       i,j;

    EVENT_TYPE event;

    struct sockaddr sa;  /* Socket address structure */
    char buff[80];

    /*
     * Specify the socket domain and type we want...
    */
    skt_id = socket(AF_UNIX, SOCK_STREAM, 0);
    if(skt_id == -1){
       perror("Can't create socket");
       exit(1);
    }

    /*
     * Now set up the address structure and connect to the socket.
    */
    sa.sa_family = AF_UNIX;
    strcpy(sa.sa_data, SOCKET_NAME);

    if(connect(skt_id, &amp;sa, sizeof(sa)) == -1){
       perror("Can't connect to socket");
       exit(1);
    }


    build_event(argv[0], &amp;event);

    /*
     * Now, send the event
    */

    if(write(skt_id, &amp;event, sizeof(event)) != sizeof(event)){
       perror("Write");
       exit(1);
    }

    /* Cleanup */
    close(skt_id);
    exit(0);
}

build_event(a, e)
   char *a;        /* Name process was invoked with */
   EVENT_TYPE *e;  /* A time entry event */
{

      if(!strcmp(a, "pi"))         /* A PHONE_IN event */
         e-&gt;event_cd = PHONE_IN;
      else if(!strcmp(a, "po"))    /* PHONE_OUT */
         e-&gt;event_cd = PHONE_OUT;
      /*
       * Check any other types...
      */

      else
          e-&gt;event_cd = SHUT_DOWN;  /* Default is shut down */

      e-&gt;bill_flag = 'Y';            /* Billable is the default */

      /*
       * Code here to get the system time (e-&gt;event_st), and the
       * login name of the user (e-&gt;logname). For now, let's just
       * hard code something...
      */
      e-&gt;event_st = 0;
      strcpy(e-&gt;logname, "bryang");
}
</pre>
</BODY></HTML>
