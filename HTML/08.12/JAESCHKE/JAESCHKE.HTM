


<HTML>
<HEAD>

<TITLE>December 1990/Doctor C's Pointers&reg;</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocdec.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Doctor C's Pointers&reg;<A name="0293_0174"><A name="0293_0174"></font></h2><P>
<h3 align="center"><A name="0293_0000"><A name="0293_0000">Puzzles, Part 2</h3><P>
<h3 align="center"><font color="#800000">Rex Jaeschke</font></h3><hr><blockquote><P>
<P><i><A name="0293_0000"><A name="0293_0000">Rex Jaeschke is an independent computer consultant, author and seminar leader. He participates in both ANSI and ISO C Standards meetings and is the editor of  The Journal of C Language Translation, a quaterly publication aimed at implementors of C language translation tools. Readers are encouraged to submit column topics and suggestions to Rex at 2051 Swans Neck Way, Reston, VA 22091 or via UUCP at uunet!aussie!rex or aussie!rex@uunet.uu.net.</i></P><P>
This month I'll continue the Puzzles series, this time concentrating on arrays and subscripting. As before, I have included the answers to the problems but encourage you to try solving them before looking at the answers.<P>
<h4><FONT COLOR="#000080"><A name="0293_0175">The Puzzles<A name="0293_0175"></FONT></h4></P>
1. Discuss the declaration <I>double</I> <I>d[1][1][1].</I></FONT></FONT></FONT><P>
2. Given the declaration <I>int i[2][3][4]</I>, convince yourself that all the statements in <A href="list1.htm">Listing 1</a>
are equivalent. They all initialize the last <I>int</I> in the 3D array to <I>1</I>.</FONT></FONT></FONT></FONT></FONT></FONT><P>
3. What is the type and value of the expression <I>"abcd" [2]</I> ?</FONT></FONT><P>
4. Explain what is happening in the expression <I>f()[2]</I> = 'x'. Under what circumstances might this not work? Can you think of a use for this construct?</FONT></FONT><P>
5. When an array is passed to a function, the address of its first element is actually passed. For the array <I>short s[5][3],</I> what is the type of the value actually passed in <I>f(s)</I>?</FONT></FONT></FONT></FONT><P>
6. Given <I>double d[2][4]</I>, what is the type of the expression d[1]?</FONT></FONT><P>
7. What is the order of evaluation in the expression <I>a [i++] [i] [-i]</I>? Assume that i initially has the value <I>5</I>.</FONT></FONT></FONT></FONT><P>
8. How do you declare an array of 16 1-bit bit-fields?<P>
9. Is an array name a pointer?<P>
10. It is widely believed that an array name is always converted to the address of the first element. Are there any exceptions?<P>
<h4><FONT COLOR="#000080"><A name="0293_0176">The Solutions<A name="0293_0176"></FONT></h4></P>
1. In an array declaration, the size of each dimension must be a compile-time constant integer expression having a value greater than zero. Unlike most languages, C permits a dimension of size <I>1</I>. You could argue that an array of <I>1</I> element isn't an array at all. However, looking from the other perspective, a scalar is simply an array of <I>1</I> element.</FONT></FONT></FONT></FONT></FONT></FONT><P>
In any event, <I>d</I> is a 3-dimensional array of <I>1</I> element in each dimension, so the total number of elements is <I>1x1x1</I> which is, of course, <I>1</I>. That is, space is really allocated for a scalar <I>double</I> object. However, since <I>d</I> was declared as an array, you must use all three subscripts to access it. That is, <I>d[0][0][0] </I> refers to the object.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
But why would you ever want to use an array of dimension 1? Consider <A href="list2.htm">Listing 2</a>,
 taken from the <I>setjmp.h</I> header for TopSpeed C V1.04.</FONT></FONT><P>
The type <I>jmp_buf</I> must "be an array type suitable for holding information needed to restore a calling environment." Since the elements saved do not have the same type, an array cannot be used directly in this case. Instead, an array of <I>1</I> structure is used.</FONT></FONT></FONT></FONT><P>
Granted, few programmers will likely need to do something like this, but seeing how implementors use the language can give you ideas on applying it yourself.<P>
2. Well, this is one of those cases where you just have to work it out a step at a time. The keys to solving this are:<P>
a) the subscript operator <I>[]</I> is commutative. That is, <I>a[i]</I> is equivalent and interchangeable with <I>i[a].</I> Both K&amp;R and ANSI C require that one of the operands be a pointer expression and the other an integer expression. There is <I>no</I> requirement they be in either order.</FONT></FONT></FONT></FONT></FONT></FONT><P>
b) Any expression of the form <I>a</I> <I>[i] </I>can be rewritten as *<I>(a </I>+<I> i)</I> and vice versa. This is the fundamental conversion identity in pointer/array expressions in C.</FONT></FONT></FONT></FONT></FONT></FONT><P>
c) addition is commutative such that <I>a </I>+<I> i</I> is equivalent to <I>i </I>+<I> a</I>.</FONT></FONT></FONT></FONT><P>
d) the precedence table shows that <I>[]</I> associates left-to-right.</FONT></FONT><P>
3. To write predictable code, you must know the type of each expression you write. When the compiler comes across a string literal, it takes on the job of storing that string as an unnamed static <I>char</I> array. The array is initialized with the characters <I>abcd</I> and an extra trailing null character. That is, the type of the expression <I>"abcd"</I> is array of 5 <I>char</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The expression <I>"abcd"</I> designates an array just as the name of an array does. When such an expression is used as an operand of <I>[]</I>, it is converted to the address of the first element. Since expressions of the form <I>a</I> <I>[i]</I> can be rewritten as <I>*(a </I>+<I> i)</I>, <I>"abcd"[2] </I>can be rewritten as *(<I>"abcd" </I>+<I> 2</I>). This results in an expression of type <I>char</I> with value <I>'c'</I>. (Interestingly, according to the rules stated in Solution 2, <I>"abcd"[2] </I>can also be written as <I>2["abcd"].</I>)</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
4. Due to the fact that <I>a [i]</I> is equivalent to <I>*(a + i)</I>, you can arbitrarily subscript any data pointer expression to ne level. So, for <I>f( ) [2]</I> to be acceptable, <I>f( )</I> must have type <I>pointer</I> <I>to object type T</I>. Then, <I>f() [2]</I> is equivalent to <I>*</I>(<I>f( ) </I>+<I> 2</I>) and has type <I>T</I>. In the example given, type <I>T</I> could be any arithmetic type, although the use of a character constant might imply that <I>T</I> is <I>char.</I></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Consider <A href="list3.htm">Listing 3</a>.
 This construct would fail at runtime if the pointer returned pointed to a <I>const</I> object that really was write-protected. A similar case is if the returned pointer pointed into a string literal that was stored in a read-only location (as permitted by ANSI C).</FONT></FONT><P>
If the address returned was that of an automatic object local to function <I>f</I>, the result would be undefined since that object is not guaranteed to exist after <I>f</I> returns.</FONT></FONT></FONT></FONT><P>
5. If you guessed that <I>&amp;s[0][0]</I> (which has type <I>short *</I>) is passed, you are not alone since most people guess just that. Unfortunately, that is incorrect. In C, a multidimensional arrays is considered to be an array of arrays, which is shown by using separate [] punctuators and operators in multi-dimensional array declarations and expressions.</FONT></FONT></FONT></FONT><P>
Essentially,<I> </I><I>every</I><I> </I>array in C is one dimensional. It just so happens that the elements they contain can be vectors. In any event, the first element in any array is <I>a[0]</I>, <I>regardless</I> of the number of dimensions that array has. As such, what is passed to <I>f </I>is <I>&amp;s[0]</I>. The type of <I>s[0] </I>is <I>array of 3 short int </I>and<I> s </I>is<I> array of 5 elements each of which is an array of 3 short int.</I> The type of the expression <I>&amp;s [0]</I> therefore, is <I>pointer to an array of 3 short int</I>, which is <I>quite</I> different from a <I>a pointer to short int</I>. (I discussed pointers to arrays in my <I>CUJ</I> column in May 1990. The function f could be defined in either of the following ways &#151; they are equivalent &#151; and <I>s</I> can be subscripted to two levels.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>void f(short s[][3])   {  /* ... */
}
void f(short (*s)[3])  {  /* ...
*/  }</pre>
6.     Based on the discussion in Solution <I>5, d[1]</I> designates the second element in the array <I>d</I>. It is the second row of <I>4 doubles</I>. The type of <I>d[1]</I>, therefore, is<I> array of 4 double</I>. Many people would answer that its type was <I>pointer to double</I> instead. However, that is not altogether correct. Expressions that designate arrays are not <I>always</I> converted to pointers (see Puzzle 10). One example where the conversion does <I>not</I> take place would be <I>sizeof (d[1]).</I></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
7.     The <I>[]</I> operator provides no guarantee about the order of evaluation of its operands. Since there are no sequence points in this expression, the order of evaluation is unspecified.</FONT></FONT><P>
8.     This is a trick question. You can't declare an array of 16 one-bit bit-fields. There are cases in which an array of bit-fields would be useful, but array referencing requires pointers and, therefore, addresses. Very few machines provide bit addressing, so a pointer to a bit-field would have to be larger in representation than other pointer types. On machines without native bit addressing, such emulation would probably be expensive.<P>
<I>[You might try</I><P>
<pre>struct {
   int bit : 1;
   } a [16];</pre>
<I>if wasted space is not an issue. </I>&#151;<I> Ed.]</I><P>
9.     In many cases, an array name behaves like a <I>const</I> pointer, but it really is not a pointer. It is a non-modifiable lvalue and one that often is converted to the address of an object.</FONT></FONT><P>
10.     There are three exceptions to this rule. Consider the following:<P>
<pre>int a[10];

sizeof(a)
&amp;a</pre>
In the first expression, <I>sizeof</I> determines the size of the whole array, <I>not</I> the size of a pointer to the first element. In the second expression, a pointer to the whole array is produced, <I>not</I> a pointer to the address of the first element. Many older compilers warn (or even reject) constructs like <I>&amp;a</I> suggesting that the <I>&amp;</I> is superfluous. Under ANSI C rules, it is not.</FONT></FONT></FONT></FONT></FONT></FONT><P>
The third and final case has to do with string literals. For example:<P>
<pre>char *pc = "abcd";
char c[] = "abcd";</pre>
In the first declaration, the compiler recognizes that a scalar variable is being initialized. Therefore, it stores the string as a null-terminated array of <I>char</I> elsewhere, and initializes <I>pc</I> to the address of the start of that location. That is, the expression <I>"abcd"</I> represents an unnamed array and <I>is</I> converted to the address of the first element.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
On the other hand, <I>c</I> is an array, so the compiler recognizes that <I>"abcd"</I> is simply shorthand for {<I>'a', 'b', 'c', 'd', '\0'</I>}. It initializes the array with those characters. Here the expression <I>"abcd"</I> is <I>not</I> treated as an array, so no conversion to pointer is done. The two initializers are textually identical but are interpreted differently.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>

<h4><a href="../../../source/1990/dec90/jaeschke.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY></HTML>
