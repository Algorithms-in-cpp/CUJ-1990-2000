






<HTML>
     
     <HEAD>


          
          <TITLE>September 1996/C/C++ Sources </TITLE>
     </HEAD>
     
     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          
          <H2><FONT COLOR="#FF0000"><A href="../tocsep.htm"><IMG src="../../toc.gif" ALT="Back to TOC" WIDTH="54" HEIGHT="54"></A>
          Columns</FONT></H2>
          
          <HR>
          
          <H2 ALIGN="CENTER"><FONT COLOR="#800000">C/C++ Sources: STL Help on the Web</FONT></H2>
          <H3 ALIGN="CENTER"><FONT COLOR="#800000">Victor R. Volkman</FONT></H3>
          <BLOCKQUOTE><p>You don't have to be a C++ expert to use STL. The World Wide Web is a great place to find tools, tutorials, and moral support.</p></BLOCKQUOTE><hr>
     <BLOCKQUOTE>
           <h4><FONT COLOR="#000080">Focus on STL</FONT></H4>
           <p>The WWW has historically been one of the most informative sources of information about leading-edge programming technologies. Though STL has been around for a few years now, it has only recently made its way out of computer science labs and into the toolkits of corporate application developers. My quick survey of WWW via the AltaVista search engine yielded more than 1,000 documents. After considerable weeding, I'm happy to share with you some of the more relevant pages in several subcategories: tutorials, vendor-specific pages, and pointer-pages:</p>
           <h4><FONT COLOR="#000080">STL Tutorials</FONT></H4>
           <p>Jak Kirman &lt;jak@cs.brown.edu&gt; of the CS faculty at Brown University has thrown together what he considers "a very modest tutorial" on STL. You can read it as a hypertext document or print it out in Postscript for offline perusal. Kirman motivates the discussion with a look at the STL sort template while introducing each of the five categories of STL components one at a time. Other sections address the philosophy of STL and suggest how to extend STL to meet your own needs. Kirman makes good use of graphical figures to illustrate his points. Check it out for yourself at:
           <pre><IMG HEIGHT="30" WIDTH="24" src="volkman1.gif">http://www.cs.brown.edu/people/jak/programming/stl-tutorial/tutorial.html</pre>
           <p>Mumit Khan &lt;khan@xraylith.wisc.edu&gt; at the Center for X-Ray Lithography at the University of Wisconsin provides an exhaustive amount of advice and coding examples (163Kb) in his "STL Newbie Guide." Major headings include: Writing Container Objects, Pointers and STL, STL Iterators, Persistent STL, and a new section about Predicates, Comparators, and General Functions. In addition to how-to information, he specifically addresses common pitfalls, such as "Gotchas with Storing Pointers to Objects." Its all at:</p>
           <pre><IMG HEIGHT="30" WIDTH="24" src="volkman2.gif">http://www.xraylith.wisc.edu/~khan/software/stl/STL.newbie.html#class_howto</pre>
           <p>David R. Musser &lt;musser@cs.rpi.edu&gt; has collected some introductory information, example applications that use STL, and pointers to other STL reference sources. Specifically, Musser's "Standard Template Library" page includes example source code for demonstrating STL vectors and vector iterators, an anagram checking application, and searching and sorting user-defined records. More advanced users may want to look at the official ANSI/ISO STL specifications (available in Postscript form) there.</p>
           <pre><IMG HEIGHT="30" WIDTH="24" src="volkman3.gif">http://www.cs.rpi.edu/~musser/stl.html</pre>
           <p>David R. Musser and Atul Saini, authors of <I>STL Tutorial and Reference Guide: C++ Programming with the Standard Template Library</I> [see a review of this book elsewhere in this issue - mb] offer a set of source code resources specific to their book. More than 70 example programs are available and you can browse selected parts of the book. Certainly, the website will belp you decide whether Musser and Saini's book would be appropriate for you.</p>
           <pre><IMG HEIGHT="32" WIDTH="31" src="volkman4.gif">http://www.aw.com/cp/musser-saini-source.html</pre>
           <h4><FONT COLOR="#000080">STL Vendor Specifics</FONT></H4>
           <p>G. Bowden Wise &lt;wiseb@cs.rpi.edu&gt;, of the CS faculty at Rensselaer Polytechnic Institute, has published a pragmatic set of notes entitled "Using the The Standard Template Library with Borland C++." In this document, he describes how to make STL work properly with Borland C++ 4.5 and optionally with Borland's Object Windows Library (OWL). Specifically, he details required changes to algobase.h, funtion.h, defalloc.h and other header files. Also appearing are detailed explanations of the known warnings that the Borland compiler emits while processing STL. You can read about it at:</p>
           <pre><IMG HEIGHT="30" WIDTH="24" src="volkman5.gif">http://www.cs.rpi.edu/~wiseb/stl-borland.html</pre>
           <p>or download Wise's patched STL files directly at:</p>
           <pre><IMG HEIGHT="32" WIDTH="31" src="volkman6.gif">http://www.cs.rpi.edu/~wiseb/stl/stlexp.zip</pre>
           <p>Microsoft's "MFC and Standard Template Library (STL) Alert" page provides a blistering disclaimer in which it places sole responsibility for STL back on Hewlett-Packard (who originally made STL freely available, but retained the copyright). Furthermore, it goes on to say that Microsoft Product Support Services will not assist in technical support issues on STL. Nevertheless, it does highlight required changes to header files (involving namespaces) that you can make yourself to achieve compatability with the Windows SDK or Microsoft Foundation Classes (MFC) and STL. Visit them at:</p>
           <pre><IMG HEIGHT="30" WIDTH="24" src="volkman7.gif">http://www.microsoft.com/visualc/v4/v4tech/stlchg.htm</pre>
           <p>Warren Young &lt;tangent@cyberport.com&gt; publishes the "STL Resource List," an extensive online catalog of pointers to pages detailing the STL support of C++ compilers. It also contains pointers to FTP sites where you can download a specially-tweaked version of the STL files for your specific compiler. Among the STL vendors cited are:</p>
           <UL><LI>Symantec C++ 7.x for Windows and 8.x for Macintosh</LI>
               <LI>Metrowerks C++ 7.0 (for Macintosh)</LI>
               <LI>Watcom C++ 10.0</LI>
               <LI>GNU C++ 2.7.1 and 2.7.2</LI>
               <LI>Rogue Wave's tools.h++ (enhanced version of STL)</LI>
               <LI>ObjectSpace's STL &lt;Toolkit&gt; (a multi-platform STL)</LI>
           </UL>
           <pre><IMG HEIGHT="32" WIDTH="32" src="volkman8.gif">http://www.cyberport.com/~tangent/programming/stlres.html</pre>
           <h4><FONT COLOR="#000080">STL Pointer Pages</FONT></H4>
           <p>Here's some "pointers to pointers." These pages provide a rich set of jumping-off points for your own exploration of STL:</p>
           <pre><IMG HEIGHT="32" WIDTH="32" src="volkman9.gif">http://www.cs.rpi.edu/~wiseb/stl-notes.html</pre>
           <pre>http://www.xraylith.wisc.edu/~khan/software/stl/STL.newbie.html#resources</pre>
           <pre>http://cs.ucr.edu/~jcharvat/stl.html</pre>
           <h4><FONT COLOR="#000080">STL Usenet Newsgroup Resources</FONT></H4>
           <p>Usenet newsgroups provide an ongoing discussion about the pros and cons of STL implementations. Jan Charvat, a graduate student in Computer Science at the University of California (Riverside), recommends the following newsgroups for STL coverage:
           <UL><LI>comp.std.c++</LI>
               <LI>comp.lang.c++</LI>
               <LI>comp.lang.c++.moderated</LI>
           </UL>
           <p>Before posting to Usenet, make sure you've read the STL FAQ, available at:</p>
           <pre><IMG HEIGHT="30" WIDTH="24" src="volkma10.gif">ftp://butler.hpl.hp.com/stl/stl.faq</pre>
           <h4><FONT COLOR="#000080">Reader Suggested Links</FONT></H4>
           <p>Paulo Eduardo Neves &lt;neves@lmf-di.puc-rio.br&gt; at Laboratorio de Metodos Formais in Rio de Janeiro, Brazil submits his favorite set of C/C++ links. As usual, I'll provide a brief description of each.
           <p>The Code Economics project (CodEc) provides a useful set of links to freeware linear algebra (matrices) and numerical analysis tools for C/C++. It also hosts the source and documentation for Chris Burchenhall's MatClass and Robert Davies NewMat08. The MatClass C++ matrix class library includes makefiles for Borland and Microsoft C++. The NewMat08 matrix class library supports Borland, Microsoft, AT&amp;T, Zortech, Watcom, GNU, and most other C++ platforms.</p>
           <pre><IMG HEIGHT="32" WIDTH="63" src="volkma11.gif">http://netec.mcc.ac.uk/~adnetec/CodEc/C_Cpp.html</pre>
           <p>Custom Innovative Solutions Corporation publishes its C source code in shareware form on the web. You're free to look at and download the source code. If you find the code useful in a commercial software setting, you are asked to pay a small licensing fee. Specific categories include: CGI Tools, File Handling Utilities, Graphics, Indexing and Searching, Numeric Conversions, Parameters and Configuration, Patterns and Parsing. I was most impressed by CNVL2.C, which can convert a long integer to a printable representation in any numbering base (from base 2 to base 90).</p>
           <pre><IMG HEIGHT="32" WIDTH="31" src="volkma12.gif">http://www.cisc.com/src/c/main.html</pre>
           <p>The online hypertext version of the GNU C Library reference manual is very convenient to use. You have instant access at your fingertips using the three-tiered table of contents to a variety of topics. Here's just a sampling of the topics:</p>
           <UL><LI>Pipes and FIFOs</LI>
               <LI>Searching and sorting</LI>
               <LI>Pattern matching and shell-style word expansion</LI>
               <LI>Calendars, timezones, and alarms</LI>
               <LI>Defining and using signal handlers</LI>
               <LI>Locales, internationalization, and extended character sets</LI>
           </UL>            
           <pre><IMG HEIGHT="30" WIDTH="24" src="volkma13.gif">http://www.ia.pw.edu.pl/tex-info/libc/libc_toc.html#SEC492</pre>
           <p>Ajay Shah &lt;ajayshah@cmie.ernet.in&gt; at the Centre for Monitoring Indian Economy, Bombay, compiles the "Free C/C++ Sources for Numerical Computation" page. As the name implies, it is an index of pointers to other types of information, including:</p>
           <UL><LI>Free source code available on the net</LI>
               <LI>Books which come with source code, and hence act as low-cost libraries</LI>
               <LI>Articles and documents, especially those available over the net</LI>
           </UL>
           <p>Unlike many other resource lists, this one specifically cites the author name, supported platforms, FTP site, and version information.</p>
           <pre><IMG HEIGHT="32" WIDTH="32" src="volkma14.gif">http://gauge.phys.uva.nl:2001/c-sources.html</pre>
           <p>or try</p>
           <pre><IMG HEIGHT="32" WIDTH="32" src="volkma15.gif">ftp://ftp.usc.edu:/pub/C-numanal/numcomp-free-c.gz</pre>
           <p>The "C++ Virtual Library," maintained by Lutz Lilje &lt;lilje@desy.de&gt; is a website that has something for everyone from the C++ newbie to those on the bleeding edge of the C++ standards. As you might expect, such a site is primarily focused on providing useful links to authoritative sources of information. Lilje's page is one of the most active programming resources on the web and has earned the coveted "Four-Star Site" award from Magellan for his efforts. Specific areas of interest include:</p>
           <UL><LI>Getting Started: Documents and sources on C++ and OOP</LI>
               <LI>Learning C++: Virtual courses and tutorials</LI>
               <LI>Free Packages: Freely available C++ packages of all kinds</LI>
               <LI>Conferences: List of OOP and Computing conferences</LI>
               <LI>OOLP: Discussion on Object-Oriented Literate Programming</LI>
               <LI>Tools &amp; Products: Descriptions of products</LI>
               <LI>General OO: Object-Oriented programming resources.</LI>
           </UL>
           <p>There are few sites I visit often enough to merit a bookmark, but the "C++ Virtual Library" is definitely on my hot links list.</p>
           <pre><IMG HEIGHT="32" WIDTH="32" src="volkma16.gif">http://info.desy.de/user/projects/C++.html</pre>
           <p>If you would like to share some of your favorite C/C++ sources, please email me at sysop@HAL9K.com.
           <h4><FONT COLOR="#000080"><IMG HEIGHT="32" WIDTH="50" src="volkma17.gif">C/C++ Mailbag</FONT></H4>
           <p>Here's a sampling of queries which have come to me recently via e-mail.</p>
           <p>Larry_Siden@msn.com writes:</p>
           <p>At my work, we might be able to use a program that can analyze C source code and generate a call tree along with various programming metrics. Do you know of any shareware like that? There's commercial stuff, but it costs in the thousands. I'd like to find something more reasonably priced.</p>
           <p><I>C/C++ Answer Man:
           <p>There's no need to pay a fortune for good source code analysis (how about just $47 for a great shareware program?). Try C Exploration tools for Windows. Its C Function Tree and C Structure Tree make program and data structure logic as clear as can be. As for metrics, I'll highlight only a few of them here:</p>
           <UL><LI>Number of source code lines for every file</LI>
               <LI>Number of included files for every source file</LI>
               <LI>For every defined function:</LI>
               <LI>Number of lines</LI>
               <LI>Number of functions called</LI>
               <LI>Number of flow control statements</LI>
               <LI>Maximum brace nesting level</LI>
               <LI>Whether it's used only in this file</LI>
               <LI>Function or data type reference list for every file</LI>
               <LI>Location of multiply defined functions and data types</LI>
               <LI>Location of all overloaded C++ functions</LI>
               <LI>#include file dependencies for every source file</LI>
               <LI>#include file tree for nested #includes</LI>
               <LI>Cross-reference for every function or data type</LI>
               <LI>Parent/child relationship for functions &amp; data types</LI>
               <LI>C++ class inheritance tree</LI>
               <LI>C structure/union byte offset calculation</LI>
           </UL>
           <p>Check out volume #437 on the CUG CD-ROM or by FTP at</I></p>
           <pre>ftp://ftp.cdrom.com/pub/cica/win3/programr/cxtw107.zip</pre>
           <p>75300.2257@compuserve.com writes:</p>
           <p>I would prefer a better method of searching for information and code on the CUG CD-ROM (please bear in mind that my only exposure is the 1994 CD). A hyper-text style index with search functions is preferable.</p>
           <p><I>C/C++ Answer Man:</p>
           <p>Ask no more! The June 1996 edition of C/C++ Users Group CD-ROM includes a hypertext index of volumes 400-437, by Subject keywords, Title, Language, and Platform (OS/CPU). Whats more, you even get a </I>free<I> licensed version of the popular I-VIEW offline HTML viewer (http://www.talentcom.com/iview/iview.htm) to use with it. A hypertext index of CUG CD-ROM is available online at http://www.HAL9K.com/cug/.</I></p>
           <p>d8342012@ccunix.ccu.edu.tw writes:</p>
           <p>I am interested in simulation, especially discrete event-driven simulations.</p>
           <p><I>C/C++ Answer Man:</p>
           <p>Well, since you didn't specifically ask for C or C++, I'll assume that C++ class libraries will work for you. I have two specific packages I think you should look at: C++SIM and CNCL.</p>
           <p>The C++SIM discrete event process based simulation package provides Simula-style class libraries. C++SIM was written by M.C. Little and D. McCue at the Department of Computing Science in the University of Newcastle upon Tyne (England). The same distribution also includes the SIMSET linked list manipulation facilities. According to MacLennan (1983), Simula was the first computer language to incorporate the ideas of "class" and "object" constructs in 1967. C++SIM currently claims usability only on Unix workstations, such as SUN Sparcs. C++SIM version 1.0 (released 06/15/92) is now available as volume #394 on the CUG CD-ROM. See also the C++SIM home page:</p></I>
           <pre>http://ulgham.ncl.ac.uk/C++SIM/homepage.html</pre>
           <I><p>The Communication Networks Class Library (CNCL) is a C++ library created by the Communication Networks department of Aachen, University of Technology, Germany. CNCL is both a class library featuring generic C++ classes as well as a simulation library with strong points in random number generation as well as statistical and event-driven simulation. CNCL v1.4 (released 01/05/96) is available on the CUG CD-ROM as volume #443. See also the CNCL home page:</p></I>
           <pre>http://www.comnets.rwth-aachen.de/doc/cncl.html</pre>
           
           <p><i>Victor R. Volkman received a BS in Computer Science from Michigan Technological University. He has been a frequent contributor to the </I>C/C++ Users Journal<I> since 1987. He is the author of the book </I>Windows Programming with Shareware Tools<I>. He can be reached at the HAL 9000 BBS (313)663-4173, URL http://www.HAL9K.com/home.htm, or email to sysop@hal9k.com.</i></p>           
           </BLOCKQUOTE>
           </BODY></HTML>
