



<HTML><HEAD>

<TITLE>September 2000/Processing Variant Records with STL/Listing 2</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4>Listing 2:	Defines key and value classes and variant record struct</h4>

<pre>
#ifndef _GLOBALS_H
#define _GLOBALS_H

#ifdef _USEMAP
#include &lt;map.h&gt;
#endif

typedef unsigned int BOOL;
const int FALSE = 0;
const int TRUE = 1;

// record formats
const unsigned int FORMAT1 = 1;
const unsigned int FORMAT2 = 2;
const unsigned int FORMAT3 = 3;

#ifdef _USEMAP
// datatypes
const unsigned int FLOAT = 1;
const unsigned int STRING = 2;

class CKey {
public:
    CKey() {}
    CKey(unsigned int Format,
         char Prefix) : m_format(Format), m_prefix(Prefix) {}
    ~CKey() {}
    int operator=(const CKey&amp; rhs)
        { m_format = rhs.m_format; m_prefix = rhs.m_prefix; return 1; }
    CKey(const CKey&amp; rhs)
        { m_format = rhs.m_format; m_prefix = rhs.m_prefix; }
    unsigned int m_format;
    char m_prefix;
};

class less_CKey {
public:
    BOOL operator()(const CKey&amp; K1, const CKey&amp; K2) const
    {
        if (K1.m_format &gt; K2.m_format)
            return TRUE;
        else
        if (K1.m_format &lt; K2.m_format)
            return FALSE;
        else
        if (K1.m_prefix &gt; K2.m_prefix)
            return TRUE;
        else
            return FALSE;
    }
};

class CValue {
public:
    CValue() {}
    CValue(long Offset, unsigned int Datatype) : m_offset(Offset),
         m_datatype(Datatype) {}
    ~CValue() {}

    int operator=(const CValue&amp; rhs)
        { m_offset = rhs.m_offset; m_datatype = rhs.m_datatype; return 1; }
    CValue(const CValue&amp; rhs)
        { m_offset = rhs.m_offset; m_datatype = rhs.m_datatype; }

    unsigned int Datatype() { return m_datatype; }

    long m_offset;
    unsigned int m_datatype;
};

typedef map &lt; CKey, CValue, less_CKey &gt; mymap;
typedef pair&lt; CKey, CValue &gt; pair_type;
extern mymap m;
extern mymap::iterator j;
#endif    // #ifdef _USEMAP

const int cDateLen = 8;
const int cDescLen = 30;

typedef struct {
    char Name[21];
    short Format;
    union {
        struct {
            float Amount;
            char Date[cDateLen + 1];
        } sFormat1;
        struct {
            char Date[cDateLen + 1];
            char Desc[cDescLen + 1];
        } sFormat2;
        struct {
            float Amount;
            char Date[cDateLen + 1];
        char Desc[cDescLen + 1];
        } sFormat3;
    };
} sVariantRecord;

#endif    // _GLOBALS_H
// End of File
</pre>
</body></html>
