



<HTML><HEAD>

<TITLE>September 1996/Standard C/C++/Listing 7</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4>Listing 7:	Rearranging Template Functions</h4>

<pre>
// TEMPLATE FUNCTION reverse
template&lt;class BidIt&gt; inline
    void reverse(BidIt first, BidIt last)
    {_Reverse(first, last, _Iter_cat(first)); }
template&lt;class BidIt&gt; inline
    void _Reverse(BidIt first, BidIt last,
        bidirectional_iterator_tag)
    {for (; first != last &amp;&amp; first != --last; ++first)
        iter_swap(first, last); }
template&lt;class RanIt&gt; inline
    void _Reverse(RanIt first, RanIt last,
        random_access_iterator_tag)
    {for (; first &lt; last; ++first)
        iter_swap(first, --last); }

// TEMPLATE FUNCTION reverse_copy
template&lt;class BidIt, class OutIt&gt; inline
    OutIt reverse_copy(BidIt first, BidIt last, OutIt x)
    {for (; first != last; ++x)
        *x = *--last;
    return (x); }
// TEMPLATE FUNCTION rotate
template&lt;class FwdIt&gt; inline
    void rotate(FwdIt first, FwdIt mid, FwdIt last)
    {if (first != mid &amp;&amp; mid != last)
        _Rotate(first, mid, last, _Iter_cat(first)); }
template&lt;class FwdIt&gt; inline
    void _Rotate(FwdIt first, FwdIt mid, FwdIt last,
        forward_iterator_tag)
    {for (FwdIt x = mid; ; )
        {iter_swap(first, x);
        if (++first == mid)
            if (++x == last)
                break;
            else
                mid = x;
        else if (++x == last)
            x = mid; }}
template&lt;class BidIt&gt; inline
    void _Rotate(BidIt first, BidIt mid, BidIt last,
        bidirectional_iterator_tag)
    {reverse(first, mid);
    reverse(mid, last);
    reverse(first, last); }
template&lt;class RanIt&gt; inline
    void _Rotate(RanIt first, RanIt mid, RanIt last,
            random_access_iterator_tag)
    {_Rotate(first, mid, last, _Dist_type(first),
        _Val_type(first)); }
template&lt;class RanIt, class Diff, class T&gt; inline
    void _Rotate(RanIt first, RanIt mid, RanIt last, Diff *, T *)
    {Diff d = mid - first;
    Diff n = last - first;
    for (Diff i = d; i != 0; )
        {Diff j = n % i;
        n = i, i = j; }
    if (n &lt; last - first)
        for (; 0 &lt; n; --n)
            {RanIt x = first + n;
            RanIt y = x;
            T val = *x;
            RanIt z = y + d == last ? first : y + d;
            while (z != x)
                {*y = *z;
                y = z;
                z = d &lt; last - z ? z + d
                    : first + (d - (last - z)); }
            *y = val; }}

// TEMPLATE FUNCTION rotate_copy
template&lt;class FwdIt, class OutIt&gt; inline
    OutIt rotate_copy(FwdIt first, FwdIt mid, FwdIt last, OutIt x)
    {x = copy(mid, last, x);
    return (copy(first, mid, x)); }

// TEMPLATE FUNCTION random_shuffle
template&lt;class RanIt&gt; inline
    void random_shuffle(RanIt first, RanIt last)
    {if (first != last)
        _Random_shuffle(first, last, _Dist_type(first)); }
template&lt;class RanIt, class Diff&gt; inline
    void _Random_shuffle(RanIt first, RanIt last, Diff *)
    {const int _RBITS = 15;
    const int _RMAX = (1U &lt;&lt; _RBITS) - 1;
    RanIt x = first;
    for (Diff d = 1; ++x != last; ++d)
        {unsigned long ranm = _RMAX;
        unsigned long rann = rand() &amp; _RMAX;
        for (; ranm &lt; d &amp;&amp; ranm != ~0UL;
            ranm = ranm &lt;&lt; _RBITS | _RMAX)
            rann = rann &lt;&lt; _RBITS | _RMAX;
        iter_swap(x, first + Diff(rann % d)); }}
template&lt;class RanIt, class Ranf&gt; inline
    void random_shuffle(RanIt first, RanIt last, Ranf&amp; ranf)
    {if (first != last)
        _Random_shuffle(first, last, ranf, _Dist_type(first)); }
template&lt;class RanIt, class Ranf, class Diff&gt; inline
    void _Random_shuffle(RanIt first, RanIt last,
        Ranf&amp; ranf, Diff *)
    {RanIt x = first;
    for (Diff d = 1; ++x != last; ++d)
        iter_swap(x, first + Diff(ranf(d))); }
//End of File
</pre>
</body></html>
