



<HTML><HEAD>

<TITLE>September 1996/Standard C/C++/Listing 6</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4>Listing 6:	Unique Template Functions</h4>

<pre>

// TEMPLATE FUNCTION unique_copy
template&lt;class InIt, class OutIt&gt; inline
    OutIt unique_copy(InIt first, InIt last, OutIt x)
    {return (first == last ? x :
        _Unique_copy(first, last, x,
            _Iter_cat(first))); }
template&lt;class InIt, class OutIt&gt; inline
    OutIt _Unique_copy(InIt first, InIt last, OutIt x,
        input_iterator_tag)
    {return (_Unique_copy(first, last, x, _Val_type(first))); }
template&lt;class InIt, class OutIt, class T&gt; inline
    OutIt _Unique_copy(InIt first, InIt last, OutIt x, T *)
    {T val = *first;
    for (*x++ = val; ++first != last; )
        if (!(val == *first))
            val = *first, *x++ = val;
    return (x); }
template&lt;class FwdIt, class OutIt&gt; inline
    OutIt _Unique_copy(FwdIt first, FwdIt last, OutIt x,
        forward_iterator_tag)
    {FwdIt firstb = first;
    for (*x++ = *firstb; ++first != last; )
        if (!(*firstb == *first))
            firstb = first, *x++ = *firstb;
    return (x); }
template&lt;class BidIt, class OutIt&gt; inline    ///
    OutIt _Unique_copy(BidIt first, BidIt last, OutIt x,    ///
        bidirectional_iterator_tag)    ///
    {return (_Unique_copy(first, last, x,    ///
        forward_iterator_tag())); }    ///
template&lt;class RanIt, class OutIt&gt; inline    ///
    OutIt _Unique_copy(RanIt first, RanIt last, OutIt x,    ///
        random_access_iterator_tag)    ///
    {return (_Unique_copy(first, last, x,    ///
        forward_iterator_tag())); }    ///

// TEMPLATE FUNCTION unique
template&lt;class FwdIt&gt; inline
    FwdIt unique(FwdIt first, FwdIt last)
    {first = adjacent_find(first, last);
    return (unique_copy(first, last, first)); }
//End of File
</pre>
</body></html>
