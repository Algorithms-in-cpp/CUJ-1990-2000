



<HTML><HEAD>

<TITLE>September 1996/Standard C/C++/Listing 4</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4>Listing 4:	Searching Template Functions</h4>

<pre>

// TEMPLATE FUNCTION find
template&lt;class InIt, class T&gt; inline
    InIt find(InIt first, InIt last, const T&amp; val)
    {for (; first != last; ++first)
        if (*first == val)
            break;
    return (first); }

// TEMPLATE FUNCTION adjacent_find
template&lt;class FwdIt&gt; inline
    FwdIt adjacent_find(FwdIt first, FwdIt last)
    {for (FwdIt firstb; (firstb = first) != last
        &amp;&amp; ++first != last; )
        if (*firstb == *first)
            return (firstb);
    return (last); }

// TEMPLATE FUNCTION count
template&lt;class InIt, class T&gt; inline
/// iterator_traits&lt;InIt&gt;::distance_type
///        count(InIt first, InIt last, const T&amp; val)
///    {iterator_traits&lt;InIt&gt;::distance_type n = 0;
    size_t count(InIt first, InIt last, const T&amp; val) ///
    {size_t n = 0;    ///
    for (; first != last; ++first)
        if (*first == val)
            ++n;
    return (n); }

// TEMPLATE FUNCTION search
template&lt;class FwdIt1, class FwdIt2&gt; inline
    FwdIt1 search(FwdIt1 first1, FwdIt1 last1,
        FwdIt2 first2, FwdIt2 last2)
    {return (_Search(first1, last1, first2, last2,
        _Dist_type(first1), _Dist_type(first2))); }
template&lt;class FwdIt1, class FwdIt2,
    class Diff1, class Diff2&gt; inline
    FwdIt1 _Search(FwdIt1 first1, FwdIt1 last1,
        FwdIt2 first2, FwdIt2 last2, Diff1 *, Diff2 *)
    {Diff1 d1 = 0;
    _Distance(first1, last1, d1);
    Diff2 d2 = 0;
    _Distance(first2, last2, d2);
    for (; d2 &lt;= d1; ++first1, --d1)
        {FwdIt1 x1 = first1;
        for (FwdIt2 x2 = first2; ; ++x1, ++x2)
            if (x2 == last2)
                return (first1);
            else if (!(*x1 == *x2))
                break; }
    return (last1); }

// TEMPLATE FUNCTION search_n
template&lt;class FwdIt1, class Diff2, class T&gt; inline
    FwdIt1 search_n(FwdIt1 first1, FwdIt1 last1, Diff2 n,
        const T&amp; val)
    {return (_Search_n(first1, last1, n,
        val, _Dist_type(first1))); }
template&lt;class FwdIt1, class Diff2, class T, class Diff1&gt; inline
    FwdIt1 _Search_n(FwdIt1 first1, FwdIt1 last1,
        Diff2 n, const T&amp; val, Diff1 *)
    {Diff1 d1 = 0;
    _Distance(first1, last1, d1);
    for (; n &lt;= d1; ++first1, --d1)
        {FwdIt1 x1 = first1;
        for (Diff2 d2 = n; ; ++x1, --d2)
            if (d2 == 0)
                return (first1);
            else if (!(*x1 == val))
                break; }
    return (last1); }

// TEMPLATE FUNCTION find_end
template&lt;class FwdIt1, class FwdIt2&gt; inline
    FwdIt1 find_end(FwdIt1 first1, FwdIt1 last1,
        FwdIt2 first2, FwdIt2 last2)
    {return (_Find_end(first1, last1, first2, last2,
        _Dist_type(first1), _Dist_type(first2))); }
template&lt;class FwdIt1, class FwdIt2,
    class Diff1, class Diff2&gt; inline
    FwdIt1 _Find_end(FwdIt1 first1, FwdIt1 last1,
        FwdIt2 first2, FwdIt2 last2, Diff1 *, Diff2 *)
    {Diff1 d1 = 0;
    _Distance(first1, last1, d1);
    Diff2 d2 = 0;
    _Distance(first2, last2, d2);
    FwdIt1 ans = last1;
    if (0 &lt; d2)
        for (; d2 &lt;= d1; ++first1, --d1)
            {FwdIt1 x1 = first1;
            for (FwdIt2 x2 = first2; ; ++x1)
                if (!(*x1 == *x2))
                    break;
                else if (++x2 == last2)
                    {ans = first1;
                    break; }}
    return (ans); }

// TEMPLATE FUNCTION find_first_of
template&lt;class
FwdIt1, class FwdIt2&gt; inline
    FwdIt1 find_first_of(FwdIt1 first1, FwdIt1 last1,
        FwdIt2 first2, FwdIt2 last2)
    {for (; first1 != last1; ++first1)
        for (FwdIt2 x2 = first2; x2 != last2; ++x2)
            if (*first1 == *x2)
                return (first1);
    return (first1); }
//End of File
</pre>
</body></html>
