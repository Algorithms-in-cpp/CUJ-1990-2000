

<HTML>
<HEAD>

<TITLE>April 1993/C++ Programming Style</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocapr.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Book Reviews</FONT></H2>

<hr><h2 align="center"><font color="#800000">C++ Programming Style<A name="00FC_006E"><A name="00FC_006E"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="00FC_0000"><A name="00FC_0000">Reviewed by Steve Halladay</font></h3><hr><blockquote><P>
<P><i><A name="00FC_0000"><A name="00FC_0000">Steve Halladay manages software development for DATASONIX in Boulder, CO. He recieved his MS in Computer Science in 1982 and has over 10 years experience developing products like CSIM and Multi-C in C and C++. You can reach Steve at DATASONIX (303) 545-1807.</i></P><P>
C++ combines the power of C with the flexibility of OOP to offer programmers a wealth of expression. Strong programmers use the semantic richness of C++ to build great programs. However, the power and flexibility of C++ makes it easier than ever for programmers to become hopelessly entangled. Even within the domain of published C++ examples, programmers demonstrate many poor practices. In his book <I>C++ Programming Style</I>, Tom Cargill insightfully shows programmers how to identify and replace poor C++ practices with stronger and more robust techniques.<P>
<h4><FONT COLOR="#000080"><A name="00FC_006F">Organization and Content<A name="00FC_006F"></FONT></h4></P>
The focus of <I>C++ Programming Style</I> is to derive rules for better C++ programming. Cargill demonstrates the rules he derives by improving code examples he has collected from various sources. Here are some typical examples of rules from the book:<P>
<UL><li>Use data members for variation in value; reserve virtual functions for variation in behavior.</li>
<li>A <I>public</I> derived class should be a specialization of its base class.</li>
<li>A constructor should put its object in a well-defined state.</li></UL>
The use of rules is reminiscent of Kernighan and Plauger's classic, <I>The Elements of Programming Style</I>. In fact, Cargill uses the format of Kernighan and Plauger's text as a pattern. Like Kernighan and Plauger's book, <I>C++ Programming Style</I> expects the reader to be fluent, but Cargill explains the details of any obscure or less obvious C++ constructs.<P>
<I>C++ Programming Style</I> has 233 pages and 11 chapters. The first chapter is a brief introduction that sets the stage for the remainder of the book. Each of the remaining chapters focuses on one specific concept. The chapter titles describe the focal point of the chapter. They include:<P>
Chapter 0. Introduction<br>
Chapter 1. Abstraction<br>
Chapter 2. Consistency<br>
Chapter 3. Unnecessary Inheritance<br>
Chapter 4. Virtual functions<br>
Chapter 5. Operator Overloading<br>
Chapter 6. Wrappers<br>
Chapter 7. Efficiency<br>
Chapter 8. A Case Study<br>
Chapter 9. Multiple Inheritance<br>
Chapter 10. Summary of Rules<P>
Each chapter takes an example class and shows how to apply the chapter's concept to improve the code. Thumbing through the book reveals that the average page is roughly 50% code example and 50% textual explanation of the example and concepts. The code examples are real, but not too long or overly complex. Cargill makes many improvements to each code example. He walks the reader carefully through each code change and explains why the change is an improvement. Along with discussing how to improve the code, Cargill shows the complete refined code to allow the user to compare easily the before and after views of the code.<P>
Cargill starts each chapter by challenging the reader to improve the chapter's code examples. He proceeds by pointing out defects and weaknesses in the code and showing how to fix them. As he fixes the various problems, he points out the rules of thumb that apply to effect the change. Each chapter ends with a brief summary, a section of rich bibliographic notes, and a set of exercises to drive home the major points of the chapter.<P>
<h4><FONT COLOR="#000080"><A name="00FC_0070">Commentary<A name="00FC_0070"></FONT></h4></P>
Cargill's insights and programming practices are of great value to novice and experienced C++ programmers alike. This is the best book I have found to help me develop my C++ programming practices.<P>
When reviewing a technical book, some considerations are: is the book's subject matter useful and relevant, is the book organized in a logical and useful manner, and is it easy to understand what the authors says. <I>C++ Programming Style</I> rates high on all three qualities. The subject matter of <I>C++ Programming Style</I> is highly relevant for today's C++ programmers. As proof of the timeliness of the subject matter, many published programming examples demonstrate the weaknesses that Cargill discusses. After reading this book, you will understand ways to improve most all of the C++ code you see.<P>
The book is organized so that each chapter is a separate lesson on a specific C++ programming concept. Chapters build upon concepts taught by previous chapters, but as Cargill touches on these concepts, he carefully and thoroughly references them so the reader can review the concepts, if necessary.<P>
Cargill's writing style is comfortable and articulate. The book requires active mental participation on the reader's behalf, but is still very easy to read and understand. In a technical book of this size with this many examples, it is not unusual to find a couple of typographical and/or technical errors. I found no errors in this book.<P>
While the subject matter, organization and implementation of this book are all excellent, the greatest strength of the book is a result of Cargill's programming experience and sound advice. Cargill does not get caught up in fashionable uses and abuses of C++. When Cargill uses or decides not to use a specific C++ programming construct, he clearly and persuasively explains his reasoning. For example, in the chapter on multiple inheritance, Cargill unmasks illegitimate uses of multiple inheritance, even though multiple inheritance is currently the rage in many C++ circles.<P>
<h4><FONT COLOR="#000080"><A name="00FC_0071">Conclusion<A name="00FC_0071"></FONT></h4></P>
About once every other year I find an especially helpful book that I read, keep, and use. This is one of those books. <I>C++ Programming Style</I> is one of the most useful books about C++ programming that I have seen. It addresses issues that are relevant to both inexperienced and experienced C++ programmers. The book has a good organization and is well written. I highly recommend this book to those interested in developing good C++ software.<P>
<B>Title</B>: <I>C++ Programming Style</I><br>
<B>Author</B>: Tom Cargill<br>
<B>Publisher</B>: Addison-Wesley<br>
One Jacob Way<br>
Reading, MA 01867<br>
<B>Price</B>: $24.75<br>
<B>ISBN</B>: 0-201-56365-7<br>
</BLOCKQUOTE>
</BODY>
</HTML>
