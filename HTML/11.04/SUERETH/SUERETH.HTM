

<HTML>
<HEAD>

<TITLE>April 1993/A Natural Language Processor</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocapr.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">A Natural Language Processor<A name="00E8_0060"><A name="00E8_0060"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="00E8_0000"><A name="00E8_0000">Russell Suereth</font></h3><hr><blockquote><P>
<P><i><A name="00E8_0000"><A name="00E8_0000">Russell Suereth has been consulting for over 12 years in the New<I></I> <I></I>York City and Boston areas. He<I></I> <I></I>started coding and designing systems on IBM mainframes and<I></I> <I></I>now also builds PC software systems. You can write to Russell at<I></I> <I></I>84 Old Denville Rd, Boonton, NJ<I></I> <I></I>07005, or call him at (201)<I></I> <I></I>334-0051.</i></P><P>
Hardware and software are sold with CD-ROMs, sound boards, and speech synthesizers. These components allow the user and the computer to interact in a human manner. This stage of user and computer interaction can be extended further with human language. The natural language processor presented in this article is a practical application of the use of human language.<P>
<h4><FONT COLOR="#000080"><A name="00E8_0061">Processing Human Language<A name="00E8_0061"></FONT></h4></P>
A natural language processor takes a human statement, analyzes it, and responds in a way that appears human. But this appearance isn't a mystery. A natural language processor performs certain processes based on the words in the input sentence. In many ways, processing human language is just another data-processing function. The input sentence is the input transaction record. The words in the sentence are fields in the input record. The dictionary is a master file of word information. The meaning is derived from a combination of information in the input sentence, the dictionary, and program code. The generated response to the sentence is the output.<P>
Some simple natural language processors process one-word commands that don't require much analysis, such as <I>find</I>,<I> up-date</I>, and <I>delete</I>. This type of processor uses a small dictionary to identify the commands. When used with a database, commands to such a processor could execute functions to find, update, and delete records. A similar processor can be connected to a remote-controlled car and used with the commands forward, reverse, and stop.<P>
Other natural language processors are more sophisticated and can process multiple input sentences. A larger dictionary contains information about the word such as whether it is a noun, a preposition, or a verb. This complex processor can analyze a sentence, identify parts of the sentence, derive meaning from the sentence, and generate an appropriate response or action. Theoretically, a complex processor may parse through a book and derive meanings and themes from the sentences. It may then generate a response based on these meanings and themes.<P>
<h4><FONT COLOR="#000080"><A name="00E8_0062">Building a Processor<A name="00E8_0062"></FONT></h4></P>
The natural language processor presented here is a miniature version of the complex processor just described. It can process several English input sentences such as <I>Jim is running in the house</I>,<I> Bill is walking on the street</I>, and <I>Sue is going to a store</I>. It can also process sentences such as <I>Where was Bill walking</I>? and generate a response that states <I>Bill was walking on the street</I>. An actual session with the processor is shown in <A href="fig1.htm">Figure 1</a>.
 This miniature processor, however, has a limited capability. It can only be used with the kinds of input sentences shown in the figure. But this capability can be increased by expanding existing routines and adding new ones. Some areas of possible expansion will be indicated throughout this article.<P>
A natural language processor must perform some amount of analysis on the sentence and the words in it. The analysis may be simple and only identify that the words are valid by matching them with the dictionary. Or, it may be complex and identify structures, phrases, meanings, and themes in the sentence. The analysis this particular processor performs identifies phrase structures and meanings.<P>
This processor uses transformational grammar to identify underlying phrase structures in the input sentence. Each word in the sentence has a type such as noun or verb. Specific combinations of these types make a certain phrase structure. For example, the words <I>a</I>,<I> the</I>, and <I>these</I> are determiners and are located right before a noun. A determiner-noun combination such as <I>the house</I> is a kind of noun phrase. Phrase structures must be identified in order to identify sentence elements such as subject, action, and place. <A href="fig2.htm">Figure 2</a>
shows some abbreviated phrase structures used in transformational grammar.<P>
There are a limited number of underlying phrase structures in transformational grammar. But there are an unlimited number of possible sentences. The relationship of structures to possible sentences is shown with the two sentences <I>Jim is running in the house</I> and <I>Sue is going to a store</I>. The underlying structure (name-auxiliary-verb-preposition-determiner-noun) is the same in these two examples, although the words make the two sentences different. The limited number of structures can be coded in the program without coding the many combinations of words that may occur.<P>
Transformational grammar also defines how words are used together or used in a certain context. For example, <I>the woman drove the car</I> is correct but <I>the table drove the car</I> is not. Words have restrictions to determine how they can be used together properly. The inanimate object <I>table</I> cannot be used with the action verb <I>drove</I>. Only humans can drive so a <I>HUMAN</I> restriction should be assigned to the verb <I>drove</I>. Additional restrictions of <I>MAN</I>,<I> WOMAN</I>,<I> PERSON</I>, and <I>TEENAGER</I> should also be assigned. The natural language processor in this article uses only one restriction labeled <I>ING</I> for words such as <I>going</I>,<I> running</I>, and <I>walking</I>. An expanded natural language processor may use many additional restrictions. One of these is verb tense so that <I>Jim was runs in the house</I> is recognized as an incorrect sentence.<P>
<h4><FONT COLOR="#000080"><A name="00E8_0063">Processing the Sentence<A name="00E8_0063"></FONT></h4></P>
<A href="list1.htm">Listing 1</a>
contains the natural language processor. The <I>main</I> routine first calls the <I>initialize</I> routine. This routine initializes some variables that are used throughout the program. Each entry in the <I>subjects</I>,<I> actions</I>, and <I>places</I> arrays is initialized. The first entry contains the subject, action, and place of the first input sentence. The second entry contains this information for the second input sentence. The arrays have 20 entries and can contain information from 20 input sentences. Next, the <I>main</I> routine opens the dictionary file named <I>diction</I>. If the dictionary opened successfully, the main control flow of the program is entered.<P>
The main control flow of the program is a <I>while</I> statement that loops once for each input sentence. Several processes occur within the <I>while</I> statement for each sentence. From a broad view, the program extracts the sentence words and matches them with the dictionary, which contains information about the word. The program loads this word information into arrays that it analyzes to determine the underlying structure of the sentence. The program identifies the subject, action, and place words in the sentence and copies these words to their arrays, which contain an entry for each input sentence. The program determines the appropriate response and then generates that response. When there are no more input sentences the program closes the dictionary and then ends.<P>
From a detailed view, the <I>while</I> loop executes until the input sentence is null, that is, when only Enter is pressed on the keyboard. First, the program calls the <I>reset_sentence</I> routine. This routine initializes variables that are used for each input sentence. <I>reset_sentence</I> initializes the <I>word_ct</I> variable, which will contain the number of words in the sentence. <I>reset_sentence</I> also initializes array entries. These arrays contain an entry for each word in the sentence, allowing up to 10 words in an input sentence. The <I>type_array</I> contains five additional entries for each word, allowing up to five possible types for the word. Examples of types are noun, preposition, and verb. The <I>main</I> routine then parses through the input sentence to extract each sentence word. For each word in the sentence <I>main</I> calls the <I>get_record</I> routine and increments <I>word_ct</I>.<P>
The <I>get_record</I> routine reads each record in the dictionary and calls the <I>match_record</I> routine to determine whether the dictionary word matches the sentence word. If they match, then the <I>types</I> variable is incremented to accommodate another type for the same word. The dictionary can contain multiple types for the same word. The word <I>jump</I>, for instance, can be a noun or a verb and would have a dictionary record for each type. When the end of the dictionary file has been reached, the <I>types</I> variable is checked to see whether the word was found. If the word wasn't found and the first character of the word is uppercase, then the word is a name. Names such as <I>Jim</I> and <I>Sue</I> aren't kept in the dictionary. The word is then copied to <I>word_array</I> for later processing. The routine can be modified to find the word faster by changing the dictionary to an indexed file. The dictionary appears in <A href="list2.htm">Listing 2</a>.
 It is the same dictionary used in the session shown in <A href="fig1.htm">Figure 1</a>.
<P>
<I>get_record</I> calls the <I>match_record</I> routine for each record in the dictionary. <I>match_record</I> compares the passed sentence word with the word in the current dictionary record. <I>match_record</I> extracts the word from the dictionary with the <I>extract_word</I> routine, then it matches the extracted dictionary word with the passed word. If the match is successful, then the type is extracted from the dictionary record and copied to <I>type_array</I>.<P>
If the type is a verb, then the root is extracted from the dictionary with the <I>extract_root</I> routine and copied to <I>root_array</I>. In a group of similar words such as <I>run</I>,<I> runs</I>,<I> ran</I>, and <I>running</I>, the word <I>run</I> is the root. Each verb in the dictionary has a root. The root will later identify a group of similar words that may be used in a generated response sentence. An expanded natural language processor that generates many different responses would find the root invaluable. For example, given the input sentence <I>Jim is running in the house</I>, a generated response may be <I>Why does Jim run in the house</I>? or <I>It appears that Jim runs often</I>. The response words <I>run</I> and <I>runs</I> can be identified in the dictionary through the common root <I>run</I>.<P>
<h4><FONT COLOR="#000080"><A name="00E8_0064">The Underlying Structure<A name="00E8_0064"></FONT></h4></P>
The <I>check_underlying</I> routine identifies underlying phrase structures in the input sentence. The code shows two specific underlying structures that can be identified. The first underlying structure is a question sentence that starts with a <I>WH</I> word. A <I>WH</I> word is a word such as <I>where</I> or <I>what</I> that starts with the letters <I>wh</I>. The next word in the input sentence must be an auxiliary which is labeled <I>AUX</I>. The next word must be a name, and the last word must be a verb. This underlying structure has the types: <I>WH-AUX-NAME-VERB</I>. It can be used for many similar sentences such as <I>Where was Bill walking</I> and <I>Where was Sue going</I>.<P>
The <I>check_underlying</I> routine calls <I>check_type</I> which compares the passed type with the possible types in <I>type_array</I>. The <I>type_array</I> variable holds the possible types for each input sentence word. If the first input sentence word has a <I>WH</I> type, then it matches the structure for the first word. Each word in the input sentence is checked to see if it matches the type in the structure. If all the input sentence words match, then the sentence has the underlying structure <I>WH-AUX-NAME-VERB</I>.<P>
Once the underlying structure is matched, the correct type is copied to <I>prime_type</I><I>s</I>. The <I>prime_types</I> array identifies that the word <I>jump</I>, for example, is a noun rather than a verb. Verbs refer to actions and nouns refer to places. This type identification will be used later to identify words in the sentence that refer to an action or a place.<P>
Next, the kind of phrase is assigned. Auxiliaries and verbs are assigned to verb phrases, determiners and nouns are assigned to noun phrases, and prepositions are assigned to prepositional phrases. Phrases are combinations of specific, adjacent word types. For instance, a noun phrase has a <I>DET-NOUN</I> combination. Phrase identification will be needed later to locate words in the sentence that identify a place. For example, a place can be identified by the prepositional phrase <I>in the house</I>. In an expanded natural language processor, phrase identification would be increased to several processes. What initially looks like a noun phrase such as <I>the house</I> may be a prepositional phrase such as <I>in the house</I> after additional sentence analysis.<P>
The second underlying structure that can be identified has the types <I>NAME-AUX-VERB-PREP-DET-NOUN</I>. This structure can be used for sentences such as <I>Bill is walking in the street</I> and <I>Sue is going to a store</I>. The two coded underlying structures will only accept input sentences such as <I>Sue is going to a store</I> and <I>Where was Sue going</I>? Other kinds of sentences can be processed when other underlying structures are coded.<P>
Additional underlying structures that can be coded are shown in <A href="fig2.htm">Figure 2</a>.
 Notice that the two coded structures aren't shown. These two structures were created only for explanatory purposes instead of the more lengthy code required for all the underlying structures. In an expanded natural language processor, the transformational grammar structures would be coded. For example, one coded structure would be <I>DET-NOUN</I> to identify a kind of noun phrase.<P>
<h4><FONT COLOR="#000080"><A name="00E8_0065">Identifying Sentence Elements<A name="00E8_0065"></FONT></h4></P>
The elements of subject, action, and place help convey the meaning in the input sentence. Subject identifies who or what the sentence is about, action identifies the activity that is performed, and place identifies where the activity occurred. In the input sentence <I>Sue is going to a store</I>, the subject is <I>Sue</I>, the action is <I>going</I>, and the place is <I>to a store</I>. Without the identification of these elements, the sentence would be merely composed of meaningless words, types, and phrases.<P>
Three routines in the processor identify the sentence elements. The <I>check_subject</I> routine looks at each word in the input sentence. If the word is a name, then <I>check_subject</I> copies the word to the <I>subjects</I> array, which contains a subject entry for each input sentence. The <I>check_action</I> routine also looks at each word in the input sentence. If the word is a verb, then <I>check_action</I> copies the root of the word to the <I>actions</I> array, which contains an action entry for each input sentence. The root will be useful when expanding the processor. It will allow the processor to determine that <I>Jim ran on the street</I> and <I>Jim runs on the track</I> are similar actions. It will also allow an appropriate form of <I>run</I> to be used in a response statement. For example, <I>Jim ran</I> should be used to describe past tense and <I>Jim runs</I> to describe present tense. The <I>check_place</I> routine looks at each word in the input sentence too. If the word is in a prepositional phrase, then <I>check_place</I> concatenates the word to the <I>places</I> array, which contains a place entry for each input sentence. Each word in the prepositional phrase refers to a place and will be concatenated to the <I>places</I> array.<P>
With this information, a simulated understanding of the sentence can be derived. The processor does this by matching the subject and action words in the current input sentence with information in previous sentences. For example, one input sentence can be <I>Jim is running in the house</I>. The processor will place <I>Jim</I> in the <I>subjects</I> array, <I>run</I> in the <I>actions</I> array, and <I>in the house</I> in the <I>places</I> array. A later input sentence can be a question that asks, <I>Where was Jim running</I>? The processor will identify <I>Jim</I> as the subject and <I>run</I> as the action. Since this is a question, the processor will also search the <I>subjects</I> array and <I>actions</I> array for the words <I>Jim</I> and <I>running</I>. When a match is found, the corresponding <I>places</I> array will be used to create a response that states, <I>Jim was running in the house</I>. If a person saw only the input sentences and responses as shown in <A href="fig1.htm">Figure 1</a>,
 then the processor would appear to have some degree of understanding. But this is only an appearance. The processor generates a canned response of words that are based on a combination of input sentence words and information in the arrays.<P>
An expanded natural language processor can contain code for a number of responses. It can also contain the routines <I>check_manner</I> and <I>check_time</I> to identify how and when something occurred. These two routines should allow prepositional phrases to identify elements of place such as <I>in my house</I> as well as elements of manner and time such as <I>in my joy</I> and <I>in the morning.</I><P>
<h4><FONT COLOR="#000080"><A name="00E8_0066">Generating a Response<A name="00E8_0066"></FONT></h4></P>
The response is the output statement from the natural language processor. After reading and processing an input sentence, the natural language processor must generate an appropriate response in acknowledgement. When a person speaks, the listener responds to let the speaker know the words were heard and understood. The response may be a simple nod of the head or several sentences that explain the listener's understanding. Two considerations that determine the kind of response are the listener's knowledge of the spoken information, and whether the spoken words were a question or a statement.<P>
The <I>make_response</I> routine uses these two considerations to generate responses to the input sentence. First, it checks to see whether the first word in the input sentence is <I>Where</I>. If it is, then the input sentence is a question. The second consideration is whether the processor has knowledge of information in the input sentence. The processor has this knowledge when the information exists in sentence elements from previous sentences. In the question <I>Where was Jim running</I>, the subject is <I>Jim</I>, and the action is <I>running</I>. Since it's a where-question, it's asking for a location associated with the words <I>Jim</I>, and <I>run</I> which is the root of running. The processor keeps information from previous sentences in the <I>subjects</I>,<I> actions</I>, and <I>places</I> arrays. The <I>places</I> array contains locations. The <I>make_response</I> routine searches the <I>subjects</I> and <I>actions</I> arrays for a match with <I>Jim</I> and <I>run</I>. When it finds a match the associated entry in the <I>places</I> array will contain the information to generate a response that states where Jim is running.<P>
When the input sentence is a where-question, and <I>make_response</I> does not find <I>Jim</I> and <I>run</I>, the processor doesn't have enough information to indicate Jim's location. The routine then moves the statement <I>I don't know</I> to the response variable. When the input sentence is not a question, it is simply a statement of fact. The routine then moves <I>Ok</I> to the response variable. Other kinds of responses can be coded and generated. For example, an array of <I>You don't say</I>,<I> Please go on</I>, and <I>Tell me more</I> statements can be coded and used as responses.<P>
When the input sentence is a where-question, and <I>make_response</I> finds <I>Jim</I> and <I>run</I>, the <I>make_response</I> routine calls the <I>make_answer</I> routine. <I>make_answer</I> creates an answer by placing the associated subject, action, and place words together in the response variable.<P>
The <I>make_answer</I> routine is passed an array index that relates the appropriate entries in the <I>subjects</I> and <I>places </I>arrays. First, the routine copies the appropriate subject to the response variable giving <I>Jim</I>. It then concatenates <I>was</I> to the variable to give <I>Jim was</I>. Next, it calls the <I>get_verb_ing</I> routine to retrieve the <I>ING</I> version of the action word. The <I>ING</I> version is a word such as <I>running</I> or <I>walking</I>. The <I>ING</I> verb must be used in the response because other selections of <I>Jim was runs</I> and <I>Jim was ran</I> are incorrect. The <I>get_verb_ing</I> routine reads each record in the dictionary file. It calls the <I>match_verb_ing</I> routine to determine whether the record contains the correct <I>ING</I> verb. The correct <I>ING</I> verb has an <I>ING</I> restriction. The correct <I>ING</I> verb also has a root that matches the action in the input sentence. If <I>match_verb_ing</I> finds the correct <I>ING</I> verb, the <I>get_verb_ing</I> routine concatenates it to the response giving <I>Jim was running</I>. Finally, the <I>make_answer</I> routine concatenates the appropriate place words to the response resulting in <I>Jim was running in the house</I>.<P>
<h4><FONT COLOR="#000080"><A name="00E8_0067">Expanding the Processor<A name="00E8_0067"></FONT></h4></P>
There are several ways this natural language processor can be expanded. The simplest would be to add words to the dictionary. Adding words would enable more words to be used in the coded, underlying structures. The number of generated responses may increase when words are added to the dictionary. More words cause more possible word combinations which allow more possible generated responses. The additional words, though, will require word restrictions that define how the words can go together properly. When expanding the processor in this way, expect to add restrictions to the dictionary and to enhance the program code that processes the restrictions.<P>
Another way to expand the processor is to consider the sentence tense. Basically, a sentence refers to something in the past, present, or future. Sentence tense affects the words used in the sentence as well as its context and meaning. In this miniature processor, the auxiliary that helps define the tense is ignored. The generated response is even hard-coded with the auxiliary <I>was</I>. The first step in this expansion would be to add a tense restriction in the dictionary for auxiliary and verb words. For example, the word <I>is</I> would have a present-tense restriction and <I>will</I> a future-tense restriction. Next, the code would have to be expanded to accommodate the several kinds of auxiliary structures. For example, auxiliaries can occur as <I>have</I>,<I> could have</I>, or <I>could have been</I>. An overall auxiliary tense would have to be derived from these individual auxiliary words. A verb with the appropriate tense can be retrieved from the dictionary after the overall auxiliary tense has been determined.<P>
Expanding this natural language processor will provide additional human language capabilities. But not all processors require the same capabilities. The capabilities that are needed for a given processor depend, in part, on the kinds of input sentences and words that are expected. This natural language processor, presented in its current form, doesn't read a book or answer questions about the book. But expanding this processor will make that capability possible.<P>
(C) 1993 by Russ Suereth.<P>

<h4><a href="../../../source/1993/apr93/suereth.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
