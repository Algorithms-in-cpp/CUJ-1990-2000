

<HTML>
<HEAD>

<TITLE>April 1993/A Portable User Interface Using curses</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocapr.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   User Interfaces</FONT></H2>

<hr><h2 align="center"><font color="#800000">A Portable User Interface Using curses<A name="00DD_005A"><A name="00DD_005A"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="00DD_0000"><A name="00DD_0000">Matt Weisfeld</font></h3><hr><blockquote><P>
<P><i><A name="00DD_0000"><A name="00DD_0000">Matt Weisfeld is currently employed by the Allen-Bradley<I></I> <I></I>Company in Highland Heights, Ohio. He responsible for<I></I> <I></I>the design and development of test software on<I></I> <I></I>VAX/VMS, UNIX, DOS, and other platforms. Matt is<I></I> <I></I>currently working on a book entitled Building and Testing Portable Libraries in C, to be published by QED in 1993.<I></I> <I></I>He can be reached on Compuserve at [71620,2171].</i></P><P>
The topics of portability and user interfaces are usually not mentioned in the same conversation, because the hardware-dependent nature of terminal devices makes user interfaces notoriously difficult to port. However, you don't necessarily need to write a separate user interface for each platform, even when you need maximum portability. This article presents a library of routines that allows a programmer to create a portable, text-based user interface using <I>curses</I>.<P>
<I>curses</I>, the screen-handling package available as part of the C package on VMS and most flavors of UNIX or as shareware, allows you to update screens efficiently. <I>curscr</I> keeps an image of the current screen. You change this image by changing the standard screen, <I>stdscr</I>, or by creating a new screen. <I>refresh</I> or <I>wrefresh</I> change <I>curscr</I> to match <I>stdscr</I>.<P>
<h4><FONT COLOR="#000080"><A name="00DD_005B">The User Interface<A name="00DD_005B"></FONT></h4></P>
The example user interface discussed here can be ported to VAX/VMS, MS-DOS/BORLAND C, Hewlett-Packard/HPUX, and SUN/GNU with revision. The display consists of a main window, a menubar, and a dialog box (see <A href="fig1.htm">Figure 1</a>)
.<P>
The main window occupies the entire screen and is the backdrop for all other constructs. At the top of the main window, a single-line menubar presents the user with the available program options. The user chooses an option either by entering the first letter of the option or by using the arrow and return keys. Choosing one of these options will activate a pulldown menu containing further options. The dialog box, used to print informational messages and accept additional user input, resides at the bottom of the main window.<P>
Library functions to handle these user interface constructs, and other specific tasks, simplify the process of building screen applications. The separate library files can be linked into specific user applications.<P>
There are three major reasons for using <I>curses</I>: portability, availability, and usability. Even if <I>curses</I> is inappropriate for a specific application, you can apply the methods presented here for creating a menubar and pulldown menus to any user interface. The libraries can be treated as shells, with the <I>curses</I> commands replaced by other user interface commands. The appropriate <I>#ifdefs</I> make the libraries portable to multiple platforms.<P>
<h4><FONT COLOR="#000080"><A name="00DD_005C">Primary <B><I>curses</I></B> Screen Structures<A name="00DD_005C"></FONT></h4></P>
<A href="list1.htm">Listing 1</a>
contains a simple <I>curses</I> application. Just as C defines <I>stdout</I>, <I>stdin</I>, and <I>stderr</I> for input and output, <I>curses</I> keeps a memory representation of the screen in <I>stdscr</I>. All window operations affect only this memory representation. To change the screen itself, kept in <I>curscr</I>, you execute <I>refresh</I> or <I>wrefresh</I> &#151; even when deleting a window.<P>
<I>WINDOW</I>, a data structure in <I>curses.h</I> required by all <I>curses </I>applications, contains information such as window location and size. Each window created must correspond to a pointer of this structure type. All <I>curses</I> programs create <I>stdscr</I> by default. Other <I>curses</I> constructs must be explicitly created. In most cases, <I>curses</I> treats <I>stdscr</I> differently from other windows. For example, to clear a window, <I>curses</I> performs the <I>wclear(win</I>) command, but to clear <I>stdscr, curses</I> uses the <I>clear</I> command, with no parameters.<P>
<h4><FONT COLOR="#000080"><A name="00DD_005D">Creating a Popup Window<A name="00DD_005D"></FONT></h4></P>
Since most operations for any user interface involve windows, I built a library function called <I>popup</I> to create a popup window. (<A href="list3.htm">Listing 3</a>
contains <I>popup</I> and all other library code presented in this article.) To create a window that entirely covers <I>stdscr</I>, I call <I>popup</I> with <I>MAX_ROWS</I> and <I>MAX_COLUMNS</I>.<P>
<pre>WINDOW *mainwin;

mainwin = popup (MAX_ROWS, MAX_COLUMNS, 0,0);</pre>
The constants <I>MAX_ROWS</I> and <I>MAX_COLUMNS</I> represent the standard screen size. The header file <I>menu.h</I> (<A href="list2.htm">Listing 2</a>)
 defines all the constants and structures for this user interface.<P>
There are three popup windows in this application: the menubar, the dialog box, and a window used for pulldown menus. These are global to all functions and thus are declared as <I>extern</I> in most of the files.<P>
Color presents a special problem when writing a portable routine for creating a popup window. Since PC curses has color capabilities, whereas VMS and UNIX do not, <I>ifdefs</I> are used to take advantage of this feature. The PC <I>curses</I> command <I>wattrset</I> controls color. The colors representing the foreground and background are <I>ORed</I> together with:<P>
<pre>wattrset(mainwin, F_RED | B_BLACK);</pre>
PC <I>curs es</I> also has many more box characters to choose from. Many different effects can be obtained by using colors and box characters on the PC. However, if you desire a simple border around a window similar to VMS and UNIX, simply set the background to black and execute the box command on all platforms.<P>
<h4><FONT COLOR="#000080"><A name="00DD_005E">Special Keyboard Input<A name="00DD_005E"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="00DD_005F">Accepting Single Keystrokes<A name="00DD_005F"></FONT></h4></P>
The example application uses the arrow keys. This causes a portability problem when creating a windowed <I>curses</I> application. <I>wgetch</I> gets characters from a window. However, <I>curses</I> buffers this input and echoes it to the screen. To prevent line buffering and echo, making the program accept one keystroke at a time, you must call <I>crmode</I> to set the <I>cbreak</I> mode and <I>noecho</I> to unset the <I>echo</I> mode.<P>
Using the arrow keys (from the keypad) on MS-DOS is very straightforward. Either the <I>getch</I> or the <I>wgetch</I> commands will return the necessary key code. (For all codes see <A href="list2.htm">Listing 2</a>.
)<P>
Obtaining non-printable characters with VMS requires the use of low-level Screen Management (SMG) commands. (See the VMS SMG manual for a complete description.) The two SMG commands needed here are <I>CREATE_VIRTUAL_KEYBOARD</I>, which activates the program for keyboard input, and <I>READ_KEYSTROKE</I>, which returns a keystroke. (VMS returns a <I>short</I>.)<P>
<h4><FONT COLOR="#000080"><A name="00DD_0060">Interpreting Escape Sequences<A name="00DD_0060"></FONT></h4></P>
On UNIX systems, use of the arrow keys, escape key, and return key presents another problem. Both the HP and SUN systems return keystrokes from the keypad with escape sequences. Some systems, such as the HP, include a function called <I>keypad</I>. This function activates the keypad and returns the proper key code directly, saving the programmer from having to interpret the escape sequences.<P>
When the <I>keypad</I> function is not available, the method for dealing with the escape sequences depends on the system. For example, on the SUN system, entering a keypad character will return an escape sequence in three parts. When the first <I>getch</I> is recognized as an escape, two more <I>getch</I> commands must be called in succession. The third character contains the code needed.<P>
The character codes used in these libraries are defined in the file <I>menu.h</I> as: <I>UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW, ESCAPE</I>, and <I>RETURN</I>.<P>
<h4><FONT COLOR="#000080"><A name="00DD_0061">Creating a Menubar<A name="00DD_0061"></FONT></h4></P>
In all environments, the same structure defines a menubar:<P>
<pre>typedef struct mbar {
   char string[80];
   char letter;
   int pos;
} MENUBAR;</pre>
The first field holds the actual string that represents the particular option. For example, if one of the options across the top relates to printing, then the string <I>print</I> is a logical choice. The second field is the letter that invokes the option from the keyboard. The final field, called <I>pos</I>, holds the location of the string within the menubar.<P>
This example uses the code<P>
<pre>#define TCHOICES 3

MENUBAR menubar[TCHOICES] = {
   "file", 'f', O,
   "edit", 'e', O,
   "options", 'o', O,
};</pre>
to create a menubar (see <A href="list4.htm">Listing 4</a>)
. This declaration creates a menubar with three different options, <I>file, edit</I>, and <I>options</I>, invoked by entering an <I>f, e</I>, or <I>o</I> respectively. The positions are initially set to zero, and calculated, when needed, by the menubar routine. All the libraries use the constant <I>TCHOICES</I> to identify the number of options available. To add or delete options, adjust <I>TCHOICES</I> and add or delete the appropriate number of lines in the menubar structure.<P>
The routine <I>topbar</I> generates the menubar window (the window only, not its contents). In most cases, windows are created as separate entities. But since the menubar is a permanent part of <I>stdscr</I>, I made the menubar a subwindow of <I>stdscr</I> to improve efficiency. This technique allows you to refresh just <I>stdscr</I>, instead of refreshing both <I>stdscr</I> and the menubar. The code<P>
<pre>WINDOW *swin;

if ((swin = subwin(win,3,(win-&gt;MAXX)-4,(win-&gt;BEGY)+1,
         (win-&gt;BEGX)+2)) == NULL)
   clean_up ();</pre>
creates the menubar. The parameter list for the <I>subwin</I> command includes the window pointer of the parent. <I>curses</I> uses this pointer to calculate where to position the menubar (see <I>curses.h</I>). Beware not to use a pointer until you create the actual window. Until a <I>newwin</I> or <I>subwin</I> command is invoked, the pointer is null and passing a null pointer to a function may cause unexpected results.<P>
Even though the <I>curses</I> implementations for all the platforms is highly consistent, the variable names vary across different environments. (To position the menubar, you need the <I>WINDOW</I> structure coordinates of the parent window.) VMS uses <I>_beg_x</I> and <I>beg_y</I> while MS-DOS and UNIX use <I>beg_x</I> and <I>beg_y</I>. To make the code more portable, my code uses macros, such as <I>BEGX</I>.<P>
<h4><FONT COLOR="#000080"><A name="00DD_0062">Displaying a Menu<A name="00DD_0062"></FONT></h4></P>
The function <I>do_menubar</I> performs all the tasks associated with selecting an option from a menubar. First, <I>do_menubar</I> prints the string in the window. The sample menubar includes three strings: <I>file, edit</I>, and <I>options</I>. You should space these three strings appropriately so that they fill the top of the screen evenly. This application uses a function called <I>strmenu</I> for spacing the strings. <I>strmenu</I> takes the menubar structure and the width of the parent window as parameters.<P>
<I>strmenu</I> proceeds in three stages. First, <I>strmenu</I> calculates the number of spaces allocated to each string by dividing the width of the parent window by the number of strings in the menubar (in this case three). Next, <I>strmenu</I> enters a loop that builds the menubar by copying each string and padding it with the proper number of spaces, highlighting the current choice (initially the one on the left) in upper case. Finally, <I>strmenu</I> returns the string pointer to the calling function, and prints the menubar using the <I>mvwaddstr</I> function.<P>
<h4><FONT COLOR="#000080"><A name="00DD_0063">Detecting a Selection<A name="00DD_0063"></FONT></h4></P>
Once the menubar is in place, the user must be able to select one of the options. The user will type either the first character of the option or the return key to activate the highlighted option. By typing the left and right arrow keys, the user can highlight different options. After receiving a keystroke, a <I>switch</I> statement controls the action. If the program encounters an arrow, it moves the highlight either to the left or right (with allowances for wrap-around). An escape terminates the program, while a return breaks out of the loop and invokes the option currently highlighted. By default the program sends all other sequences back to the calling program as a character code.<P>
<h4><FONT COLOR="#000080"><A name="00DD_0064">Creating a Pulldown Menu<A name="00DD_0064"></FONT></h4></P>
A pulldown menu is basically a popup window, except the pulldown routine must be able to adjust for windows of different sizes. To define the choices contained in each pulldown menu, I created the structure <I>CHOICES</I>:<P>
<pre>typedef struct choices {
   char string[20];
   char letter;
   int (*funcptr)();
} CHOICES;</pre>
As with the menubar structure, <I>CHOICES</I> contains the string that represents the option and the letter that invokes it. The third field, a function pointer, represents the function that will be executed when the option is chosen. The prototypes for these functions are in <A href="list5.htm">Listing 5</a>.
<P>
For example, suppose that invoking the menubar option file produces a pulldown menu with the options <I>open</I>, <I>close</I>, and <I>exit</I>. The application initializes the structure<P>
<pre>CHOICES choices1[3] = {
   "open ", 'o', c_open,
   "close", 'c', c_close,
   "exit ", 'e', c_exit,
};</pre>
Thus, if the user chooses <I>open</I>, the application calls function <I>c_open</I>. (I used the <I>c_</I> prefix to avoid possible function name conflicts.)<P>
In this example application, there are three options (see <A href="list4.htm">Listing 4</a>)
. They are all tied together with<P>
<pre>typedef struct pmenu {
   int num;
   int maxlength;
   CHOICES *ptr;
} PULLDOWN;</pre>
The structure <I>PULLDOWN</I> contains three pieces of information. The first field represents the number of options in the pulldown. The second indicates the maximum string length. The option <I>close</I> has five letters, and thus 5 is the maximum length. When creating the pulldown, the menu should have equal proportions. Thus, the shorter strings are padded with spaces to match that of the longest. The third field is the pointer to the structure that hold the choice information for this particular menu. The initialization of the entire <I>PULLDOWN</I> structure is<P>
<pre>PULLDOWN pullmenu[3] = {
   3, 5, choices1,
   4, 6, choices2,
   3, 7, choices3,
};</pre>
To create a pulldown, the application calls the function <I>do_pulldown</I>. Choosing an option from the pulldown menu works like the menubar, except that <I>do_pulldown</I> uses <I>UP_ARROW</I> and <I>DOWN_ARROW</I>.<P>
Unlike the menubar, the pulldown menu must be erased after an option has been chosen, and whatever was underneath must be restored. The command <I>touchwin</I> performs this task. For this example, the pulldown window blocks both the menubar and <I>stdscr</I>, so both must be restored.<P>
<h4><FONT COLOR="#000080"><A name="00DD_0065">Tying It All Together<A name="00DD_0065"></FONT></h4></P>
The program in <A href="list4.htm">Listing 4</a>
demonstrates the advantages of building these libraries. The actual application requires only a dozen or so lines of code. The program consists of two basic parts: building the screen and creating the menus.<P>
The functions that the menu choices invoke are simply shells. (The programmer would substitute the appropriate functionality.) The only functions that perform any tasks are the version function, which displays the current program <I>version</I>, and the <I>exit</I> function, which terminates the application (<A href="list6.htm">Listing 6</a>)
.<P>
To run the application, compile <I>menu.c, uilibs.c</I>, and <I>funcs.c</I> with the appropriate defines for the host platform. Then link them together with the <I>curses</I> library provided by the package. When the user starts the program, the menu screen will appear.<P>
<h4><FONT COLOR="#000080"><A name="00DD_0066">Conclusion<A name="00DD_0066"></FONT></h4></P>
The <I>curses</I> interface has its limitations. A commercial package written in <I>curses</I> will most likely not show up on the store shelves. However, if you need a reasonably efficient and portable method of creating user interfaces, <I>curses</I> is an option.<P>

<h4><a href="../../../source/1993/apr93/weisfeld.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
