

<HTML>
<HEAD>

<TITLE>April 1993/Questions & Answers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocapr.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Questions &amp; Answers<A name="00F0_0068"><A name="00F0_0068"></font></h2><P>
<h3 align="center"><A name="00F0_0000"><A name="00F0_0000">Message Catalogs</h3><P>
<h3 align="center"><font color="#800000">Kenneth Pugh</font></h3><hr><blockquote><P>
<P><i><A name="00F0_0000"><A name="00F0_0000">Kenneth Pugh, a principal in Pugh-Killeen Associates, teaches C and C++ language courses for corporations. He is the author of C Language for Programmers and All On C, and was a member on the ANSI C committee. He also does custom C programming for communications, graphics, image databases, and hypertext. His address is 4201 University Dr., Suite 102, Durham, NC 27707. You may fax questions for Ken to (919) 489-5239. Ken also receives email at kpugh@dukemvs.ac.duke.edu (Internet) and on Compuserve 70125,1142.</i></P><P>
<B>Q</B><P>
I was reading your column entitled, "Linked Lists, Strings, and Internationalization," in the January 1993 issue of <I>The C Users Journal</I>, and was particularly interested in the section about the X/Open message catalog. Yours is the first description of the layout of the file I've seen.<P>
We have Sun workstations here and are planning on using a message file scheme, but Sun has no documentation about the format of a message file, despite supporting <I>gencat, catopen</I>, etc. Where can I find information about the format of message files (the text file that we'd create, not the <I>.cat</I> file), preferably with examples?<P>
I enjoyed the article &#151; it was very interesting and well written. I also agree with your comments about Gimpel's PC-lint/Flexelint &#151; I swear by it. Many thanks.<P>
Alec Sharp<br>
Louisville, CO<P>
<B>A</B><P>
The information I have on message catalogs comes from my teaching OSF UNIX. The DEC documentation for this system explains precisely the organization of these message catalogs. I think similar information should be available from X/Open, since that is where the interface originated. I think it would be ironic if you had to purchase the documentation for a Sun UNIX feature from OSF.<P>
<h4><FONT COLOR="#000080"><A name="00F0_0069">Strings Again<A name="00F0_0069"></FONT></h4></P>
<B>Q</B><P>
I am writing in reference to your comments on how to handle strings in the August 1992 issue of <I>The C Users Journal</I> (page 132). The presented approach is quite acceptable, but there is something I do not like. Whenever the programmer introduces a new string, he or she must do three things &#151; add the string to the <I>array (char *string[]=..)</I>; define the corresponding constant (<I>#define INIT_STR 1</I>); and use it (<I>printf(get_string(INIT_STR));</I>). I think the programmer should only do two things: define the string and use it. For example:<P>
<pre>    defstr ( InitStr, "Init String" )
    ...
    printf (InitStr); or
     printf (getstr(InitStr));</pre>
Of course, having multiple identical strings in code is not acceptable.<P>
One possible solution (tested with Borland C++ compiler) is shown in <A href="list1.htm">Listing 1</a>.
 The file <I>STRDEF.H</I> contains the string definitions. File <I>STRDEMO.C</I> illustrates how the string definitions are used. There are two additional files: <I>STRHNDL.H</I> and <I>STRHNDL.C</I>, but being written once, they do not need to be changed any more. All the strings appear as global data in file <I>STRHNDL.C</I>. The file <I>STRHNDL.H</I> provides the necessary <I>extern</I> declarations making the strings accessible. The same approach could be easily adapted to handle multilingual messages. This is illustrated in <A href="list2.htm">Listing 2</a>.
<P>
This solution is far from being perfect &#151; at least, because of using a lot of global data. I am sure there are better solutions. Perhaps you could suggest one. Also, I am interested in your opinion about using an object-oriented approach to the problem.<P>
Stefan Ganev<br>
Bourgas, Bulgaria<P>
<B>A</B><P>
I agree with you that having to create a <I>#define INIT_STR</I> and to put the string into an array seems like double work. There is always the potential for a mismatch between the value of <I>INIT_STR</I> and its position in the array.<P>
Your macro approach helps eliminate this problem. I would suggest a minor change in your second example. If you concatenate the name of the array in your <I>#define defstr(x,y,z)</I> macro, the name space of the character arrays would be practically guaranteed to not conflict with any other external names. The replacement might look something like:<P>
<pre>       char *STR__##strx[] = { y, z };</pre>
The same change would be made in the other places that you refer to the array.<P>
I explained the X/Open alternative in the January issue. In that system, you can use identifying names with the strings and it will produce a header file with those names <I>#defined</I>. That eliminates the mismatch and extra coding.<P>
You asked about an object-oriented approach to this problem. A goal of my design would be to make the calling program not aware of where or how the strings are actually stored. That is, the calling module should not have to be recompiled if just the strings are changed. Preferably it should not have to be relinked, as only resource values would have changed. Your approach meets most of these criteria, except for the necessity to relink.<P>
I would define a <I>StringResource</I> object as:<P>
<pre>    class StringResource
        {
    public:
        StringResource(Language_Identifier lid);
        String get_string(String_Identifier sid);
        //...
        }</pre>
A header file would contain the values for your particular application. This could be generated automatically from a text file that looked like:<P>
<pre>INITIAL_STRING "This is the first string"
ANOTHER_STRING "This is another string"</pre>
As an example, the header file <I>my_prog.h</I> might look like:<P>
<pre>    enum Language_Identifier {ENGLISH};

    enum String_Identifier {
        INITIAL_STRING,
        ANOTHER_STRING,
        //...
        };</pre>
A calling program would look something like <A href="list3.htm">Listing 3</a>.
 I used the stream class for input and output and assumed that the <I>operator &lt;&lt;</I> was overloaded for <I>Strings</I>. If your <I>String</I> class had a conversion to <I>char</I> *, you could use the Standard C library functions, such as <I>puts(sr.get_string(INITIAL_STRING))</I>. I would not define such a conversion for the <I>StringResource</I> class.<P>
Whether you decide to compile the string file into the code or keep it in some external file is completely transparent to the calling program. The <I>get_string</I> function returns a <I>String</I> object that contains the requested characters in either case.<P>
The <I>StringResource</I> example here assumes that you only require one set of strings per program. That is the typical case. Going to multiple sets complicates the picture. Readers might send in their suggestions for what a multi-set design would look like.<P>
<h4><FONT COLOR="#000080"><A name="00F0_006A">Truncating a File<A name="00F0_006A"></FONT></h4></P>
In the January 1993 issue of <I>The C Users Journal</I> in the question titled "Truncating a File in Place and Portability," on page 106, you say "For the MS-DOS version, the functions would perform the operations you indicate... while the MS-DOS version may fail if there is insufficient disk space." The operations indicated were copying the file and deleting and renaming.<P>
I thought you should know that both the Microsoft C compiler and the Borland compiler offer a file truncate function, <I>chsize</I> (or _<I>chsize</I>) which can truncate a file in place, just as the UNIX approach may. Further, this is a single DOS call. It's quick and has no disk free-space problem. For those without an equivalent function in their runtime libraries, the trick in MS-DOS is simply to write to an open file handle with a count of zero.<P>
Anyway, your main point (about writing a single function that is portable, whose implementation uses OS dependent code) is right on. I just wanted to point out something many long-time DOS programmers don't realize; a file may be easily truncated or extended, without copying. Regards, and keep up the good work.<P>
Dave Angel<P>
<B>A</B><P>
Thanks for your comments. Truncating files is not something I do often. In fact, the only time I can ever remember doing it is demonstrating how to use the function on UNIX.<P>
I just like to expand a bit on the main area of discussion. It all boils down to what you consider your standard interface to the environment in which you program. This standard interface consists of the set of functions which you can expect to have on any system. The Standard C library is a good starting place for such a set of functions. Actually when using C++, I hide even the standard C functions from use in my programs. I also hide the <I>iostream</I> class, even though its interface is becoming more standard.<P>
I basically have created a set of classes and methods for each class which are as primitive as possible. The member functions are easily written in terms of Standard C and operating system functions.<P>
This permits me to easily port my code to any environment which may not support either the Standard C library or the C++ streams library. The functions are simple enough to implement for whatever the system supports.<P>
The class for <I>File</I> looks like <A href="list4.htm">Listing 4</a>.
 I have not reproduced all the classes and their implementation in their entirety for space and copyright reasons.<P>
The <I>File::open, File::close, File::read</I>, and <I>File::write</I> member functions call their respective operating system functions. On UNIX and MS-DOS, these are the <I>open, close, read</I>, and <I>write</I> functions with the appropriate parameters supplied.<P>
The Standard does support unbuffered reading and writing using <I>fopen and setvbuf</I> calls. To run on a system that only supports those calls one needs only to change the way <I>Internal_File::open</I> works and to alter the appropriate calls in each of the other member functions.<P>
This class can also eliminate the problems of the mode (text or binary) of the file opened by <I>open</I>. One vendor's implementation of using a global variable for the type of file has caused me grief in the past.<P>
The testing program for this class has code that looks like <A href="list5.htm">Listing 5</a>.
 You may wonder where the number of bytes read or written is being kept. It is part of <I>Internal_ByteArray</I>.<P>
Now stout-hearted C programmers will probably be upset at my use of a separate function to return the error code for an operation. It actually gets returned from <I>Internal_File</I> members. The <I>Internal_File::error</I> is an inline function that simply returns the value of the last error set. I could have set up a variable as:<P>
<pre>       Internal_File::Error error;</pre>
and programmed as:<P>
<pre>       if ( (error = new_file.write(buffer) )
           != Internal_File::No_error)
           {
           // Do something about it
           }</pre>
But I didn't.<P>

<h4><a href="../../../source/1993/apr93/pugh.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
