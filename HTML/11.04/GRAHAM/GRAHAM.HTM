

<HTML>
<HEAD>

<TITLE>April 1993/Mapping Functions for Repetitive Structures</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocapr.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">Mapping Functions for Repetitive Structures<A name="00E3_005E"><A name="00E3_005E"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="00E3_0000"><A name="00E3_0000">Steven K. Graham</font></h3><hr><blockquote><P>
<P><i><A name="00E3_0000"><A name="00E3_0000">Steven K. Graham has worked for Hewlett-Packard, served on the Faculty at UMKC, and is currently a Senior Engineer with CSI.</i></P><P>
Higher-order functions take other functions as arguments. They are usually used to apply a function to some repetitive data object, such as a list or a tree. Such use of higher-order functions is referred to as <I>mapping</I>, and the higher-order functions are called <I>mapping functions</I>. The key benefit of higher-order functions is the extra layer of abstraction they introduce. In essence, mapping functions allow you to create custom control structures that can be applied to data structures routinely used in a particular environment. Mapping functions do not simplify code intended for a single use or a single purpose. Only when a data object is processed repeatedly in similar ways &#151;where the control flow is the same, but the functions performed vary &#151; is a mapping function valuable. As an example, consider the general case of processing records in a particular kind of data file. This can be regarded as mapping the processing function onto the records of the file. A mapping function could be built that takes any given record processing function and applies it to all the records of a file.<P>
<h4><FONT COLOR="#000080"><A name="00E3_005F">Uses for Mapping Functions<A name="00E3_005F"></FONT></h4></P>
Despite sparse use in traditional programming languages,<B> </B>mapping functions are used in many familiar contexts. In<B> </B>mathematics, a higher-order function is used to express<B> </B>iterated sums:<P>
<IMG SRC="equat1.gif"><P>
The summation applies the function <I>F</I> to each integer from 1<B> </B>to <I>n</I>, and accumulates the sum. If <I>n</I> were 5 and <I>F(x) = x</I>  <I>x</I>,<B> </B>then <I>sum</I> = 11 + 22 + 33 + 44 + 55. It can be argued<B> </B>that a large part of the success of mathematics is due to<B> </B>developing effective language and notations to express<B> </B>complex ideas. In UNIX, the notion of higher-order commands<B> </B>has appeared in commands that take other commands as<B> </B>arguments and control their application. <I>sed</I> is a good example of<B> </B>this.<P>
Some languages provide convenient methods for expressing<B> </B>higher-order functions. Lisp and its dialects such as Scheme,<B> </B>provide functions as <I>first class objects</I><I><B></I></B> &#151; functions can be passed<B> </B>as arguments, returned as values, assigned as array elements<B> </B>and so on. So Lisp programmers commonly use mapping<B> </B>functions and are accustomed to exploiting their power. Other<B> </B>languages restrict the use of functions to varying degrees, but<B> </B>higher-order functions are possible in languages readily<B> </B>available, such as C. Because of C's (relatively) strong typing,<B> </B>mapping functions force the processing functions they apply to<B> </B>return a particular type, and it is necessary to coerce types to<B> </B>pass a function argument to a mapping function.<P>
<h4><FONT COLOR="#000080"><A name="00E3_0060">Example Programs<A name="00E3_0060"></FONT></h4></P>
<A href="list1.htm">Listing 1</a>
illustrates a C version of summation. It defines two mapping functions, <I>sum</I> and <I>dsum</I>, and three processing functions which are mapped onto a range of integers, <I>pi</I>, <I>id</I>, and <I>sq</I>. Note that <I>sum</I> and <I>dsum</I> are basically <I>for</I> loops that process the integers from <I>a</I> to <I>b</I>, at each step accumulating the result of applying the function parameter <I>term</I> to the current value of <I>i</I>. Because of C's typing, you need two versions to accommodate different return types despite the identical control structures, so <I>dsum</I> is used to accumulate a floating-point <I>sum</I>. One of the processing functions, <I>id</I>, is particularly noteworthy, because it is only in the context of higher-order functions that a programmer ever needs an identity function that does nothing but return its argument value. However, <I>id</I> is needed for <I>sum</I> to simply add the integers from <I>a</I> to <I>b</I>.<P>
The call to <I>dsum</I>, approximates p using a partial sum of an infinite series. This is drawn from the identity that<P>
<IMG SRC="equat2.gif"><P>
which can be written as<P>
<IMG SRC="equat3.gif"><P>
with the function <I>pi</I> (in <A href="list1.htm">Listing 1</a>)
 providing the value for each term, given the value for <I>i</I>.<P>
Higher-order functions become mapping functions when applied to repeating structures, such as lists or trees. A list is comprised of an item and a pointer to the rest of the list (which is also a list). A tree is comprised of a node, with subtrees as children. This mapping approach can be applied to the directory tree of a UNIX file system (see <A href="list2.htm">Listing 2</a>)
. The function <I>mapdir</I> is a recursive function that maps its argument <I>filefn</I> onto all the files in the hierarchy below a commandline directory argument.<P>
This example applies the function <I>suidfile</I> that prints out the name of files that have the <I>setuid</I> bit set. The <I>setuid</I> bit indicates that when the file is executed, it will change its effective user ID to the owner of the file when it is run. Programs that set the user ID can lead to gaping holes in system security. (Sun's <I>Programmer's Guide to Security Features</I> comments on its use, "1. Don't do it unless absolutely necessary.") Using <I>mapdir</I>, it is simple to search an entire directory structure for programs that set the user ID. This example could be part of a suite of programs designed to explore the file system for potential security problems. A more elaborate system could be devised to check other file attributes, such as comparing file permissions to the permissions of the directory that contains them. The real power of this approach<B> </B>is that the <I>mapdir</I> function is<B> </B>independent of any particular use. Simply by<B> </B>calling <I>mapdir</I> with the function<B> </B><I>printfile</I> (in <A href="list3.htm">Listing 3</a>)
 as an<B> </B>argument, you have a program to display<B> </B>directories recursively. By creating<B> </B>routines that check for unusually large<B> </B>files, for unusually small files, or for<B> </B>large numbers of files within a single<B> </B>directory, you can build tools to help<B> </B>manage disk usage.<P>
The functions and structures used in <I>mapdir</I> are drawn from the standard include files, <I>dirent.h, sys/dirent.h</I> and <I>sys/stat.h</I><I>.</I> These examples were developed on a Sun SPARCstation using SunOS 4.1. <I>dirent.h</I> provides the <I>DIR struct</I>, along with the functions <I>opendir, closedir</I>, and <I>readdir</I> to manipulate it. <I>sys/dirent.h</I> provides the <I>struct dirent</I>, for directory entries:<P>
<pre>struct dirent {
    off_t       d_off;
/* offset of next disk dir entry */
    unsigned long  d_fileno;
/* file number of entry */
    unsigned short d_reclen;
/* length of this record */
    unsigned short d_namlen;
/* length of string in d_name */
    char       d_name[255+1];
/* name (up to MAXNAMLEN + 1) */
};</pre>
For the example programs, the field <I>d_name</I>, a string that specifies the file name for a particular directory entry, was the only field used. <I>stat.h</I> provides the following structure to store information about files:<P>
<pre>struct stat {
    dev_t  st_dev;
/* device file resides on */
    ino_t  st_ino;
/* file serial number */
    mode_t  st_mode;
/* file mode */
    short  st_nlink;
/* # of hard links to file */
    uid_t  st_uid;
/* owner's user ID */
    gid_t  st_gid;
/* owner's group ID */
    dev_t  st_rdev;
/* dev identifier for *
/* dev identifier for *
 * special files */
    off_t  st_size;
/* file size in bytes *
 * - (off_t is a long) */
    time_t st_atime;
/* last access time */
    int   st_spare1;
    time_t st_mtime;
/* last modify time */
    int    st_spare2;
    time_t  st_ctime;
/* last status change time */
    int   st_spare3;
    long  st_blksize;
/* preferred block size */
    long  st_blocks;
/* # of blocks allocated */
    long  st_spare4[2];
};</pre>
The example programs use the <I>st_mode</I> field, as well as some of the macros and constants defined in <I>stat.h.</I> In particular, the macros <I>S_ISDIR</I>, <I>S_ISLNK</I>, and the bit mask <I>S_ISUID</I> are used to examine the <I>st_mode</I> field, which records file types and permissions. <I>stat.h</I> also declares the <I>stat</I> function that reads the file information. <I>stat</I> has the declaration<P>
<pre>int stat(path, buf)
char *path;
struct stat *buf;</pre>
The <I>mapdir</I> program can be made more general. In <A href="list3.htm">Listing 3</a>,
 <I>mapif.c</I>, the <I>mapdir</I> function has been modified to accept three functions as arguments: a predicate function, a <I>then</I> function and an <I>else</I> function. The purpose is to not only map these functions across the file system, but also provide alternative actions depending on the results of the predicate function. The example uses a function that tests for the <I>setuid</I> bit, a <I>printfile</I> function, and a "do nothing" function, to reproduce the behavior of the earlier example from <A href="list2.htm">Listing 2</a>.
<P>
<h4><FONT COLOR="#000080"><A name="00E3_0061">Variations to Mapping Functions<A name="00E3_0061"></FONT></h4></P>
In these example, the functions that are mapped rely on a single filename argument. This can be varied. A file descriptor could be passed. The complete path could be passed in addition to the filename. Other parameters might specify the level in the file hierarchy or information about the directory containing the file. Global variables or additional parameters could be set using command-line arguments and used to provide thresholds for searching for unusually large or small files, or perhaps a search string for building a <I>grep</I>-like function out of <I>mapdir</I> and a routine that searches a single file. Besides operating on files within the file system, a mapping function could be written that processes the directories rather than (or in addition to) processing the files, for example, counting the number of files in each directory.<P>
The file system isn't the only regularly structured data in a UNIX system. A simple procedure based on the mapping notion could be written that applies a function to each line within a file. Using such a routine, functions could operate on the <I>passwd</I> file, checking for users with no password, or checking directory protections on the home directories of each user. A function could be written to process every user's <I>.cshrc</I> file, perhaps to incorporate changes uniformly.<P>
UNIX, perhaps more than any other system, is characterized by an abundance of tools. As I mentioned at the outset, many of these tools incorporate the notion of function or command arguments. The <I>find</I> command, with an - <I>exec</I> parameter, processes the file system in much the way that <I>mapdir</I> does. So why bother with <I>mapdir</I>? First, the key point is not the particular example, but the general idea: whenever possible, abstract general behaviors over regular structures into mapping functions. Second, tools built in C rather than as shell scripts or command invocations are more flexible. Their input and output can be varied; alternatives can be handled; and programs can be tailored to particular uses. Finally, the performance of different approaches will vary. In some cases, a program may be more efficient than a command with respect to some essential resources.<P>
 (C) 1993 by Steven K. Graham<P>

<h4><a href="../../../source/1993/apr93/graham.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
