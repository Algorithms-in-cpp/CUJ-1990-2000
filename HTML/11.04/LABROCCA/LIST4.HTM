<HTML><HEAD>
<TITLE>April 1993/Mixed Numbers in C/Listing 4</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 4 fraction.c - <I> functions for manipulating mixed_ts</I></A></h4>
<pre>/* fraction.c */
/* Copyright 1992 by P.J. LaBrocca */

#include &lt;stdio.h&gt;
#include "mixed.h"

mixed_t *mix_init( mixed_t *m, Integer w, Integer n, Integer d )
{
    m-&gt;sign  = POSITIVE;
    m-&gt;whole = w;
    if( w &lt; 0) {
       m-&gt;sign = NEGATIVE;
       m-&gt;whole *= -1;
    }
    m-&gt;num  = n;
    m-&gt;den  = d;
    m-&gt;factors[ NUMER ][ 0 ] = 1;
    m-&gt;factors[ DENOM ][ 0 ] = 1;
    return m;
}

mixed_t *mix_clear( mixed_t *m )
{
    m-&gt;whole = 0;
    m-&gt;num = 0;
    m-&gt;den = 1;
    m-&gt;factors [ NUMER ][ 0 ] = 1;
    m-&gt;factors [ DENOM ][ 0 ] = 1;
    m-&gt;sign = POSITIVE;
    return m;
}

mixed_t *mix_factor( mixed_t *m )
{
    Integer n;
    int i;
    Integer *pi;
    Integer *pp;

    for( i = 0; i &lt; 2; ++i) {
       pp = Primes;  /* point to global array of primes */
       (i != 0) ? (n = m-&gt;den) : (n = m-&gt;num);
       pi = &amp;m-&gt;factors[i][0];

       while(n &gt; 1) {
          if( !(n % *pp) ) {  /* if there is no remainder */
             n = (Integer) (n / *pp); /* factor the prime out of number */
             *pi = *pp;         /* save the prime */
             ++pi;
             continue;        /* try the prime again */
          }
          ++pp;              /* next prime */
       }
       *pi = 1;
       pp = Primes;
    }
    return m;
}

mixed_t *mix_reduce( mixed_t *m )
{
    Integer tnum = 1, tden = 1;
    Integer *top = &amp;m-&gt;factors[NUMER][0];
    Integer *bot = &amp;m-&gt;factors[DENOM][0];

    if( m-&gt;num == 0) {
       return m;
    }
    if( m-&gt;den == 1 ) {
       m-&gt;whole += m-&gt;num;
       m-&gt;num = 0;
       return m;
    }
    mix_factor( m ); /* got to factor to reduce */
                 /*accumulators for reduced numerator &amp; denominator*/
    while(*top != 1 &amp;&amp; *bot != 1) {  /* neither factor is sentinel */
          if(*top == *bot) {  /* if the current factors are equal..*/
                 ++top;      /* ..cancel them &amp; continue */
                 ++bot;
                 continue;
          }                  /* otherwise accumulate the smaller*/
          (*top &lt; *bot) ? (tnum *= *top++) : (tden *= *bot++);

    }
    while(*top != 1)          /* any remaining factors are */
           tnum *= *top++;  /* multiplied in */
    while(*bot != 1)
           tden *= *bot++;
    if(tnum == tden) {    /*ie, n/d == 1*/
       ++m-&gt;whole;          /*add 1 to whole*/
       m-&gt;num = 0;
       m-&gt;den = 1;
    }
    else if(tnum &gt; tden) {              /*improper fraction*/
       m-&gt;whole += (Integer) (tnum / tden);
       m-&gt;num = tnum % tden;
       m-&gt;den = tden;
    }
    else {                              /*proper fraction*/
       m-&gt;num == tnum;
       m-&gt;den = tden;
    }
    if(m-&gt;num == 0) {                   /* keep zero-valued fractions*/
       m-&gt;den = 1;                     /* in consistent state*/
       if(m-&gt;whole == 0)
          mix_clear( m );
    }
    return m;
}

void mix_make_improper( mixed_t *m )  /* converts invoking instance*/
{                                   /* into an improper fraction*/
    m-&gt;num += m-&gt;whole * m-&gt;den;            /* if possible*/
    m-&gt;whole = 0;
}

/* If sizeof( Integer ) changes
   change %ld
*/
void mix_print( mixed_t *m )
{
    printf("\t");
    if( m-&gt;sign == -1 )
       printf("-");
    if( m-&gt;whole != 0 )
       printf("%ld", m-&gt;whole);
    if( m-&gt;num != 0 )
       printf(" %ld|%ld",m-&gt;num, m-&gt;den);
    if( (m-&gt;whole == 0) &amp;&amp; (m-&gt;num == 0) )
       printf("0");
    printf("\n");
}

/* End of File */
</pre>
</BODY>
</HTML>
