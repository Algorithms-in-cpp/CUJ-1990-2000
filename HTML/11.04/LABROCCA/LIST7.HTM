<HTML><HEAD>
<TITLE>April 1993/Mixed Numbers in C/Listing 7</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 7 mix_num2.c &#151; <I>functions for doing arithmetic with mixed numbers</I></A></h4>
<pre>/* mix_num2.c */
/* Copyright 1992 by P.J. LaBrocca */

#include "mixed.h"
#include &lt;stdlib.h&gt;

mixed_t mix_sub(mixed_t *x, mixed_t *y)
{
    mixed_t sum, xt, yt;

    mix_clear( &amp;sum );
    mix_make_improper(x);
    mix_make_improper(y);

    xt.num = x-&gt;num * y-&gt;den;
    xt.den = x-&gt;den * y-&gt;den;
    yt.num = y-&gt;num * x-&gt;den;
    yt.den = y-&gt;den * x-&gt;den;

    sum.num = x-&gt;sign * xt.num - y-&gt;sign * yt.num;

    if(sum.num &lt; 0) {
       sum.num = labs(sum.num);
       sum.sign = NEGATIVE;
    }
    sum.den = xt.den;  /*xt.den == yt.den at this point*/
    if(sum.num == 0) {
       sum.den = 1;
       if(sum.whole == 0)
          sum.sign = POSITIVE;
    }
    return sum;
}

mixed_t mix_add(mixed_t *x, mixed_t *y)
{
    mixed_t sum, t, xt, yt;

    mix_clear( &amp;sum );

    mix_make_improper(x);
    mix_make_improper(y);

    xt.num = x-&gt;num * y-&gt;den;
    xt.den = x-&gt;den * y-&gt;den;
    yt.num = y-&gt;num * x-&gt;den;
    yt.den = y-&gt;den * x-&gt;den;

    sum.num = x-&gt;sign * xt.num + y-&gt;sign * yt.num;

    if(sum.num &lt; 0) {
       sum.num = labs(sum.num);
       sum.sign = NEGATIVE;
    }
    sum.den = xt.den;    /*xt.den == yt.den at this point*/

    if(sum.num == 0) {
       sum.den = 1;
       if(sum.whole == 0)
          sum.sign = POSITIVE;
    }
    return sum;
}

mixed_t mix_mul(mixed_t *x, mixed_t *y)
{
    mixed_t product;
    Integer xn, yn;

    mix_clear( &amp;product );

    xn = x-&gt;sign * (x-&gt;whole * x-&gt;den + x-&gt;num);
    yn = y-&gt;sign * (y-&gt;whole * y-&gt;den + y-&gt;num);

    product.num = xn * yn;
    product.den = x-&gt;den * y-&gt;den;
    if(product.num &lt; 0) {
       product.num = labs(product.num);
       product.sign = NEGATIVE;
    }
    if(product.num == 0) {
       product.den = 1;
       if(product.whole == 0)
          product.sign = POSITIVE;
    }
    return product;
}

mixed_t mix_recip(mixed_t f) /*reciprocal*/
{                       /* does not alter f*/
    Integer tmp;
    
    mix_make_improper( &amp;f );
    if(f.num == 0) {
       mix_error("denominator will become zero");
       return f;
    }
    
    tmp= f.num;
    f.num = f.den;
    f.den = tmp;
    return f;
}

mixed_t mix_divide(mixed_t *f, mixed_t *g)
{
    mixed_t rec = mix_recip( *g );
    
    return mix_mul( f, &amp;rec );
}

Integer mix_lcd(mixed_t *f, mixed_t *g)
{
    int i = 0, j = 0;
    Integer low[30];
    Integer *l = low;
    Integer t;

    mix_factor(g);
    mix_factor(f);
    white(1) {
       if(f-&gt;factors[1][i] == 1) {
          while(g-&gt;factors[1][j] != 1)
            *l++ = g-&gt;factors[1][j]++];
          break;
       }
       else if(g-&gt;factors[1][j] == 1) {
          while(f-&gt;factors[1][i] != 1)
            *l++ = f-&gt;factors[1][i++];
          break;
       }
       else if(f-&gt;factors[1][i] == g-&gt;factors[1][j]) {
          *l++ = f-&gt;factors[1][i];
          ++i;
          ++j;
       }
       else if(f-&gt;factors[1][i] &gt; g-&gt;factors[1][j]) {
          *l++ = g-&gt;factors[1][j];
          ++j;
       }
       else if(f-&gt;factors[1][i] &lt; g-&gt;factors[1][j]) {
          *1++ = f-&gt;factors[1][i];
          ++i;
       }
    }
    *l = 1;
    t = 1;
    i = 0;

    while(low[i] !=1)
       t *= low[i++];
    Return t;
}

void mix_neg(mixed_t *f)
{
    if(f-&gt;sign == NEGATIVE)
       f-&gt;sign = POSITIVE;
    else
       f-&gt;sign = NEGATIVE;
}
/* End of File */
</pre>
</BODY>
</HTML>
