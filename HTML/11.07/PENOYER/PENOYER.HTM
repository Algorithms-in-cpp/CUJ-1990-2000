

<HTML>
<HEAD>

<TITLE>July 1993/The Alpha-Beta Filter</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjul.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">The Alpha-Beta Filter<A name="01CC_00AB"><A name="01CC_00AB"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="01CC_0000"><A name="01CC_0000">Robert Penoyer</font></h3><hr><blockquote><P>
<P><i><A name="01CC_0000"><A name="01CC_0000">Robert Penoyer has an M.S. in electrical engineering from the University of Southern California. He has 17 years experience in electronic circuit and system design and simulation. He has been programming in C for five years and working with alpha-beta filters for four years. Bob can be reached on GEnie at RPENOYER. or on Compuserve at 71603,1335.</i></P><P>
Data collected or received in the real world is nearly always corrupted by errors, or noise. With relatively consistent data &#151; information that varies more slowly than the noise &#151; you can look at more than one measurement at a time and more accurately separate the data from the noise.<P>
To minimize the effects of noise, the measured data can be filtered, or smoothed. In an ideal world you could remove all the noise and be left with an exact duplicate of the original information. (But in an ideal world, the information would not have been corrupted in the first place.) The best you can hope to accomplish in the real world is to remove as much noise as possible while retaining as much of the original information as possible. The <FONT FACE="Symbol">a</FONT>-<FONT FACE="Symbol">b</FONT> filter is a classic option for smoothing a corrupted signal and tracking discrete data.<P>
<h4><FONT COLOR="#000080"><A name="01CC_00AC">Child of the Kalman Filter<A name="01CC_00AC"></FONT></h4></P>
The <FONT FACE="Symbol">a</FONT>-<FONT FACE="Symbol">b</FONT> filter is a derivative of the Kalman filter. The Kalman filter, a so-called optimal filter, performs better than any other linear filter, under specific conditions (Gelb 1974, Meditch 1969, Mendel 1974). You pay for such excellent performance with extreme complexity and computationally-intensive software. The <FONT FACE="Symbol">a</FONT>-<FONT FACE="Symbol">b</FONT> filter resembles the Kalman filter in its nature, structure, and performance, but without as much complexity.<P>
The Kalman filter automatically varies its coefficients to optimize its performance as a function of the statistics of the incoming corrupted data. The <FONT FACE="Symbol">a</FONT>-<FONT FACE="Symbol">b</FONT> filter, on the other hand, uses either fixed coefficients or coefficients that vary as the programmer requires them to vary. Thus, the <FONT FACE="Symbol">a</FONT>-<FONT FACE="Symbol">b</FONT> filter avoids entirely, or almost entirely, the computational overhead necessary for the Kalman filter to perform properly.<P>
The <FONT FACE="Symbol">a</FONT>-<FONT FACE="Symbol">b</FONT> filter is called suboptimal. But don't interpret that to mean it performs poorly. On the contrary, the <FONT FACE="Symbol">a</FONT>-<FONT FACE="Symbol">b</FONT> filter can be a highly effective smoother. By varying the coefficients of this filter, you can control the length of the data history used to estimate the data's true value from the most recent measurement.<P>
<h4><FONT COLOR="#000080"><A name="01CC_00AD">The Classic <FONT FACE="Symbol">a</FONT>-<FONT FACE="Symbol">b</FONT> Filter<A name="01CC_00AD"></FONT></h4></P>
The <FONT FACE="Symbol">a</FONT>-<FONT FACE="Symbol">b</FONT> filter has about as many forms as there are sources that describe it (Benedict and Bordner 1962, Lewis 1984, Morris 1986). The following equation set is based on one presented by Morris.<P>
<b><a name="equat1">Equation 1:</a></b><P>
<IMG SRC="equat1.gif"><P>
<b><a name="equat2">Equation 2:</a></b><P>
<IMG SRC="equat2.gif"><P>
<b><a name="equat3">Equation 3:</a></b><P>
<IMG SRC="equat3.gif"><P>
<b><a name="equat4">Equation 4:</a></b><P>
<IMG SRC="equat4.gif"><P>

where:<P>
<I>s</I> = position<br>
<I>v</I> = velocity<br>
a = multiplier on the position measurement error (0&lt;=<FONT FACE="Symbol">a</FONT>&lt;=1)<br>
b = multiplier on the velocity measurement error (0&lt;=<FONT FACE="Symbol">b</FONT>&lt;=1)<br>
<I>T</I> = time between measurements<br>
<I>n</I>  parameter value for <I>this</I> time increment<br>
<I>pn</I>  predicted parameter value for <I>this</I> time increment<br>
<I>p</I>(<I>n</I>+1)  predicted parameter value for the <I>next</I> time increment<br>
<I>m</I>  measured parameter<br>
^  estimated value (corrected prediction)<P>
Though these equations use the terms <I>position</I> and <I>velocity</I>, any parameters that are related by the derivative operator (e.g., <I>d/dx</I>) can be substituted. The equations form a recursive relationship and are used formally as follows:<P>
Given a new position measurement, an estimate is made of the true position and velocity for the current time increment using <A href="penoyer.htm#equat1">Equation 1</a>
and <A href="penoyer.htm#equat2">Equation 2</a>.
 The estimates from <A href="penoyer.htm#equat1">Equation 1</a>
and <A href="penoyer.htm#equat2">Equation 2</a>
are used to predict the position and velocity for the next time increment using <A href="penoyer.htm#equat3">Equation 3</a>
and <A href="penoyer.htm#equat4">Equation 4</a>.
 When the next time increment occurs, i.e., when a new position measurement is made, the process is repeated. This method requires that <I>T</I> be constant or nearly so.<P>
The <FONT FACE="Symbol">a</FONT> and <FONT FACE="Symbol">b</FONT> terms give the filter its name. These fixed coefficients replace the optimized coefficients of the Kalman filter.<P>
<h4><FONT COLOR="#000080"><A name="01CC_00AE">Simplifying the <FONT FACE="Symbol">a</FONT>-<FONT FACE="Symbol">b</FONT> Equations<A name="01CC_00AE"></FONT></h4></P>
While fine as given, <A href="penoyer.htm#equat1">Equation 1</a>
through <A href="penoyer.htm#equat4">Equation 4</a>
can be massaged to make the programming effort simpler. However, beware that any time a derivative is used on noisy measurements, the derivative tends to multiply the effects of the noise. Because the velocity term in the <FONT FACE="Symbol">a</FONT>-<FONT FACE="Symbol">b</FONT> filter is related to the position term by the derivative operator, the velocity estimate can be very poor. Therefore, I assumed that the velocity estimate of this <FONT FACE="Symbol">a</FONT>-<FONT FACE="Symbol">b</FONT> filter would not be used to provide a velocity estimate outside the equations. That is, I used the <FONT FACE="Symbol">a</FONT>-<FONT FACE="Symbol">b</FONT> filter only to estimate position from some set of position measurements. (If you should want to use the velocity term as an estimator of true velocity, consider smoothing it with a second <FONT FACE="Symbol">a</FONT>-<FONT FACE="Symbol">b</FONT> filter.)<P>
Because I was not going to use the velocity term outside the equations, I could afford to modify it. First, I rearranged <A href="penoyer.htm#equat2">Equation 2</a>
by multiplying through by <I>T</I>:<P>
<b><a name="equat5">Equation 5:</a></b><P>
<IMG SRC="equat5.gif"><P>
I further modified <A href="penoyer.htm#equat5">Equation 5</a>
such that <I>T</I> was absorbed into <I>v.</I> This is a valid simplification since I do not use <I>v</I> directly. Consider these facts about <I>T</I>:<P>
<UL><li><I>T</I> operates only on <I>v</I></li>
<li>Every place <I>v</I> occurs, <I>T</I> occurs (with the understanding that <A href="penoyer.htm#equat4">Equation 4</a>
is also multiplied by <I>T</I>)</li></UL>
Given these facts, the absorption of <I>T</I> into <I>v</I> has no effect on the predicted and estimated positions. Each of the <I>v</I> variables is simply scaled by <I>T</I>. Consider, also, these facts about <I>T</I>:<P>
<UL><li><I>T</I> is the time between position measurements</li>
<li><I>T</I> depends upon the operating speed of the computer system (assuming its speed determines the time between measurements)</li></UL>
The filter's characteristics (i.e., its predictions and estimations of <I>s</I>) are not affected by <I>T</I>. That is, though a faster computer yields a faster filter, the damping of the filter is not affected. This will be made clear in the geometric presentation that follows. When <I>T</I> is absorbed into <I>v</I>, <A href="penoyer.htm#equat5">Equation 5</a>
becomes:<P>
<b><a name="equat6">Equation 6:</a></b><P>
<IMG SRC="equat6.gif"><P>
As noted above, <A href="penoyer.htm#equat6">Equation 6</a>
simply causes <I>v</I> to be scaled by <I>T</I>.<P>
To begin the recursive estimation sequence, the initial estimate of position, <IMG SRC="equata.gif">,
is taken to be the first measured position, <I>s</I><SUB><I>m</SUB>0</I>. Set the initial velocity estimate, <IMG SRC="equatb.gif">, to 0 unless you have a good reason for doing otherwise. Given these starting conditions, the equations can be rearranged, placing <A href="penoyer.htm#equat3">Equation 3</a>
and <A href="penoyer.htm#equat4">Equation 4</a>
first. The indices in these two equations then become <I>pn</I> rather than <I>p</I>(<I>n</I>+1) and n-1 rather than <I>n</I> so that these equations are used to predict the parameters for the current time increment based on the previous time increment. (Note that, as originally formulated, the equations were used to predict the parameter value for the next time increment based on the current time increment.) Also, since <A href="penoyer.htm#equat4">Equation 4</a>
provides no new information, it can be ignored &#151; the old estimate of velocity becomes the new predicted velocity.<P>
Following the elimination of <A href="penoyer.htm#equat4">Equation 4</a>
and the replacement of <I>v</I><SUB><I>pn</I></SUB> with <IMG SRC="equatc.gif"> in <A href="penoyer.htm#equat6">Equation 6</a>,
 the reformulation of the original set of equations and their operating sequence now becomes:<P>
<b><a name="equat7">Equation 7:</a></b><P>
<IMG SRC="equat7.gif"><P>
<b>Equation 1:</b><P>
<IMG SRC="equat1.gif"><P>
<b><a name="equat8">Equation 8:</a></b><P>
<IMG SRC="equat8.gif"><P>
When the above sequence begins, the entry point is <A href="penoyer.htm#equat7">Equation 7</a>
with <IMG SRC="equatd.gif"> set equal to the first value of <I>s</I><I><SUB>mn</SUB></I> (i.e., <I>s</I><SUB><I>m</I></SUB>0) and <IMG SRC="equate.gif"> set equal to 0. This set of equations and conditions are the basic smoothing algorithm. The actual programming implementation adds one more step.<P>
The parenthetical term in both <A href="penoyer.htm#equat1">Equation 1</a>
and <A href="penoyer.htm#equat8">Equation 8</a>
is the difference between the measured position and the predicted position. This difference is the measurement error. Instead of calculating it twice, once for each equation, a single measurement error term can be calculated following <A href="penoyer.htm#equat7">Equation 7</a>:<P>
<b><a name="equat9">Equation 9:</a></b><P>
<I>e</I><I><SUB>mn</SUB></I><I> = s</I><I><SUB>mn</SUB></I><I> - s</I><I><SUB>pn</SUB></I><P>
Thus, the actual implementation of the <FONT FACE="Symbol">a</FONT>-<FONT FACE="Symbol">b</FONT> filter is:<P>
<b>Equation 7:</b><P>
<IMG SRC="equat7.gif"><P>
<b>Equation 9:</b><P>
<I>e</I><I><SUB>mn</SUB></I><I> = s</I><I><SUB>mn</SUB></I><I> - s</I><I><SUB>pn</SUB></I><P>
<b>Equation 1:</b><P>
<IMG SRC="equat1.gif"><P>
<b>Equation 8:</b><P>
<IMG SRC="equat8.gif"><P>
This formulation is very simple. It lends itself to simple coding and to a simple geometric explanation of the <FONT FACE="Symbol">a</FONT>-<FONT FACE="Symbol">b</FONT> filter's operation.<P>
<h4><FONT COLOR="#000080"><A name="01CC_00AF">A Geometric Explanation of the <FONT FACE="Symbol">a</FONT>-<FONT FACE="Symbol">b</FONT> Filter<A name="01CC_00AF"></FONT></h4></P>
Assume that the filter has been running. That is, the starting procedure has been completed and, when a new measurement is made, the filter runs through the sequence of equations. The equations use the estimates from the previous time increment and the current position measurement to estimate the true current position.<P>
<A href="fig1.htm">Figure 1</a>
shows that, given the starting point, <IMG SRC="equatf.gif">, and the velocity, <IMG SRC="equatg.gif">, a straight line predicts the new position, <I>s</I><I><SUB>pn</SUB></I>. This is the operation performed by <A href="penoyer.htm#equat7">Equation 7</a>.
 Since <IMG SRC="equath.gif"> includes the <I>T</I> multiplier, the units of <IMG SRC="equati.gif"> are distance, not velocity.<P>
In general, the measured position will not coincide with <I>s</I><I><SUB>pn</SUB></I>. <a href="penoyer.htm#equat9">Equation 9</a>
quantifies the measurement error. This error is due primarily to noise. However, some of the measurement error legitimately may be due to a change in velocity. Therefore, since some of the difference may be valid, all the difference cannot be ignored. Thus, a, a positive multiplier that generally has a magnitude smaller than 1, is used to add a fraction of the measurement error to the predicted position to improve the position estimate. <A href="penoyer.htm#equat1">Equation 1</a>
yields the final estimate of position. The function of <A href="penoyer.htm#equat1">Equation 1</a>
is illustrated in <A href="fig2.htm">Figure 2</a>.
<P>
From the geometry of <A href="fig1.htm">Figure 1</a>
and <A href="fig2.htm">Figure 2</a>,
 it can be seen that if <I>v</I> is varied inversely as <I>T</I> is varied, then none of the details in the figures (i.e., positions or slopes) will change. That is, if the data and measurements are speeded up equally, the details of the figures will not be affected. Hence, variations in <I>T</I> affect only the filter's speed; damping is not affected.<P>
<h4><FONT COLOR="#000080"><A name="01CC_00B0">Relating <FONT FACE="Symbol">b</FONT> to <FONT FACE="Symbol">a</FONT><A name="01CC_00B0"></FONT></h4></P>
Just as <FONT FACE="Symbol">a</FONT> determines the fraction of the measurement error applied to the position prediction, <FONT FACE="Symbol">b</FONT> determines the fraction of the measurement error applied to the velocity prediction. <A href="penoyer.htm#equat8">Equation 8</a>
uses <FONT FACE="Symbol">b</FONT> for this purpose. Benedict and Bordner have derived a relationship between <FONT FACE="Symbol">a</FONT> and <FONT FACE="Symbol">b</FONT> that optimizes the filter's performance:<P>
<b><a name="equat10">Equation 10:</a></b><P>
<IMG SRC="equat10.gif"><P>
This relationship is based on the condition that the best estimate be provided for a system that is tracking noisy information that is changing at a constant velocity. This may or may not be satisfactory for your particular application.<P>
<A href="penoyer.htm#equat10">Equation 10</a> yields a slightly underdamped system. Being underdamped implies that the system will "ring" somewhat. That is, if the data makes a sudden step in position, the estimate of position will overshoot the true position at least once before settling down to an accurate estimate. A more heavily damped system might perform better in your application. Benedict and Bordner offer an <FONT FACE="Symbol">a</FONT>-<FONT FACE="Symbol">b</FONT> relationship for a critically damped system. If their relationship is rearranged to solve for <FONT FACE="Symbol">b</FONT>, it will be found that damping is not critical. To get closer to critical damping, <A href="penoyer.htm#equat11">Equation 11</a>
multiplies the rearranged relationship by 0.8.<P>
<b><a name="equat11">Equation 11:</a></b><P>
<IMG SRC="equat11.gif"><P>
<A href="penoyer.htm#equat11">Equation 11</a> yields a system that is nearly critically damped. (In a critically-damped system, the output agrees with the input as quickly as possible with no ringing.) By using <A href="penoyer.htm#equat11">Equation 11</a>
instead of <A href="penoyer.htm#equat10">Equation 10</a>,
 you can reduce &#151; but not eliminate &#151; the ringing response. Because a is never permitted to exceed the range 0a1, the quantity under the radical is never negative.<P>
Consider <A href="penoyer.htm#equat10">Equation 10</a>
and <A href="penoyer.htm#equat11">Equation 11</a>
merely as reference points. As long as the limits 07lt;=<FONT FACE="Symbol">a</FONT>&lt;=1 and 0&lt;<FONT FACE="Symbol">b</FONT>&lt;=1 are not violated, you are free to select the values of <FONT FACE="Symbol">a</FONT> and <FONT FACE="Symbol">b</FONT> to suit your needs.<P>
<h4><FONT COLOR="#000080"><A name="01CC_00B1">A Programming Example in C<A name="01CC_00B1"></FONT></h4></P>
I begin by estimating measured data uncorrupted by noise. <A href="fig3.htm">Figure 3</a>
contains a profile of the data that begins at a steady state, ramps to a second steady state, then steps to a third steady state. (Normally, you would not filter clean, uncorrupted data like this for an estimated value, but I am using it to demonstrate the performance of the <FONT FACE="Symbol">a</FONT>-<FONT FACE="Symbol">b</FONT> filter against a ramp and a step.) The profile might represent a sequence of measured voltages, currents, distances, altitudes, volumes of storage tank contents, disk-drive head positions, highway traffic volumes, percentage of <I>x</I> in a vat full of <I>y</I>, etc.<P>
I wrote and compiled <I>ALPHABET.C</I> (<A href="list1.htm">Listing 1</a>)
 using the Borland C++, Version 3.1 compiler configured for MS-DOS. I verified it on a system running MS-DOS, version 5.0. The plotting functions assume a standard VGA monitor (640 x 480 pixels). If your monitor is different, modify the <I>#define</I> statements for <I>PLOTx</I> and <I>STEADY_STATEx</I> by simple scaling. <I>profile</I> (<A href="list1.htm">Listing 1</a>)
 generates the data profile of <A href="fig3.htm">Figure 3</a>.
<P>
<I>ALPHABET .C</I> is a simple demonstration of the performance of the <FONT FACE="Symbol">a</FONT>-<FONT FACE="Symbol">b</FONT> filter for two sets of <FONT FACE="Symbol">a</FONT>-<FONT FACE="Symbol">b</FONT> values. In each case, I give <FONT FACE="Symbol">a</FONT> an arbitrary value of 0.25; thus, 25% of each measurement error is used as a correction to the predicted position. Over the first part of the program, <FONT FACE="Symbol">b</FONT> is determined by <A href="penoyer.htm#equat10">Equation 10</a>,
 the so-called optimal value. (It may not be optimal for your application.) The second part of the program uses the <FONT FACE="Symbol">b</FONT> value determined by <A href="penoyer.htm#equat11">Equation 11</a>,
 the so-called near-critically damped value.<P>
First, the program plots the data profile. Once it plots the profile, the program pauses until you press a key. After you press a key, the program plots the response of the <FONT FACE="Symbol">a</FONT>-<FONT FACE="Symbol">b</FONT> filter to the data profile over the profile. You will see slight overshoots as the profile begins and ends the ramp. You will notice a significant overshoot following the step. Pressing another key plots the filter's output by itself.<P>
Press another key to produce the signal corrupted by noise. <I>gauss_noise</I> generates a mean-zero, gaussian (normal) noise function. To do so, it uses the Box-Muller method (Press, et al. 1988, MathSoft, Inc. 1988). The noise is given an arbitrary standard deviation of <FONT FACE="Symbol">s</FONT> = 10. The mean is set to <FONT FACE="Symbol">m</FONT> = 0 to comply with the requirement that the mean of the corrupting noise be zero. If the mean were non-zero, the <FONT FACE="Symbol">a</FONT>-<FONT FACE="Symbol">b</FONT> filter's response would be offset by the mean value of the noise. In <I>gauss_noise</I> the variable <I>mean</I> is retained, despite being set to zero, to clarify its part in the computation of the noise function.<P>
Continue pressing a key to run through all the combinations of clean signal, noisy signal, and smoothing provided by <A href="list1.htm">Listing 1</a>.
<P>
<h4><FONT COLOR="#000080"><A name="01CC_00B2">Filter Performance<A name="01CC_00B2"></FONT></h4></P>
Several figures illustrate the filter's performance. <A href="fig4.htm">Figure 4</a>
compares the original data profile with the resultant output due to the <FONT FACE="Symbol">a</FONT>-<FONT FACE="Symbol">b</FONT> relationship of <A href="penoyer.htm#equat10">Equation 10</a>.
 The filter tracks the ramp well. It tracks the step well, too, except for the overshoot following the step. The ringing of the underdamped filter is apparent here. <A href="fig5.htm">Figure 5</a>
illustrates the data profile corrupted by noise. The noisy data remains the same throughout a single run of the program so that each step of the program operates on the same noise. The noise is different each time the program runs so that the noise you will see if you run it will be different from that shown in <A href="fig5.htm">Figure 5</a>.
 <A href="fig6.htm">Figure 6</a>
compares the filtered noisy data with the original, uncorrupted data. Keep in mind that the intent is to recover the original, uncorrupted data as accurately as possible, thus the comparison. <A href="fig7.htm">Figure 7</a>
and <A href="fig8.htm">Figure 8</a>
use the more heavily damped filter due to the <FONT FACE="Symbol">a</FONT>-<FONT FACE="Symbol">b</FONT> relationship of <A href="penoyer.htm#equat11">Equation 11</a>.
<P>
You might find it useful to modify <A href="list1.htm">Listing 1</a>
by supplying your own values for <FONT FACE="Symbol">a</FONT> and <FONT FACE="Symbol">b</FONT>. Just be sure that neither is permitted to be negative or to exceed a value of 1.0.<P>
<I>alpha_beta</I> performs the actual <FONT FACE="Symbol">a</FONT>-<FONT FACE="Symbol">b</FONT> filter algorithm. Three things should be said about this function. First, if it were used in real time, all variables could be scalar. No arrays would be needed. As each estimated position (or whatever) value was calculated it could be returned to the calling function. Only the most recent values of variables <I>s_est</I> and <I>v_est</I> need to be preserved. Therefore, if the algorithm were to be modified to filter measurements one call at a time, <I>s_est</I> and <I>v_est</I> should be made static variables.<P>
Second, keep in mind that the method used here has absorbed the term <I>Tv</I> into the single variable, <I>v</I>. If you want to make use of <I>v</I> as well as <I>s</I>, be sure to divide <I>v</I> (actually, <I>Tv</I>) by <I>T</I>, the fixed period over which each measurement is made. As implemented, the <FONT FACE="Symbol">b</FONT>/<I>T</I> term of <A href="penoyer.htm#equat2">Equation 2</a>
has been change to simply <FONT FACE="Symbol">b</FONT>, thus eliminating any need for a division. If you would rather preserve the true scaling of <I>v</I>, you can absorb <I>T</I> into the calculation of <FONT FACE="Symbol">b</FONT>, avoiding repeated divisions by <I>T</I>.<P>
Finally, you will have to make your choice of <FONT FACE="Symbol">a</FONT> based on the nature of the data you are attempting to smooth. A large <FONT FACE="Symbol">a</FONT> (near 1.0) results in very little smoothing and very little noise reduction. A small <FONT FACE="Symbol">a</FONT> (near 0.0) results in a lot of smoothing, i.e., a lot of noise reduction and very rounded estimates of data steps. Your choice must be based as much on your good judgment as it is on the data to be smoothed. <A href="penoyer.htm#equat10">Equation 10</a>
or <A href="penoyer.htm#equat11">Equation 11</a>
will usually provide a suitable b value, though you might want to experiment with this too. Let experience and testing be your guide.<P>
<h4><FONT COLOR="#000080"><A name="01CC_00B3">Tracking<A name="01CC_00B3"></FONT></h4></P>
Tracking, another important application of the <FONT FACE="Symbol">a</FONT>-<FONT FACE="Symbol">b</FONT> filter, differs from smoothing by centering a tracking window on the predicted position of the measured data as determined by <A href="penoyer.htm#equat7">Equation 7</a>.
 When the measured data falls inside the window, that data is taken as a valid measurement and used to update the filter's position estimate. Data that falls outside the window is ignored.<P>
When the data is ignored for failing to fall inside the track window, the calculation of <a href="penoyer.htm#equat9">Equation 9</a>
cannot be completed. Instead, ignore <a href="penoyer.htm#equat1">Equation 9</a>
and assign 0 as the error value. Then carry out the other calculations. Because the <FONT FACE="Symbol">a</FONT>-<FONT FACE="Symbol">b</FONT> filter incorporates a velocity term, you use it to predict where the data should have been. When the error value is zero, the velocity estimate of <A href="penoyer.htm#equat8">Equation 8</a>
is not changed so that the velocity estimate remains constant. That is, the velocity estimate, based on the history of calculations up to the data that failed to fall within the track window, is used to update the position prediction of <A href="penoyer.htm#equat7">Equation 7</a>
and, hence, the position of the track window. If the data falls inside the track window once again, the normal calculation of measurement error, <a href="penoyer.htm#equat9">Equation 9</a>,
 is resumed and tracking updates continue. If the system goes through too many iterations without the data falling inside the track window, the program must declare loss of track. You must determine for your application what constitutes too many misses.<P>
Once you determine that track has been lost, you need a search-and-acquire algorithm to reacquire the data. During acquisition, you might find it useful to scale <FONT FACE="Symbol">a</FONT> (and <FONT FACE="Symbol">b</FONT>) from a larger value (near 1.0) when the target is first acquired, down to a more suitable value (e.g., 0.25 or so) to maintain track. (Note that initially setting <IMG SRC="equatj.gif"> is equivalent to starting with an alpha symbol value of 1.0.) The down scaling can be accomplished over a few iterations. This strategy can speed the convergence of the position estimate to the true data value.<P>
You will have to determine how wide the track window should be for your application. You will also have to figure out how to determine that track has been lost and how the data is to be reacquired.<P>
<h4>References</FONT></h4></P>
Benedict, T.R., and G.W. Bordner. July 1962. "Synthesis of an Optimal Set of Radar Track-While-Scan Smoothing Equations," <I>IRE Transactions On Automatic Control,</I> pp. 27-32. New York, NY: The Institute of Radio Engineers.<P>
Gelb, Arthur. 1974. <I>Applied Optimal Estimation,</I> Chapter 4. Cambridge, Massachusetts: The M.I.T. Press.<P>
Lewis, Frank L. 1986. <I>Optimal Estimation: With an Introduction to Stochastic Control Theory,</I> pp. 88-89. New York, NY: John Wiley &amp; Sons.<P>
Meditch, J.S. 1969. <I>Stochastic Optimal Linear Estimation and Control</I>, Chapter 5. New York, NY: McGraw-Hill, Inc.<P>
Mendel, Jerry M. 1973. <I>Discrete Techniques of Parameter Estimation</I>, pp. 159-162. New York, NY: Marcel Dekker, Inc.<P>
Morris, Guy V. 1988. <I>Airborne Pulsed Doppler Radar,</I> Section 12.7.1. Norwood, MA: Artech House, Inc.<P>
Press, William H., et al. 1988. <I>Numerical Recipes in C</I>, pp. 216-217. New York, NY: Cambridge University Press.<P>
MathSoft, Inc. Summer 1988. "Industrial Engineering Prof. Uses MathCAD for Simulations, Statistics, and Teaching," <I>MathCAD User's Journal</I>, Vol. 2, No. 3, p. 4. Cambridge, MA: MathSoft, Inc.<P>

<h4><a href="../../../source/1993/jul93/penoyer.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
