

<HTML>
<HEAD>

<TITLE>July 1993/Stepping Up to C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjul.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Stepping Up to C++<A name="0229_00B5"><A name="0229_00B5"></font></h2><P>
<h3 align="center"><A name="0229_0000"><A name="0229_0000">Nested Classes</h3><P>
<h3 align="center"><font color="#800000">Dan Saks</font></h3><hr><blockquote><P>
<P><i><A name="0229_0000"><A name="0229_0000">Dan Saks is the founder and principal of Saks &amp; Associates, which offers consulting and training in C++ and C. He is secretary of the ANSI and ISO C++ committees. Dan is coauthor of C++ Programming Guidelines, and codeveloper of the Plum Hall Validation Suite for C++ (both with Thomas Plum). You can reach him at 393 Leander Dr., Springfield OH, 45504-4906, by phone at (513)324-3601, or electronically at dsaks@wittenberg.edu. </i></P><P>
Last month, I summarized most of the extensions to C++ introduced by the joint C++ standards committee WG21 + X3J16 (see "Recent Extensions to C++," <I>CUJ</I>, June, 1993). I neglected to mention one other extension &#151; forward declaration of nested classes.<P>
Nested classes were a relatively late addition to the C++ language. They were introduced in 1989, shortly before the committee embarked on drafting a standard. Nested classes added considerable complexity to the language's lookup rules, that is, the rules for matching a reference to an identifier in a translation unit with a declaration for that identifier. The rules stated in the <I>ARM</I> (Ellis and Stroustrup, 1990) seem to work fine for most common simple cases, but they are incomplete and inconsistent in handling complex cases. The standards committee's Core Language working group has spent much of its time these last three years ironing out name lookup problems.<P>
This month's column explains nested classes and types, and explains the extension to allow forward declaration of nested classes. Next month, I'll describe the problems posed by nested classes and the new lookup rules designed to solve those problems.<P>
<h4><FONT COLOR="#000080"><A name="0229_00B6">Nested Classes<A name="0229_00B6"></FONT></h4></P>
A nested class is a class declared inside another class, as in:<P>
<pre>class outer
   {
public:
   class inner { /* ... */ };
   void foo(int);
   // ...
private:
   inner i;
   // ...
   };</pre>
Here, <I>class inner</I> is nested within <I>class outer</I>. Hence, the name <I>inner</I> is in the scope of <I>class outer</I>. Within <I>class outer</I> (and the bodies of its member functions), you can refer to <I>inner</I> simply as <I>inner</I>. For example, <P>
<pre>void outer::foo(int i)
   {
   inner *p;
   // ok, inner in scope of outer
   // ...
   }</pre>
But outside <I>class outer</I>, you must refer to <I>inner</I> by its fully-qualified name, <I>outer::inner</I>, as in <P>
<pre>int main()
   {
   outer::inner *q =
         new outer::inner;
   // ...
   }</pre>
Nested class names are subject to access control. That is, you cannot reference <I>outer::inner</I> outside a member or friend of <I>class outer</I> unless <I>inner</I> is a public (or protected) member of <I>outer</I>.<P>
Nested classes reduce the need for global names in C++ programs, making it easier to avoid name conflicts between different parts of a large program. The following example shows how.<P>
<h4><FONT COLOR="#000080"><A name="0229_00B7">Applying Nested Classes<A name="0229_00B7"></FONT></h4></P>
Threaded data structures, like lists and trees, typically are implemented using at least two distinct types of objects:<P>
<UL><li>node objects that store a value along with one or more pointers to other nodes in the thread, and</li>
<li>a root object that stores a pointer to the beginning (and possibly another pointer to the end) of each thread.</li></UL>
For instance, <A href="fig1.htm">Figure 1</a>
illustrates the structure of a singly-linked list of integers. Each node object contains a single integer value and a pointer to the next node in the list. The root contains a pointer to the first node in the list, and another pointer to the last node in the list.<P>
When you build an application using a variety of threaded structures, you will probably define several different kinds of node objects &#151; one for each different threaded structure. If you don't use nested classes, you must give each node type a different name, like <I>listnode</I> or <I>treenode</I>, so they don't conflict.<P>
For example, <A href="list1.htm">Listing 1</a>
and <A href="list2.htm">Listing 2</a>
contain header files that define different threaded structures. <A href="list1.htm">Listing 1</a>
defines the node class (called <I>listnode</I>) and the root class (called <I>list</I>) for a singly-linked list of (unsigned) integer values. <A href="list2.htm">Listing 2</a>
defines the node and root classes (<I>treenode</I> and <I>tree</I>, respectively) for a binary tree of dynamically-allocated character arrays. (These classes resemble the list and tree classes I used in a cross-reference generator many moons ago. See "Your First Class," <I>CUJ</I>, May, 1991, or "Rewriting Modules as Classes," <I>CUJ</I>, July, 1991.)<P>
This <I>ad hoc</I> approach to avoiding name conflicts isn't so bad in small projects with only one programmer (or maybe even a few programmers), but such an approach quickly becomes unmanageable in a large project with many programmers. Avoiding global name conflicts gets even harder when you start using libraries from various sources in your applications.<P>
For example, lists can have many different implementations. They can be singly- or doubly-linked, and linear or circular. If your application uses, or your library supports, both singly- and doubly-linked lists, then you must use longer names to distinguish the different root and node classes &#151; names like <I>singly_-linked_list_node, SinglyLinkedListNode, SLlistnode</I>. Juggling long names like these takes some of the fun out of programming. <P>
Long names for the node types don't have to be pretty. Users of the list class are not supposed to use the node type name in their own code; they are only supposed to use the name of the root class. The node class is simply part of the (supposedly hidden) implementation of the list. Thus, you could argue that the more ugly and obscure a node type name is, the less chance there is that anyone else will use it.<P>
Making a name ugly and obscure doesn't really hide it. Users must include the header <I>list.h</I> to gain access to the list class. But the header also contains the declaration for the list node class, so the user can access it too. When you implement a list class, you should really put the node class out of the user's reach. Nesting the node class inside the list class does just that.<P>
<A href="list3.htm">Listing 3</a>
shows the <I>list</I> class definition with the <I>list</I> <I>node</I> class as a nested class. Since the <I>list node</I> class is no longer global, I shortened its name to just <I>node</I>. As a member of class <I>list</I>, its fully-qualified name, <I>list::node</I>, is sufficiently distinct. Keeping the name as <I>list::listnode</I> is overkill.<P>
<A href="list4.htm">Listing 4</a>
shows an implementation for the <I>list</I> class. It implements four simple operations:<P>
<UL><li><I>list(unsigned n)</I> (a constructor) initializes a list with <I>n</I> in it.</li>
<li><I>~list</I> (the destructor) destroys a list.</li>
<li><I>add(unsigned n)</I> adds <I>n</I> to the end of the list.</li>
<li><I>print</I> prints the contents of the list.</li></UL>
Notice that the implementation uses the name <I>node</I> without qualification. It never has to refer to the node class as <I>list::node</I>, because all the function bodies are in the scope of the <I>list</I> class, and <I>node</I> is a member of the class.<P>
<h4><FONT COLOR="#000080"><A name="0229_00B8">Making Do without Nested Classes<A name="0229_00B8"></FONT></h4></P>
C does not support nested <I>structs</I>. If you write a <I>struct</I> within a <I>struct</I>, C treats the inner <I>struct</I> as if it has been written outside the outer <I>struct</I>. That is, C treats <P>
<pre>struct outer
   {
   //...
   struct inner { /* ... */ };
   };</pre>
more or less like<P>
<pre>struct outer
   {
   // ...
   };
struct inner { /* ... */ };</pre>
Before it supported nested classes, C++ treated nested classes and <I>structs</I> the same as does C. Thus, even if you had defined class <I>node</I> inside class <I>list</I> as in <A href="list3.htm">Listing 3</a>,
 an early C++ translator would treat <I>node</I> as a non-nested (global) name.<P>
<A href="list5.htm">Listing 5</a>
illustrates a technique that C++ programmers used to prevent users of a <I>list</I> class from accessing the <I>list node</I> class, even when that <I>list node</I> class is global. <A href="list5.htm">Listing 5</a>
is essentially the same as <A href="list1.htm">Listing 1</a>,
 except that it defines <I>listnode</I> as a class, rather than as a <I>struct</I>. When <I>listnode</I> is a <I>struct</I>, its members are public. When <I>listnode</I> is a class, its members are private.<P>
Remember, in C++, a <I>struct</I> is a class. A <I>struct</I>, like a class, can contain function as well as data members. A <I>struct</I> can also contain the access specifiers public, protected, and private. The only real difference between a <I>struct</I> and a class is that <I>struct</I> members are public by default, and class members are private by default.<P>
In <A href="list5.htm">Listing 5</a>,
 not only are <I>listnode</I>'s data members private, but so is its constructor. When the constructor is private, users cannot access it. Whenever a user tries to create a <I>listnode</I> object (such as by a declaration or a <I>new</I>-expression), the translator complains that the user cannot access a private constructor.<P>
How, then, does the <I>list</I> class use the <I>listnode</I> class? The <I>listnode</I> class declares <I>list</I> as a friend. This means that every member of <I>class list</I> is a friend of <I>class listnode</I>. Thus, members of <I>class list</I> can invoke the <I>listnode</I> constructor when creating <I>listnode</I> objects.<P>
Although this <I>friend</I> class technique prevents users from accessing the <I>listnode</I> objects directly, it doesn't prevent the name <I>listnode</I> from conflicting with other global declarations for the name <I>listnode</I>. Thus, I recommend using nested classes (as in <A href="list3.htm">Listing 3</a>)
.<P>
Nested classes are now widely, but still not universally, available. Thus many of you probably won't need to use this <I>friend</I> class technique, but others may find it in older code that you have to use or maintain. You may also encounter it in older C++ books and articles.<P>
<h4><FONT COLOR="#000080"><A name="0229_00B9">Declaring Out-of-Line Members<A name="0229_00B9"></FONT></h4></P>
The nested node class in <A href="list3.htm">Listing 3</a>
defines only a single member function &#151; a constructor. That constructor has only a short initializer list and an empty body, so it's convenient to just define the function inline inside the class. In general, however, I discourage defining member functions inside class definitions. In all but the most trivial classes, it leads to cluttered, hard-to-read class definitions.<P>
You can define member functions for nested classes outside the class definition. You write the definitions at file scope and refer to each function using its fully-qualified name. For example, <A href="list6.htm">Listing 6</a>
shows <I>list.h</I> rewritten with the  <I>list::node</I> constructor defined outside the class. The function definition identifies the constructor as <I>list::node::node</I>. If <I>list::node</I> had a destructor, it would be defined as <P>
<pre>list::node::~node()
   {
   // ...
   }</pre>
<h4><FONT COLOR="#000080"><A name="0229_00BA">Nested Types and Constants<A name="0229_00BA"></FONT></h4></P>
Not only can you nest classes inside classes, you can also nest <I>typedefs</I> and enumerations. Like nested classes, nested types and enumerations are subject to access control.<P>
For example,<P>
<pre>class shape
   {
public:
   enum palette { RED, GREEN, BLUE };
   shape(palette c) : color(c) { }
   palette color() { return _color; }
   // ...
private:
   palette _color;
   // ...
   };</pre>
defines type <I>palette</I> as a nested type (a type member) of <I>class shape</I>. It also defines the constants <I>RED, GREEN</I>, and <I>BLUE</I> as member constants. Since the <I>enum</I> declaration is public, you can access the type name or any of the constants outside <I>class shape</I> using their fully-qualified names. For example, <P>
<pre>shape s(shape::GREEN);
shape::palette c = shape::RED;</pre>
or even<P>
<pre>if (s.color() != shape::BLUE)</pre>
There's a subtle difference between a member constant and a <I>const</I> data member. An enumeration constant like <I>shape::BLUE</I> is a member constant, but <I>MAX</I> declared in <P>
<pre>class X
   {
public:
   const size_t MAX;
   // ...
   };</pre>
is a <I>const</I> data member. You can use <I>shape::BLUE</I> in a constant expression (like the dimension of an array, or a case label), but you can't use <I>MAX</I> that way. Furthermore, you can't specify a value for <I>MAX</I> by writing <P>
<pre>class X
   {
public:
   const size_t MAX = 100; // error
   X();
   // ...
   };</pre>
You must initialize <I>MAX</I> using an initializer in a constructor, as in<P>
<pre>X::X() : MAX(100) { }</pre>
If you need to use <I>MAX</I> in constant expressions, simply define <I>MAX</I> as an enumeration constant, as in<P>
<pre>class X
   {
public:
   enum { MAX = 100 }; // clever
   // ...
   };</pre>
so that <I>X::MAX</I> is a member constant rather than a <I>const</I> data member.<P>
<h4><FONT COLOR="#000080"><A name="0229_00BB">Static Members<A name="0229_00BB"></FONT></h4></P>
C++ defines rules by which a nested class may refer to identifiers declared in enclosing classes. These rules involve static data and function members, which I'll explain by the following example.<P>
Suppose you want to track the number of list objects in existence at any given time in the execution of your program. Simply define a counter called <I>list_count</I>, initialized to zero, that counts the number of objects. Then, add a statement to the list constructor to increment the counter, and add another statement to the destructor to decrement the counter, as shown in <A href="list7.htm">Listing 7</a>.
<P>
Notice that <I>list_count</I> is a global variable that exists outside <I>class list</I>. As always, you should avoid using global variables, but you can't make the counter an ordinary data member of the list class. If you did, you'd get a copy of a different counter in each list object. That just won't work. The variable must be statically allocated and separate from every list object so that there's one &#151; and only one &#151; counter for all list objects. But it should be in the scope of the class so it doesn't conflict with other global names.<P>
Static data members solve this dilemma. A static data member is not part of each class object; it's a separate data member shared by all objects of its class. A static data member is in the scope of its class and is subject to access control.<P>
For <I>class list</I>, you write<P>
<pre>class list
   {
public:
   list(unsigned n);
   ~list();
   // ...
   static unsigned count;
private:
   // ...
   };</pre>
which declares <I>count</I> as a static member of <I>list</I>. The <I>list</I> constructor and destructor can refer to that static member as just <I>count</I>.<P>
<I>count</I> is public, so non-member functions can access it using its fully-qualified name, <I>list::count</I>, as in<P>
<pre>printf("# of list objects = %u\n", list::count);</pre>
Unfortunately, since it is public, non-member functions can also modify <I>list::count</I> and invalidate the count. Thus, you should declare <I>count</I> private, and write a public member function, <I>howmany</I>, that returns the current <I>count</I>:<P>
<pre>unsigned list::howmany()
   {
   return count;
   }</pre>
Hence, a non-member function can only inspect the count by calling <I>L. howmany</I>, where <I>L</I> is some list object. This protects <I>list::count</I> from unauthorized access, but forces users to keep an extra list object lying around just so they can call <I>howmany</I>.<P>
The problem is that <I>howmany</I> is an ordinary member function. An ordinary member function always has a hidden extra argument &#151; the object addressed by its <I>this</I> pointer. But <I>howmany</I> doesn't need a <I>this</I> pointer to locate <I>list::count</I> because <I>list::count</I> is not in a <I>list</I> object.<P>
Rather, declare <I>howmany</I> as a static member function, as shown in <A href="list8.htm">Listing 8</a>.
 A static member function does not have a <I>this</I> pointer, so it cannot access ordinary data members, but it can access static data members. Thus, you don't need a list object to call <I>howmany</I>. You simply call it by its full name, as in<P>
<pre>printf("# of list objects = %u\n", list::howmany());</pre>
If you wish, you can still call <I>L.howmany</I> (where <I>L</I> is a list object). The translator only uses <I>L</I> to determine <I>howmany</I>'s class type; it does not bind a <I>this</I> pointer to <I>L</I>'s address.<P>
The declaration of a static data member inside a class is only a declaration. The definition (and initialization) of the static member appears elsewhere, typically in a source file along with other members of the class. For <I>list::count</I>, the definition looks like<P>
<pre>unsigned list::counter = 0;</pre>
as shown in <A href="list9.htm">Listing 9</a>.
 For completeness, <A href="list9.htm">Listing 9</a>
also contains the member function definitions for the <I>list</I> class definition in <A href="list8.htm">Listing 8</a>.
<P>
<h4><FONT COLOR="#000080"><A name="0229_00BC">Accessing Members<A name="0229_00BC"></FONT></h4></P>
A nested class is in the scope of its enclosing class. This means that the name of the nested class is local to the enclosing class, and that the nested class may refer to identifiers declared in the enclosing class.<P>
If an unadorned identifier referenced in a nested class member function refers to a name in an enclosing class, that name must be a type name (a class, <I>typedef</I>, or enumeration type), a member constant (an enumerator), or a static data member. By an unadorned identifier, I mean an identifier not preceded by <I>x</I>. (where <I>x</I> is an object or reference), or by <I>p</I>-&gt; (where <I>p</I> is a pointer). An unadorned name in a nested class member function cannot refer to an ordinary data or function member.<P>
For example, function <I>X::Y::f</I> in <A href="list10.htm">Listing 10</a>
cannot access <I>X::i</I> because it doesn't have any objects of type <I>X</I> handy. The translator tries to interpret an unadorned reference to a non-static class member as a reference via a <I>this</I> pointer. But <I>f</I>'s <I>this</I> pointer points to an object of type <I>X::Y</I>, not <I>X</I>.<P>
A nested class is not necessarily part of its enclosing class. For example,<P>
<pre>X::Y xy;</pre>
declares <I>xy</I> as an <I>X::Y</I> object, separate from any <I>X</I> object. The call <I>xy.f</I> only provides <I>f</I> with access to an <I>X::Y</I> object. It has no <I>X</I> object in which to find non-static member <I>i</I>.<P>
On the other hand, <I>X::s</I> is static. It exists apart from all <I>X</I> objects, <I>so X::Y::f</I> needs no objects of type <I>X</I> to access <I>X::s</I>.<P>
A nested class has no special access rights to members of its enclosing class, and an enclosing class has no special access rights to members of a nested class. In other words, unless granted <I>friendship</I> by its enclosing class, a nested class cannot access private or protected members in the enclosing class. Similarly, unless granted <I>friendship</I> by its nested class, an enclosing class cannot access private or protected members in the nested class.<P>
<h4><FONT COLOR="#000080"><A name="0229_00BD">Forward Declarations<A name="0229_00BD"></FONT></h4></P>
With all this as background, I now describe the extension to allow forward declaration of nested classes. In and of itself, the extension is quite simple.<P>
As described in the <I>ARM</I>, a nested class must be completely defined inside its enclosing class. But, a single enclosing class with many nested classes is usually difficult to read and maintain. This extension lets you simply declare the nested classes inside the enclosing class, and then define them later.<P>
For example, when this feature becomes available, you should be able to unravel <P>
<pre>class X
   {
   class Y
     {
     // definition of class X::Y ...
     };
   class Z
     {
     // definition of class X::Z ...
     };
   // ...
   };</pre>
into the somewhat cleaner form<P>
<pre>class X
   {
   class Y; // declaration of X::Y
   class Z; // declaration of X::Z
   // ...
   };

class X::Y
   {
   // definition of class X::Y...
   };

class X::Z
   {
   // definition of class X::Z ...
   };</pre>
<h4>References</FONT></h4></P>
Ellis, Margaret A. and Stroustrup, Bjarne. 1990. <I>The Annotated C++ Reference Manual</I>. Reading, MA: Addison-Westley.<P>

<h4><a href="../../../source/1993/jul93/saks.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
