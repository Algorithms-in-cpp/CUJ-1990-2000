

<HTML>
<HEAD>

<TITLE>July 1993/Varying Floating-Point Precision</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjul.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">Varying Floating-Point Precision<A name="0221_00AD"><A name="0221_00AD"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0221_0000"><A name="0221_0000">William Smith</font></h3><hr><blockquote><P>
<P><i><A name="0221_0000"><A name="0221_0000">William Smith is the engineering manager at Montana Software, a software development company specializing in custom applications<I></I><B> <I></B></I>for MS-DOS and Windows. You may contact him by mail at P.O. Box 663, Bozeman, MT 59771-0663.</i></P><P>
Most C compilers support two different floating-point (real<B> </B>number) representations, the types <B></B><I>loat</I> and <I>double</I>. Some<B> </B>compilers, such as Microsoft C/C++ (MSC) and Borland<B> </B>C++ (BC), support a third type <I>long double</I>.<P>
The choice of which floating-point type best matches an<B> </B>application's requirements for real number representation <B> </B>frequently confronts the programmer. Traditionally, the most<B> </B>popular choice and default floating-point type has been the<B> </B>type <I>double</I><I>.</I> This type is not necessarily the best choice,<B> </B>however. An embedded application may be space limited, putting<B> </B>a premium on the small size offered by the <B></B><I>loat</I> type.<B> </B>Another application may require extremely high accuracy, <B> </B>putting a premium on the high precision sometimes offered by<B> </B>the <I>long double</I> type.<P>
The three different real number types represent a broad<B> </B>choice. There are significant tradeoffs between them. The <B> </B>differences in size are obvious. On a PC, the <B></B><I>loat</I> type is four<B> </B>bytes, <I>double</I> is eight bytes, and <I>long double</I> is ten bytes. For<B> </B>situations where a program stores large amounts of data in<B> </B>memory as arrays or matrices, or on disk in binary files, the<B> </B>space savings of using <I>float</I> can be substantial.<P>
Determining the effects on accuracy caused by the  differences in precision between the three types is less obvious. Testing of an actual application helps expose differences in accuracy. <A href="tab1.htm">Table 1</a>
lists the sizes and precision of the floating-point types, in terms of significant decimal digits and a factor called <I>epsilon</I><I>.</I> Epsilon is the smallest number that, when added to the value 1.0, creates a new number that is greater than 1.0.<P>
High precision does not guarantee high accuracy or correctness. Accuracy is not the same as precision. A type has fixed precision, but each computed value can have different  accuracy. Accuracy depends not only on precision but on what a program does with a particular value of a floating-point type.<P>
Besides size and accuracy, the floating-point types also differ in how they affect the performance of a program. The effects on speed are even less obvious than accuracy, and usually require some testing.<P>
The ideal way to measure the differences between the three types is to create different precision versions of the same program. With a small amount of effort, you can write your  application, or modify an existing application, so the floating-point type is changeable at compile time. What better way to determine the effects on an application of using different floating-point types then by exercising different precision  versions of the same program?<P>
This article presents some techniques you can employ to change the choice of floating-point types at compile time. A single include file, <I>real_t.h</I>, shown in <A href="list1.htm">Listing 1</a>,
 does all the needed preprocessor gymnastics to make different precision versions of the same application.<P>
The techniques employed by <I>real_t.h</I> are limited to choosing among the standard predefined types. If you need a different type than the standard ones, my suggestion is to create new types using C+ +. With some effort, you can create anything from a two-byte real to a BCD (binary-coded decimal) math package. Creating a new type using C+ + affords complete control over the size and the implementation details of the math it employs.<P>
<h4><FONT COLOR="#000080"><A name="0221_00AE">Redefining Types<A name="0221_00AE"></FONT></h4></P>
There are two approaches to  creating different precision versions of the same program. The first is to use the preprocessor and redefine the standard types. To create a single precision  version of an existing program that uses <I>double</I><I>,</I> just define <I>double</I> to be <I>float</I><I>:</I><P>
<pre>#define double float</pre>
The purist may consider this an abusive preprocessor tactic, but it works. For starters, you can use this method to convert a program from one type to another. The only limitation is that you do not have complete control if you desire to mix more than one type in the same module.<P>
Another way is to use a generic floating-point type that is set at compile time:<P>
<pre>typedef float real_t;</pre>
This method is much cleaner, but it  requires you to use this generic type  instead of the standard types. If you do use the generic type, it affords greater control and flexibility than just  redefining the standard types. The most obvious advantage of the generic type is that you can mix types in a single module. Redefining all types to a  common type prevents using mixed precision.<P>
The include file <I>real_t.h</I> supports a combination of both approaches. It creates a generic type, <I>real_t</I><I>.</I> It will also redefine <I>float, double</I><I>,</I> and <I>long </I><I>double</I> to <I>real_t</I> unless you specify that your code uses more than one type (mixed precision). For example, when setting the generic floating-point type to <I>float, real_t.h</I> does the following:<P>
<pre>typedef float real_t;
#define double real_t;
typedef long double long_double;
#define long_double real_t;
#define long</pre>
Note the creation of the type <I>long_double</I> and the defining of <I>long</I> to nothing. This is a kludge to overcome the inability to define <I>long double</I> to <I>real_t</I> directly. Unfortunately C does not allow you to define a combination of tokens. You can not simply define <I>long double</I> to something different. You have to define <I>long</I> and <I>double</I> separately. Defining <I>long</I> to nothing has side effects with other non-floating-point types. I am open to suggestions of possible solutions to this problem with <I>long double</I>.<P>
<h4><FONT COLOR="#000080"><A name="0221_00AF">Effects on &lt;<B><I>math.h</I></B>&gt;<A name="0221_00AF"></FONT></h4></P>
Redefining floating-point types has repercussions on the standard math function prototypes in <I>&lt;math.h&gt;</I><I>.</I> Using a generic type also impacts these standard math library  functions. Changing floating-point types generally requires macro wrappers for all the math functions in <I>&lt;math.h&gt;. real_t.h</I>, takes care of these problems by creating macros for all the floating-point functions. The macro wrappers ensure that a program using a math function calls the right function. In the case where the same function supports more than one precision, the macros in <I>real_t.h</I> cast the return value and parameters correctly.<P>
In addition to ensuring that the proper precision version of a particular function is called, macros wrappers for all the functions in <I>&lt;math.h&gt;</I> yield an opportunity for embedding debugging code in an application. (See "Debugging with Macro Wrappers", <I>CUJ</I>, October 1992.) Pinpointing what line of source code caused a floating-point exception is easy by using the predefined macros __<I>FILE</I>__ and __<I>LINE</I>__, along with parameter checking of the standard math functions.<P>
You can also make safe versions of the standard math  functions by checking for out-of-range parameters. One fixup for such a parameter is to substitute a default result that is in range. This will hide the problem, of course. But you can also trap the error and report it, then use such a substitution to recover gracefully.<P>
<h4><FONT COLOR="#000080"><A name="0221_00B0">Effects on <B><I>&lt;float.h&gt;</I><A name="0221_00B0"></B></FONT></h4></P>
Just as the function prototypes in <I>&lt;math.h&gt;</I> needed some adjustment, the constants defined in <I>&lt;float.h&gt;</I> also need adjustment to account for different precision. <I>real_t.h</I> defines a new set of constants that begin with <I>REAL</I><I>_.</I> You use these  constants with the generic type <I>real_t. real_t.h</I> sets these  constants to the appropriate values of <I>FLT</I>_, <I>DBL</I>_, or <I>LDBL</I>_, depending on the desired precision. <I>real t.h</I> also redefines all the <I>FLT</I><I>_,</I><I> DBL</I><I>_</I>, and <I>LDBL</I><I>_</I> constants if you are not using mixed precision.<P>
<h4><FONT COLOR="#000080"><A name="0221_00B1">Manifest Constants<A name="0221_00B1"></FONT></h4></P>
When dealing with different floating-point types, there are even caveats concerning constant data and how to declare constants, so you can modify the precision at which the compiler stores constants in a program.<P>
To prevent conversion and possible loss of accuracy, the precision of manifest constants should match the precision of any floating-point variables that use them. Casting constants upon assignment may eliminate a compiler's warning that a conversion is taking place, but it does not ensure the program stored the constant in the program file the way you may desire. For example,<P>
<pre>long double x = (long double)0.1;</pre>
is not the same as nor as accurate as:<P>
<pre>long double x = 0.1L;</pre>
To ensure that a compiler stores constants in the same precision as the floating-point type, <I>real_t.h</I> uses a string-pasting macro. The version for storing manifest constants as <I>floats</I> is:<P>
<pre>#define RC( x ) ( x##F )</pre>
And the version for storing manifest constants as <I>long doubles</I> is:<P>
<pre>#define RC( x ) ( x##L )</pre>
The macro <I>RC(x)</I> provides a mechanism for adjusting the precision of constants as you change the type. <I>real_t.h</I> defines the macro <I>RC</I> to match the desired floating-point type. The only limitation to <I>RC</I> (actually just an inconvenience) is that you have to use the macro.<P>
In a similar fashion, you may wish to define a format code for the <I>print</I><I>f</I> family of functions. This format code would change based upon the precision of the generic type <I>real_t</I><I>.</I><P>
<h4><FONT COLOR="#000080"><A name="0221_00B2">Parameter Passing<A name="0221_00B2"></FONT></h4></P>
A compiler may employ different mechanisms for passing and returning floating-point values from functions, possibly depending on compile-time options and data sizes. In the case of MSC, the compiler uses a global location called the floating point accumulator (_<I>fac</I>) for functions that return either <I>f</I><I>loats</I> or <I>doubles</I><I>.</I> MSC uses the numeric data processor (NDP) stack for functions that return <I>long double</I><I>.</I> BC uses the NDP stack regardless of the type of floating-point number. MSC further complicates matters by employing a hidden pointer parameter for functions that you declare with the <I>_pascal</I> calling convention instead of <I>_</I><I>cdecl</I>.<P>
Most of the time this behavior does not matter and is hidden from the programmer. About the only time this will become a concern is when you are creating a dynamic link library (DLL) for Microsoft Windows and are exporting functions from the DLL that return floating-point types. Since DLLs have a different data segment than the calling application, but share the same stack, there can be a bit of confusion. It can be hard to guess, for example, what segment the hidden pointers point to, or contains the floating point accumulator, or contains the NDP stack. The best way to avoid problems for Windows DLLs that export functions returning floating-point types is to use _<I>pascal</I> calling convention and the large memory model.<P>
<h4><FONT COLOR="#000080"><A name="0221_00B3">Using <B><I>real_t.h</I><A name="0221_00B3"></B></FONT></h4></P>
To use<I> real_t.h</I> with an existing program, just add the line:<P>
<pre>#include "real_t.h"</pre>
You should include <I>real_t.h</I> after you list all the standard library headers that a module needs. If your program makes any calls to the standard library math functions declared in &lt;<I>math.h</I>&gt;, the program must include <I>&lt;math.h&gt;</I> before <I>real_t.h</I><I>.</I> If your program uses any of the manifest constants defined in <I>&lt;float.h&gt;</I>, the program must include &lt;<I>float.h</I>&gt; before <I>real_t.h</I>.<P>
<I>real_t.h</I> reacts to and modifies its behavior in response to six different constants. You can define these constants on the compiler command line or inside your program. Either way, you must define them before you program includes the file <I>real_t.h</I>. The first three are <I>REAL_????</I>, where <I>????</I> is either <I>FLT</I>, <I>DBL</I>, or <I>LDBL</I>. These three constants control what the default floating-point precision is. <I>REAL_FLT</I> is <I>float,</I><I> REAL_DBL</I> is <I>double</I>, and <I>REAL_LDBL</I> is <I>long double</I>. If an application does not define one of these three constants and still includes <I>real_t.h, REAL_DBL</I> is assumed. This results in designating <I>double</I> as the default floating-point type <I>real_t</I>.<P>
The constant <I>REAL_MP</I> determines if existing standard types get redefined. If you define <I>REAL_MP</I>, your program desires mixed precision. The existing standard types do not get redefined to the desired floating-point type. Defining <I>REAL_MP</I> also prevents the constants in <I>float.h</I> from getting redefined.<P>
The constant <I>REAL_NL</I> controls whether the standard keyword <I>long</I> gets redefined. To convert the <I>long double</I> type to another type requires defining <I>long</I> to nothing. If you define <I>REAL_NL</I> and do not define <I>REAL_MP</I>, then <I>long</I> gets defined to nothing.<P>
<pre>/* kludge for long double */
#if defined ( REAL_NL ) &amp;&amp; !defined ( REAL_MP )
#define long
#endif</pre>
The constant <I>REAL_SAFE</I> causes <I>real_t.h</I> to wrap the <I>log</I><I>, </I><I>log10, pow</I>, and <I>sqrt</I> functions in safe parameter-checking macros. This demonstrates how to implement a safe version of some (not all) of the math functions.<P>
<h4><FONT COLOR="#000080"><A name="0221_00B4">Comparing Precisions<A name="0221_00B4"></FONT></h4></P>
There are two test programs (<I>REAL_L2.C</I> in <A href="list2.htm">Listing 2</a>
and <I>REAL_L3.C</I> in <A href="list3.htm">Listing 3</a>)
 that demonstrate the effects of different precision. They give some "real world" indications of the effects that floating-point precision has on speed and accuracy. The size differences between the three different floating-point types are obvious, so the programs do not demonstrate differences in size.<P>
<A href="tab2.htm">Table 2</a>
summarizes the results of running <A href="list2.htm">Listing 2</a>
for <I>float, double</I>, and <I>long double</I> types. <A href="tab3.htm">Table 3</a>
lists similar results for running <A href="list3.htm">Listing 3</a>.
<P>
I compiled the programs using MSC with the compiler options<P>
<pre>/FPi87 /0d /DREAL_????</pre>
The first option forces the use of a math co-processor. The second prevents code optimization. The third defines either the constant <I>REAL_FLT</I>, <I>REAL_DBL</I>, or <I>REAL_LDBL</I>. This is how you adjust the precision at compile time. You will probably see different results using a different compiler or different compiler options, such as for a co-processor emulator version. Although interesting, analyzing all the possible combinations would soon balloon into a project larger than I can concisely summarize in a single article.<P>
For both <A href="list2.htm">Listing 2</a>
and <A href="list3.htm">Listing 3</a>,
 the error value represents the accumulated error due to lack of accuracy. Ideally, the error should be 0.0. For simplicity and to facilitate timing, I obtained the value of error using a debugger instead of using <I>printf</I><I>.</I><P>
The time is in seconds. Times are for testing on a 20MHz 386 with a math co-processor. Smaller numbers represent faster better performance.<P>
<h4><FONT COLOR="#000080"><A name="0221_00B5">Speed<A name="0221_00B5"></FONT></h4></P>
The speed differences are interesting. The results of testing <A href="list2.htm">Listing 2</a>
indicates the performance degrades as the precision increases. <A href="list3.htm">Listing 3</a>
results shows the opposite &#151; the performance increases as the precision increases. This may seem like conflicting data, but I came up with a explanation that makes sense. At least to me.<P>
My interpretation of the results is that the larger the size the more overhead in basic assignment operations. <A href="list2.htm">Listing 2</a>
emphasizes simple operations and asassignments. The <I>float</I> version is the fastest because <I>floats</I> are smaller, resulting in less physical memory being pushed around.<P>
In the case of <A href="list3.htm">Listing 3</a>,
 the <I>long</I><I> </I><I>double</I> version is the fastest. This is due to the fact that <I>long double</I> is the native type for the math co-processor. Using the native <I>long double</I> when calling the math functions eliminates the need to convert from one type to another. Type <I>float</I> is the slowest because the program must not only repeatedly convert from <I>long double</I> to <I>double</I> but also from <I>double</I> to <I>float</I>. Consequently, a program that makes a lot of use of the math functions in <I>&lt;math.h&gt;</I> may see some speed improvement with the <I>long double</I> type.<P>
I base these conclusions solely upon the data generated by <A href="list2.htm">Listing 2</a>
and <A href="list3.htm">Listing 3</a>.
 To get a clear perspective on how a specific compiler treats different types would entail disassembling the compiled code.<P>
<h4><FONT COLOR="#000080"><A name="0221_00B6">Accuracy<A name="0221_00B6"></FONT></h4></P>
Accuracy improves with precision. This is no surprise. In the case of <A href="list2.htm">Listing 2</a>,
 the difference in magnitude between the error for <I>float</I> versus <I>double</I> is about the same as the difference between <I>FLT_EPSILON</I> and <I>DBL_EPSILON</I>. This means that <I>FLT_EPSILON</I> divided by <I>DBL_EPSILON</I> is about the same value as the error for the <I>float</I> version divided by the error for the <I>double</I> version.<P>
The same is true for the <I>long double</I> type compared to the <I>double</I> or the <I>f</I><I>loat</I>. The difference in magnitude is about the same as the difference in magnitude between <I>LDBL_EPSILON</I> and <I>DBL_EPSILON</I> or <I>FLT_EPSILON</I><I>.</I> In the case of <A href="list2.htm">Listing 2</a>,
 accuracy is directly related to precision.<P>
This relationship does not hold true for <A href="list3.htm">Listing 3</a>.
 <A href="list3.htm">Listing 3</a>
tests the accuracy of one of the math functions, <I>sqrt</I>. I am tempted to conclude that the loss of accuracy in <A href="list3.htm">Listing 3</a>
occurs mainly in the <I>sqrt</I> function and in any type conversion in calling the <I>sqrt</I> function. Hence, the differences between the error results are due to the differences between the two functions <I>sqrt</I> and <I>sqrtl</I><I>.</I> Since there is not a <I>f</I><I>loat</I> version of the <I>sqrt</I> function, both the <I>float</I> and the <I>double</I> version use the same function, <I>sqrt.</I> It is not surprising then that the corresponding versions generated the same amount of error.<P>
The <I>long double</I> type has its own function <I>sqrtl</I>. It would be interesting, from the standpoint of both accuracy and speed, to see the effect of using the long version with the other precisions. In the case of <A href="list3.htm">Listing 3</a>,
 accuracy did not improve when going from type <I>f</I><I>loat</I> to the higher precision type <I>double</I>. It did improve by going to the <I>long double</I> type.<P>
<h4><FONT COLOR="#000080"><A name="0221_00B7">Conclusions<A name="0221_00B7"></FONT></h4></P>
Real numbers in the world of  computers are an oxymoron. The type <I>double</I> can represent roughly 264 different real numbers. These numbers are spread out between the limits &#151; <I>DBL_MIN</I> and <I>DBL_MAX</I>. This is rather limited. By definition, there are actually an infinite number of different numbers between any two different real numbers you can name &#151; even if they are very close together. Likewise, a binary representation of some real numbers, (0.1, 1/3 etc.) is truly just an approximation. So by definition, working with real numbers in the binary world is limited in accuracy.<P>
Fortunately, imperfect accuracy is "good enough" most of the time. And for situations that require varying  "goodness," there are three different floating-point types in C that one can use. Deciding which type is the best match for a specific application requires an assessment based upon the size, speed, and accuracy needs of the application.<P>
The best way to determine what type is best is to test different precision versions of an application. The include file <I>real_t.h</I> provides the tools to easily switch floating-point types at compile time. It uses some aggressive and uncommon macro and preprocessor tactics, but it can even help existing applications change precision at compile time.<P>
So instead of just using the default type <I>double</I>, try experimenting your code with the three different floating-point representations that most modern C and C++ compilers offer. There are usually advantages of one type over the others when addressing specific applications needs<P>

<h4><a href="../../../source/1993/jul93/smith.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
