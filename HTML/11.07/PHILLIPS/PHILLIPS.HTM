

<HTML>
<HEAD>

<TITLE>July 1993/A Revision Control System for MS-DOS</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjul.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Software Tools</FONT></H2>

<hr><h2 align="center"><font color="#800000">A Revision Control System for MS-DOS<A name="01C2_00A7"><A name="01C2_00A7"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="01C2_0000"><A name="01C2_0000">Dwayne Phillips</font></h3><hr><blockquote><P>
<P><i><A name="01C2_0000"><A name="01C2_0000">The author works as a computer and electronics engineer with the U.S. Department of Defense. He has a PhD in Electrical and Computer Engineering from Louisiana State University. His interests include computer vision, artificial intelligence, software engineering, and programming languages.</i></P><P>
Have you ever wanted to go back to a version of a program you wrote six months ago? You've changed the program, thrown out your printouts, written over your backup floppies, and you have no hope of retrieving the version you want. A revision control system can solve this problem for you. A revision control system (RCS) allows you to save source code as you develop it and retrieve any past version later.<P>
This article discusses and implements a simple revision control system for MS-DOS. It shows how an RCS can help you in your work, demonstrates the basic commands, and looks at the source code for the RCS. The RCS written by Walter Tichy (Sept. 1982, July 1985) for UNIX systems inspired this work.<P>
<h4><FONT COLOR="#000080"><A name="01C2_00A8">Benefits of an RCS<A name="01C2_00A8"></FONT></h4></P>
Programmers and authors need a revision control system because source code and documentation change constantly. We are always adding or removing a feature from a program, then often change our minds about a revision. We sometimes need to go back to a feature we had months ago, but have since deleted. Unfortunately, that feature is gone forever and will take a week to recreate.<P>
Revisions cannot be tracked by regular backups. Backups use the same name for the copy and the original, but you need different identifiers for different versions. Backups do not help if your source changed several times between backups. You lose the intermediate versions. Backups do not explain why and how your source changed. And the greatest deficiency, backups lose the versions that are older than your oldest backup.<P>
An RCS is a simple answer to these problems. An RCS keeps all of the old versions of your source, and records when and why you made the changes. It keeps these in a separate RCS file in a separate directory out of harm's way. You can retrieve any previous version of your source and use it. When you do your weekly backup, backup the current source code files and the RCS files.<P>
<h4><FONT COLOR="#000080"><A name="01C2_00A9">Processing a File<A name="01C2_00A9"></FONT></h4></P>
The RCS presented here has six separate programs. They are:<P>
<UL><li><I>checkin</I></li>
<li><I>checkout</I></li>
<li><I>revlog</I></li>
<li><I>revdiff</I></li>
<li><I>revup</I></li>
<li><I>prunerev</I></li></UL>
I will process an example, <I>a_file</I> (<A href="fig1.htm">Figure 1</a>)
, to illustrate how each command works and helps keep track of revisions.<P>
You begin by checking <I>a_file</I> into the RCS. Type:<P>
<pre>checkin a_file</pre>
<I>checkin</I> prompts you to enter comments or header lines and then puts the first version of <I>a_file</I> into its own RCS file. The RCS file is in an RCS directory below the current directory as shown in <A href="fig2.htm">Figure 2</a>.
 <I>checkin</I> inserts the letter <I>v</I> before the filename and uses <I>va_file</I> as the name for <I>a_file'</I>s RCS file.<P>
<I>checkin</I> removed <I>a_file</I> from the current directory (moved it out of harm's way), so before revising, you must check it back out. Check out <I>a_file</I> by typing: <P>
<pre>checkout a_file</pre>
<I>checkout</I> reads the RCS file for <I>a_file</I> and brings back the original text. You can edit <I>a_file</I> (such as the small change shown in <A href="fig3.htm">Figure 3</a>)
, then check the changed <I>a_file</I> back in by typing: <P>
<pre>checkin a_file</pre>
<I>checkin</I> prompts for header lines and stores the new version of <I>a_file</I> in its RCS file. <I>checkin</I> retains the prior versions and header lines for <I>a_file</I>.<P>
The <I>revlog</I> command displays the header lines and dates of all revisions for a file. <A href="fig4.htm">Figure 4</a>
shows the output of  typing <I>revlog a_file</I>. It lists the information for three versions of <I>a_file</I>.<P>
The <I>revdiff</I> command displays the difference between the current copy of a file and any version that you checked into the RCS file. <A href="fig5.htm">Figure 5</a>
shows the difference between the current file and the latest version in the RCS file after typing <I>revdiff a_file</I>.<P>
The next two commands &#151; <I>revup</I> and <I>prunerev</I> &#151; help you maintain your RCS files. <I>revup</I> allows you to move up the latest version to any number you desire. If you use <I>a_file</I> with several other files and you wanted them all to be at version 10, you would type <I>revup a_file</I> <I>10</I>. <A href="fig6.htm">Figure 6</a>
shows how the revision log would appear after using <I>revup</I>. This permits you to keep related files coordinated at a desired version number.<P>
The <I>prunerev</I> command deletes unwanted versions from the RCS file. The RCS file could grow too large over time. <I>prunerev</I> prunes or reduces the RCS file by deleting versions you select. <A href="fig7.htm">Figure 7</a>
shows the revision log for <I>a_file</I> after pruning the initial version with <I>prunerev a_file 1</I>. Use <I>prunerev</I> with caution. Once you prune a version from the RCS file it is gone and you cannot retrieve it. <P>
<h4><FONT COLOR="#000080"><A name="01C2_00AA">Implementation<A name="01C2_00AA"></FONT></h4></P>
<A href="fig8.htm">Figure 8</a>
shows the format of the RCS files. The first line is a <I>FIRST_LINE</I> constant. The next lines hold the version number and the date you checked the version into the RCS system. The next section holds the header lines you enter when you call <I>checkin.</I> The header lines section ends with a line containing a <I>DELlMETER</I> constant. The next part contains the complete text of the source code or document and ends with another line containing the <I>DELIMETER</I> constant. The next version begins with the <I>FIRST_LINE</I> constant and continues like the first.<P>
<A href="fig9.htm">Figure 9</a>
shows the RCS file for the <I>a_file</I> example given earlier. It holds three versions of <I>a_file</I>. You can see the <I>FIRST_LINE</I> constant, version number, date, header lines, <I>DELIMETER</I> constant, and so on for each of the three versions.<P>
Note, this RCS only works for text files because it reads and writes lines of text. It will not work with executables or data files in its present form.<P>
I wrote the programs in C using Microsoft's version 6.0 compiler. The code does not contain any compiler dependent statements so it should port to other C compilers easily. The include file (<A href="list1.htm">Listing 1</a>)
 includes the needed <I>.h</I> files and defines the <I>FIRST_LINE</I> and <I>DELIMETER</I> constants. The <I>FIRST_LINE</I> and <I>DELIMETER</I> constants would probably not appear in any normal text.<P>
<A href="list2.htm">Listing 2</a>
contains the <I>checkin</I> program. The command line is <I>checkin [-l] source-file</I>. <I>checkin</I> asks you for header lines, then writes these and the text of the source file into the RCS file. If you enter <I>checkin a_file, checkin</I> checks in <I>a_file</I> and removes it from the current directory (moves it out of harm's way). If you enter <I>checkin -l a_file, checkin</I> checks in <I>a_file</I> and leaves it for further editing. <P>
The first section of <I>checkin</I> interprets the command line. The call to <I>create_rcs_file_name</I> (<A href="list8.htm">Listing 8</a>)
 constructs the name of the RCS file. (<I>rcsutil.c</I> in <A href="list8.htm">Listing 8</a>
holds functions common to several of the RCS programs.) If the RCS file does not exist (<I>result == -1</I>), <I>checkin</I> creates it, gets the header lines from the user, and copies the input file to the RCS file. If the RCS file does exist (<I>result == 0</I>), <I>checkin</I> reads the latest version number from the RCS file, increments  the version number, and copies the input file to the RCS file. <I>checkin</I> copies via a temporary file. <I>checkin</I> copies the input file to the temporary file by calling <I>copy_source_to_rcs</I>, and then the RCS file to the end of the temporary file. <I>checkin</I> closes the input, RCS, and temporary files, uses DOS to copy the temporary file to the RCS file, and then deletes the temporary file. If desired (<I>leave_source == 0</I>), <I>checkin</I> removes the input file.<P>
The other functions in <A href="list2.htm">Listing 2</a>
are short utilities used by <I>checkin</I>. <I>copy_source_to_rcs</I> copies lines of text from one file to another. <I>get_latest_ revision_number</I> reads two lines of text and converts the second from a string to a number.<P>
<A href="list3.htm">Listing 3</a>
shows the <I>checkout</I> program. The command line is <I>checkout [-r#] source-file [output-file]</I>. <I>checkout</I> will pull any version already in the RCS file and place it in either the source file or an output file of a different name. For example, <I>checkout -r3 a_file b_file</I> pulls the third version of <I>a_file</I> from the RCS file and places it in <I>b_file</I>. If you do not specify <I>-r#</I>, <I>checkout</I> pulls the newest version from the RCS file. If you do not specify an output file, <I>checkout</I> puts the version in the source file.<P>
The first section of <I>checkout</I> interprets the command line to determine which version to check out and which destination to use. After this, checkout calls <I>create_rcs_file_name</I> to construct the name of the RCS file and then opens the necessary files.<P>
The next section of <I>checkout</I> copies the desired version from the RCS file to a destination file. If the user specified an output file (<I>extra_file == 1</I>), <I>checkout</I> copies the version to the output file. If the user did not specify a particular version (<I>rev</I> == <I>0</I>), <I>checkout</I> copies the latest version by calling <I>copy_latest_rcs_to_source</I> (see <A href="list8.htm">Listing 8</a>)
. If the user specified a particular version, <I>checkout</I> finds that version by calling <I>go_to_correct_rev</I> (see <A href="list8.htm">Listing 8</a>)
 and then copies it by calling <I>copy_rcs_to_source</I> (also in <A href="list8.htm">Listing 8</a>)
. If the user did not specify an output file (<I>else use source_file</I>), <I>checkout</I> performs the same steps with the source file as the destination.<P>
<A href="list4.htm">Listing 4</a>
shows the <I>revlog</I> program. The command line is <I>revlog sourcefile.revlog</I> reads through the entire RCS file and prints out all the version numbers, dates, and header lines. The bulk of <I>revlog</I> reads through the RCS file looking for header lines. A <I>FIRST_LINE</I> constant indicates the following lines down to a <I>DELIMETER</I> constant should be printed. <I>revlog</I> prints these lines and continues reading until the end of the file. <P>
<A href="list5.htm">Listing 5</a>
shows the <I>revdiff</I> program. The command line is <I>revdiff [-r#] [-r#) source-file. revdiff</I> uses the DOS utility <I>fc</I> to show the difference between the current source file and any previous version or between any two previous versions. <I>revdiff a_file</I> will show the difference between the current version of <I>a_file</I> and the last version checked in. <I>revdiff -r2 a_file</I> will show the difference between the current version of <I>a_file</I> and the second version checked in. <I>revdiff -r2 -r4 a_file</I> will show the difference between the second and fourth versions of <I>a_file</I> that were checked in.<P>
The first section of <I>revdiff</I> interprets the command line to determine which versions of the source file to compare. <I>revdiff</I> then acquires the name of the RCS file and opens it. <I>revdiff</I> compares versions of the source file by using temporary files. It opens one or two temporary files (<I>output_file</I> and <I>output2_file</I>) and copies versions from the RCS file to these for comparison. If the user wants to compare the source file with one version from the RCS file (<I>extra_file == 0</I>), <I>revdiff</I> finds and copies the desired version from the RCS file to a temporary file <I>output_file</I>). Otherwise, <I>revdiff</I> finds and copies two versions from the RCS file to two temporary files. <I>revdiff</I> closes all the files and compares them by calling the DOS <I>fc</I> utility.<P>
<A href="list6.htm">Listing 6</a>
shows the <I>revup</I> program. The command line is <I>revup sourcefile #.revup</I> obtains header lines from the user and then pushes up the latest version in the RCS file to the version number entered by the user. If the user enters <I>revup a_file 10, revup</I> obtains header lines and copies the latest version from the RCS file up to version 10. <P>
Just like the other programs, <I>revup</I> interprets the command line, obtains the name of the RCS file name, and opens it. <I>revup</I> uses a temporary file to copy up the latest version of the RCS file. revup calls <I>get_header_lines</I> (<A href="list8.htm">Listing 8</a>)
 to obtain  header lines and puts them into the temporary file. <I>revup</I> then calls <I>copy_latest_rcs_to_source</I> to move the latest version from the RCS file to the temporary file. Next, <I>revup</I> seeks back to the beginning of the RCS file and copies all of it to the end of the temporary file. The final section uses DOS to copy the temporary file back to the RCS file and delete the temporary file.<P>
<A href="list7.htm">Listing 7</a>
shows the <I>prunerev</I> program. The command line is <I>prunerev source-file rev-number. prunerev</I> deletes a version from the RCS file. You must use it with caution because once you delete a version you cannot recover it. Typing the command <I>prunerev a_file</I> <I>1</I> removes version 1 from the RCS file.<P>
<I>prunerev</I> interprets the command line, gets the RCS file name, opens the RCS file, and opens a temporary file. <I>prunerev</I> well copy all but the unwanted version from the RCS file to a temporary file and then copy back to the RCS file. The bulk of the program is in the function <I>copy_wanted_revs__to_temp_file</I>. It has a nest of <I>whiles, ifs</I>, and <I>elses</I> that read through the RCS file and copy selected lines to the temporary file. The logic is to read and copy until you hit a <I>FIRST_LINE</I> constant. If the version number is the one you want to prune, then read through it without copying. If the version number is not the one you want to prune, then read and copy it. After this finishes, <I>prunerev</I> closes the files, uses DOS to copy the temporary file to the RCS file, and deletes the temporary file.<P>
<A href="list8.htm">Listing 8</a>
shows the file <I>rcsutil.c.</I> This file contains functions used by several of the RCS programs. <I>create_rcs_file_name</I> constructs the name of the RCS file by inserting <I>rcs/v</I> into the proper place. It turns <I>a_file</I> into <I>rcs/va_file</I> and <I>c:/text/a_file</I> into <I>c:/text/rcs/va_file. rev_number</I> takes in a string and returns the integer value of the number. If the input is the string <I>12</I> the output is the number 12. The function <I>replace_slash</I> replaces slashes (/) with back slashes (\). The RCS programs need this because the DOS utilities they use interpret all slashes as options.<P>
<I>go_to_correct_rev</I> searches through an RCS file and stops when it finds the desired version. It is similar to <I>copy_wanted_revs_to_temp_file</I> in how it looks for the <I>FIRST_LINE</I> constants and compares the version numbers. <I>go_to_correct_rev</I> reads past the version number, date, and header lines and quits when it points to the start of the text for the desired version.<P>
<I>copy_rcs_to_source</I> and <I>copy_latest_rcs_to_source</I> are very similar. <I>copy_rcs_to_source</I> copies text from an RCS file to another file. It assumes it begins reading at the desired text and stops copying when it hits a <I>DELlMETER</I> constant. <I>copy_latest_rcs_to_text</I> a assumes it begins reading at the start of an RCS file. It reads down until it hits the first <I>DELIMETER</I>. The line after this first <I>DELIMETER</I> is the first line of text in the latest version. The function copies until it hit the next <I>DELIMETER</I> and then quits.<P>
<I>get_header_lines</I> obtains header lines from the user and writes them to the RCS file. It reads from the keyboard until it hits a line whose first character is a period.<P>
<h4><FONT COLOR="#000080"><A name="01C2_00AB">Conclusions<A name="01C2_00AB"></FONT></h4></P>
Programmers and authors need a revision control system to help manage the changing nature of their work. The simple RCS presented here works effectively for basic text files and enables you to save and retrieve versions of your work. Since writing it, I have used it for several months on various projects. It has paid for itself in time and peace of mind.<P>
<h4>References</FONT></h4></P>
Tichy, Walter F. September 1982. "Design, Implementation, and  Evaluation of a Revision Control System," <I>Proceedings of the Sixth International Conference on Software Engineering</I>. IEEE Computer Society Press, pp. 58-67.<P>
Tichy, Walter F. July 1985. "RCS &#151; A System for Revision Control," <I>Software</I> &#151; <I>Practice and Experience</I>, Vol. 15, No. 7, pp. 637-654. <P>

<h4><a href="../../../source/1993/jul93/phillips.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
