

<HTML>
<HEAD>

<TITLE>July 1993/Code Capsules</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjul.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Code Capsules<A name="0225_00B1"><A name="0225_00B1"></font></h2><P>
<h3 align="center"><A name="0225_0000"><A name="0225_0000">C++ Streams</h3><P>
<h3 align="center"><font color="#800000">Chuck Allison</font></h3><hr><blockquote><P>
<P><i><A name="0225_0000"><A name="0225_0000">Chuck Allison is a regular columnist with CUJ and a software architect for the Family History Department of the Church of Jesus Christ of Latter Day Saints Church Headquarters in Salt Lake City. He has a B.S. and M.S. in mathematics, has been programming since 1975, and has been teaching and developing in C since 1984. His current interest is object-oriented technology and education. He is a member of X3J16, the ANSI C ++ Standards Committee. Chuck can be reached on the Internet atallison@decus.org, or at (801)240-4510.</i></P><P>
Like C, C++ does not provide language facilities for input or output. They are, instead, part of the standard library. Although you can use C's <I>stdio</I> functions for input and output in C++, the stream classes are an efficient way to read and write data in C++. The stream classes of C++ offer three advantages to C's <I>stdio</I> functions.<P>
First, streams are type-safe. The <I>printf/scanf</I> family of functions depends solely on a format string that the compiler cannot validate. Since the type of an object in C++ determines which action follows, you just can't do the wrong thing without hearing about it at compile time (unless you try <I>really</I> hard).<P>
Second, streams provide a uniform interface for all input and output operations. Whether the source or destination is a file, a string, or a standard device, the operations are identical ("A stream is a stream is a stream...").<P>
Finally, streams are extensible &#151; and I don't just mean that you can derive new stream classes. Almost always, just overloading standard stream operators is all you need.<P>
<h4><FONT COLOR="#000080"><A name="0225_00B2">Standard Streams<A name="0225_00B2"></FONT></h4></P>
There are four pre-defined streams: <I>cin</I> (standard input), <I>cout</I> (standard output), <I>cerr</I> (standard error), and <I>clog</I> (standard error). All but <I>cerr</I> are fully-buffered streams. Like <I>stderr, cerr</I> behaves as if it is unbuffered, but it is actually <I>unit-buffered,</I> meaning that it flushes its buffer automatically after processing each object, not after each byte. For example, with unit-buffering, the statement<P>
<pre>cerr &lt;&lt; "hello";</pre>
buffers the five characters and then flushes the buffer. An un- buffered approach sends a character at a time all the way through to its destination.<P>
<h4><FONT COLOR="#000080"><A name="0225_00B3">Simple I/0<A name="0225_00B3"></FONT></h4></P>
The following program copies standard input to standard output:<P>
<pre>// copy1.cpp: Copy standard
input to standard output
#include &lt;iostream.h&gt;

main()
{
    char c;

    while (cin.get (c))
        cout.put(c);

    return 0;
}</pre>
<I>get</I>, called an <I>extractor</I>, reads a single character or a string from a stream, depending on how it's called. (In this case, <I>get</I> reads a single character from the <I>cin</I> stream.) <I>put,</I> called an <I>inserter,</I> sends the character, or string, to an object. (In this case, <I>put</I> sends a character to the <I>cout</I> object.)<P>
The <I>get</I> extractor stores the next byte from a stream into its <I>char</I> parameter. Like most stream member functions, <I>get</I> returns the stream itself. When a stream appears in a boolean context (like in the <I>while</I> loop above) it tests true if the data transferred successfully, and false if there was an error, such as an attempt to read beyond end-of-file. Although such simple boolean tests suffice most of the time, you can query the state of a stream anytime with the following member functions:<P>
<UL><li><I>bad</I><I></I> &#151; severe error (stream is corrupted)</li>
<li><I>fail</I><I></I> &#151; conversion error (bad data but stream is OK)</li>
<li><I>eof</I><I></I> &#151; end-of-file</li>
<li><I>good</I><I></I> &#151; none of the above</li></UL>
The program in <A href="list1.htm">Listing 1</a>
copies a text file line-by-line. The <I>getline</I> extractor reads up to <I>BUFSIZ-1</I> characters into <I>s</I>, stopping if it finds a newline character, and appends a null byte. (It discards the newline.) Output streams use the left shift operator as an inserter. Any object, built-in or user-defined, can be part of a chain of insertions into a stream. (However, you must overload &lt;&lt; yourself for your own classes.)<P>
<A href="list2.htm">Listing 2</a>
contains a program that illustrates the extraction operator &gt;&gt;. Since in C you normally use <I>stderr</I> for prompts (because it is unbuffered), you might be tempted to use <I>cerr</I> in C++:<P>
<pre>cerr &lt;&lt; "Please enter an integer: ";
cin &gt;&gt; i;</pre>
However, this is not necessary in C++ because <I>cout</I> is <I>tied</I> to <I>cin</I>. An output stream tied to an input stream is automatically flushed when input is requested. If necessary, you can use the <I>flush</I> member function to force a flush.<P>
Addresses print in an implementation-defined format (usually hexadecimal). Character arrays are, of course, an exception &#151; the string value is printed, not the address. To print the address of a string, cast it to a <I>void</I> *:<P>
<pre>cout &lt;&lt; (void *) s &lt;&lt; '\n'; // prints address</pre>
The &gt;&gt; extraction operator skips whitespace by default. The program in <A href="list3.htm">Listing 3</a>
uses this feature to count the words in a text file. Extracting into a character string behaves like the <I>%s</I> edit descriptor in <I>scanf.</I> It is possible to turn off the skipping of whitespace when reading characters (see <A href="list4.htm">Listing 4</a>)
.<P>
<h4><FONT COLOR="#000080"><A name="0225_00B4">Beyond Simple I/O<A name="0225_00B4"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0225_00B5">Formatting<A name="0225_00B5"></FONT></h4></P>
<I>ios::skipws</I> in <A href="list4.htm">Listing 4</a>
is an example of a format flag. Format flags are single-bit values that you can set with the member function <I>setf,</I> and reset with <I>unset</I><I>.</I> (See <A href="tab1.htm">Table 1</a>
for a description.)<P>
The program in <A href="list5.htm">Listing 5</a>
illustrates numeric formatting. The member function <I>precision</I> dictates the number of decimal places to display for floating-point values. Unless the <I>ios::show-point</I><I> </I>flag is set, however, trailing zeroes will not appear. <I>ios::showpos</I> prints positive numbers with a leading plus sign. <I>ios::uppercase</I> displays the <I>x</I> in hexadecimal values and the <I>e</I> in exponential in upper case.<P>
Some formatting options can take on a range of values. For example, <I>ios::basefield</I>, which determines the numeric base for displaying integers, can be set to decimal, octal, or hexadecimal. (See <A href="tab2.htm">Table 2</a>
for a description of the three format fields available.) Since these are bit fields and not single bits, you set them with a two-parameter version of <I>setf</I>. For example, the program in <A href="list6.htm">Listing 6</a>
changes to octal mode with the statement<P>
<pre>cout.setf(ios::oct,ios::basefield);</pre>
With the flag <I>ios::showbase</I> set, octals print with a leading 0 and hexadecimals with a leading 0x (or 0X if <I>ios::uppercase</I><I> </I>is also set).<P>
<h4><FONT COLOR="#000080"><A name="0225_00B6">Manipulators<A name="0225_00B6"></FONT></h4></P>
<I>endl</I>, of a <I>manipulator</I>, inserts a newline character into the output stream and then flushes the stream. Instead of inserting an object into the stream, a manipulator changes a stream state. <A href="tab3.htm">Table 3</a>
contains built-in manipulators declared in <I>iostream.h.</I> The program in <A href="list7.htm">Listing 7</a>,
 although functionally equivalent to the one in <A href="list6.htm">Listing 6</a>,
 uses manipulators instead of explicit calls to <I>setf.</I> Manipulators often allow for more streamlined code.<P>
Other manipulators take parameters (see <A href="tab4.htm">Table 4</a>)
. The program in <A href="list8.htm">Listing 8</a>
uses the <I>setw(n)</I> manipulator to set the output width directly in the insertion sequence, so you don't need a separate call to <I>width</I><I>.</I> The special field <I>ios::width</I> is reset to 0 immediately after every insertion. When <I>ios::width</I> is 0, values print with the minimum the number of characters necessary. As usual, numbers are not truncated, even if you don't allow enough space for them.<P>
You could replace the statement<P>
<pre>cout.fill('#');</pre>
with the in-sequence manipulator<P>
<pre>... &lt;&lt; setfill('#') &lt;&lt; ...</pre>
but it seems cumbersome to do so in this case.<P>
Extractors usually ignore width settings. An exception is string input. You should set the width field to the size of a character array before extracting into it in order to avoid overflow. When processing the input line<P>
<pre>nowisthetimeforall</pre>
the program in <A href="list9.htm">Listing 9</a>
produces<P>
<pre>nowisthet,im,eforall</pre>
Remember that extractors use whitespace as a delimiter, so if the input is<P>
<pre>now is the time for all</pre>
then the output is
<pre>now, is, the</pre>
You can create your own manipulators by simply defining how a function takes a stream reference parameter and returns that same reference. For example, here is a manipulator that rings the bell at the console when you insert it into any output stream:<P>
<pre>// A manipulator that beeps
#include &lt;iostream.h&gt;

ostream&amp; beep(ostream&amp; os)
{
    os &lt;&lt; (char) 7; // ASCII BEL
    return os;
}</pre>
To use this, just insert it:<P>
<pre>cout &lt;&lt; ... &lt;&lt; beep &lt;&lt; ...</pre>
<h4><FONT COLOR="#000080"><A name="0225_00B7">Beyond the Standard Streams<A name="0225_00B7"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0225_00B8">String Streams<A name="0225_00B8"></FONT></h4></P>
To read from and write to strings in memory (like <I>sscanf</I> and <I>sprintf</I> do), use the <I>string stream</I> classes declared in <I>strstream.h.</I> The program in <A href="list10.htm">Listing 10</a>
uses an anonymous output string stream to write to the string <I>s</I>. The line<P>
<pre>ostrstream(s,sizeof s) &lt;&lt; "You entered " &lt;&lt; i &lt;&lt; ends;</pre>
is a safe alternative to the C statement<P>
<pre>sprintf(s,"You entered %d",i);</pre>
If you want the stream to persist beyond the statement, declare an object:<P>
<pre>ostrstream os(s,sizeof s);
os &lt;&lt; "You entered " &lt;&lt; i &lt;&lt; ends;</pre>
<A href="list11.htm">Listing 11</a>
contains a program that counts both the number of lines and the number of words in a text file. It reads a line at a time and then attaches a string stream to the line to extract each word. NOTE: the current release (v3.1) of the Borland C++ compiler requires a slight change in the <I>while</I> loop:<P>
<pre>while (line &gt;&gt; word &amp;&amp; word[0])
    ++wc;</pre>
(For some reason the string stream extractor doesn't set the state properly).<P>
The <I>getline</I> function normally extracts characters up to a newline. You can use another character as a delimiter by sup- plying the optional third argument. For example, the statement<P>
<pre>sstr.getline(s,sizeof s,',');</pre>
reads characters into <I>s</I> up to the next occurrence of a comma, then discards the comma. This is useful for reading database files with delimited fields. The program in <A href="list12.htm">Listing 12</a>
reads a comma-delimited file with fields representing name, address, city, state, and zip code. For example, with the following input:<P>
<pre>Bill CIinton, 1600 Penn. Ave.,Washington,DC,21234
Ross Perot,1234 Feedback Dr.,Big Ears,TX,5678g
Annymous,, Nowhere,, 00000</pre>
it produces this output:<P>
<pre>Bill Clinton|1600 Penn. Ave.|Washington|DC|21234
Ross Perot|1234 Feedback Dr.|Big Ears|TX|5678g
Anonymous||Nowhere||00000</pre>
<h4><FONT COLOR="#000080"><A name="0225_00B9">File Streams<A name="0225_00B9"></FONT></h4></P>
The program in <A href="list13.htm">Listing 13</a>
copies one file to another by explicitly opening file streams. You must enter both file names on the command line. The definition<P>
ifstream inf (argv [1] )<P>
attempts to open the file named in the first command-line argument and connects the input stream <I>inf</I> to it. If all went well, <I>inf</I> will test true as a boolean expression (analogously for <I>outf</I>).Both files close automatically when the file streams are destroyed as they go out of scope.<P>
<A href="list14.htm">Listing 14</a>
contains a more flexible copy utility. It allows you to either name the files on the command line:<P>
<pre>copy fi1el fi1e2</pre>
or to use redirection:<P>
<pre>copy &lt;filel &gt;file2</pre>
or to leave one or both files connected to a standard device:<P>
<pre>copy file1 {displays file1 on the console)</pre>
If you supply a file name it opens the file, otherwise it uses standard input and/or standard output. In order to attach a file stream to an open file you need a file handle, such as <I>ileno</I> returns. (See last month's "Code Capsule" for information on <I>fileno</I> and other POSIX functions). When a file stream goes out of scope, its destructor closes the associated file, unless <I>attach</I> made the connection (otherwise standard I/O would shut down!).<P>
The program in <A href="list15.htm">Listing 15</a>
creates a file of fixed-length records, and then reads back and displays selected records. An <I>fstream</I> object allows simultaneous input and output on the same file. The flag <I>ios::bin</I> enables binary mode, which is necessary for accurate file positioning on non-UNIX systems. (Some compilers use <I>ios::binary</I> or <I>ios: :notranslate</I>, but the current working paper for standard C++ specifies <I>ios::bin</I>). The member functions <I>read</I> and <I>write</I> perform binary input and output, similar to their C counterparts <I>read</I> and <I>write</I> (except that the former process only one record at a time). <I>seekg</I> moves the file-read pointer to a specified byte position in the file. Its second argument controls positioning in the usual way:<P>
<UL><li><I>ios::beg</I> &#151; forward from the beginning of the file</li>
<li><I>ios::cur</I> &#151; relative to the current position</li>
<li><I>ios::end</I><I></I> &#151; backward from the end of the file</li></UL>
Note: Classes that specifically support simultaneous input and output on a stream (namely, <I>strearn</I><I>, </I><I>strstream</I>, and <I>iostream</I>) are not part of the proposed standard for C++. The committee decided to simplify the standard library by eliminating the use of multiple inheritance. (Multiple inheritance is one of those necessary evils that you should only use when absolutely.) To open a file for both input and output in a future conforming implementation, you will have to replace<P>
<pre>int mode = ios::bin | ios::trunc | ios::out | ios::in;
Fstream f("recs.dat',mode);</pre>
with<P>
<pre>int mode = ios::bin | ios::trunc | ios::out | ios::in;
ofstream f("recs.dat", mode);
ifstream g(f.rdbuf(),ios: :bin);</pre>
which causes streams  and <I>g</I> to share the same internal buffer. (See <A href="tab5.htm">Table 5</a>
for descriptions of the file open modes.)<P>
<h4><FONT COLOR="#000080"><A name="0225_00BA">Streams and User-Defined Objects<A name="0225_00BA"></FONT></h4></P>
To read or write a user-defined object usually reduces to processing built-in types which comprise the object (or its components, etc.). For example, suppose you wanted to define an inserter for a complex number class:<P>
<pre>class complex
{
    double real, imag;
public:
    friend ostream&amp; operator&lt;&lt;(ostream&amp;, const complex&amp;);
    // Details omitted
};</pre>
To display a complex number in coordinate form (e.g., (2,7.5)), you simply use the built-in inserter on the components:<P>
<pre>ostream&amp; operator&lt;&lt;(ostream&amp; os, const complex&amp; c)
{
    os &lt;&lt; '{' &lt;&lt; c.real &lt;&lt; ',' &lt;&lt; c.imag &lt;&lt; ')';
    return os;
}</pre>
The semantics of <I>operator&lt;&lt;</I> require returning the stream to allow chaining multiple insertions in a single statement. (For more detail on overloading inserters and extractors, see Dan Saks' column "Stepping Up to C++" in the May 1992 and July 1992 issues of <I>CUJ.</I>)<P>
There is more machinery to streams than what I have presented here. (If you're interested in what's under the hood, look up the <I>streambu</I> family of classes in your compiler's documention). I have illustrated the high-level features that should suffice for most non-systems applications. If things appear slightly more involved that what you're used to in C, that merely reflects the careful design that makes streams safer and more robust than the <I>stdio</I> functions.<P>

<h4><a href="../../../source/1993/jul93/allison.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
