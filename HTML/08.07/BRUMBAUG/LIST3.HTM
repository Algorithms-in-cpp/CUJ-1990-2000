<HTML><HEAD><TITLE>July 1990/Object-Oriented Programming In C/Listing 3</TITLE></HEAD><BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4><A name="0177_00DB"><A name="0177_00DB">Listing 3<A name="0177_00DB"></h4><P>
<pre>/* -------------------- List.H------------------ */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

#define LIST_CLASS unsigned (*at_top)(struct list*), \
           (*at_end)(struct list*), \
           (*is_empty)(struct list*), \
           (*find)(struct list *, ...); \
   void      (*prev)(struct list*), \
           (*next)(struct list *), \
           (*top)(struct list *), \
           (*seek)(struct list *, long, int), \
           (*end)(struct list *), \
           (*display)(struct list*), \
           (*add_member)(struct list*, void *), \
           (*replace_member)(struct list *, void *), \
   void      *(*current)(struct list *); \
   long      (*total_members)(struct list *), \
           (*tell)(struct list *);

typedef struct list {
   LIST_CLASS
} LIST;

LIST *new_list();
destroy_list(LIST *);

#define TRUE 1
#define FALSE 0

/* --------------------  LIST.C ------------------*/
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;
#include "list.h"

static void not_valid() {
   fprintf(stderr,"Operation is not valid for this list\n");
   getch();
}

static unsigned is_empty(LIST *this) {
   return( this-&gt;total_members(this) == 0L);
}

static void seek(LIST *this, long where, int start) {
   long count;
   
   switch(start) {
      case SEEK_SET:
         this-&gt;top(this);
         for (count = 0; count &lt; where; ++count) {
            if ( this-&gt;at_end(this) )
                break;
            this-&gt;next(this);
         }
      break;
      case SEEK_CUR:
         if (where &gt; 0) {
            for (count = 0; count &lt; where; ++count) {
                if ( this-&gt;at_end(this) )
                   break;
                this-&gt;next(this);
            }
         }
         else {
            for(count = 0; count &gt; where; ++count) {
                if (this-&gt;at_top(this) )
                   break;
                this-&gt;prev(this);
            }
         }
   break;
   case SEEK_END:
      
      this-&gt;end(this);
      for(count = 0; count &gt; where; ++count) {
          if ( this-&gt;at_top(this) )
                 break;
          this-&gt;prev(this);
      }
   break;
   }
}

static long total_members(LIST *this)
{
   long thisone, count;
   thisone = this-&gt;tell(this); this-&gt;top(this);
   count = 0;
   do {
      if ( ! this-&gt;at_end(this) ) {
         ++count;
         this-&gt;next(this);
      }
   } while( ! this-&gt;at_end(this) );
   this-&gt;seek{ this, thisone,SEEK_SET);
   return(count);
}

LIST *new_list() {
LIST *this;

/*  Allocate Memory for this Object */
this = calloc(1,sizeof(LIST));
if (this == NULL)
   return(NULL);

/*  Assign Methods */
this-&gt;at_top = not_valid;   this-&gt;at_end = not_valid;
this-&gt;is_empty = is_empty;  this-&gt;find = not_valid;
this-&gt;prev = not_valid;     this-&gt;next = not_valid;
this-&gt;seek = seek;          this-&gt;top = not_valid;
this-&gt;end = not_valid;      this-&gt;display = not_valid;
this-&gt;replace_member = not_valid;
this-&gt;add_member = not_valid;
this-&gt;current = not_valid;
this-&gt;total_members = total_members;
this-&gt;tell = not_valid;

return(this);
}

destroy_list{LIST *this) {
   free(this);
}
</pre>
</BODY>
</HTML>
