<HTML><HEAD><TITLE>July 1990/Object-Oriented Programming In C/Listing 6</TITLE></HEAD><BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4><A name="0177_00E1"><A name="0177_00E1">Listing 6<A name="0177_00E1"></h4><P>
<pre>/* ----------------- PINLIST.H-------------------- */
#include "pinnacle.h"
#include "list.h"

#define PINNACLE_LIST_CLASS       LIST_CLASS \
/*  Pinnacle Database Object */       DB db; \
/*Pinnacle Database Table */    DBTAB table; \
/*  Boolean flags*/    unsigned is_at_top, is_at_bottom;

typedef struct pinnacle_list {
   PINNACLE_LIST_CLASS
} PINNACLE_LIST;

PINNACLE_LIST *new_pinnacle_list(char *database,
char *table);

/*------------------ PINLIST.C ------------------ */
#include "pinlist.h"

static long total_members(PINNACLE_LIST *this) {
   return((long) DB_CountRows(this-&gt;table));
}

static unsigned at_top(PINNACLE_LIST *this) {
   return(this-&gt;is_at_top);
}

static unsigned at_end(PINNACLE_LIST *this) {
   return(this-&gt;is_at_bottom);
}

static void prev(PINNACLE_LIST *this) {
   if (DB_NextRow(this-&gt;table, DBPREVIOUS))
      this-&gt;is_at_top = FALSE;
   else
      this-&gt;is_at_top = TRUE;
   if (this-&gt;total_members(this) &gt; 1)
      this-&gt;is_at_bottom = FALSE;
}

static void next(PINNACLE_LIST *this) {
   if (DB_NextRow(this-&gt;table, DBNEXT))
      this-&gt;is_at_bottom = FALSE;
   if (this-&gt;total_members(this) &gt; 1)
      this-&gt;is at bottom = TRUE;
      this-&gt;is_at_top = FALSE;
}

static void top(PINNACLE_LIST *this) {
   DB_FirstRow(this-&gt;table);
   DB_NextRow(this-&gt;table,DBNEXT);
   this-&gt;is_at_top = TRUE;
   if (this-&gt;total_members(this) &gt; 1)
      this-&gt;is_at_bottom = FALSE;
}

static void end(PINNACLE_LIST *this) {
   DB_ForAllRows(this-&gt;table);
   this-&gt;is_at_bottom = TRUE;
   if (this-&gt;total_members(this) &gt; 1)
   this-&gt;is_at_top = FALSE;
}

static long tell(PINNACLE_LIST *this) {
   DBROWID thisrow, checkrow;
   long position = 0L;
   
   thisrow = DB_CurrentRow(this-&gt;table);
   this-&gt;top(this);
   checkrow = DB_CurrentRow(this-&gt;table);
   while(checkrow != thisrow) {
      ++position;
      
      DB_NextRow(this-&gt;table,DBNEXT);
      checkrow = DB_CurrentRow(this-&gt;table);
   }
   return(position);
}

PINNACLE_LIST *new_pinnacle_list(char *datab,char *table) {
PINNACLE_LIST *this;
LIST *l;

l = new_list();
if (l == NULL)
   return(NULL);

this = calloc(1,sizeof(PINNACLE_LIST));
if (this == NULL) {
   destroy_list(l); return(NULL);
}
memmove(this,l,sizeof(LIST)); free(l);

this-&gt;db = DB_Open(datab,"rw",0);
this-&gt;table = DB_Table(this-&gt;db,table);
this-&gt;total_members = total_members;
this-&gt;at_top = at_top; this-&gt;at_end = at_end;
this-&gt;prev = prev; this-&gt;next = next;
this-&gt;top = top; this-&gt;end = end; this-&gt;tell = tell;

return(this);
}

destroy_pinnacle_list(PINNACLE_LIST *this) {
DB_Close(this-&gt;db); destroy_list(this);
}
</pre>
</BODY></HTML>
