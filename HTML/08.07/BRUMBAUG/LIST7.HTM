<HTML><HEAD><TITLE>July 1990/Object-Oriented Programming In C/Listing 7</TITLE></HEAD><BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4><A name="0177_00E3"><A name="0177_00E3">Listing 7<A name="0177_00E3"></h4><P>
<pre>/* --------------------- PHLIST2.H --------------------- */
#include "pinlist.h"

typedef struct phone_entry {
   char last_name[21], first_name[11], phone_no[14];

} PHONE_ENTRY;

#define PHONE_LIST_CLASS PINNACLE_LIST_CLASS \
            PHONE_ENTRY pe; \
            DBCOL last, first, phone, lastfirst;

typedef struct phone_list {
   PHONE_LIST_CLASS
} PHONE_LIST;

PHONE_LIST *new_phone_list();
void destroy_phone_list(PHONE_LIST *);
/* ---------------- PHLIST2.C ------------------------ */
#include "phlist2.h"
#include &lt;string.h&gt;
#include &lt;conio.h&gt;
#include &lt;stdlib.h&gt;

static void phone_list_memory_error(char *fun) {
fprintf{stderr,
"\nMemory Error in Function %s &lt;Press a Key&gt;\n", fun);
getch(); exit(1);
}

static unsigned find(PHONE_LIST *this, char *srch_l_name) {
DBSEARCH sobj; unsigned found;

sobj = DB_SearchObject(this-&gt;db, String, srch_l_name, "==");

found = DB_FindNext(this-&gt;last,sobj,DBNEXT);
DB_Free(sobj);
return(found);
}

static display(PHONE_LIST *this) {
   strcpy(this-&gt;pe.last_name,DB_GetString(this-&gt;last));
   strcpy(this-&gt;pe.first_name,DB_GetString(this-&gt;first));
   strcpy(this-&gt;pe.phone_no,DB_GetString(this-&gt;phone));
   printf("%-20s, %-10s - %-13s\n",this-&gt;pe.last_name,
   this-&gt;pe.first_name, this-&gt;pe.phone_no);
}

static void add_member(PHONE_LIST *this, PHONE_ENTRY *pe) {
   DB_AddRow)(this-&gt;table);
   DB_PutString(this-&gt;last,pe-&gt;last_name);
   DB_PutString(this-&gt;first,pe-&gt;first_name);
   DB_PutString(this-&gt;phone,pe-&gt;phone_no);
}

static void replace_member(PHONE_LIST *this,
PHONE_ENTRY *pe) {
   DB_PutString(this-&gt;last,pe-&gt;last_name);
   DB_PutString(this-&gt;first,pe-&gt;first_name);
   DB_PutString(this-&gt;phone,pe-&gt;phone_no);
}

static PHONE_ENTRY *current(PHONE_LIST *this) {
   strcpy(this-&gt;pe.last_name,DB_GetString(this-&gt;last));
   strcpy(this-&gt;pe.first_name,DB_GetString(this-&gt;first));
   strcpy(this-&gt;pe.phone_no,DB_GetString(this-&gt;phone));
   return(&amp;(this-&gt;pe));
}

PHONE_LIST *new_phone_list() {
PINNACLE_LIST *pl; PHONE_LIST *this;

pl = new_pinnacle_list("fonelist.db","PhoneList");
if (pl == NULL)

   return(NULL);

this = calloc(1,sizeof(PHONE_LIST));
if (this == NULL) {
   destroy_pinnacle_list(pl);
   return(NULL);
}

memmove(this,pl,sizeof(PINNACLE_LIST));
free(pl);

this-&gt;last = DB_Column(this-&gt;table,"Last");
this-&gt;first = DB_Column(this-&gt;table,"First");
this-&gt;phone = DB_Column(this-&gt;table,"Phone");
this-&gt;lastfirst = DB_Column(this-&gt;table,"LastFirst");
DB_OrderBy(this-&gt;lastfirst);
this-&gt;find = find; this-&gt;display = display;
this-&gt;add_member = add_member;
this-&gt;replace_member = replace_member;
this-&gt;current = current;
return(this);
}

void destroy_phone_list(PHONE_LIST *this) {
   destroy_pinnacle_list(this);
}
</pre>
</BODY></HTML>
