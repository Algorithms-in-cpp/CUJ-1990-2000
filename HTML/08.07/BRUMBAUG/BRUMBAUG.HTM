


<HTML>
<HEAD>

<TITLE>July 1990/Object-Oriented Programming In C</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjul.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Object-Oriented Programming</FONT></H2>

<hr><h2 align="center"><font color="#800000">Object-Oriented Programming In C<A name="0177_00CD"><A name="0177_00CD"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0177_0000"><A name="0177_0000">David Brumbaugh</font></h3><hr><blockquote><P>
<P><i><A name="0177_0000"><A name="0177_0000">David Brumbaugh is a software developer at Advanced Information Services, Inc. in Peoria IL. He has a B.A. in computer information science from Judson College in Elgin, IL. He has been programming in C since 1985. He can be contacted at Computer Express BBS, (309) 688-9789, 1220-2400 Baud, 8,1,N in the C Language Questions folder.</i></P><P>
C programmers have been using something like object oriented programming for years. They called it good modularity.<P>
The classic example of "object-oriented C" is the standard <I>FILE</I> structure and its family of functions <I>fopen, fclose, fread, fwrite, fprintf,</I> etc. Only the "methods" of the file object, <I>fopen</I> etc., access the members of <I>FILE</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The <I>FILE</I> functions are examples of good, modular, manageable code. A more accurate term for this type of programming is "structure driven". Structure-driven programs consist of data structures and functions that support them. The difference may only be semantic, but <I>FILE</I> objects don't have any allowance for inheritance or polymorphism. Structure members and functions that operate on them are not encapsulated into a single object.</FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0177_00CE">Adding More OOPness<A name="0177_00CE"></FONT></h4></P>
This article describes a technique which adds inheritance, polymorphism, and encapsulation to the familiar structure-driven style. The steps of this technique (listed in <A href="tab1.htm">Table 1</a>)
 are chosen to work with a particular implementation of inheritance.<P>
Consider the structures:<P>
<pre>struct s1
{  int x;
   int y;
};
struct s2
{  int x;
   int y;
   int z;
};</pre>
Suppose there is a structure of type <I>s2</I> and a pointer to type <I>s1</I>.</FONT></FONT></FONT></FONT><P>
<pre>struct s1 *s1p;
struct s2 s2s;
s1p = &amp;s2s;</pre>
In almost all C compilers, <I>s1p-&gt;x</I> would be the same as <I>s2s.x</I>, and <I>s1p-&gt;y</I> would be the same as <I>s2s.y</I>. You could say that structure <I>s2</I> inherited <I>x</I> and <I>y</I> from structure <I>s1</I>. Any function that expected a pointer to <I>s1</I> could instead take a pointer to <I>s2</I> and could correctly address <I>x</I> and <I>y</I> and safely ignore <I>z</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<A href="list1.htm">Listing 1</a>
illustrates how to utilize this technique in an easy, self-documenting way. By using <I>#define</I> to define a class, <I>S1</I>, and using this definition to describe a subclass, <I>S2</I>, we assure that any changes to the <I>S1_CLASS</I> definition are automatically reflected in its subclass <I>S2_CLASS</I> at compile time.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
An object is an instance of a class. In <A href="list1.htm">Listing 1</a>,
 C's <I>typedef</I> permits objects to be declared.</FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0177_00CF">Coding Conventions<A name="0177_00CF"></FONT></h4></P>
I observe certain conventions when writing methods for this OOP technique.<P>
<UL><li>The first argument to a method is always a pointer to the object calling the method. Many C++ translators do the same thing.</li>
<li>The first argument to a method is always named <I>this</I>, clarifying references to the calling object.</FONT></FONT></li>
<li>All program code for a particular class is always in the same <I>.c</I> file. Methods are given exactly the same function name as the pointers to those methods. These functions are <I>static</I>, so they don't interfere with other functions of the same name in other files.</FONT></FONT></FONT></FONT></li>
<li>When writing an abstract base class's methods, write functions for methods that are defined to be subclass implemented. You may simply print a message to the effect that the method is not available.</li>
<li>All constructors are named in the form <I>new_CLASS()</I>. The only arguments in constructors are for initialization. The template in <A href="list2.htm">Listing 2</a> is the basis for all constructors. If the constructor is a base class, remove all <I>SUPER_CLASS</I> references from this template.</FONT></FONT></FONT></FONT></li>
<li>Destructors have a format that reverses the inheritance process. Destructor names have the form <I>destroy_CLASS()</I>. The first, and usually only, argument is a pointer to the object being destroyed. The second template in <A href="list2.htm">Listing 2</a> is the general form of a destructor.</FONT></FONT></li></UL>
<h4><FONT COLOR="#000080"><A name="0177_00D0">Prior Art<A name="0177_00D0"></FONT></h4></P>
Eric White described another technique for writing "truly" object-oriented programs in the February issue of <I>The C Users Journal</I>. There are some differences between the technique I am suggesting and his.<P>
This technique does not require any data structures other than those required by the objects. There is no specific <I>CLASS</I> structure and no specific <I>OBJECT</I> structure like in White's technique.</FONT></FONT></FONT></FONT><P>
This technique does not require the use of any additional functions such as White's message function.<P>
Classes and subclasses are defined using C's <I>#deâine</I> directive. Methods are inherited from superclasses in a subclass's constructor, like White's, but no function is required to register new methods.</FONT></FONT><P>
There are no separate constructors and destructors for <I>CLASS</I> and <I>OBJECT</I>. Constructors and destructors have more responsibility for inheritance and polymorphism.</FONT></FONT></FONT></FONT><P>
Scope is used to supply a rudimentary form of polymorphism, an issue not directly addressed by White.<P>
The resulting syntax of this technique is closer to C+ + than White's. Compare the following three object-oriented methods of having a circle draw itself. The first example is C++, the second uses White's technique, and the third uses the technique described here.<P>
<pre>   1. circle.draw(radius);
   2. message(&amp;circle,DRAW,radius);
   3. circle-&gt;draw(circle,radius);</pre>
This similarity to C++ was important to me. Most of the OOP code I have seen in articles has been in C++, and I did not want to have to make a large mental jump to get from C+ + to code I could use.<P>
<h4><FONT COLOR="#000080"><A name="0177_00D1">An Example Application<A name="0177_00D1"></FONT></h4></P>
Many applications need to deal with lists. Sometimes these lists are arrays, sometimes they are linked lists, some- times they are views of database records. This example will develop a <I>LIST_CLASS</I>. The goal is to create a class that will allow an application to have uniform access to all types of lists, without the programmer having to concern himself with how the list is stored.</FONT></FONT><P>
I developed this object when I needed a selector window. The selector window is used as a menu and chooses a record from a data table. The <I>SELECTOR</I> object had a <I>LIST</I> pointer as a member. Concrete sub-classes of <I>ARRAY_LIST_CLASS</I> and <I>PINNACLE_LIST_CLASS</I> were both used by the <I>SELECTOR</I>, fulfilling the <I>00</I> requirement that a subclass can be used in place of a superclass.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
I chose the Pinnacle library for two reasons. First, it is a good, modular, "structure-driven" library. I was able to add an OO layer to it by encapsulation. The second reason is availability. Pinnacle is a commercial product, but a free trial disk is available from Vermont Database Corporation. The trial diskette will suffice if you want to try these programs yourself.<P>
In <A href="list3.htm">Listing 3</a>
<I>list.h</I>, defines an abstract base class that more concrete classes can inherit from. It defines the types of things you would normally do with a list.</FONT></FONT><P>
The list will be ordered in some way, even if it is only a physical order. The list will have a "top" and an "end". There will be the concept of a "current" member. The methods in <A href="tab2.htm">Table 2</a>
are common to all lists.<P>
Some methods, such as <I>seek</I> and <I>total_members</I>, can be written by utilizing other methods. Examine <I>list.c</I> in <A href="list3.htm">Listing 3</a>.
 <I>seek</I> may not contain the most efficient algorithm for all list types, so it can polymorphed later if necessary. The same can be said of <I>total_members</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
From this abstract <I>LIST_CLASS</I>, more concrete classes need to be made. The concrete classes must address two issues. First, how the list is implemented. Second, what goes into the list.</FONT></FONT><P>
What goes into the list is determined by the application. This example will be a simple phone list with a first name, last name and phone number for each entry. The list will be maintained in a last name, first name order. A <I>PHONE_ENTRY</I> structure will be used to hold the data.</FONT></FONT><P>
How to implement the list is a design decision. For the phone list, a database of some sort may be a logical choice. If the list is temporary, a dynamic array or linked list may be more practical. This is where the OO advantage comes in. If a decision is made to change from a linked list to a database, the changes are made within the class, not to the application.<P>
I have chosen to use two list handling methods to illustrate this technique. The first example uses a dynamic array to hold the elements of the list. The second example uses the Pinnacle relational DBMS to hold the elements.<P>
In <A href="list4.htm">Listing 4</a>,
 <I>arrylist.h</I> and <I>arrylist.c</I> show how a dynamic array can be used to implement the <I>LIST_CLASS</I>. Two new attributes are added to the <I>LIST_CLASS</I>. The <I>curr</I> attribute is the index of the current member, and <I>tot_members</I> is the number of members in the array. The default methods for <I>total_members</I> and <I>seek</I> were not efficient so these methods are polymorphed.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
In <A href="list5.htm">Listing 5</a>
<I>phlist1.h</I> adds a <I>PHONE_ENTRY</I> pointer to hold the list and a <I>sort</I> method to maintain the list in a sorted order. In <I>phlist.c</I> all methods not previously written are completed.</FONT></FONT></FONT></FONT></FONT></FONT><P>
<I>pinlist.h </I>and <I>pinlist.c</I> in <A href="list6.htm">Listing 6</a>
show how a database package can be used to make <I>LIST_CLASS</I> more concrete. Pinnacle is built around the relational model, so a list is defined to be from one table in a database. Column use is application dependent and will be specified in the more concrete subclass.</FONT></FONT></FONT></FONT></FONT></FONT><P>
<I>phlist2.h</I> in <A href="list7.htm">Listing 7</a>
defines which columns from the table will be used. A working buffer is also added for convenience. In <I>phlist2.c</I> the constructor defines which table and database to use. I used the sample database provided with Pinnacle.</FONT></FONT></FONT></FONT><P>
<A href="list8.htm">Listing 8</a>,
 <I>testlist.c</I>, is the same for both implementations. The output generated by this program is also identical in both cases.</FONT></FONT><P>
I used Turbo C 2.0 to test the code for this article. To keep some prototyping I turned off the ANSI warning "Suspicious pointer conversion." I could then assign any type of pointer to any other type of pointer and still keep some prototyping. To use this technique on a different compiler, you may have to remove the prototypes entirely.<P>
<h4><FONT COLOR="#000080"><A name="0177_00D2">Conclusion<A name="0177_00D2"></FONT></h4></P>
The technique presented here is not intended to replace object-oriented languages such as C++. Instead, the technique is intended to allow a programmer to experiment with object-oriented techniques without having to invest in learning a new language.<P>
There are a number of advantages to using this technique to write programs. It allows you to realize most of the benefits associated with OOP. Code and data are changed in an organized way through inheritance. Data encapsulation makes the internals of the objects transparent. Maintenance and enhancement are easier because of this encapsulation.<P>
There are some advantages to using this technique over C++ or some other OOL. There are enough differences between C++ and C to make many existing libraries useless. I have seen examples of library functions having names that are C++ reserved words. I have had C++ translators change the names of the functions I call and cause link errors with outside libraries. With this technique, I can use an object-oriented style and still have full access to all the C functions currently in use. This is a significant advantage if one considers the thousands of dollars and man-hours invested in existing libraries.<P>
Changing to any OOP technique carries some disadvantages. There is more overhead when using a derived class because all the code from its superclasses needs to be linked into the program, even when overridden. Bugs are inherited with features. If a superclass contains a design bug, or an inherited technique contains a bug, the whole class hierarchy is affected, complicating the debugging of large class hierarchies.<P>
There are some disadvantages to using this technique over C++. Some prototyping may be sacrificed in inheritance, especially if you change the prototype from one class level to the next. C++ constructors are more automatic.<P>
Finally, this technique isn't strictly portable because it assumes that identical members within different structures are arranged uniformly. Officially, the arrangement of members within a structure is implementation dependent. However, the arrangement assumed here is the rule, rather than the exception, and I have successfully tested the technique with two MS-DOS compilers and one UNIX compiler.<P>
<h4><FONT COLOR="#000080"><A name="0177_00D3">Acknowledgements<A name="0177_00D3"></FONT></h4></P>
I would like to thank Bob Pauwels and Mike Yocum of Advanced Information Services for their input to this article.<P>

<h4><a href="../../../source/1990/jul90/brumbaug.zip">Get Article Source Code</a></h4>


</BODY>
</HTML>
