<HTML><HEAD><TITLE>July 1990/Object-Oriented Programming In C/Listing 4</TITLE></HEAD><BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4><A name="0177_00DD"><A name="0177_00DD">Listing 4<A name="0177_00DD"></h4><P>
<pre>#include "list.h"
#include &lt;alloc.h&gt;
#define ARRAY_LIST_CLASS        LIST_CLASS \
/*  Index of current member */  int curr; \
/*  Total members in array */   int tot_members;

typedef struct array_list {
  ARRAY_LIST_CLASS
} ARRAY_LIST;

ARRAY_LIST *new_array_list();
destroy_array_list(ARRAY_LIST *);

/*------------------ ARRYLIST.C ------------------------*/

#include "arrylist.h"

static long total_members(ARRAY_LIST *this) {
    return((long) this-&gt;tot_members);
}

static unsigned at_top(ARRAY_LIST *this) {
    return(this-&gt;curr == 0);
}

static unsigned at_end(ARRAY_LIST *this) {
    return(this-&gt;curr == this-&gt;tot_members);
}

static void prev(ARRAY_LIST *this) {
  if (this-&gt;curr &gt; 0)
    --(this-&gt;curr);
}
static void next(ARRAY_LIST *this) {
    if (this-&gt;curr &lt; (this-&gt;tot_members))
      ++(this-&gt;curr);
}

static void seek(ARRAY_LIST *this, long where, int from) {
switch(from) {
    case SEEK_SET:
       if (where &lt; this-&gt;tot_members)
          this-&gt;curr = (int) where;
    break;
    case SEEK_CUR:
       if (where &gt; 0) {
          if ( (this-&gt;curr + (int) where) &lt;
                this-&gt;tot_members ) {
             this-&gt;curr += (int) where;
          }
       }
       else {
          if ((this-&gt;curr - (int) where) &gt; 0) {
              this-&gt;curr -= (int) where;
          }
       }
    break;
    case SEEK_END:
      if (where &lt;= this-&gt;tot_members) {
          this-&gt;curr = this-&gt;tot_members - (int) where;
      }
    break;
  }
}
static void top(ARRAY_LIST *this) {
    this-&gt;curr = 0;
}
static void end(ARRAY_LIST *this) {
    this-&gt;curr = this-&gt;tot_members - 1;
}
static long tell(ARRAY_LIST *this) {
    return(this-&gt;curr);


}
ARRAY_LIST *new_array_list(void) {
    ARRAY_LIST *this;
    LIST *1;
    
    l = new list();
    if (l == NULL)
       return(NULL);
    
    this = calloc(l,sizeof(ARRAY_LIST));
    if (this == NULL) {
       destroy list(l);
       return(NULL);
    }
    memmove(this,l,sizeof(LIST));
    free(l);
    
    this-&gt;total_members = total_members;
    this-&gt;at_top = at_top;  this-&gt;at_end = at_end;
    this-&gt;prev = prev;      this-&gt;next = next;
    this-&gt;seek = seek;      this-&gt;top = top;
    this-&gt;end = end;        this-&gt;tell = tell;
    return(this);
}

destroy_array_list(ARRAY_LIST *this) {
    destroy_list(this);
}
</pre>
</BODY>
</HTML>
