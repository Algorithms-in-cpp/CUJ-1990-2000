<HTML><HEAD><TITLE>July 1990/Object-Oriented Programming In C/Listing 5</TITLE></HEAD><BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4><A name="0177_00DF"><A name="0177_00DF">Listing 5<A name="0177_00DF"></h4><P>
<pre>/* ----------------- PHLIST1.H ---------------*/
#include "arrylist.h"

typedef struct phone_entry {
   char last_name[21], first_name[11], phone_no[14];
} PHONE_ENTRY;

#define PHONE_LIST_CLASS ARRAY_LIST_CLASS \
           PHONE_ENTRY *data; \
           void (*sort)(struct phone_list *);

typedef struct phone_list {
   PHONE_LIST_CLASS
} PHONE_LIST;

PHONE_LIST *new_phone_list();
void destroy_phone_list(PHONE_LIST *);

/* ------------------ PHLIST1.C ---------------- */
#include "phlist1.h"
#include &lt;string.h&gt;
#include &lt;conio.h&gt;
#include &lt;stdlib.h&gt;

static void phone_list_memory_error(char *fun) {
   fprintf(stderr,
   "\nMemory Error in Function %s &lt;Press a Key&gt;\n", fun);
   getch(); exit(1);
}

static unsigned find(PHONE_LIST *this,char *srch_last_name) {
   PHONE_ENTRY *pe;
   int orig;
   
   orig = this-&gt;curr;
   while(! this-&gt;at_end(this)) {
      pe = this-&gt;current(this);
      if ( stricmp(pe-&gt;last_name,srch_last_name) == 0)
         return(TRUE);
      else if (stricmp(pe-&gt;last_name,srch_last_name) &gt; 0) {
         this-&gt;curr = orig;
         return(FALSE);
      }
      else
          this-&gt;next(this);
   }
   pe = this-&gt;current(this);
   if ( stricmp(pe-&gt;last_name,srch_last_name) == 0)
      return(TRUE);
   this-&gt;curr = orig;
   return(FALSE);
}

static display(PHONE_LIST *this) {
   PHONE_ENTRY *pe;
   
   pe = this-&gt;current(this);
   if (pe ! = NULL) {
      printf("%-20s, %-10s - %-13s\n", pe-&gt;last_name,
      pe-&gt;first_name, pe-&gt;phone_no);
   }
}

static void add_member(PHONE_LIST *this, PHONE_ENTRY *pe) {
   this-&gt;data = realloc(this-&gt;data,
   sizeof(PHONE_ENTRY) * (this-&gt;tot_members + 1));
   
   if (this-&gt;data == NULL)
      phone_list_memory_error("phone_list: add_member");
   
   memmove(this-&gt;data + this-&gt;tot_members, pe,
   sizeof(PHONE_ENTRY));
   ++(this-&gt;tot_members);
   this-&gt;sort(this);
}

static void replace_member(PHONE_LIST *this,
PHONE_ENTRY *pe) {
 if (this-&gt;data != NULL)
  memmove(this-&gt;data + this-&gt;curr, pe,sizeof(PHONE_ENTRY));
}

static PHONE_LIST *current(PHONE_LIST *this) {
   if (! this-&gt;at_end(this) &amp;&amp; this-&gt;data != NULL)
      return(this-&gt;data + this-&gt;curr);
   else
      return(NULL);
}

static int pe_comp(PHONE_ENTRY *pe1, PHONE_ENTRY *pe2) {
   int ret;
   ret = stricmp(pe1-&gt;last_name, pe2-&gt;last_name);
   if (ret == 0)
      return(stricmp(pe1-&gt;first_name, pe2-&gt;first_name));
   return(ret);
}

static sort(PHONE_LIST *this) {
   qsort(this-&gt;data, (size_t) this-&gt;tot_members,
   sizeof(PHONE_ENTRY), pe_comp);
}

   PHONE_LIST *new_phone_list() {
   ARRAY_LIST *al;
   PHONE_LIST *this;
 
   al = new_array_list();
   if (al == NULL)
         return(NULL);
   
   this = calloc(1,sizeof(PHONE_LIST));
   if (this == NULL) {
   destroy_array_list(al);
      return(NULL);
   }
   memmove(this,al,sizeof(ARRAY_LIST));
   free(al);
   
   this-&gt;find = find; this-&gt;display = display;
   this-&gt;add_member = add_member;
   this-&gt;replace_member = replace_member;
   this-&gt;current = current; this-&gt;sort = sort;
   return(this);
   }
   
   void destroy_phone_list(PHONE_LIST *this) {
   if (this-&gt;data)
      free(this-&gt;data);
   destroy_array_list(this);
   }
</pre>
</BODY>
</HTML>
