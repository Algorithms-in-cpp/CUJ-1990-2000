


<HTML>
<HEAD>

<TITLE>July 1990/Encapsulation, Inheritance And Late-Binding In C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjul.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Object-Oriented Programming</FONT></H2>

<hr><h2 align="center"><font color="#800000">Encapsulation, Inheritance And Late-Binding In C++<A name="0175_00CB"><A name="0175_00CB"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0175_0000"><A name="0175_0000">Ali Hazzah</font></h3><hr><blockquote><P>
<P><i><A name="0175_0000"><A name="0175_0000">Ali Hazzah is the president of Safe Harbor Associates, an independent consultancy which specializes in helping the MIS departments of large organizations develop applications which use emerging technologies, such as object-oriented programming and cooperative processing. Hazzah has over nine years experience in the computer industry. He may be contacted at (914) 738-5043.</i></P><P>
Object-oriented languages support the concepts of encapsulation, inheritance, and late-binding.<P>
These terms can be loosely defined thus:<P>
<UL><li>Encapsulation implies the explicit grouping of data and one or more functions into a single programming construct, with the data accessible only through its predefined function set.</li>
<li>Inheritance involves the "reuse" of preexisting chunks of software to build new functionality (which automatically "inherits" the charateristics of the reused code) into a program.</li>
<li>Binding refers to the attachment of member functions to an instance of a class, or of function calls to those functions with which they are associated. It is an evaluative process which may occur at compile time or at runtime. When binding occurs at runtime, the process is called late-binding.</li></UL>
C++ is often characterized as a multi-paradigm language, which means that it combines non-object-oriented concepts with object-oriented ones.<P>
The question is, to what degree is C++ object-oriented? <P>
A fundamental notion in C++ is that of a type. Types can be variables, structures, or classes. A variable type may be a character, integer, floating point number, or a double.<P>
A variable can be declared in a program as follows:<P>
<pre>int x;</pre>
where <I>x</I> is the variable name, and <I>int</I> its type.<P>
Variables can be grouped together into structures. These constructs help to organize data in a program by treating it as a unit. For example:<P>
<pre>struct    point {
    int x;
    int y;
};</pre>
<I>point</I> is the structure tag; <I>x</I> and <I>y</I> are its members.</FONT></FONT></FONT></FONT></FONT></FONT><P>
A structure may only contain variables.<P>
In C++, operators such as + or - are used to manipulate variables. A programmer may write an expression using these variables and operators to produce a new value. For example:<P>
<pre>x + y ...</pre>
here, the variables <I>x </I>and <I>y</I> are added, presumably to arrive at some meaningful result.</FONT></FONT></FONT></FONT><P>
Since<I> x</I> and <I>y</I> have previously been declared with the keyword <I>int</I> (which is provided by C++), the programmer need not be concerned with internally representing these variables. In other words, the compiler is charged with defining their representation at the machine level.</FONT></FONT></FONT></FONT></FONT></FONT><P>
Moreover, the programmer need not worry about specifying to the compiler how integer addition is to performed; this job is also taken care of by the compiler.<P>
C++ provides the programmer with a number of built-in variable types. In addition, C++ allows the compiler's type support mechanism to be extended by allowing the programmer to define types.<P>
Programmer-defined types are implemented as a combination of variables and structures, as well as the permitted operations on these. The operations themselves are implemented as functions which are written by the programmer. C++ provides the type <I>class</I> for this purpose.</FONT></FONT><P>
A <I>class</I> lets the programmer gather, in a self-contained unit recognized by the compiler, the representational and operational aspects of the new type. It also provides mechanisms for specifying various levels of accessibility to the data and functions contained within the class. For example:</FONT></FONT><P>
<pre>class    shape {
// the default is private
     point center;
     void private_move (point to);
protected:
     void protected_move (point to);
public:
     void move (point to);
     ...
};</pre>
where <I>shape</I> is a <I>class</I> containing a <I>private</I> variable <I>center</I>, the <I>private</I> function <I>private</I>_<I>move</I>, the <I>protected</I> function <I>protected</I>_<I>move</I>, and a <I>public</I> function <I>move</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
In C++, this technique implements encapsulation, since it places <I>center </I>and its associated functions into a "capsule." All accesses to <I>center</I> must take place through these functions; this rule is strictly enforced by the compiler.</FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0175_00CC">Encapsulation<A name="0175_00CC"></FONT></h4></P>
A C++ programmer begins to write a program by building a conceptual framework of the problem domain.<P>
The programmer identifies various concepts, decides on how to represent these, and specifies the operations which can be performed on instances of that concept.<P>
An instance of a <I>class</I> is called an object and is declared as:</FONT></FONT><P>
<pre>shape     myshape;</pre>
This statement declares <I>myshape</I> as a variable of the <I>class shape.</I></FONT></FONT></FONT><P>
A client (any external function) typically interacts with an object by issuing function calls. For example:<P>
<pre>myshape<B>.</B>move (point (0,2));</pre>
which moves <I>myshape</I> from wherever it was to the location <I>0,2.</I></FONT></FONT></FONT><P>
Hiding the implementation from the client allows the programmer to safely modify a member function. As long as its calling sequences and semantics are preserved, client calls will continue to work, since encapsulation prevents them from relying on particular implementation details.<P>
In addition, encapsulation adds to program understandability, promotes reusability, and simplifies debugging (providing that source level debuggers are used).<P>
<h4><FONT COLOR="#000080"><A name="0175_00CD">Inheritance<A name="0175_00CD"></FONT></h4></P>
Inheritance takes C++ a step further into "object-orientedness."<P>
An overall design principle in C++ holds that a concept does not live in isolation, but is related to other concepts. This principle is supported in C++ by inheritance, which is basically a compiler-enforced organizational notion.<P>
In effect, a programmer designing a C++ application first needs to identify and understand the concepts which are required by the application, in order to create hierarchical classes out of these.<P>
A class hierarchy in C++ is composed of a base class and its derived classes. A base class defines a fundamental notion, which a derived class then refines by providing additional members. This mechanism allows derived classes to reuse the existing capabilities of the base class, and modify only what is needed: the base class is simply extended so that the programmer does not have to rewrite it in order to add new features.<P>
For example, a problem domain may contain, in addition to the general concept of <I>shape</I>, the slightly less general concepts of <I>circle</I> and <I>triangle</I>. The concepts of <I>circle</I> and <I>triangle</I> are related, in the sense that they are both shapes.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
A programmer may choose to indicate these relationships through the mechanism of derived classes:<P>
<pre>class circle : shape { void foo1(); };
class triangle : shape { void protected: foo2(); };</pre>
where<I> foo1</I> and <I>foo2</I> represent the unique members of <I>circle</I> and <I>triangle</I> respectively.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
In C++, a class may have public members (which are available to clients and derived classes), protected members (which are available only to derived classes), and private members (which are only available to the implementing class itself). For example:<P>
<pre>void newfunc(circle *p, triangle *q){
     p-&gt;foo1()    // error:  circle::foo1 is private
     ...
     q-&gt;foo2()    // error:  triangle::foo2 is protected
     ...
    };</pre>
where <I>newfunc</I> is a standalone function.</FONT></FONT><P>
However, derived classes may access public or protected members of their base class:<P>
<pre>void circle::foo1() {
     protected_move( point (0,2));    //   this is ok
     ...
};</pre>
C++ also provides the keyword <I>friend</I> to designate functions which are allowed access to private class members, but are themselves non-member functions:</FONT></FONT><P>
<pre>class     shape {
     color col;
     ...
public:
     ...
     friend void myfriend(shape *);
     ...
};</pre>
which defines a <I>friend</I> function <I>myfriend</I>, so that:</FONT></FONT></FONT></FONT><P>
<pre>void myfriend(shape * p){
          ...
          p-&gt;col = red; // this too is fine
          ...
     };</pre>
C++ supports multiple inheritance, which is the ability of a derived class to inherit the attributes of more than one base class. The judicious use of multiple inheritance may further increase code reusability and program flexibility.<P>
For example, the programmer may wish to create a class which displays text on a shape:<P>
<pre>class composite_class : circle, display txt {

     ...
};</pre>
where the derived class <I>composite_class</I> inherits attributes from the base <I>class circle</I> and a class <I>display_ txt</I>.</FONT></FONT></FONT></FONT></FONT></FONT><P>
Like most flexible techniques, single or multiple inheritance can be quite powerful when used skillfully, but can lead to messy programs when used improperly.<P>
As a rule, programmers must ensure that base class functions have generalized functionality (to prevent unexpected behaviors in the context of their derived classes), and that each derived class be provided with its own implementation of the base function.<P>
<h4><FONT COLOR="#000080"><A name="0175_00CE">Polymorphism<A name="0175_00CE"></FONT></h4></P>
To achieve inheritance in an elegant manner, C++ supports the concept of polymorphism.<P>
Polymorphism allows a programmer to have the same interface to different objects: a consistent interface will produce different results, depending on the type of the object.<P>
Polymorphism is intimately associated with late-binding.<P>
In C++, polymorphism is implemented as the combination of <I>virtual</I> functions and derived classes:</FONT></FONT><P>
<pre>class     shape {
     ...
public:
     ...
     virtual void draw ();
     ...
};</pre>
which declares a <I>virtual</I> function <I>draw</I>.</FONT></FONT></FONT></FONT><P>
In this example, the programmer specifies that a <I>shape</I> be associated with a <I>draw</I> function, but not how that function will be implemented.</FONT></FONT></FONT></FONT><P>
This stands to reason, since there are many classes of <I>shapes</I>, each requiring different implementations of the <I>draw</I> function. These derived classes will therefore implement the behavior as part of their own methods.</FONT></FONT></FONT></FONT><P>
During execution, the runtime environment decides which function to invoke. The decision is based on the object type. For example:<P>
<pre>class circle : public shape {
void draw ();
...
};

class triangle : public shape {
void draw ();
...
};

// two classes derived from shape

void myfunc (shape *p){
p-&gt;draw();
...
};

// a function which draws any shape

void anotherfunc () {
myfunc (new circle);
myfunc (new triangle);
};

// new makes an object on the heap</pre>
Polymorphism should not be confused with function overloading, which lets the compiler determine at compile time the invocation on the basis of the function argument types.<P>
<pre>class display_txt {
        ...
   public:
        ...
        void display_func(int); // display an integer
        void display_func{char*);// display a string
        ...
};</pre>
which declares the argument type of <I>display_func</I> to be an integer or a string, and leads to:</FONT></FONT><P>
<pre>display_txt         t;      // declare t

t.display_func (1);
t.display_func ("hello");</pre>
where the compiler ensures, prior to execution, that the correct version of the display function is called.<P>
As a rule of thumb, the later the bind, the greater the flexibility of a program. The price for this flexibility in many object-oriented implementations has been performance.<P>
However, a number of studies have shown that the differences in execution speed in C++ between a polymorphic call and a statically-bound call is quite minimal.<P>
<h4><FONT COLOR="#000080"><A name="0175_00CF">Conclusion<A name="0175_00CF"></FONT></h4></P>
C++ fundamentally supports the concepts of object-oriented programming &#151; encapsulation, inheritance, and late-binding. It also gives programmers who wish to program at a low-level the option to do so.<P>
Moreover, C++ is widely available. There are numerous commercial implementations of C++ compilers, debuggers, linkers, and other programming tools. The language itself, as is implied by its name, is compatible with existing languages (in particular, with C) and operating systems.<P>
Although an ANSI committee has been formed &#151; X3J16 &#151; to begin the process of standardizing C++, the current <I>de facto</I> standard remains AT&amp;T's translator, formally known as the C++ Language System Release 2.0 for UNIX System V.<P>
This translator does not currently support a number of features, such as automatic storage management (which is available, however, from other sources as an add-on facility), double dispatching, before and after methods (i.e., functions), and parametrized typing (sometimes called genericity), which are associated with richer &#151; and slower &#151; object-oriented language implementations.<P>
Still, C++ is an evolving language. It can be expected to provide selective degrees of support for these (and other) features over time, with genericity and error-handling being the most likely additions in the next major release of the official translator.<P>
<I>The author wishes to thank the inventor of C++, Bjarne Stroustrup of Bell Labs, for his cooperation.</I><P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
</BLOCKQUOTE>
</BODY>
</HTML>
