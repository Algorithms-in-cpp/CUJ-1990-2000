


<HTML>
<HEAD>

<TITLE>July 1990/Doctor C's Pointers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjul.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Doctor C's Pointers&reg;<A name="018C_00DB"><A name="018C_00DB"></font></h2><P>
<h3 align="center"><A name="018C_0000"><A name="018C_0000">Assertive Programming</h3><P>
<h3 align="center"><font color="#800000">Rex Jaeschke</font></h3><hr><blockquote><P>
<P><i><A name="018C_0000"><A name="018C_0000">Rex Jaeschke is an independent computer consultant, author and seminar leader. He participates in both ANSI and ISO C Standards meetings and is the editor of The Journal of C Language Translation, a quarterly publication aimed at implementers of C language translation tools. Readers are encouraged to submit column topics and suggestions to Rex at 2051 Swans Neck Way, Reston, VA 22091 or via UUCP at uunet!aussie!rex or aussie!rex@uunet.uu.net.</i></P><P>
The header <I>assert.h</I><I> </I>contains a macro that can be used for debugging purposes. This macro is called <I>assert</I> and it is conditionally defined based on the existence of another macro, <I>NDEBUG</I>. It is the programmer's responsibility to define <I>NDEBUG</I>; this symbol is never defined in the header or automatically by the compiler. If <I>NDEBUG</I> is not defined when <I>assert.h</I> is <I>#included,</I> the <I>assert</I> macro expands to a vacuous <I>void</I> expression and has no affect on the program. <I>NDEBUG</I> then, is key to whether or not assertions are actually inserted in the program. (Typically, your code would contain calls to <I>assert</I> and you would define <I>NDEBUG</I> on the command-line when you compile the module being debugged.) Let's look at a simple example:</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>#include &lt;assert.h&gt;
#include &lt;stdio.h&gt;

main()
{
   int value;
   
   while (1) {
    printf("Enter an integer: ");
    scanf("%4d", &amp;value);
    assert (value == 20);
   }
}</pre>
Since <I>NDEBUG</I> is not defined, <I>assert</I> expands into an assertion. With WATCOM's v7 MS-DOS compiler, the expansion is:</FONT></FONT></FONT></FONT><P>
<pre>_assert (value == 20,"value == 20","test1.c",11);</pre>
producing this:<P>
<pre>Enter an integer: 20
Enter an integer: 19
Assertion failed: value == 20, file test1.c, line 11</pre>
<h4><FONT COLOR="#000080"><A name="018C_00DC">Abnormal Termination<A name="018C_00DC"></FONT></h4></P>
The assertion causes the program to terminate abnormally but only if the argument to <I>assert</I> tests false and <I>NDEBUG</I> is not defined. In the preceding example, the first iteration of the loop produced <I>20 == 20</I> which is true so the program continued. The next loop, however, saw <I>19 == 20</I> and the <I>_assert</I> function called <I>abort</I> after writing its assertion message containing the false expression along with its source filename and line number, to <I>stderr</I>. Note that the actual source tokens are preserved. (In a standard-conforming implementation, this is achieved by using the stringize preprocessor operator #.) The format of the message output is implementation-defined.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Standard C requires the <I>assert</I> argument to be an integral expression.</FONT></FONT><P>
Some implementations define <I>assert</I> incorrectly. For example, using Turbo C v2, <I>assert</I> in this example expands to the code in <A href="list1.htm">Listing 1</A></FONT></FONT></FONT></FONT></FONT><P>
Now while this program will, in fact, compile and work, there are some subtle problems. First, <I>assert</I> expands to a statement, not a <I>void</I> expression as required, which prevents you from using <I>assert</I> in constructs like:</FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>if (...)
   assert(...);
else
   ...</pre>
In this case, <I>assert</I> expands to a statement which is then followed by the <I>null</I> statement, giving two statements in the <I>true</I> part of the <I>if</I>. Consequently, the compiler complains about a "dangling" <I>else</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The next problem is that <I>fprintf</I> has a variable argument list and needs to be called in the presence of a prototype containing an ellipsis. Borland supplies the prototype by including <I>stdio.h</I> in <I>assert.h,</I> but one standard header is not permitted to include another so <I>that's</I> a problem. (Borland breaks the same rule by including <I>stdlib.h</I> to get a prototype for <I>abort</I>.)</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
If the definition of <I>NDEBUG</I> is omitted, the <I>assert</I> macro expands to nothing in both WATCOM and Turbo C. And while this works in most cases, the macro is supposed to expand to a <I>void </I>expression (such as <I>((void)0) )</I>. One case where the empty expansion won't work is:</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>exp1 ? assert(...) : ...</pre>
If the call to <I>assert</I> expands to nothing at all, a syntax error results. However, with a <I>void</I> expression, it would not.</FONT></FONT></FONT></FONT><P>
While most library headers are designed to be included only once (with multiple inclusions having no extra effect), <I>assert.h</I> can be included multiple times such that, with the appropriate <I>#defines</I> and <I>#undefs</I> of <I>NDEBUG,</I> you can enable and disable assertions over various sections of code in the same source file. (This is not always supported correctly by compilers. The <I>#undef assert</I> is missing in Turbo C. This is necessary since you will be redefining <I>assert</I> with a different value.)</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Since <I>assert</I> can cause <I>abort</I> to be called, it's a very heavy-handed debugging technique. Not only can you debug only one expression at a time, but when a problem is found, the program terminates abnormally, without flushing output buffers or performing logical program shutdown. For a discussion of trapping the call to <I>abort</I> and shutting down in a controlled fashion, see my column "<I>exit</I> and <I>abort</I>" in the June issue of <I>The C Users Journal.</I></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
To see if your compiler's version of <I>assert</I> is standard-conforming, compile the program in <A href="list2.htm">Listing 2</a>.
 No errors should result.</FONT></FONT><P>

<h4><a href="../../../source/1990/jul90/jaeschke.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
