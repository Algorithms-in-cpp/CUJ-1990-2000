


<HTML>
<HEAD>

<TITLE>July 1990/An Object-Oriented Approach To Command Line Options</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjul.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Object-Oriented Programming</FONT></H2>

<hr><h2 align="center"><font color="#800000">An Object-Oriented Approach To Command Line Options<A name="0173_00C9"><A name="0173_00C9"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0173_0000"><A name="0173_0000">Don Colner</font></h3><hr><blockquote><P>
<P><i><A name="0173_0000"><A name="0173_0000">Donald Colner is a computer software consultant with 19 years experience in software engineering, and applications, systems, design and development. He can be reached at Basic Data Systems, Inc., 2202 Sherbrooke Way, Rockville, Maryland 20850 (301) 279-2791.</i></P><P>
Object-oriented programming focuses on an object, dividing a program into two parts: a high-level part that needs information about the object, and a low-level part that provides that information. Object-oriented programming languages enforce this division by hiding the data which describe the object from the high-level part of the program.<P>
Object-oriented programming is both an art and a craft. Identifying the object and the information which is needed about the object is mostly art. The resulting collection of data and functions is called a <I>class</I>. On the other hand implementing the data structures and functions which make up the class is mostly craft; this low-level part of the program is usually addressed with traditional programming techniques.</FONT></FONT><P>
Scott Maley, in his article "The World of Command Line Options," (<I>The C Users Journal</I>, Vol. 8, No. 3, March 1990) provides an excellent exposition of a traditional solution to the frequently encountered task of accessing command line arguments. To contrast traditional with object-oriented techniques, in this article I will develop an object-oriented solution to the same problem using top-down functional analysis to drive the design.<P>
<h4><FONT COLOR="#000080"><A name="0173_00CA">The Problem<A name="0173_00CA"></FONT></h4></P>
Many C programs begin by parsing the command line arguments accessible through <I>argc</I> and <I>argv</I>. One would expect that consistent use of a function like <I>getopt()</I> from UNIX System V would free the programmer from re-inventing this error-prone code with every new application. Frustratingly, the reality is that the code is seldom reusable because the usage isn't completely consistent between programs and because the available functions (like <I>getopt()</I>) rarely meet all of one's needs.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0173_00CB">Top-Down Functional Analysis<A name="0173_00CB"></FONT></h4></P>
Top-down functional analysis begins by identifying the data abstraction (e.g. the command line arguments) and defining what information the high-level functions may require about the data abstraction. The high-level functions which need the information should be considered prior to any code which implements the class. <A href="list1.htm">Listing 1</a>,
 <I>TestOpt.c</I>, provides an example.</FONT></FONT><P>
To treat the command line arguments as an object, first decide what you want to know about the arguments. Assume that command lines are structured so that they contain the program name in <I>argv[0], </I>switches (a letter preceded by -), and options (arguments after <I>argv[0]</I> that don't begin with -). These options are frequently file names. Switches are sometimes followed by a parameter. For example,</FONT></FONT></FONT></FONT><P>
<pre>MyProgram -x -f 10 MyFile YourFile</pre>
In this example the program name is <I>MyProgram</I>, there are two switches, <I>x</I> and <I>f</I>, and the <I>f</I> switch has the parameter <I>10</I>. There are two options, <I>MyFile</I>, and <I>YourFile</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The questions we might want to ask about a command line with this structure include:<P>
<UL><li>Is a certain switch set?</li>
<li>What is the parameter given for a certain switch?</li>
<li>What is the next option?</li>
<li>Do I need to look for more switches?</li>
<li>What name was used to invoke this program?</li></UL>
These questions can be answered with the following set of functions:<P>
<pre>IsSwitch( opt, 'f');
GetParameter( opt, 'f');
GetNextOption( opt );
IsMoreSwitches( opt );
GetProgramName( opt );</pre>
<A href="list1.htm">Listing 1</a>,
 <I>Test0pt.c</I>, shows how these functions could be used in a C program.</FONT></FONT><P>
Notice that this top level design analysis does not focus on the structure of the data referenced by <I>opt</I>. In fact, we have not even mentioned it. Up to this point in the analysis, <I>opt</I> is a data abstraction.</FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0173_00CC">Public Class Definition<A name="0173_00CC"></FONT></h4></P>
The public class definition for <I>Options</I> is contained in the header file, <I>Options.h</I> (<A href="list2.htm">Listing 2</a>)
 and should be the second focus of attention. This header file contains the prototypes of the functions which operate on the abstract data type. Note that the definition of <I>Options</I>:</FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>typedef void * Options</pre>
provides no information at all about the structure of the data which is manipulated by the functions such as <I>GetParameter()</I> in the <I>Options</I> class.</FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0173_00CD">Private Class Definition<A name="0173_00CD"></FONT></h4></P>
The private class definition of <I>Options</I> is contained in <I>Options.c</I>, <A href="list3.htm">Listing 3</a>.
 The details of the data structure pointed to by the <I>Options opt </I>are restricted to this file. As a result, if a high-level function such as <I>main()</I> wants any information about <I>opt</I>, it must invoke one of the <I>Options</I> class functions, such as <I>IsMoreSwitches()</I>. This makes the class data private to the class functions.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Making the definition of the data structure private to the class assures us that none of the high-level functions can manipulate the class data incorrectly. Any mistakes are created inside low-level functions which implement the class. This "information hiding" makes debugging easier.<P>
This approach restricts the details of the class implementation to a single file, the private class definition <I>Options.c</I>. As a result, if it becomes necessary or desirable to change the class, the impact of that change is restricted to a single file. This makes bugs easier to find and enhancements simpler to implement. If you later decide to alter the behavior of a class function, you know that only the low-level functions will need to be changed. If, for example, you decide that switch letters should be case insensitive, you will need to change only <I>IsSwitch()</I>.</FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0173_00CE">Constructor And Destructor<A name="0173_00CE"></FONT></h4></P>
So far I have ignored two very important functions in <A href="list1.htm">Listing 1</a>:
<P>
<pre>Options CreateOptions( void );
void  DestroyOptions( Options );</pre>
This function pair, called the constructor and destructor functions, plays a very important role. The constructor function instantiates the object by dynamically allocating data for one copy of the structure which will hold the private data of the <I>Options</I> class.</FONT></FONT><P>
Dynamic data allocation permits the reusability of the class. In fact, the combined requirement of data privacy (meaning that only functions within the class have knowledge of the structure of the object) and reusability make dynamic memory allocation by a class function the only way to instantiate an abstract data type.<P>
The destructor function complements the constructor function. The constructor allocates the memory to instantiate the abstract data type, and the destructor deallocates it.<P>
<h4><FONT COLOR="#000080"><A name="0173_00CF">Implementation And Coding Style<A name="0173_00CF"></FONT></h4></P>
Now that the abstract data type is defined, I'll illustrate its use and implementation by developing a program (<I>lp.c</I>) to drive a printer. If I implement this program as a trivial call to a function <I>PrintFiles()</I>:</FONT></FONT></FONT></FONT><P>
<pre>/* lp.c
 */
void PrintFiles( int argc,
              char *argv []);
void main( int argc,
         char *argv []) {
   PrintFiles( argc, argv);}</pre>
then I can easily incorporate the <I>PrintFiles()</I> functionality in other programs. Because I've handled the command line options as an abstract data type, any program which uses the function <I>PrintFiles()</I> can use the class <I>Options</I> to manipulate its arguments. If all your programs use the class <I>Options</I> to parse the command line options, you can achieve a much more consistent user interface and extend this user interface from the command line to functions.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Two conventions have been followed in defining the public class functions. Each of these functions is named by a predicate followed by an object with the first letter of each word capitalized. In addition, the first parameter for every function except the <I>CreateOptions()</I> function is of type <I>Options</I>.</FONT></FONT></FONT></FONT><P>
For any class named <I>Object</I>, the following should be included in the Public Class Definition of <I>Object</I>:</FONT></FONT></FONT></FONT><P>
<pre>typedef void * Object;
Object CreateObject( void );
void   DestroyObject( Object );</pre>
The use of the macro named <I>this</I> is consistent with the usage in C++. In <A href="list3.htm">Listing 3</a>,
 the structure <I>OPTIONS</I> is only used in two places in the file. It is used in <I>CreateOptions()</I> to determine the amount of memory required to instantiate an <I>Options</I>, and is used in the macro definition of <I>this</I>. The <I>this</I> macro gets around the awkward implementation detail of dealing with the object as a (<I>void</I> *) in the high-level functions and as type (<I>OPTIONS</I> *) inside the class definition.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
I suggest consistent error handling be placed at the lowest possible level. The <I>ErrorExit()</I> function in <A href="list3.htm">Listing 3</a>
illustrates a relatively simple example of a general-purpose error handling function. Low-level error handling implies exiting from the program when the error is encountered. Error recovery schemes ordinarily require handling the errors within the high-level functions, producing much more complicated programs. One of your objectives should be to force complexity to the program's lower-level functions.</FONT></FONT><P>
Note that none of the functions in the <I>Options</I> class return error values or set error flags. This approach is usually satisfactory so long as you can change the error handling to deal with different types of user interfaces, say a command line or windowing interface. If two styles of user interface exist in the same program, it may be necessary to maintain a global pointer to an error handling routine which is changed when the user interface changes.</FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0173_00D0">Summary<A name="0173_00D0"></FONT></h4></P>
The major elements of this design approach are:<P>
<UL><li>Top-down, functional design</li>
<li>Private Class Definition in one <I>.c</I> file</FONT></FONT></li>
<li>Public Class Definition in header file</li>
<li><I>typedef void * Object</I>; abstract data type</FONT></li>
<li><I>this</I> macro to simplify class functions</FONT></li>
<li>Predicate-Object function names including:</li>
<li>Object CreateObject( void )<I> and</I></FONT></li>
<li>void DestroyObject( Object )<I></I></li>
<li>Object as the first function parameter</li>
<li>Low-level error handling</li></UL>
The first four items are essential to the object-oriented design process. The remaining items are more a matter of style than substance.<P>
Even though C++ offers much more sophistication in implementing object-oriented programs than C, it's clear that an abstract data type can be created and manipulated in C. By applying the basic principles of object-oriented design to their applications, C programmers can realize the advantages of the object-oriented approach, including: better support for top-down design by using abstract data types; more reusable function libraries (classes); and more maintainable functions (private class definitions).<P>


<h4><a href="../../../source/1990/jul90/colner.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
