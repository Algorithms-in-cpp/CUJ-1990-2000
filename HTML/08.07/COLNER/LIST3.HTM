<HTML><HEAD><TITLE>July 1990/An Object-Oriented Approach To Command Line Options/Listing 3</TITLE></HEAD><BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A name="0173_00D6"><A name="0173_00D6">Listing 3<A name="0173_00D6"></h4><P>
<pre>/*     Options.c
*/
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdarg.h&gt;
#include "Options.h"
struct tOPTIONS{
   int argc, next;
   char    **argv;
   boolean  *used;
   };
typedef struct tOPTIONS OPTIONS;
#define this ((OPTIONS *)options)
   static void
ErrorExit( char *format, ...){
      va_list ap;
   va_start( ap, format);
   fprintf( stderr, "Error: ");
   vfprintf( stderr, format, ap);
   fprintf( stderr, "!\nAborting.\n");
   exit(1);
   va_end( ap );
   }
   boolean
IsSwitch( Options options, const char switch_character){
      int k =0;
   for( ;k &lt; this-&gt;argc; k++ )
      if( this-&gt;argv[k][0] == '-' &amp;&amp;
          this-&gt;argv[k][1] == switch character
          )return (this-&gt;used[k] =TRUE);
   return FALSE;
   }
   char *
GetParameter( Options options, const char switch_character){
      int k =1;
   for( ;k &lt; this-&gt;argc; k++ )
      if( this-&gt;argv[k][0] == '-' &amp;&amp;
          this-&gt;argv[k][1] == switch_character
          ){
          this-&gt;used[k++] =TRUE;
          this-&gt;used[k]   = TRUE;
          return this-&gt;argv[k];
          }
   return NULL;
   }
   boolean
IsMoreSwitches( Options options ){
      int k =0;
   for(; k &lt; this-&gt;argc; k++)
      if( !this-&gt;used[k] &amp;&amp; this-&gt;argv[k][0] == '-' )
      return TRUE;
   return FALSE;
   }
   char *
GetNextOption( Options options ){
   for( ;this-&gt;next &lt; this-&gt;argc; this-&gt;next++)
      if( !this-&gt;used[this-&gt;next] &amp;&amp;
       this-&gt;argv[this-&gt;next][0] != '-'
      )return( this-&gt;argv[this-&gt;next++] );
   return NULL;
   }
   Options
CreateOptions(void){
      OPTIONS *opt;
   if( (opt =calloc( 1, sizeof(OPTIONS))) == NULL )
      ErrorExit("Out of memory in CreateOptions()");
   opt-&gt;argc =0;
   opt-&gt;argv =NULL;
   opt-&gt;next =0;
   opt-&gt;used =NULL;
   return (Options)opt;
   }
   void
PutArgs( Options options, const int argc, char **argv){
   this-&gt;argc =argc -1;/* ignore the program name  */
   this-&gt;argv =argv +1;/* in argv[0]  */
   this-&gt;next =0;
   if( (this-&gt;used =calloc(this-&gt;argc,sizeof(boolean)))
      == NULL )ErrorExit("Out of memory in PutArgs()");
      {   int k=0;
          while( k &lt; this-&gt;argc )
              this-&gt;used[k++] =FALSE;
      }
   }
   void
DestroyOptions( Options options){
   if( this-&gt;used )free( this-&gt;used );
   free( this );
   }</pre>
</BODY>
</HTML>
