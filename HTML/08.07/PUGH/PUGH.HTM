


<HTML>
<HEAD>

<TITLE>July 1990/Questions & Answers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjul.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Questions &amp; Answers<A name="0193_00E1"><A name="0193_00E1"></font></h2><P>
<h3 align="center"><A name="0193_0000"><A name="0193_0000">Stringizing, Replies</h3><P>
<h3 align="center"><font color="#800000">Ken Pugh</font></h3><hr><blockquote><P>
<P><i><A name="0193_0000"><A name="0193_0000">Kenneth Pugh, a principal in Pugh-Killeen Associates, teaches C language courses for corporations. He is the author of C Language for Programmers and All On C, and is a member on the ANSI C committee. He also does custom C programming for communications, graphics, and image databases. His address is 4201 University Dr., Suite 102, Durham, NC 27707.</i></P><P>
<P><i>You may fax questions for Ken to (919) 493-4390. When you hear the answering message, press the * button on your telephone. Ken also receives email at kpugh@dukeac.ac.duke.edu (Internet) or dukeac!kpugh (UUCP).</i></P><P>
<B>Q</B><P>
I usually program in BASIC, and now I'm self-taught in C. However, I have two questions to ask you:<P>
1. I'd like to use the C program in <A href="list1.htm">Listing 1</a>
to read a file which has been created by BASIC <I>PRINT# </I>command.</FONT></FONT><P>
Why did the output of <I>rec.first_name</I> exceed 15 characters while it was defined as 15 bytes?</FONT></FONT></FONT><P>
2. How to print the output to printer 2 (LPT2) instead of printer 1 (LPT1) because in C there is only one <I>stdprn</I>.</FONT></FONT><P>
Chaiyos Gosolsatit<br>
Lewiston, NY<P>
<B>A</B><P>
You were lucky that there was a <I>NUL</I> (a binary zero byte) immediately following the <I>rec</I> variable. Otherwise your printout might have even looked more garbagey (or is it garbagy?). <I>printf</I> doesn't know <I>record_name</I>'s field width. The <I>"%s"</I> format specifier tells <I>printf</I> to print characters starting at the address in the corresponding argument and ending at the first <I>NUL</I> character. (By convention <I>NUL</I> signifies the end of the string.)</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The symbol <I>rec.first_name</I> evaluates to the address of the first character in the first name field. <I>printf()</I> starts printing form there to the first <I>NUL</I>, which by sheer accident happened to follow <I>rec</I>. Thus <I>printf()</I> printed both the <I>first_name</I> and <I>last_name</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
To stop <I>printf()</I> without relying on a <I>NUL</I>, use the field width and the precision specifiers with "<I>%s</I>". For <I>"%s"</I>, the precision (the number after the decimal point gives the maximum number of characters. Your print statements would then read:</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>printf("First Name: %15.15s\n", rec.first_name);
printf("Last Name : %15.15s\n", rec.last_name);</pre>
The field width specifier can be omitted when the strings will be at least the length of the precision value and the printout will still line up. I usually include a width specifier so that the printout lines up even if an unexpected <I>NUL</I> appears in a string. </FONT></FONT><P>
2. Under MS-DOS a MODE command on the DOS command line before executing your program will set the printer to be any device (LPT1, LPT2, COM1, etc.). that you want to use. Some compilers also define symbols, e.g. <I>stdlst</I>, for alternate devices.</FONT></FONT><P>
<B>Q</B><P>
Here is a funny concerning function pointers that I am at a loss to explain:<P>
Suppose you define a function, e.g.<P>
<pre>int func(void)
   {
   ...
   }</pre>
then define a function pointer with<P>
<pre>int (*ptr)();</pre>
then point <I>ptr</I> to the function with</FONT></FONT><P>
<pre>ptr = func;</pre>
Both <I>func</I> and <I>ptr</I> now presumably point to the starting address of the function and the latter can indeed be called either with</FONT></FONT></FONT></FONT><P>
<pre>func();</pre>
or<P>
<pre>ptr()</pre>
However it can also be called with<P>
<pre>(*ptr)();</pre>
but <I>*ptr</I> is the object pointed to by <I>ptr</I>, which is presumably the beginning of the function body and not its address. How come they both work?</FONT></FONT></FONT></FONT><P>
Peter Sington<br>
Essex, England<P>
<B>A</B><P>
When you call <I>ptr()</I>, you are using a shortcut that is now permitted by the ANSI standard. It was not in K&amp;R.</FONT></FONT><P>
Under K&amp;R, calling functions with pointers was consistent with data types. You called the function with a pointer and the indirection operator. For example, with a data pointer:<P>
<pre>int i, j;
int *p;
p = &amp;i;   /*  Refers to the variable p
        (pointer to int) */
*p = 5;   /*  Refers to the object p
        points at (an int) */
j = *p;   /*  Refers to the object p
        points at (an int) */</pre>
The use of <I>p</I> alone represents a pointer to an <I>int</I>; <I>*p</I> represents an <I>int</I>. Following along these lines for a function pointer:</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>int f();
int (*pf)();
pf = f;            /*  Refers to the variable pf */
another_func(pf);  /*  Passes the value
                of variable pf */
another_func((*pf)());  /*  Passes the
                    return value of the
                    function (an int) */</pre>
The appearance of the form of a declaration (except for the data type) in an expression is an object of that data type. The <I>(*pf)()</I> form for calling the function matches this for function pointers. Note that the parentheses are needed due to the precedence of the operators. Without them, the expression <I>*pf()</I> would attempt to apply the indirection operator to the value that a function called <I>pf</I> returns.</FONT></FONT></FONT></FONT></FONT></FONT><P>
Some compilers permitted <I>pf()</I>. According to the Rationale for the standard, this construct "is unambiguous, invalidates no old code, and can be an important shorthand. The shorthand is useful for packages that present only one external name, which designates a structure full of pointers to objects and functions: member functions can be called as <I>graphics.open(file) </I>instead of <I>(*graphics. open) (file)</I>".</FONT></FONT></FONT></FONT></FONT></FONT><P>
Accordingly, the Rationale states you can use any of the following:<P>
<pre>(&amp;f)();  (*f)();   (**f)();           (***f)();
pf();    (*pf)();  (**pf)();    (***pf)();</pre>
I prefer to use the <I>(*pf) ()</I> form. This alerts the maintenance programmer to the fact that a reference to <I>pf</I> will not appear in the external function listing.</FONT></FONT></FONT></FONT><P>
<B>Q</B><P>
I want to stuff two characters into an integer. I used the following code and it works with Microsoft 5.0. Is there a better way?<P>
<pre>int i;
/*  Stick the first character in */
(char) i = 'A';
/*  Stick the second character in */
*(&amp;(char)i + 1) = 'B';</pre>
Larry Meyers<br>
Raleigh, NC<P>
<B>A</B><P>
I'm amazed that it works. The standard states that "a cast converts the value of the expression to the named type". It also states that a "cast that specifies an implicit conversion or no conversion has no effect on the type or value of an expression."<P>
The address operator can only be applied to an lvalue or a function designator. An lvalue is something that represents a memory address where a value can be stored; an lvalue can be the left-side of an assignment statement. The address operator cannot be applied to an expression. For example, <I>&amp;(i + 1)</I> is illegal.</FONT></FONT><P>
<A href="list2.htm">Listing 2</a>
shows a program with the casts and the results (with an offending error removed).<P>
The cast of the <I>char c</I> should be okay, since it does not do any conversion. I tried the program with two compilers. The Manx Aztec compiler complained that <I>(char) c</I> is not an 1value and gave many more errors. The Microsoft compiler allowed everything except for the assignment to <I>(double) i</I>, which it complained was not an lvalue.</FONT></FONT></FONT></FONT></FONT></FONT><P>
If you need to stuff the characters into an integer, it might be better to use the <I>memcpy</I> function or do bit shifting:</FONT></FONT><P>
<pre>memcpy(&amp;i, "AB", 2);
i = 'A' &lt;&lt; 8 | 'B';</pre>
<B>Q</B><P>
I was pleased to discover in your February column an explanation of the <I>offsetof()</I> macro of the new ANSI standard. Unfortunately my compilers (Turbo C and Power C) do not provide this macro and after making a dozen phone calls I have not been able to find a copy of the draft standard. I'm wondering if you might be able to provide me a copy of the <I>offsetof() </I>macro definition.</FONT></FONT></FONT></FONT><P>
<B>A</B><P>
The offsetof operator can be defined:<P>
<pre>#define offsetof(type,member)  \
   (size_t) &amp;( ((type *) NULL) -&gt;member)</pre>
where <I>size_t</I> is an ANSI standard <I>typedef</I> used for values that represent sizes in memory units (e.g. bytes). You could implement <I>size_t</I> with:</FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>typedef int size_t;</pre>
or<P>
<pre>typedef long size_t;</pre>
This macro simply finds the address of a member of a structure whose base address is <I>0</I> (the <I>NULL</I> address) and casts it into an integer.</FONT></FONT><P>
<B>Q</B><P>
Is there a way under MS-DOS to link to C library functions at runtime? My executable files are too long. Presumably each contains a copy of each library function it calls &#151; <I>printf()</I>, <I>scanf()</I> and the like. How can I reduce or avoid this replication, even at the cost of some execution speed?</FONT></FONT></FONT></FONT><P>
Dale Wharton<br>
Montreal, Canada<P>
<B>A</B><P>
I have just received a copy of RTLink by Pocket Soft, Inc. (P.O. Box 821049, Houston, TX 77282 (713) 460-5600). RTLink has two features that will help you with large executable files. First, it supports more overlays than the Microsoft linker does. Second, it supports runtime libraries (RTLs). These are similar to what OS/2 offers. The RTLs contain common functions that are used by multiple executable files.<P>
RTLink was recommended to me by some of my associates. I haven't used it yet, but I have a program that is approaching memory limitations with a single level of overlays.<P>
<B>Q</B><P>
The problem that Josh Cohen has (<I>The C Users Journal</I>, vol.8, no. 3), is similar to a problem that I had recently. I had written a dozen small parsers, and the startup code for each was nearly identical, making it natural to use one file of code and setting things up so that the preprocessor would make the necessary minor changes. The files were carefully named so that <I>prog1.c</I> would use the headers <I>prog1_a.h</I>, <I>prog1_b.h</I>, etc.. There were corresponding headers for <I>prog2</I> and the rest. The stereotyped code was put in file <I>progx.h</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
What I wanted to do was write something like (for <I>prog1. c</I>).</FONT></FONT><P>
<pre>#define PROG   prog1
#include "progx.h"</pre>
which might be like<P>
<pre>#define INCL_A(i)  #i "_a.h"
#define INCL_B(i)  #i "_b.h"

#include INCL_A(PROG)
#include INCL_B(PROG)</pre>
or something that would have a similar effect. Nothing works, either in Turbo C 2.0 or Microsoft C 5.1. I've tried several variations, such as<P>
<pre>#define STR(s)     #s
#define INCL_A(i)  STR(i) "_a.h"

#include INCL_A(PROG)</pre>
and even the direct<P>
<pre>#include STR (PROG)</pre>
Nothing works. Sometimes the compiler refuses to recognize the construction, and other times says that it can't open the file<P>
<pre>"prog1" "_a.h"</pre>
where for some reason the strings weren't concatenated. The token-pasting operator helps, but not enough.<P>
What I ended up doing was, in the main source file, defining<P>
<pre>#define INCL_A "prog1_a.h"
#define INCL_B "prog1_b.h"</pre>
and then in <I>progx.h</I> using</FONT></FONT><P>
<pre>#include INCL_A
#include INCL_c</pre>
which works, even if it is more of a hassle.<P>
I've gone through the manuals and the books, and I can't find any reason why this shouldn't work, but it doesn't. Do you know of a way around this, or at least, can you give me an explanation of why the compilers behave this way?<P>
Jim Howell<br>
Lafayette, Colorado<P>
<B>A</B><P>
The translation of the source file takes place in a number of phases. These are defined in the ANSI Standard section 2.1.1.2. For example, in the second phase physical lines are transformed into logical lines. In this phase, the \ immediately followed by a new-line is eliminated. In the fourth phase, the preprocessing directives are executed. This brings in the <I>#include</I> files. You are using the:</FONT></FONT><P>
<pre>#include DEFINE_LABEL</pre>
version of the <I>#include</I> file (a new ANSI feature). The <I>DEFINE_LABEL</I> must be something that has been <I>#defined</I>. Not until the sixth phase are the adjacent string literals concatenated. All of these phases may take place in a single physical pass of the compiler; they are ordered in the Standard to clarify the logical operations that should take place.</FONT></FONT></FONT></FONT></FONT></FONT><P>
As you can see, string literal concatenation does not take place until after the <I>#include</I> filename has been accessed. Thus you get the <I>prog1_a.h</I> filename error. The best I can suggest is to add a few <I>#ifdefs</I> in your header. For example:</FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>#ifdef PROG1
#define INCL_A "prog1_a.h"
#define INCL_B "prog1_b.h"
#endif
#ifdef PROG2
#define INCL_A "prog2_a.h"
#define INCL_B "prog2_b.h"
#endif</pre>
When you compile, you would simply use:<P>
<pre>cc /DPROG1</pre>
or<P>
<pre>cc /DPROG2</pre>
to setup the necessary names. Most compilers provide a <I>/D</I> or <I>-D</I> option to define a name on the command line.</FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0193_00E2">More On Stringizing<A name="0193_00E2"></FONT></h4></P>
From the readers' response on this issue, I am reminded of an old story that I tell my classes during the introductory talk. A couple had a child who did not speak a single word. As the child grew up, they took him to all sorts of specialists, but to no avail. Suddenly, at the dinner table on the child's tenth birthday, he asked, "Could you please pass the sugar?" The astonished parents exclaimed, "You can speak! Why haven't you said anything before?" The child replied, "Well, up to now, everything's been fine."<P>
Responses were received via fax, email and postal service. Last month I published the only one received before press time. This month there were too many to print.<P>
As I mentioned in the last column, once the solution appears, it is obvious. For whatever reason, I had a mental model of how the token replacement worked. The printed explanation in the standard always translated into my mental model, even though the explanation was not in line with my model, especially since there was no specific example. With normal stuff, it doesn't matter, at least for the macro expressions I generally use. For example, given:<P>
<pre>#define MAX   10
#define X(Y)  Y + 1
#define Z(Q)  X(Q * 2)</pre>
then<P>
<pre>Z(MAX)</pre>
can be interpreted as either (No expansion):<P>
<pre>X(MAX * 2)
MAX * 2 + 1
10 * 2 + 1</pre>
or as (expansion of the tokens)<P>
<pre>X(10 * 2)
10 * 2 + 1</pre>
With the # operator, these two ways are different. Given<P>
<pre>#define MAX 10
#define A(Y)  #Y
#define B(Q)  A(Q)</pre>
then <I>B(MAX)</I> can be interpreted as (no expansion):</FONT></FONT><P>
<pre>A(MAX)  /*  Simply substitute */
#MAX    /*  Don't substitute, simply expand */
"MAX"   /*  Quote operator */</pre>
or as (expansion along the way):<P>
<pre>A(10)  /*  Since Q was in parameter list
         but not part of # or ##,
         it is expanded */
#10
"10"</pre>
For ANSI and me, the correct model is now:<P>
"The tokens of a macro represent either a name or a value. If it is used with a # or ## in the replacement string, it represents the name itself (e.g. unexpanded). Otherwise it represents a value (the expansion)."<P>
If you have this mental model, then it all works out fine. As you'll see in the responses, at least one compiler maker does not follow the ANSI model.<P>
Replies on this problem were received from many people. Although there is not room to print them in full, I thought it would be interesting to show how many variations there were in naming the "stringifying" macro. I'm going to go out on a limb and suggest a "standard name" for this macro, just like <I>argc </I>and <I>argv </I>are "standard names" for the main function's parameters. Let's call it "<I>quote</I><I> (</I><I>x</I><I>)</I>".</FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0193_00E3">Replies<A name="0193_00E3"></FONT></h4></P>
You will probably be flooded with responses to Josh Cohen's question in the March 1990 C <I>Users</I> <I>Journal</I>, but just in case nobody else writes:<P>
<pre>#define quote(x) #x
#define STRING_WITH_VALUE(x) "Error message" quote(x)</pre>
James Janney<br>
Salt Lake City, Utah<P>
I received comparable advice from:<P>
Mark Grand, Concord CA; Shamus McBride, Seattle, WA; Carl Paukstis, Spokane, WA; Ian Cargill, Surrey, United Kingdom; Mary Kirtland, Arlington, VA; Mike Higginbottom, Sturtevant, WI; and Al Williams, League City, TX.<P>
Josh Cohen, in the March, 1990, issue of <I>The C Users Journal</I>, had a problem with getting the preprocessor to put the value of a macro into a string. I had a similar problem where I was trying to insert a constant into the width parameter a format string. I solved it this way:<P>
<pre>#define STR_LEN    15
#define STR(s)     #s</pre>
and used these in a variable definition<P>
<pre>char* fmt ="%" STR (STR_LEN) "s";</pre>
The contents of <I>fmt</I> are now <I>"%15s"</I>, which was exactly what I wanted. This solved the problem for Turbo C 2.0, and your code at the top of page 35 works here, too.</FONT></FONT></FONT></FONT><P>
Unfortunately, neither of these work with Microsoft C 5.1, which produces the format string <I>"%STR_LENs"</I> and Mr. Cohen's problem, but with another layer of indirection both can be made to work. To solve Mr. Cohen's problem, write</FONT></FONT><P>
<pre>#define MAX       10
#define STR(s)    #s
#define MSG(m)    "Error message " STR (M)</pre>
and use the call<P>
<pre>DoMsg (MSG (MAX));</pre>
The string <I>"Error message 10:"</I> is now passed to <I>DoMsg,</I> as we want it to.</FONT></FONT></FONT></FONT><P>
My problem needed a similar change, namely<P>
<pre>#define STR_LEN     15
#define STR(s)      #s
#define FMT(s)      "%" STR (s) "s"
Char* fmt =FMT (STR_LEN);</pre>
Both of these behave the same way in Turbo C. Thankfully.<P>
This naturally brings up the problem of which is the correct behavior for a compiler that conforms to the C standard. This seems to be a problem of precedence, over whether the stringizing comes before the translation of <I>STR</I> or after it, and from what I can tell from the standard, the MSC compiler behaves correctly. But then the whole thing is murky. It took some experimentation to figure these out, and I have no confidence that any of them would port to another "conforming" compiler, or even to the next version of these.</FONT></FONT><P>
Jim Howell<br>
Lafayette, Colorado<P>
<h4><FONT COLOR="#000080"><A name="0193_00E4">Constants Into Strings<A name="0193_00E4"></FONT></h4></P>
I read with interest the letter from Josh Cohen and Stuart Downing of Dexter Michigan, and your response. You can use the * in the specification, as:<P>
<pre>printf ("\n Record is %*s %*s",
   WFIRST_NAME, record.first_name,
      WSECOND_NAME, record.last_name);</pre>
The * may also be used in place of the precision part of the conversion specification, as:<P>
<pre>printf ("%10.*f", precision, value);</pre>
Obviously, the width specified need not be a constant, allowing you to specify a variable field width or precision. Note, however, that you will incur a run-time penalty, which would not be the case if the pre-processor generated the string you wanted.<P>
I realize this doesn't solve the original problem, but I couldn't find any way to do that either.<P>
David Hansen<br>
Chaska, Minnesota<P>
Similar letters were received from John D. Bowman of Maryland Hts., MO and Michael S. Alt of Rockville, MD.<P>
<h4><FONT COLOR="#000080"><A name="0193_00E5">Reply To The Replies<A name="0193_00E5"></FONT></h4></P>
Thank you all for your comments on the * specifier. I think I put down a version of my problem that I simplified to something that the * can now handle.<P>
What I really wanted to do was initialize a table of format strings. I had this problem six years ago (would that be 6 BAC &#151; Before ANSI C?). The * specifier did not exist in the compiler I was using. As I recall the situation, there was a record on disk that looked like:<P>
<pre>#define WFIRST_NAME 10
#define WLAST_NAME 30
#define WNUMBER 5
struct s_record
   {
   char first_name[WFIRST_NAME];
   char last_name[WLAST_NAME];
   int number;
      ...
   };
struct s_record record;</pre>
I created an array of field information that looked something like:<P>
<pre>struct s_field
   {
   char *location;  /*  Location of data */
   char *format;    /*  Format for data */
   };

struct s_field fields[] = {
   { (char *) &amp;record.first_name, "%10s"},
   { (char *) &amp;record.last_name, "%30s"},
   { (char *) &amp;record.number, "%5d"},
      ...
   };</pre>
The <I>fields</I> array could be used in a loop to retrieve and print the information. The fact that the sizes of each field appeared in two places made it more difficult to maintain. So it would have been quite helpful to have the <I>quote</I> operator and implicit concatenation then.</FONT></FONT></FONT></FONT><P>
I eventually wound up using a table such as:<P>
<pre>struct s_field
   {
   char *location;
   int size;      /*  Number of bytes */
   int type;     /*  Type - STRING, INTEGER, etc. */
   char format[10];    /*  Format string */
   };</pre>
where the types were <I>#defined</I>. (This compiler did not even have enumerated types). Then in an initialization routine, I did some <I>sprintfs</I> to the format field in a <I>switch</I> statement. This looked something like:</FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>switch (field.type)
   {
case STRING:
   sprintf(field.format, "%%%ds", field.size);
   break;
case INTEGER:
   sprintf(field.format, '%%%dd", field.size);
   break;
      ...
   }</pre>
Note that the <I>%%</I> yields a single <I>%</I> in the output. (KP)</FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0193_00E6">Mouse Hardware<A name="0193_00E6"></FONT></h4></P>
You may determine a mouse's hardware hookup through interrupt <I>33h</I> function <I>36</I>(decimal). The mouse driver must be compatible with the Microsoft Mouse v6.0 or later, released in September of 1986. Exact information is in the <I>Microsoft MOUSE Programmer's Reference,</I> pages 203-4, by Microsoft Press.</FONT></FONT></FONT></FONT><P>
However, if you call function <I>36</I> and the mouse type is serial (<I>CH</I> = 2), the IRQ number (<I>CL = 4 </I>or<I> 3</I>) tells you that the serial port is <I>COM1</I> or <I>C0M2</I>, respectively.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Code samples in assembly language and in C appear as <A href="list3.htm">Listing 3</a>
and <A href="list4.htm">Listing 4</a>.
 They unrightfully assume familiarity with the IBM-PC hardware interrupt structure.<P>
Daniel R. Haney<br>
Cambridge, MA<P>

<h4><a href="../../../source/1990/jul90/pugh.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
