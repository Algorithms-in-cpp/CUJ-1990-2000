


<HTML>
<HEAD>

<TITLE>July 1990/We Have Mail</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjul.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Departments</FONT></H2>

<hr><h2 align="center"><font color="#800000">We Have Mail<A name="01A9_00EB"><A name="01A9_00EB"></font></h2><hr>
<BLOCKQUOTE>
<A name="01A9_0000"><A name="01A9_0000">Dear CUJ:<P>
While running the program <I>floath.C</I> on various machines which perform arithmetic on other than IEEE style, I have found a few improvements to be made. The most serious problem occurs in the first loop, labeled in the comment "find smallest power of 2 . . "where the relational &gt;= should be changed to ==. The expression to the left of == evaluates as <I>1</I> until the last time through the loop, when it becomes <I>0</I> on most machines, including those which have IEEE style rounding. With DEC style rounding, the expression rounds up to <I>2</I> at the end of the loop. If the loop is continued, with either rounding behavior, the expression evaluates to <I>0</I> until an overflow occurs. The loop as published ran one time too often on DEC-like machines, causing the erroneous report of a radix of <I>4</I>. The change will enable the loop to work also with interval arithmetic rounding modes.</FONT></FONT><P>
The expression for division rounding is not reliable on a machine where subtraction is not properly guarded. As far as I know, there are no such machines remaining on the market. The problem can be cured by setting <P>
<pre>v = l - z;</pre>
and replacing<I> l</I><I>-</I><I>z-z </I>by<I> v-z, 1-z</I> by v, and <I>-1+z by -v</I>. One of the problems with 68881 machines is to avoid using so many registers that the compiler decides to store a register to memory, resulting in a mixture of precisions and causing some of these tests to fail.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Ecosoft's 8-bit software floating point subtraction arbitrarily sets the result to 0 when evaluating expression such as<P>
<pre>1 - (1 - DBL_EPSILON*.5)</pre>
even though the evaluation is performed in the correct order. Correcting this enables the division rounding test to work as published and passes the <I>subgrd</I> test. One of the four tests for addition rounding still fails, since numbers between <I>1 - DBL_EPSILON*65/256</I> and <I>1 - DBL_EPSILON/4</I> round up to <I>1</I> when they should round down to <I>1</I> when they should round down to <I>1 - DBL_ EPSILON/2.</I> This discrepancy, which was shared by early Apollo models, is of no practical consequence, so one might conclude that this rounding test is too severe. The double rounding of double arithmetic on 68881 and 8087 processors is not much more of a problem, and I have tried to avoid it by testing <I>long double</I> rather than <I>double</I> arithmetic.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
I apologize for inconvenience which may have been caused by the lack of claimed generality in the code, and appreciate any information which may be turned up by running it on other systems, even museum pieces.<P>
Sincerely yours,<P>
Tim Prince<br>
39 Harbor Hill Rd.<br>
Grosse Pte Farms, MI 48236<P>
Dear Mr. Ward,<P>
I would like to congratulate Mr. Frost on his excellent article describing the use of files as semaphores ("Using Files as Semaphores",<I> CUJ</I>, April 1990). This is a topic which has long been neglected and I was quite pleased to see your magazine's coverage of the topic. Having implemented a mechanism very similar to the one described by Mr. Frost, I feel a few points require rebuttal.<P>
When the existence of a file is used for resource locking, there are two primary problems, the first revolves around the performance of constantly creating and deleting files. Although operating system performance vis-a-vis the file system is being enhanced on many platforms, it is still one of the slower parts of the environment. Thus, repeated file creation and deletion can result in unacceptable performance degradation. Secondly, while operating systems such as UNIX will automatically remove a semaphore file, other systems (DOS for example) will not do so. Thus, on a system without autodeletion of semaphore files, if your program terminates abnormally for any reason, any locked resources may remain inaccessible to other processes.<P>
When I began designing a semaphore mechanism for my employer, the following requirements were outlined: 1) access to a fixed number of shareable resources were to be managed independently by the mechanism (a total of 19 resources eventually), 2) multiple, simultaneous "read" operations were to be permitted on any resource, 3) a single "append" operation was to be permitted to occur on a resource while "reads" were occurring, 4) a single "write" operation could commence only after all active "append" and "read" operations were completed for a resource. In this context, a "write" operation entailed overwriting data which already existed in the resource. Finally, the software being developed was to be ported from the original Xenix system, to UNIX, DOS (3.1 +), VAX/VMS and the Macintosh.<P>
It was obvious early in the design state that a file-based resource sharing mechanism would be maximally portable since DOS and the Mac do not offer shared memory or in-memory semaphores as Xenix and UNIX do. As outlined previously, creating and deleting semaphore files was not an acceptable solution for performance reasons. The following scheme was eventually settled upon and is now in use on three platforms.<P>
A single file is used and contains 3 bytes for each of the resources (3*19=57 bytes). Each byte has a special purpose for the resource. Byte 1 is the "write" semaphore, byte 2 is the "read" semaphore and byte 3 is the "append" semaphore. In order to gain access to a resource, a process locks these bytes. Using file locks as the following benefit: abnormal program terminations (power failure, <I>control-c</I>, kill signal,...) do not block further access to the resource because the operating system guarantees that all locks held by the process are removed when the file is closed (i.e. at process termination).</FONT></FONT><P>
In order to access the "semaphore" set contained in the file, a process merely opens the file. This is generally done as part of the program startup with the file being closed at termination. Once access is gained to the file, the following steps are required in order to gain access to a particular resource.<P>
<h4><FONT COLOR="#000080"><A name="01A9_00EC">READ ACCESS<A name="01A9_00EC"></FONT></h4></P>
1)     lock the resource's "write" byte for exclusive access<P>
2)     lock the resource's "read" byte for shared access (if the op.sys. permits shared locks otherwise, use an exclusive lock)<P>
3)     unlock the resource's "write" byte<P>
4)     read the data from the resource<P>
5)     unlock the resource's "read" byte<P>
<h4><FONT COLOR="#000080"><A name="01A9_00ED">APPEND ACCESS<A name="01A9_00ED"></FONT></h4></P>
1)     lock the resource's "append" byte for exclusive access<P>
2)     lock the resource's "write" byte for exclusive access<P>
3)     unlock the resource's "write" byte<P>
4)     extend the resource by appending new data to the end<P>
5)     unlock the resource's "append" byte<P>
<h4><FONT COLOR="#000080"><A name="01A9_00EE">WRITE ACCESS<A name="01A9_00EE"></FONT></h4></P>
1)     lock the resource's "append" byte for exclusive access<P>
2)     lock the resource's "write" byte for exclusive access<P>
3)     lock the resource's "read" byte for exclusive access<P>
4)     write a non-zero value to the resource's "write" byte<P>
5)     write data to the resource<P>
6)     write a zero value to the resource's "write" byte<P>
7)     unlock the resource's "read" byte<P>
8)     unlock the resource's "write" byte<P>
9)     unlock the resource's "append" byte<P>
Whenever the "write" byte is locked, a test is made whether a previous transaction has failed before completion. If failure has occurred, the resource in question may be corrupted and a "rollback" of the transaction is executed. A failed transaction is indicated by the value stored in the "write" byte being non-zero. This can only occur if step 4 was executed without the complementary step 6 occuring. This mechanism is quite similar to the "readers and writers" mechanism Mr. Frost describes. However, it is important to remember that the count variable used to track the number of concurrent reads MUST be accessible to every user of the resource. The operating system's file locking mechanism is used for this purpose.<P>
Russell Cook<br>
Software Engineer<br>
ZyLAB Corpoation<br>
3105-T North Wilke<br>
Arlington Heights, IL 60004<P>
<I>I think it's great to get this kind of exchange between programmers who have implemented separate solutions to a similar problem. Thanks for contributing. &#151;rlw</I><P>
Dear Editor:<P>
First let me say thank you for providing an excellent magazine. It's the only one that I make time to read cover to cover. I've even gone back and re-read articles several times to squeeze all the good parts out.<P>
I would like to recommend to anyone who is programming computers who is not using UNIX, should try it at least once. Talk about heaven. I thought C was wonderful coming from a background of BASIC and assembly. UNIX is to MS-DOS as C is to BASIC.<P>
Do you have any suggestions for good basic UNIX books that don't get stuck in low gear? I'm having trouble finding basic information about UNIX. It appears as though I find something new every day, and really could have used that information yesterday.<P>
In Sydney Weinstein's article "Games and Tongues" (vol. 8, no. 2), he mentioned a game called Conquer. He also said it is available from archive sites for <I>comp.sources.games</I>, including <I>uunet</I>. I would like to know how to get this or other UNIX programs from somewhere, either disk or modem. If it is through the modem, could you give some hints or instructions on how to do this? I am familiar with downloading programs using MS-DOS type environments.</FONT></FONT></FONT></FONT><P>
Thank you for all the support<P>
Kenneth J. Suda<br>
P.O. Box 507<br>
Canton, GA 30114<P>
<I>UNIX software is usually exchanged via uucp facilities &#151; i.e. you must be "attached" to USENET. You can find fundamental information about USENET in </I>UNIX Communications<I> by The Waite Group. </I>UNIX<I> </I>System Administration <I>by David Fiedler and Bruce Hunter includes quite a bit of very useful information about how to get attached to USENET and how to configure your system.</I><P>
<I>Some books that don't get "stuck":</I><P>
Advanced Programmer's Guide to UNIX System V <I>by Thomas, Rogers and Yates</I>. Tricks of the UNIX Masters <I>by Sage</I>. UNIX for Super-Users <I>by</I> <I>Foxley</I>. The UNIX System V Environment <I>by</I> <I>Bourne. And just for fun</I>, Writing A UNIX Device Driver <I>by Egan and Teixeira. &#151;rlw</I><P>
The following discrepancies have been noted in the source code for <I>cstr. c </I>which appeared in <I>The C Users Journal</I>, February 1989, page 28-29:</FONT></FONT><P>
1.     The header file <I>blstr. h</I> was not included with the code.</FONT></FONT><P>
2.     The macro <I>error()</I> was not defined.</FONT></FONT><P>
3.     The error message when the output file can not be opened stated that "Can't open <I>%s</I> for input <I>\n</I>". "output" should be substituted for "input".</FONT></FONT></FONT></FONT><P>
4.     String functions are included in the header file <I>&lt;string.h&gt;.</I> This file was not included in the source code.</FONT></FONT><P>
5.     The string function <I>strbreak</I> does not appear to be a standard function. The string function <I>strpbrk</I> which I believe serves the same purpose is a standard function and is contained in Turbo C, Microsoft C, Lattice C at least.</FONT></FONT></FONT></FONT><P>
6.     The arguments of <I>strcmp</I> are character pointers. The source code for function <I>makeout</I> contains <I>*in</I>, which contains the value of the character pointed to by <I>in</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
7.     The accompanying documentation for <I>cstr.c</I> does not point out how <I>cstruse.c</I> is to be obtained. In <I>usage ()</I>, I commented out the two lines of code dealing with <I>cstruse[], </I>and then compiled, linked and ran the program with the text file <I>cstruse.str</I> identified on the command line. Once <I>cstruse[] </I> was created by <I>cstr.exe</I> and contained in <I>cstruse</I>.<I>c</I>, I uncommented the <I>cstruse[]</I> code lines in <I>usage (),</I> appended <I>cstruse</I>.<I>c</I> to <I>cstr.c</I>, recompiled, linked and then successfully ran the program.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Please find enclosed a copy of the revised program for <I>cstr.c</I> (see <A href="list1.htm">Listing 1</a>)
.</FONT></FONT><P>
I found the article "Scaffolding for C and C+ +", by Burk and Custer very interesting and potentially very beneficial. I did find several discrepancies in the source code for <I>cstr.c</I>. (I have not investigated the other programs as of this date.)</FONT></FONT><P>
Very sincerely yours,<P>
R. Craig Olson<br>
6306 Huntover Lane<br>
Rockville, MD 20852<P>
To the Editor:<P>
In the letters section of your March 1990 (v8n3) issue Bob Barrett writes:<P>
[....] On most (if not all) UNIX systems that use 'termcap', the database can only be modified by the system administrator (or super user) and rightly so. If you, yourself, are not the super user, experimental (trial and error) modifications to terminal descriptions are impractical to say the least. With 'terminfo', the user is free to experiment with a terminal description that only he or she will use (at least until it's fully tested)<P>
I disagree. On most BSB based UNIX systems that I have been on, it is just as easy to experiment with <I>TERMCAP</I> entries:</FONT></FONT><P>
Normally, the following sequence (possibly in a <I>.profile</I>) can be used to set up the <I>TERMCAP</I> environment variable:</FONT></FONT></FONT></FONT><P>
<pre>TERM=foo
eval 'tset -sQ $TERM'</pre>
This would look up terminal type <I>foo</I> in /etc/<I>TERMCAP</I> and put the possibly expanded (tc=...) termcap entry in the <I>TERMCAP</I> environment variable (tset - sQ will return comands of the form:</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>export TERM TERMCAP;
TERM=foo;
TERMCAP = '--TERMCAP entry<I></I>--')</pre>
Which you would then <I>eval</I> to set them in your current shell.<P>
If instead you had your own termcap entry for terminal type <I>foo</I>, say in <I>$HOME/foo.TERMCAP</I>, you can do the following:</FONT></FONT></FONT></FONT><P>
<pre>export <I>TERMCAP</I>
<I>TERMCAP</I>=$HOME/foo.<I>TERMCAP</I>
eval 'tset -sQ foo'</pre>
<I>tset(1)</I> calls <I>tgetent (3X)</I> to get the terminal capabilities.</FONT></FONT></FONT></FONT><P>
From the man page for <I>tgetent (3X)</I>:</FONT></FONT><P>
<pre>tgetent (bp, name)
char *bp, *name;</pre>
<I>[. . .] tgetent</I> begins searching for a termcap entry for name by looking in the environment for a <I>TERMCAP</I> variable; if one does not exist, <I>tgetent</I> searches for name in the <I>/etc/termcap</I> file. If <I>TERMCAP</I> does exist, <I>tgetent</I> interprets its value as follows: if the first character is a /, the string is interpreted as the pathname of an alternate file of termcap entries; this file is read instead of <I>/etc/termcap</I>. If the first character is not a /, the string is interpreted as a termcap entry. If name matches one of the names in the first field, the string is stored in bp; otherwise, 0 is returned. If the <I>TERMCAP</I> value refers to another terminal with the capability <I>tc, tgetent</I> searches <I>/etc/TERMCAP file; 0</I> if the terminal name given does not have an entry; and <I>1</I> if all goes well.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
In other words, it is even easier to experiment with termcap than it is to use terminfo, which apparently requires compilation with <I>tic(1M)</I> according to Mr. Barrett.</FONT></FONT><P>
Sincerely,<P>
Fuat Baran<br>
Columbia University<br>
712 Watson Labs<br>
612 W 115th St.<br>
New York, NY 10025<br>
<I>fuat@columbia.edu</I></FONT><P>
<I>. . . . rutgers!columbia!fuat</I></FONT><P>
<I>Of course you are correct. What you describe is the standard mechanism for testing </I><I>TERMCAP</I><I> entries (described in several sources). Thanks for the extra information.&#151;rlw</I></FONT><P>
Dear Editor:<P>
In the May 1990 issue of <I>The C Users Journal</I>, Mr. Murphy asked why his BASIC files have different float and double values from what C requires. Since I had to deal with this problem, I thought I might be able to help.<P>
The original Microsoft BASIC and Pascal (the versions IBM distributed) used a floating point format refered to by Microsoft as <I>MSBIN</I>. This format has the exponent in the ms 8 bits, followed by a sign bit, followed by a 23-bit mantissa. Note that this is not 8x87 format, which is IEEE-compatible. Thus, these languages could not take advantage of a numeric coprocessor without conversion to/from the <I>MSBIN</I> format.</FONT></FONT></FONT></FONT><P>
When C was implemented, they decided to use IEEE format. If you have a copy of the Microsoft C compiler, there are 4 functions in the standard library: <I>dieeetomsbin, dmsbintoieee, fieeetomsbin</I> and <I>fmsbintoieee</I>. These allow you to convert to and from the MSBIN format.</FONT></FONT></FONT></FONT><P>
If you don't have a copy of the Microsoft C compiler, a short routine can be written to convert the values, such as the function <I>read_MSBIN_float</I> in <A href="list2.htm">Listing 2</a>.
</FONT></FONT><P>
Note that this routine has not been tested at all. In fact, I may have the array indices the wrong way around. The best way to test the results is to run some known values through the routine and see if you get the results you expect. The casts in the mantissa generation to <I>long</I> are required to avoid integer arithmetic overflow. It is only really required for the conversion of the ms 7 bits, but I kept the same format for consistency.</FONT></FONT><P>
The extension to <I>double</I> should be trivial. Just increase the size of the array to 8, add 4 more terms to the mantissa generation code and change the number 23 in the normalization to 55. You also will have to find out how bit the exponent is. I think it is 11 bits, but I'm not really sure.</FONT></FONT><P>
The above routine is not very efficient, but should be easy to debug. It will also work on any architecture, not just architectures that use IEEE format floating point. If you're interested in efficiency, a direct binary conversion can be coded. If you want to do this, you will need to look up the 8x87 format and roll your own.<P>
There are some range questions in the conversions, but if your numbers are not already pushing the precision of <I>double</I> or <I>float</I>, you shouldn't have too much problem. Note that the MSC library routines will return you an error if you overflow/underflow the result.</FONT></FONT></FONT></FONT><P>
If you have any questions or comments, please contact me. My phone number (408)988-3818. My fax number is (408)727-9891.<P>
Jim Schimandle<br>
Primary Syncretics<br>
473 Sapena Court, Unit #6<br>
Santa Clara, CA 95054<P>
<I>Thanks for the information. I nominate these names for Ken Pugh's Dumb Name contest. &#151;rlw</I><P>
Dear Mr. Ward:<P>
All in all, I quite like the new format of <I>The C Users Journal</I>. But those titles <I></I>&#151; do you think we could tone them down just a tad?<P>
When I first saw "WHA GANG AGLEY" in 96 point type, I thought not of Bobbie Burns, but of some bizarre ac- cident at the printers.<P>
Except for this minor indictment, I think you have an excellent magazine. I scan many, but I READ few. <I>The C Users Journal</I> is always worth reading.<P>
Patrick Conroy<br>
Euless, TX<P>
<I>We could tone them down, but typesetters and graphic artists need to have fun too. I figure if they have their fun in big type, they can't get too far out of line without my noticing.&#151;rlw</I><P>
Dear Mr. Ward,<P>
I have subscribed to your journal for several years and have found it very informative and useful. Which is why I was shocked to read "Executable Strings" by James A. Kuzdrall (May 1990).<P>
In order to save ourselves from "learning the details of (our) C Compiler's assembler and linker" we should have "a knowledge of machine language"? Why is this method better than the common industry practice of writing a separate assembly routine? Not only do I fail to see any advantage to this technique, I see many disadvantages. Not the least of which Mr. Kuzdrall alludes to himself when he writes: "For those who wish to believe C is inscrutable, this function call may serve as the final proof."<P>
It is possible to write readable C code! But, the programmer must understand and use the rules of good programming practice. Please tell me that this article was really an entry in the International Obfuscated C Code Contest that got misplaced by the layout artist.<P>
Sincerely,<P>
William J. McMahon<br>
106 Oceanside Drive<br>
Scituate, MA 02066<P>
<I>I'm the last to suggest the "executable strings" are a better method for anything. I just thought the story showed an interesting perversion of power. Didn't you notice the skull and crossbones worked into the art on that page? &#151;rlw</I><P>
Having resolved our change of address problem, I enclose my subscription renewal. Perhaps I should add that I had nearly decided to allow the subscription to lapse due to dissatisfaction with recent issues.<P>
In explanation, I have noted that increasing space is being given in the Journal to reviews of commercially available packages. My interest lies in producing my own programs and I most often have little interest in and/or cannot afford such products particularly when exchange is taken into account. It was Leor Zolman's article (page 69) which swung the tide in your favour for a further 12 months. While appreciating that your editorial policy may be in favour of professional programmers, please also keep in mind the "roll your own" C user.<P>
Yours faithfully,<P>
D. J. Omond<br>
27 Kildare Avenue<br>
Athelstone. SA 5076<br>
Australia<P>
<I>I won't promise that we won't devote space to commercial products that look useful to developers, but I will promise that we'll always include material like Leor's series. (By the way the conclusion is in this issue.) Thanks for sticking with us. Let us know how we're doing. &#151;rlw</I><P>
Dear Mr. Ward,<P>
You guys are gettin' to me...<P>
Last month (April 1990) on the cover it said "Obfuscated C Code Contest," much as one might advertise "Fortified with 10 essential vitamins." But it was not to be; we had to wait another month for "The REAL Obfuscated Code Contest".<P>
I could handle that. But only because I knew the bad pun contest was on the way. Alas, it was not to be.<P>
And what's with the duplicate Publisher's Forum? Please tell us it was all a mistake, that the old pages got mixed in at the printers.<P>
Your readers are getting ANSI.<P>
Sincerely,<P>
Steven G. Isaacson<br>
22815 Lakeview Drive #G211<br>
Mountlake Terrace, WA 98043<P>
<I>It was all a mistake. But, the pages got mixed up here, not at the printers. See last month's letters for the ugly details. The puns were in last month's publisher's forum. &#151;rlw</I><P>

<h4><a href="../../../source/1990/jul90/letters.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
