<HTML>
     
     <HEAD>
<TITLE>August 1998/A Wrapper Class for NT Services</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocaug.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Windows</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">A Wrapper Class for NT Services</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">John T. Bell</FONT></H3>

<BLOCKQUOTE>

<p>Like many aspects of Windows NT, talking to the Service Control Manager is a task best left to an expert.</p></BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<h4><FONT COLOR="#000080">Introduction</FONT></H4>

<p>In this article, I introduce the concept of a service in the Win32 environment. I provide and discuss a C++ class, <B>NTService</B>, that encapsulates the basics of building an NT service. This class allows you to concentrate on only the application-specific needs of a service application, and not on the mechanics of creating a service.</p>
<h4><FONT COLOR="#000080">About NT Services</FONT></H4>

<p>Windows NT supports an application type known as a service. A Win32 service is conceptually similar to a Unix daemon. You can use services to enhance or add features to the operating system.  One example of a Windows NT service is the Windows print spooler. The Service Control Manager (SCM) starts, stops, and controls services, which can be started either automatically at system boot time or manually by the user.</p>

<p>In NT, you can access the SCM user interface by selecting the Services icon from the Windows Control Panel. All services under NT must conform to the interface requirements of the SCM. A service must be installed into the SCM database before the SCM will recognize and register the service. Services have three function entry points: <B>main</B>, <B>ServiceMain</B>, and <B>ServiceControl</B> (sometimes called the ControlHandler). <B>main</B> registers the service with the SCM. Once the service is registered, the SCM starts the service by calling <B>ServiceMain</B>. <B>ServiceMain</B> must register the control handler so the SCM can retrieve status information and send control requests.</p>

<h4><FONT COLOR="#000080">The NTService Class</FONT></H4>

<p>I created the <B>NTService</B> class because I needed the ability to quickly create NT service programs, and to provide programmers with a way to create service programs without having to learn the details about how NT services operate within the Windows environment. I developed my NT service programs using Visual C++ v5.0.</p>

<p>To create the project, use <B>File | New</B> and the project tab to create a new Win32 console application. Since services can be started before any users are logged on to the system, user interface issues are immaterial. Therefore, I recommend avoiding MFC and other GUI libraries when possible to keep the service code small.</p>

<p>The <B>NTService</B> class provides all of the core functionality needed for a Windows NT service. <B>ntservice.h</B> (<A HREF="list1.htm">Listing 1</A>) is the header file for the <B>NTService</B> class, and <B>ntservice.cpp</B> (<A HREF="list2.htm">Listing 2</A>) is the C++ implementation file. The <B>NTService</B> class is a generic base class which cannot be instantiated by itself because of the pure virtual function <B>Run</B>. The <B>NTService</B> class also provides ten protected functions that are designed to be optionally overridden by the programmer in the child class. A new service program is created by deriving a child class that provides a <B>Run</B> member function from the <B>NTService</B> class. <B>Run</B> is a protected member function that performs only the actions needed to deliver the desired service capability.</p>

<p>The <B>NTService</B> class handles <B>ServiceMain</B> registration, the <B>ServiceControl</B> entry points, and any other generic service chores. It also provides methods to install and uninstall the service from the SCM.</p>

<h4><FONT COLOR="#000080">The main Function</FONT></H4>

<p>Like traditional C++ programs, but unlike most Windows programs, a service uses <B>main</B> instead of <B>WinMain</B>. To start the service, the SCM enters <B>main</B>, which in turn must register the service and identify its primary entry point, <B>ServiceMain</B>. <B>ServiceMain</B> must first register the entry point for <B>ServiceControl</B>. The SCM uses the service control function to monitor the status of the service and to suspend, resume, or stop the service. <A HREF="list3.htm">Listing 3</A> shows a portion of <B>main.cpp</B>.</p>

<p>For most applications, you'll need to make only two changes to <B>main.cpp</B>. Change the value of the <B>SERVICE_NAME</B> constant to the name of the service you're creating, and invoke the constructor of the derived class in the call to <B>new</B>. <B>main.cpp</B> consists of three functions: <B>ServiceMain</B>, <B>ServiceControl</B>, and <B>main</B>. <B>main</B> first creates an instance of the <B>MyService</B> class and assigns it to the global pointer <B>ntService</B>. The constructor for the <B>NTService</B> class takes three arguments: the service name, <B>ServiceMain</B>'s address, and <B>ServiceControl</B>'s address. These two functions provide the SCM with its interface to the derived service class. <B>ServiceMain</B> and <B>ServiceControl</B> must conform to the interface required by the SCM. They also must have access to the instance of the service class's <B>ntService</B> that was created in <B>main</B>. This is why they were implemented as globally visible functions. They could have been static member functions of the <B>NTService</B> class, but I felt I would have more flexibility to add multiple service support later if I implemented it this way.</p>

<p><B>main</B> parses the command-line arguments and performs one of three actions. <B>main</B> will install or uninstall the service if a <B>-i</B> or a <B>-u</B> flag appear in the command-line argument, respectively. <B>Install</B> and <B>Uninstall</B> are member functions of <B>NTService</B>. If no arguments are present, then <B>main</B> assumes it is being called by the SCM and calls <B>ntService-&gt;Startup</B>.</p>
<h4><FONT COLOR="#000080">Starting and Running the Service</FONT></H4>

<p>An NT service is started by calling the Windows <B>StartServiceCtrlDispatcher</B> and passing it a dispatch table with the service name and the address of its <B>ServiceMain</B>. The <B>NTService</B> class does this in its <B>Startup</B> member function. The SCM then immediately calls the <B>ServiceMain</B> that was provided in the dispatch table (see <A HREF="list1.htm">Listing 1</A>). My <B>ServiceMain</B> just calls the <B>ntService-&gt;Service</B> member function of my <B>NTService</B> class. <B>ServiceMain</B> receives two arguments from the SCM. Though these correspond to <B>argc</B> and <B>argv</B> from the command line, these arguments were not available to the command line. Instead, they come from the startup parameters entry from the SCM.</p>

<p>The first thing the <B>Service</B> member function does is register <B>ServiceControl</B> by calling <B>RegisterServiceCtrlHandler</B> and giving the service name and the function pointer that were used to create the <B>NTService</B> instance. The <B>dwCurrentState</B> member of the <B>SERVICE_STATUS</B> member (<B>mStat</B>) was set to <br><B>SERVICE_START_PENDING</B> by the constructor. Once the SCM has the pointer to <B>ServiceControl</B>, it will retrieve this status value. <B>NTService::Service</B> calls <B>Init</B>, passing the <B>argc</B> and <B>argv</B> values. <B>Init</B> is stubbed in the <B>NTService</B> class but should be overridden to provide any initialization needed by the actual service instance. If the service was successfully initialized, the status word will be changed to <B>SERVICE_RUNNING</B> and the overloaded <B>Run</B> will be called. At this point the service is running.</p>
<h4><FONT COLOR="#000080">Service Control</FONT></H4>

<p>To examine or change the service's state, the SCM calls the <B>SeviceControl</B> function that was registered when the service was started. In my case, it calls <B>ServiceControl</B> in <B>main.cpp</B>, which in turn calls <B>NTService::Control</B>. <B>Control</B> can respond to any of the five commands listed in the table, or to any user command. User commands should have values that are greater than that of <B>SERVICE_CONTROL_SHUTDOWN</B>. The SCM does not send either user commands or the shutdown command. Only Windows can send <B>SERVICE_CONTROL_SHUTDOWN</B>, when Windows is preparing to shut down, and only Service Control programs can send user commands.</p>

<p>The control commands that a service recognizes are established when the service control function is registered. The <B>NTService</B> class initializes this in its constructor by assigning a value to <B>mStat.dwControlsAccepted</B>. The <B>NTService</B> class defaults to recognizing all of the commands. You can change this in the derived class's constructor. All services must respond to the <B>interrogate</B> command. <B>NTService::Control</B> itself should never be overridden. The <B>Control</B> member is implemented by using a <B>switch</B> statement that invokes functions for each command. <B>Control</B> also makes appropriate changes to the service status. The control member functions are listed in <A HREF="tab1.htm">Table 1</A>. Stubs are provided in <B>NTService</B> for any functions that require no action.</p>
<h4><FONT COLOR="#000080">Applying the NTService Class</FONT></H4>

<p>Creating a new service is simply a matter of creating a class derived from the <B>NTService</B> class that implements the <B>Run</B> member function, and changing <B>main.cpp</B> to give the service the correct name and to invoke the new operator for the derived class. Other functions are provided that can be overloaded for specific purposes. An example of an implementation of a new service (<B>MyService</B>) can be found in <B>myserve.h</B> (<A HREF="list4.htm">Listing 4</A>) and <B>myserve.cpp</B> (<A HREF="list5.htm">Listing 5</A>). <B>MyService</B> is a simple service that uses Windows mail slots for interprocess communications. Anything written to the mail slot that <B>MyService</B> creates is copied to the file <B>outfile.txt</B> in the <B>c:\temp</B> subdirectory. One use for this might be as the base of a global message logging service.</p>

<h4><FONT COLOR="#000080">The MyService Constructor</FONT></H4>

<p>The <B>MyService</B> constructor has little to do. If the new service will not accept all of the controls, then the constructor can change the values by changing <B>mstat</B>'s contents using <B>SetAcceptedControls</B>. <B>MyService</B> accepts only the <B>SERVICE_CONTROL_STOP</B> command, so it makes this change in its constructor.</p>

<h4><FONT COLOR="#000080">The Init Function</FONT></H4>

<p>The <B>NTService::Init</B> member is stubbed in the <B>NTService</B> class, but should be overloaded to provide any program-specific initialization needed for the service. <B>Init</B> receives the <B>argc</B> and <B>argv</B> arguments that the SCM passes to <B>ServiceMain</B>. The service status is set to <B>SERVICE_START_PENDING</B> by <B>NTService::Service</B> before the <B>Init</B> member is called, and is changed to <B>SERVICE_RUNNING</B> before calling <B>Run</B> if <B>Init</B> completes successfully. <B>Init</B> should process the <B>argc</B> and <B>argv</B> parameters and read any registry values that are needed to support the application. If initialization is going to be lengthy, the status word has provision for checkpoints and wait hints to be provided to the SCM. You can change these by calling the <B>ChangeStatus</B> member function with the appropriate values.</p>

<p><B>MyService</B> uses the Windows function <B>Createmailslot</B> to create the mail slot that will collect messages from other processes. It then creates the output file in the <B>c:\temp</B> subdirectory. The filenames are hard-coded for simplicity. Normally, I would not hard-code the names of the mail slot or the output file, but would instead read them from the registry. I would also read the registry values using the <B>Init</B> method.</p>

<h4><FONT COLOR="#000080">Service Control Functions</FONT></H4>

<p>There are six functions for dealing with service control actions (see <A HREF="tab1.htm">Table 1</A>). In my example, I have implemented only <B>OnStop</B>. <B>OnStop</B> should be implemented for all services. <B>MyService::OnStop</B> simply changes the state of <B>Run</B>'s controlling loop variable. <B>Run</B> then performs any file closing and other cleanup chores needed to gracefully stop the service. <B>OnPause</B> could be implemented by setting a member variable that <B>Run</B> would poll. <B>Run</B> would then poll the variable and sleep until <B>OnContinue</B> caused the variable state to change again. I have not implemented <B>OnShutdown</B> because the stub version in the <B>NTService</B> class calls <B>OnStop</B> as the default implementation. Nothing additional is needed for <B>OnInquire</B> so it is not overloaded. Also, I do not have any user commands in this example; therefore, <B>OnUserControl</B> is not implemented. The <B>NTService::Control</B> method handles service status changes that are needed to inform the SCM, so this does not need to be done by the service control functions.</p>

<h4><FONT COLOR="#000080">The Run Function</FONT></H4>

<p><B>Run</B> is a pure virtual function in the <B>NTService</B> class, and so must always be implemented. <B>Run</B> is the meat of any service, and does all the work. Effectively, <B>Run</B> is a loop that continues to loop until the service is stopped. The <B>m_running</B> variable in the <B>MyService</B> class controls the loop in the <B>MyService</B> service. <B>MyService::Run</B> examines the mailslot to determine if data is available. If data is available it reads the data and copies it to the output file, continuing until <B>OnStop</B> sets <B>m_running</B> to false.</p>

<h4><FONT COLOR="#000080">Error and Event Logging</FONT></H4>

<p>Unlike Unix, Windows NT does not have the concept of a master console. Services cannot count on a console being available to receive output or error messages (unless the service opens one). However, Windows NT does provide event logging capability. All applications can access the event log to record significant information, and the event log can be easily viewed from any machine on the network. Using the event log, however, requires that you develop a series of messages in advance and compile them using the message compiler, which can be a complex process. I have created a simplified universal message file and an application log class, <B>TAppLog</B>, which simplifies the use of the event log for applications that do not have extensive event reporting requirements.</p>

<p>The <B>TAppLog</B> class can control the level of messages that are logged and it can echo messages to the debugger. This class is shown in <B>tapplog.h</B> (<A HREF="list6.htm">Listing 6</A>), <B>tapplog.cpp</B> (<A HREF="list7.htm">Listing 7</A>), and <B>mcmsg.mc</B> (<A HREF="list8.htm">Listing 8</A>). Compiling <B>mcmsg.mc</B> with the Windows message compiler creates <B>mcmsg.rc</B> and <B>mcmsg.h</B>. <B>mcmsg.rc</B> should be linked when the executable is built and <B>Mcmsg.h</B> should be included in at least one file. I have included the file in <B>main.cpp</B>.</p>

<p>The <B>MyService</B> class includes the pointer <B>m_log</B> to an instance of the <B>TAppLog</B> class. The pointer is initialized in the <B>MyService</B> constructor and the object is freed by the <B>MyService</B> destructor. <B>TAppLog</B> also provides an <B>Install</B> function, which is called from <B>MyService::InstallAid</B> and creates the needed registry entries for the <B>TappLog</B> class to work properly. An <B>Uninstall</B> function is stubbed for a future enhancement.</p>

<p><B>TAppLog</B> provides two versions of the <B>LogEvent</B> method. The first argument of each is a log category that is one of <B>LOG_ERROR</B>, <B>LOG_WARNING</B>, or <B>LOG_INFORM</B>. These are mapped to generate the appropriate code for the Windows <B>ReportEvent</B> function. One version of <B>LogEvent</B> then takes arguments in the same fashion as <B>printf</B>. The other version takes a <B>valist</B> (variable argument list). The <B>valist</B> version is what allows the <B>LogEvent</B> function to be provided as a member of the <B>MyService</B> class. <B>MyService</B> also implements an <B>Error</B> member function which automatically cracks the Windows message number and logs the error message to the event log.</p>

<h4><FONT COLOR="#000080">Debugging</FONT></H4>

<p>A service is run by the SCM and cannot be started from the debugger in the IDE. The service can be debugged with the debugger by inserting a <B>DebugBreak</B> statement in the code. The code will break into the debugger when the <B>DebugBreak</B> statement is reached. Be aware that the SCM will time out if the service does not report back its status in a timely fashion. It may also be possible to debug some services as a console application. This requires avoiding or skipping over any calls to the SCM and modifying <B>main</B> to call <B>ServiceMain</B> and <B>ServiceControl</B> as needed for testing. I have been able to do all of my debugging by logging debug messages to the event log.</p>

<h4><FONT COLOR="#000080">Installing and Removing a Service</FONT></H4>

<p>Before a service can be started it must be installed into the SCM's database. The <B>NTService::Install</B> method does this. It first checks to see if the service is already installed. If so, it returns <B>true</B>. If the service needs to be installed, it gets a handle to the SCM and requests that the service be added. By default the service is installed for "demand start," meaning the service is not automatically started by the operating system, but instead starts when the user requests it by using the Services applet from the Control Panel.</p>

<p>Function <B>InstallAid</B> can be overloaded to add registry entries or perform any other installation tasks. It is stubbed to do nothing in <B>NTService</B>. You can also use the <B>InstallAid</B> method to change the effect of the defaulted arguments to the Windows <B>CreateService</B> function by calling the Windows <B>ChangeServiceConfig</B> function. A service can be removed from the SCM database by calling the <B>NTService::UnInstall</B> method. <B>UnInstall</B> calls <B>UnInstallAid</B>, which should be overloaded to clean up anything that was done by the overloaded <B>InstallAid</B> function. <B>UnInstallAid</B> is stubbed to do nothing in <B>NTService</B>.</p>

<h4><FONT COLOR="#000080">Configuration Issues</FONT></H4>

<p>Services should be configured to store any initialization parameters in the registry. A Control Panel applet also should be created to easily manipulate and change these values. This example is designed to emphasize the mechanics of building a service, and the issues of proper initialization and storing registry values is left for another exercise. For example, the mail-slot and the output filenames should be read in from values stored in the registry. There is a defined place in the registry for the parameter values needed by a service. It is:</p>

<pre>
HKEY_LOCAL_MACHINE\
   SYSTEM\
      CurrentControlSet\
         Services\
            &lt;&lt;ServiceName&gt;&gt;\
               Parameters
</pre>

<p>Default values for any parameters should be written by the overloaded <B>InstallAid</B> method. The registry entries should be removed by the <B>UninstallAid</B> method. The values should be read by the <B>Init</B> method when the service is started.</p>

<h4><FONT COLOR="#000080">Summary</FONT></H4>

<p>Services in NT exist to extend the capability of the operating system. Like daemons in Unix, NT services can be started automatically when the operating system is started, or on demand by the user or by an application program that talks to the Service Control Manager. The SCM starts and stops the service and forwards custom commands from application programs. An NT service program consists of three primary functions or entry points: <B>main</B>, <B>ServiceMain</B>, and <B>ServiceControl</B>. The <B>NTService</B> class can be used to create a new NT service by writing as few as three functions: <B>Init</B>, <B>Run</B>, and <B>OnStop</B>. This service can install and uninstall itself to and from the SCM database. The example <B>MyService</B> class implements a simple logging service by using mail slots.</p>

<p><i>James M. Bell has a Ph.D. in mathematics from Auburn University. He was a member of the mathematics faculty at Furman University for 12 years and for the last 14 years has been a mathematician in the Operations Research Department of Miliken &amp; Company. Part of his job is as system administrator for the department's Unix network. James may be reached at 103274.3320@compuserve.com.</i></p>

<h4><a href="../../../source/1998/aug98/bell.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY>
</HTML>
