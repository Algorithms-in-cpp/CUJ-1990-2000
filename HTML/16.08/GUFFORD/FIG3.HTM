<HTML><HEAD>
<TITLE>August 1998/A Windows NT Exception Class Library/Figure 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Figure 3: The class declaration for EXBase_c</A></h4>
<pre>
// COPYRIGHT (c) 1997, TRIAD Systems, Inc. Permission is granted
// to use this code as long as this copyright notice appears in
// all source files

#ifndef __EXBASE_H__
#define __EXBASE_H__
#include &lt;stdexcept&gt;
#include &lt;utility&gt;
#include &lt;vector&gt;
#include &lt;windows.h&gt;
#include &lt;winnt.h&gt;
using namespace std;

#ifdef _USRDLL
  #define SCOPE __declspec(dllexport)
#else
  #define SCOPE __declspec(dllimport)
#endif

#pragma warning(disable:4251) // CLIENTS HAVE NO ACCESS TO 
                              // PRIVATE STATIC MEMBERS, THEREFORE 
                              // THIS WARNING IS MEANINGLESS

class SCOPE EXBase_c //: public exception
{ // EXCEPTION CLASSES CAN'T THROW EXCEPTIONS!
  public: // TYPDEFS, ENUMERATIONS AND SUCH
    typedef pair&lt;int,HMODULE&gt;       ModulePair_t;
    typedef vector&lt;ModulePair_t&gt;    Modules_t;
    typedef enum Severity_e 
      { EXNone = 0, EXTrace, EXWarning, EXError, EXFatal };
    #define SEVERITY_MASK 0xC0000000
    #define FACILITY_MASK 0x0FFF0000
    #define MSG_ID_MASK 0x0000FFFF
  private: // SANITY CHECKING FUNCTIONS AND VARIABLES
    static const long  sm_clSerialNumber; // CLASS WIDE VALUE
    mutable long       m_clSerialNumber;  // INSTANCE LEVEL VALUE
    void SanityCheck() const throw(logic_error);
    void SetSanity()   const throw(logic_error);
    void ClearSanity() const throw(logic_error);
  private: // MEMBER VARIABLES
    string      m_Message;
    string      m_UserMessage;
    DWORD       m_dwError;
    Severity_e  m_eSeverity;
    string      m_Source;
    string      m_File;
    int         m_iLine;
  private: // USED BY THE STATIC FUNCTIONS FOR SYSTEMIC 
           // EXCEPTION HANDLING
    static  Modules_t               m_RegisteredApps;
    static  _se_translator_function m_OldSEHandler;
    static  terminate_function      m_OldTerminationHandler;
    static  unexpected_function     m_OldUnexpectedHandler;
  protected:
    void          Log(string const&amp;) throw();
    bool          IsSystemError() throw();
    string        BuildHeader(string const&amp;) throw();    bool          IsAppError() throw();
    bool          GetErrorMessage(int const, 
                    HMODULE hModule = NULL) throw();
    bool          LogError(string const&amp; header);
    string const&amp; Source(string const&amp;) throw();
  private: // CAN ONLY BE USED BY THIS CLASS
    EXBase_c() throw(); // ONLY USE FOR UNEXPECTED EXCEPTIONS 
                        // (I.E.: WITHIN AN EXCEPTION CLASS)
  protected: // THIS CLASS CAN'T BE INSTANTIATED DIRECTLY.
    EXBase_c(int iLine, string const&amp; Source, string const&amp; Msg,
      Severity_e eSeverity,type_info const&amp; Type) throw();
    EXBase_c(int iLine, string const&amp; Source, long lErr,
      Severity_e eSeverity,type_info const&amp; Type) throw();
    EXBase_c(int iLine, string const&amp; Source, long lErr,
      string const&amp; Msg, Severity_e eSeverity, 
      type_info const&amp; Type) throw();
  public: // OTHERWISE WE CAN'T DESTROY THESE OBJECTS
    virtual ~EXBase_c() throw();
  public: // MEMBER ACCESS FUNCTIONS
    string const&amp;    Message() const throw();
    string const&amp;    Source() const throw();
    DWORD const      Error() const throw();
    Severity_e const Severity() const throw();
  public: // ONE TIME CALL PER THREAD - SETS AND RESETS REROUTING
          // MECHANISMS, RESPECTIVELY
    // REROUTES ERROR HANDLING ROUTINES
    static void Initialize() throw();   
    // RESETS THE ORIGINAL FUNCTIONS
    static void DeInitialize() throw();                                      
  public: // ONE TIME CALL PER APP OR LIBRARY - ADDS AND DELETES 
          // MESSAGE TABLES FROM THE LIST, RESPECTIVELY
    // ADDS THIS MESSAGE TABLE
    static bool Register(string const&amp;, 
      DWORD const dwFacility = 0) throw(); 
    // REMOVES THIS MESSAGE TABLES
    static bool UnRegister(DWORD const) throw();                               
  private: // EXCEPTION REDIRECTION FUNCTIONS
    // REROUTES STRUCTURED EXCEPTIONS
    static void WinException(unsigned int,EXCEPTION_POINTERS*);                
    // TERMINATION HANDLER
    static void Bail();                                                        
    // UNEXPECTED EXCEPTION HANDLER
    static void Unexpected();                                                  
  private: // LOOKUP AND MANIPULATION FUNCTION OF REGISTRATION 
           // VECTOR
    static  Find(long const) throw();
};

#endif // __EXBASE_H__

/* End of File */</pre>
</BODY>
</HTML>
