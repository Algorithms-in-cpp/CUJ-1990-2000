<html>
<head>
<TITLE>August 1998/Encapsulating DDE/Sidebar</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h3 align=center><FONT FACE="Garamond" COLOR="#000080">DDE Hints and Guidelines</FONT></h3>
<HR>
<BLOCKQUOTE>

Keep the following in mind to avoid the most common problems when working with DDE, especially if you don't use the framework:</p>

<UL><LI>If you want to put a string into a DDE data handle by using <B>DDEDataOut::SetData</B> or <B>DdeCreateDataHandle</B>, remember to pass its length plus one to make room for the zero terminator. You can also use <B>DDEDataOut::SetString</B>, which does it automatically.</LI>
    <LI>When you receive data from DDE, don't count on the data size you get from <B>DDEDataIn::GetSize</B> or <B>DdeAccessData</B> as being the exact size. The size these functions return might be larger than the actual data size . If you need to know the exact size, pass it as part of the transaction data.</LI>
    <LI>When using NetDDE, for some strange reason the client connection will temporarily succeed even if the remote server did not respond. If the server has not responded, this seemingly successful connection will soon be followed by an <B>XTYP_DISCONNECT</B> transaction. If you want to be sure your connection succeeded right after the call to <B>DdeConnect</B>, make a synchronous transaction and check the error code. My DDE framework does this automatically.</LI>
    <LI>When using NetDDE with Windows 95, remember to start the <B>NETDDE.EXE</B> support application, which is not started by default. The framework starts it automatically.</LI>
    <LI>If you need to do lengthy processing or start synchronous transactions from within your <B>DDECallback</B>, rather store the data received, post a message to some of your windows, return from the function, and let the Windows message handler process the data later.</LI>
    <LI>If you use DDE to do some polling requests, make sure no previous polling request is waiting to complete before starting a new request; otherwise wait until the next timer message, so that transactions are not started faster than they can complete. The framework provides two functions for testing if some transaction is waiting to complete: <B>SynchBusy</B> and <B>AsynchBusy</B>.</LI>
    <LI>Remember that calling a synchronous transaction causes a separate message loop to process Windows messages while the transaction is waiting to complete, so other parts of your code can execute. Make sure these parts don't start other synchronous transactions or you'll get a reentrancy error. (You can use the framework's <B>SynchBusy</B> function to test this situation.)</LI>
    <LI>If you start an advise link on an item, the server will notify you when the item changes. Usually you also need the current value of the item. You'll need to make a <B>Request</B> on that item first.</LI>
    <LI>Don't count on the <B>DDECallback</B> not being called after you have called <B>DdeUninitialize</B>.</LI>
    <LI>Use the Windows API function <B>IsBadReadPtr</B> to test the data pointer you get from <B>DdeAccessData</B>. It has happened that accessing data through that pointer (which was not <B>NULL</B>) caused a crash. The framework does this test and uses Windows <B>ASSERT</B>s.</LI>
    <LI>Prefer asynchronous transactions if possible; they seem more efficient and give less problems (like reentrancy). It is also safe to mix synchronous and asynchronous transactions.</LI>
    <LI>Don't try to create string handles longer than 255 characters. o</LI></UL>
</BLOCKQUOTE>
</BODY>
</HTML>
