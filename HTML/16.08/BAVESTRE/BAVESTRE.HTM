<HTML>
     
     <HEAD>
<TITLE>August 1998/Encapsulating DDE</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocaug.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Windows</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Encapsulating DDE</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Giovanni Bavestrelli</FONT></H3>

<BLOCKQUOTE>
<p>The less you have to fool with the details of Dynamic Data Exchange, the more likely you are to get it right.</p></BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>Dynamic Data Exchange (DDE) is an interprocess communication mechanism that has been part of Windows operating systems for a long time. At first, DDE was simply based on the messaging system built into Windows, then came DDEML (DDE Management Library) to provide a higher-level function call layer on top of the messaging system. Network DDE (NetDDE) is the network support layer that enables remote DDE connections to DDE servers on different machines across a network.</p>

<p>DDE has been used extensively in many Windows applications, and even though it is not the most modern interprocess communication protocol, it is still used in many fields, such as automation, and by Windows operating systems themselves. The mechanism is simple and efficient in concept, but the complexity remains in the details, in the somewhat unfriendly API, and in the memory-management burden. All in all, DDE has always been considered hard to program in C/C++. Unfortunately, MFC does not provide any wrapper classes to ease the job of DDE programmers.</p>

<p>This article presents a small object-oriented framework that encapsulates the DDEML API with its details and its complexities and provides a neater object-oriented interface. The framework implements default DDE functionality and allows users to extend it by redefining appropriate virtual functions, in much the same way as MFC does with the Windows API.</p>

<p>If you are not familiar with DDE terms and concepts, see the sidebar, <A HREF="sidebar1.htm">"A Brief Summary of DDE Concepts</A>." You can also refer to <a href="#1">[1]</a>, <a href="#2">[2]</a>, or to your compiler's documentation.</p>

<h4><FONT COLOR="#000080">Why DDE Seems Difficult</FONT></H4>

<p>DDEML's C API consists of 27 functions, 16 transaction types, over ten structures, and just too many <B>#define</B> macro constants to remember. To specify or compare Services, Topics, and Items, you cannot use strings, you must create DDE String Handles and remember to free them. To pass and receive data to and from DDE, you must work with DDE Data Handles. The rules for creating, accessing, unaccessing, and freeing these handles are not trivial and they are easy to get wrong. To start the five types of client transactions, be they synchronous or asynchronous, including hot and cold advise links, you must use a single API function, <B>DdeClientTransaction</B>. All messages (transactions) that you receive from DDEML are sent to a unique callback function (<B>DDECallback</B>) that you must define and register in your application, and that must handle all client and server conversations in your application. The meanings of the parameters to <B>DdeClientTransaction</B> and <B>DDECallback</B> often change with each transaction type, and you must cast to compensate. You can look at the online documentation for <B>DdeClientTransaction</B> and <B>DDECallback</B> to get a feeling for the complexity of such an interface.</p>

<p>All this convinced me that if I ever had to tackle these problems, I would only want to do it once, and then forget about them. And that is what I did by writing this framework.</p>

<h4><FONT COLOR="#000080">Aims for a DDE Framework</FONT></H4>

<p>When I decided to encapsulate the DDEML API inside an object-oriented interface, my main aims were:</p>

<UL><LI>ease of creation &#151; enabling robust and efficient DDE applications to be written quickly and effortlessly</LI>
    <LI>reuse &#151; a reusable and tested framework to implement standard DDE functionality</LI>
    <LI>extensibility &#151; by redefining virtual functions in appropriate classes</LI>
    <LI>encapsulation of callback &#151; never having to write a DDE callback</LI>
    <LI>resource management &#151; never having to create/destroy DDE string handles or data handles</LI>
    <LI>argument wrappers &#151; common DDE arguments wrapped into easy-to-access objects</LI>
    <LI>simple and consistent return types from transaction functions (<B>BOOL</B>)</LI>
    <LI>configurable error handling</LI>
    <LI>16- and 32-bit compatibility</LI></UL>

<h4><FONT COLOR="#000080">An Object-Oriented Approach</FONT></H4>

<p>The way I encapsulated the <B>DDECallback</B> within a <B>DDEClient</B> class is very similar to the way a window procedure is encapsulated into a <B>CWnd</B> class in MFC. In MFC, there are static maps that implement a correspondence between Window Handles (HWND) and <B>CWnd</B> pointers; I use the same method to map Conversation Handles (<B>HCONV</B>) to <B>DDEClient</B> pointers. For the <B>DDEServer</B> class, the mapping is even simpler since Microsoft recommends using only one DDE Service per application. So you should have only one <B>DDEServer</B> object, just like you can have only one <B>CWinApp</B> object in an MFC application.</p>

<p>Just like in MFC, where window messages received by the window procedure inside the framework are routed through virtual functions of the corresponding <B>CWnd</B> objects, DDE transactions received by the <B>DDECallback</B> inside my framework are routed to the corresponding <B>DDEClient</B> object and/or to the only <B>DDEServer</B> object. The <B>DDEClient</B> and <B>DDEServer</B> classes will respond to such transactions by implementing default behavior and by calling virtual functions that can be redefined to implement more specific functionality. Similarly, just as a <B>CWnd</B> class provides wrapper functions for most Windows API functions that take a window handle as a first parameter, <B>DDEClient</B> and <B>DDEServer</B> provide wrappers for many DDEML API functions that take a DDE handle or a DDE conversation handle as parameters. The only place the parallelism between MFC and my DDE framework breaks down is in the use of message maps. I don't need to use message maps; since the transaction types are relatively few compared to window messages, I can just define virtual functions without ending up with huge vtables. <A HREF="fig1.htm">Figures 1</A> and <A HREF="fig2.htm">2</A> show the main interface of the <B>DDEServer</B> and <B>DDEClient</B> classes, respectively.</p>

<p>There are a few other classes central to the implementation of the framework. The first is class <B>DDEString</B>, which encapsulates character strings and DDE string handles (<B>HSZ</B>). Then there is class <B>DDEDataIn</B>, which represents data received from other applications, and class <B>DDEDataOut</B>, which is data going to other applications. These two latter classes encapsulate DDE Data Handles (<B>HDDEDATA</B>) and take care of memory management, data creation, and access. With the aid of these classes, you will never have to create or remember to free any DDE string handle or data handle.</p>

<h4><FONT COLOR="#000080">The DDEServer Class</FONT></H4>

<p>To use the <B>DDEServer</B> class (<A HREF="fig1.htm">Figure 1</A>), you must derive a class from it, using single or multiple inheritance, and redefine at least the <B>AcceptConversation</B> function to return <B>TRUE</B> to accept the conversations on the topics you want to support. (See the sidebar on DDE concepts for information about conversations.) Then you must redefine the virtual member functions relative to the transaction types you want to handle.</p>

<p>For instance, if you want to support the <B>Request</B> transaction on any item, you must redefine the <B>HandleRequest</B> virtual function:</p>

<pre>
virtual BOOL
HandleRequest(
    const DDEString &amp; Topic,
    const DDEString &amp; Item,
    const DDEDataOut &amp; Data,
    HCONV hConv);
</pre>

<p>The framework will pass this function the requested topic and item, and a <B>DDEDataOut</B> object that you can query for the data format. Your <B>HandleRequest</B> function must fill this object with the actual data. The last parameter to this function is the conversation handle, which you probably don't care about if you use the framework. Returning <B>TRUE</B> will ensure that the data is sent to the client.</p>

<p>To start your server, you must call <B>OpenServer</B>, and to close it you must call <B>CloseServer</B> (the destructor will also close the server). <B>DDEServer</B> declares a few other useful functions, like <B>PostAdvise</B>, to notify the clients that a data item has changed; it will cause the server's <B>PrepareAdviseData</B> virtual function to be called once for each client that started an advise link on that data item. Most of these functions have names that are self-explanatory if you are familiar with DDE terminology.</p>

<p>Note that you can have only one <B>DDEServer</B> object in your application, but it can handle any number of conversations on one or more topics with any number of clients.</p>

<h4><FONT COLOR="#000080">The DDEClient Class</FONT></H4>

<p>Whereas a <B>DDEServer</B> class is useless unless you inherit from it and extend its behavior, a <B>DDEClient</B> object can be useful as it is. More effort is required if you want to use asynchronous transactions or advise links, or you want to be notified when you get disconnected or when a server registers a service in the system. In these cases, you must inherit from <B>DDEClient</B> and override the relevant virtual functions.</p>

<p>Let's see how to start a client transaction, for example, a request transaction. You start it with the <B>Request</B> function, whose prototype is:</p>

<pre>
BOOL  Request(const DDEString &amp; Item,
              DDEDataIn * Data,
              UINT format=CF_TEXT,
              DWORD AsyncUserID=SYNC_TRAN,
              LPDWORD pdwResult=NULL);
</pre>

<p>The arguments to this function are explained as follows. In the first argument, you must pass the name of the data item you want. As always in the DDE framework, you can pass a <B>CString</B>, a <B>LPCSTR</B>, an <B>HSZ</B>, or a <B>DDEString</B>, as the <B>DDEString</B> class provides the necessary conversion operators. If the transaction is synchronous, you must pass in a pointer to a <B>DDEDataIn</B> object that the function will fill with the received data. You usually create such a <B>DDEDataIn</B> object on the stack before calling <B>Request</B>, so that it will still be alive when the <B>Request</B> function will return, but will be deleted automatically when it goes out of scope. The next two parameters are a data format and, very important, a transaction identifier. The transaction identifier can either be <B>SYNC_TRAN</B>, which is the default and indicates a synchronous transaction, or any other value to indicate an asynchronous transaction ID. In this latter case, when the transaction completes asynchronously, the virtual function <B>TransactionCompleted</B> will be called:</p>

<pre>
virtual void TransactionCompleted(const DDEString &amp; Item,
                                  const DDEDataIn * const Data,
                                  UINT Format,DWORD UserID,
                                  BOOL Ok);
</pre>

<p>When my framework calls this function, it passes in a reference to the DDE item and a pointer to the <B>DDEDataIn</B> object, which you can query for the data. Not all transaction types send back data, so the pointer may be <B>NULL</B>. The remaining arguments are the data format, the transaction ID that you specified when you started the transaction, and a boolean indicating if the transaction succeeded or not. Thus, you have all the information you need. Note that the last parameter passed to the <B>Request</B> function, <B>pdwResult</B>, can be used to get back the result of the transaction as retrieved by the last parameter of the DDE API's <B>DdeClientTransaction</B> function.</p>

<p>The other four functions that start client transactions (<B>Poke</B>, <B>Execute</B>, <B>StartAdvise</B>, and <B>StopAdvise</B>) work in a similar way, each with its own parameters. They all return <B>TRUE</B> if a synchronous transaction completes successfully or if an asynchronous transaction started successfully, and <B>FALSE</B> otherwise. These member functions have several main advantages over the DDE API functions. Each transaction type gets its own function and default arguments; each member function takes care of its own details; each function updates counters that count how many synchronous and asynchronous transactions are waiting to complete (often useful to know); and each function handles errors.</p>

<p>Advise links are different from other types of client transactions. If you start an advise link with a call to <B>StartAdvise</B>, the <B>DDEClient</B>'s virtual <B>ReceiveAdvise</B> function will be called when the data changes:</p>

<pre>
virtual BOOL
ReceiveAdvise(
    const DDEString &amp; Item,
    const DDEDataIn * const data,
    UINT format);
</pre>

<p>passing you the item and, in case of a hot link, a <B>DDEDataIn</B> object that you can query for the data. In case of a warm link, the <B>DDEDataIn</B> object pointer passed will be <B>NULL</B>, and it will be your responsibility to request the data if you need it. Call <B>StopAdvise</B> to stop the advise link.</p>

<p>Note that you can have any number of <B>DDEClient</B> objects in your application, but each will be able to open only one DDE conversation at a time. In each conversation, the client can make any number of <B>Request</B>, <B>Poke</B>, or <B>Execute</B> transactions and start any number of advise links.</p>

<h4><FONT COLOR="#000080">Sample Applications</FONT></H4>

<p>To show the architecture at work, I implemented two small sample applications, a DDE Client and a DDE Server. Both are simple, around 100 lines of code each, but they implement complex DDE functionality, including advise links and asynchronous transactions. <A HREF="fig3.htm">Figures 3</A> and <A HREF="fig4.htm">4</A> show the complete applications.</p>

<p>The easiest way to use the framework is with multiple inheritance. In the sample applications, I inherited the <B>CMainWindow</B> class from MFC's <B>CFrameWnd</B> and from my <B>DDEClient</B> or <B>DDEServer</B>, so that all functionality is defined in <B>CMainWindow</B>.</p>

<p>The Server application (<A HREF="fig3.htm">Figure 3</A>) opens a DDE service named <B>"DDEServerTest"</B> when the left mouse button is pressed in its client area and closes the service when the right mouse button is pressed. The server application accepts conversations on topic <B>"Mouse"</B> by returning <B>TRUE</B> in the redefined <B>AcceptConversation</B> function. Once the conversation is established, a data item named <B>"Position"</B> can be exchanged within a <B>CPoint</B> structure, representing the position of a circle in the client area of the server application. The server responds to <B>Request</B> transactions in <B>HandleRequest</B> by putting the <B>Position</B> structure (a <B>CPoint</B>) into the <B>DDEDataOut</B> object and returning <B>TRUE</B>. Similarly, it responds to a <B>Poke</B> transaction in <B>HandlePoke</B> by putting its circle in the position received from the client, which is found in the <B>DDEDataIn</B> object. The server also accepts advise links on item <B>"Position"</B> by returning <B>TRUE</B> in <B>AcceptAdvise</B> and will notify clients when the position of the circle changes by calling <B>PostAdvise</B>. This position changes in two circumstances: when the mouse moves in the server's client area, and when a <B>Poke</B> transaction is received from a client. To show additional functionality, the server counts and displays the number of clients connected by redefining the <B>BeginConversation</B> and <B>EndConversation</B> notification functions, and responds to a DDE execute <B>Maximize</B> command by maximizing its window.</p>

<p>The Client application (<A HREF="fig4.htm">Figure 4</A>) tries to connect to the server when the left mouse button is pressed in its client area, and disconnects from the server with a right mouse button click. When the connection succeeds, the Client application first requests the current <B>"Position"</B> of the circle in the server's client area, and then starts a hot advise link on the item <B>"Position"</B> to be notified through the <B>ReceiveAdvise</B> function when such a position changes. Whenever the client receives the position of the circle from the server application (either with the first <B>Request</B> or when <B>ReceiveAdvise</B> is called later), it places a square in the same position in its own client area. When the mouse is moved over the Client window, the Client application <B>Poke</B>s such a position to the server, which will respond by placing its circle in that position and by notifying all its clients that the position changed by calling <B>PostAdvise</B>. Each client will therefore be notified that the position changed and will place its square in that position. To show the execute transaction, a double click on the Client window will send the server a command to maximize its window. When the client gets disconnected, the client's <B>Disconnected</B> virtual function is called, and the client just invalidates its client area to display its new status.</p>

<p>Note that all client transactions are asynchronous (a transaction is made asynchronous by passing an <B>AsyncUserID</B> different from <B>SYNC_TRAN</B> to the function that starts the transaction). This is because asynchronous transactions are more efficient and seem to work better. If, for example, the <B>Poke</B> transaction were synchronous, it would probably cause a reentrancy error by being called too often as the mouse moves, before the previous transactions had completed. In <B>TransactionCompleted</B>, the client is notified when each asynchronous transaction is completed. The client cares only about the result of a <B>Request</B> transaction (which was started with ID 111), because this result brings back the position of the circle from the server; the client gets that position and redraws the window. Just to show you how a synchronous transaction works, I implemented <B>ShowYouSynchronousRequestTransaction</B> to make a synchronous request transaction.</p>

<p>To see the samples at work, I suggest you start one server and two or more clients, tile them across the screen, and start clicking the left and right mouse buttons over them. Also move the mouse across them, and try double clicking the left mouse button on the clients.</p>

<p>Note that I had to define the following function in both client and server or the programs would not link:</p>

<pre>
void ReportDDEErrorToApp(UINT Code, LPCSTR message);
</pre>

<p>This is part of a rather primitive error-handling technique. All DDE errors will cause a code and description of the error to be processed by the <B>ReportDDEErrorToApp</B> function, where you can log it or show it or whatever. This part would be easy to improve, but it serves my purposes.</p>

<p>Note also that function <B>DDEInitialize</B> is called in the application object's <B>InitInstance</B>, and <B>DDEUninitialize</B> is called in <B>ExitInstance</B>. These are necessary as they take care of the framework's initialization and cleanup.</p>
<h4><FONT COLOR="#000080">Conclusion</FONT></H4>

<p>The presented framework has been used and tested in many applications in the last few years. It does not cover all aspects of DDEML, but it certainly covers all the most important ones, and can be extended further. The approach to the problem has very definite advantages, as is so often the case with object-oriented technology. Most significantly, the DDE functionality is already tested and debugged. Many common DDE errors are made impossible by this framework and some misuses of the framework can be caught by debugging checks. (For more information on DDE pitfalls, see the sidebar, <A HREF="sidebar2.htm">"DDE Hints and Guidelines."</A>) The framework makes the development of complex DDE servers and clients simple and efficient.</p>

<h4><FONT COLOR="#000080">Acknowledgement</FONT></H4>

<p>Thanks to my friend Jurgen Leschner for reviewing the article.</p>

<h4><FONT COLOR="#000080">References</FONT></H4>

<p><a name="1"></a>[1]  Charles Petzold. <I>Programming Windows 95</I> (Microsoft Press, 1996), Chapter 17.</p>

<p><a name="2"></a>[2]  <I>Microsoft Windows 3.1: Programmer's Reference, Volume 1</I>, Chapter 5.</p>

<p><a name="3"></a>[3]  Microsoft Developer Network CD-ROM (MSDN).</p>

<p><i>Giovanni Bavestrelli lives in Milan and is a software engineer for Techint S.p.A., Castellanza, Italy. He has a degree in Electronic Engineering from the Politecnico di Milano, and writes automation software for Pomini Roll Grinding machines. He has been working in C++ under Windows since 1992, specializing in the design and development of reusable object-oriented libraries. He can be reached at <B>automation@pomini.it</B>.</i></p>

<h4><a href="../../../source/1998/aug98/bavestre.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
