<HTML>
     
     <HEAD>
<TITLE>August 1998/Standard C/C++</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocaug.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Standard C/C++: The Facet collate</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">P. J. Plauger</FONT></H3>

<BLOCKQUOTE>

<p>Comparing two character sequences is relatively easy, once you know which one should come first.</p></BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<h4><FONT COLOR="#000080">Introduction</FONT></H4>

<p>What does it mean to compare two strings? To a C programmer, the answer is usually simple and obvious. A "string" is a null-terminated sequence of elements stored in an array of some character type. You call <B>strcmp(s1, s2)</B> (declared in <B>string.h</B>) to compare the string beginning at <B>s1</B> to the string beginning at <B>s2</B>. The function compares successive elements until it finds a mismatch or until the corresponding elements are both null. The result of the comparison is just the signed difference between these elements, taken as unsigned values, as in <B>(unsigned char)*s1 - (unsigned char)*s2</B>.</p>

<p>The effect of this definition generally satisfies our intuitive notion of string ordering. Strings are equal only if they are of the same length and match element by element. If one string is a prefix of the other, it compares less. The principal creativity comes in determining which of two unequal strings comes earlier in an ordered sequence. The answer obviously depends on the choice of codes stored in the individual elements. It is well known that Standard C says nothing about the encoding of its source or execution character set. A change of the latter can lead to different results, for the same program, on different machines. Nevertheless, many of us are happy much of the time with this simple, and fairly fast, method of comparing two strings.</p>

<p>You can get a little more sophisticated, as a C programmer, and forego those terminating nulls. Then you might call <B>memcmp(s1, s2, n)</B> (also declared in <B>string.h</B>) to compare two sequences both of length <B>n</B>. There are no issues here about strings of different length, so two strings are equal only if all corresponding elements match. Otherwise, the ordering rule is as before, also depending on the encoding used for elements.</p>

<p>Standard C introduces the concept of locales, and with it the notion that some library behavior should change between locales to reflect differences among cultures. Remember that a "culture" is not necessarily a nationality. Librarians have their own culture, at least when it comes to ordering the entries in a card catalog. That culture differs in small ways from the way the Yellow Pages tribe orders names in the Manhattan telephone directory. And that tribe has slightly different ordering rules from Yellow Pages du Montreal (a name I just made up, I hope).</p>

<p>One of the goals of locales is to encapsulate ordering rules for character strings. So Standard C lets you call <B>strxfrm(s1, x1, n)</B> (also declared in <B>string.h</B>) to perform a culture-specific transformation of the string at <B>s1</B> into the <B>n</B>-element array beginning at <B>x1</B>. If you similarly transform <B>s2</B> to <B>x2</B>, then the call <B>strcmp(x1,</B> <B>x2)</B> tells you the ordering between <B>s1</B> and <B>s2</B> peculiar to that culture (locale). A simple transformation might be to force all letters to lower case. A more ambitious approach might be to omit all punctuation. The possibilities are open ended, and for a good reason. Since people first began scratching glyphs on clay tablets, they have invented more ways to order sequences of glyphs than anyone can count.</p>

<p>I should point out in passing that Standard C also lets you call <B>strcoll(s1, s2)</B> (also declared in <B>string.h</B>) to do all these operations at once. You use <B>strxfrm</B> to transform a string you may have to compare quite often &#151; a key in a hash table, for example. You use <B>strcoll</B> as a more compact, but less efficient, alternative.</p>

<p>Standard C also added at least minimal support for large character sets. By "large" I mean sets with way more than the 256 distinct codes you can represent in a single byte. The typedef <B>wchar_t</B> (defined in several headers) can represent all values of the largest character set supported by an implementation. Typically, it is a synonym for a 16-bit integer type, such as <B>short</B> or <B>unsigned short</B>. Objects of this type are called "wide characters." Corresponding to each wide-character encoding is a way to write a sequence of wide characters as a sequence of bytes. Each wide-character code is represented as one or more bytes &#151; thus the term "multibyte encoding" for this representation.</p>

<p>No provision was made in the original C Standard (ANSI 1989, ISO 1990) for culture-specific comparison of wide-character sequences. Remember, I said support was minimal. Presumably, an implementation could have <B>strxfrm</B> do sensible things with multibyte sequences, but the C Standard was profoundly silent on such matters. In any event, it was an unappealing prospect to first convert wide-character sequences to multibyte, then transform them further, just to apply a culture-specific ordering rule.</p>

<p>Amendment 1 to the C Standard greatly expanded support for large character sets. One of the additions was the pair of functions <B>wcsxfrm and wcscoll</B> (both declared in <B>wchar.h</B>), where the <B>wcs</B> stands for "wide-character string." Their behavior is entirely analogous to the older pair that operates on "narrow" (or single-byte) characters.</p>

<h4><FONT COLOR="#000080">Enter Standard C++</FONT></H4>

<p>Now we come to the C++ Standard. It incorporates the entire Standard C library, including Amendment 1 additions and then some. So you can certainly do in C++ all the string comparisons now possible in Standard C. What else could you possibly need?</p>

<p>Well, the C++ standards committee was not content to rely on the locale machinery built into the Standard C library. I tried to explain why nearly two years ago. (See "Standard C/C++: Introduction to Locales," <I>CUJ,</I> October 1997.) And ever since then, I've been describing the locale machinery invented for Standard C++. Put simply, a locale in C is a global entity that modifies the behavior of certain library functions. In C++, a locale is encapsulated inside an object of type <B>locale</B> (oddly enough). Its behavior is expressed through member functions of the dozens of "locale facets" designated by the locale object.</p>

<p>You can thus have multiple locales in a C++ program, with no need to switch the global locale among them. Each input or output stream, in fact, is "imbued" with its own locale object. Your program can read by French rules and write by German rules, if you choose. You can tailor your own locale objects with facets of all nations. You can even define brand new facets, and create locale objects that designate these new creatures. I've spent most of the past two years in these pages describing the facets supplied with the Standard C++ library. Every locale object designates at least these facets, which number in the dozens. I'm almost to the end of the list, but I still have one or two left to describe.</p>

<p>The facet of the month is template class <B>collate</B>. As you've no doubt guessed by now, it encapsulates locale-specific rules for comparing two character sequences. The template class has a single class parameter, which I usually write <B>_E</B>, for element type. Any locale object you create has the two facets <B>collate&lt;char&gt;</B>, for comparing single-byte characters, and <B>collate&lt;wchar_t&gt;</B>, for comparing wide characters.</p>

<p>Template class <B>collate</B> defines three public member functions. The first is an obvious analog to <B>strxfrm</B>:</p>

<pre>
string_type transform(const _E *_F,
    const _E *_L) const
    {return (do_transform(_F, _L)); }
</pre>

<p>Here, <B>string_type</B> is the appropriate flavor of template class <B>basic_string</B> (either <B>string</B> or <B>wstring</B>, for the standard facets) to store sequences of the element type <B>_E</B>. Rather than rely on a null terminator, this function instead takes a range of elements delimited by pointers, much like the iterators used throughout STL.</p>

<p>Note the usual practice of foisting the real work off on a protected "do" function. That lets you derive a class from <B>collate&lt;T&gt;</B> and override just the virtual functions you choose, without monkeying with the public interface to the class.</p>

<p>The second public member function is an obvious analog to <B>strcoll</B>:</p>

<pre>
int compare(const _E *_F1,
    const _E *_L1, const _E *_F2,
    const _E *_L2) const
    {return (do_compare(_F1, _L1,
        _F2, _L2)); }
</pre>

<p>It defines its operands with two pairs of pointers, <B>(_F1, _L1)</B> and <B>(_F2, _L2)</B>.</p>

<p>Finally, template class <B>collate</B> defines the public member function:</p>

<pre>
long hash(const _E *_F,
    const _E *_L) const
    {return (do_hash(_F, _L)); }
</pre>

<p>The idea is that if you're going to be comparing strings by some special rule, you may well want to construct a hash table as well. Equality doesn't necessarily mean identity &#151; not after an arbitrary transformation &#151; so it's highly desirable that two "equal" strings hash to the same location in the table.</p>

<p>For completeness, here is a brief description of each of the virtual functions in template class <B>collate</B>. As in the other facets, they do all the interesting work:</p>

<pre>
collate::do_compare

virtual int
do_compare(const E *first1,
    const E *last1, const E *first2,
    const E *last2) const;
</pre>

<p>The protected virtual member function compares the sequence at <B>[first1, last1)</B> with the sequence at <B>[first2, last2)</B>. It compares values by applying <B>operator&lt;</B> between pairs of corresponding elements of type <B>E</B>. The first sequence compares less if it has the smaller element in the earliest unequal pair in the sequences, or if no unequal pairs exist but the first sequence is shorter.</p>

<p>If the first sequence compares less than the second sequence, the function returns -1. If the second sequence compares less, the function returns +1. Otherwise, the function returns zero.</p>

<pre>
collate::do_hash

virtual long do_hash(const E *first,
    const E *last) const;
</pre>

<p>The protected virtual member function returns an integer derived from the values of the elements in the sequence <B>[first, last)</B>. Such a "hash" value can be useful, for example, in distributing sequences pseudo randomly across an array of lists.</p>

<pre>
collate::do_transform

virtual string_type
do_transform(const E *first,
    const E *last) const;
</pre>

<p>The protected virtual member function returns an object of class <B>string_type</B> whose controlled sequence is a copy of the sequence <B>[first, last)</B>. If a class derived from <B>collate&lt;E&gt;</B> overrides <B>do_compare</B>, it should also override <B>do_transform</B> to match. Put simply, two transformed strings should yield the same result, when passed to <B>collate::compare</B>, that you would get from passing the untransformed strings to <B>compare</B> in the derived class.</p>

<h4><FONT COLOR="#000080">Using collate</FONT></H4>

<p>So how do you do use these facets? Well, first you have to get a handle on one. I've shown the idiom many times of late, but it doesn't hurt to show it yet again, because it's tricky. Let's say you want to compare two strings using the locale imbued in the standard input stream <B>cin</B>. You obtain a reference to the facet by writing:</p>

<pre>
const collate&lt;char&gt;&amp; fac =
    use_facet&lt; collate&lt;char&gt; &gt;
        (cin.getloc());
</pre>

<p>This expression makes use of a fairly new aspect of the language. Template function <B>use_facet</B> is declared as:</p>

<pre>
template&lt;class Facet&gt;
    Facet&amp; use_facet(locale);
</pre>

<p>Note that the template function has no parameters that help the translator determine the type of the parameter <B>Facet</B>. This was once invalid C++, but now the language has an escape clause. You can call <B>use_facet&lt;T&gt;(arg)</B> to tell the translator that the type of the parameter is <B>T</B>.</p>

<p>That's all well and good for up-to-date compilers, and there are a few that can now handle this notation. But to meet the needs of Visual C++ and other older (but still widely used) compilers, I had to supply an alternate declaration for the template function:</p>

<pre>
template&lt;class Facet&gt; Facet&amp;
    use_facet(locale, Facet *);
</pre>

<p>With this declaration, the call above is rewritten as:</p>

<pre>
const collate&lt;char&gt;&amp; fac =
    use_facet(cin.getloc(),
        (collate&lt;char&gt; *)0);
</pre>

<p>To keep the code as portable as possible, I introduce a macro. So what you really should write, during this period of transition, is:</p>

<pre>
const collate&lt;char&gt;&amp; fac =
    _USE(cin.getloc(),
        collate&lt;char&gt; *);
</pre>

<p>and let the library supply the appropriate definition of the macro <B>_USE</B> for a given compiler.</p>

<p>So much for the hard part. Let us now compare two objects of class <B>string</B> called <B>s1</B> and <B>s2</B>. To test for equality, you apparently can write:</p>

<pre>
if (fac.compare(s1.begin(), s1.end(),
    s2.begin(), s2.end()) == 0)
    &lt;WRONG&gt;
</pre>

<p>Sadly, this is not a safe thing to do. Between the time that <B>collate</B> was specified and when the draft C++ Standard was frozen, the specification changed for template class <B>basic_string</B>. It is no longer promised that a call such as <B>s1.begin()</B> returns a pointer to <B>char</B>. All containers in the library (and <B>basic_string</B> is more or less a container now, in the STL sense) have iterators that are implementation defined. There is no promised implicit conversion from such an iterator to a pointer. So the safer thing to write for the comparison above is:</p>

<pre>
const char *q1 = s1.c_str();
const char *q2 = s2.c_str();
if (fac.compare(q1, q1 + s1.length(),
    q2, q2 + s2.length()) == 0)
    &lt;strings are equivalent&gt;
</pre>

<p>Naturally, the same caveats apply to the other two member functions, <B>transform</B> and <B>hash</B>.</p>

<p>Things are not quite as bad as they may seem, however. The Standard C++ library provides yet another way to make use of facet <B>collate</B>. It seems that class <B>locale</B> defines an interesting member template version of <B>operator()</B>. Cognoscenti will recognize this operator as the source of all "function objects" (or "functoids" if you really like Newspeak). An object of a class that defines this member operator can be used wherever a function name or pointer can normally appear, followed by an appropriate argument list.</p>

<p><A HREF="list1.htm">Listing 1</A> shows the definition of this template member function in all its unreadable glory. (All those underscores don't help, of course, but they're required to avoid user-defined macro names.) The upshot of this machinery is that you can write:</p>

<pre>
locale loc = cin.getloc();
if (loc(s1, s2) == 0)
    &lt;strings are equivalent&gt;
</pre>

<p>and compare your two strings as if the locale object <B>loc</B> were magically doing all the work for you. And in a real sense it is, by passing the request onto one of its facets.</p>

<p><A HREF="list2.htm">Listing 2</A> shows one way to implement template class <B>collate</B>. As is my custom, I omit various magic bits of initialization code. It has to be tailored in nonstandard ways to interface to the underlying C locale machinery on each implementation. All you see of the interface here is the calls to two magic functions, <B>_LStrxfrm</B> and <B>_Lstrcoll</B>. They take the equally magic cookie <B>_Coll</B>, pumped full of locale-specific ordering information at construction time, and perform functions analogous to their similarly named cousins in the Standard C library.</p>

<p>And that's the thoroughly modern way to compare two strings in Standard C++.</p>

<p><i>P.J. Plauger is Senior Editor of </i>C/C++ Users Journal<i> and President of Dinkumware, Ltd. He is the author of the Standard C++ Library shipped with Microsoft's Visual C++, v5.0. For eight years, he served as convener of the ISO C standards committee, WG14. He remains active on the C++ committee, J16. His latest books are <I>The Draft Standard C++ Library</I>, <I>Programming on Purpose</I> (three volumes), and <I>Standard C</I> (with Jim Brodie), all published by Prentice-Hall. You can reach him at <B>pjp@plauger.com</B>.</i></p>

<h4><a href="../../../source/1998/aug98/plauger.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY>
</HTML>
