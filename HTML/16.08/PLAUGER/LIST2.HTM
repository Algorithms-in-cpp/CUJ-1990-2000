<HTML><HEAD>
<TITLE>August 1998/Standard C/C++/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2: Template class collate and friends</A></h4>

<pre>
        // TEMPLATE CLASS collate
template&lt;class _E&gt;
    class collate : public locale::facet {
public:
    typedef _E char_type;
    typedef basic_string&lt;_E, char_traits&lt;_E&gt;,
        allocator&lt;_E&gt; &gt; string_type;
    int compare(const _E *_F1, const _E *_L1,
        const _E *_F2, const _E *_L2) const
        {return (do_compare(_F1, _L1, _F2, _L2)); }
    string_type transform(const _E *_F, const _E *_L) const
        {return (do_transform(_F, _L)); }
    long hash(const _E *_F, const _E *_L) const
        {return (do_hash(_F, _L)); }
    static locale::id id;
    explicit collate(size_t _R = 0);
protected:
    ~collate()
        {}
    virtual int do_compare(const _E *_F1, const _E *_L1,
        const _E *_F2, const _E *_L2) const
        {return (_LStrcoll(_F1, _L1, _F2, _L2, &amp;_Coll)); }
    virtual string_type do_transform(const _E *_F,
        const _E *_L) const
        {size_t _I, _N;
        string_type _Str;
        for (_N = _L - _F; ; )
            {_Str.append(_N, '\0');
            if ((_I = _LStrxfrm(&amp;*_Str.begin(), &amp;*_Str.end(),
                    _F, _L, &amp;_Coll)) &lt;= _Str.size())
                break;
            _N = _Str.size() &lt; _I ? _I - _Str.size() : 1; }
        _Str.resize(_I);
        return (_Str); }
    virtual long do_hash(const _E *_F, const _E *_L) const
        {unsigned long _V = 0;
        for (; _F != _L; ++_F)
            _V = (_V &lt;&lt; 8 | _V &gt;&gt; 24) + *_F;
        return ((long)_V); }
private:
    _Locinfo::_Collvec _Coll;
    };

template&lt;class _E&gt;
    locale::id collate&lt;_E&gt;::id;


        // TEMPLATE CLASS collate_byname
template&lt;class _E&gt;
    class collate_byname : public collate&lt;_E&gt; {
public:
    explicit collate_byname(const char *_S, size_t _R = 0);
protected:
    virtual ~collate_byname()
        {}
    };
/* End of File */
</pre>
</BODY>
</HTML>
