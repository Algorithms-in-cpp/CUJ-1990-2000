<HTML>
     
     <HEAD>
<TITLE>August 1998/Questions &amp; Answers</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocaug.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Questions &amp; Answers: Every Template Needs a friend (Now and Then)</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Pete Becker</FONT></H3>

<BLOCKQUOTE>
<p>Pete explains why template specializations aren't friends, and why character constants shouldn't be treated as numbers.</p></BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p><I>To ask Pete a question about C or C++, send email to </I><B>petebecker@acm.org</B><I>, use subject line: Questions and Answers, or write to Pete Becker, C/C++ Users Journal, 1601 W. 23rd St., Ste. 200, Lawrence, KS 66046.</I></p>

<h4><FONT COLOR="#000080">Q</FONT></H4>

<p>I was coding a template matrix class when I came upon the following surprising error. The function containing the error was the <B>operator==</B> for two matrices that stored the result for each comparison in a third matrix. The function follows <a href="#1">[1]</a>:</p>

<pre>
template&lt; class T &gt;
Matrix&lt;bool&gt;
Matrix&lt;T&gt;::operator==(
    const Matrix&lt;T&gt;&amp; m ) const
{
Matrix&lt;bool&gt;
to_return( rows, cols, false );

for( int i = 0; i &lt; rows; i++ )
    for( int j = 0; j &lt; cols; j++ )
        // mat is a private data
        // member of type T**
        to_return.mat[i][j] =
            mat[i][j] == m.mat[i][j];
return to_return;
}
</pre>

<p>A problem arose because <B>to_return.mat</B> was declared <B>private</B> and the class I was instantiating was <B>Matrix&lt;int&gt;</B>, which did not have access to <B>Matrix&lt;bool&gt;</B>'s private data members. I was curious as to the reason behind this, and whether or not the new C++ Standard supports this. Also, is there any way around this problem? I had already defined the <B>operator[]</B> for a <B>Matrix</B> class, so I just used it, but there should be other ways. Am I right in thinking this? &#151; Tamon Gibbs</p>

<h4><FONT COLOR="#000080">A</FONT></H4>

<p>Yes, you're right, there is a more direct way. Let's begin, though, by understanding where the problem comes from. Access rights are applied to classes, which is why the code in a member function of class <B>A</B> can access private data in any object of type <B>A</B>, not just the object to which the member function is being applied. The reason this call doesn't work for templates is that a template itself is not a class. When you instantiate a template you create a class. So, for example, in your code <B>Matrix&lt;int&gt;</B> is a class and <B>Matrix&lt;bool&gt;</B> is a class, but the two are different classes. The code for a <B>Matrix&lt;int&gt;</B> is not permitted to access private data in a <B>Matrix&lt;bool&gt;</B>, any more than code in a class <B>A</B> is allowed to access private data in a class <B>B</B>.</p>

<p>To make this work, think of <B>Matrix&lt;int&gt;</B> and <B>Matrix&lt;bool&gt;</B> as two classes. If you want one class to be able to access private data in another class, add a <B>friend</B> declaration. Like this:</p>

<pre>
template&lt;class T&gt;
class Matrix
{
template &lt;class P&gt;
    friend class Matrix;
.....
};
</pre>

<p>The <B>friend</B> declaration here declares that every instantiation of <B>Matrix</B> is a friend of every other instantiation of <B>Matrix</B>. This declaration will permit <B>Matrix&lt;int&gt;</B> to access the contents of <B>Matrix&lt;bool&gt;</B>, which is just what you need.</p>

Note, however, that this <B>friend</B> declaration is something of a bludgeon, and a bit dangerous. Since every instantiation of <B>Matrix</B> is a friend, someone who decides to access the private members of an instance of your template can do so by creating the specialization:

<pre>
struct S {};
template &lt;&gt; class Matrix&lt;S&gt;
{
public:
    template &lt;class T&gt; void
    access(Matrix&lt;T&gt; &amp;m)
    {
    // m's private members are accessible here
    }
};
</pre>

<p>In general I wouldn't worry about this potential abuse &#151; it is too much work for most people to go through. But it is something you need to be aware of, if for no other reason, than to have an answer for that smart aleck in your next code review who asks if this technique is dangerous.</p>

<h4><FONT COLOR="#000080">Q</FONT></H4>

<p>What kind of portability problems would be presented by this C++ code fragment:</p>

<pre>
int start, base, pos, val;
char letter;
char inbuf[50];

...

cout &lt;&lt;
  "Enter a letter between A and Z: ";
cin &gt;&gt; inbuf;
letter = inbuf[0];
if ((letter &gt;= 'a') &amp;&amp;
    (letter &lt;= 'a'+25))
   letter = letter - 32;

if ((letter &gt;= 'A') &amp;&amp;
    (letter &lt;= 'A'+25)) {
   start = base + 4 * (letter - 'A');
   val = 0;
   for (pos=start;
        pos&lt;start+4;
        pos++) {
       val =
          (val &lt;&lt; 8) + readbyte(pos);
    }
cout &lt;&lt;
    "The value stored at position "
     &lt;&lt; letter &lt;&lt; " is " &lt;&lt; val
      &lt;&lt; "\n";
}

//This code obtains a letter from the
//user and gets a corresponding
//integer from a binary array stored
//in a file. The value "base" is the
//starting position for the array in
//the file. The function "readbyte"
//reads one byte from the file at a
//given position.
</pre>

<p>I'm having a problem finding references on writing portable C++, so any help would be appreciated. &#151; Gregory Wood</p>

<h4><FONT COLOR="#000080">A</FONT></H4>

<p>This code has some fairly serious portability problems, all stemming from the assumption that C runtime systems all use the ASCII character encoding system. C provides a set of functions to do most of what you're looking for portably &#151; the prototypes for these functions are in <B>&lt;ctype.h&gt;</B>. Let's go through the issues presented here one by one, and look at how to fix them.</p>

<p>In the first <B>if</B> statement the code is testing to see whether the input is a lowercase letter, and if so, converting it to uppercase. To do this portably, use the function <B>toupper</B>:</p>

<pre>
letter = toupper(letter);
</pre>

<p><B>toupper</B> converts lowercase letters to uppercase. It leaves anything that isn't a lowercase letter unchanged. By changing to this function we've eliminated the assumption that values in the range from <B>'a'</B> to <B>'a'+25</B> all represent lowercase letters. There are character sets in which the lowercase letters are not contiguous, so we can't treat all values in that range as representing lowercase letters. We've also eliminated the assumption that we can convert lowercase letters to uppercase by subtracting 32. Different character sets might require adjustment by a different amount, and the adjustment need not be the same amount for each character.</p>

<p>The next <B>if</B> statement tests whether the input, after conversion to uppercase, represents a letter. Again, the Standard C library provides a function for performing this test:</p>

<pre>
if (isalpha(letter))
    .....
</pre>

<p><B>isalpha</B> returns a non-zero value when its argument is either an uppercase letter or a lowercase letter. In all other cases it returns <B>zero</B>. By switching to this function we've eliminated the assumption that all uppercase letters are represented by values in the range from <B>'A'</B> to <B>'A'+25</B>. Just as we saw with lowercase letters, this assumption does not have to be true.</p>

<p>The next assumption is harder to eliminate: there's no function in the standard library to convert values that represent uppercase letters into a value suitable for indexing into an array. As we saw earlier, the values of uppercase letters don't have to be close to each other, so there's no simple way to transform them into indices. So let's write something a bit complicated: we'll create an array of characters initialized to hold the uppercase letters in order, look up the value we need in that array, and return the index where we found it:</p>

<pre>
int to_index(char ch)
{
static const char *letters =
    "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
return strchr(letters, ch) - letters;
}
</pre>

<p>Now, this code might look a bit tricky, so let's go though it in more detail. <B>letters</B> is a pointer to <B>char</B>, pointing to a string consisting of the uppercase letters of the alphabet. We use the function <B>strchr</B> to find the position within <B>letters</B> where the character <B>ch</B> occurs &#151; <B>strchr</B> returns a pointer to that character. By subtracting the pointer <B>letters</B> from that pointer we get the index where that letter occurs. So, for example, if we call <B>to_index('A')</B> we'll get back <B>0</B>. If we call <B>to_index('C')</B> we'll get back <B>2</B>. This code works regardless of how the uppercase letters are actually encoded. Note, however, that this function was written with your application in mind: you should not call it with an argument that is not an uppercase letter. If you do, strchr will return <B>NULL</B>, and subtracting <B>letters </B>from <B>NULL</B> will give you a meaningless value. To make the function more robust, you can use <B>isupper</B> to check whether the argument is in range. If it is, do the lookup; if not, return <B>NULL</B>. Like this:</p>

<pre>
int to_index(char ch)
{
static char *letters =
   "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
return
   isupper(ch) ?
      strchr(letters, ch) - letters :
      -1;
}
</pre>

<p>Now that we can map an uppercase letter to an index value, your code looks like this:</p>

<pre>
start = base + 4 * to_index(letter);
</pre>

<p>In general, the way to understand portability when you're dealing with characters is to assume nothing. Treat character constants like <B>'a'</B> as magic names, not as numbers. Don't assume that the value <B>'b'</B> bears any relationship whatsoever to the value of <B>'a'</B>. Read about the functions in <B>&lt;ctype.h&gt;</B> &#151; they'll do much of what you need to do. When they don't you'll have to write some code yourself.</p>

<h4><FONT COLOR="#000080">Reference</FONT></H4>

<p><a name="1"></a>[1]  I've removed some consistency checks from Gibbs' code to shorten it. He had it right, though.</p>

<p><i>Pete Becker is Technical Project Leader for Dinkumware, Ltd. He spent eight years in the C++ group at Borland International, both as a developer and manager. He is a member of the ANSI/ISO C++ standardization commmittee. He can be reached by email at <B>petebecker@acm.org</B>.</i></p>

</BLOCKQUOTE>
</BODY>
</HTML>
