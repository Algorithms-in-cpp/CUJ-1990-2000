<HTML><HEAD>
<TITLE>August 1998/Creating Simple Persistent Objects/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2: UIOObj.h &#151; TIOObjectBase class and TIOObject class templates</A></h4>

<pre>
//---------------------------------------------------------------
#ifndef UIOObjH
#define UIOObjH
#pragma hdrstop
#include &lt;stlcomp.h&gt;
#include &lt;typeinfo.h&gt;
#include &lt;map.h&gt;
#include &lt;cstring.h&gt;
#include &lt;strstrea.h&gt;
#include &lt;fstream.h&gt;

// problem with Borland C++ and SGI templates?
// compiler error if not less&lt;string&gt; specialized!
// C++ BUILDER HAS NO SUCH PROBLEM

struct less&lt;string&gt; {
   bool operator()(const string&amp; x, const string&amp; y) const
      { return (x &lt; y); }
};

//---------------------------------------------------------------
class TIOObjectBase  {
      enum {MAX_NAME_SIZE = 70};
   public:
      // exception types
      struct exception {
         string mess;
         exception(const char * _mess): mess(_mess) {}
         virtual ~exception() {}
      };
      struct EUnknownClass : public exception {
          EUnknownClass(const char * _className):
             exception(_className) {}
      };
      struct EEof : public exception {
          EEof(const char * which=NULL):
             exception(which) {}
      };
   protected:
      void write(ostrstream &amp; mem);
      static string readClassName(strstream &amp; str)
            throw (exception*) ;
      static string readClassName(fstream&amp; fstr)
              throw (exception*, EEof*) ;
      virtual void* dataStart(void) const = 0;
      virtual size_t dataSize(void) const = 0;
      typedef  TIOObjectBase* (*pfCreate)(fstream&amp;);

      // for the input "virtual constructor" Create
      typedef map&lt;string, pfCreate, less&lt;string&gt; &gt;  CreateMap;
      static CreateMap* pCreateMap;
    public:
      virtual ~TIOObjectBase() {}

      // use to UN-Register() ALL and CLEANUP AFTER USE
      static void reset();
      virtual string name(void) const = 0;
      void write(fstream&amp; fstr);
      static TIOObjectBase* Create( fstream&amp; )
                     throw (exception*, EUnknownClass*) ;
};

//---------------------------------------------------------------
template &lt;class T&gt;
class TIOObject : public virtual TIOObjectBase {
   private:
      T Data;
      static TIOObjectBase* create(fstream&amp; )
                throw (exception*);
   protected:
      void* dataStart(void) const {return (void*)&amp;Data;}
      size_t dataSize(void) const {return sizeof Data;}
      static string Name(void){return typeid(TIOObject).name();}
      string name(void) const {return Name();}
    public:

      TIOObject(const T&amp; _data = T()):  Data(_data) {}
      // RECOGNIZE the type AND access the data :
      //    IF pIOObjectBase IS a TIOObject&lt;T&gt;* returns a T*
      //    ELSE returns 0

      static T* PtrData(TIOObjectBase* pIOObjectBase);
      static void Register(void);
};

//---------------- TEMPLATE FUNCTION DEFINITIONS ----------------
//

//---------------------------------------------------------------
template &lt;class T&gt;
TIOObjectBase* TIOObject&lt;T&gt;::create(fstream&amp; fstr)
                  throw (exception*)
{
   TIOObject* ptr = new TIOObject;
   fstr.read((char*)ptr-&gt;dataStart(), ptr-&gt;dataSize());
   if (fstr.eof())
      throw new exception("unexpected end of file");
   return ptr;
}

//---------------------------------------------------------------
// NB: although TIOObject&lt;T&gt; only has one data member, T Data
// a TIOObject* DOES NOT HAVE SAME ADDRESS AS ITS Data MEMBER!!!
// &amp;(pIOObject-&gt;Data) &lt; pIOObject-&gt;Data !!!

template &lt;class T&gt;
T* TIOObject&lt;T&gt;::PtrData(TIOObjectBase* pIOObjectBase)
{
   TIOObject * pIOObject;
   if ((pIOObject = dynamic_cast&lt;TIOObject&lt;T&gt;* &gt;(pIOObjectBase))
          != NULL )
      return &amp;(pIOObject-&gt;Data);
   else
      return NULL;
}

//---------------------------------------------------------------
template &lt;class T&gt;
void TIOObject&lt;T&gt;::Register(void) {
   if (!TIOObjectBase::pCreateMap)
      pCreateMap = new CreateMap();
   (*pCreateMap)[Name()] = create;
}


#endif

//End of File</pre>
</BODY>
</HTML>
