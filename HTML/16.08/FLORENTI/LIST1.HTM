<HTML><HEAD>
<TITLE>August 1998/Creating Simple Persistent Objects/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: dbstruct.cpp &#151; A program demonstrating use of the persistence library</A></h4>

<pre>
#include &lt;UIOObj.h&gt;  // TIOObjectBase, TIOObject&lt;T&gt;
#include &lt;cstring.h&gt;

// global variables
fstream* pfstream;  // disk file stream

// example "simple object classes"

struct X {
   int i;
   X (int _i = 0) : i(_i) {}    // is also default ctor...
};
class Y {
   public:
     double d[2];               // C arrays are OK
};
class XY: public X, public Y {
   public: XY(X _x=X(), Y _y=Y()): X(_x), Y(_y) {}
};

//---------------------------------------------------------------
// initialization
void init(char * filename)
{
   // open file, ios::binary!
   // ios::app to append new objects to existing file
    
   pfstream = new fstream(filename,
                     ios::in | ios::app | ios::binary);
   // clears registered classes, not really needed here,
   // but good habit

   TIOObjectBase::reset();

   // "Register" ALL classes that MIGHT BE in FILE INPUT

   TIOObject&lt;X&gt;::Register();
   TIOObject&lt;Y&gt;::Register();
   TIOObject&lt;XY&gt;::Register();
}

//---------------------------------------------------------------
void writeFile()        // OUTPUTS OBJECTS TO DISK FILE
{
   X x(10);                   // "detailed" way to write
   TIOObject&lt;X&gt; ioo(x);       // ctor
   ioo.write(*pfstream);      // and write. . .

   TIOObject&lt;X&gt;(X(20)).write(*pfstream); //  "all in one"
                                         //  construct and write

   Y y = { {1.2, 3.4} };
   TIOObject&lt;Y&gt;(y).write(*pfstream);

   x.i = 30;
   TIOObject&lt;X&gt;(x).write(*pfstream);

   TIOObject&lt;XY&gt; (XY(x,y)).write(*pfstream);
}

//--------------------------------------------------------------------
// OBJECT INPUT AND USEvoid useFile()
{
   // go file begin
   pfstream-&gt;rdbuf()-&gt;seekoff(0, ios::beg, ios::in);
   TIOObjectBase* pIOObjectBase;      // holds file input

   // the read-process loop
   while(true) {        // exits on end of file or exception
      try {             // Enclose input in try catch block !
          pIOObjectBase =
               TIOObjectBase::Create(*pfstream);
      }
      catch (const TIOObjectBase::EEof* )       // OK, end of file
      {
         cout &lt;&lt; "End of Data" &lt;&lt; endl;
         return;
      }
      // probably class name not registered?
      catch (const TIOObjectBase::EUnknownClass* e)
      {
         cout  &lt;&lt; "error: " &lt;&lt; e-&gt;mess.c_str() // offending name
               &lt;&lt; " is unknown object type"    // is displayed
               &lt;&lt; endl;
         return;
      }
      // *** bad news ***
      catch (const TIOObjectBase::exception* e) {
         cout &lt;&lt; "error: " &lt;&lt; e-&gt;mess.c_str() &lt;&lt; endl
              &lt;&lt; "file, line: "
              &lt;&lt; __throwFileName &lt;&lt; ", " &lt;&lt; __throwLineNumber
              &lt;&lt; endl;
         return;
      }
      // *** worse news ***
      catch (...)   {
         cout &lt;&lt; "error: unknown exception thrown at " &lt;&lt; endl
              &lt;&lt; __throwFileName &lt;&lt; ", " &lt;&lt; __throwLineNumber
              &lt;&lt; endl;
         return;
      }

      // pIOObjectBase has valid object, find type and process
      // T* TIOObject&lt;T&gt;::PtrData(TIOObjectBase*) returns:
      //     0 if pIOObjectBase is not a TIOObject&lt;T&gt;*
      //     a T* if OK

      if ( X* p = TIOObject&lt;X&gt;::PtrData(pIOObjectBase) ) {
         cout &lt;&lt; "read an X. i = " &lt;&lt; p-&gt;i &lt;&lt; endl;
      }
      if ( Y* p = TIOObject&lt;Y&gt;::PtrData(pIOObjectBase) ) {
         cout &lt;&lt; "read a Y. d[0], d[1] = "
              &lt;&lt; p-&gt;d[0] &lt;&lt;",  "&lt;&lt; p-&gt;d[1] &lt;&lt; endl;
      }
      if ( XY* p = TIOObject &lt;XY&gt;::PtrData(pIOObjectBase) ) {
         cout &lt;&lt; "read a " &lt;&lt; pIOObjectBase-&gt;name() 
              &lt;&lt; " d[0], d[1] = " &lt;&lt; p-&gt;d[0] &lt;&lt;",  "
              &lt;&lt; p-&gt;d[1] &lt;&lt; endl;
      }
      delete pIOObjectBase;
   } // end while(true);
}   // end useFile()

//---------------------------------------------------------------
//                         MAIN
//---------------------------------------------------------------
// usage dbstruct filename  r|w|rw
// r for read, w write or rw for write and read
int main (int argc, char* argv[])
{
   char c[1];
   if (argc &lt; 3) {
      cout &lt;&lt; "usage filename r|w|rw" &lt;&lt; endl;
      cin.getline(c, 2);
      return 0;
   }
   else
      init(argv[1]);      // initialize
   if ( (strcmp(argv[2], "w")==0) || (strcmp(argv[2], "rw")==0) )
      writeFile();        // write objects to disk file
   if ( (strcmp(argv[2], "r")==0) || (strcmp(argv[2], "rw") == 0))
      useFile();          // read and use objects in file 

   // CLOSING PROGRAM
   delete pfstream;
   TIOObjectBase::reset(); // don't forget, memory leak...
   cout &lt;&lt; "end of program, press newline ";
   cin.getline(c, 2);
   return 1;
}

//End of File</pre>
</BODY>
</HTML>
