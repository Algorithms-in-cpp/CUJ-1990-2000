


<HTML><HEAD>

<TITLE>June 1998/Standard C/C++/Listing 1</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4>
<A name="HEADING1">Listing 1: Inserting time information</A></h4>


<pre>
#include &lt;iostream&gt;
#include &lt;locale&gt;
#include &lt;string.h&gt;
#include &lt;time.h&gt;
using namespace std;
        // FORMATTED TIME TYPES
class Time_fmt {
public:
    Time_fmt(time_t t = time(0), const char *fmt = "%c")
        : value(*localtime(&amp;t)), format(fmt) {}
    Time_fmt(tm v, const char *fmt = "%c")
        : value(v), format(fmt) {}
    const tm *valptr() const
        {return (&amp;value); }
    const char *fmt_first() const
        {return (format); }
    const char *fmt_last() const
        {return (format + strlen(format)); }
private:
    tm value;
    const char *format;
    };
class Time_dayname : public Time_fmt {
public:
    Time_dayname(Time_fmt x)
        : Time_fmt(*x.valptr(), "%A") {}
    };
        // Time INSERTER
template&lt;class _E, class _Tr&gt; inline
    basic_ostream&lt;_E, _Tr&gt;&amp; operator&lt;&lt;(
        basic_ostream&lt;_E, _Tr&gt;&amp; _O, Time_fmt _Y)
    {typedef ostreambuf_iterator&lt;_E, _Tr&gt; _Iter;
    typedef time_put&lt;_E, _Iter&gt; _Tput;
    ios_base::iostate _St = ios_base::goodbit;
    const typename basic_ostream&lt;_E, _Tr&gt;::sentry _Ok(_O);
    if (_Ok)
        {try
            {const _Tput&amp; _Fac =
                _USEFAC(_O.getloc(), _Tput);
            if (_Fac.put(_Iter(_O.rdbuf()),
                _O, _O.fill(), _Y.valptr(),
                _Y.fmt_first(), _Y.fmt_last()).failed())
                _St |= ios_base::badbit; }
        catch (...)
            {_O.setstate(ios_base::badbit, true); }}
    _O.setstate(_St);
    return (_O); }
int main()
    {Time_fmt today;
    cout &lt;&lt; today
        &lt;&lt; " which is on " &lt;&lt; (Time_dayname)today
        &lt;&lt; endl;
    return (0); }
/* End of File */
</pre>
</body></html>
