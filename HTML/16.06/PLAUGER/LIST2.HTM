


<HTML><HEAD>

<TITLE>June 1998/Standard C/C++/Listing 2</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4>
<A name="HEADING1">Listing 2: Template class time_put and friends</A></h4>


<pre>
        // TEMPLATE CLASS time_put
template&lt;class _E,
    class _OI = ostreambuf_iterator&lt;_E, char_traits&lt;_E&gt; &gt; &gt;
    class time_put : public locale::facet {
public:
    typedef _E char_type;
    typedef _OI iter_type;
    _OI put(_OI _F, ios_base&amp; _X, _E _Fill, const tm *_Tp,
        const _E *_Ff, const _E *_Lf) const
        {const _E _Pct = _WIDEN(_E, '%');
        for (; _Ff != _Lf; ++_Ff)
            if (*_Ff != _Pct)
                *_F++ = *_Ff;
            else if (++_Ff == _Lf)
                {*_F++ = _Pct;
                break; }
            else
                {char _C = _NARROW(_E, *_Ff);
                char _Q = '\0';
                if (_C != 'E' &amp;&amp; _C != 'O' &amp;&amp; _C != 'Q'
                    &amp;&amp; _C != '#')
                    ;
                else if (++_Ff == _Lf)
                    {*_F++ = _Pct, *_F++ = _C;
                    break; }
                else
                    _Q = _C, _C = _NARROW(_E, *_Ff);
                _F = do_put(_F, _X, _Fill, _Tp, _C, _Q); }
        return (_F); }
    _OI put(_OI _F, ios_base&amp; _X, _E _Fill, const tm *_Tp,
        char _C, char _M = 0) const
        {return (do_put(_F, _X, _Fill, _Tp, _C, _M)); }
    static locale::id id;
    explicit time_put(size_t _R = 0);
protected:
    virtual ~time_put()
        {}
    virtual _OI do_put(_OI _F, ios_base&amp; _X, _E, const tm *_Tp,
        char _C, char _M = 0) const
        {char _Fmt[5] = "!%x\0";
        size_t _I, _N;
        string _Str;
        if (_M == (_E)0)
            _Fmt[2] = _C;
        else
            _Fmt[2] = _M, _Fmt[3] = _C;
        for (_N = 16; ; _N *= 2)
            {_Str.append(_N, '\0');
            if (0 &lt; (_I = _Strftime(&amp;*_Str.begin(), _Str.size(),
                _Fmt, _Tp, _Tnames._Getptr())))
                break; }
        for (string::const_iterator _S = _Str.begin();
            0 &lt; --_I; ++_F)
            *_F = _WIDEN(_E, *++_S);
        return (_F); }
private:
    _Locinfo::_Timevec _Tnames;
    };
template&lt;class _E, class _OI&gt;
    locale::id time_put&lt;_E, _OI&gt;::id;
        // TEMPLATE CLASS time_put_byname
template&lt;class _E,
    class _OI = ostreambuf_iterator&lt;_E, char_traits&lt;_E&gt; &gt; &gt;
    class time_put_byname : public time_put&lt;_E, _OI&gt; {
public:
    explicit time_put_byname(const char *_S, size_t _R = 0)
        : time_put&lt;_E, _OI&gt;(_Locinfo(_S), _R) {}
protected:
    virtual ~time_put_byname()
        {}
    };
/* End of File */
</pre>
</body></html>
