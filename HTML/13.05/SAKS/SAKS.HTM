

<HTML>
<HEAD>

<TITLE>May 1995/Stepping Up To C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmay.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Stepping Up To C++<A name="00A4_0067"><A name="00A4_0067"></font></h2><P>
<h3 align="center"><A name="00A4_0000"><A name="00A4_0000">Even More Minor Enhancements</h3><P>
<h3 align="center"><font color="#800000">Dan Saks</font></h3><hr><blockquote><P>
<P><i><A name="00A4_0000"><A name="00A4_0000">Dan Saks is the president of Saks &amp; Associates, which offers consulting and training in C++ and C. He is secretary of the ANSI and ISO C++ committees. Dan is coauthor of C++ Programming Guidelines, and codeveloper of the Plum Hall Validation Suite for C++ (both with Thomas Plum). You can reach him at 393 Leander Dr., Springfield OH, 45504-4906, by phone at (513)324-3601, or electronically at dsaks@wittenberg.edu.</i></P><P>
For the past several months, I've been describing the ways that C++ as specified by the draft standard (Fall, 1994) differs from C++ as specified in the ARM<a href="#1">[1]</a>. These differences include four <I>major extensions</I>:<P>
<UL><li>templates</li>
<li>exception handling</li>
<li>run-time type information (including <I>dynamic_cast</I>)</li>
<li>namespaces</li></UL>
which I summarized in "Stepping Up to C++: C++ at CD Registration," <I>CUJ</I>, January, 1995. These extensions also include numerous <I>minor enhancements</I>:<P>
<UL><li>new keywords and digraphs for C++ as alternate ISO646- compliant spellings for existing tokens</li>
<li>operator overloading on enumerations</li>
<li><I>operator new[]</I> and <I>operator delete[]</I></li>
<li>relaxed restrictions on the return type of virtual functions</li>
<li><I>wchar_t</I> as a keyword representing a distinct type</li>
<li>a built-in Boolean type</li>
<li>declarations in conditional expressions</li>
<li>new cast notation</li>
<li>qualified names in elaborated-type-specifiers</li>
<li>expressions of the form <I>a.::B::c</I> and <I>p-&gt;::B::c</I></li>
<li>conversion from <I>T</I> ** to <I>const T </I><I>*</I><I>const</I><I> *</I></li>
<li>mutable class members</li></UL>
these have been the subject of my past three columns ("Minor Enhancements to C++ as of CD Registration," "More Minor Enhancements to C++ as of CD Registration," and "Mutable Class Members," <I>CUJ</I>, February through April, 1995.)<P>
This month, I describe the remaining minor enhancements as of CD registration:<P>
<UL><li>forward-declared nested classes</li>
<li>layout rules for POD-structs and POD-unions</li>
<li>compile-time member constants</li>
<li>default return value (of 0) from <I>main</I></li>
<li>empty initializer-clauses</li></UL>
Plus, as an added bonus, I explain two more minor enhancements added after CD registration:<P>
<UL><li>non-converting constructors</li>
<li><I>typename</I> declarations</li></UL>
<h4><FONT COLOR="#000080"><A name="00A4_0068">Forward-Declared Nested Classes<A name="00A4_0068"></FONT></h4></P>
In my original list of minor enhancements (January, 1995), I inadvertantly left this one out. The omission is ironic because I probably use this enhancement more than any other.<P>
A nested class is simply a class that's defined as a member of another class (its <I>enclosing</I> class). Nested classes are handy for reducing the number of global entities in a program, and with that the potential for global name conflicts.<P>
For example, classes for common data structures, such as linked lists and trees, usually employ auxiliary classes to represent the node types in the structure. In most cases, these node types should be nested classes. <A href="list1.htm">Listing 1</a>
sketches the definition for a typical tree class with its node type as a private nested class. (Although the definition uses the keyword <I>struct,</I> in C++ parlance, it's a class.)<P>
Outside its enclosing class, you must refer to a nested class by its fully-qualified name. For example, outside class <I>tree</I> in <A href="list1.htm">Listing 1</a>,
 you must refer to <I>tree</I>'s node as <I>tree::node</I>. Nested classes are subject to access control. Thus, since <I>tree::node</I> in <A href="list1.htm">Listing 1</a>
is <I>private</I>, only friends of class tree can access <I>tree::node</I>.<P>
Nested classes add clarity to programs by making the relationships between classes more explicit. On the other hand, a nested class definition often disrupts the flow of its enclosing class, thus reducing readability. In many cases, you can avoid the disruption by using forward-declarations for nested classes. That is, you merely <I>declare</I> a nested class inside its enclosing class, and then <I>define</I> it outside the enclosing class.<P>
<A href="list2.htm">Listing 2</a>
depicts the tree class definition rewritten with the node as a forward-declared nested class. The declaration<P>
<pre>struct node;</pre>
declares <I>node</I> as a type member of class <I>tree</I>. Since this declaration is not a definition (it's absent a brace-enclosed body), <I>tree::node</I> is, for the moment, an incompletely-defined type. The type it not complete until a corresponding definition of the form:<P>
<pre>struct tree::node
   {
   ...
   };</pre>
appears sometime later. The definition must refer to the nested class by its fully-qualified name, in this case <I>tree::node</I>.<P>
You cannot declare <I>objects</I> of an incomplete type, because the compiler lacks the information it needs to allocate storage for such objects. However, you can declare pointers or references to an incomplete type. The definition for class <I>tree</I> in <A href="list2.htm">Listing 2</a>
uses <I>node</I> only to declare a member, <I>root</I>, of type <I>node</I> *. Therefore, <I>node</I> need not be complete inside class <I>tree</I>. Had class <I>tree</I> declared a member of type <I>node</I>, as in:<P>
<pre>class tree
   {
   ...
private:
   struct node;
   node n; // error
   };</pre>
then that member declaration would be an error.<P>
<h4><FONT COLOR="#000080"><A name="00A4_0069">Layout Rules for PODs<A name="00A4_0069"></FONT></h4></P>
The C Standard has rules that define explicit layout requirements for structures and unions, ostensibly to support certain low-level programming styles. In particular, it says:<P>
<UL><li>Within a structure object, the non-bit-field members and the units in which bitfields reside have addresses that increase in the order in which they are declared. A pointer to a structure object, suitably converted, points to its initial member (or if that member is a bit-field, then to the unit in which it resides), and vice versa.</li>
<li>A pointer to a union object, suitably converted, points to each of its members (or if a member is a bit-field, then to the unit in which it resides), and vice versa.</li>
<li>Two structures share a <I>common initial sequence</I> if corresponding members have compatible types (and for bit-fields, the same width) for a sequence of one or more initial members. If a union contains several structures that share a common initial sequence, and if the union object currently contains one of these structures, it is permitted to inspect the common initial part of any of them.</li></UL>
As described in the ARM, C++ had less stringent layout rules. In C++, a class is a struct and vice versa, and a class object might have additional hidden data members. In particular, a class object may have a <I>vptr</I> &#151; a pointer to a table of virtual function addresses. Many implementations place vptrs at the beginning of objects, so class objects cannot meet the layout requirements of a C structure. In a C++ object, non-static data members with no intervening access specifiers (the keywords <I>public</I><I>, </I><I>private</I><I>, </I>and<I> </I><I>protected</I>) have addresses that increase in the order of declaration. However, the order of members separated by an access specifier is implementation dependent.<P>
Thus, according to the ARM, the first member of a struct object might not be at the same address as the struct object itself. The C++ standards committees acknowledged that this poses a compatibility problem for programmers migrating their C code to C++. However, the committees agreed they couldn't extend these layout guarantees to all class objects without hamstringing C++ implementations.<P>
The committees solved the problem by extending the C layout guarantees only to <I>POD-structs</I> and <I>POD-unions</I>. POD stands for "plain ol' data" and more or less means "something you could write in C." More precisely, the C++ draft defines PODs in terms of aggregates:<P>
An <I>aggregate</I> is an array, or an object of a class with no user-declared constructors, no private or protected members, no base classes, and no virtual functions.<P>
The draft defines POD-struct and POD-union as:<P>
A POD-struct is an aggregate structure that contains neither references nor pointers to members. Similarly, a POD-union is an aggregate union that contains neither references nor pointers to members.<P>
Thus, the layout rules in the current draft C++ Standard are nearly identical to the rules in the C Standard, at least when applied to any object you could also declare in C.<P>
<h4><FONT COLOR="#000080"><A name="00A4_006A">Compile-time Member Constants<A name="00A4_006A"></FONT></h4></P>
Various constructs in C and C++ include expressions that must yield integral constant values. For example, in an array declaration such as<P>
<pre>T a[MAX];</pre>
the dimension <I>MAX</I> must be an integral constant expression. An array dimension can be an elaborate expression with several operands and operators, such as<P>
<pre>T a[(M + 1) * (N + 1)];</pre>
However, every operand in such an expression must be constant so that a compiler can determine the expression's value at compile time.<P>
Both C and C++ require integral constant expressions in a few other contexts, namely, bit-field size specifiers, case statement labels, and enumerator definitions. C programmers typically define symbols representing constant values as macros, using definitions such as<P>
<pre>#define MAX 99</pre>
Unfortunately, macros such as <I>MAX</I> do not obey the normal scope rules of the C language proper. An enumeration constant such as<P>
<pre>enum { MAX = 99 };</pre>
has the advantage over a macro that it does obey the scope rules. That is, an enumeration constant declared at block scope (inside a function) is truly local to that function, whereas a macro declared inside a function is essentially global.<P>
The disadvantage of an enumeration constant is that it can have only integral type. Thus, for example,<P>
<pre>enum { PI = 3.1415926 };</pre>
is an error because it attempts to define enumeration constant <I>PI</I> with a value of type <I>double</I>. In C, your only choice for defining a floating or double compile-time constant is as a macro.<P>
C++ also lets programmers define symbolic constants as const-qualified objects, such as<P>
<pre>const int MAX = 99;</pre>
In C, <I>MAX</I> is an object which exists at run time. Even though its value is known during compilation, C does not consider <I>MAX</I> to be a compile-time constant. But C++ does. A C++ compiler need not generate run-time storage for <I>MAX</I> unless the program computes the address of or binds a reference to <I>MAX</I>.<P>
In C++<P>
<pre>const double PI = 3.1415926;</pre>
is also a compile-time constant. Since it is not integral, you cannot use <I>PI</I> as an integral constant expression (in an array dimension, case label, etc.) unless you cast <I>PI</I> to an integral type.<P>
Unfortunately, C++ as defined in the ARM has no syntax for defining const-qualified objects at class scope as compile-time constants. For example, if a class X has an array member, as in<P>
<pre>class X
   {
   ...
private:
   T a[MAX];
   };</pre>
you might want to define <I>MAX</I> inside the scope of <I>X</I> to avoid a potential name conflict with some <I>MAX</I> elsewhere in the program. Unfortunately, defining <I>MAX</I> as a member constant, as in<P>
<pre>class X
   {
public:
   const int MAX = 99; // error
   ...
private:
   T a[MAX];
   };</pre>
is a syntax error. The ARM does not allow initializers in data member declarations, even for const members. You can initialize <I>MAX</I> only with a member initializer in a constructor, such as<P>
<pre>X::X(int m) : MAX(m)
   {
   ...
   }</pre>
In this case, <I>MAX</I> is not a compile-time constant, but rather a const data member that occupies run-time storage in each X object and requires run-time initialization.<P>
C++ programmers generally use enumerations to define compile-time constants in class scope, as in:<P>
<pre>class X
   {
public:
   enum { MAX = 99 };
   ...
private:
   T a[MAX];
   };</pre>
This works adequately for many common cases like the one above, but it breaks down at times. For example, enumeration constants appear to work fine in<P>
<pre>class X
   {
public:
   enum { LO = 'a', HI = 'z' };
   ...
private:
   char table[LO - HI + 1];
   };</pre>
until you try to write <I>LO</I> (or <I>HI</I>) to <I>cout</I> using<P>
<pre>cout &lt;&lt; X::LO;</pre>
This displays <I>X::LO</I> as an <I>int</I>, not as a <I>char</I>, because enumerations promote to <I>int</I> in expressions.<P>
Alternatively, you can declare <I>LO</I> and <I>HI</I> as static const members, as in:<P>
<pre>class X
   {
public:
   static const char LO;
   static const char HI;
   void f();
   ...
};

const char X::LO = 'a';
const char X::HI = 'z';</pre>
so that <I>X::LO</I> and <I>X::HI</I> are compile-time constants of type <I>char</I>. This too works well in many situations. For example, with these definitions for <I>LO</I> and <I>HI</I>, an output expression such as<P>
<pre>cout &lt;&lt; X::LO;</pre>
writes <I>X::LO</I> as a <I>char</I> (not an <I>int</I>). You can even use <I>LO</I> and <I>HI</I><I> </I>in integral constants expressions, as in<P>
<pre>void X::f()
   {
   char table[HI - LO + 1];
   ...
   }</pre>
Unfortunately, the definitions for <I>LO</I> and <I>HI</I> cannot appear until after the end of the class definition &#151; too late to use them as compile-time constants within the class. This means you cannot write:<P>
<pre>class X
   {
public:
   static const char LO;
   static const char HI;
   void f();
   ...
private:
   char table[HI - LO + 1];  // error
   };</pre>
At the time the compiler encounters the declaration for table, <I>LO</I><I> </I>and <I>HI</I> are <I>declared</I>, but not yet <I>defined</I>.<P>
To correct this problem, the committees extended C++ to allow initialization of static const data members inside class scope. For example:<P>
<pre>struct X
   {
public:
   static const char LO = 'a';
   static const char HI = 'z';
   void f();
   ...
private:
   char table[HI - LO + 1];
   };</pre>
defines <I>LO</I> and <I>HI</I> as compile-time constants of type <I>char</I>.<P>
A static const member initialized in class scope must still be defined outside the class. For example,<P>
<pre>const char X::LO;   // still need definition after class
const char X::HI;   // still need definition after class</pre>
provide appropriate definitions for <I>LO</I> and <I>HI</I>. Note that these definitions at file scope may <I>not</I> have initializers, even if they are identical to the corresponding ones at class scope.<P>
Even though static const data members with initializers define compile-time constants, such members have external linkage (as do all other static data members) and linkers must allocate space for them. A program can take the address of or bind a reference to static const data members.<P>
<h4><FONT COLOR="#000080"><A name="00A4_006B">Default Return Value from <B><I>main</I><A name="00A4_006B"></B></FONT></h4></P>
Some, possibly many, C++ programmers are apparently annoyed when C++ compilers generate warnings about programs such as<P>
<pre>#include &lt;iostream.h&gt;

main()
   {
   cout &lt;&lt; "hello, world\n";
   }</pre>
Of course, the problem with the program is that <I>main</I> has a default return type of <I>int</I>, but no return value. Programmers who write<P>
<pre>#include &lt;iostream.h&gt;
#include &lt;stdlib.h&gt;
main()
   {
   cout &lt;&lt; "hello, world\n";
   exit(0);
   }</pre>
may find this particularly annoying, because they expect the call to <I>exit(0)</I> to be sufficient. It usually isn't. Although both C and C++ define<P>
<pre>return rv;</pre>
within <I>main</I> as equivalent to calling<P>
<pre>exit(rv);</pre>
many C++ compilers nonetheless issue a warning when the <I>return</I><I> </I>is missing.<P>
The committees decided to silence these warnings by adding the following sentence to the draft standard:<P>
If control reaches the end of main without encountering a return statement, the effect is that of executing<P>
<pre>     return 0;</pre>
This rule applies only to <I>main</I>. All other functions with non-void return types must return something explicitly.<P>
<h4><FONT COLOR="#000080"><A name="00A4_006C">Empty Initializer Clauses<A name="00A4_006C"></FONT></h4></P>
The C++ grammar in the ARM disallows empty initializer-clauses. That is, according to the ARM,<P>
<pre>const T x = { };</pre>
is a syntax error because there's nothing between the braces.<P>
Some committee members argued that programmers sometimes create empty classes (classes without members) as stubs. Although you can initialize an object of empty type <I>T</I> using a declaration such as<P>
<pre>const T x = T();</pre>
this declaration might incur a run-time cost. On the other hand, C++ does initialization with braces before run time, so programmers need empty initializer clauses to explicitly initialize objects of empty class types without undue run-time costs.<P>
This minor enhancement seemed harmless enough, so the committee agreed to augment the grammar rule for initializer-clause from:<P>
<pre><I>initializer-clause:</I>
   <I>assignment-expression</I>
   <I>{ initializer-list,</I><I>opt </I><I>}</I></pre>
to<P>
<pre><I>initializer-clause:</I>
   <I>assignment-expression</I>
   <I>{ initializer-list ,</I><I>opt </I><I>}</I>
   <I>{ }</I></pre>
This change implies that<P>
<pre>int a[5] = { };     // now ok</pre>
initializes every element to 0.<P>
<h4><FONT COLOR="#000080"><A name="00A4_006D">But Wait! There's More<A name="00A4_006D"></FONT></h4></P>
CD registration was only one of several major milestones on the way to a formal C++ Standard. Although the rate of change has slowed considerably, the committee did resolve a couple of problems after CD registration by adding new keywords to C++. These keywords are <I>explicit</I> and <I>typename</I>.<P>
Normally, a constructor that accepts one argument is also a user-defined conversion. For example, if class <I>complex</I> has a constructor <I>complex(double)</I>, then any function with a formal parameter of type <I>complex</I>, such as<P>
<pre>void f(complex);</pre>
can be called with an argument of type <I>double</I>. That is, a call such as<P>
<pre>f(1.0);</pre>
passes <I>1.0</I> to the <I>complex(double)</I> constructor to create a <I>complex</I> object, and then passes that <I>complex</I> to <I>f</I>. Similarly, a function with a formal parameter of type <I>const complex &amp;</I>, such as<P>
<pre>void g(const complex &amp;)</pre>
can also be called with an argument of type <I>double</I> by similar magic using the <I>complex(double)</I> constructor.<P>
For classes like <I>complex</I> (and many others), the implicit conversions provided by single-argument constructors are what you want. Sometimes they are not. For example, a class <I>vector</I> might provide a constructor <I>vector</I>(<I>int</I>) so that users can declare vectors of a specified size, such as:<P>
<pre>vector v(10);     // ok</pre>
However, users might be surprised and dismayed to find that, given a function<P>
<pre>void f(const vector &amp;);</pre>
they can accidentally call<P>
<pre>f(10);            // surprise!</pre>
The committee added the keyword <I>explicit</I> so that class designers can turn off implicit conversions for individual constructors.<P>
The keyword <I>explicit</I> is a function-specifier, like <I>inline</I> or <I>virtual</I>. It may only appear in the declaration of a constructor within a class declaration, as in:<P>
<pre>class vector
   {
public:
   explicit vector(int); // ok
   ...
   };</pre>
A constructor declared <I>explicit</I> is called a <I>non-converting</I> <I>constructor</I>. As with the keyword <I>virtual</I>, you cannot specify <I>explicit</I> in function definitions appearing outside class definitions.<P>
The committee added the keyword <I>typename</I> to correct a very subtle problem in the rules for resolving names used in templates. In short, the problem is that when parsing a template definition, a compiler can't always tell which names designate types and which do not. The template author can use the keyword <I>typename</I> to give the compiler a little more help.<P>
For example, given<P>
<pre>template &lt;class T&gt;
class X
   {
   void f()
      {
      T::A *a;
      ...
      }
   };</pre>
a compiler can recognize that <I>T::A</I> designates a member of (as yet unseen) type <I>T</I>, but it can't recognize that <I>T::A</I> is a type. Consequently, it will interpret<P>
<pre>T::A *a;</pre>
as a multiply expression. Prefixing <I>T::A</I> with the keyword <I>typename</I>, as in<P>
<pre>typename T::A *a;</pre>
indicates that <I>T::A</I> designates a type, so a compiler can recognize the line as a declaration.<P>
<h4>References</FONT></h4></P>
<a name="1"></a>1]     Margaret A. Ellis and Bjarne Stroustrup, <I>The Annotated</I> C++ <I>Reference Manual</I>. Addison-Wesley, 1990.<P>

<h4><a href="../../../source/1995/may95/saks.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
