<HTML><HEAD>
<TITLE>May 1995/Literate Programming in C and C++ using CWEB/Listing 5</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 5<I> Using CWeb with C++</A></I></h4>
<pre>-------------------------------------------------------------
A C++ String Class......................................  1
 Representing an <B>Xstring</B>................................  4
 Construction and Destruction...........................  5
 Assignment............................................. 12
 Miscellaneous Operations............................... 14
References.............................................. 18
Index................................................... 19
-------------------------------------------------------------
Copyright (C) 1994 by Lee Wittenberg.
Portions copyright (C) 1991 by AT&amp;T Bell Telephone
Laboratories, Inc.
-------------------------------------------------------------
<B>1. A C++ String Class.</B> To demonstrate the use of CWEB for C++
programming, we adapt the <B>string</B> class described by Stroustrup
[1, pages 248-251]. Explanations in <I>slanted type</I> (including
inline comments, when possible) are direct quotes from the
original. We make a few minor changes along the way, but on the
whole, we stick to Stroustrup's design.

<B>2.</B> We put the interface part of our class in the header file
xstring.h. We call our class "<B>Xstring</B>" rather than "<B>string</B>" to
avoid confusion with the original and other (more useful) string
classes. We restrict ourselves to a lowercase file name to
maintain portability among operating systems with case-insensitive
file names.
 xstring.h 2  
<B>#ifndef</B> XSTRING_H
<B>#define</B> XSTRING_H
     //prevent multiple inclusions
   <B>class Xstring</B> {
      Private <B>Xstring</B> members 4 
   <B>public</B>:
      Public <B>Xstring</B> members 5 
   };
<B>#endif</B>
This code is cited in section 3.
This code is used in section 3.

<B>3.</B> We implement the class members in a single "unnamed
chunk" that will be tangled to xstring.c (or xstring.cc or
xstring.cpp, depending on your compiler's preference). We
include the contents of &lt; xstring. h 2 ) directly, rather than relying
on <B>#include</B>, because we can.
    Header files 8 
    xstring.h 2
    <B>Xstring</B> members and friends 6 

-------------------------------------------------------------
<B>4. Representing an Xstring.</B> The internal representation of an
<B>Xstring</B> is simple. <I>It counts the references to a string to</I>
<I>minimize copying and uses standard C++ character strings as</I>
<I>constants.</I>
 Private<B> Xstring</B> members 4  
   struct srep {
      <B>char</B> <I>*s</I>; // <I>pointer to data</I>
      <B>int</B> <I>n</I>;// <I>reference count</I>
      <B>srep()</B> { <I>n</I>  1; }
   };
   <B>srep</B> <I>*p</I>;
See also section 16.
This code is used in section 2.

-------------------------------------------------------------
<B>5. Construction and Destruction.</B> <I>The constructors and the</I>
<I>destructor are trivial</I>. We use the null string as a default
constructor argument rather than a null pointer to protect against possible 
string. h function anomalies.
 Public <B>Xstring</B> members 5  
   <B>Xstring(const char</B> <I>*s</I>  "");
      // <B>Xstring</B> <I>x</I>  "abc"
   <B>Xstring(const Xstring</B> &amp;);
      // <B>Xstring</B> <I>x</I>  <B>Xstring</B> ...
   <B>~Xstring</B>();
See also sections 12, 14, and 15.
This code is used in section 2.

<B>6. </B>An<B> Xstring</B> constructed from a standard string needs space to
hold the characters:
 <B>Xstring</B> members and friends 6  
   <B>Xstring::Xstring(const char </B><I>*s</I><B>)</B>
   {
      <I>p</I>  <B>new srep</B>;
       Allocate space for the string and put a copy of <I>s </I>there 7 ;
   }
See also sections 9, 10, 13, and 17.
This code is used in section 3.

<B>7. </B>There is always the possibility that a client will try something
like "<B>Xstring</B> <I>x</I>  L." We substitute the null string whenever we are given a null pointer.
 Allocate space for the string and put a copy of <I>s</I> there 7  
   <B>if</B> (<I>s</I>  L) <I>s</I>  "";
   <I>p</I>(R) <I>s</I>  <B>new char</B> [<I>strlen </I>(<I>s</I>) + 1 ];
   <I>strcpy </I>(<I>p</I>(R) <I>s</I>,<I> s</I>);
This code is used in sections 6 and 13.
-------------------------------------------------------------
<I>[Sections 8 through 17 omitted -- mb]</I>
-------------------------------------------------------------
<B>18. References.</B>
[1] Bjarne Stroustrup. <I>The</I> C++ <I>Programming Language</I>.
   Addison-Wesley, second edition, 1991.

-------------------------------------------------------------
<B>19. Index.</B>
<I>dummy</I>: 15, <U>16</U>, 17.              <I>strcat</I>: 14.
<I>i</I>: <U>15</U>.                          <I>strcpy</I>: 7, 8.
<I>n</I>: 4.                           <I>strlen</I>: 7, 14, 15.
<B>operator:</B> <U>12</U>, <U>13</U>, <U>14</U>, <U>15</U>.       <I>x</I>: <U>5</U>, <U>7</U>, <U>9</U>, <U>13</U>.
<I>p</I>: <U>4</U>.                           <B>Xstring</B>: <U>2</U>, <U>6</U>, <U>9</U>, <U>10</U>, <U>13</U>.
<I>s</I>: <U>4</U>, <U>5</U>, <U>6</U>, <U>13</U>.                 XSTRING_H: <U>2</U>.
<B>srep:</B> _<U>4</U>, 6, 13.
-------------------------------------------------------------
 Allocate space for the string and put a copy of <I>s</I> there 7 
      Used in sections 6 and 13.
 Decrement reference count, and remove <I>p</I> if necessary 11 
      Used in sections 10 and 13.
 Header files 8  Used in section 3.
 Private <B>Xstring</B> members 4, 16  Used in section 2.
 Public <B>Xstring </B>members 5, 12, 14, 15  Used in section 2.
 xstring.h 2  Cited in section 3. Used in section 3.
 <B>Xstring</B> members and friends 6, 9, 10, 13, 17  Used in section 3.</pre>

</BODY>
</HTML>
