<HTML><HEAD>
<TITLE>May 1995/Literate Programming in C and C++ using CWEB/Listing 4</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 4 <I>A more elaborate example of Literate Programming</A></I></h4>
<pre>-------------------------------------------------------------
The Problem.............................................. 1
The Solution............................................. 2
   Processing input lines............................... 6
   Command line options................................ 17
   Error messages...................................... 21
References.............................................. 24
Index................................................... 25
-------------------------------------------------------------
Copyright (C) 1994 by Lee Wittenberg.
-------------------------------------------------------------
<B>1. The Problem.</B> Rather than make up a problem, we'll
attempt to solve an exercise from <I>The C Programming Language</I>
[1] using CWEB rather than plain C. In particular, we've chosen
the following problem from page 34 of the second edition:*

      <B>Exercise 1-22.</B> Write a program to "fold" long
      input lines into two or more shorter lines after the
      last non-blank character that occurs before the
      <I>n</I>-th column of input. Make sure your program
      does something intelligent with very long lines,
      and if there are no blank or tabs before the
      specified column.

This seems to imply that <I>n</I> = 80 requires output lines to contain
at most 79 columns. It seems a bit more logical to let the user
specify the maximum number of columns in the output, so that
<I>n</I> = 80 will give us output lines of  80 characters. Since the
problems are isomorphic (a solution to either is an "off by
one" error for the other), we choose to solve the latter.
-------------------------------------------------------------
* A similar problem appears on page 31 of the first edition.
-------------------------------------------------------------
<B>2. The Solution.</B> The structure of our program is fairly
standard, and doesn't need a lot of explanation. After processing
any command line options, we copy input lines to the standard
output, folding them when necessary.
   Since we process all the options before we process any
files, different options cannot be used for separate files.
    Header files 3 
    Global variables 5 
    Functions 7 ;
   <I>main</I> (<B>int</B> <I>argc</I>, <B>char</B> *<I>argv</I>[])
   {
       Scan command line options 19 ;
       Allocate space for the input buffer 4 ;
       Copy the input to the standard output,
         folding lines as necessary 6 ;
      <B>return</B> EXIT_SUCCESS;
   }

3.      Header files 3 
#<B>include</B> &lt;stdlib.h&gt;
      /* for EXIT_SUCCESS */
See also sections 8 and 14.
This code is used in section 2.

<B>4.</B> Since we don't want to place any unnecessary restrictions on
line length, or on allowable values of <I>n</I>, we allocate space for
the input buffer dynamically. We grab one character more
than we need for a line, just in case a line contains exactly
<I>fold_column</I> characters or we have a space in exactly the perfect
spot (plus a byte for the '\<I>0</I>', of course).
   Since this is the only memory allocation we do, the malloc
shouldn't fail, but you never can tell.
 Allocate space for the input buffer 4  
   <I>buffer</I>  (<B>char </B>*) <I>malloc</I> (<I>fold_column </I>+ 2);
   <B>if</B> (<I>buffer</I>  L) {
       Announce that we ran out of heap space 22 ;
      <I>exit</I>(EXIT_FAILURE);
   }
This code is used in section 2.

<B>5.</B> Unless the user specifies otherwise, we assume that folding
will occur after the 80th column.
<B>#define</B> DEFAULT_FOLD 80U
 Global variables 5  
   <B>char</B> *<I>buffer</I>;
   <B>size_t</B> <I>fold_column</I>  DEFAULT_FOLD;
See also section 18.
This code is used in section 2.

<B>6. Processing input lines.</B> We assume that once we're ready to
deal with input lines, the contents of <I>argv</I> have been
"normalized" -- that all arguments that do not represent filenames have been
replaced with null pointers. This will make our job a bit easier.
   We also assume that the string "-" used as a filename refers
to the standard input.
 Copy the input to the standard output, folding lines as
      necessary 6  
   <B>if</B> ( No file names were specified 17 )
      <I>fold_file </I>("-")
   <B>else</B> {
      <B>int</B> <I>i</I>;
      <B>for </B>(i  1; <I>i</I> &lt; <I>argc; i</I>++) {
         <B>if</B> (<I>argv</I>[<I>i</I>]  L)
            <I>fold_file</I> (<I>argv</I>[<I>i</I>]);
      }
   }
This code is used in section 2.

<B>7.</B> The actual line-folding is done by the function <I>fold_file</I>,
which takes the name of a file to be folded as its only argument.
The filename "-" is taken to mean "use the standard input."
    Functions 7  
   <B>void</B> <I>fold_file</I> (<B>const char</B> *<I>filename</I>)
   {
      <B>FILE</B> *<I>infile</I>;
       Local variables for <I>fold_file</I> 10 ;
      <B>if</B> (<I>strcmp (filename</I>, "-"  0)
         <I>infile</I>  <I>stdin</I>;
      else {
         <I>infile</I>  <I>fopen</I> (<I>filename</I>, "r" );
         <B>if</B> (<I>infile</I>  L) {
              Warn the user that we couldn't open <I>filename</I> 21 ;
         <B>return</B>;
         }
      }
       Copy <I>infile</I> to <I>stdout</I>, folding lines as necessary 9 ;
      <B>if</B> (<I>infile</I>  <I>stdin</I>)
         <I>fclose</I> (<I>infile</I>);
   }
This code is used in section 2.

<B>8.</B> &lt; Header files 3 &gt; +
<B>#include</B> &lt;stdio.h&gt;
<B>#include</B> &lt;string.h&gt;

<B>9.</B> Whenever we fold an input line, we leave the portion after the
fold in <I>buffer</I>. We use <I>left_overs</I> to let us know how much of
<I>buffer</I> has already been used, and consequently, how much space
is available for reading the rest of the line. The extra 2 characters specified in
"<I>fold_column - left_overs</I> + 2" are for the '\n' and '\0'.
 Copy <I>infile</I> to <I>stdout</I>, folding lines as necessary 9  
   <B>while</B> (<I>fgets</I> (<I>buffer + left_overs</I>,
                 <I>fold_column - left_overs + 2, infile</I>)L)
      {
       Fold input line in buffer, if necessary 11 ;
      }
   <B>if</B> (left_overs  0)         /* incomplete last line */
      fprintf (stdout, "%.*s", (<B>int</B>) left_overs, buffer);
This code is used in section 7.
-------------------------------------------------------------
<I>[sections 10 through 20 omitted -- mb]</I>
-------------------------------------------------------------
<B>21. Error messages.</B> In a literate program, it is often helpful to
the reader if all of the error handling code is described in the
same place. This also helps the programmer make sure that the
style of the messages is consistent throughout the program.
 Warn the user that we couldn't open <I>filename</I> 21  
  <I>fprintf(stderr,</I>
     "I couldn't open the file \"%s\"\n.",filename);
This code is used in section 7.

<B>22.</B>   Announce that we ran out of heap space 22  
  <I>fprintf (stderr,</I>
     "I couldn't allocate needed memory. Sorry.\n");
This code is used in section 4.

<B>23.</B>   Tell user about unknown option in <I>argv</I>[<I>i</I>] 23  
  <I>fprintf</I>(<I>stderr</I>, "I don't know the '%s'
         option; I'll ignore it. \n", <I>argv</I>[<I>i</I>]);

This code is used in section 20.

<B>24. References.</B>
[1] Brian W. Kernighan and Dennis M. Ritchie. <I>The C</I>
   <I>Programming Language</I>. Prentice-Hall, second edition, 1988.

<B>25. Index</B>
"-" as a filename: 6,7, 19.           <I>infile:</I> <U>7</U>, 9.
<I>argc:</I> <U>2</U>, 6, 17, 19.                   <I>is_option:</I> <U>19</U>.
<I>argv:</I> <U>2</U>, 6, 18, 19, 20, 23.           <I>isdigit:</I> 20.
argv normalization: 6, 19.            <I>isspace:</I> 13, 15, 16.
<I>buffer:</I> 4, <U>5</U>, 9, 11, 13, 15, 16.      <I>left_overs:</I> 9, <U>10</U>, 11, 16.
DEFAULT_FOLD: <U>5</U>.                      <I>main:</I> <U>2</U>.
<I>exit:</I> 4.                              <I>malloc:</I> 4.
EXIT_FAILURE: 4.                      <I>opt_count</I>: 17, <U>18</U>, 19.
EXIT_SUCCESS: 2, 3.                   paranoid error checks: 4.
<I>fclose:</I> 7.                            portability problems: 15.
<I>fgets:</I> 9.                             possible improvements: 16, 20.
<I>filename:</I> <U>7</U>, 21.                      <I>ptr:</I> <U>12</U>, 13, 15, 16.
<I>fold_column:</I> 4, <U>5</U>, 9, 11, 13,         <I>stderr:</I> 21, 22, 23.
      15, 16, 20.                    <I>stdin:</I> 7.
<I>fold_file:</I> 6, <U>7</U>.                      <I>stdout:</I> 9, 11, 16.
<I>fopen:</I> 7.                             <I>strcmp:</I> 7.
<I>fprintf:</I> 9, 16, 21, 22, 23.           <I>strcpy:</I> 16.
<I>fputs:</I> 11                             <I>strlen:</I> 11, 16.
<I>i</I>: <U>6</U>, <U>19</U>.                             <I>strtoul:</I> 20.
incomplete specifications: 15, 16.
-------------------------------------------------------------
 Allocate space for the input buffer 4  Used in section 2.
 Announce that we ran out of heap space 22  Used in section 4.
 Copy the input to the standard output, folding lines
      as necessary 6  Used in section 2.
 Copy <I>infile</I> to <I>stdout</I>, folding lines as necessary 9 
      Used in section 7.
 Deal with specification flaw 15  Used in section 13.
 Determine an appropriate folding point, and fold the line 12 
      Used in section 11.
 Fold input line in <I>buffer</I>, if necessary 11  Used in section 9.
 Fold <I>buffer</I> at the place specified by <I>ptr</I> 16  Used in section 12.
 Functions 7  Used in section 2.
 Global variables 5, 18  Used in section 2.
 Header files 3, 8, 14  Used in section 2.
 Local variables for <I>fold_file</I> 10  Used in section 7.
 No file names were specified 17  Used in section 6.
 Point <I>ptr</I> at the appropriate place in <I>buffer</I> for the fold 13 
      Used in section 12.
 Process the option in <I>argv</I>[<I>i</I>] 20  Used in section 19.
 Scan command line options 19  Used in section 2.
 Tell user about unknown option in <I>argv</I>[<I>i</I>] 23  Used in section 20.
 Warn the user that we couldn't open <I>filename</I> 21  Used in section 7.
</pre>
</BODY>
</HTML>
