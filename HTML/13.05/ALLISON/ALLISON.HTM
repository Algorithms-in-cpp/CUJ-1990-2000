

<HTML>
<HEAD>

<TITLE>May 1995/Code Capsules</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmay.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Code Capsules<A name="00A2_0065"><A name="00A2_0065"></font></h2><P>
<h3 align="center"><A name="00A2_0000"><A name="00A2_0000">Data Abstraction</h3><P>
<h3 align="center"><font color="#800000">Chuck Allison</font></h3><hr><blockquote><P>
<P><i><A name="00A2_0000"><A name="00A2_0000">Chuck Allison is a regular columnist with CUJ and a Senior Software Engineer in the Information and Communication Systems Department of the Church of Jesus Christ of Latter Day Saints in Salt Lake City. He has a B.S. and M.S. in mathematics, has been programming since 1975, and has been teaching and developing in C since 1984. His current interest is object-oriented technology and education. He is a member of X3J16, the ANSI C++ Standards Committee. Chuck can be reached on the Internet at 72640.1507@compuserve.com.</i></P><P>
You may be tired of hearing it, but let me say it one last time: you can view C++ in three ways: 1) as a better C, 2) as a language that supports data abstraction, and 3) as a vehicle for object-oriented programming. In last month's article I explored the "better C" features of C++. This month I'll show how it supports data abstraction, or, in other words, how it helps you create new data types.<P>
<h4><FONT COLOR="#000080"><A name="00A2_0066">Abstraction<A name="00A2_0066"></FONT></h4></P>
Unlike a machine, the human mind can handle only a very limited amount of complexity. Life is inherently complex, and so are software systems that model reality. To master a complex system, it is necessary to focus on only the few things that matter most in a given context, and ignore the rest. This process, called <I>abstraction</I>, enables system designers to solve complex problems in an organized, manageable way. Grady Booch defines an abstraction as follows:<P>
"An abstraction denotes the essential characteristics of an object that distinguish it from all other kinds of objects and thus provide crisply-defined conceptual boundaries, relative to the perspective of the viewer." <a href="#1">[1]</a><P>
Abstraction often manifests itself in software through <I>user-defined data types</I>, new classes of objects composed of built-in or other user-defined types. This concept is not new, of course, but languages that support it well, such as Ada, C++, CLOS, and Smalltalk, have only recently seen widespread use.<P>
If you've been programming in C for any length of time, you've probably used the <I>struct</I> mechanism. You've also had to provide functions to process those structures. Whether you knew it or not, you were creating a user-defined type. Chances are, for example, you've needed to handle dates in a program. <A href="list1.htm">Listing 1</a>
defines a <I>struct Date</I> and two functions for processing dates, one to format a date as <I>Month Day, Year</I>, and one to compare dates. (See <A href="list2.htm">Listing 2</a>
for the functions' implementation and <A href="list3.htm">Listing 3</a>
for a test program.)<P>
To use this abstract data type, you only need to know the protocol for its two functions, which constitute its <I>interface</I>. You don't need to know how the functions were implemented, or even the structure layout. A well-defined abstraction enables concentration on the outside view while ignoring implementation details. This barrier between interface and implementation is called <I>encapsulation</I>. There is a hole in type <I>Date's</I> encapsulation barrier, of course, because it's possible to bypass the interface and directly manipulate one of the structure members, as in<P>
<pre>   dp-&gt;month = 7;</pre>
That hole can be closed up, since the interface itself doesn't need to know anything about a <I>Date</I>, it just needs a pointer to it. In <A href="list4.htm">Listing 4</a>
I define <I>Date</I> as an <I>incomplete type</I> &#151; i.e., I just state that it exists and nothing more. A client program sees only <I>date2.h</I>, and therefore knows nothing about a <I>Date's</I> layout or implementation. I complete the type in the implementation in <A href="list5.htm">Listing 5</a>
(the test program is in <A href="list6.htm">Listing 6</a>)
. This extra measure of protection costs something, however. Programs using <I>Date</I> must now call explicit create and destroy functions, and must access all Date <I>objects</I> through pointers only.<P>
C++ improves support for user-defined data types in at least two ways: 1) by allowing definition of the interface functions within the scope of the class, and 2) by barring client access to implementation details via a language keyword, as opposed to the incomplete type trick. The <I>Date</I> class in <A href="list7.htm">Listing 7</a>
and <A href="list8.htm">Listing 8</a>
differs from that in <A href="list1.htm">Listing 1</a>
and <A href="list2.htm">Listing 2</a>
in the following ways:<P>
1)     The data members are private, so client programs can't access them directly (only the member functions can).<P>
2)     The interface functions are public member functions, so they can only apply to <I>Date</I> objects, and the function names do not pollute the global namespace. The <I>date</I>_ prefix is no longer necessary, since the operations belong to the class. Note that <I>format</I> and <I>compare</I> are const member functions, meaning that they promise not to alter a <I>Date's</I> data members.<P>
3)     A constructor replaces C's structure initialization syntax.<P>
4)     The text representations for the month names now appear in the scope of <I>struct Date</I> (being static members).<P>
The sample program in <A href="list9.htm">Listing 9</a>
shows that member functions are invoked with the usual dot operator for structure members.<P>
If it bothers you that a client programmer can still see the layout of your data members &#151; albeit without direct access &#151; you can hide the data member declarations in a new incomplete type, but this time with absolutely no impact to the interface (see <A href="list10.htm">Listing 10</a>
and <A href="list11.htm">Listing 11</a>)
. To demonstrate this, I define the <I>DateRep</I> helper class with a constructor, and for efficiency and simplicity I give the <I>Date</I> class direct access to the its data members by making it a <I>friend</I> to <I>DateRep</I>. The <I>Date</I> constructor now needs to create its associated <I>DateRep</I> object on the heap, so a destructor is needed to free the heap memory. Only the header file has to change in the test program in <A href="list9.htm">Listing 9</a>.
 With a well-defined abstraction, a change in implementation will not inflict change on client code.<P>
<h4><FONT COLOR="#000080"><A name="00A2_0067">Operator Overloading<A name="00A2_0067"></FONT></h4></P>
You can make user-defined types nearly as convenient to use as built-in types by adding operator functions to your class definition. In <A href="list12.htm">Listing 12</a>, <a href="list13.htm">Listing 13</a>, and 
<A href="list14.htm">Listing 14</a>
I've added the six relational operations and a stream inserter for easy output. For efficiency I've also defined the smaller functions inline within the header file. Note also the declaration of <I>ostream</I> as an incomplete type in the header file. Since an <I>ostream</I> object appears there only by reference, <I>date5.h</I> does not have to be dependent on the <I>iostream.h</I> header, which is one of the largest in the Standard C++ library. The implementation of <I>operator&lt;&lt;</I> shows that defining a stream inserter usually just reduces to inserting an object's members into the stream. I simulate the new C++ Boolean data type, <I>bool</I>, with the definitions in <A href="list15.htm">Listing 15</a>.
<P>
As the definition of the <I>Person</I> class in <A href="list16.htm">Listing 16</a>
shows, you can compose a new type from other user-defined types, as well as built-in types. Each <I>Person</I> has a birth date, which is a <I>Date</I> object wholly contained within a <I>Person</I> object. The <I>Person</I> constructor passes the <I>Date</I> information on to its <I>Date</I> subobject via an <I>initialization list</I>. The initialization list follows the colon in the function header, as defined in the implementation file (<A href="list17.htm">Listing 17</a>)
. Notice how <I>Person::operator&lt;&lt;</I> implicitly uses <I>Date::operator&lt;&lt;</I>. Class <I>Person</I> also uses the new C++ standard string class for its text data members. (Borland C++, the compiler I used for most of these examples, defines the string class in the header <I>(cstring.h&gt;).</I><P>
<h4><FONT COLOR="#000080"><A name="00A2_0068">Concrete Data Types<A name="00A2_0068"></FONT></h4></P>
C++ support for data abstraction, and operator overloading in particular, can make user-defined data types as convenient to use as built-in types. What are typical operations performed on built-in types? Programs can initialize them, assign them to other objects of compatible type, and pass them to or receive them back from functions. In C++, you can perform these same actions with your own types, as long as either you or the compiler provide certain special member functions. The presence of these member functions constitutes a <I>concrete data type</I>, one that behaves intelligently wherever a built-in type does. These functions include the following:<P>
copy constructor<br>
default constructor (and others as needed)<br>
assignment operator<br>
destructor<P>
Whenever an object is created, a constructor is called to initialize it. The initializer arguments must match a constructor's parameters in number and type. <I>The default constructor</I> is the one that takes no arguments. Another special constructor, called the <I>copy constructor</I>, initializes a new object from an existing object of the same type, and has the signature <I>T(const T&amp;)</I>, or <I>T(T&amp;)</I>, for some type <I>T</I>. This constructor executes whenever you pass or return an object by value, or explicitly initialize a new object from an old one, as with <I>y</I> in the following example:<P>
<pre>   T x;
   ...
   T y = x;     // same as "T y(x)"</pre>
The assignment operator executes whenever you assign the value of an object to an existing one, and has the signature<P>
<pre>   T&amp; T::operator=(const T&amp;)</pre>
Note the assignment statement in <A href="list18.htm">Listing 18</a>
(<I>p3</I> = <I>p2;</I>). I did not explicitly define <I>Person::operator=()</I>, but it seems to have worked anyway. This is because the compiler generated it for me. The absence of <I>operator=()</I> in the class definition caused the compiler to generate one that does <I>memberwise assignment</I>, like this:<P>
<pre>   Person&amp; Person::operator=(const Person&amp; p)
   {
      last = p.last;
      first = p.first;
      birth = p.birth;
      ssn = p.ssn;
      return *this;
   }</pre>
Similarly, if you do not supply a copy constructor, the compiler generates this one:<P>
<pre>   Person::Person(const Person&amp; p)
     : last(p.last), first(p.first), birth(p.birth),
       ssn(p.ssn)
   {}</pre>
which, as you can see, calls the copy constructor for each member object.<P>
If you define any constructor other than a copy constructor, then the compiler will not generate a default constructor for you. If you don't define any constructors (other than copy constructors) the compiler will generate a default constructor which will invoke the corresponding default constructor for all user-defined member objects. A compiler-generated destructor calls the destructors associated with any user-defined member objects.<P>
The compiler-generated assignment operator and copy constructor for <I>Person</I> worked because the standard string class provides its own version of these two functions, and because the <I>Data</I> class data members are built-in, so its compiler-generated constructors and operators suffice. In general, whenever the state of an object is contained entirely within the object itself, you do not need to override the compiler-generated member functions.<P>
The <I>Person</I> class in <A href="list19.htm">Listing 19</a>
and <A href="list20.htm">Listing 20</a>
stores its text data on the heap. A compiler-generated assignment operator or copy constructor will only copy <I>pointers</I> to the receiving object, when what it really needs to do is allocate space on the heap for the duplicated text. When I execute the test program on this class, Metaware's C++ gives the following output on Windows NT:<P>
<pre>p1 == {Richardson,Alice,[December 16, 1947], 123-45-6789}
p2 == {Doe,John,[Bad month 0, 0],}
p1 does not equal p2
p3 does equal p2
***Free(0X4C105C):X POINTER already free
ABORTING. . .</pre>
At program exit, the compiler calls the <I>Person</I> destructor to destroy <I>p3</I>, which frees the text memory on the heap. Since p2 points to the same memory, the destructor attempts to delete it a second time when destroying <I>p2</I>, which is an error. <A href="list21.htm">Listing 21</a>
and <A href="list22.htm">Listing 22</a>
fix the problem by adding the missing member functions. The assignment operator uses the clever-but-lazy trick of explicitly invoking the destructor, followed by a call to placement <I>new</I>, which in this case executes the copy constructor on the current object. (For more information on placement <I>new</I>, see the Code Capsule "Dynamic Memory Management, Part II," <I>CUJ</I>, November 1994.)<P>
<h4><FONT COLOR="#000080"><A name="00A2_0069">Generic Types<A name="00A2_0069"></FONT></h4></P>
In programming, one of the most useful abstractions is the kind that allows independence from data type. An example of such an abstraction is a <I>container</I>. Containers are objects that hold other objects. A set is a container that provides operations to insert, remove, and test elements for membership. <A href="list23.htm">Listing 23</a>
- <A href="list25.htm">Listing 25</a>
illustrate a class that implements a set type for integers. It uses a fixed-size array as the underlying data structure (although bit sets are a more efficient implementation for sets of ordinal values). The implementation in <A href="list24.htm">Listing 24</a>
uses the <I>find</I> algorithm, a new addition to the Standard C++ library, which expects pointers to the beginning and to one past the end of the array as its first two parameters. If you were to define<I> SetOfLong</I>, or <I>SetOfString</I>, or a set for any other type supporting the equality operator, you would find that the only thing that changed would be the type of objects in the set. If you think about it, a set really shouldn't have to care about the type of objects it holds.<P>
C++'s template mechanism allows you to define a generic set type that essentially ignores the type of the objects it contains, by specifying that type as a parameter (see <A href="list26.htm">Listing 26</a>)
. For efficiency, I use the dynamically-sized <I>vector</I> template class from the Standard C++ library in the implementation. Dynamic sizing is crucial when using a set of large objects, since a fixed-size array of the same would result in much wasted space. As you can see in set2.h in <A href="list26.htm">Listing 26</a>,
 the<I> find</I> algorithm also works on vectors. This is because its <I>begin</I> and <I>end</I> member functions return an <I>iterator</I>, which is a generalization of a pointer. The <I>erase</I> member function expects an iterator argument, which <I>find</I> returns. The program in <A href="list27.htm">Listing 27</a>
uses the <I>Set</I> template to hold <I>Person</I> objects.<P>
<h4><FONT COLOR="#000080"><A name="00A2_006A">Summary<A name="00A2_006A"></FONT></h4></P>
Complexity is an unavoidable fact of life. Support for user-defined data types enables the programmer to model and manage a complex system in software. C++ supports data abstraction via classes, member access control, constructors and destructors, operator functions, and templates. If you provide the suitable member functions, you can define abstractions that have the convenience of built-in data types.<P>
<h4><FONT COLOR="#000080"><A name="00A2_006B">Computers In Kansas<A name="00A2_006B"></FONT></h4></P>
During the last couple of years I've enjoyed wearing the official T-shirt of <I>C/C</I>++ <I>Users Journal</I>. On the back it says, "Yes, there really are computers in Kansas." Not only are there computers, but there is a group of talented and pleasant individuals who comprise R&amp;D Publications. In January they sponsored "C/C++ Solutions '95," a practical, "how-to" seminar in Kansas City. (Missouri. All right, it's not in Kansas, but it's close.) We had ten of the best C/C++ developers and teachers you will find anywhere, including Scott Meyers, author of "Effective C++," and our own Dan Saks. The balance of material and the emphasis on C as well as C++ was very well received. Sorry if you missed it. Stay tuned &#151; we'll do it again. You won't get this type of intensive training at any other seminar.<P>
I've also enjoyed contributing as a columnist for this journal since October 1992. This has been a valuable outlet for me to share some of my learnings as a C/C++ developer and contributor to the C++ standard. Due to personal time constraints, I reluctantly announce that this is my last column. I've appreciated your feedback and support, and will miss you and the folks at R&amp;D. Goodbye, farewell, and keep on hacking.<P>
<h4>Reference</FONT></h4></P>
<a name="1"></a>[1]     Grady Booch, <I>Object-oriented Analysis and Design with Applications</I>, Second Edition (Benjamin-Cummings, 1994).<P>

<h4><a href="../../../source/1995/may95/allison.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
