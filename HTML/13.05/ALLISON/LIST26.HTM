<HTML><HEAD>
<TITLE>May 1995/Code Capsules/Listing 26</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 26 <I>A </I>Set<I> template class using a vector data structure</A></I></h4>
<pre><I>// set2.h</I>

#include &lt;iostream.h&gt;
#include &lt;vector.h&gt;
#include &lt;algo.h&gt;
#include &lt;iterator.h&gt;

template&lt;class T&gt;
class Set
{
   friend ostream &amp; operator&lt;&lt;(ostream &amp;os, const Set&lt;T&gt; &amp;s)
   {
      s.print(os);
      return os;
   }

public:
   bool contains(const T &amp;) const;
   void insert(const T &amp;);
   void remove(const T &amp;);
   void print(ostream &amp;) const;

private:
   vector&lt;T&gt; elems;
};

template&lt;class T&gt;
bool Set&lt;T&gt;::contains(const T &amp; x) const
{
   return find(elems.begin(),elems.end(),x) != elems.end();
}

template&lt;class T&gt;
void Set&lt;T&gt;::insert(const T &amp; x)
{
   if (!contains(x))
      elems.push_back(x);   // append
}

template&lt;class T&gt;
void Set&lt;T&gt;::remove(const T &amp; x)
{
   elems.erase(find(elems.begin(),elems.end(),x));
}

template&lt;class T&gt;
void Set&lt;T&gt;::print(ostream &amp; os) const
{
   os &lt;&lt; '{';
   copy(elems.begin(),elems.end(),ostream_iterator&lt;T&gt;(os,"\n"));
   os &lt;&lt; '}';
}

/* End of File */
</pre>
</BODY>
</HTML>
