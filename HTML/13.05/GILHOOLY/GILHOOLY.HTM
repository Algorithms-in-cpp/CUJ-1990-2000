

<HTML>
<HEAD>

<TITLE>May 1995/WinJES &#151; A Windows Sockets Example</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmay.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Network Programming</FONT></H2>

<hr><h2 align="center"><font color="#800000">WinJES &#151; A Windows Sockets Example<A name="0098_005B"><A name="0098_005B"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0098_0000"><A name="0098_0000">Kevin Gilhooly</font></h3><hr><blockquote><P>
<P><i><A name="0098_0000"><A name="0098_0000">Kevin Gilhooly is with RIS Information Services in Dallas, working on a variety of PC-based client server projects. He can be reached at kjg@dfw.net.</i></P><P>
<h4><FONT COLOR="#000080"><A name="0098_005C">Introduction<A name="0098_005C"></FONT></h4></P>
Windows Sockets is an open network programming interface for Microsoft Windows. Adapted from Berkely Sockets (which works with UNIX systems), Windows Sockets enables two programs to establish a bidirectional connection. The programs may be on the same or different computers.<P>
In this article I present WinJES, a small Microsoft Windows program that lets a user issue a command on a remote Windows machine. WinJES uses the Windows Sockets interface for communications between PCs across a network. The program is both a client and a server, and one copy can exchange messages either with itself or with a copy on a different machine.<P>
I wrote the original WinJES program using Microsoft's Visual C++ 1.1 and NetManage's Chameleon SDK under Windows for Workgroups 3.11. The program uses the Chameleon TCP/IP stack. I've also compiled it under the Windows NT 3.5 Workstation's native TCP/IP, with Visual C++ version 2.0. Any Windows-Sockets-compliant developer's kit and Windows C compiler should be able to compile the source code.<P>
<h4><FONT COLOR="#000080"><A name="0098_005D">Establishing a Protocol<A name="0098_005D"></FONT></h4></P>
To communicate with each other, two programs must use a protocol. Windows Sockets programs use either the Transmission Control Protocol (TCP) or User Datagram Protocol (UDP) (see sidebar, <a href="sidebar1.htm">"Understanding Sockets and Protocols."</a>). WinJES uses UDP. Unlike TCP, two machines communicating via UDP do not establish a "connection." Rather, they send messages back and forth without acknowledgements. When WinJES starts, it listens for requests from other machines. A user on a remote machine can then submit commands to be executed on the local machine. In many environments, a program can simply wait for input from a remote partner. In UNIX, or on a dedicated DOS machine, a standard UDP server program with no error checking would look like <A href="list1.htm">Listing 1</a>.
<P>
For various reasons, a Windows 3.x server cannot be quite so simple. For one thing, because Windows 3.x is non-preemptive, programs must yield the processor to Windows after a reasonable time, or no other processes will be able to run. Also, Windows is based on a messaging model. When any event occurs, Windows sends a message to a window procedure (code tied to a particular window); the code must process the message as quickly as possible and return to a passive state. Therefore, the above code must be modified for Windows.<P>
WinJES does the real work inside a message loop. Before entering a message loop, the program must register a window class and create a window. The window class ties the window to a <I>window procedure</I> (the code that processes its messages.) Since WinJES uses the Windows Sockets functions, it must initialize Windows Sockets at the start of the program (via function <I>WSAStartup</I>), and terminate Windows Sockets when the program exits (via function <I>WSACleanup</I>). <A href="list2.htm">Listing 2</a>
shows the main routine for WinJES, which creates the main window, and enters the message loop.<P>
<h4><FONT COLOR="#000080"><A name="0098_005E">Processing Windows Messages<A name="0098_005E"></FONT></h4></P>
In Windows, a window procedure processes Windows messages dispatched from the message loop. To create a window procedure for WinJES, I've added processing for specific messages that I care about. All other messages go to <I>DefWindowProc</I>, the default Windows procedure. The window procedure is shown in <A href="list3.htm">Listing 3</a>.
 A description of the critical messages processed follows:<P>
In the <I>WM_CREATE</I> message:<P>
open a <I>socket()</I><P>
<I>bind()</I> it to an address<P>
<I>WSAAsyncSelect()</I> defines a message and events to filter<P>
In the <I>WM_CLOSE</I> or <I>WM_DESTROY</I> message:<P>
close the socket<P>
In the defined socket message:<P>
switch on <I>wParam</I> (a Windows message parameter) to determine the socket<P>
switch on the low word of <I>lParam</I> (another Windows message parameter) to determine the event<P>
This is a standard model for Windows Sockets servers. <I>WSAAsyncSelect</I> links a list of events on a specific socket to a window and establishes the message to send to that window when one of the events occurs. When the message is posted, the window procedure can look at the low word of <I>lParam</I> to determine the specific event that occurred. The specific socket ID is passed as the <I>wParam</I>. This scheme allows a single message routine to service multiple requests on multiple sockets.<P>
The window procedure for the WinJES program is very simplistic. The user interface is a single-line display, filled from a global variable in response to the <I>WM_PAINT</I> message. I've added the menu item to submit commands to other WinJES servers to the Windows system menu, so the WinJES applicaton will not need a menu of its own.<P>
From a communications standpoint, the most important message is <I>WM_SOCKET</I>, a user-defined message which is defined in the file <I>WINJES.H</I> (on this month's code disk). All private messages must be defined above <I>WM_USER</I> (a constant in <I>WINDOWS.H</I>). The <I>WM_SOCKET</I> message is referenced in <I>WSAAsyncSelect</I>, so the Windows Sockets Dynamic Link Library (DLL) posts it when a socket event occurs.<P>
Because of the Intel architecture, a Windows 3.1 program must deal with a two-part memory address: segment and offset. Handling the address correctly is critical when passing parameters to code outside the program. All the parameters passed from a Windows program to the Windows Sockets DLL routines must either be <I>FAR</I> or cast as a <I>FAR</I> when passed. Copying memory also requires care. In a UNIX or Windows NT program, the usual way to copy from one address to another is <I>memcpy</I>. In Windows 3.1 or Workgroups, programs must use _<I>fmemcpy</I>, which is an address-independent version. It will correctly handle far pointers.<P>
<h4><FONT COLOR="#000080"><A name="0098_005F">WinJES Server Processing<A name="0098_005F"></FONT></h4></P>
The server portion of WinJES waits for a message to arrive, then receives and parses it. The server extracts the command parameter from the structure, and passes it (untouched) to the WinExec API for execution. WinExec takes two parameters, a command string and a visibility option. WinJES runs all programs as <I>SW_NORMAL</I>, which means they are visible on the screen and receive focus when they start. The command string may be a Windows or DOS program name, plus any parameters the program needs.<P>
<h4><FONT COLOR="#000080"><A name="0098_0060">Preparing a socket for input<A name="0098_0060"></FONT></h4></P>
All socket programs begin by allocating a socket for use. A server continues by binding the socket to a specific port, and monitoring the port for messages. This process occurs in response to a Windows <I>WM_CREATE</I> message. (The code is shown under the <I>WM_CREATE</I> case of the window procedure's outermost <I>switch</I> statement.) A Windows Sockets program listens by asking the Windows Sockets DLL to post a message whenever a defined event occurs. WinJES asks the DLL to post a <I>WM_SOCKET</I> message whenever the socket is ready to read. "Ready to read" means that the program can perform a receive on the socket and the function will not hang. In this UDP program, "ready to read" is the only event a server cares about.<P>
<h4><FONT COLOR="#000080"><A name="0098_0061">Receiving a message<A name="0098_0061"></FONT></h4></P>
When the socket receives data, the Windows Sockets DLL posts a <I>WM_SOCKET</I> message, as requested in the <I>WSAAsyncSelect</I> call. (Refer to the <I>WM_SOCKET</I> case clause in the window procedure.) The server can look at the <I>long</I> parameter's low word to determine the event type. In WinJES, the only critical event is <I>FD_READ</I>, which occurs when a request is ready for processing. The parameter will match one of the events defined in the <I>WSAAsyncSelect</I> call. Only those requested events will trigger the message to the window.<P>
<h4><FONT COLOR="#000080"><A name="0098_0062">WinJES Client Processing<A name="0098_0062"></FONT></h4></P>
Sending a UDP message is very simple: grab a socket, point it at the remote machine's address and the program's port, and toss it out on the network. A UDP client will not know if the message arrives unless the server program acknowledges it. In WinJES, a UDP message is sent in response to a <I>WM_COMMAND</I> message generated by a menu selection. (Refer to case <I>IDM_SEND</I> under case <I>WM_COMMAND</I> in the main window procedure.) This code fragment will work for many command-line clients, such as a UNIX machine, by moving it and recompiling it almost as is (removing Windows-specific calls). The UNIX WinJES client would receive the host name as a command-line parameter and use <I>gets</I> to read the command to issue, and then runs the (nearly) identical socket code for communications.<P>
<h4><FONT COLOR="#000080"><A name="0098_0063">Conclusion<A name="0098_0063"></FONT></h4></P>
The Windows Sockets interface is a powerful addition to basic Windows programming. It extends Windows programs to provide communications over an internet easily, while providing a reasonable porting path for TCP/IP code from other platforms.<P>

<h4><a href="../../../source/1995/may95/gilhooly.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
