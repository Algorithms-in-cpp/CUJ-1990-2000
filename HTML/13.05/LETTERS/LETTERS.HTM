

<HTML>
<HEAD>

<TITLE>May 1995/We Have Mail</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmay.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Departments</FONT></H2>

<hr><h2 align="center"><font color="#800000">We Have Mail<A name="00AA_006A"><A name="00AA_006A"></font></h2><hr>
<BLOCKQUOTE>
<A name="00AA_0000"><A name="00AA_0000">Editor,<P>
In the "We Have Mail" section of the November 1994 issue of <I>CUJ</I> Jim Pazarena asks for an article on command-line parsing. Like Jim I get the impression that most magazines, hardly able to digest and report on all the hype and goodies OOP, C++, standardizing committees, and other developing areas have to offer, forget about the ever-existing bunch of newcomers to the subject of their original outset, in this case the good old plain C language. Let me try to fill in the gap with a description of the command-line processing module we use in our software-development department. As in most cases it was written out of a need to standardize the way programmers each on their own "invented" and parsed command-line arguments.<P>
First we had to agree to a standard "look and feel" for our command-line arguments. Nothing new was invented here. We only had to define the allowable subset of all possible styles. Command-line arguments should be position independent, that is a program shouldn't force the order in which arguments should be given at the command line. So all arguments have to be identified by a name. As we develop our programs for both VMS and UNIX platforms, the allowable argument prefixes were a slash (/) and a dash (&#151;). Though most UNIX command-line arguments are made up of a single character, we chose the more descriptive style of VMS. (Also on UNIX you'll see various commands that need more descriptive arguments, like <I>find . -name args. c -print</I><I>)</I>.<P>
To prevent the user from having to type superfluous characters, the programmer may help the user by allowing shortcuts. If a viable argument would be /<I>verbose</I>, the programmer may indicate that his program understands /<I>ver</I> as well. You do so by defining the argument as /<I>ver*bose</I>, which means that the characters after the asterisk (*) are optional.<P>
Arguments that need an additional variable, e.g. filenames and dates, are separated from the argument by the equals (=) character, as in /<I>input:text.lis</I>.<P>
The UNIX convention of concatenating multiple one-character switches as in tar <I>-xvf</I> <I>filename</I> wasn't adopted, mainly because of the possible conflicts with other argument names. On most serious BBS's various flavors of getopt.c can be found which handle these type of command-line arguments. Lastly, the argument parsing should be case-insensitive.<P>
Along with the code for parsing arguments [<B>available on the monthly code disk &#151; pjp</B>], I supply a typical program that expects two mandatory arguments, /<I>r*eal</I> and /<I>t*ext</I>, and three additional arguments /<I>i*nteger</I>, /<I>date</I>, and /<I>ver*bose</I>. The program starts with a call to either <I>ArgInit</I> or <I>ArgInitPrgm</I>. The arguments to <I>main</I><I>, </I><I>argc</I>, and <I>argv</I> are passed as well as the number of mandatory arguments. <I>ArgInitPrgm</I> also expects a pointer to a <I>FILE_t</I> structure in which the various parts of <I>argv[0]</I>, the fully qualified program name, are stored for any further processing (like determining from which directory the program originates). The <I>ArgInit</I> functions do some preliminary checking and set up some internal variables and structures.<P>
The command-line arguments are then handled by calls to ArgGet, passing the name of the argument, the type of the argument's variable, and an optional buffer in which the value of the argument's variable is to be stored. If the argument is of type <I>ARG_DATE</I>, the third parameter should be a format string specifying the expected date format of the argument's variable. These formats and the accompanying date functions are part of another library which might be the subject of an upcoming article in which all discussions about dates, week-of-day algorithms, weeknumber algorithms (sorry PJP, yours is terribly wrong, try 01-01-1993 which should yield 53!), zellers-congruence, and the like can be wrapped up.<P>
If anything goes wrong, the <I>ArgInit</I> and <I>ArgGet</I> functions set an internal error variable to the value indicating the type of error and return this value as the result of the call. This internal variable <I>giArgerror</I> can be used by <I>ArgErr</I> which either returns the string value of the error or the command line argument in which the error occurred, whichever is appropriate.<P>
Finally, <I>ArgCheck</I> may be called to check whether the user has specified misspelled optional or otherwise unknown arguments.<P>
Argument types and errors, the <I>FILE_t</I> structure, and the function prototypes are specified in args.h, which should be included in all programs that make use of this command-line argument processing.<P>
The definition and layout of command-line arguments remains a matter of personal taste, and therefore the subject of many endless and zealous discussions (by the way, which editor is really the best?). The set of functions described here at least enabled us to standardize both the style to which command-line arguments of our programs should conform, which makes for a much appreciated common user interface, and the way they are handled or parsed in our programs. Please don't hesitate to adapt them to your personal preferences.<P>
Ton J. Teuns<br>
Project Manager, Software Development<br>
AKZO Nobel Information Service<br>
The Netherlands<P>
<I>I agree that uniformity of style is more important than the specific decisions made, particularly for a group of cooperating programmers. </I>&#151;<I> pjp</I><P>
Dear Mr. Plauger:<P>
I just read Rex Jaeschke's article (<I>CUJ</I>, November 1994) on the C9X Charter, and it hasn't been long since Bob Jervis' article (<I>CUJ</I>, October 1994) proposing C with Classes. Naturally, I have an opinion.<P>
First, on adding classes to C, I don't care for the idea. To me, the language described looks more like C++ with limitations. The removal of constructors and overloading eliminates a lot of functionality. How does one implement a complex or matrix class without overloading? If there is no constructor, then initialization has to be separated from instantiation, making declaration of constants and preinitialization of globals virtually impossible. Also, the addition of the <I>inherit</I> keyword is a capricious and counter-productive change. I believe that it is very important to "minimize incompatibilities between C and C++" (see Additional Principle #9 in Jaeschke's article).<P>
Second, on updating the C Standard, I am glad that we don't consider C a dead language. I am also glad that we like what we have, and don't wish to overhaul it. There are some simple things available in C++ that I regularly use when writing C programs. Naturally I have to use a C++ compiler, but I typically work with modest sized, non-object-oriented programs. I would really like to see these added to the C standard, and I expect many others would also appreciate them:<P>
1.     // comments. I have <I>never</I> forgotten to close them, and I don't have to worry about aligning the right side of a series of end-of-line comments. It also saves three characters <I>" */"</I> at the end of such lines.<P>
2.     The <I>const</I> modifier. In a prototype, this adds information and protection. Also, local <I>consts</I> are more controllable than #<I>defines</I>.<P>
3.     Inline functions. What is the greatest number of parentheses ever used in a #<I>define</I> macro?<P>
Brian Tagg<P>
<I>You are not alone in your conservative approach to modifying Standard C. By the way, the const type qualifier has been in Standard C for many years now. </I>&#151;<I> pjp</I><P>
Editor,<P>
It is with a great deal of regret that I inform you that I am dropping my subscription to <I>CUJ</I>. At one time it took me several days to read and digest the contents, pore over the ads for new products, and find nuggets to add to my arsenal of tricks. Now I can do this in one sitting, mostly looking at the ads. I do not consider C++ to be a step up, but rather a step away from C, which is what I do most of.<P>
I have studied C++ and feel it's a cumbersome, RAM heavy, resources-reliant method of doing structures and pointers. C++ is not <I>my</I> wave of the future. I can count the articles that have been useful to me over that past year using a 3-bit integer. I cannot justify the resources to continue a subscription that does not return value for investment. I will continue to "graze" the local Barnes &amp; Noble and other stores for the monthly issues. If I see something of use, I'll get it then. I am shopping for a monthly/bi-monthly C/ASM journal. Know of any good ones?<P>
Charles W. Reynolds<br>
Senior Technical Developer/PF1<br>
Professional Services<br>
Tampa, FL.<br>
charlesr@cftnet.com<P>
<I>You're asking the wrong guy, since I (clearly) still like CUJ. Sorry it doesn't meet your needs as well these days. </I>&#151;<I> pjp</I><P>
Dr. Plauger:<P>
I have been a reader of <I>CUJ</I> for about a year and a half or so, ever since I learned I did know enough C to make the <I>Journal</I> interesting and understandable (sort of). I have recently come across a most confusing thing which stumps my more expert friends. Suppose one has a small project comprising two files (using either Borland C v4 or Turbo C v3). A global array is declared in both files:<P>
<pre>File 1:
char some_array[some_size];

File 2:
extern char *some_array;</pre>
I always thought that the two declarations ought to be equivalent; that <I>some_array</I> in File 2 should point to the first byte of the army <I>some_array</I> in File 1. After all, <I>some_array</I> in File 1 is just a pointer. However, such is not so. As written, the pointer <I>some_array</I> in File 2 is an uninitialized pointer with no apparent connection to the memory allocated in File 1.<P>
On the other hand, when the declarations are written like this, everything works fine:<P>
<pre>File 1:
char some_array[some_size];

File 2:
extern some_array[some_size];</pre>
Alternatively, this form also works:<P>
<pre>File 1:
char *some_array;
.....
some_array = (char *)malloc(some_size);

File 2:
extern char *some_array;</pre>
Why must one maintain consistent declaration styles for arrays across modules? (Not that this is a bad idea, but I thought I knew what was what.)<P>
Thanks for a publication that is useful and challenging to the non-professional programmer who nonetheless needs to know how to write code in a work-related capacity.<P>
Sincerely,<P>
Jim Willemin<br>
Geology Department<br>
St. Lawrence University<br>
Canton, NY<P>
<I>Your confusion is endemic among C programmers. Pointers and arrays really are different creatures. It just so happens that C doesn't let you manipulate arrays in expressions with the same facility it grants to the scalar types (arithmetic types and pointers). As a convenience, practically every occurrence of an array in an expression gets quietly changed to a pointer to the first element of the array. C programmers become so accustomed to using pointers and arrays interchangeably in expressions that they soon forget the important distinction between them as objects. When matching up declarations, as in your examples, no such implicit conversion occurs from arrays to pointers. Hence, the declarations must match. </I><I><B></I></B>&#151;<I> pjp</I><P>
Mr. Plauger,<P>
I read your January Editoral with great interest. I live in Bolton MA and recently went through the same experience. I have also recently started using the WWW. It's exciting the information that can be accessed. I was wondering if the <I>Journal</I> was going to get on the net and put up a home page. I would really be interested in indexes of back issues. I have a collection going back to 1989. It would be nice to download code also.<P>
Keep up the great work!<P>
Larry Prucha<P>
<I>Last time I visited R&amp;D Intergalactic Headquarters in Lawrence KS, there was considerable discussion about how to get a presence on the Web. There is also considerable confusion in the field. Im sure it's a matter of time before a connection happens, but I can't tell you how much time right now. </I>&#151;<I> pjp</I><P>
Editor:<P>
I was pleased to see an article on Linux in your fine magazine, but I was rather disappointed at the quality of it. For instance, comp.os.linux is gone, having become a whole hierarchy. The X window system isn't called "X-Window," which is certainly capable of much higher resolution than a measly 1024x768x256. Creating a Linux partition will certainly <I>not</I> "destroy all data on your hard disk!"<P>
I'm not sure how useful an article like this is: under-edited, somewhat misleading and dated. And if the reader had access to FTP, surely he would be better off reading the excellent HOWTOs and FAQs.<P>
Regards,<P>
Mark Hahn<br>
hahn@neurocog.lrdc.pitt.edu<P>
Dear Rick Roberts,<P>
With great interest I read your article about Linux (as far as I know the first such article in <I>CUJ</I>). But I have the following comments:<P>
You talk about a complicated method of shutting the system down (multiple syncing, typing halt, etc.) Most modern distributions automatically install a program (named ctrl+alt+del with execute permission for all users at the console) that shuts the system down (better to say: reboots it) when the corresponding key combination is pressed. As soon as you see "done," you can switch off your computer. In addition by default there normally is/etc/update running, which performs a sync every 30 seconds automatically. So I guess there is no need for such a complicated procedure.<P>
The problem with your memory is a little mysterious for me. I installed Linux on many different computers with 4, 8, or 16 MByte RAM. The only time I encountered a problem was with a notebook with 4M (also this problem could be solved). Some distributions (i.e. Slackware) require the setup of a swap partition prior to installation if memory is tight (4MB).<P>
You need not completely delete your hard disk for a Linux installation. The first possibility is of course to use a free partition (if present), the second to buy a second hard disk (booting Linux from hard drive #2 through LILO is no problem!), and lastly you can install Linux on a DOS partition without deleting any DOS files!<P>
Sincerely,<P>
Klaus-Peter Nischke<br>
klaus@nischke.do.eunet.de<P>
<I>It's really hard for a magazine to report on "net happenings" such as the Linux phenomenon. Status can change hourly, in some cases, and we have a pipeline measured in months. Certainly you should scan FAQs to get the latest dope on any topic. But please don't judge us, or our reviewers, too harshly for a lack of depth or timeliness. (I am a nominal expert of long standing in the computer field, and my ignorance of many aspects of it is bottomless.) We're just trying to make useful resources known to a wider audience. </I>&#151;<I> pjp</I><P>
Dear Dr. Plauger,<P>
Your answer to Tom Leith's question in the December issue recalled my struggles with the same problem. I too abandoned type checking here with<I> </I><I>void</I> *, but your answer got me thinking again, and I've found a simple, fully typed solution. Your suggestion of pointers to structures was the key, but rather than returning a pointer to a structure containing the pointer to the function, I pass the pointer to the structure as an additional argument, and fill in the new state function when I return. Also, whenever I have a family of functions called indirectly, I declare the functions and pointers with a macro, so their interfaces are consistent and maintainable.<P>
<A href="list1.htm">Listing 1</a>
shows an example state machine that reads integers.<P>
J. Greg Davidson<br>
Institute for Software Research and Development<br>
San Diego, CA<br>
vis!greg@ucsd.edu<P>
<I>An interesting style for writing event-driven code. </I>&#151;<I> pjp</I><P>
Dear Mr. Plauger,<P>
I enjoyed Bob Stout's article in the March 1995 issue. What he is describing is a technique called medial averaging (averaging about the median).  I have used this technique for a number of years in a time-series forecasting program. His implementation using ring buffers for filtering is very well done. In Bob's application, if there is sufficient oversampling, he may want to drop the next highest and next lowest observations as well. In my application, I run into a problem of not knowing how many observations I have to process (the user can change the number of data points used on the fly), so I use a brute force approach and keep track of array indices to delete. Thanks for a useful article!<P>
Dave Wadsworth<P>

<h4><a href="../../../source/1995/may95/letters.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
