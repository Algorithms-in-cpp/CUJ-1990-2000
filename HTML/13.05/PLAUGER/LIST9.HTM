<HTML><HEAD>
<TITLE>May 1995/Standard C/C++/Listing 9</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 9 <I>The file </I>tfstream.c<A name="00A0_0077"></h4>
<pre>// test  &lt;fstream&gt;
#include  &lt;cassert&gt;
#include  &lt;cstdio&gt;
#include  &lt;cstring&gt;
#include  &lt;fstream&gt;
#include  &lt;iostream&gt;

int main()
   {       // test basic workings of fstream definitions
   ifstream ifs;
   ofstream ofs;
   const char *tn = tmpnam(NULL);
   assert(tn != NULL);
      // test closed file closing
   assert(!ifs.is_open() &amp;&amp; !ifs.fail());
   ifs.close();
   assert(ifs.fail() &amp;&amp; ifs.rdbuf()-&gt;close() == 0);
   assert(!ofs.is_open() &amp;&amp; !ofs.fail());
   ofs.close();
   assert(ofs.fail() &amp;&amp; ofs.rdbuf()-&gt;close() == 0);
      // test output file operations
   ofs.clear(), ofs.open(tn, ios::out | ios::trunc);
   assert(ofs.is_open() &amp;&amp; ofs.rdbuf()-&gt;is_open());
   ofs &lt;&lt; "this is a test" &lt;&lt; endl;
   ofs.close();
   assert(!ofs.is_open() &amp;&amp; ofs.good());
   assert(ofs.rdbuf()-&gt;open(tn, ios::app | ios::out) != 0;
   ofs &lt;&lt; "this is only a test" &lt;&lt; endl;
   ofs.close();
   assert(!ofs.is_open() &amp;&amp; ofs.good());
      // test input file operations
   char buf[50];
   ifs.clear(), ifs.open(tn, ios::in);
   assert(ifs.is_open() &amp;&amp; ifs.rdbuf()-&gt;is_open());
   ifs.getline(buf, sizeof (buf));
   assert(strcmp(buf, "this is a test") == 0);
   streampos p1 = ifs.rdbuf()-&gt;pubseekoff(0, ios::cur);
   ifs.getline(buf, sizeof (buf));
   assert(strcmp(buf, "this is only a test") == 0);
   assert(ifs.rdbuf()-&gt;pubseekpos(p1) == p1);
   ifs.getline(buf, sizeof (buf));
   assert(strcmp(buf, "this is only a test") == 0);
   ifs.rdbuf()-&gt;pubseekoff(0, ios::beg);
   ifs.getline(buf, sizeof (buf));
   assert(strcmp(buf. "this is a test") == 0);
   ifs.close();
   assert(!ifs.is_open() &amp;&amp; ifs.good());
      // test combined file operations
   ifstream nifs(tn, ios::in | ios::out);
   ostream nofs(nifs.rdbuf());
   assert(nifs.is_open() &amp;&amp; nifs.good() &amp;&amp; nofs.good());
   nifs.rdbuf()-&gt;pubseekoff(0, ios::end);
   nofs &lt;&lt; "this is still just a test" &lt;&lt; endl;
   nifs.rdbuf()-&gt;pubseekoff(0, ios::beg);
   nifs.getline(buf, sizeof (buf));
   assert(strcmp(buf, "this is a test") == 0);
   nifs.getline(buf, sizeof (buf));
   assert(strcmp(buf, "this is still just a test") == 0);
   nifs.getline(buf, sizeof (buf));
   assert(strcmp(buf, "this is only a test") == 0);
   nifs.close();
   ofstream nnofs(tn,
      ios::in | ios::out | ios::ate);
   assert(nnofs.is_open());
   nnofs &lt;&lt; "one last test" &lt;&lt; endl;
   nnofs.close();
      // test stdiobuf operations
   FILE *fi = fopen(tn. "r+");
    {      // bound lifetime of istd and ostd
   istdiostream istd(fi);
   ostdiostream ostd(fi);
   assert(fi != 0);
   assert(istd.buffered() == 0
      &amp;&amp; istd.rdbuf()-&gt;buffered() == 0);
   istd.rdbuf()-&gt;buffered(0), istd.buffered(1);
   assert(istd.buffered() != 0
      &amp;&amp; istd.rdbuf()-&gt;buffered() != 0);
   assert(ostd.buffered() == 0
      &amp;&amp; ostd.rdbuf()-&gt;buffered() == 0);
   ostd.rdbuf()-&gt;buffered(0), ostd.buffered(1);
   assert(ostd.buffered() != 0
      &amp;&amp; ostd.rdbuf()-&gt;buffered() != 0);
   istd.getline(buf, sizeof (buf));
   assert(strcmp(buf, "this is a test") == 0);
   p1 = istd.rdbuf()-&gt;pubseekoff(0, ios::end);
   ostd &lt;&lt; "still one more last test" &lt;&lt; end1;
   assert(ostd.rdbuf()-&gt;pubseekpos(p1) == p1);
   istd.getline(buf, sizeof (buf));
   assert(strcmp(buf, "still one more last test") == 0);
   }
   assert(fclose(fi) == 0 &amp;&amp; remove(tn) == 0);
   cout &lt;&lt; "SUCCESS testing &lt;fstream&gt;" &lt;&lt; end1;
   return (0);
   }</pre>

</BODY>
</HTML>
