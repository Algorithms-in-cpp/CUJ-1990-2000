

<HTML>
<HEAD>

<TITLE>December 1994/A Text Translation Tool for C Programmers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocdec.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   International Programming</FONT></H2>

<hr><h2 align="center"><font color="#800000">A Text Translation Tool for C Programmers<A name="01EB_0102"><A name="01EB_0102"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="01EB_0000"><A name="01EB_0000">R. Scott Guthrie</font></h3><hr><blockquote><P>
<P><i><A name="01EB_0000"><A name="01EB_0000">Scott Guthrie has been programming in C for over ten years. He received a B.S. in Computer Science from California Polytechnic State University, San Luis Obispo in 1976. Scott resides in Colorado Springs, Colorado, and is a Senior Systems Analyst for MCI Communications Corporation, Systems Engineering. Scott can be reached on the Internet at asr._scott_guthrie@mcimail.com or by phone at (719) 535-3236.</i></P><P>
<h4><FONT COLOR="#000080"><A name="01EB_0103">Introduction<A name="01EB_0103"></FONT></h4></P>
To compete in the international marketplace, developers must accommodate international users by building multilingual support into their applications. Evolving standards &#151; including definitions for character sets (such as ISO 10646), system functionality (POSIX), and library-level assistance (such as <I>setlocale</I>, available in the Standard C language library) &#151; serve to simplify this task somewhat, but still leave the bulk of the work to the developer.<P>
DOS, OS/2, and UNIX support the use of "country codes" for native language keyboard and text (character set display. Typically, applications that use country codes are developed specifically for a particular language. The country codes do not address the issue of text translation (substitution) between languages.<P>
Some Windows applications developers use multiple resource files &#151; one for each of the languages to be supported. StarView by Star Division takes this a step further: it allows a given resource file to include multiple text string definitions for each text instance. The string set (language) displayed can be configured as required. The disadvantages of using multiple resource files are:<P>
<UL><li>it requires multiple copies of the application's executable (one for each language);</li>
<li>switching languages requires application exit, reconfiguration, and restart;</li>
<li>the person translating the language must be able to use the resource editor;</li>
<li>it does not address locale issues, such as date formats and monetary values;</li>
<li>it is not portable to non-Windows environments. DLLs (Dynamic Linked Libraries), which are also used in Windows to provide multilingual support, are subject to similar problems.</li></UL>
This article describes Xlate, a text substitution tool that addresses the problems noted above for country codes, resource files, and DLLs. Complete C language code for this tool is included, along with several sample applications that demonstrate its use in text translation and in formatting locale-specific dates and monetary values.<P>
<h4><FONT COLOR="#000080"><A name="01EB_0104">What Is Xlate?<A name="01EB_0104"></FONT></h4></P>
Xlate is a set of C language functions that help developers present an application's output in a language-independent manner.<P>
It was originally developed to facilitate the design and construction of applications to be used in several European countries, which use many different native languages. The target system consisted of a network of OS/2 workstations used to present selection menus and process simple user input. The applications were to be entirely text-windows oriented, so as to allow users to pick and choose functions from displayed lists and options.<P>
The specific requirements were:<P>
<UL><li>To support applications written in C.</li>
<li>To be portable between OS/2, DOS, and UNIX platforms.</li>
<li>To provide alternate keyboard and character-set support for non-English systems.</li>
<li>To incorporate support for alternate date, time, monetary, and other locale-related issues.</li>
<li>To allow for dynamic language switching (during application execution).</li>
<li>To enable implementation of additional languages after application development without substantial redevelopment effort.</li>
<li>To eliminate the need for application developers to be familiar with the languages the application would support.</li></UL>
As developed, Xlate meets all of these specifications. For one requirement, the ability to add languages with minimal redevelopment effort, up-front planning is necessary. Planning considerations and sample application examples are included later in this article. With respect to another requirement, that the developer not be required to know the target language, Xlate provides an added bonus: since language translation is performed externally to the application development, the language translators require no programming knowledge.<P>
Further, even though it was not designed with the Windows environment in mind, the functionality provided by Xlate does not preclude its use in Windows applications.<P>
The Xlate routines described and demonstrated in this article are written for DOS using Borland C v3.1. Since the code does not use special compiler features, it will easily migrate to other C language compilation environments, including UNIX.<P>
<h4><FONT COLOR="#000080"><A name="01EB_0105">Xlate's Functionality<A name="01EB_0105"></FONT></h4></P>
Xlate is a text substitution tool. To use it, applications pass text strings through an Xlate function which performs a substitution based on a table loaded in memory.<P>
The strings to be replaced are referred to as "Keys," while the substituted strings are referred to as "Results." Keys and Results are created by a language translator (human) as text files, which are called translation files. Translation files have the file extension <I>.trn</I>.<P>
The Xlate call <I>XlateSet</I> establishes the translation table that will be used (until another call to <I>XlateSet</I> is made). For performance reasons, the Xlate system builds the translation table in memory instead of working strictly from the file. To perform a translation, the application calls Xlate's <I>Xlate</I> function, providing it with a Key value. The Result string is returned. The following example shows how this would look in an application:<P>
<pre>XlateSet("HELLO"); /* Establish a Translate File */
printf("%s\n", Xlate("Hello World!"));</pre>
The output from the <I>printf</I> statement would be the Result string found in the translation file <I>HELLO.TRN</I> for the Key value of "Hello World!"<P>
One additional user-callable Xlate function, <I>XlateFree</I>, releases the allocated memory for any currently loaded translation file. It is not necessary to issue this call when switching translation files because <I>XlateSet</I> does this automatically. Several other Xlate functions, which are used internally and are not user-callable, are discussed later in the "Detailed Xlate Function Descriptions" section.<P>
<h4><FONT COLOR="#000080"><A name="01EB_0106">Translation File Formats<A name="01EB_0106"></FONT></h4></P>
The Xlate system supports two types of translation files. The first type is a text file which can be created with any text editor. This file provides the Key and Result translation strings for the application. It must have the .<I>trn</I> extension to be recognized by the Xlate system.<P>
The second type of translate file is a binary representation of the text-based file, and must have the extension .<I>trb.</I> Using .<I>trb</I> files enhances the performance of the system. At run time, Xlate will attempt to find and load the .<I>trb</I> file. If Xlate can't find this binary file, it will load the text-based file (.<I>trn</I>) instead. You can create a .<I>trb</I> file from a .<I>trn</I> file by running a utility called <I>SPEED_UP</I>. You would normally use this utility after you have completed development and testing of your code. This utility is provided on this month's code disk.<P>
<h4><FONT COLOR="#000080"><A name="01EB_0107">Text-Based Translate File Format<A name="01EB_0107"></FONT></h4></P>
In addition to supplying Key and Result string values, the textbased translate file format provides for comments and descriptive text. Square brackets ('[ ]') identify the Key and Result string values; other text is ignored. Additional formatting rules are listed in the source code (<A href="list14.htm">Listing 14</a>)
 as comments under the function <I>XlateGetString</I>.<P>
You can use comments on lines containing Key/Result pairs to describe the location and limitations for the text destination. For example, if there is room for only ten characters in the display area, you could note that in the comment area of the line in the translation file. Anyone later using this translation file as a model would thus learn of the limitation in the display area without having to refer to the actual display screen. If the comment described the text as representing a title that should be centered within 20 characters, the translator could create a centered title the first time by bracketing the translated title with the appropriate number of space characters.<P>
A problem common to many text replacement tools is the lack of association of the Key value with the Result text. Because Xlate allows the key to include embedded blanks and does not limit its length, the application can be written more naturally and thus can be more easily understood when the programmer has to revisit the code. For example,<P>
<pre>printf("Text Translation Tools\n"); /* Plain C code */</pre>
can be written as,<P>
<pre>printf("%s\n",Xlate("Text Translation Tools"));
/* XLATE style */</pre>
instead of,<P>
<pre>char str[81];
...
str = fn("Value1"); /* fn translates "Value1" to "Text
                   Translation Tools" */
printf("%s\n",str);</pre>
which represents the limitation of some methods available.<P>
The English version of the translation file line for the above example may appear as<P>
<pre>[Translation Tools][Translation Tools] Max. 40 chars</pre>
where the Key and the Result are identical, and the Comment field describes the text limitation of 40 characters.<P>
Xlate's use of text files to define Key/Result string pairs makes it very easy for non-programmers to help with the actual translation when a new language is to be added to an application. And, since all translated text values exist only in the translation files, the application programmer need not know anything about the target languages.<P>
<h4><FONT COLOR="#000080"><A name="01EB_0108">Xlate Usage and Examples<A name="01EB_0108"></FONT></h4></P>
This section presents several examples showing usage and application of the Xlate functions. The first example shows how an application can use Xlate to substitute text strings; other examples show how numeric values can be read in, date formats specified, and monetary conversions facilitated.<P>
<h4><FONT COLOR="#000080"><A name="01EB_0109">Simple Text Substitution<A name="01EB_0109"></FONT></h4></P>
<I>menu.c</I> (<A href="list1.htm">Listing 1</a>)
 represents a complete sample application. It presents the user with a menu of choices, and the user's selection determines which of the four associated translation files &#151; <I>b_fast.trn, lunch.trn, dinner.trn</I>, and <I>snack.trn</I>, (<A href="list2.htm">Listing 2</a>, <A href="list3.htm">Listing 3</a>, <A href="list4.htm">Listing 4</a>, 
and <A href="list5.htm">Listing 5</a>)
 &#151; will be loaded. Output from a sample execution of this application is shown in <A href="list6.htm">Listing 6</a>.
<P>
This application incorporates some knowledge of the data that will be presented. As written, it depends on there being a total of four menu choices (or Quit), with each having only three translatable food items. It is often desirable, and sometimes necessary, for applications to be even further removed from data dependency. Examples later in the article demonstrate this technique.<P>
<h4><FONT COLOR="#000080"><A name="01EB_010A">Loading Numeric Values<A name="01EB_010A"></FONT></h4></P>
In addition to direct text translation, translation files can function as a source for numeric values. This is useful for providing configuration information to the application, such as in this case, the number of menus or food items available.<P>
For the purpose of reading an integer value into an application's variable, the translation file line may appear as<P>
<pre>[Count][4] Integer number of menus available.</pre>
while the application code calling for the value appears as<P>
<pre>iCount = atoi(Xlate("Count"));</pre>
The resultant integer value in the variable <I>iCount</I> will be 4.<P>
This technique can be used for many other types of configuration information, such as date and monetary formats, as will be shown later.<P>
<h4><FONT COLOR="#000080"><A name="01EB_010B">Dealing with a Configurable Number of Entries<A name="01EB_010B"></FONT></h4></P>
The data dependencies in the menu example can be eliminated by reading in the number of possible menus, and reading in the number of food items each menu contains. Reading in integer values from the translation file is useful when the design of an application must provide for an unspecified or varying number of text entries, such as List Box or Menu items.<P>
Even though the application must be written to accommodate the possibility of a variable number of items, the actual number can be defined by the translation file without requiring later modification of the source code.<P>
The sample code segment shown below (from <A href="list7.htm">Listing 7</a>)
 uses this technique to display the user interface languages available. Note that the application does not contain or require knowledge of the number of possible languages in the list. This configuration information is totally defined by the translation file entries.<P>
<pre>char LanguageString[80];   /* Language string buffer */
int LanguageCount;         /* Number of Languages */
...
XlateSet("LANGUAGE");
/* Translation file = LANGUAGE.TRN */

/* Get the number of Languages */
LanguageCount =
   atoi(Xlate("Number of Languages"));

/* Display Language list */
printf("There are %0d Languages.
       These are:\n", LanguageCount);
for(i=1; i&lt;=LanguageCount; i++)
{
 sprintf(LanguageString,
        "Language %0d", i);
 printf("%s\n",Xlate(LanguageString));
}</pre>
For the translation file in <A href="list8.htm">Listing 8</a>,
 the output would be as in <A href="list9.htm">Listing 9</a>.
<P>
<h4><FONT COLOR="#000080"><A name="01EB_010C">Data Formatting<A name="01EB_010C"></FONT></h4></P>
Text translation does not address the problem of differences in data formatting. For example, the representation of dates and monetary values varies from country to country, and even from area to area within some countries. A combination of some fairly simple utility functions and some translation file entries allows data formats to be defined as needed. The following example shows how this is done for various date formats.<P>
<h4><FONT COLOR="#000080"><A name="01EB_010D">Date Formatting<A name="01EB_010D"></FONT></h4></P>
The format used to represent dates varies widely. Possible date formats include:<P>
<pre>YY/MM/DD    MM/DD/YY    DD/MM/YY
YY.MM.DD    DD.MM.YY    MM-DD-YY
YY-MM-DD    YYDDD       YYYY/MM/DD</pre>
Applications must be able to display the date in the format expected by the user, and that format is typically a function of language or region. Xlate can be used to provide this formatting functionality.<P>
The <I>DateFormatter</I> function in <I>demodate.c</I> (not listed here, but provided on this month's code disk), accepts month, day, and year values and builds the date string according to four entries in the translation file. The four translation file lines define the sequence of the month, day, and year in the date string, and provide the format string that will define the separators.<P>
Time values (and other locale-specific data items) can be formatted for presentation using these techniques as well.<P>
<h4><FONT COLOR="#000080"><A name="01EB_010E">Monetary Formatting<A name="01EB_010E"></FONT></h4></P>
The only difference between the formatting of date and monetary values is the involvement of exchange rates. Because of the volatility of value exchange rates, the conversion factors must be supplied from some external source, not hard-coded in the application or the translation file.<P>
<I>currency.c</I> (<A href="list10.htm">Listing 10</a>)
 displays the value of 2.8 Bananas (one hypothetical island's form of currency) in two other hypothetical islands' currency (Coconuts and Sea Shells, respectively).<P>
The translation file simply contains the denominations (Bananas, Coconuts, and Sea Shells). The application must obtain the conversion factors from some other data source.<P>
This sample application does provide an interesting example of how to achieve data independence. The Currency application doesn't even know what our currency units are! The translation file (<I>currency. trn</I>) and sample output for the application are in <A href="list11.htm">Listing 11</a>
and <A href="list12.htm">Listing 12</a>.
<P>
<h4><FONT COLOR="#000080"><A name="01EB_010F">Detailed Xlate Function Descriptions<A name="01EB_010F"></FONT></h4></P>
Three of the Xlate functions are directly callable by the user and the others are used internally. A description of each function and its parameters is provided below. The full source code for Xlate is found in <A href="list13.htm">Listing 13</a>
(<I>xlate.h</I>) and <A href="list14.htm">Listing 14</a>
(<I>xlate.c</I>).<P>
<h4><FONT COLOR="#000080"><A name="01EB_0110">Function <B><I>XlateSet</I><A name="01EB_0110"></B></FONT></h4></P>
<I>XlateSet</I> clears any current translate table from memory, and establishes the translation file name passed as the new one to be loaded. This routine does not validate the file name or perform the table load.<P>
<h4><FONT COLOR="#000080"><A name="01EB_0111">Function <B><I>Xlate</I><A name="01EB_0111"></B></FONT></h4></P>
<I>Xlate</I> is used by applications to retrieve the Result string for a given Key value. When called, it checks to see if the translation file has been loaded into memory as a translation table. If not, it calls <I>XlateLoad</I> to do this.<P>
The actual translation (substitution) is triggered by a call to <I>bsearch</I>, which uses the passed-in Key string as the search value, and the translation table as the subject of the search. The <I>XlateSearchCompare</I> function is passed to the <I>bsearch</I> function to define the search method.<P>
If the search fails to find a match, the default Key is used as the Key and the search is performed for that value. (If no default Key is found either, an error string is returned in English.)<P>
<I>Xlate</I> returns a pointer to the Result for the key provided, or if not found, a pointer to the the string "?".<P>
<h4><FONT COLOR="#000080"><A name="01EB_0112">Function <B><I>XlateLoad</I><A name="01EB_0112"></B></FONT></h4></P>
<I>XlateLoad</I> is called by <I>Xlate</I> when no translation table is loaded in memory.<P>
<I>XlateLoad</I> first calls <I>XlateFree</I> to remove any existing translation table from memory. It then attempts to open a binary version (.<I>trb</I>) of the translation file. If <I>XlateLoad</I> can open the binary file it calls function <I>XlateLoadBinary</I> to load the translation table. If <I>XlateLoad</I> can't open the binary file, it attempts to open the text version (.<I>trn</I>) and calls function <I>XlateLoadText</I> if successful.<P>
The binary file's load process is a little more straightforward than its text-based counterpart. This is because the binary file contains a record explicitly indicating the number of Key/Result pairs to be loaded, while the text file does not. So the binary load can be done in one pass, while the text load requires two passes through the text file, once to count Key/Result pairs, and once to actually load them. Also, the text load function <I>XlateLoadText</I> must perform a sort step (done via <I>qsort</I>) which is not required of <I>XlateLoadBinary</I>, Note that <I>XlateLoadText</I> sorts only the Xlate pointers; the Key and Result values are not moved.<P>
<h4><FONT COLOR="#000080"><A name="01EB_0113">Function <B><I>XlateLoadBinary<A name="01EB_0113"></B></I></FONT></h4></P>
<I>XlateLoadBinary</I> loads the binary version (created via the <I>SPEED_UP</I> utility) of the translation file. Binary translation files must be in the following format:<P>
<UL><li>"<I>.TRB</I>" as a file signature. (4 bytes)</li>
<li>Integer number of translate Key/Result pairs. (2 bytes)</li>
<li>Repeat for above number of Key/Result pairs of the following:</li>
<li>Integer length of Key string including NULL terminator. (2 bytes)</li>
<li>NULL-terminated Key string. (Length in bytes as indicated above.)</li>
<li>Integer length of Result string including NULL terminator. (2 bytes)</li>
<li>NULL-terminated Result string. (Length in bytes as indicated above.)</li>
<li>EOF</li></UL>
<h4><FONT COLOR="#000080"><A name="01EB_0114">Function <B><I>XlateLoadText</I><A name="01EB_0114"></B></FONT></h4></P>
<I>XlateLoadText</I> loads the text version of the translation file. <I>XlateLoadText</I> repeatedly calls function <I>XlateGetString</I> to parse the file and determine the number of Key/Result lines. After it counts Key/Result lines, <I>XlateLoadText</I> rewinds the file and allocates memory for the translation table. <I>XlateLoadText</I> then reads in the file contents, allocating additional memory for each Key and Result string found. It reads the strings into the allocated memory (again via <I>XlateGetString)</I>, and finally, sorts the pointers via <I>qsort.</I><P>
<h4><FONT COLOR="#000080"><A name="01EB_0115">Function <B><I>XlateGetString</I><A name="01EB_0115"></B></FONT></h4></P>
<I>XlateGetString</I> extracts strings from the text version of the translation file. (<I>XlateGetString's</I> parsing rules are documented in <A href="list14.htm">Listing 14</a>.
)<P>
<h4><FONT COLOR="#000080"><A name="01EB_0116">Function <B><I>XlateFree</I><A name="01EB_0116"></B></FONT></h4></P>
<I>XlateFree</I> is used to free the memory allocated for the translation table and allocated to the Key and Result strings. It can be called by the user if additional memory is required by the application and translation is not immediately needed. When the <I>Xlate</I> function call is made later, the current translation file will be reloaded.<P>
<h4><FONT COLOR="#000080"><A name="01EB_0117">Function <B><I>XlateSearchCompare</I><A name="01EB_0117"></B></FONT></h4></P>
<I>XlateSearchCompare</I> is used internally by the <I>Xlate</I> function. It defines the search method <I>bsearch</I> will use to search the translation table.<P>
<h4><FONT COLOR="#000080"><A name="01EB_0118">Function <B><I>XlateSortCompare</I><A name="01EB_0118"></B></FONT></h4></P>
<I>XlateSortCompare</I> is used internally by the <I>XlateLoadText</I> function. It defines the sort method that <I>qsort</I> uses in sorting the entries of the translation table by key value.<P>
<h4><FONT COLOR="#000080"><A name="01EB_0119">Global Values<A name="01EB_0119"></FONT></h4></P>
In addition to the functions defined above, Xlate internally uses three globally available values. These are:<P>
<I>XLATE *Xlatebase</I> &#151; a pointer to the translation table allocated in memory;<P>
<I>int XlateLines </I> &#151; the number of entries in the translation table, and<P>
<I>char XlateFile</I> &#151; the current translation file's name.<P>
<h4><FONT COLOR="#000080"><A name="01EB_011A">Speeding Up Xlate<A name="01EB_011A"></FONT></h4></P>
Xlate's slowest operation is the creation of a translation table from a text-based (.<I>trn</I>) translation file. This operation requires the following steps:<P>
1.     Open the translation file,<P>
2.     Read and parse the translation file, counting strings and passing over comments,<P>
3.     Rewind the translation file,<P>
4.     Allocate memory for the translation table,<P>
5.     Read and parse the translation file for Key and Result strings,<P>
6.     Allocate memory for the Key and Result strings, and finally,<P>
7.     Sort the translation table.<P>
To speed up this process, I've created a utility called <I>SPEED_UP</I> which performs some of these steps for an application before the application is run. <I>SPEED_UP</I> reads a .<I>trn</I> file as input, and by borrowing some of Xlate's functions, builds an image of the translation table in memory. This image is identical to the one that would have been built by the application. After building the table, <I>SPEED_UP</I> writes it to a binary (.<I>trb</I>) file. When the application runs, it will perform only the following steps:<P>
1.     Open the translation file, (binary version)<P>
2.     Read the size of the table,<P>
3.     Allocate table memory,<P>
4.     Read Key and Result string lengths and values (No parsing required),<P>
5.     Allocate memory and copy Key and Result strings.<P>
The advantage of using <I>SPEED_UP</I> is faster loading of the translation table at run time. The disadvantage is more difficulty in modifying and maintaining translation files. To minimize this disadvantage during development, I've made the Xlate system smart enough to use whichever version of the translation file it can find. (However, the Xlate system will always attempt to load the binary version first.) During development, the programmer need only supply text-based translation files. As long as no binary files are available, the system will automatically use the text-based files.<P>
The source code for the <I>SPEED_UP</I> is included on this month's code disk. Since <I>SPEED_UP</I> uses several of the Xlate functions, module <I>xlate.obj</I> must be included in the link step.<P>
<h4><FONT COLOR="#000080"><A name="01EB_011B">Conclusions<A name="01EB_011B"></FONT></h4></P>
The Xlate C language function set provides a very flexible method for replacing text strings in any language where the characters are available as displayable codes (as in the IBM Extended ASCII set for PC workstation environments). Application development and code maintainability are not dependent on the programmer's knowledge of any target language. An entire application can be programmed in American English, leaving the foreign language strings external to the application development effort. In addition, those responsible for creating the foreign language text do not need to know about the application's internals or, for that matter, any aspect of programming. If appropriate care is taken in isolating display formats and if text string length maximums are taken into account, additional language translation files can be added after the application is complete without requiring any modifications. The ability to embed comments and documentation in the translation file itself helps to ensure the ability to add additional languages quickly.<P>

<h4><a href="../../../source/1994/dec94/guthrie.zip">Get Article Source Code</a></h4>

</BODY>
</HTML>
