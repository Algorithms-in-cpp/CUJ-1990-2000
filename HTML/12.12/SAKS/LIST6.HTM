<HTML><HEAD>
<TITLE>December 1994/Stepping Up To C++/Listing 6</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 6 <I>A template class for a wrapper around a </I>genq</A></h4>
<pre>//
// queue11.h - a class template for a generic queue
// implemented as a wrapper around a genq
//

#include "genq7.h"

//
// the "declare" part
//
template &lt;class T&gt;
class queue
   {
public:
   queue();
   ~queue();
   void append(const T &amp;e);
   void clear();
   int remove(T &amp;e);
   class iterator;
   friend class iterator;
   class iterator
      {
   public:
      iterator(queue&lt;T&gt; &amp;q) : gqi(q.gq) { }
      T *next() { return (T *)gqi.next(); }
   private:
      genq::iterator gqi;
      };
private:
   genq gq;
   };

template &lt;class T&gt;
inline queue&lt;T&gt;::queue()
   {
   }

template &lt;class T&gt;
inline queue&lt;T&gt;::~queue()
   {
   clear();
   }

template &lt;class T&gt;
inline void queue&lt;T&gt;::append(const T &amp;e)
   {
   gq.append(new T(e));
   }

//
// the "implement" part
//
template &lt;class T&gt;
void queue&lt;T&gt;::clear()
   {
   void *p;
   while (gq.remove(p))
      delete &lt;T&gt; *)p;
   }

template &lt;class T&gt;
int queue&lt;T&gt;::remove(T &amp;e)
   {
   void *p;
   int rv = gq.remove(p);
   if (rv)
      {
      e = *(T *p);
      delete (T *)p;
      }
   return rv;
   }

/* End of File */</pre>

</BODY>
</HTML>
