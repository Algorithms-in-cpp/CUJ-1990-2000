<HTML><HEAD>
<TITLE>December 1994/Stepping Up To C++/Listing 5</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 5 <I>A template for a </I>queue<I> with element of type </I>T<I> using </I>friend <I>classes</A></I></h4>
<pre>//
// queue10.h - a template for a queue class
// using global cell and iterator classes
// as friends of the queue class
//

//
// the "declare" part
//
template &lt;class T&gt;
class queue_cell
   {
   friend class queue&lt;T&gt;;
   friend class queue_iterator&lt;T&gt;;
private:
   queue_cell(const T &amp;, queue_cell&lt;T&gt; *);
   queue_cell *next;
   T element;
   };

template &lt;class T&gt;
inline queue_cell&lt;T&gt;::queue_cell(const T &amp;e, queue_cell&lt;T&gt; *p)
   : element(e), next(p)
   {
   }

template &lt;class T&gt;
class queue
   {
public:
   queue();
   ~queue();
   void append(const T &amp;e);
   void clear();
   int remove(T &amp;e);
   friend class queue_iterator&lt;T&gt;;
private:
   queue_cell&lt;T&gt; *first, *last;
   };

template &lt;class T&gt;
class queue_iterator
   {
public:
   queue_iterator(const queue&lt;T&gt; &amp;q);
   T *next();
private:
   queue_cell&lt;T&gt; *pc;
   };

template &lt;class T&gt;
inline queue_iterator&lt;T&gt;::queue_iterator(const queue&lt;T&gt; &amp;q)
   : pc(q.first)
   {
   }

template &lt;class T&gt;
T *queue_iterator&lt;T&gt;::next()
   {
   T *pt = 0;
   if (pc != 0)
      {
      pt = &amp;pc-&gt;element;
      pc = pc-&gt;next;
      }
   return pt;
   }

//
// the "implement" part
//
template &lt;class T&gt;
inline queue&lt;T&gt;::~queue()
   : first(0), last(0)
   {
   }

template &lt;class T&gt;
inline queue&lt;T&gt;::queue()
   {
   clear();
   }

template &lt;class T&gt;
void queue&lt;T&gt;::append(const T &amp;e)
   {
   queue_cell&lt;T&gt; *p = new queue_cell&lt;T&gt;(e, 0);
   if (first == 0)
      first = p;
   else
      last-&gt;next = p;
   last = p;
   }

template &lt;class T&gt;
void queue&lt;T&gt;::clear()
   {
   queue_cell&lt;T&gt; *p;
   while (first) != 0)
      {
      p = first;
      first = first-&gt;next;
      delete p;
      }
   }

template &lt;class T&gt;
int queue&lt;T&gt;::remove(T &amp;e)
   {
   if (first == 0)
      return 0;
   queue_cell&lt;T&gt; *p = first:
   if ((first = first-&gt;next) == 0)
      last = 0;
   e = p-&gt;element;
   delete p;
   return 1;
   }

/* End of File */
</pre>
</BODY>
</HTML>
