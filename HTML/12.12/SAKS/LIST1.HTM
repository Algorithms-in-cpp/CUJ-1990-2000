<HTML><HEAD>
<TITLE>December 1994/Stepping Up To C++/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1 <I>A template for a queue with element of type T using nested classes</A></I></h4>
<pre>//
// queue9.h - a template for a queue class
// with a nested private cell class
// and a nested public iterator class
//

//
// the "declare" part
//
template &lt;class T&gt;
class queue
   {
private:
   struct cell
      {
      cell *next;
      T element;
      cell(const T &amp;e, cell *p)
         : element(e), next(p) { }
      };
   cell *first, *last;
public:
   queue();
   ~queue();
   void append(const T &amp;e);
   void clear();
   int remove(T &amp;e);
   class iterator;
   friend class iterator;
   class iterator
      {
   public:
      iterator(const queue&lt;T&gt; &amp;q)
         : pc(q.first) { }
      T *next()      {
         {
         T *pt = 0;
         if (pc != 0)
            {
            pt = &amp;pc-&gt;element;
            pc = pc-&gt;next;
            }
         return pt;
         }
   private:
      cell *pc;
      };
   };
   
template &lt;class T&gt;
inline queue&lt;T&gt;::queue()
   : first(0), last(0)
   {
   }

template &lt;class T&gt;
inline queue&lt;T&gt;::~queue()
   {
   clear();
   }

//
// the "implement" part
//
template &lt;class T&gt;
void queue&lt;T&gt;::append(const T &amp;e)
   {
   cell *p = new cell(e, 0);
   if (first == 0)
      first = p;
   else
      last-&gt;next = p;
   last = p;
   }

template &lt;class T&gt;
void queue&lt;T&gt;::clear()
   {
   cell *p;
   while (first != 0)
      {
      p = first;
      first = first-&gt;next;
      delete p;
      }
   }

template &lt;class T&gt;
int queue&lt;T&gt;::remove(T &amp;e)
   {
   if (first == 0)
      return 0;
   cell *p = first;
   if ((first = first-&gt;next) == 0)
      last = 0;
   e = p-&gt;element;
   delete p;
   return 1;
   }

/* End of File */
</pre>
</BODY>
</HTML>
