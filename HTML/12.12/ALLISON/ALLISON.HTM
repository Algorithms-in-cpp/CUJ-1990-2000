

<HTML>
<HEAD>

<TITLE>December 1994/Code Capsules</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocdec.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Code Capsules<A name="01F5_010C"><A name="01F5_010C"></font></h2><P>
<h3 align="center"><A name="01F5_0000"><A name="01F5_0000">The Standard C++ Library</h3><P>
<h3 align="center"><font color="#800000">Chuck Allison</font></h3><hr><blockquote><P>
<P><i><A name="01F5_0000"><A name="01F5_0000">Chuck Allison is a regular columnist with CUJ and a Senior Software Engineer in the Information and Communication Systems Department of the Church of Jesus Christ of Latter Day Saints in Salt Lake City. He has a B.S. and M.S. in mathematics, has been programming since 1975, and has been teaching and developing in C since 1984. His current interest is object-oriented technology and education. He is a member of X3J16, the ANSI C++ Standards Committee. Chuck can be reached on the Internet at 72640.1507@compuserve.com.</i></P><P>
The C and C++ standard libraries have both evolved from efforts to make new functionality available to programmers without the addition of new language features. It is much easier to use a language's existing facilities to create a standard library than it is to invent a new language construct with its associated syntax rules and potential interactions with the rest of the language. The widespread success of the Standard C library shows how far you can go with just the concepts of functions and separate compilation. It's no surprise then that C++ features such as classes, templates, namespaces, exceptions, and run-time type identification make for powerflibraries. The Standard C++ library, and the commercial libraries that use it, provide a framework for tackling very complex programming tasks. We have a long way to go before we need a more powerful language. In this survey article I'll share how the Standard C++ library came to be, who the major players were, and then I'll illustrate some of its major components.<P>
<h4><FONT COLOR="#000080"><A name="01F5_010D">History<A name="01F5_010D"></FONT></h4></P>
The very first C++ library was Bjarne Stroustrup's task library, a collection of classes that support coroutines. Coroutines provide a technique for implementing synchronous, concurrent functions. Note the present tense in "support"; the task library is still in use today, and comes with AT&amp;T's release of C++. Release 1.0 of C++ in 1985 included only the task library along with a complex number class and the streams library, which Bjarne also wrote.<P>
Jonathan Shopiro developed the first string and list classes, which eventually led to the development of the container classes now found in the AT&amp;T Standard C++ Components, a library of more than 50 classes. By the time Release 2.0 came out in 1989, the Components were standard AT&amp;T issue. The major alteration to the library occurred in the stream classes, which came to be known as iostreams in Release 2.0. Jerry Schwarz of AT&amp;T redesigned streams to make use of multiple inheritance and virtual base classes, which were key 2.0 innovations.<P>
When ANSI Committee X3J16 convened in 1989, the plan for the Standard C++ library was to at least standardize the stream classes. Under the leadership of Mike Vilot, the Library Working Group emerged with more specific direction at the close of the third meeting in July 1990: 1) to standardize the stream classes, 2) to define mechanisms to support language features such as the <I>new</I> and <I>delete</I> operators and exceptions, 3) to define the relationship between the Standard C library and the C++ library, and 4) to define a standard string class. By the end of 1990, Jerry had initiated a proposal to standardize iostreams, Steve Clamage of TauMetric was defining the relationship between the C and C++ libraries, and Aron Insinga of Digital had made a good start on a standard string class.<P>
Shortly after I joined the committee early in 1991, I accepted the assignment to review a number of commercial class libraries, just to see what "existing practice" was. All vendors offered at least one string class and a number of container classes, such as lists, vectors, queues, stacks, maps, and sets. Many vendors also supported bitsets. By the end of 1991 the C library had become an integral part of the C++ library (modulo a few tunings in the direction of type-safety), the language support functions and iostreams were still under construction, and I was working on classes to support bitsets. Uwe Steinmueller of Siemens-Nixdorf and Pete Becker of Borland took over the string class, since Aron was no longer able to attend meetings of the committee. Uwe also volunteered to author a dynamic array specification.<P>
At the London meeting in March of 1992, the Library WG got the grandiose idea of having a set of related classes to support strings over a spectrum of fundamental data types: bits, bytes, characters, and wide characters. The latter two were to include very high-level operations for international text processing. This "text class" work turned out to be a little too ambitious for the committee and was abandoned in July 1993. The major library milestone for 1992 was the acceptance of the language support functions for exception handling and memory management, which was mainly the work of Mike Vilot.<P>
The library finally started taking shape in 1993. The string and bit handling classes and Jerry's revision of iostreams were approved in March, the dynamic array classes and Beman Dawes' wide character version of the string class in July, and some complex number classes designed by Al Vermulen of Rogue Wave in November. We also accepted some useful new iostream manipulators proposed by Bruce Eckel.<P>
Some major new work also began in 1993. For some time a number of committee members had been requesting a language change to allow for "smart arrays" &#151; arrays with intelligent automatic memory management for objects with value semantics. When it became clear that the committee as a whole wasn't interested in such a language extension, Kent Budge of Sandia Labs and Al Vermulen came forth with a library solution. Their <I>val_array</I> class is a smart array class with support for most of the mathematical operations needed for scientific applications.<P>
About the same time, Tom Keffer, president of Rogue Wave, developed an error handling model that would guide the design of exception classes used in the standard library. Standard exception classes derive from one of two base classes: <I>logic_error</I>, which describe errors that could have been prevented by the programmer, and <I>runtime_error</I>, which are unforeseen errors, such as memory exhaustion. (See <A href="list1.htm">Listing 1</a>)
.<P>
The final innovation of 1993 was the <I>Standard Template Library</I> (STL), a proposal from Alex Stepanov and Meng Lee of Hewlett-Packard. STL is a collection of algorithms and data structures, including a useful set of container classes: <I>vector, list, deque, set, multiset, map,</I> and <I>multimap</I>. The algorithms are designed to work on both built-in and user-defined types uniformly. As STL is integrated into the standard library, it will likely displace <I>dyn_array</I> and <I>bitstring</I>, since it has an expandable vector template class, along with a specialization for a vector of boolean objects.<P>
STL fills some gaps that have long plagued the draft Standard C++ library. Of C++ Release 1.0, Bjarne has said, "To my mind, there really is only one contender for the title of <I>Worst Mistake</I>. Release 1.0 ... should have been delayed until a larger library including some fundamental classes such as singly and doubly linked lists, an associative array class, a range-checked array class, and a simple string class could have been included. The absence of those led to everybody reinventing the wheel and to an unnecessary diversity in the most fundamental classes." <a href="#1">[1]</a> It looks like STL is the finishing touch that has made the C++ standard library the robust collection of foundation classes Bjarne wished for. (NOTE: Pete Becker will be giving a full-day tutorial on STL at "C/C++ Solutions '95," a seminar sponsored by R&amp;D Publications, in Kansas City, Jan. 26-27, 1995.)<P>
The July 1994 meeting in Waterloo, Ontario was the last chance to add anything to Standard C++. STL and <I>val_array</I> were accepted, and the string and complex number classes were "templatized." Prior to the July meeting, two nearly-identical string classes, <I>string</I> and <I>wstring</I> were included in the library. The only substantive difference between them was that <I>string</I> operated on sequences of type <I>char</I> while the latter dealt with type <I>wchar_t</I>. Both classes are now replaced by instantiations of the template class <I>basic_string</I>, which can be written roughly as:<P>
<pre>    template&lt;class T&gt; class basic_string{...};
    typedef basic_string&lt;char&gt; string;
    typedef basic_string&lt;wchar_t&gt; wstring;</pre>
Templatizing the complex number classes is not so simple; it requires a change to the language. Instead there are three classes:<P>
<pre>    class float_complex;
    class double_complex;
    class long_double_complex;</pre>
These classes are defined with mutual implicit conversions to accommodate mixed expressions. For example, in the expression:<P>
<pre>    float_complex f;
    double_complex d;
    // ...
    f + d ...</pre>
<I>f</I> is converted to a <I>double_complex</I> by the constructor<P>
<pre>   double_complex::double_complex(float_complex);</pre>
If you try to define a complex number class template, you can't include such conversions. To see why, consider the following class template:<P>
<pre>template &lt;class T&gt; class complex
{
   T real, imag;

public:
   template&lt;class T2&gt; complex(const complex&lt;T2&gt;&amp; c)
     : real(c.real), imag(c.imag)
   {}
   // ...
};</pre>
The constructor definition above is invalid in current C++ compilers, because the <I>Annotated Reference Manual</I> (ARM &#151; the ANSI C++ base document) does not allow nesting of template declarations. If this definition were valid, it would allow conversion from one complex number type to another only if <I>T2</I> converted to a <I>T</I>, which would be a reasonable conversion to make. This nested template mechanism is called a <I>member template</I> and became part of the language at the end of 1993. STL relies heavily on member templates. But the complex classes have not (yet) been replaced by a single template.<P>
The first draft of the C++ standard, the "Committee Draft" (CD), was finished in September 1994, and is on its way to ISO. The remainder of this article summarizes some of the major components of the standard C++ library as found in the CD. Remember that most of these features are not yet available in any current C++ compiler. For more detailed information, see P. J. Plauger's new book, <I>The Draft Standard C++ Library</I> <a href="#2">[2]</a>.<P>
<h4><FONT COLOR="#000080"><A name="01F5_010E">Using the Standard C Library in C++<A name="01F5_010E"></FONT></h4></P>
The C library was part of C++ from the beginning. There are some "gotchas" when using the C library in a C++ environment, however. For example, the Standard C header <I>&lt;string. h&gt;</I> declares the following function:<P>
<pre>   char *strchr(const char *s, int c);</pre>
This function returns a pointer to the first occurrence of <I>c</I> in the string <I>s</I>, but it returns a <I>non-const</I> pointer. That non-const pointer will let you do something weird like this:<P>
<pre>    const char *s;
    int c;
    //...
    *strchr(s,c)= '!';    /* Probably an error */</pre>
You wouldn't have declared the string that <I>s</I> points to as <I>const</I> if you had wanted to change it. This example reveals a hole in C's type system. Since C++ encourages a "const-correct" style of programming, conforming C++ compilers will provide a modified version of <I>&lt;string. h&gt;</I> that contains the following two overloaded prototypes of <I>strchr,</I> in place of the original C prototype:<P>
<pre>    const char * strchr(const char *, int);
         char * strchr(char *, int);</pre>
The appropriate version executes depending on the const-ness of the first argument, rendering the spurious assignment in the example a compile-time error. Conforming C++ compilers will apply this same treatment to the functions <I>memchr, strpbrk, strrchr,</I> and <I>strstr</I>.<P>
Conditions for using the <I>longjmp</I> function defined in <I>&lt;setjmp.h&gt;</I> have changed slightly in C++. Calling <I>longjmp</I> is undefined if any automatic objects defined between the target and the jump point would be destroyed if an exception had been thrown instead. You should be using exceptions anyway. (See the Code Capsule "C++ Exceptions," <I>CUJ</I>, July 1994.)<P>
You must also be careful if you use the <I>offsetof</I> macro, which calculates the relative position of members in a structure. Since C++ objects can have pointers to virtual function tables (and who knows what else), you can only use <I>offsetof</I> safely on plain old data structures, i.e., objects without member functions.<P>
C++ reserves a few keywords that are mere macros in C. Although most C programmers are unaware of it, an addendum to ISO C approved this year (the "Normative Addendum") defines a number of features that promote international portability of C programs. These features include more multi byte and wide-character processing functions, and new language tokens. The header <I>&lt;iso646.h&gt;</I> defines macros which compensate for foreign keyboards (see <A href="list2.htm">Listing 2</a>)
. These macros make for more readable programs than their trigraph equivalents, shown in <A href="tab1.htm">Table 1</a>.
 (Wouldn't you rather use "or" instead of "??!"?) If you didn't <I>#include &lt;iso646. h&gt;</I>, you could use these tokens as variable names in a C program. In C++, these tokens are keywords instead of macro definitions, so you can't use them as variable names under any circumstances.<P>
Finally, be aware that the token <I>wchar_t</I> is a keyword in C++. In C, it is a typedef, defined in <I>&lt;wchar.h&gt;, &lt;stdlib.h&gt;</I>, and <I>&lt;stddef.h&gt;</I>. In C++, <I>wchar_t</I> names a type that is distinguishable from other integral types during function overload resolution. In all other respects, however, <I>wchar_t</I> behaves like an ordinary integral type (usually 16-bit). (For more information about trigraphs see "Code Capsules: The Preprocessor," <I>CUJ</I>, March 1994.)<P>
<h4><FONT COLOR="#000080"><A name="01F5_010F">Iostreams<A name="01F5_010F"></FONT></h4></P>
The iostreams classes are essentially the same as in Release 2.0. One notable difference is the absence of the classes <I>iostream, fstream,</I> and <I>strstream</I> in the CD. The committee omitted these classes to avoid the use of multiple inheritance in the standard library.<P>
If you want to open a stream for simultaneous I/O, you connect an input stream and an output stream to the same streambuf, as in:<P>
<pre>    ofstream f("myfile", ios::in | ios::out);
    ifstream g(f.rdbuf());</pre>
The <I>rdbuf()</I> member function returns a pointer to a stream's underlying <I>streambuf</I> object. Another alternative is to create a <I>filebuf</I> separately and connect streams to it:<P>
<pre>    filebuf fb("myfile",ios::in | ios::out);
    ostream f(&amp;fb);
    istream g(&amp;fb);</pre>
Because those three I/O classes have been in the streams library for so long, there is some talk of putting them back in.<P>
While the CD dropped a few classes from iostreams, it added some new manipulators (see <A href="tab2.htm">Table 2</a>)
. These new manipulators make a number of stream insertions more convenient. For example, instead of setting the <I>floatfield</I> flag to scientific notation mode like this:<P>
<pre>   float x;
   cout.setf(ios::scientific, ios::floatfield);
   cout &lt;&lt; x;</pre>
you can do it in-line like this:<P>
<pre>   float x;
   cout &lt;&lt; scientific &lt;&lt; x;</pre>
You can find a detailed description of iostreams in the Code Capsule "C++ Streams," <I>CUJ</I>, July 1993.<P>
<h4><FONT COLOR="#000080"><A name="01F5_0110">Locales<A name="01F5_0110"></FONT></h4></P>
A <I>locale</I> in Standard C is a set of preferences that regulate the processing and display of information that is sensitive to culture, language, or national origin. Date and monetary formats are examples of locale-sensitive information. Standard C defines five categories of information, named by macros defined in <I>&lt;locale.h&gt;</I>, which locales affect (listed in <A href="tab3.htm">Table 3</a>)
. Each of these five categories can be set to a different locale ("American," "Italian," etc.). For want of a better term, I call the collection of settings for all categories the <I>locale profile</I>.<P>
Standard C specifies two functions that deal with locales directly:<P>
<pre>    struct lconv *localeconv(void);</pre>
which returns a static structure containing settings for the <I>LC_MONETARY</I> and <I>LC_NUMERIC</I> categories, and<P>
<pre>    char *setlocale(int category, char *locale);</pre>
which changes the locale for the given category to that specified in <I>locale</I>. You can set all categories to the given locale by specifying the category <I>LC_ALL</I>. If <I>locale</I> is a null pointer, <I>setlocale</I> returns the current locale string for the category. All implementations must support the minimalist "C" locale, as well as a native locale named by the empty string (which may be the same as the "C" locale). Unfortunately, few U.S vendors provide any additional locale support.<P>
In July 1993 I proposed that each stream have an associated locale object to maintain its own locale profile. Nathan Myers of Rogue Wave subsequently engineered a locale class specification which is extremely well integrated with the rest of the library. The committee accepted his solution early in 1994. Each stream begins with a locale object set to the classic "C" locale. You can "imbue" a stream with a different locale profile at any time, for example:<P>
<pre>    ostream str;
    locale loc;
    ...
    // Set locale
    str.locale(loc);

    // Get locale
    locale loc2: str.locale();</pre>
<h4><FONT COLOR="#000080"><A name="01F5_0111">Language Support<A name="01F5_0111"></FONT></h4></P>
The Standard C++ library defines a small number of functions to support three important language features: memory management, exception handling, and run-time type identification. The memory management functions are defined in <I>&lt;new&gt;</I> (see <A href="list3.htm">Listing 3</a>)
. When you use the <I>new</I> operator to allocate dynamic memory, two things happen: 1) the compiler computes the number of bytes needed and calls <I>::operator new(size_t) </I>or<I> ::operator[](size_t)</I> (or their class-specific counterparts) to allocate the memory, and 2) the compiler calls a suitable constructor.<P>
Overriding the functions declared in <I>&lt;new&gt;</I> allows you to usurp step 1 by replacing the default memory management provided by the compiler.<P>
When a dynamic object is deleted, its destructor executes and its memory is freed via the appropriate version of operator <I>delete(void *).</I> Along similar lines, Laura Yaker of Mentor Graphics developed the specification for <I>operator new[]()</I> and <I>operator delete[]()</I> &#151; for freeing <I>array</I> memory. For more detailed information on overriding the various incarnations of <I>operator new(),</I> see last month's Code Capsule ("Memory Management in C++," <I>CUJ</I>, November 1994).<P>
When memory is exhausted, the default behavior specified by the CD is to throw a <I>bad_alloc</I> exception, not to return a null pointer. You can intercept this operation by providing your own <I>new handler</I>. Just call <I>set_new_handler</I>, and provide the address of your <I>new</I> handler function:<P>
<pre>    #include &lt;new&gt;
    void my_handler(void);
    new_handler old_handler;
    old_handler = set_new_handler(my_handler);</pre>
Since <I>set_new_handler</I> returns the current <I>new</I> handler's address, you can easily restore the default <I>new</I> handler, and resume throwing <I>bad_alloc</I> exceptions when things go awry:<P>
<pre>    set_new_handler(old_handler);</pre>
Unless you can free up some memory somehow, the usual thing to do in a <I>new</I> handler is abort the program.<P>
<h4><FONT COLOR="#000080"><A name="01F5_0112">Language Support for Exceptions<A name="01F5_0112"></FONT></h4></P>
When an exception is thrown the run-time mechanism searches for a handler that matches the type of the exception (either an exact match or an accessible base class). When the system<B> </B>can't find a handler for an exception, it calls the standard library function <I>terminate()</I>, which aborts the program. You can substitute your own termination function by passing it as a parameter to the <I>set_terminate()</I>, library function, defined in the standard header <I>&lt;exception&gt;</I>.<P>
You can enumerate the exceptions that a function will throw with an exception specification:<P>
<pre>    void f() throw(A,B)
    {
       // Whatever
    }</pre>
This definition states that while <I>f</I> is executing, only exceptions of type <I>A</I> or <I>B</I> will occur. Not only does this make good documentation, but the run-time system will verify that only these types of exceptions occur. In the presence of any other exception, control passes to the standard library function <I>unexpected</I>, which by default terminates the program. The definition of <I>f</I> above is equivalent to the program in <A href="list4.htm">Listing 4</a>.
 You can provide your own <I>unexpected</I> handler by passing it to the standard library function <I>set_unexpected</I> (also declared in <I>&lt;exception&gt;</I>).<P>
<h4><FONT COLOR="#000080"><A name="01F5_0113">Language Support for RTTI<A name="01F5_0113"></FONT></h4></P>
The Standard Library also includes a support class called <I>type_info</I>, used in connection with C++'s run-time type identification facility (RTTI). A <I>type_info</I> object is returned by the <I>typeid</I> operator, which is useful for listing the actual type of objects of polymorphic types (i.e., either built-in types or classes with virtual functions). You can compare <I>type_info</I> objects to see if the objects they refer to have the same type. The program in <A href="list5.htm">Listing 5</a>
illustrates the <I>typeid</I> operator and dynamic casts. For more information on C++'s new-style casts, see the Code Capsule "Conversions and Casts," <I>CUJ</I>, September 1994.<P>
<h4><FONT COLOR="#000080"><A name="01F5_0114">Standard Exceptions<A name="01F5_0114"></FONT></h4></P>
In March 1994 the standards committee decided that the Standard C++ library will only throw exceptions from the hierarchy shown in <A href="list1.htm">Listing 1</a>.
 Logic exceptions are those due to errors in the internal logic of a program. A domain error, which is a particular type of logic error, violates the preconditions of some operation. Examples of domain errors are accessing an array with an out-of-range index, or attempting to use a bad file descriptor. The <I>bitstring</I> class from the standard library throws an <I>invalid_argument</I> exception if you ask it to set a bit that doesn't exist:<P>
<pre>    #include &lt;stdexcept&gt;

    bitstring&amp; bitstring::set(size_t pos, int val)
    {
       if (pos &gt;= nbits_)
          throw invalid_argument("invalid position");
       set_(pos,val);
       return *this;
    }</pre>
As opposed to domain errors, run-time errors are those that you cannot easily predict in advance, and are usually due to forces external to a program. A range error, for example, is one that violates the <I>post</I>condition of a function, such as arithmetic overflow from valid arguments.<P>
<h4><FONT COLOR="#000080"><A name="01F5_0115">String Class<A name="01F5_0115"></FONT></h4></P>
Text processing in C is inconvenient because the programmer has to worry about array bounds. The C++ <I>basic_string</I> class template provides automatic memory management, eliminating most concerns about bounds checking, and also provides member functions for common text-processing operations, like search, replace, insert, remove, and append. You can now paste strings together without worrying, as in:<P>
<pre>    string s1, s2, s3;
    // ...
    s4 = s1 + s2 + s3;</pre>
See <A href="list6.htm">Listing 6</a>
for a sample program that illustrates the string class.<P>
<h4><FONT COLOR="#000080"><A name="01F5_0116">Containers<A name="01F5_0116"></FONT></h4></P>
Before STL, the only containers in the standard library were the dynamic array class, its pointer version <I>ptr_dyn_array</I>, and the bit manipulation classes <I>bits</I> and <I>bitstring. dyn_array</I> does for arrays in general what <I>string</I> does for arrays of characters: it provides memory management plus convenient access and retrieval (see <A href="list7.htm">Listing 7</a>)
. The <I>bitstring</I> class provides string processing on sequences of bits. Since STL includes a vector class that manages memory (all STL classes do), vector will doubtless supplant <I>dyn_array</I>, and a template specialization, <I>vector&lt;bool&gt;</I>, will doubtless replace <I>bitstring.</I><P>
The <I>bits</I> class will remain, however, because it operates on a fixed number of bits (see <A href="list8.htm">Listing 8</a>)
. You can think of a bits object as an arbitrarily large unsigned integer. The <I>bits</I> object is implemented as a template, with the number of bits in the collection as the template parameter:<P>
<pre>    template&lt;size_t N&gt;
    class bits {...}</pre>
<I>bits</I> is highly suitable for interfacing with the host operating system, and is designed for efficiency (it will be stack-based under most implementations). Although the example in <A href="list8.htm">Listing 8</a>
uses a word-sized object, you can have bit collections as large as your stack allows.<P>
Using an expression instead of a type as a template parameter has a couple of interesting effects:<P>
<UL><li>A <I>bits</I>-object can be stack-based, since its size is known at compile time. This means less run-tune overhead and therefore better performance than dynamically-sized objects.</li>
<li>Objects of different sizes (i.e., with a different number of bits) are different types, and therefore can't be combined in operations.</li></UL>
The <I>bits</I> class exposed a weakness in the C++ language definition. Consider, for example, how you would define an <I>ostream</I> inserter:<P>
<pre>    template&lt;size_t N&gt;
    ostream&amp; bits&lt;N&gt;::operator&lt;&lt;(ostream&amp; os,
                            const bits&lt;N&gt;&amp; b)
    { /* details omitted */ }</pre>
This is a template function with a <I>non-type</I> parameter, which was prohibited by the ARM's language definition. The work-around for global functions such as this, that take a template class parameter, is to define them inline in the class template definition itself. In order to allow out-of-line definitions for such functions, the committee voted to allow template functions with non-type parameters in November 1993. For a detailed treatment of the <I>bits</I> class template, see "Bit Handling in C++, Part 2," <I>CUJ</I>, January 1994.<P>
In addition to a set of useful containers, STL defines common algorithms that operate on both user-defined and built-in types. STL achieves this transparency in part by defining generic iterators that can operate on all of its data structures. Iterators are pointer-like objects that traverse a container by, among other things, overloading <I>operator++(), operator--(),</I> and <I>operator*().</I> STL is still being integrated into the standard library and is definitely a topic for an article all its own.<P>
<h4><FONT COLOR="#000080"><A name="01F5_0117">Afterword<A name="01F5_0117"></FONT></h4></P>
Remember that the charter of a standards committee is to standardize existing practice. It is not feasible to expect such a committee to design a comprehensive object-oriented library. A large group of volunteers that meets together only three or four times per year cannot accomplish what a small, focused department can. The philosophy of the committee is to standardize a small number of popular, low-level classes for use as building blocks in a wide spectrum of applications. Bjarne said,<P>
"Any libraries beyond the C libraries and iostreams accepted by the committee must be in the nature of building blocks rather than more ambitious frameworks. The key role of a standard is to ease communication between separately-developed, more ambitious libraries." <a href="#3">[3]</a><P>
The standard C++ library provides a sound foundation for the development of sophisticated, portable, reusable class libraries. I'm sure we'll be seeing a lot more of them.<P>
<h4>References</FONT></h4></P>
<a name="1"></a>[1]     Bjarne Stroustrup. <I>The Design and Evolution of C++</I> (Addison-Wesley, 1994), p. 200.<P>
<a name="2"></a>[2]     P. J. Plauger. <I>The Draft Standard C++ Library</I> (Prentice-Hall, 1995).<P>
<a name="3"></a>[3]     Bjarne Stroustrup. <I>The Design and Evolution of C++</I>, p. 194.<P>

<h4><a href="../../../source/1994/dec94/allison.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
