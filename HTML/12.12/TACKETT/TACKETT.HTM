

<HTML>
<HEAD>

<TITLE>December 1994/Using the International Section of WIN.INI</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocdec.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   International Programming</FONT></H2>

<hr><h2 align="center"><font color="#800000">Using the International Section of WIN.INI<A name="01E7_0100"><A name="01E7_0100"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="01E7_0000"><A name="01E7_0000">Jack Tackett, Jr.</font></h3><hr><blockquote><P>
<P><i><A name="01E7_0000"><A name="01E7_0000">Jack Tackett, Jr. is a software engineer with Wandel and Goltermann Technologies, Inc. in Research Triangle Park, NC, and a principle with Tristar Systems. Mr. Tackett holds a BSCS from UNC-Asheville. He can be reached on CompuServe at 70312,132, or on the Internet <I></I>at<I></I> 70312.132@compuserve.com.</i></P><P>
It is naive to assume the entire world communicates in one language, such as English. Today's software has potential application in a wide variety of cultures, something partly accounted for in the design of MS-Windows. While Microsoft makes Windows available in many different languages, it provides for language-specific behavior via the Control Panel, and via values written to the <I>WIN.INI</I> initialization file, located in the <I>\windows</I> subdirectory. The ability to modify this file (a text file) helps programmers develop internationally aware applications.<P>
This article provides a brief outline of the international <I>[intl]</I> section of <I>WIN.INI,</I> and the functions provided by the Windows API. The code disk contains a sample Microsoft Foundation Class (MFC) application which queries and edits the <I>WIN.INI</I> file and responds to changes to the file made by other applications. The functions that actually query the .<I>INI</I> file are SDK functions that any Windows development system can use.<P>
<h4><FONT COLOR="#000080"><A name="01E7_0101">The <B><I>WIN.INI </I></B>File<A name="01E7_0101"></FONT></h4></P>
Windows reads and understands two initialization files specific to the system, <I>SYSTEM.INI</I> and <I>WIN.INI.</I> Windows can also use <I>.INI</I> files specific to an application, but in this article I deal with <I>WIN.INI.</I> All .<I>INI</I> files are broken into named sections identified by brackets, e.g.:<P>
<pre>   <I>[section name]</I></pre>
then within each section items are defined via a key and a value, e.g.:<P>
<pre>   <I>key = value</I></pre>
The various keys and most of their values are listed in <A href="tab1.htm">Table 1</a>.
 The following example from the <I>WIN.INI</I> file shows the character used to set off the thousands digit for numbers having more than three digits;<P>
<pre>   [intl]
   sThousands = .</pre>
This entry will cause a number such as 1234 to displayed as 1.234. The user controls the keys' values in <I>WIN.INI</I> via the control panel and via the international icon (the control applet represented by the globe icon).<P>
The <I>sShortDate</I> and <I>sLongDate</I> keys replace the older <I>iDate</I> and <I>sDate</I> values. <A href="tab2.htm">Table 2</a>
illustrates the formatting character values used by these keys. By combining the various formatting characters you can create different date displays. For example, the format m/d/yy displays 3/15/94 and the format dddd, mmmmm d, yyyy displays Tuesday, March 15, 1994.<P>
While Microsoft recommends that your application be flexible with regards to different languages, they do recommend storing the section and key names in English (ENU). Thus, all applications, regardless of their primary language, can access the same information using the above keys and their stored values.<P>
<h4><FONT COLOR="#000080"><A name="01E7_0102">Accessing .<B><I>INI</I></B> Files<A name="01E7_0102"></FONT></h4></P>
The Windows API provides the developer with two functions, <I>GetProfileString</I> and <I>GetProfileInt</I>, to query the <I>WIN.INI</I> file for information. You use <I>GetProfileString</I> for keys such as <I>sCountry</I> and <I>sLanguage</I> &#151; in fact, for any key with a leading 's'. You use <I>GetProfileInt</I> for keys that start with 'i'. These entries contain numeric values. Both functions take a default value which is returned in case the desired section and key cannot be found. Neither function is case-sensitive, so both work with mixed upper- and lower-case strings.<P>
The prototype for <I>GetProfileString</I> is shown below:<P>
<pre>int GetProfileString( LPSTR SectionName,
                  LPSTR KeyName,
                  LPSTR Default,
                  LPSTR ReturnString,
                  int strsize);</pre>
The <I>SectionName</I> parameter is a string containing the section name in the <I>WIN.INI</I> file. The <I>SectionName</I> for internationalization is "intl." Note that it does <I>not</I> contain the enclosing brackets when used as a parameter. The <I>KeyName</I> parameter is a string containing the key whose value we wish to retrieve. The <I>Default</I> parameter is a string which <I>GetProfileString</I> will return if the desired key is not found in the file. <I>ReturnString</I> is a buffer in which <I>KeyName'</I><I>s</I> corresponding value will be returned, and <I>strsize</I> is the size of this buffer in bytes. The function returns the number of characters copied to <I>ReturnString.</I> The following code snippet returns the string value for the <I>sShortDate</I> key in the <I>intl</I> section.<P>
<pre>   #define   strsize 32
   CString   SectionName("intl";)
   CString   KeyName("sShortDate");
   FAR char  sShortDate[ strsize ];
   CString   Default("Not Found");

   result =
      ::GetProfileString( SectionName, KeyName, Default, sShortDate, strsize);</pre>
Note the use of the global scope operator (<I>::</I>) in the SDK API function call. This operator instructs the C++ compiler to use the SDK function call rather than a local version of the function ( e.g. CWinApp's <I>GetProfileString</I> member function). While the code snippets are written with MFC in mind, any Windows development system supporting calls to SDK functions can be used.<P>
Each Windows installation is unique and does not require every key in the <I>intl </I>section to have a corresponding value. So it is important to provide an appropriate default value when calling either function. To see what keys are defined you can set the <I>KeyName</I> parameter to <I>NULL</I> and the function then returns all the keynames found in the indicated section, in <I>ReturnString.</I> Each key name returned is null-terminated and the final key name is terminated with two nulls. If the supplied buffer is too small then Windows returns as many key names as will fit &#151; the last one returned is truncated and terminated with two null characters.<P>
The <I>GetProfileInt</I> function is a little less cumbersome to use since it only deals with an integer value rather than strings. The prototype for <I>GetProfileInt</I> is:<P>
<pre>WORD GetProfileInt( LPSTR SectionName, LPSTR KeyName,
                 int DefaultValue );</pre>
The function returns the numeric equivalent of <I>value</I>, as found in<P>
<pre>   [SectionName]
   KeyName = value</pre>
The function returns <I>DefaultValue</I> if the section/key combination is not found. The following is a code snippet that returns the time format deemed in the <I>intl</I> section:<P>
<pre>   CString   SectionName("intl");
   CString   KeyName("iTime");
   int       Default = -1;
   WORD      result;
   result = ::GetProfileInt( SectionName, KeyName,
                         Default);
   switch( result )
   {
      case 0 :
          AfxMessageBox("Use a 12 hour clock "); break;
      case 1:
          AfxMessageBox("Use a 24 hour clock "); break;

      case Default:
      default:
      AfxMessageBox(" iTime key not found! ");
      // set a default value for clock format, break;
   } // end switch</pre>
<h4><FONT COLOR="#000080"><A name="01E7_0103">Run-Time Changes to <B><I>WIN.INI</I><A name="01E7_0103"></B></FONT></h4></P>
The developer should be aware that the user can, via the Control Panel, change <I>WIN.INI</I> settings while an application is running. Fortunately, Windows broadcasts a message, <I>WM_WININICHANGE</I>, indicating a change to the file. The <I>LPARAM</I> parameter contains a pointer to a string indicating the section modified, or a null pointer if an application changed multiple sections. Thus, internationally-aware applications should check <I>LPARAM</I> for "<I>intl</I>" and then scan for the keys used, checking to see which have been modified. One tip Microsoft offers is to beware when the <I>sCurrency</I> key is changed since the application may not want to update the symbols used for items already entered by the user.<P>
While the user can change <I>WIN.INI</I> via the Control Panel, applications can also change settings with the Windows API <I>WriteProfileString</I> function. (The Windows API does <I>not</I> provide a function to write integer values to <I>WIN.INI</I> so you must format a string with <I>sprintf</I> or <I>wsprintf</I> and then write the resultant string to the file.) The prototype for the function is:<P>
<pre>BOOL WriteProfileString( LPSTR Section, LPSTR Key,
                     LPSTR Value);</pre>
This function sets <I>Key</I> to the passed <I>Value</I> in the <I>Section </I>section<I> of WIN.INI</I> and returns <I>TRUE</I> if successful or <I>FALSE</I> if an error occurs. If your application modifies any section of <I>WIN.INI</I> then you should broadcast a message telling all other tasks the file has changed. The following code snippet illustrates this technique.<P>
<pre>   char        Value[16];
   CString     Section;
   CString     Key;
   BOOL        retv;
   int         iTimeValue = 1;  // use the 24 hour clock

   sprintf(Value,"%d", iTimeValue);
   retv = ::WriteProfileString( Section, Key, Value);
   if ( retv )
   {
      ::SendMessage(  HWND_BROADCAST,   // -1, send to all
                                  // windows
                    WM_WININICHANGE, // message
                    0L,              // not required
                    Section);        // section updated
}</pre>
If the application modifies several sections of the WIN.INI file then set the last parameter to SendMessage to a null.<P>
<h4><FONT COLOR="#000080"><A name="01E7_0104">Finding More Detailed Information<A name="01E7_0104"></FONT></h4></P>
If you are preparing your application for foreign markets, go to your stash of SDK manuals and pull out the <I>Programmer's Reference Volume 1: Overview</I>, and mark chapter 18 &#151; "International Applications."[1] This chapter covers the topic of creating an internationally aware application (except for newer topics such as using the Registry). Chapter 18 explains each of the items found in the [<I>intl</I>] section of <I>WIN.INI</I>. The chapter also provides some tips and tricks for preparing your application for foreign markets, including the use of the <I>WIN.INI</I> file.<P>
<h4><FONT COLOR="#000080"><A name="01E7_0105">Conclusion<A name="01E7_0105"></FONT></h4></P>
Writing internationally aware Windows application is not a difficult task, especially when following the tips offered in the <I>Programmer's Reference.</I> By manipulating the <I>WIN.INI</I> file, developers can greatly increase the usefulness of their applications to users around the world.<P>
<h4>Reference</FONT></h4></P>
<I>Programmer's Reference Volume 1: Overview</I>, (Microsoft corporation, Copyright 1987-1992), Chapter 18 &#151; "International Applications."<P>
</BLOCKQUOTE>
</BODY>
</HTML>
