<HTML><HEAD>
<TITLE>December 1994/Standard C/C++/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1 <I>The File</I> iomanip</A></h4>
<pre>// iomanip standard header
#ifndef_IOMANIP_
#define_IOMANIP_
#include &lt;istream&gt;
#include &lt;ostream&gt;
              // template class smanip
template&lt;class_T&gt; class smanip {
public:
       smanip(ios&amp; (*_F)(ios&amp;,_T),_T_A)
              :_Pf(_F),_Manarg(_A) {}
       ios&amp; (*_Pf)(ios&amp;,_T);
       _T_Manarg;
       };
template&lt;class _T&gt; inline
       istream&amp; operator&gt;&gt;(istream&amp; _I, const smanip&lt;_T&gt;&amp; _M)
       {       // apply manipulator to input stream
       _TRY_BEGIN
              (*_M._Pf) (_I, _M._Manarg);
       _CATCH_ALL
              _I.setstate(ios::failbit);
       _CATCH_END
       return (_I);
       }
template&lt;class _T&gt; inline
       ostream&amp; operator&lt;&lt;(ostream&amp; _0, const smanip&lt;_T&gt;&amp; _M)
       {       // apply manipulator to output stream
       _TRY_BEGIN
              (*_M._Pf)(_O, _M._Manarg);
       _CATCH_ALL
              _0.setstate(ios::failbit);
       _CATCH_END
       return (_0);
       }
              // template class imanip
template&lt;class _T&gt; class imanip {
public:
       imanip(istream&amp; (*_F)(istream&amp;, _T), _T_A)
              : _Pf(F), _Manarg(_A) {}
       istream&amp; (*_Pf)(istream&amp;, _T);
       _T_Manarg;
       };
template&lt;class _T&gt; inline
       istream&amp; operator&gt;&gt;(istream&amp; _I, const imanip&lt;_T&gt;&amp; _M)
       {       // apply input manipulator to input stream
       _TRY_BEGIN
              (*_M._Pf)(_I,_M._Manarg);
       _CATCH_ALL
              _I.setstate(ios::failbit);
       _CATCH_END
       return (_I);
       }
              // template class omanip
template&lt;class _T&gt; class omanip {
public:
       omanip(ostream&amp; (*_F)(ostream&amp;, _T),_T _A)
              : _Pf(_F), _Manarg(_A) {}
       ostream&amp; (*_Pf)(ostream&amp;, _T);
       _T _Manarg;

       };
template&lt;class _T&gt; inline
       ostream&amp; operator&lt;&lt;(ostream&amp; _0, const omanip&lt;_T&gt;&amp; _M)
       {       // apply manipulator to output stream
       _TRY_BEGIN
              (*_M._Pf)(_0, _M._Manarg);
       _CATCH_ALL
              _0.setstate(ios::failbit);
       _CATCH_END
       return (0);
       }
              // instantiations
smanip&lt;ios::fmtflags&gt; resetiosflags(ios::fmtflags);
smanip&lt;ios::fmtflags&gt; setiosflags(ios::fmtflags);
smanip&lt;int&gt; setbase(int);
smanip&lt;int&gt; setfill(int);
smanip&lt;int&gt; setprecision(int);
smanip&lt;int&gt; setw(int);
#endif
</pre>
</BODY>
</HTML>
