<HTML>   
     <HEAD>
<TITLE>September 1999/We Have Mail</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocsep.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Departments</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">We Have Mail</FONT></H2>

<hr>
<BLOCKQUOTE>

<p><i>Letters to the editor may be sent via email to </I>cujed@mfi.com<I>, or via the postal service to Letters to the Editor, </I>C/C++ Users Journal<I>, 1601 W. 23rd St., Ste 200, Lawrence, KS 66046-2700.</i></p>

<hr>
<p>Dear <I>CUJ</I>,</p>
<p>Andrei Alexandrescu is asking for better template error messages in the March 1999 issue. Asking for better compilers is a long-term solution.</p>
<p>I think there is a short-term technique to better the compiler message with your present compilers &#151; using <B>class</B> instead of <B>typedef</B>.</p>
<p>Here is Alexandrescu's code:</p>

<pre>
typedef
map&lt;string,
   double, less&lt;string&gt; &gt; TDblMap;
typedef vector&lt;TDblMap&gt; TDblMatrix;
void f(const TDblMatrix &amp;M)
{
        M[0] = M[1];
}
</pre>

<p>This is the message that I get when I try to compile Alexandrescu's code with Borland C++Builder 1:</p>

<p>Project1.cpp(22): Non-const function std::map&lt;string,double,std::less&lt;string&gt;&gt;::<br>
operator=(const std::map&lt;string,double, std::less<br>
&lt;string&gt;&gt;&amp;) called for const object</p>

<p>Using <B>class</B> instead of <B>typedef</B>, you get more verbose code to write:</p>

<pre>
class CDblMap :
   public map&lt;string, double,
             less&lt;string&gt; &gt;
{
public:
   CDblMap() :
   map&lt;string, double,
      less&lt;string&gt; &gt;() {}
};
     
class CDblMatrix :
   public vector&lt;CDblMap&gt;
{
public:
   CDblMatrix() :
      vector&lt;CDblMap&gt;() {}
};
     
void
using_class_f(const CDblMatrix &amp;M)
{
    M[0] = M[1];
}
</pre>

<p>But you get a simpler error message to read:</p>

<p>Project1.cpp(40): Non-const function CDblMap::operator =(const CDblMap &amp;) called for const object</p>

<p>You have to type some extra lines of code to use this technique, and it doesn't work to solve all the problems listed in Alexandrescu's article. But you can use this idea right now.</p>
<p>Is there any big drawback I am missing?</p>

<p>Pascal Lecourt<br>
Paris<br>
lecourtpas@aol.com</p>

<p><I>Andrei Alexandrescu replies:</p>
<p>Pascal,</p>
<p>Thanks for your follow-up and insights. Sorry for the late answer &#151; seems like my server has had a problem. In my humble opinion, there are some drawbacks associated with inheritance when used as a solution to long names.</p>
<p>From a pragmatic point of view, there are classes that are not supposed to be derived from. Standard containers and the standard string class are in this category. Deriving from them would be a dangerous and confusing technique that does not scale to team projects. Furthermore, you'll have to reproduce all the constructors in the original class (and they may be quite a few) if you want derivation to behave almost like a typedef. And finally, because you use public inheritance, someone may upcast implicitly to the base class and destroy your derived type via a pointer to a base type, which has undefined results if the base class destructor is not virtual. (This is arguably harmless in your case, but it's still not 100% portable.)</p>
<p>From a conceptual point of view, there is a big difference between typedef and derivation. Typedef introduces an alias for an existing type. Derivation introduces a new type, which brings heavy intellectual baggage with it.</p>
<p>For these reasons, I tend to advise against using this solution. You solve a problem with means that are intended to solve a very different category of problems. For people, typedefing templates is a means to reduce typing and to increase clarity. Deriving from classes is quite a different (and heavier) task.</p>
<p>Again, thanks for your email. I look forward to continuing this discussion.</p>
<p>Best regards,</p>
<p>Andrei</I></p>

<hr>
<p>Dear <I>CUJ,</I></p>
<p>I enjoyed Eric Roe's "A Wrapper Class for Dynamically Linked Plug-Ins" (<I>CUJ,</I> May 1999) but it could stand a little tweaking.</p>
<p>1.  The wrapping functions in <B>SimpleMath.cpp</B> are a bit tedious and repetitive. To quote Dan Saks, "In C++, the common cure for tedium is a template." So add to class <B>DynamicLibrary</B> in <B>DynamicLibrary.h</B>:</p>

<pre>
...
protected:
   template&lt;class T1, class T2&gt;
   int
   DynamicCall_2_int
      (const char *pcName,
       int iCache, T1 arg1, T2 arg2)
   {
      int(*f)(T1, T2) =
      reinterpret_cast&lt;int(*)(T1,T2)&gt;
         (
         GetProcAddrCached
            (pcName, iCache)
         );
      if (f)
         return f(arg1, arg2);
      return -1;
   }
</pre>

<p>and then the wrappers in <B>SimpleMath.cpp</B> become much simpler. For example:</p>

<pre>
int SimpleMath::Add(int x, int y)
{
   return DynamicCall_2_int
            (
             "simple_math_add",
             SIMPLEMATH_ADD, x, y
            );
}
</pre>

<p>2.  The defined constants like <B>SIMPLEMATH_ADD</B> in <B>SimpleMath.cpp</B> seem inelegant; an enum would give better type-checking possibilities. More seriously, when there's lots of similar functions to define, like:</p>

<pre>
DynamicCall_2_int("simple_math_add",
   SIMPLEMATH_ADD, x, y);
DynamicCall_2_int("simple_math_sub",
   SIMPLEMATH_SUB, x, y);
</pre>

<p>it's all too easy to do incomplete editing while copy/pasting, which leads to things like:</p>

<pre>
DynamicCall_2_int("simple_math_sub",
   SIMPLEMATH_ADD, x, y);
</pre>

<p>which should be <B>SIMPLEMATH_SUB</B>.</p>
<p>The solution is to harness the macro preprocessor so that the enum constant is derived from <B>simple_math_sub</B> as well. Replace:</p>

<pre>
#define SIMPLEMATH_ADD  0
#define SIMPLEMATH_SUB  1
...
</pre>

<p>with</p>

<pre>
enum eCallCacheIndex
{
   CONST_simple_math_add =0,
   CONST_simple_math_sub
}
</pre>

<p>and add a macro to use the function name as the basis for the <B>eCallCacheIndex</B> value:</p>

<pre>
#define DYNAMIC_CALL_2_INT(   \
   FUNCTION_NAME, ARG1, ARG2) \
   DynamicCall_2_int          \
      (                       \
       #FUNCTION_NAME,        \
       CONST_##FUNCTION_NAME, \
       ARG1, ARG2             \
      )
</pre>

<p>And then you get the even simpler wrapper:</p>

<pre>
int SimpleMath::Add(int x, int y)
{
   return DYNAMIC_CALL_2_INT
             (
              simple_math_add,
              x, y
             );
}
</pre>

<p>3.  To compile with VC6 I had to change <B>DynamicLibrary.h</B> from using <B>HANDLE</B> to <B>HMODULE</B>.</p>
<p>I attach the amended files.</p>
<p>Bill Rivers<br>
Skyline Software Ltd<br>
<B>brivers@telinco.co.uk</B></p>

<p><I>Thanks. &#151; mb</I></p>

<hr>
<p>Dear Sir,</p>
<p>I was rather disheartened to read the letter, and then the reply, in June's letters page regarding the March Issue being full of Java. The thing that caused me to sigh were the comments regarding Visual Basic. If these were made purely on the factual grounds of Visual Basic not being related to C++, then so be it. On the other hand, if they were made, which, reading between the lines I think they might have been, through some prejudicial childishness, then shame on you.</p>
<p>Speaking as one who has programmed in Assembler, C, and C++ (since Windows 1 to the present day) &#151; in fact you couldn't get a greater fan of 'C'/C++ than me &#151; I must say that, yes, it is true, Visual Basic is not C++, nor, unlike C/C++, is it often misapplied &#151; both of the latter are fundamentally Systems languages (read, "inherently dangerous") which are now commonly used to write UI/IO/COM/Disk/Network/Printer-bound Windows apps! What a waste of time &#151; is the attraction that it is simply more difficult or low-level?</p>
<p>It may interest you to know that our company usually designs and then prototypes in Visual Basic prior to using any other language. We then profile the code to see whether or not it is acceptable in terms of performance, etc. If it is, we leave it alone. If it is not, in true Jon Bentley style, we do some back of the envelope calculations to see how 'C'/C++ might speed up the code. Interestingly, we sometimes find that it would in fact slow it down, especially where there are a great many operations on strings to perform. Most of the time however, we find that any performance increase is so small as to render it insignificant &#151; "the clock cycles live elsewhere," in other words. If we need real speed we either work at improving the design/algorithm (normally the place where the best improvements are to be made) or go straight to the assembler. (BTW, I note that the <I>ASM Journal</I> has also stated "when pigs fly" regarding articles on C and C++!)</p>
<p>No, most of the time, Visual Basic works for us &#151; as it does for most the world's developer community. It delivers (quickly) robust applications that are maintainable, scalable, and cheap to produce. One can now use Visual Basic to write shared and efficient COM components, OCX controls (for Visual C/C++ and Visual Basic developers) NT Services, add-ons to Outlook, extensions to Excel, Exchange, Word, PowerPoint, Visio (just to show this list isn't limited to MS apps), Windows CE, etc.   Please don't foster or propagate unnecessary languagist views (if there is such a term) &#151; all languages have something to offer and surely, a mixed language approach is one of the best ways to go about any OO programming today &#151; this is especially true today as Windows defines the linkage mechanism and COM isolates the machine architecture. C++ is great in places, Visual Basic is too &#151; neither should be misapplied and both should be shown the same level of respect.</p>
<p>Long live Visual Basic I say.</p>
Peter Morris<br>
<B>www.TheMandelbrotSet.com</B><br>
<B>v-peetm@microsoft.com</B></p>

<p><i>My precondition for a VB theme issue in </I>CUJ<I>, namely that pigs fly, was 80% based on VB's lack of similarity to C/C++. But, yeah, you're right &#151; the other 20% was an underhanded snipe at VB. I apologize for promoting a "languagist" (great term) attitude. In fact, I think I share your values. Over the years I have learned that doing it the hard way just to prove how smart you are only proves the opposite.</p>
<p>I note, however, if I have been guilty of languagism, VB must be held guilty of "platformism." Show me another OS but Windows on which VB will run. As for </I>ASM Journal<I>, I find it heartening and kind of amusing that another magazine would be as vehement about C/C++ articles as we are about VB articles. Sounds like their editors are just doing their jobs. &#151; mb</i></p>

<hr>
<p>Dear pjp,</p>
<p>I know I am late, and I know that proposing updates to the C++ Standard now is silly (the standard has been approved, and a standard is useful if it doesn't keep changing) but I would like your opinion on what I think would be a simple and useful new keyword in C++. Consider this program:</p>

<pre>
class Base
{
public:
   virtual void
   Foo(int i) {cout&lt;&lt;"Base"&lt;&lt;i;}
};
     
class Derived : public Base
{
public:
   virtual void
   Foo(long i) {cout&lt;&lt;"Derived"&lt;&lt;i;}
};
</pre>

<p>The intention of the writer of class <B>Derived</B> was to redefine <B>Base::Foo</B>, but he got the type of the argument wrong (the same would happen if he got the number of arguments wrong). My compiler, Visual C++ 6.0 with maximum warning level, stays absolutely silent, but the following code:</p>

<pre>
Base * p = new Derived;
p-&gt;Foo(1L);
</pre>

<p>will happily call <B>Base::Foo</B>, which is obviously not the intention of the programmer (note that <B>int</B> and <B>long</B> are both 32-bit integral types on my machine). A better compiler could give a warning, but would still not catch the following problem:</p>

<pre>
class Base
{
public:
   virtual void
   Foo() {cout&lt;&lt;"Base";}
};
     
class Derived : public Base
{
public:
   virtual void
   foo() {cout&lt;&lt;"Derived";}
};
</pre>

<p>Here <B>Derived::foo</B> was typed with a lowercase &#145;f', and the compiler took it as a new virtual function. The bad part is that both <B>Foo</B> and <B>foo</B> will work, but not as the programmer intended. These problems often arise when the writer of a base class modifies the signature of a virtual function, and the users who inherited from such base classes will have to go crazy to find out that their redefined virtual functions silently don't get called anymore.</p>
<p>My suggestion is this: since specifying <B>virtual</B> in a redefined virtual function is useless (except for style issues) as it's virtual anyway, why not introduce a new keyword, <B>redefine</B>, to be used thus:</p>

<pre>
class Derived : public Base
{
public:
   redefine void
   foo() {cout&lt;&lt;"Derived";}
};
</pre>

<p>and let the compiler check that, since the intention of the programmer was to redefine a virtual function in some base class, the signature of the function is actually correctly matching a virtual function in some base class. This would not create any compatibility problems, as not using <B>redefine</B> would work like it does now. To adapt code that uses <B>redefine</B> to work with a compiler that does not support it would just require one to use a simple macro:</p>

<pre>
#define redefine virtual
</pre>

<p>which is a minor compromise. This new keyword would let the compiler make some easy checks that would enforce the intentions of the programmer, which is the whole point of static type checking, a feature that has helped find millions of bugs early in the development process in languages that support it. The more static checks the compiler can do to enforce the intentions of the programmer, the better, is it not so?</p>
<p>I'd like to know your opinion.</p>
<p>Regards,</p>
<p>Giovanni Bavestrelli</p>

<p><i>Well, you sucked me in. After your opening sentence, I began framing the usual pedantic warning against invention and fiddling with a standard that's supposed to remain stable. But by the end, I started giving serious thought to using </I><B>redefine</B><I> (or the uglier </I><B>_REDEFINE</B><I> out of necessity) as a way to document my intention when writing derived classes. I generally oppose warning messages for a host of philosophical and practical reasons, but this problem has bit me too often, in too many forms, to ignore. If I could convince any compiler vendor to add redefinition checking, it would be as an error, not as a warning. Thanks for the interesting thought. &#151; pjp</i></p>

<hr>
<p>Dear Mr. Plauger,</p>
<p>After reading your article, "A Better Red-Black Tree," I was disappointed to read the fact that you have not called the 2-3-4 tree by its proper name. In the section "A Little Imbalance" you begin a description of red-black trees with, "A red-black tree is a balanced tree that has three kinds of nodes." The description that follows is one of a 2-3-4 tree and <I>not</I> a red-black tree which you properly describe later. It <I>is</I> true that you can view a red-black tree as a 2-3-4 tree, but the two have different implementations.</p>
<p>If you would like another reference book for binary trees and other good data structures, I have used <I>Introduction to Algorithms</I> by Cormen, Leiserson, and Rivest. I have used this book to implement a couple complex data structures such as B-tree and Fibonacci heaps. I should have a red-black tree implemented, but I can't find the code right now.</p>
<p>This next section is more about binary trees on modern processors than it is about your article. Now that most processors cache data, I find that it will be faster to to use larger amounts of data if it reduces the number of memory fetches I have to do. Now that the cache has become so large, it is actually advantageous to use 256- or 512-byte node sizes than it is to use a 16-byte node size (assuming 32-bit pointers), which most people have to use to implement a binary tree. Each processor will have a sweet spot usually around the size of an L2 cache line.</p>
<p>I was also disappointed that you recently ran an article talking about Skiplists. I never wrote a response to that article, but Skiplists are a poor man's binary tree, and no matter what others say, a Skiplist will perform both worse and use more memory than a binary tree, or a B-Tree.</p>
<p>I have code on <B>http://resnet.uoregon.edu/~gurney_j/jmpc/</B> that implements Skiplists, B-trees, and Fibonacci heaps. Each of these includes code that both tests validity and performance of the algorithms.</p>
<p>John-Mark Gurney<br>
Cu Networking</p>

<p><i>I have a limited space budget for each column, so I often have to pare details. A red-black tree is indeed isomorphic with a 2-3-4 tree, as Nelson's book points out quite clearly. (It was in my list of references.) As for the binary trees, skiplists, etc., I tend to be ecumenical. Over the years, I have learned that practically every nontrivial way of structuring data has its benefits in some context. The more structures and algorithms you become familiar with, the more likely you'll know which tool to bring to bear on a given problem. Thanks for the pointer to your code. &#151; pjp </i></p>

<h4><a href="../../../source/1999/sep99/rivers.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY>
</HTML>
