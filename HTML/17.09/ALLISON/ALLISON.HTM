<HTML>   
     <HEAD>
<TITLE>September 1999/import java.*</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocsep.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">import java.*: Packaging Your Objects</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Chuck Allison</FONT></H3>

<BLOCKQUOTE>
<p>Java packages combine the properties of C/C++ include directories, namespaces, make files, and libraries &#151; often to advantage.</p>
</BLOCKQUOTE>

<hr>
<BLOCKQUOTE>

<p>In my July 1999 installment I introduced the four access specifiers for class members in Java, which are as follows, listed in decreasing amount of visibility:</p>
<p>1.  <I>Public access,</I> denoted by the keyword <B>public</B>. Public members can be accessed anywhere.</p>
<p>2.  <I>Protected access,</I> denoted by the keyword <B>protected</B>. Protected members are accessible in derived-class methods and in methods in the same package.</p>
<p>3.  <I>Package access,</I> denoted by the absence of any accompanying keyword. Members with package access are visible anywhere in the package in which they appear.</p>
<p>4.  <I>Private access,</I> denoted by the keyword <B>private</B>. As in C++, private members are visible only within their class. There is no concept of friends in Java. Instead of breaking encapsulation you use package access.</p>
<p>Note that items 2-4 mention the word "package." Packages are the fundamental organizational unit of Java applications. Like namespaces in C++, packages allow you to group related types together and use them in an application without name conflicts. In fact, the similarities between Java packages and C++ namespaces are quite striking (see <a href="tab1.htm">Table 1</a>). The following program from the March 1999 installment of this column shows how to use the <B>Vector</B> class from the <B>java.util</B> package:</p>

<pre>
import java.util.*;

class UseVector {
   public static void main
      (String[] args) {

      Vector v = new Vector();
      for (int i = 0; i &lt; 10; ++i)
        v.addElement(new Integer(i));
      for (int i = 0;
           i &lt; v.size();
           ++i)
        System.out.print
           (v.elementAt(i) + " ");
    }
}

/* Output:
0 1 2 3 4 5 6 7 8 9
*/
</pre>

<p>The <B>import</B> statement above is analogous to the C++ using directive:</p>

<pre>
using namespace java::util;
</pre>

<p>Like a using directive, importing a package with the <B>".*"</B> suffix opens a package for name lookup, so when the javac translator can't find a name in the current directory, it looks in the package <B>java.util</B> to find it. If you happen to have a <B>Vector</B> class in the current directory, however, the translator will find that first, and won't even bother with <B>java.util</B>. If you still want to bypass your local <B>Vector</B> and use the one from <B>java.util</B>, you have two options. You can change the <B>import</B> statement to explicitly associate the name <B>Vector</B> with <B>java.util.Vector</B>, as follows:</p>

<pre>
import java.util.Vector;
</pre>

<p>which is analogous to the following C++ using declaration:</p>

<pre>
using java::util::Vector;
</pre>

<p>or, you can use a fully qualified class name and ignore the import altogether:</p>

<pre>
// Note: no import statement
class UseVector {
   public static void main
      (String[] args) {

      java.util.Vector v =
         new java.util.Vector();
      (etc.)
</pre>

<p>The differences between C++ namespaces and Java packages are more than merely syntactic, however. Java package storage conventions dictate a scheme that radically simplifies building and deploying applications.</p>

<h4><FONT COLOR="#000080">Creating a Package</FONT></H4>

<p>A package consists of one or more <B>.class</B> files that occupy a single directory. The Java source for each class must appear in a file that contains a package statement as its first non-comment statement, and the name of the package must be identical to its directory name. Suppose, for example, that you want to create a package named <B>MyPackage</B> that contains two classes, <B>MyClass</B> and <B>MyOtherClass</B>. If you want both classes to be accessible to clients, then each class must be declared as public in its own file of the same name, in a directory named <B>MyPackage</B>. The <B>MyPackage</B> directory can be a subdirectory of any other directory, however. For this example, place the files <B>MyClass.java</B> and <B>MyOtherClass.java</B> in <B>c:\MyPackage</B>, as follows:</p>

<pre>
// c:\MyPackage\MyClass.java
package MyPackage;

public class MyClass {
   public static void announce() {
      System.out.println
         ("c:\\MyPackage\\MyClass");
   }
}

// c:\MyPackage\MyOtherClass.java
package MyPackage;

public class MyOtherClass {
   public static void announce() {
      System.out.println
         ("c:\\MyPackage\\MyOtherClass");
    }
}
</pre>

<p>The <B>package</B> statement indicates that each source file contains type definitions that belong to <B>MyPackage</B>. At most one class in each file can be public; if other classes appear, they are not callable by clients of the package.</p>
<p>Although this scheme might appear a little restrictive at first, it actually simplifies program construction. Go to any other directory now, and build the following test file:</p>

<pre>
//&lt;any other dir.&gt;\MyPackageTest.java
import MyPackage.*;

class MyPackageTest {
   public static void main
      (String[] args) {

      MyClass.announce();
      MyOtherClass.announce();
   }
}
</pre>

<p>Now enter the following command:</p>

<pre>
javac -verbose -classpath c:\;. MyPackageTest.java
</pre>

<p>Among other things, you should see something like the following:</p>

<pre>
[checking class MyPackageTest]
...
[wrote MyPackageTest.class]
[checking class MyPackage.MyClass]
...
[wrote c:\MyPackage\MyClass.class]
[checking class MyPackage.MyOtherClass]
[wrote c:\MyPackage\MyOtherClass.class]
</pre>

<p>The <B>-verbose</B> option flag causes javac to report all the classes it loads. The <B>-classpath</B> option tells javac where to look for non-system packages. In this case it will first look in <B>c:\</B> and then in the current directory. Since javac finds the directory <B>c:\MyPackage</B>, it searches there for <B>MyClass.class</B> and <B>MyOtherClass.class</B>. Since they don't yet exist, it finds the corresponding <B>.java</B> files and compiles them automatically.</p>
<p>To run the program, you must enter:</p>

<pre>
java -classpath c:\;. MyPackageTest
</pre>

<p>and the output is:</p>

<pre>
c:\MyPackage\MyClass
c:\MyPackage\MyOtherClass
</pre>

<p>The current directory (<B>"."</B>) must always be in the classpath when you execute or the runtime system won't be able to legally load the starting class's <B>main</B> method. (You actually could have left it off in the compile step.) Since it can be tedious to always include the <B>-classpath</B> option on the command line, you can define the <B>CLASSPATH</B> environment variable instead:</p>

<pre>
C:&gt;set CLASSPATH c:\;.
</pre>

<p>The <B>-classpath</B> option, if present, overrides the <B>CLASSPATH</B> environment variable. If you don't define any classpath at all, the system behaves as if you had defined it as <B>"."</B>, making the current directory the classpath. You can determine the classpath at runtime by calling <B>System.getpath("java.class.path")</B>.</p>
<p>The classpath mechanism also has the handy feature of acting as a mini-make utility. If you make changes to either of the source files in <B>c:\MyPackage</B>, they are automatically recompiled when you recompile <B>MyPackageTest.java</B>.</p>
<p>Since the runtime environment searches the classpath in order, if you have a class named <B>MyPackage</B> in the current directory, and another class named <B>MyPackage</B> in a subdirectory of the same name, the runtime system will still find the package in <B>c:\Mypackage</B> first. But if you switch the directories in the classpath to be <B>".;c:\"</B>, then the local <B>Mypackage</B> is found. This way you can use the classpath as a cheap versioning tool by specifying different directories as needed <a href="#1">[1]</a>.</p>
<p>But be careful! If you place the files <B>MyClass.java</B> and <B>MyOtherClass.java</B> in the current directory or the root directory, the compiler will find them, but complain with the following error, because they are not in a subdirectory named <B>MyPackage</B>:</p>

<p>error: file ./MyClass.java does not contain the type MyClass as expected. Please adjust the classpath so that the file does not appear in the unnamed package.</p>
<p>Remember: a package name must always match the name of the subdirectory that contains the corresponding class files. I explain the unnamed package in the section "The Default Package" below.</p>

<h4><FONT COLOR="#000080">Avoiding Name Collisions</FONT></H4>
<p>Since packages form a container for names, as it were, (hence the C++ term "namespace"), you rarely have to worry about name collisions in programs. When you import two packages with the <B>".*"</B> suffix that contain the same name, you encounter a problem only if you try to use that name, in which case you can use a fully-qualified name to resolve the ambiguity. But you still have to worry about collisions of package names! Ideally we would have some centralized arbitrator with whom we could register package names, so we would never have to worry about conflicting with someone else's when distributing our code. But who wants to bother with the complexity and delay of such a scheme? Certainly not your everyday developer!</p>
<p>Fortunately, there is a de facto clearing house in place already, which is trivial to access for anyone who belongs to an organization that has an Internet domain. When you register your domain, Internic, the Internet domain name authority, forces you to choose a name that is currently not in use. My domain name, for example, is <B>freshsources.com</B>. This easily maps to a directory path name, and since the <B>.com</B> is the more general component, it maps nicely to the directory <B>\com\freshsources</B>. Since no one else in the world has this domain, I can install my packages there on any machine and be assured that no other packages reside there (provided that everyone else follows these rules). To successfully move <B>MyPackage</B> to <B>com\freshsources\MyPackage</B>, I also have to rewrite the <B>package</B> statement in each file as follows:</p>

<pre>
// Package name must match
// directory name
package com.freshsources.MyPackage;
</pre>

<p>and the <B>import</B> statement in the client program must also match:</p>

<pre>
import com.freshsources.MyPackage.*;
</pre>

<p>Don't forget to keep the parent directory in the classpath or Java won't find your package.</p>

<h4><FONT COLOR="#000080">The Default Package</FONT></H4>

<p>The types defined in a Java source file that does not have a package statement belong to the unnamed package (or as I and some others prefer to call it, the <I>default package</I>). While you usually think of the default package as the current directory, any <B>.class</B> files in a classpath directory are also part of the default package. To see how this works, place the following file in the root directory:</p>

<pre>
// c:\FindMe.java
class FindMe {
   static void foo() {
      System.out.println
         ("Found Me!");
    }
}
</pre>

<p>Now go to any other directory and create this file:</p>

<pre>
// &lt;any other dir.&gt;\Search.java
class Search {
   public static void main
      (String[] args) {
      FindMe.foo();
   }
}
</pre>

<p>Neither of these files belong to a named package, so they will belong to the default package if their respective directories are in the classpath. To compile, enter the following from the current directory (where you defined <B>Search.java</B>):</p>

<pre>
javac -classpath c:\ Search.java
</pre>

<p>This tells the compiler that it can find <B>FindMe.class</B> (or <B>FindMe.java</B>, if necessary) in <B>"c:\"</B>. To load and execute <B>Search.class</B>, enter:</p>

<pre>
java -classpath c:\;. Search
</pre>

<p>For this invocation of the Java virtual machine the default package includes <B>"c:\"</B> and <B>"."</B>, so <B>FindMe.class</B> loads successfully and the output is <B>"Found me!"</B>, as expected.</p>

<h4><FONT COLOR="#000080">Package Access</FONT></H4>

<p>Note that neither <B>Search</B> nor <B>FindMe</B> were declared as public, nor was <B>FindMe.foo</B>, and yet I was able to access <B>FindMe.foo</B> from within <B>Search</B>. Why? Because the two classes are in the same package. Any definition lacking an explicit access specifier has package access, which means that it is visible in any method within its package. Since classes such as <B>Search</B> and <B>FindMe</B> keep no secrets from each other, they are said to be "friendly." This arrangement explains why the <B>friend</B> keyword is not necessary in Java &#151; if you need to break traditional encapsulation boundaries, put the related classes in the same package.</p>
<p>The C++ program in <a href="list1.htm">Listing 1</a> illustrates how a controlled resource can select its clients. Since the <B>Resource</B> class has a private constructor, <B>Resource</B> objects can be allocated only in methods of the <B>Resource</B> class itself, or in friend methods. To achieve the same thing in Java, simply put <B>Consumer</B> and <B>Resource</B> in the same package and omit any access specifiers for <B>Resource</B>, as I did in <a href="list2.htm">Listing 2</a>. The two classes don't have to be in the same <B>.java</B> file, of course, nor even in the same directory &#151; just in the same package.</p>
<p>There is an important distinction between friends in C++ and friendly classes in Java. In addition to being more fine-grained (i.e., allowing you to grant friendship on a member function basis as well as a class basis), C++ friendship is a one-way proposition &#151; for example, <B>Resource</B> has no access to members of the <B>Consumer</B> class as it does in Java, although its methods could access any friendly methods <B>Consumer</B> might have. This is not a problem, of course &#151; you can simply use the <B>private</B> keyword as needed.</p>
<p>In previous installments of this column I've only used the default package in the current directory. I've also adhered to the policy of having exactly one public class per file, with the same name as the file. I did this to illustrate the connection between file names and public class names in Java, and to encourage habits that will make the transition to using named packages as smooth as possible. But there is a good reason not to make classes in the default package public. Actually, there are two reasons:</p>
<p>1.  Because it's not necessary! Package access is all you need in the default package, and it's always a good idea to minimize the amount of visibility you give a class.</p>
<p>2.  To minimize name resolution conflicts.</p>
<p>To illustrate the second point, recall the error that occurred above when I put <B>MyClass</B> and <B>MyOtherClass</B> in the root directory. Since they weren't in a directory appropriately named for their package, there was a problem. Suppose for the moment that from some previous experimentation I had placed <B>MyClass</B> and <B>MyOtherClass</B> in the root directory but in the default package. As long as I give them only package access, the compiler will bypass them on its way to find the class files in <B>c:\MyPackage</B>. It's only when the classes are public that you have a problem. So, from now on, I will no longer give classes in the default package public access, and neither should you.</p>

<h4><FONT COLOR="#000080">JAR Files</FONT></H4>

<p>So far it looks like that the only way you can access a package is to search a directory with the appropriate name. This is okay for local applications, but what about executing applets on the web? It turns out that a considerable amount of overhead incurs from establishing an HTTP connection to a host. If you have need for several class files for an applet to run, your browser will likely spend more time just opening and closing connections than in downloading code. Although I won't discuss applets in this article (nor for a long time to come), I'll discuss the solution to this inconvenience: Java Archive files, or JAR files. JAR files are cross-platform archives that can hold an arbitrary number of files, and are used mostly to store <B>.class</B> files and auxiliary files such as image and audio files. The java tools understand JAR file format and automatically extract what they need. To create a JAR file, use the <B>jar</B> command, which is reminiscent of the Unix <B>tar</B> command, and the following options as needed:</p>

<pre>
c        create jar file
t        list table of contents
x        extract files
u        update
v        verbose output
f        use file instead of standard
         input/output
m        read manifest file
0        (the numeral zero) turn off
         compression (for faster
         loading)
M        skip manifest
C        change directory (don't
         include path names in output)
</pre>

<p>To create a JAR file for <B>MyPackage</B> files in <B>c:\MyPackage</B>, you would execute the following command from <B>c:\</B>:</p>

<pre>
jar cvf MyPackage.jar MyPackage\*.class
</pre>

<p>The output would be:</p>

<pre>
added manifest
adding: MyPackage/MyClass.class (in=417) (out=288) (deflated 30%)
adding: MyPackage/MyOtherClass.class (in=432) (out=294) (deflated 31%)
</pre>

<p>As you can see, the <B>jar</B> command compresses files by default. (It uses the popular ZIP compression format). Now that <B>MyPackage</B> is in the root directory, return to the directory containing <B>MyPackageTest.java</B> and execute the following command:</p>

<pre>
javac -classpath .;c:\MyPackage.jar MyPackageTest.java
</pre>

<p>Because the jar file is in the classpath, the compiler searches it and finds <B>MyPackage.MyClass</B> and <B>MyPackage.MyOtherClass</B>. It's not enough to just list the directory where the jar file resides; you must place the full path of the JAR file in the classpath. Since the package-to-directory name associations still apply, it's important that the <B>.class</B> files in the JAR file contain the prefix <B>MyPackage/</B>, which is why I created it from the root directory. It is equally important that the JAR file reside in a classpath directory.</p>
<p>You can even run whole applications from a JAR file. All you need to do is store the name of the starting class in the JAR file's manifest. The manifest is a special JAR file entry that contains meta-information. If you list the JAR file's table of contents, you can see evidence that the manifest exists in the first two lines of output:</p>

<pre>
jar tf MyPackage.jar

/* output:
META-INF
META-INF/MANIFEST.MF
MyPackage/MyClass.class
MyPackage/MyOtherClass.class
*/
</pre>

<p>The manifest resides in a pseudo-directory inside the JAR file named <B>META-INF</B> in the file <B>MANIFEST.MF</B>. To add the starting class to the manifest you use the <B>"m"</B> option. To illustrate, let's just put a "Hello, world" program in a JAR file. First create the source, compile it, and then archive it, as follows:</p>

<pre>
// Hello.java
class Hello {
   public static void main (String[] args) {
      System.out.println
         ("Hello, world");
   }
}

javac Hello.java
jar -cf Hello.jar Hello.class
</pre>

<p>To enter the <B>Hello</B> class as the main class for the JAR file, create a text file of any name (<B>manifest.txt</B>, say) that contains the following line:</p>

<pre>
Main-class: Hello
</pre>

<p>To update the manifest, use this jar command:</p>

<pre>
jar umf manifest.txt Hello.jar
</pre>

<p>Alternatively, you could have entered the manifest entry when you created the JAR file in the first place, as in (broken here to fit the column):</p>

<pre>
jar cmf manifest.txt Hello.jar
   Hello.class
</pre>

<p>Now you can run the JAR file as follows <a href="#2">[2]</a>:</p>

<pre>
java -jar Hello.jar
</pre>

<p>To read more on JAR files, visit <B>http://java.sun.com/docs/books/tutorial/jar/basics/</B>.</p>

<h4><FONT COLOR="#000080">Standard Packages</FONT></H4>

<p>The standard Java library comes in packages, such as <B>java.lang</B>, <B>java.util</B>, <B>java.io</B>, etc. Since packages must have associated directories, you might expect your installation to have subdirectories such as <B>java\lang</B>, <B>java\util</B>, and <B>java\io</B>. That would work fine, but why bother when the Java tools can read JAR files? If you have a Java 2 JDK installation, you'll find the library packages in <B>\jdk1.2\jre\lib\rt.jar</B>, as the following jar command reveals:</p>

<pre>
jar tf \jdk1.2\jre\lib\rt.jar

/* Output:
META-INF/
META-INF/MANIFEST.MF
com/
com/sun/
com/sun/CORBA/
com/sun/CORBA/ClientGIOP.class
com/sun/CORBA/ClientRequest.class
etc.
*/
</pre>

<p>Inspect the full output and you'll see all your favorites, like <B>java/lang/System.class</B> and <B>java/util/Vector.class</B>.</p>
<p>But how do the compiler and runtime system find <B>rt.jar</B> if it's not in the classpath? Starting in Java 2, the system path is searched separately, before the classpath. (And as you know, <B>java.lang</B> is automatically imported.) In previous versions of Java, the installation process created a default classpath that referred to the library archive, such as (broken here to fit the column):</p>

<pre>
CLASSPATH=.;c:\jdk1.1.7\lib\
   classes.zip
</pre>

<p>(Yes, Java can read ZIP files too!)</p>

<h4><FONT COLOR="#000080">Summary</FONT></H4>

<p>The tools and conventions of Java give you a lot of help in organizing your applications. Packages, like namespaces in C++, allow you to group related types together and provide a layering mechanism to effectively manage name lookup. Packages go beyond what C++ offers, however, in facilitating automatic program construction and delivery.</p>

<h4><FONT COLOR="#000080">Notes</FONT></H4>

<p><a name="1"></a>[1]  While this works as advertised when executing Java programs, when compiling, things are not so simple. You must be sure to delete all imported <B>.class</B> files from a previous compile for javac to find the new files when you change the classpath.</p>
<p><a name="2"></a>[2]  This syntax is new to Java 2. In Java 1.1 you used the <B>jre</B> command, as in <B>jre -classpath Hello.jar Hello</B>. The manifest is new in Java 2.</p>

<p><i><B>Chuck Allison</B> is Consulting Editor and a columnist with </I>CUJ<I>. He is the owner of Fresh Sources, a company specializing in object-oriented software development, training, and mentoring. He has been a contributing member of J16, the C++ Standards Committee, since 1991, and is the author of </i>C and C++ Code Capsules: A Guide for Practitioners<i>, Prentice-Hall, 1998. You can email Chuck at <B>cda@freshsources.com</B>.</i></p>

<h4><a href="../../../source/1999/sep99/allison.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY>
</HTML>
