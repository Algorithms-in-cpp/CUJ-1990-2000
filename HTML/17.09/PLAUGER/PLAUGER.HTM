<HTML>   
     <HEAD>
<TITLE>September 1999/Standard C/C++</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocsep.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Standard C/C++: Why 2K?</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">P. J. Plauger</FONT></H3>

<BLOCKQUOTE>
<p>Okay, so the millennium is almost upon us. But what does that have to do with the C and C++ standards?</p>
</BLOCKQUOTE>

<hr>
<BLOCKQUOTE>

<p>We're coming down to the wire. By the time you read these words, you'll probably already have planned where you're going to spend New Year's Eve. The Big Odometer rarely turns over even two nines at once in a person's lifetime. Watching it turn over three of 'em is a pretty big deal. The purists can argue all they want about when the next century begins. All the rest of us will be partying big time, even if we're theoretically a year early.</p>
<p>As a pundit, I'm fast running out of room for punditry. I may be the only nominal computer expert on the planet who hasn't already milked at least one Y2K contract for a bit of extra spending money this year. As a civilian, I haven't even stored up canned goods and/or gold coins. (Though I am seriously considering getting in an extra gallon of milk on December 30th. Unless my teenage son is out of the house by then, as he earnestly plans.) I keep telling interviewers that I think the Y2K problem is overblown. For some reason, they don't call me back for follow-up interviews.</p>
<p>I do intend to save all my copies of <I>CUJ.</I> If I'm wrong about the impending societal disaster wrought by rogue software, I may well be burning them for fuel soon. Winters can be cold in Concord, Massachusetts. But truth to tell, I always save my copies of <I>CUJ</I> anyway. And <I>PC Magazine</I> offers a lot more BTUs per issue. It is my emergency fuel supply of choice.</p>
<p>So where does that leave me as a pundit? About where most other programmers are &#151; stuck somewhere in the middle. As a vendor, I can't sell anything unless I promise that the products I supply will not add to the disaster. As a customer, I can't buy software unless I promise not to sue if the products I buy go nova in the next year or so. Maybe somebody out there besides me has some residual liability for Y2K software failures, but I suspect he's shoveling chicken manure most of the time and doesn't yet know he needs special insurance.</p>
<p>And that brings me to the serious issue I want to discuss this month. What are the implications of the turn of the millennium to code that endeavors to conform to the C or C++ standards? As a library vendor, I have had to ask that question, in one form or another, several times over the past few months. In some cases, it's lawyerly CYA that stimulates the query. Buyers the world around are setting up to blame their suppliers if anything goes wrong. But in other cases, it's genuine concern on the part of programmers. They want to know whether Standard C or C++ libraries will sabotage their best efforts to make their code Y2K safe. I can only sympathize with that desire.</p>
<p>To some extent, we can argue that this is a non problem (and we do). The relevant standards dictate how a conforming implementation is supposed to work. In some cases, it dictates that years are represented as two decimal digits. Aha, say the doom sayers. This is just the sort of thing that is going to cause airplanes to fall from the sky. But no, say us standards wonks. The standards <I>dictate</I> the use of two-digit dates in some cases. It is not an accident or short sightedness. A program that hopes for more than a two-digit date in these cases does not conform to the standard. You can't hold a conforming implementation responsible for problems that arise from its use in nonconforming ways.</p>
<p>Several companies provide validation suites for testing conformance of C and C++ implementations to the ISO standards. (Mine happens to be one of them.) Compiler and library vendors strive continually to get high marks when tested with these suites. We vendors can rightly argue that we have performed due diligence &#151; a nice lawyerly term &#151; in ensuring that our code meets specifications.</p>
<p>Do these suites test specifically for Y2K bugs? In the case of other suite vendors, I don't honestly know. My experience, however, is that they test for far <I>more</I> than problems that might occur in the next couple of months. So I am pretty confident that a validated library is as Y2K compliant as the C or C++ standards require. Looks like due diligence to me.</p>
<p>Still, it doesn't hurt to take a close look at where Y2K problems might arise in the standard libraries. Even if problems don't occur in the libraries proper, those potential trouble spots highlight where a program can depend on dates. And that tells you where to look for potential Y2K problems in the program.</p>

<h4><FONT COLOR="#000080">Standard C Library</FONT></H4>

<p>The people who first invented Unix and C were amateur astronomers. (See the chapter on <B>&lt;time.h&gt;</B> in my book, <I>The Standard C Library,</I> Prentice-Hall, 1992.) Thus, both the OS and the language were precocious in their treatment of times and dates. From the outset, Unix has stored times as a 32-bit signed count of seconds since 1 January 1970. Moreover, all stored times are in terms of Greenwich Mean Time (GMT, which has since become UTC). Dates are explicitly converted, for display, to a specified local time zone.</p>
<p>By contrast, most other operating systems keep track of local time. Hiccups are inevitable as you move in and out of daylight savings time. Files exchanged across time zones require careful adjustment of last-modified dates, or they raise havoc with programs that reconcile file versions.</p>
<p>The C library started out on Unix, inheriting its attention to such details. As we developed the C Standard, however, we had to dilute the requirements for the time functions more than a little. It is, after all, a standard for C that should apply across all operating systems.</p>
<p>Truth to tell, the C Standard promises very little about the ability to tell time. In principle, a Standard C library could report all times as January 19, 1987 and arguably comply. But in practice, market forces dictate that a decent library do its best to tell time and keep track of a reasonable range of dates with some precision.</p>
<p>All the time-sensitive functions in the Standard C library are declared in the header <B>&lt;time.h&gt;</B>. <a href="list1.htm">Listing 1</a> shows a synopsis of this header. It defines three types that have some effect on representing times. (The type <B>size_t</B> is defined for convenience in several standard headers. It has no direct involvement in representing times.)</p>

<UL><LI><B>clock_t</B> is some arithmetic type returned by the function <B>clock</B>. It counts "clock ticks" for some internal timer that measures elapsed execution time. It has no concept of date. You use it to measure intervals of time while a program is running.</LI>
<LI><B>time_t</B> is some arithmetic type returned by the function <B>time</B> to represent the current date and time. It is also returned by the function <B>mktime</B> to represent a date and time specified in terms of its components. (See <B>struct tm</B> below.) It nominally counts the number of seconds that have elapsed since 1 January 1970 UTC, as I indicated above.</LI>
<LI><B>struct tm</B> is a structured type that represents a time and date in terms of the usual components, each represented as a small integer.</LI></UL>

<p>If <B>time_t</B> is represented as a signed 32-bit count of seconds, there is no Y2K problem here. But there is certainly brewing a Y2.037K problem. Signed integer overflow occurs after about 68 years worth of seconds with this representations. Of course, the C Standard does not require that <B>time_t</B> be a 32-bit integer, or that it represent times to one second resolution. So there is more than one way to head off this problem, and nearly four decades in which to do it. For my part, I hope to be retired before then. I leave the implementation to you.</p>
<p><B>struct tm</B> is probably even less of a problem. It counts the years since 1900 as a signed <B>int</B>, in the field <B>tm_year</B>. Even with 16-bit <B>int</B>s, that allows for a broad range of dates. Note that <B>tm_year</B> is <I>not</I> just a two-digit year count. The year 2000, for example, is represented as the value 100, and 2001 is 101. No confusion or ambiguity here.</p>
<p>The functions that care about what year it is are:</p>

<UL><LI><B>asctime</B>, which converts a <B>struct tm</B> to text representation</LI>
<LI><B>ctime</B>, which converts a <B>time_t</B> to text representation (a combination of <B>localtime</B> and <B>asctime</B>)</LI>
<LI><B>gmtime</B>, which converts a <B>time_t</B> to a <B>struct tm</B> for GMT (UTC)</LI>
<LI><B>localtime</B>, which converts a <B>time_t</B> to a <B>struct tm</B> for the local time zone</LI>
<LI><B>mktime</B>, which converts a <B>struct tm</B> to a <B>time_t</B></LI>
<LI><B>strftime</B>, which converts a <B>struct tm</B> to text representation under control of a format string</LI></UL>

<p>Of these, only the last offers much opportunity for a genuine Y2K problem. Two of its format specifiers are:</p>

<UL><LI><B>%y</B>, which is replaced by the year without century as a decimal number (<B>00-99</B>).</LI>
<LI><B>%Y</B>, which is replaced by the year with century as a decimal number.</LI></UL>

<p>If you convert dates with the former, you will indeed create ambiguities between years like 1900 and 2000. But you won't be unearthing Y2K problems in the library. It just does what it's told to do.</p>

<h4><FONT COLOR="#000080">Standard C++ Library</FONT></H4>

<p>The Standard C++ library sits atop the Standard C library, both conceptually and in practice. That means it's likely to be no better &#151; and no worse &#151; in dealing with dates. The time-sensitive functionality is all encapsulated in a set of classes and template classes defined in the header <B>&lt;locale&gt;</B>:</p>

<pre>
class time_base;
template&lt;class E, class InIt&gt;
    class time_get;
template&lt;class E, class InIt&gt;
    class time_get_byname;
template&lt;class E, class OutIt&gt;
    class time_put;
template&lt;class E, class OutIt&gt;
    class time_put_byname;
</pre>

<p>Class <B>time_base</B> simply encapsulates an enumeration which is common to the various template classes. Template class <B>time_get_byname</B> lets you construct a <B>time_get</B> object whose behavior is determined by some named locale. And template class <B>time_put_byname</B> performs much the same service for <B>time_put</B>. These three entities otherwise have no direct effect on the representation of times in a C++ program.</p>
<p><a href="list2.htm">Listing 2</a> shows a synopsis of template class <B>time_get</B>. It is a kind of locale facet. (See Standard C/C++: The facet <B>time_get</B>, <I>CUJ,</I> July 1998.) I won't describe facets in any detail here, having spent about a year discussing this extensive topic. Just know that a facet encapsulates rules for converting between text representation in files or streams and internal encoded forms. In particular, <B>time_get</B> is the agent responsible for parsing text and turning it into an internally encoded date and time &#151; as a <B>struct tm</B>, in fact.</p>
<p>The function at the heart of any Y2K issues is the protected virtual member function <B>do_get_year</B>. It reads text and endeavors to parse a year number, for our old friend <B>tm_year</B>. How does it do it? The C++ Standard is characteristically laconic when it comes to the particulars of this or several other facets. All it says is:</p>

<BLOCKQUOTE>
Reads characters starting at <B>s</B> until it has extracted an unambiguous year identifier. It is implementation-defined whether two-digit year numbers are accepted, and (if so) what century they are assumed to lie in. Sets the <B>t-&gt;tm_year</B> member accordingly. </p>
</BLOCKQUOTE>

<p>We could take this to mean that <B>100</B> stands for the year 100 AD (or CE, in politically correct Newspeak). That is arguably unambiguous to a Christian, I suppose. But I'm willing to bet that someone trying to make old code Y2K compliant would prefer a more liberal interpretation. Here's what our documentation says, by way of more detail:</p>

<BLOCKQUOTE>
<p>The year input field is a sequence of decimal digits whose corresponding numeric value must be in the range [1900, 2036). The stored value is this value minus 1900. In this implementation, a numeric value in the range [0, 136) is also permissible. Values in the range [0, 69) represent the range of years [2000, 2069). Values in the range [69, 136) represent the range of years [1969, 2036).</p>
</BLOCKQUOTE>

<p>Note the attempt to ward off problems with the Y2.037 bug by warning of the limited valid range. Note also the meanings given various small numbers. The idea is to give the most likely colloquial meaning to dates within a few decades of the millennium, plus or minus. Two caveats, however:</p>

<UL><LI>Not all implementations are required to behave this way, so don't count on such behavior for portable code.</LI>
<LI>This is <I>not</I> exactly how Microsoft VC++ behaves, or other older implementations of the Dinkum C++ Library. We pushed the range [0, 69) into the 21st century at the behest of a client with a Unix-based C++ compiler. But the more common dates in the range [69, 136) behave as before.</LI></UL>

<p>Finally, <a href="list3.htm">Listing 3</a> shows a synopsis of template class <B>time_put</B>. It is not very revealing, but I provide it for completeness. What you need to know is that the protected virtual member function <B>do_put</B> is the agent responsible for turning a <B>struct tm</B> into text, under control of a format specifier.</p>
<p>The format specifiers happen to be the same as for the Standard C library function <B>strftime</B>. A sensible implementation actually calls this function to do the work (though with a bit of finagling, I hasten to point out). So <B>time_put</B> is not likely to introduce any new opportunities for Y2K problems.</p>
<p>I hope this brief litany convinces you that the C and C++ libraries are not likely to be a rich source of Y2K bugs. The harder job, of course, is convincing your boss. And your customers. We'll all know more in a matter of months, I suppose. </p>

<p><i><B>P.J. Plauger</B> is Senior Editor of </i>C/C++ Users Journal<i> and President of Dinkumware, Ltd. He is the author of the Standard C++ Library shipped with Microsoft's Visual C++, v5.0. For eight years, he served as convener of the ISO C standards committee, WG14. He remains active on the C++ committee, J16. His latest books are </i>The Draft Standard C++ Library<i>, </i>Programming on Purpose<i> (three volumes), and </i>Standard C<i> (with Jim Brodie), all published by Prentice-Hall. You can reach him at <B>pjp@plauger.com</B>.</i></p>


<h4><a href="../../../source/1999/sep99/plauger.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY>
</HTML>
