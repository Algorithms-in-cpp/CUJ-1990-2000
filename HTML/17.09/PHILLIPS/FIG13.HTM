<HTML><HEAD>
<TITLE>September 1999/Searching for Solutions With AI/Figure 13</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Figure 13: Partial implementation of the uniform cost algorithm for the best-route problem</A></h4>
<pre>
#define NOTHING -1
#define H       10
#define V       10


int cost_matrix[H][V] =
        P0  P1  P2  P3  P4  P5  P6  P7  P8  P9
P0   { {-1,  5,  5,  6, -1,  7, -1, -1, -1, -1},
P1     { 5, -1, -1, -1, -1, -1, -1,  4, -1, -1},
P2     { 5, -1, -1, -1,  6, -1, -1, -1, -1, -1},
P3     { 6, -1, -1, -1,  5, -1, -1, -1,  2, -1},
P4     {-1, -1,  6,  5, -1, -1,  4, -1, -1,  5},
P5     { 7, -1, -1, -1, -1, -1,  3, -1, -1, -1},
P6     {-1, -1, -1, -1,  4,  3, -1, -1, -1, -1},
P7     {-1,  4, -1, -1, -1, -1, -1, -1, -1,  2},
P8     {-1, -1, -1,  2, -1, -1, -1, -1, -1,  1},
P9     {-1, -1, -1, -1,  5, -1, -1,  2,  1, -1}};

struct node {
   int    number;
   int    cost;
   struct node *parent;
   struct node *next;
};
   
struct node *CLOSED, *n, *newnode, *OPEN;

// Initialize this problem.

OPEN   = NULL;
CLOSED = NULL;

n = create_new_node(0, 0);
add_to_list(&amp;OPEN, &amp;n);

while(searching){

   if(is_empty(OPEN))
      no_solution_exists(&amp;searching);

   else{  /* OPEN list is not empty */

// Take the node on OPEN list that has the lowest 
// cost and put it on the CLOSED list.

      n = remove_from_list(&amp;OPEN, goal);
      add_to_list(&amp;CLOSED, &amp;n);

      if(is_a_goal_node(n, goal))
         solution_found(n, &amp;searching);
      else{  /* else not done yet */

// Expand node n using the cost matrix.

         for(i=0; i&lt;H; i++){
            cost = cost_matrix[n-&gt;number][i];
            if(cost != NOTHING){

// First expand n if it is the start node.

               if(n-&gt;parent == NULL){
                  newnode = create_new_node(i, cost+n-&gt;cost);
                  newnode-&gt;parent = n;
                  add_to_list(&amp;OPEN, &amp;newnode);
               }  /* ends if start node */

// Expand nodes that are not the start node.
// Do not expand the parent node of node n.

               else{  /* not start node */
                  if((n-&gt;parent)-&gt; number != i){
                     newnode = create_new_node(i, cost+n-&gt;cost);
                     newnode-&gt;parent = n;
                     add_to_list(&amp;OPEN, &amp;newnode);
                  }  /* ends if */
               }  /* ends else not start node */

            }  /* ends if != NOTHING */
         }  /* ends expanding loop over i */

      }  /* ends else not done yet */

   }  /* ends else OPEN is not empty */
}  /* ends while searching */

</pre>
</BODY>
</HTML>
