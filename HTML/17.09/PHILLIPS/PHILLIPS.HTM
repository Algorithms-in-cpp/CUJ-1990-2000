<HTML>   
     <HEAD>
<TITLE>September 1999/Searching for Solutions With AI</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocsep.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Algorithms</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Searching for Solutions With AI</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Dwayne Phillips</FONT></H3>

<BLOCKQUOTE>
<p>Many problems simply involve searching through a large bounded set of possibilities. Just knowing the basic moves can help you organize an orderly search.</p>
</BLOCKQUOTE>

<hr>
<BLOCKQUOTE>

<p>People are good at solving problems. We can "figure out" how to take three kids to five soccer games in one day. We can also figure out how to visit four stores in one day while minimizing gas usage and avoiding traffic delays. These everyday problems are stressful at times, but are relatively easy to solve. However, when the problem involves moving 100,000 people and their supplies, or routing one million messages through 100,000 nodes in a network, we need help.</p>
<p>Searching is an AI (Artificial Intelligence) technique that finds solutions to such problems <a href="#1">[1]</a>. Search systems search through a tree of possible states of a problem to find a goal or solution. This works with problems that require deducing or inferring solutions.</p>
<p>This article discusses the topic of problem solving via searching. The article shows how to use the depth-first, breadth-first, and uniform cost algorithms to solve basic problems. It also describes source code that implements the algorithms.</p>

<h4><FONT COLOR="#000080">Searching With AI</FONT></H4>

<p>The concepts of searching are easiest to understand given an example. <a href="fig1.htm">Figure 1</a> shows three blocks. The figure shows all the possible ways of stacking three blocks; each different way is considered a state of the system. The top node of the tree represents the initial problem state, in which the blocks are all sitting on a table. The other nodes in the tree show the other possible combinations of the blocks sitting on one another and on the table.</p>
<p>The tree is actually a database, which is the first part of a search system. The database represents the problem situation, which consists of a start node and all other possible nodes.</p>
<p>The second and third levels of the tree were created by applying operators. Operators are the second part of a search system. In this case, the operators in the system work by moving a block. In this example three rules govern the operators:</p>
<p>Rule 1: Do not move a block unless it is uncovered (no blocks sitting on top of it).</p>
<p>Rule 2: Do not put a block on top of another if the second block has something on it (the second block must be uncovered).</p>
<p>Rule 3: Do not not repeat a state.</p>
<p>These rules are not universal for search systems. They are specific to this example. Different situations will require different rules.</p>
<p>The third part of a search system is the control strategy. The control strategy determines what to do next. <a href="fig1.htm">Figure 1</a> shows the entire search space, but does not show the order in which each node was created. If the search program created the second level of the tree before going to the third level, that would be called a breadth-first control strategy. In contrast, the depth-first control strategy would create the left-most node of level two, then the left-most node of level three, before moving back up to level two. The choice of control strategy can affect the answer the search system produces.</p>
<p>The control strategies presented in this article are called "blind" strategies. They assume nothing about the problem and search blindly for an answer. Heuristic control strategies use knowledge of the problem to find answers more efficiently. Efficiency means added complexity, however. Hueristic control strategies are beyond the scope of this article.</p>
<p>The example of <a href="fig1.htm">Figure 1</a> is known as a <I>state-space representation.</I> This is an AI term, which means that the search system will (1) start at the top of a tree of nodes, (2) use the operators to create new nodes, and (3) move or "reason" forward to reach a goal state.</p>
<p>The solution is the path from the start node to the goal node. In order to present the complete solution to the user, it must be possible to trace back from the goal node to the start node. So at every node in the tree (except the top), it must be possible to move upward to its parent node.</p>
<p>How can we go from all three blocks sitting on the table to having block 0 on top of block 1 on top of block 2? In <a href="fig1.htm">Figure 1</a> the top node is the start node. The goal node is in the third level, third from the right. The sequence of moves that represents the solution is found in the path from the start node to the goal node:</p>

<pre>
0 1 2 together on the table  -&gt;
0 2 on the table, and 1 on 2 -&gt;
0 on 1 on 2
</pre>

<p>That problem was easy. The next sections will use harder problems to illustrate the three control strategies. These problems are easy enough to solve by hand, but could be extended to where they are impossible to solve by hand.</p>

<h4><FONT COLOR="#000080">Depth-First Searching</FONT></H4>

<p>Depth-first searching is one of the three simple blind-search control strategies. Depth-first expands the search space downwards first. The block situation shown earlier will illustrate this control strategy. (The blocks problem is not just a child's game. It represents the problem of juggling logistics. How can we move 500 truckloads of supplies in 200 trucks to 100 different locations? That is not a child's game, but is a similar problem.)</p>
<p><a href="fig2.htm">Figure 2</a> shows the start node (0 on 1, 2 on table) and goal node (0 on 1 on 2) for the example. <a href="fig3.htm">Figure 3</a> shows the depth-first control strategy algorithm. The algorithm uses two lists of nodes. The <B>OPEN</B> list contains nodes that have not been expanded (they have no children in the tree) while the <B>CLOSED</B> list contains nodes that have been expanded. The search system expands nodes using the operators and rules until a goal node is created. The solution is the trail from the goal node back to the start node.</p>
<p><a href="fig4.htm">Figure 4</a> shows the tree created by depth-first searching. The node numbers (<B>N0</B> through <B>N11</B>) show the order in which the nodes are created. The blocks under the node numbers represent the state at a given node. Node <B>N11</B> is the goal node. The solution is the trail through nodes <B>N0</B>, <B>N1</B>, <B>N6</B>, and <B>N11</B>.</p>
<p><a href="fig5.htm">Figure 5</a> shows part of the source code that implements the depth-first algorithm for the blocks situation. (The full source code is available on the <I>CUJ</I> ftp site. See p. 3 for downloading instructions.) The <B>node</B> struct is the key data structure in the program. It defines an array, named <B>blocks</B>, which represents the configuration of the blocks in the current state. Each element in the <B>blocks</B> array represents a particular block (<B>blocks[0]</B> represents block 0, and so on). The value stored in each element represents the block that is currently underneath. (If the table is underneath, the value is -1.)</p>
<p>The initial and goal states are created a few lines down in the source code. The code shows that initially the table is under blocks 1 and 2 while block 1 is under block 0.</p>
<p>Note the pointers in the <B>node</B> struct. The <B>next</B> pointer is necessary because the nodes will reside in the linked lists pointed to by <B>OPEN</B> and <B>CLOSED</B>. The <B>parent</B> pointer for each node points to that node's parent node in the tree. Providing a parent pointer allows the search system to trace back through the tree to show the solution.</p>
<p>This program and the two described later do not actually build tree data structures. This may be confusing. I use tree diagrams because they make good illustrations of what is happening. The algorithms, however, do not explicitly refer to trees. The nodes in these algorithms do not need to know which nodes are their children or other types of information common in tree data structures. A node only needs to know its parent.</p>
<p>The <B>while(searching)</B> area of <a href="fig5.htm">Figure 5</a> is the major part of the algorithm represented in <a href="fig3.htm">Figure 3</a>, so it comprises the major part of the source code. The subroutines invoked do what their names imply.</p>
<p>The section that expands node <B>n</B> is the part of this program that is unique. All depth-first search systems will use code similar to that shown, except for the code in this section. This section is specific to the block problem being solved. The next two programs have the same characteristic. The bulk of the code in these programs is not specific to any problem; the code that expands a node is custom tailored to the problem at hand.</p>
<p>The loop over <B>i</B> does the node expansion. In this loop the program looks at each block and determines if it can be moved. The code uses the three rules listed above and repeated in the listing. The first test (<B>if(is_uncovered(n, i))</B>) checks whether block <B>i</B> at node <B>n</B> is covered. If the block is covered, it cannot be moved so the algorithm proceeds to the next node.</p>
<p>If the block is not covered, the program attempts to move it. First, the program tries to move it to the table. Next, it tries to move the block on top of each of the other blocks in turn. (The code here will work for <B>COUNT+1</B> blocks, not just three.) The subroutine calls are written so as to ensure that the operator rules are obeyed.</p>
<p>This program produces the correct answer for the given problem. Other problems with other start and goal states can be simulated by changing the initialization part of the code.</p>

<h4><FONT COLOR="#000080">Breadth-First Searching</FONT></H4>

<p>Breadth-first searching is another of the three simple blind-search control strategies. Breadth-first search expands the search space outward first by filling in a level of the tree before going down to the next, deeper level.</p>
<p><a href="fig6.htm">Figure 6</a> shows the breadth-first control strategy. This is almost identical to the depth-first strategy in <a href="fig3.htm">Figure 3</a>. The major difference is in the third line from the bottom. The breadth-first algorithm places all nodes expanded from node <B>n</B> at the end of the <B>OPEN</B> list instead of the beginning. In the breadth-first scheme, the nodes are expanded in the order they are created. This ensures that each level in the search space tree is filled before going down to the next level.</p>
<p>A robot navigation problem will illustrate breadth-first searching. <a href="fig7.htm">Figure 7</a> shows a simple course that a robot must navigate. The circles are obstacles. The robot enters at any of the four squares at the top of the matrix and tries to reach any square at the bottom.</p>
<p>The operators for this example follow these rules: a robot may (1) move down one square, and if that is not possible; (2) move left one square, and if that is not possible; (3) move right one square. The robot would have a map of the course before moving. The robot would find a path through the map, then move through that path in the obstacle course.</p>
<p><a href="fig8.htm">Figure 8</a> shows the state search tree for this problem. Each node contains the coordinates of a square, and represents a square that the robot can visit. The goal node has the coordinates (3, 3). This node occurs in the tree twice. The breadth-first search will find the (3, 3) node in the far-right branch of the tree first. (Breadth-first searching always finds the goal node with the least depth first.) The solution to the navigation problem is to follow the rightmost branch of the tree.</p>
<p>This navigation example is easy. But suppose the course were 1,000 by 1,000 and had several thousand obstacles. That would be too much for a person, but a search system would solve it as easily as it solves the example.</p>
<p><a href="fig9.htm">Figure 9</a> shows part of the source code that implements the breadth-first algorithm for the robot navigation. The integer matrix holds the navigation course, with ones representing obstacles. The <B>node</B> struct is similar to that in <a href="fig5.htm">Figure 5</a>. Here, the data for the problem is kept in the x and y coordinates. The <B>next</B> and <B>parent</B> pointers perform the same role as in the previous example.</p>
<p>The program initializes this problem by allowing the robot to enter the course at the three open squares in the top row of the matrix. The <B>while(searching)</B> section performs the searching part of the algorithm. The code follows the rules given above by first trying to move the robot down one square. If that is not possible, it tries to move the robot left one square, then right one square.</p>
<p>A major difference in this program is not shown in the figure. The <B>add_to_list</B> subroutine adds the node to the end of the list instead of the start of the list as was done in the depth-first program.</p>

<h4><FONT COLOR="#000080">Uniform Cost Searching</FONT></H4>

<p>Uniform cost searching is the third of the three simple blind-search control strategies. It is similar to breadth-first searching, but it adds the concept of cost.</p>
<p>Cost is important in the real world. The previous examples assumed that going from one state to any number of other states was the same. In real life, however, different moves rarely cost the same. Locations have different distances or difficulty separating them, and the cost to go to these locations is different.</p>
<p><a href="fig10.htm">Figure 10</a> shows the uniform cost algorithm. This is similar to the breadth-first algorithm shown in <a href="fig6.htm">Figure 6</a>. The main differences are references to cost. Also note that when a node is removed from the <B>OPEN</B> list, the node with the lowest cost is removed.</p>
<p>Finding the shortest path through a network will illustrate the uniform cost control strategy. <a href="fig11.htm">Figure 11</a> shows a network of points. This could be a map of cities, a network of computers, a network of telephone switches, etc. The numbers between the points represent the distances (costs of moving) from one point to another.</p>
<p><a href="fig12.htm">Figure 12</a> shows the state search tree for moving from point <B>P0</B> to point <B>P9</B>. There are five different paths between these two points. The shortest or cheapest path has a total distance of nine as shown in the path second from the right. The solution to moving from point <B>P0</B> to <B>P9</B> is to traverse the path <B>P0</B>, <B>P3</B>, <B>P8</B>, and <B>P9</B>.</p>
<p>Again, this is a simple example that a person could solve in her head. Real life problems, however, can have hundreds of points (stores needing to distribute products) or thousands (computer and telephone networks). That is too tedious and difficult to solve by hand, but simple for the computer.</p>
<p><a href="fig13.htm">Figure 13</a> shows part of the source code that implements the uniform cost algorithm for moving through the network of points. The <B>cost_matrix</B> shows the cost of moving between two points. It works like one of those distance tables found in a road atlas. The <B>node</B> struct is similar to those shown in the previous two listings. The data for this problem is kept in the <B>cost</B> variable. As each point is added to the state search tree, its cost is set to the cost of its parent plus the cost of moving from its parent to itself. The <B>next</B> and <B>parent</B> pointers perform the same role as in the previous examples.</p>
<p>The first section of code initializes the problem. The <B>create_new_node</B> routine receives the node number and cost as inputs. This program sets <B>P0</B> as the start point, and allows the user to enter the goal point as an argument (not shown). It is simple to set any points as the start and goal points.</p>
<p>The <B>while(searching)</B> section of code implements the majority of the control strategy. The <B>remove_from_list</B> routine searches through the <B>OPEN</B> list to find the node with the lowest cost. This is the major difference between this program and the others and is the key to finding the cheapest path.</p>
<p>The rest of the code expands the node <B>n</B> pulled from the <B>OPEN</B> list. The code will not expand a node to itself (cost is <B>NOTHING</B>, -1 in the <B>cost_matrix</B>). It will also not expand a node's parent, since that is the same as moving backward in the network.</p>

<h4><FONT COLOR="#000080">Conclusion</FONT></H4>

<p>Searching is a powerful technique for finding solutions to problems that require deduction or inference. This AI technique applies to many practical problems found in logistics, management, shipping, and computer and communications networks. The three simple algorithms presented here will work with problems that are too large and complex for people to solve reliably.</p>
<p>This article did not mention several important topics in searching. It is easy for the state search trees to become large (hundreds of thousands of nodes). Today's desktop computers can handle this with ease. Researchers in past years did not have this hardware, so they developed techniques to limit the search space. Their algorithms are far more complex and efficient than those presented here. Nevertheless, these three algorithms will solve most problems easily.</p>
<p>Searching is a deep topic. Explore these algorithms and apply them to problems you encounter daily.</p>

<h4><FONT COLOR="#000080">Reference</FONT></H4>

<p><a name="1"></a>[1]  Avron Barr and Edward A. Feigenbaum, editors. <I>The Handbook of Artificial Intelligence, Volume 1</I> (William Kauffmann, 1981).</p>

<p><i><B>Dwayne Phillips</B> has worked as a software and systems engineer with the US government since 1980. He has written </i>Image Processing in C,<i> R&amp;D Publications, 1994; and </i>The Software Project Manager's Handbook, Principles that Work at Work,<i> IEEE Computer Society, 1998. He has a Ph.D. in electrical and computer engineering from Louisiana State University. He can be reached at <B>d.phillips@computer.org</B>.</i></p>

<h4><a href="../../../source/1999/sep99/phillips.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY>
</HTML>
