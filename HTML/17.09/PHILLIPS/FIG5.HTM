<HTML><HEAD>
<TITLE>September 1999/Searching for Solutions With AI/Figure 5</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Figure 5: Partial implementation of depth-first algorithm for blocks problem</A></h4>
<pre>
#define COUNT      2
#define TABLE     -1
#define MAX_DEPTH 99


struct node {
   int    number;
   int    blocks[COUNT+1];
   int    depth;
   struct node *parent;
   struct node *next;
};

struct node *CLOSED, *n, *newnode, *OPEN;

// Initialize this problem.
//          0
//          1 2   

OPEN   = NULL;
CLOSED = NULL;

b[0] = 1;
b[1] = TABLE;
b[2] = TABLE;
n    = create_new_node(node_number, b, 0);
node_number++;
add_to_list(&amp;OPEN, &amp;n);

// Make up a goal
//          0
//          1 
//          2  

goal[0] = 1;
goal[1] = 2;
goal[2] = TABLE;


while(searching){

   if(is_empty(OPEN))
      no_solution_exists(&amp;searching);

   else{  /* OPEN list is not empty */

      n = remove_from_list(&amp;OPEN);
      add_to_list(&amp;CLOSED, &amp;n);

      if(n-&gt;depth &lt; MAX_DEPTH){

         for(i=0; i&lt;=COUNT; i++){

/* RULE 1 */ if(is_uncovered(n, i)){

// Special case Try to move block i to the TABLE

               if(n-&gt;blocks[i] != TABLE){
/* RULE 3 */      if(state_doesnt_exist(OPEN, CLOSED, n, i, 
                        TABLE)){
                     newnode = 
                        move_block(n, node_number, i, TABLE);
                     if(is_a_goal_node(newnode, goal)){
                        solution_found(newnode, &amp;searching);
                     }
                     node_number++;
                     add_to_list(&amp;OPEN, &amp;newnode);
                  }  /* ends state_doesnt_exist */
               }  /* ends if TABLE */

// Try to move block i onto block j 

               for(j=0; j&lt;=COUNT; j++){
                  if(i != j){
/* RULE 2 */         if(is_uncovered(n, j)){
/* RULE 3 */            if(state_doesnt_exist(OPEN, CLOSED, n, 
                              i, j)){
                           newnode = move_block(n, node_number,
                                    i, j);
                           if(is_a_goal_node(newnode, goal)){
                              solution_found(newnode, &amp;searching);
                           }
                           node_number++;
                           add_to_list(&amp;OPEN, &amp;newnode);
                        }  /* statedoesntexist */
                     }  /* ends if j is uncovered */
                  }  /* ends if i != j */
               }  /* ends loop over j */


            }  /* ends if is_uncovered */
         }  /* ends loop over i */
      }  /* ends if depth &lt; MAX_DEPTH */
   }  /* ends else OPEN is not empty */
}  /* ends while searching */

</pre>
</BODY>
</HTML>
