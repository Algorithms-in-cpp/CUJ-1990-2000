<HTML><HEAD>
<TITLE>September 1999/Improving Performance with Thread-Private Heaps/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: A program to measure multithreaded performance using a single process heap vs. thread-private heaps</A></h4>
<pre>
// main.cpp
#include &lt;windows.h&gt;
#include &lt;process.h&gt;
#include &lt;iostream&gt;
#include &lt;assert.h&gt;

using namespace std; 

int nNumThreads = 0; 
int nNumAllocs = 0; 
int nAllocSize = 0; 
HANDLE hStartEvent = NULL; 

unsigned __stdcall threadfunc1( void* pParm )
{
   HANDLE hHeap = (HANDLE) pParm; 
   for( int i=0; i&lt;nNumAllocs; i++ ) {
      char* p = (char*) HeapAlloc( hHeap, 0, nAllocSize );
      HeapFree( hHeap, 0, p ); 
   } // for
   return 0; 
}


unsigned __stdcall threadfunc2( void* pParm )
{
   HANDLE hHeap = (HANDLE) pParm; 
   for( int i=0; i&lt;nNumAllocs; i++ ) {
      char* p = 
         (char*) HeapAlloc(hHeap, HEAP_NO_SERIALIZE, nAllocSize);
      HeapFree( hHeap, HEAP_NO_SERIALIZE, p ); 
   } // for
   return 0; 
}


void 
go( char* pTest, char* pNumThreads, char* pNumAllocs, 
   char* pAllocSize )
{
   nNumThreads = atoi( pNumThreads ); 
   nNumAllocs = atoi( pNumAllocs );
   nAllocSize = atoi( pAllocSize ); 

   DWORD dwStart, dwEnd; 
   BOOL bOneHeap = ( lstrcmp( pTest, "1") == 0 ); 
   if( bOneHeap ) {
      cout &lt;&lt; "one heap per process" &lt;&lt; endl; 
   } else {
      cout &lt;&lt; "one heap per thread" &lt;&lt; endl; 
   } // else
   cout &lt;&lt; nNumThreads &lt;&lt; " threads" &lt;&lt; endl; 
   cout &lt;&lt; nNumAllocs &lt;&lt; " allocations per thread" &lt;&lt; endl; 
   cout &lt;&lt; nAllocSize &lt;&lt; " bytes per allocation" &lt;&lt; endl; 

   HANDLE* aThreads = new HANDLE[nNumThreads]; 
   HANDLE* aHeaps = NULL; 
   if( !bOneHeap ) {
      // Create a heap for each thread
      aHeaps = new HANDLE[nNumThreads]; 
      for( int i=0; i&lt;nNumThreads; i++ ) {
         aHeaps[i] = HeapCreate(HEAP_NO_SERIALIZE, 0x100000, 0);
      } // for
   } // if

   unsigned int notused; 
   for( int i=0; i&lt;nNumThreads; i++ ) {
      aThreads[i] = 
         (HANDLE) _beginthreadex(NULL, 0, 
                     (bOneHeap ? threadfunc1 : threadfunc2),
                     (bOneHeap ? GetProcessHeap() : aHeaps[i]), 
                     CREATE_SUSPENDED, &amp;notused ); 
   } // for

   dwStart = GetTickCount();
   for( i=0; i&lt;nNumThreads; i++ ) {
      DWORD dwResult = ResumeThread( aThreads[i] ); 
      assert( dwResult != 0xffffffff );
   } // for

   WaitForMultipleObjects(nNumThreads, aThreads, TRUE, INFINITE);
   dwEnd = GetTickCount(); 

   delete [] aThreads; 
   if( !bOneHeap ) {
      for( i=0; i&lt;nNumThreads; i++ ) {
         HeapDestroy( aHeaps[i] ) ;
      } // for
      delete [] aHeaps;
   } // if

   cout &lt;&lt; "time: " &lt;&lt; (dwEnd-dwStart) &lt;&lt; endl; 
}


int main(int argc, TCHAR* argv[], TCHAR* envp[])
{
   if( argc != 5 ) {
      cout &lt;&lt; "usage: HeapDemo &lt;1|2&gt; &lt;numthreads&gt;"
           &lt;&lt; " &lt;numallocs&gt; &lt;allocsize&gt;" &lt;&lt; endl;
      cout &lt;&lt; "first param=1 uses one process wide heap "
           &lt;&lt; "(heap access is serialized)" &lt;&lt; endl; 
      cout &lt;&lt; "first param=2 uses one heap per thread "
           &lt;&lt; "(no heap serialization)" &lt;&lt; endl; 
      return 0; 
   } else {
      go( argv[1], argv[2], argv[3], argv[4] ); 
   } // else
   return 0; 
}

</pre>
</BODY>
</HTML>
