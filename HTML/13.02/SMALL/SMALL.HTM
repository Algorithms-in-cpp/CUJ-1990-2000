

<HTML>
<HEAD>

<TITLE>February 1995/Simulating C++ Templates in C and C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocfeb.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">Simulating C++ Templates in C and C++<A name="004C_0022"><A name="004C_0022"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="004C_0000"><A name="004C_0000">John W. Small</font></h3><hr><blockquote><P>
<P><i><A name="004C_0000"><A name="004C_0000">Since receiving his BSCS from George Mason University in 1985, John W. Small has run PSW/ Power Software, a software tools and consulting company. He has authored the FlexList C/C ++, Container Lite C++, and COP (C Object Programming) tools as well as EB, the Electronic Book, a hypertext application. He has been programming in C/C ++ for 10/5 years, respectively, as well as in Smalltalk. He can be reached via email at john.small@wdn.com or (703) 759-3838 evenings.</i></P><P>
This article outlines a systematic approach to simulating templates in C and C++. You may need to do so because not all C++ translators implement templates, and templates are certainly not a part of conventional C. I begin by demonstrating why you might want to use function and class templates. Then I show how to synthesize function and class templates, with examples in both C and C++. If you are familiar only with C, you should learn a little C++ in the process.<P>
<h4><FONT COLOR="#000080"><A name="004C_0023">Function Templates<A name="004C_0023"></FONT></h4></P>
Macros in C and C++ allow you to define generic functions such as:<P>
<pre>#define max(x, y) ((x &gt; y) ? x : y)</pre>
However, using the <I>#define</I> preprocessor directive circumvents any strong type checking that might be provided by the translator. And it can also introduce undesired side effects for the unsuspecting programmer who assumes <I>max(x, y)</I> is a function call instead of a macro call.<P>
Consider:<P>
<pre>t = max(++r, s);</pre>
which expands to<P>
<pre>t = ((++r &gt; s) ? ++r: s)</pre>
If <I>r</I> is greater than or equal to <I>s</I> upon calling <I>max(++r, s), r</I> will be incremented twice. The arguments <I>++r</I> and <I>s</I> are treated simply as token sequences by the <I>max</I> macro. The preprocessor substitutes them for the formal parameters <I>x</I> and <I>y</I> wherever they appear in the definition of <I>max</I>. Macros are thus said to be <I>called by name</I>. The names of the actual arguments passed to the macro replace the formal parameters in the expansion process.<P>
Such problems can be avoided by coding <I>max</I> as a function:<P>
<pre>int max(int x, int y)
   { return (x &gt; y) ? x : y; }</pre>
With this definition, the expression<P>
<pre>t = max(++r, s);</pre>
always leaves <I>r</I> incremented by one instead of sometimes being incremented by two. The <I>max</I> function is said to be <I>called by value</I>. The values of <I>++r</I> and <I>s</I> are stored in the auto (local) variables <I>x</I> and <I>y</I> respectively. The value of <I>r</I> is incremented before it is stored in <I>x</I> and it can never be erroneously incremented again inside <I>max</I>.<P>
With this solution however, we have lost the ability to define max generically. If we need to compare two <I>float</I> values, we would have to code:<P>
<pre>float max(float x, float y)
   { return (x &gt; y) ? x : y; }</pre>
Both the <I>int</I> and <I>float</I> versions of <I>max</I> can be simultaneously defined in C++. Unlike C, the newer language allows function names to be overloaded. The types of the arguments in the function call dictate which version the C++ translator calls.<P>
C++ also provides a construct known as a <I>function template</I> that allows us to define a generic family of functions without sacrificing strong type checking. The C++ template approach to defining <I>max</I> would be;<P>
<pre>template &lt;class TYPE&gt;
   inline TYPE max(TYPE x, TYPE y)
      { return (x &gt; y) ? x : y; }</pre>
A function template is introduced by the keyword <I>template</I> followed immediately by one or more formal parameters, enclosed in angle brackets, that specify types. The function body is the same as a regular function definition except that the template's type parameters can appear anywhere in the definition that a data type name might normally appear. The following code causes the translator to automatically generate three different versions of the <I>max</I> function from its template definition. One definition is for <I>int</I> arguments, another is for <I>long</I> arguments, and yet another is for <I>float</I> arguments.<P>
<pre>int r, s, t;
long u, v, w;
float x, y, z;
...
t = max(++r, s);
u = max(++v, w);
z = max(x, y);</pre>
The keyword <I>inline</I> signals to the translator to generate inline code instead of invoking a function call each time. Thus you can see that function templates require no more overhead than macros but provide strong type checking and preclude erroneous side effects. Furthermore you can manually override template functions by supplying your own <I>specialization</I> for some combination of arguments:<P>
<pre>inline char *max(char* x, char *y)
   { return (strcmp(x,y) &gt;= 0) ? x : y; }</pre>
With this definition, the code sequence:<P>
<pre>char a[] = "one", b[] = "two", *c;

c = max(a, b);</pre>
calls your version of <I>max</I> for strings, preventing the translator from generating a version from the <I>max</I> template.<P>
<h4><FONT COLOR="#000080"><A name="004C_0024">Class Templates<A name="004C_0024"></FONT></h4></P>
C++ also provides a construct known as a <I>class template</I>, for which there is no direct counterpart in C. Suppose you need to implement a stack of strings in C (see <A href="list1.htm">Listing 1</a>)
. Our stack of strings includes functions for all the stack primitive operations, e.g. <I>full</I>, <I>push</I>, <I>top</I>, and <I>pop</I>. The <I>init</I> function is used to initialize a string stack. The <I>main</I> function demonstrates stack usage by building a "To Do" list, which is then streamed to the standard output. To implement a stack for some other data type you would have to clone this code, replacing <I>char</I> * throughout with the desired data pointer type. Of course all occurrences of the name <I>StrStack</I> would also have to be replaced with the appropriate new stack name.<P>
The C++ version of <A href="list1.htm">Listing 1</a>
is shown in <A href="list2.htm">Listing 2</a>.
 The first thing you should notice is that C++ automatically makes a structure tag a type definition as well, so that <I>StrStack</I> is now a type. Thus:<P>
<pre>class StrStack { ... };</pre>
is equivalent to:<P>
<pre>typedef class StrStack { ... } StrStack;</pre>
Also, in C++ the keyword <I>class</I> is equivalent to the keyword <I>struct</I> except the members of the structure are private in scope by default and thus cannot be accessed from outside the class.<P>
The second thing you should notice is that the functions <I>full, push, top</I>, and <I>pop</I> are now <I>public methods</I> of the <I>StrStack</I> class. They don't make the stack structure any larger, but the C++ translator can now keep track of which functions go with which data structures. The public functions provide a secure interface to the hidden object members, providing an important form of encapsulation. Users of the <I>StrStack</I> class cannot accidently corrupt the member objects in a <I>StrStack</I> class instance (object), for example.<P>
Furthermore, all member functions have an implicit <I>this</I> pointer to a class instance as a hidden formal parameter. To the translator, the definition<P>
<pre>char *pop()
   {
   return (items ? itemPtrs[--items]
          : 0);
   }</pre>
really behaves like:<P>
<pre>char *pop(StrStack *this)
   {
   return (this-&gt;items ?
      this-&gt;itemPtrs [--this-&gt;items]
         : 0);
   }</pre>
Thus, <I>pop</I> implicitly knows which <I>StrStack</I> instance it is going to pop. Sometimes the implicit <I>this</I> pointer may need to be explicitly used in an expression to distinguish between a data member and a formal parameter or some other object, when their names conflict.<P>
Member functions defined within the class declaration are considered inline functions. The function <I>StrStack::push(char *)</I> is not inlined since its definition appears outside its class declaration.<P>
The function <I>StrStack</I>() is a constructor for the class, equivalent to the C version's <I>init</I> function. Constructors are used to initialize class instances at their point of definition. Thus<P>
<pre>StrStack ToDo;</pre>
appearing in the function <I>main</I> not only allocates memory for the <I>ToDo</I> stack but causes the translator to automatically generate a call to <I>StrStack()</I> for you.<P>
Lastly, notice how methods are invoked:<P>
<pre>while (ToDo.top())</pre>
The implicit <I>this</I> pointer of <I>top</I> is automatically set to point to <I>ToDo</I>. The C++ version of <I>top()</I> doesn't have to check to see if <I>this</I> is a null pointer. By contrast, the C version primitives must always validate <I>stackPtr</I>.<P>
<A href="list3.htm">Listing 3</a>
shows how a class template can be used to parameterize the stack class so that it can be reused for any data type without requiring the programmer to clone code. The class template is also introduced by the keyword <I>template</I> followed immediately by one or more formal parameters, enclosed in angle brackets, specifying types or constants. We now use the expression:<P>
<pre>stack&lt;char&gt; ToDo;</pre>
to define our <I>ToDo</I> stack of strings (or character pointers). Since the template has no second actual parameter, a default value of 5 is used to limit the stack to 5 strings. Defaults can currently be specified only for constants, never types. Thus constant parameters with default arguments must always appear last in a template's formal parameter list. When generating a template class, the translator substitutes the actual parameters supplied or defaulted for the template's formal parameters throughout the template model.<P>
A second stack:<P>
<pre>stack&lt;int, 10&gt; CountDown;</pre>
defines a stack of integer pointers limited to a maximum of ten items. Upon encountering a new class specification, the translator will only generate the parameterized class if it hasn't already been generated. Please note that a class template's out-of-line member function definition can appear in a header file, since it is only a model with which the translator can generate the actual function definition. Hence a template function definition, in itself, generates no code. Template generation is actually a two-part process, consisting of generating declarations and definitions.<P>
<h4><FONT COLOR="#000080"><A name="004C_0025">Synthesizing Templates in C++<A name="004C_0025"></FONT></h4></P>
When you invoke a template, it automatically generates both declarations and definitions. For example, a function declaration names the function and describes its required parameters, while its definition is an algorithmic description for which the translator must generate code. Likewise, a data structure declaration names its type and specifies its layout but doesn't yet reserve any storage. Only when an object is associated for that data type might memory be allocated for it.<P>
The storage class <I>extern</I> turns what would otherwise be an object definition into an object declaration &#151; the object has external linkage with memory allocated for it elsewhere. A function declaration without a defining body generates no code regardless of the linkage you specify. An inline function has a defining body, but generates no code until it is called in a context that is not itself an inline function. For our purpose here, I will call all these <I>declarations,</I> because they only describe. By contrast, <I>definitions</I> generate code or reserve storage for objects.<P>
In our synthesis of templates, we need to emulate separately the process of generating declarations and definitions. Since declarations typically appear in header files while definitions appear in source files, our approach will place the declarations in a header file and the definitions in a source file. The logic for this will be apparent shortly. <A href="list4.htm">Listing 4</a>,
 <A href="list5.htm">Listing 5</a>,
 and <A href="list6.htm">Listing 6</a>
show how both function and class templates are synthesized for the function <I>max</I> and the class <I>stack</I>. <A href="list4.htm">Listing 4</a>
is the file that generates declarations, <A href="list5.htm">Listing 5</a>
the file that generates definitions, and <A href="list6.htm">Listing 6</a>
is the source file where these emulated templates are used. We'll call our approach to emulating templates "form templates."<P>
<h4><FONT COLOR="#000080"><A name="004C_0026">Layout Rules<A name="004C_0026"></FONT></h4></P>
1)     Since more than one form template may appear in a generating file, each form template must be encased within its own conditional preprocessor directive, as in:<P>
<pre>#ifdef NAME  /* open NAME envelope */
 ...
#endif       /* close NAME envelope */</pre>
which I call a form-template envelope. Here, <I>NAME</I> is the name of the function or class form template. For C++, function form template envelopes are named the same as their first template parameter. See if you can pick out the form template envelopes in <A href="list4.htm">Listing 4</a>
and <A href="list5.htm">Listing 5</a>.
<P>
2)     Form template parameter names must be unique within a generating file. For example, the following C++ templates:<P>
<pre>template &lt;class max_TYPE&gt;
   inline max_TYPE max(max_TYPE x, max_TYPE y)
      { return (x &gt; y) ? x : y; }

template &lt;class stack_ITEM,
   unsigned stack_MAX_ITEMS = 5&gt;
      class stack { ... }</pre>
have no naming conflicts among their various parameter names &#151;<I> max_TYPE, stack_lTEM, and stack_MAX_ITEMS.</I> Though not a requirement for C++ templates, it is for form templates.<P>
3)     A default value for a constant parameter must be conditionally defined as its default value before its class declaration. Both the default value and class declaration must be contained within the form template envelope:<P>
<pre>/* open form template envelope */
#ifdef stack

/* define default value */
 #ifndef stack_MAX_ITEMS</pre>
#define stack_MAX_ITEMS 5<P>
<pre> #endif

class stack {
   stack_ITEM *itemPtrs[stack_MAX_ITEMS];
...
#endif /* close form template envelope */</pre>
4)     A form template doesn't utilize the keyword <I>template</I>, nor is there a formal parameter list. Otherwise the form template model is exactly the same as the standard C++ template model. There is one additional exception: scope resolution names must drop their parameterizing arguments. For example:<P>
<pre>int stack&lt;stack_ITEM, stack_MAX_ITEMS&gt;::
   push(stack_ITEM *itemPtr)</pre>
is changed to read<P>
<pre>int stack::push(stack_ITEM *itemPtr)</pre>
5)     A form template header file, such as <A href="list4.htm">Listing 4</a>,
 always concludes with the conditional parameter wrapup section. This section undefines all form template parameters and names unless the header is being included by its corresponding form template source file, the file that generates definitions. For example:<P>
<pre>/* decl_gen.hpp */
....
/* parameter wrapup section */
#ifndef def_gen_cpp  /* defined in def_gen.cpp */
 #undef max_TYPE
 #undef stack_ITEM
 #undef stack_MAX_ITEMS
 #undef stack
#endif</pre>
6)     A form template source file, such as <A href="list5.htm">listing 5</a>,
 must first include its corresponding header file. For example:<P>
<pre>/* def_gen.cpp */
#define def_gen_cpp
#include "decl_gen.hpp"
#undef def_gen_cpp</pre>
Notice how the include directive is sandwiched between the definition and undefinition of the source-file macro id. This is the macro id used to exclude the parameter wrapup section described previously in rule 5.<P>
7)     Much like the form template header file, the source file terminates with a parameter wrapup section. In this case, however, the section is unconditional.<P>
<pre>...
/* parameter wrapup section */
#undef max_TYPE
#undef stack_ITEM
#under stack_MAX_ITEMS
#under stack</pre>
<h4><FONT COLOR="#000080"><A name="004C_0027">Rules for Using Templates<A name="004C_0027"></FONT></h4></P>
1)     In order to use a form template to generate either declarations or definitions, you must define its name. For a C++ function form template you define its first parameter instead. For example:<P>
<pre>#define max_ITEM int
...
#define stack stack_strings</pre>
The above code snippet indicates we are about to generate the function <I>max</I> for integers and a parameterized class stack named <I>stack_strings</I>.<P>
2)     All of the various form template parameters must also be defined as required. For example:<P>
<pre>#define max_TYPE int
#define stack_ITEM char</pre>
3)     Immediately following the form template envelope names and parameters, include the declarations generating file. To generate both declarations and definitions, include the definitions generating file instead, as in:<P>
<pre>#define max_TYPE int
#define stack_ITEM char
#define stack stack_strings
#include "def_gen.cpp"</pre>
At this point we have generated declarations and definitions for:<P>
<pre>   int max(int x, int y);</pre>
and<P>
<pre>   stack_strings; // i.e. stack&lt;char, 5U&gt;</pre>
with all form template envelope names and parameters left undefined!<P>
4)     To generate an additional type from the same form template, simply repeat the process.<P>
<pre>define stack_ITEM int
#define stack_MAX_ITEMS 10U
#define stack stack_int_10U
#include "def_gen.cpp"</pre>
At this point we have also generated a declaration and definition for:<P>
stack_int_10U; // i.e. stack&lt;int, 1OU&gt;<P>
The naming conventions used for these stacks has no significance as far as the form template generating mechanism is concerned.<P>
<h4><FONT COLOR="#000080"><A name="004C_0028">Synthesizing Templates in C<A name="004C_0028"></FONT></h4></P>
<A href="list7.htm">Listing 7</a>,
 <A href="list8.htm">Listing 8</a>,
 and <A href="list9.htm">Listing 9</a>
repeat our example, this time in C. Please note the following differences from the C++ approach:<P>
1)     Function form template envelopes have the same name as the function itself:<P>
<pre>/* max function envelope (see Listing 7) */
#ifdef max/* C uses function name test */
extern max_TYPE max(max_TYPE x, max_TYPE y);
#endif</pre>
Since C doesn't allow for inlined functions, <I>max</I> is declared as external in the header file and defined in the source file as:<P>
<pre>/* max function envelope (see Listing 8) */
#ifdef max  /* C uses function name test */
max_TYPE max(max_TYPE x, max_TYPE y)
   { return (x &gt; y) ? x : y; }
#endif</pre>
2)     Neither does C allow for function name overloading, so in order to generate a <I>max</I> function we must redefine its name as well as its parameter.<P>
<pre>#define max max_iii    /* see Listing 9 */
#define max_TYPE int
...
#include "def_gen.c"</pre>
The convention I use here, <I>max_iii</I>, indicates a function generically named <I>max</I> returning an integer and taking two integer parameters. In order for C++ to allow for function-name overloading, the C++ translator generates unique mangled names based on return and parameter types. You can think of <I>max_iii</I> as a hand-mangled name. You might name a function for floats <I>max_fff</I>. However, you must call the proper function, <I>max_iii</I> or <I>max_fff</I>, unlike in C++.<P>
3)     Since C doesn't support member functions, you must define a scoping macro to support pseudo membership, as in:<P>
<pre>#define stack_ITEM char    /* see
Listing 9 */
#define stack stack_char
#define stack_scope(memFnc)
stack_char_ ## memFnc
#include "def_gen.c"</pre>
The macro <I>stack_scope</I> is used in both the form template header and source files, as in:<P>
<pre>extern int stack_scope(push) /* see
Listing 7 */
   (struct stack * stackPtr,
stack_ITEM * itemPtr);

int stack_scope(push)  /* see Listing
8 */
   (struct stack * stackPtr, stack_ITEM * itemPtr)
      {...}</pre>
to generate stack-scoped function names. You can think of this as a different sort of name mangling. The function name is mangled to reflect its pseudo structure membership instead of its variant parameter types. In order to call a pseudo member function you must specify its scope mangled name, as in:<P>
<pre>/* see Listing 9 */
stack_char_push(&amp;ToDo,"wash car");</pre>
The struct scoping macro must be undefined in the parameter wrapup sections. See the tail of <A href="list7.htm">Listing 7</a>
and <A href="list8.htm">Listing 8</a>.
<P>
<h4><FONT COLOR="#000080"><A name="004C_0029">Conclusion<A name="004C_0029"></FONT></h4></P>
The "form template" approach shown here can be used in a nested fashion to implement any structure that can be described with conventional C++ templates. No longer must you limit your designs to non-parameterized types simply because your C++ translator doesn't yet support templates. Likewise C application design can now also benefit from the C++ template concept.<P>

<h4><a href="../../../source/1995/feb95/small.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
