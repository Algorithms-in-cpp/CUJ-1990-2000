<HTML><HEAD>
<TITLE>February 1995/Simulating C++ Templates in C and C++/Listing 8</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 8 <I>Defining synthesized templates in C</A></I></h4>
<pre>/ * def_gen.c -- definitions generating file * /

#define def_gen_c
#include "decl_gen.h"
#undef def_gen_c

/* max function envelope */
#ifdef max  /* C uses function name test */
  max_TYPE max(max_TYPE x, max_TYPE y)
  { return (x &gt; y) ? x: y; }
#endif

#ifdef stack   /* open stack struct envelope */

void stack_scope(init)(struct stack * stackPtr)
{
   if (stackPtr)
      stackPtr-&gt;items = 0U;
}

int stack_scope(full)(struct stack * stackPtr)
{
   if (stackPtr &amp;&amp; stackPtr-&gt;items &lt; stack_MAX_ITEMS)
      return 0;
   return 1;
}

int stack_scope(push)
   (struct stack * stackPtr, stack_ITEM * itemPtr)
{
   if (!stack_scope(full)(stackPtr) &amp;&amp; itemPtr) {
      stackPtr-&gt;itemPtrs[stackPtr-&gt;items++]
         = itemPtr;
      return 1;
   }
   return 0;
}

stack_ITEM * stack_scope(top)(struct stack * stackPtr)
{
   if (stackPtr &amp;&amp; stackPtr-&gt;items)
      return stackPtr-&gt;itemPtrs[stackPtr-&gt;items-1];
   return (stack_ITEM *) 0;
}

stack_ITEM * stack_scope(pop)(struct stack * stackPtr)
{
   if (stackPtr &amp;&amp; stackPtr-&gt;items)
      return stackPtr-&gt;itemPtrs[--stackPtr-&gt;items];
   return (stack_ITEM *) 0;
}

#endif  /* close stack struct envelope */

#undef max
#undef max_TYPE
#under stack
#undef stack_ITEM
#undef stack_MAX_ITEMS
#under stack_scope
/* End of File */
</pre>
</BODY>
</HTML>
