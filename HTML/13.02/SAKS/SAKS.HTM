

<HTML>
<HEAD>

<TITLE>February 1995/Stepping Up To C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocfeb.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Stepping Up To C++<A name="0056_002C"><A name="0056_002C"></font></h2><P>
<h3 align="center"><A name="0056_0000"><A name="0056_0000"><B>Minor Enhancements to C++ as of CD Registration</B></h3><P>
<h3 align="center"><font color="#800000">Dan Saks</font></h3><hr><blockquote><P>
<P><i><A name="0056_0000"><A name="0056_0000">Dan Saks is the president of Saks &amp; Associates, which offers consulting and training in C++ and C. He is secretary of the ANSI and ISO C++ committees. Dan is coauthor of C++ Programming Guidelines, and codeveloper of the Plum Hall Validation Suite for C++ (both with Thomas Plum). You can reach him at 393 Leander Dr., Springfield OH, 45504-4906, by phone at (513)324-3601, or electronically at dsaks@wittenberg.edu.</i></P><P>
In July, the ANSI and ISO C++ standards committees voted to submit their working draft of the C++ standard for registration as a CD (committee draft). This is the second installment in a series that summarizes the state of the C++ language as of that milestone.<P>
Since adopting the ARM <a href="#1">[1]</a> as the base document for the standard, the committees have done a lot more than just clarify the C++ language definition; they have been changing existing features and adding new ones at a fairly steady clip. CD registration represents, among other things, a tacit statement from the committees that they're more or less done adding new stuff. The words in the draft are not yet as clear or as precise as they will be when the standard is final, but at least now the draft describes most, if not all, of the language features we should expect to see in that eventual C++ standard.<P>
Last month, I listed all of the ways the C++ language described by the draft standard differs from the dialect described in the ARM. (See "Stepping Up to C++: C++ at CD Registration," <I>CUJ</I>, January 1995.) My list included only substantive changes (changes in the C++ language itself) and omitted changes that are essentially editorial (changes in the description of C++, not in C++ itself).<P>
I classified the substantive changes into four broad categories:<P>
<UL><li>major extensions<I> that dramatically increase the complexity of the language and support alternative programming styles and paradigms</I></li>
<li>minor enhancements<I> that extend the language in less dramatic ways</I></li>
<li>changes<I> that alter the meaning of existing features</I></li>
<li>clarifications<I> of existing features</I></li></UL>
I also provided brief explanations of each of the major extensions:<P>
<UL><li>templates</li>
<li>exception handling</li>
<li>run-time type information (including <I>dynamic_cast</I>)</li>
<li>namespaces</li></UL>
along with pointers to other sources of information about these features.<P>
This month, I continue in the same vein with explanations of the minor enhancements. Some of these review features I described in earlier columns. (See "Stepping Up To C++: Recent Extensions to C++," <I>CUJ</I>, June, 1993, and "Stepping Up To C++: The Return Type of Virtual Functions," <I>CUJ</I>, March, 1994.) Stroustrup <a href="#2">[2]</a> offers more insights and examples on most of these features.<P>
<h4><FONT COLOR="#000080"><A name="0056_002D">New Keywords and Digraphs<A name="0056_002D"></FONT></h4></P>
C++, like C, requires a character set based on the Roman alphabet. In particular, C++ uses the English alphabetic characters 'A' through 'Z' and 'a' through 'z', along with a handful of arithmetic operators and punctuation symbols. Unfortunately, many other natural languages based on the Roman alphabet use more than just the 26 (times two) characters in the English alphabet.<P>
Computer systems that support non-English alphabets usually make room for native language characters and punctuation by omitting other punctuation characters normally found on American English systems. For example, Danish keyboards, displays, and printers replace the <I>[</I> and <I>]</I> with <I></I> and <I></I>,<I> </I>respectively. A subscript expression like <I>a[i]</I> comes out on a Danish display device looking like <I>ai</I>. I can imagine that this takes some of the fun out of programming in C and C++.<P>
ISO646 is the international standard 7-bit character set. It specifies the set of characters common to all systems based on the Roman alphabet. ISO646 does not use every available 7-bit code. Each nationality can define its own variant of ISO646 that uses the unused codes for native language characters or symbols. ASCII, the US national variant of ISO646, uses the available codes for symbols like <I>{</I>, <I>}</I>, <I>[</I>, <I>]</I>, <I>/</I>, <I>^</I>, <I>\</I>, and <I>~</I> (all of which are used in C and C++). Other national variants assign these same codes to other alphabetic characters, like  or , or to punctuation like <I></I>.<P>
A current trend in international standards is to augment programming languages so that programmers can work without too much inconvenience using only the invariant set of ISO646 characters. As part of this trend, C++ includes new keywords and digraphs (two-character symbols) as alternate ISO646-compliant spellings for the troublesome operators. These keywords and digraphs appear in <A href="tab1.htm">Table 1</a>.
 Using the digraphs, you can write the subscripting expression <I>a[i]</I> as <I>a&lt;:i:&gt;</I>.<P>
ISO C provides the same alternate spellings; however, C specifies the identifiers in <A href="tab1.htm">Table 1</a>
as macros defined in a standard header <I>&lt;iso646.h&gt;</I>. Thus, you can continue using those identifiers as user-defined identifiers in C as long as you don't include <I>&lt;iso646.h&gt;</I>. However, C++ treats these identifiers as reserved words; you cannot use them as user-defined identifiers in any C++ program. The C++ library provides a header <I>&lt;iso646.h&gt;</I> (which may be empty) just for compatibility with C.<P>
<h4><FONT COLOR="#000080"><A name="0056_002E">Operator Overloading on Enumerations<A name="0056_002E"></FONT></h4></P>
At one time, enumerations were integral types (as they are in C), but those days are gone. The current draft says that each distinct enumeration constitutes a different enumerated type. Enumerations are not integral, but they do promote to <I>int</I>,<I> unsigned int</I>,<I> long</I>, or <I>unsigned long</I>.<P>
For example, given<P>
<pre>enum day { SUN, MON, ..., SAT };</pre>
a valid C declaration like<P>
<pre>enum day d = 0;</pre>
is no longer valid in C++, because C++ won't convert 0 (an <I>int</I>) to <I>day</I> (an enumeration) without a cast. However,<P>
<pre>int n = SUN;</pre>
is still valid in C++, as it is in C, because <I>SUN</I> (a constant of type <I>day</I>) still promotes to <I>int</I>.<P>
C++ does not allow operator overloading on primitive types, such as <I>int.</I> When enumerations were integral types, C++ could not allow operator overloading on enumerations either, without severely complicating the rules for overload resolution. Once enumerations became distinct types, allowing overloading on enumerations became a relatively small change.<P>
Removing enumerations from the integral types introduced a potentially serious incompatibility with C, namely, that various built-in arithmetic operators, such as <I>++</I>,<I> </I><I>&#151;</I>,<I> </I><I>+=</I> and <I>-=</I>, no longer apply to enumerations. Therefore, a loop such as<P>
<pre>for (d = SUN; d &lt;= SAT; ++d)</pre>
no longer compiles as C++ when <I>++</I> is the predefined operator. However, with operator overloading on enumerations, you can define<P>
<pre>inline day &amp;operator++(day &amp;d)
   {
   return d = day(d + 1);
   }</pre>
as the prefix form of <I>++</I> for objects of type <I>day</I>. With this function definition present, the <I>for</I> statement will compile.<P>
<h4><FONT COLOR="#000080"><A name="0056_002F"><I>operator new[] </I><B>and</B><I> operator delete[]<A name="0056_002F"></I></FONT></h4></P>
A <I>new</I> expression acquires storage by calling an allocation function. The standard C++ library provides a default allocation function, declared as<P>
<pre>void *operator new(size_t n);</pre>
An expression such as<P>
<pre>px = new X;</pre>
<I>loosely</I> translates into code of the form<P>
<pre>px = (X *)operator new(sizeof(X));
px-&gt;X();    // apply constructor</pre>
A <I>delete</I> expression releases storage by calling a deallocation function. The default deallocation function declared in the library has the form<P>
<pre>void operator delete(void *p);</pre>
An expression such as<P>
<pre>delete px;</pre>
loosely translates into code of the form<P>
<pre>px-&gt;~X();  // apply destructor
operator delete(px);</pre>
The default allocation and deallocation functions are very general, and may waste too much time or storage in some applications. C++ lets you write you own versions of <I>operator new</I> and <I>operator delete.</I> If you define your own <I>operator new</I>, every <I>new</I> expression in your program will call your allocator instead of the default supplied in the library. Ditto for <I>operator delete</I> and <I>delete</I> expressions.<P>
Writing replacements for the global allocator and deallocator can be a big chore, and it's usually unnecessary. Often all you need to do is tune the memory allocator for objects of a few particular classes. C++ lets you define a different allocator and deallocator for each class. For example,<P>
<pre>class node
   {
public:
   void *operator new(size_t);
   void operator delete(void *p);
   ...
   };</pre>
defines class <I>node</I> with its own class-specific versions of <I>new</I> and <I>delete</I>. A call such as<P>
<pre>p = new node;</pre>
allocates memory using <I>node::operator new</I>, rather than the global <I>operator new.</I> Similarly,<P>
<pre>delete p;</pre>
deallocates memory using <I>node::operator delete. new</I> and <I>delete</I> expressions for objects of built-in types, and for class types that do not declare their own <I>operator new</I> and <I>operator delete</I>, continue to use the global allocation and deallocation functions.<P>
According to the ARM, allocating an array of <I>X</I> objects always uses the global <I>operator new</I>, even if <I>X</I> is a class that defines its own <I>operator new</I><I>.</I> That is,<P>
<pre>px = new X[n];</pre>
ignores <I>X::operator new</I> and uses <I>::operator new.</I> By the same token, deleting that array using<P>
<pre>delete [] px;</pre>
<I>ignores X::operator delete</I> and uses <I>::operator delete.</I><P>
The current C++ draft standard gives programmers greater control over dynamic memory management for arrays of objects. Now, a <I>new</I> expression such as<P>
<pre>px = new X[n];</pre>
invokes an allocation function declared as<P>
<pre>void *operator new[](size_t n);</pre>
Similarly,<P>
<pre>delete [] px;</pre>
invokes a deallocation function declared as<P>
<pre>void operator delete[](void *p);</pre>
The standard library provides default implementations for <I>operator new[]</I> and <I>operator delete[]</I>, which you can replace at your pleasure. You can even define operators <I>new[]</I> and <I>delete[]</I> for individual classes, as in<P>
<pre>class node
   {
 public:
   void *operator new(size_t);
   void *operator new[](size_t);
   void operator delete(void *p);
   void operator delete[](void *p);
   ...
   };</pre>
so that<P>
<pre>p = new node[n];</pre>
invokes <I>node::operator new[]</I> instead of <I>node::operator new.</I><P>
<h4><FONT COLOR="#000080"><A name="0056_0030">Relaxed Virtual Function Return Typ es<A name="0056_0030"></FONT></h4></P>
Quoth the ARM: "It is an error for a derived class function to differ from a base class virtual function in the return type only." For example, in<P>
<pre>class B
   {
public:
   virtual int vf(int);
   ...};
class D : public B
   {
   ...
   void vf(int); // error
   ...
};</pre>
the declaration of <I>D::vf</I> is an error because it has the same name and signature (parameter types) as a function declared in base class <I>B</I>, but they have different return types. Most of the time, this is a reasonable restriction. Occasionally it isn't. Here's one such occasion.<P>
Some applications need to be able to clone (create an exact copy of) an object. Typically, a cloning function for a class <I>X</I> looks something like<P>
<pre>X *X::clone() const
   {
   return new X(*this);
   }</pre>
The expression <I>new X(*this)</I> creates a new dynamically-allocated <I>X</I> object by copying the object addressed by <I>this</I>.<P>
When used in a class that's the root of a polymorphic hierarchy, clone functions should be virtual (possibly pure), so you can clone an object without knowing its exact type. For example, <A href="list1.htm">Listing 1</a>
shows a simple hierarchy of geometric shapes with a virtual clone function. Using these types, a call such as<P>
<pre>shape *cs = s-&gt;clone();</pre>
creates a new shape with the same dynamic type as shape <I>s</I>. That is, if at the time of the call, <I>s</I> actually points to a <I>circle</I>, then <I>s-&gt;clone()</I> returns a <I>circle *</I>. If <I>s</I> points to a <I>rectangle</I>, then <I>s-&gt;clone()</I> returns a <I>rectangle *</I>.<P>
Normally, a clone function for a class <I>X</I> should have a return type of <I>X</I> <I>*</I>. However, in <A href="list1.htm">Listing 1</a>,
 <I>circle::clone</I> returns a <I>shape *</I>, not a <I>circle *</I>, to satisfy the ARM's restriction that an overriding function must return exactly the same type as the function it overrides. Unfortunately, satisfying this restriction often requires you to use casts in contexts where it seems that you should not need them. For example, you cannot write<P>
<pre>rectangle *r;
...
rectangle *cr = r-&gt;clone();</pre>
because <I>r-&gt;clone()</I> returns a <I>shape *</I>, not a <I>rectangle *</I>. Even though a <I>rectangle</I> is a <I>shape</I>, a <I>shape</I> is not necessarily a <I>rectangle</I>. Therefore, you must add a cast, as in<P>
<pre>rectangle *cr = (rectangle *)r-&gt;clone();</pre>
The current draft relaxes the ARM's original restriction to eliminate the need for this cast. You can declare each virtual clone function in the hierarchy so that it returns a pointer whose static type is the same as its dynamic type. That is, <I>circle::clone</I> can return a <I>circle *</I> and <I>rectangle::clone</I> can return a <I>rectangle *</I>, even though the function they override, <I>shape::clone</I>, returns a <I>shape *</I>.<P>
By and large, the ARM's restriction still stands. The current draft simply adds two special cases where the return types need not match exactly. Specifically, for all classes <I>B</I> and <I>D</I> defined as<P>
<pre>class B
   {
   ...
   virtual BT f();
   ...
   };
class D : public B
   {
   ...
   DT f();
   ...
   };</pre>
types <I>BT</I> and <I>DT</I> must be identical, or they must satisfy either of the following conditions:<P>
1.     <I>BT</I> is <I>BB *</I> and <I>DT</I> is <I>DD *</I>, where <I>DD</I> is derived from <I>BB</I>.<P>
2.     <I>BT</I> is <I>BB &amp;</I> and <I>DT</I> is <I>DD &amp;</I>, where <I>DD</I> is derived from <I>BB</I>.<P>
In either case (1) or (2),<P>
3.     class <I>D</I> must have the access rights to convert a <I>BB * (</I>or <I>BB &amp;</I>) to a <I>DD * (</I>or <I>DD &amp;</I>, respectively).<P>
In most applications with hierarchies like this, <I>BB</I> is a public base class of <I>DD</I>, so <I>D</I> can perform the conversions. But if, for example, <I>BB</I> is a private base class of <I>DD</I>, then condition (3) does not hold. The above rules apply even if <I>D</I> is derived indirectly from <I>B</I>. Furthermore, <I>BB</I> might be <I>B</I> and <I>DD</I> might be <I>D</I>, as is the case with clone functions.<P>
Types <I>BB</I> and <I>DD</I>, above, may include cv-qualifiers <I>(const</I> and <I>volatile</I>). These qualifiers in <I>BB</I> and <I>DD</I> need not be identical, as long as every qualifier that's part of <I>DD</I> is also part of <I>BB</I>. <I>BB</I> may have qualifiers that are not part of <I>DD</I>.<P>
<h4><FONT COLOR="#000080"><A name="0056_0031"><I>wchar_t</I><B> as a Distinct Type<A name="0056_0031"></B></FONT></h4></P>
Like C, C++ provides wide-character literals and multibyte strings so that programmers can manipulate very large character sets, like Japanese Kanji. Several headers in the Standard C library define <I>wchar_t</I> as the wide character type, an integral type sufficiently large to represent all character codes in the largest character set among the supported locales.<P>
The C++ committees wanted to support input/output for wide characters as well as "narrow" characters. For example, for a time they wanted to be able to add another output operator<P>
<pre>ostream &amp;operator&lt;&lt;(ostream &amp;os,
                wchar_t w);</pre>
in addition to existing operators, such as<P>
<pre>ostream &amp;operator&lt;&lt;(ostream &amp;os,
                char c);
ostream &amp;operator&lt;&lt;(ostream &amp;os,
                int i);
                //and many others</pre>
so that given<P>
<pre>int i;
wchar_t w;</pre>
the expression<P>
<pre>cout &lt;&lt; i;</pre>
displays <I>i</I> as an <I>int</I>, and<P>
<pre>cout &lt;&lt; w;</pre>
displays <I>w</I> in its proper graphic representation. Unfortunately, this was impossible with <I>wchar_t</I> defined by a <I>typedef</I>.<P>
The problem is that a <I>typedef</I> is not a distinct type; it's an alias for another type. If the library defines <I>wchar_t</I> as<P>
<pre>typedef wchar_t int;</pre>
then<P>
<pre>ostream &amp;operator&lt;&lt;(ostream &amp;os,
                int i);
ostream &amp;operator&lt;&lt;(ostream &amp;os,
                wchar_t w);</pre>
are the same function. That function will (most likely) display objects of type <I>wchar_t</I> as numbers.<P>
Thus, <I>wchar_t</I> is now a keyword in C++ representing a distinct type. <I>wchar_t</I> still has the same representation as one of the standard integral types (meaning it has the same size, alignment requirements, and "signedness" as one of the integral types), but it is now a distinct type for the purposes of overload resolution.<P>
<h4><FONT COLOR="#000080"><A name="0056_0032">A Built-in Boolean Type<A name="0056_0032"></FONT></h4></P>
C doesn't have a Boolean type; it simply assumes that a scalar value is "false" if it compares equal to zero and "true" if it's non-zero. For the most part, the Standard C library uses <I>int</I> as the Boolean type, and many programmers follow suit.<P>
Those of us who truly felt the absence of a Boolean type defined one ourselves. Unfortunately, there are an awful lot of different ways to do it. Some programmers spell the type as <I>bool</I>. Others use <I>Bool</I>,<I> boolean</I>,<I> Boolean</I>,<I> bool_t</I>, or even <I>logical</I>. The type can be <I>char</I> or <I>int</I>,<I> signed</I> or <I>unsigned</I>. The definition itself can be a macro<P>
<pre>#define bool int
#define false 0
#define true 1</pre>
or a <I>typedef</I><P>
<pre>typedef unsigned char bool;</pre>
or even an enumeration<P>
<pre>enum bool { false, true };</pre>
Consequently, it's not at all uncommon for the definitions of <I>bool</I>,<I> false</I>, and <I>true</I> (however you spell them) in one library to conflict with the definitions in another.<P>
The C++ standards committees decided to eliminate these conflicts by defining a standard Boolean type. C++ now has a Boolean type with the following properties:<P>
<UL><li><I>bool</I> is a keyword designating a signed integral type.</li>
<li><I>false</I> and <I>true</I> are keywords designating constants of type <I>bool</I>.</li>
<li><I>bool</I> expressions promote to <I>int</I> such that <I>false</I> converts to zero and <I>true </I>converts to one.</li>
<li><I>int</I> and pointer expressions can convert to <I>bool</I> such that zero converts to <I>false</I> and non-zero converts to <I>true</I>.</li></UL>
In addition:<P>
<UL><li>The built-in relational operators <I>&lt;</I>,<I> &gt;</I>,<I> ==</I>,<I> !=</I>,<I> &lt;=</I>, and<I> &gt;=</I> yield a<I> bool</I> result.</li>
<li>The built-in logical operators <I>&amp;&amp;</I>, <I>//</I>, and <I>!</I> take <I>bool</I> operands (or operands that automatically convert to <I>bool)</I> and yield a <I>bool</I> result.</li>
<li>The conditional expression in an <I>if</I>,<I> while</I>, or <I>for</I> statement, or the first operand of <I>?:</I>, must have <I>bool</I> type (or a type that automatically converts to <I>bool</I>).</li></UL>
The committees' intent is that, except for definitions of <I>bool</I>,<I> false</I>, and <I>true</I>, code that uses a Boolean type should continue to work as before.<P>
The committees agreed to preserve, at least for the time being, the sloppy but apparently common coding practice of using <I>++</I> to set a Boolean value to <I>true.</I> C++ currently accepts prefix and postfix <I>++</I> as lvalue, of type <I>bool</I>, both of which set to true. However, the draft deprecates this feature, meaning it may disappear from some future standard.<P>
By the way, the committees did explore alternatives to defining <I>bool</I> as a built-in type. They considered defining it in the library as a <I>typedef</I>, as a class, or as an enumeration, but each approach had flaws.<P>
The problem with a <I>typedef</I> is that it is not a distinct type for overloading. If the library defines<P>
<pre>typedef int bool;</pre>
then declarations<P>
<pre>void f(int);
void f(bool);</pre>
are not a pair of overloaded functions; they're two declarations for the same function. (This is the same reason why <I>wchar_t</I> is not a <I>typedef</I>.)<P>
Defining <I>bool</I> as a class type poses a different problem. Given the current rules for applying user-defined conversions during argument-matching, defining <I>bool</I> as a class might break existing code. In their analysis of the Boolean type, Dag Brck and Andrew Koenig used an example similar to the one in <A href="list2.htm">Listing 2</a>
to illustrate the problem.<P>
<A href="list1.htm">Listing 1</a>
shows a class <I>X</I> with a constructor that accepts a single <I>int</I> argument. Thus, that constructor is also a user-defined conversion from <I>int</I> to <I>X</I>. In the absence of a <I>bool</I> type, the expression <I>n &gt;</I> <I>0</I> yields an <I>int.</I> The call <I>f(n &gt; 0)</I> uses the constructor <I>X(int)</I> to convert that <I>int</I> result to <I>X</I>, and then passes that <I>X</I> to <I>f(X)</I>.<P>
Now suppose C++ defined <I>bool</I> as a class type with a conversion to <I>int</I>:<P>
<pre>class bool
   {
public:
   operator int();
   ...
   };</pre>
If relational operators, like <I>&gt;</I>, yield a <I>bool</I> result, then the call <I>f(n &gt; 0)</I> in <A href="list2.htm">Listing 2</a>
must first convert the result of <I>n &gt; 0</I> to <I>int</I> using <I>bool::operator int</I>, and then convert that <I>int</I> to <I>X</I> using <I>X::X(int).</I> Unfortunately, there's already a rule in C++ that argument matching during a function call will apply at most one user-defined conversion. When <I>bool</I> is a class, this call requires two user-defined conversions: <I>bool::operator int</I> and <I>X::X(int).</I> Brck and Koenig reasoned that to avoid breaking this code or meddling with the already complicated argument-matching rules, the conversion from <I>bool</I> to <I>int</I> cannot be user-defined; it must be built-in.<P>
When enumerations were still integral types, it might have been possible to define <I>bool</I> as an enumeration and preserve the implicit conversions from <I>int</I> to <I>bool.</I> Since <I>int</I> values no longer convert quietly to enumerations, it can't be done without special rules for <I>bool.</I> But that's the same as making <I>bool</I> a built-in type.<P>
<h4><FONT COLOR="#000080"><A name="0056_0033">Declarations in Conditional Expressions<A name="0056_0033"></FONT></h4></P>
The proposal to add run-time type information (RTTI) included an extension to allow declarations in conditional expressions. The scope of a name declared in a condition is the statement(s) controlled by that condition. For example,<P>
<pre>if (circle *c = dynamic_cast&lt;circle *&gt;(s))
   {
   // c is in scope here...
   }
// but not here</pre>
The declaration yields the value of the declared object after initialization.<P>
The syntax for such declarations is extremely limited. (The revised grammar appears in <A href="tab2.htm">Table 2</a>.
) The declaration can declare only one object, and it must have an initializer with <I>=</I> as the delimiter. For example, C++ will not accept<P>
<pre>if (complex z(r, i))</pre>
You must write the condition as<P>
<pre>if (complex z = complex(r, i))</pre>
Declarations can appear in place of expressions only in the controlling expressions of <I>if</I>,<I> switch</I>,<I> for</I>, or <I>while</I> statements. They cannot appear in the increment expression of a <I>for</I> statement, in the controlling expression of a <I>do-while</I> statement, or in the conditional expression of <I>?:</I> expression.<P>
The scope of a name declared in the condition of an <I>if </I>statement includes the <I>else</I> part. For example,<P>
<pre>if (int c = getchar())
   {
   // c is non-zero here
   }
else
   {
   // c is zero here
   }
//c is undefined here</pre>
Finally, you cannot declare an entity in the outermost block of the statement controlled by a condition using the same name as the object declared in the condition. For example,<P>
<pre>while (X *p = iter.next())
   {
   char *p;    // error, p already declared
   ...
   }</pre>
I'll continue next month with the explanations of the other minor enhancements to C++.<P>
<h4>References</FONT></h4></P>
<a name="1"></a>[1]     Margaret A. Ellis and Bjarne Stroustrup. <I>The Annotated C++ Reference Manual</I>. (Addison-Wesley, 1990).<P>
<a name="2"></a>[2]     Bjarne Stroustrup. <I>The Design and Evolution of C++</I>.<I> </I>(Addison-Wesley, 1994).<P>

<h4><a href="../../../source/1995/feb95/saks.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
