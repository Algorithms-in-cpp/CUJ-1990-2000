

<HTML>
<HEAD>

<TITLE>February 1995/Code Capsules</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocfeb.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Code Capsules<A name="0054_002A"><A name="0054_002A"></font></h2><P>
<h3 align="center"><A name="0054_0000"><A name="0054_0000"><B>The Standard C Library, Part 2</B></h3><P>
<h3 align="center"><font color="#800000">Chuck Allison</font></h3><hr><blockquote><P>
<P><i><A name="0054_0000"><A name="0054_0000">Chuck Allison is a regular columnist with CUJ and a Senior Software Engineer in the Information and Communication Systems Department of the Church of Jesus Christ of Latter Day Saints in Salt Lake City. He has a B.S. and M.S. in mathematics, has been programming since 1975, and has been teaching and developing in C since 1984. His current interest is object-oriented technology and education. He is a member of X3J16, the ANSI C++ Standards Committee. Chuck can be reached on the Internet at 72640.1507@compuserve.com.</i></P><P>
Last month I divided the fifteen headers of the Standard C Library into three Groups, each representing different levels of mastery (see <A href="tab1.htm">Table 1</a>, <a href="tab2.htm">Table 2</a>,
and <A href="tab3.htm">Table 3</a>)
. I continue this month by exploring Group II.<P>
<h4><FONT COLOR="#000080"><A name="0054_002B">Group II: For the "Polished" C Programmer<A name="0054_002B"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0054_002C"><I>&lt;assert.h&gt;<A name="0054_002C"></I></FONT></h4></P>
Well-organized programs provide key points where you can make assertions, such as "the index points to the next open array element." It is important to test these assertions during development and to document them for the maintenance programmer (which, of course, is often yourself). ANSI C provides the <I>assert</I> macro for this purpose. You could represent the assertion above, for example, as<P>
<pre>   #include &lt;assert.h&gt;
   . . .
   assert(nitems &lt; MAXITEMS &amp;&amp; i
         == nitems);
   . . .</pre>
If the condition holds, all is well and execution continues. Otherwise, <I>assert</I> prints a message containing the condition, the file name, and line number, and then calls <I>abort</I> to terminate the program.<P>
Use <I>assert</I> to validate the internal logic of your program. If a certain thread of execution is supposed to be impossible, say so with the call <I>assert(0)</I>, as in: <P>
<pre>switch (color)
{
    case RED:
        . . .
    case BLUE:
        . . .
    case GREEN:
        . . .
    default:
        assert(0);
}</pre>
<I>assert</I> is also handy for validating parameters. A function that takes a string argument, for example, could do the following:<P>
<pre>   char * f(char *s)
   {
       assert(s);
       . . .
   }</pre>
Assertions are for logic errors, of course, not for run-time errors. A logic error is one you could have avoided by correct design. For example, no action on the user's part should be able to create a null pointer &#151; that's clearly your fault, so it is appropriate to use <I>assert</I> in such cases. On the other hand, a run-time error, such as a memory failure, requires more bulletproof exception handling.<P>
When your code is ready for production, you should have caught all the bugs, so you should turn off assertion processing. To do so, you can either include the statement<P>
<pre>   #define NDEBUG</pre>
in the beginning of the code, or define the macro on the command line if your compiler allows it (most use the -<I>D</I> switch). With <I>NDEBUG</I> defined, all assertions expand to a null macro, but the text remains in the code for documentation.<P>
<h4><FONT COLOR="#000080"><A name="0054_002D"><I>&lt;limits.h&gt;<A name="0054_002D"></I></FONT></h4></P>
By definition, portable programs do not depend in any way on the particulars of any one environment. Even assuming that all bytes consist of eight bits is not safe. The header <I>&lt;limits.h&gt;</I> defines the upper and lower bounds for all integer types (see <A href="tab4.htm">Table 4</a>)
. The program in <A href="list1.htm">Listing 1</a>
toggles each bit in an integer on and off. It uses the value <I>CHAR_BIT</I>, defined in <I>&lt;limits.h&gt;</I>, as the number of bits in a byte, to determine the number of bits in an integer. As <A href="list2.htm">Listing 2</a>
illustrates, you can also use <I>&lt;limits.h&gt;</I> to determine the most efficient data type to use for signed numeric values that must span a certain range.<P>
<h4><FONT COLOR="#000080"><A name="0054_002E"><I>&lt;stddef.h&gt;<A name="0054_002E"></I></FONT></h4></P>
The header <I>&lt;stddef.h&gt;</I> defines three type synonyms and two macros (see <A href="tab5.htm">Table 5</a>)
. When you subtract two pointers which refer to elements of the same array (or one position past the end of the array), you get back the difference of the two corresponding subscripts, which will be the number of elements between the pointers. The type of the result is either an <I>int</I> or a <I>long</I>, whichever is appropriate for your memory model. <I>&lt;stddef.h&gt;</I> defines the appropriate type as <I>ptrdiff_t</I>.<P>
The <I>sizeof</I> operator returns a value of type <I>size_t. size_t</I> is the unsigned integer type that can represent the size of the largest data object you can declare in your environment. Usually an <I>unsigned int</I> or <I>unsigned long</I> is sufficient to represent this size. <I>size_t</I> is usually the unsigned counterpart of the type used for <I>ptrdiff_t.</I> If you look through the headers in the Standard C Library, you'll find extensive use of type <I>size_t</I>. It is good idea to use <I>size_t</I> for all array indices and for pointer arithmetic (i.e., adding an offset to a pointer), unless for some reason you need the ability to count down past zero, which unsigned integers can't do.<P>
The type <I>wchar_t</I> holds a <I>wide character</I>, an implementation- defined integral type for representing characters beyond standard ASCII. You define wide character constants with a preceding <I>L</I>, as in:<P>
<pre>    #include &lt;stddef.h&gt;
    wchar_t c = L'a';
    wchar_t *s = L"abcde";</pre>
As <A href="list3.htm">Listing 3</a>
illustrates, my environment defines a wide character as a two-byte integer. This coincides nicely with the emerging 16-bit Unicode standard for international characters (see the sidebar <a href="sidebar1.htm">"Character Sets"</a>). The <I>&lt;stdlib.h&gt;</I> functions listed in <A href="tab6.htm">Table 6</a>
use type <I>wchar_t</I>. Amendment 1, an official addendum to Standard C accepted in 1994, defines many additional functions for handling wide and multi-byte characters. For more detailed information, see P. J. Plauger's columns in the April 1993 and May 1993 issues of <I>CUJ</I>.<P>
The <I>NULL</I> macro is the universal zero-pointer constant, defined as one of <I>0, 0L</I>, or <I>(void *) 0.</I> It is almost always a bad idea to assume any one of these definitions in a program &#151; for safety, just include a header that defines <I>NULL</I> (<I>stddef.h, stdio.h, stdlib.h, string.h, locale.h</I>) and let the system figure out the correct representation. <I>&lt;stddef.h&gt;</I> is handy when you need only <I>NULL</I> defined in a translation unit and nothing else.<P>
The <I>offsetof</I> macro returns the offset in bytes from the beginning of a structure to one of its members. Due to address alignment contraints, some implementations insert unused bytes after members in a structure, so you can't assume that the offset of a member is just the sum of the sizes of the members that precede it. For example, the program in <A href="list4.htm">Listing 4</a>
exposes a one-byte gap in the <I>Person</I> structure after the name member, allowing the <I>age</I> member to start on a word boundary (a word is two bytes here). Use <I>offsetof</I> if you need an explicit pointer to a structure member:<P>
<pre>struct Person p;
int *age_p;
age_p = (int*) ((char*)&amp;p
   + offsetof(struct Person, age));</pre>
<h4><FONT COLOR="#000080"><A name="0054_002F"><I>&lt;time.h&gt;<A name="0054_002F"></I></FONT></h4></P>
Most environments provide some mechanism for keeping time. <I>time.h</I> provides the type <I>clock_t,</I> a numeric type that tracks <I>processor time</I> (see <A href="tab7.htm">Table 7</a>)
. The <I>clock</I> function returns an implementation-defined value of type <I>clock_t</I> that represents the current processor time. Unfortunately, what is meant by "processor time" varies across platforms, so <I>clock</I> by itself isn't very useful. You can, however, compare processor times, and then divide by the constant <I>CLOCKS_PER_SEC</I>, thus rendering the number of seconds elapsed between two points in time. The program in <A href="list5.htm">Listing 5</a>, <a href="list6.htm">Listing 6</a>, and
<A href="list7.htm">Listing 7</a>
uses <I>clock</I> to implement such stopwatch functions.<P>
The rest of the functions in <I>&lt;time.h&gt;</I> deal with <I>calendar time</I>. The <I>time</I> function returns a system-dependent encoding of the current date and time as type <I>time_t</I> (usually a <I>long</I>). The function <I>localtime</I> decodes a <I>time_t</I> into a <I>struct tm</I> (see <A href="list8.htm">Listing 8</a>)
. The <I>asctime</I> function returns a text representation of a decoded time in a standard format, namely<P>
<pre>   Mon Nov 28 14:59:03 1994</pre>
For more detail, see the Code Capsule "Time and Date Processing in C," <I>CUJ</I>, January 1993.<P>
I'll conclude this series on the Standard C Library next month with a discussion of the functionality of the headers in Group III. <P>

<h4><a href="../../../source/1995/feb95/allison.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
