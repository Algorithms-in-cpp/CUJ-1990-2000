<HTML><HEAD>
<TITLE>February 1995/Using Associative Arrays/Listing 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 3 <I>Creating the Array</I></A></h4>
<pre>/*&gt;&gt;&gt;&gt; Create associative array (AA) definition &lt;&lt;&lt;&lt;*/
AA *aa_create (type,key_size,data_size,size,user_hashf)
enum AA_KEYTYPE type; /* input -- key type */
size_t key_size;      /* input -- max binary key size */
size_t data_size;     /* input -- max data size */
size_t size;          /* input -- initial size */
int (*user_hashf)();  /* input -- optional hash func */
{
  AA * aa;

  /* all AA information stored in structure */
  if (aa=(AA *)malloc(sizeof(AA))) {
     size=prime_size(size);
     aa-&gt;keys=(void **)calloc(size, sizeof(void *));
     aa-&gt;data=(void **)calloc(size, sizeof(void *));
     if (aa-&gt;keys &amp;&amp; aa-&gt;data) { /*if allocation ok*/
        aa-&gt;type=type;
        aa-&gt;key_size=key_size;
        aa-&gt;max_elements=size;
        aa-&gt;current_elements=0;
        aa-&gt;data_size=data_size;
        if ((aa-&gt;hash_function=user_hashf) == NULL)
           aa-&gt;hash_function=&amp;hash_function;
     } else { /* failure, release memory */
        if (aa-&gt;keys) free((void *)aa-&gt;keys);
        if (aa-&gt;data) free((void *)aa-&gt;data);
        free((void *)aa);
        aa=NULL;  /* return NULL on failure */
     }
  }
  return(aa); /* return AA definition */
}

/*&gt;&gt;&gt;&gt; Get 1st prime larger than request size &lt;&lt;&lt;&lt;*/
static size_t prime_size(size)
size_t size;  /* start search for prime at size*/
{
  int divisor,i=(size&lt;5 ? 5 : size);
  i=(i % 2) ? i : i + 1; /* start on odd number */
  do {
     /* try each number which could be exact divisor */
     for (divisor=3; divisor &lt;= i/divisor; divisor+=2)
        if ((i % divisor) == 0) break; /* if !prime */
     if (divisor &gt; (i/divisor)) break; /* if prime */
  } while (i+=2);   /* try next odd number */
  return(i);  /* return prime number */
}

/* End of File */
</pre>
</BODY>
</HTML>
