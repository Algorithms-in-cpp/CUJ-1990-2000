<HTML><HEAD>
<TITLE>February 1995/Using Associative Arrays/Listing 7</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 7 <I>Resizing the Array</I></A></h4>
<pre>/*&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Resize the AA &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;*/
BOOLEAN aa_resize (aa,newsize)
AA * aa;         /* input -- AA definition */
size_t newsize;  /* input -- new size for AA */
{
  BOOLEAN rc=TRUE;
  void **newkeys, **newdata, **oldkeys, **olddata;
  int i, oldsize, index;
  
  newsize=prime_size(newsize); /* insure prime size */
  /* alloc new/enlarged key and data tables */
  newkeys=(void **)calloc(newsize, sizeof(void *));
  newdata=(void **)calloc(newsize, sizeof(void *));
  if ((aa-&gt;current_elements &lt; MAXFULL(newsize)) &amp;&amp;
     (newkeys &amp;&amp; newdata)) {
    oldkeys=aa-&gt;keys;  /* save old table ptrs */
    olddata=aa-&gt;data;
    oldsize=aa-&gt;max_elements;
    aa-&gt;keys=newkeys;  /* put new tables in AA def */
    aa-&gt;data=newdata;
    aa-&gt;max_elements=newsize;
    
    /* now add/rehash all keys/data into new table */
    for (i=0; i&lt;oldsize; i++) /*scan for valid keys*/
      if (VALID_KEY(oldkeys[i])) {
         index=hashindex(aa,oldkeys[i]);
         aa-&gt;keys[index]=oldkeys[i];
         aa-&gt;data[index]=olddata[i];
      }
    free((void *)oldkeys); free((void *)olddata);
  } else { /* cleanup on error */
    if (newkeys) free((void *)newkeys);
    if (newdata) free((void *)newdata);
    rc=FALSE;
  }
  return(rc);  /* return status, TRUE if successful */
}
/* End of File */
</pre>
</BODY>
</HTML>
