<HTML><HEAD>
<TITLE>February 1995/Using Associative Arrays/Listing 5</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 5 <I>Hashing the Keys</I></A></h4>
<pre>/*&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Default hash function &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;*/
static int hash_function(key,keysize,maxhash,type)
void *key;        /* input -- key to be hashed */
int keysize;      /* input -- size of key */
int maxhash;      /* input -- max legal hash value */
enum AA_KEYTYPE type; /* input -- type of input key */
{
  int i;
  static shifts_initialized=FALSE;
  static BYTE svalues[]={0,24,3,21,5,19,7,17,9,15,11};
  static BYTE sconstants[AA_MAX_KEY_SIZE];
  register unsigned long count=0;
  register BYTE *kp=(BYTE *)key, *end;
  register BYTE *shifts=sconstants;

  /* on 1st call init shifts; empirically determined */
  if (!shifts_initialized) {
     for(i=0; i &lt; AA_MAX_KEY_SIZE; i++)
        sconstants[i]=svalues[i % sizeof(svalues)];
     shifts_initialized=TRUE;
  }
  
  /* the loops are high runners; need to be fast */
  if (type == STRING_KEY)
     for ( ; *kp != (char) 0; kp++,shifts++)
        count ^= *kp &lt;&lt; *shifts;
  else
     for (end=kp+keysize; kp &lt; end; kp++,shifts++)
        count ^= *kp &lt;&lt; *shifts;
  return (count % maxhash); /* return hash value */
}

/*&gt;&gt;&gt; Find index for key; Use hash algorithm.  &lt;&lt;&lt;*/
/*&gt;&gt;&gt; Method: Linear Probe with Double Hashing &lt;&lt;&lt;*/
static int hashindex (aa,key)
AA * aa;        /* input -- AA definition */
void *key;      /* input -- lookup key */
{
  int found=FALSE, index;
  void **ptr;
  BOOLEAN first_collision=TRUE;
  
  /* hash function determines where to start search */
  index=HASH_FUNCTION(aa, key, aa -&gt;max_elements);
  
  do {  /* do until matching key or empty slot found */
     ptr=&amp;aa-&gt;keys[index];  /* get key pointer */
     
     if (NULLKEY(*ptr))
        found=TRUE; /* empty slot */
     /* keys comparisons must consider the key type */
     else if (STRING_KEY_MATCH(aa-&gt;type,key,ptr))
        found=TRUE; /* string key found */
     else if (KEY_MATCH(aa-&gt;type,key,ptr,aa-&gt;key_size))
        found=TRUE; /* non-string key found */
     /* wrong key was found so collision occurred */
     else if (first_collision) {
        /* try double hash on first collision only */
        index=HASH_FUNCTION(aa,key,aa-&gt;max_elements-4);
        first_collision=FALSE;
     } else /* collision -- use linear search/probe */
        if (++index == aa-&gt;max_elements) /* if end */
          index=0;  /* restart search at beginning */
  } while (!found);
  
  return(index);  /* return key and data index */
}

/* End of File */
</pre>
</BODY>
</HTML>
