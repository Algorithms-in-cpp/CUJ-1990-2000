<HTML><HEAD>
<TITLE>February 1995/Using Associative Arrays/Listing 4</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 4 <I>Accessing the Array</I></A></h4>
<pre>/*&gt;&gt;&gt;&gt; Return data pointer for specified key &lt;&lt;&lt;&lt;*/
/* Main interface to store and retrieve AA data */
void *aa_addr(aa,key)
AA * aa;        /* input -- AA definition */
void *key;      /* input -- lookup key */
{
  int index;
  void **keyptr, **dataptr;

  if (TOO_FULL(aa-&gt;current_elements,aa-&gt;max_elements))
     if (!aa_resize(aa,INC_SIZE(aa-&gt;max_elements)))
        fprintf(stderr,"AA: resize failed\n");

  index=hashindex(aa,key);  /* index for key &amp; data */
  keyptr=&amp;aa-&gt;keys[index];
  dataptr=&amp;aa-&gt;data[index];
  if (!VALID_KEY(*keyptr))  { /* if key not in table */
     /* allocate key &amp; data memory; copy/define key */
     *keyptr=(void *)malloc(KEYSIZE(aa,key));
     *dataptr=(void *)calloc(aa-&gt;data_size,1);
     if (keyptr &amp;&amp; dataptr)  { /* if allocation ok */
        KEYCOPY (aa, keyptr, key);
        aa-&gt;current_elements++;
     } else { /* allocation failed */
        fprintf(stderr,"AA: key allocation failed\n");
        fflush(stderr); /* probably will crash soon */
     }
  }
  return(*dataptr);  /* return pointer to data area */
}

/* End of File */
</pre>
</BODY>
</HTML>
