

<HTML>
<HEAD>

<TITLE>February 1995/Questions and Answers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocfeb.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Questions and Answers<A name="0052_0028"><A name="0052_0028"></font></h2><P>
<h3 align="center"><A name="0052_0000"><A name="0052_0000">qsort and Static Functions</h3><P>
<h3 align="center"><font color="#800000">Kenneth Pugh</font></h3><hr><blockquote><P>
<P><i><A name="0052_0000"><A name="0052_0000">Kenneth Pugh, a principal in Pugh-Killeen Associates, teaches C and C++ language courses for corporations. He is the author of All On C, C for COBOL Programmers, and UNIX for MS-DOS Users, and was a member of the ANSI C committee. He also does custom C/C++ programming and provides SystemArchitectonics<I>sm</I> services. He is president of the Independent Computer Consultants Association. His address is 4201 University Dr., Suite 102, Durham, NC 27707, You may fax questions for Ken to (919) 489-5239. Ken also receives email at kpugh@allen.com (Internet) and on Compuserve 70125,1142.</i></P><P>
<B>Q</B><P>
In your column in the May 1994 issue of <I>CUJ</I> (which, by the way, arrived here a week or so after the July issue &#151; apparently the boat carrying May's issue to the Antipodes took a lengthy detour), you discuss a problem in using the <I>qsort</I> function to sort data within a C++ class. You describe a Catch-22 situation, in which the comparison function passed to <I>qsort</I> must be a member function if it is to access private data members of the class, but <I>qsort</I> is unable to call a C++ function because its calling convention differs from that of a C function.<P>
There is a way to circumvent this problem, which works with all the C++ compilers I have tested (Borland C/C++ 3.1, Microsoft C/C++ 7.0, and GNU g++ 1.39.1). The trick is to declare the comparison function to be a <I>static</I> member function (See <A href="list1.htm">Listing 1</a>)
. Static member functions don't receive a <I>this</I> argument and (at least in these compilers) use the same calling conventions as ordinary C functions. Unfortunately, however, I suspect there is no guarantee that this technique will work with <I>all</I> C++ compilers. Does the proposed C++ standard have anything to say about this? Perhaps the standards committee might consider requiring static member functions to use the same calling conventions as C functions, as it would facilitate use of the standard <I>qsort</I> and <I>bsearch</I> C library functions.<P>
By the way, the program listing which accompanied this discussion in the May issue contained at least two errors, and also raised a couple of questions in my mind. First the (minor) errors: 1) The declaration of class <I>A</I> lacks a terminating semicolon. 2) The use of <I>compare_function</I> in the <I>sort</I> must be preceded by a prototype. I have some more questions on <A href="list1.htm">Listing 1</a>
(reproduced here &#151; see <A href="list1.htm">Listing 1</a>)
<P>
1)     Should the declarations of <I>first</I> and second in <I>compare_function</I> be of <I>const DataType *</I> or <I>const</I> <I>A::DataType *</I>? My guess would have been the latter, as <I>DataType</I> is a <I>private</I> member of class <I>A</I>, and really shouldn't be "visible" to an external function.<P>
2)     When the latter form is used, the Borland compiler compiles it without error; the Microsoft compiler fails with the error message: "'DataType' : cannot access 'private' member declared in class 'A'." Which is the correct behavior?<P>
<A href="list2.htm">Listing 2</a>
is a program which demonstrates my approach of declaring the comparison function to be a static member function.<P>
I do enjoy reading your columns. Keep up the good work!<P>
Cheers,<P>
Eric Zurcher<br>
Canberra, Australia<P>
<B>A</B><P>
For the purpose of implementation hiding, a static function would be better than a friend function, if it were guaranteed to work on all compilers. For the compilers you listed, static C++ functions do appear to have the same calling sequence as C functions. Other readers have responded with similar statements about these compilers. I do not believe this feature is in the standard.<P>
Thank you for the sharp-eyed corrections to my program. My grammar checker does not look for a terminating ';'. In response to your first question, your comparison function should use:<P>
<pre>   const A::DataType *first = (A::DataType*) a;
   const A::DataType *second = (A::DataType*) b;</pre>
This is explained in detail on pages 186-187 of <I>The Annotated C++ Reference Manual</I> (ARM) by Ellis and Stroustrop <a href="#1">[1]</a>. For those who do not have that reference handy, I'll paraphrase the ARM's explanation. The rules on nested classes have flip-flopped in recent years.<P>
Class names (as well as structure names) now follow the same rules of scoping as other names. In C, structures did not have scoping rules and therefore you could use these declarations:<P>
<pre>   const DataType *first = (DataType*) a;
   const DataType *second = (DataType*) b;</pre>
The declaration of a structure template inside another structure template was just a convenience and had no scope meaning.<P>
In C++, using a nested class in a non-class function puts it in the scope of that class. A program requires scoping information if a reference appears outside of that class (i.e., its template and its member functions). This scope applies to all nested types. For example, you commonly see:<P>
<pre>   class A
      {
   public:
      enum Enumeration {One, Two, Three};
      //...
      };</pre>
and a non-member function as:<P>
<pre>   void non_member_function()
      {
      A:Enumeration a;
      //. . .
      };</pre>
Access is a separate issue from scope. In answer to your second question, access control applies to both members (function and data) and nested types (ARM, p. 239). Therefore the attempt to access <I>Datatype</I> by the comparison function should not compile.<P>
Your second program is a bit cleaner on the access side. It eliminates the access problems of the first example, at the expense of a slightly more complex looking class interface. I will be glad when the new namespace mechanism becomes commonplace. Then we will have the same access protection as nested classes, but without the visual clutter.<P>
<h4>Reference</FONT></h4></P>
<a name="1"></a>[1]     Margaret A. Ellis and Bjarne Stroustrup. <I>The Annotated C++ Reference Manual</I> (Addison-Wesley, 1994).<P>

<h4><a href="../../../source/1995/feb95/pugh.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
