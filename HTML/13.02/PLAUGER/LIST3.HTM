<HTML><HEAD>
<TITLE>February 1995/Standard C/C++/Listing 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 3 <I>The file</I> strstpro.c</A></h4>
<pre>// strstpro -- strstreambuf protected members
#include &lt;string.h&gt;
#include &lt;strstream&gt;

int strstreambuf::overflow(int ch)
       {       // try to extend write area
       if (pptr() != ) &amp;&amp; pptr() &lt; epptr())
              return (* _Pn()++ = ch);
       else if (!(_Strmode &amp; _Dynamic)
              || _Strmode &amp; (_Constant)| _Frozen))
              return (EOF);
       else
              {       // okay to extend
              int osize = gptr() == 0 ? 0 : epptr() - eback();
              int nsize = osize + _Alsize;
              char *p = _Palloc != 0 ? (char *)(*_Palloc)(nsize)
                     : new char[nsize];
              if (p == 0)
                     return (EOF);
              if (0 &lt; osize)
                     memcpy(p, eback(), osize);
              else if (_ALSIZE &lt; _Alsize)
                     _Alsize = _ALSIZE;
              if (!(_Strmode &amp; -Allocated))
                     ;
              else if (_Pfree != 0)
                     (*_Pfree)(eback());
              else
                     delete [] eback();
              _Strmode |=_Allocated;
              if (osize == 0)
                     {      // setup new buffer
                     _Seekhigh = p;
                     setp(p, p + nsize);
                     setg(p, p, p);
                     }
              else
                     {       // revise old pointers
                     _Seekhigh = _Seekhigh - eback() + p;
                     setp(pbase() - eback() + p, pptr() - eback() + p,
                            p + nsize);
                     if (_Strmode &amp;_Noread)
                            setg(p, p, p);
                     else
                            setg(p, gptr() - eback() + p, pptr() + 1);
                     }
              return (ch == EOF ? 0 : (*_Pn()++ = ch));
              }
       }
int strstreambuf::pbackfail(int ch)
       {       // try to putback a character
       if (gptr() == 0 || gptr() &lt;= eback()
              || ch != EOF &amp;&amp; (unsigned char)ch != _Gn()[-1]
                     &amp;&amp;_Strmode &amp;_Constant)
              return (EOF);
       else
              {       // safe to back up
              gbump(-1);
              return (ch == EOF ? 0: (*_Gn() = ch));
              }
       }

int strstreambuf::underflow()
       {       // read only if read position available
       if (gptr() == 0)
              return (EOF);
       else if (gptr() &lt; egptr())
              return (*_Gn());
       else if (_Strmode &amp; _Noread || pptr() == 0
              || pptr() &lt;= gptr() &amp;&amp;_Seekhigh &lt;= gptr())
              return (EOF);
       else
              {       // update_Seekhigh and expand read region
              if (_Seekhigh &lt; pptr())
                     _Seekhigh = pptr();
              setg(eback(), gptr(),_Seekhigh);
              return (*_Gn());
              }
       }
</pre>
</BODY>
</HTML>
