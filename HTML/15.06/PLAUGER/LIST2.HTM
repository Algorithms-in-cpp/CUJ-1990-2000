



<HTML><HEAD>

<TITLE>June 1997/Standard C/C++/Listing 2</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4>Listing 2:	Template class &lt;queue&gt;</h4>

<pre>

  // TEMPLATE CLASS queue
template&lt;class TY, class C = deque&lt;TY&gt; &gt;
 class queue {
public:
 typedef C container_type;
 typedef typename C::value_type value_type;
 typedef typename C::size_type size_type;
 explicit queue()
  : c() {}
 explicit queue(const C&amp; Cont)
  : c(Cont) {}
 bool empty() const
  {return (c.empty()); }
 size_type size() const
  {return (c.size()); }
 value_type&amp; front()
  {return (c.front()); }
 const value_type&amp; front() const
  {return (c.front()); }
 value_type&amp; back()
  {return (c.back()); }
 const value_type&amp; back() const
  {return (c.back()); }
 void push(const value_type&amp; X)
  {c.push_back(X); }
 void pop()
  {c.pop_front(); }
 bool operator==(const queue&lt;TY, C&gt;&amp; X) const
  {return (c == X.c); }
 bool operator!=(const queue&lt;TY, C&gt;&amp; X) const
  {return (!(*this == X)); }
 bool operator&lt;(const queue&lt;TY, C&gt;&amp; X) const
  {return (c &lt; X.c); }
 bool operator&gt;(const queue&lt;TY, C&gt;&amp; X) const
  {return (X &lt; *this); }
 bool operator&lt;=(const queue&lt;TY, C&gt;&amp; X) const
  {return (!(X &lt; *this)); }
 bool operator&gt;=(const queue&lt;TY, C&gt;&amp; X) const
  {return (!(*this &lt; X)); }
protected:
 C c;
 };
/* End of File */
</pre>
</body></html>
