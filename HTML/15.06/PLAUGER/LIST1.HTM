



<HTML><HEAD>

<TITLE>June 1997/Standard C/C++/Listing 1</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4>Listing 1:	Template class &lt;stack&gt;</h4>

<pre>
  // TEMPLATE CLASS stack
template&lt;class Ty, class C = deque&lt;Ty&gt; &gt;
 class stack {
public:
 typedef C container_type;
 typedef typename C::value_type value_type;
 typedef typename C::size_type size_type;
 explicit stack(const C&amp; Cont)
  : c(Cont) {}
 explicit stack()
  : c() {}
 bool empty() const
  {return (c.empty()); }
 size_type size() const
  {return (c.size()); }
 value_type&amp; top()
  {return (c.back()); }
 const value_type&amp; top() const
  {return (c.back()); }
 void push(const value_type&amp; _X)
  {c.push_back(_X); }
 void pop()
  {c.pop_back(); }
 bool operator==(const stack&lt;TY, C&gt;&amp; _X) const
  {return (c == _X.c); }
 bool operator!=(const stack&lt;TY, C&gt;&amp; _X) const
  {return (!(*this == _X)); }
 bool operator&lt;(const stack&lt;TY, C&gt;&amp; _X) const
  {return (c &lt; _X.c); }
 bool operator&gt;(const stack&lt;TY, C&gt;&amp; _X) const
  {return (_X &lt; *this); }
 bool operator&lt;=(const stack&lt;TY, C&gt;&amp; _X) const
  {return (!(_X &lt; *this)); }
 bool operator&gt;=(const stack&lt;TY, C&gt;&amp; _X) const
  {return (!(*this &lt; _X)); }
protected:
 C c;
 };
/* End of File */
</pre>
</body></html>
