



<HTML><HEAD>

<TITLE>June 1997/Standard C/C++/Listing 3</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4>Listing 3:	Template class &lt;priority_queue&gt;</h4>

<pre>

  // TEMPLATE CLASS priority_queue
template&lt;class Ty, class C = vector&lt;Ty&gt;,
 class Pr = less&lt;C::value_type&gt; &gt;
 class priority_queue {
public:
 typedef C container_type;
 typedef typename C::value_type value_type;
 typedef typename C::size_type size_type;
 explicit priority_queue()
  : c(), comp() {}
 explicit priority_queue(const Pr&amp; X)
  : c(), comp(X) {}
 explicit priority_queue(const Pr&amp; X, const C&amp; Cont)
  : c(Cont), comp(X)
  {make_heap(c.begin(), c.end(), comp); }
 template&lt;class It&gt;
  priority_queue(It F, _It L)
  : c(F, L), comp()
  {make_heap(c.begin(), c.end(), comp); }
 template&lt;class It&gt;
  priority_queue(It F, It L, const Pr&amp; X)
  : c(F, L), comp(X)
  {make_heap(c.begin(), c.end(), comp); }
 template&lt;class It&gt;
  priority_queue(It F, It L, const Pr&amp; X,
   const C&amp; Cont)
  : c(Cont), comp(X)
  {c.insert(c.end(), F, L);
  make_heap(c.begin(), c.end(), comp); }
 bool empty() const
  {return (c.empty()); }
 size_type size() const
  {return (c.size()); }
 value_type&amp; top()
  {return (c.front()); }
 const value_type&amp; top() const
  {return (c.front()); }
 void push(const value_type&amp; X)
  {c.push_back(X);
  push_heap(c.begin(), c.end(), comp); }
 void pop()
  {pop_heap(c.begin(), c.end(), comp);
  c.pop_back(); }
protected:
 C c;
 Pr comp;
 };
/* End of File */
</pre>
</body></html>
