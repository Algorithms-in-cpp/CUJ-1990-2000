


<HTML><HEAD>

<TITLE>March 1998/Contrast Enhancement with Piecewise Lookup Tables/Listing 2</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4>
<A name="HEADING1">Listing 2: ImageLut member functions</A></h4>


<pre>
///////////////////////////////////////////////////////////
//    File: ilut.cpp
//    Description: ImageLut - lookup table
//
//    Author: C Dare-Edwards
//     Copyright Conrad Dare-Edwards 1997  

#include "stdafx.h"
#include "isystem.hpp"
#include "ilut.hpp"
#include &lt;math.h&gt;

// convert a byte stream through lookup table
void 
ImageLut::Lookup( BYTE* buffer, int length ) const
{
     // pass buffer through lut 
     while( length-- ) *buffer++ = m_luttable[ *buffer ];
}

//  convert a single byte through lookup table
BYTE&amp;
ImageLut::operator[] ( BYTE nIndex )
{
    IASSERT( nIndex &lt; BYTE_SIZE);
     return( m_luttable[nIndex] );
}    

// Scale between two points
BOOL
ImageLut::ScaleTo(const ImagePoint&amp; from, 
                const ImagePoint&amp; to)
{
     int width  = to.x - from.x;
     int height = to.y - from.y;
    
    // catch errors
     if( from.y+ height &gt;= getRange() || 
        from.x+width &gt;= getRange() || width &lt;= 0 )
     {
             IASSERT( FALSE );  // alert we got problems    
        return ( FALSE );      // exit stage left
     }
    float addy = ((float)height / (float)width); 
     
    // slope across to to.x to.y
    for( int i = 0; i &lt;= abs(width);  i++ )
    {
         m_luttable [  i+from.x]  =  from.y + (int)(addy*i);
    }
    return TRUE;
}
//End of File
</pre>
</body></html>
