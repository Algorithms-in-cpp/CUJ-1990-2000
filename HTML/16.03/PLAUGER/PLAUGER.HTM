





<HTML>
     
     <HEAD>

<TITLE>March 1998/Standard C/C++</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<H2><A href="../tocmar.htm"><IMG src="../../toc.gif" ALT="Back to TOC" WIDTH="54" HEIGHT="54"></A>
<FONT COLOR="#FF0000">Columns</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Standard C/C++: The Facet moneypunct</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">P. J. Plauger</FONT></H3>

<BLOCKQUOTE>
<p>A C locale provides low-level information on how to format monetary amounts. The
C++ locale facet moneypunct supplies the same information at a somewhat higher
level of abstraction.</p></BLOCKQUOTE><hr>
<BLOCKQUOTE>
<h4><FONT COLOR="#000080">Introduction</FONT></H4>

<p>Internationalization of software is an open-ended topic. Some things you have to worry about are
fairly obvious. We English speakers are quite comfortable with our 26 letters,
in two cases. But practically all other languages need additional characters,
accent marks, and more elaborate rules than you can imagine for shifting
between cases.<p>
Maybe you know that most Europeans write a comma where we use a dot as a
decimal point. Even venerable COBOL was prepared for that particular cultural
adaptation. But you might not know that 1,000,000 might be written quite
differently &#151; with different "thousands"' separators and different groupings
of digits &#151; elsewhere in the world.<p>
One of the few real inventions added during the standardization of C was the
concept of a locale. A locale is a collection of information peculiar to some
culture. It is not necessarily (just) language oriented &#151; accountants have a
different culture from engineers, in several important ways. In any event,
locales were added to C to capture at least some aspects of cultural dependency
that may be important in adapting a computer program distributed in an
international market.<p>
(The idea is that you internationalize a program by removing all the cultural
dependencies you can. The remaining dependencies you parameterize. A locale
tells you what parameter values to use for a given culture. So you localize the
program by binding it to a specific locale.)<p>
The locale machinery in the Standard C library is quite simple. You can alter
the default "C" locale by calling the function setlocale, declared in
&lt;locale.h&gt;. (The names of locales are not standardized, any more than the
names of valid files are standardized.) A successful change of locale can alter
the character used for a decimal point in the scan and print functions. It can
also alter the set of space characters tested for in several library
functions.<p>
Within the Standard C library, the only other effect of a change in locale is
on the contents of an object of type struct lconv returned by the function
localeconv, also declared in &lt;locale.h&gt;. It contains information that is
largely advisory &#151; it affects the program only if the code explicitly tests
the contents of the returned object. For example, the object tells you all
sorts of interesting things about how to display monetary amounts. What you, as
programmer, do with this information is up to you.<p>
For the past several months, I've been describing some of the machinery in the
Standard C++ library that is based on the locales of the C Standard. C has one
locale that's global to a program. C++ lets you construct any number of locale
objects, each of which can encapsulate a distinct locale. C has locale
categories that describe different aspects of a locale. C++ locale objects
store references to any number of objects called locale facets, each of which
carries out some locale-specific set of duties when you call upon its member
functions. (See "Standard C/C++: Introduction to Locales," CUJ, October
1997.)<p>
The facets I've described so far affect the behavior of other library
classes:</p>
<UL><LI>Template class ctype performs character classification and case mapping.
        (See "Standard C/C++: The Facet ctype," CUJ, November 1997.) It is used
        throughout the library, and throughout the "iostreams" classes in particular.</LI>
    <LI>Template class codecvt performs translations between multibyte encodings and
        other character codes, such as those represented by type wchar_t. (See
        "Standard C/C++: The Facet codecvt," CUJ, December 1997.) It is used when
        reading and writing files that you open by name.</LI>
    <LI>Template class num_put performs conversions from the scalar types of C and
        C++ to numeric text representations. (See "Standard C/C++: The Facets num_put
        and numpunct," CUJ, January 1998.) It is used by numeric inserters in
        iostreams.</LI>
    <LI>Template class num_get performs conversions from numeric text
        representations to the scalar types. (See "Standard C/C++: The Facet num_get,"
        CUJ, February 1998.) It is used by numeric extractors in iostreams.</LI>
</UL>
<p>I now shift to the more exotic facets. These are template classes supplied
as part of the Standard C++ library. Each has two or more specializations
defined in the library, typically for sequences with elements of type char and
wchar_t. Practically every locale object contains references to objects of
these specialized types. But the library does not otherwise make any use of
these locale facets.<p>
Just so you know where I'm going, here is a list of the facets I classify as
exotic. I list only the char specializations. An analogous wchar_t
specialization accompanies each of these in every locale object:</p>

<pre>
moneypunct&lt;char, false&gt;
moneypunct&lt;char, true&gt;
money_put&lt;char,
        ostreambuf_iterator&lt;char,
                char_traits&lt;char&gt; &gt; &gt;
money_get&lt;char,
        istreambuf_iterator&lt;char&gt;,
                char_traits&lt;char&gt;  &gt;
time_put&lt;char,
        ostreambuf_iterator&lt;char,
                char_traits&lt;char&gt; &gt; &gt;
time_get&lt;char,
        istreambuf_iterator&lt;char&gt;,
                char_traits&lt;char&gt;  &gt;
collate&lt;char&gt;
messages&lt;char&gt;
</pre>
<p>The topic for this month is the first two facets in the list. You use them to
obtain information on how convert a monetary amount to a text representation,
or vice versa, by culture-specific rules.</p>

<h4><FONT COLOR="#000080">Locale Category LC_MONETARY</FONT></H4>

<p>To begin with, it helps to know what a C locale tells you about formatting
monetary amounts. The C Standards committee X3J11 based its design heavily on
recommendations from IBM Corporation. They provided a detailed study of how all
the various cultures around the world display such amounts. (Well, at least
they studied all the potential customers for IBM computers, I imagine.) The
results show an astonishing variety, which is not easily captured in just a
handful of parameters. But we tried anyway.<p>
Here are the fields of the structure lconv that are affected by the locale
category LC_MONETARY. The comment following each field shows its default value
for the "C" locale:</p>

<pre>
char *currency_symbol;    // ""
char *int_curr_symbol;    // ""
char *mon_decimal_point;  // ""
char *mon_grouping;       // ""
char *mon_thousands_sep;  // ""
char *negative_sign;      // ""
char *positive_sign;      // ""
char frac_digits;         // CHAR_MAX
char int_frac_digits;     // CHAR_MAX
char n_cs_precedes;       // CHAR_MAX
char n_sep_by_space;      // CHAR_MAX
char n_sign_posn;         // CHAR_MAX
char p_cs_precedes;       // CHAR_MAX
char p_sep_by_space;      // CHAR_MAX
char p_sign_posn;         // CHAR_MAX
</pre>
<p>Members of type pointer to char all point to null-terminated strings. Members of type
char all have nonnegative values. A value of CHAR_MAX indicates that a
meaningful value is not available in the current locale.<p>
A brief description of each of these members follows, with an example in
parentheses that would be suitable for a USA locale:</p>
<p>currency_symbol &#151; the local currency symbol ("$")<p>
int_curr_symbol &#151; the international currency symbol specified by ISO 4217
("USD")<p>
mon_decimal_point &#151; the decimal point for monetary values (".")<p>
mon_grouping &#151; the sizes of digit groups for monetary values. Successive
elements of the string describe groups going away from the decimal point:</p>
<UL><LI>An element value of zero (the terminating null character) calls for the
        previous element value to be repeated indefinitely.</LI>
    <LI>An element value of CHAR_MAX ends any further grouping (and hence ends the
        string).</LI>
</UL>
Thus, the array {3, 2, CHAR_MAX} calls for a group of three digits, then two,
then whatever remains, as in 9876,54,321, while "\3" calls for repeated groups
of three digits, as in 987,654,321. ("\3")</p>

<p>mon_thousands_sep &#151; the separator for digit groups to the left of the decimal point for monetary values (",")</p>
<p>negative_sign &#151; the negative sign for monetary values ("-")<p>
positive_sign &#151; the positive sign for monetary values ("")<p>
frac_digits &#151; the number of digits to display to the right of the decimal
point for monetary values (2)<p>
int_frac_digits &#151; the number of digits to display to the right of the decimal
point for international monetary values (2)<p>
n_cs_precedes &#151; whether the currency symbol precedes or follows the value for
negative monetary values:</p>
<UL><LI>A value of 0 indicates that the symbol follows the value.</LI>
    <LI>A value of 1 indicates that the symbol precedes the value. (1)</LI>
</UL>
<p>n_sep_by_space &#151; whether the currency symbol is separated by a space or by
no space from the value for negative monetary values:</p>
<UL><LI>A value of 0 indicates that no space separates symbol and value.</LI>
    <LI>A value of 1 indicates that a space separates symbol and value. (0)</LI>
</UL>
<p>n_sign_posn &#151; the format for negative monetary values:</p>
<UL><LI>A value of 0 indicates that parentheses surround the value and the
        currency symbol.</LI>
    <LI>A value of 1 indicates that the negative sign precedes the value and the
        currency symbol.</LI>
    <LI>A value of 2 indicates that the negative sign follows the value and the
        currency symbol.</LI>
    <LI>A value of 3 indicates that the negative sign immediately precedes the
        currency symbol.</LI>
    <LI>A value of 4 indicates that the negative sign immediately follows the
        currency symbol. (4)</LI>
</UL>
<p>p_cs_precedes &#151; whether the currency symbol precedes or follows the value
for positive monetary values:</p>
<UL><LI>A value of 0 indicates that the symbol follows the value.</LI>
    <LI>A value of 1 indicates that the symbol precedes the value. (1)</LI>
</UL>
<p>p_sep_by_space &#151; whether the currency symbol is separated by a space or by
no space from the value for positive monetary values:</p>
<UL><LI>A value of 0 indicates that no space separates symbol and value.</LI>
    <LI>A value of 1 indicates that a space separates symbol and value. (0)</LI>
</UL>
<p>p_sign_posn &#151; the format for positive monetary values:</p>
<UL><LI>A value of 0 indicates that parentheses surround the value and the
        currency symbol.</LI>
    <LI>A value of 1 indicates that the negative sign precedes the value and the
        currency symbol.</LI>
    <LI>A value of 2 indicates that the negative sign follows the value and the
        currency symbol.</LI>
    <LI>A value of 3 indicates that the negative sign immediately precedes the
        currency symbol.</LI>
    <LI>A value of 4 indicates that the negative sign immediately follows the
        currency symbol. (4)</LI>
</UL>
The good news is that these parameters describe a broad range of monetary
formats &#151; all the ones in the world, if you believe IBM's report. The bad news
is that they describe formats at a very low level.<p>
Many years ago, I wrote a function called _Fmtval that applied all this
information to the business of converting a monetary amount to text. (See my
book, The Standard C Library, Prentice-Hall, 1992 for a listing of this
function.) The function was messy and hard to read. The published version even
contained an error or two. But it basically did the job. And it really
underscored the need to view monetary formatting at a higher level than is
provided by C locales.</p>

<h4><FONT COLOR="#000080">Template Class moneypunct</FONT></H4>

<p>In the world of the Standard C++ library, that same messy monetary formatting job
is divvied up among two locale facets. Template class moneypunct delivers up
much the same information as is stored in an lconv object, but in a slightly
more structured form. Template class money_put converts a monetary amount to
text, using the formatting information it obtains from a companion moneypunct
facet. And as you might guess, template class money_get performs a related
task. It converts a text sequence to a monetary amount, also using the
formatting information it obtains from a companion moneypunct facet.<p>
<A href="list1.htm">Listing 1</a>
shows just the public interface for template class moneypunct, to
give you an idea of what sorts of information it supplies. It derives from
class money_base, which merely defines the member type pattern and some
enumeration constants. The names of the member functions are pretty self
explanatory. As you might guess, a pattern object provides a kind of format
string that summarizes several of the low-level parameters from the C locale.<p>
Every locale object should store references to the
facets moneypunct&lt;char, false&gt;, moneypunct&lt;char,
true&gt;, moneypunct&lt;wchar_t, false&gt;, and moneypunct&lt;wchar_t,
true&gt;, for use by the char and wchar_t specializations of money_get and
money_put.<p>
I've spent the past two months reviewing a triad similar to moneypunct,
money_get, and money_put &#151; for converting between numeric values and text. To
convert an integer to a sequence of char elements, for example, you call one of
the member functions named put in class num_put&lt;char,
ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;. That member
function eventually calls a function that obtains a reference to the
corresponding facet numpunct&lt;char&gt;, as in:</p>

<pre>
const numpunct&lt;char&gt;&amp; fac =
        use_facet&lt;numpunct&lt;char&gt; &gt;(loc);
</pre>
<p>The
function can then call, say, fac.decimal_point() to determine the decimal point
appropriate for the locale object loc. You will find similar code in member
functions within class num_get&lt;char, istreambuf_iterator&lt;char,
char_traits&lt;char&gt; &gt; &gt;.<p>
The monetary facets behave much the same way, but with an important difference.
Take a closer look at <A href="list1.htm">Listing 1</a>.
 For reasons that probably aren't very good,
template class moneypunct has two parameters, not just one. The full set of
numeric and monetary facet templates thus reads:</p>

<pre>
template&lt;class E&gt; class num_get;
template&lt;class E&gt; class num_put;
template&lt;class E&gt; class numpunct;
template&lt;class E&gt; class money_get;
template&lt;class E&gt; class money_put;
template&lt;class E, bool Intl&gt; class moneypunct;
</pre>
<p>In
all cases, the type parameter E determines the "element," or character, type.
Template class moneypunct alone has an added Boolean parameter, which is true
to specify an international format for monetary amounts (as in USD 1730), or
false to specify the format presumably favored by the locals (as in $1,730.00).
This presents an interesting coding problem.<p>
How does, say, a money_put facet decide which flavor of moneypunct facet to
select? Well, that turns out to be one of the arguments you supply when you
call one of its put member functions. Depending on the value of this argument,
you want to obtain a reference either to a moneypunct&lt;E, false&gt; object or
a moneypunct&lt;E, true&gt; object. But these are different types. You have to
write something like:</p>

<pre>
const moneypunct&lt;char, false&gt;&amp; fac0 =
        use_facet&lt;moneypunct&lt;char, false&gt; &gt;(loc);
const moneypunct&lt;char, true&gt;&amp; fac1 =
        use_facet&lt;moneypunct&lt;char, true&gt; &gt;(loc);
</pre>
<p>The
function then must evaluate an expression such as:</u></b></p>

<pre>
intl ? fac1.decimal_point() : fac0.decimal_point()
</pre>
<p>each
time it needs to determine the decimal point appropriate for the locale object
loc. If such expressions occurred in just one or two places, the problem
wouldn't be so bad, but in fact the code for money_get and money_put contains
numerous calls to moneypunct member functions. Yuk.</p>
<p>I avoided this problem by defining a common base class for the two related
flavors of moneypunct. <A href="list2.htm">Listing 2</a>
shows template class _Mpunct, which implements
the code common to moneypunct&lt;E, false&gt; and moneypunct&lt;E, true&gt;.
The Boolean "international" flag is stored as a member object when an object of
class _Mpunct&lt;E&gt; is constructed. This permits the code above to be
rewritten as:</p>

<pre>
const _Mpunct&lt;char&gt;&amp; fac = intl
        ? use_facet&lt;moneypunct&lt;char, true&gt; &gt;(loc)
        : use_facet&lt;moneypunct&lt;char, false&gt; &gt;(loc);
</pre>
<p>You
can then determine the appropriate decimal point by calling
fac.decimal_point(), as with the numeric facets.</p>
<p>As with the facets I've discussed earlier, initializing an object of
class moneypunct&lt;_E&gt; requires some amount of implementation-specific
magic. I sidestep much of that here, but I do show a bit more of the process
than I have for other facets. In particular, I sketch out how the stored
parameter values might be initialized from the C locale machinery.<p>
C locales deal purely with elements of type char. The Standard C++ library must
also supply wchar_t versions of the same information. Template class moneypunct
must be prepared to convert char elements to elements of some fairly arbitrary
type E. Thus, you will find a bit of magic code within the member function
_Init:</p>
<UL><LI>The macro _WIDEN(E, ch) converts ch, a char code value from the basic C
        character set, to the element type E. Typically, this involves little or no
        work.</LI>
    <LI>The macro _MAKLOCSTR(E, p) converts the null-terminated char string
        beginning at p to a null-terminated sequence of elements of type E.</LI>
</UL>
<p>_Init calls the member function _Makpat to convert several of the parameter
values returned by localeconv to a pattern object. The conditional expression
that does all the work intentionally favors speed and compactness over
readability. I make no apologies for it.<p>
<A href="list3.htm">Listing 3</a>
shows template class moneypunct and its related templates. All the
complexity is captured in the base class _Mpunct&lt;E&gt;, so there is little
left to supply.<p>
<A href="list3.htm">Listing 3</a>
also shows the template class moneypunct_byname. It provides a way to
create a moneypunct&lt;_E&gt; object whose behavior is consistent with a locale
whose name you know. It joins the (incomplete) ranks of similar template
classes, such as ctype_byname and numpunct_byname. You use them to handcraft a
locale object that captures at least some of the properties of a named locale
you presumably wish to make use of.</p>

<h4><FONT COLOR="#000080">Coming Attractions</FONT></H4>

<p>Template
class moneypunct is not terribly exciting in its own right. Its primary duty,
as I indicated above, is to supply information for use by the template classes
money_put and money_get. The real action starts next month. o
</p>
<p><i>P.J. Plauger is Senior Editor of C/C++ Users Journal and President of
Dinkumware, Ltd. He is the author of the Standard C++ Library shipped with
Microsoft's Visual C++, v5.0. For eight years, he served as convener of the ISO
C standards committee, WG14. He remains active on the C++ committee, J16. His
latest books are The Draft Standard C++ Library, Programming on Purpose (three
volumes), and Standard C (with Jim Brodie), all published by Prentice-Hall. You
can reach him at pjp@plauger.com.
</i></p>

<h4><a href="../../../source/1998/mar98/plauger.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</body></html>
