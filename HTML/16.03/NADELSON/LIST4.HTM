


<HTML><HEAD>

<TITLE>March 1998/Real-time Error Processing on a Unix Network/Listing 4</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4>
<A name="HEADING1">Listing 4: Error processing server</A></h4>


<pre>
main()
{
    int sockfd;                  // Socket Id
    struct sockaddr_in servAddr; // Holds server socket address
    struct sockaddr_in cliAddr;  // Holds client socket address
    int ret;                     // Generic return value
    int clilen;                  // Length of the client socket 
                                 // address structure
    problemMessage aProb;        // The error message received

    // Create a datagram (UDP) socket
    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) &lt; 0)
    {
        cerr &lt;&lt; "Could not open datagram socket" &lt;&lt; endl;
        return 1;
    }

    // Set up a structure to accept socket messages
    // from clients on the network
    memset((char *)&amp;servAddr, 0, sizeof(servAddr));

    servAddr.sin_family = AF_INET;
    servAddr.sin_addr.s_addr = htonl(INADDR_ANY);
    servAddr.sin_port = htons(6543);

    // Bind this structure to the socket identifier
    if (bind(sockfd, (struct sockaddr *)&amp;servAddr, 
        sizeof(servAddr)) &lt; 0)
    {
        cerr &lt;&lt; "Could not bind to socket" &lt;&lt; endl;
        return 1;
    }

    clilen = sizeof(cliAddr);

    for(;;)
    {
        //  Wait for a message on the socket
        ret = recvfrom(sockfd, (char *)&amp;aProb, sizeof(problemMessage), 
            0, (struct sockaddr *)&amp;cliAddr, &amp;clilen);
        if (ret &lt; 0)
        {
            cerr &lt;&lt; "Error receiving message from socket" &lt;&lt; endl;
            continue;
        }

        // Return the message identifier directly back
        // to the client for acknowlegement
        int retval = aProb.getMessageId();
        if (sendto(sockfd, (char *)&amp;retval, sizeof(retval), 0, 
            (struct sockaddr *)&amp;cli_addr, clilen) != sizeof(retval))
                cerr &lt;&lt; "Error sending to socket" &lt;&lt; endl;

        // Display the values of the error message
        cout &lt;&lt; "**** New Message Received ****" &lt;&lt; endl;
        cout &lt;&lt; "App Name: " &lt;&lt; aProb.getApplicationName() &lt;&lt; endl;
        cout &lt;&lt; "PID     : " &lt;&lt; aProb.getProcessId() &lt;&lt; endl;
        cout &lt;&lt; "Message : " &lt;&lt; aProb.getProblemMessage() &lt;&lt; endl;
        cout &lt;&lt; "Severity: " &lt;&lt; aProb.getSeverity() &lt;&lt; endl;
        cout &lt;&lt; "Msg Num : " &lt;&lt; aProb.getMessageId() &lt;&lt; endl &lt;&lt; endl;
    }

    return 0;
}
//End of File
</pre>
</body></html>
