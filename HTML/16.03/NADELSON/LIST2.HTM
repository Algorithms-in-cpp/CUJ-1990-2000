


<HTML><HEAD>

<TITLE>March 1998/Real-time Error Processing on a Unix Network/Listing 2</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4>
<A name="HEADING1">Listing 2: sendAlert constructor</A></h4>


<pre>
sendAlert::sendAlert(char *_applicationName, int timeoutCount) : 
  theProblem(_application_name, timeoutCount)
{
  pthread_t threadId;
  sigset_t signalSet;
    
  sigemptyset(&amp;signalSet); // Initialize signal set to contain no signals
  sigaddset(&amp;signalSet, SIGALRM); // Add SIGALRM to the signal set
  
  // Block the SIGALRM signal from the main process thread
  sigprocmask(SIG_BLOCK, &amp;signalSet, NULL); 
                                               
  status = 1;
  if (sockfd = socket(AF_INET, SOCK_DGRAM, 0)) &lt; 0) // create UDP socket
  {
    cerr &lt;&lt; "Could not open datagram socket";
    status = 0;
    return;
  }
  memset((char *)&amp;servAddr, 0, sizeof(servAddr));
  servAddr.sin_family = AF_INET;        
  // Set the appropriate subnet address of the server
  servAddr.sin_addr.s_addr = inet_addr("555.555.555.0");    
  servAddr.sin_port = htons(6543); // Set appropriate port of the server
  memset((char *)&amp;cliAddr, 0, sizeof(cliAddr));
  cliAddr.sin_family = AF_INET;
  // Accept acknowledgment from server from any address in the network
  cliAddr.sin_addr.s_addr = htonl(INADDR_ANY);        
  cli_addr.sin_port = htons(0);
  // Bind socket to receive ack. from any server in network, allowing
  // flexibility with respect to placement of server in the network
  if (bind(sockfd, (struct sockaddr *)&amp;cliAddr, sizeof(cliAddr))&lt;0)
  {
    cerr &lt;&lt; "Could not bind to socket";
    status = 0;
    return;
  }
  // Create the processMessageQueueThread
  if (pthread_create(&amp;threadId, 0, processMessageQueueThread,
    (void *)NULL) != 0)
  {
    cerr &lt;&lt; "Could not create processMessageQueueThread";
    status = 0;
    return;
  }
  // No need to wait for thread completion -- it's in an endless loop
}
//End of File
</pre>
</body></html>
