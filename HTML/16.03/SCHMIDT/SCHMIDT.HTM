





<HTML>
     
     <HEAD>

<TITLE>March 1998/The Learning C/C++urve</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<H2><A href="../tocmar.htm"><IMG src="../../toc.gif" ALT="Back to TOC" WIDTH="54" HEIGHT="54"></A>
<FONT COLOR="#FF0000">Columns</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">The Learning C/C++urve: Reflective C++</FONT></H2>
<H2 ALIGN="center"><FONT COLOR="#800000">Bobby Schmidt</FONT></H3>

<BLOCKQUOTE>
<p>Bobby discusses various forms of nothing, from NULL pointers that never amount to
anything to little pictures of nothing in particular.</p></BLOCKQUOTE><hr>
<BLOCKQUOTE>
<p><b><i>Copyright &#169; 1998 Robert H. Schmidt</i></b></p>
<p>Last month I promised I was done with pointers. I lied. Like Ellen Ripley in
the latest Alien flick, pointers in this column just refuse to die. If this
troubles you, blame the author of two obscenely influential C++ books for much
of your woe.</p>

<h4><FONT COLOR="#000080">You Say NULL, I Say nil</FONT></H4>

<p>The author in question is Diligent Reader Scott Meyers, author of the seminal tomes
Effective C++ <a href="#1">[1]</a> and More Effective C++ <a href="#2">[2]</a>. Scott once told me he considered
himself a human kill file. One of his undead ideas wandered into my inbox:<p>
"Regarding your column in the December CUJ, I think the approach I describe on
pp. 111-112 of [Effective C++, Second Edition] is better than your nil,
overlooking for the moment that my design requires support for member
templates. What do you think?"<p>
What did I think? At first I thought he was bored writing his talk for the
Software Development (SD) conference, and needed a diversion. Later I thought
he may have been serious, and took a gander at his approach. As the text on
page 111 of Effective C++ shows, Scott is trying to solve the familiar problem
of overloading in the presence of NULL:</p>

<pre>
#define NULL 0
void f(int);
void f(void *);
 
// error -- which 'f' gets called?
f(NULL);
</pre>
<p>Scott wants a NULL replacement that can't be confused for an int, but still has
NULL's property of turning itself into any null pointer type. His solution</p>

<pre>
class NullClass
    {
public:
    template&lt;class T&gt;
    operator T *() const
        {
        return 0;
        }
    };
 
const NullClass NULL;
</pre>
<p>relies on a comparatively recent addition to C++: member function templates. The
template operator T *() lets NullClass act as if it has valid conversions for
every possible pointer type:</p>

<pre>
class NullClass
    {
public:
    operator char() const;
    operator int() const;
    operator unsigned() const;
    // ... ad infinitum
    };
</pre>
<p>with the compiler picking the correct conversion as needed. If we extend the example
to</p>

<pre>
int *p = NULL;
</pre>
<p>the
compiler treats the initialization effectively as</p>

<pre>
int *p = NULL.operator int *();
</pre>
<p>and instantiates the function NullClass::operator int *(). That function returns
the integer 0, which the compiler converts to the null pointer of type int
*.</p>
<p>Unlike the real macro NULL, this NULL is not an integer, and does not turn
itself into an integer, preventing code like</p>

<pre>
int i = NULL; // error
</pre>

<p>On page 112, Scott's embellished NullClass:</p>
<UL><LI>is anonymous, preventing the manufacture of multiple NULL
        objects,</LI>
    <LI>declares a public pointer-to-member conversion,</LI>
    <LI>declares a private (unimplemented) operator&amp;, preventing NULL's address
        from being taken. As Scott notes, my nil can have its address taken, which he
        correctly calls an "unexpected side effect."</LI>
</UL>

<h4><FONT COLOR="#000080">My Take</FONT></H4>

<p>Scott is trying to solve a problem different from mine. I want a replacement for NULL
that allows more fine-tuned interaction with my auto_pointer class, while Scott
wants a plug-and-play replacement for the real NULL. In my response to Scott I
noted that:</p>
<UL><LI>Anonymous class names make me nervous, especially in light of type
        equivalence rules and the One Definition Rule. But I also acknowledge his
        method pollutes the global name space less.</LI>
    <LI>Pointers to members are so seldom used, I hadn't even considered them for
        auto_pointer. In fact, the Standard Template Library (STL) auto_ptr class &#151;
        from which I took my original inspiration &#151; makes no attempt to handle
        pointers to members. For a complete NULL replacement like Scott's, pointers to
        members make sense.</LI>
    <LI>I bet a lot of compilers don't support member templates correctly</LI>
</UL>
<p>if at all, a point I bring home shortly.</p>
<UL><LI>The smarts in Scott's design lie within the pointer itself. The smarts in
        mine lie in auto_pointer: when passed a dummy argument of type class nil,
        auto_pointer knows to treat itself as a conceptual NULL pointer. The nil object
        is completely unremarkable and unaware.</LI>
    <LI>I don't want all of NULL's features. Instead, I want to selectively enable
        or disable certain pointer behavior. Scott's NULL replicates most of the real
        NULL's behavior, desirable and otherwise.</LI>
</UL>
<p>Scott admits in print that users can still mix the raw symbol 0 with
pointers, completely ignoring his NULL. This is an advantage I see in my
auto_pointer/nil combination: by declaring certain auto_pointer members
private, I prevent users from mixing 0 and void * with auto_pointer. Scott's
NULL, on the other hand, is at the mercy of C++'s built-in behavior for
pointers.<p>
As Dan Saks reminds me, using the name NULL renders a program non-portable and
ill-formed, since the name is reserved for the C++ Standard Library. That's why
I chose the name nil for my replacement  but again, Scott is looking to make a
silent replacement that leaves all NULL client code intact.<p>
In the end, we are solving related but distinct problems. If your goal is to
use real C++ pointers but replace NULL, favor Scott's design. If your goal is
to replace pointers, consider my design.</p>

<h4><FONT COLOR="#000080">Member Templates, Briefly</FONT></H4>

<p>In a followup mail, Scott noted that his solution probably doesn't allow</p>

<pre>
if (NULL)
</pre>

<p>which the real NULL (and my nil) does allow. I say probably because we are both
puzzled by the behavior we saw in MSVC 5.0 <a href="#3">[3]</a>. Given Scott's definition of
NULL, the code</p>

<pre>
if (NULL)
    *NULL;
</pre>

<p>compiles in MSVC &#151; but neither of us can figure out why. We think this should fail to
compile.</p>
<p>The controlling expression in an if statement is of type bool. But there is
no conversion from NULL to bool; instead, NULL would have to first transform
itself into one of its "infinite" possible pointer types, which would then
convert to bool. Since no one pointer-to-bool conversion is best, the compiler
should find the conversion ambiguous.<p>
I'm guessing MSVC is implicitly turning NULL into void *; to support this
theory, I found that adding</p>

<pre>
private:
    operator void *() const;
</pre>

<p>to the class definition kept the example from compiling. I have temporarily lost
access to MSVC, so I can't investigate further.</p>
<p>As for *NULL, I haven't a clue to what the compiler is doing. It apparently
thinks it's turning NULL into some pointer type, but I don't know which one. I
believe this is a bug in MSVC, but again I am not able to research more. As
Scott so charmingly puts it:<p>
"MSVC 5 takes an interesting approach to member templates. It parses them, but
it doesn't instantiate them unless you explicitly tell it to, and of course
that defeats the purpose. Sigh. Maybe they'll fix this in the next release.
Then again, maybe they'll follow their lead on operator new[],which has been in
the standard since 1992 and still isn't recognized by MSVC..."<p>
(And I thought I had an attitude.)<p>
If you don't have at least one of Scott's books, turn in your Diligent Reader
pledge pin until you get one. They are among the few books that I consistently
put on the Recommended Reading page of my course handouts.</p>

<h4><FONT COLOR="#000080">Mind Your Ps and Qs and ==s</FONT></H4>

<p>When I publish coding examples, I often leave them purposely incomplete, hoping that
you will discover where the design can be improved. Diligent Reader Keith
Davies made just such a discovery in my December 1997 column. At the end of
that column, I sketched ways that an auto_pointer equality operator could
work:</p>

<pre>
auto_pointer&lt;int&gt; p;
int *q = NULL;
 
p == p; // #1, OK, no conversion
p == q; // #2, OK, converts from int *
p == nil; // #3, OK, converts from class nil
</pre>

<p>Keith's concern is with example #2:</p>

<pre>
p == q;
</pre>

<p>which is really translated as</p>

<pre>
p.operator==(q);
</pre>
<p>Since there is no auto_pointer&lt;int&gt;::operator== that takes an int *, q converts
to a type that operator== does take:</p>

<pre>
p.operator==(auto_pointer&lt;int&gt;(q));
</pre>
<p>This
requires the construction of a temporary auto_pointer&lt;int&gt; object, as I
mentioned in print with the original example:</p>
<p><i><blockquote>You may also object to constructing temporary objects this
way. You could create specialized operator== and operator!= overloads tuned to
real pointers and nil, but I leave that as an exercise for the
student.</i></blockquote></p>
<p>But Keith goes further, correctly noting that example #2 is not commutative;
that is, the expression p == q is not always equivalent to q == p. While the
former calls an auto_pointer member (as shown above), the latter actually calls
the language's built-in == operator for pointers:</p>

<pre>
q == p.operator int *();
</pre>
<p>As
long as you mix auto_pointers and NULL real pointers (what Keith calls
"mundane" pointers), these two permutations of == will net to the same result.
The trouble comes if you mix auto_pointer with a non-NULL real pointer:</p>

<pre>
auto_pointer&lt;int&gt; p;
static int n;
int *q = &amp;n; // q is a non-NULL real pointer
 
p == q; // really p.operator==(auto_pointer&lt;int&gt;(q))
q == p; // really q == p.operator int *()
</pre>
<p>While
q == p works as expected, p == q does not. When the temporary object
auto_pointer&lt;int&gt;(q) is destroyed, the auto_pointer destructor
effectively calls delete on q. For a NULL q, this is no problem, since delete
NULL is well-defined and benign. But deleting a non-NULL q &#151; especially one
that was never dynamically allocated to start with &#151; is disastrous.<p>
Keith found the simple solution: add one more operator== overload to
auto_pointer:</p>

<pre>
bool operator==(T const *);
</pre>
<p>Now
the expression p == q translates as</p>

<pre>
p.operator==(q);
</pre>
<p>requiring
no construction (and dangerous destruction) of a temporary auto_pointer object.</p>

<h4><FONT COLOR="#000080">Hip Hip Array!</FONT></H4>

<p>Well,
fun is fun, but we really must get on with our array abstraction, lest you lose
all faith in me. Our path will be much like the one we took with pointers:</p>
<UL><LI>Identify properties of real arrays.</LI>
    <LI>Among those properties, separate interface from implementation.</LI>
    <LI>Create a class definition that emulates the array interface's semantics and
        (where possible) syntax.</LI>
    <LI>Incrementally omit array interface properties we don't want, and add
        non-array interface properties we do want. This is typically the hardest (and
        most interesting) part of the design.</LI>
    <LI>At every step, hide the implementation behind the class's encapsulation
        barrier.</LI>
</UL>
<p>Arrays are a primitive form of container, or object that holds a collection
other objects. While the C++ STL makes available all kinds of containers, and
the C Standard Library has long supported containers like FILE, arrays remain
the simplest container mechanism built in to these languages directly.<p>
C and C++ array containers share several fundamental properties:</p>
<UL><LI>A given array a contains a fixed number of other objects, called a's
        elements. The number of elements N is called a's length. Once a is created, N
        cannot change.
    <LI>sizeof(a) yields the total number of bytes occupied by a. Each a element is
        of the same static type and occupies sizeof(a) / N bytes.</LI>
    <LI>a has value semantics. Storage for a's elements exists within a itself.</LI>
    <LI>a supports random access of its elements, referenced by successive whole
        number indices ranging from 0 to N - 1. Those elements are stored contiguously
        in their indexed order.</LI>
    <LI>The name a represents a non-modifiable lvalue, even if a is declared
        non-const.</LI>
    <LI>In expressions, a often converts or "decays" to a pointer. The expression
        a[i] is equivalent to *(a + i).</LI>
</UL>
<p>(We'll run into other properties, especially for C++ arrays, as we go
along.)<p>
Next month, we'll partition the interface from the implementation, mapping both
into a C++ class. Until then, I leave you with this exercise: if you were
writing the next column, how would you partition these properties? Why? Really
be aware of your rationale, and remember Heisenberg: the presence of
implementation properties can affect interface properties (and vice-versa).</p>

<h4><FONT COLOR="#000080">Artistic Expressions</FONT></H4>

<p>Around the time you read this, I'll be pontificating at SD West. One of my talks
features a discussion of lvalues vs. rvalues, a topic potentially confusing to
C++ programmers &#151; the simple C model of "lvalues are objects, rvalues are
values" breaks down in the presence of class objects, and requires careful
construction of user-defined operators.<p>
As we get more into the array class design, we'll find lvalues and rvalues to
be vital design elements. As a teaser of sorts, I want to mention a related
parlor trick sure to thrill C++ newbies.<p>
Consider the simple C++ expression</p>

<pre>
++i
</pre>
<p>where i is a modifiable lvalue of some built-in type. Because the result of ++i is
itself a modifiable lvalue, it can in turn be the operand of another
pre-increment operation <a href="#4">[4]</a>:</p>

<pre>
++++i
</pre>

<p>The same notion extends to pre-decrement:</p>

<pre>
++--++i
</pre>

<p>To make the pattern even more fun, toss in unary plus and minus:</p>

<pre>
+-++--++i
</pre>

<p>identifiers with all underscores:</p>

<pre>
+-++--++__
</pre>

<p>and binary + and -:</p>

<pre>
+-++--++___+___-___
</pre>

<p>If you possess a pulsing right brain, try crafting ASCII art. For instance, the
opaque expression</p>

<pre>
+ + + ++ ++ _ - _
</pre>

<p>rendered in two dimensions becomes a charming little tree:</p>

<pre>
        +
       + +
      ++ ++
       _-_
</pre>

<p>With the addition of other operators, the possibilities frankly boggle this writer's
mind.[Gee, Bobby, are you trying to tell us you're running out of work? We can
remedy that. mb] If you have especially clever or aesthetic examples of such
artistic expressions, send them to me; I may publish a couple, depending on how
distracted my editors are that day <a href="#5">[5]</a>.</p>

<h4><FONT COLOR="#000080">WG14 Follies</FONT></H4>

<p>I
am writing this in mid-December 1997. The C9X Committee Draft has just hit the
virtual streets for public review. You can find a copy at
&lt;http://www.dkuug.dk/JTC1/SC22/open/n2620/&gt;. Also read more about it on
CUJ's website (http://www.cuj.com).<p>
The page &lt;http://www.x3.org/press/1997/pr97157.htm&gt; has guidelines for
public comments on the new Draft. The comment period closes on 3 March 1998, so
if you have suggestions or complaints, submit them now. Any comments missing
this launch window will be considered for the second public review.</p>

<h4><FONT COLOR="#000080">Erratica</FONT></H4>

<p>In
response to my January 1998 column, Diligent Readers Gary Powell and the
now-ubiquitous Scott Meyers recommend an article in the July/August 1997 issue
of the C++ Report. The article, by Carlo Pescio, is called "Template
Metaprogramming." According to Gary:<p>
"[The article] uses templates to generate types which are at least a specified
number of bits. I think it would do exactly what you want less the use of the
restricted keywords unsigned&lt;bits&gt; and signed&lt;bits&gt;."<p>
I'm trying to get a copy of the article in question; once I do, I'll summarize
my reaction here. [For more on template metaprogramming, also see Pescio's
"Binary Template Metaprogramming," in the February 1997 issue of CUJ mb]<p>
And finally, I have fan mail from some bloke named Stan Kelly-Bootle:<p>
"Bobby: you are correct in saying that log(-2) is not a real number (CUJ,
December 97) but wrong with: "...taking the log of a negative number is a
mathematical no-no." Not at all! log(-n) has an infinite number of values, the
principal value being simply [sic] log(n) + i*pi (where n&gt;0; i is sqrt(-1)
and the logs are Napierian [base e]). The better C++ math packages have a
ComplexNumber class and a log function that takes arbitrary arguments."<p>
Stan caught me making a silent assumption. I was implicitly working within the
mathematical real number system, since I was discussing floating-point
representations of those real numbers. My mistake was not making this
assumption explicit. Now that complex types are a standard part of ISO C9X and
C++, I suppose we all need to stop making such unspoken assumptions.</p>

<h4><FONT COLOR="#000080">Notes</FONT></H4>

<p><a name="1"></a>[1]
Scott Meyers. Effective C++ Second Edition (Addison-Wesley, 1997). ISBN
0201924889.<p>
<a name="2"></a>[2] Scott Meyers. More Effective C++ (Addison-Wesley, 1996). ISBN 020163371X.<p>
<a name="3"></a>[3] Neither of my Mac OS compilers supports member templates, so I can't
compare their behaviors.<p>
<a name="4"></a>[4] For this trick, I'm purposely ignoring the implications of expression
evaluation ordering and sequence points.<p>
<a name="5"></a>[5] Using identifiers and operators only &#151; no comments or quoted char/string
literals. And of course, all examples must compile.
</p>
<p><i>Bobby Schmidt is a freelance writer, teacher, consultant, and programmer.
He is also a member of the ANSI/ISO C standards committee, an alumnus of
Microsoft, and an original "associate" of (Dan) Saks &amp; Associates. In other
career incarnations, Bobby has been a pool hall operator, radio DJ, private
investigator, and astronomer. You may summon him at 14518 104th Ave NE Bothell
WA 98011; by phone at +1-425-488-7696, or via Internet e-mail as
rschmidt@netcom.com.
</i></p></BLOCKQUOTE>
</body></html>
