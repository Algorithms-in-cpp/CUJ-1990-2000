<HTML><HEAD>
<TITLE>May 1993/Templates in C++/Listing 5</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 5 <I>Definitions for order Statistics tree</I></A></h4>
<pre>//========================================================
// os.h
//      Header for order statistics tree (OSTree) class.
//========================================================

#include "btree.h"

template&lt;class T&gt; class OSNode : public BinaryNode&lt;T&gt; {
public:
   int size;
public:
   OSNode(const T&amp; x, int Size);
   OSNode(const T&amp; x, OSNode&lt;T&gt; *p = 0,
      OSNode&lt;T&gt; *l = 0, OSNode&lt;T&gt; *r = 0);
   
   BinaryNode&lt;T&gt;*LeftRotate(BinaryNode&lt;T&gt; *root);
   BinaryNode&lt;T&gt;*RightRotate(BinaryNode&lt;T&gt; *root);
   BinaryNode&lt;T&gt;*DeleteNode(BinaryNode&lt;T&gt; *z);
   BinaryNode&lt;T&gt;*Insert(const T&amp; AddMe);
   
   T *Select(int i);
   void PrintNodes();
   int NumNodes();
   int Rank();
   friend void CheckNumNodes(BinaryNode&lt;T&gt;*x);
};

template&lt;class T&gt;
OSNode&lt;T&gt;::OSNode(const T&amp; X, int Size): BinaryNode&lt;T&gt;(X)
{
   size = Size;
}

template&lt;class T&gt;
OSNode&lt;T&gt;::OSNode(const T&amp; x,OSNode&lt;T&gt; *p = 0,
   OSNode&lt;T&gt; *l = 0, OSNode&lt;T&gt; *r = 0):
      BinaryNode&lt;T&gt;(x, p, l, r)
{
   size = 0;
}

template&lt;class T&gt;
BinaryNode&lt;T&gt;*
OSNode&lt;T&gt;::LeftRotate(BinaryNode&lt;T&gt; *root)
{
   OSNode&lt;T&gt;*ret = (OSNode&lt;T&gt; *) BinaryNode&lt;T&gt;::
                                 LeftRotate(root);
   ((OSNode&lt;T&gt; *)p)-&gt;size = size;
   size = (l) ? ((OSNode&lt;T&gt;*)1)-&gt;size + 1 : 0;
   size += (r) ? ((OSNode&lt;T&gt;*)r)-&gt;size + 1 : 0;
   
   return ret;
}

template&lt;class T&gt;
BinaryNode&lt;T&gt;*
OSNode&lt;T&gt;::RightRotate(BinaryNode&lt;T&gt; *root)
{
   OSNode&lt;T&gt; *ret = (OSNode&lt;T&gt;*)BinaryNode&lt;T&gt;::RightRotate(root);
   ((OSNode&lt;T&gt; *)p)-&gt;size = size;
   size = (l) ? ((OSNode&lt;T&gt;*)l)-&gt;size + 1 :0;
   size += (r) ? ((OSNode&lt;T&gt;*)r)-&gt;size + 1 :0;
   
   return ret;
}

template&lt;class T&gt;
T*
OSNode&lt;T&gt;::Select(int i)
{
   OSNode&lt;T&gt; *trav = this;
   while(trav){
      
      int rank = (trav-&gt;l) ? ((OSNode&lt;T&gt; *) trav-&gt;l)-&gt;size+
1 : 0;
      if(i == rank)
         return &amp;trav-&gt;x;
      if (i &lt; rank)
         trav = (OSNode&lt;T&gt;*) trav-&gt;l;
      else {
         trav = (OSNode&lt;T&gt;*) trav-&gt;r;
         i -= rank + 1;
      }
   }
   return 0;
}

template&lt;class T&gt;
int
OSNode&lt;T&gt;::NumNodes()
{
   int ret = (l)?((OSNode&lt;T&gt;*)l)-&gt;NumNodes(): 0;
   ret += (r)?((OSNode&lt;T&gt;*) r)-&gt;NumNodes() : 0;
   return ret + 1;
}

template&lt;class T&gt;
int
OSNode&lt;T&gt;::Rank()
{
   int ret = (l) ? ((OSNode&lt;T&gt;*)l)-&gt;size : 0;
   return ret + 1;
}

template&lt;class T&gt;void
CheckNumNodes(BinaryNode&lt;T&gt; *x)
{
   if(((OSNode&lt;T&gt; *) x)-&gt;NumNodes() ! =
      ((OSNode&lt;T&gt; *) x)-&gt;size)
      cerr &lt;&lt;"Problems\n";
}

template&lt;class T&gt;
BinaryNode&lt;T&gt;*
OSNode&lt;T&gt;::DeleteNode(BinaryNode&lt;T&gt;*z)
{
   OSNode&lt;T&gt; *trav;
   if (z &amp;&amp; z-&gt;l &amp;&amp; z-&gt;r)
      trav = (OSNode&lt;T&gt; *) z-&gt;Succ();
   else
      trav = (OSNode&lt;T&gt;*) z;
   
   while (trav) {
      trav-&gt;size--;
      trav = (OSNode&lt;T&gt; *)trav-&gt;p;
   }
   return BinaryNode&lt;T&gt;::DeleteNode(z);
}

template&lt;class T&gt;BinaryNode&lt;T&gt;*
OSNode&lt;T&gt;::Insert(const T&amp; AddMe)
{
   OSNode&lt;T&gt; *x = this;
   OSNode&lt;T&gt; *y = 0;
   while (x) {
      
      x-&gt;size++;
      y = x;
      x = (AddMe &lt; x-&gt;x) ? (OSNode&lt;T&gt; *) x-&gt;l:
                                (OSNode&lt;T&gt; *) x-&gt;r;
   }
   OSNode&lt;T&gt; *addme = new OSNode&lt;T&gt;(AddMe,y);
   return BinaryNode&lt;T&gt;::InsertNode(addme);
}

template&lt;class T&gt;void
OSNode&lt;T&gt;::PrintNodes()
{
   OSNode&lt;T&gt; *trav = (OSNode&lt;T&gt;*) Min();
   while (trav) {
      cout &lt;&lt;trav-&gt;x &lt;&lt; "(" &lt;&lt;trav-&gt;size &lt;&lt;") ";
      trav = (OSNode&lt;T&gt; *) trav-&gt;Succ();
   }
}

template&lt;class T&gt;class OSTree : public BinaryTree&lt;T&gt; {
public:
   OSTree();
   T *Select(inti);
   void Insert(const T&amp; AddMe);
   void PrintNodes();
   void CheckNodes();
};

template&lt;class T&gt;
OSTree&lt;T&gt;::OSTree()
{
   root = 0;
}

template&lt;class T&gt;
T*
OSTree&lt;T&gt;::Select(int i)
{
   return (root) ? ((OSNode&lt;T&gt; *)root)-&gt;Select(i) : 0;
}

template&lt;class T&gt;
void
OSTree&lt;T&gt;::Insert(const T&amp; AddMe)
{
   if (root)
      root = ((OSNode&lt;T&gt; *)root)-&gt;Insert(AddMe);
   else
      root = new OSNode&lt;T&gt;(AddMe);
}

template&lt;class T&gt;
void
OSTree&lt;T&gt;::PrintNodes()
{
   if(root)
      ((OSNode&lt;T&gt;*)root)-&gt;PrintNodes();
}

template&lt;class T&gt;
void
OSTree&lt;T&gt;::CheckNodes()
{
   if (root){
      BinaryNode&lt;T&gt; *trav = root-&gt;Min();
      while (trav){
      if (((OSNode&lt;T&gt; *)trav)-&gt;NumNodes() !=( (OSNode&lt;T&gt;*)
trav)-&gt;size + 1)
         cerr &lt;&lt; "Problems\n";
      trav = trav-&gt;Succ();
      }
   }
}
/*End of File*/
</pre>
</BODY>
</HTML>
