<HTML><HEAD>
<TITLE>May 1993/Templates in C++/Listing 4</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 4 <I>Program to test class templates in <a href="list3.htm">Listing 3</a></A></I></h4>
<pre>#include "btree.h"

#undef VERBOSE

#ifdef __TURBOC__
extern unsigned int_stklen = 24576;
#endif

const int NumInts = 1000;
const int NumReps = 1000;

int
compare_ints(const void *a,const void *b)
{
   return *(const int*) a - *(const int *) b;
}

int
main()
{
   int*arr = new int[NumInts];
   int seed;
   BinaryTree&lt;int&gt; *inttree;
   
   randomize();
   
   for (int i = 0; i &lt; NumReps; i++) {
      int j;
      int min = INT_MAX;
      int max = INT_MIN;
      
      inttree = new BinaryTree&lt;int&gt;;
      
      cout &lt;&lt; i &lt;&lt; '\n';
      
      for(j = 0; j &lt; NumInts; j++) {
         int x = rand();
         if (x &lt; min)
            min = x;
         if (x &gt; max)
            max = x;
         arr[j] = x;
         inttree-&gt;Insert(x);
         if (inttree-&gt;CheckInvariant())
            cout &lt;&lt; "Problems\n";
      }
      if (min ! = *inttree-&gt;Min() ||
         max ! = *inttree-&gt;Max())
         cout &lt;&lt; "Min/max problems\n";
      for (j = 0; j &lt; NumInts; j++){
         BinaryTreeIter&lt;int&gt; q(*inttree, arr[j]);
         if (*q.Contents() ! = arr[j])
            cout &lt;&lt; "Serious problem\n";
      }
      BinaryTreeIter&lt;int&gt; *inorder =
                   new BinaryTreeIter&lt;int&gt;(*inttree);
      inorder-&gt;Min();
      if (min != *inorder-&gt;Contents())
         cout &lt;&lt; "Problems in inorder initialization\n";
      j = 0;
      qsort(arr, NumInts, sizeof(int), compare_ints);
      while(inorder-&gt;Contents()) {
         inorder-&gt;Succ();
         int *next = inorder-&gt;Contents();
         if (next&amp;&amp;(*next &lt; min || *next ! = arr[++j]))
            cout &lt;&lt; "Problems in inorder traversal\n";
         if (next)
            min = *next;
      }
      for(j = 0; j &lt; NumInts; j++){
         inttree-&gt;DeleteItem(arr[j]);
         if(inttree-&gt;CheckInvariant())
            cout &lt;&lt; "Problems deleting\n";
         BinaryTreeIter&lt;int&gt; q(*inttree, arr[j]);
         if (q.Contents() &amp;&amp; arr [j+1] ! = arr[j])
            cout &lt;&lt;"Problems deleting II\n";
      }
      delete inttree;
   }
   return 0;
}
/*End of File*/
</pre>
</BODY>
</HTML>
