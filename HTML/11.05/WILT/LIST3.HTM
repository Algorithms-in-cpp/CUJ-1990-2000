<HTML><HEAD>
<TITLE>May 1993/Templates in C++/Listing 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 3 <I>Definitions for class templates to implement a binary tree</I></A></h4>
<pre>// =================================================================
// btree.h
//      Template-based balanced binary tree class.
//      Copyright (C) 1992 by Nicholas Wilt. All rights reserved.
// =================================================================

#ifndef __BTREE__
#define __BTREE__

// BinaryNode is the class template that does all the work.
// All the binary tree primitives are implemented in here.
template&lt;class T&gt;
class BinaryNode {
protected:
   // For node colors
   enum RedBlack { Black, Red };
public:
   T x;                              // Node contents
   enum RedBlack clr;                // Color of node (red or black)
   BinaryNode&lt;T&gt; *l, *r, *p;         // Left, right and parent pointers

protected:
   // Tree manipulations used during insertion and deletion
   virtual BinaryNode&lt;T&gt; *LeftRotate(BinaryNode&lt;T&gt; *root);
   virtual BinaryNode&lt;T&gt; *RightRotate(BinaryNode&lt;T&gt; *root);
   virtual BinaryNode&lt;T&gt; *DeleteFixup(BinaryNode&lt;T&gt; *x, BinaryNode&lt;T&gt; *p);

public:
   // Constructors. Node always starts out red.
   BinaryNode();
   BinaryNode(const T&amp; X, BinaryNode&lt;T&gt; *P = 0,
      BinaryNode&lt;T&gt; *L = 0, BinaryNode&lt;T&gt; *R = 0);
   virtual ~BinaryNode() { }
   static void PostOrderDeletion(BinaryNode&lt;T&gt; *r);
   virtual BinaryNode&lt;T&gt; *Dup(BinaryNode&lt;T&gt; *P) const;
   
   // Operations defined on binary trees. All run in 0(lgN) time.
   virtual BinaryNode&lt;T&gt; *Min();
   virtual BinaryNode&lt;T&gt; *Max();
   virtual BinaryNode&lt;T&gt; *Pred();
   virtual BinaryNode&lt;T&gt; *Succ();
   virtual BinaryNode&lt;T&gt; *Query(const T&amp; q);
   virtual BinaryNode&lt;T&gt; *InsertNode(BinaryNode&lt;T&gt; *root);
   virtual BinaryNode&lt;T&gt; *Insert(const T&amp; AddMe);
   virtual BinaryNode&lt;T&gt; *DeleteNode(BinaryNode&lt;T&gt; *z);
   virtual BinaryNode&lt;T&gt; *DeleteItem(const T&amp; q);
   virtual BinaryNode&lt;T&gt; *DeletePassbk(T q, T *passbk);
   
   // Returns 0 if the red-black invariant holds.
   virtual int CheckInvariant(int i, int num);
   
   // Returns number of black nodes from root to leftmost node.
   int BlackToMin();
};

template&lt;class T&gt;
class BinaryTreeIter {
public:
   // Create iterator for tree, initially pointing at root.
   BinaryTreeIter(BinaryTree&lt;T&gt;&amp; tree);
   
   // Create iterator for tree, initially pointing at the node
   // queried by q.
   BinaryTreeIter(BinaryTree&lt;T&gt;&amp; tree, const T&amp; q);
   
   // Reset iterator to point to root of given tree.
   void Reset(BinaryTree&lt;T&gt;&amp; tree);
   
   // Returns pointer to the contents of the current node, or
   // 0 if the current node is 0.
   T *Contents() const;
   
   // Sets iterator to point to minimum node in the subtree.
   void Min();
   
   // Sets iterator to point to maximum node in the subtree.
   void Max();
   
   // Sets iterator to point to the current node's predecessor.
   void Pred();
   
   // Sets iterator to point to the current node's successor.
   void Succ();
   
   // Queries subtree for the given key.
   int Query(const T&amp;);

protected:
   BinaryTree&lt;T&gt; *tree;        // Pointer to the tree being scanned
   
   BinaryNode&lt;T&gt; *subtree;     // Subtree currently being considered
};

// BinaryTree class template.
template&lt;class T&gt;
class BinaryTree {

protected:
   BinaryNode&lt;T&gt; *root;

public:
   // Default constructor.
   BinaryTree();
   
   // Copy constructor.
   BinaryTree(const BinaryTree&lt;T&gt;&amp; x);
   
   // Assignment operator.
   BinaryTree&lt;T&gt;&amp; operator= (const BinaryTree&lt;T&gt;&amp; x);
   
   // Destructor.
   ~BinaryTree();
   
   virtual T *Min() const;
   virtual T *Max() const;
   virtual T *Pred(const T&amp; q) const;
   virtual T *Succ(const T&amp; q) const;
   virtual T *Query(const T&amp; q) const;
   virtual void Insert(const T&amp; addme);
   virtual void DeleteItem(const T&amp; q);
   virtual void DeletePassbk(const T&amp; q, T *passbk);
   virtual int IsEmpty() const;
   virtual int CheckInvariant();

// The following are accessible only to classes that inherit
// from BinaryTree, since they deal directly with BinaryNodes.
protected:
   virtual BinaryNode&lt;T&gt; *InsertPassbk(const T&amp; addme);
   virtual BinaryNode&lt;T&gt; *QueryNode(const T&amp; q) const;
   virtual void DeleteNode(BinaryNode&lt;T&gt; *delme);
   
   friend BinaryTreeIter&lt;T&gt;;
};

template&lt;class T&gt;
BinaryTreeIter&lt;T&gt;::BinaryTreeIter(BinaryTree&lt;T&gt;&amp; Tree)
{
   tree = &amp;Tree;
   subtree = tree-&gt;root;
}

template&lt;class T&gt;
BinaryTreeIter&lt;T&gt;::BinaryTreeIter(BinaryTree&lt;T&gt;&amp;Tree, const T&amp; q)
{
   tree = &amp;Tree;
   subtree = tree-&gt;root;
   if (subtree)
      subtree = subtree-&gt;Query(q);
}

template&lt;class T&gt;
void
BinaryTreeIter&lt;T&gt;::Reset(BinaryTree&lt;T&gt;&amp; Tree)
{
   tree = &amp;Tree;
   subtree = tree-&gt;root;
}

template&lt;class T&gt;
T*
BinaryTreeIter&lt;T&gt;::Contents() const
{
   return (subtree) ? &amp;subtree-&gt;x : 0;
}

template&lt;class T&gt;
void
BinaryTreeIter&lt;T&gt;::Min()
{
   if (subtree)
      subtree= subtree-&gt;Min();
}

template&lt;class T&gt;
void
BinaryTreeIter&lt;T&gt;::Max()
{
   if (subtree)
      subtree = subtree-&gt;Max();
}

template&lt;class T&gt;
void
BinaryTreeIter&lt;T&gt;::Pred()
{
   if (subtree)
      subtree = subtree-&gt;Pred();
}

template&lt;class T&gt;
void
BinaryTreeIter&lt;T&gt;::Succ()
{
   if (subtree)
      subtree = subtree-&gt;Succ();
}

template&lt;class T&gt;
int
BinaryTreeIter&lt;T&gt;::Query(const T&amp; x)
{
   subtree = (subtree) ? subtree-&gt;Query(x) : 0;
   return subtree != 0;
}
   
   // Private enum to implement the red-black tree.
//   enum RedBlack { Black, Red };

template&lt;class T&gt;
BinaryTree&lt;T&gt;::BinaryTree()
{
   root = 0;
}

template&lt;class T&gt;
BinaryTree&lt;T&gt;::BinaryTree(const BinaryTree&lt;T&gt;&amp; x)
{
   root = x.root-&gt;Dup(0);
}

template&lt;class T&gt;
BinaryTree&lt;T&gt;&amp;
BinaryTree&lt;T&gt;::operator=(const BinaryTree&lt;T&gt;&amp; x)
{
   BinaryNode&lt;T&gt;::PostOrderDeletion(root);
   root = x.root-&gt;Dup(0);
   return *this;
}

template&lt;class T&gt;
BinaryTree&lt;T&gt;::~BinaryTree()
{
   BinaryNode&lt;T&gt;::PostOrderDeletion(root);
}

template&lt;class T&gt;
T*
BinaryTree&lt;T&gt;::Min() const
{
   return (root) ? &amp;root-&gt;Min()-&gt;x : 0;
}

template&lt;class T&gt;
T*
BinaryTree&lt;T&gt;::Max() const
{
   return (root) ? &amp;root-&gt;Max()-&gt;x : 0;
}

template&lt;class T&gt;
T*
BinaryTree&lt;T&gt;::Pred(const T&amp; q) const
{
   BinaryNode&lt;T&gt; *p = (root) ? root-&gt;Query(q) : 0;
   if (p) {
      BinaryNode&lt;T&gt; *r = p-&gt;Pred();
      return (r) ? &amp;r-&gt;x : 0;
   }
   else return 0;
}

template&lt;class T&gt;
T*
BinaryTree&lt;T&gt;::Succ(const T&amp; q) const
{
   BinaryNode&lt;T&gt; *p = (root) ? root-&gt;Query(q) : 0;
   if (p) {
      BinaryNode&lt;T&gt; *r = p-&gt;Succ();
      return (r) ? &amp;r-&gt;x : 0;
   }
   else return 0;
}

template&lt;class T&gt;
T*
BinaryTree&lt;T&gt;::Query(const T&amp; q) const
{
   BinaryNode&lt;T&gt; *p = (root) ? root-&gt;Query(q) : 0;
   return (p) ? &amp;p-&gt;x : 0;
}

template&lt;class T&gt;
void
BinaryTree&lt;T&gt;::Insert(const T&amp; addme)
{
   if (root)
      root = root-&gt;Insert(addme);
   else
      root = new BinaryNode&lt;T&gt;(addme);
}

template&lt;class T&gt;
BinaryNode&lt;T&gt; *
BinaryTree&lt;T&gt;::InsertPassbk(const T&amp; addme)
{
   if (root)
      root = root-&gt;Insert(addme);
   else
      root = new BinaryNode&lt;T&gt;(addme);
   return root-&gt;Query(addme);
}

template&lt;class T&gt;
void
BinaryTree&lt;T&gt;::DeleteItem(const T&amp; q)
{
   if (root)
      root = root-&gt;DeleteItem(q);
}

template&lt;class T&gt;
void
BinaryTree&lt;T&gt;::DeletePassbk(const T&amp; q, T *passbk)
{
   if (root)
      root = root-&gt;DeletePassbk(q, passbk);
}

template&lt;class T&gt;
int
BinaryTree&lt;T&gt;::IsEmpty() const
{
   return root == 0;
}

template&lt;class T&gt;
int
BinaryTree&lt;T&gt;::CheckInvariant()
{
   return (root) ? root-&gt;CheckInvariant(0, root-&gt;BlackToMin()) : 0;
}

template&lt;class T&gt;
BinaryNode&lt;T&gt; *
BinaryTree&lt;T&gt;::QueryNode(const T&amp; q) const
{
   return (root) ? root-&gt;Query(q) : 0;
}

template&lt;class T&gt;
void
BinaryTree&lt;T&gt;::DeleteNode(BinaryNode&lt;T&gt; *delme)
{
   if (root)
      root = root-&gt;DeleteNode(delme);
}

template&lt;class T&gt;
BinaryNode&lt;T&gt;::BinaryNode()
{
   clr = Red;
   l = r = p = 0;
}

template&lt;class T&gt;
BinaryNode&lt;T&gt;::BinaryNode(const T&amp; X. BinaryNode&lt;T&gt; *p = 0,
   BinaryNode&lt;T&gt; *L = O, BinaryNode&lt;T&gt; *R = 0): x(X)
{
   clr = Red;
   p = P;
   l = L;
   r = R;
}

template&lt;class T&gt;
void
BinaryNode&lt;T&gt;::PostOrderDeletion(BinaryNode&lt;T&gt; *r)
{
   if (r) {
      PostOrderDeletion(r-&gt;l);
      PostOrderDeletion(r-&gt;r);
      delete r;
   }
}

template&lt;class T&gt;
BinaryNode&lt;T&gt; *
BinaryNode&lt;T&gt;::Dup(BinaryNode&lt;T&gt; *P) const
{
   BinaryNode&lt;T&gt; *ret = new BinaryNode&lt;T&gt;(x);
   ret-&gt;clr = clr;
   ret-&gt;l = l-&gt;Dup(ret);
   ret-&gt;r = r-&gt;Dup(ret);
   ret-&gt;p = P;
   return ret;
}

template&lt;class T&gt;
BinaryNode&lt;T&gt; *
BinaryNode&lt;T&gt;::Min()
{
   BinaryNode&lt;T&gt; *x = this;
   while (x &amp;&amp; x-&gt;l)
      x = x-&gt;l;
   return x;
}

template&lt;class T&gt;
BinaryNode&lt;T&gt; *
BinaryNode&lt;T&gt;::Max()
{
   BinaryNode&lt;T&gt; *x = this;
   while (x &amp;&amp; x-&gt;r)
      X = x-&gt;r;
   return x;
}

template&lt;class T&gt;
BinaryNode&lt;T&gt; *
BinaryNode&lt;T&gt;::Min()
{
   BinaryNode&lt;T&gt; *x = this;
   while (x &amp;&amp; x-&gt;l)
      x = x-&gt;l;
   return x;
}

template&lt;class T&gt;
BinaryNode&lt;T&gt; *
BinaryNode&lt;T&gt;::Max()
{
   BinaryNode&lt;T&gt; *x = this;
   while (x &amp;&amp; x-&gt;r)
      x = x-&gt;r;
   return x;
}

template&lt;class T&gt;
BinaryNode&lt;T&gt; *
BinaryNode&lt;T&gt;::Pred()
{
   BinaryNode&lt;T&gt; *trav = this;
   if (trav-&gt;l)
      return trav-&gt;l-&gt;Max();
   BinaryNode&lt;T&gt; *y = trav-&gt;p;
   while (y &amp;&amp; trav == y-&gt;l) {
      trav = y;
      y = y-&gt;p;
   }
   return y;
}

template&lt;class T&gt;
BinaryNode&lt;T&gt; *
BinaryNode&lt;T&gt;::Succ()
{
   BinaryNode&lt;T&gt; *trav = this;
   if (trav-&gt;r)
      return trav-&gt;r-&gt;Min();
   BinaryNode&lt;T&gt; *y = trav-&gt;p;
   while (y &amp;&amp; tray == y-&gt;r) {
      trav = y;
      y = y-&gt;p;
   }
   return y;
}

template&lt;class T&gt;
BinaryNode&lt;T&gt; *
BinaryNode&lt;T&gt;::Query(const T&amp; q)
{
   BinaryNode&lt;T&gt; *trav = this;
   while (trav) {
      if (q &lt; trav-&gt;x)
         trav = trav-&gt;l;
      else if (trav-&gt;x &lt; q)
         trav = trav-&gt;r;
      else
         return tray;
   }
   return 0;
}

template&lt;class T&gt;
BinaryNode&lt;T&gt; *
BinaryNode&lt;T&gt;::LeftRotate(BinaryNode&lt;T&gt; *root)
{
   BinaryNode&lt;T&gt; *ret = root;
   BinaryNode&lt;T&gt; *y = r;
   r = y-&gt;l;
   if (r)
      r-&gt;p = this;
   y-&gt;p = p;
   if (p) {
      if (this == p-&gt;1)
         p-&gt;l = y;
      else
         p-&gt;r = y;
   }
   else
      ret = y;
   y-&gt;l = this;
   p = y;
   return ret;
}

template&lt;class T&gt;
BinaryNode&lt;T&gt; *
BinaryNode&lt;T&gt;::RightRotate(BinaryNode&lt;T&gt; *root)
{
   BinaryNode&lt;T&gt; *ret = root;
   BinaryNode&lt;T&gt; *x = l;
   l = x-&gt;r;
   if (l)
      l-&gt;p = this;
   x-&gt;p = p;
   if (p) {
      if (this == p-&gt;l)
         p-&gt;l = x;
      else
         p-&gt;r = x;
   }
   else
      ret = x;
   x-&gt;r= this;
   p = x;
   return ret;
}

template&lt;class T&gt;
BinaryNode&lt;T&gt; *
BinaryNode&lt;T&gt;::InsertNode(BinaryNode&lt;T&gt; *addme)
{
   BinaryNode&lt;T&gt; *root = this;
   if (! addme-&gt;p)
      root = addme;
   else {
      if (addme-&gt;x &lt; addme-&gt;p-&gt;x)
         addme-&gt;p-&gt;l = addme;
      else
         addme-&gt;p-&gt;r = addme;
   }
   clr = Red;
   while (addme != root &amp;&amp; addme-&gt;p-&gt;clr == Red) {
      BinaryNode&lt;T&gt; *y;
      
      if (! addme-&gt;p-&gt;p)
         break;
      if (addme-&gt;p == addme-&gt;p-&gt;p-&gt;l) {
         y = addme-&gt;p-&gt;p-&gt;r;
         if (y &amp;&amp; y-&gt;clr == Red) {
            addme-&gt;p-&gt;clr = Black;
            y-&gt;clr = Black;
            addme-&gt;p-&gt;p-&gt;clr = Red;
            addme = addme-&gt;p-&gt;p;
         }
         else {
            if (addme == addme-&gt;p-&gt;r) {
               addme = addme-&gt;p;
               root = addme-&gt;LeftRotate(root);
            }
            addme-&gt;p-&gt;clr = Black;
            if (addme-&gt;p-&gt;p) {
               addme-&gt;p-&gt;p-&gt;clr = Red;
               root = addme-&gt;p-&gt;p-&gt;RightRotate(root);
            }
         }
      }
      else {
         
         y = addme-&gt;p-&gt;p-&gt;l;
         if (y &amp;&amp; y-&gt;clr == Red) {
            addme-&gt;p-&gt;clr = Black;
            y-&gt;clr = Black;
            addme-&gt;p-&gt;p-&gt;clr = Red;
            addme = addme-&gt;p-&gt;p;
         }
         else {
            if (addme == addme-&gt;p-&gt;l) {
               addme = addme-&gt;p;
               root = addme-&gt;RightRotate(root);
            }
            addme-&gt;p-&gt;clr = Black;
            if (addme-&gt;p-&gt;p) {
               addme-&gt;p-&gt;p-&gt;clr = Red;
               root = addme-&gt;p-&gt;p-&gt;LeftRotate(root);
            }
         }
      }
   }
   root-&gt;clr = Black;
   return root;
}

template&lt;class T&gt;
BinaryNode&lt;T&gt; *
BinaryNode&lt;T&gt;::Insert(const T&amp; AddMe)
{
   BinaryNode&lt;T&gt; *x = this;
   BinaryNode&lt;T&gt; *y = 0;
   while (x) {
      y = x;
      x = (AddMe &lt; x-&gt;x) ? x-&gt;l : x-&gt;r;
   }
   BinaryNode&lt;T&gt; *addme = new BinaryNode&lt;T&gt;(AddMe, y);
   return InsertNode(addme);
}

template&lt;class T&gt;
BinaryNode&lt;T&gt; *
BinaryNode&lt;T&gt;::DeleteFixup(BinaryNode&lt;T&gt; *x, BinaryNode&lt;T&gt; *p)
{
   BinaryNode&lt;T&gt; *root = this;
   while (x != root &amp;&amp; (! x || x-&gt;clr == Black)) {
      BinaryNode&lt;T&gt; *w;
      if (x == p-&gt;1) {
         if (! p)
            return root;
         w = p-&gt;r;
         if (! w)
            return root;
         if (w-&gt;clr == Red) {
            w-&gt;clr = Black;
            p-&gt;clr = Red;
            root = p-&gt;LeftRotate(root);
            w = p-&gt;r;
            if (! p || ! w)
               return root;
         }
         if ( ((! w-&gt;l) || w-&gt;l-&gt;clr == Black) &amp;&amp;
             ((! w-&gt;r) || w-&gt;r-&gt;clr == Black)) {
            w-&gt;clr = Red;
            x = p;
            p = p-&gt;p;
            continue;
         }
         else if ((! w-&gt;r) || w-&gt;r-&gt;clr == Black) {
            w-&gt;l-&gt;clr = Black;
            w-&gt;clr = Red;
            root = w-&gt;RightRotate(root);
            w = p-&gt;r;
            if (! p || ! w)
               return root;
         }
         w-&gt;clr = p-&gt;clr;
         if (p)
            p-&gt;clr = Black;
         w-&gt;r-&gt;clr = Black;
      
      if (p)
         root = p-&gt;LeftRotate(root);
      x = root;
   }
   else {
      if (! p)
         return root;
      w = p-&gt;l;
      if(! p || ! w)
         return root;
      if (w-&gt;clr == Red){
         w-&gt;clr = Black;
         p-&gt;clr = Red;
         root = p-&gt;RightRotate(root);
         w = p-&gt;1;
         if(! p || ! w)
            return root;
      }
      if ( ((! w-&gt;r) || w-&gt;r-&gt;clr = Black)&amp;&amp;
          ((! w-&gt;l) ||w-&gt;l-&gt;clr == Black)){
         w-&gt;clr = Red;
         x = p;
         p = p-&gt;p;
         continue;
      }
      else if ((! w-&gt;l) || w-&gt;l-&gt;clr == Black){
         w-&gt;r-&gt;clr = Black;
         w-&gt;clr = Red;
         root=w-&gt;LeftRotate(root);
         w = p-&gt;l;
         if (! p || ! w)
            return root;
         
         }
         w-&gt;clr = p-&gt;clr;
         if (p)
            p-&gt;clr = Black;
         w-&gt;l-&gt;clr = Black;
         if (p)
            root = p-&gt;RightRotate(root);
         x = root;
      }
   }
   if (x)
      x-&gt;clr = Black;
   return root;
}

template&lt;class T&gt;
BinaryNode&lt;T&gt;*
BinaryNode&lt;T&gt;::DeleteNode(BinaryNode&lt;T&gt;*z)
{
   BinaryNode&lt;T&gt;*root = this;
   BinaryNode&lt;T&gt;*x,*y;
   
   if (! z)
      return root;
   y = (! z-&gt;l || ! z-&gt;r) ? z : z-&gt;Succ();
   x = (y-&gt;l) ?y-&gt;l : y-&gt;r;
   
   if(x)
      x-&gt;p = y-&gt;p;
   
   if(y-&gt;p) {
      if(y == y-&gt;p-&gt;l)
         y-&gt;p-&gt;l = x;
      else
         y-&gt;p-&gt;r = x;
   }
   else
      root = x;
   if(y ! = z)
      z-&gt;x = y-&gt;x;
   if(y-&gt;clr == Black){
      if (root)
         root = root-&gt;DeleteFixup(x,y-&gt;p);
   }
   delete y;
   return root;
}

template&lt;class T&gt;
BinaryNode&lt;T&gt;*
BinaryNode&lt;T&gt;::DeleteItem(const T&amp; q)
{
   return DeleteNode(Query(q));
}

template&lt;class T&gt;
BinaryNode&lt;T&gt;*
BinaryNode&lt;T&gt;::DeletePassbk(T q, T *passbk)
{
   BinaryNode&lt;T&gt;*z = Query(q);
   if(z)
      *passbk = z-&gt;x;
   return DeleteNode(z);
}

template&lt;classT&gt;
int
BinaryNode&lt;T&gt;::CheckInvariant(int i, int num)
{
   int ret;
   if(! l &amp;&amp; (i ! = num + clr == Black))
      return -1;
   if(! r &amp;&amp; ( i ! = num + clr == Black))
      return -1;
   ret = (l) ? l-&gt;CheckInvariant(i + (clr == Black),num) : 0;
   if (ret)
      return ret;
   return r &amp;&amp; r-&gt;CheckInvariant(i + (clr == Black), num);
}

template&lt;class T&gt;
int
BinaryNode&lt;T&gt;::BlackToMin()
{
   BinaryNode&lt;T&gt;*trav = this;
   int ret = 0;
   while (trav) {
      ret += (trav-&gt;clr == Black);
      trav = trav-&gt;l;
   }
   return ret;
}

#endif
/*End of File*/
</pre>
</BODY>
</HTML>
