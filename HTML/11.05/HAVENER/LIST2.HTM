<HTML><HEAD>
<TITLE>May 1993/An Object-Oriented Frog Pond/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2 Creature <I>base class with a data member that points to a creature</I></A></h4>
<pre>// main.cpp - Frog Pond Listing 2
#include &lt;frog.h&gt;

main()
   {
   PMF_VV pf = &amp;Creature::move;  // bound to a virtual
   Pond walden;
   Creature *p1 = new Creature(Creature::TADPOLE,"Wiggly");
   walden.insert(p1);
   Creature *p2 = new Creature(Creature::BULLFROG,"Croaker");
   walden.insert(p2);
   
   walden.activate( pf );  // Tell all creatures to move
   
   return 0;
   }

/--------------------------------------------------------
//  Frog.h
#ifndef FROG_H
#define FROG_H
#include &lt;iostream.h&gt;
#include &lt;rw/gslist.h&gt;

class Creature
   {
public:
   enum type{BULLFROG,TADPOLE};
   Creature(type,char *);
   virtual void move() {object-&gt;move(); }
protected:
   Creature() : object(0) {}// default invoked by derived
private:
   Creature *object;
   };
   
declare (GSlist, Creature)

class Frog : public Creature
   {
protected:
   char *name;
public:
   Frog(char *p="Noname Frog") : name(p) {}
   ~Frog ();
   char *Name() { return name; }
   virtual void move() (}
   };
   
class Tadpole : public Frog
   {
public:
   Tadpole(char *name) : Frog(name) {};
   void move(){cout &lt;&lt; name &lt;&lt; " Swimming jerkily\n"; }
   };

class Bullfrog : public Frog
   {
public:
   Bullfrog(char *name) : Frog(name) {};
   void move() { cout &lt;&lt; name &lt;&lt; " - I'M JUMPING\n"; }
   };

class Pond
   {
   GSlist(Creature) list;  // singly linked creature list
public:
   void activate( void (Creature::*pf) () );
   void insert(Creature*);
   };

// this typedef must be after the class declarations
// it may be useful to simplify declarations in the users
// program. useful for pointing to move(void)
typedef void (Creature::*PMF_VV)();
#endif
//--------------------------------------------------------
// Frog.cpp
#include &lt;stdlib.h&gt;
#include &lt;frog.h&gt;

void Pond::insert(Creature *f)
   {
   list.insert(f);
   }

void Pond::activate( PMF_VV pmf_vv )
   {
   GSlistIterator(Creature) it(list);
   Creature *resident;
   while ( resident = it() )
      {
      (resident-&gt;*pmf_vv)();
      }
   }

Creature::Creature(Creature::type t,char *name)
   {
   if ( t == TADPOLE )
      object = new Tadpole(name);
   else if( t == BULLFROG)
      object = new Bullfrog(name);
   else
      {
      cerr &lt;&lt; "Invalid type in Creature ctor/n";
      exit(2);
      }
   }

Frog::~Frog(){}

// End of File
</pre>
</BODY>
</HTML>
