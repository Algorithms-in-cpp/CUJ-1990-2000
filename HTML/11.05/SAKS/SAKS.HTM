

<HTML>
<HEAD>

<TITLE>May 1993/Stepping Up To C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmay.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Stepping Up To C++<A name="011C_007F"><A name="011C_007F"></font></h2><P>
<h3 align="center"><A name="011C_0000"><A name="011C_0000">Inheritance, Part 2</h3><P>
<h3 align="center"><font color="#800000">Dan Saks</font></h3><hr><blockquote><P>
<P><i><A name="011C_0000"><A name="011C_0000">Dan Saks is the founder and principal of Saks &amp; Associates, which offers consulting and training in C++ and C. He is secretary of the ANSI and ISO C++ committees Dan is coauthor of C++ Programming Guidelines, and codeveloper of the Plum Hall Validation Suite for C++ (both with Thomas Plum). You can reach him at 393 Leander Dr., Springfield OH, 45504-4906, by phone at (513)324- 3601, or electronically at dsaks@wittenberg.edu.</i></P><P>
In my last column, I introduced inheritance as a technique for creating new (derived) classes from existing (base) classes. (See "Inheritance, Part 1", <I>CUJ</I>, March 1993). I considered only the simplest and most common form of inheritance &#151; public inheritance. In this article, I'll explore other forms of inheritance and offer some guidance that may help you decide when to use, and when not to use, inheritance.<P>
In part one, I derived a <I>float_vector</I> class from a <I>float_array</I> class. The <I>float_array</I> class is a dynamic array of <I>float</I> elements. That is, it is an array whose number of elements can vary at runtime. The lower subscript bound for all <I>float_arrays</I> is always zero. The <I>float_array</I> class definition appears in <A href="list1.htm">Listing 1</a>.
<P>
The <I>float_vector</I> class is a dynamic array of <I>float</I> whose lower subscript can be an integer value other than zero. The <I>float_vector</I> class definition appears in <A href="list2.htm">Listing 2</a>.
 (When I presented this listing last time, I accidentally omitted the <I>int</I> return type from the inline function definitions for low and high.) The non-inline <I>float_vector</I> member function definitions appear in <A href="list3.htm">Listing 3</a>.
 My test program for <I>float_vectors</I> and <I>float_arrays</I> appears as <A href="list4.htm">Listing 4</a>.
<P>
I concluded last time by questioning the merits of deriving <I>float_vector</I> from <I>float_array</I>. Although public inheritance offers a compact notation for creating <I>float_vector</I> from <I>float_array</I>, it's not the only way to do it. Let's look at an alternative.<P>
<h4><FONT COLOR="#000080"><A name="011C_0080">Aggregation<A name="011C_0080"></FONT></h4></P>
If all you want to do is simply create <I>float_vector</I> from <I>float_array</I> without rewriting much code, you can do that very straightforwardly using <I>aggregation</I>. Aggregation (also known as composition) is simply embedding an object of one type as a member of another. That is, rather than derive <I>float_vector</I> from <I>float_array</I>:<P>
<pre>class float_vector :
             public float_array
   {
public:
   // public member functions ...
private:
   int_low;
   };</pre>
you implement <I>float_vector</I> as a class with a <I>float_array</I> member:<P>
<pre>class float_vector
   {
public:
   // public member functions ...
private:
   float_array fa;
   int _low;
   };</pre>
Then, you implement each <I>float_vector</I> member function by calling the corresponding <I>float_array</I> member. For example:<P>
<pre>size_t float_vector::length() const
   {
   return fa.length();
   }</pre>
Here, the length of a <I>float_vector</I> is simply the length of its <I>float_array </I>member<I>.</I><P>
<A href="list5.htm">Listing 5</a>
shows a definition for class <I>float_vector</I> implemented with a <I>float_array</I> member. It differs from the class definition in <A href="list2.htm">Listing 2</a>
in only two ways:<P>
<UL><li>It has a named <I>float_array</I> member rather than an inherited <I>float_array</I> subobject.</li>
<li>It explicitly declares <I>length</I> as a member function because it no longer inherits any members.</li></UL>
The inline member functions in <A href="list5.htm">Listing 5</a>
also reflect these subtle changes:<P>
<UL><li>In the <I>float_vector</I> constructor</li></UL>
<pre>inline float_vector::float_vector(int lo, int hi)
   : _low(lo), fa(hi - lo + 1)
   {}</pre>
the constructor initializer for the <I>float_array</I> subobject refers to the <I>float_array</I> by its name, <I>fa</I>. In <A href="list2.htm">Listing 2</a>,
 the <I>float_array</I> subobject has no name, so the initializer refers to the subobject by its type.<P>
<UL><li>The <I>high</I> member function computes the <I>float_array'</I>s length using <I>fa. length</I>, not just <I>length</I>.</li></UL>
<A href="list6.htm">Listing 6</a>
shows the non-inline member functions for the <I>floor_vector</I> class defined (by aggregation) in <A href="list5.htm">Listing 5</a>.
 These functions are identical to those in <A href="list3.htm">Listing 3</a>,
 except for the calls to <I>float_array::operator[]</I>. In <A href="list3.htm">Listing 3</a>,
 each <I>float_vector::operator[]</I> calls the <I>operator[]</I> for the inherited <I>float_array</I> subobject using the explicitly-qualified function name, as in<P>
<pre>return float_array::operator[] (i - low());</pre>
In <A href="list6.htm">Listing 6</a>,
 each <I>float_vector::operator[]</I> calls <I>operator[]</I> for the <I>float_array</I> member object using the usual member function call notation. I could have written the calls as<P>
<pre>return fa.operator[](i - low());</pre>
but I took advantage of the overloaded operator notation and wrote the calls as simply<P>
<pre>return fa[i - low()];</pre>
In retrospect, I could have used the operator notation in the derived <I>float_vector: :operator[]</I> as well, as shown in <A href="list7.htm">Listing 7</a>.
 Notice that the local variable <I>fa</I> is a <I>float_array</I> * in the non-<I>const</I> <I>float_vector::operator[]</I> function, and <I>const float_array</I> *in the <I>const</I> function.<P>
<h4><FONT COLOR="#000080"><A name="011C_0081">Aggregation vs. Inheritance<A name="011C_0081"></FONT></h4></P>
Using aggregation, class <I>float_vector</I> has nearly all the functionality as it did when implemented by inheritance. But there are some critical differences. When you compile the test program in <A href="list4.htm">Listing 4</a>,
 the compiler balks at the first call to <I>display</I> inside <I>main</I>, namely<P>
<pre>display("fa", fa);</pre>
When you derive <I>float_vector</I> from <I>float_array</I>, this call works fine. Even though <I>display</I> expects its second argument to be a <I>float_array</I>, it accepts <I>float_vector fa</I> because a <I>float_vector</I> IS A <I>float_array</I>. But when using aggregation, a <I>float_vector</I> is not a <I>float_array</I>. Rather, a <I>float_vector</I> HAS A <I>float_array</I>, or equivalently, <I>a float_vector</I> IS IMPLEMENTED BY A <I>float_array</I>, so a <I>float_vector</I> does not convert implicitly to <I>float_array</I>.<P>
If you try writing an additional <I>display</I> function for <I>float_vectors</I> as<P>
<pre>void display(const char *s, const float_vector &amp;fv)
   {
   cout &lt;&lt; S &lt;&lt; " = " &lt;&lt; fv &lt;&lt; endl;
   }</pre>
then the compiler complains that there's no <I>operator&lt;&lt;</I> for <I>float_vectors</I>. Once again, even though there's an <I>operator&lt;&lt;</I> for <I>float_arrays</I> (declared in <A href="list1.htm">Listing 1</a>)
, it doesn't apply to <I>float_vectors</I> built by aggregation.<P>
You can cure that problem by defining<P>
<pre>inline ostream &amp;operator&lt;&lt;
   (ostream &amp;os, const float_vector &amp;fv)
   {
   return os &lt;&lt; fv.fa;
   }</pre>
(Note that this is not a member function, but it must reference private data in <I>fv</I>, so class <I>float_vector</I> must declare it as a <I>friend</I> function.) This clears up all the problems in calling display, but the program still doesn't compile, because the compiler rejects the later declaration<P>
<pre>float_array fc = fa;</pre>
Disregarding the possibility that the compiler might introduce temporary objects, this declaration compiles as if it were<P>
<pre>float_array fc (fa);</pre>
The compiler wants to call a <I>float_array</I> constructor that accepts a <I>float_vector</I> argument. (Remember, <I>fa</I> is a <I>float_vector</I> here.) When a <I>float_vector</I> IS A <I>float_array</I>, the compiler readily binds a <I>float_vector</I> to a <I>float_array</I> &amp;, so the previous declaration calls the <I>float_array</I> copy constructor<P>
<pre>float_array(const float_array &amp;);</pre>
But, when a <I>float_vector</I> HAS A <I>float_array</I>, the compiler refuses to do the conversion.<P>
Of course, you could go back to the <I>float_array</I> class and write a constructor that accepts a <I>float_vector</I> argument, but you shouldn't. Adding this constructor forces all <I>float_array</I> users to also accept this <I>float_vector</I> class. It introduces an implicit conversion into an existing class that could break code using that class. Furthermore, you cannot assume that all users wishing to extend a class have access and can alter the source for that class. Thus, I've been looking at ways to reuse an existing class without rewriting it.<P>
Adding a conversion operator to class <I>float_vector</I> is a better approach:<P>
<pre>float_vector::operator float_array()
   {
   return fa;
   }</pre>
This operator converts a <I>float_vector</I> to a <I>float_array</I> by returning a copy of the <I>float_vector's</I> <I>float_array</I> member. With this addition, you can compile the test program (<A href="list4.htm">Listing 4</a>)
 using the <I>float_vector</I> class implemented by aggregation.<P>
Once you add a conversion operator, you no longer need versions of the <I>display</I> function and <I>operator</I>&lt;&lt; that accept a <I>float_vector</I> as their second argument. If the only declaration for display is<P>
<pre>void display(const char *s, const float_array &amp;fa);</pre>
but you have declared a conversion operator<P>
<pre>float_vector::operator float_array();</pre>
then the call<P>
<pre>display("fa", fa);</pre>
(where <I>fa</I> is a <I>float_vector</I>), translates into<P>
<pre>display("fa", float_array(fa));</pre>
That is, the compiler obtains a <I>float_array</I> by applying the conversion operator to <I>float_vector</I> <I>fa</I>.<P>
This conversion operator doesn't really let you treat <I>float_vectors</I> as if they were <I>float_arrays</I>. The conversion operator returns a <I>float_array</I> by value. That is, it returns a temporary copy of the <I>float_array</I> object inside a <I>float_vector</I>, not a reference to the <I>float_array</I> subobject.<P>
For example, suppose you write<P>
<pre>float_vector fv;
...
const float_array &amp;r = fv;</pre>
If you had derived <I>float_vector</I> from <I>float_array</I>, then the reference declaration binds <I>r</I> directly to the <I>float_array</I> subobject of <I>fv</I>. But, if you had declared <I>float_vector</I> with a <I>float_array</I> member, then the reference declaration binds <I>cr</I> to a temporary <I>float_array</I> object created by copying the <I>float_array</I> member of <I>fv</I>.<P>
Now, suppose you write<P>
<pre>float_array &amp;r = fv;</pre>
If you had derived <I>float_vector</I> from <I>float_array</I>, then this also binds <I>r</I> directly to the <I>float_array</I> subobject of <I>fv</I>. But, if you had declared <I>float_vector</I> with a <I>float_array</I> member, then the compiler will reject the reference declaration because you cannot bind a non-<I>const</I> reference to a temporary object.<P>
The error should go away if you declare an overloaded pair of conversion operators<P>
<pre>float_vector::operator float_array &amp;();
float_vector::operator const float_array &amp;() const;</pre>
I say it should go away because I believe this is valid C++. Unfortunately, many compilers complain that this pair of conversions causes ambiguities.<P>
<A href="list5.htm">Listing 5</a>
shows the class and inline function definitions for class <I>float_vector</I> implemented with a <I>float_array</I> member. <A href="list6.htm">Listing 6</a>
contains the corresponding non-inline member function definitions. If the overloaded pair of conversions to (<I>const</I> and non-<I>const</I>) <I>float_array</I> &amp; gives your compiler fits, replace them both with<P>
<pre>float_vector::operator float_array()
   {
   return fa;
   }</pre>
and your compiler should accept the test program.<P>
<h4><FONT COLOR="#000080"><A name="011C_0082">Choosing the Right Design<A name="011C_0082"></FONT></h4></P>
If inheritance and aggregation are so similar, how do you choose which one to use? It's largely an matter of judgment based on experience. But by and large, you will find that these general rules apply:<P>
<UL><li>Use public inheritance for IS-A. If you want the new class you're creating to have all the properties of the existing class by default, then derive it.</li>
<li>Use aggregation for HAS-A or IS-IMPLEMENTED-BY- A. If you do not intend objects of the new class to be objects of the existing class, but you want to use the capabilities of the existing class to simplify implementing the new class, then embed an object of the existing class as a member of the new class.</li></UL>
Both Cargill (1992) and Meyers (1992) offer additional rationale for and examples of these guidelines. Meyers calls aggregation <I>layering</I>.<P>
Sometimes it's easy to tell IS-A from HAS-A. For example, a circle is a shape and a triangle is a shape, but shapes have attributes like color. Therefore, you should publicly derive classes <I>circle</I> and <I>triangle</I> from class <I>shape</I>, and include a member of type <I>color</I> in class <I>shape</I>.<P>
Other times, the distinctions are very subtle. For instance, is a <I>float_vector</I> a <I>float_array</I>? It all depends on how you define the concepts. If you define <I>float_array</I> as a <I>dynamic array of N elements</I> and <I>float_vector</I> as a <I>dynamic array of N</I><I> </I><I>elements with a user-definable lower subscript bound</I>, then you could argue that a <I>float_vector</I> is a <I>float_array</I>. But, if you define <I>float_array</I> as a <I>dynamic array of elements subscripted 0 through N-l</I>, you'll have a harder time arguing that a <I>float_vector</I> is a <I>float_array</I>.<P>
If you have trouble designing a particular class relationship, I suggest you write down the reasoning behind your design in clear and precise prose, using complete sentences. If possible, have your peers review it too. If you can't make a convincing case for an IS-A relationship, then don't use public inheritance.<P>
<h4><FONT COLOR="#000080"><A name="011C_0083">Protected Members<A name="011C_0083"></FONT></h4></P>
In addition to <I>public</I> and <I>private</I>, C++ offers a third access specifier &#151; <I>protected</I>. Protected access is similar to private access, except that members and friends of derived classes can access protected base class members. As always, derived class members and friends cannot access private base class members. For example, <A href="list8.htm">Listing 8</a>
shows a base class <I>B</I> with protected member <I>j</I> and private member <I>k</I>. Member function <I>foo</I> of class <I>D</I> derived from <I>B</I> can access <I>j</I> but not <I>k</I>.<P>
In the first part of this article, I said I was forced to make a simplifying assumption in my <I>float_vector</I> class, namely, that you only extend a vector's high bound. The word "forced" was a bit misleading. You could write the non-<I>const float_vector:: operator[]</I> to extend the vector's low bound as well. But, because the <I>float_vector</I> class can't access its inherited <I>array</I> member (the pointer to the dynamically-allocated elements), extending the low bound would have been more complicated and much slower than extending the high bound.<P>
Plum and Saks (1992) recommend that if the original <I>float_array</I> class had declared its private data members (<I>array</I> and <I>len</I>) as protected, then the derived <I>float_vector</I> class could access those members directly. A <I>float_vector::operator[]</I> could then extend a vector's low bound more efficiently. But this efficiency comes at a price.<P>
You should resist the urge to hedge against inflexible class designs by declaring members that should be private as protected. Protected members increase coupling between a base and its derived classes. The protected members are part of the base's interface. Any application program can gain access to protected base class members by simply deriving a class.<P>
If you must use protected members, use protected member functions rather than data. Protected data members don't protect themselves. The author of a derived class can easily corrupt its base class subobject by misusing inherited protected data. Protected member functions supplied by the base class can do a better job of keeping inherited private data in a consistent state.<P>
<h4><FONT COLOR="#000080"><A name="011C_0084">Non-Public Inheritance<A name="011C_0084"></FONT></h4></P>
In addition to public inheritance, C+ + also supports private and protected inheritance. For example,<P>
<pre>class D : private B { ... };</pre>
In fact, <I>private</I> is the default access specifier for base classes, which is why you must explicitly specify <I>public</I> if that is what you want.<P>
Here's what the different base class access specifiers mean:<P>
<UL><li><I>public</I> &#151; if <I>B</I> is a public base class of <I>D</I>, then public members of <I>B</I> are accessible as public members of <I>D</I>, and protected members of <I>B</I> are accessible as protected members of <I>D</I>.</li>
<li><I>protected</I> &#151; if <I>B</I> is a protected base class of <I>D</I>, then public and protected members of <I>B</I> are accessible as protected members of D.</li>
<li><I>private</I> &#151; if <I>B</I> is a private base class of <I>D</I>, then public and protected members of <I>B</I> are accessible as private members of <I>D</I>.</li></UL>
Last time, I said that whenever <I>B</I> is a public base class of <I>D</I>, then a <I>D</I> is a <I>B</I>. Specifically, you can:<P>
<UL><li>convert a <I>D</I> *to a <I>B</I> *</li>
<li>convert a <I>D</I> <I>&amp;</I> to a <I>B</I> <I>&amp;</I></li>
<li>initialize a <I>B</I> <I>&amp;</I> with a <I>D</I></li></UL>
In fact, these conversions apply whenever <I>B</I> is an <I>accessible</I> base class of <I>D</I>. The <I>ARM</I> (Ellis and Stroustrup, 1990) and C++ draft (Shopiro 1992) both state that "a base class is accessible if its public members are accessible." I believe this really means that a <I>base class</I><I> B</I> is accessible with respect to a derived class <I>D</I> if the members of <I>D</I> inherited from public members of <I>B</I> are accessible as members of <I>D</I>.<P>
A public base class is always accessible with respect to its derived class, so those IS-A conversions, above, always apply. But, for protected and private inheritance, a base class is accessible only in certain contexts, as illustrated by <A href="list9.htm">Listing 9</a>.
 Here, <I>B</I> is a protected base class of <I>T</I>. Inside a member (or friend) of <I>T</I>, like <I>T</I>::<I>foo</I>, <I>B</I> is accessible with respect to <I>T</I>, so the IS-A conversions apply. But, outside <I>T's</I> members and friends, as in <I>main, B</I> is not an accessible base of <I>T</I>, so the IS-A conversions do not apply.<P>
In many ways, private inheritance is like aggregation; it provides an alternative technique for defining IS-IMPLEMENTED-BY-A. In fact, the choice between aggregation and private inheritance is often a matter of personal preference. Both Cargill (1992) and Meyers (1992) suggest favoring aggregation over private inheritance. I agree. Meyers also provides an example to illustrate a exceptional case where you might prefer private inheritance.<P>
I have yet to see a use for protected inheritance. I would certainly be interested to see one.<P>
<h4>References</FONT></h4></P>
Cargill, Tom. 1992. C++ <I>Programming Style</I>. Reading, MA: Addison-Wesley.<P>
Meyers, Scott. 1992. <I>Effective</I> C++. Reading, MA: Addison-Wesley.<P>
Plum, Thomas and Dan Saks. 1992. C++ Programming Guidelines, Cardiff, NJ: Plum Hall Books.<P>

<h4><a href="../../../source/1993/may93/saks.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
