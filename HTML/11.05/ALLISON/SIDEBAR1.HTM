<HTML><HEAD><TITLE>May 1993/Code Capsules/Sidebar</TITLE></HEAD><BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h3 align="center"><FONT FACE="Garamond" COLOR="#000080">Command-Line Arguments</FONT></H3><hr>
<BLOCKQUOTE>
One of the reasons for C's success in building software tools is the ease with which you can access command-line arguments. All tokens on the command line (even the program name) are arguments to <I>main</I>. The following program prints each command-line argument on a line by itself.<P>
<pre>/* ecko: print command-line arguments */

#include &lt;stdio.h&gt;
main(int argc, char * argv[])
{
int i;
for(i=0; i&lt;argc; ++i)
   puts (argv [i] );
return 0;
}</pre>
If the command line is<P>
C&gt; ecko one two three<P>
then the output is<P>
<pre>C: \ECKO. EXE
one
two
three
</pre>
The first argument (<I>argc</I>) is the number of arguments entered (4 in this case). The second argument (<I>argv</I>) is an array of pointers to character as shown in <A href="fig2.htm">Figure 2</a>.
<P>
The first argument (<I>argv[O]</I>) is always the full path name of the program's executable file (except on versions of MS-DOS prior to 3.0, where it is an empty string).<P>
<h4>Wildcards</FONT></h4></P>
Most operating systems allow you to use wildcard characters on the command line (e.g., * matches 0 or more characters, ? matches 0 or 1 in MS-DOS). These are usually associated with filenames. For example, the command<P>
C&gt; ecko *.c<P>
should print the names of all <I>.c</I> files in the current directory, one-per-line.<P>
Not all operating environments do wildcard processing by default, however (UNIX does, MS-DOS and VAX/VMS do not). To activate it using Borland C under MS-DOS, you will need to link with the file <I>\BORLANDC\LIB\WILDARGS.OBJ</I>:<P>
C&gt; bcc ecko. c \borlandc\lib\wildargs.obj<P>
The file for Microsoft C is <I>\C700\LIB\SETARGV. OBJ</I>.<P>
<h4>Command-Line Options</FONT></h4></P>
Many programs accept options (sometimes called switches) on the command line to alter execution. You specify options by a special prefix character, usually a dash or a forward slash. For example, Microsoft C accepts, as two among many, the options <I>-c</I> (do not link), and <I>-Od </I>(turn off optimization)<I>:</I><P>
C&gt; cl -c -Od ecko.c<P>
These options must precede the filenames to be processed. <A href="list9.htm">Listing 9</a>,
 a sample program for printing a directory listing, shows how to process options before other arguments. Valid options are:<P>
<UL><li><I>-l-</I>give detailed directory information</li>
<li>-<I>r-</I>sort in reverse alphabetical order</li></UL>
The output of the command<P>
<pre>C&gt; list -lr *.c *.h</pre>
is<P>
<pre>Dir: *.c (Order = -1, Full = 1)
Dir: *.h (Order = -1, Full = 1)</pre>
This technique allows you to combine options in the same argument (as shown above), or to separate them (-<I>l -r</I>). The code that actually reads the directory (function <I>dir</I>) would likely be non-portable, since file systems are highly platform-dependent.<P>
With another technique you can intersperse options among the other arguments, so that each file is processed with its own set of options. The file printer program in <A href="list10.htm">Listing 10</a>
can process a command such as<P>
<pre>C&gt; pr -n -c10 file1.c -nc1qL file2.c file3.c</pre>
This command prints 10 copies of <I>file1.c</I> with line numbers on the default printer, and prints one copy of the other files without line numbers formatted for a laser printer (the flag <I>n</I> is a toggle). The options are:<P>
<UL><li>-c#-print # copies</li>
<li>-<I>n-</I>print with line numbers</li>
<li>-<I>qC-</I>print on queue C (S=std, L=laser,etc.)</li></UL>
</BLOCKQUOTE>
</BODY>
</HTML>
