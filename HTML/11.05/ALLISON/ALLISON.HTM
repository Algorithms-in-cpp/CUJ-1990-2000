

<HTML>
<HEAD>

<TITLE>May 1993/Code Capsules</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmay.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Code Capsules<A name="0120_0083"><A name="0120_0083"></font></h2><P>
<h3 align="center"><A name="0120_0000"><A name="0120_0000">File Processing</h3><P>
<h3 align="center"><font color="#800000">Chuck Allison</font></h3><hr><blockquote><P>
<P><i><A name="0120_0000"><A name="0120_0000">Chuck Allison is a software architect for the Family History Department of the Church of Jesus Christ of Latter Day Saints Church Headquarters in Salt Lake City. He has a B.S. and M.S. in mathematics, has been programming since 1975, and has been teaching and developing in C since 1984. His current interest is object-oriented technology and education. He is a member of X3J16, the ANSI C++ Standards Committee. Chuck can be reached on the Internet at allison@decus.org, or at (801)240-4510.</i></P><P>
File systems differ greatly from one environment to another. There is no universal approach to issues such as directory structure, components of, length of, and acceptable characters for filenames, file modes (e.g., block vs. stream, text vs. binary), file versioning, or file locking. This sometimes makes it difficult to write a portable program that uses files. This capsule will illustrate some of the most commonly-used file I/O functions from the Standard C library. The examples below should work on most operating systems. (You may have to substitute certain keystrokes for the ones mentioned here.)<P>
<h4><FONT COLOR="#000080"><A name="0120_0084">Text Filters<A name="0120_0084"></FONT></h4></P>
The following short program copies a line at a time from standard input to standard output:<P>
<pre>/* copy1.c */

#include &lt;stdio.h&gt;

main()
{
char s[BUFSIZ];

while (gets (s))
    puts(s);
return 0;
}</pre>
Unless you instruct otherwise, the standard I/O functions perform buffered I/O, that is, they collect data and then transfer it a buffer at a time for efficiency. <I>BUFSlZ</I>, defined in <I>stdio.h</I> (as 512 by my compiler), is the size of the internal buffers used by the standard I/O functions. <I>BUFSIZ</I> is a good choice for the size of your buffers if you don't have a good reason to choose differently.<P>
On operating systems like MS-DOS and UNIX, this program is more interesting than it appears. In conjunction with redirection, it can be used to actually create a file:<P>
<pre>C:&gt; copy1 &gt;file1</pre>
After entering the lines of text, enter <I>Ctrl-Z</I> (in MS-DOS, <I>Ctrl-D</I> in UNIX) on a line by itself to signal the end of input. To make a copy of an existing file, enter:<P>
<pre>C:&gt; copy1 &lt;file1 &gt;file2</pre>
Such a program that reads only from standard input and writes only to standard output is called a <I>filter</I>. It is also possible to redirect I/O from within the program itself via the <I>freopen</I> library function, which disconnects an open file pointer from its file and connects it to a new one.<P>
The program in <A href="list1.htm">Listing 1</a>
disconnects <I>stdin</I> and/or <I>stdout</I> from the console and connects them to the files entered on the command line. You can invoke this program without explicit redirection<P>
<pre>C:&gt; copy2 file1 file2</pre>
The names of the files become arguments to <I>main</I> (see the box called <a href="sidebar1.htm">"Command-Line Arguments"</a>). Using <I>freopen</I> is convenient because it avoids explicit opening and closing of files, but it disallows any interaction with the user (since standard I/O has been redirected to files). Most interactive applications, however, require both file and console I/O. The version in <A href="list2.htm">Listing 2</a>
shows how to open files explicitly &#151; no redirection is performed, and both filenames are required.<P>
The function <I>fgets</I> needs to know the size of your buffer, and it places the newline character into the buffer if there is room for it. (<I>gets</I> discards the newline.) <I>fputs</I>, therefore, doesn't append a newline to the string it writes (<I>puts</I> does). Using <I>fgets</I> with <I>puts</I> produces double-spaced output, while mising <I>gets</I> with <I>fputs</I> prints everything on one line.<P>
Both <I>fgets</I> and <I>gets</I> return <I>NULL</I> upon end-of-file or error; any additional error-checking is not usually required. You should check for output errors, however, especially on a PC system where running out of disk space is not uncommon. You do this with a call to <I>ferror</I>. For example, you should replace the <I>while</I> loop in <A href="list2.htm">Listing 2</a>
with the following:<P>
<pre> /* copy4.c */
...
while (fgets (buf,BUFSIZ,inf))
{
   fputs (buf,outf);
   fflush (outf);
   if (ferror(outf))
      return EXIT_FAILURE;
}
...</pre>
Since file I/O is buffered, you should flush the output buffer before checking in case there is a disk overflow error. Once the error state of a file is set, it remains unchanged until you reset it by calling <I>clearerr</I> or <I>rewind</I>.<P>
<h4><FONT COLOR="#000080"><A name="0120_0085">Binary Files<A name="0120_0085"></FONT></h4></P>
The examples so far work only with text files (i.e., files of lines delimited by \<I>n</I>). In order to be able to copy any file (e.g., an executable program) on most non-UNIX systems, it is necessary to open the file in <I>binary mode</I>. In text mode under MS-DOS (the default file mode there), each newline character in memory is replaced with a <I>\r\n </I>pair (CR/LF) on the output device, while the process is reversed during input. (This is a carry-over from CP/M days.) In addition, a <I>Ctrl-Z</I> is interpreted as end-of-file, so it is impossible to read past a <I>Ctrl-Z</I> in text mode. Binary mode means that no such translations are made &#151; the data in memory and on disk are the same. (NOTE: MS-DOS text and binary modes are not analogous to the cooked and raw modes of UNIX; binary mode has no effect in UNIX). The program in <A href="list3.htm">Listing 3</a>
can copy any type of file.<P>
A <I>b</I> appended to the normal open mode indicates binary mode. The functions <I>fread</I> and <I>fwrite</I> read and write blocks of data. They both return the number of blocks (not bytes) successfully processed. In the example in <A href="list3.htm">Listing 3</a>,
 the items just happen to be bytes, i.e., blocks of length 1. When <I>fwrite</I> returns a number less than the number of items requested, you know that a write error has occurred (so an explicit call to <I>ferror</I> is not necessary). <I>fwrite</I><I> </I>stores numeric data in binary on the output device &#151; so you cannot read it with normal text utilities.<P>
<h4><FONT COLOR="#000080"><A name="0120_0086">Record Processing<A name="0120_0086"></FONT></h4></P>
The functions <I>fread</I> and <I>fwrite</I> are suitable for processing files of fixed-length records. The program in <A href="list4.htm">Listing 4</a>
populates a file from keyboard input (terminated by <I>Ctrl-z</I>) and then randomly accesses certain records. I use <I>stderr</I> for printing prompts since it is always attached to the console and is unbuffered on most systems. <A href="fig1.htm">Figure 1</a>
contains the results of a sample execution.<P>
A + (plus sign) in the open mode request indicates <I>update mode</I>, which means that both input and output are allowed on the file. You must separate input and output operations, however, with a call to <I>fflush</I> or to some file positioning command, such as <I>fseek</I> or <I>rewind</I>. <I>fseek</I> positions the read/write cursor a given number of bytes from the beginning of the file (<I>SEEK_SET</I>), the end of the file (<I>SEEK_END</I>), or from the current position (<I>SEEK_CUR</I>). <I>rewind(f)</I> is equivalent to <I>fseek(f,OL,SEEK_SEF)</I>. Arbitrary byte positions passed to <I>fseek</I> only make sense in binary mode, since in text mode there may be embedded characters you know nothing about. The function <I>ftell</I> returns the current position in a file, which value can be passed to <I>fseek</I> to return to that position (this synchronized use of <I>fseek</I> and <I>ftell</I> works even in text mode). Since <I>fseek</I> and <I>ftell</I> take a <I>long</I> integer argument for the file position, they are limited in the size of file they can correctly traverse. If your system supports larger file position values, then use <I>fgetpos</I> and <I>fsetpos</I> instead. <I>fsetpos</I> is only guaranteed to work correctly for values returned by <I>fgetpos</I>, not for arbitrary integral values.<P>
The program in <A href="list5.htm">Listing 5</a>
puts <I>fgetpos</I> and <I>fsetpos</I> to good use in a simple 4-way scrolling browser for large files. It only keeps one screenful of text in memory. If you want to scroll up or down through the file, it reads (or re-reads) the adjacent text and displays it. When scrolling down (i.e., forward) through the file, the file position of the data on the screen is pushed on a stack, and the program reads the next screenful from the current file position. To scroll up, it retrieves the file position of the previous screen from the stack (see <A href="list6.htm">Listing 6</a>)
. Although this is the crudest of algorithms for viewing text, it can view a file of any size (if you make the stack large enough), and performance is acceptable on systems that cache disk operations (really!). The display mechanism is also crude but fairly portable &#151; it uses ANSI terminal escape sequences for clearing the screen and positioning the cursor (see <A href="list7.htm">Listing 7</a>
&#151; if you're using MS-DOS, you must load <I>ANSI.SYS</I> from your <I>CONFIG. SYS</I> file). You could customize this program into an efficient tool by adding buffering and fast screen writes.<P>
<h4><FONT COLOR="#000080"><A name="0120_0087">Temporary Files<A name="0120_0087"></FONT></h4></P>
When your program requires a scratch file for temporary processing, you need a unique name for that file. If the name isn't important to you, let <I>tmpnam</I> do the work of creating the filename for you:<P>
<pre>char fname[L_tmpnam];
tmpnam(fname);
f = fopen(fname ....</pre>
<I>tmpnam</I> will supply at least <I>TMP_MAX</I> unique names before it starts repeating. The macros <I>L_tmpnam</I> and <I>TMP_MAX</I> are defined in <I>stdio.h</I>. Don't forget to delete the file before the program terminates:<P>
<pre>remove (fname);
</pre>
If you don't need to know the name of the file, but just want access to it, a better approach most of the time is to let <I>tmpfile</I> give you a file pointer to a temporary file. It returns a pointer to a file opened with mode <I>wb</I>+ (this is usually adequate for scratch files). The best part is that the file is deleted automatically when the program terminates normally (i.e., <I>abort</I> isn't called).<P>
<A href="list8.htm">Listing 8</a>
contains the program <I>esort.c</I>, an external sort program (i.e., a program that can sort files larger than can fit in memory). When a file larger than 1000 lines or that can fit in available memory is read, <I>esort</I> breaks it into subfiles. Each subfile is sorted internally with <I>qsort</I>, and then the sorted subfiles are merged to standard output (see last month's capsule for a discussion of <I>qsort</I>). The subfiles disappear automatically when the program halts. If for some reason the program aborts (i.e., one of the assertions failed &#151; a write error, for example), the subfiles are not deleted and you can examine them for clues to what went wrong.<P>
Although file systems vary widely, many common operations can be done portably. The examples in this article (keyboard signals excepted) should work unchanged in any ANSI-C environment. Next month I'll examine useful features found in UNIX-compatible environments.<P>

<h4><a href="../../../source/1993/may93/allison.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
