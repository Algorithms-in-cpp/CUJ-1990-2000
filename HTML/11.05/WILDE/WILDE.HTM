

<HTML>
<HEAD>

<TITLE>May 1993/Testing Your Objects</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmay.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Object-Oriented Programming</FONT></H2>

<hr><h2 align="center"><font color="#800000">Testing Your Objects<A name="0104_0073"><A name="0104_0073"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0104_0000"><A name="0104_0000">Norman Wilde</font></h3><hr><blockquote><P>
<P><i><A name="0104_0000"><A name="0104_0000">Norman Wilde has been writing and testing programs since the Fortran II days of the early sixties. Since 1987 he has taught in the Masters of Software Engineering program at the University of West Florida and has done research on software maintenance and on the impact of object orientation on maintenance. With coresearchers from Bellcore, he published an article "Maintaining Object Oriented Software" in the January issue of IEEE Software. Norman can be reached on Internet as wilde@cs.uwf.edu.</i></P><P>
Testing units individually before integrating them into a software system is critical to efficient system development. In traditional systems, the units are subroutines (for example, C functions), which can be first tested alone, then integrated into larger and larger collections until the system is complete. Detecting and correcting errors is much easier at the unit level than at later stages of integration because the amount of code to be examined is much smaller.<P>
For object-oriented programs, the important units are not subroutines but classes of objects (the C++ member functions that act as subroutines are typically too short to warrant individual testing). Unit testing, in this case, means exercising thoroughly the life-cycle behavior of an object: its creation, its state changes, and its destruction.<P>
Unit testing entails writing test driver programs &#151; i.e., small programs that set up the data needed to test the unit, call it, and then print out the results of each test. Building test drivers for objects can get complicated, because the object to be tested will often have objects of other classes as members or as member function parameters.<P>
Consequently, a good object test driver must construct quite a variety of objects. The example in <A href="list1.htm">Listing 1</a>
shows a header for several simplified classes that might appear in an invoicing application. An invoice contains a client and a list of items. The total discount for the invoice depends on the type of client and on the product codes of the items. To test the discount calculation, you need to construct <I>Client</I> and <I>Item</I> objects that are used to create the <I>Invoice</I> object and to exercise the <I>Invoice</I> member functions.<P>
A good object test driver must also step through a variety of inputs, trying a range of values for each object (errors often appear only at extreme values, as for example, when the list of items is empty or when it contains just one item &#151; for a discussion of appropriate test data, see the box entitled, <a href="sidebar1.htm">"Choosing Test Data"</a>). Finding subtle errors requires checking combinations of circumstances, such as a special product code that appears in a list with just one item. Enumerating the different combinations that should be checked and writing the driver code to generate them can be very tedious.<P>
<h4><FONT COLOR="#000080"><A name="0104_0074">Using a Little Language for Testing<A name="0104_0074"></FONT></h4></P>
To simplify the process of building object test drivers, you can define a "little language" that lets you specify and generate test drivers for the objects in your program.<P>
<A href="fig1.htm">Figure 1</a>
shows the components of the testing system. The driver generator language syntax file <I>DGEN.SYN</I> defines the little language. A parser generator (<I>AnaGram</I> in this case) converts the syntax file into a C program called <I>DGEN.C,</I> which compiles into the driver generator <I>DGEN.EXE.</I> The driver generator reads test specifications written in the little language and produces a C++ test driver, which is compiled and linked with the code for the objects being tested.<P>
<A href="list2.htm">Listing 2</a>
shows a sample test specification for tests of the <I>Invoice</I> object class from <A href="list1.htm">Listing 1</a>.
 The little language allows C++ style comments, as shown in the first two lines. The block within braces that follows will be simply copied over into the test driver program so that the program will include the headers it needs.<P>
There are really only two important kinds of statements in the little language: set variable declarations and <I>runtest</I> statements. A set variable declaration names a set of objects that the test driver will choose from in performing the tests. For example, the declaration<P>
<pre>Client someClient {
   [Client(RETAIL)]
   [Client(WHOLESALE)]
   [Client(FOREIGN)]
}</pre>
(from <A href="list2.htm">Listing 2</a>)
 describes a set named <I>someClient</I> with three <I>Client</I> objects of different client types, and gives initializers for each object. The declarations that follow this in <A href="list2.htm">Listing 2</a>
describe a set of integers called <I>numItems</I> and two identical sets of <I>Item</I> objects called <I>someItem</I> and <I>otherItem.</I> The final set, called <I>theInvoice,</I> has just one member. Note that its initializer uses the <I>someClient</I> set. During each actual test run, the test driver will choose just one member from the <I>someClient</I> set to construct the invoice object. Thus the test driver will do the work of creating objects which contain other objects in different combinations.<P>
Each <I>runtest</I> statement specifies a series of actual test runs. For example, the statement<P>
<pre>runtest "r1" combining someClient theInvoice numItems someItem
{
   ...
}</pre>
tells the driver to select all possible combinations of values from the set variables <I>someClient, theInvoice, numItems</I> and <I>someItem.</I> For each such combination, the code in the block will be executed to test the <I>totalDiscount</I> calculation. As <A href="list2.htm">Listing 2</a>
shows, this code writes out information about the objects being used and sends a series of <I>addItem</I> messages to the invoice, followed by a final <I>totalDiscount</I> message.<P>
Once you have defined the little language, you can generate flexible test driver programs quite easily. One important feature of this method is that the test specification file provides simple and compact documentation of each test. When the system changes in the future and tests need to be rerun, the test driver can be quickly recreated. It is good practice to make sure that key output from each run is also saved for comparison with future test results.<P>
<h4><FONT COLOR="#000080"><A name="0104_0075">The Little Language for Driver Generation<A name="0104_0075"></FONT></h4></P>
<A href="list3.htm">Listing 3</a>
shows the most important part of the <I>AnaGram</I> grammar of the driver generator. (The complete syntax, alone with other files for this technique, is available on the <I>C Users Journal'</I>s monthly code disk and via Internet and CompuServe). A test specification simply consists of a series of statements followed by <I>end of file.</I> A statement is either a block of embedded C++ code, a <I>runtest</I> statement, or a declaration. There is one kind of declaration for each class of objects to be used in the test; the example includes <I>Item, Client,</I> and <I>Invoice</I> objects as well as integers.<P>
The driver generator parses the test file and identifies each kind of statement. When it encounters a declaration, it calls the <I>addTVars</I> function to add the declared set variables to a symbol table. Strings stored with each variable give its type and its list of initializers. When a <I>runtest</I> statement is parsed, its list of variables is passed up to the <I>makeComb</I> function along with its C++ block. <I>makeComb</I> emits C++ code to construct every combination of the variable initializers and send them to the C++ block.<P>
<h4><FONT COLOR="#000080"><A name="0104_0076">The Generated Test Driver<A name="0104_0076"></FONT></h4></P>
<A href="fig2.htm">Figure 2</a>
shows a structure chart for the test driver generated from <A href="list2.htm">Listing 2</a>.
 A hierarchy of functions is generated for each <I>runtest</I> statement in the test specification, with each function responsible for setting the value of one of the set variables in the statement. Each function contains a local array of objects for its variable, declared using the initializers in the corresponding variable declaration.<P>
The main function generates an integer vector, <I>vals,</I> that represents a combination to be tested. Each other function in the chain uses the value of one element of <I>vals</I> to select a single object out of its local array and pass it to the function below. Thus each function has available a single value for each of the variables above it and can use those values to initialize its own objects. The bottom function contains the block of C++ code from the <I>runtest</I> statement that actually does the test. It has available values for all of the variables. Thus the main function simply needs to generate all possible vectors <I>vals</I> and call the top function in the chain for each one.<P>
There are a couple of variations to be considered in using this technique. First, the objects can be passed down the chain either by value or by reference. The C++ default is to pass function arguments by value, which means that a copy of each argument will be made using a copy constructor; if you don't code a copy constructor, then the C++ compiler creates one for you, and it may sometimes have side effects that surprise you!<P>
You control the selection of pass-by-reference or pass-by-value in the driver generator syntax file. The <I>addTVars</I> function takes two string arguments that are used in declaring the types of objects. The first is used in declaring the array of objects; the second, in declaring the arguments passed between functions. Thus, for example, in <A href="list3.htm">Listing 3</a>
the line<P>
<pre>addTVars (vl, "Client","Client&amp;", il)</pre>
says that for <I>Client</I> set variables the array will be declared using a type of <I>"Client"</I> while the function arguments will be declared as <I>"reference to Client"</I>. The decision can thus be taken differently for each class of objects. If you pass arguments by reference, then you will have more control over object creation and destruction during tests. However, I have uncovered several memory management bugs in my objects using pass-by-value, since the object constructors and destructors were thoroughly exercised.<P>
Another question to consider is whether you really want to try all combinations of values from the sets you have declared. The number of test cases can be very large, and although the running of the test cases is automatic, you still must do the hard work of carefully examining the output for errors. Sometimes it may be sufficient to vary the different objects one at a time, holding the variables not being varied at some standard value. The complete driver generator I have been using allows this option.<P>
<h4><FONT COLOR="#000080"><A name="0104_0077">Conclusions<A name="0104_0077"></FONT></h4></P>
You can't completely eliminate the hard work required for unit-testing your objects: you must think carefully about the values you want to use and the sequences of messages you will send to each object; most important, you must review the output of each test very carefully to ensure that there is no concealed error. By using a little language and a parser generator, however, you can automate a considerable part of the work of setting up and running tests. You still have a lot of work, but you'll be able to devote more effort to inventing good test data and less to the mechanics of the testing process.<P>
<h4><FONT COLOR="#000080"><A name="0104_0078">Further Reading<A name="0104_0078"></FONT></h4></P>
The classic book on software testing is <I>The Art of Software</I><I> Testing,</I> by Glenford Myers (New York: John Wiley and Sons, 1979). While somewhat old, it is probably still the best source of practical hints on testing software.<P>
Although several sources describe the useful technique of developing "little languages" to solve problems, the method still is not used as often as it might be. Jon Bentley gives several examples in Chapter 9 of <I>More Programming Pearls: Confessions of a Coder</I> (Reading, MA: Addison-Wesley, 1988).<P>
Parser generators usually are discussed at a level of theory that makes it hard to see how useful these tools can be for tasks other than just compiler writing. John Levine, Tony Mason, and Doug Brown describe the yacc-based tools in <I>lex &amp; yacc,</I> (Sebastopol, CA: O'Reilly &amp; Associates, 1992). Another readable source is chapter 4, "Introduction to Syntax Directed Parsing," of the <I>AnaGram User's Guide</I> (Jerome T. Holland, 22 Forty Acres Dr., Wayland, MA 01778).<P>
<h4>Sidebar: <a href="sidebar2.htm">"Parser Generators"</a></h4>

<h4><a href="../../../source/1993/may93/wilde.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
