

<HTML>
<HEAD>

<TITLE>October 1993/Code Capsules</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tococt.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Code Capsules<A name="02F2_00F8"><A name="02F2_00F8"></font></h2><P>
<h3 align="center"><A name="02F2_0000"><A name="02F2_0000">Pointers, Part 3: The Rest of the Story</h3><P>
<h3 align="center"><font color="#800000">Chuck Allison</font></h3><hr><blockquote><P>
<P><i><A name="02F2_0000"><A name="02F2_0000">Chuck Allison is a regular columnist CUJ and a software architect for the Family History Department of the Church of Jesus Christ<I></I> <I></I>of Latter Day Saints Church Headquarters in Salt Lake City. He has a B.S. and M.S. in mathematics, has been programming since<I></I> <I></I>1975, and has been teaching and developing in C since 1984. His current interest is object-oriented technology and education. He is a<I></I> <I></I>member of X3J16, the ANSI C++ Standards Committee. Chuck can be reached on the Internet at allison@decus.org, or at (801)240-4510.</i></P><P>
In the first two parts of this series, I explored the basics of pointers: indirection, pointer arithmetic, and the relationship between pointers and arrays. All the pointers I've used so far have referred to objects in user memory. In this capsule I'll discuss pointers to functions, how to use pointers to system memory in the IBM PC, and how to implement information hiding with pointers to incomplete types.<P>
<h4><FONT COLOR="#000080"><A name="02F2_00F9">Pointers To Functions<A name="02F2_00F9"></FONT></h4></P>
A pointer can not only point at stored objects, but at functions as well. The following statement declares <I>fp</I> to be a pointer to a function that returns an <I>int</I>:<P>
<pre>    int (*fp)();</pre>
The parentheses around <I>fp</I> are necessary. Without them, the statement<P>
<pre>    int *fp();</pre>
declares <I>fp</I> as a function that returns a pointer to an <I>int.</I><P>
If you want to pass arguments, say, a<I> float</I> and a string, to the functions pointed at by <I>fp</I>, then write<P>
<pre>    int (*fp)(float, char *);</pre>
You can then store the address of such a function in <I>fp:</I><P>
<pre>    extern int g(float, char *);
    fp = g;</pre>
The name of a function in an expression resolves to an address. You can think of this address as pointing to the beginning of the code for that function (analogous to an array name pointing to its first element). The following "hello, world" program shows how to execute a function through a pointer:<P>
<pre>/* hello2.c: Say hello via a function pointer */
#include &lt;stdio.h&gt;

main()
{
   void (*fp)() = printf;
   fp("hello, world\n");
   return 0;
}</pre>
To execute a function via a pointer, you would normally have to write<P>
<pre>    (*fp)("hello world\n");</pre>
to "dereference" the pointer. In fact, this is the way you had to do it in pre-ANSI C, but the ANSI C committee decided to allow the normal function call syntax as shown in the preceding listing <I>hello2.c.</I> Since the compiler knows <I>fp</I> is a pointer to a function, it knows that the only thing you can do under the circumstances is invoke the function, so there is no ambiguity.<P>
When you pass a function name as a parameter to another function, the compiler actually passes a pointer to the function (just like arrays). But when would you ever want to pass a function pointer to another function? One occasion is when you use <I>qsort,</I> the Standard C library sort function. <I>qsort </I>can sort an array of elements of any type, with either simple or compound sort keys. The program in <A href="list1.htm">Listing 1</a>
shows how to use<I> qsort</I> to sort command-line argument strings. The program passes to <I>qsort</I> a pointer to function <I>comp</I>, which knows how to compare strings. (For a more in-depth treatment of <I>qsort,</I> see the Code Capsule in the April 1993 issue of <I>CUJ</I>). When a function calls another function through a pointer, and the pointer is determined at run time, this action is called a <I>callback.</I><P>
An array of function pointers can come in handy in menu-driven applications. Suppose you want to present the following menu to the user:<P>
1)     Retrieve<P>
2)     Insert<P>
3)     Update<P>
4)     Quit<P>
The program in <A href="list2.htm">Listing 2</a>
uses keyboard input as an index into an array of pointers. Each pointer in the array targets a function designed to process a menu choice. When the user makes a choice, the program calls the function through the indexed pointer.<P>
<h4><FONT COLOR="#000080"><A name="02F2_00FA">PC System Memory &#151; Video<A name="02F2_00FA"></FONT></h4></P>
By definition, using hard-coded addresses in a program makes it non-portable. The most successful programs in the PC market, however, do this profusely. In order to adapt to a system's configuration, for example, a program must know what type of video adapter you have. The program identifies the adapter by inspecting a certain machine address <I>(0x463)</I> on 100% IBM PC compatibles. Another technique commonly used in commercial PC applications is to write directly to video memory for lightning-fast screen display. In this section, I show how to address video memory directly, in "text" mode.<P>
To understand how video memory works on the PC, you need to know something about memory models. Intel processors have a <I>segmented</I> memory architecture. When a program runs under the <I>small</I> memory model, it has a single 64K data segment, and therefore uses 16-bit pointers. These are called <I>near</I> pointers, which are merely offsets from the beginning of the user data area. In the <I>large</I> memory model, all conventional memory is available, but you refer to it with two 16-bit integers: a segment, and an offset within that segment. In real modes (emulating the original 8086 or 8088), a segment can start at any address divisible by 16 (called a "paragraph" boundary). Therefore, there are 65,536 overlapping 64K segments addressable in a 1 megabyte address space. To find the actual byte address that corresponds to a segment/offset pair, shift the segment left 4 bits (or multiply by 16) to find its true address, and then add in the offset. A <I>large</I> model address, therefore, requires only 20 bits and fits nicely into a <I>long,</I> with room to spare. A pointer that holds such an address is called a <I>far</I> pointer. For every far address, there are many combinations of segments and offsets that resolve to that address (4096, to be exact). For example, you can represent the byte address <I>0x463</I> by the following sample segment/offset pairs (numbers are in hexadecimal):<P>
<pre>0000:0463
0040:0063
0046:0003
/* Normalized address (offset &lt; 16) */</pre>
Most of the time you don't need to worry about this stuff; you can just dereference the pointers and everything will be okay.<P>
Video memory begins at segment number <I>0xb000</I> for monochrome systems and <I>0xb800</I> for color adapters. To determine which type of system you have, query the word at address 0000:0463, as I have done in the following:<P>
<pre>#include &lt;dos.h&gt;
   /* I'm using Borland C here */

static char far *base;

     . . .
     /* Find out where video memory is */
     unsigned far *vptr =
                MK_FP(0,0x463);

     if (*vptr == 0x3b4)
        base = MK_FP(0xb000,0);
               /* Monochrome */
     else
        base = MK_FP(0xb800,0);
                   /* Color */
     . . .</pre>
The <I>far</I> keyword is not necessary in large model, but a program that uses it will work in both models. The macro <I>MK_FP(segment,offset)</I> takes a segment and offset and combines them into the appropriate 20-bit pointer, cast as a <I>long</I>.<P>
Another feature of video memory to keep in mind is that it is <I>interleaved;</I> that is, each display character is followed immediately by its <I>attribute,</I> an 8-bit code that determines color, boldness, blink state, etc.:<P>
<IMG SRC="equat1.gif"><P>
The numeric values are byte offsets within either segment <I>b800</I> or <I>b000.</I> The address of each character on the screen, therefore, maps to the standard 25-line color display as follows:<P>
<pre>b800:0000  b800:0002  ...  b800:009e
    .          .               .
    .          .               .
    .          .               .
b800:c700  b800:c702  ...  b800:c79e</pre>
When we consider each character position to be specified by row and column:<P>
<pre>(0,0)   (0,1)  ...   (90,79)
  .       .             .
  .       .             .
  .       .             .
(24,0)  (24,1)  ...  (24,79)</pre>
then a very simple mapping exists between a screen position and its corresponding video address:<P>
<pre>address == base + 160*row + 2*col</pre>
where <I>base</I> points to the appropriate segment. The following function places a character with its attribute in video memory so that it displays at the appropriate row and column on the screen:<P>
<pre>void vputc(char c, int row, int col, char attr)
{
   char far *p =
         base + 160*row + 2*col;
   *p++ = c;
   *p = attr;
}</pre>
To retrieve the character at a certain (row, column) position is just as simple:<P>
<pre>    char far *p = base +
              160*row + 2*col;
    char c = *p;</pre>
It is now an easy matter to implement pop-up windows. The technique is essentially:<P>
1.     Save the text and attributes of the area to be overlaid<P>
2.     Blank-fill the area (if necessary)<P>
3.     Display the new window information<P>
4.     Process user commands<P>
5.     Restore the original area<P>
<A href="list3.htm">Listing 3</a>
shows the functions that do the job. The value <I>0x0720</I> in function <I>vclear_area</I> represents the "normal" attribute (<I>0x07</I>) and the space character (<I>0x20</I>). Remember that the PC has a "little-endian" architecture, so the bytes of <I>0x0720</I> get swapped in memory, which is just what we want (i.e., character first (0x20), then attribute (0x70)). Macros for processing video attributes are shown in the file <I>video.h</I> in <A href="list4.htm">Listing 4</a>.
<P>
<h4><FONT COLOR="#000080"><A name="02F2_00FB">Exercise<A name="02F2_00FB"></FONT></h4></P>
Write a function <I>print_screen</I> that behaves like the PrintScreen key on the PC: it sends to the printer an image of the text on the screen. See <A href="list5.htm">Listing 5</a>
for a possible solution (after you've worked it out yourself, of course).<P>
<h4><FONT COLOR="#000080"><A name="02F2_00FC">PC System Memory &#151; Volatile Storage<A name="02F2_00FC"></FONT></h4></P>
The PC has a system clock that "ticks" by incrementing the <I>unsigned long</I> integer at location 0000:046c every 55 milliseconds (approximately 18.2 times per second). The <I>time</I> functions in the Standard C library use this tick count to compute the current time, but you can use it as a stopwatch also. You already know how to retrieve the value at that address:<P>
<pre>     far unsigned long *tptr =
               MK_FP(0,0x46c);
    unsigned long tval = *tptr;</pre>
You can retrieve this value at two different times in your program and compute the elapsed time between them. Subtract the earlier tick count from the later one to compute how many clock ticks have elapsed. To find the number of seconds, divide by 18.2. You can implement a count-down timer like this:<P>
<pre>    /* Pause for n clock ticks: */
    far unsigned long *tptr =
               MK_FP(0,0x46c);
    unsigned long start = *tptr;
    unsigned long diff;

    do
       diff = *tptr - start;
    while (diff &lt; n);</pre>
There is a minor problem here, however. Most of today's optimizing compilers are "smart" enough to infer that the value of <I>diff</I> doesn't change &#151; you're calculating the same value over and over. So why bother to do all that unnecessary work? Such compilers will generate code equivalent to<P>
<pre>    diff = *tptr - start;
    while (diff &lt; n)
       ;</pre>
A really good compiler might even notice that this is an infinite loop and give you a warning. The reason for this mess, of course, is that the compiler doesn't know that the value <I>tptr</I> references can change due to forces outside of your program. If you tell the compiler that the storage for the clock tick is <I>volatile</I>, it won't try any such optimizations. Replace the first line above with:<P>
<pre>volatile far unsigned long *tptr =
                MK_FP(0,0x46c);</pre>
See <A href="list6.htm">Listing 6</a>
and <A href="list7.htm">Listing 7</a>
for an implementation of some useful stopwatch functions. The program in <A href="list8.htm">Listing 8</a>
uses some of these functions to print each clock tick on the screen as it occurs until you abort from the keyboard.<P>
<h4><FONT COLOR="#000080"><A name="02F2_00FD">Encapsulation<A name="02F2_00FD"></FONT></h4></P>
Good programming practice calls for you to hide details of implementation from the user (in this case, a programmer) that he doesn't need to know. This practice is called <I>encapsulation.</I> For example, to implement a stack of integers, I might provide the user with this include file:<P>
<pre>    /* stack1.h */
    #define STACK_ERROR (-32768)

    void stack_init(void);
    int stack_push(int);
    int stack_pop(void);</pre>
The user has no idea how I implemented the stack, nor has he direct access to the stack itself. <A href="list9.htm">Listing 9</a>
has an array implementation of a stack. I declared the array and its stack pointer index <I>static</I> to hide them from the user.<P>
This solution supports only a single stack. If I wanted to allow multiple stacks, I might give the user this include file:<P>
<pre>     /* stack2.h */

     #define STACK_ERROR (-32768)

     int stack_open(void);
     int stack_push(int,int);
     int stack_pop(void);
     void stack_close(int);</pre>
The function <I>stack_open</I> returns a handle to a stack, which you use when calling the other functions. A suitable array-based implementation is in <A href="list10.htm">Listing 10</a>.
 You should immediately notice some disadvantages:<P>
<UL><li>There is a limit to the number of stacks.</li>
<li>The size of each stack is fixed.</li>
<li>Unused stacks will waste memory space.</li></UL>
There has to be a better way. It would be nice if you could just define a new stack data type, such that whenever the user needed one, he could just declare one:<P>
<pre>    stack s1;</pre>
This, of course, is what C++ is all about. You can simulate this in C with <I>typedefs</I> and pointers to structures:<P>
<pre>     typedef struct stack
     {
        size_t size;
        int *data;
        int ptr;
     } Stack;</pre>
With this approach, you can ask for as many stacks as you want, each of any size, limited only by available memory:<P>
<pre>    Stack *s1 = stack_create(10);
    Stack *s2 = stack_create(100);</pre>
The function <I>stack_create</I> dynamically allocates a stack object from the heap and returns a pointer to it. You use that pointer as a handle to the stack in other stack processing functions. <A href="list11.htm">Listing 11</a>
shows the interface, and <A href="list12.htm">Listing 12</a>
shows the implementation.<P>
There is still some danger lurking. The user might be tempted to directly access the members of a stack structure. Since you gave him the structure definition, and since he has pointers to play with, nothing can stop him from doing something like<P>
<pre>    Stack *s1 = stack_create(10);
    s1-&gt;size = 20; /* Bad move! */</pre>
You can't prevent a malicious user from misusing a pointer handle. What you can do is remove the temptation. How? By hiding the structure definition itself.<P>
<h4><FONT COLOR="#000080"><A name="02F2_00FE">Incomplete Types<A name="02F2_00FE"></FONT></h4></P>
An incomplete type is a type whose size cannot be determined at compile time. One example is in the declaration<P>
<pre>    extern int a[];</pre>
This statement says that <I>a</I> is an array of unknown size, so don't use <I>sizeof</I> &#151; you'll get an error message. This definition is quite different from<P>
<pre>    extern int *a;</pre>
where <I>sizeof(a)</I> is the size of a pointer. You can hide the very layout of a stack structure from the user by declaring it an incomplete type. Notice that the structure layout in the include file in <A href="list13.htm">Listing 13</a>
is missing. The statement<P>
<pre>    struct stack;</pre>
says that there is a structure with the tag name <I>stack</I>, but nothing else &#151; it is an incomplete type. The compiler won't complain as long as you use only pointers to such a structure. Now you can move the structure definition into the implementation file &#151; the user doesn't even see it (see <A href="list14.htm">Listing 14</a>)
. Since he doesn't know what the data members are, he is less likely to ever dereference a pointer to a <I>stack</I> object. By the way, you can combine the imcomplete type declaration and <I>typedef</I> into a single statement:<P>
<pre>    typedef struct stack Stack;</pre>
The compiler will infer that <I>struct stack</I> is an incomplete type.<P>
<h4><FONT COLOR="#000080"><A name="02F2_00FF">Conclusion<A name="02F2_00FF"></FONT></h4></P>
I began this three-part series stating that in theory pointers were easy to understand. (I suppose I said that so you would keep reading). I then proceeded to discuss<P>
<UL><li>indirection</li>
<li>pointer arithmetic</li>
<li>pass-by-reference semantics</li>
<li>generic pointers (pointers to void)</li>
<li>the const qualifier</li>
<li>pointers and arrays</li>
<li>pointers to functions</li>
<li>the volatile qualifier</li>
<li>encapsulation via pointers to incomplete types</li></UL>
So maybe I lied. (You know what they say: "In theory, theory and practice are the same, but in practice they're not"). Then again, I chose my words carefully. I said that mastering pointers comes naturally from following a few basic principles and techniques. If you consider the number of items in the list above to be "few," then I told the truth. In any case, if you now understand these concepts, and if you'll apply them only when you need them (raise your right hand and repeat after me...), then I hereby pronounce you a responsible C programmer. Tell your boss she can trust you to write real programs.<P>

<h4><a href="../../../source/1993/oct93/allison.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
