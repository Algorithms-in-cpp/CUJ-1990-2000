

<HTML>
<HEAD>

<TITLE>October 1993/CUG Product Focus</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tococt.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">CUG Product Focus<A name="02FD_0100"><A name="02FD_0100"></font></h2><P>
<h3 align="center"><A name="02FD_0000"><A name="02FD_0000">CUG #381: JPEG Software</h3><P>
<h3 align="center"><font color="#800000">Victor R. Volkman</font></h3><hr><blockquote><P>
<P><i><A name="02FD_0000"><A name="02FD_0000">Victor R. Volkman received a BS in Computer Science from Michigan Technological University. He has been a frequent contributor to The C Users Journal since 1987. He is currently employed as Senior Analyst at H.C.I.A. of Ann Arbor, Michigan. He can be reached by dial-in at the HAL 9000 BBS (313) 663-4173 or by Usenet mail to sysop@hal9k.com.</i></P><P>
<h4><FONT COLOR="#000080"><A name="02FD_0101">Introduction<A name="02FD_0101"></FONT></h4></P>
This month's column is abstracted from documentation provided by Thomas Lane. The CUG Library volume #381 contains the fourth public release of the Independent JPEG Group's (IJG) free JPEG software. You are welcome to redistribute this software and to use it for any purpose, subject to the conditions listed under Legal Issues, later in this article. Serious users of this software (particularly those incorporating it into large programs) should contact <I>jpeg-info@uunet.uu.net</I> to be added to their electronic mailing list. Mailing list members are notified of updates and have a chance to participate in technical discussions. This software is the work of Tom Lane, Philip Gladstone, Luis Ortiz, Lee Crocker, Ge' Weijers, and other members of the IJG.<P>
The JPEG Software distribution source code is written entirely in C. You can compile it on many platforms including IBM compatibles, Amiga, Macintosh, Atari ST, DEC VAX/VMS, Cray Y/MP, and most Unix platforms. Supported Unix platforms include, but are not limited to, Apollo, HP-UX, SGI Indigo, and SUN Sparcstation. The <I>make</I> system even includes a utility to convert the ANSI-style C code back to older K&amp;R style.<P>
<h4><FONT COLOR="#000080"><A name="02FD_0102">What Is JPEG?<A name="02FD_0102"></FONT></h4></P>
JPEG (pronounced "jay-peg") is a standardized compression method for full-color and gray-scale images. (This software implements JPEG image compression <I>and</I> decompression.) JPEG was designed to compress "real-world" scenes; cartoons and other non-realistic images are not its strong suit. JPEG is lossy, with the result that the output image (after decompressing) is not necessarily identical to the input image (before decompression). Hence you must not use JPEG on images requiring precise reconstruction (CAD drawings, satellite images, maps, etc.). However, on typical images of real-world scenes, very good compression levels can be obtained with no visible change, and amazingly high compression levels are possible if you can tolerate a low-quality image. For more details, see the references, or just experiment with various compression settings.<P>
The software implements JPEG baseline and extended-sequential compression processes. The software supports all variants of these processes, with the exception of some uncommon parameter settings &#151; possibly to be added in later versions. For legal reasons, the IJG is not distributing code for the arithmetic-coding process (see Legal Issues). At present the IJG has made no provision for supporting the progressive, hierarchical, or lossless processes defined in the standard.<P>
In order to support file conversion and viewing software, the IJG has included considerable functionality beyond the bare JPEG coding/decoding capability; for example, the color quantization modules are not strictly part of JPEG decoding, but they are essential for output to color-mapped file formats or color-mapped displays. You can compile out these extra functions if you don't need them for a particular application.<P>
The IJG has designed this software with an emphasis on portability and flexibility, while ensuring that it is fast enough to be useful. The software is not intended to be studied as a tutorial on JPEG. (See the References section for introductory material.) While the IJG hopes to eventually beef up the entire package to "industrial-strength" code, it still needs to do a lot of performance tuning and capability enhancement of individual modules.<P>
This software can be used on several levels:<P>
<UL><li>As canned software for JPEG compression and decompression. Just edit the make file and configuration files as needed (see file SETUP), compile and go. The IJG will improve the out-of-the-box functionality and speed as time goes on.</li>
<li>As the basis for other JPEG programs. For example, you could incorporate the decompressor into a general image viewing package by replacing the output module with write-to-screen functions. For an implementation on specific hardware, you might want to replace some of the inner loops with assembly code. For a non-command-line-driven system, you might want a different user interface. (For example, the IJG will be producing Macintosh and Amiga versions with more appropriate user interfaces.)</li>
<li>As a toolkit for experimentation with JPEG and JPEG-like algorithms. Most of the processing parameters you might want to tweak are packaged up into separate modules. For example, the details of color-space conversion and subsampling techniques are each localized in one compressor and one decompressor module. You'd probably also want to extend the user interface to give you more detailed control over the JPEG compression parameters.</li></UL>
The IJG welcomes the use of this software as a component of commercial products; no royalty is required.<P>
<h4><FONT COLOR="#000080"><A name="02FD_0103">JPEG Implementations and File Formats<A name="02FD_0103"></FONT></h4></P>
Unlike other file formats which are totally predefined, such as Windows .BMP files, JPEG doesn't specify the entire file format. Handmade Software's shareware PC program GIF2JPG produces files that are totally incompatible with the IJG's programs. GIF2JPG uses a proprietary format that is an amalgam of GIF and JPEG representations. However, you can force GIF2JPG to produce compatible files with its -<I>j</I> flag, and Handmade's decompression program JPG2GIF can read the IJG files (at least ones produced with the default option settings).<P>
Some commercial JPEG implementations are also incompatible as of this writing, especially programs released before summer 1991. The root of the problem is that the ISO JPEG committee failed to specify a concrete file format. Some vendors "filled in the blanks" on their own, creating proprietary formats that no one else could read. (For example, none of the early commercial JPEG implementations for the Macintosh were able to exchange compressed files.)<P>
The IJG has adopted a file format called JFIF (see References). A number of major commercial JPEG vendors have agreed to use this format and the IJG expects it to become the de facto standard. JFIF is a minimal representation; work is also progressing toward incorporation of JPEG compression into the TIFF 6.0 standard, for use in "high end" applications that need to record a lot of additional data about an image. The IJG intends to support TIFF 6.0 in the future; they hope that these two formats will be sufficient and that other, incompatible JPEG file formats will not proliferate. Indeed, part of the IJG's reason for developing and releasing this free software is to help force rapid convergence to de facto standards for JPEG file formats.<P>
<h4><FONT COLOR="#000080"><A name="02FD_0104">Using JPEG as a Subroutine<A name="02FD_0104"></FONT></h4></P>
You can readily incorporate the JPEG compression and decompression routines in a program. The file <I>example.c</I> provides a skeleton of the interface routines you'll need for this purpose. Essentially, you replace <I>jcmain.c</I> (for compression) and/or <I>jdmain.c</I> (for decompression) with your own code. Note that the fewer JPEG options you allow the user to twiddle, the less code you need; all the default options are set up automatically. (Alternately, if you know a lot about JPEG or have a special application, you may want to twiddle the default options even more extensively than <I>jcmain/jdmain</I> do.)<P>
Most likely, you will want the uncompressed image to come from memory (for compression) or go to memory or the screen (for decompression). For this purpose you must provide image reading or writing routines that match the interface used by the image file I/O modules (<I>jrdXXX</I> or <I>jwrXXX</I>); again, <I>example.c</I> shows a skeleton of what is required. In this situation, you won't need any of the non-JPEG image file I/O modules used by <I>cjpeg</I> and <I>djpeg</I>.<P>
By default, any error detected inside the JPEG routines will cause a message to be printed on <I>stderr,</I> followed by <I>exit.</I> You can override this behavior by supplying your own message-printing and/or error-exit routines; again, <I>example.c</I> shows how.<P>
The IJG recommends that you create <I>libjpeg.a</I> as shown in the make file, then link that with your surrounding program. (If your linker is at all reasonable, it will load only the code you actually need.) Include the files <I>jconfig.h</I> and <I>jpegdata.h</I> in C files that need to call the JPEG routines.<P>
<h4><FONT COLOR="#000080"><A name="02FD_0105">Using JPEG as Canned Software<A name="02FD_0105"></FONT></h4></P>
By default, the JPEG Software distribution code builds a command-line driven translator. The currently supported image file formats are: PPM (PBMPLUS color format), PGM (PBMPLUS gray-scale format), GIF (up to 256 colors), Targa (up to 24-bit color), and RLE (Utah Raster Toolkit format). The software supports RLE only if the URT library is available The compression program <I>cjpeg</I> recognizes the input image format automatically, with the exception of some Targa-format files. Of course, you will have to tell the decompression program, <I>djpeg,</I> what target file format to generate. The only JPEG file format currently supported is the JFIF format. Support for the TIFF 6.0 JPEG format will probably be added at some future date.<P>
<h4><FONT COLOR="#000080"><A name="02FD_0106">Miscellaneous Hints for Using JPEG<A name="02FD_0106"></FONT></h4></P>
<UL><li>Color GIF files are not the ideal input for JPEG; JPEG was designed to compress full-color (24-bit) images. Don't try to convert cartoons, line drawings, and other images that have only a few distinct colors. GIF works great on these, JPEG does not. If you want to convert a GIF to JPEG, you should experiment with <I>cjpeg's -quality</I> and <I>-smooth</I> options to get a satisfactory conversion. (<I>-smooth</I> <I>10</I> or so is often helpful.)</li>
<li>Avoid running an image through a series of JPEG compression/decompression cycles. Image quality loss will accumulate; after ten or so cycles the image may be noticeably worse than it was after one cycle. It's best to use a lossless format while manipulating an image, then convert to JPEG format when you are ready to file the image away.</li>
<li><I>cjpeg's -optimize</I> is a worthwhile option for making a "final" version for posting or archiving. It's also a win when you are using low quality settings to make very small JPEG files; the percentage improvement is often a lot more than it is on larger files.</li>
<li>The default memory usage limit (<I>-maxmemory</I>) is set when the software is compiled. If you get an "insufficient memory" error, try specifying a smaller <I>-maxmemory</I> value, even <I>-maxmemory 0</I> to use the absolute minimum space. You may want to recompile with a smaller default value if this happens often.</li></UL>
On MS-DOS machines, <I>-maxmemory</I> specifies the amount of main (conventional) memory to use. (The software also grabs extended or expanded memory if it isavailable.) Most DOS-specific versions of this software do their own memory space estimation and do not need <I>-maxmemory.</I><P>
<I>djpeg</I> with two-pass color quantization requires a good deal of memory; on MS-DOS machines it may run out of memory even with <I>-maxmemory 0.</I> In that case you can still decompress, with some loss of image quality, by specifying <I>-onepass</I> for one-pass quantization.<P>
If the software needs more space than what's available in conventional memory (as determined by <I>-maxmemory</I>), it will create temporary files. (MS-DOS versions will try to get extended or expanded memory first.) The temporary files are often rather large: in typical cases they comprise three bytes per pixel, requiring 3*800*600 = 1.44Mb for an 800x600 image. If you don't have enough free disk space, leave out <I>-optimize</I> (for <I>cjpeg</I>) or specify <I>-onepass</I> (for <I>djpeg</I>). On MS-DOS, the temporary files are created in the directory named by the <I>TMP</I> or <I>TEMP</I> environment variable, or in the current directory if neither of those exist. Amiga implementations put the temp files in the directory named by <I>JPEGTMP</I>:, so be sure to assign <I>JPEGTMP:</I> to a disk partition with adequate free space.<P>
<h4><FONT COLOR="#000080"><A name="02FD_0107">Legal Issues<A name="02FD_0107"></FONT></h4></P>
The authors make <I>no warranty</I> or representation, either express or implied, with respect to this software, its quality, accuracy merchantability, or fitness for a particular purpose. This software is provided "as is," the user assumes the entire risk for its quality and accuracy.<P>
This software is copyright(C) 1991, 1992, Thomas G. Lane. All Rights Reserved except as follows:<P>
Permission is hereby granted to use, copy, modify, and distribute this software (or portions thereof) for any purpose, without fee, subject to these conditions:<P>
(1)     If any part of the source code for this software is distributed, then this README file must be included, with this copyright and no-warranty notice unaltered; and any additions, deletions, or changes to the original files must be clearly indicated in accompanying documentation.<P>
(2)     If only executable code is distributed, then the accompanying documentation must state that "this software is based in part on the work of the Independent JPEG Group,"<P>
(3)     Permission for use of this software is granted only if the user accepts full responsibility for any undesirable consequences; the authors accept <I>no liability</I> for damages of any kind.<P>
Permission is <I>not</I> granted for the use of any IJG author's name or company name in advertising or publicity relating to this software or products derived from it. This software may be referred to only as "the Independent JPEG Group's software,"<P>
The IJG specifically permits and encourages the use of this software as the basis of commercial products, provided that all warranty or liability claims are assumed by the product vendor.<P>
It appears that the arithmetic coding option of the JPEG spec is covered by patents owned by IBM and AT&amp;T, as well as a pending Japanese patent of Mitsubishi. Hence arithmetic coding cannot legally be used without obtaining one or more licenses. For this reason, support for arithmetic coding has been removed from the free JPEG software. (Since arithmetic coding provides only a marginal gain over the unpatented Huffman mode, it is unlikely that very many implementors will support it. If you do obtain the necessary licenses, contact <I>jpeg-info@uunet.uu.net</I> for a copy of our arithmetic coding modules.) So far as the IJG is aware, there are no patent restrictions on the remaining code.<P>
<h4><FONT COLOR="#000080"><A name="02FD_0108">Supporting Software<A name="02FD_0108"></FONT></h4></P>
You will probably want Jef Poskanzer's PBMPLUS image software, which provides many useful operations on PPM-format image files. In particular, it can convert PPM images to and from a wide range of other formats. You can FTP this free software from <I>export.lcs.mit.edu</I> (contrib/pbmplus*.tar.Z) or <I>ftp.ee.lbl.gov</I> (pbmplus*.tar.Z). Unfortunately PBMPLUS is not nearly as portable as the JPEG software; you are likely to have difficulty making it work on any non-Unix machine.<P>
If you are using X Window you might want to use the <I>xv</I> or <I>xloadimage</I> viewers to save yourself the trouble of converting PPM to some other format. Both of these can be found in the <I>contrib</I> directory at <I>export.lcs.mit.edu.</I> Actually, <I>xv</I> version 2.00 and up incorporates JPEG software and thus can read and write JPEG files directly. (NOTE: since <I>xv</I> internally reduces all images to eight bits/pixel, a JPEG file written by <I>xv</I> will not be very high quality; and <I>xv</I> cannot fully exploit a 24-bit display. These problems are expected to be resolved in the next <I>xv</I> release, planned for early 1993. In the meantime, use <I>xloadimage</I> for 24-bit displays.)<P>
For DOS machines, Lee Crocker's free Piclab program is a useful companion to the JPEG software. The latest version, currently 1.91, is available by FTP from SIMTEL20 and its various mirror sites, as file &lt;msdos.graphics&gt;piclb191.zip. CompuServe also has it, in the same library as the JPEG software.<P>
<h4><FONT COLOR="#000080"><A name="02FD_0109">Future Projects<A name="02FD_0109"></FONT></h4></P>
The next major release will probably be a significant rewrite to allow use of this code in conjunction with Sam Leffler's free TIFF library (assuming the bugs in the TIFF 6.0 specification get resolved).<P>
Many of the modules need fleshing out to provide more complete implementations, or to provide faster paths for common cases. Speeding things up is still high on IJG's priority list.<P>
IJG would appreciate it if people would compile and check out the code on as wide a variety of systems as possible, and report any portability problems encountered (with solutions, if possible). Checks of file compatibility with other JPEG implementations would also be of interest. Finally, IJG would appreciate code profiles showing where the most time is spent, especially on unusual systems. Please send bug reports, offers of help, etc. to <I>jpeg-info@uunet.uu.net</I>.<P>
<h4>References</FONT></h4></P>
I highly recommend reading one or more of these references before trying to understand the innards of any JPEG software.<P>
The JPEG "Frequently Asked Questions" (FAQ) article is a useful source of general information about JPEG. It is updated constantly and therefore is not included in this distribution. The FAQ is posted every two weeks to Usenet newsgroups <I>comp.graphics, news.answers</I>, and other groups. You can always obtain the latest version from the <I>news.answers</I> archive at <I>rfm.mit.edu</I> (18.172.1.27). By FTP, fetch /pub/usenet/news.answers/jpeg-faq. If you don't have FTP, send e-mail to <I>mail-server@rtfm.mit.edu</I> with body "send usenet/news.answers/ jpeg_faq".<P>
The best short technical introduction to the JPEG compression algorithm is:<P>
Wallace, Gregory K. "The JPEG Still Picture Compression Standard", <I>Communications of the ACM,</I> April 1991 (vol. 34 no. 4), pp. 30-44.<P>
(Adjacent articles in that issue discuss MPEG motion picture compression, applications of JPEG, and related topics.) If you don't have the <I>CACM</I> issue handy, a PostScript file containing a revised version of the article is available at <I>ftp.uu.net</I>, graphics/jpeg/wallace.ps.Z. The file (actually a preprint for an article to appear in <I>IEEE Transactions on Consumer Electronics)</I> omits the sample images that appeared in CACM, but it includes corrections and some added material. Note: the Wallace article is copyright ACM and IEEE, and it may not be used for commercial purposes.)<P>
A somewhat less technical, more leisurely introduction to JPEG can be found in <I>The Data Compression Book</I> by Mark Nelson, published by M&amp;T Books (Redwood City, CA), 1991, ISBN 1-55851-216-0. This book provides good explanations and example C code for a multitude of compression methods including JPEG. It is an excellent source if you are comfortable reading C code but don't know much about data compression in general. The book's JPEG sample code is far from industrial-strength, but when you are ready to look at a full implementation, check out the following reference.<P>
<I>JPEG Still Image Data Compression Standard,</I> by William B. Pennebaker and Joan L. Mitchell, is a new textbook about JPEG, published by Van Nostrand Reinhold, 1993, ISBN 0-442-01272-1. Price US $59.95. This book includes the complete text of the ISO JPEG standards (DIS 10918-1 and draft DIS 10918-2). This is by far the most complete exposition of JPEG in existence, and I highly recommend it. If you read the entire book, you will probably know more about JPEG than I do.<P>
The JPEG standard itself is not available electronically; you must order a paper copy through ISO. (Unless you are concerned about having a certified official copy, I recommend buying the Pennebaker and Mitchell book instead; it's much cheaper and includes a great deal of useful explanatory material.) In the US, copies of the standard may be ordered from ANSI Sales at (212) 642-4900. It's not cheap: as of 1992, Part 1 is $95 and Part 2 is $47, plus 7% shipping/handling. The standard is divided into two parts, Part 1 being the actual specification, while Part 2 covers compliance testing methods. As of early 1992, Part 1 has Draft International Standard status. It is titled "Digital Compression and Coding of Continuous-tone Still Images, Part 1: Requirements and Guidelines" and has document number ISO/IEC DIS 10918-1. Part 2 is still at Committee Draft status. It is titled "Digital Compression and Coding of Continuous-tone Still Images, Part 2: Compliance Testing" and has document number ISO/IEC CD 10918-2. (NOTE: I'm told that the final version of Part 2 will differ considerably from the CD draft.)<P>
The JPEG standard does not specify all details of an interchangeable file format. For the omitted details the IJG follow the "JFIF" conventions, revision 1.02. A copy of the JFIF spec is available from:<P>
<h4>Literature Department</FONT></h4></P>
C-Cube Microsystems, Inc.<br>
399A West Trimble Road<br>
San Jose, CA 95131<br>
(408) 944-6300<P>
A PostScript version of this document is available at <I>ftp.uu.net</I>, file graphics/jpeg/jfif.ps.Z. It can also be obtained by e-mail from the C-Cube mail server, <I>netlib@c3.pla.ca.us.</I> Send the message "send jfif_ps from jpeg" to the server to obtain the JFIF document; send the message "help" if you have trouble.<P>
The TIFF 6.0 file format specification can be obtained by FTP from sgi.com (192.48.153.1), file graphics/tiff/TIFF6.ps.Z; or you can order a printed copy from Aldus Corp. at (206) 628-6593. It should be noted that the TIFF 6.0 spec of 3-June-92 has a number of serious problems in its JPEG features. A clarification note will probably be needed to ensure that TIFF JPEG files are compatible across different implementations. The IJG does not intend to support TIFF 6.0 until these problems are resolved.<P>
If you want to understand this implementation, start by reading the "architecture" documentation file. Please read "codingrules" if you want to contribute any code.<P>
</BLOCKQUOTE>
</BODY>
</HTML>
