

<HTML>
<HEAD>

<TITLE>October 1993/Questions & Answers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tococt.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Questions &amp; Answers<A name="02FF_0102"><A name="02FF_0102"></font></h2><P>
<h3 align="center"><A name="02FF_0000"><A name="02FF_0000">Heap or Stack &#151; Which Should You Use?</h3><P>
<h3 align="center"><font color="#800000">Kenneth Pugh</font></h3><hr><blockquote><P>
<P><i><A name="02FF_0000"><A name="02FF_0000">Kenneth Pugh, a principal in Pugh-Killeen Associates, teaches C and C++ language courses for corporations. He is the author of C Language for Programmers and All On C, and was a member of the ANSI C committee. He also does custom C programming for communications, graphics, image databases, and hypertext. His address is 4201 University Dr., Suite 102, Durham, NC 27707. You may fax questions for Ken to (919) 489-5239. Ken also receives email at <I></I>kpugh@allen.com<I></I> (Internet) and on Compuserve 70125,1142.</i></P><P>
Those of you who are communicating with me via email should note my new Internet address, <I>kpugh@allen.com</I>. In the spirit of downsizing, the mainframe on which I had my mail account is closing down due to lack of users.<P>
<B>Q</B><P>
First, I want to take this opportunity to thank you for your contributions to the <I>C Users Journal</I>. I would also like to mention that I very much appreciate the FAX number for sending you questions.<P>
I want to create a global array on the heap, of 300 strings of 83 characters each. For example:<P>
<pre>    char scrnbuf[300][83];</pre>
except I want the storage on the heap. I have been attempting to use the C++ <I>new</I> and <I>delete</I> operators, but with little success, and even less understanding of what is actually happening. Naively, I tried:<P>
<pre>    char scrnbuf = new char
[300][83];</pre>
but the compiler complained that it could not convert <I>char[83]*</I> to <I>char</I>. Also, the statement<P>
<pre>    char *scrnbuf = new char [300][83];</pre>
evoked a similar message. I stumbled onto<P>
<pre>    char (*scrnbuf)[83] = new char[300][83];</pre>
which seemed to allocate the correct amount of memory on the heap, but even after reviewing Christopher Skelly's "Pointer Power in C and C++" in the February and March issues of <I>CUJ</I> (by the way, in my opinion, every issue should have at least two articles of this kind) I am not sure I understand exactly what happened.<P>
Thus, I have two questions: 1. How do I correctly allocate the array on the heap, and 2. What are the advantages of using heap memory rather than the stack, or <I>is</I> using the heap better than using the stack in this case, and why?<P>
Tom Parke<br>
Reno, Nevada<P>
<B>A</B><P>
Since you asked two questions, I will answer in two parts. The first part will cover how memory can be allocated for arrays and the second will cover what kind of memory you would like to allocate.<P>
The quick answer to your question is that your solution does work. Sometimes experimentation is the key to the solution of a problem. For the benefit of our C readers, I'll convert your example to C, and then switch back to C++ for the final answer.<P>
Let's start by reviewing some array basics and then move on from there. If you simply used an array to hold a single string, you might code it something like:<P>
<pre>    #define NUMBER_OF_CHARS 10
    char char_array[NUMBER_OF_CHARS] = "MNOPQRSTUV";</pre>
The type of <I>char_array[0]</I> is <I>char</I> and its value is <I>'M'</I>. The type of <I>char_array</I> is <I>array</I> <I>of</I> <I>10 char</I>. In most expressions this becomes <I>pointer to char</I> (also written as <I>char</I> *), and this pointer contains the address of the first element in the array. If <I>char_array</I> had a value of <I>500</I> (a hypothetical address), then <I>char_array</I> + <I>1</I> would have a value of <I>501</I>. The address of <I>char_array</I> is a constant, so you cannot perform operations which attempt to modify its value, such as <I>char_array</I>++.<P>
You could code a series of strings as:<P>
<pre>    #define NUMBER_OF_STRINGS 5
    char char_matrix[NUMBER_OF_STRINGS]
                  [NUMBER_OF_CHARS] = {
        "ABCDEFGHIJ",
        "",
        "",
        "",
        "QRUSTVWZYZ",
        };</pre>
The type of <I>char_matrix[4][0]</I> is <I>char</I> and its value is <I>'Q'</I>.<P>
The type of <I>char_matrix[4]</I> is <I>pointer to char</I> (<I>char</I> *) and its value is the address of the fifth element, which contains <I>"QRUSTVWZYZ"</I>.<P>
The type of <I>char_matrix</I> is array of NUMBER_OF_STRINGS arrays of NUMBER_OF_CHARS char. In most expressions this does not become <I>char</I>, nor does it become <I>pointer to char</I>. Instead, it becomes a pointer to objects which are <I>arrays of char</I> that have <I>NUMBER_OF_CHARS</I> elements. This type is symbolized by <I>char (*) [NUMBER_OF_CHARS]</I> or <I>char (*) [10]. char_matrix</I> is also the address of the first element in the array of strings. According to pointer arithmetic, if the value of <I>char_matrix</I> is <I>1000</I>, then the value of <I>char_matrix</I> + <I>1</I> is <I>1010</I>.<P>
If an array is static or global, the program allocates it from the data segment of the executable. If the array is automatic, the program allocates it from the stack segment. To use the heap, you need to use pointers. Let's declare some variables corresponding to those in my previous code samples.<P>
The declaration<P>
<pre>    char *p_char;</pre>
states that <I>p_char</I> is a pointer to objects of type <I>char</I> (<I>char</I> *). <I>p_char</I> is of the same type as <I>char_array</I> but its value is undefined until it is allocated memory. You can use <I>malloc</I> to allocate memory. The following code allocates memory for an array and stores a pointer to this memory in <I>p_char</I>.<P>
<pre>    int NUMBER_OF_CHARS = 10;
    p_char = (char *) malloc(NUMBER_OF_CHARS);</pre>
(In ANSI C, it is not necessary to use a cast for the (<I>void</I> *) return type of <I>malloc</I>, but it is necessary in C++.) In this example, I'm using a variable for the array size, <I>NUMBER_OF_CHARS</I>, to emphasize that the size of the memory allocation is not fixed at compile time. You can put data into this memory with:<P>
<pre>    strncpy(p_char, "MNOPQRSTUV", NUMBER_OF_CHARS);</pre>
Let's lay out some expressions using <I>p_char</I>:<P>
<pre><B><I>     Expression     Meaning</I></B>

     p_char         pointer to char (char *)
     *p_char        char (first char)   'M'
     *(p_char + 4)  char (fifth char)   'Q'
     p_char[4]      char (fifth char)   'Q'</pre>
Of course, with pointer constants, such as array names, you can use either array subscript notation or pointer notation.<P>
To store strings in two dimensions, there are two data structures you can use &#151; an array of pointers or a pointer to arrays. Suppose you declare:<P>
<pre>    char *array_p_char[NUMBER_OF_STRINGS];</pre>
This allocates memory for an array of <I>NUMBER_OF_STRINGS</I> size, each element of which is a <I>pointer to char</I> (<I>char</I> *). The type of <I>array_p_char</I> becomes, in an expression, <I>pointer to pointer to char (char</I> **). Its value is the address of the first element in the array. If the value of <I>array_p_char</I> is <I>500</I>, and pointers occupy four bytes, then the value of <I>array_p_char + 1</I> is <I>504</I>.<P>
To allocate storage for each of these pointers, we use a loop, such as:<P>
<pre>    for (i = 0; i &lt; NUMBER_OF_STRINGS; i++)
        {
        array_p_char[i] = (char *) malloc
                        (NUMBER_OF_CHARS);
        }</pre>
The following code puts some data into the allocated memory:<P>
<pre>    strncpy(array_p_char[0], "ABCDEFGHIJ",
           NUMBER_OF_CHARS);
    strncpy(array_p_char[4], "QRUSTVWZYZ",
           NUMBER_OF_CHARS);</pre>
Let's lay out some expressions using <I>array_p_char</I>:<P>
<pre><B>     <I>Expression           Meaning</I></B>

     array_p_char         pointer to pointer to char
     *array_p_char        char pointer pointing at
                          "ABCDEFGHIJ"
     *(array_p_char + 4)  pointer to char (fifth element
                          in array_p_char) pointing
                          at "QRUSTVWZYZ",
     array_p_char[4]      pointer to char (as previous),
                          pointing at "QRUSTVWZYZ",</pre>
Since <I>array_p_char[i]</I> is a <I>pointer to char</I>, you can use indirection on it as:<P>
<pre><B>     <I>Expression          Meaning</I></B>

     *array_p_char[0]    char 'A'
     array_p_char[0][0]  char 'A'
     *array_p_char[4]    char 'Q'
     array_p_char[4][0]  char 'Q'
     array_p_char[4][9]  char 'Z'</pre>
Alternatively, you can declare a pointer to arrays, as:<P>
<pre>    char (*p_char_array)[NUMBER_OF_CHARS];</pre>
The parentheses alters the interpretation. The variable <I>p_char_array</I> is a pointer. What does it point to? It points to an array which is <I>NUMBER_OF_CHARS</I> long, each element of which is a <I>char</I>. Or, you could say it is a pointer to <I>char</I> arrays which are <I>NUMBER_OF_CHARS</I> long, symbolized by (<I>char (*) [NUMBER_OF_CHARS]</I>) or (<I>char (*) [10]</I>).<P>
To allocate memory for this pointer to reference, use:<P>
<pre>    #define NUMBER_OF_CHARS 10
    int NUMBER_OF_STRINGS = 5;
    p_char_array = (char (*) [NUMBER_OF_CHARS])
        malloc(NUMBER_OF_CHARS * NUMBER_OF_STRINGS);</pre>
(The size of the object targeted by <I>p_char_array</I> must be fixed at compiled time, hence the use of the <I>#define</I>.) However, you can use a variable for the <I>number</I> of objects to be allocated, since the number of objects can be changed at run time. Suppose that <I>p_char_array</I> was assigned the value of <I>2000</I>. Then the value of <I>p_char_array + 1</I> would be <I>2010</I>.<P>
You can put some data into <I>p_char_array</I> with:<P>
<pre>    strncpy(p_char_array[0], "ABCDEFGHIJ",
           NUMBER_OF_CHARS);
    strncpy(p_char_array[4], "QRUSTVWZYZ",
           NUMBER_OF_CHARS);</pre>
Here are some expressions and their meanings.<P>
<pre><B>     <I>Expression           Meaning</I></B></pre><P>
<pre>
     p_char_array         pointer to
                          char[NUMBER_OF_CHARS]
     *p_char_array        char [NUMBER_OF_CHARS] array
                                containing "ABCDEFGHIJ"
     *(p_char_array + 4)  char [NUMBER_OF_CHARS] array
                               (fifth set of 10 chars)
                               containing "QRUSTVWZYZ",
     p_char_array[4]      char [NUMBER_OF_CHARS] array
                               (fifth set of 10 chars)
                               containing "QRUSTVWZYZ",</pre>
Since the last three expressions are <I>char</I> arrays, they become in an expression the type <I>pointer to char</I>. Their value is the address of the first element. You can use indirection on them, either explicitly, with the * operator, or implicitly with subscripts, as in:<P>
<pre><B>     <I>Expression           Meaning</I></B></pre><P>
<pre>
     *p_char_array[0]     char 'A'
     p_char_array [0][0]  char 'A'
     *p_char_array[4]     char 'Q'
     p_char_array[4][0]   char 'Q'
     p_char_array[4][9]   char 'Z'</pre>
What is the difference between this approach to 2-D arrays and the previous one? With <I>p_char_array</I>, the program computes the starting address of each row every time the subscript is used. With <I>array_p_char</I>, the data structure holds pointers to each row. To find the beginning of a row, the program simply performs a table lookup. This is a space/speed tradeoff.<P>
Now to get back to C++, which is where your original question came from. Unlike <I>malloc</I>, <I>new</I> returns a pointer to the type specified. For example:<P>
<pre>    p_char = new char;</pre>
allocates one byte of memory and returns a <I>pointer to char </I>to that memory. If you use subscripts with a size, as in:<P>
<pre>    #define NUMBER_OF_CHARS 10
    p_char = new char[NUMBER_OF_CHARS];</pre>
then the amount of storage that is allocated is the <I>NUMBER_OF_CHARS</I> times the size of the object.<P>
The object which follows <I>new</I> does not have to be a simple variable. So if you have:<P>
<pre>    char (*p_char_array)[NUMBER_OF_CHARS];</pre>
you can allocate with:<P>
<pre>    p_char_array = new char[NUMBER_OF_STRINGS]
                        [NUMBER_OF_CHARS];</pre>
This will allocate storage sufficient for <I>NUMBER_OF_STRINGS</I> objects, each of which is the size of an array of <I>NUMBER_OF_ CHARS chars</I>. The type that <I>new</I> returns is (<I>char (*) [NUMBER_ OF_CHARS]</I>), which matches the declared type of <I>p_char_array</I>. Once you have successfully allocated the storage, using <I>p_char_array</I> is no different in C++ than in C.<P>
<h4><FONT COLOR="#000080"><A name="02FF_0103">Memory Allocation<A name="02FF_0103"></FONT></h4></P>
Now for the second part of your question. From which part of memory should one allocate storage for variables and objects? That depends on the size of the object and how long it must remain in memory. Automatic variables are allocated on the stack. <I>malloc</I> and <I>new</I> allocate memory from the heap. In general, the amount of memory available to the stack and to the heap depends on what type of processor you have.<P>
It's generally best to allocate "small" objects (say, &lt;20 bytes) from the stack, provided they don't need to be preserved between function calls. Declare the object within the body of the function; it will become an automatic variable. If a small object must persist in memory between function calls, declare it within the body of that function, but with the <I>static</I> qualifier. It will not be an automatic variable, but will be allocated from the data segment.<P>
On many machines, the stack has a limitation of 64K bytes or less. So large objects, regardless of usage, should not be automatic. If they need to persist throughout a program, declare them <I>static</I>. Otherwise, allocate them from the heap. Of course, if you allocate them from the heap, you should be sure to call <I>free</I> or <I>delete</I>, once you are done with the object.<P>
When programming on an x86 type machine, with the large memory model (where both pointers to data and pointers to functions require four bytes), the differences between far and near pointers are probably insignificant. However, if you are programming under Microsoft Windows using Microsoft Visual C++, you normally use the medium memory model (four bytes for function pointers, two bytes for data pointers). In the medium model, <I>new</I> allocates memory from the near heap, which is only 64K bytes long. This convention dramatically limits the use of <I>new</I>. How can you get more storage in Microsoft C++?<P>
First, declare any pointers that will point to allocated storage as __<I>far</I> pointers. This declaration will force them to be four bytes. For example, if you code:<P>
<pre>     char __far * p_char; // Far pointer
     p_char = new char[NUMBER_OF_CHARS]; // but still stuck on near heap</pre>
then the storage will be allocated from the near heap, but the address will be converted to a proper four-byte address using heap segment <I>DGROUP</I>, so it will be referenced correctly. Second, use __<I>fa</I>r as part of the call to <I>new</I>, particularly for built-in types. Coding:<P>
<pre>    char __far * p_char;
    p_char = new __far char[NUMBER_OF_CHARS];</pre>
forces the storage for <I>p_char</I> to be allocated from the far heap. There are actually four <I>new</I> functions, each of which returns a different address type: <I>__near, __far, __huge</I>, and <I>__based</I>. (I may discuss the latter two address forms in a later column.)<P>
You need to be sure to call the proper <I>delete</I> operator. There are four, corresponding to the four <I>new</I> operators.<P>
For C++ classes, there is another interesting twist. Member functions get a pointer to <I>this</I>. How big is that pointer? The answer is two bytes, under the <I>medium</I> model. For example, suppose you have:<P>
<pre>    class A_class
        {
    public:
        A_class() ;
        a_function() ;
        };
        
    A_class __far *p_a_class = new __far A_class;</pre>
The program will call the constructor for <I>A_class</I> with a four-byte address for <I>this</I>, but the constructor will expect only two bytes. You can imagine the havoc this misunderstanding can cause. There are two alternatives. First, you can add <I>__far</I> to the member functions, so that they accept a far pointer, as in the following:<P>
<pre>    class A_class
        {
    public:
        A_class() __far;
        a_function() __far;
        };</pre>
Now if you declare an object of <I>A_class</I> as an automatic, then it has a two-byte <I>this</I> pointer. These functions expect a four-byte pointer; but the compiler is supposed to take care of the conversion for you.<P>
Second, you can assign a memory model to a class, such as:<P>
<pre>    class __far A_class
        {
    public:
        A_class();
        a_function() ;
        };</pre>
All pointers to <I>A_class</I> and the type of <I>this</I> will be afour-byte far pointers.<P>
As a side warning to those getting into the medium memory model, you should be aware of a hair-pulling, expletive-causing, &lt;fill in your own adjective&gt; possibility of unfathomable bugs in simple-looking statements. Suppose you have:<P>
<pre>    class __far A_class
        {
    public:
        char name[100];
        };</pre>
If you code:<P>
<pre>        A_class a_class;
        char buffer[100];
        sprintf(buffer, "Name is %s", a_class.name);</pre>
then <I>sprintf</I> expects a two-byte near pointer, but <I>a class.name</I> is a four-byte far pointer. Of course, there is no type conversion on the arguments, because <I>sprintf</I> is a variable parameter function.<P>
This particular nuance hit me when I was converting a large scale C program to C++, that had a tremendous number of <I>sprintf</I> calls of this type. Watch out for variable parameter functions. If you are starting from scratch &#151; use the <I>strstream</I> class.<P>
<h4><FONT COLOR="#000080"><A name="02FF_0104">Valid Constants<A name="02FF_0104"></FONT></h4></P>
<B>Q</B><P>
Is <I>00.0</I> a valid floating-point constant or an invalid octal constant according to the ANSI standard? This question is motivated by the following experience. A C program contained the following statement:<P>
<pre>    float x = 00.;</pre>
While compiling this statement, a C compiler (probably not ANSI-compliant) running under AIX on a PS/2, complained that a <I>struct</I> or <I>union</I> was expected. Adding a zero as the tenths digit (00.0) changed the diagnostic to "semi-colon expected." Removing the leading zero eliminated the diagnostic in both cases. Is this a gray area in ANSI and K&amp;R C?<P>
Michael G. Soyka<br>
Warren, RI<P>
I don't believe it's a gray area at all. It appears that the compiler is not interpreting the code according to the Standard. The rule is that the compiler should parse source characters into the longest sequence that forms a token.<P>
The Standard gives the following description of a floating-point constant, in syntax notation:<P>
<I>floating-constant:</I><P>
<pre>    <I>fractional-constant exponent-part</I><I>opt</I><I> floating-suffix</I><I>opt</I></pre>
<P>
<I>fractional-constant:</I><P>
<pre>    <I>digit-sequence</I><I>opt</I><I>. digit-sequence</I>
    <I>digit-sequence.</I></pre>
<P>
<I>digit-sequence</I><P>
<pre>     <I>digit</I>
       <I>digit-sequence digit</I></pre>
<P>
<I>digit one of</I><P>
<pre>     <I>0 1 2 3 4 5 6 7 8 9</I></pre>
The <I>digit-sequence</I> that begins a floating point constant consists of any digit, including 0; this implies that "<I>00</I>." is a valid floating point constant. Similarly, "<I>00000000001.</I>" is also a valid floating point constant. An octal constant is described as:<P>
<I>octal-constant</I><P>
<pre>    <I>0</I>
    <I>octal-constant octal-digit</I></pre>
<P>
<I>octal-digit:</I><P>
<pre>    <I>0 1 2 3 4 5 6 7</I></pre>
The string "<I>00</I>" is a valid octal value. For comparison's sake, suppose your string had been spaced out as in "<I>00</I> .". This string would have been interpreted as an octal constant followed by a member operator. The string "<I>00 . 0</I>" would be interpreted as an octal constant followed by a member operator, and another octal constant. Neither of these strings would make any sense.<P>
Your question reminds me of the expression:<P>
<pre>    i +++++ i</pre>
Using the longest sequence rule, this is parsed as:<P>
<pre>    i ++ ++ + i</pre>
The compiler reports an error, because with the second ++, you are attempting to increment the expression <I>i</I>++. ++ must apply to a lvalue (reference to memory). If you had added parentheses:<P>
<pre>    (i++) + (++i)</pre>
the expression would compile. However, its value would be undefined, as explained in previous columns. From somewhere I recall the statement, "Jim where Joe had had had had had had had had had had had the approval of the authorities," as being an English language example of the same style. By adding punctuation, the sentence will make sense.<P>
</BLOCKQUOTE>
</BODY>
</HTML>
