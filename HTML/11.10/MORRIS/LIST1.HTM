<HTML><HEAD>
<TITLE>October 1993/The SPLASH Class Library/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1 <I>The class</I> Marray</A></h4>
<pre>/*
 * marray.h
 * MArray means My Array or Minimal Array Class
 */
#ifndef _MARRAY_H
#define _MARRAY_H

#include   &lt;assert.h&gt;

template&lt;class T&gt;
class MArray
{
private:
  enum{ALLOCINC=20};
  T *a;
  int cnt;
  int allocated;
  int allocinc;
  void grow(void);      // make array grow

protected:
  void remove(const int i); // This is protected
                        // because it is dangerous

public:
  MArray(int n= ALLOCINC) // default constructor
  {
  a= new T[n];
  cnt= 0;
  allocated= n;
  allocinc= n;
  }
  
  MArray(const MArray&lt;T&gt;&amp; n); // copy constructor
  
  // assignment operator
  MArray&lt;T&gt;&amp; MArray&lt;T&gt;::operator=(const MArray&lt;T&gt;&amp; n);
  
  virtual ~MArray() {// destructor
    delete [] a;
  }
  
  // index operator
  T&amp; operator[](const int i) const{
    // generate an assert error if indices don't make sense
    assert((i &gt;= 0) &amp;&amp; (i &lt; cnt));
    return a[i];
  }
  
  int count(void) const{ return cnt; } // length of array
  
  void add(const T&amp; n); // add an element
  
  // add an element at a specific place
  void add(const int i, const T&amp; n);
};

// copy constructor
template &lt;class T&gt;
MArray&lt;T&gt;::MArray(const MArray&lt;T&gt;&amp; n)
{
  allocated= n.allocated;
  allocinc= n.allocinc;
  cnt= n.cnt;
  a=new T[allocated];
  for(int i=0;i&lt;cnt;i++) a[i]=n.a[i];
}

// assignment operator
template &lt;class T&gt;
MArray&lt;T&gt;&amp; MArray&lt;T&gt;::operator=(const MArray&lt;T&gt;&amp; n){
  // check we are not assigning to ourselves
  if(this == &amp;n) return *this;
  delete [] a; // get rid of old one
  allocated= n.allocated;
  allocinc= n.allocinc;
  cnt= n.cnt;
  a= new T[allocated];
  for(int i=0; i&lt;cnt;i++) a[i]= n.a[i];
  return *this;
};

// a private member function used by the
// implementation to grow the array
template &lt;class T&gt;
void MArray&lt;T&gt;::grow(){
  allocated += allocinc;
  T *tmp= new T[allocated];
  for(int i=0; i&lt;cnt;i++) tmp[i]= a[i];
  delete [] a;
  a= tmp;
};

// add an element to the end of the array
template &lt;class T&gt;
void MArray&lt;T&gt;::add(const T&amp; n){
  if(cnt &gt;= allocated) grow();
  a[cnt++]= n;
};

// add an element to the array at the index ip
template &lt;class T&gt;
void MArray&lt;T&gt;::add(const int ip, const T&amp; n){
  assert((ip &gt;=0) &amp;&amp; (ip &lt;= cnt));
  if (cnt &gt;= allocated) grow();
  
  for(int i=cnt;i&gt;ip;i--) // shuffle up
  a[i]= a[i-1];
  
  a[ip]= n;
  cnt++;
};

// remove the element at the index ip, and shuffle the
// rest of the elements down
template &lt;class T&gt;
void MArray&lt;T&gt;::remove(const int n){
int i;
  assert((n &gt;= 0) &amp;&amp; (n &lt; cnt));
  
  // shuffle down starting at n
  for(i=n;i&lt;cnt-1;i++){
    a[i]= a[i+1];
  }
  cnt--;
};
#endif
// End of File
</pre>
</BODY>
</HTML>
