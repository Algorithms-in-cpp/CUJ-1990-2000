<HTML><HEAD>
<TITLE>October 1993/The SPLASH Class Library/Listing 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 3 <I>The base class</I> SPListBase</A></h4>
<pre>// This is a partial listing of
// the base class for SPList,
// it handles the underlying dynamic
// array mechanism
template&lt;class T&gt;
class SPListBase
{
private:
  enum{ALLOCINC=20}; // default array size
  T *a;         // the actual data
  int cnt;      // the number of elements in the array
  int first;    // the start of the array
  int allocated;// amount allocated for the array
  int allocinc; // amount to re-allocate to array
  
  void grow(int amnt= 0, int newcnt= -1); // make array grow

protected:
  void compact(const int i); // remove an element from the array

public:
  SPListBase(int n= ALLOCINC) // default constructor
  {
    a= new T[n];
    cnt= 0;
    first= n&gt;&gt;1; // start off in the middle
    allocated= n;
    allocinc= n;
  }
  
  // copy constructor
  SPListBase(const SPListBase&lt;T&gt;&amp; n);
  // assignment operator
  SPListBase&lt;T&gt;&amp; SPListBase&lt;T&gt;: :operator=(const SPListBase&lt;T&gt;&amp; n);
  
  virtual ~SPListBase() { // destuctor
    delete [] a;
  }
  
  // index operator
  INLINE T&amp; operator[](const int i);
  
  const T&amp; operator[](const int i) const{
    // generate an assert error if indices don't make sense
    assert((i &gt;= 0) &amp;&amp; (i &lt; cnt));
    return a[first+i];
  }
  
  int count(void) const{ return cnt; }
  
  // add an element to the end of the array
  void add(const T&amp; n){
    if(cnt+first &gt;= allocated) grow();
    a[first+cnt]= n;
    cnt++;
  }
  
  // add an element into middle of array
  void add(const int i, const T&amp; n);
  
  // reset array
  void erase(void){ cnt= 0; first= (allocated&gt;&gt;1);{
};

// Allow the array to grow if index is out of range
template &lt;class T&gt;
INLINE T&amp; SPListBase&lt;T&gt;::operator[] (const int i)
{
  assert((i &gt;= 0) &amp;&amp; (first &gt; 0) &amp;&amp; ((first+cnt) &lt;= allocated));
  int indx= first+i;
  
  if(indx &gt;= allocated){ // need to grow it
    // index as yet unused element
    grow((indx-allocated)+allocinc, i+1);
    indx= first+i; // first will have changed in grow()
  }
  assert(indx &gt;= 0 &amp;&amp; indx &lt; allocated);
  
  if(i &gt;= cnt) cnt= i+1; // it grew
  return a[indx];
}
// End of File
</pre>
</BODY>
</HTML>
