<HTML><HEAD>
<TITLE>October 1993/The SPLASH Class Library/Listing 5</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 5 <I>The class</I> SPString</A></h4>
<pre>// Partial listing of SPString
// header
class SPString
{
private:
  // variable length string mechanism
  VarString pstr;

public:
  // forward declare
  class substring;
  
  //....
  SPString(const substring&amp; sb) : pstr(sb.pt, sb.len){}
  SPString&amp; operator=(const substring&amp; sb);
  
  operator const char*() const{return pstr;}
  const char operator[](int n) const{ return pstr[n]; }
  
  int length(void) const{ return pstr.length(); }
  
  substring substr(int offset, int len= -1);
  substring substr(const Range&amp; r){ return substr(r.start(),
                 r.length());}
  
  SPStringList split(const char *pat= "[ \t\n]+", int limit= -1);
  
  int operator&lt;(const SPString&amp; s) const
  { return (strcmp(pstr, s) &gt; 0); }
  // ditto for &gt; &lt;= &gt;= == ! =
  
  int operator&gt;(const char *s) const
  { return (strcmp(pstr, s) 0); }
  // ditto for &lt; &lt;= &gt;= == ! =
  
  friend int operator==(const char *s, const SPString&amp; sp)
  { return (strcmp(s, sp.pstr) == 0); }
  // ditto for &gt; &lt;= &gt;= &lt; !=
  
  friend substring;

private:
  void insert(int pos, int len, const char *pt, int nlen);
  
  class substring
  {
  public:
    int pos, len;
    SPString&amp; str;
    char *pt;
    
    substring(SPString&amp; os, int p, int l) : str(os)
    {
      if(p &gt; os.length()) p= os.length();
      if((p+l) &gt; os.length()) l= os.length() - p;
      pos= p; len= l;
      if(p == os.length()) pt= O; // append to end of string
      else pt= &amp;os.pstr[p];
    }
    
    void operator=(const SPString&amp; s)
    {
      if(&amp;str == &amp;s){ // potentially overlapping
        VarString tmp(s);
        str.insert(pos, len, tmp, strlen(tmp));
        }else str.insert(pos, len, s, s.length());
    }
    
    void operator=(const substring&amp; s)
    {
      if(&amp;str == &amp;s.str){ // potentially overlapping
        VarString tmp(s.pt, s.len);
        str.insert(pos, len, tmp, strlen(tmp));
      }else str.insert(pos, len, s.pt, s.len);
    }
    
    void operator=(const char *s)
    {
      str.insert(pos, len, s, strlen(s));
    }
  };
};

// End of File
</pre>
</BODY>
</HTML>
