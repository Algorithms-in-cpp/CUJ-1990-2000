

<HTML>
<HEAD>

<TITLE>October 1993/Stepping Up To C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tococt.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Stepping Up To C++<A name="02F7_00FC"><A name="02F7_00FC"></font></h2><P>
<h3 align="center"><A name="02F7_0000"><A name="02F7_0000">Temporary Inconvenience, Part 1</h3><P>
<h3 align="center"><font color="#800000">Dan Saks</font></h3><hr><blockquote><P>
<P><i><A name="02F7_0000"><A name="02F7_0000">Dan Saks is the founder and principal of Saks &amp; Associates, which offers consulting and training in C++ and C. He is secretary of the<I></I> <I></I>ANSI and ISO C++ committees. Dan is coauthor of C++ Programming Guidelines, and codeveloper of the Plum Hall Validation Suite for C++ (both with Thomas Plum). You can reach him at 393 Leander Dr., Springfield OH, 45504-4906, by phone at<I></I> <I></I>(513)324-3601, or electronically at dsaks@wittenberg.edu.</i></P><P>
Bjarne Stroustrup has described C++ as "an engineering compromise." In designing the language, he tried to strike a difficult balance. He extended C at the high end with support for data abstraction and object-oriented programming. At the same time, he did not want to sacrifice the efficiency and machine-level capabilities that have made C so successful.<P>
As with any good compromise, few<B> </B>are delighted by the result, and many<B> </B>are disappointed. Object-oriented<B> </B>purists see C++ as a language that<B> </B>encumbers programmers with too<B> </B>many details of resource management.<B> </B>Conservative C programmers eye the<B> </B>same object-oriented features<B> </B>suspiciously, concerned that they carry<B> </B>hidden costs.<P>
This spirit of compromise is very<B> </B>evident in C++'s approach toward<B> </B>temporary objects that hold<B> </B>intermediate results during expression<B> </B>evaluation. Ideally, C++<B> </B>programmers shouldn't have to concern<B> </B>themselves with exactly when the<B> </B>temporaries come and go. But they must.<B> </B>Under the worst circumstances, a<B> </B>program might inadvertently destroy a<B> </B>temporary before it's done with it. Or,<B> </B>almost as bad, it might tie up<B> </B>resources by keeping temporaries around long after they've ceased<B> </B>being useful.<P>
A compiler must insure that each program destroys every<B> </B>temporary it creates. However, the <I>Annotated C</I>++ <I>Reference</I><I><B> </I></B><I>Manual</I> (ARM) (Ellis and Stroustrup [1990]) grants each<B> </B>implementation complete freedom to destroy temporaries when<B> </B>it sees fit. For a few years now, the C++ standards committee<B> </B>has generally agreed that the emerging standard (based on the<B> </B>ARM) leaves programmers with too little guidance for writing<B> </B>portable programs. But only recently could we agree on what<B> </B>to do about it.<P>
This month I'll explain why C++<B> </B>programs create temporary objects.<B> </B>Next month I'll explain how variations<B> </B>in the lifetime of temporary objects<B> </B>cause problems, and how the new<B> </B>rules adopted by the standards<B> </B>committee eliminate many of those<B> </B>problems.<P>
<h4><FONT COLOR="#000080"><A name="02F7_00FD">How Temporaries Happen<A name="02F7_00FD"></FONT></h4></P>
A C++ compiler may create<B> </B>temporary objects to hold the<B> </B>intermediate results of an expression. For<B> </B>example, given objects<P>
<pre>T w, x, y, z;</pre>
of some type <I>T</I>, a compiler may<B> </B>translate an expression such as<P>
<pre>w = x + y + z;</pre>
into something like<P>
<pre>T temp1 = x + y;
T temp2 = temp1 + z;
w = temp2;</pre>
When <I>T</I> is a primitive type, like <I>int</I> or <I>double</I>, an alert<B> </B>compiler can eliminate the temporaries by simply<B> </B>accumulating the result in <I>w</I>. In that case, the generated code would be<B> </B>equivalent to<P>
<pre>w = x;
w += y;
w += z;</pre>
But when <I>T</I> is a class type, compilers must be more cautious<B> </B>about eliminating temporaries for fear of altering the<B> </B>semantics of the expression.<P>
Overloaded operators don't necessarily preserve<B> </B>relationships that hold when applying those operators to predefined<B> </B>types. For example, when you overload operators + and += for<B> </B>a class <I>T</I>, you should define the operators so that given<P>
<pre>T x, y;</pre>
the expressions<P>
<pre>x = x + y;</pre>
and<P>
<pre>x += y;</pre>
produce the same results. (Plum and Saks [1991] suggest<B> </B>preserving this and other intuitive relationships between<B> </B>operators when you overload them.) But this is purely a matter<B> </B>of style and a C++ compiler can't assume that the<B> </B>relationship holds.<P>
<h4><FONT COLOR="#000080"><A name="02F7_00FE">Common Uses for Temporaries<A name="02F7_00FE"></FONT></h4></P>
Unnamed temporary objects are most useful in evaluating<B> </B>two kinds of subexpressions:<P>
<UL><li>functions that return copies of objects (as opposed to<B> </B>pointers or references to objects)</li>
<li>constructor calls</li></UL>
<h4><FONT COLOR="#000080"><A name="02F7_00FF">Functions Returning Objects<A name="02F7_00FF"></FONT></h4></P>
<A href="list1.htm">Listing 1</a>
shows an implementation of an <I>operator+</I> that<B> </B>adds two rational numbers. A rational number is an exact<B> </B>fraction represented by two (signed) long integers. For example,<P>
<pre>rational r(3, 4);</pre>
defines <I>r</I> as a rational number whose value is (conceptually)<B> </B>3/4. (I implemented this class in considerable detail in a<B> </B>four-part series starting with "Operator Overloading", <I>CUJ</I>, Nov.<B> </B>1991.)<P>
The <I>operator</I>+ in <A href="list1.htm">Listing 1</a>
is only one of many possible<B> </B>implementations. As I described in the series on operator<B> </B>overloading, you can implement a binary operator like + as a<B> </B>member, a non-member <I>friend</I>, or as an (unfriendly?)<B> </B>non-member. Furthermore, you can pass the arguments to<B> </B><I>operator</I>+ by value (as in <A href="list1.htm">Listing 1</a>)
, or as references to<B> </B>constant objects (ref-to-const) as in<P>
<pre>rational operator+
   (const rational &amp;r1, const rational &amp;r2);</pre>
However, no matter how you declare the function, it should<B> </B>return a <I>rational</I> by value. That is, the return type should be<B> </B><I>rational</I>, not <I>rational</I> * or <I>rational &amp;</I>.<P>
Let's look more carefully at the possible parameter passing<B> </B>and function return conventions. <I>rational</I>+ takes two<B> </B><I>rational</I> operands and returns a third. You should not return the<B> </B>result in one of its operands, as in<P>
<pre>rational &amp;operator+(rational &amp;r1, rational &amp;r2)
   {      // BAD IDEA
   r1.num = r1.num * r2.denom + r2.num * r1.denom;
   r1.denom *= r2.denom;
   return r1;
   }</pre>
Otherwise you will find that<P>
<pre>rational r, s, t;
// ...
r = s + t;</pre>
has the surprising side-effect of changing the value of <I>s</I>. Thus<B> </B>you should pass both arguments either by value or by<B> </B>ref-to-const.<P>
If you pass the arguments by value, you can use the formal<B> </B>parameters as local variables and compute the result in one of<B> </B>them, as in<P>
<pre>rational operator+(rational r1, rational r2)
   {
   r1.num = r1.num * r2.denom + r2.num * r1.denom;
   r1.denom *= r2.denom;
   return r1;
   }</pre>
In this case, you must pass the result back through the<B> </B>function return value. Normally, you want that return type to<B> </B>be an object rather than a pointer or reference to an object. If<B> </B>it were a pointer or reference, what would it be bound to?<B> </B>You can't bind it to a local variable or one of the formal<B> </B>parameters, as in<P>
<pre>rational &amp;operator+(rational r1, rational r2)
   {
   r1.num = ...
   r1.denom = ...
   return r1;
   }</pre>
because returning from the function destroys its local variables<B> </B>and formal parameters. Returning a reference to a local object<B> </B>produces a dangling reference.<P>
If you really want to return a reference, you could bind the<B> </B>reference to a local static object, as in<P>
<pre>rational &amp;operator+(rational r1, rational r2)
   {<B>    </B>//ALSO NOT WISE
   static rational result;
   result.num = ...
   result.denom = ...
   return result;
   }</pre>
But, if you did this with all the rational binary operators, you<B> </B>might have trouble evaluating complicated expressions like<P>
<pre>r= s * t + u * v;</pre>
Here, the subexpressions <I>s * t</I> and <I>u</I><I> </I><I>* v</I> store their<B> </B>results in the same place, and one might overwrite the result<B> </B>of the other before <I>operator+</I> has fetched the result of the<B> </B>first.<P>
Yet another possibility is<P>
<pre>rational *operator+(rational r1, rational r2)
   {    // ALSO NOT WISE
   rational *result = new rational;
   result-&gt;num = ...
   result-&gt;denom = ...
   return result;
   }</pre>
where the function returns a pointer to a new rational object allocated from the free store. But this function is awkward to use because you must dereference the pointer returned from the function, as in <P>
<pre>r = *(s + t);</pre>
Furthermore, calling <I>operator+</I> like this causes a memory leak. The assignment copies the value referenced by the pointer, and then loses the pointer, leaving the program without a way to delete the object referenced by the pointer. <P>
There are still other ways to return a value, but they all reinforce the same conclusion: an overloaded binary operator should normally return its result by value.<P>
The program may return that value in an unnamed temporary object. For example, consider the following: <P>
<pre>rational operator+(rational r1,
                rational r2)
   {
   rational result;
   // ...
   return result;
   }</pre>
As it returns, this function copies the result into a temporary rational object using the <I>rational</I> copy constructor. An expression like<P>
<pre>r = s + t;</pre>
translates into code that returns the result of <I>s</I> + <I>t</I> in a temporary and passes that temporary as the right-hand operand of <I>operator</I>=. That is, it produces code something like<P>
<pre>rational temp1(operator+(s, t));
r.operator= (temp1);
destroy temp1;</pre>
The commentary at the end of chapter 12 in the ARM suggests alternative code generation techniques that reduce the need for temporaries. For example, a C++ compiler might translate a function returning a value, like<P>
<pre>rational operator+(rational r1,
                rational r2);</pre>
into a function with three pointer arguments and a void return type:<P>
<pre>void rational_add(rational *result,
               rational *arg1,
               rational *arg2);</pre>
Using this approach, a declaration like<P>
<pre>rational r3 = r1 + r2;</pre>
translates into<P>
<pre>rational_add(&amp;r3, &amp;r1, &amp;r2);</pre>
which eliminates the need for a temporary. However, the ARM goes on to show that even when using this translation technique, the compiler may have to generate temporaries to avoid aliasing errors (when the result object is also one of the operands). For example, an expression like<P>
<pre>r1 = r2 + r1</pre>
translates into<P>
<pre>rational_add(&amp;r1, &amp;r2, &amp;r1);</pre>
But there's a danger that <I>rational_add</I> may store a partial result in <I>r1</I> before it's done using <I>r1</I>'s initial value. Thus, a conscientious compiler that uses this translation scheme must translate<P>
<pre>r1 = r2 + r1;</pre>
into something like<P>
<pre>rational temp1;
rational_add(&amp;temp1, &amp;r2, &amp;r1);
r1 = temp1;</pre>
C++ translators must retain the right to introduce temporary objects as needed.<P>
<h4><FONT COLOR="#000080"><A name="02F7_0100">Constructor Calls<A name="02F7_0100"></FONT></h4></P>
Although unnamed temporaries seem to occur most often in expressions involving overloaded operators, they can just as easily occur from ordinary function calls. For example, consider the call <I>f(1).g()</I> inside function <I>h</I> in <A href="list2.htm">Listing 2</a>.
 <I>f</I> is a non-member function that returns an object of class <I>X</I>, and <I>g</I> is a member of <I>X</I>. Thus, <I>f(1).g()</I> applies <I>X::g</I> to the <I>X</I> object returned from <I>f</I> in an unnamed temporary.<P>
Temporary objects also result from calls to constructors inside expressions. For instance, function <I>h</I> in <A href="list2.htm">Listing 2</a>
also contains<P>
<pre>j = X(3).g();</pre>
<I>X(3)</I> invokes the constructor <I>X(int)</I> producing a temporary <I>X</I> object. <I>X(3).g()</I> applies <I>X::g</I> to that temporary object.<P>
<h4><FONT COLOR="#000080"><A name="02F7_0101">Temporaries Bound to References<A name="02F7_0101"></FONT></h4></P>
A C++ program may also create temporary objects when initializing references. As I explained in an earlier column ("Stepping Up to C++: Reference Types," <I>CUJ</I>, September, 1991), the initializer for a reference to type <I>T</I> should be an lvalue of type <I>T</I>. For example,<P>
<pre>char c;
char &amp;rc = c;</pre>
binds <I>rc</I> (of type <I>reference to char</I>) to the <I>char</I> object <I>c</I>.<P>
A reference can refer to a <I>const</I> object. In this case, if the initializing expression is not an lvalue, the generated code creates a temporary object to hold the initial value, and binds the reference to that temporary. For example,<P>
<pre>const double &amp;rcd = 1.0;</pre>
compiles as something like <P>
<pre>const double temp = 1.0;
const double &amp;rcd = temp;</pre>
The initializing expression for a <I>const T</I><I> </I><I>&amp;</I> need not have type <I>T</I><I>;</I> it can be an expression of any type with a standard or user-defined conversion to type <I>T</I>. For example,<P>
<pre>const double &amp;rcd = 1;</pre>
promotes <I>1</I> to <I>double</I> to initialize the temporary. Or, if <I>X</I> is a class with a constructor <I>X::X(int)</I>, then<P>
<pre>const X &amp;rcx = 1;</pre>
is more-or-less equivalent to<P>
<pre>const X temp(1);
const X &amp;rcx = temp;</pre>
Early dialects of C++ (Stroustrup [1986]) created temporaries even for non-<I>const</I> references. That is, C++ used to accept<P>
<pre>double &amp;rd = 1;</pre>
and bound the reference to a temporary initialized with <I>1</I>. Subsequently, an assignment like<P>
<pre>rd = 2;</pre>
changed the value of the temporary to <I>2</I>.<P>
The commentary in the ARM explains that binding references to modifiable temporaries proved to be "a major source of errors and surprises." But the example I gave above isn't so surprising. The real surprises came from examples like the one in <A href="list3.htm">Listing 3</a>.
<P>
<A href="list3.htm">Listing 3</a>
shows a function <I>f</I> that returns a value through its reference parameter <I>double &amp;r</I>. The call <I>f(n)</I> inside <I>g</I> looks like it should return a value in <I>n</I>. But <I>n</I> is an <I>int</I>, not a <I>double</I>. Under the old C++ rules the call <I>f(n)</I> generates a temporary <I>double</I> object initialized with <I>n</I> and binds reference parameter <I>r</I> to the temporary. The assignment inside <I>f</I> stores the result into the temporary, not into <I>n</I>. Surprise!<P>
The more recent language definition in the ARM prohibits creating temporaries to initialize references to non-<I>const</I> objects. Many of today's C++ implementations still follow the older, more forgiving rule, but issue warnings when they create temporaries bound to non-<I>const</I> references.<P>
<h4><FONT COLOR="#000080"><A name="02F7_0102">Lifetimes of Temporaries<A name="02F7_0102"></FONT></h4></P>
The lifetime of a temporary object is the period of time during program execution from the creation of that temporary until its destruction. The ARM, and until recently, the Working Paper for the C++ standard, left the lifetime of temporary objects "implementation dependent." A program might destroy each temporary almost immediately, or it might save them up and destroy them all at program termination.<P>
Next month, I'll look at specific problems resulting from the uncertainty of the lifetime of temporaries, and I'll describe the new rules that eliminate many of those problems.<P>
<h4><FONT COLOR="#000080"><A name="02F7_0103">The Range of an Enumeration<A name="02F7_0103"></FONT></h4></P>
I received an interesting letter last month:<P>
In "Recent Language Extensions to C++," by Dan Saks (<I>CUJ</I>, June 1993), the definition of the <I>operator</I>++ in the section on operator overloading for enumerations is flawed. As described, it would give an undefined result for the last color <I>BLUE</I>. If the semantics of incrementing <I>BLUE</I> meant going back to <I>RED</I>, then the following could work:<P>
<pre>enum color { RED, WHITE, BLUE };
color &amp;operator++(color &amp;c)
   {
   switch (c)
      {
      case RED: return c = WHITE;
      case WHITE: return c = BLUE;
      case BLUE: return c = RED;
      }
   }</pre>
Thus is of course ugly for larger enums. Maybe your readers can suggest a more elegant solution.<P>
Rizwan Mithani<br>
Stoner Associates<br>
P.O. Box 86<br>
Carlisle, PA 17013-0086 <P>
Let me say this about that. In the article in question I explained that, given<P>
<pre>enum color { RED, WHITE, BLUE };
enum color c;</pre>
a <I>for</I> loop like<P>
<pre>for (c = RED; c &lt;= BLUE; ++c)</pre>
no longer compiles as C++. It compiles as C because C considers enumerations to be integral types and lets you apply ++ to an enumeration. But a recent change in C++ removed enumerations from the integral types so that ++ no longer applies.<P>
Overloading for enumerations provides a way to restore the <I>for</I> loop above as valid C++. I suggested you could define ++ for colors as:<P>
<pre>inline color &amp;operator++(color &amp;c)
   {
   return c = color(c + 1);
   }</pre>
My intent was not, as the letter suggests, to write ++ so that incrementing a color whose value is <I>BLUE</I> makes it wrap around to <I>RED</I>. That causes the loop to repeat without end. I intended for the terminating value for <I>c</I> in<P>
<pre>for (c = RED; c &lt;= BLUE; ++c)</pre>
to be the color whose value is <I>BLUE+1</I>. I believe this has well-defined behavior in C++.<P>
The C++ standards committee realized that restricting the values of an enumeration variable to only the enumerators for that type was too restrictive given widespread practice in C and C++. For example, C and C++ programmers write things like<P>
<pre>enum mode { in = 1, out = 2 };
int open(const char *s, mode m);

void f()
   {
   // ...
   open(fn, in | out);
   // ...</pre>
The expression <I>in</I> | <I>out</I> yields a value, namely <I>3</I>, that is not one of the enumerators. The committee decided that an enumeration object could legitimately have values other than its named enumeration values. The new rules for enumeration are essentially:<P>
<UL><li>The underlying type of an enumeration is the smallest integral type that can represent all enumerator values defined in the [enumeration's] definition. <I>sizeof(e)</I> for enumeration type <I>e</I> is the size of <I>e</I>'s underlying type.</li>
<li>For enumeration <I>e</I> whose smallest enumerator is <I>e-min</I> and whose largest enumerator is <I>e-max</I>, the values of <I>e</I> are all those values of <I>e</I>'s underlying type that can be represented by the smallest bitfield that can represent both <I>e-min</I> and <I>e-max</I>.</li></UL>
For example, given<P>
<pre>enum color { RED, WHITE, BLUE };</pre>
<I>e-min</I> is <I>0 (RED)</I>, and <I>e-max</I> is <I>2</I> (<I>BLUE</I>). I believe the underlying type for color is <I>unsigned char</I><I>.</I> (I realize as I write this that the proposed new wording is not as clear as I'd like it to be for determining the underlying type.) In any case, the range of values for color is at least the set of values that can be represented in a bitfield that can hold <I>0</I> through <I>2</I>, inclusive. This means that the underlying value <I>3 (BLUE+1)</I> is also a legitimate value for a color, because it fits in that bitfield.<P>
Had I defined <I>color</I> as<P>
<pre>enum color { RED, WHITE, BLACK, BLUE };</pre>
then <I>e-max</I> would be <I>3 (BLUE)</I>, and the range from <I>e-min</I> to <I>e-max</I> would completely fill the bitfield. Then <I>BLUE+1</I> would be outside the range of enumeration values and the ++<I>operator</I> might not work as I intended. This suggests that, as a general style rule, if you want to be able to increment through the entire range of values for an enumerator, you should insure that the value one greater than the largest enumerator is in the range of values. In other words, the largest enumerator shouldn't have the value 2n-1 (for some positive integer n). If necessary, add an extra enumerator at the end just to increase the range.<P>
Finally, if you do want <I>operator</I>++ to cause the enumeration values to wrap around from the largest to the smallest enumerator, you need not use a case statement as suggested above. Rather, try writing<P>
<pre>color &amp;operator++(color &amp;c)
   {
   if (c == LAST_COLOR)
      c = FIRST_COLOR;
   then
      c = color (c+1);
   return c;
   }</pre>
where <I>FIRST_COLOR</I> and <I>LAST_COLOR</I> are the smallest and largest color values, respectively.<P>
<h4>References</FONT></h4></P>
Ellis and Stroustrup [1990], Margaret A. Ellis and Bjarne Stroustrup, <I>The Annotated C</I>++ <I>Reference Manual</I>, Addison-Wesley.<P>
Plum and Saks [1991], Thomas Plum and Dan Saks, <I>C</I>++ <I>Programming Guidelines</I>, Plum Hall.<P>
Stroustrup [1986], Bjarne Stroustrup, <I>The C</I>++ <I>Programming Language (1st ed.)</I>, Addison-Wesley.<P>

<h4><a href="../../../source/1993/oct93/saks.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
