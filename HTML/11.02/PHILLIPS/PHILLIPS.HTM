

<HTML>
<HEAD>

<TITLE>February 1993/Image Processing, Part 9: Histogram-Based Image Segmentation</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocfeb.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">Image Processing, Part 9: Histogram-Based Image Segmentation<A name="0064_002E"><A name="0064_002E"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0064_0000"><A name="0064_0000">Dwayne Phillips</font></h3><hr><blockquote><P>
<P><i><A name="0064_0000"><A name="0064_0000">The author works as a computer and electronics engineer with the U.S. Department of Defense. He has a PhD in Electrical and Computer Engineering from Louisiana State University. His interests include computer vision, artificial intelligence, software engineering; and programming languages.</i></P><P>
<h4><FONT COLOR="#000080"><A name="0064_002F">Introduction to the Series of Articles<A name="0064_002F"></FONT></h4></P>
This is the ninth in a series of articles on images and image processing. Previous articles discussed reading, writing, displaying, and printing images (TIFF format), histograms, edge detection, spatial frequency filtering, and sundry image operations. This article will discuss simple image segmentation based on histograms and image thresholding.<P>
Image segmentation is the process of dividing an image into regions or objects. It is the first step in the field of image analysis. Image processing displays images and alters them to make them look "better," while image analysis tries to discover what is in the image.<P>
The basic idea of image segmentation is to group individual pixels (dots in the image) together into regions if they are similar. Similar can mean they are the same intensity (shade of gray), form a texture, line up in a row, create a shape, etc. There are many techniques available for image segmentation, and they vary in complexity, power, and area of application.<P>
<h4><FONT COLOR="#000080"><A name="0064_0030">Histogram-Based Image Segmentation<A name="0064_0030"></FONT></h4></P>
Histogram-based image segmentation is one of the simplest and most often used segmentation techniques. It uses the histogram to select the gray levels for grouping pixels into regions. In a simple image there are two entities: the background and the object. The background is generally one gray level and occupies most of the image. Therefore, its gray level is a large peak in the histogram. The object or subject of the image is another gray level, and its gray level is another, smaller peak in the histogram.<P>
<A href="fig1.htm">Figure 1</a>
shows an image example and <A href="fig2.htm">Figure 2</a>
shows its histogram. The tall peak at gray level 2 indicates it is the primary gray level for the background of the image. The secondary peak in the histogram at gray level 8 indicates it is the primary gray level for the object in the image. <A href="fig3.htm">Figure 3</a>
shows the image of <A href="fig1.htm">Figure 1</a>
with all the pixels except the 8s blanked out. The object is a happy face.<P>
This illustrates histogram-based image segmentation. The histogram will show us the gray levels of the background and the object. The largest peak represents the background and the next largest peak the object. We choose a threshold point in the valley between the two peaks and threshold the image. Thresholding takes any pixel whose value is on the object side of the point and sets it to one; it sets all others to zero. The histogram peaks and the valley between them are the keys.<P>
The idea of histogram-based segmentation is simple, but there can be problems. Where should you set the threshold point for the image of <A href="fig1.htm">Figure 1</A>? If you choose the point mid-way between the two peaks (threshold point=5), you produce the image of <a href="fig4.htm">Figure 4</a>.
 This is not the happy face object desired. If you choose the valley floor values of 4 or 5 as the threshold point, you also have a poor result. The best threshold point would be 7, but how could you know that without using trial and error?<P>
This example is difficult because there are only ten gray levels and the object (happy face) is small. In practice, the techniques discussed below will perform adequately, but there will be problems. Automatic techniques will fail, and you may have to resort to manual methods.<P>
<h4><FONT COLOR="#000080"><A name="0064_0031">Preprocessing: Histogram Equalization and Histogram Smoothing<A name="0064_0031"></FONT></h4></P>
Histogram-based segmentation depends on the histogram of the image. Therefore, you must prepare the image and its histogram before analyzing it. The first step is histogram equalization (Phillips, August 1991). Histogram equalization attempts to alter an image so its histogram is flat and spreads out over the entire range of gray levels. The result is an image with better contrast.<P>
<A href="photo1.htm">Photograph 1</a>
shows an aerial image of several house trailers with its histogram. The contrast is poor and it would be very difficult to find objects based on its histogram. <A href="photo2.htm">Photograph 2</a>
shows the result of performing histogram equalization. The contrast is much better and the histogram is spread out over the entire range of gray levels. <A href="photo3.htm">Photograph 3</a>
shows the result of performing high-pass filtering (Phillips, October 1992) on the image of <A href="photo2.htm">photograph 2</a>.
 It is easy to see the house trailers, sidewalks, trees, bushes, gravel roads, and parking lots.<P>
The next preprocessing step is histogram smoothing. When examining a histogram, you look at peaks and valleys. Too many tall, thin, peaks and deep valleys will cause problems. Smoothing the histogram removes these spikes and fills in empty canyons while retaining the same basic shape of the histogram.<P>
<A href="fig5.htm">Figure 5</a>
shows the result of smoothing the histogram given in <A href="fig2.htm">Figure 2</a>.
 You can still see the peaks corresponding to the object and background, but the peaks are shorter and the valleys are filled. <A href="photo4.htm">Photograph 4</a>
shows another example of histogram smoothing. The histogram on the left is the original with several spikes and canyons. The histogram on the right has been smoothed. I will analyze this in the segmentation.<P>
Smoothing a histogram is an easy operation. It replaces each point with the average of it and its two neighbors. <A href="list1.htm">Listing 1</a>
shows the <I>smooth_histogram</I> function that performs this operation.<P>
<h4><FONT COLOR="#000080"><A name="0064_0032">Thresholding and Region Growing<A name="0064_0032"></FONT></h4></P>
There are two more topics common to all the methods of image segmentation: image thresholding and region growing. Image thresholding sets the pixels in the image to one or zero. <A href="list2.htm">Listing 2</a>
shows the routine <I>threshold_image_array</I> that accomplishes this task.<P>
The difficult task is region growing. <A href="fig6.htm">Figure 6</a>
shows the result of thresholding <A href="fig1.htm">Figure 1</a>
correctly. The "object" in <A href="fig6.htm">Figure 6</a>
is a happy face. It comprises three different <I>regions</I> (two eyes and the smile). Region growing takes this image, groups the pixels in each separate region, and gives them unique labels. <A href="fig7.htm">Figure 7</a>
shows the result of region growing performed on <A href="fig6.htm">Figure 6</a>.
 Region growing grouped and labeled one eye as region one, the other eye as region two, and the smile as region three.<P>
<A href="fig8.htm">Figure 8</a>
shows the algorithm for region growing. It begins with an image array <I>g</I> comprising zeros and pixels set to a value. The algorithm loops through the image array looking for a <I>g(i,j)</I> == <I>value</I>. When it finds such a pixel, it calls the <I>label_and_check_neighbor</I> routine. <I>label_and_check_neighbor</I> sets the pixel to <I>g_label</I> (the region label) and examines the pixel's eight neighbors. If any of the neighbors equal <I>value</I>, they are pushed onto a stack. When control returns to the main algorithm, each pixel on the stack is popped and sent to <I>label_and_check_neighbor</I>. All the points on the stack equaled <I>value</I>, so you set them and check their neighbors. After setting all the pixels in the first region, you increment <I>g_label</I> and move on looking for the next region.<P>
<A href="list3.htm">Listing 3</a>
shows the functions that implement region growing with <I>grow</I> being the primary routine. <I>grow</I> runs through the region-growing algorithm and calls <I>label_and_check_neighbor</I> shown next in <A href="list3.htm">Listing 3</a>.
<P>
The grow and <I>label_and_check_neighbor</I> functions follow the region-growing algorithm step for step. The only unusual item is the stack. There are several ways to implement a stack. I used a simple array and a file. I did this because a region could be as large as <I>ROWSxCOLS</I> (10,000 in the C Image Processing System), and the stack must be large enough to hold that many points. I push points onto the stack array by putting them in the array and moving the top of stack pointer. When the stack array becomes full, I write it to the stack file. If the array fills again, I push the array onto the top of the stack file. I pop points off the stack array by reading them and decrementing the top of stack pointer. When the stack array is empty, I pop an array off the stack file. The final four functions of <A href="list3.htm">Listing 3</a>
(<I>push_data_onto_stack_file, pop_data_off_of_stack_file, append_stack_files, </I>and<I> copy_stack_files</I>) implement the push and pop functions for the stack array and file.<P>
<h4><FONT COLOR="#000080"><A name="0064_0033">Histogram-Based Segmentation Techniques<A name="0064_0033"></FONT></h4></P>
There are four segmentation techniques: the manual technique, histogram peak technique, histogram valley technique, and an adaptive technique.<P>
<h4><FONT COLOR="#000080"><A name="0064_0034">The Manual Technique<A name="0064_0034"></FONT></h4></P>
In the manual technique the user inspects an image and its histogram manually. Trial and error come into play and the result is as good as you want it to be.<P>
I used <A href="photo4.htm">Photograph 4</a>
as the input for all the segmentation examples. <A href="photo5.htm">Photograph 5</a>,
 <A href="photo6.htm">Photograph 6</a>,
 and <A href="photo7.htm">Photograph 7</a>
show the result of segmentation using three different thresholds. The result in <A href="photo5.htm">Photograph 5</a>
used a high of 255 and a low of 125. The segmentation included the white gravel roads as well as the house trailers and sidewalks. The result in <A href="photo6.htm">Photograph 6</a>
used a high of 255 and a low of 175. The gravel roads begin to disappear, but the house trailers and sidewalks remain. <A href="photo7.htm">Photograph 7</a>
shows the result using a high of 255 and a low of 225. This segmentation only finds the four dominant house trailers. Which answer is correct? That depends on what you wanted to find.<P>
Note, all image segmentations will appear rough. You can perform additional processing to make the result more pleasing to the eye, but that is not the purpose of segmentation. The purpose is to break the image into pieces so later computer processing can interpret their meaning. The output is for computer not human consumption. Also note how difficult it is for the computer, even with manual aid, to find objects that are trivial for humans to see. Anyone could trace over the input image and outline the objects better than the segmentation process.<P>
<A href="list4.htm">Listing 4</a>
shows the code that implements manual segmentation. The function <I>manual_threshold_segmentation</I> has the same form as the other application functions in this series. It creates the output image file if it does not exist, reads in the input data, thresholds it (<A href="list2.htm">Listing 2</a>)
, grows regions if requested (<A href="list3.htm">Listing 3</a>)
, and writes the output.<P>
<I>manual_threshold_segmentation</I> has the usual inputs (image file names, image arrays, etc.) as well as the high and low threshold values, and the <I>value</I> and <I>segment</I> parameters. The <I>value</I> parameter specifies the value at which to set a pixel if it falls between the high and low thresholds. You usually set <I>value</I> equal to 1 since those pixels outside the high-low range are set to zero. The <I>segment</I> parameter specifies whether or not to grow regions after thresholding. Sometimes you only want to threshold an image and not grow regions. The two operations are identical except for the last step. If <I>segment</I> == <I>1,</I> you call the region-growing routines.<P>
Manual segmentation is good for fine tuning and getting a feel for the operation. Its trial-and-error nature, however, makes it time consuming and impractical for many applications. You need techniques that examine the histogram and select threshold values automatically.<P>
<h4><FONT COLOR="#000080"><A name="0064_0035">Histogram Peak Technique<A name="0064_0035"></FONT></h4></P>
The first such technique uses the peaks of the histogram. This technique finds the two peaks in the histogram corresponding to the background and object of the image. It sets the threshold half way between the two peaks. Look back at the smoothed histogram in <A href="fig5.htm">Figure 5</a>.
 The background peak is at 2 and the object peak is at 7. The midpoint is 4, so the low threshold value is 4 and the high is 9.<P>
The peaks technique is straightforward except for two items. In the histogram in <A href="fig5.htm">Figure 5</a>,
 you'll note the peak at 7 is the fourth highest peak. The peaks at 1 and 3 are higher, but they are part of the background mountain of the histogram and do not correspond to the object. When you search the histogram for peaks, you must use a peak spacing to ensure the highest peaks are separated. If you did not, then you would choose 2 as the background peak and 1 as the object peak. <A href="fig9.htm">Figure 9</a>
shows the disastrous effect of this.<P>
The second item to watch carefully is determining which peak corresponds to the background and which corresponds to the object. Suppose an image had the histogram shown in <A href="fig10.htm">Figure 10</a>.
 Which peak corresponds to the background? The peak for gray level 8 is the highest, but it corresponds to the object not the background. The reason is the mountain surrounding the peak at gray level 2 has a much greater area than that next to gray level 8. Therefore, gray levels 0 through 6 occupy the vast majority of the image, and they are the background.<P>
<A href="list5.htm">Listing 5</a>
shows the source code to implement the peaks technique. <I>peak_threshold_segmentation</I> is the primary function. It checks for the existence of the output image, reads the input image, and calculates and smoothes the histogram. Next, it calls new functions to find the histogram peaks and determine the high and low threshold values. Finally, it thresholds the image, performs region growing if desired, and writes the result image to the output file.<P>
The functions <I>find_peaks</I> and <I>insert_into_peaks</I> in <A href="list5.htm">Listing 5</a>
analyze the histogram to find the peaks for the object and background. These functions build a list of histogram peaks. There are several ways to do this. I used an array of values. <I>find_peaks</I> loops through the histogram and calls <I>insert_into_peaks</I>, which puts the histogram values in the proper place in the array. <I>find_peaks</I> ends by looking at the spacing between the largest peaks to ensure we do not have a disaster such as shown in <A href="fig9.htm">Figure 9</a>.
<P>
The function <I>peaks_high_low</I> takes the two peaks from <I>find_peaks</I> and calculates the high- and low-threshold values for segmentation. <I>peaks_high-low</I> examines the mountains next to the peaks as illustrated in <A href="fig10.htm">Figure 10</a>.
 It then finds the mid-point between the peaks and sets the high and low threshold values.<P>
<A href="photo8.htm">Photograph 8</a>
shows the result of applying the peaks technique to the image of <A href="photo4.htm">Photograph 4</a>.
 The peaks technique found the two peaks at 255 and 77. The mid-point is 166, so the high threshold is 255 and the low threshold is 166. This is a reasonably good segmentation of <A href="photo4.htm">Photograph 4</a>.
<P>
<h4><FONT COLOR="#000080"><A name="0064_0036">Histogram Valley Technique<A name="0064_0036"></FONT></h4></P>
The second automatic technique uses the peaks of the histogram, but concentrates on the valley between them. Instead of setting the mid-point arbitrarily half way between the two peaks, the valley technique searches between the two peaks to find the lowest valley.<P>
Look back at the histogram of <A href="fig10.htm">Figure 10</a>.
 The peaks are at gray levels 2 and 8 and the peaks technique would set the midpoint at 5. In contrast, the valley technique searches from 2 through 8 to find the lowest valley. In this case, the "valleypoint" is at gray level 7.<P>
<A href="list6.htm">Listing 6</a>
shows the code that implements the valley technique. The primary function is <I>valley_threshold_segmentation</I>. It checks for the output file, reads the input image, calculates and smoothes the histogram, and finds the peaks as <I>peak_threshold_segmentation</I> did. It finds the valley-point via the functions <I>valley_high_low, find_valley_point</I>, and <I>insert_into_deltas. find_valley_point</I> starts at one peak and goes to the next inserting the histogram values into a deltas array via the <I>insert_into_deltas</I> function. This uses an array to create a list of deltas in the same manner as <I>insert_into_peaks</I> did in <A href="list5.htm">Listing 5</a>.
 Once you have the valleypoint, <I>valley_high_low</I> checks the mountains around the peaks to ensure you associate the peaks with the background and object correctly.<P>
<A href="photo9.htm">Photograph 9</a>
shows the result of applying the valley technique to the image in <A href="photo4.htm">Photograph 4</a>.
 It found the peaks at 77 and 255 and went from 77 up to 255 looking for the lowest valley. It pinpointed the lowest valley at gray level 241.<P>
<h4><FONT COLOR="#000080"><A name="0064_0037">Adaptive Histogram Technique<A name="0064_0037"></FONT></h4></P>
The final technique uses the peaks of the histogram in a first pass and adapts itself to the objects found in the image in a second pass (Castleman 1979). In the first pass, the adaptive technique calculates the histogram for the entire image. It smoothes the histogram and uses the peaks technique to find the high and low threshold values.<P>
In the second pass, the technique works on each <I>ROWSxCOLS</I> area of the image individually. In each area, it segments using the high and low values found during the first pass. Then, it calculates the mean value for all the pixels segmented into background and object. It uses these means as new peaks and calculates new high and low threshold values for that <I>ROWSxCOLS</I> area. Now, it segments that area again using the new values.<P>
<A href="list7.htm">Listing 7</a>
shows the code that implements the adaptive technique with <I>adaptive_threshold_segmentation</I> being the primary function. It is very similar to the <I>peak_threshold_segmentation</I> function of <A href="list5.htm">Listing 5</a>
in that it uses all that code for its first pass. The second pass starts by calling <I>threshold_and_find_means</I>. This function thresholds the image array into background and object and calculates the mean pixel value for each. The second pass continues by using <I>peaks_high_low</I> to find new threshold values based on the background and object means. Finally, you threshold the image using these new threshold values.<P>
<A href="photo10.htm">Photograph 10</a>
shows the result of applying the adaptive technique to the image of <A href="photo4.htm">Photograph 4</a>.
 The first pass found the high- and low-threshold values to be 255 and 166. On the left side of the photograph, the second pass thresholded the image array and found the background mean to be 94 and the object mean to be 205. The new threshold values were 255 and 149. On the right side of the photograph, the background and object means were 84 and 200 and the new threshold values were 255 and 142.<P>
<h4><FONT COLOR="#000080"><A name="0064_0038">Integrating Histogram-Based Segmentation into the C Image Processing System<A name="0064_0038"></FONT></h4></P>
<A href="list8.htm">Listing 8</a>
shows the new code for the main routine of CIPS. I've added the options of thresholding and segmentation using the four techniques discussed above in cases 16 and 17. Listed next are the changes to the CIPS main menu and the two functions that interact with the user to obtain the processing options.<P>
<A href="list9.htm">Listing 9</a>
shows a stand-alone application program for thresholding and segmenting entire image files. It is command- line driven and calls the functions shown in the earlier listings.<P>
<h4><FONT COLOR="#000080"><A name="0064_0039">Conclusions<A name="0064_0039"></FONT></h4></P>
This installment in the series introduced image segmentation. This is the first step in locating and labeling the contents of an image. The techniques discussed work on simple images with good contrast and gray level separation between the object and background. You will need other techniques to attack more complex images.<P>
<h4>References</FONT></h4></P>
Castleman, Kenneth R. 1979. <I>Digital Image Processing</I>. Prentice-Hall.<P>
Phillips, Dwayne. August 1991. "Image Processing, Part 4: Histograms and Histogram Equalization," <I>The C Users Journal</I>.<P>
Phillips, Dwayne. October 1992. "Image Processing, Part 7: Spatial Frequency Filtering," <I>The C Users Journal</I>.<P>

<h4><a href="../../../source/1993/feb93/phillips.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
