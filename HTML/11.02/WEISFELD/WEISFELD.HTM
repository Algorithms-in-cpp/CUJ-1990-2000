

<HTML>
<HEAD>

<TITLE>February 1993/Solving Linear Equations Using C</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocfeb.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">Solving Linear Equations Using C<A name="0096_0032"><A name="0096_0032"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0096_0000"><A name="0096_0000">Matt Weisfeld</font></h3><hr><blockquote><P>
<P><i><A name="0096_0000"><A name="0096_0000">Matt Weisfeld is currently employed by the Allen-Bradley Company in Highland Heights, Ohio. He is responsible for the design and development of test software on VAX/VMS, UNIX, DOS and other platforms. Matt is currently working on a book entitled Building and Testing Portable Libraries in C to be published by QED later this year. He can be reached on Compuserve at [71620,2171].</i></P><P>
Resource allocation, a fundamental issue in any discipline, involves maximizing value and minimizing costs. As early as Junior High School, students solve simultaneous equations to find where these two variables break even. However, solving simultaneous equations by hand works only when the number of unknowns is small. When the problem involves dozens of equations and variables, pencil and paper just aren't enough. Linear Programming (LP) is used to solve these large resource-allocation problems. This article presents a program for solving linear equations using C.<P>
<h4><FONT COLOR="#000080"><A name="0096_0033">Sample Application<A name="0096_0033"></FONT></h4></P>
To illustrate how Linear Programming works in a real life application, consider the following example. The Acme soft drink company markets two different lines of cola: diet and regular. Operating at maximum daily capacity, Acme can produce four tons of diet and six tons of regular. Most ingredients (such as water and sweetener) are obtained upon demand, so they do not affect potential output. However, the secret ingredient that makes Acme cola taste so special is limited to 24 pounds a day. Each ton of diet needs three pounds of the secret ingredient while each ton of regular needs four pounds. Finally, each ton of diet sells for $200,000, while each ton of regular sells for $600,000. The Acme company must maximize income by producing the optimal amount of diet and regular cola.<P>
The standard LP problem consists of variables, an objective, and constraints. The variables in this example represent the two types of cola, diet (<I>x</I><SUB>1</SUB>) and regular (<I>x</I><SUB>2</SUB>). The goal is to allocate these variables in a fashion that maximizes the company's income (<I>z</I>). The objective function can be written<P>
<pre><I>z</I> = 2<I>x</I><SUB>1</SUB> + 6<I>x</I><SUB>2</SUB> (in units of $100,000)</pre>
To complete the LP model three constraints must be factored in:<P>
<pre><I>x</I><SUB>1</SUB> &lt;= 4 (max diet in tons)
<I>x</I><SUB>2</SUB> &lt;= 6 (max regular in tons)
<I>3x</I><SUB>1</SUB> + 4<I>x</I><SUB>2</SUB> &lt;= 24 (in pounds)</pre>
The final problem is:<P>
Maximize<P>
<pre><I>z</I> = 2<I>x</I><SUB>1</SUB> + 6<I>x</I><SUB>2</SUB> (objective function)</pre>
such that<P>
<pre><I>x</I><SUB>1</SUB> &lt;= 4 (constraint 1)
<I>x</I><SUB>2</SUB> &lt;= 6 (constraint 2)
3<I>x</I><SUB>1</SUB> + 4<I>x</I><SUB>2</SUB> &lt;= 24 (constraint 3)
<I>x</I><SUB>1</SUB>, <I>x</I><SUB>2</SUB> &gt;=0 (it is impossible to have a negative amount of cola)</pre>
<h4><FONT COLOR="#000080"><A name="0096_0034">The Graphical Solution<A name="0096_0034"></FONT></h4></P>
Since this problem has only two variables, you can depict the solution graphically. Understanding the problem in terms of a graph makes the transition to the algorithmic solution much easier. However, once a third variable (and thus a third dimension) enters the picture, graphing becomes quite a challenge.<P>
<A href="fig1.htm">Figure 1</a>
shows the graph of the Acme problem with only the constraints plotted. Notice the area contained within the constraint lines and the <I>x</I><SUB>1</SUB> and <I>x</I><SUB>2</SUB> axis. This area is called the <I>Feasible Solution Space</I>. Any point within this area will yield a combination of diet and regular cola that <I>can</I> be produced and yield some income. However, the goal is to find the best solution, not simply a feasible one. Notice also that there are five edges that surround the Feasible Solution Space. An edge is where two lines meet to form a single point. The optimal solution will be found at one of these edges.<P>
To find the optimal solution, you need the objective function. <A href="fig2.htm">Figure 2</a>
shows two possible solutions based on a different value for <I>z</I>. Since the ratio of <I>x</I><SUB>1</SUB> to <I>x</I><SUB>2</SUB> is known, the slope of the line can be calculated. By varying the position of the line (the slope is always the same so the lines must move in a parallel manner), different solutions to this problem can be explored. The values of <I>x</I><SUB>1</SUB> and <I>x</I><SUB>2</SUB> are obtained by examining the points where the objective function intersects the lines bounding the feasible solution space. Line 1 intersects the feasible solution space at edge <I>b</I> (point <I>x</I><SUB>1</SUB>=0, <I>x</I><SUB>2</SUB>=6: <I>z</I>=36). Notice that as the line moves away from the origin, the value of <I>z</I> increases. Also remember that the objective line must intersect the feasible solution space for a valid solution to exist. Looking at the graph, it is apparent that the largest value of <I>z</I> that intersects the Feasible Solution Space is at edge <I>c</I> (point <I>x</I><SUB>1</SUB>=1.5, <I>x</I><SUB>2</SUB>=6, <I>z</I>=39). An optimal solution not falling on an edge represents a situation where the objective function is parallel to one of the constraints and more than one (actually infinite) optimal solution exists.<P>
<h4><FONT COLOR="#000080"><A name="0096_0035">The Standard Form of the LP Model<A name="0096_0035"></FONT></h4></P>
In order to have a mathematical algorithm that can solve general LP models as well as lend itself to a computer implementation, all LP problems must follow the Standard Form of the LP model. The Standard Form includes these features:<P>
<UL><li>All constraints are equations with a non-negative Right Hand Side (RHS). If a RHS is negative, simply multiple both sides by --1.</li>
<li>All variables are non-negative. In this case there is no choice. There is no way to produce a negative amount of diet cola.</li>
<li>The objective function can be maximized or minimized. In the sample problem you are maximizing income. However, the problem could be designed to minimize costs (this will be discussed later).</li></UL>
To satisfy the first rule the constraints must be converted to equations. This may seem confusing, but in their present form they are not now equations. The operator used in all the constraints is &lt;=. To make the constraints conform to the Standard Form, equal signs must separate the left-hand-side from the right-hand-side. However, simply replacing the &lt;= with an = is inappropriate since it actually alters the constraint (eg: <I>i</I>&lt;=1 is obviously not the same as <I>i</I>=1). To properly convert the constraint to an equation, a <I>slack variable</I> must be added. The slack variable accounts for the fact that the &lt;= represents a wide range of values and permits the use of the equality.<P>
Even though the slack variables are necessary in the conversion of the constraints, they do not contribute to the value of the objective function. Only <I>x</I><SUB>1</SUB> and <I>x</I><SUB>2</SUB> affect the income. The slack variables are created to assist in the computations, they do not represent real unknowns. To illustrate this fact, the objective function multiplier for each slack variable is 0. Thus the Acme Cola problem, represented in the Standard Form, is:<P>
Maximize<P>
<pre><I>z</I> = 2<I>x</I><SUB>1</SUB> + 6<I>x</I><SUB>2</SUB> + 0<I>s</I><SUB>1</SUB> + 0<I>s</I><SUB>2</SUB> + 0<I>s</I><SUB>3</SUB> (objective function)</pre>
such that<P>
<pre><I>x</I><SUB>1</SUB> + <I>s</I><SUB>1</SUB> = 4 (constraint 1)
<I>x</I><SUB>2</SUB> +<I>s</I><SUB>2</SUB> = 6 (constraint 2)
3<I>x</I><SUB>1</SUB> + 4<I>x</I><SUB>2</SUB> <I>s</I><SUB>3</SUB> = 24 (constraint 3)
<I>x</I><SUB>1</SUB>, <I>x</I><SUB>2</SUB> &gt;= 0 (it is impossible to have a negative amount of cola)</pre>
In this case, the slack variables are all positive because all the constraints are of the &lt;= type. If the constraints were &gt;=, the slack variables would be negative. <A href="fig3.htm">Figure 3</a>
shows how the slack variables are represented graphically. There is a direct relationship between the number of graph sides (5) and the number of variables (<I>x</I><SUB>1</SUB>, <I>x</I><SUB>2</SUB>, <I>s</I><SUB>1</SUB>, <I>s</I><SUB>2</SUB>, <I>s</I><SUB>3</SUB>).<P>
<h4><FONT COLOR="#000080"><A name="0096_0036">The Starting Solution<A name="0096_0036"></FONT></h4></P>
To begin solving the Acme problem you must identify an initial, feasible starting solution. Since the optimal solution must be an edge, this problem has five possible candidates (as can be seen on the graph). Normally, you would begin at the origin when a problem is bounded by the <I>x</I><SUB>1</SUB> and <I>x</I><SUB>2</SUB> axis (where <I>x</I><SUB>1</SUB>, <I>x</I><SUB>2</SUB> &gt; 0), since this is both a feasible solution and an edge. The concept of the algorithm (presented later) is to move from the current edge to the next adjacent edge on a path to the optimal solution. The direction to move is determined by the algorithm. Thus, from the origin (edge <I>a</I> in <A href="fig2.htm">Figure 2</a>)
, the algorithm moves to edge <I>b</I> and then stops at edge <I>c</I>, the optimal solution. The algorithm must follow adjacent edges (that is, the solution cannot move directly from edge <I>a</I> to edge <I>c</I>).<P>
<h4><FONT COLOR="#000080"><A name="0096_0037">The Initial Table<A name="0096_0037"></FONT></h4></P>
A table format is used to group all the information needed to solve the problem. The C data structures mimic this table. <A href="tab1.htm">Table 1</a>
contains the initial table. The top row of the table is simply a header. The second row represents the objective function. The remaining number of rows are variable and depend on the number of constraints.<P>
The first column identifies the variables that are currently in the basic solution. As mentioned before, the starting edge is at the origin (<I>x</I><SUB>1</SUB> and <I>x</I><SUB>2</SUB> are zero). This leaves the slack variables (<I>s</I><SUB>1</SUB>, s<SUB>2</SUB>, <I>s</I><SUB>3</SUB>) as the variables in the starting solution, which is called the basis. Notice that the rows representing the slack variables form an identity matrix (ones down the horizontal). Note, if some of the constraints had been &gt;=, the corresponding slack variables would be negative and thus not a candidate for entry into the basis. In this instance, the algorithm presented would need to be modified to construct a proper basis. Finally, the column at the far right represents the current values for the variables in the basis.<P>
<h4><FONT COLOR="#000080"><A name="0096_0038">The C Data Structures<A name="0096_0038"></FONT></h4></P>
Since the user interface is not a topic of this discussion, all data structures are defined internally. However, in any practical application the input data should not be hard-coded. <A href="list1.htm">Listing 1</a>
contains all definitions. The C program includes three arrays that hold all the data necessary to represent a table. The arrays basis and objective hold the names (labels) that represent the variables. The actual computations are performed on the array called <I>table</I>. The dimensions of the table are always rows by columns. In the example table, the dimensions are four rows by seven columns. The only other information needed are the number of variables and constraints, which in this example are two and three respectively.<P>
<h4><FONT COLOR="#000080"><A name="0096_0039">The Simplex Method<A name="0096_0039"></FONT></h4></P>
The algorithm used to solve this problem is called the <I>simplex method</I>. With this method you determine if there are any non-basic variables that, if in the basic solution, would enhance the final result. Based on the initial table, the basis variables are <I>s</I><SUB>1</SUB>, <I>s</I><SUB>2</SUB>, and <I>s</I><SUB>3</SUB>. This is a feasible solution, however, since the variables <I>x</I><SUB>1</SUB> and <I>x</I><SUB>2</SUB> are not in the basis, the result is to produce nothing (<I>z</I>=0). To identify any variables that should enter the basis, inspect the objective function. The objective function is<P>
<pre> <I>z</I>  <I>x</I><SUB>1</SUB>  <I>x</I><SUB>2</SUB>  <I>s</I><SUB>1</SUB>  <I>s</I><SUB>2</SUB>  <I>s</I><SUB>3</SUB>  <I>sol</I>
---------------------------
 1  -2  -6  0   0   0   0</pre>
Any variable that is negative (in a maximization problem) will increase the value of <I>z</I>, and so should enter the basis. If there is more than one negative value, the most negative one is chosen. Thus, there are two candidates for the entering value (--2 and --6). In this case, <I>x</I><SUB>2</SUB> should enter the basis.<P>
It is obvious that if one variable enters the basis, another currently in the basis must leave. Since <I>s</I><SUB>1</SUB>, <I>s</I><SUB>2</SUB>, and <I>s</I><SUB>3</SUB> are in the basis, one must leave if <I>x</I><SUB>2</SUB> is to enter. Determining the leaving variable is done by inspecting the numbers in the column under entering variable, <I>x</I><SUB>2</SUB>. They are<P>
<pre><B>       <I>x</I><SUB>2</SUB></B>
<B>     -----</B>
<I>s</I><SUB>1</SUB>    0.0
<I>s</I><SUB>2</SUB>    1.0
<I>s</I><SUB>3</SUB>    3.0</pre>
All numbers that are not positive are not considered, thus <I>s</I>1 cannot leave the basis at this time. To determine which candidate actually leaves the basis, the ratios between the values in the entering column and the values in the solution are taken. For example, since there are two possible candidates to leave the basis, the ratios considered are as follows:<P>
<pre><B><I>    sol</I>     <I>x</I><SUB>2</SUB>   ratio</B>
<B>   -----  -----  -----</B>
<I>s</I><SUB>2</SUB>  :  6    / 1   =  6
<I>s</I><SUB>3</SUB>  : 24    / 3   =  8</pre>
The lowest value is chosen to leave the basis, thus <I>s</I><SUB>2</SUB> receives the honor. This makes the value 1.00, at the intersection of column <I>x</I><SUB>1</SUB> and row <I>s</I><SUB>2</SUB>, the pivot element.<P>
Now that the entering and leaving variables have been identified, the next iteration of the table is calculated by using the Gauss-Jordon method. Looking at the table, it is evident that for <I>x</I><I><SUB>2</SUB></I> to become part of the basis, it must replace <I>s</I><I><SUB>2</SUB></I> as part of the identity matrix. To do this the pivot element must be a 1. Thus, all values in the leaving equation are divided by the pivot element. In this instance, the value of the pivot element is already a 1 so the division does not change anything. The row that was <I>s</I><I><SUB>2</SUB></I> and is now replaced by <I>x</I><I><SUB>2</SUB></I> is called the pivot equation.<P>
As mentioned above, placing <I>x</I><I><SUB>2</SUB></I> in the basis means that it must replace <I>s</I><I><SUB>2</SUB></I> as part of the identity matrix. Since the pivot element is now a 1, all the other values in the <I>x</I><I><SUB>2</SUB></I> column must be 0. To do this the transformation<P>
<pre><I>new equation = old equation - </I>(<I>entering column coefficient </I>
   <I>new pivot equation</I>)</pre>
is applied to all elements of all the rows (including the objective function) other than the pivot equation.<P>
Thus the objective function transformation is<P>
<pre>old  :1      -2       -6       0         0        0        0

     -(-6)0  -(6)(0)  -(6)(1)  -(6-(0)  -(6)(1)  -(6)(0)  -(6)(6)
-------------------------------------------------------------------

new  :1      -2       0        0         6        0        36</pre>
The <I>s</I><SUB>1</SUB> equation is unchanged due to the fact that the entering column coefficient is already zero. The <I>s</I><SUB>3</SUB> equation transformation is as follows:<P>
<pre>old  :0     4        3        0        0        1        24

     -(3)0  -(3)(0)  -(3)(1)  -(3)(0)  -(3)(1)  -(3)(0)  -(3)(6)
------------------------------------------------------------------

new  :0     4        0        0        -3       1        6</pre>
The first iteration is complete and the second table is presented in <A href="tab2.htm">Table 2</a>.
 The important information that can be gathered from inspecting this table is in the solution column. The 36 in the solution column of the objective function indicates that with the current solution the ACME Co. can make $36.00 (in units of 100,000). To determine the product mix, examine the variables in the basis. In this case only <I>x</I><SUB>2</SUB> is in the basis. Its solution is 6 (if six units of <I>x</I><SUB>2</SUB> are produced, ACME will make $36.00). However, since the objective function still has a negative value, the optimum solution has not yet been reached.<P>
The variable x<SUB>1</SUB>, which has a value of -2, is the next to enter the basis. The ratios are:<P>
<pre>   <I>s</I><SUB>1</SUB>: 4/1 = 4
   <I>s</I><SUB>3</SUB>: 6/4 = 1.5</pre>
Thus <I>s</I><SUB>3</SUB> is the leaving variable. In this case the pivot element is not one, so all the elements of the pivot equation are divided by the pivot element, which is four. The new pivot equation is as follows:<P>
<pre>   0   1   0   0   -0.75   0.25   1.5</pre>
Applying the Gauss-Jordon technique yields the table in <A href="tab3.htm">Table 3</a>.
 The first thing to notice is that there are no negative values in the objective function. This means that the optimal solution has been found (<I>z</I>=39). Also notice that both variables, <I>x</I><SUB>1</SUB> and <I>x</I><SUB>2</SUB>, are in the basis. Thus, to maximize profits, ACME should produce 1.5 units of diet and 6 units of regular.<P>
<h4><FONT COLOR="#000080"><A name="0096_003A">The C Routines<A name="0096_003A"></FONT></h4></P>
The amount of C code necessary to perform the table operations is surprisingly small. <A href="list2.htm">Listing 2</a>
contains the code for the mainline which loops until there are no more entering variables, printing each iteration of the table. The entering variable (<I>enter_pos</I>) and leaving variable (<I>leave_pos</I>) are determined by the code in <A href="list3.htm">Listing 3</a>.
 If <I>enter_pos</I> is 0 then the optimal solution has already been obtained and the loop terminates. The location of the pivot element is placed in the variable <I>pivot_element</I>.<P>
The routines <I>new_pivot</I> and <I>new_equation</I> are presented in <A href="list4.htm">Listing 4</a>.
 <I>new_pivot</I> calculates the next pivot equation by dividing all elements in the pivot row by the pivot element, while <I>new_equation</I> performs the Gauss-Jordon algorithm on the entire table and completes the current iteration.<P>
To help illustrate the program's performance, and to aid in debugging, two additional routines are included. The first, <I>build_basis</I>, labels all the rows and columns for better readability when the table is printed. The second, <I>print_table</I>, simply prints the contents of the table so that the information it contains can be inspected. These routines are presented in <A href="list5.htm">Listing 5</a>.
 All of the listing files can be combined into one program file for compilation and execution.<P>
<h4><FONT COLOR="#000080"><A name="0096_003B">Conclusion<A name="0096_003B"></FONT></h4></P>
Linear Programming is a powerful tool when attempting to allocate resources. The example used in this article presents a solution for one specific case, a maximization problem with all constraints of the &lt;= variety. As stated before, there are a number of variations to the standard LP model. In practice, there can be a mixture of constraints (&gt;=, &lt;=, or = ) and the final goal may be to minimize the result (as in costs). When the constraints are mixed, extensions to the simplex algorithm are required. Furthermore, the results obtained from the final table are anything but final. All the numbers in the table represent useful information. (The act of gathering this information is called sensitivity analysis.)<P>
<h4>References</FONT></h4></P>
Hamdy A. Taha. 1982. <I>Operations Research, An Introduction</I>, 3rd ed. New York, NY: MacMillan Publishing Company, Inc.<P>
Hillier, Frederick S. and Gerald J. Lieberman. 1980. <I>Introduction to Operations Research</I>, 3rd ed. San Francisco, CA: Holden-Day Inc.<P>

<h4><a href="../../../source/1993/feb93/weisfeld.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
