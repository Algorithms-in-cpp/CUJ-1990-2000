

<HTML>
<HEAD>

<TITLE>February 1993/Questions & Answers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocfeb.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Questions &amp; Answers<A name="00A3_0038"><A name="00A3_0038"></font></h2><P>
<h3 align="center"><A name="00A3_0000"><A name="00A3_0000">Macros and Debugging</h3><P>
<h3 align="center"><font color="#800000">Ken Pugh</font></h3><hr><blockquote><P>
<P><i><A name="00A3_0000"><A name="00A3_0000">Kenneth Pugh, a principal in Pugh-Killeen Associates, teaches C and C++ language courses for corporations. He is the author of C Language for Programmers and All On C, and was a member on the ANSI C committee. He also does custom C programming for<I></I> <I></I>communications, graphics, image databases, and hypertext. His address is 4201 University Dr., Suite 102, Durham, NC 27707. You may<I></I> <I></I>fax questions for Ken to (919) 489-5239. Ken also receives email at kpugh@dukemvs.ac.duke.edu (Internet) and on Compuserve<I></I> <I></I>70125,1142.</i></P><P>
<B>Q</B><P>
It seems sort of ironic that the issue devoted to debugging contains an example of using macros to solve the "Fixed Field Files." (This arrangement produces a set of macro invocations.) The article, "Glass-Box Testing" hints at how to use debugging to break code and verify coverage. Unfortunately macros can't be debugged. After reviewing, understanding, and maintaining the code in various products, I've come to the conclusion that C programmers abuse the macros and the preprocessor in general.<P>
I am a <I>big</I> convert to C++ because the macro preprocessor hardly needs to be used. With true <I>consts</I> and inline functions there is no need to write nasty macros. The following code is written in C-style<P>
<pre>#define MAX_LINE 80
getline( char ** line )
   {
   static char myline[MAX_LINE];
   }</pre>
Compare it to<P>
<pre>const int MAX_LINE=80;
getline( char ** line )
   {
   static char myline[MAX_LINE];
   }</pre>
which is written in C++-style.<P>
Now with a debugger you can print <I>MAX_LINE</I> without saying<P>
<pre>find /usr/project/x400 -name *.h -name *.c \
-exec grep '#define MAX_LINE'</pre>
to search through 200 header files to find the correct macro definition.<P>
As for C++ I'm just praying that programmers will not go overboard and use overloaded functions in C++ too much. Because of the inheritance/dynamic binding we can have multiple overloaded function(s) in each class, and the superclass (base class) can have those same overloaded classes defined. I guess it would look something like <A href="list1.htm">Listing 1</a>.
<P>
What's <I>SIZE</I>? The problem gets worse as the program gets larger. I was working on debugging my project and reading the <I>C Users Journal</I> in between the compiles. I hope in the future programmers will recognize that in the world of "reuse" that readability must come before performance and space considerations.<P>
I know a programmer who does the following because he's too lazy to write the whole line:<P>
<pre>#define ptr
a.get.line.alpha.beta ptr-&gt;data</pre>
Now when I try and print <I>ptr</I>, the debugger says, <I>ptr not defined</I>. I guess you probably get the message. By the way. David Staker's book, <I>C: Style Standard &amp; Guidelines</I> is quite informative.<P>
David A. Dennerline<P>
<B>A</B><P>
I definitely agree with you that C++ can help a programmer write better code, if it is utilized properly. But basic design rules need to be followed, especially in using meaningful names.<P>
I cannot emphasize too much that when one writes a program, it should be written in English or in whatever native language code set is supported by one's compiler. Meaningful variable, member, parameter, and function names go a long way to writing maintainable code. Making too many assumptions about what the reader knows can result in programs that are difficult to understand. The member function names are particularly important in C++ as one is not supposed to look at the implementation to determine what the function is doing.<P>
Let me take your example functions, which were created for example purposes, rather than as actual code. Looking at the parameter names gives no clue as to what is really required.<P>
<pre>virtual int get_size( char * s );
virtual int get_size( int idx );</pre>
In the first case, the question is whether <I>s</I> is the name of the car or the model of the car or a combination of both. Whichever it is should be demonstrated by the name, as<P>
<pre>virtual int get_size( char * model_name);</pre>
In the second case, the parameter name is not an English word. It ought to be replaced by a real word, such as "index." I do not think that even that is enough, as some indication should be given as to what the index is used for. The question is whether the index is based on passenger compartment size, horsepower, consumer rating, or something else.<P>
<pre>virtual int get_size( int index_of_consumer_rating);</pre>
We are still left with two overloaded functions. I would eliminate the overloading by modifying the name of each member function. In addition, there is no indication in the name of what size is really being gotten. So the function might really be called<P>
<pre>virtual int get_engine_size_by_model_name
   ( char * model_name);
virtual int get_engine_size_by_consumer_rating
   (int index_of_consumer_rating);</pre>
Then the code might read<P>
<pre>get_engine_size_by_consumer_rating(SIZE);</pre>
Now the name <I>SIZE</I> looks rather funny here. That's because it is not long enough to describe what it really is. If you are just the class provider, you do not have any control over the names by which your classes will be invoked. At least you have done your best to provide the means to write readable code.<P>
One objection to requiring meaningful names is that the source code is longer. Sometimes it will take two lines to write an expression that could have fit onto one. My response is that statements are like sentences. Look at the last letter or article that you wrote. See how many sentences fit onto a single line.<P>
Another objection is that the names can be too long and can exceed the 31-character limitation of significance. The words in the name do not have to all be in the dictionary. Abbreviations are okay, especially if they appear in an industry dictionary or glossary. Proprietary abbreviations are okay, if the company has a standard glossary. Abbreviations that are local to your programs should be avoided, unless they are consistently applied and a glossary is included. Every time you use your own abbreviation, you add an information element that has to be absorbed by the reader.<P>
I remember reading <I>David Copperfield</I> in my youth. It was a bit advanced for me at the time, so I had it in one hand with a dictionary in the other. Every time I came across an unknown word, I looked it up in the dictionary. You can imagine how that affected following the plot. Using too many of your own abbreviations can make the reader miss the flow of the code.<P>
Let me point out that overloading constructors is almost unavoidable, since there is only one name for the constructor. However, as pointed out in Tom Cargill's <I>C++ Programming Style</I>, many overloaded constructors can be eliminated by specifying default arguments in the parameter list for the constructor.<P>
Your other instance of bad programming shows that the designer did not properly modularize the code in C. One has to learn to do this in C, as that is a design technique, not a feature of the language. C++ makes it easier to design modular code as many of the bookkeeping aspects are taken care of, but it does not demand it.<P>
My basic rule of thumb for structure access is that anytime you use more than one member operator, you should examine how to redesign your code. If you use more than two, you should start the redesign immediately. A program that quires a reference as<P>
<pre>a.get.line.alpha.beta</pre>
is going to be difficult to maintain.<P>
<h4><FONT COLOR="#000080"><A name="00A3_0039">External Declarations<A name="00A3_0039"></FONT></h4></P>
<B>Q</B><P>
I had a long debugging session recently when I ran across the following problem (see <A href="list2.htm">Listing 2</a>)
. I've cut it down to the essentials. The code appears all in the same source file. The value of <I>cnt</I> is incremented by both functions. The correct code for the second function should have been:<P>
<pre>static int cnt1;
...
cnt1++;
printf("cnt is %d", cnt1);</pre>
This code was only a small portion of a large file with lots of small functions, so it was not readily apparent that it was incorrect. However I would have thought the compiler would have told me that <I>cnt</I> was declared twice. No error message was generated, so the bad code was hard to find. What gives?<P>
Sam Mellon Boston, MA<P>
<B>A</B><P>
You have been exposed to the new semantics of external declarations in ANSI C. This is a major change from K&amp;R C, but it is not noted as such in many texts. Let me review how external variables are linked together, as well as the differences in K&amp;R and ANSI.<P>
In this explanation of externals, K&amp;R refers to the Appendix A in the Kernighan &amp; Ritchie <I>The C Programming Language Book</I>. Some compilers implemented externals slightly differently.<P>
The linker matches external references (<I>REF</I>s) to external definitions (<I>DEF</I>s). There are <I>REF</I>s and <I>DEF</I>s for both functions and data, though they are generated slightly differently. Take functions first. Their operation is the same in both K&amp;R and ANSI.<P>
Each call to a function in your code generates a <I>REF</I> for that function. The code for the function itself is the <I>DEF</I> for the function. For example, this code segment:<P>
<pre>void calling_function(void)
   {
   called_function();
   ..
   }</pre>
generates a <I>DEF</I> for <I>calling_function</I> and a <I>REF</I> for <I>called_function</I>. You can have one and only one <I>DEF</I> for a function in all the files that are linked together. Of course, you can and probably will have lots of <I>REF</I>s for a function, but you don't even have to have any.<P>
You may have gotten messages from the linker regarding duplicate definitions or the failure to provide a definition. Depending on the vendor, it may or may not allow you to create an executable file if those errors occur.<P>
External <I>REF</I>s and <I>DEF</I>s for data work slightly differently. Under K&amp;R C (Appendix A), the same rules applied as to having one and only one <I>DEF</I> and allowing zero or more <I>REF</I>s. A <I>DEF</I> was generated by a variable declaration outside of any function, such as:<P>
<pre>int global_i;
calling_function ()
{
global_i = 5;
...
}</pre>
This declaration could appear in one and only one source file.<P>
Optionally, you could initialize the variable as:<P>
<pre>int global_i = 5;</pre>
and the initial value would be set to 5. If you did not specify an initializer, its value would default to 0. To generate a <I>REF</I>, the declaration with the keyword <I>extern</I> was used:<P>
<pre>extern int global_i;
another_calling_function()
{
global_i = 7;
...
}</pre>
It was permissible to have both a <I>DEF</I> and a <I>REF</I> in the same source file, such as:<P>
<pre>int global_i = 5;
extern int global_i;</pre>
This would not normally be done directly, but indirectly, as the <I>REF</I> or a set of <I>REF</I>s would be placed into a header file, such as:<P>
<pre>"external.h"

extern int global_i;
/* Other extern declarations */</pre>
The <I>DEF</I>s could be in individual files or a single file. The header file would be included in this file, such as:<P>
<pre>#include "external.h"
int global_i = 5;</pre>
If the declaration of the <I>DEF</I> does not match the declaration of the <I>REF</I>, the compiler generates an error.<P>
Although K&amp;R was pretty straightforward on how to handle <I>DEF</I>s and <I>REF</I>s, vendors developed their own styles, some of which were adapted from other languages. I won't go into all the possibilities. ANSI C adopted an amalgamation of the styles. It also added the concept of tentative <I>DEF</I>. The first declaration of an external without an explicit initializer is considered to be a tentative <I>DEF</I>.<P>
All similar declarations that follow in the same file are also tentative <I>DEF</I>s.<P>
For example, suppose your file contained:<P>
<pre>int global_i; /* Tentative DEF */
...
int global_i; /* Tentative DEF */</pre>
These are not double definitions of <I>global_i</I>, but simply a set of tentative definitions of the same variable. One tentative <I>DEF</I> will be turned into a true <I>DEF</I> by the compiler.<P>
Now if you declare an initializer in the declaration, it becomes a true <I>DEF</I>. The compiler will accept one true <I>DEF</I> and ignore all the other tentative <I>DEF</I>s.<P>
<pre>int global_i = 5;  /* True DEF */
...
int global_i; /* Tentative DEF - refers to previous*/</pre>
The compiler will complain if two true <I>DEF</I>s appear in the same source file, as:<P>
<pre>int global_i = 5;  /* True DEF */
int global_i = 6;  /* Compiler error - double DEF */</pre>
Just as with K&amp;R, you can only have a single true <I>DEF</I> in all the linked source files. The linker should complain if two true <I>DEF</I>s appear in multiple linked source files. However, the way many compilers/linkers work extends the concept of tentative <I>DEF</I>s to multiple source files. A tentative <I>DEF</I> in a source file continues to act as a tentative <I>DEF</I>, rather than being turned into a true <I>DEF</I>. If there is no true <I>DEF</I> in any source file, then the linker turns a tentative <I>DEF</I> into a true <I>DEF</I> with an initializer of zero. The linker will accept one true <I>DEF</I> and ignore all the other tentative <I>DEF</I>s.<P>
If you include the keyword <I>static</I>, the scope of the variable is only within the source file. However the rules for tentative <I>DEF</I>s still apply:<P>
<pre>static int cnt;  /* Tentative DEF */
static int cnt;  /* Tentative DEF */</pre>
Both tentative <I>DEF</I>'s refer to the same variable. This is why your code had a problem. However, it is acceptable ANSI C, so the compiler did not complain. If you used initializations, you should get an error, such as:<P>
<pre>static int cnt = 0;  /* True DEF */
static int cnt = 0;  /* 2nd True DEF - compiler error */</pre>
If you had simply initialized one, the other would have been treated as a tentative <I>DEF</I> for the same variable:<P>
<pre>static int cnt = 0;  /* True DEF */
static int cnt;     /* Tentative DEF */</pre>
To complete the external puzzle, the keyword <I>extern</I> has been altered from K&amp;R. It now can be used with an initializer, as:<P>
<pre>extern int global_i = 5; /* True DEF */
extern int global_i;   /* REF */</pre>
If used without an initializer, it still means <I>REF</I>.<P>
I should note that the concept of tentative <I>DEF</I>'s does not exist in C++. A set of declarations as:<P>
<pre>int global_i;
int global_i;</pre>
is a compiler error due to the double definition.<P>
I've covered my guidelines for using global variables long ago. It can be summed up in a word &#151; Don't. However, if you must, I suggested the style that follows that as shown for K&amp;R above. Use <I>extern</I> declarations (<I>REF</I>'s) in a header file that gets included in every source file. Then in a single file initialize all the externals. For static externals, place all declarations together near the top of the source file.<P>
P.J. Plauger long ago pioneered a similar style with Whitesmith's C, using the new ANSI standard for externals. Initialized declarations (<I>extern int i = 1</I>;) in one file are marked true <I>DEF</I>'s. Uninitialized declarations (<I>extern int i</I>;) in a header file were used as <I>REF</I>'s.<P>
<h4><FONT COLOR="#000080"><A name="00A3_003A">Social Security Feedback<A name="00A3_003A"></FONT></h4></P>
I received a note from Bruce Bogert regarding the conventions on Social Security numbers. The first three digits are assigned on a state by state basis. For example 212 through 220 are for Maryland. The next two digits may be used for individual divisions within a state and the last four digits are sequentially assigned. If you do need to make up a Social Security number for some outfit that requires it but is not legally obligated to have it, you might want to know that numbers beginning with 900 to 999 are not used for the most part. (KP)<P>

<h4><a href="../../../source/1993/feb93/pugh.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
