

<HTML>
<HEAD>

<TITLE>February 1993/Standard C</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocfeb.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Standard C<A name="009F_0034"><A name="009F_0034"></font></h2><P>
<h3 align="center"><A name="009F_0000"><A name="009F_0000">Time Conversion Functions</h3><P>
<h3 align="center"><font color="#800000">P. J. Plauger</font></h3><hr><blockquote><P>
<P><i><A name="009F_0000"><A name="009F_0000">P.J. Plauger is senior editor of The C Users Journal. He is convenor of the ISO C standards committee, WG14, and active on the C++ committee, WG21. His latest books are The Standard C Library, published by Prentice-Hall, and ANSI and ISO Standard C (with Jim Brodie), published by Microsoft Press. You can reach him at pjp@plauger.com.</i></P><P>
<h4><FONT COLOR="#000080"><A name="009F_0035">Introduction<A name="009F_0035"></FONT></h4></P>
Last month, I discussed the basic functions for obtaining scalar estimates of times. These include both elapsed execution time (type <I>clock_t</I>) and calendar time (type <I>time_t</I>). (See "The Header &lt;<I>time.h</I>&gt;," <I>CUJ</I> January 1993.) With just those facilities, you can obtain time stamps and measure small and large time intervals.<P>
But that's not the end of it. The Standard C library also lets you represent times in terms of their more familiar clock and calendar components (type <I>struct tm</I>). Moreover, the component representation can be in terms of either local time or UTC (formerly GMT). It can even keep track of whether Daylight Savings Time is in effect.<P>
My goal this month is to lead you through the code that converts between scalar and structured times. If you've ever worked with calendar computations, you know that this is hard code to write and debug. That makes it rather hard to understand as well. Be prepared to take an occasional deep breath.<P>
<h4><FONT COLOR="#000080"><A name="009F_0036">What the C Standard Says<A name="009F_0036"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="009F_0037">7.12.3 Time conversion functions<A name="009F_0037"></FONT></h4></P>
Except for the <I>strftime</I> function, these functions return values in one of two static objects: a broken-down time structure and an array of <I>char</I>. Execution of any of the functions may overwrite the information returned in either of these objects by any of the other functions. The implementation shall behave as if no other library functions call these functions.<P>
<h4><FONT COLOR="#000080"><A name="009F_0038">7.12.2.3 The <B><I>mktime</I></B> function<A name="009F_0038"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="009F_0039">Synopsis<A name="009F_0039"></FONT></h4></P>
<pre>   #include &lt;time.h&gt;
   time_t mktime(struct tm *timeptr);</pre>
<h4><FONT COLOR="#000080"><A name="009F_003A">Description<A name="009F_003A"></FONT></h4></P>
The <I>mktime</I> function converts the broken-down time, expressed as local time, in the structure pointed to by <I>timeptr</I> into a calendar time value with the same encoding as that of the values returned by the <I>time</I> function. The original values of the <I>tm_wday</I> and <I>tm_yday</I> components of the structure are ignored, and the original values of the other components are not restricted to the ranges indicated above.139 On successful completion, the values of the <I>tm_wday</I> and <I>tm_yday</I> components of the structure are set appropriately, and the other components are set to represent the specified calendar time, but with their values forced to the ranges indicated above; the final value of <I>tm_mday</I> is not set until <I>tm_mon</I> and <I>tm_year</I> are determined.<P>
<h4><FONT COLOR="#000080"><A name="009F_003B">Returns<A name="009F_003B"></FONT></h4></P>
The <I>mktime</I> function returns the specified calendar time encoded as a value of type <I>time_t</I>. If the calendar time cannot be represented, the function returns the value <I>(time_t)-1</I>.<P>
<h4><FONT COLOR="#000080"><A name="009F_003C">Example<A name="009F_003C"></FONT></h4></P>
What day of the week is July 4, 2001?<P>
<pre>   #include &lt;stdio.h&gt;
   #include &lt;time.h&gt;

   static const cha[ *const wday[] = {
     "Sunday",  "Monday",  "Tuesday", "Wednesday",
     "Thursday",  "Friday",  "Saturday", "-unknown-"
     };
   struct tm time_str;
   /*...*/

   time_str.tm_year   = 2001 - 1900;
   time_str.tm_mon    = 7 - 1;
   time_str.tm_mday   = 4;
   time_str.tm_hour   = 0;
   time_str.tm_min    = 0;
   time_str.tm_sec    = 1;
   time_str.tm_isdst  = -1;
   if (mktime(&amp;time_str) == -1)
      time_str. tm_wday = 7;
   printf("%s\n",
         wday [time_str.tm_wday]);

   ....</pre>
<h4><FONT COLOR="#000080"><A name="009F_003D">7.12.3.3 The <B><I>gmtime</I></B> function<A name="009F_003D"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="009F_003E">Synopsis<A name="009F_003E"></FONT></h4></P>
<pre>   #include &lt;time.h&gt;
   struct tm *gmtime(const time_t *timer);</pre>
<h4><FONT COLOR="#000080"><A name="009F_003F">Description<A name="009F_003F"></FONT></h4></P>
The <I>gmtime</I> function converts the calendar time pointed to by <I>timer</I> into a broken-down time, expressed as Coordinated Universal Time (UTC).<P>
<h4><FONT COLOR="#000080"><A name="009F_0040">Returns<A name="009F_0040"></FONT></h4></P>
The <I>gmtime</I> function returns a pointer to that object, or a null pointer if UTC is not available.<P>
<h4><FONT COLOR="#000080"><A name="009F_0041">7.12.3.4 The <B><I>local time</I></B> function<A name="009F_0041"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="009F_0042">Synopsis<A name="009F_0042"></FONT></h4></P>
<pre>   #include &lt;time.h&gt;
   struct tm *localtime(const time_t *timer);</pre>
<h4><FONT COLOR="#000080"><A name="009F_0043">Description<A name="009F_0043"></FONT></h4></P>
The <I>local time</I> function converts the calendar time pointed to by <I>timer</I> into a broken-down time, expressed as local time.<P>
<h4><FONT COLOR="#000080"><A name="009F_0044">Returns<A name="009F_0044"></FONT></h4></P>
The <I>localtime</I> function returns a pointer to that object.<P>
Footnotes<P>
139. Thus, a positive or zero value for <I>tm_isdst</I> causes the <I>mktime</I> function to presume initially that Daylight Saving Time, respectively, is or is not in effect for the specified time. A negative value causes it to attempt to determine whether Daylight Saving Time is in effect for the specified time.<P>
<h4><FONT COLOR="#000080"><A name="009F_0045">Using the Conversion Functions<A name="009F_0045"></FONT></h4></P>
Note that the two functions that return a value of type <I>pointer to </I><I>struct tm</I> return a pointer to a static data object of this type. Thus, a call to one of these functions can alter the value stored on behalf of an earlier call to another (or the same) function. Be careful to copy the value stored in this shared data object if you need the value beyond a conflicting function call.<P>
<I>gmtime </I>&#151; (The <I>gm</I> comes from <I>GMT</I>, which is now a slight misnomer.) Use this function to convert a calendar time to a broken-down UTC time. The member <I>tm_isdst</I> should be zero. If you want local time instead, use <I>localtime</I>, below. See the warning about shared data objects, above.<P>
<I>localtime </I>&#151; Use this function to convert a calendar time to a broken-down local time. The member <I>tm_isdst</I> should reflect whatever the system knows about Daylight Savings Time for that particular time and date. If you want UTC time instead, use <I>gmtime</I>, above. See the warning about shared data objects, above.<P>
<I>mktime </I>&#151; This function first puts its argument, a broken-down time, in canonical form. That lets you add seconds, for example, to the member <I>tm_sec</I> of a broken-down time. The function increases <I>tm_min</I> for every 60 seconds it subtracts from <I>tm_sec</I> until <I>tm_sec</I> is in the interval [0, 59]. The function then corrects <I>tm_min</I> in a similar way, then each coarser division of time through <I>tm_year</I>. It determines <I>tm_wday</I> and <I>tm_yday</I> from the other fields. Clearly, you can also alter a broken-down time by minutes, hours, days, months, or years just as easily.<P>
<I>mktime</I> then converts the broken-down time to an equivalent calendar time. It assumes the broken-down time represents a local time. If the member <I>tm_isdst</I> is less than zero, the function endeavors to determine whether Daylight Savings Time was in effect for that particular time and date. Otherwise, it honors the original state of the flag. Thus, the only reliable way to modify a calendar time is to convert it to a broken-down time by calling <I>localtime</I>, modify the appropriate members, then convert the result back to a calendar time by calling <I>mktime</I>.<P>
<h4><FONT COLOR="#000080"><A name="009F_0046">Implementing the Conversion Functions<A name="009F_0046"></FONT></h4></P>
<A href="list1.htm">Listing 1</a>
shows the file <I>gmtime.c</I>. The function <I>gmtime</I> is the simpler of the two functions that convert a calendar time in seconds (type <I>time_t</I>) to a broken-down time (type <I>struct_tm</I>). It simply calls the internal function <I>_Ttotm</I>. The first argument is a null pointer to tell <I>_Ttotm</I> to store the broken-down time in the communal static data object. The third argument is zero to insist that Daylight Savings Time is not in effect.<P>
<A href="list2.htm">Listing 2</a>
shows the file <I>xttotm.c</I>. It defines the function <I>_Ttotm</I> that tackles the nasty business of converting seconds to years, months, days, and so forth. The file also defines the function <I>_Daysto</I> that <I>_Ttotm</I> and other functions use for calendar calculations.<P>
<I>_Daysto</I> counts the extra days beyond 365 per year. To do so, it must determine how may leap days have occurred between the year you specify and 1900. The function also counts the extra days from the start of the year to the month you specify. To do so, it must sometimes determine whether the current year is a leap year. The function recognizes that 1900 was <I>not</I> a leap year. It doesn't bother to correct for the non-leap years 1800 and earlier, or for 2100 and later. (Other problems arise within just a few decades of those extremes anyway.)<P>
_<I>Daysto</I> handles years before 1900 only because the function <I>mktime</I> can develop intermediate dates in that range and still yield a representable <I>time_t</I> value. (You can start with the year 2000, back up 2,000 months, and advance 2 billion seconds, for example.) The logic is carefully crafted to avoid integer overflow regardless of argument values. Also, the function counts <I>excess</I> days rather than total days so that it can cover a broader range of years without fear of having its result overflow.<P>
_<I>Ttotm</I> uses _<I>Daysto</I> to determine the year corresponding to its time argument <I>secsarg</I>. Since the inverse of <I>_</I><I>Daysto</I> is a nuisance to write, _<I>Ttotm</I> guesses and iterates. At worst, it should have to back up one year to correct its guess. Both functions use the macro <I>MONTAB</I>, defined at the top of the file, to determine how many days precede the start of a given month. The macro also assumes that every fourth year is a leap year, except 1900.<P>
The <I>isdst</I> (third) argument to _<I>Ttotm</I> follows the convention for the <I>isdst</I> member of <I>struct tm:</I><P>
<UL><li>If <I>isdst</I> is greater than zero, Daylight Savings Time is definitely in effect. <I>_Ttotm</I> assumes that its caller has made any necessary adjustment to the time argument <I>secsarg</I>.</li>
<li>If <I>isdst</I> is zero, Daylight Savings Time is definitely <I>not</I> in effect. _<I>Ttotm</I> assumes that no adjustment is necessary to the time argument <I>secsarg</I>.</li>
<li>If <I>isdst</I> is less than zero, the caller doesn't know whether Daylight Savings Time is in effect. <I>_Ttotm</I> should endeavor to find out. If the function determines that Daylight Savings Time is in effect, it advances the time by one hour (3,600 seconds) and recomputes the broken-down time.</li></UL>
Thus, <I>_Ttotm</I> will loop at most once. It calls the function _<I>Isdst</I> only if it needs to determine whether to loop. Even then, it loops only if _<I>Isdst</I> concludes that Daylight Savings Time is in effect.<P>
<A href="list3.htm">Listing 3</a>
shows the file <I>xisdst.c.</I> The function _<I>Isdst</I> determines the status of Daylight Savings Time (DST). <I>_Times._Isdst</I> points at a string that spells out the rules. (I'11 show the file <I>asctime.c</I> next month. It contains the definition of <I>_Times</I>.)<P>
<I>_Isdst</I> works with the rules in encoded form. Those rules are not current the first time you call the function or if a change of locale alters the last encoded version of the string <I>_Times._Isdst</I>. If that string is empty, <I>_Isdst</I> looks for rules appended to the time-zone information <I>_Times._Tzone</I>. It calls <I>_Getzone</I> as necessary to obtain the time-zone information. It calls <I>_Gettime</I> to locate the start of any rules for DST. The function <I>_Getdst</I> then encodes the current array of rules, if that is possible.<P>
Given an encoded array of rules, <I>_Isdst</I> scans the array for rules that cover the relevant year. It adjusts the day specified by the rule for any weekday constraint, then compares the rule time against the time that it is testing. Note that the first rule for a given starting year begins <I>not</I> in DST. Successive rules for the same year go in and out of DST.<P>
<A href="list4.htm">Listing 4</a>
shows the file <I>xgetdst.c</I>. It defines the function <I>_Getdst</I> that parses the string pointed to by <I>_Times._Isdst</I> to construct the array of rules. The first character of a (non-empty) string serves as a field delimiter, just as with other strings that provide locale-specific time information. The function first counts these delimiters so that it can allocate the array. It then passes over the string once more to parse and check the individual fields.<P>
<I>_Getdst</I> calls the internal function <I>getint</I> to convert the integer subfields in a rule. No overflow checks occur because none of the fields can be large enough to cause overflow. The logic here and in <I>_Getdst</I> proper is tedious but straightforward.<P>
<h4><FONT COLOR="#000080"><A name="009F_0047">Local Time<A name="009F_0047"></FONT></h4></P>
<A href="list5.htm">Listing 5</a>
shows the file <I>localtim.c.</I> The function <I>localtime</I> calls <I>_Ttotm</I> much like <I>gmtime</I>. Here, however, <I>localtime</I> assumes that it must convert a UTC time to a local time. To do so, the function must determine the time difference, in seconds, between UTC and the local time zone.<P>
The file <I>localtim.c</I> also defines the function <I>_Tzoff</I> that endeavors to determine this time difference (<I>tzoff</I>, in minutes). The time difference is not current the first time you call the function or if a change of locale alters the last encoded version of the string <I>_Times._Tzone</I>. If that string is empty, <I>_Tzoff</I> calls the function <I>_Getzone</I> to determine the time difference from environment variables, if that is possible.<P>
However obtained, the string <I>_Times._Tzone</I> takes the form <I>:EST:EDT:+0300. _Tzoff</I>S calls the function <I>_Gettime</I> to determine the starting position (<I>p</I>) and length (<I>n</I>) of the third field (#2, counting from zero). The function <I>strtol</I>, declared in <I>&lt;stdlib.h&gt;</I> must parse this field completely in converting it to an encoded integer. Moreover, the magnitude must not be completely insane. (The maximum magnitude is greater than 12*60 because funny time zones exist on either side of the International Date Line.)<P>
<A href="list6.htm">Listing 6</a>
shows the file <I>xgettime.c</I>. It defines the function <I>_Gettime</I> that locates a field in a string that specifies locale-specific time information. See the description of <I>_Getdst</I>, above, for how <I>_Gettime</I> interprets field delimiters. If <I>_Gettime</I> cannot find the requested field, it returns a pointer to an empty string.<P>
<A href="list7.htm">Listing 7</a>
shows the file <I>xgetzone.c.</I> The function<I>_Getzone</I> calls <I>getenv</I>, declared in <I>&lt;stdlib.h&gt;</I>, to determine the value of the environment variable <I>"TIMEZONE"</I>. That value should have the same format as the locale-specific time string <I>_Times. _Tzone</I>, described above (possibly with rules for determining Daylight Savings Time bolted on).<P>
If no value exists for <I>"TIMEZONE"</I>, the function <I>_Getzone</I> then looks for the environment variable <I>"TZ"</I>. That value should match the UNIX format <I>ESTO5EDT</I>. The internal function <I>reformat</I> uses the value of <I>"TZ"</I> to develop the preferred form in its static buffer.<P>
If <I>_Getzone</I> finds neither of these environment variables, it assumes that the local time zone is UTC. In any event, it stores its decision in the static internal buffer <I>tzone</I>. Subsequent calls to the function return this remembered value. Thus, the environment variables are queried at most once, the first time that <I>_Getzone</I> is called.<P>
<h4><FONT COLOR="#000080"><A name="009F_0048">Converting to Scalar Time<A name="009F_0048"></FONT></h4></P>
<A href="list8.htm">Listing 8</a>
shows the file <I>mktime.c</I>. The function <I>mktime</I> computes an integer <I>time_t</I> from a broken-down time <I>struct tm</I>. It takes extreme pains to avoid overflow in doing so. (The function is obliged to return the value --1 if the time cannot be properly represented.)<P>
The first part of <I>mktime</I> determines a year and month. If they can be represented as type <I>int</I>, the function calls<I>_Daysto</I> to correct for leap days since 1900. <I>mktime</I> then accumulates the time in seconds as type <I>double</I>, to minimize further fretting about integer overflow. If the final value is representable as type <I>time_t</I>, the function converts it to that type. <I>mktime</I> calls <I>_Ttotm</I> to put the broken-down time in canonical form. Finally, the function corrects the time in seconds for Daylight Savings Time and converts it from local time to UTC. (The resultant code reads <I>much </I>easier than it wrote.)<P>
<h4><FONT COLOR="#000080"><A name="009F_0049">Conclusion<A name="009F_0049"></FONT></h4></P>
Next month, I conclude my discussion of the time functions. I also conclude my guided tour of the Standard C library. The trip is almost over.<P>
<I>This article is excerpted in part from P.J. Plauger, </I>The Standard C Library,<I> (Englewood Cliffs, N.J.: Prentice-Hall, 1992).</I><P>

<h4><a href="../../../source/1993/feb93/plauger.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
