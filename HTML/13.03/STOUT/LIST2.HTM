<HTML><HEAD>
<TITLE>March 1995/"Olympic" Filtering for Noisy Data/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2 <I>Circular buffer C functions</A></I></h4>
<pre>#include &lt;stdlib.h&gt;
#include &lt;limits.h&gt;
#include "circbuf.h"

/**********************************************************************/
/*                                                                    */
/* cbuf_malloc() - Function to allocate a circular buffer on the heap.*/
/*                                                                    */
/* Arguments: 1 - Size of buffer.                                     */
/*                                                                    */
/* Returns: Pointer to buffer struct or NULL upon failure.            */
/*                                                                    */
/**********************************************************************/

CBUF *cbuf_malloc(CSIZE size)
{
     CBUF *ptr;

     if (NULL != (ptr = calloc(sizeof(CBUF) + (size * sizeof(short)), 1)))
     {
          ptr-&gt;buf = (short *)((char *)ptr + sizeof(CBUF));
          ptr-&gt;len = size;
          return ptr;
     }
     else return NULL;
}

/**********************************************************************/
/*                                                                    */
/*  cbuf_add() - Function to add data to a circular buffer.           */
/*                                                                    */
/*  Arguments: 1 - Pointer to circular buffer  struct.                */
/*             2 - Data to add.                                       */
/*                                                                    */
/*  Returns: TRUE if buffer has been filled, else FALSE.              */
/*                                                                    */
/**********************************************************************/

LOGICAL cbuf_add(CBUF *cbuf, short data)
{
     cbuf-&gt;buf[cbuf-&gt;next]= data;
     if (cbuf-&gt;len &lt;= ++(cbuf-&gt;next))
     {
          cbuf-&gt;next = 0;
          cbuf-&gt;full = TRUE;
     }
     return cbuf-&gt;full;
}

/**********************************************************************/
/*                                                                    */
/*  OlympicFilt() - Function to perform an "Olympic" filter on the    */
/*                  data in a circular buffer.                        */
/*                                                                    */
/*  Arguments: 1 - Pointer to circular buffer struct.                 */
/*                                                                    */
/*  Returns: TRUE if buffer has been filled, else FALSE.              */
/*                                                                    */
/**********************************************************************/

int OlympicFilt(CBUF * cbuf)
{
     size_t i;
     long accum;
     short cmin = SHRT_MAX, cmax = SHRT_MIN;
     short obuf[CSIZ_HUGE * sizeof(short)];


     /*
     **  The buffer may be subject to asynchronous modification,
     **  so take a snapshot of it.
     */

     memcpy(obuf, cbuf-&gt;buf, cbuf-&gt;len * sizeof(short));

     for (i = 0, accum = 0L; i &lt; cbuf-&gt;len; ++i)
     {
          accum += obuf<I>;</I>
          cmin   = MIN(obuf[i], cmin);
          cmax   = MAX(obuf[i], cmax);
     }
     accum -= cmin;
     accum -= cmax;
     switch (cbuf-&gt;len)
     {
     case CSIZ_TINY:
          return (short)(accum &gt;&gt; 1);

     case CSIZ_SMALL:
          return (short)(accum &gt;&gt; 2);

     case CSIZ_MEDIUM:
          return (short)(accum &gt;&gt; 3);

     case CSIZ_LARGE:
          return (short)(accum &gt;&gt; 4);

     case CSIZ_HUGE:
          return (short)(accum &gt;&gt; 5);

     default:
          return(short)(accum / (cbuf-&gt;len - 2));
     }
}

/**********************************************************************/
/*                                                                    */
/*  AverageFlit() - Function to filter the data in a circular buffer  */
/*                  by simple averaging.                              */
/*                                                                    */
/*  Arguments: 1 - Pointer to circular buffer struct.                 */
/*                                                                    */
/*  Returns: TRUE if buffer has been filled, else FALSE.              */
/*                                                                    */
/**********************************************************************/

short AverageFilt(CBUF * cbuf)
{
     size_t i;
     long accum;
     short obuf[CSIZ_HUGE * sizeof(short)];

     /*
     **  The buffer may be subject to asynchronous modification,
     **  so take a snapshot of it.
     */

     memcpy(obuf, cbuf-&gt;buf, cbuf-&gt;len * sizeof(short));

     for (i = 0, accum = 0L; i &lt; cbuf-&gt;len; ++i)
          accum += obuf[i];

     return(short)(accum / (cbuf-&gt;len));
}

#ifdef TEST

#include &lt;stdio.h&gt;

int main(int argc, char *argv[])
{
     int i, n;
     CBUF *cbuf = cbuf_malloc(CSIZ_SMALL);

     while (--argc)
     {
          n = atoi(*++argv);
          printf("Adding %d returned %d\n", n, cbuf_add(cbuf, n));
     }
     printf("\nOlympic average is %d\n", OlympicFilt(cbuf));
     printf("\nStraight average is %d\n", AverageFilt(cbuf));
     return EXIT_SUCCESS;
}

#endif

/* End of File */</pre>

</BODY>
</HTML>
