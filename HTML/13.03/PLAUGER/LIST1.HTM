<HTML><HEAD>
<TITLE>March 1995/Standard C/C++/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1 <I>The header</I> &lt;sstream&gt;</A></h4>
<pre>// sstream standard header
#ifndef _SSTREAM_
#define _SSTREAM_
#include &lt;string&gt;
#include &lt;strstream&gt;
      // class stringbuf
class stringbuf : public strstreambuf {
public:
   stringbuf(ios::openmode _W = ios::in | ios::out)
      : strstreambuf(0, 0, 0, _Mode(_W)) {}
   stringbuf(const string&amp; _S,
      ios::openmode_W = ios::in | ios::out)
      : strstreambuf((char*)_S.c_str( ,_S.length(), 0,
         _Mode(_W)) {}
   virtual ~stringbuf();
   string str() const;
   void str(const string&amp; _S);
protected:
   _Strstate _Mode(ios::openmode);
   };
      // class istrstream
class istringstream : public istream {
public:
   istringstream(openmode _W = in)
      : istream(&amp;_Sb), _Sb(_W) {}
   istringstream(const string&amp;_S, openmode _W = in)
      : istream(&amp;_Sb), _Sb(_S, _W) {}
   virtual ~istringstream();
   stringbuf *rdbuf() const
      {return ((stringbuf *)&amp;_Sb); }
   string str() const
      {return (_Sb.str()); }
   void str(const string&amp; _S)
      {_Sb.str(_S); }
private:
   stringbuf _Sb;
   };
      // class ostrstream
class ostringstream: public ostream {
public:
   ostringstream(openmode_W = out)
      : ostream(&amp;_Sb), _Sb(_W) {}
   ostringstream(const string&amp; _S, openmode _W = out)
      : ostream(&amp;_Sb), _Sb(_S, _W) {}
   virtual ~ostringstream();
   stringbuf *rdbuf() const
      {return ((stringbuf *)&amp;_Sb); }
   string str() const
      {return (_Sb.str());)
   void str(const string&amp; _S)
      {_Sb.str(_S); }
private:
   stringbuf _Sb;
   };
#endif /* _SSTREAM_ */
</pre>
</BODY>
</HTML>
