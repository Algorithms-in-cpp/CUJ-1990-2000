

<HTML>
<HEAD>

<TITLE>March 1995/Standard C/C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmar.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Standard C/C++<A name="0068_003B"><A name="0068_003B"></font></h2><P>
<h3 align="center"><A name="0068_0000"><A name="0068_0000">The Header &lt;sstream&gt;</h3><P>
<h3 align="center"><font color="#800000">P.J. Plauger</font></h3><hr><blockquote><P>
<P><i><A name="0068_0000"><A name="0068_0000">P.J. Plauger is senior editor of C/C++ Users Journal. He is convener of the ISO C standards committee, WG14, and active on the C++ committee, WG21. His latest books are The Draft Standard C++ Library, and Programming on Purpose (three volumes), all published by Prentice-Hall. You can reach him at pjp@lauger.com.</i></P><P>
<h4><FONT COLOR="#000080"><A name="0068_003C">Introduction<A name="0068_003C"></FONT></h4></P>
The header <I>&lt;sstream&gt;</I> is a variation on the header <I>(strstream&gt;</I>, which I have described in the previous two installments of this column. (See "Standard C/C++: The Header <I>&lt;strstream&gt;</I>," <I>CUJ</I>, January 1995, and "Standard C/C++: Implementing <I>&lt;strstream&gt;</I>," <I>CUJ</I>, February 1995.) It is designed to work more closely with class string. A string object controls an in-memory character sequence, supporting operations on the sequence such as assignment, concatenation, comparison, and searching.<P>
Like <I>&lt;strstream&gt;, &lt;sstream)</I> defines three classes that cooperate to help you read and write character sequences stored in memory:<P>
<UL><li><I>     stringbuf</I>, derived from <I>streambuf</I> to mediate access to an in-memory character sequence and grow it on demand (yes, the name should be <I>stringstreambuf</I> for greater uniformity)</li>
<li><I>istringstream</I>, derived from <I>istream</I> to construct a <I>stringbuf</I> object with input and/or output streams and to assist in extracting from the stream</li>
<li><I>ostringstream</I>, derived from <I>ostream</I> to construct a <I>stringbuf</I> object with input and/or output streams and to assist in inserting into the stream</li></UL>
If these classes sound suspiciously like the classes defined in the header <I>&lt;strstream)</I>, that is hardly an accident. A <I>stringbuf</I> object supports much the same control over input and output streams as does a <I>strstreambuf</I> object. There are just a few added capabilities:<P>
<UL><li>You can initialize the character sequence controlled by a <I>stringbuf</I> from the character sequence controlled by a <I>string</I>, when the <I>stringbuf</I> is constructed or repeatedly thereafter.</li>
<li>You can initialize the character sequence controlled by a newly constructed <I>string</I> object from the character sequence controlled by a <I>stringbuf</I>.</li>
<li>You can specify independently, when a <I>stringbuf</I> is constructed, whether the input stream is readable or the output stream is writable.</li></UL>
Unlike a <I>strstreambuf</I> object, however, a <I>stringbuf</I> object does <I>not</I> let you muck with a character sequence that is also controlled by a <I>string</I> object. It simply facilitates copying between two representations private to each object.<P>
The classes <I>istringstream</I> and <I>ostringstream</I> behave much like <I>istrstream</I> and <I>ostrstream</I>. They construct a <I>stringbuf</I> object for you. They also provide member functions that access the special features of a <I>stringbuf</I> object. In this case, that mostly involves copying to and from <I>string</I> objects, as described above.<P>
A few subtle differences exist between class <I>stringbuf</I> and class <I>strstreambuf</I>. If an object of the latter class defines an output sequence, it always defines an input sequence as well. But that is not always true for an object of class <I>stringbuf</I>. Otherwise, the two kinds of stream buffers are more alike than different.<P>
<h4><FONT COLOR="#000080"><A name="0068_003D">Recent Changes<A name="0068_003D"></FONT></h4></P>
As I emphasized last month, the code I present here is based on the draft C++ Standard as of March 1994. Despite the many changes that have occurred in the past year, the functionality of the classes defined in <I>&lt;sstream)</I> is essentially unchanged &#151; at least for the <I>char</I>-based streams we all know and love. But many headers have now been "templatized." In particular, iostreams operations are now mostly defined for an arbitrary "character" type <I>T</I>.<P>
To reproduce the existing functionality, the library instantiates these general templates for <I>T</I> defined as type <I>char.</I> The net result is much the same, but the machinery &#151; and the notation &#151; is now far more elaborate. I prefer to show the behavior of iostreams for the more familiar <I>char</I>-based streams.<P>
The library also instantiates these templates for <I>T</I> defined as type <I>wchar_t</I>. If you want to manipulate wide-character strings, that can be invaluable, but such usage is still relatively rare. Even more rare is the use of iostreams based on arbitrary characters of type <I>T</I>. (As far as I know, such usage is nonexistent.) It will be interesting to see how useful such generality will prove in future practice.<P>
I also reported last month that the header <I>&lt;strstream)</I> has been exempted from the templatizing treatment. The committee is staking the future on <I>&lt;sstream&gt;</I>, which does much the same thing as <I>&lt;strstream)</I> but works with templatized strings of arbitrary character types. The older header &lt;<I>strstream&gt;</I> is retained mostly in the interest of preserving existing code.<P>
Finally, I note that the member function name <I>str</I> has already been changed in class <I>string</I> since March 1994. It is now <I>data.</I> That cleanup has yet to extend to the classes defined in <I>&lt;sstream&gt;</I>, but it might.<P>
<h4><FONT COLOR="#000080"><A name="0068_003E">Using <B><I>&lt;sstream&gt;</I><A name="0068_003E"></B></FONT></h4></P>
You include the header <I>&lt;sstream&gt;</I> to make use of any of the classes <I>istringstream ostringstream</I> or <I>stringbuf</I>. Objects of these classes let you read and write in-memory character sequences just as if they were conventional files, and copy character sequences. You can choose among three patterns of access:<P>
<UL><li>read only</li>
<li>write only</li>
<li>read/write</li></UL>
I deal with each of these options in turn. For a discussion of stream-positioning operations on in-memory character sequences, see the January 1995 installment. The issues are essentially the same.<P>
If all you want to do is read an inmemory character sequence that is initialized from a <I>string</I> object, construct an object of class <I>istringstream</I>. If you know at construction time what string object <I>s</I> you wish to use, you can write:<P>
<pre>istringstream strin(s);</pre>
The resultant stream buffer (pointed at by <I>strin.rdbuf())</I> does not support insertions. You can, however, replace the character sequence completely from another <I>string</I> object <I>s2</I> with the call:<P>
<pre>strin.str(s2);</pre>
The stream position is reset to the beginning of the stream. (And the resultant stream buffer <I>still</I> does not support insertions.)<P>
You can also construct an <I>istringstream</I> object with an empty character sequence, using the default constructor. Presumably, you would later supply a non-empty character sequence, as in:<P>
<pre>istringstream strin;
strin.str(s);</pre>
If all you want to do is create an in-memory character sequence to be eventually copied to a <I>string</I> object, construct an object of class <I>ostringstream</I> to control insertions into it. You can write:<P>
<pre>ostringstream strout;</pre>
then insert into <I>strout</I> just like any other output stream. The character sequence can grow dynamically to arbitrary length. (The actual limit is usually <I>INT_MAX</I>, defined in <I>&lt;limits.h&gt;</I>, or when a storage allocation request fails.) The resultant stream buffer (pointed at by <I>strout. rdbuf())</I> does not support extractions, by the way.<P>
Your goal in creating a write-only character sequence is to capture the final result in a <I>string</I> object, as a rule. Write <I>s = strout.str()</I> to construct a <I>string</I> object, initialize it to control a copy of the character sequence, and assign it to the string object <I>s</I>. The two character sequences can, of course, evolve separately thereafter.<P>
If you want a null-terminated string, there is no real need to insert a null character last. It will <I>not</I> be supplied for you when you call <I>s = strout.str()</I>, as above. On the other hand, you must then call <I>s.c_str()</I> to get a pointer to the beginning of the character sequence. That call <I>will</I> supply a terminating null character.<P>
If you want to create an in-memory character sequence that you can read as well as write, you need two objects to control the input and output streams. The classes <I>istringstream</I> and <I>ostringstream</I> are highly symmetric. Thus, you have three equally valid ways to do the job. If you don't want to supply an initial character sequence, you can write:<P>
<pre>istringstream istr(ios::in | ios::out);
ostream ostr(istr. rdbuf());</pre>
or:<P>
<pre>ostringstream ostr(ios::in | ios::out);
istream istr(ostr. rdbuf());</pre>
or:<P>
<pre>stringbuf sb(ios::in | ios::out);
istream istr(&amp;sb);
ostream ostr(&amp;sb);</pre>
All approaches cause <I>istr</I> to control the input stream and <I>ostr</I> to control the output stream.<P>
You can also supply an initial character sequence from a <I>string</I> object <I>s</I> in each of these three cases:<P>
<pre>istringstream istr(s, ios::in | ios::out);
ostream ostr(istr. rdbuf( ) );</pre>
or:<P>
<pre>ostringstream ostr(s, ios::in | ios::out);
istream istr(ostr. rdbuf() );</pre>
or:<P>
<pre>stringbuf sb(s, ios::in | ios::out);
istream istr(&amp;sb);
ostream ostr(&amp;sb);</pre>
Note that both the input and output stream positions are initially at the beginning of the character sequence. That may not be what you intend. Always consider whether you want to alter the output stream position before you do anything else with such a read/write stream.<P>
<h4><FONT COLOR="#000080"><A name="0068_003F">Implementing <B><I>&lt;sstream&gt;</I><A name="0068_003F"></B></FONT></h4></P>
<A href="list1.htm">Listing 1</a>
shows the file <I>sstream</I>, which implements the standard header <I>&lt;sstream&gt;.</I> It defines the classes <I>stringbuf</I>, <I>istringstream</I>, and <I>ostringstream</I>. Note that class <I>stringbuf</I> is based on class <I>strstreambuf,</I> which I described last month. The draft C++ Standard says that <I>stringbuf</I> is derived directly from <I>streambuf</I>. Such indirect derivation is permitted by the library "front matter."<P>
I chose this implementation, as I hinted last month, because the two derived classes are so much alike. I added a bit of logic to class <I>strstreambuf</I> to close the gap:<P>
<UL><li>I added the element <I>_Noread</I> to the type <I>strstreambuf</I> ::<I>_Strmode</I>, to note when a <I>stringbuf</I> object does not support extractions.</li>
<li>The member function <I>strstreambuf::_Init</I> has a default fourth argument, of type <I>strstreambuf::_Strmode</I>, to communicate extra mode information from a <I>stringbuf</I> constructor.</li>
<li>The member function <I>strstreambuf::_Tidy</I> is a separate function, even though it is called only by the destructor for <I>strstreambuf</I>, It thus can also be called, to advantage, by <I>stringbuf::str(const string&amp;)</I>.</li></UL>
I also added to class <I>stringbuf</I> the secret protected member function <I>_Mode</I>. It maps constructor arguments of type <I>ios::openmode</I> to their corresponding <I>strstreambuf::_Strmode</I> values:<P>
<UL><li>If <I>ios::in</I> is not set, the function sets<I>_Strmode::_Noread</I> in the return value.</li>
<li>If <I>ios::out</I> is not set, the function sets <I>_Strmode::_Constant</I> in the return value.</li></UL>
The effect of all this groundwork is to dramatically reduce the amount of new code required to implement the classes defined in <I>&lt;sstream&gt;</I>.<P>
<A href="list2.htm">Listing 2</a>
shows the file <I>stringbu. c</I>, which defines the two functions required for practically any use of class <I>stringbuf</I>. These are the destructor and the member function <I>stringbuf::_Mode</I>. Class <I>stringbuf</I> has only two additional member functions not defined inline, the two flavors of <I>str</I>.<P>
<A href="list3.htm">Listing 3</a>
shows the file <I>strbstr0. c</I>, which defines the member function <I>stringbuf::str()</I>. If an input stream exists, the complexity lies in determining the current extent of the character sequence. The calculation is reminiscent of the logic for updating the <I>strstreambuf</I> member object <I>_Seekhigh</I>. (See last month.)<P>
<A href="list4.htm">Listing 4</a>
shows the file <I>strbstr1.c</I>, which defines the member function <I>stringbuf::str(const string&amp;)</I>. It discards any existing character sequence and reinitializes the stream buffer to control a copy of the new one. The <I>strstreambuf</I> secret member functions really pay off here.<P>
The remaining source files implement the other two classes defined in <I>&lt;sstream&gt;</I>.<P>
<A href="list5.htm">Listing 5</a>
shows the file <I>istrings. c</I>, which defines the destructor for class <I>istringstream</I>. And <A href="list6.htm">Listing 6</a>
shows the file <I>ostrings. c</I>, which defines the destructor for class <I>ostringstream</I>. The header supplies inline definitions for all other member functions in these two classes.<P>
<h4><FONT COLOR="#000080"><A name="0068_0040">Testing &lt;sstream&gt;<B><A name="0068_0040"></B></FONT></h4></P>
<A href="list7.htm">Listing 7</a>
shows the file <I>tsstream. c</I>. It tests the basic properties of the classes defined in <I>&lt;sstream&gt;</I>. It does so in three groups:<P>
<UL><li>stringbuf objects <I>(t1())</I></li>
<li><I>istringstream</I> objects <I>(t2())</I></li>
<li><I>ostringstream</I> objects <I>(t3())</I></li></UL>
The function <I>main()</I> simply performs these groups of tests in the order shown. If all goes well, the program prints:<P>
<pre>SUCCESS testing &lt;sstream&gt;</pre>
and takes a normal exit.<P>
<I>This article is excerpted in part from P.J. Plauger, </I>The Draft Standard C++ Library<I>, (Englewood Cliffs, N.J.: Prentice-Hall, 1995).</I><P>

<h4><a href="../../../source/1995/mar95/pjp.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
