

<HTML>
<HEAD>

<TITLE>March 1995/Stepping Up To C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmar.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Stepping Up To C++<A name="0071_003F"><A name="0071_003F"></font></h2><P>
<h3 align="center"><A name="0071_0000"><A name="0071_0000">More Minor Enhancements as of CD Registration</h3><P>
<h3 align="center"><font color="#800000">Dan Saks</font></h3><hr><blockquote><P>
<P><i><A name="0071_0000"><A name="0071_0000">Dan Saks is the president of Saks &amp; Associates, which offers consulting and training in C++ and C. He is secretary of the ANSI and ISO C++ committees. Dan is coauthor of C++ Programming Guidelines, and codeveloper of the Plum Hall Validation Suite for C++ (both with Thomas Plum). You can reach him at 393 Leander Dr., Springfield OH, 45504-4906, by phone at (513)324-3601, or electronically at dsaks@wittenberg.edu.</i></P><P>
For the past two months I've been listing ways that the programming language described by the C++ draft standard (as of Fall, 1994) differs from the language described in the ARM <a href="#1">[1]</a>. Two months ago, I described the <I>major extensions:</I><P>
<UL><li>Templates</li>
<li>Exception handling</li>
<li>Run-time type information (including <I>dynamic_cast</I>)</li>
<li>Namespaces</li></UL>
(See "Stepping Up to C++: C++ at CD Registration," <I>CUJ</I>, January 1995.) Last month, I started describing the <I>minor enhancements</I>, and managed to cover the following:<P>
<UL><li>New keywords and digraphs for C++ as alternate ISO646-compliant spellings for existing tokens</li>
<li>Operator overloading on enumerations</li>
<li><I>operator new[]</I> and <I>operator delete[]</I></li>
<li>Relaxed restrictions on the return type of virtual functions</li>
<li><I>wchar_t</I> as a keyword representing a distinct type</li>
<li>A built-in Boolean type</li>
<li>Declarations in conditional expressions</li></UL>
This month, I continue by describing a few more of the remaining minor enhancements.<P>
<h4><FONT COLOR="#000080"><A name="0071_0040">New cast notation<A name="0071_0040"></FONT></h4></P>
The extensions to support RTTI (run-time type information) included a new type conversion operator called <I>dynamic_cast</I>. An expression such as<P>
<pre>dynamic_cast&lt;T *&gt;(p)</pre>
yields the result of casting (converting) pointer <I>p</I> to type <I>T</I> *. If <I>p</I> points to a <I>T</I> object, the result is <I>p</I>. If <I>p</I> points to an object of a type <I>D</I> derived from <I>T</I>, then the result is a pointer to the unique <I>T</I> sub-object of the <I>D</I> object addressed by <I>p</I>. (In fact, these conversions do not even require a cast.) Otherwise, <I>p</I> must point to an object of a polymorphic type (a type with at least one virtual function), in which case the resulting program performs a run-time check.<P>
The run-time check is this: If <I>p</I> points to a base class sub-object of a <I>T</I> object, the result is a pointer to that <I>T</I> object; otherwise, it yields a null pointer. (This description of the run-time check is over-simplified, but it covers the most common and useful cases, namely public inheritance from a single direct base class.) <A href="list1.htm">Listing 1</a>
shows an example of this sort of conversion, commonly called a <I>downcast</I>.<P>
<I>dynamic_cast</I> can also perform reference conversions. An expression such as<P>
<pre>dynamic_cast&lt;T &amp;&gt;(r)</pre>
converts reference <I>r</I> to type <I>T &amp;</I>. The rules for <I>dynamic_cast</I> applied to references parallel the rules when applied to pointers, except that a reference conversion throws an exception, rather than return null, when it fails.<P>
The <I>dynamic_cast</I> notation is obviously, and intentionally, different from the "old-style" cast notation, <I>(T)e</I>, which converts expression <I>e</I> to type <I>T</I>. The proponents of RTTI did not want to confuse this new functionality with existing conversions by using the same syntax.<P>
In the course of distinguishing <I>dynamic_cast</I> from the other casts, the C++ standards committees generally agreed with Bjarne Stroustrup that the old-style cast lumps too many different kinds of conversions under a single blanket notation <a href="#2">[2]</a>. Among other things, an old-style cast can do the following:<P>
<UL><li>narrow or widen an arithmetic value,</li>
<li>discard a <I>const</I> or <I>volatile</I> attribute from an expression,</li>
<li>perform implicit address arithmetic while converting <I>B</I> * to <I>D</I> * (where <I>D</I> is derived from <I>B</I>), or</li>
<li>reinterpret the value of an expression of one type as a value with a completely different type.</li></UL>
Stroustrup also argued that the old-style cast notation is too indistinct. Old-style casts are just one of many uses for parentheses in C and C++. These casts are hard for humans to spot in source code, and hard to find using tools like grep.<P>
The standards committees accepted Stroustrup's proposal to add three new cast operators in the mold of <I>dynamic_cast</I>. These casts do not add any new functionality to C++. They simply classify the functionality of old-style casts into three distinct categories:<P>
<UL><li><I>static_cast&lt;T&gt;(e)</I> is for the better-behaved conversions, such as from one arithmetic type to a narrower wider arithmetic type or to an enumeration, from a pointer-to-base (reference- to-base) to pointer-to-derived (reference-to-derived), or from any type to <I>void. static_cast</I> can add, but not remove cv- qualifiers (<I>const</I> and <I>volatile</I>).</li>
<li><I>reinterpret_cast&lt;T&gt;(e)</I> is for the poorly-behaved conversions (those with implementation-dependent behavior), such as converting from an integral type to a pointer or vice versa, to or from a pointer to an incomplete type, or from one pointer-to-function type to another.</li>
<li><I>const_cast&lt;T&gt;(e)</I> is for converting a type with cv-qualifiers to a type with fewer cv-qualifiers.</li></UL>
For compatibility with C and existing C++ code, the committees did not remove, nor even deprecate, the old-style casts. (A deprecated feature is one that has fallen into disfavor and may disappear altogether from some future version of the standard.) The new-style casts are just a more explicit alternative notation.<P>
For example, the implementation of the Standard C function <I>bsearch</I> typically involves converting a parameter from <I>const void *</I> to <I>const char *,</I> and returning it as <I>void *</I>. Plauger's implementation <a href="#3">[3]</a> uses an old style cast in the return statement<P>
<pre>return ((void *)q);</pre>
to convert <I>q</I> from <I>const char *</I>to <I>void *</I>. The current C++ view is that this cast actually performs two distinct conversions:<P>
1.     It converts the type from <I>char</I> *to <I>void *</I>.<P>
2.     It removes ("casts-away") a <I>const</I> qualifier. It's not apparent from a casual reading of that return statement that the (<I>void *</I>) cast removes a <I>const</I> qualifier.<P>
Plauger wrote his library in C, so he had no choice about the cast notation, but a C++ programmer can now write the conversion more explicitly using the new style-casts:<P>
<pre>return static_cast&lt;void *&gt;(const_cast&lt;char *&gt;(q));</pre>
Writing the return as<P>
<pre>return static_cast&lt;void *&gt;(q);</pre>
is an error, because <I>static_cast</I> cannot cast-away a <I>const</I> qualifier. Writing<P>
<pre>return const_cast&lt;void *&gt;(q);</pre>
is also an error, because a <I>const_cast</I> can only change the cv-qualification, not the type.<P>
For much more about the new-style casts, see <a href="#2">[2]</a>.<P>
<h4><FONT COLOR="#000080"><A name="0071_0041">Qualified Names in Elaborated-Type-Specifiers<A name="0071_0041"></FONT></h4></P>
C places <I>struct</I>, <I>union</I>, and <I>enum</I> tags in a namespace separate from ordinary identifiers (those that designate functions, objects, typedefs, and enumeration constants). For example, the declaration<P>
<pre>struct X { ... };</pre>
enters <I>X</I> as a struct name in the tag namespace. Because <I>X</I> is a tag, not a type, you cannot write declarations such as<P>
<pre>X *p;</pre>
You must write the declaration as<P>
<pre>struct X *p;</pre>
Some C programmers take advantage of this distinction between tags and ordinary identifiers, and write declarations like<P>
<pre>struct X { ... } X;</pre>
which declares a struct <I>X</I>, and then an object <I>X</I> of type struct <I>X</I>, all in one declaration. Other C programmers, including yours truly, deem this bad practice, preferring to think of tags as type names.<P>
I always equate each tag name to a type name using a typedef. A declaration of the form<P>
<pre>typedef struct X { ... } X;</pre>
often does the trick. Unfortunately, this doesn't introduce the typedef name until after the body of the struct. I prefer writing such declarations in the form:<P>
<pre>typedef struct X X;
struct X { ... };</pre>
C++ treats tags differently from C. In C++, a class name is still a tag name, but it is also a type name. In fact, C++ treats all tags (for classes, structs, unions, and enums) as types. Thus, given<P>
<pre>struct X { ... };</pre>
C++ lets you use <I>X</I> as an ordinary identifier designating a type, as in<P>
<pre>X *p;</pre>
For compatibility with C, C++ still accepts<P>
<pre>struct X *p;</pre>
In C++, the combination of one of the keywords <I>class, struct, union</I> or <I>enum</I>, followed by a tag, is called an <I>elaborated-type-specifier.</I><P>
Again in the name of compatibility with C, C++ tolerates declarations such as<P>
<pre>struct X { ... } X;</pre>
In this case, the object name <I>X</I> hides the type name <I>X</I>, so that subsequent uses of the unelaborated name <I>X</I> refer to the object. However, you can refer to the type name by using its elaborated form <I>struct X</I>, or by using <I>X</I> in a qualified name such as <I>X::m</I> (where <I>m</I> is a member of <I>X</I>).<P>
Now, with this background in mind, consider the declaration in <A href="list2.htm">Listing 2</a>.
 Here, <I>B</I> appears as two different members of <I>A</I>: as a type and as a data member. The data member hides the type, so that outside <I>A</I>, <I>A::B</I> refers to the data member, not the nested type. You can refer to <I>B</I> as a type by using it in a qualified name like <I>A::B::n</I>, because C++ looks up a name followed by <I>::</I> as if that name were a type. But how do you refer to <I>B</I> itself as a type?<P>
For example, given the declaration in <A href="list2.htm">Listing 2</a>,
 a declaration such as<P>
<pre>A::B *pb;</pre>
is an error, because the data member name <I>B</I> hides the type name <I>B</I> in the scope of <I>A</I>. In fact, the ARM provide no notation for referring to <I>A::B</I> as a member type.<P>
The committees rectified this minor problem with a minor grammatical extension to allow a <I>class-key</I> (the keyword <I>class, struct</I>, or <I>union</I>) in an <I>elaborated-type-specifier</I>. For example, you can now write<P>
<pre>struct A::B *pb;</pre>
to declare <I>pb</I> as a pointer to an object of type <I>A::B</I>. Notice that the keyword <I>struct</I> elaborates <I>B</I>, not <I>A</I>. It's already clear that <I>A</I> designates a type in this context because <I>A</I> is followed by <I>::</I>.<P>
This extension also permits the keyword <I>enum</I> in an <I>elaborated-type-specifier</I>. For example,<P>
<pre>enum A::E *pe;</pre>
declares <I>pe</I> as a pointer to an object of enumeration type <I>A::E</I>.<P>
<h4><FONT COLOR="#000080"><A name="0071_0042">Expressions of the form <B><I>a.::B::c </I></B>and <B><I>p-&gt;::B::c</I><A name="0071_0042"></B></FONT></h4></P>
The committees straggled for several years to correct problems in the ARM's specification of scope and name lookup rules. The ARM's rules are incomplete, and at various times imprecise and contradictory. (See "Stepping Up to C++: Looking Up Names," <I>CUJ</I>, August 1993 and "Stepping Up to C++: Rewriting and Reconsidering," <I>CUJ</I>, September 1993.)<P>
One of the last problems in this area was to pin down the precise meaning of expressions of the form <I>x.B::c</I> (or <I>p-&gt;B::c)</I>. <I>B</I> might be as simple as an identifier or as complicated as a template expression. How does a C++ compiler evaluate (look up) <I>B</I> in such expressions? The answer to this question covers more complicated expressions such as <I>x.B::C::d</I>, because once the compiler knows what <I>B</I> denotes, it can easily resolve <I>C</I> and d.<P>
After considering different rules for looking up <I>B</I> in <I>x.B::c</I>, the committee narrowed the choice to two possibilities:<P>
1.     Look up <I>B</I> in the context where it appears (known as the "golf" rule because you "play it where it lies")<P>
2.     Look up <I>B</I> as if it were in the body of a member function of <I>x</I>. That is, look in x's class (and its bases), then look in x's lexically enclosing class (and its bases), and so on out to global scope.<P>
There are arguments in favor of both rules. Suppose you have a class with an inconveniently long name, such as class <I>VeryLongName</I> shown in <A href="list3.htm">Listing 3</a>.
 You can write terser code by defining a shorter alias for the class name, such as:<P>
<pre>typedef VeryLongName VLN;</pre>
When a C++ compiler evaluates<P>
<pre>ap-&gt;VLN::f();</pre>
in function <I>g</I> of <A href="list3.htm">Listing 3</a>,
 it won't find <I>VLN</I> if it only looks in the scope of <I>A</I> (which is the scope of <I>*ap</I>). This is especially true if you rearrange lines <I>// 1</I> and // <I>2</I>, as shown in <A href="list4.htm">Listing 4</a>.
 This aliasing technique only works if C++ applies the golf rule (rule 1).<P>
On the other hand, rule (2) supports different programming techniques that can also be useful. Sometimes, the author of a derived class may wish to provide users access to hidden names in the base class, without requiring that users know the name of the base class. This gives class designers a little more flexibility to change the class hierarchy without forcing the users to also change their code. The example in <A href="list5.htm">Listing 5</a>
illustrates the problem and a solution.<P>
In <A href="list5.htm">Listing 5</a>,
 <I>D::f()</I> hides inherited member <I>B::f()</I>. Normally, the function call in<P>
<pre>void g(D *pd)
   {
   pd-&gt;f();
   ...
   }</pre>
applies <I>D::f()</I> to the <I>D</I> object addressed by <I>pd</I>. Function <I>g</I> could call <I>B::f()</I> with a call such as<P>
<pre>pd-&gt;B::f();</pre>
But this requires that <I>g</I> "know" the base class by name. The alternative (shown in <A href="list5.htm">Listing 5</a>)
 is for <I>D</I> to define<P>
<pre>typedef B inherited;</pre>
as a type member, so that <I>g</I> can call<P>
<pre>pd-&gt;inherited::f();</pre>
Stroustrup <a href="#2">[2]</a> discusses this technique in greater detail. It only works if C++ compilers look up <I>inherited</I> in the scope of the class of <I>*pd</I>, namely <I>D</I>, using rule 2. Looking in the context of the call itself (rule 1) defeats this technique.<P>
The committees never found a convincing case for choosing one lookup rule over the other. Thus they decided that C++ should use both lookup rules, and that the combined result of both lookups should yield only one type. If the lookups yield conflicting results, the expression is ambiguous. The following is a more precise statement.<P>
In a postfix-expression of the form <I>x.B::c</I>, the translator looks for <I>B</I> as a type (looking only for types) in two contexts:<P>
1.     the class scope of <I>x</I> (that is, look up <I>B</I> as if it were a member of <I>x</I>), and<P>
2.     the context in which the entire postfix expression appears (the context in which the translator looked for <I>x</I> itself).<P>
The combined set of types found by (1) and (2) must have exactly one element; that element is the meaning of <I>B</I>. If the translator finds nothing, then it treats <I>B</I> as undeclared. If it finds more than one match, the reference is ambiguous.<P>
There is precedent for this approach to name lookup in other parts of C++. When a C++ translator encounters an expression of the form <I>x @ y</I>, where <I>x</I> is an object of a class type and <I>@</I> is an overloadable operator, it looks for an <I>operator@</I> that satisfies either<P>
<pre>x.operator@(y)</pre>
or<P>
<pre>operator@(x, y)</pre>
The search must find exactly one match. If it finds more the one, the expression is ambiguous.<P>
Now, at long last, I get to explain the extension itself. As part of clarifying the lookup rules, the committee decided to grant C++ programmers a little more control over name lookup for <I>B</I> in <I>x.B::c</I>. The extension allows postfix expressions of the form<P>
<pre>a.::B::c, a.::B::C::d, etc.
p-&gt;::B::c, p-&gt;::B::C::d, etc.</pre>
That is, C++ now allows <I>::</I> after the . or -&gt;. In such expressions, the translator evaluates <I>B</I> as if it appeared at the global scope. There's not much to the extension itself, once you get the background out of the way.<P>
<h4><FONT COLOR="#000080"><A name="0071_0043">Conversion from <B><I>T **</I></B>to <B><I>const T *const *<A name="0071_0043"></B></I></FONT></h4></P>
As a general rule, C++ (like C) allows implicit pointer conversions that increase <I>const</I>-ness, but not conversions that decrease <I>const</I>-ness. For example, given<P>
<pre>char *strcpy(char *s1, const char *s2);
char a1[N], a2[N];</pre>
the call<P>
<pre>strcpy(a1, a2);</pre>
successfully converts the expression <I>a2</I> from type <I>char[N]</I> to <I>char *</I>, and then to <I>const char *</I>. On the other hand, given<P>
<pre>const char ca1[] = "asdf";</pre>
the call<P>
<pre>strcpy(ca1, a2);</pre>
is an error because it requires converting <I>ca1</I> from <I>const char[5] to const char *</I> (OK so far), and then to <I>char *</I>. The last conversion is an error because it tries to strip away a <I>const</I> qualifier. For that you would need a cast.<P>
Saying that C++ allows pointer conversions that increase <I>const</I>-ness is an oversimplification. Actually, C++ (like C) forbids certain pointer conversions that appear to increase <I>const</I>-ness. In particular,<P>
<pre>T ** =&gt; const T **</pre>
is not safe, and C++ does not allow it. To see why this is unsafe, let's work our way through a progression of similar conversions. In the following, =&gt; means "implicitly converts to."<P>
It's true that for any type <I>T</I>,<P>
<pre>T * =&gt; const T *          //1a: OK</pre>
safely increases <I>const</I>-ness. This much is clear. You cannot use the result of the conversion to corrupt a constant value. The <I>const</I> and <I>T</I> in //1a can appear in either order, so it's also true that<P>
<pre>T * =&gt; T const *          //1b: OK</pre>
Now, if you replace T in //1b with <I>U</I> <I>*</I>, you get<P>
<pre>U ** =&gt; U *const *        //2: OK</pre>
Since //2 is okay, it appears that<P>
<pre>T ** =&gt; const T **        //3: nope</pre>
should be also, but it isn't. If C++ allowed //3, then you could accidentally change the value of a constant object, as shown by the following example.<P>
C++ cannot accept<P>
<pre>const char c= 'x';
char *pc = &amp;c;            //4: error
*pc = 'y';                //5: OK</pre>
because it would change the value of <I>c</I>, which is supposed to be <I>const</I>. The error is not on //5; <I>pc</I> was declared to point to a non-const char. The error is on //4, because it tries to convert<P>
<pre>const char * =&gt; char *    // no</pre>
which decreases <I>const</I>-ness.<P>
Now, let's extend the example to:<P>
<pre>const char c = 'x';
char *pc;
const char **ppc = &amp;pc;   // 6: ?
*ppc: &amp;c;                 // 7: OK
*pc = 'y';                // 8: OK</pre>
This code also tries to change the value of <I>c</I>, but via a different route. The problem is not on //7, which simply copies one <I>const char*</I> to another. Nor is it on //8, which is the same as //5 in the previous fragment. No, the problem is that //6 opens a hole in the <I>const</I> safety net. If C++ (or C) allowed<P>
<pre>T ** =&gt; const T **        //3</pre>
then it would have to allow //6.<P>
There is, however, a restricted conversion that is safe, namely,<P>
<pre>T ** =&gt; const T *const*  // 9: OK</pre>
This prevents the conversion on line //6 in the previous example. But is it still useful? In his paper proposing this extension, Andrew Koenig of AT&amp;T showed that the conversion is useful with the following example.<P>
Given an array such as<P>
<pre>char *quintet[] =
   {
   "flute", "oboe", "horn", "clarinet",
   "bassoon"
   };</pre>
you can compute the length of the longest string in such an array with a function declared as<P>
<pre>size_t maxlen(char **a, size_t n);</pre>
Unfortunately, this function will not accept<P>
<pre>const char *quartet[] =
   {
   "violin", "violin", "viola", "cello"
   };</pre>
because <I>const char **</I> does not convert to <I>char **</I>. Thus, it appears that you must overload <I>maxlen</I> with another declaration:<P>
<pre>size_t maxlen(const char **a, size_t n);</pre>
(You can't use this latter declaration in place of the original because passing <I>quartet</I> as the first argument requires conversion //3 above, which we already banished.)<P>
However, with the extension to allow the conversion<P>
<pre>T ** =&gt; const T *const *</pre>
you can get by with just one declaration for <I>maxlen,</I> namely,<P>
<pre>size_t maxlen(const char *const *a, size_t n);</pre>
In fact, this one definition even accepts<P>
<pre>const char * const trio[] =
   {
   "washtub", "jaw harp", "kazoo"
   };</pre>
<A href="list6.htm">Listing 6</a>
shows an implementation of this <I>maxlen</I> function that you can use for experiments.<P>
The committees actually approved a more general form of the conversion rule. Here's what the draft says:<P>
A conversion can add type qualifiers at levels other than the first in multi-level pointers, subject to the following rules:<P>
Two pointer types T1 and T2 are <I>similar</I> if there exists a type T and integer n &gt; 0 such that:<P>
<pre>     T1 is T cv1,n * . . . cv1,1 * cv1,0</pre>
and<P>
<pre>     T2 is T cv2,n * . . . cv2,1 * cv2,0</pre>
where each cvi,j is<I> </I><I>const, volatile, const volatile</I>, or nothing.<P>
An expression of type T1 can be converted to type T2 if  and only if the following conditions are satisfied:<P>
<UL><li>the pointer types are similar.</li>
<li>for every j&gt;0, if <I>const</I> is in CV1,j then <I>const</I> is in cv2j, and similarly for <I>volatile</I>.</li>
<li>the cv1,j and cv2,j are different, then <I>const</I> is in every cv2,k for 0&lt;k&lt;j.</li></UL>
This means that the following conversions are also valid:<P>
<pre>T *** =&gt; const T *const *const *
T **** =&gt; const T *const *const * const *</pre>
and so on. So are:<P>
<pre>T *** =&gt; T **const *
T const **** =&gt; T const **const *const *</pre>
and even:<P>
<pre>T** =&gt; T volatile *const volatile *</pre>
I'll describe more of these enhancements next month.<P>
<h4>References</FONT></h4></P>
<a name="1"></a>[1]     Margaret A. Ellis and Bjarne Stroustrup. <I>The Annotated C++ Reference Manual</I> (Addison-Wesley, 1990).<P>
<a name="2"></a>[2]     Bjarne Stroustrup. <I>The Design and Evolution of C</I><I>++</I> Addison-Wesley, 1994).<P>
<a name="3"></a>[3]     P. J. Plauger. <I>The Standard C Library</I> (Prentice Hall, 1992).<P>

<h4><a href="../../../source/1995/mar95/saks.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
