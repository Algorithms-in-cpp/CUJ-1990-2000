

<HTML>
<HEAD>

<TITLE>March 1995/CUG New Releases</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmar.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">CUG New Releases<A name="0075_0043"><A name="0075_0043"></font></h2><P>
<h3 align="center"><A name="0075_0000"><A name="0075_0000">Portable TAR, ED, LPC, and Two Updates</h3><P>
<h3 align="center"><font color="#800000">Victor R. Volkman</font></h3><hr><blockquote><P>
<P><i><A name="0075_0000"><A name="0075_0000">Victor R. Volkman received a BS in Computer Science from Michigan Technological University. He has been a frequent contributor to C/C++ Users Journal since 1987. He is currently employed as Senior Analyst at H.C.I.A. of Ann Arbor, Michigan. He can be reached by dial-in at the HAL 9000 BBS (313) 663-4173 or by Usenet mail to sysop@hal9k.com.</i></P><P>
<h4><FONT COLOR="#000080"><A name="0075_0044">Update to CUG #391: C/C++ Exploration Tools<A name="0075_0044"></FONT></h4></P>
C/C++ Exploration Tools, by Juergen Mueller (Kornwestheim, Germany), includes both his C Function Tree Generator (CFT) and the C Structure Tree Generator (CST). CFT and CST analyze C/C++ source code, from applications of any size, contained in multiple files. CFT and CST are useful for exploring new, unknown software and for supporting reuse, maintenance, and re-engineering. By preprocessing, scanning, and analysing the program source code, these programs generate the function call hierarchy (CFT) and the data structure/class (CST) relations. Both programs can handle C and C++ code; CFT can additionally analyze assembler code. The C Exploration Tools v2.20, as MS-DOS executables (released 03/20/94), are immediately available as CUG volume #391.<P>
Version 2.20 of C Exploration Tools features significant enhancements over the previously released version 2.12. Here are just a few of the changes that Mueller reports:<P>
<UL><li>Microsoft Visual C++ 1.0 for Windows NT preprocessing support</li>
<li>Borland C++ 1.0 for OS/2 preprocessing support</li>
<li>A fix for CFT/CST database read errors that occured if line numbers were not in strictly ascending order inside functions or structures (a possibility if <I>#line</I> directives are used)</li>
<li>A fix for CFT errors that occured with nested C++ constructs such as <I>extern "C" { ... }</I> (this was sometimes the reason for the error message 'unbalanced braces')</li>
<li>Detection and display of multiple file inclusions (of the same include file), with scanned source size and number of lines calculated for multiple inclusions</li>
<li>Support for the _<I>TlMESTAMP</I>_macro in preprocessors</li>
<li>Option -<I>Jcharset</I>, which adds an extended character set for identifier recognition and allows the use of national character sets</li>
<li>Option -//, which accepts C++ comments in C source code to ensure compatibility with Microsoft and Borland C compilers</li>
<li>Option -<I>RATIONAL</I>, which generates a Rational Rose Petal file for callgraph visualisation (see documentation for detailed description!)</li>
<li>A change to option -<I>I</I> that makes -<I>I</I>* ignore missing include files during preprocessing</li>
<li>A new option -<I>o[name]</I> for CFTN and CSTN, which prints output to file 'name'</li>
<li>Different return values for CFTN and CSTN to avoid conflicts with DOS errors (affects BRIEF macros)</li></UL>
<h4><FONT COLOR="#000080"><A name="0075_0045">Update to CUG #363: MC68020 Cross-Assembler<A name="0075_0045"></FONT></h4></P>
Andrew E. Romer (Worthing, West Sussex, England) updates his Motorola MC68020 Cross-Assembler. This update completely replaces the earlier version of his work cataloged as CUG #363. Romer's MC68020 assembler was originally based on Paul McKee's MC68000 assembler (North Carolina State University). The latest version of Romer's assembler fixes a bug causing incorrect generation of S2 records. Thanks to Eric M. Scharf (University of London, EE Dept.) for reporting it.<P>
A cross-assembler is an assembly language translator that runs on a different platform than the one it is assembling for. In this case, the MC68020 cross-assembler runs on an MS-DOS machine (80x86 CPU) but reads assembly language for the MC68020 microprocessor and writes MC68020 object files. Typically, the developer then downloads these object files to the target machine (presumably a Macintosh, Atari, Amiga, or other MC68020 architecture machine).<P>
The cross-assembler supports constants in hexadecimal, binary, octal, and decimal. Constant expressions can use many C-style operators including bitwise operators. The following assembler directives are supported: <I>END, ORG, EQU, SET, REG, DC</I> (define constant), <I>DCB</I> (define constant block), and <I>DS</I> (define storage). The cross-assembler lacks support for native math coprocessor instructions, string constants, and macros. Documentation consists of a 12-page ASCII reference manual.<P>
The MC68020 cross-assembler for MS-DOS will compile under either Microsoft C or Zortech C. Version 1.01 (as released 03/04/94) is immediately available as CUG volume #363.<P>
<h4><FONT COLOR="#000080"><A name="0075_0046">New Acquisitions<A name="0075_0046"></FONT></h4></P>
<UL><li>ED Editor (CUG #424): Multiplatform full screen text editor with windowing, regular expressions, and programming support features. Edits in ASCII, binary, or hexadecimal modes</li>
<li>Portable TAR and LZPIPE (CUG #425): Multiplatform archiving tools that handle files, floppies, and QIC streamer tapes in tar, zip, gzip, or compress formats</li>
<li>LPC-Parcor-Cepstrum code generation for C (CUG #426): Comprehensive libraries for audio data file normalization and manipulation</li></UL>
<h4><FONT COLOR="#000080"><A name="0075_0047">CUG 424: ED Editor<A name="0075_0047"></FONT></h4></P>
Charles Sandmann (Houston, TX) submits the ED editor with a user interface based on the DEC VMS EDT editor. ED is a true multiplatform editor and can be compiled and run on virtually any platform. It includes target-specific code for keyboard, screen, and TCP/IP handling. This design allows ED to run in UNIX (IBM RS/6000, Sun Sparc, HP, NeXT, or Alpha AXP machines), MS-DOS, Windows NT, and OS/2 environments with ease. ED can edit any kind of file in text, binary, or hexadecimal modes.<P>
Some of ED's more interesting features include the following:<P>
<UL><li>Multiple text windows</li>
<li>Built-in file manager</li>
<li>Editing by wildcards</li>
<li>Calculator</li>
<li>Automatic program indentation</li>
<li>Parenthesis matching</li>
<li>Box and columnar editing</li>
<li>Insert and overstrike editing</li>
<li>Sorting</li>
<li>Load/save of files using FTP</li></UL>
The ED documentation consists primarily of a 45-page ASCII help file. You can make this help file from within ED or using any standard text utilities you might have. The documentation assumes that you've had some exposure to the EDT editor that ED emulates or that you are willing to learn the basics.<P>
The CUG Library distribution of ED includes binaries built with the DJGPP edition of GNU C/C++ (MS-DOS with GO32 DOS extender). Also, this two-diskette set provides the full C source. Distribution and use of the ED source code is covered by the GNU General Public License (Version 2). ED version 1.5.7 (as released on 04/05/94) is immediately available as CUG #424.<P>
<h4><FONT COLOR="#000080"><A name="0075_0048">CUG #425A: Portable TAR<A name="0075_0048"></FONT></h4></P>
Timor V. Shaporev (Moscow, Russia) contributes an extremely versatile version of the classic UNIX TAR archiver and an innovative method of delivering LZW compressed data over pipes. Portable TAR works with both MS-DOS and UNIX-compatible machines. Since more than half the source code available from the Internet appears in TAR format, you'll quickly find this a valuable utility. portable TAR reads and writes archives in ordinary files, raw floppies, and QIC-02 streamer tapes. It understands regular TAR formats, PKZIP, gzip, and UNIX compress.<P>
Portable TAR has several other advantages over most public domain TAR programs and those included with UNIX-compatible operating systems:<P>
<UL><li>Uniform processing across both MS-DOS and UNIX platforms</li>
<li>Reading/writing of UNIX-compatible floppies and quarter-inch streamer cartriges under DOS</li>
<li>Support for unusual floppy formats: 80-tracks-by-9-sectors and DEC Rainbow (under DOS)</li>
<li>A data compression option under both DOS and UNIX</li>
<li>System V and/or GNU multivolume archive read capability under DOS and all UNIX clones</li>
<li>An option to restore damaged archives (and plenty of other useful options)</li></UL>
As mentioned earlier, Shaporev claims source compatibility with most UNIX systems and MS-DOS. Specifically, he provides two makefiles that cover most UNIX implementations and another makefile for Borland Turbo C in MS-DOS. As you might expect, a small amount of assembly language code is provided for supporting functionality not normally found in MS-DOS.<P>
The CUG Library distribution of Portable TAR includes binaries built for MS-DOS. Portable TAR version 3.15 (as released on 04/05/94) is immediately available on CUG #425.<P>
<h4><FONT COLOR="#000080"><A name="0075_0049">CUG #425B: LZPIPE<A name="0075_0049"></FONT></h4></P>
Shaporev's other contribution is the LZPIPE library, which implements the two most popular compression methods, LZW and deflate. Both of these methods are defacto lossless compression standards. LZW is used in the well-known compress utility and deflate is used by a number of others, starting from PKZIP by PKWare Inc. up to GNU GZIP.<P>
LZPIPE provides to systems like MS-DOS a programming capability analogous to UNIX pipes. It also allows access to compressed files, and provides a far simpler API than most compression utilities. Specifically, this library processes compressed data in the familiar file handle style of <I>open, read, write</I>, and <I>close</I> calls.<P>
LZIPE implements only pure compression &#151; no attempt is made to emulate ZIP directory services. Thus, you would either use LZPIPE to compress one file at a time or else add the extra functionality for multi-file archiving yourself.<P>
Source codes for LZW compression and decompression are derived from sources of the compress utility initially written by Joe Orost. Source codes for deflate compression and inflate decompression are derived from Info-Zip zip/unzip utilities sources. Inflate was initially written by Mark Adler and deflate originated with Jean-loup Gailly.<P>
The CUG Library distribution of LZIPE includes only C source code. As this is strictly a library, no MS-DOS binaries are included. LZPIPE version 1.01 (as released 04/05/94) is immediately available as part of CUG #425.<P>
<h4><FONT COLOR="#000080"><A name="0075_004A">CUG #426: LPC-Parcor-Cepstrum Code Generator<A name="0075_004A"></FONT></h4></P>
Patrick Ko Shu Pui (Hong Kong) submits his LPC-Parcor-Cepstrum code generator for C. The LPC-Parcor-Cepstrum code generator (hereafter, LPC) will compile on most UNIX platforms as well as under Microsoft C/C++ 7.0 and Borland Turbo C v2.0. This archive's primary use is the manipulation and normalization of audio data files. Specifically, LPC supports eight-bit ulaw (SUN Sparc), eight-bit and 16-bit PCM data. LPC then generates LPC autocorrelation or covariance coefficients, Parcor (partial correlation) coefficients, or LPC cepstrum coefficients.<P>
LPC's implementation draws from algorithms and methods described by Shuzo Saito and Kazuo Nakata in <I>Fundamentals of Speech Signal Processing</I> (1985) and others.<P>
Astute <I>CUJ</I> readers will recall that Patrick Ko also contributed the Small Matrix Toolbox (CUG #403) earlier this year. In fact, the LPC application includes several key components from the Small Matrix Toolbox.<P>
The C source package included in LPC is free for academic purposes only. For commercial usage, you must send a US $30 money order addressed to the author (Patrick Ko). The CUG Library distribution includes full C source and binaries for MS-DOS. LPC version 0.52 (as released 04/16/94) is immediately available as CUG #426.<P>
</BLOCKQUOTE>
</BODY>
</HTML>
