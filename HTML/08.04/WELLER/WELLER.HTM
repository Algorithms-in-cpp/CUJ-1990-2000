


<HTML>
<HEAD>

<TITLE>April 1990/Fast Memory Allocation Scheme</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocapr.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">Fast Memory Allocation Scheme<A name="00D8_006F"><A name="00D8_006F"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="00D8_0000"><A name="00D8_0000">Steve Weller</font></h3><hr><blockquote><P>
<P><i><A name="00D8_0000"><A name="00D8_0000">Steven Weller is president of Windsor Systems, specializing in OS-9, system-level and real-time software, and computer graphics. An electronics engineer from England, Steve has been in software for nine years and has particular interest in parallel computer applications, modern computer languages, operating systems, and the management of technology. He may be contacted at 2407 Lime Kiln Lane, Louisville, KY 40222 (502) 425-9560.</i></P><P>
In applications requiring the dynamic allocation of a large number of small objects, the overhead associated with general-purpose allocation schemes can be large: between 20 and 200 percent of the actual stored data. To minimize this problem I use a layered allocation system in which standard system calls allocate relatively large blocks of memory to a simpler memory management subsystem.<P>
All of the smaller objects belonging to a single data structure (e.g., a tree or linked list) are then "borrowed" (using a low overhead allocation scheme) from one (or a set) of these layer blocks. Unlike generalized allocation routines, the "borrowing" system doesn't attach allocation information to any of the borrowed objects, potentially reducing memory overhead. Moreover, because the entire data structure is freed as a unit, I avoid the overhead of attempting to coalesce adjacent, freed objects (except for the underlying large blocks).<P>
<h4><FONT COLOR="#000080"><A name="00D8_0070">Why Not <B><I>malloc()</I></B>?<A name="00D8_0070"></FONT></h4></P>
<I>malloc()</I> and <I>free()</I> are the most commonly used standard C function calls for memory allocation and deallocation. They are general and easy to use, but inefficient for small amounts of memory, both in terms of storage overhead and speed.</FONT></FONT></FONT></FONT><P>
<I>malloc()</I> collects the requested amount of memory, allocates it, and returns a pointer to the allocated area. On my machine <I>malloc()</I> adds an overhead of eight bytes to every piece of memory allocated. <I>malloc()</I> is also not particularly fast since it must manipulate the links it maintains between allocated blocks each time memory is allocated.</FONT></FONT></FONT></FONT></FONT></FONT><P>
<I>free()</I> deallocates the memory block whose address is passed by undoing <I>malloc()</I>'s links and adding the block to the list of free blocks, merging adjacent blocks if possible. Using <I>free()</I> to deallocate a large number of small blocks is very inefficient.</FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="00D8_0071">Borrowing Memory<A name="00D8_0071"></FONT></h4></P>
Memory borrowing, as I call it, allows the user to obtain memory in small pieces, but return it all in one go. A call to <I>iniz_borrow()</I> sets up the system:</FONT></FONT><P>
<pre>if ((id=iniz_borrow(2000))==0)
     error("Can't get memory\n");</pre>
<I>iniz_borrow()</I> accepts a number which represents the block size to be allocated from the system when memory is required, in this case 2000 bytes. The routine allocates either one block and returns a memory ID, or returns zero indicating that an error has occurred.</FONT></FONT><P>
All subsequent allocations and deallocations use the unique memory ID number. Any number of memory IDs may be created, each with its own allocation size, but all the memory associated with one ID must be returned at the same time. Normally each memory ID is associated with a separate large data structure. Each time memory is needed for a small object within one of these structures, <I>borrow()</I> is called:</FONT></FONT><P>
<pre>if ((new=borrow(id,size))==0)
     error("Can't get memory\n");</pre>
<I>borrow()</I> allocates memory from the block defined by the ID and returns a pointer to it (here assigned to <I>new),</I> or a zero on error. Additional blocks are acquired from the system if necessary.</FONT></FONT></FONT></FONT><P>
Two functions free "borrowed" memory; both return all memory allocated with one ID. <I>return_borrow()</I> returns all but the first block to the system, leaving the memory ID valid and reusable. <I>deiniz_borrow()</I> returns all memory to the system, making the memory ID invalid and unusable.</FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="00D8_0072">The Borrow Functions<A name="00D8_0072"></FONT></h4></P>
<A href="list1.htm">Listing 1</a>
contains the header information and the initialization routine. <I>iniz_borrow()</I> allocates a block of memory and places the allocation information in the <I>MemBlock</I> structure at the start of the block. The routine returns the block's address as the memory ID. As more blocks of memory are required, they will be linked to the first.</FONT></FONT></FONT></FONT><P>
The <I>allocate()</I> routine shown in <A href="list1.htm">Listing 1</a>
can be any allocation routine you have, probably <I>sbrk()</I> or <I>malloc().</I> Your routine must, however, return a zero on failure.</FONT></FONT></FONT></FONT></FONT></FONT><P>
<A href="list2.htm">Listing 2</a>
shows the <I>borrow()</I> routine itself. The requested amount of memory is rounded up to an even number of bytes, keeping the allocated memory addresses on even byte boundaries. This restriction can be dropped if not required, or changed to</FONT></FONT><P>
<pre>need=(need+3)&amp;~3</pre>
or<P>
<pre>need=(need+7)&amp;~7</pre>
to ensure that even word or even long word alignment is maintained.<P>
Next the amount of memory requested is compared with the amount remaining in the current block. If the remaining memory is insufficient, another block is allocated and linked to the current block. <I>borrow()</I> updates the <I>MemBlock</I> structure in the first allocated block to identify the newly allocated block as the current block, and adjusts the offset to allow for a pointer at the start of the new block. It is not necessary for any block other than the first to contain the whole <I>MemBlock</I> structure.</FONT></FONT></FONT></FONT></FONT></FONT><P>
The offset <I>mb_offs</I> identifies the amount of memory that has been allocated in the current block. To satisfy a memory request, the address of the allocated memory is computed (by adding the current block pointer <I>mb_pres</I> to the offset), the offset is incremented (by the amount of memory allocated), and the original memory address returned.</FONT></FONT></FONT></FONT><P>
<A href="list3.htm">Listing 3</a>
shows the deallocation routines. <I>deiniz_borrow()</I> returns all the blocks allocated by the system by running down the allocated list, calling <I>deallocate()</I> as it goes. <I>deallocate()</I> can be any deallocation routine complementary to the allocation routine used in <I>iniz_borrow().</I> It must, as before, return a zero on failure.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<I>return_borrow()</I> is similar to <I>deiniz_borrow()</I> except that it does not return the first block, and hence keeps the memory ID valid. The <I>MemBlock</I> structure at the start of the first block is reset to show an empty first block &#151; the same state that it was left in by <I>iniz_borrow().</I></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="00D8_0073">Block Size<A name="00D8_0073"></FONT></h4></P>
Using a large block size results in fewer allocations and deallocations from system memory, and hence greater speed, but at the expense of greater memory overhead. If the block size is only a few times greater than the memory being allocated by <I>borrow(),</I> then large amounts at the end of each block will remain unused.</FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="00D8_0074">Conclusion<A name="00D8_0074"></FONT></h4></P>
This simple memory allocation system takes advantage of the way that many applications allocate and deallocate memory. It can be tailored to different data structures by grouping memory allocation for each type of structure under separate memory IDs, each with a different block size. The simple allocation mechanism produces a fast and efficient system.<P>

<h4><a href="../../../source/1990/apr90/weller.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
