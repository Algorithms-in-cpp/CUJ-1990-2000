


<HTML>
<HEAD>

<TITLE>April 1990/Dr. C's Pointers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocapr.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Dr. C's Pointers&reg;<A name="00DE_0075"><A name="00DE_0075"></font></h2><P>
<h3 align="center"><A name="00DE_0000"><A name="00DE_0000">Error Handling In C</h3><P>
<h3 align="center"><font color="#800000">Rex Jaeschke</font></h3><hr><blockquote><P>
<P><i><A name="00DE_0000"><A name="00DE_0000">Rex Jaeschke is an independent computer consultant, author and seminar leader. He participates in both ANSI and ISO C Standards meetings and is the editor of The Journal of C Language Translation, a quarterly publication aimed at implementers of C language translation tools. Readers are encouraged to submit column topics and suggestions to Rex at 2051 Swans Neck Way, Reston, VA, 22091 or via UUCP at uunet!aussie!rex.</i></P><P>
Handling errors in programs is easy. You just don't make any! Well, it's not quite that simple since every now and then your programs must deal with input provided by a human, and humans make mistakes. (Who was it that said "Computing would be real fun if it wasn't for users."?)<P>
Certainty, it is possible to validate data before attempting an operation but it's also common to assume that the routine receives valid data, and design the routine to recover if faulty data causes a process to fail. That is, don't pay the price of validation <I>every</I> time, <I>only</I> when invalid data is detected. However, this approach can break down, particularly if it is impossible, difficult, or expensive to recover from certain errors. And the earlier you trap bad data, the more information you will have about its origins and what to do next.<P>
<h4><FONT COLOR="#000080"><A name="00DE_0076">Approaches To Error Handling<A name="00DE_0076"></FONT></h4></P>
Unlike other mainstream languages, most of the things that can fail in a C program are library functions. Since C has no I/O statements, there are no equivalents to <I>END=</I> and <I>ERR=</I> in FORTRAN's <I>READ</I> and <I>WRITE</I> statements. There is also no equivalent to BASIC's <I>ON ERROR GOTO</I>. About the only kind of errors that can be generated in the C language itself are things like arithmetic over- and underflow, memory access violations (either by attempting to dereference a pointer not pointing to an object or function or by a pointer cast to an unaligned type), and stack overflow. All of these are design issues and will not be discussed here.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Since much of the "real" work in C is done via functions, any error information must be communicated between the function detecting the error and that function's caller. This is typically done either by returning an error indicator value or by initializing an error variable passed in by address, or by a combination of both. For example:<P>
<pre>status1 = f(arg);
if (status1 != 0)
    /* handle error */</pre>
Here, the function returns zero on success and a specific error value on failure. In the next case:<P>
<pre>status2 = g(arg, &amp;errorcode);
if (status2 == ERROR)
    /* handle error */</pre>
the function reserves one return value only to indicate an error. The variable <I>errorcode</I> (passed in by address) contains the actual reason if <I>ERROR</I> is returned.</FONT></FONT></FONT></FONT><P>
Unfortunately, none of C's standard library functions uses either of these. (Well certainly not the second approach anyway. You could argue that <I>malloc</I> and friends use the first approach since the only "real" reason they fail is not that enough memory is available, regardless of what they were attempting to do.)</FONT></FONT><P>
C has its own approach; inter-function error communication is done via a global variable, an approach that most structured programmers are strongly warned against for a number of very good reasons. However, that's the way it is so I won't philosophize about it here.<P>
<h4><FONT COLOR="#000080"><A name="00DE_0077"><I>errno</I><B> To The Rescue<A name="00DE_0077"></B></FONT></h4></P>
Of course, the global keeper of the error number is our dear friend <I>errno</I>. Historically, <I>errno</I> has been a global <I>int</I> in every program we've written whether we have used it or not. It's really been like a reserved word in the namespace of external identifiers. And since one of ANSI's jobs is to consolidate existing practice, <I>errno</I> survived the ANSI C standardization process pretty much intact.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
To help get you into the spirit of things, here's an example of using <I>errno</I> (<A href="list1.htm">Listing 1</a>)
.</FONT></FONT><P>
It is the programmer's responsibility to clear <I>errno</I> (a zero value means "no error") each time before calling a function that may set it. No library function is required to clear <I>errno</I> explicitly. You must also test <I>errno</I> or store its value for later testing, immediately after the library function in question returns. If you do not, any other library routine (or user-written routine for that matter) might overwrite <I>errno</I> in the meantime. That is, just because a library function is <I>not</I> documented as setting <I>errno</I>, doesn't mean that it doesn't use it for a scratch variable. Messy, but that's the case.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
In the example above, the first occurrence of <I>errno = 0</I> is unnecessary since at program startup <I>errno</I> is supposed to be cleared.</FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="00DE_0078">ANSI C And <B><I>errno</I><A name="00DE_0078"></B></FONT></h4></P>
The proposed ANSI C Standard pins down a number of things regarding <I>errno</I>. The header <I>errno.h</I> was invented as a home for the definition of <I>errno</I> itself and various macros of the form <I>E</I>* that relate to reporting error conditions. <I>errno</I> is allowed to be either a global <I>int</I> or macro that expands to a modifiable lvalue having type <I>int</I>. That is, it could be a macro that expands to something to like <I>*_ _errno()</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Only two error value macros are defined by ANSI C: <I>EDOM</I> for domain errors and <I>ERANGE</I> for range errors. However, an implementer is permitted to provide their own <I>E</I>* value macros in this header.</FONT></FONT></FONT></FONT></FONT></FONT><P>
The library functions that are documented as setting <I>errno</I> are: <I>acos, asin, cosh, exp, fgetpos, fsetpos, ftell, ldexp, log, log10, perror, pow, signal, sinh, strtod, strtol, </I>and<I> strtoul</I>. Note that <I>fopen</I> (and most other I/O functions) are not included. As such, you cannot portably recover from a file open failure (which is not surprising since there can be many system-specific reasons for such an error).</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The library functions perror and strerror can be used to produce formatted messages corresponding to errno's value. However, the commonly implemented table of messages, sys_list, and its associated machinery are not part of Standard C.<P>
<h4><FONT COLOR="#000080"><A name="00DE_0079">An Error Handling Envelope<A name="00DE_0079"></FONT></h4></P>
Rather than explicitly clear and test <I>errno</I> all the time, it is much more elegant to have an error handling interface inserted between your code and that in the library. Unfortunately, the standard library uses two different ways to return an error a negative <I>int</I> value or a <I>NULL</I> pointer value. You may have to have two interfaces, one to handle each.</FONT></FONT></FONT></FONT></FONT></FONT><P>
Calling an extra function for each math library operation, for example, is an added cost but so too is including the explicit error checking in each place. It's the old speed versus code size tradeoff.<P>
<A href="list2.htm">Listing 2</a>
uses the <I>setjmp/longjmp</I> library mechanism to implement recovery from attempts to take the square root of a negative number.</FONT></FONT><P>
One problem here is the need to explicitly pass the <I>setjmp</I> context into <I>mysqrt </I>&#151; it doesn't really look like a call to <I>sqrt</I>. You could hide this behind a macro:</FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>#define sqrt(d)  sqrt((d), context)</pre>
but you would still need to define context yourself. Since ANSI C permits a macro to expand to its own name without recursive death, all existing calls to sqrt could be redirected in this manner with intermediate error checking being added at the cost of recompilation in the presence of this macro. Perhaps a cleaner approach is to make context a global so it never need be passed in. A word of caution about redefining sqrt though. ANSI C effectively reserves the names of all standard library functions and if you invent something of your own with the same name, the behavior is undefined. However, for a given implementation the macro approach may work.<P>
<h4><FONT COLOR="#000080"><A name="00DE_007A">The matherr Concept<A name="00DE_007A"></FONT></h4></P>
Many systems provide a cleaner way to trap (and also recover from) certain kinds of library errors. The idea originated with UNIX systems but has been widely emulated. It involves a function called <I>matherr</I>. Each library routine that can detect certain errors calls another library routine, <I>matherr</I>. Now this default version of <I>matherr</I> may do nothing or it may simply write an error message to <I>stderr</I>. By writing your own version of <I>matherr</I> and linking to it instead of the library version, you can take control when one of the trapable errors occurs. <A href="list3.htm">Listing 3</a>
shows a primitive version of <I>matherr</I>. In reality you would probably try to recover from the error.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
When <A href="list3.htm">Listing 3</a>
is linked with the first example above, the following output is produced.<P>
<pre>#1 OK
Function sqrt failed with error type DOMAIN
#2 OK</pre>
The reason the second call to <I>sqrt</I> does not show <I>errno</I> set is that <I>matherr</I> returned a non-zero value, indicating that the normal reporting of the error condition should be bypassed (presumably because the error has been "fixed" in the userwritten <I>matherr</I>). With <I>matherr</I> you can bypass or follow the default error handling rules and to a certain extent you can recover from errors and substitute a value that should be returned by the math function instead.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The exception structure has several other members too and the type member values are usually macros or enumeration constants defined in <I>math.h</I> along with the structure template. Check your library manual for more details.</FONT></FONT><P>
Note that <I>matherr</I> is <I>not</I> included in ANSI C.</FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="00DE_007B">Numerical C Extensions Group<A name="00DE_007B"></FONT></h4></P>
This group (abbreviated as NCEG) was formed by me early in 1989. Its purpose is to publish a technical report on directions for adding extensions to Standard C, to support such things as complex arithmetic, IEEE floating-point, vector and parallel operations, and variable dimensioned arrays.<P>
The IEEE floating-point standards deal with a number of interesting things (such as +/-infinity and not-a-number (NaN)) that need to be supported (and taken advantage of) in modern C compilers. According to leading IEEE numerical C implementers, <I>errno</I> gets in their way. Likewise for vendors of C compilers doing parallel operations. As such, <I>errno</I> might well have to be ignored in some implementations, simply for the sake of functionality and/or performance.</FONT></FONT></FONT></FONT><P>
As I write this (mid-December 1989), the ANSI C Standards Committee X3J11 is receiving a letter ballot asking members to admit NCEG as a full working group (tentatively called X3J11.1) within ANSI C. The results of this ballot were 22 for and one against, and will be forwarded to SPARC for their consideration.<P>
Contact me for further information on NCEG.<P>

<h4><a href="../../../source/1990/apr90/jaeschke.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
