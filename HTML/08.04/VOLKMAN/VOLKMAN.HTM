


<HTML>
<HEAD>

<TITLE>April 1990/A Survey Of CUG C Compilers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocapr.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">A Survey Of CUG C Compilers<A name="00DA_0071"><A name="00DA_0071"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="00DA_0000"><A name="00DA_0000">Victor Volkman</font></h3><hr><blockquote><P>
<P><i><A name="00DA_0000"><A name="00DA_0000">Victor R. Volkman received a BS in computer science from Michigan Technological University in 1986. Mr. Volkman is a frequent contributor to The C Users Journal and the C Gazette. He is currently employed as Software Engineer at Cimage Corporation of Ann Arbor, MI. He can be reached at the HAL 9000 BBS, (313) 663-4173, 1200/2400/9600 baud.</i></P><P>
Compiler construction is alternately the most rewarding and most frustrating area of software development. The C Users' Group offers public domain C compilers with source code for both those who study and those who use compilers. These packages have been independently developed by programmers who were often the first to implement the C language on their target machines. Some of these compilers share the ability to compile their own source to build new versions of themselves. All of them share their authors' vision of taking the C language to new frontiers.<P>
<h4><FONT COLOR="#000080"><A name="00DA_0072">A Small History Of The Small C Compiler<A name="00DA_0072"></FONT></h4></P>
Since Ron Cain's introduction of the Small C compiler into the public domain nearly a decade ago, its implementations have spread like wildfire to nearly every popular microprocesor. The C User's Group is fortunate to be able to offer public domain compilers which have been ported to the Z-80, 8080, 6800, 6809, 8086, and 68000 (see <A href="fig1.htm">Figure 1</a>)
.<P>
Ron Cain's Small C Compiler v1.0, which debuted in the May 1980 issue of <I>Dr. Dobb's Journal,</I> was originally a very small subset of the C language. Small C has been a self-compiler since its first implementation. This means that performance improvements in code generation and parsing can be immediately incorporated back into the compiler itself. Small C is a one-pass compiler which generates assembly language from a C input file. The subset of data types which the original Small C recognized consisted only of characters, integers, and one-dimensional arrays of either type. Additionally, the only control statements were <I>while</I> and <I>if</I>. Small C was also restricted to bitwise logical (<I>&amp;</I>, | ) operators since boolean (<I>&amp;&amp;</I>, | | ) operators were not supported.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
In 1982, James E. Hendrix assumed trusteeship of Small C. Hendrix published numerous upgrades through <I>Dr. Dobb's Journal</I> culminating in the release of Small C v2.1 for CP/M in 1984. New features added along the way include code optimization, data initializing, conditional compiling, <I>extern</I> storage, <I>for, while, switch/case,</I> and <I>goto</I> statements, and a plethora of operators. To complete the system, James E. Hendrix and Ernest Payne developed a CP/M compatible version of the UNIX C standard I/O library. The internal design of Small C v2.1 was the subject of Hendrix's <I>The Small C Handbook.</I></FONT></FONT></FONT></FONT></FONT></FONT><P>
The first published 8086 PC-DOS implementation of Small C v2.1 appeared in 1985. Along the way, code optimization techniques were refined even more. The present incarnation from Hendrix, Small C v2.2, is available for 8086 PC-DOS only. Small C v2.2 was released simultaneously with Hendrix's definitive reference work <I>A Small C Compiler: Language, Usage, Theory, and Design</I> in 1988.<P>
<h4><FONT COLOR="#000080"><A name="00DA_0073">CUG C Compilers Based On Small C<A name="00DA_0073"></FONT></h4></P>
Many of the C compilers available from CUG are based on some derivative of the Cain or Hendrix implementation of Small C. The exceptions to this rule are the 68000 C Compiler (disk #204) which has no lineage with Small C and the DECUS C Preprocessor (disk #243) which is not a full compiler. Some of the CUG C compilers based on Cain's Small C v1.1, include many of the enhancements published in <I>Dr. Dobb's Journal</I> over the years. This puts them approximately at the level of Hendrix Small C v2.0 discussed earlier. These enhanced Small C compilers are available as disk CUG104 Z-80/8080 (CP/M 80), CUG163 8086 (PC-DOS), and CUG221 6809 (FLEX OS).<P>
An attribute which most of the CUG C compilers share is a noticeable lack of external documentation. All disks have less than a dozen pages of documentation with the exception of Small C w/Floats (CUG156) which includes 30 pages. Fortunately, their common heritage means their implementations remain similar to the well-documented Cain and Hendrix designs. Specifically, the <I>Doctor Dobb's Journal</I> issues from 1980 to 1982 (see bibliography) are the best source for Small C versions before 2.0. Alternately, Hendrix's <I>Small C Handbook</I> (now out of print) details these early versions. You might need to check your local university library for these publications. Unfortunately, Hendrix latest book <I>A Small C Compiler</I> will be less relevant to older versions due to recent internal code redesigns.<P>
The CUG C compilers based on Small C, regardless of version, also share certain limitations of language features. In particular, <I>struct, union, long, float,</I> and <I>double</I> data types are not supported. The exception to this rule is of course Small C w/Floats (CUG156) which includes a 48-bit non-standard float. Additionally, arrays are limited to one-dimension and pointer arrays are specifically prohibited. These compilers also assume that <I>int</I>s and pointers are equivalent. This means the size of code and data pointers must also be the same. Small C-based compilers do not allow nested include files nor parameterized macro substitutions (as used in <I>stdio.h</I>)<I>.</I> Also, the full set of C operators is often not present.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
In general, the run-time libraries contain a good assortment of standard I/O, string, and keyboard-polling functions. Higher-level functions such as <I>sprintf()</I> are not always present. The libraries have very primitive linear memory allocation with <I>alloc()</I> and <I>free().</I> Blocks of allocated memory <I>must</I> be freed in reverse order of allocation.</FONT></FONT></FONT></FONT></FONT></FONT><P>
The overall ratings were based on my perception of the documentation, completeness, and usability of the implementation.<P>
<h4><FONT COLOR="#000080"><A name="00DA_0074">CUG104: Small C For Z-80/8080 (CP/M 80)<A name="00DA_0074"></FONT></h4></P>
This implementation of Small C for the Z-80/8080 was done by Mike Bernson of Ann Arbor, MI. This Small C is not self-compiling and requires a special assembler and linker which are included only in CP/M 80 executable form. The compiler was developed with BDS C v1.41.<P>
Mike Bernson has made several improvements to RC Small C v1.1 including most of the features of JH Small C v2.1 except <I>goto/</I>label and the ternary operator. The Standard C I/O library is included in both assembly language and object code format. Only three pages of documentation are provided, consisting of two pages of grammar and a one page listing of file contents.</FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="00DA_0075">CUG132: Small C For 6809 (Radio Shack Color Computer w/OS9)<A name="00DA_0075"></FONT></h4></P>
Small C for the 6809 (Color Computer) was implemented by A.J. Griggs. This version is close to RC Small C v1.0 since it lacks <I>switch/case, for,</I> and <I>goto/label</I> statements among other things. This Small C is not self-compiling and requires BDS C v1.41 or later to compile. This package requires a 6809 assembler and linker which are not included. Small C for 6809 is designed as a cross-compiler which produces 6809 code while running under a 8080/Z-80 environment. After compilation, you would use the supplied serial-port driver to download the object code in Motorola S HEX format to the target 6809 machine.</FONT></FONT></FONT></FONT><P>
This C compiler cannot be self-compiled because it has hardware dependencies on the byte order of 16-bit words. Specifically, the 6809 has the low and high bytes stored in the reverse order of 8080 machines. The compiler assumes a certain order in some cases and thus cannot compile itself.<P>
This disk includes a serial driver, graphics library, and sample graphics game. The graphics library supports real-time animation in the player-missle arcade style. Graphics objects are managed in a list which stores their screen position and x/y velocity. During animation, the routines automatically flag collision of objects on the screen. The management of graphic objects is similar to the use of sprites on Commodore C64 and C128 machines.<P>
Also on this diskette are a total of eight pages of documentation, six on the 6809 port and two on use of the graphics library.<P>
<h4><FONT COLOR="#000080"><A name="00DA_0076">CUG146: Small C For 6800 (FLEX OS)<A name="00DA_0076"></FONT></h4></P>
This implementation of Small C for 6800 (FLEX OS) was completed by Serge Stepanoff of Livermore, CA. This version is close to RC Small C v1.0 since it lacks <I>switch/case, for,</I> and <I>goto/label</I> statements among other things. An additional restriction is that identifiers are limited to six significant characters. This Small C is not self-compiling and requires BDS C v1.41 or later to compile.</FONT></FONT></FONT></FONT><P>
This package does not include a complete Standard C I/O library. A nonstandard <I>printf()</I> is used which requires that the number of arguments be passed as the last parameter.</FONT></FONT><P>
Small C for 6800 (FLEX OS) does not compile to assembly or machine language, but rather to a pseudo-code. A small pseudo-code interpreter, less than 2K, actually executes the user's pseudocode. To run this pseudo-code in a different environment requires only the rewrite of the interpreter and the runtime library for the target machine. However, the source code for the interpreter is not included on the distribution diskette.<P>
The diskette contains 11 pages of documentation, the first five pages are devoted to how to use the compiler and the remainder to the run-time library.<P>
<h4><FONT COLOR="#000080"><A name="00DA_0077">CUG156: Small C w/Floats (CP/M)<A name="00DA_0077"></FONT></h4></P>
Small C w/Floats (CP/M) was implemented by James R. Van Zandt of Nashua, NH. This package was originally available as disk #224 from the Sig/M-Amateur Computer Group of Iselin, New Jersey. This version is close to RC Small C v1.0 since it lacks <I>switch/case, for,</I> and <I>goto/label</I> statements. Additionally, the following operators are not supported: logical or ( | | ), logical and (<I>&amp;&amp;</I>), logical not (<I>!</I>), bitwise-not (~), and the assignment operators (+=, -=, et. al.).</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
This disk includes the executable compiler and is self-compiling. The compiler reads C source and produces Z-80 assembly language. The two major speed enhancements relative to Ron Cain's original compiler are a hash coded symbol table and 1K disk buffers. Additionally, the compiler will resolve symbols uniquely up to the first 16 characters. This disk also includes the ZMAC macro assembler and ZLINK linker in executable form only.<P>
Small C w/Floats supports the following usage of floating point:<P>
<pre>double d;   48 bit floating point
double *d;  pointer to double
double d();  function returning double
double d[5]; array of doubles</pre>
Storage classes, structures, multidimensional arrays, unions, and more complex types like double **<I>d</I> are not included.</FONT></FONT><P>
The layout of doubles does not conform to IEEE standard. These routines will execute only on a Z-80. They use the alternate registers and some of the undocumented instructions of that processor.<P>
Small C w/Floats includes a full complement of transcendental functions for type <I>double</I> (<A href="list1.htm">Listing 1</a>)
.</FONT></FONT><P>
If the "profile and trace" (-<I>P</I>) option of the compiler is used, each call to <I>err()</I> results in a walkback trace of function calls. In addition, an execution profile is displayed on the console at program termination (call to <I>exit()</I>). The profile consists of a list of the functions and the number of times (up to 999999) each was called. This is sometimes useful for debugging (to spot functions that are never called), but is most valuable for program execution time optimization.</FONT></FONT></FONT></FONT></FONT></FONT><P>
With 30 pages of documentation, Small C w/Floats is the best documented of any compiler available from CUG. The documentation covers compiler usage and internal, floating point routines, Standard C I/O library, ZMAC macro assembler, and the ZLINK linker.<P>
<h4><FONT COLOR="#000080"><A name="00DA_0078">CUG163: Small C For 8086 (PC-DOS)<A name="00DA_0078"></FONT></h4></P>
This implementation of Small C for 8086 (PC-DOS) was completed by Daniel R. Hicks of Rochester, MN. Small C for 8086 (PC-DOS) is distributed on two diskettes, the first contains the run-time library source and the second contains the compiler source and executable. This package was originally available as disk #152 from the Personal Computer Club of Toronto, Canada.<P>
This is a self-compiler, but does require your own assembler and linker. This port of Small C is based on JH Small C v2.0 so that it does support <I>switch/case, for, goto/label</I> statements. Hicks standard C I/O library provides very good compatibility with its UNIX counterpart.</FONT></FONT><P>
Hicks implementation imposes the following additional restrictions: lower-case and upper-case symbols are synonymous, both local declarations within a block and <I>goto</I> statements may not be used simultaneously, and the <I>sizeof()</I> operator is not supported.</FONT></FONT></FONT></FONT><P>
Parameters are pushed in order of occurrence: The first parameter in a list is the first one pushed and therefore the deepest one in the stack. This is opposite the order of many C compilers, and it prevents some C library functions (such as <I>printf</I>) from being able to determine the parameter count by examining just the first or second parameter. For this reason, the compiler, prior to a CALL, loads register DL with the parameter count, thus allowing functions such as <I>printf</I> to be implemented.</FONT></FONT></FONT></FONT><P>
Included on the diskette are nine pages of detailed documentation on the capabilities and limitations of the compiler.<P>
<h4><FONT COLOR="#000080"><A name="00DA_0079">CUG170: Miscellany V (Caprock C, version N for IBM-PC)<A name="00DA_0079"></FONT></h4></P>
Caprock Small C for 8086 (PC-DOS) was implemented by Caprock Systems, Inc. of Arlington, TX. This disk was originally available as disk #315 from PC Software Interest Group (PC-SIG) of Sunnyvale, CA. This compiler is supplied in source form only, an executable version is not included. Additionally, the standard C I/O library is missing from this distribution. This version is close to RC Small C v1.0 since it lacks <I>switch/case, for,</I> and <I>goto/label</I> statements.</FONT></FONT></FONT></FONT><P>
When compiled under Microsoft C 5.1, this file produced four errors and 53 warnings. All of these problems were the result of the assumption that integers are interchangeable with pointers.<P>
No documentation is included with this compiler.<P>
True to its name, the Miscellany V disk offers over 20 files of C functions. Some of the other offerings on this disk include Life and Towers of Hanoi games, a binary to Intel HEX format converter, and several keyboard utilities.<P>
<h4><FONT COLOR="#000080"><A name="00DA_007A">CUG204: 68000 C Compiler (UNIX System V)<A name="00DA_007A"></FONT></h4></P>
The 68000 C Compiler (PC-DOS) was completed by Matthew Brandt of Norcross, GA. This compiler is intended as an instructive tool for personal use. Any use for profit without the written consent of the author is prohibited. As stated earlier, this is the only C compiler offered by CUG which is not derived from RC or JH Small C. This is an optimizing C compiler which generates assembly language for the Motorola 68000 processor. This system also requires a 68000 assembler and linker which the user must supply. It has successfully compiled itself on UNIX System V running on a Motorola VME-10. Since this code was written for a machine with long integers it may exhibit some irregularity when dealing with long integers on the IBM-PC.<P>
This compiler vies with Small C w/Floats (CUG #156) for the best implementation of C. Although the 68000 C Compiler does not support <I>float</I>s<I>,</I> it does have features not found in any other CUG C compiler: <I>long</I>s<I>,</I> structures, unions, complex types (e.g. <I>char **argv</I>), enumerated types, and functions which return pointers to structures.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The disk includes one page of documentation outlining the limitations of the compiler. Brandt offers the following warning: "The author makes no guarantees. This is not meant as a serious development tool although it could, with little work, be made into one." The preprocessor does not support parameterized macro substitutions, only <I>#include</I> and <I>#define</I> macros are supported. Brandt advises that function arguments declared as <I>char</I> may not work properly and should be changed to <I>int.</I> When the compiler encounters a syntax error, an error number is printed but no descriptive text is provided. Lastly, the size of functions is slightly limited due to the fact that the entire function is parsed before any code is generated.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The compiler can be compiled by Microsoft C v3.0 or higher. MSC will issue many warnings but they can be ignored. The file MAKE.BAT may be used to rebuild the compiler.<P>
<h4><FONT COLOR="#000080"><A name="00DA_007B">CUG221: 6809 C Compiler (FLEX OS)<A name="00DA_007B"></FONT></h4></P>
This implementation of Small C for 6809 (FLEX OS) was completed by Dieter H. Flunkert. The author has made several improvements to RC Small C v1.1 plus most of the features of JH Small C v2.1 except <I>goto/label.</I> Small C for 6809 (FLEX OS) has all other C control statements including <I>switch/case, do/while,</I> and <I>for.</I> Additionally, all C operators are supported including the elusive comma (<I>,</I>), ternary (<I>?</I>), and assignment operators (+=, -=, et. al). However, like most other Small C implementations, the data types for <I>float, double, long,</I> structures, and unions are not present.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
An executable version of the compiler is not provided on the diskette. This system requires the TSC relocatable assembler, library generator and linking loader which the user must supply. The standard C I/O library is included in both C source and assembly language formats. The compiler has seven pages of documentation detailing the grammar and preprocessor commands.<P>
When compiled under Microsoft C v5.1, it was revealed that many of the <I>#include</I> directives did not have quoted filenames (e.g. <I>#include stdio.h</I>). Once again, many warnings appeared from the use of integers as pointers. Proper compilation required adding <I>#define</I> VMS to every module.</FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="00DA_007C">CUG243: DECUS C Preprocessor (PC-DOS)<A name="00DA_007C"></FONT></h4></P>
The DECUS C Preprocessor (CPP) was originally implemented by Martin Minnow. CPP was subsequently ported to PC-DOS by Ted Lemon and Jym Dryer. CPP reads a C source file, expands macros and include files, and writes an input file for the C compiler. If no file arguments are given, it reads from <I>stdin</I> and writes to <I>stdout.</I> If one filename is given, it will be the input file. If a second filename is given, it will be the output file. The full command line format is:</FONT></FONT></FONT></FONT><P>
<pre>cpp [-options] [infile [outfile]]</pre>
The DECUS C Preprocessor has been updated to meet the specifications of the Draft ANSI C Standard. However, this C preprocessor is not designed to handle floating point expressions. An experimental floating point source file is provided for those who wish to experiment with it.<P>
The following options are supported. Options may be given in either case.<P>
<pre>-I directory</pre>
Add this directory to the list of directories searched for<P>
<pre>#include "..."</pre>
and<P>
<pre>#include ...</pre>
commands. Note that there is no space between the <I>-I</I> and the directory string.</FONT></FONT><P>
More than one <I>-I</I> command is permitted. On non-UNIX systems <I>-I</I> directory is forced to upper case.</FONT></FONT></FONT></FONT><P>
<pre>-D name=value</pre>
Define the name as if the programmer wrote <I>#define&lt;name&gt;&lt;value&gt;</I> at the start of the first file. If is not given, a value of 1 will be used. On non-UNIX systems, all alphabetic text will be forced to upper case.</FONT></FONT><P>
<pre>-U name</pre>
Undefine the name as if <I>#undef name</I> were given. On non-UNIX systems, <I>name</I> will be forced to upper case.</FONT></FONT></FONT></FONT><P>
<pre>-X number</pre>
Enable debugging code. If no value is given, a value of <I>1</I> will be used. (For maintenance of CPP only.)</FONT></FONT><P>
The preprocessor will look for an environment variable <I>INCLUDE</I> if include files cannot be found in the <I>-I </I>directories. Unfortunately, only a single search directory can be specified in the <I>INCLUDE</I> path (e.g. <I>SET INCLUDE=\MSC\INCLUDE;\MY\SRC</I> will fail).</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
CPP has been successfully built with Lattice C v2.00 and Microsoft C v3.00. The distribution disk contains four pages of documentation detailing how to prepare CPP under several different memory models.<P>
<h4>Bibliography</FONT></h4></P>
Cain, Ron. "A Small C Compiler for the 8080s." <I>Dr. Dobb's Journal</I><I>,</I> April-May 1980, pp. 5-19.</FONT></FONT><P>
Cain, Ron. "A Runtime Library for the Small C Compiler." <I>Dr. Dobb's Journal</I><I>,</I> September 1980, pp. 4-15.</FONT></FONT><P>
Hendrix, J. E. "Small-C Expression Analyzer." <I>Dr. Dobb's Journal</I><I>,</I> December 1981, pp. 40-43.</FONT></FONT><P>
Hendrix, J. E. "Small-C Compiler, v.2." <I>Dr. Dobb's Journal,</I> December 1982, pp. 15-63. and January 1983, pp. 48-64.</FONT></FONT><P>
Hendrix, J. E. and Payne, L. E. "A New Library for Small_C." <I>Dr. Dobb's Journal</I><I>,</I> May 1984, pp. 50-81, and June 1984, pp. 56-69.</FONT></FONT><P>
Hendrix, J. E. "Small-C Update." <I>Dr. Dobb's Journal</I><I>,</I> August 1985, pp.84-91.</FONT></FONT><P>
Hendrix, J. E. <I>The Small C Handbook</I><I>.</I> Redwood City, CA: M&amp;T Publishing Inc., 1984.</FONT></FONT><P>
Hendrix, J. E. <I>A Small-C Compiler: Language, Usage, Theory, and Design</I><I>.</I> Redwood City, CA: M&amp;T Publishing Inc., 1988.</FONT></FONT><P>
Volkman, Victor R. "Revised Handbook Details Small C Innards," <I>The C Users Journal</I><I>,</I> February 1989, pp. 9-10.</FONT></FONT><P>
Ward, Robert and Donna, Ed., <I>The C Users' Group Library</I>, McPherson, KS: R&amp;D Publications, Inc., 1986.<P>

<h4><a href="../../../source/1990/apr90/volkman.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
