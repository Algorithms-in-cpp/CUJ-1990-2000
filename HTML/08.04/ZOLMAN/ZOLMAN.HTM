


<HTML>
<HEAD>

<TITLE>April 1990/A Practical C File I/O Tutorial: A Mini-Database Program</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocapr.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">A Practical C File I/O Tutorial: A Mini-Database Program<A name="00CF_006B"><A name="00CF_006B"></font></h2><P>
<h3 align="center"><font color="#800000">Leor Zolman</font></h3><hr>
<BLOCKQUOTE>
<P><i><A name="00CF_0000"><A name="00CF_0000">Leor Zolman wrote "BDS C", the first C compiler designed exclusively for personal computers. Since then he has designed and taught programming workshops and has also been involved in personal growth workshops as both participant and staff member. He still doesn't hold any degrees. His latest incarnation is as a CUJ staff member.</i></P><P>
<h4><FONT COLOR="#000080"><A name="00CF_006C">Series Introduction<A name="00CF_006C"></FONT></h4></P>
If you're a recent convert to C from any other high-level language and you've tried to write programs that do any serious file input/output, then chances are you've experienced more than a little bit of frustration. The C standard library, in keeping with the general philosophy of the C language, provides tools powerful enough for doing anything you want, provided you know how to correctly combine those tools. In the case of file I/O, about the only operations supported in a "trivial" manner are:<P>
<UL><li>reading and writing bytes</li>
<li>reading and writing single lines of text</li></UL>
For reading and writing any other flavor of data structure to or from the disk, a certain level of "C sophistication" is required. Often, the task quickly moves beyond "How do I read and write this data?" toward the more general problem, "What is the most appropriate way to <I>represent</I> this data in order to facilitate efficient means of reading and writing it to disk?"<P>
In this series of tutorial articles, I will develop from scratch a complete special-purpose "mini-database" system in order to illustrate the process of designing file based C applications. The resulting system will be functional but intentionally inadequte for any <I>particular</I> task.<P>
This first installment will consist of an operational description of the database, broken into the following areas:<P>
<UL><li>data structures</li>
<li>functional description</li>
<li>user interface (the menu system)</li></UL>
The second installment will present the database record editing and management mechanism.<P>
Later installments will present several different approaches to storing the data on disk and will discuss the relative merits of each approach. The first version will store all data to disk as user-readable text and will use statically-allocated arrays in memory.<P>
The second version will store all data to disk in binary format for rapid transfer. I'll also develop two memory allocation systems for the binary version: static array allocation (same as for the textual disk format) and dynamic array allocation (to optimize the use of system memory).<P>
<h4><FONT COLOR="#000080"><A name="00CF_006D">Mini-Database Data Record Structure<A name="00CF_006D"></FONT></h4></P>
This will not be a "general-purpose" database system, but rather a program built to handle only one specific record format: a personnel record as in <A href="table1.htm">Table 1</a>.
<P>
The definition of the structure tag for this record, named record, is shown in the header file (<A href="list1.htm">Listing 1</a>,
 lines 30-37).<P>
The system will be able to handle only one active database at a time. We'll use dynamic memory allocation to obtain storage for the data records, so that data memory is allocated only when necessary. For the first version of the system, the list of data record pointers will be kept in a statically-allocated (i.e., fixed-length) array. The definition of this array is shown on line 49 of the header file. The name of the array is <I>recs</I>, and its type is</FONT></FONT><P>
<pre>array (of MAX_RECS elements) of
pointers to structures of type
record</pre>
The programmer must explicitly size a fixed-length array. In my code the size is <I>MAX_RECS</I>. Thus, the total amount of fixed memory needed for storing the records of the database is <I>MAX_RECS</I> times the size of a single record pointer. (In later versions, I'll even show how to dynamically allocate the storage for the <I>recs</I> array itself. To facilitate this modification the symbol <I>RECS</I> is introduced (<A href="list1.htm">Listing 1</a>,
 line 50) as an alias for <I>recs</I>.)</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Lines 42-46 (of <A href="list1.htm">Listing 1</a>)
 illustrate a necessary complication when writing multiple-source-file programs: global data must be <I>defined</I> in one module and one module only. If the data is to be known in any other modules of the program, it must be declared in those other modules. Definitions actually reserve storage for the specified data, while declarations only serve to inform the compiler about the nature of data defined elsewhere. This simplistic rule of thumb will usually differentiate between definitions and declarations appearing in header files: <P>
If the <I>extern</I> modifier is used, you're probably looking at a declaration; otherwise, you're probably looking at a definition.</FONT></FONT><P>
To conform with the ANSI Standard, each data item should be <I>defined</I> only once among all the source modules of a program. At first it might seem one need only insert an <I>extern</I> keyword in front of all but one declaration, making it the definition. Unfortunately, this is not easily done. Typical multiple-module programs use lots of shared data; do we really want to maintain separate lists of declarations in separate modules, some having the <I>extern</I> keyword and some not? Of course not; we'd rather have all the data included within a single .<I>h</I> file. But if the declarations/definitions must be written differently in separate files, can we really use a single header file? Yes. Lines 42-46 illustrate a symbolic constant to control whether the <I>extern</I> keyword is generated for the critical declarations. If <I>MAIN_MODULE</I> exists, then we are compiling the main module of the program and the symbolic constant <I>EXTERN</I> is defined to nothing (so the items in lines 49, 52 and 53 are defined). Otherwise <I>EXTERN</I> is defined to <I>extern</I> and the lines are treated as declarations of external data. To force <I>definitions</I> to be created as the main module is compiled, we <I>#define MAIN_MODULE</I> (see <A href="list2.htm">Listing 2</a>,
 line 24) before the inclusion of the header file. The other modules of the program do <I>not</I> contain such a definition.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
(Note: The difference between definitions and declarations has been rendered fuzzy by variations among C compilers over the years. Microsoft, perhaps to eliminate the need for exactly the sort of mechanism just presented, decided to make its linker allow multiple definitions of the same piece of data among source files of a program (although multiple <I>initializations</I> were still flagged as errors.) While this does simplify development in some cases, it renders C programs relying on this "feature" non-portable. Turbo C 2.0, under which this database program was developed, makes you "do it right", even if doing so requires a little bit more thought.)<P>
<h4><FONT COLOR="#000080"><A name="00CF_006E">Other Global Data<A name="00CF_006E"></FONT></h4></P>
The system maintains a minimal amount of global data to describe the currently open database's state. The variable <I>n_recs</I> tells how many records are currently held in memory. The variable <I>max_recs</I> contains the maximum number of records that can be represented. For the fixed-length array version, <I>max_recs</I> is simply assigned the value of the symbolic constant <I>MAX_RECS</I> (<A href="list2.htm">Listing 2</a>,
 line 72).</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="00CF_006F">A Simple Menu System<A name="00CF_006F"></FONT></h4></P>
A simple line-oriented menu system serves as the user interface. The menu function <I>do_menu</I> is shown in <I>MDBUTIL.C</I> (<A href="list3.htm">Listing 3</a>,
 lines 21-39.) The menu consists of a list of pointers to structures of type <I>menu_item</I> (<A href="list1.htm">Listing 1</a>,
 lines 55-58), where each <I>menu_item</I> consists of an integer action code and a string description of the action. <I>do_menu</I> simply numbers and lists out each description (up to but not including the first entry with <I>action_code</I> of <I>0</I>), asks the user to pick one of the choices, and returns the <I>action_code</I> value associated with the selected item. Note that the <I>action_code</I> values need not correspond to the choice numbers displayed by the function.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="00CF_0070">The Main Menu Options<A name="00CF_0070"></FONT></h4></P>
The database operations are divided into two menus. The first menu (<A href="list2.htm">Listing 2</a>,
 lines 37-48) contains the options for controlling database selection, disk I/O and program termination. The second menu, within the <I>MDBEDIT.C</I> module (shown in a future article) controls all the options associated with editing the data records of the currently active database.</FONT></FONT><P>
The main menu controls the top-level system functions. A variable, <I>db_active</I>, tells whether a database is currently open, and thus whether certain operations are appropriate. For example, we don't want to allow the user to open a new database if another is currently open. The main menu options are as follows:</FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="00CF_0071">CREATE:<A name="00CF_0071"></FONT></h4></P>
Initialize a new database. Ask the user for a name for the database (this will also be the name of the file used to store the database on disk) and check to make sure another file does not already exist by that name. If the name is OK, then initialize <I>max_recs, n_recs</I> and <I>db_active</I>.</FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="00CF_0072">EDIT:<A name="00CF_0072"></FONT></h4></P>
Call the <I>edit_db()</I> function to edit the records of the database.</FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="00CF_0073">OPEN:<A name="00CF_0073"></FONT></h4></P>
Load a previously stored database from disk (via the <I>read_db</I> function), then go immediately into editing that database by calling <I>edit db. read_db()</I> allocates the appropriate amount of memory for the database records, assigns the pointers to elements in the <I>RECS</I> array, and returns the number of records loaded. We announce the number of records before calling <I>edit_db()</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="00CF_0074">BAKUP.<A name="00CF_0074"></FONT></h4></P>
This menu entry is included to encourage backup facilities in your applications. The backup function, <I>backup_rib()</I>, is just a dummy.</FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="00CF_0075">CLOSE:<A name="00CF_0075"></FONT></h4></P>
Terminate operations on the current database, write it to disk and free up all associated storage.<P>
<h4><FONT COLOR="#000080"><A name="00CF_0076">SAVE:<A name="00CF_0076"></FONT></h4></P>
Write the database to disk, preventing loss of work "so far" in case of a system crash. Do not close the database.<P>
<h4><FONT COLOR="#000080"><A name="00CF_0077">ABANDON:<A name="00CF_0077"></FONT></h4></P>
Close the database without saving it to disk: free up all storage.<P>
<h4><FONT COLOR="#000080"><A name="00CF_0078">QUIT:<A name="00CF_0078"></FONT></h4></P>
Exit the program.<P>
<h4><FONT COLOR="#000080"><A name="00CF_0079">Utility Functions<A name="00CF_0079"></FONT></h4></P>
<A href="list3.htm">Listing 3</a>
shows the source module <I>MDBUTIL.C</I>, containing utility functions used throughout the program. In addition to the <I>do_menu()</I> function (already described), this module includes <I>error(), alloc_rec()</I> and <I>free_up()</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The <I>error()</I> function is a general-purpose fatal exit. It prints a message and exits.</FONT></FONT><P>
The <I>alloc_rec()</I> function is not used by any of the code in this month's listing, but is basic to the operation of the program. <I>alloc_rec()</I> is called to obtain memory from the system to store a single record of database data. The <I>malloc()</I> function is called to actually obtain the block of storage. <I>alloc_rec</I> returns either <I>NULL</I>, signaling that the system has no more storage to spare, or a valid memory pointer obtained from <I>malloc()</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The <I>free_up()</I> function returns all storage (obtained through calls to <I>alloc_rec</I>) back to the system. In this system storage is always freed up for the entire database at one time (when the current database file is closed or abandoned.) Freeing that storage is simply a matter of walking through all the records of the database and calling the <I>free()</I> function for each pointer.</FONT></FONT></FONT></FONT></FONT></FONT><P>
Next month: Editing the database records.<P>


<h4><a href="../../../source/1990/apr90/zolman.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
