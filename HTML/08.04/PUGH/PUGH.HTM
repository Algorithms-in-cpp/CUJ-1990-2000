


<HTML>
<HEAD>

<TITLE>April 1990/Questions & Answers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocapr.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Questions &amp; Answers<A name="00E0_0077"><A name="00E0_0077"></font></h2><P>
<h3 align="center"><A name="00E0_0000"><A name="00E0_0000">More On Passing Arrays And Precedence Rules</h3><P>
<h3 align="center"><font color="#800000">Ken Pugh</font></h3><hr><blockquote><P>
<P><i><A name="00E0_0000"><A name="00E0_0000">Kenneth Pugh, a principal in Pugh-Killeen Associates, teaches C language courses for corporations. He is the author of <I></I>C Language for Programmers <I></I>and <I></I>All On C<I></I>, and is a member on the ANSI C committee. He also does custom C programming for communications, graphics, and image databases. His address is 4201 University Dr., Suite 102, Durham, NC 27707.</i></P><P>
<P><i>You may fax questions for Ken to (919) 493-4390. When you hear the answering message, press the * button on your telephone. Ken also receives email at kpugh@dukeac.ac.duke.edu (Internet) or dukeac!kpugh (UUCP).</i></P><P>
<h4><FONT COLOR="#000080"><A name="00E0_0078">Announcing The Great Name/Obscure Code Contest<A name="00E0_0078"></FONT></h4></P>
Based on a reader's response later on in this column, it appears reasonable to launch a new contest.<P>
Send examples of the worst names or abbreviations that you have seen in other people's programs (or even your own). Include both the name and a description of what it is supposed to represent. The best (or worst) examples will be published here, with credit for your submission. The name of the programmer who actually wrote the code in which the name is used will not be mentioned without his/her express permission.<P>
<B>Q</B><P>
When we met at the Triangle C Users' Group meeting, you invited questions at any difficulty level on 'C'. So, here is one:<P>
I try to pass a <I>char</I> array to a function. In the function, I use <I>sizeof</I> to get the array's allocated size. It doesn't work. The function is returning the <I> sizeof passed_array</I> as if it were a pointer, two bytes long. It must <I>be</I> a pointer with the location of the beginning of <I>real_array</I> in it. Right?</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
I asked our instructor about this, and he said the code in <A href="list1.htm">Listing 1</a>
would work. At least, that's how I understood what he said. It produces the results shown below it when compiled with Power C from MIX or Instant C 3.0 from Rational Systems, and fails with these compiler messages under Turbo-C 1.5:<P>
<pre>(marker between char and passed_array[]; in
          getarray()'s formal parameter list)
" Error 10:Type mismatch in redeclaration of
          'getarray' "</pre>
(then, at the end of function <I>getarray()</I>, it complains:)</FONT></FONT><P>
<pre>" Warning 13:Parameter
'passed_array' is never used in
function "</pre>
How can I get an array's allocated size within a function it has been passed to?<P>
What is bothering Turbo-C, and why don't the other compilers complain similarly?<P>
If an array's name is really a pointer to the array's beginning, why doesn't <I> sizeof(real_array)</I> also return a <I>2</I> when called in <I>main()</I>? (Not that I WANT it to ... :-)</FONT></FONT></FONT></FONT></FONT></FONT><P>
Glenn Jordan<br>
RTP, NC<P>
<B>A</B><P>
The declaration of an array in a function as a local variable actually sets aside storage for the array. In this sense the <I>sizeof(real_array)</I> is 20, because that is how much storage is set aside for it. The name of an array (one declared as local variable) (or a static/external) represents the address when passed to a function,</FONT></FONT><P>
When you declare a parameter to be an array (e.g. <I>passed_array</I>), you are not really declaring an array at all. You are really declaring that the parameter is a pointer. You pass an address in the call (i.e. <I>real_array</I>), and the function receives that address in <I>passed_array</I>.</FONT></FONT></FONT></FONT></FONT></FONT><P>
The <I>sizeof passed_array</I> is the size of a pointer (two or four bytes, depending on the memory model). Alternatively, you could have declared it as <I>int *passed_array;</I>. For parameter declarations, both <I>int *passed_array;</I> and <I>int passed_array[];</I> are equivalent. The compiler interprets both as meaning that the parameter is a pointer. Your instructor may not have mentioned that you can reference an individual <I>int</I> with a pointer by using either:</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>passed_array[i]</pre>
or<P>
<pre>*(passed_array + i)</pre>
The compiler treats both declarations identically.<P>
Instead of using <I>sizeof</I>, you could pass both a pointer to the array and its size in either bytes or in elements. Usually the element count is more useful than the byte count:</FONT></FONT><P>
<pre>function(real_array, 20);
.....

function(passed_array, size)
char passed_array[];
int size;
    {
    for (i = 0; i &lt; size; i++)
        {
        ......</pre>
You can avoid passing the size by designating a unique value for the end of the valid elements in the array &#151; just as strings (character arrays) are terminated with the <I>NUL</I> (zero or all bits off) character. Remember, the terminator must be some unique value that will never appear as a valid value for the type you are manipulating.</FONT></FONT></FONT></FONT><P>
<B>Q</B><P>
My instructor says that <I>(ch)</I>++ evaluates as increment by one type-size-length the value found in address <I>ch</I>. No quarrel there.</FONT></FONT></FONT></FONT><P>
Being curious, I asked him how the expression would evaluate without the parenthesis <I>()</I>. He said that since ++ and * are unary operators, and that * had higher precedence than ++, the following was true:</FONT></FONT><P>
<pre><I>*ch</I>++ is evaluated identically to just <I>ch</I>++ without the *</pre>
and that in both cases, you would just increment the address <I>ch</I> by <I>1</I>.</FONT></FONT></FONT></FONT><P>
I disagreed (never disagree with your instructor). I said that if * had higher precedence than ++, like he insisted, that<P>
<pre><I>*ch</I>++ should be exactly the same as <I>(*ch)</I>++</pre>
He said no, since ++ is a unary operator, it could only see the <I>ch</I>, not <I>*ch</I>, even if * had already operated on <I>ch</I>. I told him I thought that was really crazy, and he got upset...</FONT></FONT></FONT></FONT></FONT></FONT><P>
Now, actually, as you experienced programmers know, * and ++ have the exact same precedence, and are evaluated right-to-left when there is an associativity question, as above. So, he was right, the parentheses <I>are</I> required to make <I>(*ch)</I>++ increase the value held in address <I>ch</I>. But the stuff about ++ acting only on the adjacent operand <I>must</I> be wrong, right ???? I mean, wouldn't:</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>++*<I>ch</I> do exactly the same as <I>(*ch)</I>++</pre>
He claimed that in the case, ++*<I>ch</I>, the ++ would not know what to do with the operand *, while I claimed that <I>*ch</I> would already be evaluated to the single-value contents of address <I>ch</I> when ++ attacked. He responded that he had been programming in C for years, and knew what he was talking about.</FONT></FONT></FONT></FONT></FONT></FONT><P>
Comments? Perhaps I am the one who is misunderstanding...<P>
Glenn Jordan<br>
RTP, NCA<P>
<B>A</B><P>
You are correct in your interpretation. By associativity and precedence rules:<P>
<pre><I>ch</I>++ equals *<I>(ch</I>++<I>)</I></pre>
Both use the address contained in <I>ch</I> as a pointer and then increment the contents of <I>ch</I> using pointer arithmetic.</FONT></FONT></FONT></FONT><P>
<pre>++*<I>ch</I> equals ++<I>(*ch)</I></pre>
These forms use the address in <I>ch</I> as a pointer and increment the contents at that address.</FONT></FONT><P>
<pre>*++<I>ch</I> equals *<I>(</I>++<I>ch)</I></pre>
These forms increment the contents of <I>ch</I> using pointer arithmetic and then use that new value as a pointer.</FONT></FONT><P>
In order to post-increment the contents of a target location, you need to use explicit parentheses to overcome the precedence, yielding:<P>
<pre><I>(</I>*ch<I>)</I>++</pre>
This combination uses the address in <I>ch</I> as a pointer and increments the contents at that address.</FONT></FONT><P>
For example, if we assume that doubles are eight bytes long, then incrementing a pointer to a double increases that pointer by eight. The comments in <A href="list2.htm">Listing 2</a>
detail the behavior of various pointer/increment combinations.<P>
<h4><FONT COLOR="#000080"><A name="00E0_0079">Reader Responses:<A name="00E0_0079"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="00E0_007A">Character Constants<A name="00E0_007A"></FONT></h4></P>
This letter is in response to your discussion of character constants on pages 113 and 114 of <I>The C Users Journal</I>, January 1990. I believe that your discussion is flawed and that the Microsoft C and Quick C implementations do not comply with the draft standard.<P>
You say that the character <I>è</I> (where e is replaced by the accented e, code 138 decimal) is not part of ASCII and so the compiler could do with it what it wants. I refer you to the following items in the December 7, 1988 draft C standard: Section 2.2.1, Page 11, Line 12:</FONT></FONT><P>
Both the basic source and the basic execution character sets shall have <I>at least</I> [emphasis added by RHG] the following members ...<P>
Section 3.1.3.4, Page 29, Line 16: <I>c-char:</I><P>
<I>any member of the source character set except the single quote ', backslash \ , or new-line character escape-sequence</I><P>
Section 3.1.3.4, Page 30, Line 33:<P>
<I>If an integer constant contains a singlecharacter or escape sequence, its value is the one that results when an object with type char whose value is that of the single character or escape sequence is converted to type int</I>.<P>
Given that Microsoft's C and Quick C compilers accept character 138 without any diagnostic, I think it is safe to assume that they consider the character to be part of the source character set. Therefore, the literal is indeed a legal character constant and so should be treated like <I>(int) (char)</I> <I>è</I> which has the value <I>-118</I> if characters are treated as signed. Hence, your example demonstrates a bug in the compilers, not an implementation dependency.</FONT></FONT></FONT></FONT></FONT></FONT><P>
I have copied this note to the postmaster at Microsoft in the hope that he will forward it to the appropriate person in the C compilers development group for comment. You may also use this letter in a future column if you see fit.<P>
Richard H. Gumpertz<br>
Leawood, Kansas<P>
<B>A</B><P>
You (Mr. Gumpertz) are correct, I believe. The sample program in the article (pg. 114) shows a bug that has actually been in MS C since well before the ANSI standard (I duplicated it all the way back to C v4.0).<P>
We do appreciate you bringing this to our attention. This bug will be fixed in our upcoming version of MS C.<P>
Thanks.<P>
Dave Weil<br>
Group Development Mgr.,<br>
System Languages<br>
Microsoft Corp.<P>
Thank you. I stand corrected on this technicality. You are correct if a character representation is accepted in a character constant, then it should act according to the rules for characters. Non-ASCII characters are not in the ANSI standard source character set that must be supported by a conforming compiler.<P>
I strongly urge against using non-ASCII characters as character values. You can always use a <I>#define</I> in their place. Not only do you avoid the inherent non-portability of such a program, you also avoid word processing problems.</FONT></FONT><P>
For example, I was porting a program somebody had written with a word processor that accepted non-ASCII characters. My word processor does not accept them. It uses the high order bit as an internal designation of the end of a word. It read the program, but the non-ASCII characters appeared as the ASCII value with the high-order bit off.<P>
If you do use characters with the high-order bit on, then you could declare the variables that use them as <I>unsigned chars</I> preventing sign extension when the <I>char</I> is expanded to an integer. &#151;KP</FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="00E0_007B">Naming Conventions And Indentation<A name="00E0_007B"></FONT></h4></P>
<I>Everyone knows the "CMP" stands for corrugated metal pipe, not compare or compute.</I> &#151;Marcus Russell, West Berlin, NJ<P>
This comment refers to a previous response I had given to a question regarding naming conventions. I suggested that one should adopt some standard abbreviations, if one did not spell out names in full.<P>
Comments from other people have suggested that there is a widespread distinction between the vowel droppers and the first few letter users. "compute" could be abbreviated as "cmpt" or "comp", depending on your preference. In my earlier days I used to use "cmp" as a shortening of "cmpt". This always caused conflict when "compare" got shortened to "cmpr" and then to "cmp" also.<P>
I find it interesting reading listings in this and other magazines. I believe that a program should be almost as readable as a book. Using fully spelled out variable names contributes as much as any other factor to easier understanding of a program.<P>
This leads me on to another topic of readability &#151; the great brace debate. Brace alignment of compound statements seems to be a topic that provokes a variety of opinions. I think that, like taste in art, each person's view is different and sufficient justification can be developed to support any particular stand.<P>
A recent article in the <I>C Gazette</I> had some words to say about indentation styles. I recommend the magazine for those who like reading C code in order to learn about it. There are a lot of source listings in that magazine.<P>
There are many possibilities for brace alignment. If braces are placed on lines by themselves, then either or both can be aligned with the enclosed statements or one tab stop to the left of the statements. Alternatively, the opening brace may be on the same line as the controlling statement. The closing brace might be on the same line of the last enclosed statement. This yields a number of possibilities. In Chapter 14 of <I>All on C</I>, I listed four common formats. Here are those with a few more. I've left off several variations which appear rather ugly and of no use.<P>
Braces on separate lines and aligned with enclosed statements.<P>
<pre>if (x)
    {
    ...
    }</pre>
Braces on separate lines and aligned with controlling statement.<P>
<pre>if (x)
{
    ...
}</pre>
Opening brace on same line as controlling statement, closing brace aligned with enclosed statements <I>[my preference </I>&#151;<I> rlw]</I>.<P>
<pre>if (x) {
    ...
    }</pre>
Opening brace on same line as controlling statement, closing brace aligned with controlling statement (Kernighan and Ritchie style).<P>
<pre>if (x) {
    ...
};</pre>
Opening brace on same line as controlling statement and closing brace on same line as last enclosed statement.<P>
<pre>if (x) {
    ...}</pre>
Luckily there are "pretty-print" programs that you can use to alter the style of the indentations, for programs you have written or that you have received and are trying to alter or maintain. However it's usually wise to adopt one style and use it faithfully. I originally adopted the style:<P>
<pre>if (x) {
    ...
    }</pre>
The initial choice was arbitrary. Later I reviewed my usage and found a few compelling reasons to switch to:<P>
<pre>if (x)
    {
    ...
    }</pre>
This appearance is more consistent with the use of indentation for non-compound statements. Those looks like:<P>
<pre>if (x)
    statement</pre>
It also makes it easy to match up braces. The other styles which have unaligned braces make it more difficult to do this.<P>
Those of you who submit code for this column will find that I have reformatted the listing for the sake of consistency within the column. &#151;KP<P>

<h4><a href="../../../source/1990/apr90/pugh.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
