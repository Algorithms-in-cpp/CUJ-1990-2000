


<HTML>
<HEAD>

<TITLE>December 1991/Standard C</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocdec.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Standard C<A name="0280_0156"><A name="0280_0156"></font></h2><P>
<h3 align="center"><A name="0280_0000"><A name="0280_0000">The Header &lt;<I>stddef.h</I>&gt;</h3><P>
<h3 align="center"><font color="#800000">P.J. Plauger</font></h3><hr><blockquote><P>
<P><i><A name="0280_0000"><A name="0280_0000">P.J. Plauger is senior editor of The C Users Journal. He is secretary of the ANSI C standards committee, X3J11, and convenor of the ISO C standards committee, WG14. His latest book is The Standard C Library, published by Prentice-Hall. You can reach him at PJP@wsa.oz; or uunet!munnari!wsa.oz!pjp.</i></P><P>
<h4><FONT COLOR="#000080"><A name="0280_0157">Background<A name="0280_0157"></FONT></h4></P>
The header <I>&lt;stddef.h&gt;</I> is yet another invention of committee X3J11 in forming the C Standard. The name follows the usual cryptic pattern for naming headers in the Standard C library. It is meant to suggest that here is where you find certain "standard definitions." The only other suitable parking spot for the definitions in this header might be <I>&lt;stdlib.h&gt;</I>. That too is a committee invention. It earned its (equally) vague name as a place to declare various functions, old and new, that had no traditional associated standard headers. It may seem silly to create <I>two</I> such catchall repositories. Nevertheless, the committee had its reasons &#151; <I>&lt;stddef.h&gt;</I> is one of the four headers available even in a freestanding environment.<P>
The types and macros defined in <I>&lt;stddef.h&gt;</I> have an interesting thing in common. Every one has been, at one time or another, a candidate for inclusion in the language proper. That's because every one is, in the end, defined by the translator in a private way. It is not easy to write portable code that can take the place of any of these definitions. Sometimes it is essentially impossible.<P>
On the other hand, all the types and macros defined in <I>&lt;stddef.h&gt; </I><I>can</I>, as a rule, be written as conventional type and macro definitions. The implementor simply needs to be privy to how a given translator defines certain types and operations.<P>
Consider the three type definitions in this header &#151; <I>ptrdiff_t, size_t</I>, and <I>wchar_t</I>. Each is a <I>synonym</I> for one of the standard integer types. An implementation cannot, for example, make <I>short</I> 16-bits, <I>wchar_t</I> 24-bits, and <I>int</I> 32-bits. It must make <I>wchar_t</I> the same as some type that you can specify for a type definition. The same constraints apply to the other two type definitions.<P>
Implementing the macro <I>NULL</I> simply requires that you choose the most suitable of several possible options<I> &#151; 0, 0L</I>, or <I>(void *)0</I>. You pick a form that works properly as an argument of type pointer to <I>void</I> (or pointer to <I>char, signed char</I>, or <I>unsigned char</I>) in the absence of a function prototype. (I discuss the macro <I>NULL</I> in greater detail below.)<P>
It might be more elegant, perhaps, to include a null-pointer constant in the C language proper. The suggestion has been raised any number of times. Nevertheless, one of these forms usually suffices for the ways in which <I>NULL</I> tends to be used.<P>
That leaves the macro <I>offsetof</I>. You use it to determine the offset in bytes of a structure member from the start of the structure. Standard C defines no portable way to write this macro. Each implementation, however, must have some <I>non-standard</I> way to implement it. An implementation may, for example, reliably evaluate some expression whose behavior is undefined in the C Standard.<P>
You can look on <I>offsetof</I> as a portable way to perform a nonportable operation. That is true of many macros and type definitions in the Standard C library. In each instance, the need to actually extend the C language proper is not quite there. That's why the header <I>&lt;stddef.h&gt;</I> exists.<P>
<h4><FONT COLOR="#000080"><A name="0280_0158">What The C Standard Says<A name="0280_0158"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0280_0159">7.1.6 Common Definitions <B><I>&lt;stddef.h&gt;</I><A name="0280_0159"></B></FONT></h4></P>
The following types and macros are defined in the standard header <I>&lt;stddef.h&gt;</I>. Some are also defined in other headers, as noted in their respective subclauses.<P>
The types are<P>
<pre>ptrdiff_t</pre>
which is the signed integral type of the result of subtracting two pointers;<P>
<pre>size_t</pre>
which is the unsigned integral type of the result of the <I>sizeof </I>operator; and<P>
<pre>wchar_t</pre>
which is an integral type whose range of values can represent distinct codes for all members of the largest extended character set specified among the supported locales; the null character shall have the code value zero and each member of the basic character set defined in 5.2.1 shall have a code value equal to its value when used as the lone character in an integer character constant.<P>
The macros are<P>
<pre>NULL</pre>
which expands to an implementation-defined null pointer constant; and<P>
<pre>offsetof(<I>type, member-designator</I>)</pre>
which expands to an integral constant expression that has type <I>size_t</I>, the value of which is the offset in bytes, to the structure member (designated by <I>member-designator</I>), from the beginning of its structure (designated by <I>type</I>). The <I>member-designator</I> shall be such that given<P>
<pre>static <I>type</I> t;</pre>
then the expression <I>&amp;(t.member-designator)</I> evaluates to an address constant. (If the specified member is a bit-field, the behavior is undefined.)<P>
<B>Forward references</B>: localization (7.4).<P>
<h4><FONT COLOR="#000080"><A name="0280_015A">Using <B><I>&lt;stddef.h&gt;</I><A name="0280_015A"></B></FONT></h4></P>
The uses for type and macro definitions in the header <I>&lt;stddef.h&gt;</I> are essentially unrelated. You include this header if you need one or more of the definitions it provides. Note, however, that only the type definition <I>ptrdiff_t</I> and the macro <I>offsetof</I> are unique to this header. You will often find that including another standard header will supply the definition you need. I discuss each of the type and macro definitions separately.<P>
<h4><FONT COLOR="#000080"><A name="0280_015B">Type <B><I>ptrdiff_t</I><A name="0280_015B"></B></FONT></h4></P>
When you subtract two pointers in a C expression, the result has type <I>ptrdiff_t</I>. It is an integer type that can represent negative values. Almost certainly it is either <I>int</I> or <I>long</I>. It is always the signed type that has the same number of bits as the unsigned type chosen for <I>size_t</I>, described below. (I said above that the <I>use</I> of these definitions is essentially unrelated. These two definitions are themselves highly related.)<P>
You can subtract two pointers only if they have compatible data-object types. One may have a <I>const</I> type qualifier and the other not, for example, but both must point to the same data-object type. The translator can check types and complain if they are inappropriate. It generally cannot verify the additional constraint &#151; both pointers must point to elements within the same array data object. Write an expression that violates this constraint and you often get a nonsense result from the subtraction.<P>
The arithmetic essentially proceeds as follows. The program represents both pointers as offsets in bytes from a common origin in a common address space. It subtracts the two offsets algebraically, producing a signed intermediate result. It then divides this intermediate result by the size in bytes of the data object pointed to by both pointers. If both pointers point to elements of a common array, the division will yield no remainder. The final result is the difference in subscripts of the two array elements, regardless of the type of the elements.<P>
That means, for example, that the expression <I>&amp;a[5]</I> - <I>&amp;a[2]</I> always has the value 3, of type <I>ptrdiff_t</I>. Similarly <I>&amp;a[2] - &amp;a[5]</I> always has the value -3. I assume in both cases that <I>a</I> is an array data object with at least 5 elements. (Pointer arithmetic is still defined for the element "just off the end" of an array, in this case <I>&amp;a[5]</I> if <I>a</I> has exactly 5 elements.)<P>
<I>ptrdiff_t</I> can be an inadequate type, in some instances. Consider an implementation where <I>size_t</I> is the type <I>unsigned int</I>. Then <I>ptrdiff_t</I> is the type <I>int</I>. Let's say further that you can declare a data object <I>x</I> as an array of <I>char</I> whose size <I>N</I> is greater than <I>INT_MAX</I> bytes. (The header <I>&lt;limits.h&gt;</I> defines the macro <I>INT_MAX</I> as the largest positive value representable by type <I>int.</I>) Then you might write something like:<P>
<pre>#inlcude &lt;limits.h&gt;
#include &lt;stddef.h&gt;

#define NINT_MAX+10
.....
   char x[N];
   ptrdiff_t n = &amp;x[N] - &amp;x[0];</pre>
What is the result of the expression that initializes <I>n</I>? An overflow occurs because the result is too large to represent as an integer of type <I>ptrdiff_t</I>. The result is undefined. You can't get around this problem. It is an intrinsic weakness of the Standard C language.<P>
Having painted this bleak picture, I must now tell you that such a situation rarely arises. It can only happen with arrays whose elements occupy only one byte. Typically, these are elements of type <I>char, signed char</I>, or <I>unsigned char</I>. Rarely are they anything else. Overflow can happen on small computer architectures where type <I>int</I> has, say, a 16-bit representation. It can also happen on architectures that let you create enormous data objects.<P>
Even then, you get an overflow only if you subtract pointers to two character array elements more than half an adddress-space apart. And even <I>then</I> the overflow may cause no problems because two's-complement arithmetic (the commonest form today) forgives many sins. Your program may well pass through all these perils and do what you intend anyway.<P>
I recite all this esoterica to justify a simple conclusion. You will seldom, if ever, have a need to use the type definition <I>ptrdiff_t</I>. It's only practical use that I can imagine is to store the result of a pointer subtraction or the difference between two subscripts. Usually, your program consumes such results on the fly. This type has the intrinsic limitation that it cannot reliably capture all results of pointer subtractions. That limits its usefulness in a portable program. It's nice to know that you can determine the type of the result of a pointer subtraction. But I don't know why you would care most of the time.<P>
<h4><FONT COLOR="#000080"><A name="0280_015C">Type <B><I>size_t</I><A name="0280_015C"></B></FONT></h4></P>
When you apply the <I>sizeof</I> operator in a C expression, the result has type <I>size_t</I>. It is an unsigned integer type that can represent the size of the largest data object you can declare. Almost certainly it is either <I>unsigned int</I> or <I>unsigned long</I>. It is always the unsigned type that has the same number of bits as the signed type chosen for <I>ptrdiff_t</I>, described above.<P>
Unlike <I>ptrdiff_t</I>, however, <I>size_t</I> is <I>very</I> useful. It is the safest type to represent any integer data object you use as an array subscript. You don't have to worry if a small array evolves to a very large one as the program changes. Subscript arithmetic will never overflow when performed in type <I>size_t</I>. You don't have to worry if the program moves to a machine with peculiar properties, such as 32-bit bytes and 1-byte <I>longs</I>. Type <I>size_t</I> offers the greatest chance that your code won't be unduly surprised. The only sensible type to use for computing the sizes of data objects is <I>size_t</I>.<P>
The Standard C library makes extensive use of the type <I>size_t</I>. You will find that many function arguments and return values are declared to have this type. That is a deliberate change over older practice in C that often led to program bugs. It is part of a general trend away from declaring almost all integers as type <I>int</I><P>
You should make a point of using type <I>size_t</I><I> anywhere</I> your program performs array subscripting or address arithmetic. Be warned, however, that unsigned-integer arithmetic has more pitfalls than signed. You cannot run an unsigned counter down until it goes negative &#151; it never will. If the translator doesn't warn you of a silly test expression, the program may loop forever. You may find, in fact, that counting down to zero sometimes leads to clumsy tests. You will occasionally miss the convenience of using negative values (such as <I>EOF</I>, defined in <I>&lt;stdio.h&gt;</I> to signal end-of-file) and testing for them easily. Nevertheless, the improvement in robustness is well worth the learning investment.<P>
<h4><FONT COLOR="#000080"><A name="0280_015D">Type <B><I>wchar_t</I><A name="0280_015D"></B></FONT></h4></P>
You write a <I>wide character constant</I> as, for example, <I>L'x'</I>. It has type <I>wchar_t</I>. You write a <I>wide character string literal</I> as, for example, <I>L"hello"</I>. It has type array of <I>wchar_t. wchar_t</I> is an integer type that can represent all the code values for all wide-character encodings supported by the implementation.<P>
For an implementation with only minimal support for wide characters, <I>wchar_t</I> may be as small as <I>char</I> For a very ambitious implementation, it may be as large as <I>unsigned long</I>. More likely, <I>wchar_t</I> is a synonym for an integer type that has at least a 16-bit representation, such as <I>short</I> or <I>unsigned short.</I><P>
You use <I>wchar_t</I> to represent <I>all</I> data objects that must hold wide characters. Several functions declared in <I>&lt;stdlib.h&gt;</I> manipulate wide characters, either one at a time or as part of null-terminated strings. You will find that many function arguments and return values in this group are declared to have this type. For this reason, the header <I>&lt;stdlib.h&gt;</I> also defines type <I>wchar_t</I>.<P>
<h4><FONT COLOR="#000080"><A name="0280_015E">Macro <B><I>NULL</I><A name="0280_015E"></B></FONT></h4></P>
The macro <I>NULL</I> serves as an almost-universal null pointer constant. You use it as the value of a data-object pointer that should point to no data object declared (or allocated) in the program. As I mentioned earlier, the macro can have any of the definitions <I>0, 0L</I>, or <I>(void *)0</I>.<P>
The last definition is compatible with any data object pointer. It is <I>not</I>, however, compatible with a function pointer. That means you cannot write:<P>
<pre>int (*pfun)(void) = NULL; /* WRONG */</pre>
The translator may complain that the expression type is incompatible with the data object you wish to initialize.<P>
An important traditional use for <I>NULL</I> has largely gone away. Early versions of the C language had no function prototypes. The translator could not check whether a function-call argument expression was compatible with the corresponding function parameter declaration. Hence, it could not adjust the representation of an expression that was compatible but had a different type (such as changing <I>tan (1)</I> to <I>tan(1.0)</I>. The programmer had to ensure that each argument value had the proper representation.<P>
Modern programming style is to declare function prototypes for <I>all</I> functions that you call. Nevertheless, an important context still exists where a function argument has no corresponding parameter declaration. That is when you call a function that accepts a variable argument list (such as <I>printf</I>, declared in <I>&lt;stdio.h&gt;</I>). For the extra arguments, the older C rules apply. A few standard type conversions occur, but mostly it is up to you, the programmer, to get each such argument right.<P>
In the earliest implementations of C, all pointers had the same representation. Usually, this representation was the same size as one of the integer types <I>int</I> or <I>long</I>. Thus, one of the decimal constants <I>0</I> or <I>0L</I> masqueraded nicely as a null pointer of any type. Define <I>NULL</I> as one of these two constants and you could assign it to an arbitrary pointer. The macro was particularly useful as an argument expression. It advertized that the expression had some pointer type and was a null-pointer constant.<P>
Then along came implementations where pointers looked quite different than any of the integer types. The only safe way to write a null pointer was with a type cast, as in <I>(char *)0</I>. If all pointers looked the same, you could still define <I>NULL</I> as, say, <I>(char *)0</I>. The macro still served as a useful way to write argument expressions.<P>
Standard C permits different pointer types to have different representations. You are guaranteed that you can convert any data object pointer to type pointer to <I>char</I> (or pointer to <I>signed char</I> or pointer to <I>unsigned char</I>) and back again with no loss of information. The newly introduced type pointer to <I>void</I> has the same representation as pointer to <I>char</I>, but is assignment-compatible with all data-object pointers. You use pointer to <I>void</I> as a convenient genetic data-object pointer type, particularly for declaring function arguments and return values.<P>
The safest definition for <I>NULL</I> on such an implementation is <I>(void *)0</I>. There is no guarantee, however, that pointer to <I>void</I> has the same <I>representation</I> as any other pointer. It isn't even assignment-compatible with function pointers. That means that you can't write <I>NULL</I> as a universal null-pointer constant. Nor can you safely use it as an argument expression in place of an arbitrary data-object pointer. It is guaranteed to masquerade properly only as a character pointer or as a generic pointer to <I>void</I>.<P>
One modern style of writing C is to avoid the use of <I>NULL</I> altogether. Write every null pointer constant religiously with an appropriate type cast, as in <I>(int *)0</I>. That can lead to wordy programs, but has the virtue of being most unambiguous. A modification of this style is to write a simple <I>0</I> as a null-pointer constant wherever possible. That can lead to programs clear enough to the translator but not to human readers.<P>
You will find the macro <I>NULL</I> defined in half a dozen different headers. It is easy for you to use the macro if you so choose. My only advice is that you choose a uniform style, as always, and stick with it.<P>
<h4><FONT COLOR="#000080"><A name="0280_015F">Macro <B><I>offsetof</I><A name="0280_015F"></B></FONT></h4></P>
You use the macro <I>offsetof</I> to determine the offset in bytes of a member from the start of the structure that contains it. That can be important if you wish to manipulate the individual members of a structure using a table-driven function.<P>
The result of this macro is an integer constant expression of type <I>size_t</I>. That means you can use it to initialize a static data object such as a constant table with integer elements. It is the only portable way to do so. If you write code such as:<P>
<pre>struct xx {
   int a, b;
   } x;
static size_t off =
      (char *)&amp;x-b (char *)&amp;x;</pre>
the behavior of the last declaration is undefined. Some implementations can choose to evaluate the initializer and obtain the obvious result. Others can choose to diagnose the expression instead.<P>
Nor can you reliably step from member to member by performing pointer arithmetic. The macros defined in <I>&lt;stdarg.h&gt;</I> let you step from argument to argument in a function that accepts a variable argument list. Those macros, or others like them, are not guaranteed to work within a structure. That's because the holes between structure members can differ from the holes between function arguments. They need not follow any documented rules, in fact.<P>
You need the macro <I>offsetof</I> to write code that is portable:<P>
<pre>#include &lt;stddef.h&gt;

struct xx {
   int a, b;
   } x;
static size_t off =
   offsetof(struct xx, b);</pre>
<h4><FONT COLOR="#000080"><A name="0280_0160">Implementing <B><I>&lt;stddef.h&gt;</I><A name="0280_0160"></B></FONT></h4></P>
<A href="list1.htm">Listing 1</a>
shows the file <I>stddef.h</I>. It is fairly simple. Once again, I use the internal header <I>&lt;yvals.h&gt;</I> to supply imformation that can vary among implementations. In this case, that information determines all three type definitions and the form of the macro <I>NULL</I>. The header <I>&lt;yvals.h&gt;</I> typically contains the following definitions:<P>
<pre>typedef int _Ptrdifft;
typedef unsigned int _Sizet;
typedef unsigned short _Wchart;
#define _NULL (void *)0</pre>
These definitions work for a wide variety of implementations. Nevertheless, certain implementations may require that one or more of them change. That's why I chose to parametrize them.<P>
<h4><FONT COLOR="#000080"><A name="0280_0161">Macro <B><I>offsetof</I><A name="0280_0161"></B></FONT></h4></P>
For the macro <I>offsetof</I> I chose to use a common trick. Many implementations let you type cast an integer zero to a data-object pointer type, then perform pointer arithmetic on the result. That is certainly undefined behavior, so you may well find an implementation that balks at this approach.<P>
The translator must indulge you a bit further for this definition of the macro to work properly. It must let you type cast the zero-based address back to an integer type, in this case <I>size_t</I> in disguise. Moreover, it must tolerate such antics in an integer constant expression. That's what you need to initialize static data objects.<P>
Luckily, quite a few translators grant such a triple indulgence. If you encounter one that doesn't, you will have to research how its implementors expect you to define <I>offsetof</I>. (Just list the file <I>&lt;stddef.h&gt;</I> that comes with the translator.) To comply with the C Standard, each implementation must provide <I>some</I> method.<P>
<I>This article is excerpted from P.J. Plauger</I>, The Standard C Library, <I>(Englewood Cliffs, N.J.: Prentice-Hall, 1992).</I><P>

<h4><a href="../../../source/1991/dec91/plauger.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
