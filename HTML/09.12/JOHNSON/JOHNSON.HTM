


<HTML>
<HEAD>

<TITLE>December 1991/X Window Programming</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocdec.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">X Window Programming<A name="027A_0150"><A name="027A_0150"></font></h2><P>
<h3 align="center"><A name="027A_0000"><A name="027A_0000">Part 6: Motif Programming</h3><P>
<h3 align="center"><font color="#800000">Eric F. Johnson and Kevin Reichard</font></h3><hr><blockquote><P>
<P><i><A name="027A_0000"><A name="027A_0000">Johnson and Reichard are<I></I> <I></I>authors of X Window Applications Programming, Advanced X Window Applications Programming, and Power Programming Motif (all<I></I> <I></I>MIS:Press). Johnson can be<I></I> <I></I>reached at <I>erc@pai.mn.org </I>via UUCP<I></I> <I></I>mail. Reichard's Compuserve address<I></I> <I></I>is 73670, 3422.</i></P><P>
In our series on the X Window System, we've shown how hard X programming can be and how X toolkits can dramatically decrease the amount of code you must write, though at a cost of significantly increased code complexity and program executable size. It's up to you to decide whether the opportunity to play with expensive graphics workstations is worth the extra cost (but how else would you justify all that extra RAM and disk space?).<P>
In Part 5 we covered a simple program using the Athena widget set. In this, our final installment, we'll show you how to implement the same program using a different widget set with a different look and feel, the Motif toolkit.<P>
<h4><FONT COLOR="#000080"><A name="027A_0151">What Is Motif?<A name="027A_0151"></FONT></h4></P>
Motif is a toolkit for writing graphical applications in the X Window System. It is a widget set, and like the Athena widgets, it sits on top of the X Toolkit Intrinsics (Xt for short). For this reason Motif code will look a lot like the Athena code presented in the last installment (that is to say, convoluted).<P>
Motif provides a 3D look-and-feel that makes Motif programs look dramatically better than Athena widget programs. Motif is a product of the Open Software Foundation, an industry body organized by Hewlett-Packard, Digital Equipment, and IBM, among others.<P>
Motif comprises more than merely a widget set: it is a look-and-feel style (with a compliance certification process), a window manager, and the toolkit widget set. Like the Athena widget set, it provides a look and feel on top of the generic Xt Intrinsics.<P>
<h4><FONT COLOR="#000080"><A name="027A_0152">What Is A Widget?<A name="027A_0152"></FONT></h4></P>
Widgets are C data structures &#151; very convoluted data structures &#151; that can be used as opaque types to create scroll bars, menus, and mouse-based interfaces. Widget sets are C libraries that sit on top of the Xt Intrinsics library, which, in turn, sits on top of the low-level X library (now you know why minimalist Motif programs typically run 700 Kbytes or larger).<P>
<h4><FONT COLOR="#000080"><A name="027A_0153">Initializing The Xt Intrinsics<A name="027A_0153"></FONT></h4></P>
Since Motif sits on top of the Xt Intrinsics, the first step in working with it is to initialize the Xt library using <I>XtInitialize ()</I> or <I>XtAppInitialize().</I><P>
<pre>#include &lt;X11/Intrinsic.h&gt;
parent = XtInitialize( shell_name,
        application_class,
        xrm_options,
        number_options,
        argc, argv );
Widget             parent;
String             shell_name;
String             application_class;
XrmOptionDescRec   xrm_options [];
Cardinal           number_options;
Cardinal           *argc;  /* note indirection */
String             argv [];</pre>
We've used <I>XtInitialized()</I>, because <I>XtAppInitialize()</I> is new with X11 Release 4 and many of you won't have this function available. If your system is at X Release 3 (or Motif 1.0), use <I>XtInitialize()</I>; if it's X11 Release 4 and Motif 1.1, use <I>XtAppInitialize()</I>. If you have to support both older R3-based systems and R4, we suggest using <I>XtInitialize()</I> since it works under both.<P>
<pre>#include &lt;stdio.h&gt;
#include &lt;X11/Intrinsic.h&gt;

main( argc, argv )

int     argc;
char    *argv [];

{
       Widget  parent;
       ...
       parent = XtInitialize( argv[0],
               "Motif1",
               NULL, 0,
               &amp;argc, argv );
       ...
}</pre>
At this point we've avoided using any Motif functions; instead, we've stayed with Xt functions because Motif makes heavy use of the Xt Intrinsics library. In fact, we'll use only a few Motif library functions in the sample program.<P>
For simplicity, we skip the <I>Xrm</I> (X Resource Manager) options. <I>Motif1</I> is the application's class name. The class name is used for finding application-specific customizations (called resources) and is usually the application name (in this case we call our program <I>motif1</I><I>)</I>, with an upper-case first letter (and sometimes an upper-case second letter as well).<P>
Once you've initialized the Xt Intrinsics, you get back a top-level shell widget which serves as the highest parent for all of your application's widgets. Since every widget you create must have a parent, your next level of widgets will use this as their parent widget. In our sample program we'll create three simple widgets.<P>
<h4><FONT COLOR="#000080"><A name="027A_0154">Motif <B><I>include</I></B> Files<A name="027A_0154"></FONT></h4></P>
The Motif <I>include</I> files are usually in the directory<I>/usr/include/Xm</I><I>,</I> while the standard X Window include files are usually in<I>/usr/include/X11</I>. Just about every Motif program will include <I>&lt;Xm/Xm.h&gt;</I>, as well as the Xt <I>include</I> files <I>&lt;X11/Intrinsic.h&gt;</I> and <I>&lt;X11/StringDefs.h&gt;</I>. Most Motif widgets have an extra widget-based <I>include</I> file, too, including the label widget, which uses <I>&lt;</I><I>Xm/Label. h</I><I>&gt;</I><I>.</I><P>
<h4><FONT COLOR="#000080"><A name="027A_0155">The Motif Label Widget<A name="027A_0155"></FONT></h4></P>
Like the Athena label widget, the Motif label widget (also called <I>XmLabel</I>) displays some text in a window. We use an Xt function, <I>XtCreateManagedWidget()</I> to create and manage a widget.<P>
<pre>String          name;
WidgetClass     widgetclass;
Widget          parent;
ArgList         args;
Cardinal        number_args;

Widget XtCreateManagedWidget( name,
        widgetclass,
        parent,
        args,
        number_args );</pre>
For the Motif label widget, we pass a class of <I>xmLabelWidgetClass</I><I>.</I> We could also use a Motif function called <I>XmCreateLabel()</I>, but <I>XtCreateManagedWidget()</I> is easier (and we used it in our last program).<P>
<pre>#include &lt;Xm/Xm.h&gt;
#include &lt;Xm/Label.h&gt;

Widget      label_widget, parent_widget;
Arg         args [20];
int         n;
XmString    motif_string;

n = 0;
XtSetArg( args[n], XmNlabelString, motif_string );
n++;

/* Create a label widget */
label_widget = XtCreateManagedWidget ("label",
             xmLabel_WidgetClass,
             pane_widget, args, n );</pre>
<h4><FONT COLOR="#000080"><A name="027A_0156">Setting Widget Options<A name="027A_0156"></FONT></h4></P>
We use <I>XtSetArg()</I> to set up options before we create the label widget. <I>XtSetArg()</I> sets one option (argument) for a widget, in an <I>Arg</I> structure.<P>
<I>XtSetArg()</I> takes three parameters: an <I>Arg</I> structure, a name for the resource being set, and a value. You normally needn't worry about these type definitions; instead, just follow the conventions when calling <I>XtSetArg()</I> (though this makes for some strange-looking code).<P>
<pre>n = 0;
XtSetArg( args[n], XmNlabelString, motif_string );
n++;</pre>
The macro <I>XtSetArg()</I> fills in one element of an <I>Arg </I>array (or just an <I>Arg</I> struct) with a name &#151; (<I>XmNlabelString</I>, which resolves to <I>labelString</I>) and a value &#151; <I>motif_string</I>, an <I>XmString</I>.<P>
<h4><FONT COLOR="#000080"><A name="027A_0157">Text Strings And Motif<A name="027A_0157"></FONT></h4></P>
As you may have guessed by looking at the code above, Motif normally doesn't use traditional C strings (a pointer to a character array with a <I>NULL</I> terminator), but instead uses something called an <I>XmString</I>, a Motif creation for dealing with multiline and perhaps multilingual text. Unfortunately, what this means is that the Motif programmer does a lot of work translating strings into the <I>XmString</I> format and back again to the traditional C format. To make matters worse, the <I>XmString</I> conversion routines can be terribly inefficient.<P>
To create an <I>XmString</I> out of a C string, we use <I>XmStringCreateLtoR()</I>. <I>The </I><I>LtoR</I> (for left to right) means that for every newline, <I>'\n'</I>, in our string, there will be the <I>XmString</I> equivalent of a new line marker, making for multiline text.<P>
<pre>XmString  motif_string;
char  c_string [100];

/* Set up XmString for
   label widget */
motif_string =
XmStringCreateLtoR( c_string,
     XmSTRING_DEFAULT_CHARSET );</pre>
Now we get our first true Motif function (notice that Motif functions, data types, and constants tend to start with <I>Xm</I>). We use the Motif default charset, <I>XmSTRING_DEFAULT_CHARSET</I><I>,</I> since we assume that most of our readers use western alphabets.<P>
We free an <I>XmString</I> when done, using another Motif library function, XmStringFree().<P>
<pre>XmStringFree( motif_string );</pre>
<h4><FONT COLOR="#000080"><A name="027A_0158">The Motif Pushbutton Widget<A name="027A_0158"></FONT></h4></P>
The Motif pushbutton widget is almost the same as the Athena Command widget introduced last time. This widget will call back one of your functions whenever the user clicks the mouse in the widget. To create a pushbutton widget, we use <I>XtCreateManagedWidget ()</I>, with a class of <I>xmPushButtonWidgetClass</I>.<P>
<pre>Widget  parent, quit_widget;
Arg     args [20];
int     n;

n = 0;
quit_widget = XtCreateManagedWidget ( "quit",
            xmPushButtonWidgetClass,
            pane_widget, args, n );</pre>
<h4><FONT COLOR="#000080"><A name="027A_0159">Motif Callback Functions<A name="027A_0159"></FONT></h4></P>
Pushbutton widgets aren't very useful unless function has been set up to be called back (hence callback function) whenever the pushbutton is activated, that is, when the user clicks a mouse button in the pushbutton widget. To set up a callback, we call <I>XtAddCallback ()</I>.<P>
<pre>Widget          widget;
String          callback_name;
XtCallbackProc  callback_function;
XtPointer       client_data;

XtAddCallback( widget,
     callback_name,
     callback_function,
     client_data );</pre>
Motif uses different names for its callbacks. In this case, we're using the "activate" callback, so we pass <I>XmNactivateCallback</I> and the address of our function.<P>
<pre>XtAddCallback( quit_widget,
             XmNactivateCallback,
      quit_callback, (caddr_t) NULL );</pre>
Our callback function, <I>quit_callback()</I>, receives three parameters from the X toolkit:<P>
<pre>void quit_callback( widget,
        client_data, call_data )

Widget widget;
caddr_t client_data;
caddr_t call_data;

{     /* quit_callback */
}     /* quit_callback */</pre>
<h4><FONT COLOR="#000080"><A name="027A_015A">Using The Paned Window Widget To Hold Other Widgets<A name="027A_015A"></FONT></h4></P>
If you create more than one widget, you'll need to create some form of "container" to hold your widgets, keep them in place, and figure out what to do when the user changes the size of the application's main window. Container widgets generally control the behavior of their children, the child widgets.<P>
The paned window widget is a simple Motif container widget that divides an area (in this case our whole application window) up into "panes," going across the window. The panes start at the top and work their way down to the bottom. Generally, there's a pane for each child of the paned window widget. The panes may also have, if you configure them, "sashes" &#151; lines with a little box (a place to grab on to with the mouse) near the right side. These sashes allow the user to resize any of the child panes. The Motif paned window widget acts almost the same as the Athena paned widget (described in Part 5).<P>
We create a paned window widget with a class of <I>xmPanedWindowWidgetClass.</I><P>
<pre>n = 0;
XtSetArg( args[n], XmNseparatorOn, True ); n++;
XtSetArg( args[n], XmNallowResize, True ); n++;

pane_widget = XtCreateManagedWidget( "pane",
             xmPanedWindowWidgetClass,
             parent, args, n );</pre>
This time, though, we need to set up two options in an <I>Arg</I> array before we create the paned window widget. First, we set the <I>XmNseparatorOn</I> resource (really <I>separatorOn</I>) to <I>True</I>, so that a "sash" appears to separate the child widgets of the paned window.<P>
Then we also set the <I>XmNallowResize</I><I> resource</I> (really <I>allowResize</I>) to <I>True</I>, which allows the user to resize our paned window.<P>
Remember that the paned window widget must be created first, as a child of the top-level shell widget returned from <I>XtInitialize()</I>. Then, the label and pushbutton widgets can be created as children of the paned window.<P>
<h4><FONT COLOR="#000080"><A name="027A_015B">Realizing Widgets And The Event Loop<A name="027A_015B"></FONT></h4></P>
We've shown that with X library programs nothing appears when you first create a window. To get something to appear, you have to map that window to the screen. This process is also necessary for X toolkit programs, but the process here is called "realizing" rather than mapping. Use <I>XtRealizeWidget()</I> to realize a widget and all of its managed children (all the children of our first parent widget are managed, since we used <I>XtCreateManagedWidget ()</I> to create them).<P>
<pre>Widget parent;
XtRealizeWidget( parent );</pre>
<h4><FONT COLOR="#000080"><A name="027A_015C">The Widget Event Loop<A name="027A_015C"></FONT></h4></P>
When you've created and realized all your widgets, call <I>XtMainLoop()</I> to handle all loops. (If you have Release 4, you'll probably want to use the newer <I>XtAppMainLoop()</I>, instead of <I>XtMainLoop()</I>.) This function takes over your application and loops on events &#151; forever. As each event comes in from the X server (or other input source), <I>XtMainLoop()</I> dispatches the event to the proper event handler for whatever widget the event occurred in. <I>XtMainLoop()</I> never exits, so you need to call <I>exit()</I> from a callback function to gracefully terminate your program, which we do in <I>quit_callback()</I>.<P>
<h4><FONT COLOR="#000080"><A name="027A_015D">A Motif Program<A name="027A_015D"></FONT></h4></P>
In <A href="list1.htm">Listing 1</a>,
 we've included a short Motif program that does everything we've covered this issue. This program is also very close to the Athena widget program of part 5. (We did this on purpose so you could compare the two toolkits and see how close they really are.)<P>
<h4><FONT COLOR="#000080"><A name="027A_015E">Compiling And Linking Motif Programs<A name="027A_015E"></FONT></h4></P>
Motif programs need the Motif library, Xm; the Xt Intrinsics library, Xt; and the X library, X11. Depending system, other libraries, especially networking libraries, may also be required. Most UNIX-based systems will compile the example program with a command like<P>
<pre>cc -o motif1 motif1.c -lXm -lXt -lX11</pre>
<h4><FONT COLOR="#000080"><A name="027A_015F">Problems<A name="027A_015F"></FONT></h4></P>
If you are running Motif 1.0 programs in a Release 4 X server, you may have problems when resizing the panes in the paned window widget (we know, we found out the hard way). Generally, your program will die with an X error. To get around this, you need to enable the X server's bug compatibilty mode, using the xset program:<P>
<pre>xset bc</pre>
<h4><FONT COLOR="#000080"><A name="027A_0160">Where To Get Motif<A name="027A_0160"></FONT></h4></P>
Motif is standard equipment on many systems, including those from Data General, HP, and the Santa Cruz Operation. This is by far the easiest way to get Motif, since no special effort is required.<P>
Officially, Motif is a product of the Open Software Foundation (OSF), a consortium including IBM, DEC, and Hewlett-Packard, and you can license the Motif source code directly from the OSF, generally for $1,000. If you are writing commercial Motif applications, it's likely that you'll want to license the Motif source code. OSF can be contacted at:<P>
Open Software Foundation<br>
11 Cambridge Center<br>
Cambridge, MA 02142 USA<br>
+1 617 621 8700<P>
Other vendors such as Quest and ICS also market Motif binaries, especially for Sun SPARCStations, since Sun Microsystems pushes Open Look, a competing X Window interface and libraries, over Motif.<P>
<h4><FONT COLOR="#000080"><A name="027A_0161">For More Information On Programming Motif<A name="027A_0161"></FONT></h4></P>
Johnson, Eric F. and Kevin Reichard, <I>Power Programming Motif</I>, MIS: Press, Portland, OR, 1990. ISBN 1-55828-059-6.<P>
Nye, Adrian and Tim O'Reilly, <I>X</I> <I>Toolkit Intrinsics Programming Manual</I>, Motif Edition, O'Reilly and Assoc., Sebastopol, CA, 1991. ISBN 0-937175-62-5.<P>
Young, Douglas A., <I>The X Window System: Programming and Applications with Xt</I>, OSF/Motif Edition, Prentice Hall, Englewood Cliffs, NJ, 1990. ISBN 0-13-497074-8.<P>
<h4><a href="list2.htm">Listing 2</a></h4>

<h4><a href="../../../source/1991/dec91/johnson.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
