


<HTML>
<HEAD>

<TITLE>December 1991/Object-Oriented Programming</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocdec.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">Object-Oriented Programming<A name="027C_0152"><A name="027C_0152"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="027C_0000"><A name="027C_0000">Roger Stringer</font></h3><hr><blockquote><P>
<P><i><A name="027C_0000"><A name="027C_0000">Roger Stringer, president of Marietta Systems, specializes in consulting in C and C++ development under DOS and UNIX. He can be reached at (404) 565-1560.</i></P><P>
This tutorial in object-oriented programming shows how to create a C++ class for record access to files. The files have fixed length records and can contain any value including <I>'\0'</I>. The class <I>binaryfile</I> can open and close these files, and read and write records. The class also supports record locking.<P>
In this article, I'll demonstrate the following OOP capabilities:<P>
<UL><li>Hidden data and functions</li>
<li>Function prototypes</li>
<li>Constructors and destructors</li>
<li>In-line functions</li>
<li>Function overloading</li>
<li>Default parameters for functions</li></UL>
The full source code is available from the C User Group shareware library.<P>
<h4><FONT COLOR="#000080"><A name="027C_0153">The <B><I>binaryfile</I></B> Class<A name="027C_0153"></FONT></h4></P>
In C++ a class with no function definitions resembles a <I>struct</I> in C, except for the keywords <I>private, protected</I> and <I>public</I>. The concepts of C++ classes are clearly derived from the C <I>struct</I>s, and the method to access the elements and functions of a C++ class are the same as for a C <I>struct</I>.<P>
An object stores its characteristics in the data elements of the class, for example the name and record length. In the class <I>binaryfile</I>, all this information is private to the class, except for the pointer <I>record</I> used to point to the memory location of the current record.<P>
<A href="list1.htm">Listing 1</a>
shows the <I>binaryfile</I> class. The element <I>mode</I> indicates the access mode of the file, defined as <I>enum FILEMODE</I> (explained in <A href="tab1.htm">Table 1</a>)
. The element <I>share</I> identifies whether the file is opened to allowed shared writing, reading or no shared access by other programs. <I>handle</I> is the system file handle number assigned to the file when open, and is set to -<I>1</I> if no file is open. The element <I>header</I> is the size of the file header, to be skipped in reading records from the file. <I>recnbr</I> is the current record number, starting from <I>1L. locked</I> is the number of the currently locked record if (&lt;0L). If (&gt;=0L) no record is currently locked. <I>record</I> is a pointer to the <I>record</I> area. <I>record</I> is a <I>NULL</I> pointer if unallocated.<P>
<h4><FONT COLOR="#000080"><A name="027C_0154">In-Line Functions<A name="027C_0154"></FONT></h4></P>
Hiding information by making it private prevents unauthorized modification, but also prevents you from viewing the information. <A href="list2.htm">Listing 2</a>
adds in-line functions to the class definition that provide read-only access to the private elements. For example, the in-line function <I>getheader( )</I> retrieves the size of the header area. Most compilers treat in-line functions as macros with very little overhead. It is good programming practice to use this facility only for simple functions with minimal actual code.<P>
<h4><FONT COLOR="#000080"><A name="027C_0155">Constructors And Destructors<A name="027C_0155"></FONT></h4></P>
A powerful aspect of C++ is the constructor and destructor. These functions handle initializing an object when it is created and performing cleanup when it is destroyed.<P>
The constructor has the same name as the class. The destructor has the same name prefixed by a tilde (~) character. If you do not define them explicitly, the compiler will automatically define default functions.<P>
<A href="list3.htm">Listing 3</a>
includes all the function definitions in the class definition and the code for the constructor and destructor functions. Because these functions are defined outside the class definition, they must be prefixed by the class name and the scope access operator (<I>::</I>).<P>
The constructor initializes the element <I>handle</I> to <I>-1</I>, and allocates the space for the record area, provided the maximum record size is less than 4096 bytes.<P>
The destructor ensures the file has been properly closed before deallocating the space for the record area.<P>
<h4><FONT COLOR="#000080"><A name="027C_0156">Opening And Closing The File<A name="027C_0156"></FONT></h4></P>
The function <I>binaryfile::fileopen()</I> in <A href="list4.htm">Listing 4</a>
opens a binary file, and <I>binaryfile::fileclose()</I>, naturally, closes it. The <I>fileopen()</I> function uses default parameters that allow the programmer to ignore less frequently used parameters. The file access mode defaults to <I>Readonly</I>, the size of the file's header area defaults to zero, and the file sharing mode defaults to allow only shared read access. The <I>fileopen()</I> function performs error checking, sets the access and sharing flags, opens the file, and (if successful) initializes the elements in the object.<P>
The <I>enum FILEMODE</I> is defined to identify, in clear English, the access mode of the file. The five modes I have defined appear in <A href="tab1.htm">Table 1</a>.
 The private utility function <I>countrecords()</I> establishes and sets the length of the file in records.<P>
The <I>fileclose()</I> function unlocks any locked record and closes the file.<P>
<h4><FONT COLOR="#000080"><A name="027C_0157">Reading Records From The File<A name="027C_0157"></FONT></h4></P>
C++ allows you to define different functions in the same class that have the same name, but that take different types of parameters. This feature is called <I>function overloading</I>. C++ differentiates between the functions of the same name by investigating the type of the arguments passed when the function is called.<P>
I've used function overloading to allow the function <I>fileread()</I> to read a file sequentially or by record number (see <A href="list5.htm">Listing 5</a>)
. The compiler deduces that a <I>fileread( )</I> function call with a long parameter is a command to read a specific record. For example, the statement<P>
<pre>x.fileread (45L)</pre>
reads record number 45 from <I>binaryfile</I> object <I>x</I>.<P>
Alternatively, the compiler interprets a <I>fileread( )</I> function call without a parameter or with an <I>enum READMODE</I> parameter to be a sequential read instruction. For example, the code<P>
<pre>{
binaryfile x(81); // 81 byte record file object
int i;
x.fileopen (filename);
for (i = x.fileread (LastRecord)
     ; i&gt;0 ;
     i = x.fileread
       (PreviousRecord)) {
    ... // code executed on each record
}
x.fileclose(); }</pre>
reads backwards through a file opened as binary object <I>x</I>.<P>
<h4><FONT COLOR="#000080"><A name="027C_0158">Writing Records To File<A name="027C_0158"></FONT></h4></P>
When a file is opened in <I>Append</I> or <I>Recreate</I> modes, all writing occurs by adding a new record to the end of the file. In <I>Update</I> or <I>AnyWrite</I> modes, the programmer can rewrite the current record, overwrite any existing record in the file or (in <I>AnyWrite</I> mode only) add a new record to the file. Again, I've employed function overloading to create two versions of the <I>filewrite( )</I> function &#151; one without a parameter, and one with a specific record number for <I>Update</I> or <I>AnyWrite</I> mode access. See <A href="list6.htm">Listing 6</a>.
<P>
The command<P>
<pre>x.filewrite()</pre>
in <I>Append</I> or <I>Recreate</I> modes appends a new record to the file object <I>x</I>. The same command in <I>Update</I> or <I>AnyWrite</I> modes rewrites the current record.<P>
The command<P>
<pre>x.filewrite (k)</pre>
where <I>k</I> is a <I>long</I>, writes out to record <I>k</I>. If <I>k</I> is greater than the current record count and the access mode is <I>AnyWrite</I>, the record is appended to the file. For example, the code in <A href="list7.htm">Listing 7</a>
reads sequentially through a fiLe and updates each record.<P>
<h4><FONT COLOR="#000080"><A name="027C_0159">File Sharing And Record Locking<A name="027C_0159"></FONT></h4></P>
The examples in this article support file sharing and record locking using the functions and flags supplied by Borland's Turbo C++ for MS-DOS (<A href="list8.htm">Listing 8</a>)
. Zortech's <I>locking()</I> function is slightly different. UNIX implementations are again different. The record locking scheme used here is quite simplistic, locking only one record per file, and does not implement the "set" concept of locking a set of records for subsequent processing.<P>
The OOP concept of encapsulation hides the complexities and intricacies of different environments and implementations from the user. If an implementation-specific or enhanced locking or file sharing scheme requires that different data be stored in the object, you can make the change within the private data without altering the way you use the class. This is data encapsulation. The programmer knows <I>exactly</I> which functions can access the private data, and any change to this data format has specific scope and manageable consequences.<P>

<h4><a href="../../../source/1991/dec91/stringer.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
