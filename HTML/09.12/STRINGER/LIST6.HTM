<HTML><HEAD>
<TITLE>December 1991/Object-Oriented Programming/Listing 6</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 6 Functions to Write Records</A></h4>
<pre>//  (See <a href="list3.htm">Listing 3</a> for the class definition)

//  =============================================
//  For a file opened in Append or Recreate modes this
//      appends new records to the end of the file.
//  For a file opened in Update or AnyWrite modes this
//      rewrites the current record.
//
int binaryfile::filewrite () {
   int ret;
   if (mode == Readonly) return -2; // Error trap
   if (mode == Update || mode == AnyWrite) {
      return filewrite (recnbr); // rewrite current record
   }
   if ((ret = write (handle, record, length)) != -1) {
      recnbr = (share == WriteShared ? countrecords() : (count += 1L));
   }
   return ret;
}

//  =============================================
//  Function to write out a specific record in class
//      binaryfile. This function can only be used if
//      the file was opened in Update or AnyWrite modes.
//  To append to a file (AnyWrite mode only) use any
//      very large record number
//
int binaryfile::filewrite (long number) {
   int ret;
   if ((mode) != Update &amp;&amp; mode != AnyWrite) ||
      number &lt;= 0 ||
      (mode == Update &amp;&amp; number &gt; count))
      return -2; // Parameter error trap
   if (number &gt; count) number = countrecords() + 1;
   if (number != locked &amp;&amp; share == WriteShared) {
     if (lockrecord (number)) return -10;
   }
   lseek (handle, ((number - 1) * length) + header, SEEK_SET);
   if ((ret = write (handle, record, length)) != -1L &amp;&amp;
      number &gt; count) count += 1L; // new record at end of file
   unlockrecord ();
   recnbr = number;
   return ret;
}
// End of File
</pre>
</BODY>
</HTML>
