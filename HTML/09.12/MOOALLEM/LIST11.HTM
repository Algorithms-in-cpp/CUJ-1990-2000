<HTML><HEAD>
<TITLE>December 1991/3-D Solid Modeling/Listing 11</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 11 (solxfo.c)</A></h4>
<pre>#include "solid.h"

void transform_object(struct solid_obj *obj_ptr)
/*  Performs scaling, translation, rotation. */
{
   struct facet *facet_ptr;
   struct vertex *vertex_ptr;
   int vertex_i, coord_index, facet_index;
   float new_coord[3]; /* computed x, y, z coords */
   float xa, ya, za; /* temporary variables */
   struct vector normal; /* vector normal to facet */

   /* perform scaling, then rotation, then translation
      in that order, for each vertex in object */
   for (vertex_ptr = obj_ptr-&gt;vertex_first, vertex_i =
      0; vertex_i &lt; defn_ptr[obj_ptr-&gt;obj_type]-&gt;
      vertex_count; ++vertex_ptr, ++vertex_i) {
      /* loop for each vertex in object */
      /* scaling */
      for (coord_index = 0; coord_index &lt; 3;
         ++coord_index) {
         new_coord[coord_index] = vertex_ptr-&gt;coord
            [coord_index] * obj_ptr-&gt;scale;
      }
      /* rotation */
      xa = cos(obj_ptr-&gt;YAW) * new_coord[0] -
         sin(obj_ptr-&gt;YAW) * new_coord[2];
      za = sin(obj_ptr-&gt;YAW) * new_coord[0] +
         cos(obj_ptr-&gt;YAW) * new_coord[2];
      new_coord[0] = cos(obj_ptr-&gt;ROLL) * xa +
         sin(obj_ptr-&gt;ROLL) * new_coord[1];
      ya = cos(obj_ptr-&gt;ROLL) * new_coord[1] -
         sin(obj_ptr-&gt;ROLL) * xa;
      new_coord[2] = cos(obj_ptr-&gt;PITCH) * za -
         sin(obj_ptr-&gt;PITCH) * ya;
      new_coord[1] = sin(obj_ptr-&gt;PITCH) * za +
         cos(obj_ptr-&gt;PITCH) * ya;

      /* translation; also insert new coordinates
      into object */
      for (coord_index = 0; coord_index &lt; 3;
         ++coord_index) {
         new_coord[coord_index] += obj_ptr-&gt;
            xlate[coord_index];
         vertex_ptr-&gt;coord[coord_index] =
            new_coord[coord_index];
      }
   }

   /* perform visibility test and projection on each
   facet in object */
   for (facet_ptr = defn_ptr[obj_ptr-&gt;obj_type]-&gt;
      facet_first, facet_index = 0; facet_index &lt;
      defn_ptr[obj_ptr-&gt;obj_type]-&gt;facet_count;
      ++facet_index, facet_ptr = (struct facet *)
      ((char *)facet_ptr + sizeof(struct facet) +
      facet_ptr-&gt;vertex_count * sizeof(INDEX))) {
      /* loop for each facet in object */
      normal = normal_vector(obj_ptr, facet_ptr);
      vertex_ptr = obj_ptr-&gt;vertex_first + facet_ptr
         -&gt;vertex index[0];
      obj_ptr-&gt;visible[facet_index] = (normal.x *
         vertex_ptr-&gt;coord[0] + normal.y *
         vertex_ptr-&gt;coord[0] + normal.z * (proj_z -
         vertex_ptr-&gt;coord[0])) &gt; 0.0;
      display_facet(obj_ptr, facet_ptr, FALSE,
         obj_ptr-&gt;visible[facet_index]);
         /* projection without display */
   }
}
/* End of File */</pre>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
</BODY>
</HTML>
