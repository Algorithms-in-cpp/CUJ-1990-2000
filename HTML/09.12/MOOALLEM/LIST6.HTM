<HTML><HEAD>
<TITLE>December 1991/3-D Solid Modeling/Listing 6</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 6 (solmko.c)</A></h4>
<pre>#include "solid.h"

struct solid_obj *make_object(int this_obj_type)
/*  Constructs descriptor for instance of a specified
   object type. Initializes scaling factor,
   translation and rotation. */
{
   struct solid_obj *this_obj_ptr, *prev_obj_ptr,
      *next_obj_ptr;
   struct vertex *vertex_ptr1, *vertex_ptr2;
   int coord_index, vertex_index;

   if (defn_ptr[this_obj_type] == (struct obj_defn *)
      NULL) /* must construct defininition */
      define_solid(this_obj_type);
   if ((this_obj_ptr = (struct solid_obj *)malloc
      (sizeof(struct solid_obj) + (defn_ptr
      [this_obj_type]-&gt;facet_count) * sizeof(BOOL)))
      == NULL) /* construct object descriptor */
      quit(ERR_MEMORY, _FILE_, _LINE_);
   this_obj_ptr-&gt;obj_type = this_obj_type;
   this_obj_ptr-&gt;scale = 1.0;
   for (coord_index = 0; coord_index &lt; 3;
      ++coord_index) {
      this_obj_ptr-&gt;xlate[coord_index] = 0.0;
      this_obj_ptr-&gt;rotate[coord_index] = 0.0;
   }
   if ((this_obj_ptr-&gt;vertex_first =
      (struct vertex *)malloc(defn_ptr[this_obj_type]
      -&gt;vertex_count * sizeof(struct vertex))) ==
      NULL) /* construct vertex descriptors */
      quit(ERR_MEMORY, _FILE_, _LINE_);

   /* copy vertices from definition to instance */
   for (vertex_ptr1 = this_obj_ptr-&gt;vertex_first,
      vertex_ptr2 = defn_ptr[this_obj_type]-&gt;
      vertex_first, vertex_index = 0; vertex_index &lt;
      defn_ptr[this_obj_type]-&gt;vertex_count;
      ++vertex_index, ++vertex_ptr1, ++vertex_ptr2)
      for (coord_index = 0; coord_index &lt; 3;
         ++coord_index)
         vertex_ptr1-&gt;coord[coord_index] =
            vertex_ptr2-&gt;coord[coord_index];
         this_obj_ptr-&gt;obj_next =
            (struct solid_obj *)NULL; /* pointer
            to next object */
   if (obj_first == (struct solid_obj *)NULL) /* this
      is first object */
      obj_first = this_obj_ptr;
   else {
      for (prev_obj_ptr = next_obj_ptr = obj_first;
         next_obj_ptr != (struct solid_obj *)NULL;
         prev_obj_ptr = next_obj_ptr, next_obj_ptr
         = next_obj_ptr-&gt;obj_next); /* find previous
         last object */
      prev_obj_ptr-&gt;obj_next = this_obj_ptr;
   }
   return(this_obj_ptr);
}
/* End of File */
</pre>
</BODY>
</HTML>
