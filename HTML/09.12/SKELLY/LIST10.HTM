<HTML><HEAD>
<TITLE>December 1991/Creating C++-Like "Objects" In C/Listing 10</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 10</A></h4>
<pre>/* CIRCLE PACKAGE <I>-</I> contains CIRCLE typedef,
     private data and action package
     definitions */
#include &lt;stdlib.h&gt;


/* CIRCLE type has only two elements */
typedef struct circle
   {
   /* void * pointer to private data */
   void *pprivate;

   /* pcact is used as a pointer to an
        array of action functions */
   int (**pcact)();
   } CIRCLE;


/* private data struct is static */
static struct circle_pri_data
   {
   int color;
   };

/* get and setcolor member functions */
static int cir_get_color(CIRCLE *pc)
   {
   return
      ((struct circle_pri_data *)
        (pc<I>-</I>&gt;pprivate))-&gt;color;
   }

static int cir_set_color(CIRCLE *pc, int col)
   {
   ((struct circle_pri_data *)
        (pc<I>-</I>&gt;pprivate))<I>-</I>&gt;color = col;
   }


/* now define and initialize action package */
static (*cact[])() =
   { circle_getcolor, circle_setcolor };


/* the constructor is public, callable from
     another file the constructor creates
     space for the private data, and inits
     the new circle's action pointer to the
     action package */
constructor(CIRCLE *pc, int color)
   {
   /* first make space for the private data */
   if (!(pc<I>-</I>&gt;pprivate =
     malloc(sizeof(struct circle_pri_data))))
        exit(<I>-</I>1);

   /* cast pprivate to point to private data
      to set color */
   ((struct circle_pri_data *)
     (pc<I>-</I>&gt;pprivate))<I>-</I>&gt;color = color;

   /* finally, hook up the new circle to the
     action package */
   pc<I>-</I>&gt;pact = cact;
   }

/* the public destructor frees the allocated
     private storage */
destructor(CIRCLE *pc) {
   free(pc<I>-</I>&gt;pprivate);
   }

/* End of File */</pre>

</BODY>
</HTML>
