


<HTML>
<HEAD>

<TITLE>December 1991/Creating C++-Like "Objects" In C</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocdec.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">Creating C++-Like "Objects" In C<A name="027E_0154"><A name="027E_0154"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="027E_0000"><A name="027E_0000">Christopher Skelly</font></h3><hr><blockquote><P>
<P><i><A name="027E_0000"><A name="027E_0000">Christopher Skelly is chief executive officer and co<I>-</I>founder of Insight Resource Inc. Insight provides C, Advanced C and C++ training. Insight Resource also produces the popular KO<I>-</I>PILOT line of help and training help products, which Brit Hume called "the best add<I>-</I>ins ever written." Mr. Skelly can be reached at 914<I>-</I>631<I>-</I>5032.</i></P><P>
With all the talk about objects these days, one might expect the Standard C definition of "object" to be somewhat more glamorous than <I>a region of storage</I>. Yet that is precisely how Standard C and the emerging C++ standard define object in its most fundamental sense, as a region of storage. Not even in terms of memory or disk storage, mind you, just plain storage.<P>
If an object is just a region of storage, with no particular characteristics whatsoever, what then should we call the instances of C++ classes or other object<I>-</I>oriented systems? I would say that if "overloading" refers to using the same word or operator for different things, then the word "object" has certainly been overloaded. For some, an object is an elegant thing, combining persistence, concurrency, multiple inheritance and a host of rarified attributes. Anything less is less than an object. Others, however, will be satisfied with the qualities of abstraction and data hiding.<P>
Some say C is already oriented towards objects with its <I>struct</I> feature. Add a few headers, they suggest, and C is practically as object<I>-</I>oriented as C++. Others point out that an object must have both data and functions, difficult to do with C <I>structs</I>.<P>
No doubt, the overloaded term "object" will continue to be used frequently to describe class instances. In the perennial search to escape from the demon of "fuzzy<I>-</I>thinking," I will use the term "class<I>-</I>object" to identify a typical C++ class instance.<P>
Class objects in C++ offer C programmers a valuable set of added resources, the two most basic of which are member functions and data hiding. All of the more spectacular features of C++, such as inheritance and polymorphism, depend on the underlying interface of member functions and hidden private data. The fundamental resource provided by C++ class objects is the ability to perform a general action, and yet have that action affect only the private data of one particular class object.<P>
The C programmer can create member functions and hidden data as well. This article explores how to add member functions and private data into a simple C <I>struct</I>, and in so doing, illustrate some of the workings of a C++ pre<I>-</I>compiler. The C++ cfront pre<I>-</I>compiler translates all of C++ into corresponding C. You'll see that cfront must do a great deal more than simple preprocessing to generate the C code for C++ objects.<P>
Adding class object features to simpler C objects is a challenging endeavor. How do you link up functions to <I>structs</I>, and have the functions act only on the particular information included in the specific linked<I>-</I>up structure? That's how C++ member functions behave. Pressing the question, how can you have private data members in C <I>structs</I>? Unlike C++, C has no keyword <I>private</I>. Data in a C <I>struct</I> has the same scope as the <I>struct</I> itself. On the surface, there appears to be no way to "hide" data inside a C <I>struct</I>. Yet C's resources are in fact powerful enough to support both member functions and hidden data in <I>structs</I>.<P>
<h4><FONT COLOR="#000080"><A name="027E_0155">Creating Member Functions<A name="027E_0155"></FONT></h4></P>
Developing member functions in C must be done in two parts. First, you must associate functions with a <I>struct</I> type. Then you must make these functions operate only on the particular "object" or <I>struct</I> to which they are attached.<P>
We'll use a simple <I>CIRCLE</I> type, with four members to which I'll add member functions and hidden data. The techniques illustrated here can be applied to any type of data holding <I>struct</I>.<P>
<pre>typedef struct { int x, y; int radius, color; }
      CIRCLE;</pre>
The primary mechanism in creating member functions will be the sometimes infamous pointer to function. I say infamous because while pointers to functions are certainly one of C's most powerful resources, they are also potentially one of the trickiest. This sad fact is attested to by any number of crashed hard disks with overwritten File Allocation Tables.<P>
<pre>/* pfi is a pointer to a *
   function returning int */
int (*pfi) (void);</pre>
The value of a pointer to function in C or any language is the ability to delay deciding exactly what function will be executed until the program itself is executed, at run<I>-</I>time. This "late<I>-</I>binding" of pointers to functions allows action strategies that are much more sophisticated than would be possible if every action were hard<I>-</I>wired into the source program. Complicated software, compilers for instance, makes heavy use of pointers to functions for all manner of purposes. New operators in the compiled language may be implemented as functions and accessed by means of a table of function pointers.<P>
When adding member actions to the <I>CIRCLE</I> type, your first thought might be to simply add a pointer to a function, say a <I>getcolor</I> function that returns the current circle color.<P>
<pre>typedef struct { int x, y; int radius, color;
  int (*getcolor)(void); } CIRCLE;</pre>
Now every <I>CIRCLE</I> has its own pointer to a <I>getcolor</I> function. Every time you declare a circle you will have to explicitly initialize <I>getcolor</I> to some function you have written.<P>
<pre>int foo(void);
CIRCLE c;
c.getcolor = foo;</pre>
Furthermore, every <I>CIRCLE</I> will have its own specific pointer to its own specific <I>getcolor</I> function. But suppose you later decide to modify the action performed by the <I>getcolor</I> function? Now you must deal with hundreds of little <I>struct</I>s, each running around with its own little action package. Instead, it would be very helpful to abstract the <I>action</I> portion of the <I>struct</I> from the rest of the <I>struct</I>. Then changing the action portion might require no changes at all to the rest of the <I>struct</I>.<P>
A <I>CIRCLE_ACTIONS struct</I> will now go along with the <I>CIRCLE</I> type.<P>
<pre>typedef struct { int (*getcolor) (void);
  int (*setcolor) (void);
  } CIRCLE_ACTIONS;</pre>
This first fundamental abstraction separates the actions of circles from the circles themselves. Now you can refine the action package without worrying about the rest of <I>CIRCLE</I>s for a while.<P>
Of course, you must redefine <I>CIRCLE</I> to connect with <I>CIRCLE_ACTIONS</I>, by adding a pointer to the action package:<P>
<pre>typedef struct {
  int x, y;
  int radius, color;
  /* pointer to CIRCLE_ACTION struct */
  CIRCLE_ACTION *pcact;
  } CIRCLE;</pre>
Now you can hook all <I>CIRCLE</I>s with the <I>pcact</I> pointer to a single <I>CIRCLE_ACTIONS struct</I>. But there are problems. Right now, the *<I>getcolor</I> function doesn't know which particular <I>CIRCLE</I> it should operate upon. We'll remedy that problem by passing *<I>getcolor</I> the address of the particular circle to access.<P>
<pre>typedef struct { /* *getcolor will work on *pc */
      int (*getcolor) (CIRCLE *pc);
  int (*setcolor)(CIRCLE *pc, int val);
  } CIRCLE_ACTIONS;</pre>
With the definition of a <I>CIRCLE</I> and its actions out of the way, the code in <A href="list1.htm">Listing 1</a>
can create a circle <I>c</I>.<P>
Now you can access <I>c</I>'s data directly through its own member function.<P>
<pre>int i = *c.pcact<I>-</I>&gt;getcolor(&amp;c);</pre>
<I>i</I> receives the value 4, the color assigned to <I>c</I>. Our object<I>-</I>oriented system has gained the beginnings of member functions.<P>
By the way, few will say that the syntax of this last construction is not a bit tricky. One of the great resources provided by C++ is the syntactical ease with which you can perform complicated actions like this.<P>
Translated into "formal English," the above assignment to <I>i</I> means:<P>
Access the <I>getcolor</I> pointer in the <I>CIRCLE_ACTION struct</I><I> </I>pointed to by <I>c's pcact</I> pointer. Execute a function located at the address stored in this <I>getcolo</I>r pointer. Pass the executing function the address of this specific <I>CIRCLE</I>. When the <I>*getcolor</I> function executes, it returns the color of the <I>CIRCLE</I> that called it.<P>
<I>CIRCLE</I> and <I>CIRCLE_ACTIONS</I> can evolve independently, yet work together to provide the behavior of member functions. As a next step, I'll organize the action package a little differently, and implement a simple message system between the <I>CIRCLE</I> definitions file and the application program.<P>
I will use an array of pointers to functions in the <I>CIRCLE_ACTIONS typedef</I>. I will also place the definitions of both <I>CIRCLE</I>s and <I>CIRCLE_ACTIONS</I> in a header file called <I>OBJ.H</I>, shown in <A href="list2.htm">Listing 2</a>.
<P>
Now actions in the action package can be executed with a simple index into the <I>pactions</I> array. To call a member function in the application you no longer need to know the actual member name, only the index. I will use <I>#define</I>s for creating the index. A "class object pre<I>-</I>compiler" would create a header file of the <I>#define</I>s for you. Right now I will just show the new "messages" as simple <I>#define</I>s, one each for <I>GETCOLOR</I> and <I>SETCOLOR</I>.<P>
It is also time to separate the internals of the <I>CIRCLE_ACTION</I> package from the application code that uses <I>CIRCLE</I>s. I'll create two source files, <I>OBJ.C</I> and <I>CIRCLE</I>.<I>C</I> to store the application code and the developing <I>CIRCLE_ACTIONS</I> function definitions respectively. For the moment, both files include <I>OBJ.H</I>, which contains <I>typedef</I>s for both <I>CIRCLE</I>s and <I>CIRCLE_ACTIONS</I>. <A href="list3.htm">Listing 3</a>
and <A href="list4.htm">Listing 4</a>
contain the initial versions of <I>OBJ.C</I> and <I>CIRCLE.C.</I> Note that the array of pointers to functions in the <I>CIRCLE_ACTIONS</I> package is initialized exactly as before.<P>
There are several problems still to solve. For instance, right now there is nothing special about the functions in the action package. As global functions, <I>circle_getcolor()</I> and <I>circle_setcolor</I> could be used without declaring a <I>CIRCLE</I> object at all. Member functions should be accessible only through class objects. How can you hide functions effectively in C?<P>
At moments like this, I remember something I tell our C and C++ students: "There are times when even after studying C for years, the light dawns on some internal facet in such a way that I imagine seeing a sign in the landscape which says 'Dennis Ritchie was here.'" The resource necessary for hiding functions already exists in C.<P>
Storage classes provide the tool for hiding the action package from all non<I>-</I>class oriented access. I will use file<I>-</I>static functions, and later, file<I>-</I>static variables, to hide the internals of the <I>CIRCLE</I> definition from the rest of the program. I will isolate the "member functions" by giving them static storage class in the file <I>CIRCLE.C.</I> Because of their "file static" scope, functions like <I>circle_getcolor()</I> are visible only inside the file <I>CIRCLE.C.</I> This file<I>-</I>specific visibility is all that is necessary to hook the function addresses into the <I>CIRCLE_ACTIONS struct</I>, which itself is defined in <I>CIRCLE.C.</I> The <I>CIRCLE_ACTIONS struct</I> itself can still be accessed directly from another file, but I'll rememdy that lingering vulnerability shortly. In a class<I>-</I>object oriented system, the application program must interact with <I>CIRCLE</I> objects only through the defined member functions.<P>
<A href="list5.htm">Listing 5</a>
shows the new <I>CIRCLE_ACTIONS</I> definition file, called <I>CIRCLE.C.</I> The application program in <A href="list6.htm">Listing 6</a>
is a small but illustrative main function, in a file called <I>OBJ.C.</I> These listings are more object<I>-</I>oriented than <A href="list3.htm">Listing 3</a>
and <A href="list4.htm">Listing 4</a>
by far. The applications define and create <I>CIRCLE</I>s and use the member functions of the action package to access their data. The member functions' indices must be documented at some point for others to know what the class interface is, just as they would have to be in any other class<I>-</I>object oriented system.<P>
The system still has problems though. For one thing the syntax requires a hefty built<I>-</I>in "Cortex Compiler," or CC as I like to call it. Your Cortex Compiler is your ability to read a code fragment and know exactly what the compiler will make of it, character by character. Your Cortex Compiler is the most valuable pure C resource I know of. Still, syntax simplification is necessary if we're to survive the complexity of these new C "objects."<P>
A greater problem now, however, is that all the circle's data is wide open to the public. No one should be able to get inside an object with a routine access or assignment. You must have private data for each object.<P>
At this point it becomes clear that part of the problem is the method by which each <I>CIRCLE</I> object is initialized. The initialization is too simple. Rather than just assigning a few members when a class object is created, you must allocate some private storage for each new object's private data.<P>
The system needs what in C++ is called a <I>constructor</I>. A constructor is a function that is called whenever a class object is created. The constructor creates the unique identity of the new class object, as well as giving it whatever private storage it needs. The constructor, of course, will also handle the simple assignments that initialize a <I>CIRCLE</I>. Finally, creating a constructor function lets you hide the <I>CIRCLE_ACTIONS struct</I> from any access outside <I>CIRCLE.C.</I><P>
Look at the changes to <I>CIRCLE.C</I> and <I>OBJ.C</I> in <A href="list7.htm">Listing 7</a>
and <A href="list8.htm">Listing 8</a>.
 Observe that only the constructor is external, allowing the constructor to be called whenever a <I>CIRCLE</I> is created in any file. The constructor connects each circle to the generic action package for <I>CIRCLE</I>s. Most of the internals of the <I>CIRCLE</I> class are now hidden from the application.<P>
Now I'll let the constructor allocate memory for the private data variable in each circle. The member functions will always access the correct <I>CIRCLE</I>'s data. A "destructor" will have to free the circle's private allocated storage when the circle dies. Note that in our example, the constructor and destructor are called explicitly. In C++ these functions are called automatically when objects are created and destroyed. The automatization of the constructor/destructor process is something else the pre<I>-</I>compiler would have to handle, inserting calls after object definitions and when objects go out of scope.<P>
The final source files, <I>OBJ.C</I> and <I>CIRCLE.C</I>, are shown in <A href="list9.htm">Listing 9</a>
and <A href="list10.htm">Listing 10</a>.
 The <I>CIRCLE</I> constructor now allocates some private storage. A corresponding destructor function frees the storage when <I>CIRCLE</I>s go out of scope.<P>
In <A href="list10.htm">Listing 10</a>
a new, file<I>-</I>static <I>struct, struct cir_pri_data</I>, stores all the information about a circle's private data. A <I>CIRCLE</I>'s private data is linked to a <I>CIRCLE</I> by the <I>pprivate</I> pointer to <I>void</I>. You therefore cannot use the <I>pprivate</I> pointer to directly access private data. Only in the file <I>CIRCLE.C</I> is the internal structure of <I>struct cir_pri_data</I> known. Several times in <A href="list10.htm">Listing 10</a>,
 <I>CIRCLE.C</I> casts the <I>void</I> * <I>pprivate</I> to point at a <I>struct cir_pri_data</I> in order to access the <I>CIRCLE</I>'s hidden data. Note that <I>CIRCLE</I> users, writing their own main functions, have no way to access a <I>CIRCLE</I>'s private data except through the defined <I>GETCOLOR</I> and <I>SETCOLOR</I> indices. Our <I>C structs</I> now have both member functions and their own hidden data.<P>
<h4><FONT COLOR="#000080"><A name="027E_0156">Conclusion<A name="027E_0156"></FONT></h4></P>
In this article, I have presented some of the hows of implementing an object<I>-</I>oriented system. I have not yet taken on the next task of examining how to put the new C "objects" to work. I would probably want to create a compiler or interpreter to allow a programmer using these new C "classes" to refer to them with a simpler syntax than the examples here! The compiler will read something written in the new language and translate the code into C. The programmer will then compile the C code and be done. I would actually be creating a pre<I>-</I>compiler, but one that does a lot more than handle a few <I>#define</I>s. The pre<I>-</I>compiler will create the appropriate temporary files to segregate the different class definitions from each other and from the application. The pre<I>-</I>compiler will also generate the necessary header for the type definitions and the message codes for C class objects to use with their member functions. Finally, the pre<I>-</I>compiler will make sure that the constructor and destructor functions are called whenever class objects are created or destroyed.<P>
I might extend this new language and give it a host of other features, such as polymorphism, multiple inheritance, and overloaded operators. I might even think of calling this new language C++, until I happen upon the small sign neatly tucked into the landscape that says "Stroustrup was here."<P>

<h4><a href="../../../source/1991/dec91/skelly.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
