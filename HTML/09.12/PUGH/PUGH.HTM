


<HTML>
<HEAD>

<TITLE>December 1991/Questions & Answers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocdec.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Questions &amp; Answers<A name="0286_015C"><A name="0286_015C"></font></h2><P>
<h3 align="center"><A name="0286_0000"><A name="0286_0000">Using <I>typedef</I></h3><P>
<h3 align="center"><font color="#800000">Ken Pugh</font></h3><hr><blockquote><P>
<P><i><A name="0286_0000"><A name="0286_0000">Kenneth Pugh, a principal in Pugh-Killeen Associates, teaches C language courses for corporations. He is the author of C Language<I></I> <I></I>for Programmers and All On C, and was a member on the ANSI C committee. He also does custom C programming for<I></I> <I></I>communications, graphics, image databases, and hypertext. His address is 4201 University Dr., Suite 102, Durham, NC 27707 You may fax<I></I> <I></I>questions for Ken to (919) 489-5239. Ken also receives email at <I>kpugh@dukemvs.ac.duke.edu</I> (Internet).</i></P><P>
<B>Q</B><P>
Our system has <I>typedefs</I> for structure templates all over the place. What are the relative advantages and disadvantages of <I>typedefs</I>?<P>
George Murphy<br>
New York, NY<P>
<B>A</B><P>
<I>typedefs</I> have several uses. First you can use them to identify the logical use of a variable:<P>
<pre>SPEED s;
DISTANCE d;
TIME t;</pre>
Second you can use <I>typedefs</I> to create an object-oriented package in standard C, as I've done in <B><A href="list1.htm">Listing 1</A></B>. Unfortunately, even with OOP packages, I've seen user code something like<P>
<pre>my_func()
  {
  AN_IMPORTANT_OBJECT my_object;
  my_object = their_function();
  my_object-&gt;one_member = 4;
  }</pre>
The function <I>my_func()</I> has peeked inside the <I>typedef</I> to find the type that it represents. This action violates the spirit of the <I>typedef</I>. If you have set up packages that requires the user to look inside, you might as well skip the <I>typedef</I>. You are not hiding anything.<P>
If the user needs further information on the <I>typedef</I>, you should provide functions, such as:<P>
<pre>set_one_member_of_AN_IMPORTANT_OBJECT
   (AN_IMPORTANT_OBJECT , int);
get_one_member_of_AN_IMPORTANT_OBJECT
   (AN_IMPORTANT_OBJECT);</pre>
For the purpose of speed, you might consider implementing the functions as macros.<P>
One rule of thumb for judging how abstract you've made an object is the degree to which you can modify how the object works. For example, you should be able to rename the actual members of a <I>typedef</I> structure without necessitating a change in user code. If you can reorder the members, then you have achieved even a greater degree of abstraction.<P>
To my mind, employing the <I>typedef</I> is more confusing than declaring data structures straightforwardly. For example, I would prefer to code the sample as<P>
<pre>struct s_an_important_object
   {
   int one_member;
   char another_member;
   ....
   };
/* Function prototypes */
struct s_an_important_object *their_function(void);
void another_function(struct s_an_important_object *);

User file:
#include "important.h"
my_func()
  {
  struct s_an_important_object my_object;
  my_object = their_function();
  my_object-one_member = 4;
  ...
  }</pre>
This method works in the case where the user (not the package maker) must look inside the structure. In this case the template is simply a handy way of keeping related information together, not an abstract object.<P>
<B>Q</B><P>
I am trying to write a C function that will receive three integers, and return the largest and the smallest. Such as:<P>
<pre>int value1, value2, value3;     /* pass these three integers */
int largest, smallest;          /* put results here */</pre>
I can't quite figure a way to get this to work right. I'd appreciate any help with this problem.<P>
Steve Kosloske<br>
Milwaukee<P>
<B>A</B><P>
The most common question asked every juggler performing with three items is, "Can you do four?" You should pose the same question for this problem. Is three the maximum or minimum for which you need a solution, or do you want a more general solution?<P>
If you must solve only the specific case, then the function requires one of two techniques for returning multiple values. You can use parameters that are references (a la <I>scanf</I>) or you can create a structure that holds the two return values.<P>
In the first case, the calling code would look like:<P>
<pre>int value1, value2, value3;
int minimum, maximum;
 ...
find_min_max(value1, value2, value3, &amp;minimum, &amp;maximum);</pre>
<A href="list2.htm">Listing 2</a>
shows the function itself.<P>
With the structure method, you would probably want to place the template in a header file, such as <I>"compare. h"</I>:<P>
<pre>struct s_compare
   {
   int minimum;
   int maximum;
   };
   struct s_compare find_min_max();</pre>
The calling code would look like:<P>
<pre>#include "compare.h"
int value1, value2, value3;
struct s_compare compare;
 ...
compare =
find_min_max(value1, value2, value3);</pre>
and the function itself would be as in <A href="list3.htm">Listing 3</a>.
 Of course you could simplify the code by calling the two functions as shown in <A href="list4.htm">Listing 4</a>,
 with similar code for the <I>find_minimum</I><I>.</I><P>
Now consider generality. Assuming that the variables are not in an array that you could pass, you could use a variable parameter function as in <A href="list5.htm">Listing 5</a>.
 The function returns a single value. You could use either of the previous techniques (pointers or structures) to return both the minimum and the maximum.<P>
<B>Q</B><P>
I've written a small bit of code and have come to the conclusion that it probably could be done better. Could you rewrite my code in any way to show me how I can improve upon it? The code follows (in <A href="list6.htm">Listing 6</a>)
.<P>
I can take any amount of constructive criticism, so long as that is all it is, I am asking this question because I want to improve my C coding!<P>
R. Smithers<br>
Guildford, England<P>
<B>A</B><P>
I will start with an overall viewpoint of the code and then give some line-by-line comments.  Some comments represent personal preferences developed from many years of coding. Finally,  I'll give my version of your program for comparison.<P>
First, the names you used reflect the old style of C, which limited names to eight characters.  Using full names would clarify the program's organization.<P>
You should include comments in the header files to explain each function's purpose,  its required parameters,  and its effect on global variables.<P>
Functions should attempt to return all values through the parameter list.  My response to the previous question gives some tips on how to return multiple values. A variable needed by only one function should be local to that function.<P>
With those guidelines in mind,  let me hit the lines in detail.<P>
<pre>#include &lt;ctype.h&gt;
#include &lt;string.h&gt;</pre>
You should include only the header files your program needs, including <I>&lt;stdio.h&gt;</I>. The file <I>&lt;string,h&gt;</I> is not needed.<P>
<pre>int ind=1,tmp=1;
int mat=1,spc;</pre>
These variables should not be global. Note that if your program calls <I>getln</I> twice, the value of <I>ind</I> for the second call is the same as after the first call.<P>
<pre>main()
{
   char text [1024];</pre>
The size of the buffer should be <I>#defined</I>. You can then use the label wherever you need it.<P>
<pre>   getln (text);
   putln (text);
   printf ("Sentence is %d\n",ind);
   printf ("And has %d spaces in it\n",spc);
}</pre>
It should be clearer how functions called <I>getln</I> and <I>putln</I> changed the values of <I>ind</I> and <I>spc</I>.<P>
<pre>getln (text)
char *text;</pre>
A comment would be in order here that suggests <I>getln</I> fills in <I>text</I> with an input string and alters the value of <I>ind</I>.<P>
<pre>{
   printf ("Enter Text : ");

   while ((text [ind-1] =getchar ())!='\n')
   {
      ind++;
   }
}</pre>
You do not test whether the index on the array exceeds 1024 (the size of <I>text</I>). Although you may never loop past the end of the array, you have not guaranteed that you won't. You also could have used the standard <I>fgets()</I> function instead.<P>
The value of <I>ind</I> should start as <I>0</I> so that subtracting <I>1</I> from the index would not be necessary.  You could modify your implicit definition of the length of a sentence to state that a sentence can have length zero.<P>
<pre>putln (text)
char *text;</pre>
Once again, a few comments on the purpose of <I>putln</I> would have been in order.<P>
<pre>{   printf ("Text is     : ");
   while(text [tmp-1] !='\n')
   {</pre>
If <I>tmp</I> had started at 0,  the indexing here and in the following lines would be a bit simpler.<P>
<pre>if (mat==1)</pre>
The purpose of <I>mat</I> might be clearer if it were named <I>print_as_uppercase</I>.<P>
<pre>{
   printf("%c",toupper(text[tmp-1]));
   mat=0;

}else{
   printf("%c",tolower(text[tmp-1]));
}</pre>
A comment stating that the first letter of every word must be uppercase would be handy here.<P>
<pre>      if (isspace(text[tmp-1])) {
           mat=1;
           spc++;}

      if (text[tmp-1]=='.' || text[tmp-1]==',') mat=1;
      tmp++;
   }
   printf("\n");
}</pre>
My version of your program appears in <A href="list7.htm">Listing 7</a>.
 The basic outline follows your original program. If I were starting from scratch, I would have written a couple of general-purpose functions:<P>
<pre>void uppercase_words (text_in,
          size_text_in, text_out)
/* Uppercase first letter of each word in sentence */
/* Words to uppercase */
char *text_in;
int size_text_in;/* Size of input */
/* Output characters */
char *text_out;
int count_space (text_in, size_text_in)
/* Counts number of spaces in string */
char *text_in; /* Characters in */
int size_text_in; /* Size of input */</pre>
<B>Q</B><P>
Here's something odd that happened to me today while using Microsoft C, version 6.0. I had the following:<P>
<pre>char *string;
unsigned int *wordarray;
unsigned int count;

if (wordarray[(unsigned
int) string [count]] ++)
{
   ... do some stuff ...
}</pre>
The actual variable names were different and the values of the variables are irrelevant. The problem was in the code generated.<P>
In a nutshell, the compiler performed signed arithmetic on the pointer <I>wordarray</I>, even though I was explicitly casting the index to an unsigned value. It was incrementing, for instance, <I>wordarray[-1]</I> instead of <I>wordarray [255]</I>.<P>
Is this correct? Seems to be the order of operations would dictate that the compiler obtain <I>string[count]</I>, cast it to an <I>unsigned int</I>, add it to <I>wordarray</I>, and increment the <I>unsigned int</I> at that address.<P>
I solved the problem by making <I>string</I> into an array of <I>unsigned char</I>, which is really how I wanted it anyway, but I'm wondering why the compiler didn't generate correct code. Maybe the Microsoft Knowledge Base has something about it.<P>
Will Israel<br>
North Brunswick, NJ<P>
<B>A</B><P>
Your solution is one correct possibility. To arrive at my solution I'll explain how the expression<P>
<pre>wordarray[(unsigned int) string[count]]++</pre>
is evaluated.<P>
<I>string[count]</I> is a <I>char</I>. A <I>char</I> with the value of 255 indicates that the sign bit is set. The expression is widened to an <I>int</I> (ANSI standard 3.2.1.1) with sign extension. The value of the <I>int</I> is <I>-1</I>. To convert it to an <I>unsigned int</I>, the value of the largest <I>int</I> (65,536) is added, producing 65,535 (per ANSI 3.2.1.2)<P>
When used as the index to the array, the expression is multiplied by two, giving 13,170. This value does not fit into a 16-bit register, so the high bit is dropped, leaving the result 65,534. Adding this index to the base address (a 16-bit register) is the equivalent of adding <I>-2</I> to the base address. This is the same as using index of -1 for the array.<P>
<A href="list8.htm">Listing 8</a>
shows the generated assembly code with some comments.<P>
You also could have added another cast to avoid the widening of the <I>char</I> as:<P>
<pre>if (wordarray[(unsigned int) (unsigned char) string[count]]++)</pre>
which could be shortened to<P>
<pre>if (wordarray[(unsigned char)
string [count]] ++)</pre>
since the <I>unsigned char</I> will be converted to an <I>int</I> of the proper value by default.<P>
<h4><FONT COLOR="#000080"><A name="0286_015D">Readers' Replies<A name="0286_015D"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0286_015E">DLLs<A name="0286_015E"></FONT></h4></P>
In response to David Qualls' question in the September issue, one way to support DLLs is to use the Topspeed line of compilers. These compilers offer full DLL support for MS-DOS, Windows, and OS/2.<P>
Lawrence C. Widing<br>
Naperville, IL<P>

<h4><a href="../../../source/1991/dec91/pugh.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
