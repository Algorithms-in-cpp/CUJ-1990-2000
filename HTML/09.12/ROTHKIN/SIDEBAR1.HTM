<HTML><HEAD><TITLE>December 1991/PC UART Device Driver/Sidebar</TITLE></HEAD><BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h3 align="center"><FONT FACE="Garamond" COLOR="#000080">Explanation of UART Registers</FONT></h3>
<hr>
<BLOCKQUOTE>
The UART appears to applications as a series of registers occupying eight consecutive I/O addresses. Most PCs place <I>COMM1</I> starting at I/O address <I>3F8H</I> and <I>COMM2</I> at <I>2F8H</I>. Normally <I>COMM1</I> is on <I>IRQ 4</I> and <I>COMM2</I> is on <I>IRQ</I><I> </I><I>3</I> (although some boards allow this to be changed). The starting address is referred to as the base address. Most of this discussion applies to all of the NS8250-compatible UARTs (including NS8250, NS16450 and 16550). I will use the term UART to refer to all UARTs compatible with the 8250, and NS16550 when necessary to specifically identify that chip (for FIFO-related items).<P>
I will use the convention of identifying the bits in a register by numbering the low order bit as 0 and the high order bit as 7, i.e., 7654 3210. I have used the following sources for reference: IBM PS/2 Technical Reference Manual; National Semiconductor Datacomm, LAN, UARTs handbook 1990 edition.<P>
<h4>Receiver Buffer Register (RBR) &#151; READ at base address (DLAB bit in MCR must be 0)</FONT></h4></P>
This register contains the last character received. If register is not read before next character is received, original character will be lost. On the NS16550, reading this register fetches the next character from the FIFO. Up to 16 characters can be in the FIFO at any time.<P>
<h4>Transmitter Holding Register (THR) &#151; WRITE at base address (DLAB bit in MCR must be 0)</FONT></h4></P>
Writing a character to this register causes it to be transmitted. If it is overwritten before the character is transmitted in its entirety, both characters will be lost. On the NS16550, writing to this register places the character in the transmit FIFO. Up to 16 characters can be in the FIFO at any time.<P>
<h4>Divisor Latch Registers &#151; low byte READ/WRITE at base address, high byte READ/WRITE at base address + 1 (DLAB bit in MCR must be 1 to access either of these registers)</FONT></h4></P>
These two registers program the baud rate generator. Some common values are shown in <A href="tab1.htm"">Table 1</a>.
<P>
<h4>Interrupt Enable Register (IER) &#151; READ/WRITE at base address + 1 (DLAB bit in MCR must be 0)</FONT></h4></P>
This register is used to enable different types of interrupts from the UART (see the IIR for a description of the interrupts). Any combination of these interrupts can be enabled by setting the corresponding bit to 1. For interrupts to be actually generated to the main CPU, you must also set Bit 3 of the MCR to turn on the OUT2 signal (this bit is used to mask the UART interrupt on most IBM and compatible serial adapters).<P>
<UL><li>its 7 - 4: Reserved, always set to 0.</li>
<li>it 3: Modem Status Interrupt.</li>
<li>it 2: Receiver Line Status Interrupt.</li>
<li>it 1: Transmitter Holding Register Empty Interrupt.</li>
<li>it 0: Received Data Available Interrupt.</li></UL>
<h4>Interrupt Identification Register (IIR) &#151; READ at base address + 2</FONT></h4></P>
When the UART generates an interrupt, the interrupt identification bits in this register are set to indicate the type of interrupt. If several conditions requiring interrupt occur simultaneously, one interrupt will be generated per condition according to the following priority scheme:<P>
Receiver Line Status - Highest<P>
Received Data Available - Second<P>
Transmitter Holding Register Empty - Third<P>
Modem Status - Last<P>
<UL><li>Bits 7,6 (NS16550 only): These bits are both set to 1 when the FIFO is enabled (FCR bit 0 set to 1). If the FIFO isn't enabled (as will be the case for UARTS prior to NS16550 which don't have a FIFO), both of these bits will be 0.</li>
<li>Bits 5,4: Reserved, always set to 0</li>
<li>Bit 3 (NS16550 only): Timeout interrupt &#151; when FIFO is enabled, this bit is set to 1 along with bit 2 to indicate that a timeout interrupt is pending.</li>
<li>Bits 2,1: Interrupt identification (action in parentheses required to reset interrupt):</li>
<UL>11 &#151; Receiver Line Status (read LSR)<br>
10 &#151; Received Data Available (read RBR)<br>
01 &#151; Transmitter Holding Register Empty (read IIR or write THR)<br>
00: Modem Status (read MSR)</UL>
<li>Bit 0: Interrupt Pending &#151; 0 = Interrupt pending, 1 = No interrupt pending.</li></UL>
<h4>FIFO Control Register (FCR, NS16550 only) - RITE at base address + 2</FONT></h4></P>
<UL><li>Bits 7,6: Receiver FIFO trigger level &#151; 00 = 1 byte, 01 = 4 bytes, 10 = 8 bytes, 11 = 14 bytes</li>
<li>Bits 4,5: Reserved, always set to 0</li>
<li>Bit 3: RxRdy/TxRdy pins mode &#151; 0 = normal (mode 0), 1 = mode 1. For most applications, leave this set to 0.</li>
<li>Bit 2: Xmit Fifo reset &#151; write a 1 to this position to reset Xmit fifo (bit is self-clearing)</li>
<li>Bit 1: Rcv Fifo reset &#151; write a 1 to this position to reset Rcv fifo (bit is self-clearing)</li>
<li>Bit 0: Fifo enable &#151; 1 = Fifo enabled, 0 = Fifo disabled</li></UL>
<h4>Line Control Register (LCR) - EAD/WRITE at base address + 3</FONT></h4></P>
<UL><li>Bit 7: Divisor Latch Access Bit (DLAB) &#151; must be set to 1 during a read or write operation to gain access to the divisor latches of the baud-rate generator. It must be cleared to 0 to gain access to the Receive Buffer, Transmitter Holding, or Interrupt Enable registers.</li>
<li>Bit 6: Set break &#151; Set to 1 to generate a continuous 'break' condition on the line.</li>
<li>Bit 5: Reserved, always set to 0.</li>
<li>Bits 4 &amp; 3: Parity &#151; 11 = Even parity, 01 = Odd parity, 00 = No parity, 10 = Undefined.</li>
<li>Bit 2: Stop bits &#151; 0 = 1 stop bit, 1 = 2 stop bits (except for word length of 5 when it is 1 - 1 1/2 stop bits).</li>
<li>Bits 1 &amp; 0: Word Length: 00 = 5 bits, 01 = 6 bits, 10 = 7 bits, 11 = 8 bits</li></UL>
<h4>Modem Control Register (MCR) &#151; READ/WRITE at base address + 4</FONT></h4></P>
This register controls output signals from the UART. Bits 1 and 0 control signals going to the modem. A brief description of the normal uses of each signal has been provided, but it should be noted that some modems may not use them in this fashion, and other modems may have to be reconfigured to use the signals this way.<P>
<UL><li>Bits 7 - 4, 2 Reserved, always 0.</li>
<li>Bit 2: Controls OUT2 signal. On IBM type serial adapters, must be 1 in order to enable interrupt generation.</li>
<li>Bit 1: Request To Send (RTS) signal control &#151; Set to 1 when modem software is ready to transmit data, and wait for CTS to go to 1 (provided modem supports RTS/CTS handshaking).</li>
<li>Bit 0: Data Terminal Ready (DTR) signal control &#151; Set to 1 to indicate that modem software is ready to do business. You can instruct some modems to disconnect from the phone line by momentarily dropping DTR.</li></UL>
<h4>Line Status Register (LSR) &#151; READ at base address + 5</FONT></h4></P>
This register provides information about the state of the data transfer. When a line status interrupt occurs, you should read this register and examine bits 1 - 4 to determine the cause (and clear the interrupt). For the NS16550, the FIFO contains additional bits corresponding to bits 1 - 4 of the LSR. When the FIFO is enabled, bits 1 - 4 of the LSR will be set according to the character currently being read from the FIFO (which may not be the most recently received character) allowing the modem software to handle line errors as if the FIFO did not exist.<P>
<UL><li>Bits 7 &amp; 6: Don't Care.</li>
<li>Bit 5: Transmitter Holding Register Empty Set to 1 when the UART is ready to accept a new character for transmission (a THRE interrupt will also be generated). On the NS16550, this bit will be set only when the transmit FIFO is empty. There is no way to determine the actual number of characters remaining in the transmit FIFO at any time.</li>
<li>Bit 4: Break interrupt &#151; set to 1 when the received data input is held in the spacing state for longer than a fullword transmission (the total time of start bit + data bits + parity bit (if any) + stop bits).</li>
<li>Bit 3: Framing Error &#151; set to 1 when the received character did not have a valid stop bit.</li>
<li>Bit 2: Parity Error &#151; set to 1 when the received character does not have the correct parity bit setting.</li>
<li>Bit 1: Overrun Error &#151; Set to 1 when the data in the RBR was not read by the modem software before the next character received was transferred into it, destroying the previous character.</li>
<li>Bit 0: Data Ready &#151; Set to 1 when there is a character available in the RBR to be read (a Received Data Available interrupt will be generated), set to 0 automatically when that character has been read.</li></UL>
<h4>Modem Status Register (MSR) &#151; READ at base address + 6</FONT></h4></P>
<UL><li>Bits 7 - 4 indicate the current state of the modem control signals (1 = active, 0 = inactive). Bits 3 - 0 are set to 1 whenever the corresponding modem control signal (in bits 7 - 4) has changed (and a Modem Status interrupt is generated), and are automatically reset to 0 after the MSR has been read. A brief description of the normal uses of each signal has been provided, but it should be noted that some modems may not use them in this fashion, and other modems may have to be reconfigured to use the signals this way.</li>
<li>Bit 7: Data Carrier Detect (DCD) &#151; set to 1 when the modem has detected a valid carrier signal</li>
<li>Bit 6: Ring Indication (RI) &#151; set to 1 when the modem detects an incoming ring signal on the telephone line.</li>
<li>Bit 5: Data Set Ready (DSR) &#151; set to 1 to indicate that the modem is ready.</li>
<li>Bit 4: Clear To Send (CTS) &#151; set to 1 to indicate that the modem is ready for the UART to transmit data (if RTS/CTS handshaking is supported by the modem).</li>
<li>Bit 3: Delta DCD</li>
<li>Bit 2: Delta RI</li>
<li>Bit 1: Delta DSR</li>
<li>Bit 0: Delta CTS</li></UL>
<h4>Scratch Register &#151; READ/WRITE at base address + 7</FONT></h4></P>
This is a general-purpose register available to the modem software for any purpose. It does not affect the UART in any way.<P>
</BLOCKQUOTE>
</BODY>
</HTML>
