


<! -- CUJ v2: All Rights Reserved: IDJ -->

<HTML>
     
     <HEAD>


          
          <TITLE>August 1995 - GRAPHICS</TITLE>
     </HEAD>
     
     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          <BLOCKQUOTE><IMG src="../logo.gif" WIDTH="310" HEIGHT="100">
               
               <H3><FONT COLOR="#000080">August 1995<BR>
               Volume 13 Number 8</FONT></H3>
               
               <H3><FONT COLOR="#FF0000">GRAPHICS</FONT></H3>
               
               <H4><A href="phillips/phillips.htm">Image Processing in C,
                    Part 13: Geometric Operations</A></H4>
               
               <P><B>By Dwayne Phillips</b><br>
               
               <i>Bend it, shape it, any way you
                    want it by applying simple mathematical transformations to
                    digitized pictures.</i></p>
               
               <H4><A href="heinrich/heinrich.htm">Fixed-Point C for Graphics
                    Applications</A></H4>
               
               <P><B>By Peter Heinrich and Nathan Dwyer</b><br>
               
               <i>Floating-point hardware has
                    eliminated the need for fixed-point arithmetic almost
                    completely &#151; with emphasis on the "almost."</i></p>
               
               
               
               <H3><FONT COLOR="#FF0000">FEATURES</FONT></H3>
               
               <H4><A href="gottner/gottner.htm">Templates Without Code
                    Bloat</A></H4>
               
               <P><B>By Dave Gottner</b><br>
               
               <i>Templates are a great way to
                    summarize repeated patterns of code, provided you're not
                    surprised at the number of repeats that end up occupying
                    space in your program. Here's a general technique for
                    minimizing the amount of code that needs repeating.</i></p>
               
               <H4><FONT COLOR="purple">Mastering User-defined
                    Conversion Functions</FONT> (Article unavailable in electronic form)</H4>
               
               <P><B>By Scott Meyers</b><br>
               
               <i>Defining your own conversion
                    functions is a powerful aspect of C++ that can get you in a
                    lot of trouble. The author of the best selling Effective
                    C++ shows you how to avoid this kind of trouble.</i></p>
               
               <H4><A href="beddow/beddow.htm">Remote Procedure Calls
                    Using NetBios</A></H4>
               
               <P><B>By Mark Beddow</b><br>
               
               <i>Networks are ubiquitous, and so
                    too are the opportunities for writing client/server
                    applications. A simple remote procedure call mechanism is
                    all you need to get started.</i></p>
               
               
               
               <H3><FONT COLOR="#FF0000">COLUMNS</FONT></H3>
               
               <H4><A href="plauger/plauger.htm">Standard C/C++:
                    Implementing &lt;string&gt;</A></H4>
               
               <P><B>P. J. Plauger</B></P>
               
               <H4><A href="saks/saks.htm">Stepping Up to C++: Other
                    Assorted Changes, Part 2</A></H4>
               
               <P><B>Dan Saks</B></P>
               
               <H4><A href="becker/becker.htm">Questions &amp; Answers:
                    Suicidal Classes are Risky Business</A></H4>
               
               <P><B>Pete Becker</B></P>
               
               
               
               <H3><FONT COLOR="#FF0000">DEPARTMENTS</FONT></H3>
               
               <H4><A href="edforum/edforum.htm">Editor's Forum</A></H4>
               
               <H4><A href="newprod/newprod.htm">New Products</A></H4>
               
               <H4><A href="letters/letters.htm">We Have Mail</A></H4>
          </BLOCKQUOTE>
     </BODY>
</HTML>
