

<HTML>
<HEAD>

<TITLE>August 1995/Questions and Answers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocaug.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Questions and Answers<A name="011E_00AE"><A name="011E_00AE"></font></h2><P>
<h3 align="center"><A name="011E_0000"><A name="011E_0000">Suicidal Classes are Risky Business</h3><P>
<h3 align="center"><font color="#800000">Pete Becker</font></h3><hr><blockquote><P>
<P><i><A name="011E_0000"><A name="011E_0000">Pete Becker is Senior QA Project Manager for C++ at Borland International. He has been involved with C++ as a developer and manager at Borland for the past six years, and is Borland's principal representative to the ANSI/ISO C++ standardization committee.</i></P><P>
<I>The questions above were taken from various online sources, including the Internet and CompuServe. To ask Pete a question about C or C++, send e-mail to</I> pbecker@wpo.borland.com, <I>use subject line: Questions and Answers; or write to Pete Becker, C/C++ Users Journal, 1601 W. 23rd St., Ste. 200, Lawrence, KS 66046.</I><P>
<B>Q</B><P>
Should the following member function fragment work?<P>
<pre>void Suicidal::DestroyMe()
{
 delete this;
return;
}</pre>
That is, can a member function delete the object that was referenced to invoke it? I added the return to indicate that I know that member data would no longer be defined &#151; that's not the question here.<P>
Why would I want to do something like the above. Well, an object that models a transient, event-driven state machine has the best information concerning when it should go away. Putting that logic in an outer event cracker is unesthetically lumpy.<P>
Does or should the standard indicate whether or not <I>delete this</I> should be supported? I can see how this might cause some problems unwinding function calls, particularly with exceptions tossed into the stew.<P>
<B>A</B><P>
The C++ language definition says that you can delete a pointer to any non-const object created with <I>new,</I> subject to a couple of limitations concerning derived classes and virtual destructors. Those limitations are not pertinent to this question, so the answer is yes, <I>delete this</I> is valid, and compilers should support it. But just because it's valid doesn't mean that you should do it &#151; at least, not without a great deal of thought about alternatives. <I>delete this</I> is dangerous, and should not be used unless absolutely necessary.<P>
One of the dangers, as you point out, is that you cannot safely access an object's data after that object has been deleted. To ensure that your code won't try to access this data, make <I>DestroyMe</I> return immediately after doing the delete operation. <I>DestroyMe</I> must not return a value that depends in any way on any of the data fields of the deleted object. If you need to return a value that depends on data stored in the object, calculate the value before doing the delete, store it in an auto object, and return that object.<P>
Furthermore, if any member function calls <I>DestroyMe</I>, either directly or indirectly, the same safety rule applies: follow the call to <I>DestroyMe</I> immediately with a <I>return</I>. (It's probably easier to impose a design rule that no member function should call <I>DestroyMe</I> rather than trying to trace all the possible paths to internal calls.)<P>
So far, as we've looked at implementing a suicidal class, we've tried to minimize the risk of damage occuring within its member functions. If you create such a class, however, you should also protect the users of your class from accidents. Users don't expect objects to go away as a result of a member function call &#151; that simply isn't how C++ usually works. Users will be surprised by the class's behavior in contexts such as this:<P>
<pre>void sample1( Suicidal *sptr )
{
sptr-&gt;DestroyMe();
sptr-&gt;Other();  // probably crashes here
}</pre>
This fragment actually demonstrates the same problem that arises in <I>DestroyMe</I> itself: after the call to <I>DestroyMe</I> the object doesn't exist any more. The pointer to the object cannot be used for any purpose, and, in particular, the call to <I>Other</I> is not guaranteed to work.<P>
To alert users to this problem you can use a name that warns of the danger. That's why I've been using the function name <I>DestroyMe:</I> it suggests that something unusual is going on, and might help users of this class figure out why their programs are crashing mysteriously.<P>
Here's a more subtle form of this problem:<P>
<pre>void sample2()
{
Suicidal s;
s.DestroyMe(); // crashes here
}</pre>
This code will almost certainly crash, because <I>DestroyMe</I> will try to delete the object <I>s</I>, which was not created with <I>new</I>. This one is very easy to overlook. In fact, if I felt that I had no alternative to creating a suicidal class, I'd make sure no one could create an auto object of that class:<P>
<pre>class Suicidal
{
public:
    static Suicidal *Create();
    void DestroyMe();
private:
    Suicidal ();
    Suicidal ( const Suicidal&amp; );
};</pre>
Since <I>Suicidal's</I> constructors are not accessible, users cannot create objects of this type as auto objects or with <I>new</I>. Instead, users must call <I>Suicidal::Create()</I>. This call differs enough from ordinary methods of creating objects to serve as a warning: something unusual is going on. With any luck this warning will alert users to the dangers that this class presents.<P>
I hope I've helped clarify the dangers involved in writing suicidal classes. I share your concern that writing a separate object manager is sometimes "unesthetically lumpy." However, that's the beginning of the inquiry, not the end. "Unesthetically lumpy" is not an engineering criterion. It is an intuitive judgment. Our job as engineers is to use this intuitive judgment as a guide through a careful cost/benefit analysis of the use of this construct. <I>delete this</I> leads to code that crashes mysteriously, that is hard to maintain, and that is hard to use. I think this is one case where our intuition leads us astray.<P>
<B>Q</B><P>
I'm using Rogue Wave's Tools.h++ class library. This library defines a class called <I>RWOrdered</I> as follows [some details omitted]:<P>
<pre>class RWOrdered
{
public:
   virtual RWCollectable* append (RWCollectable* a);
//...
};</pre>
I'm deriving a class from <I>RWOrdered</I> and I'm using a class derived from <I>RWCollectable</I> with it:<P>
<pre>class MyCollectable : public RWCollectable
{
// ...
};

class MyOrdered : public RWOrdered
{
public:
   virtual MyCollectable* append(MyCollectable* theInfo);
};</pre>
Now I get the warning:<P>
<pre>warning: MyOrdered::append() hides virtual RWOrdered::append()</pre>
The code itself works. What must I do to avoid receiving this warning?<P>
<B>A</B><P>
Actually, the code does not work; it's just that no one has noticed the problem yet. When you override a virtual function you must provide a function with the same signature. That is, you must provide a function having the same name, the same parameter list, the same const qualifiers, and a compatible return type. In this example, the function <I>append</I> in the derived class does not have the same signature as the function <I>append</I> in the base. The derived class <I>append</I> takes a pointer to <I>MyCollectable,</I> the base class <I>append</I> takes a pointer to <I>RWCollectable</I>. These pointers are of different types, despite the fact that converting <I>pointer-to-MyCollectable</I> to <I>pointer-to-RWCollectable</I> is trivial. Since the types differ, the signatures differ, and the derived class version does not override the base class version. The warning here is telling you, a bit indirectly, that calling <I>append</I> does not give you polymorphic behavior. In code, here's what can happen:<P>
<pre>RWOrdered *container = new MyOrdered;
MyCollectable *collectable = new MyCollectable;
container-&gt;append( cellectable );</pre>
At the call to <I>append</I> the compiler sees that <I>container</I> is a pointer to <I>RWOrdered,</I> so it converts <I>collectable</I> into a pointer to <I>RWCollectable</I> and calls <I>RWOrdered::append</I>, not <I>MyOrdered::append</I>.<P>
On the other hand, making the call through a pointer to <I>MyOrdered</I> works as expected:<P>
<pre>MyOrdered *container = new MyOrdered;
MyCollectable *collectable = new MyCollectable;
container-&gt;append( collectable );</pre>
Here, the call to <I>append</I> calls <I>MyOrdered::append</I>. This latest example is probably how most programmers use this class, which explains why no one has noticed the underlying problem. But the problem is still there: the class <I>MyOrdered</I> acts in two different ways, depending on whether you access it through a pointer to <I>MyOrdered</I> or through a pointer to <I>RWOrdered</I>. To fix the problem change the signature of <I>append</I> in the derived class:<P>
<pre>class MyOrdered : public RWOrdered
{
public:
   virtual MyCollectable* append (RWCollectable* the Info);
};</pre>
This version of <I>append</I> properly overrides the version in <I>RWCollectable</I>, and the container now works polymorphically. Unfortunately, we've now lost some type safety. With the earlier version, a call to <I>append</I> with an object of the wrong type would not work:<P>
<pre>MyOrdered *container = new MyOrdered;
RWCollectable *collectable = new SomeOtherCollectable;
container-&gt;append( collectable );       // ????</pre>
The last line was an error with the old version, but is valid in the new one.<P>
When we keep running into things that don't work, we should consider that we may have overlooked a fundamental design problem. That's the case here. <I>RWOrdered</I> can handle any object of type <I>RWCollectable</I>. <I>MyOrdered</I> cannot. It only handles objects of type <I>MyCollectable</I>. We simply cannot use objects of type <I>MyOrdered</I> as if they were objects of type <I>RWOrdered</I>. So, <I>MyOrdered</I> should not publicly inherit from <I>RWOrdered: RWOrdered</I> just doesn't act like <I>MyOrdered's</I> base. Instead, <I>MyOrdered</I> should probably be a wrapper class with a data object of type <I>RWOrdered</I>. It can then delegate to the <I>RWOrdered</I> object for the services that <I>RWOrdered</I> provides, and handle any differences itself, like this:<P>
<pre>class MyOrdered
{
public:
   MyCollectable* append(MyCollectable* theInfo)
      {
        // ...
      container.append( theInfo );
      return theInfo;
      }
private:
   RWOrdered container;
};</pre>
Yes, it's tedious to duplicate most of the interface to <I>RWOrdered</I> through inline functions in a wrapper class. But that's the right way to design classes that use the services provided by other classes. Don't be fooled by similarity: if the classes really do two different things, as they do in this example, don't use inheritance. It may look convenient, but sooner or later it will get you or your users into trouble.<P>
<B>Q</B><P>
In C++, if I have a class <I>A</I> that contains a class <I>B</I>, how can I call a member function in class <I>A</I> from a member function in class <I>B</I>?<P>
Thanks!<P>
<B>A</B><P>
Use a pointer or a reference. I know that sounds a bit glib, but there is nothing special about contained objects that gives them access to their containers.<P>
This question often arises when two classes share responsibility for some action. For example, changing the background color of a window requires a call into the windowing system. A class library that abstracts the windowing system ought to have a class that provides this service, among others:<P>
<pre>class Window
{
public:
   void SetBackgroundColor( Color );
   Color GetBackgroundColor() const;
};</pre>
A class like this is usually implemented with a private data member that holds the system's handle for a window. Setting the background color then maps directly to the system call:<P>
<pre>void Window::SetBackgroundColor( Color color )
{
 SetWindowColor( Handle, BACKGROUND, color );
}</pre>
Once a window has been created, changing its background color requires only a call to this member function:<P>
<pre>Window Win;
Win.SetBackgroundColor( Red );</pre>
However, there is another idiom that involves assigning values to window attributes rather than making function calls. To support this idiom, a Window class must contain a data object that controls the background color. When this data object has been added, setting the background color looks like this:<P>
<pre>Window Win;
Win.BackgroundColor = Red;</pre>
A natural implementation in C++ is to overload the assignment operator to actually make the system call to change the window's background color. However, to make this call the assignment operator must contain code that somehow gets the handle for the window. In pseudo-code, the assignment operator would look something like this:<P>
<pre>void ColorController::operator = ( Color color )
{
SetWindowColor( [My Window]-&gt;Handle, BACKGROUND, color );
}</pre>
The problem here lies in deciding how to store the handle and how to get access to it. This kind of problem would be easier to solve efficiently if C++ enabled us to specify that a <I>ColorController</I> only be created as part of a <I>Window,</I> and that the handle it needs in order to make this call can be found in the <I>Window's</I> data. The compiler could then use the definition of <I>Window</I> to figure out how to access the handle, simplifying the programmer's job.<P>
C++ did not take this route. The language provided no way to say that <I>ColorController</I> will only be created as part of a <I>Window,</I> so the compiler cannot magically figure out for us how to get to the handle.<P>
Making <I>ColorController</I> a nested class does not help. Many people, when they first encounter nested classes, assume that there is some sort of functional connection between a class and its nested classes. This is not correct. Nesting a class definition inside another class definition does not change the capabilities of either class. Nesting only affects the scope of the nested class's name and the access rights to its name. As long as the name is accessible, we can create objects of that type that are independent of objects of the containing class:<P>
<pre>class Outer
{
public:
   class Inner
   {
   };
};

Outer::Inner inner;</pre>
No object of type <I>Outer</I> exists here. Nevertheless, this use of <I>Inner</I> is perfectly valid: the class name <I>Outer:: Inner</I> is publicly accessible, so it can be used to create objects. Those newly created objects have no inherent connection to any objects of type <I>Outer,</I> so they have no magic way to access data contained in <I>Outer</I>.<P>
Now, that's a language-level answer. But it certainly is useful at times to design a class that can only be created inside some other class and that knows about its container. Let's expand our <I>ColorController</I> class to see how we can do this without asking the compiler for special treatment. A natural design is for <I>ColorController</I> to contain a pointer to a <I>Window,</I> an overloaded assignment operator, and a conversion operator:<P>
<pre>class Window;
class ColorController
{
public:
   ColorController( Window *win );
   ColorController&amp; operator= ( Color color );
   operator Color() const;
private:
   Window *Win;
};
class Window
{
public:
   ColorController BackgroundColor;
   Window() : BackgroundColor(this) {}

   void SetBackgroundColor( Color );
   Color GetBackgroundColor() const;
};

inline
ColorController::ColorController( Window *win )
   : Win(win) {}

inline ColorController&amp;
ColorController::operator = ( Color color )
{
Win-&gt;SetBackgroundColor( color );
return *this;
}

inline ColorController::operator Color() const
{
return Win-&gt;GetBackgroundColor();
}</pre>
In general this design works fine. The data object simply contains a pointer to the class that it needs to talk to. In this particular case the data object has a couple of limitations. First, <I>ColorController</I> is hard-wired to only control the background color. We could rewrite it so that each instance carried a flag indicating which color it controlled, but this would make the class much more complicated. Second, if your Window class has half a dozen attributes implemented with this scheme you end up with half a dozen identical pointers to the <I>Window</I> that holds them, and half a dozen constructor invocations to initialize these pointers. This is a bit wasteful and quite tedious.<P>
You can use a trick to avoid all these duplicate pointers, but it's dangerous. Just remove the pointer from <I>ColorController</I>, and rewrite the member functions to assume that instance of <I>ColorController</I> resides inside a Window.<P>
<pre>#define WindowPointer \
((Win *)(char *)this- \
offsetof(Window, BackgroundColor))

inline ColorController&amp;
ColorController::operator = ( Color color )
{
WindowPointer-&gt;SetBackgroundColor( color );
}

inline ColorController::operator Color() const
{
return WindowPointer-&gt;GetBackgroundColor();
}</pre>
I haven't tested this code. I won't go through the details of how this works, nor will I discuss its limitations, because this is not the kind of trick that anyone should be playing in C++. It's much easier to write member functions to perform the operations that a class needs. If you find that you are contemplating this sort of hacking, take several deep breaths, count slowly to one hundred, and think about how to fix your design. You will find a better way to do it.<P>
In general a good C++ design uses member functions to invoke operations on objects. When two or more objects need to communicate, they should do so through pointers or references. If your code winds up carrying around too many pointers it probably means that the interactions between the objects are too complex, which indicates a design problem. In such a case, your question should not be "how do I do this" but "why am I trying to do this." The answer often points to a poor design that needs to be rethought. There's nothing fundamentally wrong with designing objects to call member functions on their containers. But if the cost of the supporting infrastructure becomes prohibitive, it may well be time to change the design and deal with the container directly.<P>
</BLOCKQUOTE>
</BODY>
</HTML>
