<HTML><HEAD>
<TITLE>August 1995/Templates Without Code Bloat/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1 <I>The header file</I> hashmap.h</A></h4>
<pre>/*--------------------------------------------------------------*
 *       class Map&lt;&gt;
 *
 * The map class maps keys to values.
 * (an associative array class)
 *--------------------------------------------------------------*/

#include &lt;stddef.h&gt;
#define HASHSIZE 31

struct VPAssoc {
    VPAssoc *next;   // next key/value pair in bucket
    void *   key;    // pointer to the key
    void *   value;  // pointer to the value
};


class VPmap {
protected:
    typedef int (*KeyCompareEqProc)
                    (const void *a,
                     const void *b);

    typedef unsigned (*KeyHashProc)
                    (const void *key);

    typedef void (*KeyValCreateProc)
                    (const VPmap *dict,
                     const void * currentKey,
                     void *&amp;      keyCopy,

                     void *&amp;      newValue);

    typedef void (*KeyValDestroyProc)
                    (void *key,
                     void *value);

    KeyCompareEqProc  isEqual;
    KeyHashProc       hash;
    KeyValCreateProc  CreateKeyAndValue;
    KeyValDestroyProc DestroyKeyAndValue;
    VPAssoc **        keys;
    size_t            hashsize;

    /// constructor
    VPmap(size_t,
         KeyHashProc,
         KeyCompareEqProc,
         KeyValCreateProc,
         KeyValDestroyProc);

    ~VPmap();

private:
    VPmap(const VPmap &amp;); // copy and assignment illegal
    VPmap &amp;operator= (const VPmap &amp;);

protected:
    void *index(const void *);

    /// apply a function to each key and value
    typedef void (*VPiterProc)(const void *, void *, void *);
    void apply(VPiterProc, void *);
};

/*------------------------------------------------------------*
 * Templates
 *------------------------------------------------------------*/

template &lt;class KEY, class VAL&gt;
struct Map : private VPmap {
    typedef unsigned (*KeyHashFunction)(const KEY &amp;);
    Map(KeyHashFunction,
       const VAL &amp; = VAL(),
       size_t = HASHSIZE);

    VAL &amp;operator[](const KEY &amp;key)
       {
       return * (VAL *) index(&amp;key);
       }

    typedef void (*IterProc)(const KEY &amp;, VAL &amp;, void *);
    void apply(IterProc proc, void *data)
       {
       VPmap::apply(VPiterProc(proc), data);
       }

private:
    VAL default_value;

    static void CreateKeyVal
       (const Map&lt;KEY, VAL&gt; &amp;,
        const KEY &amp;,
        KEY *&amp;,
        VAL *&amp;);

    static void DestroyKeyVal(KEY *key, VAL *value);
    static int CmpKeys(const KEY &amp;a, const KEY &amp;b);
};

  /* some compilers instantiate templates in header files */
#if defined __BCPLUSPLUS__ || defined __GNUC__
#include "hashmap.cc"
#endif

/* End of File */
</pre>
</BODY>
</HTML>
