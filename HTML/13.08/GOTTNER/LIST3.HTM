<HTML><HEAD>
<TITLE>August 1995/Templates Without Code Bloat/Listing 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 3 hashhmap.cxx <I>implementation of the </I>VPmap<I> class</I></A></h4>
<pre>/*----------------------------------------*
 * .
 */
#include &lt;stdlib.h&gt;
#include "hashmap.h"

/*----------------------------------------*
 * convenient macros
 */
#define ELEMENTS(array) \
       (sizeof(array) / sizeof(array[0]))

#define EACHELEM(x, array, size) \
       x = &amp;(array)[size]; \
       x-- &gt; (array);

VPmap::VPmap
   (size_t            buckets,
    KeyHashProc       key_hash,
    KeyCompareEqProc  key_cmp,
    KeyValCreateProc  K_V_C,
    KeyValDestroyProc K_V_D)
{

   hash               = key_hash;
   isEqual            = key_cmp;
   CreateKeyAndValue  = K_V_C;
   DestroyKeyAndValue = K_V_D;
   hashsize           = buckets;

   VPAssoc **ptr;
   keys = new VPAssoc *[hashsize];
   for (EACHELEM(ptr, keys, hashsize))
       *ptr = NULL;
}


VPmap::~VPmap()
{
   VPAssoc **list;

   for (EACHELEM(list, keys, hashsize))
       while (*list) {
          VPAssoc *item = *list;
          *list = item-&gt;next;

          DestroyKeyAndValue(item-&gt;key, item-&gt;value);
          delete item;
       }

   delete[] keys;
}


void VPmap::apply(VPiterProc proc, void *data)
{
   VPAssoc **list, *item;

   for (EACHELEM(list, keys, hashsize))
       for (item = *list; item != NULL; item = item-&gt;next)
          (*proc)(item-&gt;key, item-&gt;value, data);
}


void *VPmap::index(const void *theKey)
{
    VPAssoc *item, **list = &amp;keys[hash(theKey) % hashsize];
        if (isEqual(theKey, item-&gt;key))
           return item-&gt;value;
           // Key was not found,
           // creat a new association for this key
    VPAssoc *n = new VPAssoc;
    CreateKeyAndValue(this, theKey, n-&gt;key, n-&gt;value);
    n-&gt;next = *list;
    *list = n;

    return n-&gt;value;
}
/* End of File */
</pre>
</BODY>
</HTML>
