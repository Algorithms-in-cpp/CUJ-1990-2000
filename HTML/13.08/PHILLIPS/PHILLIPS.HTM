

<HTML>
<HEAD>

<TITLE>August 1995/Image Processing in C, Part 13: Geometric Operations</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocaug.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Graphics</FONT></H2>

<hr><h2 align="center"><font color="#800000">Image Processing in C, Part 13: Geometric Operations<A name="0100_00A0"><A name="0100_00A0"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0100_0000"><A name="0100_0000">Dwayne Phillips</font></h3><hr><blockquote><P>
<P><i><A name="0100_0000"><A name="0100_0000">Dwayne Phillips works as a computer and electronics engineer with the U.S. Department of Defense. He has a PhD in Electrical and Computer Engineering from Louisiana State University. His interests include computer vision, artificial intelligence, software engineering, and programming languages.</i></P><P>
<h4><FONT COLOR="#000080"><A name="0100_00A1">Introduction to the Series of Articles<A name="0100_00A1"></FONT></h4></P>
This article is thirteenth in a series of articles on images and image processing. Previous articles discussed reading, writing, displaying, and printing images (TIFF format), histograms, edge detection, spatial frequency filtering, sundry image operations, image segmentation, working with shapes, and Boolean operations (see sidebar for brief index). This article discusses geometric operations.<P>
A previous article in this series <a href="#1">[1]</a> discussed image operations that included simple 90-degree rotation and basic image zooming and shrinking. This article covers more powerful forms of these operations.<P>
You'll encounter several equations in this article, but do not be dismayed. I've included them here for people who really get into math. (All equations are shown in the box "Equations for Geometric Operations.) If math is not your specialty, you need only refer to the figures and images to understand the subject.<P>
<h4><FONT COLOR="#000080"><A name="0100_00A2">Geometric Operations<A name="0100_00A2"></FONT></h4></P>
Geometric operations change the spatial relationships between objects in an image, by moving objects around and changing their size and shape. Geometric operations can rearrange an image to help us see what we want to see a little better.<P>
The three basic geometric operations are displacement, stretching, and rotation. A fourth, less common operation is the cross product (included here to show how to distort an image using higher order terms).<P>
Displacement simply moves an image as a whole in the vertical and horizontal directions. Stretching enlarges or reduces an image in the vertical and horizontal directions. Rotation rotates an image by any angle. <A href="fig1.htm">Figure 1</a>
illustrates these three operations.<P>
<A href="sidebar1.htm">Equations (1) and (2)</a>
show the mathematics behind these operations <a href="#2">[2]</a>. The first two terms in each equation perform the rotation by any angle <FONT FACE="Symbol">q</FONT>. The x<SUB>displace</SUB> and x<SUB>displace</SUB> terms perform displacement. They shift the image in either horizontal or vertical directions respectively (left for x<SUB>displace</SUB> &gt; 0, right for y<SUB>displace</SUB> &lt; 0). The x &#149; x<SUB>stretch</SUB> term enlarges or shrinks the image in the horizontal direction while y &#149; y<SUB>stretch</SUB> does the same in the vertical direction. The x<SUB>cross</SUB> and y<SUB>cross</SUB> terms distort the image. The example in <A href="photo1.htm">Photograph 1</a>
illustrates this last operation.<P>
Setting x<SUB>cross</SUB> and y<SUB>cross</SUB> to anything but 0.0 introduces nonlinearities (curves), because <a href="sidebar1.htm">equations (1) and (2)</a> multiply the terms by both x and y. In <A href="photo1.htm">Photograph 1</a>
the input image appears on the left side, the output is on the right. I created this image with x<SUB>cross</SUB> and y<SUB>cross</SUB> = 0.01. Values much bigger than this distort the output image to almost nothing.<P>
<A href="sidebar1.htm">Equations (1) and (2)</a>
are powerful because they can do all four operations at once. Assigning values to the terms <FONT FACE="Symbol" SIZE=2>q</FONT>, x<SUB>displace</SUB>, y<SUB>displace</SUB>, x<SUB>stretch</SUB>, y<SUB>stretch</SUB>, x<SUB>cross</SUB>, and y<SUB>cross</SUB> determines the extent of modification that these operations will perform throughout the image.<P>
Using higher order terms in <A href="sidebar1.htm">equations (1) and (2)</a>
can cause greater distortion to the input. You can add a third order term to <A href="sidebar1.htm">equation (1)</a>
(x*x*y*x<SUB>double-cross</SUB>) and <A href="sidebar1.htm">equation (2)</a>
(y*y*x*y<SUB>double-cross</SUB>). Try this for homework. It will be easy given the source code below.<P>
<A href="list1.htm">Listing 1</a>
shows the <I>geometry</I> routine that implements these operations. <I>geometry</I> has the same form as the other image processing operators in this series. The operator's parameters come directly from <A href="sidebar1.htm">equations (1) and (2)</a>.
 The first section of code converts the input angle <I>theta</I> from degrees to radians and calculates the sine and cosine. The next section modifies the stretch terms if necessary to prevent division by zero.<P>
The heart of <I>geometry</I> is a pair of (nested) <I>for</I> loops, referred to here as "the loop." The loop essentially functions as a glorified pixel copier, with an added feature to eliminate "jaggies." For each output pixel location (i, j) the loop calculates a corresponding location in the input image (<I>tmpx, tmpy</I>) from which to grab a pixel. Chances are that <I>tmpx</I> and <I>tmpy</I> will not be integer values, so the loop must either interpolate or truncate to the nearest pixel.<P>
If variable b<I>i</I>l<I>inear</I> == <I>1</I>, the loop calls the bilinear interpolation function described below. Bilinear interpolation eliminates jaggies. If b<I>i</I>l<I>inear</I> == 0, the loop performs an implicit truncation <I>new_j = tmpx; new_i = tmpy</I>;) and sets the output image directly. In this case the compound <I>if</I> statement checks if the new points are inside the <I>ROWSxCOLS</I> array. If they are not, the output pixel gets the <I>FILL</I> value (this fills in vacant areas).<P>
<h4><FONT COLOR="#000080"><A name="0100_00A3">Rotation About Any Point<A name="0100_00A3"></FONT></h4></P>
The geometric operations above can rotate an image, but only about the origin (upper left-hand corner). Another type of rotation allows any point (m, n) in the image to be the center of rotation. <A href="sidebar1.htm">Equations (3) and (4)</a>
describe this operation <a href="#3">[3]</a>.<P>
<A href="fig2.htm">Figure 2</a>
illustrates how the input image (the rectangle) revolves about the point (m, n). Almost anything is possible by combining the basic geometric operations shown earlier with this type of rotation. For example, you can displace and stretch an image using the earlier operations and rotate that result about any point.<P>
<A href="list2.htm">Listing 2</a>
shows the routine <I>arotate</I> that performs rotation about any point (m, n). After creating the output image (if needed), <I>arotate</I> converts the angle of rotation from degrees to radians and calculates the sine and cosine. <I>arotate</I> loops through the image and calculates the new coordinates <I>tmpx</I> and <I>tmpy</I> using <A href="sidebar1.htm">equations (3) and (4)</a>.
 If bilinear == 1, <I>arotate</I> uses bi-linear interpolation (coming up next). Like <I>geometry</I>, <I>arotate</I> uses either bilinear interpolation (smooth output) or truncation (jaggies) when copying pixels from input to output.<P>
<h4><FONT COLOR="#000080"><A name="0100_00A4">What is Bi-Linear Interpolation?<A name="0100_00A4"></FONT></h4></P>
Bi-linear interpolation is a process that calculates an estimated gray level for a location between two or more pixels. In other words, it fills in holes with gray levels that make sense [<a href="#4">4</a>, <a href="#5">5</a>]. Bi-linear interpolation is a component of almost any visual production that requires image processing, including commercials, music videos, and movies. It's critical here to making the results of geometric operations look good.<P>
The bent lines in <A href="photo2.htm">photograph 2</a>
show why bi-linear interpolation is important. The left side represents the results of simple truncation &#151; no interpolation &#151; and is replete with jagged lines. The smooth bent lines on the right side result from bi-linear interpolation.<P>
What causes jagged lines? In geometric operations, which copy pixels from a source location to a destination, the source location often lies somewhere between input pixels. These source coordinates could be, say, x = 25.38 and y = 47.83. Which gray level should be assigned to that location? If the operation truncates it will copy the gray level from the pixel at x = 25 and y = 48. (That is what happens in code <A href="list1.htm">Listing 1</a>
and <A href="list2.htm">Listing 2</a>
when the parameter <I>bilinear</I> == 0.) Truncation produces the jagged lines.<P>
Bi-linear interpolation removes jagged lines by finding a sensible gray level between pixels. (Interpolation finds values between pixels in one direction; bi-linear interpolation finds values between pixels in two directions, hence the prefix bi.)<P>
<A href="fig3.htm">Figure 3</a>
shows how to perform bi-linear interpolation. Point P3 (x, y) falls somewhere between the pixels at the four corners. The four corners are at integer pixel locations (x = 25, x = 26, y = 47, y = 48). <A href="sidebar1.htm">Equations (5),
 (6),
 and (7)</a>
find a reasonable level for point P3. (In these equations x and y represent fractional values between 0 and 1.) For the pixel location x = 25.38 and y = 47.83, x and y as shown in the equation will be 0.38 and 0.83, respectively. <A href="sidebar1.htm">Equation (5)</a>
finds the gray level of point P1 by interpolating between the two upper corners. <A href="sidebar1.htm">Equation (6)</a>
finds the gray level of point P2 by interpolating between the two lower corners. <A href="sidebar1.htm">Equation (7)</a>
finally finds the gray level of P3 by interpolating between points P1 and P2.<P>
<A href="list3.htm">Listing 3</a>
shows the routine <I>bilinear_interpolate</I> that implements these equations. The input parameters are the entire image array <I>the_image</I> and the location (x, y). <I>bilinear_interpolate</I> returns an estimated gray level for location x, y. This routine contains slow, double-precision floating-point math, clearly showing the trade-off between truncation and interpolation &#151; speed vs. good looks.<P>
Bi-linear interpolation is a simple idea, uses a simple routine, and makes a world of difference in the output image. I recommend the truncation method for quick experiments and bi-linear interpolation for final presentations.<P>
<A href="list4.htm">Listing 4</a>
shows a stand-alone program that allows the user to work on entire images at a time. This program produced the images shown in this article.<P>
<h4><FONT COLOR="#000080"><A name="0100_00A5">A Stretching Program<A name="0100_00A5"></FONT></h4></P>
I've included a useful <I>stretch</I> utility for the code disk (not listed here) that will enlarge and shrink an entire image. The utility has many uses including fitting an image to a display screen for printing or photographing and making two images nearly equal size for comparisons. An earlier article in this series <a href="#1">[1]</a> showed how to perform a very simple, limited form of enlarging and shrinking. This form would only enlarge or shrink by an integer factor. The stretching and bi-linear interpolation tools now available permit general stretching, by non-integral scale factors.<P>
<A href="photo3.htm">Photograph 3</a>
shows sample output from the <I>stretch</I> program. It demonstrate how <I>stretch</I> can enlarge in one direction while shrinking in another.<P>
<h4><FONT COLOR="#000080"><A name="0100_00A6">Summary<A name="0100_00A6"></FONT></h4></P>
This installment in the series discussed geometric operations. These powerful and flexible operations change the relationships, size, and shape of objects in images. They allow you to manipulate images for better display, comparison, or just for fun. Keep them handy in your collection of tools.<P>
<h4>References</FONT></h4></P>
<a name="1"></a>[1]  Dwayne Phillips. "Image Processing, Part 8: Image Operations," <I>The C Users Journal</I>, November 1992, pp. 89-116.<P>
<a name="2"></a>[2]  Kenneth R. Castleman. <I>Digital Image Processing</I> (Prentice-Hall, 1979).<P>
<a name="3"></a>[3]  David F. Rogers and J. Alan Adams. <I>Mathematical Elements for Computer Graphics</I> (McGraw-Hill, 1976).<P>
<a name="4"></a>[4]  John C. Russ, <I>The Image Processing Handbook</I> (CRC Press, 1992).<P>
<a name="5"></a>[5]  Christopher Watkins, Alberto Sadun, and Stephen Marenka. <I>Modern Image Processing</I> (Academic Press, Cambridge, 1993).<P>

<h4><a href="../../../source/1995/aug95/phillips.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
