<HTML><HEAD>
<TITLE>August 1995/Standard C/C++/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1 <I>The struct</I> string_char_traits&lt;char&gt;</A></h4>
<pre>template&lt;class _E&gt;
   struct string_char_traits;
struct string_char_traits&lt;char&gt; {
   typedef char _E;
   typedef _E char_type;
   static void assign(_E&amp; _X, const _E&amp; _Y)
      {_X = _Y; }
   static bool eq(const _E&amp; _X, const _E&amp; _Y)
      {return (_X == _Y); }
   static bool ne(const _E&amp; _X, const _E&amp; _Y)
      {return (!eq(_X, _Y)); }
   static bool lt(const_E&amp; _X, const _E&amp; _Y)
      {return (_X &lt; _Y); }
   static _E eos()
      {return ('\0'); }
   static basic_istream&lt;_E, ios_traits&lt;_E&gt; &gt;&amp;
      char_in(basic_istream&lt;_E, ios_traits&lt;_E&gt; &gt;&amp; _I, _E&amp; _X)
      {_I.get(_X);
      return (_I); }
   static basic_ostream&lt;_E, ios_traits&lt;_E&gt; &gt;&amp;
      char_out(basic_ostream&lt;_E, ios_traits&lt;_E&gt; &gt;&amp; _O, _E _X)
      {_O.put(_X);
      return (_O); }
   static bool is_del(_E _X)
      {return (isspace((int)_X)); }
   static int compare(const _E *_U, const _E *_V, size_t _N)
      {return (memcmp(_U, _V, _N)); }
   static size_t length(const _E *_U)
      {return (strlen(_U)); }
   static _E *copy(_E *_U, const _E *_V, size_t _N)
      {return ((_E *)memcpy(_U, _V, _N)); }
   };
</pre>
</BODY>
</HTML>
