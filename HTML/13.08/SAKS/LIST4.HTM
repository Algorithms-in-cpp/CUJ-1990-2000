<HTML><HEAD>
<TITLE>August 1995/Stepping Up To C++/Listing 4</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 4 <I>Corrected listing 4 from "Mutable Class Members", CUJ, April 1995</I></A></h4>
<pre>// z2.cpp - a rudimentary class for complex numbers
// using "lazy" evaluation polar form
#include &lt;iostream.h&gt;
#include &lt;iomanip.h&gt;
#include &lt;math.h&gt;

class complex
   {
public:
   complex(double r, double i);
   complex(const complex &amp;z);
   complex &amp;operator=(const complex &amp;z);
   ~complex();
   double real() const;
   double imag() const;
   double rho() const;
   double theta() const;
   static int count;
private:
   double re, im;
   struct polar;
   polar *p;
   };

struct complex::polar
   {
   polar(double r, double t);
   ~polar( ):
   double rho, theta;
   static int count;
   };

int complex::polar::count = 0;

inline complex::polar::polar(double r, double t)
   : rho(r), theta(t)
   {
   cout &lt;&lt; "polar() [" &lt;&lt; ++count &lt;&lt; "]\n";
   }

inline complex::polar::~polar()
   {
   cout &lt;&lt; "~polar() [" &lt;&lt; count-- &lt;&lt; "]\n";
   }

int complex::count = 0;

inline complex::complex(double r, double i)
   : re(r), im(i), p(0)
   {
   cout &lt;&lt; "complex() [" &lt;&lt; ++count &lt;&lt; "]\n";
   }

inline complex::complex(const complex &amp;z)
   : re(z.re), im(z.im), p(0)
   {
   }

//
// This was the culprit...
//

inline complex &amp;complex::operator=(const complex &amp;z)
   {
   f (this != &amp;z]   // this is new
      {
      re = z. re;
      im = z. im;
      delete p;   // this is new
      p = 0;
      }
   return *this;
   }

inline complex::~complex()
   {
   delete p;
   cout &lt;&lt; "~complex() [" &lt;&lt; count-- &lt;&lt; "]\n";
   }

inline double complex::real() const
   {
   return re;
   }

inline double complex::imag( ) const
   {
   return im;
   }

double complex::rho() const
   {
   if (p == 0)
      {
      complex *This = const_cast&lt;complex *&gt;(this);
      This-&gt;p =
         new polar(sqrt(re*re + im*im), atan2(im, re));
      }
   return p-&gt;rho;
   }

double complex::theta() const
   {
   if (p == 0)
      (polar *&amp;)p =
         new polar(sqrt(re*re + im*im), atan2(im, re));
   return p-&gt; theta;
   }

complex operator+(const complex &amp;z1, const complex &amp;z2)
   {
   return complex
      (z1.real() + z2.real(), z1.imag() + z2.imag());
   }

int main()
   {
   complex z1(3, 4);
   cout &lt;&lt; '(' &lt;&lt; z1.real() &lt;&lt; ',' &lt;&lt; z1.imag() &lt;&lt; ')'
      &lt;&lt; endl;
   cout &lt;&lt; '(' &lt;&lt; z1.rho() &lt;&lt; ',' &lt;&lt; z1.theta() &lt;&lt; ')'
      &lt;&lt; endl;
   complex z2(1, 1);
   cout &lt;&lt; '(' &lt;&lt; z2.real() &lt;&lt; ',' &lt;&lt; z2.imag() &lt;&lt; ')'
      &lt;&lt; endl;
   cout &lt;&lt; '(' &lt;&lt; z2.rho() &lt;&lt; ',' &lt;&lt; z2.theta() &lt;&lt; ')'
      &lt;&lt; endl;
   z1 = z1 + z2;
   cout &lt;&lt; '(' &lt;&lt; z1.real() &lt;&lt; ',' &lt;&lt; z1.imag() &lt;&lt; )'
      &lt;&lt; endl;
   cout &lt;&lt; '(' &lt;&lt; z1.rho() &lt;&lt; ',' &lt;&lt; z1.theta() &lt;&lt;4 ')'
      &lt;&lt; endl;
   return 0;
   }

// End of File</pre>

</BODY>
</HTML>
