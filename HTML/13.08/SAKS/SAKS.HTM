

<HTML>
<HEAD>

<TITLE>August 1995/Stepping Up To C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocaug.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Stepping Up To C++<A name="011C_00AC"><A name="011C_00AC"></font></h2><P>
<h3 align="center"><A name="011C_0000"><A name="011C_0000">Other Assorted Changes, Part 2</h3><P>
<h3 align="center"><font color="#800000">Dan Saks</font></h3><hr><blockquote><P>
<P><i><A name="011C_0000"><A name="011C_0000">Dan Saks is the president of Saks &amp; Associates, which offers consulting and training in C++ and C. He is secretary of the ANSI and ISO C++ committees. Dan is coauthor of C++ Programming Guidelines, and codeveloper of the Plum Hall Validation Suite for C++ (both with Thomas Plum). You can reach him at 393 Leander Dr., Springfield OH, 45504-4906, by phone at (513)324-3601, or electronically at dsaks@wittenberg.edu.</i></P><P>
Two months ago, I started describing changes in the C++ language, that is, those features of C++ that have different behaviors under the current draft standard than they do in the <I>Annotated C</I>++ <I>Reference Manual</I> (ARM) <a href="#1">[1]</a>. Some changes simply ban constructs that the ARM allowed (intentionally or otherwise). Other changes actually redefine some constructs to have a different well-defined behavior.<P>
I began by explaining the changes in the scope rules:<P>
<UL><li>Conditional statements now introduce a new block scope.</li>
<li>The scope of a declaration in a <I>for-init-statement</I> is now restricted to the <I>for-statement</I>.</li>
<li>The "rewriting" rule and the rule limiting the context sensitivity of class member declarations have been replaced by comprehensive scope rules for class member declarations.</li>
<li>The point of declaration for an enumerator is now immediately after its <I>enumerator-definition</I>.</li></UL>
(See "Stepping Up to C++: Changes in Scope Rules," <I>CUJ</I>, June, 1995.)<P>
The remaining changes affect diverse parts of the C++ language. Last month, I detailed the following new rules:<P>
<UL><li>The left-hand side of a member access expression is always evaluated, even if the right-hand side designates a static member or enumeration constant.</li>
<li>Enumerations are not integral, so that built-in arithmetic operators, such as <I>++</I> and --, no longer apply to enumerations; however, enumerations can be promoted to <I>int</I>, <I>unsigned int</I>, <I>long</I>, or <I>unsigned long</I>.</li>
<li>In most cases, temporary objects are destroyed as the last step in evaluating the full-expression that (lexically) contains the point where they were created. This is true even if that evaluation ends in throwing an exception.</li></UL>
(See "Stepping Up to C++: Other Assorted Changes, Part 1," <I>CUJ</I>, July, 1995.)<P>
This month, I have more. Remember, these new rules do not include extensions to the C++ language. For descriptions of the extensions, refer to my earlier columns ("Stepping Up to C++," January through May, 1995).<P>
<h4><FONT COLOR="#000080"><A name="011C_00AD">Friend Functions in Local Classes<A name="011C_00AD"></FONT></h4></P>
Classes in C++ are an extension of structs in C. The class syntax is built upon the struct syntax, and classes observe essentially the same rules as structs. Since a struct in C++ is merely a special case of a class, the C++ draft standard simply uses the term <I>class</I> to refer to struct as well as class types.<P>
A class definition can appear in a C++ program anywhere that a struct definition can appear, even local to a function or a block. C++, like C, allows local class definitions as a direct result of its general block structure. (A <I>block</I> or <I>compound statement</I> is a sequence of declarations and statements enclosed in <I>{ }</I>. A function body is a block. A block may contain other blocks.)<P>
Block-local struct definitions come in handy once in a great while. I've used them to define tabular data that I want known only to one function in a program, as in the <I>xlate</I> function sketched in <A href="list1.htm">Listing 1</a>.
 <I>xlate</I> uses local struct <I>entry</I> to define translation table <I>xtab</I> for translating character strings into integer values. As always, defining <I>entry</I> locally avoids potential name conflicts with other entities named <I>entry</I> elsewhere in the program.<P>
As part of generalizing structs into classes, C++ allows local classes with member functions. However, C++ imposes various restrictions on local classes that it does not impose on global classes. Most of these restrictions exist to avoid introducing nested function definitions into C++.<P>
One such restriction is that member functions of a local class, if any, must be defined <I>in situ</I>. That is, member functions must be defined within their class definition. For example, you cannot write<P>
<pre>void f()
   {
   class X
      {
   public:
      int g();
      };
   int X::g() { ... } // Not!
   ...
   }</pre>
because this requires support for nested function definitions. Nor can you write:<P>
<pre>void f()
   {
   class X
      {
   public:
      int g();
      };
   ...
   }
int X::g() { ... }     // Not!</pre>
because <I>X</I> is not in scope outside <I>f</I>. Rather, you must define <I>X::g</I> in situ, as in<P>
<pre>void f()
   {
   class X
      {
   public:
      int g() { ... } // OK!
      };
   ...
   }</pre>
Another restriction is that declarations in a local class can use only types, static variables, extern variables, extern functions, and enumerators from the enclosing scope. Thus, a member function of a local class cannot access auto variables (including parameters) of the enclosing function. Both the ARM and the current draft illustrate this rule using the example shown as <A href="list2.htm">Listing 2</a>.
<P>
Member function <I>g</I> of local class <I>local</I> in <A href="list2.htm">Listing 2</a>
is in error because it refers to auto variable <I>x</I> defined in enclosing function <I>f</I>. C++ does not allow this access because it requires essentially the same run-time support as do nested functions. On the other hand, function <I>local::h()</I> is okay because it accesses only a static object from the enclosing function. This access requires no special run-time support.<P>
As with a global class, a local class can declare functions as friends. A function declared as a friend of a class is not a member of the class, but it can access private and protected members of that class. Friends of a class are typically global (non-member) functions; but they can also be members of another class.<P>
A friend declaration can grant friendship to a previously declared function. A friend declaration can also name a function that has not been declared, in which case the declaration introduces the function name into the innermost enclosing non-class scope. For example, assuming that <I>f</I> and <I>g</I> have not yet been declared, then<P>
<pre>class X
   {
   friend void f(X);
   class Y
      {
      friend void g();
      };
   };</pre>
declares f and g as functions at namespace scope. (<I>Namespace scope</I> is the new way to say <I>file scope</I>.) The definitions for <I>f</I> and <I>g</I> must appear at namespace scope either later in this translation unit or in some other unit.<P>
Friend declarations can also appear in local classes, and the governing rules are essentially the same as for friends in non-local classes. If the friend declaration names a previously declared function, the declaration grants friendship to that function. For example,<P>
<pre>int g();

int f()
   {
   class X
      {
      friend int g();
      };
   ...
   };</pre>
declares global function <I>g</I> as a friend of local class <I>X</I>. Of course, you must still define <I>g</I> somewhere to avoid a link error. We'll get to the definition of <I>g</I> in a moment.<P>
The previous example declares <I>g</I> before granting it friendship. As in a global class, a friend declaration in a local class can also name a function that has not been declared. Again, in that case, the friend declaration introduces the function declaration into the innermost enclosing non-class scope. For example,<P>
<pre>int f()
   {
   class X
      {
      friend int g();
      };
   ...
   };</pre>
declares <I>g</I> inside <I>f</I> as if you had written<P>
<pre>int f()
   {
   int g();    // introduced by friend g
   class X
      {
      friend int g();
      };
   ...
   };</pre>
Thus <I>g</I> has external linkage and refers to a function at namespace (file) scope defined elsewhere in the program. Note that if you defined<P>
<pre>int h()
   {
   return g();
   }</pre>
immediately after the definition for <I>f</I> above, the compiler would complain that <I>g</I> had not been declared. The declaration for <I>g</I> inside <I>f</I> makes <I>g</I> known in the body of <I>f</I>, but not outside <I>f</I>.<P>
Now, given that you've declared <I>g</I> as a friend of local class <I>X</I>, as in<P>
<pre>int f()
   {
   class X
      {
      friend int g();
      };
   };</pre>
where do you define <I>g</I>? Since <I>g</I> is a function with external linkage, clearly you can write the definition at namespace scope anywhere before or after <I>f</I>:<P>
<pre>int g()
   {
   ...
   }</pre>
Unfortunately, this definition can't take any advantage of its friendship with class <I>X</I>, because <I>X</I> is not in scope outside <I>f</I>. As such, the friend declaration is pretty useless.<P>
If you want <I>g</I> to take advantage of its friendship with <I>X</I>, you must define <I>g</I> where <I>X</I> is still in scope. But, as was the case with member functions of local classes, you can't define <I>g</I> inside function <I>f</I> but outside class <I>X</I>, as in<P>
<pre>int f()
   {
   class X
      {
      friend int g();
      };
   int g() { ... }    // Not!
   };</pre>
because this requires support for nested function definitions. However, you can refer to members of <I>X</I> if you define <I>g</I> at the same time you declare it, as in:<P>
<pre>int f()
   {
   class X
      {
      friend int g()
         {
         // can access X's members here
         ...
         }
      };
   ...
   };</pre>
The ARM suggests, by the absence of any statement to the contrary, that you can define a function with namespace scope in a friend declaration of a local class, as above. However, the committees discovered that such definitions might be hazardous, as shown by the example in <A href="list3.htm">Listing 3</a>.
<P>
As with members of local classes, a friend function defined in a local class can use only types, static variables, extern variables, extern functions, and enumerators from the enclosing scope. The definition for <I>g</I> in <A href="list3.htm">Listing 3</a>
meets this restriction, because it refers only to static variable <I>n</I> from the enclosing scope. Nonetheless, that reference to <I>n</I> is still a problem because the program might call <I>g</I> initializing <I>n</I>. Here's why.<P>
A C++ program may defer initialization for a local static object (a static object at block scope) until run time. If the initializing expression is a constant expression, as in<P>
<pre>void f()
   {
   static int n = 3;
   ...
   }</pre>
the program may do the initialization at load time, but the draft standard only guarantees that the initialization occurs prior to entering <I>f</I>. If the initializing expression is not constant, initialization occurs the first time control passes completely through the declaration. Thus, a program initializes <I>n</I> in <A href="list3.htm">Listing 3</a>
the first time it calls <I>f</I>.<P>
Since <I>g</I> is a global function, the program might call <I>g</I> before the first call to <I>f</I>. Thus, <I>g</I> might access <I>n</I> before <I>n</I> has been initialized. The resulting behavior is undefined (Bad Things will likely happen).<P>
The C++ standards committees considered outlawing friend declarations in local classes. After all, granting friendship from a local class to a function defined at namespace scope is apparently pretty useless because the function can't take advantage of the friendship. And, as shown just above, defining a global function in a friend declaration of a local class might lead to problems.<P>
Nevertheless, the committees decided, as they have in the past, not to ban a feature just because it's apparently useless. They opted instead to ban only the potentially dangerous forms. In March, 1993 the committees added the following rule to the draft in Section 11.4 [Friends]:<P>
Although a local class may declare a global function as a friend, it may not define it.<P>
Thus, the definition for <I>g</I> in <A href="list3.htm">Listing 3</a>
is now clearly an error.<P>
Sometime in the intervening years, that sentence evolved into:<P>
A function of namespace scope can be defined in a friend declaration of a non-local class.<P>
This no longer states the prohibition as clearly, but I'm sure the intent is the same.<P>
<h4><FONT COLOR="#000080"><A name="011C_00AE">Pointer Conversions<A name="011C_00AE"></FONT></h4></P>
In C++, as in C, <I>void *</I> is the generic data pointer type. That is, a <I>void *</I> has enough bits to hold a pointer to any object type. Thus, for any complete or incomplete object type <I>T</I>, a program can convert a <I>T *</I> to <I>void *</I> and back. In C++, the conversion from <I>T *</I> to <I>void *</I> requires a cast; in C it does not. In any event, the result of the conversion compares equal to the original pointer value.<P>
C does not provide a generic function pointer. <I>void *</I> doesn't fill the bill. The C standard makes no statement about the relative sizes of data pointers and function pointers. If function pointers are bigger (require more bits) than <I>void *,</I> converting a function pointer to <I>void *</I> and back won't preserve the original function pointer value.<P>
Even though C does not provide a generic function pointer type, it does guarantee that all function pointers have the same representation. Thus you can define a generic function pointer type, <I>fp_t</I>, as something like<P>
<pre>typedef void (*fp_t)(void);</pre>
Then you can convert any function pointer to <I>fp_t</I> and back, and the result will be the same as the original. (However, the conversions both to and from <I>fp_t</I> require casts.)<P>
C++ doesn't have a generic function pointer type either. However, the ARM suggests that a program can use <I>void *</I> as a generic function pointer when it states, in Section 4.6 [Pointer Conversions]:<P>
A pointer to function may be converted to <I>void *</I> provided <I>void *</I> has sufficient bits to hold it.<P>
Unfortunately, this is no help for programmers trying to write portable C++. Since there's no guarantee that a <I>void *</I> has enough bits, programmers must assume otherwise. Thus, the committees removed that statement and replaced it with the following footnote:<P>
It is ill-formed to convert a pointer to a function to or from a pointer to an object type.<P>
Using similar reasoning, they also removed the following from Section 5.4 [Explicit Type Conversion]:<P>
A pointer to function may be explicitly converted to a pointer to an object type provided the object pointer type has enough bits to hold the function pointer. A pointer to an object type may be explicitly converted to a pointer to function provided the function pointer has enough bits to hold the object pointer.<P>
Removing this text does not prevent implementations from offering these conversions as extensions. However, a translator must diagnose these conversions when operating in standard conforming mode.<P>
<h4><FONT COLOR="#000080"><A name="011C_00AF">Operator Function Names<A name="011C_00AF"></FONT></h4></P>
The ARM defines an <I>operator function name</I> as a construct of the form<P>
<I>operator-function-name:</I><P>
operator <I>op</I><P>
where <I>op</I> is an operator symbol such as <I>+</I>, <I>-</I>, <I>=</I>, or one of many others. For example,<P>
<pre>operator+
operator=
operator new</pre>
are valid operator function names. (The draft standard uses the term <I>operator-function-id</I> instead of <I>operator-function-name</I>.)<P>
Operator function names can appear in many of the places where ordinary function names can occur, such as function declarations:<P>
<pre>complex operator+(complex, complex);</pre>
function calls:<P>
<pre>B::operator=(d);</pre>
and so on.<P>
Unfortunately, the ARM inadvertently allows them in some pretty strange places. For instance, the ARM allows <I>operator op</I> as the name of an ordinary variable, as in<P>
<pre>int operator+ = 1;</pre>
The committees readily agreed this was never meant to be. According to the draft standard, this declaration is no longer valid C++.<P>
I have a few more changes left to cover, which I will do next month.<P>
<h4><FONT COLOR="#000080"><A name="011C_00B0">Errata<A name="011C_00B0"></FONT></h4></P>
One of my readers, Vince Urso, caught a couple of errors in the complex number class that I used to explain mutable class members ("Stepping Up To C++: Mutable Class Members," <I>CUJ</I>, April 1995). Both problems occurred in the definition of <I>complex::operator=</I> in <A href="list4.htm">Listing 4</a>
of that article. The corrections appear in <A href="list4.htm">Listing 4</a>,
 marked by comments that say "this is new."<P>
The first problem was that <I>complex::operator=</I> did not behave benignly when assigning a complex object to itself. Assigning an object to itself should have no apparent effect (other than eating processor cycles). I added the <I>if</I> statement to <I>complex::operator=</I> to insure that it does.<P>
The second problem was that <I>operator=</I> caused memory leaks by blindly assigning <I>0</I> (a null pointer) to <I>p</I> without deleting <I>p</I> first. I added the <I>delete</I> expression to cure that. (If <I>p</I> is null going into the <I>delete</I>, the <I>delete</I> has no effect.)<P>
For good measure, I added a static data member called <I>count</I> to each of the <I>complex</I> and <I>complex::polar</I> classes. The constructors for these classes increment their respective counters, and the destructors decrement them. Thus, these counters track the number of objects created but not yet destroyed to expose any remaining leaks. The leaks appear to be gone.<P>
Thanks Vince.<P>
<h4>References</FONT></h4></P>
<a name="1"></a>[1]</a>  Margaret A. Ellis and Bjarne Stroustrup. <I>The Annotated C</I>++ <I>Reference Manual</I> (Addison-Wesley, 1990).<P>

<h4><a href="../../../source/1995/aug95/saks.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
