



<HTML><HEAD>

<TITLE>April 1997/A C++ Matrix Template Class/Listing 3</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4>Listing 3:	Polynomial template class</h4>
<p></p>

<pre>
// poly.h - polynomial template class
//
#include &lt;stdexcept&gt;
#include &lt;vector&gt;
#include &lt;memory&gt;
#include &lt;function&gt;
#include &lt;stdlib&gt;

template&lt;class T&gt;
class polynomial {
   public:
      ~polynomial();
      // constructors
      // initializes the constant term
      polynomial( const T&amp; x0 = T(0.0) );
      // initializes from an array of coefficients
      polynomial( unsigned nc, const T *init );
      // copy constructor
      polynomial( const polynomial&lt;T&gt;&amp; cp );

      // evaluate the function for a given x
      T operator()( const T&amp; x ) const;
      // chain a polynomial
      polynomial&lt;T&gt; operator()( const polynomial&lt;T&gt;&amp; P ) const;
      // access coefficient array
      T&amp; operator[](int);
      const T&amp; operator[](int) const;

      // equality
      bool operator==( const polynomial&lt;T&gt;&amp; A ) const;
      bool operator!() const {
         return *this == polynomial&lt;T&gt;(0.0);
      }

      // assignment
      polynomial&lt;T&gt;&amp; operator=( const polynomial&lt;T&gt;&amp; cp );

      polynomial&lt;T&gt;&amp; operator+=( const polynomial&lt;T&gt;&amp; P );
      polynomial&lt;T&gt; operator+( const polynomial&lt;T&gt;&amp; P ) const {
         return polynomial&lt;T&gt;(*this) += P;
      }
      polynomial&lt;T&gt;&amp; operator-=( const polynomial&lt;T&gt;&amp; P );
      polynomial&lt;T&gt; operator-( const polynomial&lt;T&gt;&amp; P ) const {
         return polynomial&lt;T&gt;(*this) -= P;
      }
      polynomial&lt;T&gt; operator-() const;
      polynomial&lt;T&gt; operator+() const {
         return *this;
      }
      // same as multiplying by x ^ i
      polynomial&lt;T&gt; operator&lt;&lt;( int i ) const {
         return polynomial&lt;T&gt;(*this) &lt;&lt;= i;
      }
      // same as multiplying by x ^ -i
      polynomial&lt;T&gt; operator&gt;&gt; ( int i ) const {
         return operator&lt;&lt;(-i);
      }
      polynomial&lt;T&gt;&amp; operator&lt;&lt;=( int i ) {
         ofs-=i;
         return *this;
      }
      polynomial&lt;T&gt;&amp; operator&gt;&gt;=( int i ) {
         return operator&lt;&lt;=(-i);
      }
      polynomial&lt;T&gt; operator*( const polynomial&lt;T&gt;&amp; P ) const;
      polynomial&lt;T&gt;&amp; operator*=( const polynomial&lt;T&gt;&amp; P ) {
         return *this = (*this * P);
      }
      polynomial&lt;T&gt; operator/( const polynomial&lt;T&gt;&amp; D ) const;
      polynomial&lt;T&gt;&amp; operator/=( const polynomial&lt;T&gt;&amp; D ) {
         return *this = operator/(D);
      }

      // returns the deriviative function
      polynomial&lt;T&gt; derivative() const;

      // returns the integral function for the interval from c to x
      polynomial&lt;T&gt; integral( const T&amp; c ) const;

      int upper() const;
      int lower() const;

   private:
      std::vector&lt;T&gt; C;
      unsigned n;   // number of elements in array
      int ofs;      // array offset
      const T T0;   // additive identity of template parameter
};

//not shown: implementation of constructors, destructor, operators
// derivative()const, integral (const T &amp; c) const,
// -- mb
// ...

//not shown: integral(const T&amp; c) const, inserters -- mb
// ...
/* End of File */
</pre>
</body></html>
