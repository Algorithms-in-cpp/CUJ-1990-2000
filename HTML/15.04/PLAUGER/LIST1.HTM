



<HTML><HEAD>

<TITLE>April 1997/Standard C/C++/Listing 1</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4>Listing 1:	Template class set</h4>

<pre>
  // TEMPLATE CLASS set
template&lt;class K, class Pr = less&lt;K&gt;,
 class A = allocator&lt;K&gt; &gt;
 class set {
public:
 typedef set&lt;K, Pr, A&gt; Myt;
 typedef K value_type;
 struct Kfn : public unary_function&lt;value_type, K&gt; {
  const K&amp; operator()(const value_type&amp; X) const
  {return (X); }
  };
 typedef Pr value_compare;
 typedef K key_type;
 typedef Pr key_compare;
 typedef A allocator_type;
 typedef Tree&lt;K, value_type, Kfn, Pr, A&gt; Imp;
 typedef typename Imp::size_type size_type;
 typedef typename Imp::difference_type difference_type;
 typedef typename Imp::const_reference reference;
 typedef typename Imp::const_reference const_reference;
 typedef typename Imp::const_iterator iterator;
 typedef typename Imp::const_iterator const_iterator;
 typedef typename Imp::const_reverse_iterator
  reverse_iterator;
 typedef typename Imp::const_reverse_iterator
  const_reverse_iterator;
 typedef pair&lt;iterator, bool&gt; Pairib;
 typedef pair&lt;const_iterator, const_iterator&gt; Paircc;
 explicit set()
  : Tr(Pr(), false, A()) {}
 explicit set(const Pr&amp; Pred)
  : Tr(Pred, false, A()) {}
 explicit set(const Pr&amp; Pred, const A&amp; Al)
  : Tr(Pred, false, Al) {}
/// template&lt;class It&gt;
 typedef const value_type *It; ///
 set(It F, It L)
  : Tr(Pr(), false, A())
  {for (; F != L; ++F)
   Tr.insert(*F); }
/// template&lt;class It&gt;
 set(It F, It L, const Pr&amp; Pred)
  : Tr(Pred, false, A())
  {for (; F != L; ++F)
   Tr.insert(*F); }
/// template&lt;class It&gt;
 set(It F, It L, const Pr&amp; Pred,
  const A&amp; Al)
  : Tr(Pred, false, Al)
  {for (; F != L; ++F)
   Tr.insert(*F); }
 const_iterator begin() const
  {return (Tr.begin()); }
 const_iterator end() const
  {return (Tr.end()); }
 const_reverse_iterator rbegin() const
  {return (Tr.rbegin()); }
 const_reverse_iterator rend() const
  {return (Tr.rend()); }
 size_type size() const
  {return (Tr.size()); }
 size_type max_size() const
  {return (Tr.max_size()); }
 bool empty() const
  {return (Tr.empty()); }
 A get_allocator() const
  {return (Tr.get_allocator()); }
 Pairib insert(const value_type&amp; X)
  {Imp::Pairib Ans = Tr.insert(X);
  return (Pairib(Ans.first, Ans.second)); }
 iterator insert(iterator P, const value_type&amp; X)
  {return (Tr.insert((Imp::iterator&amp;)P, X)); }
/// template&lt;class It&gt;
 void insert(It F, It L)
  {for (; F != L; ++F)
   Tr.insert(*F); }
 iterator erase(iterator P)
  {return (Tr.erase((Imp::iterator&amp;)P)); }
 iterator erase(iterator F, iterator L)
  {return (Tr.erase((Imp::iterator&amp;)F,
   (Imp::iterator&amp;)L)); }
 size_type erase(const K&amp; Kv)
  {return (Tr.erase(Kv)); }
 void clear()
  {Tr.clear(); }
 void swap(Myt&amp; X)
  {STD swap(Tr, X.Tr); }
 friend void swap(Myt&amp; X, Myt&amp; Y)
  {X.swap(Y); }
 key_compare key_comp() const
  {return (Tr.key_comp()); }
 value_compare value_comp() const
  {return (Tr.key_comp()); }
 const_iterator find(const K&amp; Kv) const
  {return (Tr.find(Kv)); }
 size_type count(const K&amp; Kv) const
  {return (Tr.count(Kv)); }
 const_iterator lower_bound(const K&amp; Kv) const
  {return (Tr.lower_bound(Kv)); }
 const_iterator upper_bound(const K&amp; Kv) const
  {return (Tr.upper_bound(Kv)); }
 Paircc equal_range(const K&amp; Kv) const
  {return (Tr.equal_range(Kv)); }
protected:
 Imp Tr;
 };
  // set TEMPLATE OPERATORS
template&lt;class K, class Pr, class A&gt; inline
 bool operator==(const set&lt;K, Pr, A&gt;&amp; X,
  const set&lt;K, Pr, A&gt;&amp; Y)
 {return (X.size() == Y.size()
  &amp;&amp; equal(X.begin(), X.end(), Y.begin())); }
template&lt;class K, class Pr, class A&gt; inline
 bool operator!=(const set&lt;K, Pr, A&gt;&amp; X,
  const set&lt;K, Pr, A&gt;&amp; Y)
 {return (!(X == Y)); }
template&lt;class K, class Pr, class A&gt; inline
 bool operator&lt;(const set&lt;K, Pr, A&gt;&amp; X,
  const set&lt;K, Pr, A&gt;&amp; Y)
 {return (lexicographical_compare(X.begin(), X.end(),
  Y.begin(), Y.end())); }
template&lt;class K, class Pr, class A&gt; inline
 bool operator&gt;(const set&lt;K, Pr, A&gt;&amp; X,
  const set&lt;K, Pr, A&gt;&amp; Y)
 {return (Y &lt; X); }
template&lt;class K, class Pr, class A&gt; inline
 bool operator&lt;=(const set&lt;K, Pr, A&gt;&amp; X,
  const set&lt;K, Pr, A&gt;&amp; Y)
 {return (!(Y &lt; X)); }
template&lt;class K, class Pr, class A&gt; inline
 bool operator&gt;=(const set&lt;K, Pr, A&gt;&amp; X,
  const set&lt;K, Pr, A&gt;&amp; Y)
 {return (!(X &lt; Y)); }
/* End of File */
</pre>
</body></html>
