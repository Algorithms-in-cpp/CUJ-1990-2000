



<HTML><HEAD>

<TITLE>April 1997/Standard C/C++/Listing 2</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4>Listing 2:	Template class map</h4>

<pre>
  // TEMPLATE CLASS map
template&lt;class K, class Ty, class Pr = less&lt;K&gt;,
 class A = allocator&lt;Ty&gt; &gt;
 class map {
public:
 typedef map&lt;K, Ty, Pr, A&gt; Myt;
 typedef pair&lt;const K, Ty&gt; value_type;
 struct Kfn : public unary_function&lt;value_type, K&gt; {
  const K&amp; operator()(const value_type&amp; X) const
  {return (X.first); }
  };
 class value_compare
  : public binary_function&lt;value_type, value_type, bool&gt; {
  friend class map&lt;K, Ty, Pr, A&gt;;
 public:
  bool operator()(const value_type&amp; X,
   const value_type&amp; Y) const
   {return (comp(X.first, Y.first)); }
 protected:
  value_compare(Pr Pred)
   : comp(Pred) {}
  Pr comp;
  };
 typedef K key_type;
 typedef Ty referent_type;
 typedef Pr key_compare;
 typedef A allocator_type;
 typedef typename A::reference Tref;
/// typedef Tree&lt;K, value_type, Kfn, Pr,
///  A::rebind&lt;value_type&gt;::other&gt; Imp;
 typedef Tree&lt;K, value_type, Kfn, Pr, A&gt; Imp; ///
 typedef typename Imp::size_type size_type;
 typedef typename Imp::difference_type difference_type;
 typedef typename Imp::reference reference;
 typedef typename Imp::const_reference const_reference;
 typedef typename Imp::iterator iterator;
 typedef typename Imp::const_iterator const_iterator;
 typedef typename Imp::reverse_iterator reverse_iterator;
 typedef typename Imp::const_reverse_iterator
  const_reverse_iterator;
 typedef pair&lt;iterator, bool&gt; Pairib;
 typedef pair&lt;iterator, iterator&gt; Pairii;
 typedef pair&lt;const_iterator, const_iterator&gt; Paircc;
 explicit map()
  : Tr(Pr(), false, A()) {}
 explicit map(const Pr&amp; Pred)
  : Tr(Pred, false, A()) {}
 explicit map(const Pr&amp; Pred, const A&amp; Al)
  : Tr(Pred, false, Al) {}
/// template&lt;class It&gt;
 typedef const value_type *It; ///
 map(It F, It L)
  : Tr(Pr(), false, A())
  {for (; F != L; ++F)
   Tr.insert(*F); }
/// template&lt;class It&gt;
 map(It F, It L, const Pr&amp; Pred)
  : Tr(Pred, false, A())
  {for (; F != L; ++F)
   Tr.insert(*F); }
/// template&lt;class It&gt;
 map(It F, It L, const Pr&amp; Pred, const A&amp; Al)
  : Tr(Pred, false, Al)
  {for (; F != L; ++F)
   Tr.insert(*F); }
 iterator begin()
  {return (Tr.begin()); }
 const_iterator begin() const
  {return (Tr.begin()); }
 iterator end()
  {return (Tr.end()); }
 const_iterator end() const
  {return (Tr.end()); }
 reverse_iterator rbegin()
  {return (Tr.rbegin()); }
 const_reverse_iterator rbegin() const
  {return (Tr.rbegin()); }
 reverse_iterator rend()
  {return (Tr.rend()); }
 const_reverse_iterator rend() const
  {return (Tr.rend()); }
 size_type size() const
  {return (Tr.size()); }
 size_type max_size() const
  {return (Tr.max_size()); }
 bool empty() const
  {return (Tr.empty()); }
 A get_allocator() const
  {return (Tr.get_allocator()); }
 Tref operator[](const key_type&amp; Kv)
  {iterator P = insert(value_type(Kv, Ty())).first;
  return ((*P).second); }
 Pairib insert(const value_type&amp; X)
  {Imp::Pairib Ans = Tr.insert(X);
  return (Pairib(Ans.first, Ans.second)); }
 iterator insert(iterator P, const value_type&amp; X)
  {return (Tr.insert((Imp::iterator&amp;)P, X)); }
/// template&lt;class It&gt;
 void insert(It F, It L)
  {for (; F != L; ++F)
   Tr.insert(*F); }
 iterator erase(iterator P)
  {return (Tr.erase((Imp::iterator&amp;)P)); }
 iterator erase(iterator F, iterator L)
  {return (Tr.erase((Imp::iterator&amp;)F,
   (Imp::iterator&amp;)L)); }
 size_type erase(const K&amp; Kv)
  {return (Tr.erase(Kv)); }
 void clear()
  {Tr.clear(); }
 void swap(Myt&amp; X)
  {STD swap(Tr, X.Tr); }
 friend void swap(Myt&amp; X, Myt&amp; Y)
  {X.swap(Y); }
 key_compare key_comp() const
  {return (Tr.key_comp()); }
 value_compare value_comp() const
  {return (value_compare(Tr.key_comp())); }
 iterator find(const K&amp; Kv)
  {return (Tr.find(Kv)); }
 const_iterator find(const K&amp; Kv) const
  {return (Tr.find(Kv)); }
 size_type count(const K&amp; Kv) const
  {return (Tr.count(Kv)); }
 iterator lower_bound(const K&amp; Kv)
  {return (Tr.lower_bound(Kv)); }
 const_iterator lower_bound(const K&amp; Kv) const
  {return (Tr.lower_bound(Kv)); }
 iterator upper_bound(const K&amp; Kv)
  {return (Tr.upper_bound(Kv)); }
 const_iterator upper_bound(const K&amp; Kv) const
  {return (Tr.upper_bound(Kv)); }
 Pairii equal_range(const K&amp; Kv)
  {return (Tr.equal_range(Kv)); }
 Paircc equal_range(const K&amp; Kv) const
  {return (Tr.equal_range(Kv)); }
protected:
 Imp Tr;
 };
  // map TEMPLATE OPERATORS
template&lt;class K, class Ty, class Pr, class A&gt; inline
 bool operator==(const map&lt;K, Ty, Pr, A&gt;&amp; X,
  const map&lt;K, Ty, Pr, A&gt;&amp; Y)
 {return (X.size() == Y.size()
  &amp;&amp; equal(X.begin(), X.end(), Y.begin())); }
template&lt;class K, class Ty, class Pr, class A&gt; inline
 bool operator!=(const map&lt;K, Ty, Pr, A&gt;&amp; X,
  const map&lt;K, Ty, Pr, A&gt;&amp; Y)
 {return (!(X == Y)); }
template&lt;class K, class Ty, class Pr, class A&gt; inline
 bool operator&lt;(const map&lt;K, Ty, Pr, A&gt;&amp; X,
  const map&lt;K, Ty, Pr, A&gt;&amp; Y)
 {return (lexicographical_compare(X.begin(), X.end(),
  Y.begin(), Y.end())); }
template&lt;class K, class Ty, class Pr, class A&gt; inline
 bool operator&gt;(const map&lt;K, Ty, Pr, A&gt;&amp; X,
  const map&lt;K, Ty, Pr, A&gt;&amp; Y)
 {return (Y &lt; X); }
template&lt;class K, class Ty, class Pr, class A&gt; inline
 bool operator&lt;=(const map&lt;K, Ty, Pr, A&gt;&amp; X,
  const map&lt;K, Ty, Pr, A&gt;&amp; Y)
 {return (!(Y &lt; X)); }
template&lt;class K, class Ty, class Pr, class A&gt; inline
 bool operator&gt;=(const map&lt;K, Ty, Pr, A&gt;&amp; X,
  const map&lt;K, Ty, Pr, A&gt;&amp; Y)
 {return (!(X &lt; Y)); }
/* End of File */
</pre>
</body></html>
