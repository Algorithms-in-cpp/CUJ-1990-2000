



<HTML><HEAD>

<TITLE>April 1997/The Learning C/C++urve/Listing 2</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4>Listing 2:	How circle_interface and circle_implementation work together
with client code</h4>

<pre>

int main()
    {
    //
    //  Call some magic API in the system that returns
    //  an implementation object.  Under the hood, this
    //  API calls 'malloc', 'new', or something
    //  similar to mint a new implementation object, or
    //  returns a pointer to an already existing object.
    //  For this example, I assume the creation succeeds.
    //
    circle_implementation *implementation = NULL;
    create_circle_implementation(&amp;implementation);
    //
    //  Ask the implementation object to create an
    //  interface object.  Remember, the interface is an
    //  abstract base class, so you can't declare
    //  objects of that type -- only pointers and
    //  references.
    //
    circle_interface *interface =
            dynamic_cast&lt;circle_interface *&gt;
            (implementation-&gt;create_interface(CIRCLE_ID));
    if (interface != NULL)
        {
        //
        //  Implementation object supports the interface.
        //  Call the interface's members, then decrement
        //  the interface's reference count.
        //
        interface-&gt;set_radius(10);
        cout &lt;&lt; "area is " &lt;&lt; interface-&gt;get_area()
                &lt;&lt; endl;
        interface-&gt;release();
        }
    //
    //  Free the implementation object the system handed
    //  back earlier.  Because this API is meant to
    //  be called from any language, it is not terribly
    //  object-oriented (e.g., we can't call
    //  'implementation-&gt;destroy()', or rely on the
    //  implementation's destructor).
    //
    destroy_circle_implementation(implementation);
    return 0;
    }
//End of File
</pre>
</body></html>
