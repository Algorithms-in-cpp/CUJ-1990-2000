






<HTML>
     
     <HEAD>


          
          <TITLE>April 1997/C++ Theory and Practice</TITLE>
     </HEAD>
     
     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          
          <H2><A href="../tocapr.htm"><IMG src="../../toc.gif" ALT="Back to TOC" WIDTH="54" HEIGHT="54"></A>
          <FONT COLOR="#FF0000">Columns</FONT></H2>
          
          <HR>
          
          <H2 ALIGN="center"><FONT COLOR="#800000">C++ Theory and Practice</FONT></H2>
          
          <H3 ALIGN="center"><FONT COLOR="#800000"> Dan Saks</FONT></H3>
          
          <H3 ALIGN="center"><FONT COLOR="#800000">Placement new</FONT></H3>
          
          <BLOCKQUOTE>
          <P>Build your own objects, using ordinary materials found around the
               home, with placement new. But be careful.</P>
          </BLOCKQUOTE>
          <HR>
          <BLOCKQUOTE>
               <P><B><I>Copyright &copy; 1997 by Dan Saks</I></B></P>
               <p>This is the third in a series of
                    articles on new and delete. I assume that you know by now
                    that a new-expression creates objects in two distinct steps.
                    First, it allocates storage for an object by calling an
                    allocation function (a function named either operator new or
                    operator new[]). Then it initializes the object by calling a
                    constructor or, if the object is an array, by calling a 
                    constructor for each array element. </p>
               
               <p> A delete-expression also does its
                    thing in two steps. First, it destroys the value in an
                    object by calling a destructor or, if the object is an
                    array, by calling a destructor for each array element. It
                    then deallocates the object's storage by calling a
                    deallocation function (a function named either operator
                    delete or operator delete[]). (For more details, see the
                    first article in this series, "C++ Theory and Practice:
                    new and delete," CUJ, January, 1997.) </p>
               
               <p> C++ specifies the underlying
                    machinery for each step so that programmers can fine tune
                    the behavior of new- and delete-expressions by replacing
                    parts of that machinery. Not only can you replace the global
                    allocation and deallocation functions, you can also define
                    allocation and deallocation functions as members of
                    individual classes. (See the second article in this series, 
                    "C++ Theory and Practice: Class-specific new and
                    delete," CUJ, March 1997.)</p>
               
               <p> Class-specific allocation and
                    deallocation functions give you the ability to establish
                    different allocation*/- strategies for each different class
                    type or array thereof. If that's not enough flexibility for
                    you, C++ even lets you establish multiple allocation
                    strategies, at either the global or class scopes. This added
                    flexibility comes to you courtesy of a feature called 
                    placement.</p>
               
               <h4><FONT COLOR="#000080">Placement Syntax</FONT></H4>
               
               <p>A typical new-expression such as</p>

<PRE>
p = new T;
</PRE>
               
               <p>allocates memory for a T object (for
                    some non-array type T) by the allocation function call:</p>

<PRE>
p = operator new(sizeof(T));
</PRE>
               
               <p>A typical array-new-expression such as</p>

<PRE>
p = new T[n];
</PRE>
               
               <p>allocates memory for an array of n T
                    objects by the allocation function call:</p>

<PRE>
p = operator new[](n * sizeof(T));
</PRE>
               
               <p>The allocation functions must be
                    declared as</p>

<PRE>
void *operator new(size_t n)
    throw (bad_alloc);
void *operator new[](size_t n)
    throw (bad_alloc);
</PRE>
               
               <p>They could be global or, if T is a
                    class type, they could be members of T.</p>
               
               <p>Both size_t and bad_alloc are types
                    defined in namespace std. As in my previous article, I shall
                    refer to size_t and bad_alloc without the std:: prefix. You
                    should assume that the using-directive</p>

<PRE>
using namespace std;
</PRE>
               
               <p>is in effect from here on.</p>
               
               <p>As with any other function, you can
                    overload an operator new (at either global or class scope)
                    by simply declaring additional functions named operator new
                    with different parameter types. For example, in addition to
                    the operator new declared above, you might declare</p>

<PRE>
void *
operator new(size_t n, alloc_info i)
    throw (bad_alloc);
void *
operator new[](size_t n,
               alloc_info i)
    throw (bad_alloc);
</PRE>
               
               <p>where alloc_info is some user-defined
                    type for conveying additional allocation information to the
                    allocation function. That's simple enough, but how do you
                    can you get new-expression to use one of these allocation
                    functions instead of the usual ones?</p>
               
               <p>The problem is finding some way to
                    pass the additional argument to operator new or operator
                    new[]. You can't add a parenthesized argument list after the
                    type name in the new-expression because the compiler will
                    interpret that list as arguments to a constructor, not as
                    arguments to an operator new. For example,</p>

<PRE>
p = new T (x);
</PRE>
               
               <p>passes x as an argument to a T
                    constructor. Consequently, you must squeeze the additional
                    argument(s) to the allocation function into some other spot
                    in the new-expression. The chosen spot is immediately after
                    the keyword new.</p>
               
               <p>For example, the new-expression in</p>

<PRE>
alloc_info ai;
...
p = new (ai) T;
</PRE>
               
               <p>specifies ai as an additional argument
                    to operator new. As always, the new-expression uses
                    sizeof(T) as the first argument to operator new. Thus, the
                    new-expression results in a call to</p>

<PRE>
operator new(sizeof(T), ai)
</PRE>
               
               <p>To create an array of T using the
                    alternate operator new[], you use a new--expression such as</p>

<PRE>
p = new (ai) T[n];
</PRE>
               
               <p>which results in a call to</p>

<PRE>
operator new[](n * sizeof(T), ai)
</PRE>
               
               <p>Compilers look in the usual places
                    (class and global scope) and apply the usual rules for
                    argument matching in overload resolution to find an
                    allocation function that will accept this assembled argument
                    list. It's a compile-time error if no such function exists.
                    </p>
               
               <p> Since C++ uses the usual argument
                    matching rules, the parameter type to an allocation function
                    need not match the argument type exactly. For example, if
                    class D is publicly derived from B, the new-expression in</p>

<PRE>
D d;
...
p = new (d) T;
</PRE>
               
               <p>can invoke</p>

<PRE>
void *operator new(size_t n, B &amp;b)
    throw(bad_alloc);
</PRE>
               
               <p>because a B &amp; can bind to a D. If
                    there is also a</p>

<PRE>
void *operator new(size_t n, D &amp;d)
    throw(bad_alloc);
</PRE>
               
               <p>this function is a better match for
                    argument d, and the new-expression will use this one
                    instead.</p>
               
               <p>Stroustrup [<A href="#REF1">1</a>]

                    explained that his primary motivation for adding this syntax
                    to new-expressions was to pass information on where to place
                    the created object. Hence, he dubbed the argument list after
                    the keyword new the placement syntax. A new-expression that
                    includes the placement syntax is called new with placement
                    or just placement new.</p>
               
               <h4><FONT COLOR="#000080">Using Placement new</FONT></H4>
               
               <p>The Standard library provides an
                    operator new defined as</p>

<PRE>
void *operator new(size_t, void *p) throw()
    {
    return p;
    }
</PRE>
               
               <p>which a program can use to construct
                    an object at a particular address. The library also provides</p>

<PRE>
void *operator new[](size_t, void *p) throw()
    {
    return p;
    }
</PRE>
               
               <p>which a program can use to construct
                    an array at a particular address.</p>
               
               <p>For example, a program for an embedded
                    system that employs memory-mapped i/o might construct i/o
                    port objects at specified hardware locations using placement
                    new as follows:</p>

<PRE>
class port
    {
    ...
    };

port *const console =
    static_cast&lt;port *&gt;(0xFF70);

...

new (console) port;
</PRE>
               
               <p>This new-expression calls</p>

<PRE>
operator new(sizeof(port), console)
</PRE>
               
               <p>which ignores the first argument (the
                    size) and simply returns console as the location of the
                    storage for constructing a port object.</p>
               
               <p>The program can then perform
                    operations on the port almost as if it were any other
                    dynamically-created object. For example, putting a character
                    to the console might entail calling</p>

<PRE>
console-&gt;put('x');
</PRE>
               
               <p>If class port has a destructor, the
                    program can shut down the console sometime later by
                    explicitly calling that destructor using</p>

<PRE>
console-&gt;~port();
</PRE>
               
               <p>You should be careful to avoid writing</p>

<PRE>
delete console;
</PRE>
               
               <p>because console does not point to
                    storage that came from the free store. That
                    delete-expression could wreak all sorts of havoc on the
                    program.</p>
               
               <p>If you prefer that the console appear
                    to the application as an object rather than as a pointer,
                    you can declare the console as a reference:</p>

<PRE>
port &amp;console =
    *static_cast&lt;port *&gt;(0xFF70);
</PRE>
               
               <p>and use &amp;console (rather than just
                    console) as the placement argument:</p>

<PRE>
new (&amp;console) port;
</PRE>
               
               <p>Then, member function calls applied to
                    the console would look like:</p>

<PRE>
console.put('x');
</PRE>
               
               <p>and the destructor call would look
                    like:</p>

<PRE>
console.~port();
</PRE>
               
               <p>Another use for placement new is to
                    place an object anywhere within a particular region of
                    memory, rather than at just one specified location. For
                    example, in a multitasking system, you might want to place
                    some objects in a region shared by several tasks, and place
                    other objects in a region accessible only to a single task.
                    This you might do by declaring</p>

<PRE>
enum privilege { exclusive, shared };
void *operator new(size_t n, privilege p);
</PRE>
               
               <p>Then you can place objects in shared
                    memory by using new-expressions of the form:</p>

<PRE>
p = new (shared) T;
</PRE>
               
               <p>Both Murray [<A href="#REF2">2</a>]

                    and Stroustrup [<A href="#REF1">1</a>]
 use the term arena
                    to refer to a memory allocation region. Murray provides a
                    fairly complete example of a simple template class for
                    managing arenas.</p>
               
               <h4><FONT COLOR="#000080">Calling a Constructor</FONT></H4>
               
               <p>As I demonstrated earlier, C++ lets
                    you apply a destructor directly to an object using a call
                    such as x.~T() or p-&gt;~T(), where x is a T object or a
                    reference to a T and p is a pointer to T. On the other hand,
                    C++ does not let you apply a constructor using the
                    corresponding notation x.T() or p-&gt;T(). However, you can
                    achieve the effect of a constructor call by using placement
                    new. </p>
               
               <p> For example,</p>

<PRE>
new (&amp;x) T;
</PRE>
               
               <p>constructs a T object in object x by
                    applying T's default constructor to x as if it were an
                    unitialized T object. This raises an interesting question:
                    How can you declare x so this placement new will behave
                    itself?</p>
               
               <p>x must be a region of memory big
                    enough to hold a T. You might try declaring x as</p>

<PRE>
char x[sizeof(T)];
</PRE>
               
               <p>and it might even work. However, if
                    you try this on an architecture where a T object must be
                    aligned on an address that's a multiple of say, four or
                    eight bytes, the placement new expression might fail. In
                    particular, if character array x doesn't satisfy the
                    alignment requirement for T, the placement new expression
                    will induce a hardware addressing fault when it attempts to 
                    construct a T object in array x.</p>
               
               <p>One way to ensure that x is properly
                    aligned is to declare it as</p>

<PRE>
T x;
</PRE>
               
               <p>but then x is not just a region of
                    memory anymore; it's a completely constructed T object
                    (initialized by T's default constructor). Applying</p>

<PRE>
new (&amp;x) T;
</PRE>
               
               <p></p>
               
               <p>constructs a T object right on top of
                    an existing T, which might cause resource leaks. If, prior
                    to executing the placement new, x possesses some allocated
                    resources, the constructor call from the placement new
                    expression will allocate resources for a new T object
                    without releasing the old resources. Not good.</p>
               
               <p>You can avoid potential resource leaks
                    by destroying the value of x before building a new object on
                    top of it. That is, you should call x.~T() prior to the
                    placement new expression. </p>
               <p>As if often the case with C++, powerful features such as
                    placement new can be an agent for evil as well as good. For
                    example, you can use explicit destructors and placement new
                    to alter the value of a logically const object, as follows.</p>
               <p>Normally, a program cannot alter the value of a logically
                    const object. For instance, given</p>

<PRE>
string const name("Ben");
</PRE>
               
               <p>where string is the standard library
                    string class, compilers should reject any attempts to alter
                    the value of name, such as</p>

<PRE>
name = "Jeremy";
</PRE>
               
               <p>But a const object is const only until
                    its destructor commences. So you can nullify the logical
                    const-ness of name by destroying it and then constructing
                    the new value in its place, as in</p>

<PRE>
name.~string();
new (&amp;name) string("Jeremy");
</PRE>
               
               <p>A complete program that does this
                    nasty deed appears in <A href="list1.htm">Listing 1</a>.

                    The placement argument &amp;name has type string const *.
                    The new-expression (immediately above and in
                    <A href="list1.htm">Listing 1</a>)
 requires an operator
                    new whose second parameter is either void const * or string
                    const *. It cannot use the Standard library function</p>

<PRE>
void *operator new(size_t, void *)
    throw();
</PRE>
               
               <p>because there's no standard conversion
                    from string const * to void *. Therefore, the program
                    supplies its own operator new whose second parameter is void
                    const *. There is a standard conversion from string const *
                    to void const *.</p>
               
               <p>As the caption for
                    <A href="list1.htm">Listing 1</a>
says, this technique is
                    pretty perverse. In fact, the current draft standard states
                    that it produces undefined behavior. I'm not sure, but this
                    might be worse than casting-away const because of the way it
                    disguises what it's doing. I normally wouldn't even show you
                    this except that I saw something like this in a C++ textbook
                    whose name I won't  mention. The book did not include what I
                    would consider an appropriate "Don't do this at home"
                    admonition, so I'm giving it to you now. </p>
               
               <p> For the most part, using placement
                    new to construct an object at a specified address is a
                    relatively low-level style of programming. It's not
                    something you want to do very often. As always, you must
                    make thoughtful judgments about what's robust and
                    maintainable. </p>
               
               <p> Here's an example of a coding
                    practice I find much more acceptable. Suppose some part of
                    your program deletes a pointer p pointing to a T object, and
                    then turns around almost immediately and allocates another T
                    object, as in</p>

<PRE>
delete p;
...
p = new T;
</PRE>
               
               <p>If your performance measurements
                    indicate that the overhead of deallocating and reallocating
                    these objects is too costly at this point in the program,
                    you might be able to reduce that overhead by rewriting the
                    code as</p>

<PRE>
p-&gt;~T();
...
new (p) T;
</PRE>
               
               <p>As long as the distance between these
                    two statements is short, and there's a comment to explain
                    this little hack, I think this would be okay.</p>
               
               <h4><FONT COLOR="#000080">new with nothrow</FONT></H4>
               
               <p>In days of old, allocation functions
                    and new-expressions used to indicate allocation failures by
                    returning a null pointer. These days, the "usual"
                    allocation functions indicate failure by throwing an
                    exception of type bad_alloc. Some programmers with existing
                    C++ applications may prefer to avoid integrating C++
                    exception-handling into their code. Even those who choose to
                    use exceptions may elect to avoid them in certain parts of
                    their application. </p>
               <p>One way to avoid throwing exceptions when creating objects
                    dynamically is to allocate memory using malloc instead of
                    operator new. malloc is a Standard C function which is
                    incapable of throwing an exception. Thus, rather than risk
                    throwing an exception using</p>

<PRE>
p = new T (v);
</PRE>
               
               <p>you can avoid exceptions by writing</p>

<PRE>
p = static_cast&lt;T *&gt;(malloc(sizeof(T)));
new (p) T (v);
</PRE>
               
               <p>Although this placement new expression
                    calls an operator new, it calls the Standard library's</p>

<PRE>
void *operator new(size_t, void *)
    throw();
</PRE>
               
               <p>which never throws exceptions. (This
                    discussion presumes that T's constructor does not throw any
                    exceptions either.)</p>
               
               <p>You can collapse the previous two
                    statements into one, and avoid the cast in the process
                    (always a good thing), by writing</p>

<PRE>
p = new (malloc(sizeof(T))) T (v);
</PRE>
               
               <p>The C++ library offers a slightly
                    cleaner way to avoid throwing exceptions from allocation
                    failures. It provides yet another overloading for each of
                    the allocation functions:</p>

<PRE>
void *
operator new(size_t, const nothrow_t &amp;)
    throw();
void *
operator new[](size_t, const nothrow_t &amp;)
    throw();
</PRE>
               
               <p>These are the nothrow allocation
                    functions.</p>
               
               <p>nothrow_t is a type defined in
                    namespace std as an empty struct:</p>

<PRE>
struct nothrow_t { };
</PRE>
               
               <p>Its only purpose is to provide a type
                    that gives the nothrow allocation functions a distinct
                    parameter type.</p>
               
               <p>The nothrow allocation functions
                    behave exactly like the "usual" allocation
                    functions:</p>

<PRE>
void *operator new(size_t)
    throw(bad_alloc);
void *operator new[](size_t)
    throw(bad_alloc);
</PRE>
               
               <p>except when an allocation failure
                    occurs. Whereas the "usual" allocation functions
                    throw a bad_alloc exception, the nothrow allocation
                    functions return a null pointer.</p>
               
               <p>For example, the new-expression:</p>

<PRE>
p = new (nothrow_t()) T;
</PRE>
               
               <p>creates a T object in storage
                    allocated by nothrow operator new via the call:</p>

<PRE>
operator new(sizeof(T), nothrow_t())
</PRE>
               
               <p>Notice that the placement argument is
                    nothrow_t() rather than just nothrow_t. The argument to the
                    nothrow operator new must be a nothrow_t object. The
                    expression nothrow_t() yields a temporary nothrow_t object
                    initialized using a compiler-generated default constructor.
                    </p>
               
               <p> Those added parentheses make nothrow
                    new-expressions a little harder to read and write, so the
                    library includes a definition for a common nothrow_t object:</p>

<PRE>
extern const nothrow_t nothrow;
</PRE>
               
               <p>Using this object, you can simplify
                    the previous nothrow new-expression by writing</p>

<PRE>
p = new (nothrow) T;
</PRE>
               
               <p>You can freely intermix throw and
                    nothrow new-expressions in your programs. In either case,
                    you discard the objects using</p>

<PRE>
delete p;
</PRE>
               
               <p>for individual objects or</p>

<PRE>
delete [] p;
</PRE>
               
               <p>for arrays.</p>
               
               <h4><FONT COLOR="#000080">References</FONT></H4>
               
               <p>[<A name="REF1">1</a>]
 Bjarne
                    Stroutrup. The Design and Evolution of C++ (Addison-Wesley,
                    1994). </p>
               
               <p> [<A name="REF2">2</a>]
 Murray
                    [1994]. Robert B. Murray. C++ Strategies and Tactics
                    (Addison-Wesley, 1993). </p></BLOCKQUOTE>

<P><I>Dan Saks is the president of Saks & Associates, which offers training and consulting in C++ and C. He is active in C++ standards, having served nearly seven years as secretary of the ANSI and ISO C++ standards committees. Dan is coauthor of C++ Programming Guidelines, and codeveloper of the Plum Hall Validation Suite for C++ (both with Thomas Plum). You can reach him at 393 Leander Dr., Springfield, OH 45504-4906 USA, by phone at +1-937-324-3601, or electronically at dsaks@wittenberg.edu.</FONT></I></P> 
     
<h4><a href="../../../source/1997/apr97/saks.zip">Get Article Source Code</a></h4>

     </BODY>
</HTML>
