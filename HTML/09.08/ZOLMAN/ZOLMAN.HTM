


<HTML>
<HEAD>

<TITLE>August 1991/Illustrated C</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocaug.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Illustrated C<A name="01E7_00EC"><A name="01E7_00EC"></font></h2><P>
<h3 align="center"><A name="01E7_0000"><A name="01E7_0000">Processing Code Listings For Publication, Part 1</h3><P>
<h3 align="center"><font color="#800000">Leor Zolman</font></h3><hr><blockquote><P>
<P><i><A name="01E7_0000"><A name="01E7_0000">Leor Zolman bought his first microcomputer (an IMSAI 8080) while in high school in L.A., carried it to M.I.T., withdrew, and wrote the<I></I> <I></I>BDS C compiler with it in assembly language. That was enough assembly language hacking to last a lifetime, so now he enjoys UNIX/Xenix<I></I> <I></I>system administration, article writing, and raising his newborn daughter Katelyn. You can reach him at leor@rdpub.com or<I></I> <I></I>uunet!bdsoft!rdpub!leor.</i></P><P>
If you leaf through this or most any other magazine, you may notice how the material is organized into columns. While advertising material and editorial narrative tend to make effective use of their allotted number of columns, long program listings are usually a different story.<P>
The trouble is something inherent to the nature of structured programming: liberal use of indentation is standard, reasonable practice for maintaining readability. But once you've indented enough tab stops to the right there may not be much space remaining for code &#151; especially if the entire width of the listing needs to fit in a space narrower than one full page.<P>
Then there is the whole, messy issue of comments. Unless you take  advantage of the C++ // comment delimiter, it costs at least six columns of overhead just to delimit a complete comment on a single line of code ("/* " and " */", shown with a space character at each end to keep the comment text from bumping right up to each delimiter).<P>
Two traditional solutions to this excessive-code-girth problem are<P>
a) photographically reducing code listings<P>
b) asking authors to re-write listings to reduce maximum line length<P>
The first approach tends to result in printed listings that are difficult to both read and scan. In this and next month's columns, I'll present a pair of C programs that together provide a reasonably effective automated solution to the second approach.<P>
<h4><FONT COLOR="#000080"><A name="01E7_00ED">Those Pesky Tabs<A name="01E7_00ED"></FONT></h4></P>
Most program editing today is probably performed using fairly intelligent text editors, such as EMACS/Epsilon, Brief, etc. One feature common to such editors is the ability to specify a custom "hard tab" value: When you insert a tab character, the cursor moves over to the next column of the display that is a multiple of <I>n</I>, where you have specified <I>n</I> as a global setting. The usual default for this tab setting is eight. With this default in 80 columns, it doesn't take many nested loops to cause C programs to begin storming the right margin. To make matters worse, the space normally available for code listings tends to run even less than that &#151; actually around 65 character columns.<P>
The varying interpretation of hard tabs is one of the most confusing  factors in processing code listings. While an author may have written his code with a tab setting of four to conserve horizontal space, the program used by a magazine publisher to print out listings for publication may assume that a hard tab setting of eight was used in the preparation of the text. The result is an incorrectly formatted listing.<P>
To deal with this possible conflict, an author may choose to use only 8-column hard tabs in listings to be published, leading to the line-length problem. Or, he can provide listings with all tabs converted to spaces. While this eliminates the possibility of misalignment, it also makes editing of the listing more  difficult and time consuming.<P>
<h4><FONT COLOR="#000080"><A name="01E7_00EE">Line Numbers<A name="01E7_00EE"></FONT></h4></P>
I prefer to include line numbers in listings appearing with my articles because it makes referring to specific lines of code so much easier. The line numbers themselves, however, do take up several valuable columns of space. By knowing how many lines a listing contains, however, we can at least limit the number of columns reserved for line numbers to the minimum necessary amount.<P>
<h4><FONT COLOR="#000080"><A name="01E7_00EF">The <B><I>plist</I></B> and <B><I>maxl</I></B> Utilities<A name="01E7_00EF"></FONT></h4></P>
The programs I shall describe in this short series of columns had their genesis in a trivial program I wrote many years ago to attach line numbers to a text file. That original program grew into <I>plist.c</I> as presented this month.<P>
The three main jobs that <I>plist</I> tackles are:<P>
1. generation of line numbers (with arbitrary field width)<P>
2. translation of tabs into spaces, with automatic translation from one hard tab setting to another<P>
3. alignment of single-line code comments along an arbitrary specified right margin, with automatic preservation of vertical comment alignment (via adjustment for the hard-tab translation performed by job 2.)<P>
Line number generation is trivial. A numbering sequence is prepended onto each line of output.<P>
Tab translation is the process having the greatest potential of actually reducing code width. It works by de-tabbing the original code (converting tabs to spaces) using a hard tab value perhaps different from the one originally in effect when the code was written. Setting aside the issue of comment alignment for the time being, it happens that tabs mostly appear at the beginning of code lines. Changing the hard tab value does not have any effect on the structure of the code.<P>
The tricky part is dealing with comments. A listing without comments that has tab translation performed ends up being pretty much just a "squashed" version of the original listing. When comments are present, however, all bets are off. This is because the author of a C program will often meticulously  format comments according to some personal aesthetic standard. Typically, tabs are used to align comments in consecutive lines of code neatly beneath each other whenever possible. (OK, not everyone does it, but the code is sure more pleasant to read when they do!)<P>
Once such explicitly-formatted code is put through tab translation, however, the number of tabs required in various places to reach a common column is altered, and neatly aligned comments turn into a random mess. More on this shortly.<P>
The final job <I>plist</I> performs is to align in-line comments along the right margin. An arbitrary right-margin column number may be specified. Since a major goal is to reduce the overall listing width, the right-margin value should be the smallest that allows the existing comments to fit in the available space without overlapping program code. <I>plist</I> will add or remove white space as necessary between code and comments in order to align comments on the right. Any lines containing comments that would not fit in the available space are flagged with an error message.<P>
What about aligning the <I>left</I> end of comment lines? If the author painstakingly created perfectly aligned comments, this structure should certainly be preserved even following tab translation. The algorithm I use in <I>plist</I> to achieve this preservation requires that comments be aligned in the original listings in order to remain aligned through the process. <I>plist</I> will <I>not</I> produce perfectly aligned comments from raggedly aligned input (except occasionally, for odd sequences of lines by random luck).<P>
<I>plist</I> does the trick by keeping track of both original and translated column numbers while processing a line of text. When an inline comment is encountered, tabs are converted to spaces according to the <I>original</I> hard tab setting, not the translated one. Thus, the exact length of comments is preserved regardless of their horizontal placement in the output file, and comments that were aligned originally remain that way in the processed listing. Note that all this happens only when the <I>-</I><I>c#</I> option is used to enable right-hand alignment for comments, and the -<I>tm,n</I> option is used to specify both the original (<I>n</I>) and new (<I>m</I>) hard tab settings.<P>
<h4><FONT COLOR="#000080"><A name="01E7_00F0">Command Line Options And Compilation<A name="01E7_00F0"></FONT></h4></P>
Line numbering is activated with the <I>-</I><I>n[#]</I> option. By default, line numbers are generated using a field width of <I>NUM_WIDTH</I> columns. This default may be overridden by giving an explicit field-width value of #. A colon and single space character always separate the line number from the start of text lines.<P>
To line up comments along the right margin, use the <I>-</I><I>c#</I> option, where <I>#</I> is the desired column width of the output text. This value must include provision for columns occupied by line numbers (if <I>-n</I> is used). The <I>-t</I> option controls tab-to-space conversion. Both the original and new hard tab settings default to the value <I>TAB</I>_<I>SETTING</I>. The <I>-</I><I>t</I> option may be used to specify both the old and new hard tab setting (separated by a comma, new first), or only the new tab setting. If comment alignment is not required, then the old tab setting may be omitted.<P>
<I>plist</I> takes its input from each file named on the command line and writes the processed listing to the standard output by default. If the -<I>o</I> option is used, then the output for each file processed is written to a new file having the same base name as the input file and the extension .<I>lst</I>.<P>
In the continuing spirit of portability, both <I>plist.c</I> and <I>maxl.c</I> are generalized for compilation under either DOS or Xenix. Because I could find neither the <I>strstr</I> function nor any equivalent function in the Xenix library, I wrote one myself and include it for the convenience of Xenix users (lines 282-313 of <a href="list1.htm">Listing 1</a>)
.<P>
<h4><FONT COLOR="#000080"><A name="01E7_00F1">Sample Input And Output<A name="01E7_00F1"></FONT></h4></P>
A minimal, contrived C source listing is shown in <a href="list2.htm">Listing 2</a>.
 The source file, named <I>sample.c</I>, was originally prepared using Epsilon with a "standard" 8-column hard tab setting. When displayed on the console, the file appears as shown in <a href="list2.htm">Listing 2</a>.
 To actually generate this listing, <I>plist</I> was run on <I>sample.c</I> as follows:<P>
<pre>plist -t8,8 sample.c &gt;listing.2</pre>
<I>-t8,8</I> tells <I>plist</I> to preserve the original eight-column tab style in the translated (tabless) output. Since the hard tab setting was not changed, comments remain naturally aligned as in the original source file.<P>
To illustrate the effect of simple tab translation on comment alignment, <a href="list3.htm">Listing 3</a>
was produced by the command:<P>
<pre>plist -t4,8 sample.c &gt;listing.3</pre>
As the output shows, reducing tab size shortens the listing and preserves code indentation, but the comments become misaligned relative to the original source file if tabs were used around or within those comments.<P>
For the final example, <a href="list4.htm">Listing 4</a>
was created via:<P>
<pre>plist -n2 -t2,8 -c60 sample.c &gt;listing.4</pre>
The option <I>-</I><I>n2</I> enables line-number generation in a two-column numeric field. <I>-</I><I>c60</I> tells <I>plist</I> to right-justify comments at column 60 (with automatic vertical alignment.) By specifying a new tab size of two and the old size of eight via <I>-</I><I>t2,8</I>, I enabled <I>plist</I> to preserve the exact comment alignment of the original source code while recovering nearly 75 percent of the space originally consumed by tab indentation.<P>
By the way, <a href="list1.htm">Listing 1</a>
(<I>plist.c</I>) was produced with:<P>
<pre>plist -t2,4 -n3 -c65 plist.c &gt;listing.1</pre>
<h4><FONT COLOR="#000080"><A name="01E7_00F2">The <B><I>main</I></B> Program<A name="01E7_00F2"></FONT></h4></P>
Lines 65-97 of the program in <a href="list1.htm">Listing 1</a>
process command-line options. Except for the detail of the individual <I>case</I> statements, this is "stock" code I copy into any new application I write that needs the ability to process options. It assumes options:<P>
a) are always named by a single case-insensitive character<P>
b) are preceded by a dash<P>
c) contain no white space<P>
d) can all be processed before mainline program execution commences.<P>
After each option is processed, the code in lines 93-96 removes it from the <I>argc/argv</I> parameter list. By the time the general usage check is reached (lines 99-101), the only remaining command-line arguments are filenames or similar non-optional parameters not prefixed by dashes.<P>
If the <I>-</I><I>n</I> option was used to generate line numbers, then line 104 initializes the string <I>fmt</I> to the format specification that will be used for creating line numbers. This statement is a bit tricky, since it includes a format specification being used to create another format specification. The first two <I>%</I> characters generate a single <I>%</I> in the output, the <I>%d</I> sequence generates the value <I>numwidth</I>, and the final portion of the string, "<I>d:</I> " carries over literally. If run with a <I>numwidth</I> value of, say, three, then <I>fmt</I> ends up containing the text <I>"%3: "</I> (minus the quotes, of course).<P>
Lines 106-107 call <I>dofile</I> for each input file named on the command line.<P>
<h4><FONT COLOR="#000080"><A name="01E7_00F3">The <B><I>dofile</I></B> Function<A name="01E7_00F3"></FONT></h4></P>
All file input and output housekeeping is performed by the function <I>dofile</I>. Before any lines are processed, the variable <I>fpo</I> is initialized to the output-stream handle. If the <I>-</I><I>o</I> option was given, then an .<I>LST</I> file is created for each input file. Otherwise, the standard output stream receives the processed text.<P>
The loop in lines 143-145 calls <I>do</I>_<I>line</I> once for each line of input text, and lines 147-149 clean up after the entire file has been processed.<P>
<h4><FONT COLOR="#000080"><A name="01E7_00F4">Processing The Lines<A name="01E7_00F4"></FONT></h4></P>
The code to process each line of text is broken up into two passes, performed by the functions <I>pass1</I> and <I>pass2</I>. <I>do</I>_<I>line</I> ties them together and generates the leading line numbers (if needed).<P>
Tab translation on a single line of input text is performed by the <I>pass1</I> function. As a text line is processed from left to right, the variable <I>in</I>_<I>cmnt</I> records whether an open comment token (/*) has been encountered yet (I've ignored close comment tokens, under the assumption that executable code always fully precedes comments on lines where both are present.)<P>
The variables <I>col</I> and <I>old_col</I> track the current column number from the perspectives of the new and old hard tab settings, respectively. When a tab character is encountered in the input line, that tab is translated into spaces in one of two manners:<P>
<UL><li>If <I>in_cmnt</I> is true (we're in a comment), then the old hard tab value (<I>old_tab</I>) is used to control the number of spaces that are generated (lines 208-210).</li>
<li>If <I>in</I>_<I>cmnt</I> is false (lines 199-206), then two things happen. First, the tab is translated as per the new hard tab setting (<I>tabstop</I>) in lines 200-202. Then, in lines 203-205, <I>old_col</I> is updated to represent the new column position as per the old tab setting. This step is the key to maintaining comment alignment. By knowing the precise column at which the comment began in the original text, <I>plist</I> can reproduce that comment in the output listing with the same total column width as it had before.</li></UL>
When combined with right-margin justification, these features insure that any input containing vertically aligned comments produces an output listing with those comments still aligned.<P>
The function <I>pass2</I> handles right-margin justification after tab translation has been performed by <I>pass1</I>. Wherever a comment is found, it is shifted right or left by just enough to make the total resulting line length equal to exactly <I>cmnt</I>_<I>col</I> characters.<P>
<I>pass2</I> begins by checking to see if there is indeed a complete comment present (lines 235-237). If opening and closing comment delimiters are not both detected, <I>pass2</I> returns leaving the text unchanged. This exempts multi-line comments (which usually begin at the left margin) from being right-justified. When a comment is detected, it is immediately copied to a holding buffer, <I>cmntbuf</I>, and its length is computed.<P>
Lines 243-245 scan backwards from the start of the comment, searching for the last character of executable code. A terminating null is installed immediately after that last character. There is now enough information available to determine if the comment can even fit in the desired number of columns; lines 247-254 detect the case where the comment will not fit and diagnose it.<P>
When enough room is available for the comment, the necessary number of spaces are appended to the shortened input line (257-259), and then the saved comment text is appended onto that (line 260). Finally, a trailing newline is restored and the line processing is complete.<P>
In my next column, I'll present another tool to help with trimming down source listings &#151; a program that locates and displays the longest lines in a listing.<P>
<h4><FONT COLOR="#000080"><A name="01E7_00F5">Exercise<A name="01E7_00F5"></FONT></h4></P>
The only comments supported by <I>plist</I> are the standard K&amp;R-style delimited by /* and */. Adapt the program to support C++ style comments, where the token // specifies the beginning of a comment that includes all text to the end of the line.<P>

<h4><a href="../../../source/1991/aug91/zolman.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
