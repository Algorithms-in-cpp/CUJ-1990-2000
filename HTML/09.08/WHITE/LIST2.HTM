<HTML><HEAD>
<TITLE>August 1991/Copy-On-Write Objects For C++/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2 Test Program for COW Objects</A></h4>
<pre>#include &lt;stdio.h&gt;
#include "cow.h"

class Foo_COW : Obj_COW {
   friend class Foo;
public:
   //  Construtors &amp; destructors
   Foo_COW(int l, int m, int n) { a = l; b = m; c = n; }
   //  Functions
   Obj_COW *dup(void)
     { return((Obj_COW *)new Foo_COW(a, b, c)); }
private:
   //  Data
   int a, b, c;
};

class Foo : Obj_Virt {
public:
   //  Construtors &amp; destructors
   Foo(int i = 1, int j = 2, int k = 3)
     { set_ptr(new Foo_COW(i, j, k)); }
   Foo(const Foo&amp; f2) : Obj_Virt((Obj_Virt &amp;)f2) { }
   //  Functions
   Foo&amp;    operator = (Foo&amp; f2)
           {set_ptr(f2.get_ptr()); return(*this); }
   int     get_a(void) { return(actual()-&gt;a); }
   int     get_b(void) { return(actual()-&gt;b); }
   int     get_c(void) { return(actual()-&gt;c); }
   void    print(char *msg);
   void    reset(int i = 1, int j = 2, int k = 3);
private:
   //  Functions
   Foo_COW *actual(void)
     { return((Foo_COW *)get_ptr()); }
};

//  Foo::print - print current values
void Foo::print(char *msg)
{
   printf("%-12s: this = %p, ", msg, this);
   Obj_Virt::print();
   printf("    a, b, c = %d %d %d\n", actual()-&gt;a,
     actual()-&gt;b, actual()-&gt;c);
}

//  Foo::reset - reset values in real object
void Foo::reset(int i, int j, int k)
{
   split();
   actual()-&gt;a = i;
   actual()-&gt;b = j;
   actual()-&gt;c = k;
}

main()
{
   Foo *pa1 = new Foo;
   Foo *pa2 = new Foo(*pa1);
   Foo *pa3 = new Foo(4, 5, 6);

   pa1-&gt;print("a1");
   pa2-&gt;print("a2 (= a1?)");
   pa3-&gt;print("a3");

   *pa3 = *pa2;
   pa3-&gt;print("a3 (= a2?)");
   pa2-&gt;print("a2 (same?)");

   pa3-&gt;reset(7, 8, 9);
   pa3-&gt;print("a3 reset");
   pa2-&gt;print("a2 (same?)");

   delete pa1;
   delete pa2;
   delete pa3;
}
// End of File
</pre>
</BODY>
</HTML>
