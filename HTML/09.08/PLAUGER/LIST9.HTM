<HTML><HEAD>
<TITLE>August 1991/Standard C/Listing 9</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 9</A></h4>
<pre>/* _Dscale function - IEEE 754 version */
#include "xmath.h"

short _Dscale(double *px, short xexp)
       {       /* scale *px by 2^xexp with checking */
       long lexp;
       unsigned short *ps = (unsigned short *)px;
       short xchar = (ps[_D0] &amp; _DMASK) &gt;&gt; _D0FF;

       if (xchar == _DMAX)     /* NaN or INF */
              return (ps[_D0] &amp; _DFRAC || ps[_D1]
                     || ps[_D2] || ps[_D3] ? NAN : INF);
       else if (0 &lt; xchar)
              ;       /* finite */
       else if ((xchar = _Dnorm(ps)) == 0)
              return (0);     /* zero */
       lexp = (long)xexp + xchar;
       if (_DMAX &lt;= lexp)
              {       /* overflow, return +/-INF */
              *px = ps[_D0] &amp; _DSIGN ? -_Inf._D : _Inf._D;
              return (INF);
              }
       else if (0 &lt; lexp)
              {       /* finite result, repack */
              ps[_D0] = ps[_D0] &amp; _DMASK | (short)lexp &lt;&lt; _D0FF;
              return (FINITE);
              }
       else
              {       /* denormalized, scale */
              unsigned short sign = ps[_D0] &amp; _DSIGN;

              ps[_D0] = 1 &lt;&lt; _D0FF | ps[_D0] &amp; _DFRAC;
              if (lexp &lt; -(48+_D0FF+1))
                     xexp = -1;  /* certain underflow */
              else
                     {  /* might not underflow */
                     for (xexp= lexp; xexp &lt;= -16; xexp += 16)
                            {  /* scale by words */
                            ps[_D3] = ps[_D2], ps[_D2] = ps[_D1];
                            ps[_D1] = ps[_D0], ps[_D0] = 0;
                            }
                     if ((xexp = -xexp) != 0)
                            {       /* scale by bits */
                            ps[_D3] = ps[_D3] &gt;&gt; xexp
                                   | ps[_D2] &lt;&lt; 16 - xexp;
                            ps[_D2] = ps[_D2] &gt;&gt; xexp
                                   | ps[_D1] &lt;&lt; 16 - xexp;
                            ps[_D1] = ps[_D1] &gt;&gt; xexp
                                   | ps[_D0] &lt;&lt; 16 - xexp;
                            ps[_D0] &gt;&gt;= xexp;
                            }
                     }
              if (0 &lt;= xexp &amp;&amp; (ps[_D0] || ps[_D1]
                     || ps[_D2] || ps[_D3]))
                     { /* denormalized */
                     ps[_D0] |= sign;
                     return (FINITE);
                     }
              else
                     { /* underflow, return +/-0 */
                     ps[_D0] = sign, ps[_D1] = 0;
                     ps[_D2] = 0, ps[_D3] = 0;
                     return (0);
                     }
              }
       }

/* End of File */
</pre>
</BODY>
</HTML>
