<HTML><HEAD>
<TITLE>August 1991/Exception Handling In ANSI C/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1 (except.h)</A></h4>
<pre>/*********** EXCEPT.H COPYRIGHT 1990 GREGORY COLVIN ************
This program may be distributed free with this copyright notice.
***************************************************************/
#include &lt;stdlib.h&gt;
#include &lt;errno.h&gt;
#include &lt;assert.h&gt;
#include &lt;signal.h&gt;
#include &lt;setjmp.h&gt;

typedef struct x_trap {
   struct x_trap *next;
   jmp_buf context;
} X_TRAP;

typedef enum {
   X_ERRNO=-1, X_ASSERT=-2, X_SIGNAL=-3, X_SYSTEM=-4, X_USER=-5
} XCEPTION;

extern X_TRAP *X_Trap;
extern XCEPTION X_Error;
extern volatile sig_atomic_t X_Signal;

extern void X_TrapError( void );
extern void X_HandleSignal( int sig );
extern void X_ReturnSignal( int sig );

#define BEGIN_TRY                                   \
{ X_ TRAP trap;                                     \
  trap.next = X Trap; X_Trap = &amp;trap; X_Signal = 0; \
  TRY: if (!(X_Error = setjmp(trap.context)))

#define FAIL(error) \
  if (X_Error =(error)) X_TrapError(); else

#define FAIL_TRY else

#define RETRY if (X_Error) goto TRY

#define END_TRY               \
  if (X_Signal &amp;&amp; !X_Error)   \
    FAIL(X_SIGNAL);           \
  X_Trap = X_Trap-&gt;next;      \
  FAIL(X_Error);              \
}

#ifdef XDEBUG
  extern char *X_Assert;
  #undef assert
  #define assert(x) \
    ((x)? (void)0: (X_Assert=#x,X_Error=X_ASSERT,X_TrapError()))

#endif
</pre>
</BODY>
</HTML>
