


<HTML>
<HEAD>

<TITLE>August 1991/Exception Handling In ANSI C</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocaug.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">Exception Handling In ANSI C<A name="01DF_00E4"><A name="01DF_00E4"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="01DF_0000"><A name="01DF_0000">Gregory Colvin</font></h3><hr><blockquote><P>
<P><i><A name="01DF_0000"><A name="01DF_0000">Trained in cognitive psychology, Dr. Colvin first learned to program<I></I> <I></I>in 1972, in BASIC on a PDP-8. He later had the distinction of being the<I></I> <I></I>first Cornell University graduate student to purchase an Apple II with<I></I> <I></I>student loan money, and has been happily hacking microcomputers ever<I></I> <I></I>since. He has been programming professionally in C since 1983. He<I></I> <I></I>welcomes comments and queries at 680 Hartford, Boulder, CO 80303<I></I> <I></I>(303) 499-7254.</i></P><P>
In an ideal world, computer programmers would never make mistakes. But in the real world, programs can and do go wrong, and programmers must anticipate the exceptions to the normal flow of operation. When exceptions occur, programmers must handle them, either by correcting the cause of the exception, trying a different strategy to complete the program, or terminating the program gracefully.<P>
Many computer languages, including PL/I, CLU, Ada, and Eiffel, provide syntactic support for exception handling. C does not. Instead, it provides several unrelated library facilities which can, with effort, be used for exception handling. I used the ANSI C specifications for these facilities to create a small collection of macros that integrate <I>&lt;errno.h&gt;</I><I>,</I> <I>&lt;assert.h&gt;</I><I>,</I> <I>&lt;signal.h&gt;</I><I>,</I> and <I>&lt;setjmp.h&gt;</I> into a reasonably well-disciplined exception-handling strategy.<P>
<h4><FONT COLOR="#000080"><A name="01DF_00E5">Five Basic Strategies<A name="01DF_00E5"></FONT></h4></P>
I have distinguished five basic strategies for handling exceptions in C programs: denial, perfection, paranoia, truth, and communication.<P>
<B>Denial.</B> You can pretend you live in an ideal world and ignore the possibility of exceptions. If you are lucky, your program will work just fine. If you are somewhat lucky, the operating system will terminate your program before it goes too far astray. If you are unlucky, your users will have to terminate your program with a reset. If you are very unlucky, your program will destroy system or user data, and will not be run again by any moderately cautious user.<P>
<B>Perfection.</B> In principle, you can prove that a logically correct program will never encounter an exception &#151; assuming of course that your proof, compiler, and operating system are flawless, and that your hardware is immune to cosmic rays, power glitches, and head crashes. Careful reasoning about program correctness is essential to engineering reliable software, but nothing can guarantee perfection.<P>
<B>Paranoia.</B> A programmer following this strategy takes nothing for granted and practices defensive programming to a fault. Every function checks all its arguments and makes sure it has adequate system resources before proceeding. Every function returns a value or sets a variable to indicate failures. Every invocation of every function is followed by a check for failure. Every computation is preceded by a test for valid operands and followed by a test for overflow.<P>
Paranoia can be an effective strategy, and is preferred over denial. After all, just because you're paranoid doesn't mean they aren't out to get you. Defensive programming integrates well with the ANSI C standard library, in which most functions overload their return value with an error code (such as <I>HUGE_VAL</I><I>, </I><I>EOF</I><I>, </I>or<I> </I><I>NULL</I>), and set the global variable <I>errno</I> (defined in <I>&lt;errno.h&gt;</I>) to a value indicating the cause of the error.<P>
The disadvantage to defensive programming is that applying it exclusively can easily double or triple the size, complexity, and execution time of your programs. Returning error codes can be particularly onerous in deeply nested loops and function calls, where it becomes tempting to branch unconditionally when failures are detected. Even more dangerous is the temptation to skip the error checks when you believe nothing could go wrong, which is usually a form of denial.<P>
<B>Truth.</B> Rather than pass errors up to its caller, a function can insist that certain conditions be true for it to proceed correctly. The <I>&lt;assert.h&gt;</I> header defines a single macro, <I>assert(expression)</I>. If the expression is false and <I>NDEBUG</I> is undefined, the program will terminate, typically with a message containing the text of the expression. A program cannot proceed in the face of a violated assertion, but assertions can be turned off by defining <I>NDEBUG.</I> Thus assertions need not cause any runtime overhead in production programs, but testing and inspection are essential to show that a program is unlikely to violate any assertions.<P>
<B>Communication.</B> Rather than return an error or force termination, an exception can communicate its occurrence to the program, which can then choose to ignore the exception, correct it, or terminate the program.<P>
The ANSI C <I>&lt;signal.h&gt;</I> facility communicates exceptions. A few conditions, such as division by zero, memory access violations, and termination requests, give rise to signals, which are caught by a signal handler. The default handling for most signals is to terminate the program. The available signals are implementation defined and cannot be extended by a program, but the default handling can be extended.<P>
The function <I>signal(int sig, void (*handler)(int))</I> installs a replacement signal handler, which is a function to call when the specified signal <I>sig</I> occurs. This function is restricted. A portable signal handler can do only five things:<P>
<UL><li>assign values to volatile integers of type <I>sig_atomic_t</I></li>
<li>make successful calls to <I>signal</I></li>
<li>return, in which case the program proceeds as if no signal was raised</li>
<li>terminate execution with <I>exit</I> or <I>abort</I></li>
<li>transfer control out of the signal handler with the <I>longjmp </I>function.</li></UL>
The last two options cannot be used portably with asynchronous or external signals, but returning may not be safe either with some signals in some environments (e.g. <I>SIGFPE</I> on the 8087). Be sure you know your environment well before using <I>signal.</I><P>
To use <I>longjmp</I>, you must first declare a <I>jmp_buf</I> structure and save an execution context in it with <I>setjmp(jmp_buf).</I> <I>setjmp()</I> returns zero when called directly. A subsequent call to <I>longjmp(jmp_buf,int)</I> causes the saved execution context to be restored, so that <I>setjmp</I> returns the non-zero <I>int</I> passed to <I>longjmp.</I> Thus a call to <I>longjmp</I> behaves much like a non-local <I>goto</I> statement, with all the same dangers.<P>
<h4><FONT COLOR="#000080"><A name="01DF_00E6">Disciplined Exceptions In Eiffel<A name="01DF_00E6"></FONT></h4></P>
Although each of these strategies has its place, not one of them is wholly adequate. I found a more integrated approach in the disciplined exception mechanism of Eiffel. A typical Eiffel routine is composed of four basic clauses, written as<P>
<pre>Routine(argument:type) IS
   REQUIRE ...
   DO ... 
   ENSURE ... 
   RESCUE ... 
END</pre>
The <I>REQUIRE</I> clause is a Boolean expression asserting the preconditions for a routine &#151; those facts that must hold true before the routine can succeed. If a routine computes a mathematical function, its precondition describes the domain of its arguments.<P>
The <I>DO</I> clause is the computational body of a routine. It can also contain explicit <I>CHECK</I> assertions.<P>
The <I>ENSURE</I> clause is a Boolean expression asserting the post-conditions for a routine &#151; those facts which must hold true for the routine to have succeeded. If a routine computes a mathematical function, its postcondition describes the range of its results.<P>
The <I>RESCUE</I> clause provides exception handling. If an exception occurs during the execution of a <I>DO</I> clause, then control transfers to the nearest <I>RESCUE</I> clause. The <I>RESCUE</I> clause may either <I>RETRY</I> its <I>DO</I> clause (after taking corrective action), or proceed to the end, in which case the next higher <I>RESCUE</I> clause is invoked. Exceptions in Eiffel include:<P>
<UL><li>calling a routine whose <I>REQUIRE</I> clause or <I>ENSURE</I> clause is false</li>
<li>explicit assertions which are false</li>
<li>arithmetic overflow.</li></UL>
Thus Eiffel exception handling provides the same services as the ANSI C <I>assert, signal</I>, and <I>longjmp</I> facilities.<P>
The Eiffel exception mechanism is disciplined in the sense that any routine can only succeed or fail. This may seem obvious, but in Ada an exception handler can cause the failing routine to return as if it had succeeded. An Eiffel routine which has experienced an exception cannot succeed except via a successful <I>RETRY,</I> since it does not permit a normal return from the <I>RESCUE</I> clause. A terminated <I>RESCUE</I> clause causes an exception in its calling routine, which may attempt a <I>RESCUE</I> in turn, until the exception is either successfully handled or the program terminates. In contrast, the C <I>assert</I> facility makes no provisions for <I>retry</I>, and <I>signal</I> can be used with <I>longjmp</I> to allow retry, but with no restrictions on flow of control.<P>
<h4><FONT COLOR="#000080"><A name="01DF_00E7">Disciplined Exceptions In ANSI C<A name="01DF_00E7"></FONT></h4></P>
The macros in <I>EXCEPT.H</I> (see <A href="list1.htm">Listing 1</a>)
 provide a disciplined approach to exceptions in ANSI C. They allow for blocks of computation to be written as two clauses, comparable to the <I>DO</I> clause and <I>RESCUE</I> clause of Eiffel. For example, the function in <A href="list2.htm">Listing 2</a>
provides a fail-safe wrapper for <I>malloc</I> on the Macintosh that handles the possibility of exhausting memory, and raises an exception if <I>malloc</I> fails.<P>
In <A href="list2.htm">Listing 2</a>,
 the leading and trailing assertions serve as <I>REQUIRE</I> and <I>ENSURE</I> clauses: they enforce the conditions that <I>xalloc</I> takes a non-zero argument and returns a non-zero pointer. The <I>BEGIN_TRY</I> macro begins the <I>DO</I> clause. The standard library function <I>malloc</I> attempts to allocate memory. It signals failure by returning a <I>null</I> pointer. On most implementations, including MPW C, it also sets <I>errno</I> to <I>ENOMEM</I>. Because the ANSI standard does not guarantee this, I use an assertion to enforce this assumption. The <I>FAIL</I> macro sets the <I>X_Error</I> global and transfers control to the <I>FAIL_TRY</I> block, which serves as the <I>RESCUE</I> clause. It first makes sure that the exception it is handling was caused by lack of memory, then it attempts to make more memory available with the Macintosh Toolbox <I>CompactMem</I> function. If <I>CompactMem</I> succeeds, then <I>RETRY</I> will transfer control back to <I>BEGIN_TRY.</I><P>
This example shows that functions using <I>xalloc</I> need never check for a <I>null</I> pointer. If all your functions use <I>FAIL</I> to report exceptions then you can eliminate most of the error checking code from your application, and centralize your exception handling in just a few places. In event-driven applications, I place most of my exception handling in the event loop, where the user can be informed that something went wrong and advised on what to do.<P>
<h4><FONT COLOR="#000080"><A name="01DF_00E8">Implementation Details<A name="01DF_00E8"></FONT></h4></P>
The <I>X_TRAP</I> structure, which contains a pointer to another <I>X_TRAP</I> and a <I>jmp_buf</I>, manages the flow of control for exception handling. The pointer maintains a stack of <I>X_TRAP</I>s<I>.</I> The top-most trap on the stack contains the execution context for the current exception handler. Each <I>BEGIN_TRY</I> and <I>END_TRY</I> pushes and pops this stack, so it remains synchronized with the run-time stack. You should never use <I>return, goto</I>, or <I>longjmp</I> to leave a <I>BEGIN_TRY</I> block, as this will desynchronize the stacks. (You cannot enforce this restriction with the preprocessor.)<P>
Five macros provide most of what is needed to write disciplined exception handlers, as seen in <A href="list1.htm">Listing 1</a>.
<P>
<UL><li><I>BEGIN_TRY</I> declares an <I>X_TRAP</I> and pushes it on the stack. It then labels and invokes <I>setjmp</I> to save the execution context and clear the global variable <I>X_Error.</I></li>
<li><I>FAIL(XCEPTION)</I> sets the <I>X_Error</I> global and calls <I>X_TrapError</I> (shown in <A href="list4.htm">Listing 4</a>)
, which uses <I>longjmp</I> to transfer control to the context saved in the topmost <I>X_TRAP</I>, which in turn will cause the <I>setjmp</I> in <I>BEGIN_TRY</I> to return <I>X_Error</I>. If the <I>X_TRAP</I> stack is empty, the program terminates with a message.</li>
<li><I>FAIL_TRY</I> begins an optional block to be executed if <I>setjmp </I>returns non-zero (when caused to return by <I>longjmp</I>), or when <I>X_ReturnSignal</I> returns.</li>
<li><I>RETRY</I> is a statement macro used by <I>FAIL_TRY</I> blocks to attempt to recover from an exception. This macro makes sure it is really in the <I>FAIL_TRY</I> block by testing <I>X_Error</I>, then it branches back to <I>BEGIN_TRY</I>.</li>
<li><I>END_TRY</I> pops the <I>X_TRAP</I> stack, then <I>FAILs</I> again if <I>X_Error</I> is not clear. Consequently, unrecoverable errors in a <I>FAIL_TRY</I> block will cause the next higher <I>FAIL_TRY</I> block on the <I>X_TRAP</I> stack to be executed. Successful execution falls through <I>END_TRY.</I></li></UL>
<I>XCEPTION</I>, an enumerated type that identifies exceptions, has five possible values:<P>
<UL><li><I>X_ERRNO</I> is for standard library calls that set <I>errno</I>.</li>
<li><I>X_SIGNAL</I> is for signals caught by a signal handler.</li>
<li><I>X_ASSERT</I> is for assertion failures.</li>
<li><I>X_SYSTEM</I> is for errors in operating system calls.</li>
<li><I>X_USER</I> is for all other exceptions.</li></UL>
The <I>X_Error</I> global is set to one of these five values when an exception is trapped. Your exception handling code can use these values to help determine whether and how to handle exceptions.<P>
To trap errors in standard library functions that set <I>errno</I>, you can <I>FAIL(X_ERRNO)</I> when they fail. To handle false assertions as exceptions you can define the <I>XDEBUG</I> flag to replace the standard <I>assert</I> macro with a <I>FAIL(X_ASSERT).</I><P>
The <I>X_HandleSignal</I> and <I>X_ReturnSignal</I> functions handle signals as exceptions. You can install one of these functions as a handler for a given signal. When that signal occurs, the function sets the <I>X_Signal</I> global. The <I>X_Error</I> global will be set to <I>X_Signal.</I> Synchronous, internal signals can use <I>X_HandleSignal</I> to <I>longjmp</I> to the topmost exception handler. Other signals can return with <I>X_ReturnSignal</I>, which will cause the current <I>FAIL_TRY</I> block to execute when <I>BEGIN_TRY</I> is done.<P>
To trap errors in operating system calls, you can call <I>FAIL(X_SYSTEM)</I>. To trap any other exceptions you can call <I>FAIL(X_USER).</I><P>
<h4><FONT COLOR="#000080"><A name="01DF_00E9">Exception Handler Syntax<A name="01DF_00E9"></FONT></h4></P>
The macros in <I>EXCEPT.H</I> (<A href="list1.htm">Listing 1</a>)
 provide an extension to the C syntax. New statement forms are added with the slightly simplified grammar shown in <A href="list3.htm">Listing 3</a>.
<P>
A try-clause should not contain a jump statement or <I>longjmp</I> out of the clause, and a <I>RETRY</I> should only appear in a fail-clause. These restrictions could have been shown in <A href="list3.htm">Listing 3</a>,
 but cannot be enforced by the preprocessor.<P>
<h4><FONT COLOR="#000080"><A name="01DF_00EA">Experience With Exception Handling<A name="01DF_00EA"></FONT></h4></P>
The Workstation Group here at IHS is using a predecessor to implement the <I>FAIL</I> mechanism for exception handling in our memory management and user interface libraries, and in two large applications based on these libraries. The only difficulty has been interfacing with our database library, which uses overloaded return values and a global variable for error reporting. Consequently, we must test the results of every database call, and raise an exception if necessary. Exception handling was especially helpful during beta test, in which most program errors, even subtle pointer bugs, led to reproducible exceptions instead of the usual system crashes.<P>
<h4>References</FONT></h4></P>
<I>Object-Oriented Software Construction</I>, Betrand Meyer, Prentice Hall, 1988.<P>
<I>The C Programming Language</I>, Brian W. Kernigan and Dennis M. Ritchie, Prentice Hall, 1988.<P>
<I>Standard C</I>, P. J. Plauger and Jim Brodie, Microsoft Press, 1989.<P>

<h4><a href="../../../source/1991/aug91/colvin.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
