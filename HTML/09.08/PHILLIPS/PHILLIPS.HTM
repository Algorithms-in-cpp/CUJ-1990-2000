


<HTML>
<HEAD>

<TITLE>August 1991/Image Processing</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocaug.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Graphics</FONT></H2>

<hr><h2 align="center"><font color="#800000">Image Processing<A name="01B1_00E0"><A name="01B1_00E0"></font></h2><P>
<h3 align="center"><A name="01B1_0000"><A name="01B1_0000">Part 4: Histograms And Histogram Equalization</h3><P>
<h3 align="center"><font color="#800000">Dwayne Phillips</font></h3><hr><blockquote><P>
<P><i><A name="01B1_0000"><A name="01B1_0000">Dwayne Phillips works as a computer and electronics engineer with the United States Department of Defense. He has a Ph.D. in electrical and computer engineering at Louisiana State University. His interests include computer vision, artificial intelligence, software engineering, and programming languages.</i></P><P>
<h4><FONT COLOR="#000080"><A name="01B1_00E1">Introduction To The Series Of Articles<A name="01B1_00E1"></FONT></h4></P>
This is the fourth in a series of articles on images and image processing. The first article discussed image input and the Tag Image File Format. The second discussed two types of image output &#151; printing and displaying numbers and displaying images as colors and grayscales using EGA and VGA. The third discussed another type of image output &#151; halftoning, or how to display and print images using only black and white. This article will discuss histograms and histogram equalization.<P>
Collectively this series has developed the foundation for the C Image Processing System (CIPS). CIPS can read TIFF images, display them (mono, CGA, EGA, VGA), and print them (laser printer, graphics, or character printer). CIPS is almost ready for image processing operators except for one more "preliminary" capability.<P>
This article will explain that capability &#151; histograms and histogram equalization. It will show why histogram equalization is a prerequisite to performing other image processing operations. And it will present source code to implement histogram equalization.<P>
<h4><FONT COLOR="#000080"><A name="01B1_00E2">Histograms<A name="01B1_00E2"></FONT></h4></P>
A histogram uses a bar graph to profile the occurences of each gray level present in an image. <A href="fig1.htm">Figure 1</a>
shows a simple histogram. The horizontal axis is the gray-level values. It begins at zero and goes to the number of gray levels (256 in this example). Each vertical bar represents the number of times the corresponding gray level occurred in the image. In <A href="fig1.htm">Figure 1</a>
the bars "peak" at about 30, 90, 130, and 210, indicating that these gray levels occur most frequently in the image.<P>
Among other uses, histograms can indicate whether or not an image was scanned properly. <A href="fig2.htm">Figure 2</a>
shows a histogram of an image that was scanned poorly. The gray levels are grouped together at the dark end of the histogram. This histogram indicates poor contrast. When produced from a normal image, it indicates improper scanning. The scanned image will look like a TV picture with the brightness and contrast turned down. (Of course, the same histogram could indicate proper scanning for certain unusual images, such as a black bear at night).<P>
Histograms also help select thresholds for object detection (an object being a house, road, or person). Objects in an image tend to have similar gray levels. For example, in an image of a brick house, all the bricks will usually have similar gray levels. All the roof shingles will share similar gray levels but differ from the bricks. In <A href="fig1.htm">Figure 1</a>,
 for example, the valleys between the peaks at about 60 and 190 might indicate that the image contains three major kinds of objects &#151; perhaps bricks, roof, and a small patch of sky. Practical object identification is never simply a matter of locating histogram peaks, but histograms have been important to much of the research in object identification.<P>
<A href="photo1.htm">Photograph 1</a>
shows the boy image from the previous articles with its histogram (in the lower right hand corner). The gray levels in the histogram reach across most of the scale, indicating that this image was scanned with good contrast. <A href="photo2.htm">Photograph 2</a>
shows the house image from the previous articles with its histogram. Again, the histogram stretches across much of the scale indicating good scanning and contrast.<P>
Because the dark objects and the bright objects in an image with poor contrast have almost the same gray level, the gray shades from such an image will be grouped too closely together (<A href="fig2.htm">Figure 2</a>)
. Frequently the human eye will have difficulty distinguishing objects in such an image. Image-processing operators will have even less success.<P>
<A href="photo3.htm">Photograph 3</a>
shows an image with poor contrast (a poorly scanned aerial photograph). The rectangles in the center of the picture are house trailers. The areas around the house trailers are roads, parking lots, and lawns. The histogram in the lower right-hand corner shows that the gray levels are grouped in the dark half of the scale. There are trees and bushes in the lawn areas of the image. You cannot see them, however, because their gray levels are too close to the gray levels of the grass.<P>
The cure for low-contrast images is histogram equalization. Equalization causes a histogram with a mountain grouped closely together to "spread out" into a flat or equalized histogram. Spreading or flattening the histogram makes the dark pixels appear darker and the light pixels appear lighter. The key word is "appear." The dark pixels in <A href="photo3.htm">photograph 3</a>
cannot be any darker. If, however, the pixels that are only slightly lighter become much lighter, then the dark pixels will appear darker. Please note that histogram equalization does not operate on the histogram itself. Rather, histogram equalization uses the results of one histogram to transform the original image into an image that will have an equalized histogram.<P>
The histogram-equalization algorithm may make more sense if we outline the derivation of the underlying mathematical transform. (The full derivation is found in the reference.) Equation 1</a>
represents the equalization operation, where <I>c</I> is an image with a poor histogram. The as yet unknown function <I>f </I>transforms the image <I>c</I> into an image <I>b</I> with a flat histogram.<P>
<B>Equation 1</B> <br>
<pre>b(x,y) = f[c(x,y)]</pre>
Equation (2) shows the probability-density function of a pixel value <I>a. p</I><I>1</I><I> (a)</I> is the probability of finding a pixel with the value <I>a</I> in the image. <I>Area</I><I>1</I> is the area or number of pixels in the image and <I>H</I><I>1</I><I>(a)</I> is the histogram of the image. For example, if<P>
<pre>a=100
Area1=10,000
H1(100)=10</pre>
then<P>
<pre>p1(100) = 10/10,000 = 0.001</pre>

<B>Equation 2</B><br>
<IMG SRC="equat2.gif"><P>

Equation 3 shows the cumulative-density function (<I>cdf</I>) for the pixel value <I>a</I>. The <I>cdf</I> is the sum of all the probability density functions up to the value <I>a</I>. For example,<P>
<pre>P1(10) = 1/10,000 * [H(0) + H(1) + ... + H(10)]</pre>
<B>Equation 3</B><br>
<IMG SRC="equat3.gif"><P>

Equation 4 shows the form of the desired histogram equalization function <I>f(a)</I>. <I>Hc(a)</I> is the histogram of the original image <I>c</I> (the image with the poor histogram). <I>Dm</I> is the number of gray levels in the new image <I>b. Dm = 1/p(a)</I> for all pixel values <I>a</I> in the image <I>b</I>. Note that the image <I>b</I> has a "flat" histogram<P>
<pre>H(0) = H(1) = H(2) = ...</pre>
because the probability of each pixel value is now equal &#151; they all occur the same number of times. So <I>f(a)</I> simply takes the probability-density function for the values in image <I>b</I> and multiplies this by the cumulative-density function of the values in image <I>c</I>. It is important to realize that histogram equalization reduces the number of gray levels in the image. This seems to be a loss, but it is not.<P>
<B>Equation 4</B><br>
<IMG SRC="equat4.gif"><P>

The algorithm for performing histogram equalization (see <A href="fig3.htm">Figure 3</a>)
 is simpler than the equations.<P>
<A href="photo4.htm">Photograph 4</a>,
 <A href="photo5.htm">Photograph 5</a>,
 and <A href="photo6.htm">Photograph 6</a>
show the result of histogram equalization. The appearance of some images improves after histogram equalization while it degrades with other images. For <A href="photo4.htm">Photograph 4</a>
(an equalized verson of <A href="photo3.htm">Photograph 3</a>)
 the appearance improves. Note the equalized histogram in the lower right hand corner. Because the target display shows only 16 gray shades, during equalization we reduced the image to 16 gray levels.<P>
The aerial photograph, although fuzzy, has much improved contrast. The dark spots in the lawn areas are trees. If you look closely at <A href="photo3.htm">Photograph 3</a>
you may be able to see these trees. <A href="photo5.htm">Photograph 5</a>
shows enlarged details from these two images together with their histograms (CIPS produced these using the <I>print_graphics_image function</I>). The unequalized image on the left of <A href="photo5.htm">Photograph 5</a>
is dark. In the equalized image on the right of <A href="photo5.htm">Photograph 5</a>
you can distinguish the trees and bushes from the grass.<P>
With some photographs the equalized image may appear worse than the original image. In a properly scanned image, for example, histogram equalization can introduce "noise" into what were uniform areas of an image. Such "noise" may not be undesireable &#151; in many cases it reflects subtle texture or detail lost in the more "natural" image.<P>
<A href="photo6.htm">Photograph 6</a>
(segments from the house in <A href="photo2.htm">Photograph 2</a>)
 shows how equalization affects a properly scanned image. The histogram for the unequalized image on the right stretches across much of the scale. The bricks, windows, and trees are easy to see. However, in the equalized image on the left, the window and the brick appear too bright. While the equalized image does not appear as pleasant, it does have better contrast. The darks appear darker and the lights appear lighter. In this case, however, they are probably too dark and too light.<P>
Since variations is scanning can siginificantly affect the results of image-processing operators, histogram equalization is a prerequisite for further image processing. If you scan an image too bright or too dark, you can remove objects from an image. The result may "improve" the apparent performance of processing and leading you to overestimate the effectiveness of an operator. Consistently pre-processing images with a histogram-equalization operation will ensure consistency in all results.<P>
The code in <A href="list1.htm">Listing 1</a>
simplements the histogram operations. The basic data structure is a 256-element array of <I>unsigned longs</I>. The function <I>zero_histogram</I> zeros or clears the histogram array. The function <I>calculate_histogram</I> creates the histogram for an image array. It loops through the image array, takes the pixel value, and increments that element in the histogram array.<P>
This function and the zeroing function are separate so that CIPS can calculate the histogram of an image that comprises several image arrays. The function <I>perform_histogram_equalization</I> implements the algorithm shown in <A href="fig3.htm">Figure 3</a>.
 The first loop over <I>i</I> calculates the <I>sum_of_h</I> array. The loops over <I>ROWS</I> and <I>COLS</I> transforms each pixel in the image to a new value using the number of gray levels in the new image, the area of the image, and the <I>sum_of_h</I> array.<P>
The next functions display histograms to the user. The function <I>show_histogram</I> displays the histogram on the screen using <I>numbers</I> and *s. The function <I>print_histogram</I> prints the histogram to a simple character printer using <I>numbers</I> and *s. Both of these functions scale the histogram so the display will not be wider than the CRT screen or the printed page. The <I>show_histogram</I> function <I>printf</I>'s a * to the current line in the last loop over <I>j</I>. The <I>print_histogram</I> function <I>sprintf'</I>s a * to a character string. After the function fills the string, it prints it to the line printer. The user calls these two functions from the CIPS main menu.<P>
The <I>display_histogram</I> function works with the display-image functions to display the histogram in the lower right-hand corner of the screen. (We used this facility to create the image plus histogram photographs for this article.) This function first clears an area for the histogram. Next it loops through the histogram array and draws a vertical line the length of the scaled histogram value. Finally, it draws a horizontal axis.<P>
The function <I>print_hist_image</I> (see <A href="list2.htm">Listing 2</a>)
 prints the histogram graphically after the function <I>print_graphics_image</I> prints the image. First the function scales the histogram array. Next the function prints a blank space between the bottom of the image and the top of the histogram. Finally, the function loops through the histogram array. During this loop, it prints a grid mark every 50 elements. For these elements, the left margin is smaller and two extra black marks are printed before the histogram data. The printer must print a fixed number of bytes (200 in this program). The loops print the number of black marks (maximum of 200) and then print the difference between 200 and the number of marks using white spaces.<P>
To integrate the histogram functions into the main CIPS program we added a new option (7) to the main menu (<A href="fig4.htm">Figure 4</a>)
 and made straightforward changes to the function <I>display_menu_for_display_image</I> in file <I>display. c</I>.<P>
<I>display image</I> (from Part 2), <I>display_using_halftoning</I> (from Part 3), and <I>print_graphics_image</I> (from Part 3) have been modified in Listing 4, Listing 5, and Listing 6, respectively. The revised listings are available on the code disk for this issue.<P>
<h4>Reference</FONT></h4></P>
<I>Digital Image Processing</I>, Kenneth R. Castleman, Prentice-Hall, 1979.<P>

<h4><a href="../../../source/1991/aug91/phillips.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY>
</HTML>
