


<HTML>
<HEAD>

<TITLE>July 1991/A Simple Line Input Function</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjul.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">      Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">A Simple Line Input Function<A name="0178_00C4"><A name="0178_00C4"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0178_0000"><A name="0178_0000">Philip J. Erdelsky</font></h3><hr><blockquote><P>
<P><i><A name="0178_0000"><A name="0178_0000">Phillip J. Erdelsky is an R&amp;D engineer with over eigth years experience in C programming. He can be reached at Data/Ware Development, Inc., 9449 Carroll Park Dr., San Diego, CA 92121, or on Compuserve at 75746,3411.</i></P><P>
Prompting the operator for a line of text, such as a name or number, is part of nearly every user interface, even the GUI-est. Often only a small area of the screen can be dedicated to this purpose, but the interface must occasionally accept more text than can fit into the area. Text that won't fit usually must be scrolled horizontally.<P>
A function called <I>line_input()</I> should perform this task just about anywhere. It requires only two interface functions: <I>key()</I>, which returns a code for each key the operator strikes, without echoing it, and <I>display()</I>, which sends a character to the screen. The function was written for MS-DOS, but can be adapted to other environments by changing the interface functions and the codes used for control keys. The <I>key()</I> function is called from only one place and may be coded in-line. You can easily remove unneeded line editing features.<P>
The only control character that <I>display()</I> must recognize is the backspace (<I>'\b'</I>), which moves the cursor one place to the left. In the accompanying example, it also recognizes three non-ASCII characters, but these can be removed if suitable substitutes can be found. The <I>key()</I> function must recognize several control keys and will probably have to be modified if used in other environments. With regard to non-control characters, <I>key()</I> and <I>display()</I> must be compatible with each other &#151; i.e., <I>display</I> <I>(key())</I> must display the character on the key that was struck.<P>
In <A href="list1.htm">Listing 1</a>,
 <I>key()</I> and <I>display()</I> MS-DOS function calls number 8 and 2, respectively. They have all the required properties, although they are rather slow and have some features, such as the use of Ctrl-C as a break character, that make them unsuitable for some applications. For each special key, MS-DOS function 8 returns a two-byte sequence that <I>key()</I> collapses into a single integer code. The code was compiled with Turbo C 2.0, but <I>bdos()</I> is also available with other compilers.<P>
The display area begins wherever the cursor is when <I>line_input()</I> is called, and it extends to the right the number of spaces specified by the <I>display_length</I> parameter. The text buffer supplies the text that is to be shown in the display area initially, and receives the edited input. The buffer must be large enough to hold the number of characters specified by the <I>text_length</I> parameter, plus a terminating zero, and will ordinarily be larger than the width of the display area.<P>
Because operator input is an inherently slow operation, the function was written to minimize the code size, not to maximize execution speed. It redisplays the entire display area after each keystroke. Consequently, its response can be quite slow if the display area is wide and output to the screen is slow.<P>
The function displays a pair of arrows at each end of the display area to indicate when text has been scrolled off that end. However, this feature is easy to remove if it interferes with the rest of the display.<P>
A special character is substituted for each space in the display (but not in the text buffer) to make spaces visible. This feature is also easy to remove.<P>
Of course, the display area and the arrows at each end must fit on the screen. At the right end, you usually need to leave one space between the arrows and the right edge of the screen so the cursor will not drop to the next line when the arrows are displayed.<P>
The Home, End and Del keys and the left and right arrow keys are used for line editing. The Enter key is used to terminate the editing. It is easy, however, to add other terminator keys. <I>Line_input()</I> returns the code for the terminator key as its functional value.<P>
The initial value of <I>k</I> in the function must be the code for either the Home or End key. The initial contents of the text buffer will then be displayed either left justified or right justified, and the cursor will be positioned either at the beginning or end of the text, respectively.<P>
An alternate form of <I>line_input()</I> for PCs uses BIOS calls for keyboard input and direct screen access for screen output. The first parameter is a pointer to the left end of the display area. This form is so much faster that it gives good results on the slowest PCs, even though the object code is no larger. However, it is not portable, except perhaps to another system that also features direct screen access.<P>
The alternate form does not use the cursor. Instead, it makes its own cursor by displaying the character under the cursor in reverse video. The arrows at each end are brighter than other characters. The choice of display attributes presumes a monochrome monitor, but you can substitute other attributes if you're using a color monitor.<P>
<P>
<h4><a href="list2.htm">Listing 2</A></h4>

<h4><a href="../../../source/1991/jul91/erdelsky.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY>
</HTML>
