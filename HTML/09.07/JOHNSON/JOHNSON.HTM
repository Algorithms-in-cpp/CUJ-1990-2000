


<HTML>
<HEAD>

<TITLE>July 1991/X Window Programming</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjul.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">      Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">X Window Programming<A name="0187_00CC"><A name="0187_00CC"></font></h2><P>
<h3 align="center"><A name="0187_0000"><A name="0187_0000">Part 3: More Xlib Programming</h3><P>
<h3 align="center"><font color="#800000">Eric F. Johnson and Kevin Reichard</font></h3><hr><blockquote><P>
<P><i><A name="0187_0000"><A name="0187_0000">Johnson and Reichard are<I></I> <I></I>authors of X Window<I></I> <I></I>Applications<I></I> <I></I>Programming, Advanced X<I></I> <I></I>Window Applications<I></I> <I></I>Programming, and Power<I></I> <I></I>Programming Motif, Henry-Holt.<I></I> <I></I>Johnson can be reached at<I></I> <I></I>erc@pai.mn.org via UUCP mail.<I></I> <I></I>Reichard's Compuserve address is<I></I> <I></I>73670, 3422.</i></P><P>
The last article on X Window Programming introduced the X library and included a sample program that showed how to create a window and draw basic shapes such as lines and rectangles. This article continues where the last one left off. It introduces text, fonts, and keyboard input in the X library. (If you haven't read "Introduction to X Window Programming, Part 2: The X Library" in <I>CUJ</I>, May 1991, you may want to do so before continuing with this article.)<P>
<h4><FONT COLOR="#000080"><A name="0187_00CD">Fonts And Text<A name="0187_00CD"></FONT></h4></P>
Text in the X Window System is drawn with bitmap fonts. Although some vendors have added Display PostScript or other proprietary extensions, the basic X fonts are all bitmap fonts. This situation may change, but for now fonts in X cannot be scaled. Consequently, you must load in a font for each typeface and point size you intend to use.<P>
You can load a font with the <I>XLoadQueryFont</I> function. You cannot use a font until you have successfully loaded it. See <A href="list1.htm">Listing 1</a>.
<P>
The Display pointer in <A href="list1.htm">Listing 1</a>
represents the connection to an X server. The pointer is returned by <I>XOpenDisplay</I>. (See Part 2 of this series for more information on this topic.) The <I>font_name</I> should be the name of a valid font that is installed on your system. The X Window program <I>xlsfonts</I> will list all the installed fonts for your system. Some common fonts are <I>fixed</I> and <I>variable</I>. <I>XLoadQueryFont</I> returns a pointer to an <I>XFontStruct</I> structure, or <I>NULL</I> on failure.<P>
The <I>XFontStruct</I> structure contains a number of fields. Only three of these fields will be really important for your programs. See <A href="list2.htm">Listing 2</a>.
<P>
The three fields are <I>ascent</I> (the height of the tallest character), <I>descent</I> (the height downward of the lowest character), and <I>fid</I> (a font ID number that is used with a graphics context).<P>
<h4><FONT COLOR="#000080"><A name="0187_00CE">Setting A Graphics Context<A name="0187_00CE"></FONT></h4></P>
Part 2 in our series showed <I>XCreateGC</I>, an Xlib function that creates a graphics context. The graphics context, or <I>GC</I>, controls the pen for drawing. With text, the <I>GC</I> also controls what font is used when drawing text. After loading a font with <I>XLoadQueryFont</I>, you need to set a graphics context to draw with your newly-loaded font. The Xlib function <I>XSetFont</I> handles this task.<P>
<pre>Display *display;
GC gc;
Font font_id;
XSetFont( display, gc, font_id );</pre>
Because we have a pointer to an <I>XFontStruct</I> structure, we can get the font ID from the <I>fid</I> field. So in our code, we'll set a <I>GC</I> to use a given font with<P>
<pre>Display *display;
GC gc;
XFontStruct *font;

XSetFont( display, gc, font-&gt;fid );</pre>
We're set up to draw text.<P>
<h4><FONT COLOR="#000080"><A name="0187_00CF">Drawing Text<A name="0187_00CF"></FONT></h4></P>
Several Xlib functions can draw text. These include functions to draw 16-bit character text, such as text for Asian languages. Unfortunately, the X Window System is weak at handling text in multiple languages, such as combined English and Japanese. The X Consortium is improving this area for Release 5. In our examples, we will use 8-bit characters, which are enough for most western languages. We hope that Release 5 will accommodate international applications.<P>
The two main functions for drawing text are <I>XDrawlmageString</I> and <I>XDrawString</I>. Both take the same parameters, as shown in <A href="list3.htm">Listing 3</a>.
 Both functions draw <I>length</I> number of characters from string at the given <I>x</I>, <I>y</I> location, using the color and font set up in the graphics context, <I>gc</I>. <I>XDrawString</I> draws the foreground part of the text &#151; just the letters. <I>XDrawImageString</I> also draws in the background dots around a character cell. It is useful for terminal-emulation software. We'll use <I>XDrawImageString</I> in our sample program.<P>
We set the background color for a graphics context using <I>XSetBackground</I>, as shown in <A href="list4.htm">Listing 4</a>.
 To avoid describing the very complex ways to model color in X, we'll use the macros <I>BlackPixel</I> and <I>WhitePixel</I> for our colors, as we explained in Part 2.<P>
<h4><FONT COLOR="#000080"><A name="0187_00D0">Text Height And Width<A name="0187_00D0"></FONT></h4></P>
We can find out how tall text is by using the <I>ascent</I> and <I>descent</I> fields of the <I>XFontStruct</I> structure.<P>
<pre>XFontStruct *font;
int   height;

height = font-&gt;ascent + font-&gt;descent;</pre>
This won't tell us how high an individual character is, but it does tell us how much vertical space to leave for a line of text.<P>
To determine how many pixels wide a given text string is, we use the <I>Xlib</I> function <I>XTextWidth()</I>.<P>
<pre>XFontStruct  *font;
char         *string;
int          string_length;
int          text_width;

text_width = XTextWidth( font, string, string_length );</pre>
Because some fonts are proportional and some are fixedwidth, we must pass a string to <I>XTextWidth</I>. <I>XTextWidth</I> returns how many pixels wide that string will be when drawn in the given font.<P>
<h4><FONT COLOR="#000080"><A name="0187_00D1">Asking For Keyboard Input<A name="0187_00D1"></FONT></h4></P>
Because our test program wants keyboard input, we must hint that fact to the window manager, using the <I>XWMHints</I> structure. If we don't set an input hint, then our program may never see keyboard events. See <A href="list5.htm">Listing 5</a>.
<P>
Because this structure may change size in the future, use <I>XAllocWMHints</I> to allocate memory for it, if you have X11 Release 4. If not, use <I>malloc</I>.<P>
<pre>XWMHints *wmhints;

wmhints = (XWMHints *)malloc( sizeof(XWMHints) );</pre>
Use <I>free</I> to free up the memory when done.<P>
<pre>free( wmhints );</pre>
Set the input field to <I>True</I>, along with a bit mask-flag indicating that the input field is set:<P>
<pre>wmhints-&gt;input = True;
wmhints-&gt;flags = InputHint;</pre>
Next, pass these hints to the windows manger using the X function <I>XSetWMHints</I>.<P>
<pre>Display *display;
Window window;
XWMHints *wmhints;

XSetWMHints( display, window, wmhints );</pre>
Keyboard input in X generates <I>KeyPress</I> events. For each key that is pressed, the program will receive a <I>KeyPress</I> event, but only if the program asked the X server to send <I>KeyPress</I> events.<P>
Part 2 in this series described the <I>X-SelectInput</I> function, which asks the X server to send certain types of events to our program. In Part 2, we only asked for <I>ButtonPress</I> (presses on a mouse button) and <I>Expose</I> (requests to redraw part of our window) events. The code in <A href="list6.htm">Listing 6</a>
will also ask for <I>KeyPress</I> events.<P>
<h4><FONT COLOR="#000080"><A name="0187_00D2">The <B><I>KeyPress</I> </B>Event<A name="0187_00D2"></FONT></h4></P>
When a <I>KeyPress</I> event arrives, its type will be, obviously, <I>KeyPress</I>. Pressing a key on the keyboard generates a <I>KeyPress</I> event. Releasing the key generates a <I>KeyRelease</I> event. Both events have the same structure.<P>
<A href="list7.htm">Listing 7</a>
shows the event structure for the <I>KeyPress</I> event.<P>
The most important field in the <I>X-KeyEvent</I> structure is the keycode. The keycode is a number that represents what key was actually pressed on the keyboard. The keycode is similar to the scan code on a PC keyboard.<P>
Unfortunately, the keycode is inherently nonportable. Each X vendor uses a private keyboard and set of keycodes. Because the X Window System is supposed to provide portability, we must convert a keycode into something more meaningful and portable, preferably into text. The Xlib function <I>XLookupString</I> converts a <I>KeyPress</I> event into a <I>KeySym</I> (which we'll cover later in this article) and a text string. See <A href="list8.htm">Listing 8</a>.
<P>
<I>XLookupString</I> tries to convert the <I>KeyPress</I> event. It gives back two useful pieces of information: a string (in ISO Latin-1, which is close enough to US ASCII) and a <I>KeySym</I>.<P>
If the user typed in an "a" key, the string will return an "a" (although some systems don't terminate the string, which is why in our program we always put in a null character to terminate the string returned from <I>XLookupString</I>). The <I>KeySym</I> will also equal <I>'a'</I> (which is the number 97).<P>
We'll need to allocate space for the string, the <I>KeySym</I> and the <I>XComposeStatus struct</I>, because these values are returned.<P>
<h4><FONT COLOR="#000080"><A name="0187_00D3"><I>KeySyms<A name="0187_00D3"></I></FONT></h4></P>
<I>KeySym</I>s are symbolic key IDs used in the X Window System to provide portability between different keyboards. <I>KeySym</I>s<I> </I>are defined for letters (<I>A</I> to <I>Z</I> and <I>a</I> to <I>z</I>), function keys, arrows, and just about every key on a keyboard. <I>KeySym</I>s are defined in two files: <I>X11/keysymdef.h</I> and <I>X11/keysym.h.</I> Any Xlib program that uses these symbols should include those two files, along with <I>X11/Xlib.h</I> and <I>X11/Xutil.h.</I><P>
<pre>#include &lt;X11/Xlib.h&gt;
#include &lt;X11/Xutil.h&gt;
#include &lt;X11/keysymdef.h&gt;
#include &lt;X11/keysym.h&gt;</pre>
The <I>KeySym</I> symbols defined in those files all begin with <I>XK_.</I> For example, the capital <I>A KeySym</I> is defined as<P>
<pre>#define XK_A  0x041</pre>
And the lowercase <I>a</I> as<P>
<pre>#define XK_a   0x061</pre>
Other special characters include <I>XK_BackSpace</I>, <I>XK_Delete</I>, <I>XK_Tab</I>, <I>XK_Escape</I>, <I>XK_Return</I>, <I>XK_Up</I>, <I>XK_Home</I>, and <I>XK_Help</I>.<P>
<h4><FONT COLOR="#000080"><A name="0187_00D4">Function Keys<A name="0187_00D4"></FONT></h4></P>
There are <I>KeySym</I>s for most function keys, with names like <I>XK_F1</I> for the <I>F1</I> function key and <I>XK_F8</I> for the <I>F8</I> function key. Some keyboards, such as older Sun keyboards, have left and right function keys as well, with <I>KeySym</I>s such as <I>XK_L4</I> (Left 4) and <I>XK_R6</I> (Right 6). Although the <I>KeySym</I>s are portable, determining which keys to use is sometimes hard because not all keyboards have function keys.<P>
<h4><FONT COLOR="#000080"><A name="0187_00D5">Special Shift Keys<A name="0187_00D5"></FONT></h4></P>
In DOS, the <I>Alt</I> key is often used for keyboard shortcuts, such as <I>Alt-Q</I> to quit. In X Window parlance, this is the <I>Meta</I> key. We prefer the term <I>Meta</I>, because this key is not always labeled <I>Alt</I>. On Hewlett-Packard workstations, for example, the <I>Meta</I> key is labeled <I>Extend Char</I>. On Sun Type 4 keyboards, the <I>Alt</I> key is not the Meta key. The diamond-shaped key next to the <I>Alt</I> key is the default <I>Meta</I> key. Many keyboards even have a left and a right <I>Meta</I> key.<P>
You test a <I>Meta</I> key combination by examining the state field of the <I>XKeyEvent</I> struct shown in <A href="list9.htm">Listing 9</a>.
<P>
You can also test for the shift key with<P>
<pre>XKeyEvent event;

if ( event.state &amp; ShiftMask )
   {
   /* Shift key down */
   }</pre>
Note that <I>XLookupString</I> takes care of normal shifted characters, such as <I>A</I> and <I>E</I>, so you only need to test the shift key for combinations such as shift-right arrow.<P>
<h4><FONT COLOR="#000080"><A name="0187_00D6">Checking For Keyboard Input<A name="0187_00D6"></FONT></h4></P>
Because keyboard input generates X events, the same code that checks for other events also checks for <I>KeyPress</I> events. As in the program in Part 2, we'll use the Xlib function <I>XNextEvent</I> to wait for the next event from the X server. See <A href="list10.htm">Listing 10</a>.
<P>
With <I>KeyPress</I> events, we need to determine if the event is a plain alphanumeric key or some form of special key like arrows or function keys. We can generally test if the <I>KeySym</I> returned by <I>XLookupString</I> is between 32 (ASCII space) and 126 (ASCII Tilde). If so, then we have an alphanumeric keyboard entry. Note that users in other countries will need to modify this test. See <A href="list11.htm">Listing 11</a>.
<P>
<h4><FONT COLOR="#000080"><A name="0187_00D7">Clearing The Window<A name="0187_00D7"></FONT></h4></P>
One other Xlib function, <I>XClearWindow</I>, clears out a window to its background color (which we set to white).<P>
<pre>Display *display;
Window window;

XClearWindow( display, window );</pre>
<I>XClearWindow</I> offers a simple way to blank out our window.<P>
<h4><FONT COLOR="#000080"><A name="0187_00D8">The Sample Program<A name="0187_00D8"></FONT></h4></P>
For this month's sample program, we added keyboard input and text to our program from Part 2. If you're typing this in by hand, you can speed up the process by using the program in Part 2 and then just inserting the differing lines.<P>
Our program, <I>xlib2.c</I> in <A href="list12.htm">Listing 12</a>
first opens a connection to an X server and then creates a window. We create a graphics context to draw in and then load in a font, setting the graphics context to draw with our font. (If the font name we used does not work with your system, use the <I>xlsfonts</I> program to determine a font name that is acceptable.)<P>
The <I>xlib2</I> program asks the X server to provide <I>Expose, ButtonPress</I>, and <I>KeyPress</I> events. On an <I>Expose</I> event, we redraw a global string. On a <I>ButtonPress</I> event the program quits after calling <I>XCloseDisplay</I>.<P>
On <I>KeyPress</I> events, we add the new key (if it is alphanumeric) to a global string and then update the text in the window for our new key. If the user presses the <I>Escape</I> key, we clear out our string. If the user presses a <I>Delete</I> or <I>Backspace</I>, we wipe out the last character in the global string, again updating the display. There are more efficient ways of doing this task, but our goal is to illustrate X Window programming.<P>
Try out the program and look carefully over the sample code. This will give you the most information as you try your own Xlib programs. The code is in <A href="list12.htm">Listing 12</a>.
<P>
When you run it, the window it creates should look like<P>
<pre>{IMPORT C:\\XWINDOW\\XLIB2.TIF \
   \* mergeformat|}</pre>
<h4><FONT COLOR="#000080"><A name="0187_00D9">Compiling And Linking The Sample Program<A name="0187_00D9"></FONT></h4></P>
To compile and link the <I>xlib2</I> program, you must link in the X library, usually <I>/usr/lib/libX11.a.</I> A common UNIX command for this is<P>
<pre>cc -o xlib2 xlib2.c -lX11</pre>
You may need to use the <I>-I</I> option to specify where the <I>X11</I> include files are located, and the <I>-L</I> option to specify where the <I>X11</I> library is located.<P>
If your system uses the include file <I>stdlib.h</I> to pre-declare <I>malloc</I>, define <I>SYSV</I>, as in<P>
<pre>cc -DSYSV -o xlib2 xlib2.c -lX11</pre>
On some 386 versions of UNIX, you may need to link in the networking libraries as well (since the X Window System is a networking windowing system). On SCO's Open Desktop 1.0, you'll need a command like<P>
<pre>cc -oxlib2 -DLAI_TCP -Di386 \
   DSYSV -Dsysv xlib2.c \
   -lX11 -ltlisock -lsocket -lnsl_s</pre>
On Interactive's 386/ix (depending on the version), you'll need a command like<P>
<pre>cc -o xlib2 xlib2.c -lX11 -linet</pre>
<h4><FONT COLOR="#000080"><A name="0187_00DA">Conclusion<A name="0187_00DA"></FONT></h4></P>
This briefly introduces Xlib programming, Unfortunately, we could not show you everything about the X library. We've tried to provide a good starting point for learning X programming.<P>
The next installment of our X Window programming series introduces the SHAPE extension to make odd-shaped windows and other features new to Release 4 of the X Window System.<P>

<h4><a href="../../../source/1991/jul91/johnson.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
