


<HTML>
<HEAD>

<TITLE>July 1991/Stepping Up To C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjul.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Stepping Up To C++<A name="0190_00D4"><A name="0190_00D4"></font></h2><P>
<h3 align="center"><A name="0190_0000"><A name="0190_0000">Rewriting Modules As Classes</h3><P>
<h3 align="center"><font color="#800000">Dan Saks</font></h3><hr><blockquote><P>
<P><i><A name="0190_0000"><A name="0190_0000">Dan Saks is the owner of Saks &amp; Associates, which offers consulting and training in C, C++ and Pascal. He is also a contributing editor of TECH Specialist. He serves as secretary of the ANSI C++ committee and is a member of the ANSI C committee. Readers can write to him at 287 W. McCreight Ave., Springfield, OH 45504 or by email at dsaks@wittenberg.edu.</i></P><P>
This is the third in a series of columns on gradually migrating to C++ by transforming an existing C program into a C++ program. (See "Writing Your First Class," <I>CUJ</I> March 1991, and "Your First Class," <I>CUJ</I> May 1991.) I have tried to produce a C++ program that encapsulates design and implementation decisions better than the original C program. In the process, I hope I've been changing the way you think about large programs.<P>
The program I've been rewriting is <I>xr</I>, a cross-reference generator that prints an alphabetized list of words appearing in a document. Each line in the cross-reference output contains a word from the input document followed by the sequence of line numbers in the document on which that word appears.<P>
The implementation of <I>xr</I> uses two kinds of data structures &#151; a binary tree and a linked list. Each node in the tree stores a word along with that word's sequence of line numbers. The line numbers for each word are stored in a singly-linked list rooted in the tree node for that word. The original C program declares both the tree and list structures at the main level, so they are known to all parts of the program.<P>
Earlier in this series, I partitioned the program into three source files and two header files. The main program, <I>xr.cpp</I>, appears in <A href="list1.htm">Listing 1</a>.
 <I>xr</I> accesses the cross-reference table via functions declared in <I>xrt.h</I> (see <A href="list2.htm">Listing 2</a>)
 and defined in <I>xrt.cpp</I> (see <A href="list3.htm">Listing 3</a>)
. In turn, <I>xrt.cpp</I> manipulates the line number sequences as objects of class <I>ln_seq</I>, declared in <I>ln_seq.h</I> (see <A href="list4.htm">Listing 4</a>)
. The first two parts of this series show the implementation of class <I>ln_seq</I>, as well as the body of function <I>getword</I>.<P>
The cross-reference table module, <I>xrt.cpp</I>, is still organized much like a C program. It uses C++ features to access <I>ln_seq objects</I>, but it still provides a C-like interface to the main program. As I promised last time, I will now complete the program's metamorphosis, by rewriting <I>xrt.h</I> and <I>xrt.cpp</I> as a class.<P>
<h4><FONT COLOR="#000080"><A name="0190_00D5">Changing The Interface<A name="0190_00D5"></FONT></h4></P>
To put a new C++ face on the cross-reference table, change the existing interface functions in <I>xrt.h</I> into public member functions of a new class <I>xrt. xrt_add</I> and <I>xrt_print</I> become <I>xrt::add</I> and <I>xrt::print</I>, respectively. <I>xrt_destroy</I> becomes the destructor <I>xrt::xrt.</I> Move the static data object <I>root</I> from <I>xrt.cpp</I> into the class definition in <I>xrt.h</I> as a private data member, and add a constructor <I>xrt::xrt</I> to initialize <I>root</I> to <I>null</I>. The resulting class definition appears in <A href="list5.htm">Listing 5</a>.
<P>
Because root is of type <I>treenode</I> *, class <I>treenode</I> is now also declared in <I>xrt.h</I>. In turn, <I>treenode</I> requires the definition of <I>class ln_seq</I>, so <I>xrt.h</I> includes <I>ln_seq.h</I>. I'd rather not put the declarations for <I>treenode</I> and <I>ln_seq</I> in the header, because then they become known to the main level, and that's exactly what I set out to avoid when I started rewriting the program.<P>
The simplest way to get around this problem is to declare the class name <I>treenode</I> in <I>xrt.h</I> without actually declaring the class, as shown in <A href="list6.htm">Listing 6</a>.
 Declared this way, <I>treenode</I> behaves like an incomplete type as in C. That is, you can declare pointers to <I>treenodes</I> (like <I>xrt::root</I>), but you can't do anything with <I>treenode</I> objects themselves until you complete the class declaration.<P>
Thus you can leave the declaration for <I>treenode</I>, as well as include <I>ln_seq.h</I>, in <I>xrt.cpp</I>. When you include <I>xrt.h</I> in <I>xrt.cpp</I>, these declarations provide a complete declaration for <I>treenode</I>, making it usable. When you include <I>xrt.h</I> in the main program, <I>treenode</I> remains incomplete and essentially useless. Using incomplete types may be the simplest way to hide <I>treenodes</I> and <I>ln_seqs</I> from <I>main</I>, but it does have a serious drawback, described later in this article.<P>
Strictly speaking, C++ doesn't have incomplete types. My reading of <I>The Annotated C++ Reference Manual</I> <a href="#ref1">[1]</a> is that declarations such as<P>
<pre>class X;</pre>
behave like incomplete types in C, but the C++ description doesn't use the words "incomplete type." I tested my code with three different C++ compilers, and all of them compiled and executed my code as I expected. Members of the C++ standards committee are trying to incorporate the C terminology for incomplete types into the C++ standard.<P>
<A href="list7.htm">Listing 7</a>
shows a new version of <I>main</I> that uses the class <I>xrt</I>. I've added a declaration for an <I>xrt</I> object called <I>x</I> and replaced the calls to <I>xrt_add</I> and <I>xrt_print</I> with calls to <I>x.add</I> and <I>x.print</I>, respectively. I also removed the call to <I>xrt_destroy</I>, because the compiler automatically invokes <I>x</I>'s destructor just before returning from <I>main</I>.<P>
<h4><FONT COLOR="#000080"><A name="0190_00D6">Changing The Implementation<A name="0190_00D6"></FONT></h4></P>
Changing <I>xrt.cpp</I> to match <I>xrt.h</I> requires only a few simple changes (see <A href="list8.htm">Listing 8</a>)
. You replace the declaration of <I>root</I>:<P>
<pre>static treenode *root = 0;</pre>
with the definition of a constructor that initializes <I>root</I>:<P>
<pre>xrt::xrt() : root(0) { }</pre>
The initializer <I>: root(0)</I> initializes <I>root</I> with <I>0</I> and is equivalent to<P>
<pre>xrt::xrt()
   {
   root = 0;
   }</pre>
You also change the names of <I>xrt_add</I>, <I>xrt_destroy</I>, and <I>xrt_print</I> to their new member function names. Be sure to remove the <I>void</I> return type specifier when you change <I>xrt_destroy</I> to <I>~</I><I>xrt</I>, because destructors (like constructors) can't have a return type.<P>
<h4><FONT COLOR="#000080"><A name="0190_00D7">Trimming The Excess<A name="0190_00D7"></FONT></h4></P>
In the first column in this series, I created <I>xrt_add</I> and <I>xrt_print</I> (which are now <I>xrt::add</I> and <I>xrt::print</I>) to hide the existence of <I>root</I> from <I>main</I>. The sole purpose of <I>xrt_add</I> (<I>xrt_print</I>) is to call <I>addtree</I> (<I>printtree</I>) with <I>root</I> as an additional argument. These functions cost an extra function call and return every time the program adds an entry to the table or prints the table, but I was willing to pay that price for the improved encapsulation. Now that <I>root</I> is a private data member of <I>xrt</I>, and not a static variable in <I>xrt.cpp</I>, you no longer need this extra function-call layer.<P>
I will consider simplifying <I>addtree</I> first, and then apply similar changes to <I>printree</I>. Try reproducing these changes on your own system. I found that as I applied each small change, C++'s type and access restrictions guided me to the next step. The compiler's messages were very helpful.<P>
You eliminate the extra function layer from <I>xrt::add</I> by merging the body of <I>addtree</I> into <I>xrt::add</I> and discarding <I>addtree</I>.<I>addtree</I> is recursive, so you must translate the recursive calls to <I>addtree</I> into recursive calls to <I>xrt::add</I>. That is, you translate the call<P>
<pre>t-&gt;left = addtree(t-&gt;left, w, n);</pre>
in the body of <I>addtree</I> into<P>
<pre>t-&gt;left.add(w, n);</pre>
in the body of <I>xrt::add</I><I>.</I><P>
This transformation forces you to alter the declaration of <I>treenode.</I> If <I>t-&gt;left.add(w, n)</I> is supposed to be a recursive call on <I>xrt::add,</I> then <I>t-&gt;left</I> must be of type <I>xrt.</I> Thus, you must change the declarations of <I>treenode::left</I> and <I>treenode::right</I> from<P>
<pre>treenode *left, *right;</pre>
to<P>
<pre>xrt left, right;</pre>
Notice that, even after this change, <I>treenode</I> is still a self-referential data structure. Before, <I>left</I> and <I>right</I> were pointers to other treenodes; now they are objects of class <I>xrt</I> whose <I>root</I> pointers point to other treenodes. Because class <I>xrt</I> has only one data member, namely <I>treenode *root, xrt</I> objects occupy exactly the same amount of storage as <I>treenode</I> pointers. To some of you, it looks like I just added an extra level of pointers to each <I>treenode,</I> but I assure you I haven't. An object of class <I>xrt</I> doesn't point to a <I>root</I> pointer &#151; it's an object whose only data member <I>is</I> a <I>root</I> pointer. Thus, changing the types of <I>left</I> and <I>right</I> does not affect the storage efficiency of the cross-reference table. It merely adjusts the data types to facilitate writing <I>xrt::add</I> as a recursive function.<P>
What becomes of argument <I>treenode *t</I> in the body of <I>addtree</I> when you move the code into the body of <I>xrt::add</I>? In <I>addtree, t</I> is the root of the subtree for the current recursive call. In <I>xrt::add,</I> you change all the occurrences of <I>t</I> to <I>root</I> (the root member of the current <I>xrt</I> object).<P>
You should omit the return statement at the end of <I>addtree</I> from <I>xrt::add. addtree</I> returns <I>t</I> (the root of the subtree), and is always invoked by statements of the form<P>
<pre>t = addtree(t, w, n);</pre>
However, <I>xrt::add</I> has a void return type. It needs no return value because the calls are of the form<P>
<pre>x.add(w, n);</pre>
That is, a call to <I>x.add</I> modifies <I>x.root</I> directly.<P>
As you rewrite <I>xrt::add,</I> you must apply similar changes to <I>xrt::print.</I> You move the body of <I>printtree</I> to <I>xrt::print,</I> replacing all occurrences of <I>t</I> with <I>root,</I> and changing calls of the form<P>
<pre>printtree (root-&gt;left);</pre>
to<P>
<pre>t-&gt;left.print();</pre>
The new implementation of <I>xrt.cpp</I> appears in <A href="list9.htm">Listing 9</a>.
<P>
<h4><FONT COLOR="#000080"><A name="0190_00D8">Tuning The Constructors And Destructors<A name="0190_00D8"></FONT></h4></P>
Look at the <I>treenode</I> destructor in <A href="list9.htm">Listing 9</a>,
 where I placed the lines<P>
<pre>delete left;
delete right;</pre>
inside comments. When I changed <I>treenode::left</I> and <I>treenode::right</I> to objects of class <I>xrt,</I> these <I>delete</I> statements produced compilation errors. The operand of <I>delete</I> must be a pointer returned by <I>new</I>; however, <I>left</I> and <I>right</I> are no longer pointers.<P>
The original intent of the <I>delete</I> statements was to discard the <I>left</I> and <I>right</I> subtrees of a <I>treenode.</I> Now that <I>left</I> and <I>right</I> are <I>xrt</I> objects, you no longer need these <I>deletes,</I> because the <I>xrt</I> class has a destructor that deletes its <I>root</I> pointer. The <I>treenode</I> destructor automatically applies the <I>xrt</I> destructor to <I>left</I> and <I>right,</I> thus discarding the subtrees.<P>
Changing <I>left</I> and <I>right</I> from pointers to objects has a similar effect on the <I>treenode</I> constructor. The first conditional block of statements in <I>xrt::add</I> (see <A href="list9.htm">Listing 9</a>)
 handles adding a cross-reference entry to an empty tree. That is, the statements<P>
<pre>if (root == 0)
   {
   root = new treenode(n);
   root-&gt;word =
      new char[strlen(w) + 1];
   strcpy(root-&gt;word, w);
// root-&gt;left = root-&gt;right = 0;
   }</pre>
create a new leaf of the tree containing word <I>w</I> at line number <I>n.</I> After I changed <I>treenode::left</I> and <I>treenode::right</I> to <I>xrt</I> objects, this assignment also produced a compilation error, so I placed it in a comment.<P>
Originally, this assignment (when it was in <I>addtree)</I> made the <I>left</I> and <I>right</I> subtrees empty. Now that <I>left</I> and <I>right</I> are <I>xrt</I> objects, the effect of these assignments is performed by the <I>treenode</I> constructor, invoked by<P>
<pre>root = new treenode(n);</pre>
The <I>treenode</I> constructor automatically invokes the default <I>xrt</I> constructor to initialize <I>left</I> and <I>right.</I> The default <I>xrt</I> constructor sets the <I>root</I> pointer to zero.<P>
Shifting more work to the <I>treenode</I> constructor simplifies <I>xrt::add</I> even further. You add <I>char *w</I> as an argument to the <I>treenode</I> constructor, and move the statements<P>
<pre>root-&gt;word = new char[strlen(w)
   + 1];
strcpy(root-&gt;word, w);</pre>
to the constructor's body. Since <I>strcpy</I> returns its first argument, these two lines can be replaced by<P>
<pre>root-&gt;word = strcpy (new       char[strlen(w)+ 1], w);</pre>
These changes to the <I>treenode</I> constructor and destructor, and their impact on <I>xrt::add,</I> appear in <A href="list10.htm">Listing 10</a>.
<P>
<h4><FONT COLOR="#000080"><A name="0190_00D9">Inlines: The Finishing Touch<A name="0190_00D9"></FONT></h4></P>
<I>xrt.cpp</I> contains several extremely small functions, such as the constructors and destructors for <I>treenode</I> and <I>xrt.</I> For such small functions, the overhead of function entry and exit can be much greater than the code in the function body. In such cases, it's usually preferable to have the function body expanded inline at the point of the call. In C, you implement inline function expansion using function-like macros. In C++, you use inline functions.<P>
There are two ways to ask the compiler to expand a function inline. You can simply place the keyword <I>inline</I> before the function definition, as in<P>
<pre>inline int abs(int i)
   {
   return i &gt;= 0 ? i : -i;
   }</pre>
Alternatively, for member functions, you can place the function definition inside the class declaration, as in<P>
<pre>class ln_seq
   {
public:
   ln_seq() { first = last = 0; }
   ...
   };</pre>
Inline functions are safer than macros because macros can have dangerous side effects. For example, given the macro<P>
<pre>#define abs(i) ((i) &gt;= 0 ?
   (i) : -(i))</pre>
the call<P>
<pre>y = abs(*p++);</pre>
expands to<P>
<pre>y= ((*p++) &gt;= 0 ?
    (*p++) : -(*p++));</pre>
which increments <I>p</I> twice. In contrast, inline functions behave the same as non-inline functions. That is, they evaluate their arguments exactly once upon function entry.<P>
Declaring a function inline (using either form) is only a hint to the compiler. The compiler can ignore your request. If you absolutely need inline expansion for a function, you should write it as a macro.<P>
To request inline expansion for the <I>treenode</I> constructor and destructor, place the keyword <I>inline</I> before the function definitions in <I>xrt.cpp.</I> If you want inline expansion for the <I>xrt</I> constructor, move it from <I>xrt.cpp</I> to <I>xrt.h.</I> The <I>xrt</I> constructor is called from <I>main</I> (in <I>xr.cpp</I>) as well as from the <I>treenode</I> constructor (in <I>xrt.cpp</I>). If you leave the function definition as an inline in <I>xrt.cpp,</I> the compiler will generate a non-inline function body to satisfy the constructor invocation in <I>main.</I> You can merge the constructor <I>xrt::xrt</I> into <I>xrt.h</I> in either of two ways, shown in <A href="list11.htm">Listing 11</a>
and <A href="list12.htm">Listing 12</a>.
<P>
Do <I>not</I> make the <I>xrt</I> destructor into an inline function. Leave it as a non-inline function in <I>xrt.cpp.</I> Moving the destructor's definition into <I>xrt.h</I> causes a very subtle bug in the program. The problem is that the <I>xrt</I> destructor calls<P>
<pre>delete root;</pre>
Because <I>root</I> is of type <I>treenode</I> *, the <I>delete</I> also applies the <I>treenode</I> destructor to *<I>root.</I> But in <I>xrt.h</I>, <I>treenode</I> is an incomplete type. When you move <I>xrt</I>'s destructor into the header, the compiler can't always determine that <I>xrt</I>'s destructor should invoke the <I>treenode</I> destructor. When <I>main</I> invokes the <I>xrt</I> destructor, it sees <I>xrt::root</I> as a pointer to an incomplete type. The destructor returns the <I>root</I> to the free store, without destroying any of the subtrees.<P>
Using incomplete types can be hazardous to the health of your C++ program. None of the C++ compilers I used produced any diagnostics to warn me of this problem.<P>
<h4><FONT COLOR="#000080"><A name="0190_00DA">Post Mortem<A name="0190_00DA"></FONT></h4></P>
I started with a C program implemented as a single 114-line source file. I ended with a C++ program implemented as three source files and two header files totaling nearly 200 lines. The object code for the C++ program increased by about 4 percent above the C program. However, the C++ has additional code to discard the cross-reference table (the destructors), which isn't present in the C code. If you discount the destructors, the C++ source code shrinks to 168 lines, and the increase in the object code size falls to less than 2 percent. There is a cost in object code efficiency, but it's very small.<P>
Almost all of the extra source code comes from the class definitions in the header files. This points to a key difference between C and C++ programs. In C++, specifying the interface between components is part of the compiled language, and not just a matter of style and commenting conventions. By enforcing the interfaces between components, C++ helps make large programs more maintainable.<P>
<h4><FONT COLOR="#000080"><A name="0190_00DB">A Minor Correction<A name="0190_00DB"></FONT></h4></P>
In my last column the text misstated that the declaration of <I>struct treenode</I> (in <A href="list7.htm">Listing 7</a>
of that column) was changed to class <I>treenode</I>. <A href="list7.htm">Listing 7</a>
still shows <I>treenode</I> as a <I>struct</I>. I meant to write the declaration as<P>
<pre>class treenode
   {
public:
   char *word;
   ln_seq lines;
   treenode *left, *right;
   treenode (unsigned);
   };</pre>
This change is purely cosmetic; it doesn't affect the behavior of the code.<P>
<h4>References</FONT></h4></P>
<a name="ref1">[1]</a>     Ellis, Margaret A. and Bjarne Stroustrup, The Annotated C++ Reference Manual. Addison-Wesley, Reading, MA, 1990.<P>

<h4><a href="../../../source/1991/jul91/saks.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
