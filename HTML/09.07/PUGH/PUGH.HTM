


<HTML>
<HEAD>

<TITLE>July 1991/Questions & Answers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjul.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Questions &amp; Answers<A name="018E_00D2"><A name="018E_00D2"></font></h2><P>
<h3 align="center"><A name="018E_0000"><A name="018E_0000">Byte Alignment</h3><P>
<h3 align="center"><font color="#800000">Ken Pugh</font></h3><hr><blockquote><P>
<P><i><A name="018E_0000"><A name="018E_0000">Kenneth Pugh, a principal in Pugh-Killeen Associates, teaches C language courses for corporations. He is the author of C Language for Programmers and All On C, and was a member on the ANSI C committee. He also does custom C programming for<I></I> <I></I>communications, graphics, image databases, and hypertext. His address is 4201 University Dr., Suite 102, Durham, NC 27707. You may fax<I></I> <I></I>questions for Ken to (919) 489-5239. Ken also receives email at kpugh@dukemvs.ac.duke.edu (Internet).</i></P><P>
<B>Q</B><P>
I have a rather frivolous question that you or one of the readers of <I>The C Users Journal</I> may be able to answer. Given the following declarations,<P>
<pre>register scalar *src, *dest;
register short ct;</pre>
where the type <I>scalar</I> is <I>short</I>, <I>int</I>, or <I>long</I>, all of the <I>M680X0</I> compilers I am familiar with will compile the expression<P>
<pre>*dest++ = *src++;</pre>
to a two-byte, single instruction move of the appropriate size, and also<P>
<pre>*dest++ == *src++;</pre>
to a two-byte, single instruction compare. Many are able to optimize the expression<P>
<pre>for (ct = length - 1; ct &gt;= 0; ct- -)
   *dest++ = *src++;</pre>
to the sequence<P>
<pre>MOVE.W length, Dr
BRA *+4
MOVE.s (An)+, (Am)+
DBF Dr, *-2</pre>
where <I>s</I> indicates the size of the scalar type and <I>Am, An</I>, and <I>Dr</I> are the registers the compiler allocated for <I>src</I>, <I>dest</I>, and <I>ct</I>, respectively.<P>
My question is whether compilers for the 80X86 can equivalently compile and/or optimize such C code to use the built-in string and repeat or loop instructions.<P>
This question, of course, derives from a running argument I have with a friend who believes Motorola processors do not handle strings efficiently. All of the iNTEL one-byte string instructions have two-byte, single instruction equivalents in the M680X0 instruction set (except for the rarely used down address mode of <I>cmps</I>, which takes two M680X0 instructions to implement). My impression is that the less general iNTEL string set is less accessible to programmers using high-level languages. Thus my question.<P>
Joel Rees<br>
South Salt Lake City, UT<P>
<B>A</B><P>
Interesting question. I would say that it all depends on the compiler's optimization scheme. If you used a standard subroutine such as <I>strcpy ()</I>, <I>memcpy()</I>, or <I>strcmp ()</I>, the compiler manufacturer could easily write the function in assembly language to take advantage of the built-in operations. Intel's REPZ prefix in combination with CMPS (compare strings) and SCAS (scan strings) can work extremely fast. I doubt that a compiler would normally use these.<P>
Using standard compiler functions to perform common operations permits it to use faster operations, even if they do not match the data type. For example, memory copying can be performed faster if the size of the data moved matches the bus width. A standard function could be "smart" and do half or a quarter of the move instructions plus maybe a few single character moves and come out faster than moving things singly.<P>
Optimizations get to be really tricky business. The string instructions may be faster than a series of discrete instructions if there is no instruction cache in the processor. The memory fetches for the instructions would outweigh the extra memory cycles for the individual bytes. A large instruction cache would tend to make a set of discrete instructions faster, because no instruction fetches would be required after the initial ones.<P>
You might have coded your example as<P>
<pre>ct = length;
while (ct--)
   *dest++ = *src++;</pre>
The compiler would have one less optimization to perform.<P>
<B>Q</B><P>
I have a couple of questions that I hope you can help me with. I have seen mention of them in various books, but frankly I can't remember where. The books did not really explain them anyway to the degree that I want.<P>
<h4><FONT COLOR="#000080"><A name="018E_00D3">Question 1:<A name="018E_00D3"></FONT></h4></P>
In most of the C books that I have studied the first function listed is the main function. After the main function all of the other functions are entered.<P>
<pre>main ()
   {
   code
   }
function 1
function 2
function 3</pre>
However, I have also seen<P>
<pre>function 1
function 2
function 3
main ()
   {
   code
   }</pre>
In this case the functions are listed first and then the C main function. What are the advantages and disadvantages of these two different formats. I assume that it has to do with releasing memory that is not being used, but does it really make any difference which format you use?<P>
<h4><FONT COLOR="#000080"><A name="018E_00D4">Question 2:<A name="018E_00D4"></FONT></h4></P>
I have seen a little mention of alignment. I am talking about word and byte alignment of data in memory. Word alignment is supposed to be faster, but there does seem to be a use for byte alignment as well.<P>
I would like to hear some explanation of this subject in greater detail. I know that there isn't a lot of detail to give, but any would help.<P>
By this I assume that how I list my variables is important. It seems I should do the following:<P>
<pre>main ()
{
int     one,two,three,four;
float   eny,mine,mo;
char    first,second,third;

program
}</pre>
However, some other information I ran across seemed to indicate that alignment has to do with strutures and unions. I certainly would like this cleared up.<P>
Lyle O. Haga<br>
Englewood, CO<P>
<B>A</B><P>
<h4><FONT COLOR="#000080"><A name="018E_00D5">Answer 1:<A name="018E_00D5"></FONT></h4></P>
It doesn't matter to the compiler or to the output program the order in which you list your functions. To the compiler, <I>main()</I> is just another function, although it has the property of being the one that is called by the program startup code. The linker will pick up the name wherever it occurs in the file.<P>
To the human, the order varies according to purpose. For example, many times I have main first. Other times I keep it in a separate file. Still other times it goes last, especially when it is surrounded by <I>#ifdef DEBUGMAIN / #endif</I>. I frequently put a <I>main()</I> function in files which contain functions that are used as my personal library. The main function contains calls that test the operations of the functions. When I am testing the functions, <I>DEBUGMAIN</I> is <I>#define</I>d. When I am using them in other programs, <I>DEBUGMAIN</I> is not <I>#define</I>d.<P>
<h4><FONT COLOR="#000080"><A name="018E_00D6">Answer 2:<A name="018E_00D6"></FONT></h4></P>
Alignment refers as to the memory boundary on which a data item is stored. The memory bus in a processor can be a byte, two bytes, or four bytes wide. In the case of a byte-wide bus, there are no alignment problems. For a two-byte bus, a single reference to memory produces two bytes at the same time. For example, memory address 0 produces the values for bytes 0 and 1 on the bus. Addressing memory address 2 produces the values for bytes 2 and 3 on the bus. If an instruction only requires one of the bytes, the other is disregarded.<P>
On some processors, if the data item is 2 bytes, it must reside at an even address. If the data item is 4 bytes it must reside at an address divisible by 4.<P>
For individual data items, the processor keeps these stored at whatever alignment is required. Unless you compare the actual addresses, you have no indication of their alignment.<P>
With structures, alignment does pose some interesting problems. For processors that require alignment, the compiler puts filler or packing bytes between members to ensure that alignment is proper. If you print the <I>sizeof</I> of a structure, it may be larger than the total of its members.<P>
On the PC, which has no alignment requirements, some compilers using packing bytes, some do not, and some give an option to go either way.<P>
<h4><FONT COLOR="#000080"><A name="018E_00D7">Readers' Replies<A name="018E_00D7"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="018E_00D8">UNIX Process Problems<A name="018E_00D8"></FONT></h4></P>
Tim Reilly had a problem with executing a child process that did not return the proper exit code. This was listed in the April <I>CUJ</I>. The original code appears in <A href="list1.htm">Listing 1</a>.
 Several people responded to a request for comments. Some of the responses are listed below. T. William Wells wrote a few comments about the code. The code has been revised to <A href="list2.htm">Listing 2</a>.
 The line reading<P>
<pre>while (wait( (int *) 0 ) == pid);</pre>
has been replaced with a clearer set of code. The <I>while</I> loop hides the purpose. In addition, the call to <I>signal</I> has been moved to the top. There is a small but finite probability that an interrupt could occur between the fork and the call to <I>signal</I>. When the <I>exec</I> occurs in the child, signal handling will be reset to default, so that the extra call to <I>signal</I> is not needed.<P>
Keith Neufeld's letter below adds a few more bits of information. To demonstrate the problem further, <A href="list3.htm">Listing 3</a>
and <A href="list4.htm">Listing 4</a>
show the program modified with some <I>printf</I>s and the corresponding output.<P>
I'll be speaking at the UNIX conference sponsored by Boston University this month. I'll check with UNIX gurus there to see what the problem might be. (KP)<P>
I am fascinated and confounded by Tim Riley's <I>all_true</I> program/problem in the April <I>CUJ</I>. I hope to God you didn't just dig up some obscure feature of UNIX to foist upon us unsuspecting readers as an April Fool's joke; if you did, I'm biting, and hard. It'll be good education for me, anyway.<P>
Two aspects of this make it particularly interesting for me. The first is that, as Tim mentioned in the last paragraph, if you change <I>RET_VALUE</I> to something other than <I>0</I>, the program always returns <I>RET_VALUE</I>. The second is that if you decide to catch <I>SIGQUIT</I> instead of <I>SIGINT</I>, the program always returns <I>RET_VALUE</I>, even if it is <I>0</I>, unless of course you stop it with <I>SIGINT</I> or some other signal it's unprepared to catch.<P>
One thing: I don't know of any particular advantage gained by splitting the program into <I>main ()</I> and <I>process ()</I>; it seems to function the same if <I>process()</I> is included inline, and, for me, at least, makes it more readable. Oh &#151; and it always returns 2000 when it catches <I>SIGINT</I> on our system, an NCR Tower SysV, also.<P>
Keith Neufeld<P>
<h4><FONT COLOR="#000080"><A name="018E_00D9"><I>qsort</I><B> Comparison Function<A name="018E_00D9"></B></FONT></h4></P>
Let me just drop a note on the Firdaus Irani question in the December 1990 issue of <I>The C Users Journal</I>, page 92, using <I>qsort</I>. By definition, any compare function always has the prototype:<P>
<pre>int compare(const void *, const void *);</pre>
But, as always in C, the programmer is free to manipulate user-defined functions to conform to this standard. I've seen extensive typecasting and double function calls, but in reality, a much simpler solution can and will do. First, define a new type with<P>
<pre>typedef int (*_QSORT_CMP_)(const void *, const void *);</pre>
then, later in the code:<P>
<pre>....
qsort(array, nelem, elemsize, (_QSORT_CMP_)user_function);
....</pre>
<I>user_function</I> can now be anything you desire, receiving pointers to any kind of structure. Its only requirement is to return integer type uniquely defining the relation between two received parameters (<I>&lt;0,0,&gt;0</I>). For example,<P>
<pre>int user_function(unsigned char **a, unsigned char **b)
    {
    return( strcmp(*a, *b) );
    }</pre>
This typecast will not produce any error or warning messages. However, because the programmer explicitly overrode the function declaration, the compiler is not responsible for catching casting errors. Actually, the compiler will <I>not</I> produce any errors even if <I>user_function</I> is now declared to be receiving more (or less) than two parameters! Beware indeed!<P>
This typecasting can be useful when dealing with search functions such as <I>bsearch</I>. Imagine a structure defined as:<P>
<pre>typedef struct {
   int len;
   int ID;
    int year;
    ....;
   } DATA;</pre>
Then let's have an array of such structures, initialize each element and then sort an array by ID:<P>
<pre>#define NELEM(array)
(sizeof(array)/sizeof(array [0]))

DATA data_array[...];
int i;

for ( i=0; i &lt; NELEM(data array) ; i-- )
   initialize_data_array(&amp;data array[i] );
qsort(&amp;data_array [0],NELEM(data_array), \
   sizeof(DATA), (_QSORT_CMP_)usr_fn1);</pre>
One can now request and find an element in this array just by using an ID uniquely identifying each element:<P>
<pre>int ID;
DATA *D;

D =  (DATA *) bsearch(&amp;ID, &amp;data_array[0], \
     NELEM(data_array), sizeof(DATA). \
     (_QSORT_CMP_)usr_fn2);</pre>
User-defined functions are defined as<P>
<pre>int usr_fn1(DATA *D1, DATA *D2)
{
return ( D1-&gt;ID - D2-&gt; );
}

int usr_fn2(int *key, DATA *D)
   {
   return ( *key - D-&gt;ID );
   }</pre>
Use of <I>usr_fn2</I> in <I>bsearch</I> is highly compiler-dependent, but serves its purpose when the programmer knows that first parameter for the search function will always be a <I>key</I>. Again, this is not always true, check your compiler's runtime library documentation. Again, be absolutely sure to check this, because it is <I>not</I> guaranteed in generic description of search function.<P>
To relate this example to a real situation, where sort'n'searches were extensively used, I've recoded the search function in assembly language, and could guarantee a key to be the first parameter passed to the associated compare function. See <A href="list5.htm">Listing 5</a>.
<P>
Sergio Cherskov<br>
Las Vegas<P>
Thanks for your reply. With casts, the programmer can stick him/herself in the foot, as your code shows. That actually can get around a problem that was posed at the X3J11 committee meetings. One would like to have an array of function pointers that contains different function types.<P>
You can still specify something like<P>
<pre>int function1(int, int, char *);
int function2(char *, int);
   ...
int (*function_array[5]) () = {function1, function2...};</pre>
However the use of <I>()</I>s without any parameter specification is deprecated.<P>
However, using casts, it can now be specified as<P>
<pre>typedef int (*void_parms)(void);

int (*function_array[5]) (void) = \
   {(void_parms) function1,
   (void_parms) function2...};</pre>
There is no need to use two functions for comparison. Your comparison function <I>usr_fn1</I> can be used for both the <I>qsort</I> and the <I>bsearch</I> functions. Both functions call the comparison function with two addresses of elements in the array.<P>
You could code this as<P>
<pre>DATA data_search;
   ...
   data_search.ID = ID;
   D = bsearch(&amp;data_search, \
       &amp;data_array[0],
     NELEM(data_array),
     sizeof(DATA), (_QSORT_CMP_) usr_fn1 );</pre>
If the sort required involved more than a single member of the structure, you would have to code it in this style.<P>
To avoid the unsightly cast, some readers (Peter Torkelson of Kent, WA and and Esmond Hart of Auckland, New Zealand) suggested using a <I>typedef</I> as<P>
<pre>typedef int (*compare_t) \
   (const void *, const void *);</pre>
Maybe this name could even be standarized, since it is useful for many different functions. (KP)<P>
<h4><FONT COLOR="#000080"><A name="018E_00DA"><I>.EXE</I><B> Files<A name="018E_00DA"></B></FONT></h4></P>
I got a letter from Alex Robinson regarding a program that allows you to insert data items in an <I>.EXE</I> file. The program also packs the <I>.EXE</I> file, better than <I>EXEPACK</I>.<P>
I tried the program out on my hypertext program, InfoNavigator. It works well. The results were<P>
<pre>/* Original file */
LINKBTG EXE  238224
/* EXEPACK version */
BROWSER1 EXE  225672
/* Tinyprog version */
BROWSER EXE  146656</pre>
The program is available from the Tranzoa, Co. P.O. Box 911, Maple Valley, WA 98038. (206) 432-3532. Cost is $15. (KP)<P>

<h4><a href="../../../source/1991/jul91/pugh.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
