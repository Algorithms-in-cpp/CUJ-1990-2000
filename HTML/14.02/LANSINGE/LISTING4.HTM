






<HTML>
     
     <HEAD>
          <TITLE>February 1996/An Embedded C++ Application/Listing 4</TITLE>
     </HEAD>
     
     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          
          <H4>Listing 4: Thefunctions _vec_new and _vec_delete</H4>

<PRE>

typedef unsigned char BYTE;          // useful typedef
typedef void* (* ctorp)(BYTE *);     // pointer to a constructor fn
typedef void (* dtorp)(BYTE *, int); // pointer to a destructor fn

void* _vec_new(void* p,       // if not NULL, memory has already been
                              // allocated at this address for the
                              // vector and will not be _new-ed
               int   numelem, // number of elements to be created
               int   size,    // size of an element
               ctorp pctor    // pointer to contstructor function
              )
// Creates a vector of objects, calling the constructor for each.
{
  int i;
  BYTE* pobj;
  if (!p)
    p = _new(numelem*size);
  for(i = 1, pobj = (BYTE *)p; i &lt;= numelem; i++, pobj += size)
    (*pctor)(pobj); // call the constructor
  return (void*)p;
}

void _vec_delete(void* p,       // pointer to vector to be deleted
                 int   numelem, // number of elements to be deleted
                 int   size,    // size of each element
                 dtorp pdtor,   // pointer to destructor function
                 int   free     // !=0 true if the memory at p is to be
                                // _deleted, 0 otherwise
                )
// Deletes a vector of objects, calling the destructor for each.
{
  int i;
  BYTE* pobj;
  pobj = (BYTE *)p;
  for(i = 1, pobj = (BYTE *)p; i &lt;= numelem; i++, pobj+=size)
    (*pdtor)(pobj, 0); // call the destructor
                       // 0 =&gt; don't call _delete for the element
                       // (see typical destructor function)
  if (free)
    _delete(p);
}


</PRE>
     </BODY>
</HTML>
