






<HTML>
     
     <HEAD>


          
          <TITLE>August 1996/Testing Random Number Generators, Part 2/Figure 4</TITLE>
     </HEAD>
     
     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          
          <H4>Figure 4: Functions in the extended precision math library</H4>
          
          <BLOCKQUOTE>

<PRE>

Prototype            Purpose
---------            -------
asctoq(string, q)    ascii string to q type
dtoq(&amp;d, q)          DEC double precision to q type
etoq(&amp;d, q)          IEEE double precision to q type
e113toq(&amp;d, q)       128-bit long double to q type
e64toq( &amp;e, q )      80-bit IEEE long double to q type
ltoq(&amp;l, q)          long integer to q type
qabs(q)              absolute value
qadd(a, b, c)        c = b + aqclear(q)        q = 0
qcmp(a, b)           compare a to b
qdiv(a, b, c)        c = b / a
qifrac(x, &amp;l, frac)  x to integer part l and q type fraction
qldexp(x, n)         multiply x by 2^n
qinfin(x)            set x to infinity, leave its sign alone
qmov(a, b)           b = a
qmul(a, b, c)        c = b * a
qmuli(a, b, c)       c = b * a, a has only 16 significant bits
qisneg(q)            returns sign of q
qneg(q)              q = -q
qnrmlz(q)            adjust exponent and mantissa
qsub(a, b, c)        c = b - a
qtoasc(a, s, n)      q to ASCII string, n digits after decimal
qtod(q, &amp;d)          convert q type to DEC double precision
qtoe(q, &amp;d)          convert q type to IEEE double precision
qtoe113(q, &amp;d)       convert q type to 128-bit long double
qtoe64( q, &amp;e )      q type to 80-bit IEEE long double
       EXTENDED PRECISION MATHEMATICAL FUNCTIONS
qexp( x, y )         y = exp( x )
qfloor( x, y )       y = largest integer not greater than x
qlog( x, y )         y = log( x ) [natural logarithm]
qpow( x, y, z )      z = x^y [x raised to the y power]
qrand( q )           q = pseudorandom number in [0,1)
qremain( a, b, c )   c = remainder after dividing b by a.
qround( x, y )       y = nearest integer to x
qsqrt( x, y )        y = sqrt( x )
qsrand( u )          initialize seed of qrand with unsigned int
qtanh( x, y )        y = tanh( x ) [hyperbolic tangent]
</PRE>  </BLOCKQUOTE>
     </BODY>
</HTML>
