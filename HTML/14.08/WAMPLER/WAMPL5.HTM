



<HTML><HEAD>

<TITLE>August 1996/V: A Portable GUI Framework/Listing 5</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4>Listing 5:	myCanvasPane class definition</h4>

<pre>

//================================================================
//  drawcnv.cxx
//  Copyright (C) 1995  Bruce E. Wampler
//
//  This SIMPLE canvas class just draws lines using the pen that
//  goes with this canvas. It doesn't handle any scrolling or
//  paging. It also only handles up to 200 lines.
//================================================================

#include "drawcnv.h"

//================&gt;&gt;&gt; myCanvasPane::myCanvasPane &lt;&lt;&lt;==============
myCanvasPane::myCanvasPane()
{
  // Initialize to known values
  _mouseDown = 0;
  _begx = -1;  _begy = -1;  _curx = -1;  _cury = -1;
  _pt = new point[200];    // Just 200 lines for this example
  _nextpt = 0;
}

//==============&gt;&gt;&gt; myCanvasPane::myCanvasPane &lt;&lt;&lt;================
myCanvasPane::~myCanvasPane()
{
  delete [] _pt;           // free the point array
}

//=================&gt;&gt;&gt; myCanvasPane::Clear &lt;&lt;&lt;====================
void myCanvasPane::Clear()
{
  vCanvasPane::Clear();       // clear the canvas
  _nextpt = 0;                // and all the points
}

//================&gt;&gt;&gt; myCanvasPane::MouseDown &lt;&lt;&lt;=================
void myCanvasPane::MouseDown(int X, int Y, int button)
{
  // Note beginning of line on mouse down
  _mouseDown = 1;
  _begx = _curx = X;    _begy = _cury = Y;

  _pt[_nextpt].x = X;  _pt[_nextpt].y = Y;
  _pt[_nextpt].pPen = GetPen();
  ++_nextpt;
  if (_nextpt &gt;= 200)         // really dumb, but SIMPLE!
      _nextpt = 0;
}

//==================&gt;&gt;&gt; myCanvasPane::MouseUp &lt;&lt;&lt;=================
void myCanvasPane::MouseUp(int X, int Y, int button)
{
  // Finish drawing line on mouse up
  _mouseDown = 0;
  if (_begx != X || _begy != Y)  // First time?
      DrawLine(_begx, _begy, X, Y);

  _pt[_nextpt].x = X;    _pt[_nextpt].y = Y;
  _pt[_nextpt].pPen = GetPen();
  ++_nextpt;
   if (_nextpt &gt;= 200)         // really dumb, but SIMPLE!
      _nextpt = 0;

  _mouseDown = 0;             // ready for next line
  _begx = -1;  _begy = -1;  _curx = -1;  _cury = -1;
}

//==================&gt;&gt;&gt; myCanvasPane::MouseMove &lt;&lt;&lt;===============
void myCanvasPane::MouseMove(int x, int y, int button)
{
  // Draw rubber band line on mouse move
  if (_begx != _curx || _begy != _cury)    // old line to clear?
      DrawRubberLine(_begx, _begy, _curx, _cury);

  if (_begx != x || _begy != y)           // draw new line
      DrawRubberLine(_begx, _begy, x, y);
    
  _curx = x;    _cury = y;                // update
}

//===================&gt;&gt;&gt; myCanvasPane::Redraw &lt;&lt;&lt;=================
void myCanvasPane::Redraw(int x, int y, int w, int h)
{
  // This is a stupid Redraw that just redraws everything.
  // It also starts losing things after 200 points. This
  // is just sample code, remember!

  int x1, y1, x2, y2;         // work variables

  for (int ix = 0 ; ix &lt; _nextpt ; ix += 2)
    {
      if (ix == 0 || _pt[ix].pPen != _pt[ix-2].pPen)
          SetPen(_pt[ix].pPen);
      x1 = _pt[ix].x;      y1 = _pt[ix].y;
      x2 = _pt[ix+1].x;    y2 = _pt[ix+1].y;
      DrawLine(x1, y1, x2, y2);
    }
}

//==================&gt;&gt;&gt;myCanvasPane::Resize &lt;&lt;&lt;==================

void myCanvasPane::Resize(int w, int h)
{
  // This simple example doesn't need to do anything special for
  // resize. The default will cause a Redraw.
  vCanvasPane::Resize(w,h);
}

#include &lt;fstream.h&gt;        // to save/restore drawings

//==================&gt;&gt;&gt; myCanvasPane::Read &lt;&lt;&lt;====================
int myCanvasPane::Read(char* name)
{
  // Read in a file of points
  int r,g,b,ps;

  if (!name || !*name) return 0;      // sanity check
  ifstream inFile(name);              // open the file to read

  if (!inFile) return 0;              // OK?
    
  inFile &gt;&gt; _nextpt;                  // number of points
  for (int ix = 0 ; ix &lt; _nextpt ; ++ix)  // read the points
    {
      inFile &gt;&gt; _pt[ix].x &gt;&gt; _pt[ix].y &gt;&gt; r &gt;&gt; g &gt;&gt; b
          &gt;&gt; _pt[ix].pPen.penWidth &gt;&gt; ps;
        _pt[ix].pPen.penColor.Set(r,g,b); // can't read directly
        _pt[ix].pPen.penStyle = (PenStyle) ps;
    }
  inFile.close();                     // finished with file
  return 1;
}

//==================&gt;&gt;&gt; myCanvasPane::Save &lt;&lt;&lt;====================
int myCanvasPane::Save(char* name)
{
  // Save drawing to a file of points

  if (!name || !*name) return 0;      // sanity check
  ofstream outFile(name);             // open output file

  if (!outFile) return 0;             // OK?

  outFile &lt;&lt; _nextpt &lt;&lt; endl;         // number of points
  for (int ix = 0 ; ix &lt; _nextpt ; ++ix) // write the points
    {
      outFile &lt;&lt; _pt[ix].x &lt;&lt; " " &lt;&lt; _pt[ix].y &lt;&lt; " "
              &lt;&lt; _pt[ix].pPen.penColor.r() &lt;&lt; " "
              &lt;&lt; _pt[ix].pPen.penColor.g() &lt;&lt; " "
              &lt;&lt; _pt[ix].pPen.penColor.b() &lt;&lt; " "
              &lt;&lt; _pt[ix].pPen.penWidth &lt;&lt; " "
              &lt;&lt; _pt[ix].pPen.penStyle &lt;&lt; endl;
    }
  outFile.close();                    // done with file
  return 1;
}
//End of File
</pre>
</body></html>
