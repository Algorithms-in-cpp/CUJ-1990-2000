



<HTML><HEAD>

<TITLE>August 1996/Standard C/C++/Listing 2</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4>Listing 2:	The header &lt;numeric&gt;</h4>

<pre>

// numeric standard header
#ifndef _NUMERIC_
#define _NUMERIC_
///namespace std {
template&lt;class InIt, class T&gt;
    T accumulate(InIt first, InIt last, T val);
template&lt;class InIt, class T, class Binop&gt;
    T accumulate(InIt first, InIt last, T val, Binop binop);
template&lt;class InIt1, class InIt2, class T&gt;
    T inner_product(InIt1 first, InIt1 last, InIt2 x, T val);
template&lt;class InIt1, class InIt2, class T,
    class Binop1, class Binop2&gt;
    T inner_product(InIt1 first, InIt1 last, InIt2 x, T val,
        Binop1 binop1, Binop2 binop2);
template&lt;class InIt, class OutIt&gt;
    OutIt partial_sum(InIt first, InIt last, OutIt x);
template&lt;class InIt, class OutIt, class T&gt;
    OutIt _Partial_sum(InIt first, InIt last, OutIt x, T *);
template&lt;class InIt, class OutIt, class Binop&gt;
    OutIt partial_sum(InIt first, InIt last, OutIt x, Binop binop);
template&lt;class InIt, class OutIt, class Binop, class T&gt;
    OutIt _Partial_sum(InIt first, InIt last,
        OutIt x, Binop binop, T *);
template&lt;class InIt, class OutIt&gt;
    OutIt adjacent_difference(InIt first, InIt last, OutIt x);
template&lt;class InIt, class OutIt, class T&gt;
    OutIt _Adjacent_difference(InIt first, InIt last,
        OutIt x, T *);
template&lt;class InIt, class OutIt, class Binop&gt;
    OutIt adjacent_difference(InIt first, InIt last, OutIt x,
        Binop binop);
template&lt;class InIt, class OutIt, class Binop, class T&gt;
    OutIt _Adjacent_difference(InIt first, InIt last, OutIt x,
        Binop binop, T *);
///};    // end of namespace std
#endif /* _NUMERIC_ */
/* End of File */
</pre>
</body></html>
