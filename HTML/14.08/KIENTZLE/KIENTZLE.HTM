






<HTML>
     
     <HEAD>


          
          <TITLE>August 1996/Approximate Inverse Color Mapping</TITLE>
     </HEAD>
     
     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          
          <H2><A href="../tocaug.htm"><IMG src="../../toc.gif" ALT="Back to TOC" WIDTH="54" HEIGHT="54"></A>
          <FONT COLOR="#FF0000">Graphics</FONT></H2>
          
          <HR>
          
          <H2 ALIGN="CENTER"><FONT COLOR="#800000">Approximate Inverse Color
          Mapping</FONT></H2>
          
          <H3 ALIGN="CENTER"><FONT COLOR="#800000">Tim Kientzle</FONT></H3>
          
          <BLOCKQUOTE>
               
               <p> Here's a simple trick to speed
                    mapping a large set of colors onto a smaller pallette.</p></BLOCKQUOTE>
          <HR>
          <BLOCKQUOTE>
               
               <p>Color dithering and color quantization
                    are two common operations used in graphics programs. They
                    approximate high-resolution color on devices with limited
                    available colors. Both techniques require finding the
                    closest match to a given high-resolution color from some set
                    of available colors. Often this is done by computing an
                    inverse color map, a table listing every high-resolution 
                    color and its nearest match in the set. Unfortunately, the
                    size of these maps can be prohibitive, especially on
                    microcomputers, both because of the space needed to store
                    the table (17 million entries for 24-bit RGB) and the time
                    required to compute it. </p>
               
               <p> An alternative is to simply maintain
                    a list of available colors in the color map and search this
                    list for the closest match for each color in the image. This
                    process is reasonably efficient if you can assign a linear
                    order to all the colors in RGB space. Then you can search
                    for the closest match to a given color using a binary search
                    over an ordered list of available colors. </p>
               
               <p> Two colors can be considered close if
                    they match in the most significant bits of their color
                    components. The following ordering technique corresponds to
                    this definition of "close:" interleave the bits of
                    an RGB color tuple into a single integer value. For example,
                    if there are eight bits in each color component, then the
                    color tuple</p>

<PRE>
(r<SUB>7</SUB> ... r<SUB>0</SUB>, g<SUB>7</SUB> ... g<SUB>0</SUB>, b<SUB>7</SUB> ... b<SUB>0</SUB>)
</PRE>
               
               <p>becomes a 24-bit integer</p>
<PRE>
r<SUB>7</SUB>g<SUB>7</SUB>b<SUB>7</SUB>r<SUB>6</SUB>g<SUB>6</SUB>b<SUB>6</SUB> ... r<SUB>1</SUB>g<SUB>1</SUB>b<SUB>1</SUB>r<SUB>0</SUB>g<SUB>0</SUB>b<SUB>0</SUB>.
</PRE>
               
               <p>This interleaving scheme is also
                    illustrated by <A href="kientf1.htm">Figure 1</a>,
 in
                    steps 1 and 2.</p>
               
               <p>Red bits have highest significance in
                    the new integer, followed by green, then blue. This is
                    because human eyesight is more sensitive to variations in
                    red than in green, and more sensitive to changes in green
                    than in blue.<A href="kientl1.htm"> Listing 1</a>
shows
                    sample code to do the interleaving. </p>
               
               <p> You still need to produce a color
                    map, but now it can be much smaller, since it contains
                    entries only for colors that can be displayed by your
                    hardware. Convert all the colors your hardware can display
                    to 24-bit interleaved format, and store them in numeric
                    order in the map. Figure 1 shows a hypothetical map of 16
                    colors. The left side of the map contains the "keys"
                    in interleaved format; the right side contains the
                    corresponding "data" that must be sent to the
                    display. </p>
               
               <p> By representing colors in this
                    fashion, you can do a quick binary search of the map using
                    integer arithmetic to find the nearest color match. While
                    not as accurate as methods that generate an inverse color
                    map, this method is reasonably fast and requires
                    significantly less memory than those methods.</p>
               
               <H4><FONT COLOR="#000080">References</FONT></H4>
               
               
               <p>Clifford A. Shaffer. "Bit
                    Interleaving for Quad- or Octrees," in Graphics Gems,
                    edited by Andrew S. Glassner, pp. 443-445. (Academic Press,
                    1990). </p>
               
               <p> Spencer W. Thomas. "Efficient
                    Inverse Color Map Computation," in Graphics Gems II,
                    edited by James Arvo, pp. 116-125. (Academic Press, 1991).</p>
               
               <p><I>Tim Kientzle works as a technical
                    editor for Dr. Dobbs Journal. He has a Ph.D. in mathematics
                    from the University of California at Berkeley. He is author
                    of The Working Programmer's Guide to Serial Protocols, and
                    Internet File Formats (both published by Coriolis Group). He
                    can be contacted at kientzle@netcom.com.</I></p>
               </FONT>

<h4><a href="../../../source/1996/aug96/kientzle.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
     </BODY>
</HTML>
