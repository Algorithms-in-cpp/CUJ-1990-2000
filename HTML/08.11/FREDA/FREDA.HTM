


<HTML>
<HEAD>

<TITLE>November 1990/UNIX Interprocess Communications</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocnov.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Operating Systems</FONT></H2>

<hr><h2 align="center"><font color="#800000">UNIX Interprocess Communications<A name="0243_0146"><A name="0243_0146"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0243_0000"><A name="0243_0000">William J. Freda</font></h3><hr><blockquote><P>
<P><i><A name="0243_0000"><A name="0243_0000">William J. Freda is a senior consultant with<I></I> <I></I>Automated Concepts Inc. Specializing in UNIX/C applications in a relational database environment, William has had a variety of assignments throughout<I></I> <I></I>AT&amp;T and Bell Laboratories. You can reach him at 90<I></I> <I></I>Woodbridge Center Drive, Woodbridge, N.J.<I></I> <I></I>07095, (201) 602-0200</i></P><P>
Interprocess Communication (IPC) enables two or more processes to exchange information, share data, and synchronize execution. The basic interprocess communications facilities are signals, pipes, and named pipes. The more advanced facilities are semaphores, shared memory, and message queues. In this article, I describe each with corresponding advantages and disadvantages.<P>
<h4><FONT COLOR="#000080"><A name="0243_0147">Signals<A name="0243_0147"></FONT></h4></P>
Signals are sent to processes when a particular event occurs or when some type of unrecoverable error occurs. Typically, user processes will trap most of these signals to perform some clean-up work before exiting the program. User processes can also send signals to each other via the <I>kill</I> <I>(2)</I> system call, but this is limited to descendants, or children, of the original proccess and to the superuser.</FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0243_0148">Pipes<A name="0243_0148"></FONT></h4></P>
A pipe is a unidirectional communication channel open between a parent and child process. A process can open a pipe to another process for reading or writing but not both. This limitation makes pipes unsuitable for processes that need to communicate bidirectionally.<P>
<h4><FONT COLOR="#000080"><A name="0243_0149">Named Pipes<A name="0243_0149"></FONT></h4></P>
A named pipe is a FIFO (first in, first out) file. One process writes into the named pipe and the second process reads it. Since a named pipe is a regular file, its access permission can be set to allow all to use it. Thus, a named pipe is not limited to parent and child processes. One disadvantage of named pipes is that user processes can't be selective about what type of information they want to read from the pipe. In other words, if you were looking for a particular record in a named pipe, you would have to sequentially read the pipe until you found the record. Once information is read from a named pipe it is lost. In adddition, only one process should have a named pipe open ffor reading at a time. If more than one process has a named pipe open, the kernel will effectively toggle between the processes, giving one process one record, the second process the next record and so on.<P>
<h4><FONT COLOR="#000080"><A name="0243_014A">Semaphores<A name="0243_014A"></FONT></h4></P>
Semaphores enable processes to synchronize execution. A semaphore is a positive integer that supports two possible operations: <I>P</I> and <I>V</I>. The P operation decrements the value of a semaphore, the <I>V</I> operation increments it. The semaphore's value must always be greater than or equal to <I>0</I>. If a process attempts to decrement the semaphore's value with a <I>P</I> operation when its value is <I>0</I>, the kernel puts the process to sleep until the operation can complete successfully. Semaphores have the following advantages over signals:</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<UL><li>Any process can use a semaphore as long as the permissions are set accordingly.</li>
<li>A process can postpone execution until a semaphore reaches a certain value.</li>
<li>Processes can perform operations on more than one semaphore at a time. If all operations cannot be performed simultaneously, none are performed.</li></UL>
<h4><FONT COLOR="#000080"><A name="0243_014B">Shared Memory<A name="0243_014B"></FONT></h4></P>
Shared memory enables processes to attach a common data area to share information. Once attached, the shared memory segment can be accessed the same way you access a memory block obtained from <I>malloc(3C)</I>. Typically, you use a semaphore to ensure that only one proccess at a time writes to shared memory.</FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0243_014C">Message Queues<A name="0243_014C"></FONT></h4></P>
A message queue enables two or more processes to exchange information. Message queues have some advantages over pipes and named pipes:<P>
<UL><li>Any process can use a message queue as long as the permissions are set accordingly.</li>
<li>A message queue is a bidirectional communication channel. Processes can send and receive messages over the same message queue.</li>
<li>Processes can select a particular message type without having to sequentially read each message.</li></UL>
These IPC facilities are beneficial because they enable you to split tasks among multiple processes. Say, for example, that you have an application that reads records from a tape, validates them, then updates several tables in the database. Using the IPC facilities, you can split the application into two separate processes: one that reads and validates records from the tape and one that updates the database. With this scheme, the second process updates the database while the first process reads and validates the next record. If this could cut processing time by 1 percent with 100,000 records on a tape (10ms per record), the net reduction in processing time would be 1,000 seconds, or 16 minutes and 40 seconds.<P>
A message queue enables two or moe processes to exchange information, ranging from a simple character string to an array of C structures.<P>
Before a process can send or receive messages, it must obtain a message queue identifier (<I>msqid</I>) from the UNIX kernel. The <I>msqid</I>, which is similar to a file descriptor, is basically an index into a set of kernel tables. The <I>msgget (2)</I> system call is used for this purpose (see <A href="list1.htm">Listing 1</a>)
.</FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0243_014D">Synopsis<A name="0243_014D"></FONT></h4></P>
<pre>#include &lt;sys/types.h&gt;
#include &lt;sys/ipc.h&gt;
#include &lt;sys/msg.h&gt;
#include &lt;errno.h&gt;
int msgget(key, msgflg)
key_t key; int msgflg;</pre>
<h4><FONT COLOR="#000080"><A name="0243_014E">Argument Description<A name="0243_014E"></FONT></h4></P>
<I>key</I> is a user-chosen name for a message queue. If key is set equal to <I>IPC_PRIVATE</I>, it informs the kernel that this is a private message queue. Private message queues are known only to the calling process and any child processes. This is roughly equivalent to opening a bidirectional pipe between two processes.</FONT></FONT></FONT></FONT><P>
<I>msgflg</I> is an integer value that contains the access permissions of the message queue <I>OR</I>ed with the control flags <I>IPC_CREAT</I> and/or <I>IPC_EXCL</I>. The access permissions for a message queue are similar to the access permission for a regular file. The <I>IPC_CREAT</I> control flag instructs <I>msgget()</I> to create a message queue if one doesn't already exist. The <I>IPC_EXCL</I> control flag is used with <I>IPC_CREAT</I> to ensure that a new message queue is created and to return an error if one already exists.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Upon successful completion, <I>msgget()</I> returns a message queue identifier. Otherwise, <I>msgget()</I> returns <I>-1</I> and places the error number in the external integer <I>errno</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0243_014F">Possible Errors<A name="0243_014F"></FONT></h4></P>
<I>EACCES</I> &#151; A message queue identifier already exists for <I>key</I>, but access permission is denied to this process.</FONT></FONT></FONT></FONT><P>
<I>ENOENT</I> &#151; The message queue needs to be created but <I>msgflg</I> did not contain <I>IPC_CREAT</I>.</FONT></FONT></FONT></FONT></FONT></FONT><P>
<I>ENOSPC</I> &#151; The maximum number of message queues system wide has been reached. This error rarely occurs.</FONT></FONT><P>
<I>EEXIST</I> &#151; A message queue identifier already exists for <I>key</I>. This occurs when <I>msgflg</I> contained <I>IPC_CREAT IPC_EXCL</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The example in <A href="list1.htm">Listing 1</a>
creates a (possible existing) message queue with owner and group read/write permission. The example in <A href="list2.htm">Listing 2</a>
creates a new message queue with owner and group read/write permission. It also notifies the user with an appropriate error message if the message queue already exists.<P>
<h4><FONT COLOR="#000080"><A name="0243_0150">Message Queue Operations<A name="0243_0150"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0243_0151">Sending Messages<A name="0243_0151"></FONT></h4></P>
Sending messages is accomplished using the <I>msgsnd(2</I>) system call.</FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0243_0152">Synopsis<A name="0243_0152"></FONT></h4></P>
<pre>#include &lt;sys/types.h&gt;
#include &lt;sys/ipc.h&gt;
#include &lt;sys/msg.h&gt;
#include &lt;errno.h&gt;

int msgsnd(msqid, msgp, msgsz, msglf)
int msqid;
struct mssg *msgp;
int msgsz, msgflg;</pre>
<h4><FONT COLOR="#000080"><A name="0243_0153">Argument Description<A name="0243_0153"></FONT></h4></P>
<I>msqid</I> is a message queue identifier obtained from a previous call to <I>msgget(2). msgp</I> is a pointer to a user-defined structure:</FONT></FONT></FONT></FONT><P>
<pre>struct mssg {
long mtype; /* Message type */
char mtext[LENGTH]; /* Message text */
   }</pre>
<I>mtype</I> &#151; Can be used to assisn the message a particular type or classification. The receiving process uses <I>mtype</I> to select a particular message on queue without having to sequentially read each message.</FONT></FONT></FONT></FONT><P>
<I>mtext</I> &#151; The text of the message. <I>LENGTH</I> is any size your application requires up to a system-defined maximum.</FONT></FONT></FONT></FONT><P>
<I>msgsz</I> &#151; The length of the message contained in <I>mtext</I>.</FONT></FONT></FONT></FONT><P>
<I>msgflg</I> &#151; A control flag that contains either <I>0</I> or <I>IPC_NOWAIT</I>. If the message queue is full, the kernel will normally put the process to sleep until the message queue has sufficient room to place the message.</FONT></FONT></FONT></FONT></FONT></FONT><P>
The <I>IPC_NOWAIT</I> control flag disables this feature, and <I>msgsnd()</I> returns immediately if the message queue is full.</FONT></FONT></FONT></FONT><P>
Upon successful completion, <I>msgsnd()</I> returns <I>0</I>. Otherwise, <I>msgsnd()</I> returns <I>-1</I> and places the error number in the external integer <I>errno</I>. See the example in <A href="list3.htm">Listing 3</a>.
</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0243_0154">Possible Errors<A name="0243_0154"></FONT></h4></P>
<I>EINVAL</I></FONT><P>
1) <I>Msqid</I> is an invalid message queue identifier</FONT></FONT><P>
2) <I>Mtype</I> is less than <I>1</I></FONT></FONT></FONT><P>
3) <I>Msgsz</I> is less than <I>0 </I>or greater than the system limit</FONT></FONT></FONT></FONT><P>
<I>EACCESS</I> &#151; Access permission denied.</FONT></FONT><P>
<I>EAGAIN</I> &#151; The message queue is full. this only happens when <I>msgflg </I>contains <I>IPC_NOWAIT.</I></FONT></FONT></FONT></FONT></FONT><P>
<I>EFAULT</I> &#151; Only a program bug can cause this error. <I>Msgp</I> points to an illegal address.</FONT></FONT></FONT></FONT><P>
<I>EINTR</I> &#151; The process was asleep waiting to send a message and an interrupt occurred.</FONT></FONT><P>
<I>EIDRM </I>&#151; The process was asleep waiting to send a message and someone removed the message queue from the system.</FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0243_0155">Receiving Messages<A name="0243_0155"></FONT></h4></P>
Receiving messages is accomplished using the <I>msgrcv(2) </I>system call. See the example in <A href="list4.htm">Listing 4</a>.
</FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0243_0156">Synopsis<A name="0243_0156"></FONT></h4></P>
<pre>#include &lt;sys/types.h&gt;
#include &lt;sys/ipc.h&gt;
#include &lt;sys/msg.h&gt;
#include &lt;errno.h&gt;
int msgrcv(mspid, msgp, msgsz,
          msgtyp, msgflg)
int msqid;
struct mssg *msgp;
int msgsz;
long msgtyp;
int msgflg;</pre>
<h4><FONT COLOR="#000080"><A name="0243_0157">Argument Description<A name="0243_0157"></FONT></h4></P>
<I>msqid </I>&#151; A message queue identifier obtained from a previous call to <I>msgget (2)</I> .</FONT></FONT></FONT></FONT><P>
<I>msgp </I>&#151; A pointer to the user-defined structure described above.</FONT></FONT><P>
<I>msgsz &#151; </I>The length of the message buffer <I>mtext</I>. This prevents the kernel from inadvertently overwriting the buffer.</FONT></FONT></FONT></FONT><P>
<I>msgtyp </I>&#151; A particular message type you wish to receive. If it contains <I>0</I> the first message on the message queue is returned regardless of the message type.</FONT></FONT></FONT></FONT><P>
<I>msgflg &#151; </I>A control flag that contains either <I>0</I>,<I> IPCC_NOWAIT</I>,<I> MSG_NOERROR</I> , o r <I>IPC_NOWAIT OR</I>ed<I> </I>with <I>MSG_NOERROR</I>. The kernel will normally put the process to sleep if the message queue is empty or there is no message of <I>msgtyp </I>currently on queue. The <I>IPC_NOWAIT </I>control flag disables this feature and causes <I>msgrcv()</I> to return immediately. If the message is too long, <I>msgrcv() </I>will normally return an error. The <I>MSG_NOERROR</I> control flag disables this feature and <I>msgrcv() </I>will silently truncate any message that is too long.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Upon successful completion, <I>msgrcv() </I>returns the number of bytes places in <I>mtext</I>. Otherwise, <I>msgrcv() </I>returns <I>-1</I> and places the error number in the external integer <I>errno.</I></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0243_0158">Possible Errors<A name="0243_0158"></FONT></h4></P>
<I>EINVAL</I></FONT><P>
1) <I>Msqid</I> is an invalid message queue identifier</FONT></FONT><P>
2) <I>Msgsz</I> is less than <I>0</I></FONT></FONT></FONT><P>
<I>EACCESS </I>&#151; Access permission denied.</FONT></FONT><P>
<I>E2BIG </I>&#151; The message on queue is longer than <I>msgsz</I>. This error is not returned if <I>msgflg</I> contains <I>MSG_NOERROR</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<I>ENOMSG </I>&#151; There is no message of the desired type on queue. This only happens when <I>msgflag</I> contains <I>IPC_NOWAIT</I>.</FONT></FONT></FONT></FONT></FONT></FONT><P>
<I>EFAULT</I> &#151; Only a program bug can cause this error. <I>Msgp</I> points to an illegal address.</FONT></FONT></FONT></FONT><P>
<I>EINTR </I>&#151; The process was asleep waiting to receive a message and an interrupt occurred.</FONT></FONT><P>
<I>EIDRM</I> &#151; The process was asleep waiting to receive a message and someone removed the message queue from the system.</FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0243_0159">Controlling Message Queues<A name="0243_0159"></FONT></h4></P>
In addition to sending and receiving messages, your application may need to exercise some degree of control over a message queue. The <I>msgctl(2)</I> system call is used for this purpose. It performs the following functions:</FONT></FONT><P>
<UL><li>It enables the owner of the message queue to cchange the access permissions or remove the message queue from the system.</li>
<li>It also enables anyone with read permission to gather statistics that detail:<br>
1) The process id of the last process that sent a message.<br>
2) The date and time the last message was sent.<br>
3) The process id of the last process that received a message.<br>
4) The date and time the last message was received.<br>
5) The number of messages currently on queue.<br>
6) The total number of bytes on queue.</li></UL>
<h4><FONT COLOR="#000080"><A name="0243_015A">Synopsis<A name="0243_015A"></FONT></h4></P>
<pre>#include &lt;sys/types.h&gt;
#include &lt;sys/ipc.h&gt;
#include &lt;sys/msg.h&gt;
#include &lt;errno.h&gt;

int msgctl (msqid, cmd, buf)
int msqid, cmd;
struct msqid_)ds *buf;</pre>
<h4><FONT COLOR="#000080"><A name="0243_015B">Argument Description<A name="0243_015B"></FONT></h4></P>
<I>msqid</I> &#151; A message queue identifier obtained from a previous call to <I>msgget</I> <I>(2)</I>.</FONT></FONT></FONT></FONT><P>
<I>cmd</I> &#151; One of the following commands:</FONT></FONT><P>
<I>IPC_STAT</I> &#151; Gather statistics as detailed above.</FONT></FONT><P>
<I>IPC_SET</I> &#151; Change the access permissions.</FONT></FONT><P>
<I>IPC_RMID</I> &#151; Remove the message queue from the system.</FONT></FONT><P>
Upon successful completion, <I>msgctl()</I> returns <I>0</I>. Otherwise <I>msgctl()</I> returns <I>-1</I> and places the error number in the external integer <I>errno</I><I>.</I></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0243_015C">Possible Errors<A name="0243_015C"></FONT></h4></P>
<I>EINVAL</I></FONT><P>
1) <I>Msqid</I> is an invalid message queue identifier</FONT></FONT><P>
2) <I>Cmd</I> is an invalid command</FONT></FONT><P>
<I>EACCESS </I>&#151; Access permissions denied.</FONT></FONT><P>
<I>EPERM</I> &#151; This error occurs whenever <I>cmd</I> is <I>IPC_SET</I> or <I>IPC_RMID</I> and someone other than the owner or the super-user is attempting to change the access permissions or remove the message queue.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<I>EFAULT</I> &#151; Only a program bug can cause this error. Buf points to an illegal address.</FONT></FONT><P>
Quite frankly, the only facility of <I>msgctl()</I> that I have found useful is <I>IPC_RMID</I>, whicch removes a message queue from the system (see <A href="list5.htm">Listing 5</a>)
. If I want detailed information about a message queue or any other <I>IPC</I> <I>facility</I>, I use the UNIX <I>ipcs</I> command, which dumps out the statistics described above.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The sample program in <A href="list6.htm">Listing 6</a>
could easily fit into a number of different applications. With this program, users can send one-line messages to each other. The <I>sen_mssg()</I> function prompts the user to enter the login name of the user to which he or she wants to send a message. <I>send_mssg()</I> then extracts the UNIX userid by querying the password file using the library function <I>getpwent (3C)</I>. The message is then inserted into the message queue via <I>msgsnd(2)</I> with the message type set equal to the userid.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Placing calls to <I>recv_mssg()</I> in different areas of the application gives the users the illusion that the message has been received in near realtime. The call to <I>msgrcv</I><I>(2)</I> <I>uses the</I> <I>IPCC_NOWAIT</I> control flag and will return immediately to the caller if no message is on queue.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0243_015D">Summary<A name="0243_015D"></FONT></h4></P>
Message queues allow multiple processes to exchange information bidirectionally. Since a message queue is a UNIX kernel data structure and thus part of the operating system, this information is passed between processes without the need for any disk I/O. In addition, processes can select a particular message type without having to sequentially read each message. message queues eliminate the need for consuming processor cycles polling for a particilar message to arrive. The UNIX kernel takes care of this for you by putting your process to sleep and waking it when the message arrives.<P>
By recognizing areas in an application where tasks could be performed concurrently, IPC facilities such as message queues allow you to perform the most work in the least amount of time.<P>

<h4><a href="../../../source/1990/nov90/freda.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
