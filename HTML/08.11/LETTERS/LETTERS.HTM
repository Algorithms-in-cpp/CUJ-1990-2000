


<HTML>
<HEAD>

<TITLE>November 1990/We Have Mail</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocnov.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Departments</FONT></H2>

<hr><h2 align="center"><font color="#800000">We Have Mail<A name="026E_0160"><A name="026E_0160"></font></h2><hr>
<BLOCKQUOTE>
<A name="026E_0000"><A name="026E_0000">Dear Robert:<P>
I was pleased to see Bob Withers' article on "Unnamed Pipes," and the example program <I>ROUTEMSG</I>, published in the July 1990 issue. This is the first public domain software I have seen for OS/2 and I think some points are worth noting:</FONT></FONT><P>
<UL><li>OS/2 offers functionality not easily available in DOS.</li>
<li>Availability of, and magazines being prepared to publish, PD software represent a form of 'coming of age' for an operating system.</li>
<li>It will require many thousands of man hours before OS/2 is as thoroughly understood as DOS. A few programmers are riding their first bicycles around the OS/2 API.</li></UL>
Bob presented a clever program which achieves the rare status of being both technically innovative and genuinely useful. More on OS/2 please.<P>
Yours faithfully,<P>
Richard Howells<br>
Farmarsh House, Cotmarsh,<br>
Broad Town, Swindon,<br>
SN4 7RA,<br>
United Kingdom<P>
<I>I think your appraisal that "a few programmers are riding their bikes around the OS/2 API" is right on target. Our most recent surveys indicate that most programmers are not yet ready to take the OS/2 leap. As more working programmers begin to mount the learning curve, we'll run more OS/2 coverage. &#151; rlw</I><P>
Dear Mr. Ward,<P>
Regarding David Grey Stahl's letter in the August 1990 issue of <I>The</I> <I>C User's Journal</I>, I would like to offer some information which might help clarify some things.<P>
Unfortunately, I don't use MSC, but I did spend the better part of a day investigating how Turbo C handles its <I>malloc()</I><I> </I>and<I> </I><I>free()</I> routines. I went to the heart of the matter by single stepping through some <I>malloc()</I> and <I>free()</I> calls using Turbo Debugger. Perhaps Mr. Stahl or another MSC user could do the same with Code View.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The first thing to note is that each <I>malloc()</I> ed block of memory is immediately preceded by a bookkeeping header. In the small data memory models, this consists of a <I>near</I> pointer and an unsigned integer, for a total of four bytes. In the large data models, this is a <I>far</I> pointer and an <I>unsigned long</I><I>, </I>for a total of eight bytes. The pointer points to the preceding contiguous block of memory, and the <I>unsigned</I><I> </I>holds the size of the block, as well as a bit indicating whether the block is free or allocated.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
In small data models, see <A href="fig1.htm">Figure 1</a>.
 These values must be addressable in the segment, so the maximum usable data in a segment is limited by the <I>size.e</I> of the overhead block. There is also another limitation. To ensure that a pointer returned by <I>malloc()</I> is aligned to hold any structure, as well as to make the whole memory allocation more efficient, memory is allocated in blocks of eight in small data models, and in blocks of 16 in large data models. From now on, I will talk about small data models, but the same holds true in large data models. Simply substitute the proper sizes.</FONT></FONT></FONT></FONT><P>
A request for one byte is really a request for five bytes when the header is included. The next larger blocksize is eight, so you are returned a block of eight bytes. A request for two bytes (really six) also results in the allocation of an eight-byte block. A request for five bytes is really asking for nine bytes, resulting in the allocation of 16 bytes.<P>
Since <I>malloc()</I><I> </I>takes an argument of type size <I>t</I>, and size<I> t</I> is <I>typedef</I>ed to <I>unsigned int</I><I>,</I> the maximum requestable size is 65535 bytes. Out of a possible 65535 bytes, it is clear that seven bytes cannot be allocated (65535 == 8191 * 8 + 7). Also, out of the 65528 available bytes, we lose four to the header, bringing us to a grand total of 65524 usable data bytes. This number drops to 65512 in large data models (65535 = = 4095*16 + 15, so 65520 available, less eight bytes header overhead).</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Unfortunately, requests for sizes in the limbo range above the maximum usable size but below 65535 can succeed, but are obviously not safe to use. The data starts four bytes into the segment, and trying to address the high bytes can lead to segment wrap-around &#151; a very dangerous prospect, since writing to a wrapped address will surely destroy the header information, and the system will likely crash on the next <I>malloc()</I><I> </I>or<I> </I><I>free()</I>.</FONT></FONT></FONT><P>
The maintenance of the heap is actually very clever, while at the same time very simple. The runtime library has three pointers it uses to maintain the doubly-linked list of memory blocks: <I>first</I><I>, </I><I>last</I><I>,</I> and <I>rover. first</I> points to the first allocated block, <I>last</I> points to the last allocated block, and <I>rover </I>points to the first freed block. I did say that the list was <I>doubly</I>-linked. The header contains a pointer to the previous block. But it also contains the size of the block. Knowing the address and the size of a structure, we can easily obtain the address of the memory which follows it by simply adding the base address and the size.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
But what about the flag value? Well, if you recall that blocks are allocated in blocks of size <I>8</I>, it should be clear that the three low-order bits of the size will not be used. Turbo C uses the low-order bit as a flag indicating whether the block is allocated or free. It simply sets the bit at allocation, and resets it to <I>0 </I>when the block is freed. It masks off the bit to correctly calculate addresses. When <I>malloc()</I> receives a request the following happens:</FONT></FONT></FONT></FONT><P>
1. If the size of the request, <I>n</I><I>,</I> is <I>0</I><I>, </I>return <I>NULL</I><I>.</I></FONT></FONT></FONT></FONT></FONT><P>
2. Determine the proper allocation size by adding 12 and <I>and</I>ing off three low bits. for example, let <I>n</I><I> = </I><I>21</I> or <I>0x0015</I><I>.</I> Add <I>12</I><I>, </I><I>0x0015</I><I> + </I><I>0x000C</I> = <I>0x0021</I><I>.</I> And off low-order bits, <I>0x0021</I><I> &amp; </I><I>0xFFF8</I><I> = </I><I>0x0020</I><I>.</I> So, we will need to get 32 bytes.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
3. Attempt to allocate the memory. If <I>rover</I> is <I>NULL,</I> we simply see if we can increase the heap. If we can, we do so, and set the block's prev-pointer to <I>last</I><I> </I>(the old heap top). Then we set <I>last to point</I> to the new heap top. If <I>rover</I><I> </I>is not <I>NULL,</I> there are freed blocks to investigate. Starting at the block pointed to by <I>rover</I><I>,</I> we walk the list of blocks until we find a free block large enough to hold the request. This block is divied up, and we use part of it while the rest goes back as free memory. If no freed blocks are large enough, we fall back and try to expand the heap as described above. The <I>prev</I>-pointers and <I>size/flag</I> bytes of all blocks involved are adjusted as necessary.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
If after all this we cannot get the memory we return <I>NULL,</I> otherwise we return the address of the allocated block's data area.</FONT></FONT><P>
A call to <I>free()</I> is a little simpler.</FONT></FONT><P>
1. If we try to free <I>NULL,</I> simply return.</FONT></FONT><P>
2. Mark the block as freed by resetting the flag bit.<P>
3. If the block following this block is marked as freed, add its size to the size of the current block.<P>
4. If the block preceding this block (via the <I>prev-ptr</I> in the header) is marked as freed, add the size of the current block to the preceding block.</FONT></FONT><P>
5. If the resultant block is below the block pointed to by <I>rover</I> in the heap, make <I>rover</I> point to the resultant block.</FONT></FONT></FONT></FONT><P>
In Turbo C there are memory models which have both <I>near</I> and <I>far</I><I> </I>heaps, and the above is duplicated. That is, there is a doubly-linked list of block in the <I>near </I>heap, and a second, separate list of blocks in the <I>far</I> heap. Calls to <I>malloc()</I> result in <I>near</I> heap blocks, and calls to <I>farmalloc()</I> result in <I>far </I>heap blocks. In the compact, large, and huge models, all blocks come from the <I>far</I> heap, with calls to <I>malloc()</I> being re-routed through <I>formalloc()</I><I>.</I> TurboC uses the variables <I>first</I><I>, </I><I>last</I><I>,</I> and <I>rover</I> to maintain the <I>near</I><I> </I>heap, and <I>firs</I><I>t, </I><I>last</I><I>,</I> and <I>rover</I> to maintain the <I>far</I> heap.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
While all of this is specific to TurboC, I am confident that Microsoft employs a similar scheme.<P>
In closing, I'd like to say that although the segmented Intel architecture makes pointers and dynamic memory management tricky, there are a few caveats worth remembering. Most important among these is understanding what the compiler is doing. This includes knowing the effects of the memory model in use, the limitations of operand sizes and sizes of intermediate results, and the results of the standard type conversions. Nearly every time someone says that there is a bug in the compiler or the libraries, it can be tracked down to the programmer not being aware of what he or she is really asking the compiler to do.<P>
Sincerely,<P>
Michael S. Percy<br>
420 Gallo Way<br>
<I>grimlok@hubcap.clemson.edu</I></FONT><P>
<I>Rather than guess, how about we let Microsoft explain it. See the next letter please. &#151; rlw</I><P>
Dear Mr. Ward:<P>
First off, let me congratulate you on a fine magazine, one that I read with great interest each month.<P>
I am writing in response to the letters you published from Jim Schimandle (February 1990) and David Grey Stahl (August 1990), regarding the behavior of <I>malloc</I> in a large model Microsoft C5. 1 program (also applicable to Microsoft C6.0).</FONT></FONT><P>
The Microsoft C heap manager uses a sub-allocation scheme to minimize the number of calls made to DOS for memory, because getting memory from DOS is relatively slow. When <I>malloc</I> is first called, the heap manager asks DOS for an initial amount of heap space that is typically (for small blocks) much larger than the amount requested. Subsequent <I>malloc</I> calls are allocated out of this extra space, until it is exhausted. Then DOS must be called again to grow the segment. When the heap manager grows a segment, it rounds up the amount required to the next larger multiple of the global variable _<I>amblksiz</I><I> </I>whose default value is 8K. When the segment can no longer be grown, a fresh segment is requested from DOS, and the process continues. This is described on page 33 of the Microsoft C5.1 Runtime Library Reference (and in the Microsoft C6.0 online help).</FONT></FONT></FONT></FONT></FONT></FONT><P>
Mr. Schimandle's program allocates a series of 48,000 byte blocks. On the first call to <I>malloc</I>, a segment of 48K bytes is requested from DOS. On the second call to <I>malloc</I>, the heap manager sees that it cannot grow the segment to accommodate the second request because 48K + 48K is greater than 64K, the maximum size of a segment. Hence, it must request a new segment of 48K bytes from DOS. This continues until memory is exhausted. The program then calls <I>free</I> to return these blocks to the heap manager.</FONT></FONT></FONT></FONT></FONT></FONT><P>
The second half of Mr. Schimandle's program now tries to allocate a series of 60,000 byte blocks. The heap manager finds that none of the segments it owns are large enough to satisfy the request and none of them can be grown (except possibly the last one). Accordingly, it asks DOS for a new 60K segment. But DOS does not have a segment this large left to give, and so the request fails.<P>
If a program's memory requests are all large, then it may very well be reasonable to go to DOS directly for every allocation and free. The Microsoft C runtime library provides two ways to do this:<P>
1. Replace the calls to <I>malloc </I>and <I>free</I> with calls to <I>_dos_allocmem </I>and<I> </I><I>_dos_freemem.</I></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
2. Include <I>malloc.h</I> and replace the calls to <I>malloc</I> and <I>free</I> with calls to <I>halloc</I> and <I>hfree</I>. These calls have somewhat more overhead because they are designed for allocations of greater than 64K.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
In Microsoft C6.0, the program could call <I>_heapmin</I> before the second series of calls to <I>malloc</I>. The call to <I>heapmin</I> would cause the heap manager to scan all of its segments and return to DOS those that do not contain allocated blocks.</FONT></FONT></FONT></FONT></FONT></FONT><P>
As Mr. Stahl points out in his letter, the mechanism used by <I>malloc</I> is a compromise between speed and fragmentation. I hope this will help shed some light on the subject.</FONT></FONT><P>
Sincerely,<P>
Richard Gillmann<br>
Utilities Group Development Manager<br>
Microsoft Corporation<br>
One Microsoft Way<br>
Redmond, WA 98052<P>
<I>I greatly appreciate your response. It's nice to know the compiler vendors are watching and that they're willing to share important information about their products with the programmers who depend upon them. &#151; rlw</I><P>
Dear Sir:<P>
In testing Rex Jaeschke's assertion that there is no such thing as a negative constant in C ("Operators And The Precedence Table," <I>C Users Journal</I>, August, 1990) I find that the code generated by one compiler yields the size of an <I>int</I> when asked for <I>sizeof(</I><I></I>--<I>32768</I>) and that the code coughed out by a competing compiler returns the size of a <I>long</I>. With either compiler, constants more negative than <I><FONT FACE="CG Times (W1)" SIZE=2></I>--<I>32768 </I>are tagged as <I>long</I>s and those less negative but still less positive than <I>+32768 </I>are sized as <I>ints</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
This seems to mean that the compiler that is capable of storing <I><FONT FACE="CG Times (W1)" SIZE=2></I>--<I>32768</I> in an <I>int</I>-sized object is indeed using a signed format to store the constant. Rex's comment therefore leads me to ask whether this behavior is just an unusual practice in C or whether it constitutes a violation of the ANSI Standard.</FONT></FONT></FONT></FONT></FONT><P>
Although this side issue proved to be interesting, the exposition of the precedence table in the article was quite valuable to me and I look forward to future columns by Doctor C.<P>
Sincerely,<P>
Maynard A. Wright<br>
6930 Enright Drive<br>
Citrus Heights, CA 95621<P>
<FONT FACE="CG Times (W1)" SIZE=2>--32768 must be long by ANSI rules.&#151; pjp</FONT></FONT><P>
Dear Mr. Ward:<P>
I would like to offer some comments on the code presented in Mr. Felice's CCITT Cyclical Redundancy Check article in your September issue. First, taking the complement of the CRC prior to swapping the bytes does nothing for the algorithm. Second, taking the complement destroys a very elegant and useful property of the algorithm. The property I am referring to allows that if the CRC of a buffer is appended to the buffer, the CRC of this new buffer will be <I>0</I>. This property is often used in communications hardware and software to easily check the integrity of data at intermediate points. Another handy change to the code presented would be to allow the CRC of a large chunk of data to be taken incrementally. This is easy enough to accomplish by adding a third parameter to the CRC call. This parameter is the starting constant for the first call. On subsequent calls one would pass in the CRC returned from the previous call. This is extremely handy on systems with limited memory or buffer space. I have enclosed a listing of my version of the algorithm, with examples showing the zero CRC property.<P>
I enjoy your magazine greatly and look forward to Dr. Plauger's term as editor. Keep up the good work.<P>
Sincerely<P>
David W. Boyd<br>
Sterline Software<br>
1404 Fort Crook Rd<br>
Bellevue, NE 68005<P>
Dear Dr. Plauger:<P>
Congratulations on your appointment as editor! It's a pleasure to read your "Standard C" column &#151; technical writing at its best.<P>
Last June I sent Kenneth Pugh the coding question that follows. No answer. I figure if anyone knows a solution you do. If you or an associate could help me out I would truly appreciate it:<P>
Using C library functions, how can I show on the screen the ASCII character for each of these seven control codes or hexadecimal values?<P>
<pre>BEL 07     CR 0d
BS 08      SUB la
HT 09      ESC lb
LF 0a</pre>
I want to display the seven characters the way printed charts picture them. But with printf(), for example, I beep, backspace, tab, etc. Help!<P>
Good luck on the new job!<P>
Sincerely,<P>
Dale Wharton<br>
2290 St-Antoine Street<br>
Montreal QC H3J 1A7<P>
<I>Thanks for your kind words. Here are two ways to make nonprinting characters printable. The first is more robust, since it replaces any nonprinting character with a printable alternative. You must be content with a (suitably delimited) hexadecimal alternative:</I><P>
<pre>void printx(int c) {

   printf(isprint(c) ? "%c" : "[%.2x]", c); }</pre>
<I>If you want to print the names of certain control characters, as your letter indicates, you have to enumerate them:</I><P>
<pre>void printxxx(int c) {
   static char esc[] =
       "\a\b\t\n\ r\x1a\x1b";
   static char prt[] =
"BEL\0BS\0\0HT\0\0LF\0\0CR\0\0SUB\0ESC";

   char *s = strchr(esc, c);

   if (s)
      printf(" [%s] ", prt [4*(s-prt)]);
   else
      printf("%c", c);
   }</pre>
<I>Both of these approaches use more than one column to represent the funny characters. Unless your display has special graphics that you can map the characters to, you have to live with such a limitation. &#151; pjp</I><P>
Dear Ms. Ward:<P>
Enclosed please find my check for $28 to renew my membership in the CUG and reinstate my subscription to <I>The C Users Journal</I>. I let my subscription lapse because the content of your magazine was several levels above my ability in C. My original membership was opened when I first purchased Borland's professional language package. At the time my main interest was in Pascal and I had not had any formal training in C. Since then I have had some formal training in C through the University of New Haven graduate program in Computer Science and the content of your magazine as well as the other membership benefits of CUG are more relevant.<P>
Very truly yours<P>
Alan Donn<br>
Prentice Williams Rd.<br>
Rural Route 2 Box 43A<br>
Stonington, CT 06378<P>
<I>We're glad to have you back. &#151; rlw</I><P>
Dear Mr. Ward,<P>
I am a relatively new C Programmer and enjoy your magazine very much. I have learned something new in every issue.<P>
One of the things that I learned in the August 1990 issue is that a person cannot believe everything he reads. I am referring to the Book Review on page 125-6 by Harold C. Ogg. He "reviewed" the book <I>C Programmer's Toolkit</I> by Jack Purdum.<P>
I bought that book two months ago after looking through it in the book store. My initial feelings were the same as Mr. Ogg's until I tried to compile the menu functions. The functions are so poorly written that they will not compile! In my many attempts to compile the code provided on the disk I found several small errors. For example there were several lines that did not end with a semicolon. It was easy to fix, but it took time and was annoying.<P>
I also discovered some serious errors. One example is the function <I>read_key()</I>. In the header information for this function it says that the argument list is <I>void</I>. In the header file <I>menu.h</I> the function is declared with two arguments. In the function definition it has one argument. When <I>read_key()</I> is called by the function <I>box_select()</I> it is called with two arguments. When it is called by the function <I>menu choice()</I> it has one argument.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
This is not the only example I could list. This book is hacker's code of the worst kind. I bought the book to save myself time not to debug code. I get enough practice on my own code.<P>
I think that Mr. Ogg should have bought the book and tried to use some of the code instead of reading it in the book store. I am also less willing to believe any book review I read because of the shoddy work shown in this review. Your readers deserve better!<P>
Steven Pierce<br>
5249 Woodash Circle<br>
West Valley City, UT 84120<P>
<I>May I suggest you forward the errors you've identified to Jack? I know he takes his books very seriously and will be concerned to correct them. (We can forward them for you if you don't have his address.) &#151; rlw</I><P>
Dear Mr. Ward,<P>
Thanks for helping me communicate with Jim Hendrix. He shipped his out-of-print book by priority mail! I've found it helpful, nicely organized, and am glad to have it; thanks again to you.<P>
In the September issue, "We Have Mail" there is a letter from Bill Sacramone. He has put many of my thoughts into words.<P>
Now I wonder what I might have missed:<P>
1. In the 1st quarter of 1990 <I></I>&#151; Would it be possible to send me photocopies of the index pages of those three issues? Then I could send $7.50 each for the intriguing issues (presuming availability).<P>
2. How about those '88 and '89 listings? Would they be useful or make much sense without the text that accompanied them? Could be interesting to try to figure out, but there are plenty of those challenges in my own programs!<P>
I think I'll try just the '89 listings for $20 If that works then I'll consider the '88 listings.<P>
3. What about the earlier years of <I>CUJ</I>? Any plan to publish "<I>The Best of CUJ Vol.I-V?</I>"<P>
As far as being of use to the group, I am willing but not able. I would be interested in knowing if there are a few other QL users among your 30,000-plus subscribers, if so perhaps we could form a QL-SIG within CUG.<P>
About formats; My QL works with its own QDOS operating system using the 68008 chip. It handles disks of 720K using 512 bytes per sector, 9 sectors per track, 80 tracks per side, and two sides of either 3.5" or 5.25" disks.<P>
I have an emulator/simulator for the QL that allows me to run IBM/PC-DOS programs from either 360K or 720K disks. My preference is for the 3.5" with 720K. Thus at home I can use small-C on the QL, and Mix-C or Turbo-C on the QL/IBM/emulator. At the University of Delaware I have access to the computing facilities. The system there is UNIX on a Vax 8650 until the end of 1990 when it will be supplanted by UNIX on Sun 4/490s. Actually the conversion has begun so I hope to convert soon and move my files over to the newer system. As I understand it my internet address will change from: <I>hlschaaf@vaxl.udel.edu </I>to<I> hlschaaf-@brahms.udel.edu</I></FONT></FONT></FONT><P>
I do hope the publisher's style will prevail when the new editor takes over. Hopefully the publisher will still find time to keep in touch with the readers ?<P>
Thanks again,<P>
H.L. Schaaf<br>
3402 South Rockfield Drive<br>
Wilmington, DE 19810-3229<P>
<I>I'm glad we were able to help. Better than an index to the back issues, we have a "back issue availabilty" guide that lists the major articles in each of the issues still in print.</I><P>
<I>A "Best of CUJ" volume has been on our project list forever. Maybe now that I don't have to edit, I can make some progress on that.</I><P>
<I>Don't worry about the publisher's style "prevailing" </I><I></I>&#151;<I> that's what it means to be publisher. Seriously, I expect you'll be pleased once "pjp" is fully in harness. I think you'll find he is equally committed to maintaining a dialog </I><I></I>&#151;<I> and quite possibly better equipped to say something useful. </I><I></I>&#151;<I> rlw</I></FONT><P>
Dear Mr. Ward,<P>
I'm sure you're not used to getting letters from individuals like me. You see, Mr. Ward, I haven't got the foggiest what the <I>CUJ</I> writes about DOS, or RECS, or how many BYTES there are in a Big Mac. As far as computers in general however, I do know that the longer a hacker works at one, the more pain in the neck he gets. (I hear this from my chiropractor.)<P>
I subscribe to <I>CUJ</I> since Leor joined your staff. He sent me one number at that time and when I told him that I kind of like it, he said: "We need new subscribers!" Well, like any parent I'm watching Leor's productivity. I noticed for example that one <I>CUJ</I> reader (D.J. Omond, of Athelstone, Australia) decided to continue subscribing to CUJ thanks to Leor's article. ("We have mail," July 1990).<P>
Incidentally, I just found a few issues of "BDS C Users' Group," which Leor used to send me. That goes back to 1981, starting with Volume 1 <I></I>&#151; Issue 1. It gives me great pleasure to see the progress of your hard work.</FONT></FONT><P>
Best wishes.<P>
Sincerely,<P>
Peter Zolman<P>
P.S. I recently renewed my subscription. (Not necessarily because of Leor's articles). I wonder whether taking into account my age, I shouldn't be entitled to some kind of a discount. After all, I do get discounts all over (e.g. Home Improvement Center, a pharmacy, Santa Barbara Music Assoc. Seasonal Concerts, Time magazine and even at the Burger King.).<P>
Peter M. Zolman<br>
58 Via Alicia St.<br>
Santa Barbara, CA 93108<P>
<I>You're absolutely right </I><I></I>&#151;<I> I'm not used to getting letters from individuals like you. But it's fun all the same.</I></FONT><P>
<I>We're glad Leor has joined our little group. You have every reason to be proud of his work.</I><P>
<I>Sorry, but we don't offer "senior citizens discounts." How about our standard "employee's father" discount instead? I've told circulation to sign you up for a complimentary subscription. </I><I></I>&#151;<I> rlw</I></FONT><P>
Dear Mr. Ward:<P>
In the letters section of volume 8, number 8 (Aug. 1990) you requested recommendations for good technical bookstores. Here is my favorite: Book Scientific, 18 E16th St., New York, NY 10003, (212) 206-1310. They have a pretty good selection in a rather small store, and they are willing to order from the publisher. They accept phone orders, and shipping and handling costs are minimal (personal checks accepted, though they don't take plastic).<P>
Another bookstore (general, but has a large technical section) which I like very much is Borders Bookstore in Ann Arbor, Michigan. Unfortunately I don't have their address handy at the moment.<P>
As others will probably tell you as well, there are the more commonly known computer book sellers: Cucumber Books, Jim Joyce's Bookstore, etc.<P>
Several book clubs (e.g. McGraw-Hill's Electronics and Controller Engineers' Book Club, Library of Computer and Information Sciences, etc.) also have a fairly good selection at discount prices (though they'll get you with the shipping and handling costs).<P>
Sincerely,<P>
Fuat C. Baran<br>
Columbia University in the City of New York<br>
University Center For Computing Activities<br>
UNIX Systems Group<br>
612 West 115 Street<br>
New York, NY 10025<br>
<I>fuat@columbia.edu</I></FONT><P>
<I>Thanks much. I had never heard of Book Scientific. I'll have to drop by if I ever get to New York again. </I><I></I>&#151;<I> rlw</I></FONT><P>
Dear CUJ:<P>
Charles Havener's "Pricing A Meal: An Object-Oriented Example In C++" (August 1990) ignores the issue of developing C++ programs when expansion by end users is a requirement.<P>
I assume:<P>
<UL><li>the cafeteria manager is making a one-time purchase of cash-register PC software,</li>
<li>the program will be used at least daily,</li>
<li>no provision is made for code modification.</li></UL>
In other words, the manager has the ability to point and click to change the price of an item <I></I>&#151; not the ability to declare C++ classes and recompile.</FONT></FONT><P>
Havener's implementation fails to provide for:<P>
1. A meal consisting of anything other than exactly one appetizer, one entree, and one dessert.<P>
2. Additional classifications, such as Drink, at the level of Appetizer/Entree/Dessert.<P>
3. Additional classifications one level lower (e.g. Soup as another Appetizer).<P>
4. Changes in prices, discounts, or descriptions. As presented, the program needs to be recompiled if any of these change.<P>
Here is a solution which addresses points 1, 3, and 4 (point 2 is dropped for lack of space and similarity with point 3). A full implementation would need to provide more error handling, connection of member functions to a user interface, etc.<P>
Using simple objects to illustrate C++ concepts is fine. But a realistic problem such as Havener proposed deserves a more realistic solution. Your magazine is outstanding and you will be receiving a subscription order from me very soon!<P>
Wondering How I Missed Volumes 1-7,<P>
Vince Mehringer<br>
3D/EYE, Inc.<br>
2359 N. Triphammer Rd.<br>
Ithaca, NY 14850<br>
Voice: 607-257-1381<br>
Internet: <I>vince@eye.com</I></FONT><P>
<I>Yes, just how did you miss Volumes I </I><I></I>&#151;<I> VII? Believe me; our circulation promotion people would like to know. </I><I></I>&#151;<I> rlw</I></FONT><P>

<h4><A HREF="list1.htm">Listing 1</A></h4>

<h4><a href="../../../source/1990/nov90/letters.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
