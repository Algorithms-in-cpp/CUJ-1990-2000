


<HTML>
<HEAD>

<TITLE>November 1990/Questions & Answers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocnov.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Questions &amp; Answers<A name="025C_0154"><A name="025C_0154"></font></h2><P>
<h3 align="center"><A name="025C_0000"><A name="025C_0000">Pointers, Padding, And Poking</h3><P>
<h3 align="center"><font color="#800000">Ken Pugh</font></h3><hr><blockquote><P>
<P><i><A name="025C_0000"><A name="025C_0000">Kenneth Pugh, a principal in Pugh-Killeen Associates, teaches C language courses for corporations. He is the author of C Language for Programmers and All On C, and is a member on the ANSI C committee. He also does custom C programming for communications, graphics, and image databases. His address is 4201 University Dr., Suite 102, Durham, NC 27707. You may fax questions for Ken to (919) 493-4390. When you hear the answering message, press the * button on your telephone. Ken also receives email at kpugh@dukeac.ac.duke.edu (Internet ) or dukeac!kpugh (UUCP).</i></P><P>
<B>Q</B><P>
I am a new and very impressed subscriber to CUG, and a C programmer of roughly three years.<P>
My question here deals with the acquisition of the size of a date object &#151; ye 'ole array of pointers to type <I>char</I>.</FONT></FONT><P>
To my question, I find no decent explanation, all the way from the second edition of K&amp;R to my TURBO C User's Guide. None of my C programming friends or associates have given me an answer worth sleeping over, hence, this letter to you!<P>
Of course, I've enclosed code (see <A href="list1.htm">Listing 1</a>)
. With the array of character pointers called <I>message</I>, I've done a bunch of <I>printf</I>'s to spew out information regarding its location and such. To no surprise, all of the information is just as expected, according to every description of array and pointer interchangeability I've read. All except one, that is.</FONT></FONT></FONT></FONT><P>
Since the name of the array (<I>message</I>) is a <I>pointer</I> containing the address where the array starts (<I>&amp;message[0])</I>, why can't I get the actual <I>size</I> of the array in bytes by doing a <I>sizeof(message)</I> in the final <I>printf</I> statement. If the variable name <I>message</I> is a pointer to the start of the array, it should be only two bytes long (in 16 bit machines anyway). Normally, an array is sized by multiplying the number of elements by the data type. If I copy the array name to another suitable variable of type (<I>char *[])</I>, say for example</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>char *array_copy[]</pre>
then a <I>sizeof(array_copy)</I> returns a size of 2, as expected. Maybe I need a doctor to cure a blind eye, because I just don't see the logic. Please help.</FONT></FONT><P>
Thanks so much for listening!<P>
Peter Upczak<br>
Santee, CA<P>
<B>A</B><P>
One statement in your question needs clarification. The name of the array <I>(message)</I> is not a pointer containing the address of where the array starts. (That implies that the name has its own memory location.) The name of the array represents two items. When used in an expression, it is a constant value of type pointer, which is the address. When used as the operand of <I>sizeof</I>, it represents the entire object.</FONT></FONT></FONT></FONT><P>
In your example, the array <I>message</I> is a two-element array of pointers. Thus, its size is two times the size of a pointer (two bytes) or four bytes.</FONT></FONT><P>
Confusion about arrays/pointers exists because the same notation is used in two different places and has two different meanings. It can also be used with different effect, both to declare a variable and to declare a parameter. I'll use your example with a bit more description for the rest of the readers.<P>
The array subscript notation does not declare an array when used to declare a parameter. The array subscript notation states that the parameter it is receiving will be a pointer that holds the starting address of an array. The parameter acts like a local variable and is truly a pointer.<P>
In your function <I>new_array_name, char *array_copy[]</I> declares that <I>array_copy</I> will receive an address which it will perceive as the starting address of an array of pointers to <I>char</I>. You could have declared it as char <I>**array__copy</I>. In a parameter declaration, these two mean exactly the same thing. When you pass an array name to this function, the address value is passed and initializes the parameter value.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The compiler allows you to declare the parameter as <I>char *array_copy[2]</I>. It ignores the size declaration (since an array is not being declared in the parameter list) and simply treats it as if you had written <I>char *array_copy[]</I>;</FONT></FONT></FONT></FONT><P>
Suppose you had the variables declared all in one function as:<P>
<pre>function ()
 {
 char *message[2] =
   {"aaaa", "bbbbb" };
 char **array_copy;
 array_copy = message;
 }</pre>
The size of <I>message</I> is four bytes (two pointers of two bytes each) and the size of <I>array_copy</I> is two bytes (size of a pointer). The value of <I>message</I> in the assignment is simply the address of the array (two bytes long), and it is assigned to <I>array_copy</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Note that in declarations of local variables, you cannot declare an array without explicitly or implicitly stating its size.<P>
<pre>auto char *array_copy[];</pre>
is an illegal declaration. Therefore you cannot copy the array name <I>message</I> to this variable in a function.</FONT></FONT><P>
To qualify the preceding statement, let me say that there are some conditions under which this can be done. You can make a reference to a global array using this syntax. For example:<P>
<pre>extern char *message[];</pre>
is a valid reference to an external array of <I>char</I> pointers which is defined elsewhere in the program. However, you cannot apply <I>sizeof</I> to <I>message</I>, unless the size of the array is declared elsewhere within the file.</FONT></FONT></FONT></FONT></FONT></FONT><P>
If I still haven't made myself perfectly clear, Steve Clamage of TauMetric offers another explanation:<P>
I just read your dissertation on array vs. pointer in the August <I>C Users Journal</I>. This seems to be the most misunderstood subject in C.<P>
I have found a simple way to explain the difference in the declaration of an array vs. a pointer:<P>
The declaration<P>
<pre>char data[10];</pre>
means that <I>data</I> is the address of an array of 10 <I>chars</I>. So when you later use <I>data[i]</I>, the meaning is to add <I>i</I> to the address of the data array and retrieve the <I>char</I> at that address.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The declaration<P>
<pre>char *data;</pre>
means that data is the address of a pointer which contains the address of a <I>char</I> (or the first address of an array of <I>chars</I>). So when you later use <I>data[i]</I>, the meaning is to add<I> i </I>to the contents of the pointer stored in the variable data and retrieve the <I>char</I> at that address. (-<I>SC</I>)</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
In short, if <I>T</I> is a type, then pointer to <I>T</I> is not the same as array of <I>T</I>. When you declare an object in more than one place, use the same declaration for it each time. (-<I>KP</I>)</FONT></FONT></FONT></FONT></FONT></FONT><P>
<B>Q</B><P>
Perhaps you can give me an answer to a question I have regarding user-defined data types.<P>
In Pascal (at least in Apple Pascal) you can use the following statement to create a data type of LONG:<P>
<pre>TYPE LONG : INTEGER[36];</pre>
Variables of type <I>LONG</I> can represent integers up to 36 digits in length and can be operated on by all the arithmetic operators with the exception of <I>MOD</I>.</FONT></FONT></FONT></FONT><P>
Is there any possible way to achieve this in C?<P>
Another question I have, has to do with necessity of casting when assigning the value of a pointer to one data type to a pointer to a different data type.<P>
Both of the enclosed programs (<A href="list2.htm">Listing 2</a>
and <A href="list3.htm">Listing 3</a>)
 run perfectly on my system (Aztec C running on an Apple IIc). Is this just a non-standard quirk of my system or is it that the assignment operator, = , transfers only the value of a pointer and not the attributes (scalar multiple)?<P>
Also note in June issue of <I>CUJ</I>, (page 98, Listing 3,
 line 14), the return of the function, <I>malloc</I>, supposedly a pointer to <I>char</I> is assigned without a cast to variable which has been defined to be a pointer to a <I>struct</I>.</FONT></FONT></FONT></FONT></FONT></FONT><P>
Stanley Cohen<br>
N. Valley Stream, NY<P>
<B>A</B><P>
You could write your own functions to perform arithmetic of the type you suggest. Robert Ward used to sell a package that performed something like what you suggest.<P>
The K&amp;R versions of C, such as Aztec on the Apple, did not distinguish much between types of pointers. You can freely assign a pointer to one data type to a pointer to another data type without a single complaint from the compiler. Only the value of the pointer (the address) is transferred.<P>
Freely passing around addresses without some control can lead to particularly horrendous debugging problems. Thus the ANSI standard tightened up the assignment of pointer values. You can only assign a pointer to particular data type to a pointer to the same type. You may do the assignment with a cast, as:<P>
<pre>cptr = (char *) matA;
cptr = (char *) recptr;</pre>
ANSI C now has a pointer to <I>void</I> type. This is like "type O" blood &#151; the universal donor. A pointer to any <I>type</I> can be assigned to a pointer to <I>void</I>. Likewise a pointer to <I>void</I> can be assigned to a pointer to any type. You could declare and assign without a cast as:</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>void *void_pointer;
void_pointer = matA;
void_pointer = recptr;</pre>
You cannot increment a <I>void</I> pointer, since there is no memory size associated with <I>void, </I>so<I> void_pointer</I>++ is illegal.</FONT></FONT></FONT></FONT></FONT></FONT><P>
The <I>malloc</I> function is now declared as returning a <I>void</I> pointer:</FONT></FONT></FONT></FONT><P>
<pre>void*malloc();</pre>
Therefore, the return from <I>malloc</I> can be assigned without a cast. I tend to use the cast anyway out of habit, but it is not necessary under ANSI C.</FONT></FONT><P>
There is one instance where this tightening of pointer types appears to be a slight bother. Plain <I>char, unsigned char</I> and <I>signed char</I> pointers are all treated as different types. Thus you need to use a cast to make an assignment. This makes initializing <I>unsigned char</I> pointers a little messy. A string literal is of type <I>pointer</I> to plain <I>char.</I> So the declaration must read:</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>unsigned char *p = (unsigned
char *) "abc";</pre>
Note that you could have written out the matrix in <A href="list2.htm">Listing 2</a>
as:<P>
<pre>write(fd, matA, sizeof(MAT));</pre>
Even though the old description of <I>write</I> shows that it requires a <I>char</I> pointer, it will accept <I>matA</I> as the address. Under ANSI C, the second argument to <I>write</I> is described as a pointer to <I>void</I>. Thus, it is perfectly legal to pass it <I>matA</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<B>Q</B><P>
I have a question that I hope you can help me with. I recently started working with a new compiler from Lattice which claims ANSI conformance. In the following program fragment:<P>
<pre>char *ptr;
((long *) ptr)++;</pre>
it complains about requiring an lvalue for ++. I've used constructs like this for years on various compilers, but ANSI seems to have changed a lot of what I "knew." In speaking with Lattice about the problem, they said that this particular treatment of "casts not being 1values" was required by ANSI, in the name of "portability."<P>
I realize that what I want is not completely portable, however it is more portable than the alternative (assembly language). I see no reason to restrict such useful behavior for all machines &#151; it could be an error on machines that cannot perform the required conversions, and perhaps a "portability warning" on machines that can.<P>
My current workaround is to use:<P>
<pre>char *cptr;
long *lptr;
lptr = (long *) cptr;
lptr++;
cptr = (char *) lptr;</pre>
which seems like longhand for the previous fragment, and it is no more portable. Also, it produces worse code, especially when dereferencing (*) the pointer along with ++ (even after optimization.)<P>
If ANSI has removed or standardized this functionality, then it seems we have lost a valuable feature of the language. I hope you can shed some light on this situation.<P>
Hans-Gabriel Ridder<br>
Colorado Springs, CO<P>
<B>A</B><P>
As I mentioned in a previous column, the standard states that "a cast converts the value of the expression to the named type." It also states that a "cast that specifies an implicit conversion or no conversion has no effect on the type or value of an expression."<P>
The ++ operator can only be applied to an lvalue. An lvalue represents a memory address where a value can be stored. (It is that which can be on the lefthand side of an assignment statement.) The ++ operator cannot be applied to an expression, so Lattice is correct in its statement.<P>
Alternatively you could use:<P>
<pre>lptr = (long *) cptr;
cptr = (char *) ++lptr;</pre>
which would cut down one statement. I prefer:<P>
<pre>cptr += sizeof(long);</pre>
This should not generate much more code (if any) than ((<I>long</I> *) <I>ptr</I>)++. I prefer maintaining this construct in code, since it more clearly shows what the address will be incremented by. If you want, you can dereference it to a single <I>char</I> as</FONT></FONT></FONT></FONT><P>
<pre>*(cptr += sizeof(long))</pre>
instead of using<P>
<pre>* (char *) (((long *) ptr)++)</pre>
I don't think ANSI tried to standardize this out of the language. It was simply a loose end that got tightened up. <I>[You can also get the old behavior by writing:</I><P>
<pre>((long*)&amp;ptr)++</pre>
<I>Requiring the address of operator is wordier, but makes for a more consistent language. </I><I></I>&#151;<I> Ed.]</I></FONT><P>
<B>Q</B><P>
I have been writing C programs for several years and there is a point I find puzzling. Most of the programs involved some sort of manipulation of data bases. Structures are handy tools for this, but I understand C does not guarantee that the elements of structure will be contiguous in memory. One should therefore not make a declared structure the recipient of a record read from a disk, but should read each field or subfield individually into its place in the structure. This can be dreadfully slow. If one declares an array big enough for a record, then the record can be read in one operation. Pointers or indices can access the data in the fields and subfields, which is much slower than accessing elements of a structure. The same situation exists in writing from memory to a file.<P>
I have worked out a method that has produced code that runs day after day without problems. (If it works, it must be legal C?) I declare a structure and a pointer to this structure. Then I set up an array big enough to hold the structure and initialize the structure pointer to point to the array. Now, I've indirectly created a structure that is in contiguous memory. I can read or write with the array as the target, and access the elements of the structure through the structure pointers. Both of these are fast operations. Is this a proper use of C capabilities?<P>
R. Palmer Benedict<br>
Wellesley, MA<P>
<B>A</B><P>
Structure members are not guaranteed to be contiguous because of access considerations. On some machines, you can only access numerical values on word or double word boundaries. If characters are intermixed with numerical values, then packing bytes are inserted after some characters to round out the number to a word or double word boundary. These bytes are normally invisible to the programmer. However for a particular machine/compiler combination, they will always occur in the same place. The example program in <A href="list4.htm">Listing 4</a>
will write out two structures and read them back in. This will work regardless of the packing arrangement.<P>
If you write the structure to a disk file and read it back in, everything will work fine. But, if you write it to a disk file on one machine (say MS-DOS 8086) and read it back in on another type of machine (say a MacIntosh 68000) it won't read correctly. The packing bytes and the internal representation of the values could be different.<P>
Even with the same compiler, the structure may be packed differently. The Microsoft compiler has a <I>-</I><I>Zp</I> option, which packs structures and eliminates packing bytes. This is possible since there are no word alignment requirements on the 8086 line. Without this option, packing bytes are added to align integers to even byte boundaries.</FONT></FONT><P>
<B>Q</B><P>
Looking through some old listings, I noticed that some C programs can only be run in Turbo C because of the Peek and Poke functions. Other DOS and BIOS functions are in Microsoft C under different names, but not Peek and Poke. Could you please make some Microsoft C equivalents?<P>
Anthony Whitford<br>
Sidney, BC CANADA<P>
<B>A</B><P>
Although I will present these functions for you, I do not suggest writing a C program that peeks and pokes (other than for poking around in screen memory). You didn't say what memory model you want them for, so let me give you some simple equivalents. Note that you will have to pass each function a <I>far</I> pointer (four byte pointer). The first two bytes are the segment value and the second two bytes are the offset. See <A href="list5.htm">Listing 5</a>.
</FONT></FONT><P>
For example:<P>
<pre>poke(OXB8000000, 'A');</pre>
puts an <I>'A</I>' into screen memory. You can always directly access memory without using a function. If you are using the large or compact memory model, you could use a <I>char</I> pointer. For example:</FONT></FONT></FONT></FONT><P>
<pre>char *pc = 0XB8000000;
*pc = 'A';</pre>
or even:<P>
<pre>*((char *) OXB8000000) = 'A';</pre>
<B>Q</B><P>
I'm an amateur programmer working with Turbo-C V2.0. I have a problem solving a program that holds a large static array of structures. When compiled under Compact or Huge Memory model, the same error appears:<P>
"Too much global data defined in file"<P>
Could you help me solve this problem? (The program is shown in <A href="list6.htm">Listing 6</a>.
)<P>
Thank you.<P>
Abdel Hindi<br>
Montreal, Canada<P>
<B>A</B><P>
I'm not sure how big the <I>n</I> is in your structure template, or how big the strings were that you were using. I presume either or both must be fairly large. With a compact model, the size of an array is limited to 64K bytes. A value of <I>n</I> greater than 64K bytes / 4 bytes / 200 elements, or about 80, would be too big.</FONT></FONT></FONT></FONT><P>
If the <I>n</I> was smaller than this, then the error is due to the total length of the character strings. I can only find implicit references to an assumption that constant data in a module is placed in one segment and that there is no way to specify this to be otherwise. Thus, the total length of the character strings in a single source file cannot exceed 64K. With <I>n</I> equal 10 and an average string length of 35 bytes, you would exceed this figure (10 times 200 times 35 is 70,000). If a reader has any other ideas on this, please let me know.</FONT></FONT></FONT></FONT><P>
To overcome this limitation, you could read a file to initialize the character data. You could read it a string at a time into a buffer, determine the length, perform a <I>malloc()</I> to get space to put it, copy the buffer into that space, and assign the pointer to each member of each element in <I>OBJECT.</I> Since <I>fgets</I> returns the string with a new-line character, you need to take it out.</FONT></FONT></FONT></FONT></FONT></FONT><P>
The code would look something like the code in <A href="list7.htm">Listing 7</a>,
 which does not include error checking.<P>
<B><B>Q</B></B><P>
I've been stung by a canned software package and I can't stop the burning! While I was tuning an application consisting of a window package, an expert system, a mountain of application code, and an embedded database, I discovered that the application wasn't using the system's <I>free() </I>and<I> malloc()</I>.</FONT></FONT></FONT></FONT><P>
After much research I found that the database package that we integrated with had developed its own <I>free</I> and <I>malloc</I> routines which performed more slowly than the system <I>free</I> and <I>malloc</I> for my window package.</FONT></FONT></FONT></FONT></FONT></FONT><P>
I tried relinking with the C library listed first in the list of libraries, but that gave me a double declaration error. Next I tried extracting <I>free </I>and <I>malloc</I> from their libraries; however, when I tried relinking, I had unresolved externals!</FONT></FONT></FONT></FONT><P>
Any suggestion?<P>
Robert Schweiss<br>
College Park, Maryland<P>
<B>A</B><P>
The solution depends on the compiler/linker you are using. Some linkers allow you to ignore the double declarations of errors and continue with the link. For example, Microsoft's has a/NOE option. Be careful if you use it, for it also allows the link to complete if there are missing externals.<P>
When you remove a module from a library, all functions in that module are removed. The module that contained <I>free</I> and <I>malloc</I> probably also contained other functions that were required. You need to include a file with equivalent functions and the same names in your link before you access that library. For example, if the original source file for the package contains code as in <A href="list8.htm">Listing 8</a>,
 you will need to create a file with <I>some_other</I> function in it that does the same thing as the one in the library.</FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="025C_0155">Obscure Name Contest<B><A name="025C_0155"></B></FONT></h4></P>
See <A href="tab1.htm">Table 1</a>
for some unusual names that I have authored or run across in my years of programming.<P>
<h4><FONT COLOR="#000080"><A name="025C_0156">Readers' Replies<A name="025C_0156"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="025C_0157">More on LPT1, etc.<B><A name="025C_0157"></B></FONT></h4></P>
In the recent issue of TCJ (July '90) you responded to Chaiyos Gosolsatit of Lewiston, NY about how to print the output to printer 2 (LPT2) instead of LPT1 (stdprn). You suggested that he use the MS-DOS MODE command on the DOS command line before executing the program. This is a round about way of doing what could be done in a much more practical manner (I think).<P>
The following program will do what he wants in a more straightforward manner. I've used <I>fopen</I> (<I>"LPT2"</I>, <I>"mode"</I>) on several occasions with both LPT1 and LPT2 (and I would guess that LPT3 would work as well) to allow the user to select which printer, local or remote, on a network he wishes to print to. See <A href="list9.htm">Listing 9</a>.
</FONT></FONT></FONT></FONT><P>
Mike Fox<br>
Ohio State<P>
A similar reply was received from Ian Cargill of Surrey, England.<P>
<h4><FONT COLOR="#000080"><A name="025C_0158"><I>Include</I><B> Filenames<A name="025C_0158"></B></FONT></h4></P>
I am replying to Mr. Jim Howell's question in the <I>C Users Journal </I>July 1990, p. 92. On the attached sheet you'll find <I>INCTEST. C</I> (<A href="list10.htm">Listing 10</a>)
 which solves the problem for Turbo C 2.0 and QuickC 2.0. In Turbo C it is sufficient to simply define <I>MH_PRG</I> to the corresponding application name (<I>progl</I> in the example). Doing the same in Quick C produces the include directive <I>#include &lt;MH_PRG_A.h&gt;</I> which is not what we want. Although your suggestion to use <I>#ifdefs</I> is certainly the most portable way to solve this problem, I definitely prefer the more elegant Turbo C 2.0 behavior. I use a similar construct to include user-specific source files in my applications. Because each user has his own serial number I only need to write a file name <I>r_usrXXX. c</I> where XXX is the user's serial number. The application then automatically includes this file. This saves me the time to expand all the <I>#ifdefs</I> for &#151; hopefully &#151; lots of new users. See <A href="list10.htm">Listing 10</a>.
 Thank your for your great column.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Matthias Hansen<br>
Rendsburg, West Germany<P>

<h4><a href="../../../source/1990/nov90/pugh.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY></HTML>
