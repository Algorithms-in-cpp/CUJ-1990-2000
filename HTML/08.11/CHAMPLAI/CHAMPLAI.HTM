


<HTML>
<HEAD>

<TITLE>November 1990/A Non-Preemptive Multitasking Executive In C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocnov.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Operating Systems</FONT></H2>

<hr><h2 align="center"><font color="#800000">A Non-Preemptive Multitasking Executive In C++<A name="0245_0148"><A name="0245_0148"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0245_0000"><A name="0245_0000">Michel de Champlain</font></h3><hr><blockquote><P>
<P><i><A name="0245_0000"><A name="0245_0000">Michel de Champlain is president of Cnapse, which specializes in C &amp; C++<I></I> <I></I>training, real-time programming and reusable software components. He is a<I></I> <I></I>faculty member in the Computer Science department at College Militaire Royal<I></I> <I></I>St-Jean. He has a MS in computer science and is completing a PhD at Ecole<I></I> <I></I>Polytechnique, Montreal. He can be contacted at Cnapse, 11 Laurier, Suite 102,<I></I> <I></I>Chambly, Qc, CANADA J3L 9Z7, tel: (514) 447-7221, fax: (514) 447-7297.</i></P><P>
This article focuses on designing and implementing a non-reemptive multitasking executive using the object-oriented features of C++. I've tested this implementation on an AT clone using Zortech C++ v2.0 (small model). One source file must be in assembly language to implement context switching between tasks.<P>
<h4><FONT COLOR="#000080"><A name="0245_0149">Object-oriented Versus Procedural<A name="0245_0149"></FONT></h4></P>
Object-oriented design (OOD) represents a different way of thinking compared to the classical procedural approach. OOD focuses on the data to be manipulated rather than on the procedures that do the manipulating. So the data forms the basis for the software decomposition. In OOD, an abstract data (or object) type is a class that defines a type and an associated set of operations. These operations characterize the behavior of the underlying type. OOD is not top down &#151; the resulting classes are more independent and easier to reuse. One of the nicest aspects of OOD is the extensibility of object types through inheritance. The original class remains untouched as new functionality is added in a derived type. Basic classes are general object types that can easily be reused for many extensions of a design.<P>
<h4><FONT COLOR="#000080"><A name="0245_014A">Non-preemptive Multitasking Executive<A name="0245_014A"></FONT></h4></P>
I've presented an executive that is a multitasking, non-reemptive kernel with a cooperative scheduling discipline. Tasks pass control from one to another much like relay runners pass the baton. A task continues to run until it calls <I>ReSchedule. </I>This function saves the tasks's context, determines the next running (active) task, and transfers control to the new running task.</FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0245_014B">Executive Services<A name="0245_014B"></FONT></h4></P>
One of the executive's primary functions is overseeing the execution of tasks that make up a multitasking application. The executive offers many services, also named <I>system calls</I>. These include:<P>
<UL><li><I></I>Start<I> </I>-<I> Create and schedule a task to run.</I></FONT></FONT></li>
<li><I></I>Terminate<I> </I>-<I> Delete the specified task (or itself).</I></FONT></FONT></li>
<li><I>     ReSchedule</I> <I>-</I> Move the running task onto the ready queue, complete every detail of scheduling and context switching, select a new task to run, move it from the ready queue, mark it running, and finally, restore the context of the new task.</FONT></FONT></li>
<li><I>     Suspend</I> <I>-</I> Suspend execution of the specified task (or itself). A suspended task will not resume execution until a <I>Resume</I> is issued. This method starts the rescheduling method if the running task suspends.</FONT></FONT></FONT></FONT></li>
<li><I>     Resume</I> <I>-</I> Resume execution of the specified task (previously suspended). This method starts the rescheduling method.</FONT></FONT></li>
<li><I>     Self</I> <I>-</I> Return the running task identification.</FONT></FONT></li>
<li><I>     Parent</I> <I>-</I> Return the task identification of the task's parent (creator).</FONT></FONT></li></UL>
Besides these system calls, the specification also includes:<P>
<UL><li><I>     Schedule</I> <I>-</I> <I>Schedule</I> is a method private to the executive that encapsulates the scheduling algorithm. Packaging it as a method lets you change the scheduling algorithm without affecting the rest of the executive.</FONT></FONT></FONT></FONT></li></UL>
<h4><FONT COLOR="#000080"><A name="0245_014C">Task States And State Transitions<A name="0245_014C"></FONT></h4></P>
In a multitasking application based on this executive, tasks exist in one of four states: Running, Ready, Suspended or Terminated:<P>
<UL><li>Running <I>-</I> The task has control of the CPU and is executing.</li>
<li>Ready <I>-</I> The task is ready for execution but cannot gain control of the CPU (enter the Running state) until a task in the Running state passes control to it by terminating or suspending.</li>
<li>Suspended <I>-</I> The task suspends in mid-xecution and waits to be readied by a <I>Resume</I> call.</FONT></FONT></li>
<li>Terminated <I>-</I> The task is not yet started or its execution is complete.</li></UL>
<A href="fig1.htm">Figure 1</a>
shows all the state transitions and how system calls change states.<P>
<h4><FONT COLOR="#000080"><A name="0245_014D">The C+ + Implementation<A name="0245_014D"></FONT></h4></P>
Every state is an object, and all transitions are methods (system calls). The first base class in the executive is <I>StateQ </I>(<A href="list4.htm">Listing 4</a>)
, an abstract class that hides all the doubly linked list management functions. An instance of the class <I>StateQ </I>contains a First-n First-ut (FIFO) queue that can be accessed by the <I>insert</I> method. Another method called <I>transfer </I>allows the executive to remove a task from any queue (at any position) and reinsert it in another.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
A second base class <I>Task</I> (<A href="list3.htm">Listing 3</a>)
 is needed to construct tasks as separate, sequential programs. Even though the tasks run concurrently, each task must have a private context. The base class <I>Task</I> is the abstract class that hides (and saves) that context for each of its instances. This private task context is a snapshot of its own state that remains undisturbed while other tasks run. A state consists of a stack pointer, a stack size, a stack base, an id, a parent id, and a starting address.</FONT></FONT></FONT></FONT><P>
In addition to these base classes, the class <I>ReadyQ</I> (derived from the base class <I>StateQ</I>) has a specialized method called <I>GetNextRunning.</I> This method retrieves the next ready task at the head of the ready queue. A next ready task corresponds to the next running (active) task.</FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>class ReadyQ : StateQ {
public:
 ReadyQ( ) : StateQ(0, READY) { }
 void GetNextRunning(void);
};</pre>
<h4><FONT COLOR="#000080"><A name="0245_014E">Starting From Main<A name="0245_014E"></FONT></h4></P>
A multitasking application is normally composed of several user tasks. You specify these by providing your own verson of <I>StartUpUserTasks.</I> <A href="list5.htm">Listing 5</a>
shows an example. All user tasks (<I>Background</I>,<I> Task0</I>,<I> </I>and<I> Task1</I>) are implemented in the same file <I>suuser. cpp.</I> In a real application you would more likely compile each user task separately.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Compare the output generated (in <A href="fig2.htm">Figure 2</a>)
 with the code in <A href="list5.htm">Listing 5</a>.
 After the version message printed, <I>main</I> (in <A href="list4.htm">Listing 4</a>)
 creates three queues: <I>terminatedQ</I>,<I> suspendedQ</I>, and <I>readyQ. </I>It also starts <I>StartUpUserTasks</I> task with these statements:</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>(new Task (StartUpUserTasks,
         1024))-&gt;Start();
readyQ-&gt;GetNext Running();
RunNext ();</pre>
Control now passes to <I>StartUpUserTasks</I> (<A href="list5.htm">Listing 5</a>)
 where the <I>Background</I>,<I> Task0</I>, and <I>Task1</I> tasks are started:</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>(new Task(Background, 1024))-&gt;
          Start();
(t0 = new Task(Task0, 1024))-&gt;
             Start ();
(t1 = new Task(Task1, 1024))-&gt;
             Start();</pre>
Remember, starting a task means creating and scheduling a task to run in the <I>readyQ </I>so <I>StartUpUserTasks</I> can maintain control until it reschedules itself. Thus, from this point, the execution involves 20 consecutive context switches, allowing <I>StartUpUserTasks</I>,<I> Background</I>,<I> Task0</I>, and <I>Task1</I> to print <I>S. 01</I> in sequence. (See the output in <A href="fig2.htm">Figure 2</a>.
) This sequence will break when <I>Task0</I> suicides (you can see when <I>Task0</I> stops printing). <I>StartUpUserTasks</I> then suspends <I>Task1</I> before doing five consecutive context switches, printing five sequences of <I>S</I>. in a row.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The controlling task resumes <I>Task1</I>, restarts <I>Task0</I> and suicides gracefully. Again, <I>Task0</I> suicides, and the final printing sequence that will run forever (until <I>control-C</I> is pressed) is <I>1</I>., illustrating that <I>Task1</I> and <I>Background </I>are sharing the rest of the processor time.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0245_014F">Conclusion<A name="0245_014F"></FONT></h4></P>
This is not a complete executive, but it is a practical implementation using inheritance in a multitasking programming context. Every system call is localized and implemented through a method without changing any others. The private <I>Schedule</I> method is isolated to allow an easy replacement by a more sophisticated task scheduling mechanism. A black-ox scheduler gives complete flexibility to the developer during all phases of the application. (See "Practical Schedulers for RealTime Applications" by Robert Ward, <I>CUJ</I> April 1990.) No inter-ask communication has been covered. I hope to cover this topic (as well as some real multitasking applications) in a future article. In this article, I've concentrated mostly on design and C+ + programming techniques. If you're interested in reusable software components and several applications that exercise the executive, contact the author.</FONT></FONT><P>

<h4><A HREF="list1.htm">Listing 1</A></h4>
<h4><A HREF="list2.htm">Listing 2</A></h4>
<h4><A HREF="list6.htm">Listing 6</A></h4>

<h4><a href="../../../source/1990/nov90/champlai.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
