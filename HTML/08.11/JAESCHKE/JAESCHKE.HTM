


<HTML>
<HEAD>

<TITLE>November 1990/Doctor C's Pointers&reg;</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocnov.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Doctor C's Pointers&reg;<A name="0258_0150"><A name="0258_0150"></font></h2><P>
<h3 align="center"><A name="0258_0000"><A name="0258_0000">Environmental Control</h3><P>
<h3 align="center"><font color="#800000">Rex Jaeschke</font></h3><hr><blockquote><P>
<P><i><A name="0258_0000"><A name="0258_0000">Rex Jaeschke is an independent computer consultant, author and seminar leader. He participates in both ANSI and ISO C Standards meetings and is the editor of The Journal of C Language Translation, a quarterly publication aimed at implementors of C language translation tools. Readers are encouraged to submit column topics and suggestions to Rex at 2051 Swans Nech Way, Reston, VA 22091 or via UUCP at uunet!aussie!rex or aussie!rex@uunet.uu.net.</i></P><P>
Operating systems such as UNIX, MS-DOS, and VAX/VMS support defining symbols that a user program can access. The program supplies the name of such a symbol and is given the string value currently assigned to that symbol. All examples in this article were run using Microsoft's C compiler v6 under MS-DOS v3.3. (Other systems may require different commands to achieve the same results.)<P>
I will refer to these symbols as environment variables. The set of such variables defined at one time makes up the program's environment.<P>
<h4><FONT COLOR="#000080"><A name="0258_0151">Defining An Environment<B></B> <B></B>Variable<A name="0258_0151"></FONT></h4></P>
The simplest way to define an environment variable is via an operating system command. To define a variable <I>ABC</I> under MS-DOS, you use the <I>SET</I> command.</FONT></FONT></FONT></FONT><P>
<pre>set abc=def</pre>
To view all variables defined in the current environment, use <I>SET</I> without arguments. My system produced the output</FONT></FONT><P>
<pre>COMSPEC=C: \COMMAND. COM
PROMPT=$p $g
PATH=c:\dos;c:\util;
ABC=def</pre>
Note that while MS-DOS preserved the case of the variable's definition, it converted the variable name to upper-case (from <I>abc</I> to <I>ABC</I>). (There is one exception to this, however.) You can define the <I>PATH</I> variable in one of two ways and the results from each can differ. For example, if you enter</FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>PATH c:\;</pre>
the definition of the variable is converted to upper-case. However, in the following case, it is not.<P>
<pre>SET PATH=c:\;</pre>
This difference might be an issue if you are looking for a specific case only in a variable's definition. In addition to <I>SET</I>, the library function <I>putenv</I> can also be used to define a variable.</FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0258_0152">Accessing The Environment<A name="0258_0152"></FONT></h4></P>
Many systems support a third argument to <I>main</I> and traditionally that argument has been called <I>envp</I>. Like <I>argc</I>, <I>envp</I> is an array of pointers to <I>char</I> where each entry points to a null-terminated string containing a variable and its definition, separated by an equals sign. An entry containing <I>NULL</I> indicates the end of this array. <A href="list1.htm">Listing 1</a>
displays the contents of the current environment given the previous definitions.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Since <I>envp</I> is an array passed by address, it is the address of the first pointer that is actually being passed. Therefore, I could also have declared <I>envp</I> as</FONT></FONT></FONT></FONT><P>
<pre>char **envp</pre>
(just as you can declare <I>argv</I>).</FONT></FONT><P>
ANSI C does not include <I>envp</I>, although this feature is mentioned under "Common Extensions." <I>envp</I>, however, is part of UNIX SVID and POSIX.</FONT></FONT></FONT></FONT><P>
Another UNIX feature sometimes available under MS-DOS is a global object called <I>environ</I>. This is typically declared as</FONT></FONT><P>
<pre>/* stdlib.h */
extern char **environ;</pre>
This declaration allows the startup code to point <I>environ </I>to the beginning of an array of pointers to <I>char</I> (representing the environment table). The user can access the table by subscripting <I>environ</I> (See <A href="list2.htm">Listing 2</a>)
. If the environment table is moved for any reason (as discussed later), <I>environ</I> is simply made to point to the new location.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Note that while numerous compilers define <I>environ</I> as previously shown, they document it as</FONT></FONT><P>
<pre>extern char *environ[];</pre>
implying instead that <I>environ</I> is an array. It is not; it is a pointer.</FONT></FONT><P>
<I>environ</I> is not part of ANSI C. You should conditionally omit its declaration from <I>stdlib.h</I> when compiling in strict ANSI mode.</FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0258_0153">Defining Variables Via The<B></B> <B></B>Library<A name="0258_0153"></FONT></h4></P>
ANSI C defines a library routine <I>getenv</I> to access environment variables from within a program. The <I>getenv</I> in <A href="list3.htm">Listing 3</a>
finds a defined variable by performing a case-insensitive search on the variable name.</FONT></FONT></FONT></FONT><P>
It is interesting that ANSI C contains this function, since the standard does not define what an environment is or how it works. If nothing like an environment exists for a given standard C system, <I>getenv</I> can simply return a <I>NULL</I> value for any given variable to indicate no match was found (or in this case, that no environment exists).</FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0258_0154">Changing The Environment<A name="0258_0154"></FONT></h4></P>
UNIX and some other systems provide the <I>putenv</I> function to let the user add a new variable definition or change an existing one. However, <I>putenv</I> is not part of ANSI C.</FONT></FONT></FONT></FONT><P>
<A href="list4.htm">Listing 4</a>
defines a new variable <I>test</I> and then invokes a text editor called <I>see</I> using <I>system</I>. I make the editor load a copy of <I>COMMAND.COM</I> to display the current environment table. As expected, it contained</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>envp[4] ==&gt; |test=1234|</pre>
However, when the original program terminated, <I>test</I> was no longer defined. That is, when you use <I>putenv</I> to define a variable, that definition remains in force only while that program is running. Any work <I>putenv</I> does is reflected from within that program, and by any programs invoked from that program using <I>system, exec</I>, or <I>spawn</I>. Each spawned subprogram inherits its parent's environment. You cannot, however, use <I>putenv</I> to change your top-most level environment.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
When given a variable definition, <I>putenv</I> either adds the definition to the environment (if no such variable exists) or changes the existing definition. Consequently, the environment can grow. To extend the environment table pointed to by <I>environ</I>, the library may have to allocate new space at runtime and copy over the existing contents. (It could use <I>realloc</I>, for example.) As a result, the table pointed to by <I>envp</I> will no longer be the current table. Therefore, once you use <I>putenv</I>, you should access variable definitions using <I>getenv</I> rather than <I>envp</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The actual strings representing the definitions are actually part of the user's program. For example in <A href="list5.htm">Listing 5</a>,
 <I>ev</I> is an automatic array containing the definition for <I>test. ev</I> is defined via <I>putenv</I>, and one of the <I>environ</I> table entries is initialized to <I>&amp;ev[O]</I>. As a result, changing the contents of the array <I>ev</I> indirectly changes the definition of the variable <I>test</I>. (As shown, the 2 is changed to <I>x</I>.)</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
By changing <I>ev</I> to contain <I>"xyz"</I>, the pointer in <I>environ</I> now points to that string and the definition of <I>test</I> is lost. When the environment table is displayed, the following entry is shown:</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>envp[4] ==&gt;  |xyz|</pre>
As a result, you have an invalid format entry in the table.<P>
You've seen now that modifying such strings directly in your program might indirectly affect the contents of <I>environ</I>. In particular, if you pass an automatic array to <I>putenv</I> and then execute a <I>return</I> statement, that array will no longer exist and its <I>environ</I> entry will point to where it used to be. A subsequent attempt to access that variable using <I>getenv</I> will result in undefined behavior.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
If <I>ev</I> is an automatic pointer instead, the problem of table corruption does not occur. For example:</FONT></FONT><P>
<pre>char *ev = "test=1234";
ev = "xyz";</pre>
produced the output<P>
<pre>string defined as &gt;1234&lt;
string defined as &gt;1234&lt;</pre>
The string literal <I>"test=1234"</I> is a static array of <I>char</I> allocated at compile-time. When the address of the string is given to <I>putenv</I>, it is placed in <I>environ</I>. When <I>ev</I> is made to point elsewhere, the entry in <I>environ</I> remains intact. This would not be true if the contents of the memory to which <I>ev</I> points were changed.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0258_0155">Constructing Full Directory Paths<A name="0258_0155"></FONT></h4></P>
Some MS-DOS compilers provide a library function called _<I>searchenv</I>, which allows traversing a variable definition containing a list of directory path names. Given a filename and a variable name, _<I>searchenv</I> searches all directories specified by the variable to construct the full pathname for the specified file.</FONT></FONT></FONT></FONT><P>
The _<I>searchenv</I> in <A href="list6.htm">Listing 6</a>
is case-sensitive. The variable <I>PATH</I> does not match <I>path</I>. The file <I>link.exe</I> is found and has a full file specification of <I>c:\dos\link.exe</I>. As you can see, the listing preserves the filename's case in the path generated. While this is not a problem on MS-DOS (since the filenames are not case-sensitive), you should check case-sensitivity on other systems.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>

<h4><a href="../../../source/1990/nov90/jaeschke.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
