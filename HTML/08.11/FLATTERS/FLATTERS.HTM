


<HTML>
<HEAD>

<TITLE>November 1990/UNIX Programming: Methods and Tools</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocnov.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Book Reviews</FONT></H2>

<hr><h2 align="center"><font color="#800000">UNIX Programming: Methods and Tools<A name="0266_015C"><A name="0266_015C"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0266_0000"><A name="0266_0000">Reviewed By Chris Flatters</font></h3><hr><blockquote><P>
<P><i><A name="0266_0000"><A name="0266_0000">Chris Flatters is a scientific programmer who works with FORTRAN and (occasionally) C on UNIX and VMS systems. Outside<I></I> <I></I>working hours he fiddles with C and C++ on an IBM PC.</i></P><P>
<I>UNIX Programming: Methods and Tools</I> is a tutorial introducing the UNIX shell and utilities. It mainly focuses on the Bourne shell but devotes one chapter to the C shell. The book, which is intended for those with little or no computing experience, discusses only the more general UNIX tools and does not cover the UNIX text processors (<I>nroff</I><I> </I>and<I> </I><I>troff</I>) or the specialized programming tools.</FONT></FONT></FONT></FONT><P>
The book is well-organized. Each chapter begins by listing information that will be covered, and each chapter also includes an extensive set of exercises (some of the exercises include solutions at the end of the book) and suggestions for further reading. The author also includes experiments for the reader to try out at the keyboard. Finally, each chapter contains a number of tables summarizing commands, symbols and keywords covered in that chapter. Unfortunately the summary tables (and many other tables in the text) are poorly laid out and difficult to read. Also, they contain a number of serious misprints.<P>
The opening chapter introduces the reader to the UNIX system. It contains a short history of the development of the UNIX system and explains the relation between the shell and the operating system. The user is taken through the log-on process and shown how to issue simple commands, including those that allow users to communicate with each other (<I>write</I><I> </I>and<I> mail</I>). Unfortunately, the author assumes that the user's default log-in shell is the Bourne shell, which is not the case on many systems. Although the author notes that other shells exist he does not give any guidance on how they may be selected. There is also a curiously anachronistic note in that the author assumes that the erase character is set to <I>#</I> and the kill character (which erases a whole line) to <I>@</I> (the reader is shown how to change these assignments with the <I>stty</I> command). These characters are indeed the defaults for the UNIX system but date back to the days when computer users had to talk to the computer using teletypes. This is no longer the case. Most UNIX systems now automatically redefine the erase and kill keys to be more suitable for terminals.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
After basic training, the author presents the finer details of the UNIX file system. The level of detail is probably inappropriate to the beginner &#151; the author suggests studying octal dumps of directories and discusses i-nodes (the internal structures used by UNIX to describe files). This section of the book does, however, contain useful information on setting file protections.<P>
The author then introduces the user to the concept of processes and explains that the various ways of invoking a UNIX command may or may not involve the creation of a new <I>child</I> process. Although the author explains some important points, the discussion of processes is incomplete. For example, the fact that a new process must be created to handle the second and subsequent commands in a pipe (so that non-exported variables will be unknown to these commands) is overlooked.</FONT></FONT><P>
Next, the book discusses shell programming proper. Shell programming is taught mainly by example. In many cases, the author presents a simple procedure and adds features in subsequent examples. This rudimentary approach is appropriate for the novice, but readers who have some programming experience will find progress painfully slow.<P>
The author devotes a chapter to techniques for designing and building procedures. Although beginning programmers need to be exposed to this topic, some of the techniques are treated only superficially.<P>
After shell programming, the author discusses the more advanced general-purpose UNIX utilities: the <I>grep</I> family of text searching programs; the stream editor, <I>sed</I>; and the <I>awk</I> pattern matching language. The description of <I>grep</I> and <I>sed</I> is basically solid but is marred by a garbled account of regular expressions. The book covers the original version of <I>awk</I> and not the more recent version described by Aho, Kernigan and Weinberger in The <I>awk</I> Programming Language (this development was probably too recent for inclusion). Nonethless, the reader is introduced to <I>awk</I> basics, including the relationship between <I>awk</I> and C.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The book concludes with a short description of the C shell. The description is by no means comprehensive, but it does present features of the C shell that are not available in the Bourne shell.<P>
In the preface the author claims that the procedures developed in the examples throughout the book are intended to be useful tools. He does not, however, achieve his aim. Most of the more sophisticated examples are programs for playing word games rather than accomplishing any useful task. The author's intent was probably defeated by the comprehensive UNIX utilities.<P>
Readers with even moderate programming experience will almost certainly find UNIX Programming: Methods and Tools pitched at too low a level. Although it does contain some useful information, I would also hesitate to recommend this book to a rank beginner. It has a number of flaws and gives the impression of being rather diffuse and academic. In many ways the book appears to be an introduction to programming using the UNIX shell. I don't think this approach will appeal to many UNIX users, most of whom (even the beginners) will want to use the shell to achieve some specific objective. These users will find that there is surprisingly little hard information in UNIX Programming: Methods and Tools and the information that is present is often made inaccessible by a poor index.<P>
<I>UNIX Programming: Methods and Tools</I><br>
James F. Peters III<br>
Harcourt-Brace-Jovanovich, 1988<br>
447 pages<br>
ISBN 0-15-593021-4<P>
</BLOCKQUOTE>
</BODY>
</HTML>
