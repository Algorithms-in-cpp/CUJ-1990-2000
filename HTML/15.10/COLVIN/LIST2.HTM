



<HTML><HEAD>

<TITLE>October 1997/Integrating COM Enumerators and STL Iterators/Listing 2</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4>Listing 2:	Wrapper to treat an IEnum interface as a forward interator</h4>

<pre>
///////////////////////////////////////////////////////////////
// ENUMITER.H

#include &lt;iterator&gt;
#include &lt;algorithm&gt;
#include &lt;exception&gt;

#include &lt;wtypes.h&gt;
#include &lt;winerror.h&gt;

struct BadResult : std::exception {
   HRESULT result;
   BadResult(HRESULT hr) : result(hr) {}
};

template&lt;class IEnum, class Value&gt;
struct EnumAsIterator 
: std::iterator&lt;std::forward_iterator_tag,Value&gt; {

   // construct - copy - destroy
   EnumAsIterator(IEnum* p=0)
   : pEnum(p),pClone(0),nNext(0) {
      if (pEnum) {
         HRESULT result;
         if (result = pEnum-&gt;Clone(&amp;pClone))
            throw BadResult(result);
         pEnum = pClone;
         pEnum-&gt;AddRef();
         ++*this;
      }
   }
   EnumAsIterator(const EnumAsIterator&amp; r)
   : pEnum(r.pEnum),pClone(0),nNext(r.nNext),value(r.value) {
      if (pEnum) {
         HRESULT result;
         if (result = pEnum-&gt;Clone(&amp;pClone))
            throw BadResult(result);
         pEnum-&gt;AddRef();
      }
   }
   EnumAsIterator&amp; operator=(const EnumAsIterator&amp; r) {
      if (*this != r) {
         this-&gt;~EnumAsIterator();
         new (this) EnumAsIterator(r);
      }
      return *this;
   }
   ~EnumAsIterator() {
      if (pClone) {
         pClone-&gt;Release();
         pEnum-&gt;Release();
      }
   }

   // comparison
   bool operator==(const EnumAsIterator&amp; r) const {
      return pEnum == r.pEnum &amp;&amp; nNext == r.nNext;
   }
   bool operator!=(const EnumAsIterator&amp; r) const {
      return !(*this == r);
   }

   // dereference
   Value operator*() const {
      return value;
   }

   // pre-increment
   EnumAsIterator&amp; operator++() {
      if (pClone) {
         HRESULT result;
         unsigned long n;
         if (result = pClone-&gt;Next(1,&amp;value,&amp;n)) {
            if (result == S_FALSE) {
               pClone-&gt;Release(), pClone = 0;
               pEnum-&gt;Release(), pEnum = 0;
               nNext = 0;
            } else
               throw BadResult(result);
         } else
            nNext++;
      }
      return *this;
   }

   // post-increment
   EnumAsIterator operator++(int) {
      EnumAsIterator tmp(*this);
      ++*this;
      return tmp;
   }

private:
   IEnum *pEnum, *pClone;
   unsigned long nNext;
   Value value;
};
//End of File
</pre>
</body></html>
