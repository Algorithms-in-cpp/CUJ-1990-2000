



<HTML><HEAD>

<TITLE>October 1997/Standard C/C++/Listing 1</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4>Listing 1:	Class locale </h4>

<pre>
class locale {
public:
    enum category {collate, ctype, monetary,
        numeric, time, messages, all, none};
            // CLASS id
    class id {
    public:
        id(size_t _X = 0)
            : _Id(_X) {}
        operator size_t()
            {_Lockit _Lk;
            if (_Id == 0)
                _Id = ++_Id_cnt;
            return (_Id); }
    private:
        size_t _Id;
        static int _Id_cnt;
        };
    class _Locimp;
            // class facet
    class facet {
        friend class locale;
        friend class _Locimp;
    public:
        static size_t _Getcat()
            {return ((size_t)(-1)); }
        void _Incref()
            {_Lockit _Lk;
            if (_Refs &lt; (size_t)(-1))
                ++_Refs; }
        facet *_Decref()
            {_Lockit _Lk;
            if (0 &lt; _Refs &amp;&amp; _Refs &lt; (size_t)(-1))
                --_Refs;
            return (_Refs == 0 ? this : 0); }
    protected:
        virtual ~facet()
            {}
        explicit facet(size_t _R = 0)
            : _Refs(_R) {}
    private:
        facet(const facet&amp;);    // undefined
        const facet&amp; operator=(const facet&amp;);    // undefined
        size_t _Refs;
        };
            // CLASS _Locimp
    class _Locimp : public facet {
    protected:
        ~_Locimp();
    private:
        friend class locale;
        _Locimp(bool _Xp = false);
        _Locimp(const _Locimp&amp;);
        void _Addfac(facet *, size_t);
        static _Locimp * _Makeloc(const _Locinfo&amp;,
            category, _Locimp *, const locale *);
        facet **_Fv;
        size_t _Nfv;
        category _Cat;
        bool _Xpar;
        string _Name;
        static _Locimp *_Clocptr, *_Global;
        };
    template&lt;class _E, class _Tr, class _A&gt;
        bool operator()(const basic_string&lt;_E, _Tr, _A&gt;&amp;,
            const basic_string&lt;_E, _Tr, _A&gt;&amp;) const;
    template&lt;class _F&gt;
        locale(const locale&amp; _X, _F *_Fac);
    template&lt;class _F&gt;
        locale combine(
            const locale&amp; _X);
    locale() throw()
        : _Ptr(_Init())
        {_Locimp::_Global-&gt;_Incref(); }
    locale(_Uninitialized)
        {}
    locale(const locale&amp; _X) throw()
        : _Ptr(_X._Ptr)
        {_Ptr-&gt;_Incref(); }
    locale(const locale&amp;, const locale&amp;, category);
    explicit locale(const char *, category = all);
    locale(const locale&amp;, const char *, category);
    ~locale() throw()
        {if (_Ptr != 0)
            delete _Ptr-&gt;_Decref(); }
    locale&amp; operator=(const locale&amp; _X) throw()
        {if (_Ptr != _X._Ptr)
            {delete _Ptr-&gt;_Decref();
            _Ptr = _X._Ptr;
            _Ptr-&gt;_Incref(); }
        return (*this); }
    string name() const
        {return (_Ptr-&gt;_Name); }
    const facet *_Getfacet(size_t _Id) const;
    bool operator==(const locale&amp;) const;
    bool operator!=(const locale&amp; _X) const
        {return (!(*this == _X)); }
    static const locale&amp; classic();
    static locale global(const locale&amp;);
    static locale empty();
private:
    locale(_Locimp *_P)
        : _Ptr(_P) {}
    static _Locimp *_Init();
    _Locimp *_Ptr;
    };
//End of File
</pre>
</body></html>
