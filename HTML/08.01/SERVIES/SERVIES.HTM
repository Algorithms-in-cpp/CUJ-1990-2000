<HTML>
<HEAD>

<TITLE>January 1990/Spiffier Windows For Turbo C</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjan.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">Spiffier Windows For Turbo C<A name="0035_000E"><A name="0035_000E"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0035_0000"><A name="0035_0000">Tony Servies</font></h3><hr><blockquote><P>
<P><i><A name="0035_0000"><A name="0035_0000">Tony Servies is a programmer/analyst with World Computer Systems in Oak Ridge, Tennessee. Presently he is working on a project to develop computer-based training programs for the U.S. Navy. His computer interests include utilities and C programming. You may contact him at Route 1, Box 143, Greenback, TN 37742.</i></P><P>
Want to spice up your user interface with flashy windows with only a minimal amount of coding and time? With a few lines of code and Borland's Turbo C, it's possible.<P>
<h4><FONT COLOR="#000080"><A name="0035_000F">Turbo C Window Interface<A name="0035_000F"></FONT></h4></P>
Two functions can be used to create text windows in Turbo C: <I>gettext()</I> and <I>puttext()</I>. Each function either gets a screen image or puts an image to the screen, respectively. The programmer supplies only the window coordinates and a character string pointer (or character array, if you will); the function does the rest. These remarkable routines do some rudimentary screen I/O quickly and cleanly.</FONT></FONT></FONT></FONT><P>
One drawback though is the inherent lag between the time you write to the window area and the moment the text is displayed. The user 'sees' any text writing that you perform. Most applications today require a window flashed on the screen intact, such as in a pull-down menu.<P>
The code in <A href="list1.htm">Listing 1</a>
allows writing to a window before it is displayed on the screen. Then when the window is flashed on the screen, it is complete.<P>
You call <I>puttext_write</I> with the <I>x,y</I> coordinates, window size, the character string to display, the attribute for the string, and the pointer to the window buffer. The <I>x,y</I> coordinates start from the upper left corner with the location <I>0,0</I>. The size of the window is given with the number of columns (width) and the number of rows (heighth). The string to display is simply a character string stored in standard C format; a <I>'\0'</I> character terminates the string. The buffer is a pointer to an area of characters that denotes the window area. The string attribute is the usual color attributes found in almost every reference manual on PCs.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0035_0010">How It Works<A name="0035_0010"></FONT></h4></P>
<I>puttext_write</I> first checks that you are not positioning the data beyond the physical bounds of the window. Of course, this routine will wrap any text past the end of a line onto the following line (unless it is the last line in the window).</FONT></FONT><P>
The routine then gets the pointer address for the last character and attribute pair in the window area, called <I>maxbuffer</I> in the subroutine. The offset for the proper <I>x,y</I> location is added to the buffer so that it points to the correct character.</FONT></FONT></FONT></FONT><P>
While the buffer location is less than the <I>maxbuffer</I> pointer and the character in the string is not the end of string terminator <I>('\0')</I>, the <I>while</I> loop updates the character and attribute of the buffer. The loop terminates only when the buffer overflows (<I>buffer</I> &gt;= <I>maxbuffer</I>) or at the end of <I>string</I> (*<I>string</I> == <I>'\0'</I>). Now, just put the window on the screen and you're ready to go. I've included a quick and dirty sample program illustrating the flashy windows routine (<A href="list2.htm">Listing 2</a>)
.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Note how easy it is to create a window. Just use a character array of <I>XSIZE*YSIZE*2</I> bytes. (You multiply the area by two because each displayed character is followed by a byte of attribute information (color, blink, etc.).)</FONT></FONT><P>
The program then clears the window and sets all of the attributes. In this example I set all attributes to magenta characters on cyan background. Then the routine that does the actual call to <I>puttext_write()</I> loops through ten times. After the page is full, I put the window on the screen with the <I>puttext()</I> command and wait for half a second. The routine loops through nine more times until it completes the <I>for</I> loop. I then restore the original screen with the <I>puttext()</I> call for the original screen area (<I>oldbuffer</I>).</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
This routine should enable you to enhance your pull- down, pop-up, and user-entry screens. Feel free to modify the code to account for border areas, highlighted text, etc.<P>

<h4><a href="../../../source/1990/jan90/servies.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY></HTML>
