<HTML>
<HEAD>

<TITLE>January 1990/Questions & Answers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjan.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Questions &amp; Answers<A name="0041_001A"><A name="0041_001A"></font></h2><P>
<h3 align="center"><A name="0041_0000"><A name="0041_0000">Readability, Portability, And Coding Style</h3><P>
<h3 align="center"><font color="#800000">Ken Pugh</font></h3><hr><blockquote><P>
<P><i><A name="0041_0000"><A name="0041_0000">Kenneth Pugh, a principal in Pugh-Killeen Associates, teaches C language courses for corporations. He is the author of C Language for Programmers and All On C, and is a member on the ANSI C committee. He also does custom C programming for communications, graphics, and image databases. His address is 4201 University Dr., Suite 102, Durham, NC 27707.</i></P><P>
<B>Q</B><P>
I would appreciate your comments on the following questions and problems:<P>
1.     Type <I>char</I>: signed or unsigned?<P>
Most compilers consider <I>chars</I> as signed by default. We, European users, make extensive use of ASCII codes above 127 and the signed chars default does not seem to be the best choice. Which mode, in your opinion, is "better"? Why are <I>constant chars</I> considered as <I>ints</I>? The following:<P>
<pre>char c = 'é';
if (c == 'é')</pre>
will work only if default <I>char</I> is unsigned. Otherwise, a cast to (<I>char</I>) is necessary to get the program to work, yet the constant <I>é</I> is clearly a <I>char</I>, not an <I>int</I>.<P>
2.     Good use or abuse of <I>#defines</I> and <I>typedefs</I>?<P>
What does one think of the current practice of <I>#define</I>ing or <I>typedef</I>ing native C types, like <I>char</I> into <I>BYTE</I>,<I> unsigned char</I> into <I>BYTE</I> or <I>UBYTE</I>,<I> char</I> * into <I>TEXT</I>,<I> int</I> into <I>COUNT</I>,<I> int</I> into <I>BOOL</I>, etc.<P>
Is there really a reason for this (except (sometimes!) for portability, of course)? There is no such things (as far as I know) in the standard library header files! Moreover, when strictly prototyped programs are compiled the result is generally a long list of type mismatch errors (often pointer mismatches between (<I>char</I> *) and (<I>unsigned char</I> *)).<P>
3.     New C programming style<P>
What do you think of the 'new' (?) C style programming, à la PASCAL, with (long) identifiers mixing lowercase and uppercase and banishing the underscore?<P>
Thanks for your opinion and sincerely yours,<P>
Hubert Toullec<br>
Angers, France<P>
<B>A</B><P>
In the ANSI C committee meetings, there was considerable discussion as to whether a particular feature of the language should be made right or whether backward compatibility should be preserved, to avoid "breaking" existing programs that used documented features of the language. If George Burns (in "Oh God") remade the world from scratch, he "would make the avocados with smaller seeds"; judging from the committee's discussion of this topic, remaking C is much more complex.<P>
Several features  were left unchanged for the sake of backward compatibility including the priority of the operators (even though some of the bitwise operators could be used more comfortably if the priorities were modified).<P>
Similarly, the type of plain <I>chars</I> was specifically left unchanged and thus remains unspecified (i.e. not specifically typed as signed or unsigned). I agree with you that <I>unsigned chars</I> are more useful. I sometimes use the <I>char</I> type to hold small integer values, but they are usually non-negative integers.<P>
The <I>char</I> data type has been converted to <I>int</I> since the early days of the language. That eliminates having separate rules for character arithmetic. Character constants should be treated the same way (signed or unsigned) as character variables. Note that standard ASCII includes only seven bit characters, so none of its values have the high order bit set. The C language does not specify that programs must run if you include non-ASCII characters. (Actually it specifies exactly which source characters are acceptable, but that basically is the ASCII set). With your example,<P>
<pre>char c = '&eacute;';
if (c == '&eacute;')</pre>
you have used a character that is not specified as being standard. The compiler is not even obliged to compile the code. If you used the octal or hexadecimal escape sequence to represent the character, then the compiler would treat it as a regular character constant. I compiled with Quick-C and ran the program in <A href="list1.htm">Listing 1</a>
with one unexpected result. The results were:<P>
<pre>Unequal -118 138
(char) Equal -118 -118
Hex Equal -118 -118
Hex (char) Equal -118 -118</pre>
Notice that the compiler treated both the <I>char</I> variable and the <I>char</I> constant as signed. However, it treated the non-standard character as a regular integer value. Some compilers provide a runtime switch on the interpretation of character variables. You might try using one that has such a switch.<P>
On your next question, I am strongly in favor of using <I>typedef</I>s to define logical data types. Using <I>typedef</I>s is preferable to using <I>#define</I>s for consistency's sake, as there are many types which cannot be described in terms of a <I>#define</I>.<P>
Declaring variables with <I>typedef</I>s captures a significant amount of information for the maintenance programmer. Unfortunately the C standard, in my opinion, does not go far enough in checking the use of <I>typedef</I>s. My favorite illustration is:<P>
<pre>typedef SPEED double;
typedef TIME double;
typedef DISTANCE double;
SPEED compute_speed(time, distance)
TIME time;
DISTANCE distance;
     {
     SPEED speed;
     if (distance != 0.0)
         speed = time / distance;
     else
         speed = 0.0;
     return speed;
     }</pre>
and in another program:<P>
<pre>SPEED car_speed;
TIME car_time;
DISTANCE car_distance;
   car_speed = compute_speed(car_time, car_distance);
   car_speed = compute_speed(car_distance, car_time);</pre>
Under the ANSI standard, both of these function calls are compatible, but logically one is erroneous. Some super lint or the compiler itself may one day use the <I>typedef</I> information for error checking.<P>
I agree that there is a problem with the type checking performed when comparing or assigning <I>unsigned char</I> pointers and regular <I>char</I> pointers. This problem is most irritating when it forces you to write the declaration as:<P>
<pre>unsigned char *string = "ABC";</pre>
with a cast as:<P>
<pre>unsigned char *string = (unsigned char *) "ABC";</pre>
The ANSI committee debated whether it would be okay to not require such a cast in an initialization statement, but decided that consistency in typing was more important.<P>
Of course, I strongly urge using full names for the type names, e.g. BOOLEAN instead of BOOL, etc.<P>
On your final question, I am in favor of readable and meaningful variable and function names. Some people may have heard of studies that conclude otherwise, but ALongVariable-Name appears less readable to me than a_long_variable_name. The latter appears closer to what you would expect to read in normal text.<P>
How much you should use abbreviations in naming is an open issue. The more abbreviations you use, the more you will have to remember and the more the maintenance programmer will have to infer and comprehend when reading the program. For example, <I>XMT</I> for transmit and <I>TX</I> for transaction may be common, but does <I>CMP</I> stand for compare or compute?<P>
<B>Q</B><P>
I am developing a simulation program for study of our company's manufacturing plant using C Language compilers on IBM-PC/AT Machine.<P>
I shall be thankful to you for sending information on various software tools in C language for incorporating graphics in the Program.<P>
P.K. Gupta<br>
Gujarat, India<P>
<B>A</B><P>
The only package with which I personally have extensive experience is Essential Graphics by South Mountain Software, Inc., 76 So. Orange Avenue, South Orange, NJ 07079 (201) 762-6965 ($299 list, $230 street). You can distribute products built with Essential Graphics royalty-free, and you can use direct coordinates (your <I>x</I>,<I>y</I> values specify an exact pixel location) or world coordinates (your <I>x</I>,<I>y</I> values are transformed into a pixel location), the latter at some price in speed.<P>
The names in this package are somewhat unintelligible, since the developers tried to stay with an eight character name. For example: <I>grbx</I> draws a box, <I>grwx</I> draws an x at a point, <I>hsrect</I> draws a rectangle with a hatch style and a label. As I mentioned above, I would prefer something like <I>graph_box</I>,<I> graph_write_x</I>, and <I>hatch_rectangle_with_label</I>.<P>
Essential Graphics also supports loading and saving PC Paintbrush .PCX files.<P>
There are several other packages on the market, including Halo Graphics and Advantage Graphics. Perhaps some of our readers may have comments on these or other packages.<P>
<h4><FONT COLOR="#000080"><A name="0041_001B">Reader Responses:<A name="0041_001B"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0041_001C">Commodore 128<A name="0041_001C"></FONT></h4></P>
In the May 1989 issue of <I>The C Users Journal</I>, I took note of the questions by Mr. David Ockrassa regarding printing special characters such as the braces, vertical bar, and tilde on the Commodore 128. Before I started programming the Amiga in C, I dealt with the same problem. <P>
The problem is two-fold in nature. Because these characters are not in the standard font set of the Commodore 128, the C language packages for that machine generally include an editor that re-defines several characters bitmaps to conform to the missing ones. These are saved with the file as a non-ASCII byte. The problem occurs when the file is printed, because the redefined characters may or may not have the same font set as that of the printer being used. <P>
The solution is to write a small printer utility in C. The accompanying code (<A href="list2.htm">Listing 2</a>)
 accomplishes this task, and is available on most commercial bulletin boards. I wrote several printer drivers of this type for the Commodore 128 for use with different printers that have a few more features than the included code such as pagination and filename/date headers. <P>
John D. Clark<br>
St. Louis, MO<P>
<h4><FONT COLOR="#000080"><A name="0041_001D">MS Dynamic Data Exchange:<A name="0041_001D"></FONT></h4></P>
This letter is in response to Ken Libert's request for material concerning MS Dynamic Data Exchange.<P>
If you contact Microsoft's product support services and ask for Windows Software Development Kit support, you can request their Application Notes concerning Dynamic Data Exchange. With this publication you get a disk complete with examples and source.<P>
The DDEAPP example allows you to initiate a session with Excel and actually exchange cell data in multiple formats.<P>
Tim Kuntz<br>
University of Pittsburgh<P>

<h4><a href="../../../source/1990/jan90/pugh.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
