


<HTML>
<HEAD>

<TITLE>January 1990/A Simple Application Environment</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjan.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">A Simple Application Environment<A name="0033_000C"><A name="0033_000C"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0033_0000"><A name="0033_0000">Mark A. Johnson</font></h3><hr><blockquote><P>
<P><i><A name="0033_0000"><A name="0033_0000">Mark Johnson has been designing software for a major R&amp;D corporation since 1976. He received a BSCS from the University of Pittsburgh and his MSCS from Carnegie-Mellon. His current computer interests include languages, programming for children, business applications, and computer-generated music. Mark is continuing to develop other DCUWCU applications.</i></P><P>
Having used a mouse in user interfaces since 1981, I believe it to be most convenient way to inform a computer program what you want it to do. I wanted to use a mouse in a number of PC programs and so looked into a few application environments. Microsoft Windows and Digital Research's GEM disappointed me, due to the complexity that had to be mastered. The resource construction sets, complex window management, and other overheads needed to write a simple application led me to write my own simple application environment based on Turbo C graphics routines and a public domain mouse interface.<P>
My goal was to build an easy-to-use environment that provides a mouse-driven cursor, stacked pop-up menus, and forms that contain editable fields and a variety of selectable buttons. The environment would keep track of what the user was doing, inform the application as needed, and clean up after itself.<P>
An additional goal was to facilitate porting the environment to other machines that have a mouse, bitmap graphics, console I/O, and a simple timer. I have the same DCUWCU environment on my PC compatible and Atari ST, allowing me to easily move applications between systems.<P>
<h4><FONT COLOR="#000080"><A name="0033_000D">Operation<A name="0033_000D"></FONT></h4></P>
A typical application begins with a blank screen (or suitable greeting) showing an arrow-shaped cursor controlled by the mouse. Pressing the right mouse button displays a set of stacked pop-up menus. While holding the right mouse button down, the user selects an item (or another menu) from the front-most menu and then releases the button. If a menu item was selected, then the application acts on that selection. If another menu was selected, it is brought to the front of the menu stack, ready for another round of menu item selection. Pressing the left mouse button or a keyboard key usually causes an application-specific action, often resulting in a form appearing on the screen that the user must fill out. When processing the form, all mouse and keyboard events are handled by the environment. Keyboard input is directed to the current editable field, denoted by the special input cursor. A <I>TAB</I> moves the input cursor to the next editable field. An <I>ESC</I> (cancel) or <I>ENTER</I> (accept) terminates form processing, returning data and control back to the application. Some forms may contain small text labels, called form buttons, that are selected (or de-selected) by moving the cursor over them and pressing the left mouse button. There are three types of buttons: plain, radio, and exit. A plain button is a simple on/off switch. A radio button is a one-of-many switch, much like the buttons on a car radio. An exit button is like the plain button, but causes form processing to end.</FONT></FONT></FONT></FONT></FONT></FONT><P>
The application environment works equally well when no mouse is present by using the cursor keys to simulate mouse motion and the function keys F1 and F2 to simulate the left and right mouse buttons. Pressing F2 once simulates pressing the right mouse button; another press of F2 simulates its release. A single press of the F1 button simulates the left mouse button.<P>
<h4><FONT COLOR="#000080"><A name="0033_000E">Application Interface<A name="0033_000E"></FONT></h4></P>
The interface between application and environment was made as simple as possible: strings are used to define forms and menus, pointers to variables are used to store values collected by forms, and calls to functions inform the application of user events, such as menu selection or mouse button clicks.<P>
The application environment follows (and is named after) what is called "The Hollywood Principle," (or "don't call us, we'll call you"). An application developer supplies four critical routines, called when the application environment detects various user interface events.<P>
<h4><FONT COLOR="#000080"><A name="0033_000F">start(argc, argv, envp) int argc; char **argv, **envp;<A name="0033_000F"></FONT></h4></P>
This is the initialization routine called immediately after initializing the graphics interface but before the environment is completely started. It is passed the same arguments normally passed to a C <I>main()</I> routine. The <I>start()</I> routine usually initializes the application and creates the menu stack using repeated calls to <I>add_menu()</I>.</FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0033_0010">menu(m, i)<A name="0033_0010"></FONT></h4></P>
The <I>menu()</I> routine is called whenever a menu selection is made. The application environment supports a stack of pop-up menus. Any number of menus can be supported, although only two or three are usually active at any one time in order to minimize interface complexity (see <I>menu_state()</I> below). The <I>m</I> argument identifies which menu was selected. When the menu is first declared (see <I>add_menu()</I>), the application provides a value that identifies the menu. This same identifer value is passed back to the application when a menu is selected. The <I>i</I> argument specifies which menu item was selected, a value of <I>1</I> meaning the first item, etc.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0033_0011">button(b, x, y)<A name="0033_0011"></FONT></h4></P>
The <I>button()</I> routine is called when a mouse button is pressed. The right mouse button is reserved for menu manipulation, all others are passed to the application. The <I>b</I> argument is the button number (usually <I>1</I>) and the <I>x</I> and <I>y</I> arguments are the mouse coordinates when the button was pressed.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0033_0012">keyboard(key)<A name="0033_0012"></FONT></h4></P>
The <I>keyboard()</I> routine is called whenever a console key is struck. The character typed by the user is contained in the single argument.</FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0033_0013">timer(t)<A name="0033_0013"></FONT></h4></P>
The (optional) <I>timer()</I> routine is called whenever an application-requested timer expires. When the timer is requested, a value identifying the timer is passed to the application environment. The same identifer value is passed back to the application in the <I>t</I> argument when the timer expires.</FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0033_0014">Environment Interface<A name="0033_0014"></FONT></h4></P>
The application environment provides some basic routines that an application can call for control and service.<P>
<h4><FONT COLOR="#000080"><A name="0033_0015">finish()<A name="0033_0015"></FONT></h4></P>
The <I>finish()</I> routine is called whenever the application is done and the program must exit.</FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0033_0016">add_menu(m, mdef) char *mdef;<A name="0033_0016"></FONT></h4></P>
The <I>add_menu()</I> routine adds a menu to the current set of pop-up menus maintained by the environment. An application typically initializes all its menus from the <I>start()</I> routine. The <I>m</I> argument is remembered by the environment and passed back to the application when a menu selection is made. The <I>mdef</I> argument is a string that defines the menu. For example,</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>add_menu(1, "Main:About|Help|Quit")</pre>
defines a menu identified as <I>menu 1</I>, titled <I>Main</I>, and with three items: <I>About, Help</I>, and <I>Quit</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0033_0017">menu_state(m, on)<A name="0033_0017"></FONT></h4></P>
The <I>menu_state()</I> routine allows the application to activate or de-activate a particular menu. The <I>m</I> argument refers to the menu defined with a previous <I>add_menu()</I> call. The <I>on</I> argument should be set to <I>1</I> to activate or <I>0</I> to deactivate the menu.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0033_0018">menu_item(m, i, str) char *str;<A name="0033_0018"></FONT></h4></P>
The <I>menu_item()</I> routine is used to change the name of a particular menu item. For example, suppose a drawing program can turn a grid on and off. The application might have a menu item called <I>Grid</I> when no grid is shown and change it to <I>No</I> <I>Grid</I> using <I>menu_item()</I> when the grid is shown.</FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0033_0019">mouse_state(on)<A name="0033_0019"></FONT></h4></P>
The <I>mouse_state()</I> routine will activate or deactivate the mouse-driven cursor. The <I>on</I> variable should be set to <I>1</I> to show the mouse and <I>0</I> to hide it.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0033_001A">mouse_shape(type, bits, hotx, hoty) char *bits;<A name="0033_001A"></FONT></h4></P>
The application can control the cursor's shape with <I> mouse_shape</I>. There are two built-in forms: arrow and cross. A <I> type</I> value of <I>0</I> and <I>1</I> specify arrow and cross, respectively. A <I> type</I> value of <I>3</I> allows the user to specify a custom designed mouse cursor. The <I>bits</I> argument is a pointer to an eight-byte character array containing the mouse bitmap (8 x 8 bits). The <I> hotx</I> and <I>hoty</I> arguments indicate which bit in the bitmap is considered the hotspot of the cursor. For example, the cross form has a hotspot of <I>hotx=hoty=3</I>, which is the center of the 8 x 8 bitmap.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0033_001B">add_timer(t, wait) long wait;<A name="0033_001B"></FONT></h4></P>
Many applications, especially games, require some sense of the passage of time. Using <I>add_timer()</I>, the application can arrange for <I>timer()</I> to be called after some time has elapsed. The application's <I>timer()</I> routine can do such things as blank the screen if no activity has taken place for many minutes or move sprites around the screen after a few tenths of a second. The <I>t</I> argument identifies a particular timer and is passed back to the application when the timer expires. The <I>wait</I> argument specifies the needed delay in milliseconds (e.g. <I>wait=1000L</I> is a delay of one second).</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0033_001C">form(def, argptr1, ...) char *def;<A name="0033_001C"></FONT></h4></P>
<I>form()</I> displays a form on the screen, collects data from the user, and deposits it in the variables pointed to by the <I>argptr</I> parameters. This routine is somewhat similar to <I>scanf()</I>. The form definition string defines a number of fields. For example,</FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>" Name: %15s |Number: %5d |%[male|female] %[over 55]| %{ok}"</pre>
This form definition would result in the following being displayed in the middle of the screen surrounded by a rectangle.<P>
<pre>Name:____________________
Number:_____
[male|female] [over 55]
    {ok}</pre>
Most of the text in the definition string is used as titles. A | signifies the beginning of a new line in the form. A data field begins with a % and is associated with a particular variable. There are five types of data fields. (For the examples that follow, assume the following declarations occur before the call to <I>form(): char c, buf[11]; int x;)</I>. (See <A href="table1.htm">Table 1</a>.
) If a character pointer <I>fdef</I> points to the string described in <A href="table1.htm">Table 1</a>,
 the following code fragment uses <I>form()</I> correctly.</FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>char name[16], m_or_f = 0, over_55 = 1, ok = 0;
int number;
if (form(fdef,
        name, &amp;number,
        &amp;m_or_f,
        &amp;over_55,
        &amp;ok)) {
    /* do stuff with name, number, etc. */
}</pre>
After filling out the form, if the user selects the {<I>ok</I>} button or hits <I>ENTER, form()</I> returns a non-zero value. The data values collected by the form and stored in <I>name, number, m_or_f</I>, and <I>over_55</I> are processed further by the <I>if</I> statement. If the user strikes the <I>ESC</I> key while filling out the form, <I>form()</I> returns zero and the processing doesn't take place.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0033_001D">An Example<A name="0033_001D"></FONT></h4></P>
<A href="list1.htm">Listing 1</a>
is a simple drawing program that illustrates how to build a DCUWCU application. The code for this example and the complete source for the DCUWCU have been added to the CUG Library. See the New Releases column by Kenji Hino for more details.<P>
<h4><FONT COLOR="#000080"><A name="0033_001E">Conclusion<A name="0033_001E"></FONT></h4></P>
I have used the "Hollywood Principle" design model for a number of projects and have found it to shorten development time and result in a robust application. The mouse is an effective user interface device and, when coupled with pop-up windows and forms, provides clean, uncluttered operation.<P>
I would like to acknowledge the designers of the many mouse-based user interfaces I have used in the past, such as the Apple Macintosh, Microsoft Windows, DR/Atari GEM, but most significantly the Xerox Mesa Development System, for the inspiration to build this simple application environment.<P>

<h4><a href="../../../source/1990/jan90/johnson.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY></HTML>
