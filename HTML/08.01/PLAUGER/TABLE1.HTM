<HTML><HEAD><TITLE>January 1990/Standard C/Table 1</TITLE></HEAD><BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4><A name="0039_0017">Table 1<A name="0039_0017"></h4><P>
<pre><B>Conversion Specifiers</B></pre><P>
<pre>   In the descriptions that follow, I summarize the match
pattern and conversion rules for each valid conversion
specifier. <I>w</I> stands for the field width you specify, or the
indicated default value if you specify no field width. <I>ptr</I>
stands for the next argument to consume in the varying
length argument list:
<I>   c</I> &#151; stores <I>w</I> characters (default is <I>1</I>) in the array of
<I>char</I> whose first element is pointed at by <I>ptr.</I> It does not
skip leading whitespace.
<I>   d</I> &#151; converts the integer input field by calling <I>strtol</I>
with a base of 10, then stores the result in the <I>int</I> pointed
at by <I>ptr</I>.
<I>   hd</I> &#151; converts the integer input field by calling <I>strtol</I>
with a base of 10, then stores the result in the <I>short</I>
pointed at by <I>ptr.</I>
<I>   ld</I> &#151; converts the integer input field by calling <I>strtol</I>
with a base of 10, then stores the result in the <I>long</I>
pointed at by <I>ptr</I>.
<I>   e</I> &#151; converts the floating point input field by calling
<I>strtod</I>, then stores the result in the <I>float</I> pointed at by
<I>ptr.</I>
<I>   le</I> &#151; converts the floating point input field by calling
<I>strtod</I>, then stores the result in the <I>double</I> pointed at by
<I>ptr.</I>
<I>   Le</I> &#151; converts the floating point input field by calling
<I>strtod</I>, then stores the result in the <I>long double</I> pointed
at by <I>ptr.</I>
<I>   E</I> &#151; is the same as <I>e.</I>
<I>   lE</I> &#151; is the same as <I>le.</I>
<I>   LE</I> &#151; is the same as <I>Le.</I>
<I>   f</I> &#151; is the same as <I>e.</I>
<I>   lf</I> &#151; is the same as <I>le.</I>
<I>   Lf</I> &#151; is the same as <I>Le.</I>
<I>   g</I> &#151; is the same as <I>e.</I>
<I>   lg</I> &#151; is the same as <I>le.</I>
<I>   Lg</I> &#151; is the same as <I>Le.</I>
<I>   G</I> &#151; is the same as <I>e.</I>
<I>   lG</I> &#151; is the same as <I>le.</I>
<I>   LG</I> &#151; is the same as <I>Le</I>
<I>   i</I> &#151; converts the integer input field by calling <I>strtol</I>
with a base of zero, then stores the result in the <I>int</I>
pointed at by <I>ptr.</I> (A base of zero lets you write input
that begins with <I>0, 0x,</I> or <I>0X</I> to specify an actual numeric
base other than 10.)
<I>   hi</I> &#151; converts the integer input field by calling <I>strtol</I>
with a base of zero, then stores the result in the <I>short</I>
pointed at by <I>ptr.</I>
<I>   i</I> &#151; converts the integer input field by calling <I>strtol</I>
with a base of zero, then stores the result in the <I>long</I>
pointed at by <I>ptr.</I>
<I>   n</I> &#151; converts <I>no</I> input, but stores the cumulative
number of matched input characters in the <I>int</I> pointed at
by <I>ptr.</I> It does not skip leading whitespace.
<I>   hn</I> &#151; converts <I>no</I> input, but stores the cumulative
number of matched input characters in the <I>short</I> pointed
at by <I>ptr.</I> It does not skip leading whitespace.
<I>   ln</I> &#151; converts no input, but stores the cumulative
number of matched input characters in the <I>long</I> pointed
at by <I>ptr.</I> It does not skip leading whitespace.
<I>   o</I> &#151; converts the integer input field by calling <I>strtoul</I>
with a base of eight, then stores the result in the
<I>unsigned int</I> pointed at by <I>ptr.</I>
<I>   ho</I> &#151; converts the integer input field by calling
<I>strtoul</I> with a base of eight, then stores the result in the
<I>unsigned short</I> pointed at by <I>ptr.</I>
<I>   lo</I> &#151; converts the integer input field by calling
<I>strtoul</I> with a base of eight, then stores the result in the
<I>unsigned long</I> pointed at by <I>ptr.</I>
<I>   p</I> &#151; converts the pointer input field, then stores the
result in the <I>void</I> * pointed at by <I>ptr.</I> Each
implementation defines its pointer input field to be consistent with
pointers written by the print function.
<I>   s </I>&#151; stores up to <I>w</I> non-whitespace characters (default
is the rest of the input) in the array of <I>char</I> pointed at by
<I>ptr.</I> It first skips leading whitespace, and it always stores a
null character after any input.
<I>   u</I> &#151; converts the integer input field by calling <I>strtoul</I>
with a base of 10, then stores the result in the <I>unsigned</I>
<I>int</I> pointed at by <I>ptr.</I>
<I>   hu</I> &#151; converts the integer input field by calling
<I>strtoul</I> with a base of 10, then stores the result in the
<I>unsigned short</I> pointed at by <I>ptr.</I>
<I>   lu</I> &#151; converts the integer input field by calling
<I>strtoul</I> with a base of 10, then stores the result in the
<I>unsigned long</I> pointed at by <I>ptr.</I>
<I>   x</I> &#151; converts the integer input field by calling <I>strtoul</I>
with a base of 16, then stores the result in the <I>unsigned</I>
<I>int</I> pointed at by <I>ptr.</I>
<I>   hx</I> &#151; converts the integer input field by calling
<I>strtoul</I> with a base of 16, then stores the result in the
<I>unsigned short</I> pointed at by <I>ptr.</I>
<I>   lx</I> &#151; converts the integer input field by calling
<I>strtoul</I> with a base of 16, then stores the result in the
<I>unsigned long</I> pointed at by <I>ptr.</I>
<I>   X</I> &#151; is the same as <I>x.</I>
<I>   hX</I> &#151; is the same as <I>hx.</I>
<I>   lX</I> &#151; is the same as <I>lx.</I>
   % &#151; converts <I>no</I> input, but matches a percent
character. (%)</pre>

</BODY>
</HTML>
