


<HTML>
<HEAD>

<TITLE>January 1990/Writing Standard Headers: The String Functions</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjan.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Portability</FONT></H2>

<hr><h2 align="center"><font color="#800000">Writing Standard Headers: The String Functions<A name="0020_0006"><A name="0020_0006"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0020_0000"><A name="0020_0000">Dan Saks</font></h3><hr><blockquote><P>
<P><i><A name="0020_0000"><A name="0020_0000">Dan Saks is the owner of Saks &amp; Associates, which offers training and consulting in C and C++. He is a member of X3J11, the ANSI C committee. He has an M.S.E. in computer science from the University of Pennsylvania. You can write to him at 287 W. McCreight Ave., Springfield, OH 45504 or call (513) 324-3601.</i></P><P>
In a recent letter to <I>The C Users Journal</I>, Phil Cogar of N.S.W. Australia complained that much of the C source code appearing in this and other programming journals contains references to headers such as <I>&lt;stdlib.h&gt;</I> that are not published along with the code. He observed that if your compiler provides these headers, then typing in the code and getting it to run is usually easy; without them, it may be impossible. He has a legitimate complaint, but as editor Robert Ward points out in his response, it's often impractical to publish the headers with the code. (See <I>The C Users Journal</I>, October 1989, p.138.)</FONT></FONT><P>
To get the programs to run, you can write your own standard headers to go with your existing compiler and library. Although writing an entire Standard C library from scratch is a big chore, you can fill many of the gaps in an existing library by yourself in only a few days.<P>
<h4><FONT COLOR="#000080"><A name="0020_0007">The Standard Headers<A name="0020_0007"></FONT></h4></P>
The fifteen headers specified by the Standard are summarized in <A href="table1.htm">Table 1</a>.
 Most of them declare a set of related library functions, along with any macros and types needed to call them. A few headers don't contain any functions; they simply define useful macros and types that have nowhere else to go. Some macros and types appear in more than one header, but each function is declared only once.<P>
Most compilers supply additional headers. For example, UNIX compilers add headers such as <I>&lt;direct.h&gt;</I>, <I>&lt;fcntl.h&gt;</I> and <I>&lt;process.h&gt;</I>. Many MS-DOS compilers supply some of the UNIX headers, along with others such as <I>&lt;bios.h&gt;</I>, <I>&lt;conio.h&gt;</I> and <I>&lt;dos.h&gt;</I>. None of these headers is covered by the C Standard. Some UNIX headers have been formalized by the IEEE 1003.1 POSIX Portable Operating System Standard, but many aren't covered by any non-proprietary standard. A C program using library headers other than those listed in <A href="table1.htm">Table 1</a>
will not be portable to all Standard C implementations.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
A program accesses the contents of a standard header by referencing the header in an include directive, such as<P>
<pre>#include &lt;stdio.h&gt;</pre>
Headers are often referred to as "include files" because they are almost always implemented as source files with the same names. Other implementations are permitted, and so the Standard is careful not to refer to them as files. Nevertheless, "headers" and "include files" are generally understood to mean the same thing.<P>
<h4><FONT COLOR="#000080"><A name="0020_0008">Determining What You Already Have<A name="0020_0008"></FONT></h4></P>
Before starting to fix your standard headers, you should look to see what you already have. Headers are usually easy to locate them. For example, on UNIX systems the headers for <I>cc</I> are usually in <I>/usr/include</I> (see the subheading <I>FILES</I> on the manual page(s) for <I>cc(1)</I> in your UNIX manual). The default setup for Turbo C on MS-DOS places the headers in <I>\turboc\include</I>. Most MS-DOS compilers do something similar. The headers for DECUS C on my PDP-11 are in the same subdirectory as my compiler executables, which is a subdirectory with the logical name <I>C:</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
You should not be surprised to find that you already have several of the standard headers. The standard library is not pure invention; it's the result of an effort to "codify common existing practice." You will almost certainly find a version of <I>&lt;stdio.h&gt; </I>&#151; the only standard header used by Kernighan and Ritchie in the first edition of <I>The C Programming Language</I><I>. &lt;ctype.h&gt;</I> is also extremely common. Beyond that, it's hard to say just how many headers you're likely to find.</FONT></FONT></FONT></FONT><P>
For example, the DECUS C compiler has only four of the standard headers: <I>&lt;ctype.h&gt;</I>, <I>&lt;setjmp.h&gt;</I>, <I>&lt;stdio.h&gt;</I>, and <I>&lt;time.h&gt;</I>. The UNIX 4.2 BSD compiler (<I>cc</I>) has these four, plus <I>&lt;assert.h&gt;</I>, <I>&lt;errno.h&gt;</I>, <I>&lt;math.h&gt;</I>, and <I>&lt;signal.h&gt;</I>. It also has <I>&lt;varargs.h&gt;</I>, which is very similar to <I>&lt;stdarg.h&gt;</I>. Turbo C 2.0, Microsoft C 5.1 and Zortech C 1.07 (all for MS-DOS) have every header except <I>&lt;locale.h&gt;</I>, but very few of the headers among all three compilers are exactly as they should be.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0020_0009">Where To Put New Headers<A name="0020_0009"></FONT></h4></P>
Before you start creating and modifying headers, you should think about where to put them. You can throw caution to the wind and put the new headers in the same directory as your existing ones (assuming you have the access rights), but then you run a serious risk that some of your old code won't work with the new headers. I recommend creating a directory for your new headers and reconfiguring your compiler environment to search this new directory before it searches the old one. Remove the new headers from the search if you have to. Compiler environments vary so much that I can't explain how to do this for everyone, but I will show you what I've done on a few different systems:<P>
<h4><FONT COLOR="#000080"><A name="0020_000A">On UNIX 4.2 BSD:<A name="0020_000A"></FONT></h4></P>
I put the new headers in a subdirectory <I>/usr/include</I> within my home directory (<I>/u/dsaks</I>). I wrote a shell script called <I>cc </I>that simply contains</FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>/bin/cc -I/u/dsaks/usr/include $*</pre>
This script invokes the UNIX C compiler (in <I>/bin</I>) with the <I>-I</I> option. <I>-I</I> tells the compiler to search for include files in the named directory before searching in the standard places. The <I>$*</I> passes all the arguments to the <I>cc</I> script through to the C compiler.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
I put this script in <I>/u/dsaks/usr/bin</I>, and added this directory name to my shell path variable. I made the script executable by using</FONT></FONT><P>
<pre>chmod +x cc</pre>
This <I>cc</I> command compiles with the new headers. If I need to omit them, I simply rename the command with</FONT></FONT><P>
<pre>mv cc cc.new</pre>
so the <I>cc</I> command reverts to the one in <I>/usr/bin</I> (without <I>-I</I>).</FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0020_000B">On MS-DOS 3.0 and higher:<A name="0020_000B"></FONT></h4></P>
I put the original headers for Microsoft C and Quick C in <I>\ms\include</I>, and my new headers in <I>\ms\usr\include</I>. Both compilers support the <I>-I</I> option, so you can create a <I>cc.bat</I> command file like the UNIX shell script. Yet, Microsoft gives you an easier alternative. The Microsoft compilers use the <I>INCLUDE</I> environment variable to define the search path for include files. I use two different command files to configure the compiler environment. My <I>msnew.bat</I> uses</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>set INCLUDE=c:\ms\usr\include;c:\ms\include</pre>
to put the new headers in the search path, while <I>msold.bat</I> uses</FONT></FONT><P>
<pre>set INCLUDE=c:\ms\include</pre>
to take them out.<P>
Other MS-DOS compilers require slightly different approaches. Zortech's command line compiler, ZTC, uses the <I>INCLUDE</I> environment variable just like Microsoft C, but their integrated environment, ZED, gets its search path from a configuration file maintained by a utility called <I>ZCONFIG</I>. Borland's Turbo C lets you specify the search path in a file called <I>TURBOC.CFG</I>. Consult your compiler user's guide for details.</FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0020_000C">On RT-11 V5.0 and higher:<A name="0020_000C"></FONT></h4></P>
The DECUS C compiler has a built-in preprocessor that's virtually useless. Fortunately, the compiler is distributed with MP, a decent preprocessor from the UNIX User's Group. My compilation command files disable the built-in preprocessor (with the <I>/M</I> compiler switch) and use MP instead.</FONT></FONT><P>
MP has a preset search path for include files. First it looks in the directory with the logical name <I>LB:</I>, then it looks in <I>C:</I>, and finally it looks in <I>SY:</I>. I put the original headers in a directory assigned to <I>C:</I> and the new headers in another directory assigned to <I>LB:</I>. I can remove the new headers from the search by deassigning <I>LB:</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0020_000D">&lt;string.h&gt;<A name="0020_000D"></FONT></h4></P>
I'll begin with <I>&lt;string.h&gt;</I> because it's often missing and yet is easy to create. Once you have it, you'll use it frequently.</FONT></FONT><P>
<I>&lt;string.h&gt;</I> (see <A href="table2.htm">Table 2</a>)
 declares the string handling functions in the library. It also declares one macro, <I>NULL</I>, and one type, <I>size_t</I>, that are needed to use these functions.</FONT></FONT></FONT></FONT></FONT></FONT><P>
There is no universal way to define <I>NULL</I> ---- you tailor the definition to your machine's architecture. The easiest way to obtain a definition for <I>NULL</I> is to steal one from <I>&lt;stdio.h&gt;</I>. If you can't find a definition there or in some other header, then you should probably use</FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>#define NULL ((void *)0)</pre>
if your compiler supports the <I>void *</I> type, or</FONT></FONT><P>
<pre>#define NULL ((char *)0)</pre>
if it doesn't. If you know that your pointers have the same size as type <I>int</I>, you can use simply</FONT></FONT><P>
<pre>#define NULL 0</pre>
If the pointers on your machine have the same size as type <I>long int</I>, you can use</FONT></FONT><P>
<pre>#define NULL OL</pre>
I prefer to use the casts to determine the size of <I>NULL</I>. However, I suspect you'll find that one of the latter two forms is already used in your existing headers. Whichever form you choose, use it consistently.</FONT></FONT><P>
Most MS-DOS C compilers provide pointers in two different sizes, <I>near</I> and <I>far</I>. The headers in these compilers use conditional compilation to select the appropriate definition for <I>NULL</I>, something like</FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>#ifdef _NEAR_POINTERS
#define NULL 0
#else
#define NULL OL
#endif</pre>
If your <I>&lt;string.h&gt;</I> needs a definition like this, you should find it in one of your existing headers. (For more insight into the possible definitions for <I>NULL</I>, see "Doctor C's Pointers: The 'NULL' Macro and Null Pointers" by Rex Jaeschke in <I>The C Users Journal</I>, Sept/Oct, 1988.)</FONT></FONT></FONT></FONT><P>
<I>NULL</I> is defined in several standard headers. The headers may be included in any order, and a given header may be included more than once, so you must insure that the repeated definitions for <I>NULL</I> don't conflict with each other. Most implementations permit "benign" macro redefinitions (repeated definitions formed by identical sequences of tokens) as specified in the Standard. In this case, make all the definitions the same. If your preprocessor doesn't allow any redefinitions, you will have to put a "protective wrapper" around each one, as in</FONT></FONT></FONT></FONT><P>
<pre>#ifndef NULL
#define NULL ((void *)O)
#endif</pre>
<I>size_t</I> is the type of the result of the <I>sizeof</I> operator. The Standard says that it should be an unsigned integral type, so use either</FONT></FONT></FONT></FONT><P>
<pre>typedef unsigned size_t;</pre>
or<P>
<pre>typedef unsigned long size_t;</pre>
You can select the appropriate definition using the program in <A href="list1.htm">Listing 1</a>.
<P>
In many C implementations, <I>sizeof</I> yields a<I> signed int</I> value. You should still define <I>size_t</I> as <I>unsigned</I>, so that operations on objects of that type have the proper unsigned behavior. You can always use <I>size_t</I> to cast the possibly negative result of <I>sizeof</I> to its 'true' unsigned value, as in</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>if ((size_t)sizeof(something_big) &gt; 0)</pre>
For more about <I>size_t</I> and <I>sizeof</I>, see "Doctor C's Pointers: Exploring the Subtle Side of the 'sizeof' Operator" by Rex Jaeschke in <I>The C Users Journal</I>, Feb., 1988 or see Rex's book, listed in References.</FONT></FONT></FONT></FONT><P>
As with <I>NULL</I>, <I>size_t</I> appears in several standard headers. The Standard and many implementations do not allow <I>typedef</I> redefinitions (even "benign" ones) in the same scope, so you may need a protective wrapper around each definition. For example</FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>#ifndef _SIZE_T_DEFINED
typedef unsigned size_t;
#define _SIZE_T_DEFINED
#endif</pre>
You don't have to use the name <I>_SIZE_T_DEFINED</I>. Any identifier beginning with an underscore followed by an upper-case letter or another underscore will do. The Standard reserves these names for the implementation of the compiler (of which the headers are part).</FONT></FONT><P>
Since benign macro redefinitions are usually allowed, you may be tempted to define <I>size_t</I> as</FONT></FONT><P>
<pre>#define size_t unsigned</pre>
in order to eliminate the protective wrapper. I have seen this done in some "ANSI-conforming" compilers. Although you will probably never notice the difference, the macro definition is wrong because it changes the scope of <I>size_t</I>. Use the <I>typedef</I>.</FONT></FONT></FONT></FONT><P>
And now for the functions. Most older C compilers don't support prototypes, so you might have to delete or "comment out" the parameter lists. Some functions return <I>void *</I>. If your compiler won't accept that type, use <I>char *</I>.</FONT></FONT></FONT></FONT><P>
You will find that your library contains some, but not all, of the string functions. Sometimes you will find a standard C function under an archaic name. Many recent books on C have an appendix that details the functions in the standard library. (See references at the end of the article.) You should compare the functions in the standard library with the functions in your compiler's library to find as many matches as you can.<P>
For example, some implementations use <I>index</I> instead of <I>strchr</I>. In this case, you could declare <I>strchr</I> as</FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>char *index();
#define strchr(s, c) index(s, c)</pre>
but there is a hazard. If you forget that <I>strchr</I> is really <I>index</I>, and write another function called <I>index</I>, you will inadvertently redefine <I>strchr</I>. (This is an excellent way to test your debugging skills.) This macro definition should only be used as an interim fix until you add a compiled version of the missing function to the run-time library.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
What about functions that are completely missing? Should you still put their declarations in <I>&lt;string. h&gt;</I>? The answer is a definite maybe.</FONT></FONT><P>
Suppose that <I>memchr</I> is missing from your library. <I>memchr</I> returns a <I>void *</I>, but if you leave the declaration out of <I>&lt;string. h&gt;</I>, the compiler will assume it returns an <I>int</I>. When you compile</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>char *p, s[10];
p = memchr(s, 'x', 10);</pre>
you may get a spurious warning about an illegal pointer assignment, but compilation will continue. You won't know what's really happening until the linker reports that <I>memchr</I> is undefined. Under these circumstances, you should declare <I>memchr</I> in the header to eliminate the unnecesary warnings.</FONT></FONT></FONT></FONT><P>
If you use a Lint-like program checker that can detect undeclared functions (or if your compiler has such an option), then don't declare functions that are missing from the library. When you reference a missing function, you will still get a meaningful error message, but won't have to wait for the linker to tell you what you already know.<P>
<A href="list2.htm">Listing 2</a>
shows the <I>&lt;string.h&gt;</I> that I use on UNIX 4.2 BSD. It includes some interim macro definitions for missing functions. The <I>#ifndef ... #endif</I> wrapper around the entire header prevents repeated compilation of the declarations if the header is included more than once. The wrapper isn't needed for protection since you can redeclare functions (provided all declarations in the same scope are the same), and everything else in the header is either benign or protected.</FONT></FONT></FONT></FONT><P>
I added the wrapper to simplify debugging. While debugging macros, I sometimes look at the preprocessor output to verify the expansions. Eliminating redundant headers from preprocessor output makes it easier to read. The comment at the header's beginning is not in the wrapper so it still appears wherever the header is included, even if the rest of the header does not.<P>
One final word of caution. In <A href="list2.htm">Listing 2</a>,
 <I>strlen</I> is declared to return a <I>size_t</I>, even though <I>strlen </I>is actually defined in the library to return an <I>int</I>. On machines where a <I>signed int</I> to <I>unsigned int</I> conversion performs no transformation of the data (as on twos-complement machines), <I>strlen</I> returning a <I>size_t</I> is perfectly safe. On other machines, you should leave the declaration as</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>int strlen();</pre>
so that the compiler can recognize that<P>
<pre>size_t n;
n = strlen(s);</pre>
involves a <I>signed</I> to <I>unsigned</I> conversion and generate the proper code. You should also cast the result of <I>strlen</I> to <I>size_t</I> whenever <I>strlen</I> is used in an expression with other <I>ints,</I> such as</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>if ((size_t)strlen(s) &gt; 0)</pre>
This is the same technique used with <I>sizeof </I>when it returns an<I> int</I>.</FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0020_000E">Conclusion<A name="0020_000E"></FONT></h4></P>
In this article I've tried to show why it's impossible to just publish a single portable version of the standard headers. The headers provide a portable definition of the Standard C environment, but they do it in a non-portable way.<P>
Rather than writing the missing string functions in the library, I suggest you write the remaining standard headers. Doing so solves more portability problems and gives you the definitions you need to compile new library functions as you write them. In <I>&lt;string. h&gt;</I>, you've already seen many of the design problems, so most of the remaining work is simply determining what goes into the other headers.</FONT></FONT><P>
<h4>References</FONT></h4></P>
Darnell, Peter and Margolis, Philip, <I>Software Engineering in C</I> (1988, Springer-Verlag).<P>
Gardner, James, <I>From C to C: An Introduction to ANSI Standard C</I> (1989, Harcourt Brace Jovanovich).<P>
Jaeschke, Rex, <I>Portability and the C Language</I>, (1989, Hayden Books).<P>
Plauger, P.J. and Brodie, Jim, <I>Standard C</I> (1989, Microsoft Press).<P>
Ritchie, Dennis and Kernighan, Brian, <I>The C Programming Language</I>, 2nd. ed. (1988, Prentice-Hall).<P>

<h4><a href="../../../source/1990/jan90/saks.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
