






<HTML>
     
     <HEAD>


          
          <TITLE>January 1997/The Learning C/C++urve</TITLE>
     </HEAD>
     
     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          
          <H2><A href="../tocjan.htm"><IMG src="../../toc.gif" ALT="Back to TOC" WIDTH="54" HEIGHT="54"></A>
          <FONT COLOR="#FF0000">Columns</FONT></H2>
          
          <HR>
          
          <H2 ALIGN="center"><FONT COLOR="#800000">The Learning C/C++urve</FONT></H2>
          
          <H3 ALIGN="center"><FONT COLOR="#800000"> Bobby Schmidt</FONT></H3>
          
          <H3 ALIGN="center"><FONT COLOR="#800000"> Driving You to Abstraction</FONT></H3>
          
          <BLOCKQUOTE>
               
               <P> The difference between a single file and a module is much
                    like the difference between information and knowledge a
                    matter of abstraction.</P>
               
                </BLOCKQUOTE>
          <HR>
          <BLOCKQUOTE>
               <P><B><I>Copyright &copy; 1997 Robert H. Schmidt</I></B></P> 
               <p>Happy New Year! Do you realize that
                    according to sci-fi TV and movies this year the Jupiter 2
                    will launch from Alpha Centauri, two years later Moon Base
                    Alpha will explode, and two years later still we'll send
                    Discovery to Jupiter? I remember as a kid watching all this
                    and thinking the notion of inter-planetary travel 30 years
                    on seemed inevitable. Now we'll be lucky to stet foot on 
                    Mars in my lifetime [<A href="#NOTE1">1</a>]
. Sigh ...
                    </p>
               
               <p> I'm also beginning to think we'll be
                    lucky to have the next C standard out before that Mars
                    landing. We on the ANSI C committee colloquially call this
                    emerging standard C9X, where "9X" represents the
                    year we're supposed to publish the standard. I'm slowly
                    believing we should start calling it C0X. Maybe the next one
                    after that we'll publish in 2014. Then we could call it C14
                    and use it to carbon-date the age of legacy C code &#151; and
                    legacy C coders. </p>
               
               <p> In fact, it is you hardened C types
                    that I address in these next months. As you may recall, I
                    ended last month's column promising to start a new series
                    building a bridge to the 21st century ... no wait, sorry,
                    that came from writing this too soon after watching the
                    Presidential debate ... building a bridge from C to C++. In
                    past articles, I've discussed ways to convert your code from
                     C to C++. Now I try to convert you from a C to a C++
                    programmer. </p>
               
               <p> My intentions are not so nefarious as
                    they sound. Many techniques promoted by C++ also happen to
                    work well in C; thus, if you don't want to make the jump
                    completely to C++, you can still profitably adapt these
                    techniques to your C designs. Regardless of the language you
                    use, I trust you'll find the discussion illuminating. So
                    instead of saying I'll turn you into a C++ programmer, 
                    perhaps I should say I'll expose you to C++'s design
                    principles, and let you decide which language to use as
                    those principles' expressive medium. </p>
               
               <p> C++ is often advertised as the latest
                    programming be-all end-all [<A href="#NOTE2">2</a>]
, a PL/I
                    or Ada for the '90s, a magic elixir you must take because
                    it's good for you and keeps you employed. I hope to show
                    that C++ does offer some tangible, demonstrable advantages
                    (and disadvantages) compared to C. While in the balance I
                    find C++ superior to C, in the end what matters more is what
                    you design, not the language in which you design it.</p>
               
               <h4><FONT COLOR="#000080">Definition
               and Rationale</FONT></FONT></H4>
               
               <p>I assert that the single most
                    important design technique you can apply to your code is
                    abstraction: the principle that says each piece of code
                    should perceive other pieces for what they do, not for how
                    they do it. In programming vernacular, abstraction describes
                    a thing's interface, not its implementation. </p>
               
               <p>A necessary means to the end of
                    abstraction is encapsulation: showing exactly the relevant
                    pieces of something, and hiding exactly the irrelevant
                    pieces of that same thing. Encapsulation enables abstraction
                    by showing interface and hiding implementation. The
                    definitions of "relevant," "showing,"
                    and "hiding" depend on context, but the general
                    concepts are fairly universal, even outside the programming
                    realm.</p>
               
               <p> Why is all
                    this important? I suppose entire books could be written on
                    the subject, but I'll distill my rationale down to a few
                    points:</FONT></FONT></P>
               <UL><LI> By insulating yourself from a
                         particular implementation, you give the implementor
                         free rein to change that implementation without
                         affecting you. </FONT></LI>
                    <LI> By conceiving of and
                         manipulating entities by their abstracted interfaces,
                         you raise the abstraction level of your solution to
                         more closely match the level of the real-world problem
                         you are modeling. </FONT></LI>
                    <LI> If your programming language
                         does not support a feature you want, you can create an
                         abstraction that makes the feature look built-in to the
                         language. Even though it's actually implemented by you,
                         outside the language's specification, you can treat
                         this new feature as if it were originally specified as
                         part of the language.</FONT></LI>
               </UL> 
               
               <h4><FONT COLOR="#000080">Have
               You Driven a Ford Lately?</FONT></FONT></H4>
               
               <p>Let me give a non-programming example.
                    In college I had a 1971 Ford Mustang. I knew how to start it
                    and drive it, but didn't know, or care to know, how it all
                    worked under the hood. To me, the car was an abstraction. I
                    thought of it in terms of what it did, not how it did it;
                    that is, I perceived it as being synonymous with its
                    interface (steering wheel, brake, shifter, etc.) instead of 
                    as its implementation. </p>
               
               <p> By treating
                    cars as synonymous with their interfaces, and by exploiting
                    the general sameness of all cars' interfaces, I c