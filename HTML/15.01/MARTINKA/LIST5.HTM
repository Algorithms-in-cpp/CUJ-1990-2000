



<HTML><HEAD>

<TITLE>January 1997/A Template Implementation of Skip Lists/Listing 5</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<p><B>Listing 5: Skiplist insertion function</B></p>

<pre>

template &lt;class DATA, class KEY&gt;
int Skiplist&lt;DATA,KEY&gt;::rand_level()
{
  int level = 1;
  while ( rand() % 4 == 0 &amp;&amp; level &lt; SLMAX_LEVEL )
  {
     level++;
  }
  return( level );
}

template &lt;class DATA, class KEY&gt;
void Skiplist&lt;DATA,KEY&gt;::insert( DATA *data,
const KEY &amp;key )
{
    SLPosition&lt;DATA,KEY&gt; *update[SLMAX_LEVEL];
    SLPosition&lt;DATA,KEY&gt; *cur = &amp;head;
    SLPosition&lt;DATA,KEY&gt; *new_pos;
    int pos_level;
    int i;

    for( i = level-1; i &gt;= 0; i-- )
    {
        while( cur-&gt;forward[i] != NULL &amp;&amp;
          cur-&gt;forward[i]-&gt;key &lt; key )
        {
            cur = cur-&gt;forward[i];
        }
        update[i] = cur;
    }
    pos_level = rand_level();
    new_pos = new SLPosition&lt;DATA,KEY&gt;( pos_level, data, key );
    if( pos_level &gt; level )
    {
        for( i = level; i &lt; pos_level; i++ )
        {
            update[i] = &amp;head;
        }
        level = pos_level;
    }
    for( i = 0; i &lt; pos_level; i++ )
    {
        new_pos-&gt;forward[i] = update[i]-&gt;forward[i];
        update[i]-&gt;forward[i] = new_pos;
    }
}
</pre>
</body></html>
