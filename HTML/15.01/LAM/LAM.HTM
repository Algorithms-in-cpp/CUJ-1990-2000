






<HTML>
     
     <HEAD>


          
          <TITLE>January 1997/A C++ CGI Framework</TITLE>
     </HEAD>
     
     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          
          <H2><A href="../tocjan.htm"><IMG src="../../toc.gif" ALT="Back to TOC" WIDTH="54" HEIGHT="54"></A>
          <FONT COLOR="#FF0000">Cross-Platform Development</FONT></H2>
          
          <HR>
          <CENTER> </FONT>
          
          <H2><FONT COLOR="#800000" FACE="Garamond"> A C++ CGI Framework</FONT></H2>
          <FONT COLOR="#800000" FACE="Garamond"> </FONT>
          
          <H3><FONT COLOR="#800000" FACE="Garamond">Richard B. Lam, Ph.D.</FONT></H3></CENTER>
          <BLOCKQUOTE>
          <p> It's handy to have users fill out a form
               on a web page. Processing that form can be tiresome, however,
               unless you have some tools to do the dirty work.</p></BLOCKQUOTE>
          <HR>
          <BLOCKQUOTE>
               
               <p>The high demand for Web server scripts
                    follows from the popularity explosion of the Internet and
                    World Wide Web (WWW). Most of these scripts are written in
                    Perl using the Common Gateway Interface (CGI) specification.
                    Various Perl libraries are available for authoring custom
                    scripts, but Perl programmers and a Perl interpreter for the
                    web server operating system are required. A few C, Fortran,
                    and even Forth libraries are also available, but they are
                    often not intended for cross-platform use. </p>
               
               <p> This article discusses a C++
                    framework and helper classes to enable cross-platform
                    authoring of CGI scripts. All source code is written to be
                    portable through the use of the C++ Standard Template
                    Library [<A href="#REF1">1</a>]
. Complete source code for
                    the framework is also available.</p>
               
               <h4><FONT COLOR="#000080">CGI Specification</FONT></H4>
               
               <p>The CGI specification [<A href="#REF2">2</a>]

                    describes how a web server interfaces to server-based web
                    programs or scripts. Typically, web scripts are used to
                    process Hypertext Markup Language (HTML) forms [<A href="#REF3">3</a>]

                    and imagemaps. Most web browsers can display HTML forms, and
                    each form can contain a variety of input controls: single
                    and multi-line text entry fields, single and
                    multiple-selection list boxes, checkboxes, radiobuttons, and
                    pushbuttons. </p>
               
               <p> The ability of HTML forms to display
                    controls makes them quite feasible for cross-platform
                    user-interface development, albeit interfaces limited to the
                    kinds of controls supported. While not as flexible as Java
                    or JavaScript, forms-based web programming can be viewed as
                    a type of cross-platform UI development environment. </p>
               
               <p>
                    HTML form documents that interact with a user are easy to
                    generate. <A href="list1.htm">Listing 1</a>
shows the HTML
                    code for a simple form, with the result displayed as in
                    <A href="fig1c.htm">Figure 1</a>.
 Note that the two input
                    controls have "firstname" and "lastname" specified as
                    their respective control names. A user can type text into
                    the two fields on the form and push the button to cause an
                    action to take place. The action associated with this form
                    is specified in the &lt;FORM ... ACTION=""&gt;
                    tag. In this case, the web program example1.exe in
                    subdirectory /scripts on the server k12web will be executed.
                    The server runs the web program, passing data about the form
                    in one of two ways. The older and less flexible way is to
                    specify METHOD="GET" in the FORM tag. Then a
                    string consisting of name-value pairs for each control on
                    the form is passed through environment variables to the
                    script. Today, METHOD="POST" is recommended, which
                    passes the string of data directly to the script through the
                    standard input (stdin in C or cin in C++). </p>
               
               <p> Each CGI program reads the
                    information from cin and parses it to get a collection of
                    name-value pairs. In <A href="list1.htm">Listing 1</a>,

                    the string that is received by the example1.exe program is:</p>

<PRE>
firstname=John&amp;lastname=Doe&amp;
    pbnext=Next+%3e%3e
</PRE>
               
               <p>The values for each control are based
                    on what the user typed into the entry fields. Name-value
                    pairs are separated by ampersands, and spaces have been
                    converted to + characters. Special characters (such as &gt;)
                    are converted to hexadecimal values (%3e). </p>
               
               <p> Once the program parses the input
                    string, it carries out whatever processing is required and
                    writes a return document to the standard output (stdout in C
                    or cout in C++). The return document may be another HTML
                    document or any other MIME (Multimedia Internet Mail
                    Extension) type. The return type is specified by preceding
                    all output with a special string containing the MIME type 
                    (e.g., "Content-type: text/html"). </p>
               
               <p> You can see from the amount of string
                    processing required why most web programs are written in
                    Perl [<A href="#REF4">4</a>]
 or other languages that are
                    good at string manipulation (e.g., REXX).</p>
               
               <h4><FONT COLOR="#000080">A C++ Framework</FONT></H4>
               
               <p>I had a project with a potential need
                    for many CGI programs that could be quickly generated. I did
                    not have any desire to learn Perl, but cross-platform
                    portability was important. C++ seemed like a good choice,
                    but its string handling and lack of standard collection
                    classes were drawbacks. However, the draft ANSI Standard for
                    C++ includes support for strings and collection classes via 
                    the Standard Template Library (STL). Thus, a portable C++
                    framework was needed. </p>
               
               <p> Why a framework? The primary
                    difference between function libraries and frameworks is who
                    calls whom. The functions in a typical static or dynamic
                    link library are called by another program. A framework is a
                    set of modules that have defined interactions with one
                    another, and that can interact with (i.e., call or send
                    messages to) user-provided functions or objects. </p>
               
               <p> Most existing CGI libraries provide a
                    library of functions to be called. In the case of CGI
                    programs though, we have a predefined application
                    architecture. The data comes either from environment
                    variables or cin. The string data has a fixed format that
                    can be parsed into a set of name-value pairs. Programs use
                    this data to generate new MIME content for the browser to
                    handle. The output of CGI programs is written to cout. The
                    web server then delivers the output data from the CGI
                    program back to the browser that submitted the request.
                    </p>
               
               <p> Thus, CGI programming is a good
                    candidate for a framework architecture. The framework
                    handles all the low-level details, letting the programmer
                    concentrate on the end goal. Using STL allows the framework
                    to be built with portable C++ code, not relying on any
                    specific string or collection class libraries. The
                    disadvantage to this approach is that not all C++ compilers
                    are up to the task of supporting STL, but compiler vendors
                    are addressing this need. In the meantime, I used the STL
                    implementation from ObjectSpace [<A href="#REF5">5</a>]
.</p>
               
               <h4><FONT COLOR="#000080">Framework Classes</FONT></H4>
               
               <p>



<a href="fig2c.htm">Figure 2</A> shows the overall architecture of CGIFramework. A
                    template class, cgiTApplication&lt;T&gt;, is used to
                    instantiate a cgiParser object and to create an instance of
                    a user-supplied class defined by the template argument. An
                    object of type cgiEnvironment is also constructed and
                    queried to determine the origin ("GET" or "POST")
                    and size of the data (from the environment variables
                    REQUEST_METHOD and CONTENT_LENGTH). The application object
                    then reads the CGI input data string from the environment or
                    cin into a memory buffer (a strstream object). </p>
               
               <p> The run method of cgiTApplication&lt;T&gt;
                    calls the parse method for the cgiParser object to handle
                    the input data from the strstream object. The parse method
                    carries out the necessary string manipulations to extract
                    the name-value pairs from the input stream. Plus characters
                    are converted to spaces, and hexadecimal representations are
                    converted to their appropriate characters. The name-value
                    pairs are then stored in an associative array, using STL's
                    map container. </p>
               
               <p> An STL map object is a convenient
                    container for this application because access to values can
                    be obtained through direct association with a name (used as
                    a subscript). A map object allows associative array access
                    through a syntax such as:</p>

<PRE>
string value = mapdata[name];
</PRE>
               
               <p>Two typedefs are used to refer to the
                    individual name and value strings as cgiName and cgiValue.
                    The typedef cgiDataList refers to map&lt;cgiName, cgiValue&gt;.
                    </p>
               
               <p> CGIFramework requires one
                    user-supplied class that derives from another framework
                    class, cgiProcessor. This is an abstract class that declares
                    one pure virtual method named process. The user must provide
                    a definition of this method in the derived class. The
                    implementation of this method carries out the user's
                    form-processing work, including the generation of a new HTML
                     or other MIME-type document to return to the browser.
                    </p>
               
               <p> Internally, the framework simply
                    calls the pure virtual method cgiProcessor::process. The C++
                    virtual function dispatch mechanism then invokes the user's
                    derived class method. The cgiDataList of name-value pairs is
                    passed as an argument to the method so the form data is
                    accessible. Note that the framework hides all of the details
                    regarding the data extraction. It only calls the user's 
                    process method once the data is available in a usable form.
                    </p>
               
               <p> If a problem arises inside any
                    framework object, a cgiException is thrown. This exception
                    is caught and the static method cgiProcessor::defprocess is
                    called. This exception handler writes a standard return
                    message to the browser indicating an error occurred in the
                    CGI program. </p>
               
               <p><a href="fig2c.htm">Figure 2</a>
shows
                    one additional class, cgiHTMLHelper. This class contains
                    methods and iostream manipulators for easily generating
                    standard HTML tags. They are useful in CGI programs where
                    dynamic web pages need to be constructed based on user
                    interactions. For example, a CGI program might generate a
                    new HTML document similar to that in <A href="list2.htm">Listing
                         2</a>.
 </p>
               
               <p> Inside the process method, the cout
                    stream can be used in conjunction with the iostream
                    manipulators and helper methods of cgiHTMLHelper to generate
                    the document. <A href="list3.htm">Listing 3</a>
shows the
                    code that generates all of the tags in <A href="list2.htm">Listing
                         2</a>.
</p>
               
               <h4><FONT COLOR="#000080">Using CGIFramework</FONT></H4>
               
               <p><A href="list4.htm">Listing 4 </A>is
                    a complete main program based on CGIFramework. All that is
                    required is the instantiation of a cgiTApplication&lt;T&gt;
                    template object, and a call to that object's run method.
                    </p>
               
               <p> The user class used as the template
                    argument is derived from cgiProcessor. Each new CGI program
                    needs to derive from this class and declare the new class
                    name as the template argument in the main program above.<A href="list5.htm">
                         Listing 5</a>
shows the simplest derived class. This
                    code together with the code from <A href="list4.htm">Listing
                         4</a>
constitutes a complete CGI program. </p>
               
               <p> Of course, this program is not very
                    interesting because it just returns a "No response"
                    message to the browser. A more useful program that can help
                    you debug HTML forms is given in <A href="list6.htm">Listing
                         6</a>
(which uses the same main program and header file
                    as the previous listing). Note that this code declares an
                    instance of cgiHTMLHelper which will write its output to
                    cout. The contentType method defaults to "text/html"
                    as the output MIME type. The header and trailer methods wrap
                    the output lines in &lt;html&gt;&lt;body&gt; and &lt;/body&gt;&lt;/html&gt;
                    tags. </p>
               
               <p> The for loop uses an STL iterator
                    over the map to access the entire list of name-value pairs
                    sent to the program. Dereferencing the STL map iterator
                    returns the item pointed to by the iterator as an STL pair
                    of strings. Access to the names and values are via the first
                    and second member variables of pair. </p>
               
               <p> Calling
                    the program in<A href="list6.htm"> Listing 6</a>
(using
                    the form example from <A href="fig1c.htm">Figure 1</a>)

                    generates the HTML code shown in <A href="list7.htm">Listing
                         7</a>.
 The resulting form appears in
                    <A href="fig3c.htm">Figure 3</a>.
</p>
               
               <h4><FONT COLOR="#000080">Dynamic Form
               Generation</FONT></H4>
               
               <p>Let's
                    write a more interesting CGI program which processes the
                    form in <A href="list1.htm">Listing 1</a>,
 but uses the
                    name information to display a dynamically generated form.
                    The code in <A href="list8.htm">Listing 8 </A>gets the
                    form user's name and puts it into another form which is
                    generated to ask for payment information. Several new
                    iostream manipulators and methods of cgiHTMLHelper are
                    demonstrated here. htmlrule writes the tag for a horizontal
                    rule line, and htmlformpost generates the &lt;FORM&gt; tag
                    with "METHOD=POST". The listbox/endlistbox methods
                    create a listbox control on the generated form with the
                    contents of the listoptions. The entryfield method creates
                    text entryfields on the form, with empty strings as default
                    values. Optional arguments can be used (as in the expiration
                    date field) to specify a default value for the field and a
                    new size (in characters). <A href="fig4c.htm">Figure 4</A>
                    shows the browser display of the resulting form generated by
                    the CGI program. </p>
               
               <p> This new form can call another CGI
                    program to generate yet another form, ad infinitum. Note
                    that all URL requests by a browser are stateless. However,
                    each form can maintain the state of a sequence of user
                    interactions using hidden name-value pairs. A series of
                    questions and answers from the user can then cause some
                    action by the web server based on all previous information 
                    from that user (without maintaining any state information at
                    the server). Thus, a wizard, or series, of HTML forms can be
                    generated to process an order, send a fax, complete an
                    on-line survey, administer a test, etc.</p>
               
               <h4><FONT COLOR="#000080">Summary</FONT></H4>
               
               <p>This article presents a cross-platform
                    C++ framework for writing CGI programs. The Standard
                    Template Library was used to ensure portability of the
                    framework to other platforms. Several example CGI programs
                    built with the framework for processing HTML forms are
                    discussed. The complete source code for the framework may be
                    downloaded free of charge [<A href="#REF6">6</a>]
.</p>
               
               <h4><FONT COLOR="#000080">References</FONT></H4>
               
               <p><A name="REF1">1</a>.
 M. Nelson, C++
                    Programmer's Guide to the Standard Template Library, IDG
                    Books Worldwide, Inc., 1995. </p>
               
               <p> <A name="REF2">2</a>.
 "The Common
                    Gateway Interface,"
                    http://hoohoo.ncsa.uiuc.edu/cgi/primer.html. </p>
               
               <p> <A name="REF3">3</a>.
 A. Davison,
                    "Coding with HTML Forms," Dr. Dobb's Journal, June, 1995,
                    p 70. </p>
               
               <p> <A name="REF4">4.</a>
S. Brenner,
                    "CGI Form Handling in Perl,"
                    http://www.bio.cam.ac.uk/web/form.html. </p>
               
               <p> <A name="REF5">5.</a>
"STL&lt;Toolkit&gt;,"
                    ObjectSpace, http://www.objectspace.com. </p>
               
               <p> <A name="REF6">6</a>.
 R.B. Lam,
                    "CGIFramework," available at ftp@mfi.com and on the code
                    disk (see p. 3 for details). </p></BLOCKQUOTE>

<P><I>Richard B. Lam is a member of the Research Staff at the IBM T. J. Watson Research Center, where he manages the Learning Technologies group. </FONT></I></P>

                     
<h4><a href="../../../source/1997/jan97/lam.zip">Get Article Source Code</a></h4>


     </BODY>
</HTML>
