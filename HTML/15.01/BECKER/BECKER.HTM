






<HTML>
     
     <HEAD>


          
          <TITLE>January 1997/Questions &amp; Answers</TITLE>
     </HEAD>
     
     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          
          <H2><A href="../tocjan.htm"><IMG src="../../toc.gif" ALT="Back to TOC" WIDTH="54" HEIGHT="54"></A>
          <FONT COLOR="#FF0000">Columns</FONT></H2>
          
          <HR>
          <CENTER>
          
          <H2><FONT COLOR="#800000" FACE="Garamond">Questions &amp; Answers</FONT></H2>
          
          <H3><FONT COLOR="#800000" FACE="Garamond"> Pete Becker</FONT></H3>
          
          <H3><FONT COLOR="#800000" FACE="Garamond"> Using the enum Hack in C</FONT></H3></CENTER>
          
          <BLOCKQUOTE>
               
               <p> A common C++ trick also works in C,
                    and a longtime CUJ reader reminds Pete that many programmers
                    do as well.</p></BLOCKQUOTE>
          <HR>
          <BLOCKQUOTE>
               
               <p> <h4>Q</h4> I read your column in the C/C++
                    Users Journal in October on macro substitutions in C. To
                    some degree, much of the C I see is pretty bad. If people
                    can't write clean C, how can they write C++? (I don't know
                    much about C++ except how to spell it and how to compile
                    applications with g++.) I think it would help to see "this
                    is how to write clean C" rather than "drop C and
                    switch to C++."</p>
               
               <p>The code snippet</p>

<PRE>
#define BUFSIZE 100

char buf[BUFSIZE]
money(i, buf, BUFSIZE);
</PRE>
               
               <p>shows a number of things wrong with
                    much of the code I see. Anyway, in this context, always use
                    the sizeof operator. In fact, adding tokens pollutes; in
                    this case its unnecessary.</p>

<PRE>
char buf[100]
money(i, buf, sizeof(buf));
</PRE>
               
               <p>If you want to use a constant (only
                    once), it makes sense to do this:</p>

<PRE>
#ifndef BUFSIZE
#define BUFSIZE 100
#endif 
char buf[BUFSIZE];
money(i, buf, sizeof(buf));
</PRE>
               
               <p>In this case, you can change BUFSIZE
                    at compile time.</p>
               
               <p>Doug McIlroy turned me on to the
                    following style. I found it strange at first, then asked him
                    about it, and he explained it (it's good practice and it
                    saved space in the listing). Use enums to define manifest
                    constants!!</p>

<PRE>
enum { BUFSIZE = 100 };

char buf[BUFSIZE];
money(i, buf, sizeof(buf))
</PRE>
               
               <p>The advantage to using enums is:</p>
               <UL><LI> the debugger sees them (gdb)
                         </FONT></LI>
                    <LI> the scope is within the block</FONT></LI>
               </UL>
               
               <p>Maybe everyone wants to write C++.
                    'Tis a pity they forgot about C. (I think C can be a
                    wonderful way to express computer programs because it's so
                    simple.) And I've been using OO in C for 15 years. (I
                    normally decompose problems into data abstractions and
                    methods.)
                    <BR> &#151; Marty Leisner</p>
               
               <p><h4>A</h4> In the narrow context of</p>

<PRE>
#define BUFSIZE 100
char buf[BUFSIZE]
money(i, buf, BUFSIZE);
</PRE>
               
               <p>it makes good sense to use sizeof,
                    rather than make the size of the buffer a manifest constant.
                    You have to be careful about using sizeof with arrays,
                    though: be sure that you use it only at a point in the
                    program where you are dealing with the actual array and not
                    a pointer to its first element. That's why the money
                    function cannot simply figure out the size of the buffer for
                     itself:</p>

<PRE>
void money( int value, char *buf )
{
/* incorrect! */
size_t buf_len = sizeof buf;
}
</PRE>
               
               <p>In this snippet, buf is a pointer to
                    char, and sizeof buf is simply the size of a pointer. That
                    has nothing to do whatsoever with the number of elements in
                    the array, and that's why I hesitate to recommend the use of
                    sizeof when dealing with arrays. There are quite a few C
                    programmers who are confused about the difference between an
                    array and a pointer, and for these people, using sizeof 
                    would lead to serious mistakes.</p>
               
               <p>Your suggested use of an enum has been
                    enshrined in C++ history as "the enum hack." Until
                    recently, C++ had no direct way of defining an integral
                    compile-time constant with class scope. That made it hard to
                    write definitions of classes that contained fixed-size
                    arrays, unless you were willing to hard-code the size of the
                    array:</p>

<PRE>
class C
{
    int buf[10];//hardcoded size
public:
    C();
};
</PRE>
               
               <p>In itself, the above isn't bad, but
                    the code to initialize the array gets a bit longwinded
                    because it has to use sizeof rather than a named constant:</p>

<PRE>
C::C()
{
for( int i = 0; i &lt; sizeof array; i++ )
    buf[i] = i;
}
</PRE>
               
               <p>Then along came the enum hack, and
                    things were much cleaner:</p>

<PRE>
class C
{
    enum { BUFSIZE = 10 };
    int buf[BUFSIZE];
public:
    C();
};

C::C()
{
for( int i = 0; i &lt; BUFSIZE; i++ )
    buf[i] = i;
}
</PRE>
               
               <p>This approach amounts to a slight
                    abuse of the enumerated type, mostly because the resulting "constant"
                    isn't used as a type at all. The enum hack does have one
                    significant thing going for it: it works, and in the absence
                    of a better solution that's enough to make it a common
                    technique. </p>
               
               <p> I haven't seen the enum hack applied
                    in C, nor have I taken the time to assess its usefulness in
                    that language. In general, though, C programmers know how to
                    stay out of the way of already-defined macros, so using
                    #define to create a manifest constant doesn't cause
                    significant problems. I suspect that's why I haven't seen
                    the enum hack used. </p>
               
               <p> As for C++, it puts much more
                    emphasis on scopes, and blasting through scopes with a
                    #define is definitely something that you want to keep to a
                    minimum. Abuse of #define is what led to the use of the enum
                    hack in C++, until a better solution came along: now the
                    language definition supports compile-time constants within
                    classes. Now you can write:</p>

<PRE>
class C
{
    const int BUFSIZE = 10;
    int buf[BUFSIZE];
public:
    C();
};

const int C::BUFSIZE;

C::C()
{
for( int i = 0; i &lt; BUFSIZE; i++ )
    buf[i] = i;
}
</PRE>
               
               <p>I realize I just did what you lamented
                    in your letter: I changed the discussion from C to C++. As I
                    said earlier, I haven't seen the enum hack used in C, so
                    it's hard for me to come up with meaningful examples of its
                    use in C. In C++ it was a handy trick, but pretty much
                    everyone agreed that it was ugly, and now that there's a
                    better way to handle class-scoped integral constants it is 
                    fading into the pages of history.</p>
               
               <p>To ask Pete a question about C or C++,
                    send e-mail to pbecker@wpo.borland.com, use subject line:
                    Questions and Answers, or write to Pete Becker, C/C++ Users
                    Journal, 1601 W. 23rd St., Ste. 200, Lawrence, KS 66046.</p>
          </BLOCKQUOTE>
<P><I>Pete Becker is a senior development manager at Borland International, working in Borland's Middleware and Application Management Development group in Boston, Mass. He has been actively involved in C++ development work at Borland for seven years, both as a developer and a manager. He is Borland's representative to the ANSI/ISO C++ standardization committee. He can be reached by e-mail at pbecker@oec.com.</FONT></I></P>
     </BODY>
</HTML>
