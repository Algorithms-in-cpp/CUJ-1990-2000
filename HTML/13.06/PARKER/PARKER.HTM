

<HTML>
<HEAD>

<TITLE>June 1995/Encapsulating Math Coprocessor BCD Arithmetic</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjun.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Scientific &amp; Numeric Applications</FONT></H2>

<hr><h2 align="center"><font color="#800000">Encapsulating Math Coprocessor BCD Arithmetic<A name="00AE_006E"><A name="00AE_006E"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="00AE_0000"><A name="00AE_0000">Mark R. Parker</font></h3><hr><blockquote><P>
<P><i><A name="00AE_0000"><A name="00AE_0000">Mark Parker, who holds an MS in Mathematics, teaches C, C++ and Fortran programming (as well as mathematics) at Shoreline Community College in Seattle, WA. He is co-author (with Leo Scanlon) of Dos Subroutines for C and Assembler (TAB/McGraw-Hill). His interests include optimizing mathematical computations and OOP in C++. He can be reached on CompuServe at 76223,3637 and on the Internet at mparker@ctc.edu.</i></P><P>
<h4><FONT COLOR="#000080"><A name="00AE_006F">Introduction<A name="00AE_006F"></FONT></h4></P>
The benefits of encapsulation, as provided by C++ classes, are generally well known. Encapsulation hides messy implementation details from users, enabling designers to protect class data, and giving users relief from excessive complexity. Encapsulation also enables designers to change a class's internal implementation without requiring a change in client code. This last benefit can be especially significant when that implementation interacts with hardware. Hardware is platform-dependent, and encapsulation can hide that platform dependence from the user.<P>
In this article I present a class that partially encapsulates a hardware device &#151; the math coprocessor &#151; to perform binary-coded decimal arithmetic. (For more information about BCD arithmetic, please refer to the sidebar.) Applications built from the <I>BCD</I> class can perform input/output and add or subtract numbers of up to 18 decimal digits (in this implementation) using exact arithmetic. By itself, this may not seem terribly astounding; after all, you could duplicate all of <I>BCD</I>'s functionality using the C/C++ <I>long double</I> type, and much more simply as well. But one purpose of this article is to show how to control a peripheral device &#151; not directly supported by a high-level language &#151; in a completely transparent manner.<P>
The <I>BCD</I> class is designed primarily for ease of use, followed closely by portability. To achieve these goals, the class design consists of three layers. The outermost layer is the layer seen by client programs. In this layer, binary-coded decimal numbers exist as an abstraction, not much different from an <I>int</I> or a <I>char</I> or other primitive type. The design defines arithmetic and input/output operators for this new type. The middle layer implements many of the operations defined in the outer layer. The middle layer must make some assumptions about the system it will be running on, so that it can map blocks of memory into and out of the math coprocessor. At the core is the innermost layer, which is responsible for communicating directly with the math coprocessor. This layer is completely system-dependent, and would have to be completely rewritten to use a different math coprocessor. The assembly code included here is for the Intel 80x87 family of math coprocessors.<P>
<h4><FONT COLOR="#000080"><A name="00AE_0070"><I>BCD</I><B> Class Services<A name="00AE_0070"></B></FONT></h4></P>
The functions declared in the header file <I>BCD.H</I> (<A href="list1.htm">Listing 1</a>)
 form the public interface to the <I>BCD</I> class. The interface provides for a constructor, a destructor, overloaded operators for assignment, addition, subtraction, and negation, and overloaded stream insertion (output) and extraction (input) operators. The member functions <I>BCDPut</I> and <I>BCDGet</I> provide alternatives to the stream operators for class users who prefer a more C-like notation.<P>
The class's only data member is a pointer to an <I>unsigned char.</I> Since no details about the data are available, class users should not be tempted to modify an object's data through means other than those provided by the class.<P>
The <I>BCD</I> class users need little more information than that already presented. The following code fragment shows how the class can be used:<P>
<pre>BCD Val1("123456789012345"), Val2("-1122334455667788"), Val3, Val4;
Val3 = Val1 + Val2;
cout &lt;&lt; Val3;
cout &lt;&lt; "Enter a new value... ";
cin &gt;&gt; Val3;
Val4 = Val1 + Val2 - (-Val3),
cout &lt;&lt; Val4;</pre>
<h4><FONT COLOR="#000080"><A name="00AE_0071"><I>BCD</I><B> Class Implementation<A name="00AE_0071"></B></FONT></h4></P>
The file <I>BCD.CPP</I> (<A href="list2.htm">Listing 2</a>)
 contains the member function definitions. Users need never see this file. In most circumstances they could use this class without knowledge of its internal workings.<P>
<h4><FONT COLOR="#000080"><A name="00AE_0072">Data<A name="00AE_0072"></FONT></h4></P>
Each <I>BCD</I> object contains a pointer to a dynamically allocated array of unsigned chars. In this implementation, the array has ten elements, or 80 bits &#151; just the right size for the math coprocessor registers. (See <A href="fig1.htm">Figure 1</a>
for a depiction of one of the Intel 80x87 math coprocessor's registers.)<P>
<h4><FONT COLOR="#000080"><A name="00AE_0073">Constructor<A name="00AE_0073"></FONT></h4></P>
The class constructor, <I>BCD(char*),</I> is invoked whenever a <I>BCD</I> object comes into scope. Because the constructor is declared with a default argument, the new object will be initialized either with 0 (the default) or with the string of decimal digits. In either case, the constructor dynamically allocates a block of memory, and immediately sets each byte to zero. If invoked with a string of digits &#151; i.e., a number &#151; the constructor will then store a representation of that number in the array. This process is a little more complicated than it may seem at first. The constructor first does some rudimentary parsing to determine whether the string is negative or positive, and how many pairs of digits it contains. The constructor then copies the digits, in pairs, to their proper locations in memory. The digit pairs must be stored in reverse order. For example, a <I>BCD</I> object initialized with the string "123456789" will store these digits in memory as 89 67 45 23 01 00 00 00 00 00. The least significant pair is stored lowest in memory. This is the format required by the math coprocessor prior to its loading a BCD value from memory.<P>
<h4><FONT COLOR="#000080"><A name="00AE_0074">Destructor<A name="00AE_0074"></FONT></h4></P>
The destructor behaves as you would expect, returning the dynamically allocated data array to memory when a <I>BCD</I> object goes out of scope.<P>
<h4><FONT COLOR="#000080"><A name="00AE_0075">Overloaded Operators<A name="00AE_0075"></FONT></h4></P>
The <I>BCD</I> class contains member function operators for assignment, addition, subtraction, and negation. Clients of the class can assign one object to another, add or subtract two objects, or change the sign of an object, using intuitive C/C++ notation.<P>
<h4><FONT COLOR="#000080"><A name="00AE_0076">Input/Output<A name="00AE_0076"></FONT></h4></P>
The stream operators <I>&gt;&gt;</I> and <I>&lt;&lt;</I> are overloaded to input and ouput <I>BCD</I> objects on C++ iostreams. Typical usage is as follows:<P>
<pre>cin &gt;&gt; Num;
cout &lt;&lt; Num;</pre>
These stream operators mediate between the <I>BCD</I> class and either of the two iostreams classes, <I>istream</I> or <I>ostream.</I> As mediators, I've made these stream operators friends, not member functions, of the <I>BCD</I> class. Earlier in the class's development I created the functions <I>BCDGet</I> and <I>BCDPut</I> to perform input and output. Now stream output (<I>operator&lt;&lt;</I>) is implemented as a call to <I>BCDPut</I> and input (<I>operator&gt;&gt;</I>) as a call to <I>BCDGet.</I><P>
<h4><FONT COLOR="#000080"><A name="00AE_0077">The Nitty-Gritty<A name="00AE_0077"></FONT></h4></P>
The lowest level of class design consists of the assembly-coded functions <I>BCDAdd, BCDSub,</I> and <I>BCDNeg.</I> <A href="list3.htm">Listing 3</a>
shows <I>BCDAdd; BCBSub</I> and <I>BCDNeg</I> are on this month's code disk. Both <I>BCDAdd</I> and <I>BCDSub</I> take three arguments: two <I>BCD</I>-type arguments, and a pointer to a <I>BCD</I> object that will hold the result. Since a <I>BCD</I> object contains only a pointer (assumed <I>NEAR,</I> or 16-bit, in my small memory model program), each object requires only a word of memory on the stack. The address of the destination object takes up a third word on the stack. <I>BCDNeg</I> works similarly, but requires only two stack words instead of three &#151; the first holds the BCD object to be negated; the second holds the address of the destination object.<P>
The assembly-coded functions introduce two instructions that may be unfamiliar to non-hardware types: <I>FBLD</I> and <I>FBSTP.</I> These are coprocessor instructions (all begin with <I>F</I>) that respectively load and store a packed BCD number. <I>FBLD</I> will load a ten-byte quantity onto the top of the coprocessor stack. <I>FBSTP</I> will store the contents of the top-of-stack register into memory and then pop the stack. These instructions carry out all the data transfer operations.<P>
<h4><FONT COLOR="#000080"><A name="00AE_0078">Possible Extensions<A name="00AE_0078"></FONT></h4></P>
As it stands, the <I>BCD</I> class provides some useful functionality, but could use a few extensions. Perhaps its most glaring deficiency is this class's cavalier assumption that a numeric coprocessor is present. A reasonably cautious program would interrogate the hardware at run time to be sure. The class could be extended with a static data member whose purpose in life is recording the presence or absence of a coprocessor. The member functions that depend on a coprocessor could then check the status of this flag before they attempt to produce a result.<P>
The <I>BCD</I> class also does not guard against overflows. If the sum of two 18-digit numbers won't fit into 18 digits, <I>operator+</I> adds them anyway, returning no indication of an error. One way to correct this would be to extend the class to check for an <I>invalid</I> exception after execution of an <I>FBSTP</I> instruction. Since the <I>BCD</I> class does not check for overflows (or underflows), I did not think it wise to implement multiplication or division &#151; two operations very likely to produce just such errors. Were overflow/underflow checking implemented, these two operations would make worthwhile extensions to the class.<P>
<h4><FONT COLOR="#000080"><A name="00AE_0079">Conclusion<A name="00AE_0079"></FONT></h4></P>
C++ classes can make useful wrappers around hardware devices that only "speak" assembly language. C++-style encapsulation allows programmers having little knowledge of a device to still create useful programs. This layering also isolates the most system-dependent details in a small region, simplifying the task of porting the software to a different environment.<P>
<h4><FONT COLOR="#000080"><A name="00AE_007A">Bibliography<A name="00AE_007A"></FONT></h4></P>
Intel Corporation, <I>Microprocessors,</I> Volume I. Intel, 1992.<P>
Liu, Yu-cheng. <I>The M68000 Microprocessor Family, Fundamentals of Assembly Language Programming and Interface Design.</I> Prentice Hall, 1991.<P>
<h4>Sidebar: <a href="sidebar1.htm">Binary-coded Decimal Numbers</a></h4>

<h4><a href="../../../source/1995/jun95/parker.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
