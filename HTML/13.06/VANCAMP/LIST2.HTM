<HTML><HEAD>
<TITLE>June 1995/Dynamic Inheritance Using Filter Classes/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2 TableDataNormalize <I>class</I></A></h4>
<pre>// tdnorm.hpp
#ifndef TDNORM_HPP
#define TDNORM_HPP
#include "tbldata.hpp"

// (Note that cellType class must have SetValue() and
// GetValue() methods, and a copy constructor.)
template &lt;class cellType&gt; class TableDataNormalize:
       public TableData&lt;cellType&gt;
{
public:
   TableDataNormalize (TableData&lt;cellType&gt; *const
          prev): TableData&lt;cellType&gt; (prev)
   { }

   virtual const cellType GetCell (const int row,
          const int col)
   {
      assert (PrevTD != 0);
      cellType cell (PrevTD-&gt;GetCell (row, col));
      cell.SetValue ( cell.GetValue() /
             (PrevTD-&gt;GetCell (0, col)).GetValue());
      return (cell);
   }

   virtual void PutCell (const int row, const int col,
          const cellType &amp;value)
   {
      assert (PrevTD != 0);
      cellType cell (value);
      cell.SetValue ( cell.GetValue() *
             (PrevTD-&gt;GetCell (0, col)).GetValue());
      PrevTD-&gt;PutCell (row, col, cell);
   }
};
#endif
// End of File
</pre>
</BODY>
</HTML>
