<HTML><HEAD>
<TITLE>June 1995/Dynamic Inheritance Using Filter Classes/Listing 6</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 6 <I>Example use of </I>TableData</A></h4>
<pre>// tdexmpl.cpp
#include &lt;assert.h&gt;
#include &lt;iostream.h&gt;
#include &lt;iomanip.h&gt;
#include "tdexmpl.hpp"
#include "tdnorm.hpp"
#include "tdavg.hpp"

// For ease of specifying type:
typedef TableData&lt;ValAttrCell&gt; ValAttrTable;
// Local function prototypes:
static void PrintTable(ValAttrTable *, ValAttrTable *):
static void PrintRow(ValAttrTable *, int,);

int main ()
{
   // First instantiate the buffer
   ValAttrTable *aTableDataMarketBuf = new
         TableDataMarketBuf&lt;ValAttrCell&gt;
         ((ValAttrTable *)0, 4, 4);
   assert (aTableDataMarketBuf != 0);

   // Instantiate filters: first one normalizes
   ValAttrTable *aTableDataNormalize = new
         TableDataNormalize&lt;ValAttrCell&gt;
         (aTableDataMarketBuf);
   assert (aTableDataNormalize != 0);

   // Next one averages the original data:
   ValAttrTable *aTableDataAverage1 = new
         TableDataAverage&lt;ValAttrCell&gt;
         (aTableDataMarketBuf);
   assert (aTableDataAverage1 != 0);

   // Next one averages the normalized data:
   ValAttrTable *aTableDataAverage2 = new
         TableDataAverage&lt;ValAttrCell&gt;
         (aTableDataNormalize);
   assert (aTableDataAverage2 != 0);

   cout &lt;&lt; "Original data:" &lt;&lt; endl;
   PrintTable (aTableDataMarketBuf,
         aTableDataAverage1);

   cout &lt;&lt; endl &lt;&lt; "After normalizing:" &lt;&lt; endl;
   PrintTable (aTableDataNormalize,
         aTableDataAverage2);

   delete aTableDataAverage2;
   delete aTableDataAverage1;
   delete aTableDataNormalize;
   delete aTableDataMarketBuf;

   return (0);
}

static void PrintTable (ValAttrTable *topTD,
      ValAttrTable *avgTD)
{
   // Print the table: First the column headings
   cout &lt;&lt; setw(11) &lt;&lt; " ";
   for (int col = 0; col &lt; topTD-&gt;GetNumCols(); col++)
      cout &lt;&lt; setw(10)
            &lt;&lt; &amp;(topTD-&gt;GetColHeading (col));
   cout &lt;&lt; endl;

   for(int row = 0; row &lt; topTD-&gt;GetNumRows(); row++)
      PrintRow (topTD, row);

   // Then print the averages:
   PrintRow (avgTD, 0);
}

static void PrintRow (ValAttrTable *topTD, int row)
{
   cout &lt;&lt; setw(13) &lt;&lt; &amp;(topTD-&gt;GetRowHeading (row));
   // Set up money-style output for floats:
   cout.precision(2);
   cout.setf(ios::fixed,ios::floatfield);
   cout.setf(ios::right);
   for (int col = 0; col &lt; topTD-&gt;GetNumCols(); col++)
   {
      ValAttrCell cell = topTD-&gt;GetCell (row, col);
      cout &lt;&lt; setw(8) &lt;&lt; cell.GetValue();
      // Show protected cells with an asterisk
      if (cell.GetAttr() &amp; ValAttrCell::CT_PROTECTED)
         cout &lt;&lt; "* ";
      else
         cout &lt;&lt; " ";
   }
   cout &lt;&lt; endl;
}
// End of File
</pre>
</BODY>
</HTML>
