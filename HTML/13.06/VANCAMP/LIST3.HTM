<HTML><HEAD>
<TITLE>June 1995/Dynamic Inheritance Using Filter Classes/Listing 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 3 TableDataAverage <I>class</I></A></h4>
<pre>// tdavg.hpp
#ifndef TDAVG_HPP
#define TDAVG_HPP
#include "tbldata.hpp"

// (Same assumptions about cellType as TDNORM)
template &lt;class cellType&gt; class TableDataAverage:
       public TableData&lt;cellType&gt;
{
public:
   TableDataAverage (TableData&lt;cellType&gt; *const
          prev): TableData&lt;cellType&gt; (prev)
   { }

   virtual const cellType GetCell (const int row,
          const int col)
   {
      assert (PrevTD != 0);
      assert (row == 0); // only 1 row in this table
      // Inherit properties from row 0 cell:
      cellType cell (PrevTD-&gt;GetCell (0, col));
      for (int p_row = 1; p_row &lt; PrevTD-&gt;GetNumRows(); p_row++)
          cell.SetValue (cell.GetValue() +
                (PrevTD-&gt;Getcell
                (p_row, col )).GetValue());
      cell.SetValue (cell.GetValue() /
             PrevTD-&gt;GetNumRows());
      return (cell);
   }

   virtual void PutCell (const int, const int,
          const cellType &amp;)
   { cerr &lt;&lt; "Error: Row write-protected!" &lt;&lt; endl; }

   virtual const int GetNumRows (void) const
   { return (1); }

   virtual const char &amp;GetRowHeading (const int)
   { return (*("Average")); }

};
#endif
// End of File
</pre>
</BODY>
</HTML>
