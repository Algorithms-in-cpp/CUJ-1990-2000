<HTML><HEAD>
<TITLE>June 1995/Dynamic Inheritance Using Filter Classes/Listing 4</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 4 TableDataBuffer <I>class</I></A></h4>
<pre>// tdbuf.hpp
#ifndef TDBUF_HPP
#define TDBUF_HPP
#include "tbldata.hpp"

// Buffer class for data tables
template &lt;class cellType&gt; class TableDataBuffer:
       public TableData&lt;cellType&gt;
{
public:
   TableDataBuffer (TableData&lt;cellType&gt; *const prev,
          const int nRows, const int nCols):
          TableData&lt;celllype&gt; (prev),
          NumRows (nRows),
          NumCols (nCols)
   {
      // Allocate the buffer
      TableBuf = new cellType[nRows * nCols];
      assert (TableBur != 0);
      // Allocate storage for row &amp; col headings too.
      RowHeading = new char [nRows * MaxHeadingLen];
      assert (RowHeading != 0);
      ColHeading = new char [nCols * MaxHeadingLen];
      assert (ColHeading != 0);
   }

   virtual ~TableDataBuffer (void)
   {
      delete []TableBuf;
      delete []RowHeading;
      delete []ColHeading;
   }

   virtual const cellType GetCell (const int row,
          const int col)
   {
      ValidateCoord (row, col);
      return (RefCell (row, col));
   }

   virtual void PutCell (const int row, const int col,
          const cellType &amp;value)
   {
      ValidateCoord (row, col);
      RefCell (row, col) = value;
   }

   virtual const int GetNumRows (void) const
   { return (NumRows); }

   virtual const int GetNumCols (void) const
   { return (NumCols); }

   virtual const char &amp;GetRowHeading (const int row)
   {
      ValidateRow (row);
      return (RefRowHeading (row));
   }

   virtual const char &amp;GetColHeading (coast int col)
   {
      ValidateCol (col);
      return (RefColHeading (col));
   }

   virtual void ValidateCoord (const int row,
          const int col) const
   { ValidateRow (row); ValidateCol (col); }

   virtual void ValidateRow (const int row) const
   { assert ( (row &gt;= 0 &amp;&amp; row &lt; GetNumRows()) ); }

   virtual void ValidateCol (const int col) const
   { assert ( (col &gt;= 0 &amp;&amp; col &lt; GetNumCols()) ); }

protected:
   enum { MaxHeadingLen = 40 };

   cellType &amp;RefCell (int row, int col)
   { return (TableBuf[row * GetNumCols() + col]); }

   char &amp;RefRowHeading (int row)
   { return (RowHeading[row * MaxHeadingLen]); }

   char &amp;RefColHeading (int col)
   { return (ColHeading[col * MaxHeadingLen]); }

private:
   int NumRows, NumCols;
   cellType *TableBuf; // buffer holds all cells
   char *RowHeading;   // array of row headings
   char *ColHeading;   // array of col headings
};
#endif
// End of File
</pre>
</BODY>
</HTML>
