<HTML><HEAD>
<TITLE>June 1995/Dynamic Inheritance Using Filter Classes/Listing 5</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 5<I> Financial market example</A></I></h4>
<pre>// TDExmpl.hpp
#define TDEXMPL_HPP
#include "tdbuf.hpp"

// This class communicates with the database
// (Note that cellType class must have SetValue()
// and SetAttr() methods.)
template &lt;class cellType&gt; class TableDataMarketBuf:
       public TableDataBuffer&lt;cellType&gt;
{
public:
   TableDataMarketBuf (TableData&lt;cellType&gt; *const
          prev, const int nRows, const int nCols):
          TableDataBuffer&lt;cellType&gt;
          (prev, nRows, nCols)
   {
      // Put some dummy data in the table
      // (Replace these with real database reads.)
      assert (nRows == 4);
      assert (nCols == 4);
      for (int row = 0; row &lt; GetNumRows(); row++)
      {
          for (int col=0; col &lt; GetNumCols(); col++)
          {
              RefCell (row, col).SetValue
                     (row * 100 + col + 1);
              if (col &gt; 2 || row &lt; 2)
                 RefCell (row, col).SetAttr
                        (cellType::CT_PROTECTED);
          }
      }
      strcpy (&amp;RefRowHeading(0), "Sugar-Domest.");
      strcpy (&amp;RefRowHeading(1), "Cotton");
      strcpy (&amp;RefRowHeading(2), "Orange Juice");
      strcpy (&amp;RefRowHeading(3), "Brent Crude");
      strcpy (&amp;RefColHeading(0), "Open");
      strcpy (&amp;RefColHeading(1), "High");
      strcpy (&amp;RefColHeading(2), "Low");
      strcpy (&amp;RefColHeading(3), "Settle");
   
   }
   // A real app would also provide a method to save
   // updated data to the database.
};

// A simple cell class to use in the table,
// stores a float value &amp; attribute per cell
class ValAttrCell
{
public:
   enum CellAttr // values can be OR'd
   {
      CT_NONE        = 0x00,
      CT_PROTECTED   = 0x01,
      CT_HIGHLIGHTED = 0x02
   };

   ValAttrCell (float value = 0.0, CellAttr attr
          = CT_NONE): Value (value), Attr (attr)
   {}

   void SetValue (float value)
   { Value = value; }

   float GetValue (void) const
   { return (Value); }

   void SetAttr (CellAttr attr)
   { Attr = attr; }

   CellAttr GetAttr (void) const
   { return (Attr); }

private:
   float Value;   // value stored in cell
   CellAttr Attr; // display (or other) attributes
};
#endif
// End of File
</pre>
</BODY>
</HTML>
