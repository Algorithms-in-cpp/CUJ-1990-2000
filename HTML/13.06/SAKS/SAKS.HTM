

<HTML>
<HEAD>

<TITLE>June 1995/Stepping Up To C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjun.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Stepping Up To C++<A name="00D4_007C"><A name="00D4_007C"></font></h2><P>
<h3 align="center"><A name="00D4_0000"><A name="00D4_0000">Changes in the Scope Rules</h3><P>
<h3 align="center"><font color="#800000">Dan Saks</font></h3><hr><blockquote><P>
<P><i><A name="00D4_0000"><A name="00D4_0000">Dan Saks is the president of Saks &amp; Associates, which offers consulting and training in C++ and C. He is secretary of the ANSI and ISO C++ committees. Dan is coauthor of C++ Programming Guidelines, and codeveloper of the Plum Hall Validation Suite for C++ (both with Thomas Plum). You can reach him at 393 Leander Dr., Springfield OH, 45504-4906, by phone at (513)324-3601, or electronically at dsaks@wittenberg.edu.</i></P><P>
In July 1994, the ISO C++ standards committee, in concert with the ANSI C++ standards committee, voted to submit their working draft of the C++ Standard for registration as a committee draft (CD). CD registration is the first of three ballots that a proposed standard must pass before it becomes a bona fide international standard. In March 1995, the C++ committees voted to submit a further revised draft for the next round of approval, called the CD ballot (not to be confused with the previous CD <I>registration</I> ballot).<P>
In the past five installments of my column, I explained the standardization process and the state of the C++ language itself. I described the state of the language by contrasting it with C++ as presented in the base document, the Annotated C++ Reference Manual (ARM) <a href="#1">[1]</a>. In those five installments, I managed to cover all the extensions to C++, both major and minor, approved by the C++ standards committees for inclusion in the draft standard.<P>
In addition to extending the base language, the current draft also changes the behavior of numerous constructs from their previous behaviors specified by the ARM. Some changes simply prohibit features that were never intended to be, yet somehow slipped through the cracks. Others changes actually redefine the behavior of some constructs that already had well-defined behavior.<P>
I listed all the changes as of CD registration in "Stepping Up to C++: C++ at CD Registration," <I>CUJ</I>, January 1995. Now I'd like to explain them. There have been so many changes, I can't describe them all in one column. This month I focus on those changes that affect the scope rules.<P>
<h4><FONT COLOR="#000080"><A name="00D4_007D">Declaration Scope within Conditionals<A name="00D4_007D"></FONT></h4></P>
The scope rules in the ARM gave rise to the following peculiarity, described in Section 6.7 [Declaration Statement]:<P>
An auto variable constructed under a condition is destroyed under that condition and cannot be accessed outside that condition. For example,<P>
<pre>if (i)
    for (int j = 0; j &lt; 100; j++) {
        // ...
    }
if (j != 100)
    // error: j outside condition
    // ...</pre>
Here, <I>j</I> is an auto variable, and it's initialized (constructed) within an <I>if</I> statement (under a condition). The scope of <I>j</I> is the block enclosing the <I>for</I> statement, which in this example, is the block enclosing both <I>if</I> statements.<P>
If the conditional expression in that first <I>if</I> is true (<I>i</I> is non- zero), then the program constructs <I>j</I> upon entering the statement controlled by the <I>if</I> statement, and destroys <I>j</I> upon leaving. If the condition is false, then the program never constructs <I>j</I>. Thus, by the time execution reaches the second <I>if</I> in the example, either <I>j</I> has been constructed and destroyed, or it has never been constructed. Either way, the program can't access <I>j</I> in the second <I>if</I> statement, or anytime thereafter. (The same problem would occur if the <I>for</I> statement were enclosed in some other conditional statement, such as a <I>do, for, switch,</I> or <I>while.</I>)<P>
This example highlights a very uncommon situation in C++, one in which the lifetime and scope of a named object do not end at the same time. After the end of the first <I>if</I> statement, the name <I>j</I> is still in scope, but the program can't access <I>j</I> either because its lifetime has ended or because its lifetime never began.<P>
The committees decided to eliminate this strangeness by changing the scope rules. The C++ draft now states that the conditionally-executed statement inside an <I>if, do, for, while, or switch</I> implicitly defines a local scope. In other words, the body of each conditional statement compiles as if it had curly braces around it. Thus, the previous code example should compile as if written with an extra set of curly braces:<P>
<pre>if (i) {
   for (int j = 0; j &lt; 100; j++) {
      // ...</pre>
}<P>
<pre>}
if (j != 100) // still an error, but now
   // ...   // because j is not in scope</pre>
The committees also decided that this change eliminated the need for the ARM's restriction that a single conditionally-executed statement cannot be a declaration (ARM Sections 6.4 [Selection Statements] and 6.5 [Iteration Statements]). For example, the ARM prohibits<P>
<pre>if (i)
   int i = 0; // error</pre>
An annotation in the ARM explains that:<P>
If a declaration could be the only statement after an <I>if</I> or <I>else</I>, it would introduce a name of uncertain scope and definite uselessness.<P>
The committees reasoned that the revised scope rule removed the uncertainty about the scope of names declared under a condition. They also decided that such declarations were not necessarily useless, because some C++ programs use declarations merely to gain the side effects of executing a constructor and/or destructor. Thus, C++ now permits the conditionally-executed statement in both selection-statements (<I>if</I> and <I>switch</I>) and iteration-statements (<I>do, for</I>, and <I>while</I>) to be a declaration.<P>
<h4><FONT COLOR="#000080"><A name="00D4_007E">Declaration Scope within a <B><I>for-init-statement</I><A name="00D4_007E"></B></FONT></h4></P>
The previous rule changed the scope of names declared in a conditional statement, but it did not change the scope of a name declared in the <I>for-init-statement</I> (the initialization step) of a <I>for</I> statement. The Tun-Time Type Identification (RTTI) proposal introduced new rules for declarations that conflicted with the existing rule for declarations in <I>for-init-statements</I>, prompting the committees to change the latter. (I introduced RTTI in "Stepping Up to C++: C++ at CD Registration," <I>CUJ</I>, January, 1995 and declarations in conditionals in "Stepping Up to C++: Minor Enhancement to C++ as of CD Registration," <I>CUJ</I>, February, 1995.)<P>
The ARM describes the scope rule for a <I>for-init-statement</I> in Section 6.5.3 [The <I>for</I> Statement]:<P>
If the <I>for-init-statement</I> is a declaration, the scope of the names declared extends to the end of the block enclosing the <I>for-statement</I>.<P>
For example,<P>
<pre>{
for (int i = 0; i &lt; N; ++i)
   {
   // ...
   }
if (i == N) // OK, i is still in scope
   // ...
}           // i is now out of scope</pre>
One consequence of this rule (which some programmers find annoying) is that<P>
<pre>{
for (int i = 0: i &lt; N; ++i)
   {
   // ...
   }
for (int i = 0; i &lt; N; ++i) // error
   {
   // ...
   }
}</pre>
is an error because the second <I>for-init-statement</I> redefines <I>i</I>. According to the ARM, you must write the second <I>for</I> statement as<P>
<pre>for (i = 0; i &lt; N; ++i)
   {
   // ...
   }</pre>
The RTTI (Run-Time Type Identification) proposal included an extension to allow declarations in conditional expressions of <I>for, if, switch</I>, and <I>while</I> statements. The scope of a name declared in a condition is the statement(s) controlled by that condition. For example,<P>
<pre>if (D *dp = dynamic_cast&lt;D *&gt;(bp))
   {
   // dp is in scope here...
   }
// ...but not here</pre>
This new rule combined with the ARM's rule for the scope of names in a <I>for-init-statement</I> to produced arguably surprising behavior &#151; namely, that two objects seemingly declared in the same construct have different scopes. For example,<P>
<pre>for (int i = 0; int j = f(i); ++i)
    {
    // ...
    }
// i is in scope here, but j is not</pre>
Many committee members thought this behavior would be hard to defend. After weighing several alternatives, the committees decided to change the scope of a name declared in a <I>for-init-statement</I> to be the same as the scope of a name declared in the condition of the corresponding <I>for</I> statement. The C++ draft now states:<P>
Names declared in the <I>for-init-statement</I>, condition, and controlling expression parts of <I>if</I>,<I> while</I>,<I> for</I>, and <I>switch</I> statements are local to the <I>if</I>,<I> while</I>,<I> for,</I> or <I>switch</I> statement (including the controlled statement), and shall not be redeclared in a subsequent condition or controlling expression of that statement nor in the outermost block of the controlled statement.<P>
With this change, <I>i</I> and <I>j</I> in the previous example have the same scope. Furthermore, previously valid (though perverse) code like the following is now ill-formed:<P>
<pre>for (int i = 0; j = f(i); ++i)
   {
   int i = 1; // was OK; isn't anymore
   // ...
   }</pre>
because it redefines <I>i</I>.<P>
<h4><FONT COLOR="#000080"><A name="00D4_007F">The Scope of Class Members<A name="00D4_007F"></FONT></h4></P>
The ARM introduces the basic rules for names defined in class scope in Section 3.2 [Scopes], and adds many refinements in Chapter 9 [Classes]. Unfortunately, the ARM's scope rules are both incomplete and inconsistent. (In the politically-correct tone of the 90's, Anthony Scian of Watcom once referred to the ARM as "completeness challenged.") Many of the problems revolved around two rules in the ARM: the "rewriting" rule in Section 9.3.2 [Inline Member Functions] and the rule limiting the context sensitivity of class member declarations in Section 9.9 [Local Types].<P>
The ARM's rewriting rule states that:<P>
Defining a function within a class declaration is equivalent to declaring it inline and defining it immediately after the class declaration; this rewriting is considered to be done after preprocessing but before syntax analysis and type checking of the function definition. Thus,<P>
<pre>int b;
struct x {
    char* f() { return b; }
    char* b;
};</pre>
is equivalent to<P>
<pre>int b;
struct x {
     char* f();
     char* b;
};
inline char* x::f()
{ return b; }</pre>
Thus the <I>b</I> used in <I>x::f()</I> is <I>x::b</I> and not the global <I>b</I>.<P>
The rewriting rule permits functions defined inside a class to refer to other members declared later in that class. This gives programmers considerable freedom in arranging <I>in situ</I> function definitions (function definitions appearing inside a class definition), even if some of those definitions refer to members declared later in the class.<P>
The rewriting rule applies only to in situ function definitions; it does not apply to any other member declarations. For example,<P>
<pre>struct x
   {
   int v[N];      // error
   enum { N = 10 };
   };</pre>
is an error because the declaration for data member <I>v</I> refers to member <I>N</I> prior to <I>N</I>'s definition.<P>
The commentary in the ARM explains that the rewriting rule is a "semantic notion" and should not be taken literally. Rather, the rule establishes a general principle for interpreting in situ member function definitions. Unfortunately, this rule doesn't spell out the behavior of some constructs very well. The rule limiting context sensitivity of class member declarations (which I'll describe momentarily) clarifies some cases, but adds confusion to others.<P>
As with any declaration, a class definition is sensitive to the context in which it appears. That is, names declared in the scope(s) surrounding a class definition can affect that definition's meaning. For example, in<P>
<pre>typedef int T;
class X
   {
public:
   T f(T t) { T u = t + 1; return u; }
   // ....
   };</pre>
the declaration of <I>X::f</I> uses the definition of <I>T</I> from the surrounding context. This context sensitivity is a normal consequence of the nested scope rules in C++. However, if left completely unconstrained, this context sensitivity can produce some pretty confusing results, or even mask programming errors.<P>
For example, suppose class <I>X</I> in the previous example has a nested type <I>T</I> defined after member function <I>f</I>:<P>
<pre>typedef int T;
class X
   {
public:
   T f(T t) { T u = t + 1; return u; }
   typedef double T;
   };</pre>
The ARM's example accompanying the rewriting rule suggests that the scope of a class member includes the bodies of all functions defined inside its class, even those functions defined before the members declaration. Thus, the <I>T</I> in the body of <I>X::f</I> refers to <I>X::T</I> (which is <I>double</I>). But the ARM offers no clue as to whether the rewriting rule also extends to other parts of the function definition, such as the parameter list and the return type.<P>
The ARM's rule limiting the context sensitivity of member declarations rules out many, but not all, of the questionable cases. That rule states:<P>
A class-name or a typedef-name or the name of a constant used in a type name may not be redefined in a class declaration after being used in the class declaration, nor may a name that is not a class name or a typedef-name be redefined to a class-name or a typedef-name in a class declaration after being used in the class declaration.<P>
The ARM illustrates this rule with the example shown in <A href="list1.htm">Listing 1</a>.
<P>
Class <I>X</I> in <A href="list1.htm">Listing 1</a>
contains two violations of the rule. <I>X</I>' s member declaration<P>
<pre>char v[i];</pre>
refers to the enumeration constant <I>i</I> defined in the enclosing scope. The subsequent member declaration<P>
<pre>enum { i = 2 };</pre>
violates the limits on context sensitivity by redefining <I>i</I> as a member after <I>i</I> has already appeared in <I>v</I>'s declaration. The other violation occurs because <I>X</I>'s member function definition<P>
<pre>int f() { return sizeof(c); }</pre>
refers to the typedef-name <I>c</I> from the enclosing scope, but the next member declaration<P>
<pre>char c;</pre>
redefines <I>c</I> after begin used.<P>
Struct <I>Y</I> in <A href="list1.htm">Listing 1</a>
contains another violation. The rewriting rule does not apply to data member declarations, so the declaration<P>
<pre>T a;</pre>
refers to the global <I>T</I> defined immediately before <I>Y</I>. Then <I>Y</I> defines <I>T</I> as a nested type, and declares another member <I>b</I> of type <I>T</I>. Were it not for the limits on context sensitivity, you might wind up with a struct with two members of type <I>T</I> that actually have different types.<P>
The rule limiting context sensitivity of member declarations hints at a general principle, namely, that a C++ compiler should not accept a class definition containing an erroneous forward reference just because the name of the forward-referenced member happens to be declared in some scope enclosing the class definition. Unfortunately, the rule obscures this general principle by being too broad in some areas and too narrow in others.<P>
Consider class <I>X</I> in <A href="list1.htm">Listing 1</a>,
 again. Class <I>X</I> defines, among others, two members<P>
<pre>int f() { return sizeof(c); }
char c;</pre>
declared in that order. Forgetting the declarations in the surrounding context for the moment, the rewriting rule suggests that this is okay &#151; <I>c</I> in the body of <I>f</I> should refer to member <I>c</I>. But the member declaration for <I>c</I> redeclares a typedef-name in the scope enclosing class <I>X</I>, so the ARM says <I>c</I>'s declaration is an error.<P>
The committees agreed that, in this case, the rule limiting context sensitivity contradicted the rewriting rule unnecessarily; it's clear that the <I>c</I> in the body of <I>X::f</I> refers to <I>X::c</I>, and the rewriting rule should prevail. Moreover, if you were to change the declaration for <I>c</I> at file scope from<P>
<pre>typedef int c;  // c is a typedef-name</pre>
to:<P>
<pre>int c;          // c is an object</pre>
then it would no longer exceed the limits on context sensitivity, and the declaration of member <I>c</I> would be just fine. This inconsistent treatment of type and non-type names bothered many committee members.<P>
As another example of the ARM's inconsistency, consider<P>
<pre>int c;
struct Z
   {
   char s[sizeof(c)];
   char c;
   };</pre>
The ARM's limits on context sensitivity don't prohibit this. Yet, if <I>c</I> at file scope had been a typedef instead of an object, then according to the ARM, the declaration of member <I>c</I> would be an error. The committees agreed that this definition for struct <I>Z</I> should be unacceptable no matter how you declare <I>c</I> at file scope.<P>
The committee decided to remove the inconsistencies and eliminate the unresolved cases by replacing the rewriting rule and context sensitivity rule with a completely reworded set of class scope rules:<P>
1) The scope of a name declared in a class consists not only of the text following the name's declarator, but also of all function bodies, default arguments, and constructor initializers in that class (including such things in nested classes).<P>
2) A name used in a class <I>S</I> shall refer to the same declaration when re-evaluated in its context and in the completed scope of <I>S</I>.<P>
3) If reordering member declarations in a class yields an alternate valid program under (1) and (2), the program's meaning is undefined.<P>
The first rule effectively replaces the rewriting rule. It says that the scope of a member <I>m</I> of a class <I>X</I> includes <I>all</I> the member function bodies, including those bodies that appear before <I>m</I>' s declaration. The rule also clearly states that default argument expressions and constructor initializers are subject to this "rewriting," but by implication, function return types and parameter types are not.<P>
The second rule effectively replaces the rule limiting the context sensitivity of class member declarations. It more or less says that if you apply the rewriting rule to a member declaration and, in so doing, change that declaration's meaning, then the declaration is in error.<P>
The third rule handles some cases not covered by the first two rules. Consider this example:<P>
<pre>class X
   {
   int f(int (T));
   typedef int T;
   };</pre>
Assuming there's no type <I>T</I> defined in the surrounding context, then function <I>X::f</I> has a parameter of type <I>int</I> named <I>T</I> (the parentheses around <I>T</I> are merely redundant). On the other hand, when evaluated in the completed scope of class <I>X, X::f</I> has a parameter of type "function taking <I>int</I> returning <I>int</I>."<P>
At first you might think this violates rule 2, but it doesn't. Rule 2 says that the two interpretations for <I>T</I> can't refer to different declarations. But in the first interpretation for <I>X::f,</I> <I>T</I> does not refer to anything; it's the name of a formal parameter declared at that point. Therefore, this declaration does not "refer" to a declaration of <I>T</I>; it declares <I>T</I>, and thus can't violate rule 2. Now, since the scope of <I>X::T</I> does not include the parameter declaration of <I>X::f</I> (by rule 1), it follows that the first interpretation for <I>X::f</I> prevails, namely, <I>X::f</I> has a parameter of type <I>int</I> named <I>T</I>.<P>
Now, suppose you rewrite the class definition as<P>
<pre>class X
   {
   typedef int T;
   int f(int (T));
   };</pre>
Then clearly the <I>T</I> in <I>f</I>'s declaration refers to <I>X::T</I>, so the other interpretation for <I>X::f</I> prevails, namely, <I>X::f</I> has a parameter of type "function taking <I>int</I> returning <I>int</I>."<P>
This example exposes a situation where simply reordering the member declarations yields two distinct interpretations for the class, neither of which violates rule 2. The committees generally agreed that any class definition with this property was potentially troublesome and should be an error. However, the standard mandates that the compiler must produce a diagnostic for a program that contains an error. This means the compiler might have to try every ordering of the members for each class to determine if alternate valid interpretations exist. A class with just 20 members (not unusually large) has 20!=2.43 x 10<SUP>18</SUP> permutations of those members. Assuming that a 100 MIPS machine can compute each permutation in one instruction (a rather optimistic assumption), it would only take 771.5 years to compute those permutations. That's more than enough time to go get a snack.<P>
Since today's C++ translators can't do the computation in a reasonable time, the committees settled for rule 3, which says programs with this troublesome property have <I>undefined behavior</I>. Undefined behavior is an error that the translator need not diagnose. A translator may diagnose the error, or it may simply choose to ignore it. The onus of avoiding undefined behaviors usually falls on you, the programmer.<P>
The new scope rules change the behavior of the ARM's examples demonstrating limits on context sensitivity for member declarations. The current draft's examples (updated from <A href="list1.htm">Listing 1</a>)
 appear in <A href="list2.htm">Listing 2</a>.
 Here, the member declaration for <I>X::c</I> is no longer an error. The other constructs that caused errors still cause errors, but the exact points of those errors have moved.<P>
<h4><FONT COLOR="#000080"><A name="00D4_0080">Point of Declaration for an Enumerator<A name="00D4_0080"></FONT></h4></P>
When does the scope of an enumerator begin? The ARM gives two different answers (it's "consistency-challenged"). In Section 3.2 [Scopes] it says:<P>
The point of declaration for an enumerator is immediately after the identifier that names it. For example,<P>
<pre>               enum { x = x };</pre>
Here,... the enumerator <I>x</I> is initialized to its own (uninitialized) value.<P>
However, in Section 7.2 [Enumeration Declarations] it says:<P>
An enumerator is considered defined immediately after it and its initializer, if any, has been seen.<P>
The committee had to choose between the two, so it chose the latter because, among other reasons, Standard C uses the same rule.<P>
The current draft now says:<P>
The point of declaration for an enumerator is immediately after its enumerator-definition. For example:<P>
<pre>               const int x = 12;
               { enum { x = x }; }</pre>
Here, the enumerator <I>x</I> is initialized with the value of the constant <I>x</I>, namely 12.<P>
<h4>References</FONT></h4></P>
<a name="1"></a>[1]     Margaret A. Ellis and Bjarne Stroustrup. <I>The Annotated C++ Reference Manual</I> (Addison-Wesley, 1990).<P>

<h4><a href="../../../source/1995/jun95/saks.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
