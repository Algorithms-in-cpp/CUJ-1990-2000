

<HTML>
<HEAD>

<TITLE>June 1995/We Have Mail</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjun.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Departments</FONT></H2>

<hr><h2 align="center"><font color="#800000">We Have Mail<A name="00DE_0083"><A name="00DE_0083"></font></h2><hr>
<BLOCKQUOTE>
<A name="00DE_0000"><A name="00DE_0000">Dear C/C++ User's Journal,<P>
Just a quick addition to the article by Philip J Erdelsky, Ph.D., on "Portable Byte Ordering in C++" (<I>CUJ</I>, January, 1995). As a Macintosh owner and programmer, I have had a need to read and write from DOS binary files. I use the functions shown in <A href="list1.htm">Listing 1</a>
frequently.<P>
I am pretty sure these functions are portable and more efficient than performing bit shifting.<P>
Phil S. Bolduc<br>
Kamloops, BC Canada<P>
<I>They're reasonably portable, and they do solve the specific problem of converting between PC and Mac integer representations.&#151; pjp</I><P>
Dear Mr. Plauger:<P>
Here's a quick question. Given all the systems capable of compiling C code (for convenience, let's restrict the domain to PCs in the continental US), what percentage are loaded with the software to compile C++ code? Also, at what rate are the C++ capable systems growing? (I guess that makes two questions.)<P>
My concern is of the "shareability" of C++ vs. that of C. Are there a sufficient number of systems to warrant a programmer to write most code intended for public distribution in C++? (Well, perhaps three questions. However, I realize the third is rather ambiguous and dependent on the circumstances.)<P>
As long as I'm writing, kudos for the magazine. Keep up the good work.<P>
Thomas Phllips, CCP<br>
72713.2100@compuserve.com<P>
<I>These days, I suspect the majority of PCs have a C++ compiler if they have a C compiler. It's much easier for most vendors to package two such complementary products together than to sell them separately. Shareability is more than a matter of widespread access to compilers, however. Standard C is a highly stable language, while C++ is still changing rapidly as a result of the invention occurring in the standardization process. If you want excitement and innovation, C++ is where it's at. If you want portability and stability, stick with Standard C for now. &#151; pjp</I><P>
To whom it may concern:<P>
I have been engaged in a heated argument with IBM concerning the XL C v1.3 compiler supplied with their AIX v3.2.5 operating system. The problem stems from their very narrow interpretation of the ANSI Standard concerning the types <I>char, signed char</I>, and <I>unsigned char</I>, and more importantly pointers to these objects. I provide the following code to demonstrate the problem when strict ANSI was turned on.<P>
<pre>#include &lt;string.h&gt;
int main( void ) {

   char buf[25];
   unsigned char ubuf[25];

   /* line below is fine */
   strcpy( buf, "Hello World" );
   /* line below: compiler error*/
   strcpy( buf,"Hello World" )
   return 0;
}</pre>
The prototype for <I>strcpy</I> in &lt;string.h&gt; is:<P>
<pre>char *strcpy( char *, char * );</pre>
When strict ANSI is turned on, the unsigned character array is considered to be a distinctly different type than just plain <I>char</I>. I then consulted the C compiler manual and found a compiler option, <I>-qchars=unsigned</I>, which led me to believe this would alter the behavior of the compiler to treat plain <I>char</I> as<I> unsigned char</I>. Yet, this did not work either.<P>
I contacted IBM and pointed out this seemed to be a bug (for reasons I will later state). This was their response:<P>
"In XL C v1.2.1, a variable declared as type <I>char</I> was considered to be the same as <I>unsigned char</I> or <I>signed char</I>. XL C v1.3 recognizes <I>char, unsigned char</I>, and <I>signed char</I> as distinct types. This is in conformance with the ANSI standard. This also means a pointer to any of these types will not be compatible with pointers of either of the other two types."<P>
I then pointed out my use of the -<I>qchars=unsigned</I> compiler option. As strange as things seem up to this point, their reply is incredible:<P>
"The XL C v1.3 <I>-qchars=unsigned</I> flag is working correctly. (I am assuming that your customer is using the XL C v1.3 compiler.) By using the <I>-qchars=unsigned</I> flag, the <I>char</I> is now considered to be a type of <I>unsigned char</I> which is distinct from a true <I>unsigned char</I>."<P>
I have never heard of two types of <I>unsigned char</I> before! I began consulting my sources concerning ANSI/ISO C (I have several). In Plauger and Brodie's <I>ANSI and ISO Standard C</I>, I found that type <I>char</I> can be the same as either <I>unsigned char</I> or <I>signed char</I> (page 45). Since IBM said they were following the ANSI Standard I bought a copy. (Cost me $40.00 too!) I have been poring over the text of the Standard, and although I cannot find a statement as definitive as the one in Plauger/Brodie, I also cannot find a statement which declares the <I>char</I> types as distinctly different. In fact, the standard strongly implies the <I>char</I> types are <I>compatible</I> and thus pointers to these objects are compatible.<P>
I suppose I am seeking some vindication from someone who is more of an authority about Standard C than me. Normally I would not care, but our shop standards state that all production code will pass the ANSI compiler without warnings or errors. Also, we are using a pre-compiler which generates unsigned character arrays. This has forced us to back away from the ANSI compiler. This is a situation where it seems the C compiler is evolved into a Pascal compiler (Shudder...).<P>
Anyone want to comment?<P>
Thanks,<P>
Stan Milam<br>
Midlothian, TX<br>
milam@metronet.com<P>
<I>IBM is quite correct, although the wording of their response leaves something to be desired. So too does the C Standard in this area, and I guess Plauger &amp; Brodie as well, since you were able to misread it. The trick is to distinguish between representation and type. The three character types are indeed distinct, but they have only two different representations. Remember that int can have the same representation as either short or long but it is still a distinct type. It's much the same with the signedness of the representation of plain char. What adds to the confusion, as IBM points out, is that earlier compilers often failed to make all three character types distinct. Some C++ compilers still fail in this area. &#151; pjp</I><P>
To Stan Milam,<P>
Sorry for troubling you again, but I'm fairly new to C and haven't had much experience yet. I finally found your routines for converting dates (<I>CUJ</I>, MONTH, YEAR) and seem to be having a problem with the date 31/12/2000. This converts fine using <I>mkdate</I> and returns a value of 730485. If I pass this value back into <I>localdate</I> I receive a date back of 00/00/2001 with -1 in <I>tm_yday</I>.<P>
I think the offending line in <I>localdate</I> is the following<P>
<pre>year = (unsigned) ((day * 400L) / 146097L + 1L);</pre>
This returns 2001 into the <I>year</I> field.<P>
Hope you can help.<P>
jason@easysoft.com<P>
Stan Milam replies:<P>
Yes, you have found a bug in my code :( ! I have only had time to verify the bug, and it is as you say: <I>localdate</I> is computing the wrong year for Dec 31, 2000. I believe this has to do with the fact that 2000 is a leap year where century years are not normally leap years. I am already into the process of finding a fix and when I have one I will mail it to you. By the way, I am sending a courtesy copy of this letter to <I>The C/C++ Users Journal</I>, and I will have to notify them of the fix too. Of course, I will give credit to you for identifying the bug. Thanks for your use of the date routines and for your courtesy.<P>
Regards,<P>
Stan Milam<P>
Editor:<P>
I have been a reader of <I>The C/C++ Users Journal</I> for about four years now and I am learning more and more about C, even though I do not have much time to do development in it. I also run a BBS specifically for C Programmers (Numan's &#151; A Programming Forum (404) 498-7905).<P>
In that light I would like to put the C Standard on-line for people to download and access. Is this available via ftp? If so what is the site?<P>
Thank you for a wonderful magazine. Keep up the good work.<P>
Michael Rowe<br>
<I>Team OS/2</I><br>
Soon to be <I>OS/2 Developer</I><P>
<I>ANSI and ISO are still struggling with the issues surrounding on-line availability of standards. Until they work out the proper checks and balances, we are not at liberty to make the C Standard available on the net. &#151; pjp</I><P>
Dear Bill,<P>
I was just reading Chuck Allison's article in the February 1995 issue (Vol. 13, No. 2) and have a few comments to make.<P>
While the code in Listing 1
may well work for <I>WORD</I> equal to <I>unsigned int</I>, the <I>NBITS</I> macro is based on the premise that the number of bits in an object of some type equals <I>CHAR_BIT * sizeof(object)</I>. This is not required by Standard C, nor is it promised.<P>
Specifically, not all the bits allocated to an object need be used to represent that object's value. For example, some implementations on IEEE-based machines map <I>long double</I> onto the 80-bit extended representation. Borland's compiler does this and says that <I>sizeof(long double)</I> = 10, as you might expect. However, Metaware's compiler says the size is 12 because it pads out the object to a size that is a multiple of 4, for efficiency reasons. Similarly, Cray's compiler says <I>sizeof(short)</I> is 8 even though only 32 bits are used (24 on older systems).<P>
Chuck correctly states that <I>size_t</I> is either <I>unsigned int</I> or <I>unsigned long</I>. (By the way, he doesn't say, but <I>offsetof</I> also has type <I>size_t.</I>) However, having established that <I>size_t</I> is an abstract type, he goes on to promise <I>printf</I> that <I>size_t</I> is <I>int</I>, and that is a bad idea. (In his Listing 1,
 * is given an expression of type <I>size_t</I> and in Listing 2 - Listing 4, a conversion specifier <I>%d</I> is used. Both expect an <I>int</I> argument.) This is a very common error. Unfortunately, on many systems, this "little white lie" goes undetected. However, it's a bug that just might rise up to grab you someday. (Consider a 16-bit machine that supports objects larger than 64KB. <I>ints</I> will likely be 16 bits and <I>size_t</I> will likely be 32 bits.)<P>
Here's the solution to the <I>%d</I> problem:<P>
<pre>printf("%lu", (unsigned long)sizeof(x));</pre>
<I>size-t</I> is either <I>unsigned int</I> or <I>unsigned long</I> so the cast is always safe. Regardless of which type <I>size_t</I> has, once <I>printf</I> is called, the argument being passed will be of the type promised.<P>
Note, however, this won't work for the * precision case, which expects an <I>int</I> and there's nothing you can do to change that. To make this work you can use the following:<P>
<pre>printf("%*d", (int)sizeof(x), i);</pre>
It's very unlikely you'll want a precision greater than <I>INT_MAX</I> (which is at least 32767)!<P>
These solutions might not be pretty but the resulting code <I>is</I> portable. And if you really care about portability, you have to care about this kind of detail.<P>
Along these lines, <A href="list1.htm">Listing 1</a>
could be enhanced slightly to correctly handle <I>WORD</I> being <I>any</I> integer type, including <I>unsigned long</I>. I'll leave the implementation as a reader exercise. (I'll send a copy of my new Standard C reference card to the first reader who sends me a complete and elegant solution.)<P>
Rex Jaeschke<br>
Chair ANSI C Committee<br>
rex@aussie.com<P>
<I>The C Standards committees have become more sensitive to the issue of unused bits lately, thanks to a finicky Defect Report or two. Rex is, of course, correct. But you can blame me for letting the slight inaccuracy get into print. I chose not to have Chuck Allison add such subtleties to an otherwise clear explanation. &#151; pjp</I><P>
Editor:<P>
Quick note to express thanks and kudos for the recent seminar. I managed to hit up management at just the right time &#151; that, and the fact that I live in Topeka (so no travel charges) allowed me to attend. I was impressed by the level of information presented, and by the caliber of speakers. Good Job!<P>
On another note: Additional kudos for your columns in <I>CUJ</I> I read them each month, whether I can follow them or not, just for the technical info I can soak up.<P>
You and your cohorts at <I>CUJ</I>/R&amp;D/whatever are really filling a need, and doing it well. Keep it up!<P>
Kurt Duncan<br>
Wolf Creek Nuclear<br>
kudunca@wcnoc.com<P>
<I>Thanks. &#151; pjp</I><P>
Editor:<P>
While programming an autorange function for drawing graphs, I was reminded of some basic computer science that we all try to ignore. (See <A href="list2.htm">Listing 2</a>.
)<P>
Joe McCarty<P>
<I>Thanks &#151; pjp</I><P>
Editor:<P>
This is Goldstar software LTD in korea. I'm working on numeric calculation using C. My problem looks like this:<P>
<pre>long double a = 0.123456789012345;
double b = a;</pre>
Real memory:<P>
<pre>b =&gt; 0.12345678901234999...</pre>
Is this a bug in the C Compiler? I hope to know about this problem as soon as possible. Thanks.<P>
jazz@star.gsw.re.kr<br>
or ysw@oass.gsw.re.kr<P>
<I>No, it's a result of the finite precision of floating-point representations. See previous letter. &#151; pjp</I><P>
Mr. Plauger,<P>
I was sorry to learn that the March of <I>CUJ</I> contains Ken Pugh's last Q&amp;A column. I'll miss it. My route through your magazine for the past several years has been your Editor's Forum first, the Q&amp;A column and "We Have Mail" second and third in random order, followed by your <I>Standard C/C</I>++, Chuck Allison's <I>Code Capsules</I>, and Dan Saks C++ column in no particular order. I always check the new CUG releases and I usually find time to read about three of the articles. You have a fine magazine and I'll be looking forward to the replacement for the Q&amp;A column.<P>
Guess I better send in my subscription fee for another couple of years.<P>
Cheers,<P>
Harry<br>
hphilips@epix.net<P>
<I>Glad you're staying around. &#151; pjp</I><P>
PJ,<P>
I'm wondering why it is considered acceptable and "standard" to generate C++ header files with an extension of .h, like Standard C header files. I can understand if the header file is readable by either compiler but not if it is a C++ header file only.<P>
Also, I know that other extensions are acceptable, as in .H, .h++, .hpp, .hxx, and .HH &#151; but they are rarely used. Not using these extensions can be confusing in determining whether a header file can be included in a C program. It requires actually looking in the header file.<P>
Shouldn't this be mentioned as a convention in the ANSI Standard for C++? Not a fixed rule or anything, just identify it as a convention which will usually get people to start using it more regularly. Currently, we have GUI builders that generate C++ code with header files that have the extension of .h, which means that we are proliferating a bad thing.<P>
Thanks for your interest and time. Also, thanks for all the effort you put into making the <I>CUJ</I> such an interesting and informative magazine.<P>
Chris Carlson<P>
<I>Well... actually, the draft C++ Standard has chosen to add yet another convention. Absent any widespread agreement on how to name C++ headers, the Library Working Group has chosen to make all standard C++ headers with no suffix. I don't yet know a good style rule to recommend for user-defined C++ headers.&#151; pjp</I><P>
Dear Editor,<P>
I have a question about the <I>offsetof</I> macro. Is this a run-time or compile-time macro, like the <I>sizeof</I> function? The only documentation I can find on it seems to inply that it can be used at compile time to get the byte offset of a part of a structure. I would appreciate any discripion you can give.<P>
Thank you for providing us with such a fine magazine.<P>
Robert Williams<br>
RobertW809@aol.com<P>
<I>offsetof is a macro that yields a constant integer expression, as does the sizeof operator. Hence, you can use both to initialize static data, determine array sizes, etc. &#151; pjp</I><P>
To the Editor:<P>
Let's say you want to write a Windows DLL in C++. When you declare a function as <I>pascal</I> in C++, the function name becomes upper case and the calling convention is adjusted to that of Pascal, but the name is still mangled. I've tested this with Borland C++ v4.02, Microsoft Visual C++ v1.5, and Symantec C++ v6.1. Of course, each compiler mangles the name differently.<P>
This is all well and good if you are only going to use the DLL with C++ programs compiled with the same compiler, but it is not good if you are going to use the DLL with Visual BASIC or with a program compiled with another C++ compiler, or even with a program compiled with the same compiler in C mode. It seems to me that you have to figure out the name mangle for your compiler (e.g., use the -S flag in Borland C++) and then use an assembly-language thunk from a reasonable name to the mangled name. Do you have a more elegant solution? Is there a solution for people who don't have a stand-alone assembler or are assembler challenged?<P>
Thank you very much.<P>
Sincerely yours,<P>
Joel M. Rubin<P>
<I>Not that I know of, Unfortunately, there are no standards &#151; de facto or otherwise &#151; for name mangling, even when all compilers run on the same operating system. &#151; pjp</I><P>

<h4><a href="../../../source/1995/jun95/letters.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
