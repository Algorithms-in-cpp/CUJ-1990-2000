

<HTML>
<HEAD>

<TITLE>June 1995/Questions and Answers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjun.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Questions and Answers<A name="00D6_007E"><A name="00D6_007E"></font></h2><P>
<h3 align="center"><A name="00D6_0000"><A name="00D6_0000">Surprising Promotion Effects</h3><P>
<h3 align="center"><font color="#800000">Pete Becker</font></h3><hr><blockquote><P>
<P><i><A name="00D6_0000"><A name="00D6_0000">Pete Becker is Senior QA Project Manager for C++ at Borland International. He has been involved with C++ as a developer and manager at Borland for the past six years, and is Borland's principal representative to the ANSI/ISO C++ standardization committee.</i></P><P>
<I>The following questions were taken from various online sources, including the Internet and CompuServe. To ask Pete a question about C or C++, send e-mail to</I><I> </I>pbecker@po.borland.com,<I> use subject line: Questions and Answers; or write to Pete Becker, C/C++ Users Journal, 1601 W. 23rd St., Ste. 200, Lawrence, KS 66046.</I><P>
<B>Q</B><P>
Given the following code snippet:<P>
<pre>   unsigned char a = 0x01;
   unsigned char b = 0xFE;

   if( a == ~b ) ...</pre>
What should the comparison evaluate to &#151; true or false? I've been told that I need to code the comparison as<P>
<pre>   if( a == (unsigned char) ~b ) ...</pre>
because, in the first comparison, both <I>a</I> and <I>b</I> will be promoted to unsigned ints (in our case 32 bits, so <I>a == 0x00000001</I> and <I>b == 0x000000FE</I>), then <I>b</I> will be bitwise negated to <I>0xFFFFFF01</I>, thus resulting in the first comparison evaluating to false when I expected it to evaluate to true. I've been told that this behavior is required by the ANSI spec. I have a copy of the 20 September 1994 draft, and I can't seem to find anything saying this yet.<P>
<B>A</B><P>
The comparison should evaluate to false. You must be careful in both C and C++ when you try to do any operation on integral types smaller than an <I>int</I>, because the compiler promotes the operands to a larger size before doing the operation. The effect of these promotions becomes most obvious in cases like the above, where the code is twiddling individual bits, but promotion can also lead to surprises for ordinary arithmetic operations.<P>
Tracking through the language definitions to understand these effects, we should begin by looking at the ~ operator. The C Standard defines ~ in section 3.3.3, Unary Operators, which says:<P>
The result of the ~ operator is the bitwise complement of its operand (that is, each bit in the result is set if and only if the corresponding bit in the converted operand is not set). The integral promotion is performed on the operand, and the result has the promoted type.<P>
(To find corresponding language in the ANSI/ISO C++ working paper, look in section 5.3.1.) Note the first clause of the second sentence: "The integral promotion is performed..." That's the key to the behavior seen here. To find out what that means, turn to the definition of "integral promotions," found in section 3.2.1.1 (section 4.5 in the C++ working paper):<P>
A <I>char</I>, a <I>short int</I>, or an <I>int</I> bit-field, or their signed or unsigned varieties, or an enumeration type, may be used in an expression wherever an <I>int</I> or <I>unsigned int</I> may be used. If an <I>int</I> can represent all values of the original type, the value is converted to <I>int</I>; otherwise, it is converted to an <I>unsigned int</I>. These are called the integral promotions. All other arithmetic types are unchanged by the integral promotions.[footnote omitted]<P>
In the above case an <I>int</I> can represent every value that an <I>unsigned char</I> can hold, so the <I>unsigned char</I> that is the operand of ~ will be promoted to <I>int</I>. The result is exactly what he describes: <I>0xFE</I> becomes <I>0x00000FE,</I> and applying ~ to this value produces <I>0xFFFFFF01</I>.<P>
We're not done yet, though. Now let's figure out how to handle the == operator. Section 3.3.9, Equality Operators (section 5.10 in the C++ working paper), refers us to section 3.3.8, Relational Operators (section 5.9 in the C++ working paper). In this case, both operands to the == operator have arithmetic type (that is, neither one is a pointer), so the language definition tells us that "the usual arithmetic conversions are performed." The purpose of these usual arithmetic conversions is to bring the operands of a binary operator to a common type. The definition, found in section 3.2.1.5 (section 5 in the C++ working paper), is a bit tedious, but in this case it means that since one operand of the == operator is of type <I>int</I> and the other is smaller, the smaller one should be promoted to <I>int</I>. So the value in a is promoted to <I>int</I>, giving <I>0x00000001</I>. Comparing this with <I>0xFFFFFF01 (~b)</I>, the two values are clearly not equal.<P>
Integral promotions are designed to preserve <I>values</I>. The compiler promotes the unsigned char <I>0xFE</I> to the integer <I>0x000000FE</I>, because <I>0X000000FE</I> has the same numeric value as <I>0xFE</I>. Preserving value does not guarantee, however, that bit manipulations on the two variables will produce the same results.<P>
The questioner's suggestion works because the conversion back to <I>unsigned char</I> throws away the high-order bits that the compiler added in order to convert <I>0xFE</I> into an <I>int</I>. Personally, I prefer to mask out the extra bits instead of using a cast:<P>
<pre>   if( a == ((~b)&amp;UCHAR_MAX)) ...</pre>
This seems clearer to me, because it is applying a bitwise operation to the result of another bitwise operation. If the code were <I>negating </I><I>b</I> instead of complementing it I would use the cast, as the question suggested:<P>
<pre>   if( a == (unsigned char)(-b) ) ...</pre>
Here we're dealing with an arithmetic operation, and the cast strikes me as fitting more naturally with arithmetic operations. Of course, if this code proved to be a performance bottleneck in an application, I would rewrite it in whatever way produced the fastest code.<P>
<B>Q</B><P>
This is my understanding, given the following code fragments:<P>
<pre>   class foo {
   public:
      void ConstFunc () const;
      void NonConstFunc ();
   };

   foo aFoo;

   const foo *p = &amp;aFoo;    // 1

   const foo * const q = &amp;aFoo; // 2</pre>
1.     In <I>//1</I> above, <I>p</I> is const, but the <I>Foo</I> object to which <I>p</I> points is non-const.<P>
2.     In <I>//2</I> above, both <I>q</I> and the referenced object are const.<P>
Am I correct?<P>
<B>A</B><P>
Not quite. It's a bit tricky to read declarations that mix pointers and const qualifiers, and programmers often get confused by declarations like these. The best way to approach these declarations is to start with the identifier being declared and read the declaration from right to left. For example, in the declaration marked <I>//1</I>, the identifier being declared is <I>p</I>. Reading from right to left, we discover that <I>p</I> is a pointer to an object of type <I>foo</I> which is const. So your comment that <I>p</I> is const is incorrect. <I>p</I> can be changed to point to a different object, but the object that <I>p</I> points to at any time cannot be changed through the pointer <I>p</I>. The following code fragment demonstrates this:<P>
<pre>   foo bFoo;
   p = &amp;bFoo; // valid: p is not const
   p-&gt;NonConst Func( );
      // invalid: *p is const
   p-&gt;ConstFunc( ); // valid</pre>
In the declaration marked <I>//2</I>, the identifier being declared is <I>q</I>. Reading from right to left, <I>q</I> is a const pointer to an object of type <I>foo</I> which is const. <I>q</I> itself cannot be changed, and the object that <I>q</I> points to cannot be changed through the pointer <I>q</I>. Thus,<P>
<pre>   q = &amp;bFoo; // invalid: q is const</pre>
I want to point out a little quirk in all this const business, which complicates the syntax interpretation rule I just presented. Consider the following declaration:<P>
<pre>   foo const *r = &amp;aFoo;</pre>
Once again, reading from right to left beginning with the identifer that's being declared, we find that <I>r</I> is a pointer to a const object of type <I>foo</I>. Compare this with the description that we found for <I>p</I> above. But don't spend too much time trying to figure out what the difference is between a "const object of type <I>foo</I>" and an "object of type <I>foo</I> which is const." They're the same thing. In fact, you can also write the following declaration, and it too means the same thing as the declaration of <I>r</I>.<P>
<pre>   const foo const *s = &amp;aFoo;</pre>
<I>s</I> is a pointer to a const object of type <I>foo</I> which is const. Just as the two references to <I>const</I> in this verbal description are redundant, the two uses of <I>const</I> in the declaration itself are redundant.<P>
In general, a const qualifier applies to the thing to its left. When a const qualifier is the first thing in a declaration it doesn't have anything to its left, so it applies to the thing to its right. Some programmers adopt a coding convention that does not allow use of <I>const</I> as the first thing in a declaration. They require that the const qualifier always come after the thing it applies to. These programmers would not use the form we used to define <I>p</I>, but would use the form used for <I>r</I>. Personally, I'm in the habit of writing the <I>const</I> first when it applies to a type name, so I would have a hard time with such a coding convention. But if you find that you are confused by these declarations, it might be useful to adopt this convention so that you always write things in the same way.<P>
It's also important to understand that creating a pointer to a const object does not mean that that object can never be modified. It only means that the pointer itself cannot be used to modify the object. Consider the following:<P>
<pre>   const foo *t = &amp;aFoo;
   t-&gt;NonConst Func( );
      // invalid: calling a non-const
      // member function on a const object

   foo *u = &amp;aFoo;
   u-&gt;NonConst Func();
      // valid: not a const object</pre>
Both of these pointers point to the same object, <I>aFoo. t</I> is a pointer to a <I>const foo</I>, so it cannot be used to modify <I>aFoo. u</I> is a pointer to a non-const <I>foo</I>, so it can be used to modify <I>aFoo</I>.<P>
<B>Q</B><P>
My question relates to assigning a derived to a derived. I have implemented assignment by defining assignment operators for base and derived classes. But I also have tried supplying an assignment operator only in the base <I>(Base&amp; Base::operator=(const Base&amp;))</I> and having it call a virtual protected helper function, <I>setEqual</I>. However, the Annotated Reference Manual [ARM] says assignment operators are not inherited (see below) I am now wondering why the base class's assignment operator is invoked for a derived-to-derived assignment.<P>
ARM section 13.4.3:<P>
The assignment <I>operator=()</I> must be a nonstatic member function; it is not inherited (12.8). Instead, unless the user defines <I>operator=</I> for a class <I>X, operator=</I> is defined, by default, as memberwise assignment of the members of class <I>X</I>.<P>
<B>A</B><P>
In order to understand what this paragraph means we need to look at the meaning of "inherited." Here's a simple pair of classes that will show how this works:<P>
<pre>   class Base
   {
   public:
      void Member( );
      Base&amp; operator = ( const Base&amp; );
   };

   class Derived : public Base
   {
   public:
      int data;
   };</pre>
One thing we can do with these classes is create an object of type <I>Derived</I> and call the member function <I>Member</I>, like this:<P>
<pre>   Derived;
   d.Member( );</pre>
We can call <I>Member</I> even though it is not explicitly declared as a member of <I>Derived</I> because it is inherited from <I>Base.</I> Of course, if <I>Derived</I> had had a member of its own named <I>Member</I>, the call in this code snippet would have called that function and not the version declared in <I>Base</I>.<P>
The assignment operator works a little differently. There's a good reason for that, though. Suppose the assignment operator was simply inherited, like any other member function. What would the following code do?<P>
<pre>   Derived d1;
   d1.data = 3;

   Derived d2;
   d2.data = 0;

   d2 = d1;</pre>
If the assignment operator was simply inherited, the assignment in the last line would call the assignment operator defined in <I>Base</I>, just as the previous example did with <I>Member</I>. This assignment operator knows nothing about the members of <I>Derived</I>, so it cannot copy the value of <I>data</I> from <I>d1</I> into <I>d2</I>. The result would be that <I>d2's</I> member, <I>data</I>, would still contain the value 0. This doesn't seem right; assigning <I>d1</I> to <I>d2</I> should copy all of <I>d1's</I> values into <I>d2</I>.<P>
In fact, that's what the quoted section of the ARM says should happen. <I>Derived</I> does not provide its own assignment operator, so the proper action for the compiler is to copy all of the members of <I>Derived</I> when this assignment is performed. This is made clearer in section 12.8, which says, in part,<P>
Memberwise assignment and memberwise initialization implies that if a class <I>X</I> has a member or base of a class <I>M</I>, <I>M</I>'s assignment operator and <I>M</I>'s copy constructor are used to implement assignment and initialization of the member or base, respectively, in the synthesized operations.<P>
Actually, this wording is also found in the ANSI/ISO C++ working paper, which clarifies many of the little issues in the language definition. In particular, the working paper introduces the notion of a <I>synthesized operation</I>, an important term that allows us to talk about these things more easily. In general, every class has a default constructor, a copy constructor, and an assignment operator. If the appropriate operation is not explicitly defined in the class definition, the compiler will synthesize one.<P>
In our example, the assignment<P>
<pre>   d2 = d1;</pre>
calls the synthesized assignment operator for the class <I>Derived</I>. This assignment operator assigns the <I>Base</I> part of <I>d1</I> to the <I>Base</I> part of <I>d2</I> using the assignment operator for <I>Base</I>, then it assigns the <I>data</I> part of <I>d1</I> to the <I>data</I> part of <I>d2</I> using the assignment operator for <I>int</I>.<P>
Now let's see how this applies in the example posed by your original question:<P>
<pre>   class Base
   {
   public:
      Base&amp; operator = ( const Base&amp; b )
         {
         setEqual( b );
         return *this;
         }
   private:
      virtual void setEqual( const Base&amp; b )
         {
         BaseData = b.BaseData;
         }
      int BaseData;
   };

   class Derived : public Base
   {
   private:
      void setEqual( const Base&amp; b );
      int DerivedData;
   };

   void Derived::setEqual( const Base&amp; b )
   {
      Base::setEqual( b );
      Derived *d = dynamic_cast&lt;Derived*&gt;(&amp;b);
      if ( d != 0)
         DerivedData = d-&gt;DerivedData;
   }</pre>
An important point here is the use of <I>dynamic_cast</I> in <I>Derived:: set Equal()</I>. This is for safety, in case someone explicitly calls <I>Base's</I> assignment operator with an object of type <I>Base</I>:<P>
<pre>   Base b;
   Derived d;
   d.Base::operator=(b);</pre>
If we had simply used a C-style cast or a <I>static_cast</I>, we'd end up trying to copy the <I>DerivedData</I> member from an object of type <I>Base</I>. Since there is no such member, the result would be unpredictable. By using <I>dynamic_cast</I>, we can check whether the argument we are getting is, in fact, of type <I>Derived</I>.<P>
But let's go a step further, and look at what actually happens in the more usual case:<P>
<pre>   Derived d1, d2;
   d2 = d1;</pre>
Since <I>Derived</I> does not define its own assignment operator, the compiler will synthesize one. The synthesized assignment operator does memberwise assignment of the bases and the members. First it will call <I>Base::operator=()</I>, which, in turn, calls <I>setEqual. setEqual()</I> copies the value of <I>DerivedData</I> from <I>d1</I> to <I>d2</I> and returns, and then <I>Base::operator=()</I>returns. Next, the synthesized assignment operator assigns the data members of <I>d1</I> to the data members of <I>d2</I>, simply copying the value of <I>DerivedData</I> from <I>d1</I> to <I>d2</I>. The result of all this is that <I>DerivedData</I> gets set twice, first by <I>setEqual</I> and then by the synthesized assignment operator.<P>
How can we avoid this double assignment? Easy: don't fight the compiler. Write each class to handle its own assignments, either through the synthesized assignment operator or through an explicit assignment operator. Don't worry about derived classes: they'll take care of themselves.<P>
</BLOCKQUOTE>
</BODY>
</HTML>
