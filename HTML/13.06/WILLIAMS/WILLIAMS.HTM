

<HTML>
<HEAD>

<TITLE>June 1995/Magic Matrix Multiply</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocjun.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Scientific &amp; Numeric Applications</FONT></H2>

<hr><h2 align="center"><font color="#800000">Magic Matrix Multiply<A name="00AC_006C"><A name="00AC_006C"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="00AC_0000"><A name="00AC_0000">K. B. Williams</font></h3><hr><blockquote><P>
<P><i><A name="00AC_0000"><A name="00AC_0000">K. B. Williams received a B.A. in Mathematics from California State University of Sacramento in 1955. He is a veteran of forty years in the scientific applications programming trenches and is the founder of King Baker Enterprises, of Stillwater, Oklahoma. He consults in applied numerical techniques. He can be reached at 802 South Ridge Drive, Stillwater, OK 74074, or via e-mail at Kbwms@aol.com.</i></P><P>
Of the weapons in my software arsenal garnered over the past 40 years none has had more use and influence than the one described in this article: <I>matmpy. matmpy</I> began as an assembly-coded function in 1961 when I was solving problems in satellite tracking. Later I dressed it up in Fortran II clothes, followed by Fortran IV and ANSI Fortran, and finally C. As a C function <I>matmpy</I> plays a prominent role in Fading Memory and Kalman Filtering codes. This function has also seen wide use in solving structural analysis problems.<P>
Function <I>matmpy</I> can perform the following operations:<P>
1.     A x B (Matrix Product)<P>
2.     A x B<SUP>T</SUP> (T means transpose)<P>
3.     A<SUP>T</SUP>x B<P>
4.     A<SUP>T</SUP>x B<SUP>T</SUP><P>
5.     Negative Product (any of 1-4 above)<P>
6.     C += any of 1-4 above (replace-add)<P>
7.     C -= any of 1-4 above (replace-subtract)<P>
I call this a Magic Matrix Multiply function because it performs transposition by indexing rather than creating transposes first. As a result, transposes get the same treatment as regular matrices. This technique saves a lot of memory space and computation time.<P>
The code appears in <A href="list1.htm">Listing 1</a>.
 <I>matmpy</I> calculates two-dimensional matrix indexes directly, in as efficient a manner as one-dimensional indexes. Consequently, the matrix multiply loops are fast.<P>
The first two <I>if/else</I> statements set up the row and column controls. If the caller specifies ml as <I>AB</I> or <I>ABT (#defined</I> in the header file <I>mpydefs.h</I>, <A href="list2.htm">Listing 2</a>)
 <I>matmpy</I> sets controls for accessing elements of <I>a</I> in the regular fashion. If not (<I>ml</I> is <I>ATB</I> or <I>A-BT</I>), <I>matmpy</I> sets up to access matrix <I>a</I> as a transpose. Matrix <I>b</I> gets similar treatment depending on whether the user specified <I>mI</I> as <I>AB</I> or <I>ATB</I> for a straight <I>b</I> matrix, or as <I>ABT</I> or <I>ATBT</I> to request transposition of matrix <I>b</I>.<P>
The remainder of the program is straightforward, with the loops indexing over matrix <I>a</I> on a row-by-row basis and forming vector products with matrix <I>b</I>. Once the product is formed, <I>matmpy</I> first determines whether a negative product is desired (<I>m2</I> is <I>MP</I> or <I>CMP</I>). Finally, matmpy determines whether a simple matrix product is desired (<I>m2</I> is <I>P</I> or <I>MP</I>); if not, matmpy performs a replace-add operation to get the final result.<P>
<h4><FONT COLOR="#000080"><A name="00AC_006D">Sample Application<A name="00AC_006D"></FONT></h4></P>
<A href="list3.htm">Listing 3</a>
shows a code fragment taken from a function that adds data to a covariance matrix using the matrix lemma <a href="#1">[1]</a>. The equations are as follows:<P>
<pre>H = SM(R + MSM<SUP>T</SUP>)<SUP>-1</SUP>
S = (I - HM)S(I - HM)<SUP>T</SUP>+ HRH<SUP>T</SUP></pre>
where:<P>
S is the j-by-j covariance matrix to be updated<P>
M is the n-by-j row observation matrix<P>
R is the n-by-n observation covariance matrix<P>
H is the j-by-n filter gain matrix<P>
Q is the temporary storage area dimensioned j-by-j<P>
W is the temporary storage area dimensioned j-by-j<P>
The code in this example calls functions <I>avgvrt</I> and <I>madsub,</I> which are stories in themselves. Function <I>argvrt</I> inverts a (possibly augmented) matrix that could be embedded in a larger matrix. Function <I>madsub</I> adds or subtracts matrices in combinations of transposes as specified by the caller (similar to <I>matmpy</I>).<P>
<h4><FONT COLOR="#000080"><A name="00AC_006E">Usage Notes<B><A name="00AC_006E"></B></FONT></h4></P>
1.     Function <I>matmpy</I> does <I>not</I> check for compatibility of dimensions of A and B.<P>
2.     The software that accompanies this article includes a test driver, <I>tstmpy.c,</I> and a makefile to go with it, both included on this month's code disk.<P>
<h4>Reference</FONT></h4></P>
<a name="1"></a>1.     Norman Morrison. <I>Introduction to Sequential Smoothing and Prediction</I> (McGraw-Hill, 1969), pp. 465-467, equations 12.2.17 and 12.3.7.<P>

<h4><a href="../../../source/1995/jun95/williams.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
