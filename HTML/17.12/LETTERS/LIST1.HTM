<HTML><HEAD>
<TITLE>December 1999/We Have Mail/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1:	A mutex object that relies on zero-initialization of non-local statics</A></h4>
<pre>
#include &lt;windows.h&gt;

template&lt;class Key&gt; class Lock_Guard
{
public:
   Lock_Guard(Key&amp; a_key) 
      : _key(a_key) { lock(); }
   ~Lock_Guard() { unlock(); }

   void lock() { _key.acquire(); }
   void unlock() { _key.release(); }

private:
   Key&amp; _key;
};

class Singleton
{
   class Interlocked_Mutex
   {
   public:
      void acquire();
      void release();
   private:
      volatile LONG _mutex;
   };
public:
   static Singleton&amp; instance();
//...
private:
   static Singleton* _instance;
   static volatile bool _is_created;
   static Interlocked_Mutex _key;
};

Singleton* 
Singleton::_instance = NULL;

volatile bool 
Singleton::_is_created = false;

Singleton::Interlocked_Mutex 
   Singleton::_key;

void Singleton::Interlocked_Mutex
   ::acquire()
{
   while(InterlockedExchange
      (const_cast&lt;LONG*&gt;(&amp;_mutex), 1)
       == 1)
   { // We did not acquire
      while(_mutex)
         ; // spin-lock
   }
}

void Singleton::Interlocked_Mutex
   ::release()
{
   _mutex = 0;
}

Singleton&amp; Singleton::instance()
{
   // Lock-hint check 
   // (race condition here)
   if(!_is_created) 
   {
      Lock_Guard&lt;Interlocked_Mutex&gt; 
         gate(_key);

      // Double-check 
      // (race condition resolved)
      if(!_is_created) 
      {
         _instance = new Singleton;
         _is_created = true;
      }
   }
   return *_instance;
}

</pre>
</BODY>
</HTML>
