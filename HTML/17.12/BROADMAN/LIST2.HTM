<HTML><HEAD>
<TITLE>December 1999/Executing a Class Member in Its Own Thread/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2: A solution that relies on a template class</A></h4>
<pre>
// Listing 2 - thread2.h

#include &lt;memory&gt;       // for auto_ptr&lt;&gt;
#include &lt;winbase.h&gt;    // for CreateThread and macros

template &lt;typename Object, typename MemberFunc, typename Param&gt;
class ThreadableMember
{
private:
    Object&amp;     _instance;
    MemberFunc  _member;

    struct ThrdArg
    {
        Object      *object;
        MemberFunc  memberFunc;
        Param       param;

        ThrdArg (Object&amp; o, MemberFunc m, const Param&amp; p)
            : object(&amp;o), memberFunc(m), param(p) {}
    };

    static DWORD WINAPI ThreadFunc (LPVOID v)
    {
        std::auto_ptr&lt;ThrdArg&gt; arg(reinterpret_cast&lt;ThrdArg*&gt;(v));

        return ((arg-&gt;object)-&gt;*(arg-&gt;memberFunc))(arg-&gt;param);
    }

public:
    ThreadableMember(Object&amp; instance, MemberFunc member)
        : _instance(instance), _member(member) {}

    void run(const Param&amp; param, HANDLE* handle=0, DWORD* id=0)
    {
        DWORD threadId = -1;

        ThrdArg *thrdArg=new ThrdArg(_instance,_member,param);

        // replace CreateThread if your compiler has a function
        // to initialize a thread-safe C runtime library
        HANDLE result =
           CreateThread(
               0,
               0,
               &amp;ThreadFunc,
               thrdArg,
               0,
               &amp;threadId);

        if (result != 0)
        {
            if (handle) *handle = result;
            if (id) *id = threadId;
        }
        else
        {
            delete thrdArg;
            throw std::runtime_error("CreateThread failed.");
        }
    }
};


// provided to support automatic detection of types
template &lt;typename Object, typename MemberFunc, typename Param&gt;
inline void runInThread(Object&amp;      instance,
                        MemberFunc   member,
                        const Param&amp; param,
                        HANDLE*      handle=0,
                        DWORD*       id=0)
{
    ThreadableMember&lt;Object,MemberFunc,Param&gt; m(instance,member);
    m.run(param,handle,id);
}

</pre>
</BODY>
</HTML>
