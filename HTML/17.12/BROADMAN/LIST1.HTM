<HTML><HEAD>
<TITLE>December 1999/Executing a Class Member in Its Own Thread/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: A solution that treats a member function taking no parameters as a global function taking a single void * parameter</A></h4>
<pre>
// Listing 1 - thread1.h

#include &lt;winbase.h&gt;   // for CreateThread and macros

namespace MSVC
{

// works in MSVC 6 but has portability problems - use with risk
template &lt;typename Object&gt;
void runInThread(
         Object&amp; objectInstance,
         DWORD (WINAPI Object::*memberFunc)(void),
         HANDLE* handle=0,
         DWORD* id=0)
{
    using std::runtime_error;

    DWORD (WINAPI *threadFunc)(void*);

    // pass object "this" pointer via thread void* argument
    void *thisPointer = static_cast&lt;void*&gt;(&amp;objectInstance);

    //  copy class member pointer to global function pointer
    *reinterpret_cast&lt;long*&gt;(&amp;threadFunc) =
        *reinterpret_cast&lt;long*&gt;(&amp;memberFunc);

    DWORD threadId = -1;

    // replace CreateThread if your compiler has a function
    // to initialize a thread-safe C runtime library
    HANDLE result =
        CreateThread(
            0,
            0,
            threadFunc,
            thisPointer,
            0,
            &amp;threadId);

    if (result==0) throw runtime_error("CreateThread failed");

    if (handle) *handle = result;
    if (id) *id = threadId;
}

}
</pre>
</BODY>
</HTML>
