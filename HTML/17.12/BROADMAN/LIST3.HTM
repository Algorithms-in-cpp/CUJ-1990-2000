<HTML><HEAD>
<TITLE>December 1999/Executing a Class Member in Its Own Thread/Listing 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 3: Test program</A></h4>
<pre>
// Listing 3 - test.cpp

#include &lt;iostream&gt;
#include &lt;windows.h&gt;    // for GetCurrentThreadId

#include "thread1.h"
#include "thread2.h"

using std::cout;
using std::cin;

// test class
class Foo
{
public:
    DWORD WINAPI test0()
    {
        cout &lt;&lt; "test0:" &lt;&lt; GetCurrentThreadId() &lt;&lt; std::endl;
        return 0;
    }
    DWORD test1(char *param)
    {
        cout &lt;&lt; "test1:" &lt;&lt; GetCurrentThreadId();
        cout &lt;&lt; " param=" &lt;&lt; param &lt;&lt; std::endl;
        return 0;
    }

    // test strongly typed parameters
    struct TestArg
    {
        long id;
        TestArg(long value) : id(value) {}
    };
    DWORD test2(const struct TestArg &amp;args) const
    {
        cout &lt;&lt; "test2:" &lt;&lt; GetCurrentThreadId();
        cout &lt;&lt; " param=" &lt;&lt; args.id &lt;&lt; std::endl;
        return 0;
    }
};


int main(int argc, char *argv[])
{
    cout &lt;&lt; "main:" &lt;&lt; GetCurrentThreadId() &lt;&lt; std::endl;

    Foo f;

    // version from thread1.h
    MSVC::runInThread(f,&amp;Foo::test0);

    // version from thread2.h

    // class requires explicit specification of template types
    ThreadableMember&lt;Foo, DWORD (Foo::*)(char*), char*&gt;
        m(f,&amp;Foo::test1);

    m.run("alpha");

    // function template provides automatic detection of types
    runInThread(f,&amp;Foo::test1, (char*)"bravo");

    // member can take strongly typed parameters
    runInThread(f,&amp;Foo::test2, struct Foo::TestArg(99));

    char c;
    cin.get(c);

    return 0;
}
</pre>

</BODY>
</HTML>
