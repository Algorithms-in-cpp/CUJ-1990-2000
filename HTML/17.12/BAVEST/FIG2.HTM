<HTML><HEAD>
<TITLE>December 1999/Simple Templates for OpenGL/Figure 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Figure 2: The GLvector3 template class</A></h4>
<pre>
//********************************************************
// OpenGL reusable template classes GLpoint4 and GLvector3  
// By G.Bavestrelli,    Copyright Techint S.p.A. 1998-1999
// Any feedback is welcome:
// You can contact me at  : giovanni.bavestrelli@pomini.it
//********************************************************

// Class GLvector3: A vector in 3D space
template &lt;class Numeric&gt;
class GLvector3
{

public:

   Numeric x;
   Numeric y;
   Numeric z;

   GLvector3()
      :x(0),y(0),z(0)
      {}
      
   GLvector3(Numeric x, Numeric y, Numeric z)
      :x(x),y(y),z(z)
      {}

   GLvector3(const Numeric * v)
      :x(v[0]),y(v[1]),z(v[2])
      {}

   operator const Numeric * () const
   { 
      // If this line does not compile,
      // it's because the Numeric members x and y
      // are not aligned like C arrays
      STATIC_ASSERT(offsetof(GLvector3&lt;Numeric&gt;,y)
                   -offsetof(GLvector3&lt;Numeric&gt;,x)
                   ==sizeof(Numeric));
      return &amp;x; 
   }

   GLvector3 &amp; operator =(const Numeric * v)
   {
       x=v[0]; y=v[1]; z=v[2]; 
       return *this; 
   }

   GLvector3 operator - ()
   {
       return GLvector3&lt;Numeric&gt;(-x,-y,-z); 
   }

   double GetLength() const 
   { 
       return sqrt(static_cast&lt;double&gt;(x*x+y*y+z*z)); 
   }

   BOOL Normalize() 
   {
      Numeric Length=GetLength();
      if (Length==0.0) 
         return false;
      x/=Length; y/=Length; z/=Length; 
      return true;
   }

   GLvector3 GetNormal() const 
   {
      Numeric Length=GetLength();
      if (Length==0.0) 
         return GLvector3();
      else 
         return GLvector3(x/Length,y/Length,z/Length);
   }

};

template &lt;class Numeric&gt;
BOOL operator == (const GLvector3&lt;Numeric&gt; &amp; V1, 
                  const GLvector3&lt;Numeric&gt; &amp; V2)
{
   return V1.x==V2.x &amp;&amp; V1.y==V2.y &amp;&amp; V1.z==V2.z;
}

template &lt;class Numeric&gt;
BOOL operator != (const GLvector3&lt;Numeric&gt; &amp; V1, 
                  const GLvector3&lt;Numeric&gt; &amp; V2)
{
   return !(V1==V2);
}


</pre>
</BODY>
</HTML>
