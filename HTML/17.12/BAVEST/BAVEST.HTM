<HTML>   
     <HEAD>
<TITLE>December 1999/Simple Templates for OpenGL</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocdec.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Graphics and Imaging</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Simple Templates for OpenGL</FONT></H2>
<H2 ALIGN="center"><FONT COLOR="#800000">Giovanni Bavestrelli</FONT></H3>
<BLOCKQUOTE>
<p>There's more than one way to wrap an interface. Templates make a particularly thin and useful wrapper.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>When faced with a complex API such as OpenGL, and armed with a powerful language such as C++, it is tempting to simplify and build some kind of layer around the API to make it easier to use. In my previous article <a href="#1">[1]</a>, I discussed encapsulation as one approach. In that article, I wrapped the details of making OpenGL work with Windows into a reusable window class (an MFC <B>CWnd</B>-derived class, to be precise). I did not attempt to wrap OpenGL itself, however, for several reasons. First, OpenGL is a large and standard language, and I did not want to force users to learn yet another interface. Second, OpenGL is very well-documented, and I could not compete with that amount of good documentation. Third, OpenGL was built to be fast. In 3-D graphics, speed is always a concern, so I felt adding an extra layer would be inappropriate. But there's more than one way to use C++ to simplify an API. In this article, I discuss two simple template classes that help while working with OpenGL. This article proves how high-octane C++ features like templates can be of considerable help in using a C API.</p>

<h4><FONT COLOR="#000080">Vectors and Points</FONT></H4>

<p>You can't go far in OpenGL without dealing with vectors and points; you must use them throughout your code. Vectors are used mainly to define surface normals, while points are used mainly to define polygon vertices. Vectors and points are fairly simple concepts, but to complicate matters, in 3-D languages you must use <I>homogeneous coordinates.</I></p>
<p>The homogeneous coordinate system defines an extra coordinate with respect to the familiar Cartesian coordinate system. When homogeneous coordinates are used in 3-D space, an extra coordinate w is added to each triplet of Cartesian coordinates x, y, and z. When w is not zero, the point indicated by homogeneous coordinates (x, y, z, w) is the same as the point indicated by normal Cartesian coordinates (x/w, y/w, z/w), which is the same as the point indicated by homogeneous coordinates (x/w, y/w, z/w, 1). Each point can be represented by different homogeneous coordinate quadruplets, as long as they are multiples of each other. When w is zero (and at least one of x, y, or z is nonzero), the homogeneous coordinates indicate a point at infinity along the line that joins the origin (0, 0, 0) to Cartesian point (x, y, z).</p>
<p>The main advantage of using homogeneous coordinates is that translation transformations (as well as scaling and rotation transformations) can be treated as vector multiplications. This makes it possible to combine many transformations easily. All transformations and projections can be combined into a single operation, which is carried out by multiplying a 4x4 matrix to the homogeneous coordinates of each point (vertex).</p>
<p>If you are unfamiliar with homogeneous coordinates, I suggest you read Chapter 5 ("Geometrical Transformations") of <I>Computer Graphics</I> <a href="#2">[2]</a>. Appendix G of the <I>OpenGL Programming Guide</I> <a href="#3">[3]</a> also describes them briefly.</p>
<p>For the purposes of this article, a vector is just a directed line segment that joins two points in 3-D space. It has a length (magnitude) and a direction, but it does not have a position. You can define a vector with three orthogonal components: x, y, and z.</p>
<p>Points and vectors have some useful relationships. A point minus a point yields a vector. A point plus a vector yields a point. Vectors can also be added, subtracted, or multiplied. (Multiplication can be defined as yielding either a cross or dot product.)</p>
<p>Creating point and vector classes enables you to build C++ operators that implement the relationships between points and vectors. But you cannot use simple C++ classes, or you would have to build one for each type of parameter that the OpenGL functions take. OpenGL lets you use many types; in fact, most OpenGL functions come in many forms. For instance, the <B>glVertex</B> function, which lets you set the vertex of a polygon, comes in 24 forms (see <a href="#4">[4]</a>), among which are:</p>

<pre>
glVertex3f, glVertex4d, glVertex3dv, 
glVertex4fv
</pre>

<p>The <B>3</B> and <B>4</B> indicate the number of parameters (3 for Cartesian coordinates, 4 for homogeneous coordinates). <B>f</B> indicates type <B>GLfloat</B>. <B>d</B> indicates <B>GLdouble</B>. <B>v</B> indicates that the parameters lie in a vector (here, a C-style array). This is why I use template classes.</p>
<p>In standard OpenGL, you identify vectors and points with either separate arguments for each coordinate:</p>

<pre>
glVertex3f(1.0F, 2.0F, 3.0F);
</pre>

<p>or with C arrays of numbers:</p>

<pre>
GLfloat V[3]= { 1.0F, 2.0F, 3.0F };
glVertex3fv(V);
</pre>

<p>Naturally, C++ can give you vector and point classes that are semantically much closer to the vector and point concepts. These classes also encapsulate the necessary data and provide useful operations you'll often need when dealing with these concepts.</p>

<h4><FONT COLOR="#000080">A Point Template Class</FONT></H4>

<p><a href="fig1.htm">Figure 1</a> shows the <B>GLpoint4</B> template class, which is fairly straightforward. This class has four numeric data members, <B>x</B>, <B>y</B>, <B>z</B>, and <B>w</B>. (Yes, I know they are public; I think they should be in this case, as this is an example of those "the implementation is the interface" cases.) The <B>Normalize</B> member function normalizes the homogeneous coordinates by dividing each coordinate by <B>w</B>.</p>
<p>The only member I feel requires explanation is:</p>

<pre>
operator const Numeric * () const { return &amp;x; }
</pre>

<p>This operator allows you to use the OpenGL API with <B>GLpoint4</B> classes directly, without adding many new functions that take <B>GLpoint4</B> as a parameter. Consider the following example:</p>

<pre>
GLpoint4&lt;GLfloat&gt; P(1.0F,2.0F,3.0F);
glVertex3fv(P);
</pre>

<p><B>glVertex3fv</B> expects an array of three <B>GLfloat</B> values, and the above conversion operator provides such an array, returning the address of the x-coordinate of the point. Since the y, z, and w coordinates follow in the class declaration, the memory layout should be like the one of a C array of <B>Numeric</B> (here <B>float</B>) objects. To ensure this, I added a <B>STATIC_ASSERT</B> macro to the conversion operator described above (and I added a similar one in class <B>GLvector3</B>). I implemented <B>STATIC_ASSERT</B> using Andrei Alexandrescu's <B>static_checker</B> template <a href="#6">[6]</a>. If, due to some unfortunate trick of your platform, the memory layout of the contiguous class members <B>x</B>, <B>y</B>, <B>z</B>, and <B>w</B> is not the same as the layout of array members of the same type, the <B>STATIC_ASSERT</B> will produce a compile-time error. If it happens, you might want to fiddle with your compiler's packing strategy by using <B>#pragmas</B> or compiler switches.</p>
<p><a href="fig1.htm">Figure 1</a> shows the definition and use of <B>STATIC_ASSERT</B>. Note that the expression within <B>STATIC_ASSERT </B>is evaluated at compile time, not run time, so I leave <B>STATIC_ASSERT</B> defined also in release builds (this is particularly important since the compiler's packing directives are often different in release builds). Also note that although the <B>w</B> data member follows <B>z</B>, and is initialized to the value 1.0, it is not used in the function <B>glVertex3fv</B>.</p>
<p>The <B>4</B> in the <B>GLpoint4</B> class name indicates that this class contains four data members, and that the conversion operator above returns an array of four numbers. Many OpenGL functions take arrays of three numbers to indicate points (Cartesian coordinates, not homogeneous). In this case, you can still use <B>GLpoint4</B> as long as you know that the fourth data member, <B>w</B>, is 1.0. <B>w</B> will be 1.0 unless you've forced it to something different. On the other hand, you might want to define a similar class, <B>GLpoint3</B>, to represent points with just three normal Cartesian coordinates. For a discussion of this option, see the "Customizations and Extensions" section near the end of this article.</p>

<h4><FONT COLOR="#000080">A Vector Template Class</FONT></H4>

<p><a href="fig2.htm">Figure 2</a> shows the <B>GLvector3</B> template class. Like <B>GLpoint4</B>, it is also fairly straightforward. It has three data members, <B>x</B>, <B>y</B>, and <B>z</B>, which represent the three components of a 3-D vector. The <B>Normalize</B> member function turns the vector into a unit vector (a vector that points in the same direction but whose length equals one), and <B>GetLength</B> returns the length of the vector. Like the point class, the vector class defines a function to provide direct access to its data members:</p>

<pre>
operator const Numeric * () const
{  return &amp;x;   }
</pre>

<p>This function returns the address of the x coordinate, which is followed in the class declaration by y and z, thus resembling an array of three variables in memory. It lets you write code like this:</p>

<pre>
GLvector3&lt;GLfloat&gt; V(1.0F, 2.0F, 3.0F);
glNormal3fv(V);
</pre>

<p>which should be almost as efficient as using straight C arrays, since the operator above is inline.</p>
<p>Other members worth mentioning are the constructor that takes an array of numbers:</p>

<pre>
GLvector3(const Numeric * v)
   :x(v[0]), y(v[1]), z(v[2]){}
</pre>

<p>and the corresponding assignment operator:</p>

<pre>
GLvector3 &amp; operator=(const Numeric * v)
{
   x=v[0]; y=v[1]; z=v[2];
   return *this;
}
</pre>

<p>which provide a conversion from C arrays to <B>GLvector3</B> objects, giving symmetry to this class's interaction with C arrays. (<B>GLpoint4</B> also has a similar constructor and assignment operator.) Note that the copy constructor and copy operator are missing from my class declarations, as the ones generated by the compiler work correctly and are much faster.</p>

<h4><FONT COLOR="#000080">Operator Functions</FONT></H4>

<p>As you can see, these classes are very simple. They encapsulate vectors and points in a way that integrates very well with the existing OpenGL API, and they should be fairly efficient as well. But where the classes really shine is in a few simple operator (and some non-operator) functions. These functions are shown in <a href="fig3.htm">Figure 3</a>.</p>
<p>These functions implement the following useful relationships:</p>

<UL><LI>A vector plus a vector is a resultant vector.</LI>
<LI>A vector minus a vector is a vector.</LI>
<LI>A point plus a vector is a point.</LI>
<LI>A vector multiplied by a vector is the cross product vector.</LI>
<LI>The dot product between two vectors is a number.</LI>
<LI>A point minus a point is a vector.</LI></UL>

<p>These operators can make your life much easier in many situations, especially when defining normals.</p>
<p>The following is a code snippet to draw a triangle with its normal, which is necessary if you want to use lighting effects.</p>

<pre>
GLpoint4&lt;GLfloat&gt; P1(1.0f, 2.0f, 3.0f);
GLpoint4&lt;GLfloat&gt; P2(2.0f, 3.0f, 1.0f);
GLpoint4&lt;GLfloat&gt; P3(3.0f, 1.0f, 2.0f);

glBegin(GL_TRIANGLES);
// Note following line
glNormal3fv((P2-P1)*(P3-P1));
glVertex3fv(P1);
glVertex3fv(P2);
glVertex3fv(P3);
glEnd();
</pre>

<p>The line with the call to <B>glNormal3fv</B> is the most interesting one. The normal of a triangle can be obtained by taking the cross product between any two vectors parallel to its sides. <B>(P2-P1)</B> is one of these vectors, and <B>(P3-P1)</B> is another. This code first uses the operator that defines subtraction between two points. Then the two resulting vectors are multiplied, giving the cross product, which is another vector. This multiplication shows <B>operator*</B> (between vectors) at work. Then the conversion operator returns the address of the array containing the vector coordinates, which represent the normal. I find the above code both readable and concise, though I would not bet my life on its being the fastest possible solution.</p>
<p>Note that this example assumes <B>GL_NORMALIZE</B> is enabled. When this mode is enabled in OpenGL, vectors specified as normals are automatically converted to unit vectors. It is also important to know that the <B>operator-</B> for two points will throw a <B>runtime_error</B> exception if either of the two points is at infinity (i.e., if <B>w == 0</B>).</p>

<h4><FONT COLOR="#000080">Using GLpoint4 and GLvector3</FONT></H4>

<p>Using these classes is easy; all you have to do is <B>#include "OGLUtil.h"</B> in your source files. There is no implementation file. The OpenGL headers will be included automatically, and if you use my <B>COpenGLCtrl</B> and <B>COpenGLCtrls</B> classes <a href="#1">[1]</a> they will include the necessary libraries and take care of all the Windows-specific details of OpenGL, as well. Although I use Windows and MFC, the <B>GLpoint4</B> and <B>GLvector3</B> classes should work on other platforms, perhaps with minor modifications.</p>
<p><I>CUJ</I>'s ftp site includes the source code for the sample application SAMPLE3D from my previous article <a href="#1">[1]</a>, modified to use these classes (see p. 3 for downloading instructions). <a href="fig4.htm">Figure 4</a> illustrates the function that draws the shaded pyramid from that sample application, and <a href="fig5.htm">Figure 5</a> shows the result.</p>

<h4><FONT COLOR="#000080">Caveats</FONT></H4>

<p>Like most software, these classes are not perfect. First of all, they use a type conversion operator and a single argument constructor in order to allow conversions to and from C arrays. These types of conversions are dangerous (see <a href="#5">[5]</a>), but in this case I could not resist their appeal. After all, my classes are just another way to look at C arrays; that's basically the point of using them. If you can think of situations in which they mess things up, let me know. You might also dislike my use of public variables and my trick when returning the vector containing them. In this case, on CUJ's ftp site you will find a version of the classes that you will probably prefer: it has no public variables, no automatic conversion operators, and no trick when returning the vector (so no need for <B>STATIC_ASSERT</B>). I find it less convenient to use, though, and I prefer the version described in this article.</p>
<p>Another thing to watch out for is that OpenGL functions don't statically check the types of these classes. There is no reason you couldn't pass a <B>GLvector3&lt;GLfloat&gt;</B> object to <B>glVertex4fv</B>, which should really take a <B>GLpoint4&lt;GLfloat&gt;</B>. Nor will OpenGL check the array size; that size is included in the class name to remind you, but you could write code like this:</p>

<pre>
GLfloat A[2]= { 1.0F, 2.0F };
GLvector3 V(A); // Danger!
GlNormal3fv(V);
</pre>

<p>The <B>GLvector3</B> constructor will try to access three elements in an array that contains only two. But you are in no worse position with these classes than you are without them, as these problems are inherent in OpenGL's C interface. To solve these problems, would require encapsulating OpenGL, but that is another story.</p>

<h4><FONT COLOR="#000080">Customizations and Extensions</FONT></H4>

<p>There are various ways to customize these classes for your own use. If you don't use <B>glEnable(GL_NORMALIZE)</B> in your OpenGL code, you might want to define the <B>operator*</B> between two vectors to return the normalized cross product instead of the cross product. I doubt this would be the most efficient and neatest solution, but it's an option. Otherwise, you can use the function <B>NormalizedCrossProduct</B> (defined in <a href="fig3.htm">Figure 3</a>) when necessary, like this:</p>

<pre>
glNormal3fv(NormalizedCrossProduct(P2-P1,P3-P2));
</pre>

<p>This is not as concise, but is just as readable.</p>
<p>To optimize the speed of these classes, you might try to use <B>memcpy</B> and <B>memset</B> instead of copying and assigning the individual data members in many member functions. But you'd have to profile your code to make sure that the speed you gain (if any) is worth the readability you loose.</p>
<p>You can use similar classes to represent other concepts in OpenGL land &#151; color, for instance. Colors are also arrays of numbers, either RGB triplets (red, green, and blue factors) or RGBA quadruplets (red, green, blue, and alpha factors). I don't know what operators are meaningful with colors (can you add and subtract colors?), but I am sure such a class would be a very convenient place to put many functions that work on colors. The usual conversion operators will provide the resulting color factors to the good old OpenGL API functions.</p>
<p>Class <B>GLpoint4</B> might also be useful when rendering surfaces &#151; hardly a rare situation with OpenGL. In these cases, you will usually need to store the coordinates of many points. You can use the STL container classes (or any other containers you prefer) to hold instances of class <B>GLpoint4</B>. These containers, in turn, hold the actual coordinates, and the previously described operators will help when passing these points (or vectors derived from them) to OpenGL functions.</p>
<p>As previously mentioned, some OpenGL functions take arrays of three elements, but the <B>GLpoint4</B> class provides four. It is possible to create a <B>GLpoint3</B> class, but you will have to redefine many operators to work with both <B>GLpoint3</B> and <B>GLpoint4</B>, and perhaps with combinations of the two. Another alternative is to derive <B>GLpoint4</B> from <B>GLpoint3</B>. However, to make this work nicely you'd have to introduce virtual functions, and this might not be the place where you want to pay for the overhead. Besides, it is incorrect to say that a homogeneous point "is a" normal Cartesian coordinate point (in fact, the opposite is true). Points at infinity cannot be represented by normal Cartesian coordinates, so therefore inheritance might not be the best solution. I didn't think it was worth the trouble to define a <B>GLpoint3</B> class, so I did not do it for my own uses. I just use <B>GLpoint4</B>.</p>

<h4><FONT COLOR="#000080">Conclusion</FONT></H4>

<p>The presented classes are very simple, fairly efficient, and solve just one simple problem, but in my opinion really show the beauty of C++. I use them mainly when storing surfaces in containers and when defining surface normals. You can, of course, use them in many more places. You can also extend them with other operators/functions you often use on points and vectors, and you can create new classes that integrate in the same way with OpenGL (or other APIs, for that matter).</p>

<h4><FONT COLOR="#000080">Acknowledgments</FONT></H4>

<p>My sincere thanks to Andrei Alexandrescu for his stimulating and honest criticism, his sharp and insightful advice, and his kind willingness to share ideas, some of which I used in this article.</p>

<h4><FONT COLOR="#000080">References</FONT></H4>

<p><a name="1"></a>[1]  Giovanni Bavestrelli. "An OpenGL Wrapper for Win32," <I>C/C++ Users Journal</I>, December 1998.</p>
<p><a name="2"></a>[2]  van Dam Foley, et al. <I>Computer Graphics,</I> 2nd Ed. (Addison-Wesley, 1990).</p>
<p><a name="3"></a>[3]  Neider, Davis, and Woo. <I>OpenGL Programming Guide</I> (Addison-Wesley, 1993).</p>
<p><a name="4"></a>[4]  OpenGL Architecture Review Board. <I>OpenGL Reference Manual</I> (Addison-Wesley, 1992).</p>
<p><a name="5"></a>[5]  Scott Meyers. <I>More Effective C++</I> (Addison-Wesley 1996), Item 5.</p>
<p><a name="6"></a>[6]  Andrei Alexandrescu. "Adapting Automation Arrays to the Standard Vector Interface," <I>C/C++ Users Journal,</I> April 1999, page 26.</p>

<p><i><B>Giovanni Bavestrelli</B> lives in Milan and is a software engineer for Techint S.p.A., Castellanza, Italy. He has a degree in Electronic Engineering from the Politecnico di Milano, and writes automation software for Pomini Roll Grinding machines. He has been working in C++ under Windows since 1992, specializing in the development of reusable object-oriented libraries. He can be reached at <B>giovanni.bavestrelli@pomini.it</B>.</i></p>

<h4><a href="../../../source/1999/dec99/bavestre.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
