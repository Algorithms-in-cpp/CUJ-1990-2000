<HTML><HEAD>
<TITLE>December 1999/Simple Templates for OpenGL/Figure 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Figure 1:	The GLpoint4 template class</A></h4>
<pre>
// Include the standard OpenGL headers
#include "gl\gl.h"     
#include "gl\glu.h"
#include "gl\glaux.h"

#include "math.h"    // For sqrt
#include &lt;stdexcept&gt; // For runtime_error exception

// Static assert, derived from Andrei Alexandrescu's 
// static_checker
// See Andrei's CUJ April'99 article on SAFEARRAYs
template &lt;bool&gt; struct static_checker;
template &lt;&gt; struct static_checker&lt;true&gt; {};
#define STATIC_ASSERT(expr) static_checker&lt;expr&gt;()

//********************************************************
// OpenGL reusable template classes GLpoint4 and GLvector3  
// By G.Bavestrelli,    Copyright Techint S.p.A. 1998-1999
// Any feedback is welcome:
// You can contact me at  : giovanni.bavestrelli@pomini.it
//********************************************************


// Class GLpoint4: A homogeneous coordinate in 3D space
template &lt;class Numeric&gt;
class GLpoint4
{
 public:

   Numeric x;
   Numeric y;
   Numeric z;
   Numeric w;

   GLpoint4()
       :x(0),y(0),z(0),w(1)
       {}

   GLpoint4(Numeric x,Numeric y,
            Numeric z=0,Numeric w=1)
       :x(x),y(y),z(z),w(w)
       {}

   GLpoint4(const Numeric * p)
       :x(p[0]),y(p[1]),z(p[2]),w(p[3])
       {}
 
   operator const Numeric * () const 
   { 
      // If this line does not compile,
      // it's because the Numeric members x and y
      // are not aligned like C arrays
      STATIC_ASSERT(offsetof(GLpoint4&lt;Numeric&gt;,y)
                   -offsetof(GLpoint4&lt;Numeric&gt;,x)
                   ==sizeof(Numeric));
      return &amp;x; 
   }

   GLpoint4 &amp; operator = (const Numeric * c)
   { 
      x=c[0]; y=c[1]; z=c[2]; w=c[3]; 
      return *this; 
   }

   BOOL Normalize()
   {
     if (w==0) return false;
     if (w==1) return true;
     x/=w; y/=w; z/=w; w=1; 
     return true;
   }
};

template &lt;class Numeric&gt;
BOOL operator == (const GLpoint4&lt;Numeric&gt; &amp; C1, 
                  const GLpoint4&lt;Numeric&gt; &amp; C2)
{
    return C1.x==C2.x &amp;&amp; C1.y==C2.y &amp;&amp; C1.z==C2.z &amp;&amp; C1.w==C2.w;
}

template &lt;class Numeric&gt;
BOOL operator != (const GLpoint4&lt;Numeric&gt; &amp; C1, 
                  const GLpoint4&lt;Numeric&gt; &amp; C2)
{
    return !(C1==C2);
}
</B>
</pre>
</BODY>
</HTML>
