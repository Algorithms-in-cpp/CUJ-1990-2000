<HTML><HEAD>
<TITLE>December 1999/Manipulating Sparse Matrices/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2: A class derived from smatrix to do linear decomposition</A></h4>
<pre>
#ifndef LUDECOMP_H
#define LUDECOMP_H

#include "smatrix.h"

namespace sm {

template &lt;class t&gt; class TLUDecomp : public smatrix&lt;t&gt;
{
protected:
    smatrix&lt;t&gt; pivots;
    bool bDecomposed;

public:
    TLUDecomp(const smatrix&lt;t&gt; &amp;m, bool bWithPartialPivot) : 
        smatrix&lt;t&gt;(m)
    {
        bDecomposed = false;
        if(Decompose(bWithPartialPivot) == false)
        {
            pivots = smatrix&lt;t&gt;();
            *this = TLUDecomp&lt;t&gt;();
        }
    }
    TLUDecomp(const t* d, size_t iDim, size_t jDim, 
        bool bWithPartialPivot) : smatrix&lt;t&gt; (d, iDim, jDim)
    {
        bDecomposed = false;
        if(Decompose(bWithPartialPivot) == false)
        {
            pivots = smatrix&lt;t&gt;();
            *this = TLUDecomp&lt;t&gt;();
        }
    }
    TLUDecomp() { bDecomposed = false; }
    bool Decompose(const smatrix&lt;t&gt; &amp;m, bool bWithPartialPivot)
    {
        *this = m;
        bDecomposed = false;
        if(Decompose(bWithPartialPivot) == false)
        {
            pivots = smatrix&lt;t&gt;();
            *this = TLUDecomp&lt;t&gt;();
            return(false);
        }
        return(true);
    }
    void FwdElim(smatrix&lt;t&gt; &amp;c) const
    {
        for(size_t k = 1; k &lt; iDim; k++)
        {
            const_iterator i = IterForCol(k, k + 1);
            while(i != EndOfCol(k))
            {
                t Scaler = Coef(i);
                size_t r = Index(i++);
                c.row(r) += c.row(k) * Scaler;
            }
        }
    }
    void BackElim(smatrix&lt;t&gt; &amp;c) const
    {
        for(size_t k = iDim; k &gt;= 1; k--)
        {
            t Diag = t(-1.0) / Coef(k, k);
            const_iterator i = IterForCol(k);
            while(Index(i) &lt; k)
            {
                t Scaler = Coef(i) * Diag;
                size_t r = Index(i++);
                c.row(r) += c.row(k) * Scaler;
            }
            c.row(k) *= -Diag;
        }
    }
    bool Decompose(bool bWithPartialPivot)
    {
        if(bDecomposed) return(true);
        if(iDim != jDim) return(false);
        pivots = smIdentity&lt;t&gt;(iDim);
        for(size_t k = 1; k &lt; iDim; k++)
        {
            t Diag;
            if(!GetDiag(k, Diag, bWithPartialPivot, &amp;pivots)) 
                return(false);
            Diag = t(-1.0) / Diag;
            iterator i = IterForCol(k, k + 1);
            while(i != EndOfCol(k))
            {
                t Scaler = Coef(i) * Diag;
                size_t r = Index(i++);
                row(r) += row(k, rng(k + 1, jDim)) * Scaler;
                Coef(r, k) = Scaler;
            }
        }
        t Diag = Coef(k, k);
        if(abs(Diag) &lt; epsilon)
            return(false);
        bDecomposed = true;
        return(true);
    }
    smatrix&lt;t&gt; Solve(const smatrix&lt;t&gt; &amp;m) const
    {
        smatrix&lt;t&gt; c(m.iDim, m.jDim, m.NZ);
        if(bDecomposed)
        {
            for(size_t r = 1; r &lt;= iDim; r++)
            {
                const_svector_ref &amp;v = m.row(r);
                const_iterator i = pivots.IterForCol(r);
                size_t x = Index(i);
                c.row(x) = v;
            }
            FwdElim(c);
            BackElim(c);
        }
        return(c);
    }
    smatrix&lt;t&gt; Inverse() const
    {
        smatrix&lt;t&gt; c(pivots);
        if(bDecomposed)
        {
            FwdElim(c);
            BackElim(c);
        }
        return(c);
    }
    smatrix&lt;t&gt; L() const
    {
        smatrix&lt;t&gt; c(iDim, jDim, NZ);
        for(size_t r = 1; r &lt;= iDim; r++)
        {
            c.row(r) = row(r, rng(1, r - 1)) * t(-1);
            c.Coef(r, r) = t(1);
        }
        return(c);
    }
    smatrix&lt;t&gt; U() const
    {
        smatrix&lt;t&gt; c(iDim, jDim, NZ);
        for(size_t r = 1; r &lt;= iDim; r++)
            c.row(r) = row(r, rng(r, jDim));
        return(c);
    }
    smatrix&lt;t&gt; P() const
    {
        return(pivots);
    }
};

}

#endif

</pre>
</BODY>
</HTML>
