<HTML><HEAD>
<TITLE>December 1999/Manipulating Sparse Matrices/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: Test program for the smatrix class</A></h4>
<pre>
#include "stdafx.h"
#include &lt;fstream&gt;
#include &lt;iostream&gt;
#include "smatrix.h"
#include "RndSmatrix.h"
#include "LUDecomp.h"
#include "fastheap.h"
#include &lt;iostream&gt;
#include &lt;time.h&gt;

using namespace sm;

smatrix&lt;double&gt; CoefInit5x5()
{
    smatrix&lt;double&gt; c;
    c(1, 2) =  1;
    c(2, 1) = -2; c(2, 3) =  7; c(2, 5) = 1;
    c(3, 3) = -9;
    c(4, 1) = -6; c(4, 4) =  6; c(4, 5) = 4;
    c(5, 1) =  7; c(5, 2) = -6; c(5, 4) = 6;
    return(c);
}

double My5x5[] = {
   0,       1,       0,       0,       0,
  -2,       0,       7,       0,       1,
   0,       0,      -9,       0,       0,
  -6,       0,       0,       6,       4,
   7,      -6,       0,       6,       0
};

smatrix&lt;double&gt; ArrayInit5x5()
{
    return(smatrix&lt;double&gt;(My5x5, 5, 5));
}

smatrix&lt;double&gt; InsertInit5x5()
{
    smatrix&lt;double&gt; c(5, 5, 11);
    double *d = My5x5;
    for(size_t i = 1; i &lt;= 5; i++)
    {
        for(size_t j = 1; j &lt;= 5; j++, d++)
        {
            if(*d != 0)
                c.insert(i, j, *d);
        }
    }
    return(c);
}

template &lt;class t&gt; smatrix&lt;t&gt; MyMultiply(const smatrix&lt;t&gt; &amp;a,
    const smatrix&lt;t&gt; &amp;b)
{
    smatrix&lt;t&gt; c;
    for(size_t i = 1; i &lt;= a.iDim; i++)
    {
        for(size_t j = 1; j &lt;= b.jDim; j++)
            c(i, j) = a.row(i) * b.col(j);
    }
    return(c);
}

template &lt;class t&gt; smatrix&lt;t&gt; MyAdd(const smatrix&lt;t&gt; &amp;a,
    const smatrix&lt;t&gt; &amp;b)
{
    smatrix&lt;t&gt; c;
    for(size_t i = 1; i &lt;= a.iDim; i++)
        c.row(i) = a.row(i) + b.row(i);
    return(c);
}

template &lt;class t&gt; smatrix&lt;t&gt; MyUpperTrans(const smatrix&lt;t&gt; &amp;m)
{
    smatrix&lt;t&gt; c;
    for(size_t i = 1; i &lt;= m.iDim; i++)
        c(rng(i, m.iDim), i) = m(i, rng(i, m.iDim));
    return(c);
}

size_t TestLUDecomp(ostream &amp;os, size_t Size, 
    size_t NZ, size_t xNZ, size_t Iterations)
{
    os &lt;&lt; "Test Linear Solutions Using LU Decomposition ";
    os &lt;&lt; endl;
    EnableFastHeap();
    srand(0);
    time_t Total(0), Start, Stop;
    for(size_t n = 0; n &lt; Iterations; n++)
    {
        // Construct a random linear system, Ax = b
        TRndSolvable&lt;double, double&gt; A(Size, -10, 10, NZ);
        os &lt;&lt; "A" &lt;&lt; endl &lt;&lt; A &lt;&lt; endl;
        smatrix&lt;double&gt; x;
        if(xNZ == Size)
            x = TRndDMatrix&lt;double, double&gt;(Size, 1, -10, 10);
        else
            x = TRndSMatrix&lt;double, double&gt;(Size, 1, -10, 
                10, xNZ);
        os &lt;&lt; "x" &lt;&lt; endl &lt;&lt; x &lt;&lt; endl;
        smatrix&lt;double&gt; b = A * x;
        os &lt;&lt; "b" &lt;&lt; endl &lt;&lt; b &lt;&lt; endl;

        // Solve for 'x' given 'A' and 'b'
        time(&amp;Start);
        TLUDecomp&lt;double&gt; LU(A, true);
        smatrix&lt;double&gt; xCalc = LU.Solve(b);
        time(&amp;Stop);
        Total += Stop - Start;

        // Print how close the 'xCalc' is to 'x'
        os &lt;&lt; "Residual = " &lt;&lt; (xCalc - x).maxCoef &lt;&lt; endl;
        os &lt;&lt; endl &lt;&lt; endl;
    }
    DisableFastHeap();
    return(Total / Iterations);
}

size_t TestLUInverse(ostream &amp;os, size_t Size, 
    size_t NZ, size_t xNZ, size_t Iterations)
{
    os &lt;&lt; "Testing Inverse Using LU Decomposition " &lt;&lt; endl;
    EnableFastHeap();
    srand(0);
    time_t Total(0), Start, Stop;
    for(size_t n = 0; n &lt; Iterations; n++)
    {
        smatrix&lt;double&gt; A = TRndDMatrix&lt;double, double&gt;(
            Size, Size, -10, 10);
        time(&amp;Start);
        TLUDecomp&lt;double&gt; LU(A, true);
        smatrix&lt;double&gt; InvA = LU.Inverse();
        time(&amp;Stop);
        Total += Stop - Start;
        smatrix&lt;double&gt; Ident = smIdentity&lt;double&gt;(Size);
        os &lt;&lt; InvA &lt;&lt; endl;
        os &lt;&lt; "Residual = " &lt;&lt; (Ident - (A * InvA)).maxCoef;
        os &lt;&lt; endl &lt;&lt; endl &lt;&lt; endl;
    }
    DisableFastHeap();
    return(Total / Iterations);
}

template &lt;class t&gt; smatrix&lt;t&gt; JonesMayerInv(
    const smatrix&lt;t&gt; &amp;m, size_t Iterations)
{
    smatrix&lt;t&gt; a(m);
    t Scaler = t(1.0) / m.FrobeniousNormal() * 1.1;
    a *= Scaler;
    smatrix&lt;t&gt; x(a);
    x.Transpose();
    for(size_t n = 0; n &lt; Iterations; n++)
        x = (x * 2) - ((x * a) * x);
    x *= Scaler;
    return(x);
}

void TestJonesMayerInv(ostream &amp;os, size_t Size, 
    size_t Iterations)
{
    os &lt;&lt; "Testing Jones and Mayer Inversion" &lt;&lt; endl;
    EnableFastHeap();
    srand(0);
    for(size_t n = 0; n &lt; Iterations; n++)
    {
        smatrix&lt;double&gt; A = TRndDMatrix&lt;double, double&gt;(
            Size, Size, -10, 10);
        smatrix&lt;double&gt; InvA = JonesMayerInv(A, 25);
        smatrix&lt;double&gt; Ident = smIdentity&lt;double&gt;(Size);
        os &lt;&lt; InvA &lt;&lt; endl;
        os &lt;&lt; "Residual = " &lt;&lt; (Ident - (A * InvA)).maxCoef;
        os &lt;&lt; endl &lt;&lt; endl &lt;&lt; endl;
    }
    DisableFastHeap();
}

void PrintSolvability(ostream &amp;os, smatrix&lt;double&gt; &amp;m)
{
    TLUDecomp&lt;double&gt; LU(m, true);
    os &lt;&lt; m &lt;&lt; endl;
    os &lt;&lt; (!LU ? "Unsolvable" : "Solvable");
    os &lt;&lt; endl &lt;&lt; endl;
}

void Unsolvable(ostream &amp;os)
{
    double _m[] = {
        1.0,             1.0 - .00000001,
        1.0 + .00000001, 1.0
    };
    smatrix&lt;double&gt; m(_m, 2, 2);
    PrintSolvability(os, m);
}

void Solvable(ostream &amp;os)
{
    double _m[] = {
        1.0,             1.0 - .0000001,
        1.0 + .0000001,  1.0
    };
    smatrix&lt;double&gt; m(_m, 2, 2);
    PrintSolvability(os, m);
}

void TestDeterminant(ostream &amp;os, size_t Size, 
    size_t Iterations)
{
    os &lt;&lt; "Testing Determinant Calculation" &lt;&lt; endl;
    EnableFastHeap();
    srand(0);
    for(size_t n = 0; n &lt; Iterations; n++)
    {
        double lnScaledDet;
        smatrix&lt;double&gt; A = TRndDMatrix&lt;double, double&gt;(
            Size, Size, -10, 10);
        smatrix&lt;double&gt; temp(A);
        int Sign = temp.lnScaledDet(lnScaledDet, true);
        double Scaler = exp(lnScaledDet / Size);
        smatrix&lt;double&gt; Unscaled = A * (1.0 / Scaler);
        if(Sign &lt; 0)
            os &lt;&lt; "Residual = " &lt;&lt; (1.0 + Unscaled.det(true));
        else
            os &lt;&lt; "Residual = " &lt;&lt; (1.0 - Unscaled.det(true));
        os &lt;&lt; endl;
    }
    DisableFastHeap();
}

size_t smatrix&lt;double&gt;::PrintWidth = 8;
size_t smatrix&lt;double&gt;::PrintPrecision = 3;

int main(int argc, char* argv[])
{
    cout &lt;&lt; ArrayInit5x5() &lt;&lt; endl;
    cout &lt;&lt; CoefInit5x5() &lt;&lt; endl;
    cout &lt;&lt; InsertInit5x5() &lt;&lt; endl;
    fstream Fig1("Figure1.txt", ios::out);
    smatrix&lt;double&gt; a = ArrayInit5x5();
    a.PrintListing(Fig1);

    cout &lt;&lt; (a * 2.0) &lt;&lt; endl;
    cout &lt;&lt; (2.0 * a) &lt;&lt; endl;

    smatrix&lt;double&gt; b = MyUpperTrans(a);
    cout &lt;&lt; b &lt;&lt; endl;
    cout &lt;&lt; (a + b) &lt;&lt; endl;
    cout &lt;&lt; MyAdd(a, b) &lt;&lt; endl;
    cout &lt;&lt; (a * b) &lt;&lt; endl;
    cout &lt;&lt; MyMultiply(a, b) &lt;&lt; endl;

    a = TRndDMatrix&lt;double, double&gt;(4, 5, -6, 7);
    cout &lt;&lt; a &lt;&lt; endl;
    b = TRndSMatrix&lt;double, int&gt;(8, 9, -11, 12, 50);
    cout &lt;&lt; b &lt;&lt; endl;

    TestJonesMayerInv(cout, 10, 10);
    TestLUDecomp(cout, 10, 50, 10, 10);
    TestLUInverse(cout, 10, 50, 10, 10);

    Solvable(cout);
    Unsolvable(cout);
    cout &lt;&lt; endl;

    TestDeterminant(cout, 10, 50);

    cout &lt;&lt; "Average time:  " &lt;&lt; 
        TestLUDecomp(cout, 2000, 15000, 2000, 10) 
        &lt;&lt; " seconds" &lt;&lt; endl;

    return 0;
}


</pre>
</BODY>
</HTML>
