


<HTML>
<HEAD>

<TITLE>April 1992/Doctor C's Pointers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocapr.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Doctor C's Pointers&reg;<A name="00B9_0056"><A name="00B9_0056"></font></h2><P>
<h3 align="center"><A name="00B9_0000"><A name="00B9_0000">Data Structures, Part 11: Yet More on Stacks</h3><P>
<h3 align="center"><font color="#800000">Rex Jaeschke</font></h3><hr><blockquote><P>
<P><i><A name="00B9_0000"><A name="00B9_0000">Rex Jaeschke is an independent computer consultant, author, and seminar leader. He participates in both ANSI and ISO C Standards meetings and is the editor of The Journal of C Language Translation, a quarterly publication aimed at implementors of C language translation tools. Readers are encouraged to submit column topics and suggestions to Rex at 2051 Swans Neck Way, Reston, VA 22091 or via UUCP at<I> rex@aussie.com</I>.</i></P><P>
<h4><FONT COLOR="#000080"><A name="00B9_0057">Handling Multiple Stacks of the Same Type<A name="00B9_0057"></FONT></h4></P>
Last month's column described how to implement a stack and to use <I>push</I> and <I>pop</I> functions on it. However, it would be a waste to have a different set of <I>push</I> and <I>pop</I> functions for each stack. This month I will discuss how to share the code.<P>
Consider <A href="list1.htm">Listing 1</a>.
 An object of type <I>stack</I> contains the current context of a given stack. This context includes the stack's name (for debugging or trace-back purposes), the base address of the stack, the stack's size and its current stack pointer. The stack descriptors <I>stack1</I>, <I>stack2</I>, and <I>stack3</I> therefore describe the three different <I>int</I> stacks. The first stack is stored in a global array, the second in a file scope static array, while the third is allocated at runtime using <I>malloc</I>. In short, the stack management functions don't know and don't care where the stacks reside.<P>
<A href="list2.htm">Listing 2</a>
tells <I>push</I> and <I>pop</I> which stack to use but the notation is not particularly unwieldy. <A href="list3.htm">Listing 3</a>
could be made a little bit cleaner by passing the stack descriptor by value, but that could be just a little more expensive since the descriptor is a structure. The output produced is shown in <A href="fig1.htm">Figure 1</a>.
<P>
<h4><FONT COLOR="#000080"><A name="00B9_0058">Handling Multiple Stacks of Different Types<A name="00B9_0058"></FONT></h4></P>
Can this idea be extended to manage stacks of different types? The answer is a qualified <I>yes</I>. One way could be to use generic pointers, as shown in <A href="list4.htm">Listing 4</a>.
 Here, a <I>void</I> pointer is used to hold the stack's base address. This also requires an extra member to indicate the type of elements in any given stack, as in<P>
<pre>void push(stack *, void *);
void *pop(stack *);</pre>
The interface to <I>push</I> and <I>pop</I> gets very messy, however. Since an object of arbitrary type cannot be passed by value, it must be passed by assigning it to a named object and then passing that object by address, as shown in <A href="list5.htm">Listing 5</a>.
 (This eliminates the ability to push a constant directly.) This is possible since all data pointer types are compatible with <I>void</I> *. Similarly, an arbitrary typed value can't be returned, so the address is returned instead.<P>
To use the value returned by <I>pop</I> you must use an explicit cast as well as a dereference since <I>pop</I> returns a pointer (see <A href="list6.htm">Listing 6</a>)
. In fact, since <I>pop</I> returns the address of the object just popped from the stack, if you don't dereference the pointer returned immediately, the location it points to will be overwritten by the very next push and the value popped will change.<P>
The source for <I>push</I> and <I>pop</I> is far from pretty. Since it cannot perform arithmetic (via subscripting) on <I>void</I> pointers, you must explicitly provide the scaling factor.<P>
<h4><FONT COLOR="#000080"><A name="00B9_0059">Using Unions<A name="00B9_0059"></FONT></h4></P>
Another way to look at the problem is rather than have stacks of different types, have one stack that can handle objects of different types. You can achieve this via a union, as shown in <A href="list7.htm">Listing 7</a>.
<P>
Each entry is a union of all the possible types along with a flag member that indicates which type this entry currently represents. We push nodes by value and return them by value using simple and obvious notation. If you try to pop from an empty stack, instead of complaining, <I>pop</I> returns a copy of a local node that has a special type field value of <I>Error</I>.<P>
Next, consider <A href="list8.htm">Listing 8</a>.
 Note the interesting controlling expression in the <I>while</I> loop &#151; it uses the comma operator in an effective manner.<P>
The stack management functions presented in <A href="list9.htm">Listing 9</a>
are quite straightforward.<P>
<h4><FONT COLOR="#000080"><A name="00B9_005A">Opposing Stacks<A name="00B9_005A"></FONT></h4></P>
A stack grows and shrinks from one end only so it is possible to have two stacks based at opposite ends of an array with their tops growing toward each other. This can save space if both stacks don't grow very large at the same time. However, when one is smaller, the other can grow larger and vice-versa.<P>
The <I>dump_stack</I> function in <A href="list10.htm">Listing 10</a>
allows us to see the contents of the underlying array as the two stacks grow and shrink. Note that it pops in a different order than it pushes, so the operations are staggered.<P>
The stack in <A href="list11.htm">Listing 11</a>
can only handle four elements. This helps you monitor the progress as elements are pushed and popped. Clearly, it would be larger in a real application. Of course, the bases of the two stacks are at either end of the underlying array and in one stack the stack pointer increments as we push and in the other it decrements. Stack overflow is detected when the two stack pointers bump into each other. Note that it's OK if both of them point to the same element since that last free element is available to which ever stack can use it first.<P>
The two versions of <I>push</I> and <I>pop</I> in <A href="list12.htm">Listing 12</a>
are different enough that it is not obvious you can write a single version that is both elegant and efficient. The output produced is shown in <A href="fig2.htm">Figure 2</a>.
<P>
Note that even after a value is popped from a stack it still remains there &#151; only the stack pointer is adjusted. This is exactly what happens when a C function returns; the values of it's automatic variables are still on the stack but are outside the bounds of the newly adjusted stack pointer. They remain intact until that part of the stack is overwritten for some other purpose.<P>

<h4><a href="../../../source/1992/apr92/jaeschke.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
