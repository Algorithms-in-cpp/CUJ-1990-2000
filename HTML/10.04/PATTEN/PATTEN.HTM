


<HTML>
<HEAD>

<TITLE>April 1992/C Express: 250+ Ready-To-Run Assembly-Language Routines for Turb</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocapr.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Book Reviews</FONT></H2>

<hr><h2 align="center"><font color="#800000">C Express: 250+ Ready-To-Run Assembly-Language Routines for Turbo C, Microsoft C, and QuickC<A name="00C3_0060"><A name="00C3_0060"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="00C3_0000"><A name="00C3_0000">Reviewed by Stephen Patten</font></h3><hr><blockquote><P>
<P><i><A name="00C3_0000"><A name="00C3_0000">Stephen Patten is a senior analyst with the Lincoln Savings Bank in New York and teaches C at New York University. He can be reached at (516) 932-3484.</i></P><P>
<I>C Express: 250+ Ready-To-Run Assembly-Language Routines for Turbo C, Microsoft C and QuickC</I>, a book and accompanying diskettes, was written (both the assembly source code and text) by Robert Jourdain and published by Brady Books, a division of Simon &amp; Schuster, Inc. The copy I reviewed was dated 1989.<P>
<h4><FONT COLOR="#000080"><A name="00C3_0061">Companion Diskettes<A name="00C3_0061"></FONT></h4></P>
Two 5.25" diskettes accompany the 412-page book. One diskette contains the eight library files which house the 250 plus routines in object code form along with eight parallel header files for function prototyping. The other diskette contains the assembly language source of the routines in compressed form. (You can exchange the 5.25" disks for 3.5").<P>
You install the libraries and header files on a hard drive by a simple copy, and then call routines as you would any C function inside source code. A global variable is also set which is used by the compiler to configure the correct memory model.<P>
<h4><FONT COLOR="#000080"><A name="00C3_0062">Book Contents<A name="00C3_0062"></FONT></h4></P>
Chapter 1 provides a short introduction to using the library. Chapters 2-9 document the library files included on the companion disk. Chapter 10 includes a discussion on writing your own assembly subroutines to link with C programs. This is followed by indices of general topics, the routines, and their object files.<P>
The routines or functions are documented pretty much as you would expect, each described in terms of its purpose, parameters, globals required, kinds of errors checked, and relevant peculiarities. Examples of calls are also amply provided.<P>
The book also presents background information on groups of routines. For example, functions that implement expanded memory are preceded by a description of the LIM specification, not in great detail, but enough for the programmer to understand what the routines do and why.<P>
Interestingly, video routines which can be implemented in either ROM BIOS or memory-mapped form are presented both ways, with the ROM BIOS routines suffixed with an underscore and lower case <I>b</I>. Depending upon the application, the programmer can choose between speed and portability.<P>
<h4><FONT COLOR="#000080"><A name="00C3_0063">Overview of Functions<A name="00C3_0063"></FONT></h4></P>
The equipment configuration routines access the usual details of installed hardware and are only notable in that they eliminate the bit manipulations required when using the compiler library to extract the same information.<P>
The memory management routines test for extended and expanded memory, and allow programming of expanded memory applications. Pages can be allocated, switched and deallocated, and data exchanged between expanded memory and RAM quickly and easily. This can be a real plus to a C programmer restricted by the one megabyte limitation of the MS-DOS environment.<P>
C Express routines, like <I>hex_to_char, hex_to_int</I>, <I>binary_to_char</I>, and <I>binary_to_int</I>, interpret such strings as numbers, producing values which can then be entered as numeric data in C programs. Combined with existing <I>stdlib.h</I> utility functions, like <I>itoa</I>, they can also be used to convert binary to hex, or vice versa, a nice library facility.<P>
There are string manipulation routines to add or delete characters to or from strings, change string characters, and perform various substring operations. There are also keyboard routines that provide for fast operating system calls to check, read, clear, wait on and change characters, and scan codes in the keyboard buffer.<P>
<I>filter_in</I>, for example, captures the next keystroke in the buffer then looks for the same character in a predefined table. If found, the keystroke is accepted; otherwise, it's rejected. A related routine, <I>filter_out</I>, does the opposite, rejecting a character found in the table.<P>
<I>key_pause</I> allows a key to act like an ON-OFF switch. Hold it down and, let's say, a help screen appears. Release it, and the help screen disappears. This can replace long and complicated <I>if</I> and <I>switch</I> statements with cleaner, faster code.<P>
Mouse routines, based on Microsoft's driver, position the mouse cursor, turn it on and off, capture a button press, report mouse positioning and control mouse motion to cursor movement. With <I>pixel_ratio</I>, you can set the exact movement ratio between the mouse and its cursor motion. With <I>define_graphics_cursor</I>, you can set the precise pixel or "hot spot" inside the pattern of pixels that fall under the cursor display.<P>
Screen control routines set the video adapter, position the cursor, set mono or color attributes, and control the writing of strings to the screen. For example, <I>clear_blink</I> changes the 7 bit in the attribute byte so that it controls the intensity of background colors rather than blinking, effectively doubling background colors in CGA text mode. <I>set_blink</I> restores the bit to its original interpretation.<P>
<I>display</I> and <I>display_b</I>, unlike <I>printf</I>, are passed arguments to both position a string before displaying, and display with an attribute.<P>
The graphics in C Express are limited to the CGA text mode. Like the screen control routines, there are both memory-mapped and BIOS versions. They draw the usual assortment of graphics figures as well as scroll sections of the screen either vertically or horizontally. Written in assembly, they run very fast.<P>
The file routines are built around a data structure called <I>tree_array</I> which holds directory names and pointers to sub-directories. The routines work with the structure displaying a directory tree or searching through the tree for a file. It's a little tricky going at first, but the book makes it all pretty clear.<P>
Finally, a variety of printer output services are included. They simplify sending output to the printer inside a C program, do a certain amount of printer formatting, interpret embedded control codes in strings and implement the BIOS print screen function. <I>wrap_line</I> formats a string for printing in word wrapped form, while <I>justify_line</I> formats a string in right-justified, word wrapped form. The <I>prtsc</I> routine performs a screen dump, sending both text and graphics images to the printer.<P>
In conclusion, the C Express package provides a collection of object code files and routines for calling within a C program. The routines are not unique in terms of their functionality but are a fairly standard collection that can be found in other off the shelf libraries. They are easy to set up and use, and they run fast. I was unable to find any bugs. The book provides good, well-organized documentation, and guidance for using the library files.<P>
Particularly for new C programmers, the package would very likely make an excellent starter kit and base from which to build their own language libraries.<P>
<I>C Express: 250+ Ready-To-Run Assembly-Language Routines for Turbo C, Microsoft C and QuickC</I><br>
Robert Jourdain<br>
Brady Books, 1989<br>
ISBN 0-13-933185-9<P>
</BLOCKQUOTE>
</BODY>
</HTML>
