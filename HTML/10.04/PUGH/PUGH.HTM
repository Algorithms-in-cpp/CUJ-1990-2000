


<HTML>
<HEAD>

<TITLE>April 1992/Questions & Answers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocapr.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Questions &amp; Answers<A name="00BD_005A"><A name="00BD_005A"></font></h2><P>
<h3 align="center"><A name="00BD_0000"><A name="00BD_0000">Calling Functions from Within a Function</h3><P>
<h3 align="center"><font color="#800000">Ken Pugh</font></h3><hr><blockquote><P>
<P><i><A name="00BD_0000"><A name="00BD_0000">Kenneth Pugh, a principal in Pugh-Killeen Associates, teaches C language courses for corporations. He is the author of C Language for Programmers and All On C, and was a member on the ANSI C committee. He also does custom C programming for communications, graphics, image databases, and hypertext. His address is 4201 University Dr., Suite 102, Durham, NC 27707. You may fax questions for Ken to (919) 489-5239. Ken also receives email at <I>kpugh@dukemvs. ac. duke.edu</I> (Internet).</i></P><P>
<B><B>Q</B></B><P>
I work with ANSI-C and I have a general problem. How is it possible to call one function with a variable number/types of arguments inside a second function with variable number/types of arguments, with the same arguments I called the second function?<P>
For example, I have three functions with a variable number and variable type of arguments (<I>myfunction1, myfunction2, myfunction3</I> shown in <A href="list1.htm">Listing 1</a>)
. I want to call the functions <I>myfunction1</I> and <I>myfunction2</I> from inside <I>myfunction3</I>, with the same arguments I called <I>myfunction3</I>. Is there an easy way to do that?<P>
Thank you very much for your answer.<P>
Willi Fleischer<br>
Moerfelden, Germany<P>
<B>A</B><P>
The error involves the difference between a variable parameter list and a parameter list containing a value of type <I>va_list</I>. When you pass parameters to a function, the values of those parameters are pushed onto the stack. Usually the first or second parameter to a variable parameter function indicates directly (with a count) or indirectly (as with format specifiers) how many values have been passed.<P>
The <I>printf</I> and <I>fprintf</I> functions expect to see the values on the stack. Each value has an address (its position on the stack). The <I>vfprintf</I> function expects its third parameter will be the address of the first value of a set of parameters on the stack. It then uses this address to retrieve those parameters. To use each parameter, it needs to know the type of the value. That information it gets from the format list specifiers, just like <I>printf</I> and <I>fprintf</I>. The type of the parameter is also used to find the next parameter.<P>
Perhaps it might be instructive to look at typical definitions for these macros. Those in <A href="list2.htm">Listing 2</a>
are from Microsoft C.<P>
Variables of type <I>va_list</I> are actually addresses. <I>va_start</I> puts into the first argument the address of the first variable parameter. <I>va_arg</I> increments the first argument (<I>ap</I>) by the <I>sizeof</I> the type which is passed as the second argument (<I>t</I>), as well as yielding a value of that type.<P>
How does <I>vfprintf</I> get to a value on the stack? Since it knows the type of argument (from the format list), it uses the <I>va_arg</I> macro with the appropriate type.<P>
Your <I>my_function1</I> and <I>my_function2</I> require a list of values to be passed to them. When you used the <I>va_start</I> macro in <I>my_function3</I>, you retrieved the address of the first variable parameter that was passed to <I>my_function3</I>. You then passed that address to <I>my_function1</I> and <I>my_function2</I> and they produced garbage. You need to rewrite <I>my_function1</I> and <I>my_function2</I> such that they expect an address (i.e. type <I>va_list</I>). <A href="list3.htm">Listing 3</a>
shows how they should look.<P>
<B>Q</B><P>
I've been programming in C for about two years now and have not seen anything in the literature about my question. The company I work for does quick and dirty production programming. We are in the process of moving from PL/I to C. The programming involves sequential processing of mostly fixed fielded files. In PL/I we read the file into an input buffer and use the <I>string</I> function to load it into a structure. <A href="list4.htm">Listing 4</a>
is an instance.<P>
What this in effect does is load the structure <I>recin</I> from the input buffer <I>inn</I>. There is no corresponding C function for loading such a structure and I've been trying to develop something that will do this. What I've come up with is <A href="list5.htm">Listing 5</a>.
<P>
While the coding for <I>load_struct</I> works (at least in VAX C) I am not convinced this is the best way or even an effective way for doing what I desire. I realize the error checking is non-existent, but is it correct to assume that a structure of character arrays will have contiguous addresses? Is there another method used by more experienced programmers? I need something that I can put into a library that is very generic. How would you tackle this problem?<P>
Tom Crosman<br>
Brooklyn Park, MN<P>
<B>A</B><P>
On some machines individual fields in a structure do have packing bytes between them to align them to word boundaries, giving them contiguous addresses. Records which consist of character only (such as your example) tend not to have packing bytes.<P>
Your method in general is fine. Since you asked for my solution, I've given it in <A href="list6.htm">Listing 6</a>.
 Let me explain the modifications that I've made. The first is that one should usually never declare a variable in the same statement that declares the structure template. Anyone who wishes to use that template gets stuck with that extra variable. Second, I used an array of sizes for each of the fields. These could actually be picked up using the <I>sizeof</I> operator. As another alternative, one could <I>#define</I> the size of each field and use those in the initialization list.<P>
I prefer using an array for the sizes instead of passing them in the parameter list. The declaration can be close to the structure template. Any changes in order or size of the fields can be simply coordinated. Using an array to pass the sizes also simplifies the function, since it is no longer concerned with a variable parameter list.<P>
To show an additional use for the array, I included a print function. It requires most of the same parameters as the load function.<P>
To make the function more generic, I added a <I>nul_terminated</I> flag. Some programmers do not like using the extra character space to hold a terminator in each field. The <I>nul</I>, if present, can signify the end of a value less than the field length. If not present, the field length is the size of the field. Though this requires a slight bit more coding, it does save significant disk space if you store thousands of copies of a structure.<P>
If you were concerned with the packing of the fields in either the input record or the output structure, then you could add an array of field addresses to the calls. If that is necessary, I might suggest not using a generic function and simply hard coding any record conversions required. At some point the work of providing and using a generic interface exceeds the benefit.<P>
<h4><FONT COLOR="#000080"><A name="00BD_005B">Reader Feedback<A name="00BD_005B"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="00BD_005C">Coding style<A name="00BD_005C"></FONT></h4></P>
I notice in your <I>find_maximum</I> function that you declare temporary storage for the return value. Is there some reason this is preferred over just returning the value directly? This allows the simplifications in <A href="list7.htm">Listing 7</a>.
<P>
Also in your listings, for the function <I>put_line</I>, it seems to me that <I>putchar</I> would be preferred to <I>printf("%c",...)</I>. It would not have to process the format string and convert the character before putting it on <I>stdout</I>.<P>
I enjoy your column and comments.<P>
Edward C. Sarlls, III<br>
Houston, TX<P>
I tend to use an automatic variable for the return value from a function. That makes it easier to put a <I>printf</I> statement in the code to print the return value of the function. Or if you are a debugger person, it makes it easy to watch the value.<P>
The disadvantage is a slight decrease in speed. If I made it a register variable (or if the compiler does so automatically), even that should not be a problem.<P>
If you decide to change the return value of the function that uses an expression, and then with the local parameter, you only have to change the expression in one place. If you have debugging output, you need to change it in two.<P>
I must admit that I have had this style for a long long time. In one of my C classes that I taught back in the early '80s, I had a student who insisted that parentheses were required around the expression that follows the <I>return</I> statement. It turns out that all the examples of <I>return</I> statements he had seen had complex expressions around them (as the one in your second example). Psychologically the parenthesis were needed to surround the expression and "make it one." That points up the other coding style that I use quite often (see <A href="list8.htm">Listing 8</a>)
. I state in <I>All on C</I> that having a single <I>return</I> statement with <I>goto</I>s is preferable to having multiple <I>return</I> statements. If I want to trace the <I>return value</I>, with multiple <I>return</I> statements, I have to do something like the code shown in <A href="list9.htm">Listing 9</a>.
<P>
If I were using a debugger, there would be several breakpoints to set (assuming the function was long enough that I simply didn't single step through it).<P>
The difference in the complexity of code between multiple <I>return</I>s and multiple <I>goto</I>s (to the end of a function) does not seem to be a big issue, at least to me.<P>
I may get hundreds of letters regarding this seemingly idiosyncratic style of programming (or maybe with an adjective using only the first two syllables). Before that occurs, I wish to make a few caveats regarding it. First, I try to program the logic not to require multiple <I>return</I>s/<I>goto</I>s. Hence the original listing has neither in it. Second, there should be a single label at the end of the function with a standard name (say <I>end</I>), that is the label for the <I>goto</I>. If that is the case, then <I>ret = xxx; goto end</I> takes on the same meaning as <I>return xxx;</I>.(KP)<P>
<B>Q</B><P>
I just read your question and answer article entitled "Using <I>typedef</I>" in the December 1991 issue of <I>The C Users Journal</I>. I am writing in reference to the question regarding the writing of a function returning the lowest and highest integer out of the three integers passed. <A href="list10.htm">Listing 10</a>
is my attempt at answering this question.<P>
With all due respect, I think this approach is more eloquent and less convoluted than the methods offered in <A href="list2.htm">Listing 2</a>
(December 1991 issue) and <A href="list3.htm">Listing 3</a>
on page 120 (December 1991 issue) and in <A href="list4.htm">Listing 4</a>
on page 122 (December 1991 issue), whether or not you choose to use the conditional shorthand.<P>
I am also puzzled by the fact that you were a member of the ANSI C committee and you didn't use prototypes in your code. Did you have a special reason for not prototyping your examples?<P>
S.J. Stern<br>
Bothell, WA<P>
<B>A</B><P>
Eloquence is in the eye of the beholder. Some people might consider the second part of <A href="list7.htm">Listing 7</a>
(from Mr. Sarlls letter previously in this column) the most eloquent. I don't particularly prefer any of my <A href="list2.htm">Listing 2</a>,
 <A href="list3.htm">Listing 3</a>,
 or <A href="list4.htm">Listing 4</a>.
 My favorite is <A href="list5.htm">Listing 5</a>
(from the December 1991 issue, reproduced here as <A href="list11.htm">Listing 11</a>)
. It computes the maximum for any number of input parameters. The logic in your sample matches the logic in that listing.<P>
I guess I could have arranged the logic in my function as shown in <A href="list12.htm">Listing 12</a>.
 It matches your logic and has fewer lines than my previous listing. Unless I am going to call a routine a few thousand times, I tend to stick with whatever I come up with first that works. Also, I usually avoid using the conditional expression operator, for the reasons explained in last month's column.<P>
As far as prototypes, I usually do not include them unless they are required by ANSI C or they are essential to the answer. The information contained in prototypes is mostly redundant. The case of the variable parameter function (as in <A href="list10.htm">Listing 10</a>)
 requires one. When I do need prototypes (e.g. for C++), I let the compiler or PC-Lint generate a file of them.<P>
Thank you for your feedback.(KP)<P>
<h4><FONT COLOR="#000080"><A name="00BD_005D"><I>typedefs</I><B> and </B><I>lint</I><A name="00BD_005D"></FONT></h4></P>
In my column a few months ago, I answered a question regarding <I>typedefs</I>. At the recent C-Forum sponsored by the Wang Institute of Boston University, I bumped into Jim Gimpel, the author of PC-Lint. He told me that the latest version of PC-Lint has an option for strong typing. This means that it can report errors in the use of <I>typedefed</I> variables which the compiler would just ignore. For example, given the code in <A href="list13.htm">Listing 13</a>,
 the assignment of<P>
<pre>short_distance = high_speed;</pre>
is accepted by the compiler without question since both variables are declared to be type <I>double</I>, once the <I>typedefs</I> are resolved into the underlying types. However PC-Lint can yield an error message, if strong typing is turned on.<P>
As another example, a function declared as shown in <A href="list14.htm">Listing 14</a>
will give a PC-Lint error if it is passed the code in <A href="list15.htm">Listing 15</a>.
<P>
There are many options available for strong typing, which are all described in the manual. In addition, you can declare that particular arrays can only be indexed by variables of particular types. For example, arrays of type <I>HISTOGRAM</I> can only be indexed by variables of type <I>INDEX</I>. This would look something like <A href="list16.htm">Listing 16</a>.
<P>
The <I>not_good_ index</I> reference to <I>my_array</I> would yield an output error.<P>
For those who are considering changing to C++ purely for its type-checking abilities, I suggest you look at PC-Lint as an alternative.(KP)<P>

<h4><a href="../../../source/1992/apr92/pugh.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
