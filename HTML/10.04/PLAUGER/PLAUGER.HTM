


<HTML>
<HEAD>

<TITLE>April 1992/Standard C</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocapr.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Standard C<A name="00B7_0054"><A name="00B7_0054"></font></h2><P>
<h3 align="center"><A name="00B7_0000"><A name="00B7_0000">The Header &lt;<I>stdlib.h</I>&gt;</h3><P>
<h3 align="center"><font color="#800000">P.J. Plauger</font></h3><hr><blockquote><P>
<P><i><A name="00B7_0000"><A name="00B7_0000">P.J. Plauger is senior editor of The C Users Journal. He is secretary of the ANSI C standards committee, X3J11, and convenor<I></I> <I></I>of the ISO C standards committee, WG14. His latest book is The Standard C Library, published by Prentice-Hall. You can reach<I></I> <I></I>him care of The C Users Journal or via Internet at pjp@plauger.uunet.uu.net.</i></P><P>
<h4><FONT COLOR="#000080"><A name="00B7_0055">Introduction<A name="00B7_0055"></FONT></h4></P>
The header <I>&lt;stdlib.h&gt;</I> is a hodgepodge. Committee X3J11 invented this header as a place to define macros and declare functions that had no other sensible home:<P>
<UL><li>Many existing functions, such as <I>abs</I> and <I>malloc</I>, had no traditional headers to declare them. X3J11 felt strongly that <I>every</I> functions should be declared in a standard header. If such a function seemed out of place in all other headers, it ended up declared in <I>&lt;stdlib.h&gt;</I>.</li>
<li>New groups of macros and functions ended up in new standard headers wherever possible. <I>&lt;float.h&gt;</I> and <I>&lt;locale.h&gt;</I> are clear examples. Additions to existing groups ended up in existing headers. <I>strcoll</I>, declared in <I>&lt;string.h&gt;</I>, and <I>strftime</I>, declared in <I>&lt;time.h&gt;</I>, are also fairly clear. Other macros and functions are harder to categorize. These ended up defined or declared in <I>&lt;stdlib.h&gt;</I>.</li></UL>
This header is not the only hodgepodge. I discuss the evolution of the header <I>&lt;stddef.h&gt;</I> in <I>Standard C, </I><I>CUJ</I> December 1991.<P>
To provide some structure, I organize the functions into six groups:<P>
<UL><li>integer math (<I>abs</I><I>, </I><I>div</I><I>, </I><I>labs</I>, and <I>ldiv</I>) &#151; performing simple integer arithmetic</li>
<li>algorithms (<I>bsearch</I><I>, </I><I>qsort</I><I>, </I><I>rand</I>, and <I>srand</I>) &#151; capturing operations complex and widespread enough to warrant packaging as library functions</li>
<li>text conversions (<I>atof</I><I>, </I><I>atoi</I><I>, </I><I>atol</I><I>, </I><I>strtod</I><I>, </I><I>strtol</I>, and <I>strtoul</I>) &#151; determining encoded arithmetic values from text representations</li>
<li>multibyte conversions (<I>mblen</I><I>, </I><I>mbstowcs</I><I>, </I><I>mbtowc</I><I>, </I><I>wcstombs</I>, and <I>wctomb</I>)  mapping between multi-byte and wide-character encodings</li>
<li>storage allocation (<I>calloc</I><I>, </I><I>free</I><I>, </I><I>malloc</I>, and <I>realloc</I>) &#151; managing a heap of data objects</li>
<li>environmental interactions (<I>abort</I><I>, </I><I>atexit</I><I>, </I><I>exit</I><I>, </I><I>getenv</I>, and <I>system</I>) &#151; interfacing between the program and the execution environment</li></UL>
I discuss separately how to implement the functions in each of these groups. This month, I cover only the first two groups. I won't bother to present the header as a whole. It's pretty straightforward.<P>
<h4><FONT COLOR="#000080"><A name="00B7_0056">The C Standard on Integer Math<A name="00B7_0056"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="00B7_0057">7.10.6 Integer arithmetic functions<A name="00B7_0057"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="00B7_0058">7.10.6.1 The <B><I>abs</I></B> function<A name="00B7_0058"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="00B7_0059">Synopsis<A name="00B7_0059"></FONT></h4></P>
<pre>#include &lt;stdlib.h&gt;
int abs(int j);</pre>
<h4><FONT COLOR="#000080"><A name="00B7_005A">Description<A name="00B7_005A"></FONT></h4></P>
The <I>abs</I> function computes the absolute value of an integer <I>j</I>. If the result cannot be represented, the behavior is undefined.130 [FN130. The absolute value of the most negative number cannot be represented in two's complement.]<P>
<h4><FONT COLOR="#000080"><A name="00B7_005B">Returns<A name="00B7_005B"></FONT></h4></P>
The <I>abs</I> function returns the absolute value.<P>
<h4><FONT COLOR="#000080"><A name="00B7_005C">7.10.6.2 The <B><I>div</I></B> function<A name="00B7_005C"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="00B7_005D">Synopsis<A name="00B7_005D"></FONT></h4></P>
<pre>#include &lt;stdlib.h&gt;
div_t div(int numer, int denom);</pre>
<h4><FONT COLOR="#000080"><A name="00B7_005E">Description<A name="00B7_005E"></FONT></h4></P>
The <I>div</I> function computes the quotient and remainder of the division of the numerator <I>numer</I> by the denominator <I>denom</I>. If the division is inexact, the resulting quotient is the integer of lesser magnitude that is the nearest to the algebraic quotient. If the result cannot be represented, the behavior is undefined; otherwise, <I>quot</I> * <I>denom</I> + <I>rem</I> shall equal <I>numer</I>.<P>
<h4><FONT COLOR="#000080"><A name="00B7_005F">Returns<A name="00B7_005F"></FONT></h4></P>
The <I>div</I> function returns a structure of type <I>div_t</I>, comprising both the quotient and the remainder. The structure shall contain the following members, in either order:<P>
<pre>int quot;    /* <I>quotient</I> */
int rem;     /* <I>remainder</I> */</pre>
<h4><FONT COLOR="#000080"><A name="00B7_0060">7.10.6.3 The <B><I>labs</I></B> function<A name="00B7_0060"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="00B7_0061">Synopsis<A name="00B7_0061"></FONT></h4></P>
<pre>#include &lt;stdlib.h&gt;
long int labs(long int j);</pre>
<h4><FONT COLOR="#000080"><A name="00B7_0062">Description<A name="00B7_0062"></FONT></h4></P>
The <I>labs</I> function is similar to the <I>abs</I> function, except that the argument and the returned value each have type <I>long</I><I> </I><I>int</I>.<P>
<h4><FONT COLOR="#000080"><A name="00B7_0063">7.10.6.4 The <B><I>ldiv</I></B> function<A name="00B7_0063"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="00B7_0064">Synopsis<A name="00B7_0064"></FONT></h4></P>
<pre>#include &lt;stdlib.h&gt;
ldiv_t ldiv(long int numer, long int denom);</pre>
<h4><FONT COLOR="#000080"><A name="00B7_0065">Description<A name="00B7_0065"></FONT></h4></P>
The <I>ldiv</I> function is similar to the <I>div</I> function, except that the arguments and the members of the returned structure (which has type <I>ldiv_t</I>) all have type <I>long</I><I> </I><I>int</I>.<P>
<h4><FONT COLOR="#000080"><A name="00B7_0066">Using the Integer Arithmetic Functions<A name="00B7_0066"></FONT></h4></P>
Here is a brief summary of the four arithmetic functions: <I>abs</I> &#151; Call <I>abs(x)</I> instead of writing the idiom <I>x &lt; 0 ?</I><I> -</I><I>x</I><I> : </I><I>x</I>. A growing number of Standard C translators generate inline code for <I>abs</I> that is smaller and faster than the idiom. In addition, you avoid the occasional surprise when you inadvertently evaluate twice an expression with side effects. Note that on a two's-complement machine, <I>abs</I> can generate an overflow.<P>
<I>div</I> &#151; You call <I>div</I> for one of two reasons:<P>
<UL><li><I>div</I> always computes a quotient that truncates toward zero, along with the corresponding remainder, regardless of how the operators / and % behave in a given implementation. This can be important when one of the operands is negative. The expression <I>(-3)/2</I> can yield either <I>-</I>2 or <I>-</I>1, while <I>div(-3</I>,<I> </I><I>2)</I>.quot always yields <I>-</I>1. Similarly, <I>(-3)%2</I> can yield either 1 or <I>-</I>1, while <I>div(-3</I>,<I> </I><I>2)</I><I>.</I><I>rem</I> always yields <I>-</I>1.</li>
<li><I>div</I> computes both the quotient and remainder at the same time. That can be handy when you need both results. It might even be more efficient if the function expands to inline code that contains only a single divide.</li></UL>
Note that the members of the resulting structure type <I>div_t</I> can occur in either order. Don't make any assumptions about the representation of this structure.<P>
<I>labs</I> &#151; is the <I>long</I> version of <I>abs</I>.<P>
<I>ldiv</I> &#151; is the <I>long</I> version of <I>div</I>.<P>
<h4><FONT COLOR="#000080"><A name="00B7_0067">Implementing the Arithmetic Functions<A name="00B7_0067"></FONT></h4></P>
<A href="list1.htm">Listing 1</a>
shows the file <I>abs.c</I>. The absolute value function <I>abs</I> is the simplest of the integer math functions. You cannot provide a masking macro, however, because you have to access the value of the argument twice. Some computer architectures have special instructions for computing the absolute value. That makes <I>abs</I> a prime candidate for special treatment as a built-in function generating inline code.<P>
<A href="list2.htm">Listing 2</a>
shows the file <I>div.c</I>. It provides a portable implementation of the <I>div</I> function. You can eliminate the test if you know that negative quotients truncate toward zero. Most computer architectures have a divide instruction that develops both quotient and remainder at the same time. Those that develop proper negative quotients are also candidates for built-in functions. An implementation is at liberty to reorder the members of the structure type <I>div_t </I>to match what the hardware generates.<P>
<A href="list3.htm">Listing 3</a>
shows the file <I>labs.c</I> and <A href="list4.htm">Listing 4</a>
shows the file <I>ldiv.c</I>. Both define functions that are simply <I>long</I> versions of <I>abs</I> and <I>div</I>.<P>
<h4><FONT COLOR="#000080"><A name="00B7_0068">The C Standard on the Algorithmic Functions<A name="00B7_0068"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="00B7_0069">7.10.2 Pseudo-random sequence generation functions<A name="00B7_0069"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="00B7_006A">7.10.2.1 The <B><I>rand</I></B> function<A name="00B7_006A"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="00B7_006B">Synopsis<A name="00B7_006B"></FONT></h4></P>
<pre>   #include &lt;stdlib.h&gt;
   int rand(void);</pre>
<h4><FONT COLOR="#000080"><A name="00B7_006C">Description<A name="00B7_006C"></FONT></h4></P>
The <I>rand</I> function computes a sequence of pseudo-random integers in the range 0 to <I>RAND_MAX</I>.<P>
The implementation shall behave as if no library function calls the <I>rand</I> function.<P>
<h4><FONT COLOR="#000080"><A name="00B7_006D">Returns<A name="00B7_006D"></FONT></h4></P>
The <I>rand</I> function returns a pseudo-random integer.<P>
<h4><FONT COLOR="#000080"><A name="00B7_006E">Environmental Limit<A name="00B7_006E"></FONT></h4></P>
The value of the <I>RAND_MAX</I> macro shall be at least 32767.<P>
<h4><FONT COLOR="#000080"><A name="00B7_006F">7.10.2.2 The <B><I>srand</I></B> function<A name="00B7_006F"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="00B7_0070">Synopsis<A name="00B7_0070"></FONT></h4></P>
<pre>#include &lt;stdlib.h&gt;
void srand(unsigned int seed);</pre>
<h4><FONT COLOR="#000080"><A name="00B7_0071">Description<A name="00B7_0071"></FONT></h4></P>
The <I>srand</I> function uses the argument as a seed for a new sequence of pseudo-random numbers to be returned by subsequent calls to <I>rand</I>. If <I>srand</I> is then called with the same seed value, the sequence of pseudo-random numbers shall be repeated. If <I>rand</I> is called before any calls to <I>srand</I> have been made, the same sequence shall be generated as when <I>srand</I> is first called with a seed value of 1.<P>
The implementation shall behave as if no library function calls the <I>srand</I> function.<P>
<h4><FONT COLOR="#000080"><A name="00B7_0072">Returns<A name="00B7_0072"></FONT></h4></P>
The <I>srand</I> function returns no value.<P>
<h4><FONT COLOR="#000080"><A name="00B7_0073">Example<A name="00B7_0073"></FONT></h4></P>
The following functions define a portable implementation of <I>rand</I> and <I>srand</I>.<P>
<pre>static unsigned long int next = 1;
   int rand(void)   /* RAND_MAX <I>assumed to be</I> 32767 */
{
   next = next * 1103515245 + 12345;
   return (unsigned int)
              next/65536) % 32768;
}
   void srand(unsigned int seed)
{
   next = seed;
}</pre>
<h4><FONT COLOR="#000080"><A name="00B7_0074">7.10.5 Searching and sorting utilities<A name="00B7_0074"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="00B7_0075">7.10.5.1 The <B><I>bsearch</I></B> function<A name="00B7_0075"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="00B7_0076">Synopsis<A name="00B7_0076"></FONT></h4></P>
<pre>#include &lt;stdlib.h&gt;
void *bsearch(const void *key,
   const void *base, size_t nmemb,
   size_t size, int (*compar
   const void *, const void *));</pre>
<h4><FONT COLOR="#000080"><A name="00B7_0077">Description<A name="00B7_0077"></FONT></h4></P>
The <I>bsearch</I> function searches an array of <I>nmemb</I> objects, the initial element of which is pointed to by <I>base</I>, for an element that matches the object pointed to by <I>key</I>. The size of each element of the array is specified by <I>size</I>.<P>
The comparison function pointed to by <I>compar</I> is called with two arguments that point to the <I>key</I> object and to an array element, in that order. The function shall return an integer less than, equal to, or greater than zero if the <I>key</I> object is considered, respectively, to be less than, to match, or to be greater than the array element. The array shall consist of: all the elements that compare less than, all the elements that compare equal to, and all the elements that compare greater than the <I>key</I> object, in that order.129 [FN129. In practice, the entire array is sorted according to the comparison function.]<P>
<h4><FONT COLOR="#000080"><A name="00B7_0078">Returns<A name="00B7_0078"></FONT></h4></P>
The <I>bsearch</I> function returns a pointer to a matching element of the array, or a null pointer if no match is found. If two elements compare as equal, which element is matched is unspecified.<P>
<h4><FONT COLOR="#000080"><A name="00B7_0079">7.10.5.2 The <B><I>qsort</I></B> function<A name="00B7_0079"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="00B7_007A">Synopsis<A name="00B7_007A"></FONT></h4></P>
<pre>#include &lt;stdlib.h&gt;
void qsort(void *base, size_t nmemb, size_t size,
   int (*compar)(const void *, const void *));</pre>
<h4><FONT COLOR="#000080"><A name="00B7_007B">Description<A name="00B7_007B"></FONT></h4></P>
The <I>qsort</I> function sorts an array of <I>nmemb</I> objects, the initial element of which is pointed to by <I>base</I>. The size of each object is specified by <I>size</I>.<P>
The contents of the array are sorted into ascending order according to a comparison function pointed to by <I>compar</I>, which is called with two arguments that point to the objects being compared. The function shall return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second.<P>
If two elements compare as equal, their order in the sorted array is unspecified.<P>
<h4><FONT COLOR="#000080"><A name="00B7_007C">Returns<A name="00B7_007C"></FONT></h4></P>
The <I>qsort</I> function returns no value.<P>
<h4><FONT COLOR="#000080"><A name="00B7_007D">Using the Algorithmic Functions<A name="00B7_007D"></FONT></h4></P>
Here is a brief summary of the four algorithmtic functions:<P>
<I>bsearch</I> &#151; Use this function to search any array whose elements are ordered by pairwise comparisons. You define the ordering with a comparison function that you provide. For example, you can build a keyword lookup function from the basic form as shown in <A href="list5.htm">Listing 5</a>.
<P>
A few caveats:<P>
<UL><li>If a key compares equal to two or more elements, <I>bsearch</I> can return a pointer to any of these elements.</li>
<li>Beware of changes in how elements sort when the execution character set changes &#151; call <I>qsort</I>, described below, with a compatible comparison function to ensure that an array is properly ordered.</li>
<li>Be careful using the functions <I>strcmp</I> or <I>strcoll</I>, declared in <I>&lt;string.h&gt;</I>, directly. Both require that strings be stored in the array to be searched. You cannot use them to search an array of pointers to strings. To use <I>strcmp</I>, for example, you must write a function pointer argument that looks like <I>(int (*)(const void *</I>,<I> </I><I>const void</I><I> </I><I>*))&amp;strcmp</I>.</li></UL>
<I>qsort</I> &#151; Use this function to sort any array whose elements are ordered by pairwise comparisons. You define the ordering with a comparison function that you provide. The comparison function has a specification similar to that for the function <I>bsearch</I>, described above. Note, however, that the <I>bsearch</I> comparison function compares a key to an array element. The <I>sort</I> comparison function compares two array elements.<P>
A few caveats:<P>
<UL><li>Don't assume that the function uses the "Quicksort" algorithm, despite the name. It may not. If two or more elements compare equal, <I>qsort</I> can leave these elements in any relative order. Hence, <I>qsort</I> is not a <I>stable</I> sort.</li>
<li>Beware of changes in how elements sort when the execution character set changes.</li>
<li>Be careful using the functions <I>strcmp</I> or <I>strcoll</I> declared in <I>&lt;string.h&gt;</I>, directly. Both require that strings be stored in the array to be sorted. You cannot use them to sort an array of pointers to strings. To use <I>strcmp</I>, for example, you must write a function pointer argument that looks like <I>(int (*)(const void *</I>,<I> </I><I>const void *))&amp;strcmp</I>.</li></UL>
<I>rand</I> &#151; Call <I>rand</I> to obtain the next value in a pseudo-random sequence. You get exactly the same sequence following each call to <I>srand</I> with a given argument value. That is often desirable behavior, particularly when you are debugging a program. If you want less predictable behavior, call <I>clock</I> or <I>time</I>, declared in <I>&lt;time.h&gt;</I> to obtain an argument for <I>srand</I>. The behavior of <I>rand</I> can vary among implementations. If you want exactly the same pseudo-random sequence at all times, copy the version presented here.<P>
Use <I>RAND_MAX</I> to scale values returned from <I>rand</I>. For example, if you want random numbers of type <I>float</I> distributed over the interval [0.0, 1.0], write the expression <I>(float)rand()/RAND_MAX</I>. The value of <I>RAND_MAX</I> is at least 32,767.<P>
<I>srand</I> &#151; See <I>rand</I> above. The program effectively calls <I>srand(1)</I> at program startup.<P>
<h4><FONT COLOR="#000080"><A name="00B7_007E">Implementing the Algorithmic Functions<A name="00B7_007E"></FONT></h4></P>
<A href="list6.htm">Listing 6</a>
shows the file <I>qsort.c</I>. It defines the related function <I>qsort</I> that sorts an array beginning at <I>base</I>. I introduced the type <I>_Cmpfun</I> just to simplify the declaration of arguments for the functions <I>bsearch</I> and <I>qsort</I>. Don't use this declaration in code that you write if you want it to be portable to other implementations.<P>
This logic is much less simple and more debatable. It is based on the Quicksort algorithm first developed by C.A.R. Hoare. That requires you to pick a partition element, then partially sort the array about this partition. You can then sort each of the two partitions by recursive application of the same technique. The algorithm can sort quite rapidly. It can also sort very slowly.<P>
How best to choose the pivot element is the debatable issue. Pick the first element and an array already in sort eats a lot of time. Pick the last element and an array in reverse sort eats a lot of time. Work too hard at picking an element and all arrays eat a lot of time. I chose simply to pick the last element. That favors arrays that need little rearranging. You may have reason to choose another approach.<P>
<I>qsort</I> calls itself to sort the smaller of the two partitions. It loops internally to sort the larger of the two. That minimizes demands on dynamic storage. At worst, each recursive call must sort an array half as big as the earlier call. To sort <I>N</I> elements requires recursion no deeper than <I>log</I><I>2</I>(<I>N</I>) calls. (You can sort 1,000,000 elements with at most 20 recursive calls.)<P>
<A href="list7.htm">Listing 7</a>
shows the file <I>bsearch.c</I>. The function <I>bsearch</I> performs a binary search on the sorted array beginning at <I>base</I>. The logic is simple but easy to get wrong.<P>
<A href="list8.htm">Listing 8</a>
shows the file <I>rand.c</I>. The function <I>rand</I> generates a pseudo-random sequence using the algorithm suggested in the C Standard. That has reasonable properties, plus the advantage of being widely used. One virtue of a random number generator is randomness. Another virtue, ironically, is reproducibility. You often need to check that a calculation based on pseudo-random numbers does what you expect. The arithmetic is performed using <I>unsigned long</I>  integers to avoid overflows.<P>
<A href="list9.htm">Listing 9</a>
shows the file <I>srand.c</I>. The function <I>srand</I> simply sets <I>_Randseed</I>, the seed for the pseudo-random sequence generated by <I>rand</I>. I provide a masking macro for <I>srand</I>. Hence, the header <I>&lt;stdlib.h&gt;</I> declares <I>_Randseed</I>, defined in <I>rand.c</I>.<P>
<h4>References</FONT></h4></P>
Donald Knuth, <I>The Art of Computer Programming</I>, Vols. 1-3 (Reading, Mass.: Addison-Wesley, 1967 and later). Here is a rich source of algorithms, complete with analysis and tutorial introductions. Volume 1 is <I>Fundamental Algorithms</I>, volume 2 is <I>Seminumerical Algorithms</I>, and volume 3 is <I>Sorting and Searching</I>. Some are in second edition.<P>
You will find oodles of information on:<P>
<UL><li>maintaining a heap</li>
<li>computing random numbers</li>
<li>searching ordered sequences</li>
<li>sorting</li>
<li>converting between different numeric bases</li></UL>
Before you tinker with the code presented here, see what Knuth has to say.<P>
<I>This article is excerpted in part from P.J. Plauger</I>, The Standard C Library, <I>(Englewood Cliffs, N.J.: Prentice-Hall, 1992)</I>.<P>

<h4><a href="../../../source/1992/apr92/plauger.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
