


<HTML>
<HEAD>

<TITLE>March 1990/The World Of Command Line Options</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmar.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">The World Of Command Line Options<A name="008E_0048"><A name="008E_0048"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="008E_0000"><A name="008E_0000">Scott Maley</font></h3><hr><blockquote><P>
<P><i><A name="008E_0000"><A name="008E_0000">Scott Maley is a member of the technical staff at The Analytic Science Corporation (TASC). He has more than fifteen years experience in areas of software engineering ranging from Space Shuttle flight simulation to Cobol maintenance.</i></P><P>
Visual, iconic or graphic interfaces reduce complexity for the user by relegating details to another level. Complexity is neither created or destroyed &#151; it only changes its appearance or location and distribution. Thus, beneath the surface of many visual interfaces the various graphical tools exchange a great deal of information, often by means of command line options, where the programmer, rather than the user, must deal with the complexity.<P>
This article describes a command-line option-handling package that pushes some of the command line complexity down a level, reducing the amount of complexity with which the programmer must deal. This article is not intended to help you decide when to use command line options. If you have decided to use them, it may help you decide how. I have assumed that you know how arguments (which include options) are passed to a C program. Even if that is not completely clear, you must at least understand that a pointer is a way to refer to an object, and not the object itself.<P>
<h4><FONT COLOR="#000080"><A name="008E_0049">Overview<A name="008E_0049"></FONT></h4></P>
Options are used in two fundamentally different ways, distinguished by their position (in)dependence. An option may indicate that something is desired for all arguments (position independent), or for all following arguments (position dependent). No option can be both, because we can't distinguish which is intended unless context is expanded to more than one option at once.<P>
The function <I>cmd_opts</I> presented here assumes that it must deal with only position independent options. It associates arguments with each recognized option (basically a sorting process) and leaves all unrecognized options, including position dependent options, undisturbed.</FONT></FONT><P>
Thus, the <I>cmd_opts</I> function handles position independent options, and the programmer continues to handle position dependent options.</FONT></FONT><P>
<I>cmd_opts</I> accepts the same number of arguments as <I>getopt</I> (provided with UNIX System V). The first and second arguments are identical to those passed to <I>getopt</I>. The third encapsulates expanded information in a nil terminated array of options structures, each option isolated in a separate structure.</FONT></FONT></FONT></FONT></FONT></FONT><P>
<I>cmd_opts</I> works backwards through the command line, grouping arguments for options as it goes. By working backwards, the pointer to each option's array of arguments ends up right where we want it, pointing to the first associated argument; <I>cmd_opts</I> leaves any options it doesn't understand where it found them (relatively speaking) and returns an error count to warn us. See <A href="list3.htm">Listing 3</a>.
</FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="008E_004A">The Options Structure<A name="008E_004A"></FONT></h4></P>
<A href="list1.htm">Listing 1</a>
presents the elements of the structure <I>options</I>. The first element, <I>options.s</I>, is the character that will be used on the command line for this option (e.g. <I>s</I> in <I>-s</I>). <I>Options.arg_flg</I> indicates the minimum number of this option we expect on the command line. The third element, <I>poptv</I>, controls how arguments are associated with options. If <I>poptv</I> is set to <I>NULL</I>, no arguments can be associated with the option. Otherwise <I>cmd_opts</I> will point <I>poptv</I> to the first such argument.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Note that the ADDRESS (&amp;) of the array of pointers (e.g. <I>barg</I>) must be placed in <I>options.poptv</I>, so that it may be set to point to the first of any arguments for the option. The <I>arg_flg</I> for each option is used to return the number of valid instances of the option that were encountered. It may also be directly used as a flag, since a nonzero value is considered <I>TRUE</I> in C.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The second (<I>arg_flg</I>) and third (<I>poptv</I>) elements of the options structure interact to determine how an option is handled by <I>cmd_opts</I>. <A href="list2.htm">Listing 2</a>
presents examples of how they interact, where:</FONT></FONT></FONT></FONT></FONT></FONT><P>
<UL><li><I>     a</I>optional, no associated arguments</FONT></li>
<li><I>     b</I>optional, arguments expected</FONT></li>
<li><I>     c</I>required, no associated arguments (for completeness)</FONT></li>
<li><I>     d</I>required, arguments expected</FONT></li></UL>
You can gain a better understanding of the interactions by experimenting with various combinations (compile and link <I>tcmdopts.c</I> with <I>cmd_opts. c</I> &#151; both include <I>cmd_opts.h</I>).</FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="008E_004B">Conclusions<A name="008E_004B"></FONT></h4></P>
<I>cmd_opts</I> is much easier to use than the widely used <I>getopt</I> package provided with UNIX System V (source code freely available). While <I>getopt</I> accepts a list of option switch characters and has a means of specifying which require arguments, it has a number of shortcomings. After all the work it does to isolate option switches and associated arguments, <I>getopt</I> requires you to perform similar work. Once <I>getopt</I> returns with a <I>switch</I> character you must determine which it was, then associate any arguments. Worse, <I>getopt</I> passes some of the information via globals (e.g. <I>optarg</I>).</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<I>cmd_opts</I> handles the burden of associating arguments with options for those which are position independent. Yet, it leaves any unrecognized options where they were, so that we may handle position dependent options. Thus, we may typically dispense (at least for position independent options) with the <I>switch</I> statement that is often used to associate arguments with options when using the <I>getopt</I> function. No globals are used by <I>cmd_opts</I>, so possible side-effects have been minimized, and the package is more usable in shared code libraries. Finally, encapsulating the information associated with each option in a structure makes <I>cmd_opts</I> easier to understand and use than <I>getopt</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>

<h4><a href="../../../source/1990/mar90/maley.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
