


<HTML>
<HEAD>

<TITLE>March 1990/Writing Your Own Standard Headers: <stdlib.h>, <stddef.h>, <stdarg></TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmar.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">Writing Your Own Standard Headers: <br>&lt;stdlib.h&gt;, &lt;stddef.h&gt;, &lt;stdarg.h&gt; And &lt;limits.h&gt;<A name="0096_004C"><A name="0096_004C"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0096_0000"><A name="0096_0000">Dan Saks</font></h3><hr><blockquote><P>
<P><i><A name="0096_0000"><A name="0096_0000">Dan Saks is the owner of Saks &amp; Associates, which offers training and consulting in C and C++. He is a member of X3J11, the ANSI C committee. He has an M.S.E. in computer science from the University of Pennsylvania. You can write to him at 287 W. McCreight Ave., Springfield, OH 45504 or call (513) 324-3601.</i></P><P>
In "Writing Your Own Standard Headers: The String Functions" (<I>The C Users Journal</I>, Jan. 1990), I presented some basic rules for creating standard headers, and then I showed you how to apply those rules to create &lt;<I>string.h</I>&gt;. This article shows how to write five other headers you most likely need. But first, here is a non-standard header that simplifies writing the standard ones and eliminates some irritating portability problems.</FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0096_004D">&lt;<B><I>quirks.h</I></B>&gt;<A name="0096_004D"></FONT></h4></P>
The standard headers frequently use <I>void</I> and <I>void</I> <I>*</I> types. <I>void</I> indicates that a function returns no value, as in</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>void exit(int);</pre>
or to indicate that a function accepts no arguments, as in<P>
<pre>int rand(void);</pre>
<I>void</I> <I>*</I> is the "generic data pointer" type used in declarations like</FONT></FONT></FONT></FONT><P>
<pre>void *malloc(size_t);
void free(void *);</pre>
Many old compilers don't recognize <I>void</I> as a keyword. For these compilers 'void' functions are written without a return type in the function declaration (it defaults to <I>int</I>), and <I>char *</I> is used instead of <I>void</I> <I>*</I> for generic pointers. You can express your intent more clearly if you define</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>typedef int void;
typedef char *void_star;</pre>
These let you write declarations like<P>
<pre>void_star malloc();
void free();</pre>
which look more like Standard C.<P>
If your compiler generates code so that functions return <I>ints</I> the same way they return <I>chars</I>, then you can safely define</FONT></FONT></FONT></FONT><P>
<pre>typedef char void;</pre>
and write declarations like<P>
<pre>void *malloc();
void free();</pre>
which looks even more like Standard C.<P>
Some compilers, like <I>cc</I> on UNIX 4.2 BSD, implement <I>void</I> as a keyword, but don't allow <I>void</I> <I>*</I> as a type. On these systems, you need only define <I>void_star</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
After putting your definitions for <I>void</I> or <I>void_star</I> in a header called &lt;<I>quirks.h</I>&gt;, you should include it at the beginning of every standard header. These types will then almost appear to be built-in. You will need to include &lt;<I>quirks.h</I>&gt; explicitly only in source files that use none of the standard headers.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<I>quirks.h</I> can smooth out other differences in dialects. For example, if your compiler doesn't implement the <I>const</I> and <I>volatile</I> keywords, you can add</FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>#define const
#define volatile</pre>
<A href="list1.htm">Listing 1</a>
shows a version of &lt;<I>quirks.h</I>&gt; for DECUS C. The protective wrapper prevents repeated definitions of <I>void</I>.</FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0096_004E">&lt;<B><I>stdlib.h</I></B>&gt;<A name="0096_004E"></FONT></h4></P>
Like &lt;<I>string.h</I>&gt;, &lt;<I>stdlib.h</I>&gt; was invented by the ANSI standard. It declares the general utility functions in the standard library, summarized in <A href="table1.htm">Table 1</a>.
</FONT></FONT></FONT></FONT><P>
<I>EXIT_SUCCESS</I> and <I>EXIT_FAILURE</I> are codes used with the exit function to indicate a program's success or failure to the host environment. They expand to integral expressions that need not be constants. (An integral type is any of the <I>signed</I> or <I>unsigned</I> forms of <I>char, short int, int</I> or <I>long int</I>, or any enumerated type.) On MS-DOS and UNIX, the codes are usually defined by</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>#define EXIT_SUCCESS 0
#define EXIT_FAILURE 1</pre>
Some systems, such as RT-11, define multiple levels of failure, such as warning, error, severe error, etc., one of which you must pick for <I>EXIT_FAILURE</I>. You can define additional codes like <I>EXIT_WARNING</I>, but they will clearly be non-portable.</FONT></FONT></FONT></FONT><P>
<I>MB_CUR_MAX</I> expands to a positive integer expression whose value is the maximum number of bytes in a multibyte character as determined by the currect locale. This is meaningful only if you already have multibyte character support, in which case <I>MB_CUR_MAX</I> is already in your header. I just set it to <I>1</I>.</FONT></FONT></FONT></FONT></FONT></FONT><P>
<I>RAND_MAX</I> is the maximum value that can be returned by the <I>rand</I> function. It must be integral and constant. The return type of <I>rand</I> is <I>int</I>, so <I>RAND_MAX</I> is typically the value of the largest positive signed integer. The Standard stipulates that RAND_MAX must be at least 32767, but if your <I>rand</I> operates over a smaller range, use the smaller value until you rewrite the function.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<I>div_t</I> and <I>ldiv_t</I> are structure types returned by the <I>div</I> and <I>ldiv</I> functions, respectively. You can define them as</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>typedef struct {int quot, rem} div_t;
typedef struct {long quot, rem} ldiv_t;</pre>
where <I>quot</I> and <I>rem</I> may be in either order.</FONT></FONT></FONT></FONT><P>
<I>wchar_t</I> is the wide character type, an integral type whose range of values can represent distinct codes for all members of the largest extended character set specified among the supported locales. Like <I>MB_CUR_MAX</I>, this symbol relates to multibyte and wide character support. If you don't have it, use</FONT></FONT></FONT></FONT><P>
<pre>typedef char wchar_t;</pre>
<A href="list2.htm">Listing 2</a>
shows my &lt;<I>stdlib.h</I>&gt; for UNIX 4.2 BSD. Notice that the definition of <I>NULL</I> uses <I>void_star</I> from &lt;<I>quirks.h</I>&gt;. A protective wrapper surrounds <I>wchar_t</I> because it appears in other headers in &lt;<I>stdlib.h</I>&gt;. No wrapper protects <I>div_t</I> and <I>ldiv_t</I> because they appear only in &lt;<I>stdlib.h</I>&gt; and the protective wrapper around the entire header prevents them from being redefined.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The <I>abs</I> and <I>labs</I> macros are just interim implementations, because the ANSI standard requires that, unless explicitly exempted, all library functions must be implemented as functions (so they are addressable). Functions declared in headers may also be implemented as a macro, provided that the macro is "safe" (i.e., it expands to code that evaluates each of its arguments only once), but <I>abs</I> and <I>labs</I> aren't safe. When <I>abs</I> is a macro,</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>abs(*p++)</pre>
will evaluate <I>*p</I>++ twice, producing both unpredictable results and unwanted side effects.</FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0096_004F">&lt;<B><I>stddef.h</I></B>&gt;<A name="0096_004F"></FONT></h4></P>
&lt;<I>stddef.h</I>&gt; contains some commonly used definitions, three of which &#151; <I>NULL, size_t</I> and <I>wchar_t</I> &#151; are also in &lt;<I>stdlib.h</I>&gt;. &lt;<I>stddef.h</I>&gt; also introduces a new type, <I>ptrdiff_t</I>, and a new macro, <I>offsetof</I>. My DECUS C implementation appears as <A href="list3.htm">Listing 3</a>.
</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<I>ptrdiff_t</I> is the type of the result of pointer subtraction. It is a signed integral type either <I>int</I> or <I>long int</I>. It doesn't need a protective wrapper because it isn't defined anywhere else.</FONT></FONT></FONT></FONT></FONT></FONT><P>
The macro call <I>offsetof(t, m)</I> returns the offset (in bytes) of member <I>m</I> within structure type <I>t. offsetof</I> expands to a constant expression of type <I>size_t. m</I> cannot be a bit-field. In the rationale for the ANSI committee suggests three possible definitions for <I>offsetof:</I></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>#define offsetof(t, m) \
     ((size_t)&amp;(((t *)0)-&gt;m))</pre>
or<P>
<pre>#define offsetof(t, m) \
     ((size_t) (char *)&amp;(((t *)O)-&gt;m))</pre>
or<P>
<pre>#define offsetof(t, m) \
     ((size_t)((char *)&amp;(((t *)X)-&gt;m) - (char *)&amp;(x))</pre>
where <I>X</I> is some predeclared address. None of these definitions is guaranteed to be portable, but so far, the first one has worked on every system I've tried.</FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0096_0050">&lt;<B><I>stdarg.h</I></B>&gt;<A name="0096_0050"></FONT></h4></P>
This header defines a type, <I>va_list</I>, and three macros, <I>va_start, va_arg</I>, and <I>va_end</I>, which access the arguments to a function with a variable length argument list (like <I>printf</I> or <I>scanf</I>). &lt;<I>stdarg.h</I>&gt; is very similar to &lt;<I>varargs.h</I>&gt; found with many UNIX C compilers.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<A href="list4.htm">Listing 4</a>
shows a simple function, <I>concat</I>, that uses &lt;<I>stdarg.h</I>&gt;. The function heading is a prototype whose parameter list ends with an ellipsis <I>(, ...)</I>, indicating that the length of the list is variable. <I>va_list</I> is the type of a data object that tracks the current position in the argument list. <I>va_start</I> initializes <I>ap</I> so that the first call to <I>va_arg</I> returns the value of the first argument in the list's variable part. Subsequent calls to <I>va_arg</I> return the values of the succeeding arguments. You must supply the argument's type to each call to <I>va_arg</I> since arguments in a variable length list may be of different types. (Bear in mind that the type of an argument in a variable length parameter list will be promoted so that it will not be an integer type smaller than <I>int</I>, nor will it be <I>float</I>.) <I>va_end</I> does any cleanup that might be needed.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The implementation of &lt;<I>stdarg.h</I>&gt; depends on the compiler'sparameter-passing conventions. Most compilers pass arguments by pushing them onto the run-time stack. The rationale for the ANSI standard states that &lt;<I>stdarg.h</I>&gt; was designed to accommodate newer machines that may pass arguments in machine registers. Having no experience with C compilers for these machines, I will stick to the more common stack-oriented methods.</FONT></FONT></FONT></FONT><P>
Most MS-DOS compilers push arguments so that the first argument has the lowest address. <A href="fig1.htm">Figure 1</a>
shows the argument list format for a call to<P>
<pre>printf("%d %f %d\n", i, x, n)</pre>
using a typical MS-DOS C compiler (where <I>i</I> and <I>n</I> are 16-bit <I>ints</I> and <I>x</I> is a 64-bit <I>double</I>). <I>SP</I> represents the value of the stack pointer. The figure shows the state of the stack just before jumping to <I>printf</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<A href="list5.htm">Listing 5</a>
presents an implementation of &lt;<I>stdarg.h</I>&gt; for moat MS-DOS C compilers. <I>va_start(ap, p)</I> initializes <I>ap</I> to</FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>(va_list)(&amp;(p) + 1)</pre>
which is the address of the first parameter in the list's variable part (the parameter after <I>p</I>). Some implementations write this expression as</FONT></FONT><P>
<pre>(va_list)&amp;(p) + sizeof(p)</pre>
which is equivalent as long as <I>va_list</I> is <I>char *. va_start</I> should expand to a <I>void</I> expression, but many compilers erroneously omit the <I>void</I> cast.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<I>va_arg(ap, t)</I> returns the value of the current argument addressed by <I>ap</I> (cast to type <I>t</I>), and advances <I>ap</I> to point to the next argument. On many compilers, you can implement <I>va_arg</I> as</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>#define va_arg(ap, t) (*((t *)(ap))++)</pre>
This auto-increment expression may be a little easier to understand than the one in <A href="list5.htm">Listing 5</a>,
 but it relies on an extension to the C Standard. The standard states that a cast expression, such as<P>
<pre>(t *) (ap)</pre>
is not an lvalue, so it cannot be the operand of ++. The version of <I>va_arg</I> in <A href="list5.htm">Listing 5</a>
increments <I>ap</I> before applying the cast, then subscripts backwards to obtain the argument originally referenced by <I>ap</I>. It's more obscure, but stays within the standard.</FONT></FONT></FONT></FONT></FONT></FONT><P>
If your compiler lets you use the auto-increment expression, is there any reason not to? Yes. Consider Microsoft C v5.1. By default, the compiler lets you use various language extensions. You can implement <I>va_arg</I> as an auto-increment expression, but compiling your code with the <I>/Za</I> option (disable language extensions) produces a warning from the compiler. Microsoft implements <I>va_arg</I> as in <A href="list5.htm">Listing 5</a>
so that it will work with every compiler option.</FONT></FONT></FONT></FONT></FONT></FONT><P>
On the other hand, Zortech C v1.07 also uses the auto-increment version of <I>va_arg</I>. However, if you compile code using <I>va_arg</I> with the <I>-A</I> option (enforce ANSI compatibility), you don't get a warning. This means the compiler can't warn you about using this language extension in you code.</FONT></FONT></FONT></FONT></FONT></FONT><P>
In most implementations <I>va_end</I> does nothing, but the standard states that it should expand to a <I>void</I> expression. If your compiler complains that <I>((void)0)</I> is a useless expression, you can try using</FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>#define va_end(ap) ((void)((ap) = 0))</pre>
If generating unnecessary code bothers you, you can<P>
<pre>#define va_end(ap)</pre>
which works fine when <I>va_end</I> is called in a separate statement (as in <A href="list4.htm">Listing 4</a>)
, but produces a syntax error when <I>va_end</I> is embedded in nasty (but legal) expressions like</FONT></FONT></FONT></FONT><P>
<pre>va_end(ap), n = 1;</pre>
If your compiler pushes the arguments so that the first one is at the highest address, then you should use an implementation of &lt;<I>stdarg.h</I>&gt; like the one in <A href="list6.htm">Listing 6</a>.
 It differs from <A href="list5.htm">Listing 5</a>
in two ways:</FONT></FONT><P>
<UL><li><I>     va_start</I> initializes <I>ap</I> to point to (instead of beyond) the last fixed argument, and</FONT></FONT></FONT></li>
<li><I>     va_arg</I> uses a pre-decrement (instead of a post-increment) to step to the next argument.</FONT></li></UL>
<h4><FONT COLOR="#000080"><A name="0096_0051">&lt;<B><I>limits.h</I></B>&gt;<A name="0096_0051"></FONT></h4></P>
This header contains macros that define limits for the sizes and ranges of integral types. <A href="table2.htm">Table 2</a>
lists the macro names and their meanings. The standard specifies a minimum magnitude (absolute value) for each limit. The version of &lt;<I>limits.h</I>&gt; in <A href="list7.htm">Listing 7</a>
uses these minimums. All implementation may (<I>may</I> because it's <I>permitted</I> by the standard!) increase the magnitude of the limits, but any program that relies on extended limits will not be portable to all implementations.</FONT></FONT></FONT></FONT></FONT></FONT><P>
For example, <I>SHRT_MIN</I> and <I>SHRT_MAX</I> define the range of values for type <I>short int</I>. The standard requires the range to be at least -32767 to +32767 (decimal) &#151; the set of values that can be represented using 16-bit ones-complement or sign-magnitude arithmetic. On a two-complement machine, you can increase the magnitude of <I>SHRT_MIN</I> to -32768, but any program that stores -32768 in a <I>short int</I> might not work on other architectures.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The standard allows the range of <I>int</I> to be as small as the range of <I>short int</I>. Hence, the minimum magnitudes for <I>INT_MIN</I> and <I>INT_MAX</I> are the same as for <I>SHRT_MIN</I> and <I>SHRT_MAX</I>, respectively. At the opposite extreme <I>INT_MIN</I> and <I>INT_MAX</I> could be as large as <I>LONG_MIN</I> and <I>LONG_MAX</I>, respectively.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
I recommend that you write your &lt;<I>limits.h</I>&gt; to use the actual ranges supported by your compiler. This lets you take full advantage of your architecture when efficiency is more important than portability. When portability is important, you must remember to avoid depending on the larger limits.</FONT></FONT><P>
<I>CHAR_MIN</I> and <I>CHAR_MAX</I> define the range of values for "plain" <I>char</I>. A compiler can choose to represent plain <I>char</I> as either <I>signed char</I> or <I>unsigned</I> char. If your compiler treats plain <I>char</I> as signed, then use</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>#define CHAR_MAX    SCHAR_MAX
#define CHAR_MIN    SCHAR_MIN</pre>
Otherwise, use<P>
<pre>#define CHAR_MAX    UCHAR_MAX
#define CHAR_MIN    0</pre>
Some compilers let you select the representation of "plain" <I>char</I>. For example, Microsoft C v5.1 normally treats <I>char</I> as <I>signed</I>, but the <I>/J</I> option changes it to <I>unsigned</I>. This option also defines the macro _<I>CHAR_UNSIGNED</I> to allow conditional compilation (as in <A href="list7.htm">Listing 7</a>)
 to determine the appropriate settings for <I>CHAR_MIN</I> and <I>CHAR_MAX</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Borland's Turbo C v2.0 provides a switch for selecting the the representation of "plain" <I>char</I>, but doesn't define a macro like <I>_CHAR_UNSIGNED</I>. In place of</FONT></FONT></FONT></FONT><P>
<pre>#ifndef_CHAR_UNSIGNED</pre>
it uses<P>
<pre>#if (((int)((char)0x80)) &lt; 0)</pre>
According to the standard, <I>#if</I> expressions cannot use type casts or the <I>sizeof</I> operator. Therefore, this technique can be used only on a compiler that supports this language extension. It also means the compiler won't warn you about using this feature even when you ask it to disable language extensions.</FONT></FONT></FONT></FONT><P>
The standard states that every macro, except <I>CHAR_BIT</I> and <I>MB_LEN_MAX</I> is defined as an expression that has "the same type as would an expression that is an object of the corresponding type converted according to the integral promotions." For example, <I>INT_MAX</I> is defined as an expression of type <I>int</I>, and <I>UINT_MAX</I> is an expression of type <I>unsigned int</I>. On the other hand, the character range limits (such as <I>UCHAR_MAX</I>) are defined as <I>int</I> expressions, rather than as (signed or unsigned) <I>char</I> expressions, because character types are promoted to <I>int</I> when used in an expression.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Notice that the unsigned limits are defined as unsigned constants. For example, <I>UINT_MAX</I> is defined by</FONT></FONT><P>
<pre>#define  UINT_MAX  65535u</pre>
in <A href="list7.htm">Listing 7</a>.
 The <I>u</I> suffix on the constant makes it unsigned. Without the <I>u</I>, a decimal constant is either a <I>signed int</I> or a <I>signed long int</I>, depending on the compiler. For example, DECUS C treats 65535 as <I>(-1)</I>, but Microsoft C treats it as 65535L (a <I>long int</I>).</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
If your compiler doesn't support the <I>u</I> suffix, you can try to write <I>unsigned int</I> constants in octal or hex. For instance, some compilers with 16-bit ints treat <I>0100000</I> through <I>0177777</I> and <I>0x8000</I> through <I>0xFFFF</I> as <I>unsigned int</I> constants. If that doesn't work, you can try</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>#define UINT_MAX
     ((unsigned)65535)</pre>
which might introduce another problem. Limits like <I>UINT_MAX</I> are supposed to be usable in <I>#if</I> expressions; however, this definition uses a cast, which (according to the standard) isn't usable. Even if your preprocessor won't accept casts in <I>#if</I> expressions, you might still find this definition useful in other contexts.</FONT></FONT></FONT></FONT></FONT></FONT><P>
A similar problem occurs when you try to set <I>INT_MIN</I> to -32768 on some two-complement machines (such as a PC) using 16-bit <I>ints</I>. In Microsoft C, 32768 is greater than <I>INT_MAX</I>, so it's a <I>long int</I>. Therefore, the definition</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>#define INT_MIN  (-32768)</pre>
is wrong because it makes <I>INT_MIN</I> a <I>long int</I>. On the other hand,</FONT></FONT></FONT></FONT><P>
<pre>#define INT_MIN  (-32767-1)</pre>
only uses constants of type <I>int</I>, and so correctly defines <I>INT_MIN</I> as an <I>int</I>.</FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0096_0052">What's Been Gained?<A name="0096_0052"></FONT></h4></P>
I have shown how to write five standard headers: &lt;<I>string.h</I>&gt;, &lt;<I>stdlib.h</I>&gt;, &lt;<I>stddef.h</I>&gt;, &lt;<I>stdarg.h</I>&gt;, and &lt;<I>limits.h</I>&gt;. I have also presented &lt;<I>quirks.h</I>&gt;, which fakes a few new keywords that are missing from older compilers. With just these few headers, it's much easier to port Standard C code to older compilers.<P>

<h4><a href="../../../source/1990/mar90/saks.zip">Get Article Source Code</a></h4>

</BODY>
</BLOCKQUOTE>
</HTML>
