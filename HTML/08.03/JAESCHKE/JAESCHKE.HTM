


<HTML>
<HEAD>

<TITLE>March 1990/Dr. C's Pointers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmar.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Dr. C's Pointers&reg;<A name="00A0_0052"><A name="00A0_0052"></font></h2><P>
<h3 align="center"><A name="00A0_0000"><A name="00A0_0000">Void Pointers, Jump Tables, And Friends</h3><P>
<h3 align="center"><font color="#800000">Rex Jaeschke</font></h3><hr><blockquote><P>
<P><i><A name="00A0_0000"><A name="00A0_0000">Rex Jaeschke is an independent computer consultant, author and seminar leader. He participates in both ANSI and ISO C Standards meetings and is the editor of The Journal of C Language Translation, a quarterly publication aimed at implementers of C language translation tools. Readers are encouraged to submit column topics and suggestions to Rex at 2051 Swans Neck Way, Reston, VA, 22091 or via UUCP at uunet!aussie!rex.</i></P><P>
This column started out as an example of using a <I>void</I> pointer to point at an object having one of a set of possible types. The intent was to also record the type to which it currently pointed and to discuss an efficient way of accessing the underlying object at a later time. I did achieve these goals but along the way, digressed into a number of other interesting areas as you shall see.</FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="00A0_0053">Void Pointers<A name="00A0_0053"></FONT></h4></P>
ANSI C adopted the notion of a generic pointer from C++. A generic pointer is declared as <I>void *pv</I> and may point to any object or function. C does not require pointers to different types to have the same representation, and on word and segmented architectures there are often two or more different pointer representations. Since a generic pointer must be able to store an address with the smallest resolution and a <I>char</I> is the smallest addressable object in C, a <I>void</I> pointer must be at least as big as a <I>char</I> pointer. (In fact, ANSI C requires they have exactly the same representation.)</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
A <I>void</I> pointer may contain any arbitrary address and at different times, could point to a <I>char</I>, a <I>double</I>, or a structure of some type, for example. A <I>void</I> pointer <I>does</I> not record any information about the object (or function) to which it currently points &#151; it is the programmer's responsibility to keep track of this (just like the current contents of a <I>union</I>).</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Since the compiler knows nothing about the object (or function) to which a <I>void</I> pointer points, such a pointer has several restrictions: You cannot dereference a <I>void</I> pointer, and you cannot do arithmetic on it &#151; both operations require knowledge of the underlying object type.</FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="00A0_0054">The Linked List Problem<A name="00A0_0054"></FONT></h4></P>
In some applications, it is useful to have a linked list where each link describes an object whose type may be different from that of other objects described by other links. An example might be a linked list of device control blocks in an operating system. The format of control blocks for different devices will likely vary.<P>
If each link in a list has a different format, how can the linked list be declared? This would require the forward and backward pointers (assuming a doubly-linked list) in a link to be of type <I>void *</I> (so they could point to any object type) and it would also require a flag in the link to indicate the type of the forward and backward objects. This can be cumbersome particularly if a link points to more than two places. (You may have multiple linked lists linked to each other, for example.)</FONT></FONT><P>
The approach I have taken is somewhat similar but it avoids the flag field for forward and backward pointers. Essentially, each link contains a <I>void</I> pointer that points to some underlying object and the type of that object is stored in a field in the link. When you point to an object of type <I>A</I>, the flag is updated to record that. And a special flag value is used to indicate when the pointer does not point to an object.</FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="00A0_0055">The Switch Solution<A name="00A0_0055"></FONT></h4></P>
There are several ways to implement the code. One uses the switch construct, as in <A href="list1.htm">Listing 1</a>.
<P>
The five macros <I>TYPE*</I> represent the five possible states of the flag field <I>objtype</I>. Their values must be distinct but otherwise are immaterial, as is the fact that <I>objtype</I> is unsigned &#151; it could just as easily have been signed.</FONT></FONT></FONT></FONT></FONT></FONT><P>
To simplify the example, I have allocated space for only one link and have ignored the possibility of <I>malloc</I> returning <I>NULL</I>.</FONT></FONT></FONT></FONT><P>
Each link contains a pointer (<I>pfwd</I>) to the next link in the list, a pointer (<I>pbwd</I>) to the previous link, a pointer (<I>pobject</I>) to some generic object, and a flag (<I>objtype</I>) indicating the type of the object to which <I>pobject</I> points.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The link is initialized to point to a <I>double</I> object and the forward and backward pointers are set to <I>NULL</I> to indicate the end of the list. You might well ask, "Why not use <I>calloc</I> to allocate the space so it's initialized and the pointers need not be set to <I>NULL</I> in the program?"</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Certainly, that approach will succeed on some systems. However, it is not maximally portable. <I>calloc</I> initializes the allocated space to <I>all-bits-zero</I> and while that's the representation of integer <I>zero</I> it need not represent floating-point <I>zero,</I> or in this case, the <I>null</I> pointer constant. ANSI C <I>does not</I> require that <I>NULL</I> be represented internally as <I>all-bits-zero.</I> It simply requires that the <I>null</I> pointer be a value that is not the address of an object or function, and that comparing and assigning pointers with integer <I>zero</I> actually works.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Once the list has been constructed, it becomes necessary to process the objects to which each link points. The problem here is how to do this efficiently? In this example, the switch construct is used and the correct answer is produced &#151; the link does indeed point to a <I>double</I> object. But is this approach efficient?</FONT></FONT><P>
The real question comes down to "How is a switch implemented?" ANSI C does not specify this; it simply requires that in the absence of a <I>break</I> statement (or similar) that you drop through from one case to the next. And if each case is mutually exclusive, the ordering of the cases (including <I>default</I>) can be arbitrary.</FONT></FONT></FONT></FONT><P>
A lot of programmers believe (not necessarily for any good reason) that the order in which they specify the case labels, is important. This may or may not be true depending on your implementation and the set of case label values. For example, if the set of labels is dense (as in this case), the compiler might generate a jump table of addresses. (It might even be able to take advantage of a hardware case instruction such as exists on the VAX.) Certainly, this would make for efficient code.<P>
If, on the other hand, the set of label values is sparse the compiler may generate a series of nested <I>if/else</I> constructs and it may do them in the order in which the cases are specified, the reverse order, or possibly in some other order. (As an exercise, if your compiler can produce a machine-code listing, do so for each of the three solutions shown in this article. Compare the code generated for the <I>switch</I>, <I>if/else</I>, and <I>jump</I> table approaches.)</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The bottom line is that you are never guaranteed (by C) that the first case is tested for before the second (and the third, etc.) so specifying the most common case label value first need not be the most efficient approach. And if nested <I>if/elses</I> are used, the number of tests made to resolve the branch will be proportional to the number of cases defined.</FONT></FONT><P>
The casts are needed since you cannot dereference a <I>void</I> pointer directly.</FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="00A0_0056">The <B><I>if/else</I></B> Solution<A name="00A0_0056"></FONT></h4></P>
Whereas the switch construct provides no guaranteed order of case value matching, the <I>if/else</I> construct does. For example:</FONT></FONT><P>
<pre>if (pnode-objtype == TYPECHAR)
    printf ("char: %c\n", *(char *)pnode-pobject);
else if (pnode-objtype == TYPEINT)
    printf("int: %d\n", *(int *)pnode-pobject);
else if (pnode-objtype == TYPELONG)
    printf("long: %ld\n", *(long *)pnode-pobject);
else if (pnode-objtype == TYPEDOUBLE)
    printf("double: %f\n", *(double *)pnode-pobject);
else if (pnode-objtype == TYPENONE)
    printf("none:\n");</pre>
Now we have complete control of the order in which the tests are done. However, this ordering is fixed and favors those values near the front of the set of tests. It also cannot take advantage of any jump table generation the compiler might be able to do (unless the compiler has a very, very clever optimizer).<P>
<h4><FONT COLOR="#000080"><A name="00A0_0057">The Jump Table Solution<A name="00A0_0057"></FONT></h4></P>
It so happens this problem can be solved and in a manner that involves no priority of testing. That is, the underlying object can be processed efficiently without regard to its type. (More correctly, I should say the code to do the processing is dispatched without favoritism.) Of course, there are always trade-offs and in this case, the code to process each object type must be in a function. That is, we must call a function to do the work whereas with the <I>switch</I> and <I>if/else</I> approaches, the work could be done inline(<A href="list2.htm">Listing 2</a>)
.</FONT></FONT></FONT></FONT><P>
The key to the solution is the object <I>funtable</I>. It's an array of five objects each of which is a pointer to a function that has no return value and has one argument, of type <I>pointer to void</I>. The array is initialized with the addresses of the five object type processing functions <I>pro*</I>. An array of function pointers is often referred to as a jump table.</FONT></FONT></FONT></FONT></FONT></FONT><P>
It is absolutely critical that the order of the initializer expressions for <I>funtable</I> exactly match the values assigned in the <I>TYPE*</I> macros since we will use these macros to index into the <I>funtable</I> array. That is, the macro corresponding to <I>pronone</I> (<I>TYPENONE</I>) must have a value of zero since that is the first subscript value.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The expression<P>
<pre>(*funtable[pnode-objtype])
    (pnode-pobject);</pre>
actually dispatches the type processing code. Following the operator precedence table, <I>funtable</I> is first subscripted using the type flag giving the address of the appropriate function. Then that function is called with the generic address of the underlying object being passed as the only argument.</FONT></FONT><P>
Regardless of the number of possible values for <I>pobject</I>, you only need this one statement to call the processing function &#151; all type processing functions take equally long to dispatch since they all require one lookup in <I>funtable</I>. To change the number of types, you simply need to define the new processing functions and add them to the table initializer list. The concept of controlling the order in which types are tested for no longer exists since using the flag as a subscript you intuitively know the function to be used each time.</FONT></FONT></FONT></FONT><P>
The messy looking cast expressions are still present in each processing function. Why couldn't <I>proint</I> (for example) be defined as</FONT></FONT><P>
<pre>void proint(int *parg)
{
     printf("int: %d\n", *parg);
}</pre>
instead of<P>
<pre>void proint(void *parg)
{
     printf("int: %d\n", *(int *)parg);
}</pre>
Again, this may work on some systems but, according to ANSI C, the behavior is undefined. Specifically, in <I>main</I> a <I>void</I> pointer is passed yet in <I>proint</I> an <I>int</I> pointer is expected. As stated earlier, these two pointer types are not required to have the same size and representation. (On a word machine such as a Cray supercomputer such mismatching will likely result in the wrong answer for all characters except the first in a given memory word.)</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The function <I>prochar</I> is a special case since it could be defined to expect a <I>char</I> pointer. And since <I>char</I> pointers and <I>void</I> pointers are required to have the same representation, this would work. However, in both cases (<I>proint</I> and <I>prochar</I>) the formal argument list in the definition would not match the prototypes for these functions. And if you change the prototypes to match, the table initializer will be erroneous. By definition, every function pointer must point to a function having the same argument list as well as return type.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
You could bypass the strict checking rules by leaving the argument information out of the table declaration but this still won't help you. In the absence of a prototype in the table declaration, the actual <I>void</I> pointer argument will be passed as is, giving rise to the mismatch problem with the formal argument as discussed earlier.</FONT></FONT><P>
In short, the functions must all have the exact same argument list thus requiring the explicit cast before dereferencing. Even <I>pronone</I> must have an argument despite the fact it is never used.</FONT></FONT><P>
Just what is the cost of a cast anyway? None at all on systems where all pointers are created equal. (This is typically the case on byte architectures having a linear address space.) On word and segmented architectures, most pointer conversions are also nonevents except where either the cast operand or the cast type is a <I>char</I> (or possibly <I>short int</I>) pointer. So don't be too concerned about the cast generating code.</FONT></FONT></FONT></FONT><P>
It was implied earlier that requiring each type's processing code to be a function might be inefficient since we have added the overhead of calling a function. Depending on this cost, it may or may not be significant. Also, an increasing number of compilers are adding the ability to automatically inline functions in each place they are called. (VAX C recently added this in V3 and C++ supports it explicitly using the <I>inline</I> keyword.)</FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="00A0_0058">Enumerations Versus Macros<A name="00A0_0058"></FONT></h4></P>
In all three solutions, macros were used to come up with a set of unique integer values. The same result can be achieved using an enumerated type as follows:<P>
<pre>enum {TYPENONE, TYPECHAR,
     TYPEINT,
     TYPELONG, TYPEDOUBLE};</pre>
Not only do we get a set of unique <I>int</I> values, they also start at zero (as required by the jump table approach). And we are relieved from having to assign the numbers explicitly.</FONT></FONT><P>
Regarding the spelling of the enumerations constant identifiers; should they be in upper- or lower-case? If you follow the rule "All upper-case for macros and all lower- or mixed case for other identifiers" then they should be all lower-case. When I see an identifier written in upper-case I immediately understand that identifier might expand into an arbitrarily complex expression and I should take care how it's used. Since an enumeration constant "expands" to a simple integer constant the connotations of spelling it in upper-case are unwarranted. In the final analysis though, I don't think your choice will have significant stylistic ramifications.<P>
One final thing about the <I>enum</I> declaration; it has no tag and as such, no objects can later be declared to have that type. And although tagless structure and union declarations declared like this are useless, this is not so for enumerations. The scope of the enumeration constants declared inside the braces goes beyond the use of objects of that enumerated type. These constants have type <I>int</I> and can be used even though no enumerated objects of that type are actually declared. From my experience, <I>enums</I> are mostly used in just this manner.</FONT></FONT></FONT></FONT></FONT></FONT><P>

<h4><a href="../../../source/1990/mar90/jaeschke.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
