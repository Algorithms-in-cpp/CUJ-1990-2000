


<HTML>
<HEAD>

<TITLE>March 1990/Multitasking With Lightweight Threads</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmar.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">Multitasking With Lightweight Threads<A name="0090_004A"><A name="0090_004A"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0090_0000"><A name="0090_0000">Gregory Colvin</font></h3><hr><blockquote><P>
<P><i><A name="0090_0000"><A name="0090_0000">Trained in cognitive psychology, Dr. Colvin first learned to program in 1972, in BASIC on a PDP-8. He later had the distinction of being the first Cornell University graduate student to purchase an Apple II with student loan money, and has been happily hacking microcomputers ever since. He has been programming professionally in C since 1983. He welcomes comments and queries at 680 Hartford, Boulder, CO 80303 (303) 499-7254.</i></P><P>
Often, and against my better judgment, I contract to create applications under operating systems which do not support multitasking. Lightweight threads can sometimes be used to circumvent this limitation; both Microsoft's Windows and Apple's Multifinder use lightweight threads to retrofit multitasking facilities to single tasking operating systems.<P>
This article presents the ANSI C source for a multitasking kernel based on lightweight threads. I have tried to make this kernel as small, fast, simple, and portable as possible. I have successfully used the predecessor of this kernel to implement a real-time graphics display system and to provide background query processing for a database application.<P>
<h4><FONT COLOR="#000080"><A name="0090_004B">Threads<A name="0090_004B"></FONT></h4></P>
A thread of computer execution consists of at least three elements: a memory segment containing executable machine instructions, an instruction pointer register which indicates the next instruction to execute, and a data segment for variable allocation. Most computers also support function calls by providing a stack memory segment; a frame pointer register, which points to the current stack frame; and a stack pointer register, which points to the next available space for a stack frame. A stack frame contains the arguments and local variables for a function, and the instruction pointer and frame pointer of the function that called it (see <A href="fig1.htm">Figure 1</a>)
.<P>
A function call typically creates a new stack frame by pushing the function arguments and the current instruction and frame pointer registers on the stack, moving the current stack pointer to the frame pointer register, decreasing the stack pointer enough to leave room for local variables, and moving the address of the called function to the instruction pointer. Thus nested function calls result in a linked list of stack frames on the stack segment, which is traversed as functions return.<P>
<h4><FONT COLOR="#000080"><A name="0090_004C">Context Switching<A name="0090_004C"></FONT></h4></P>
A multitasking operating system can execute several threads "simultaneously" on one machine. Since most machines can only execute a single instruction at a time, only one thread is really executing at any one time, but multiple threads appear to run simultaneously because the O.S. performs context switches between threads at frequent intervals. At each context switch, the O.S. saves the contents of the machine registers for the current thread and restores the state of the registers for another thread. Each thread has its own code, data, and stack segments, so that threads cannot ordinarily interfere with one another.<P>
C, unlike ADA or Modula 2, is single threaded, so that an executing C program has one instruction pointer and one set of memory segments. However, the ANSI Standard C library does provide a pair of functions, <I>setjmp()</I> and <I>longjmp()</I>, for saving and restoring the contents of the machine resisters. I have used (some might say abused) these functions to implement multiple threads within a single C program.</FONT></FONT></FONT></FONT><P>
The <I>setjmp()</I> and <I>longjmp()</I> calls are unusual, in that the <I>longjmp()</I> call, when successfull, never returns to the function that calls it, whereas the <I>setjmp()</I> call can return to the same function any number of times. The first call to <I>setjmp(jmp_buf)</I> saves the current state of the machine registers in the <I>jmp_buf</I> structure and returns <I>0</I>. A subsequent call to <I>longjmp(jmp_buf,int)</I> restores the saved registers, causing the nonzero <I>int</I> specified in the calling argument to be returned by <I>setjmp(jmp_buf)</I> to the function that called it.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Usually <I>longjmp()</I> is used to abort from errors in deeply nested functions without actually returning from all the functions. An error handler is installed with a C statement like:</FONT></FONT><P>
<pre>if (error=setjmp(buf))
    e(error);
else
    f();</pre>
The call to <I>setjmp()</I> returns false, so that function <I>f()</I> is called. Errors in <I>f()</I> or any functions called within <I>f()</I> can then be handled by calling <I>longjmp (buf,error)</I>, which causes <I>setjmp()</I> to return <I>error</I>, so that <I>e(error)</I> is called. To use these functions to support switching among multiple threads requires several <I>jmp_buf</I> structures &#151; at least one for each thread of execution.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0090_004D">Implementation<A name="0090_004D"></FONT></h4></P>
To implement lightweight threads, the single thread of execution of a normal C program must be divided into independent tasks. Since a C program begins its life with a single stack segment, this segment must be divided into pieces, one for each thread. The <I>ThInit(int n,int size)</I> function does this by first calling <I>setjmp()</I> to mark an entry point for a thread, then calling itself until enough room for a thread (<I>size</I> bytes) has been used on the stock. It repeats this recursive process until the desired number of threads <I>(n)</I> has been created. The saved machine registers for each thread are kept in <I>Threads</I>, a global array of <I>thread</I> structures, one structure for each thread. Having thus divided up the stack, new threads can be created by <I>ThNew(void (*root) (int))</I>, which simply saves the address of the <I>root()</I> function for the new thread in <I>Root</I>, then does a <I>longjmp()</I> to restore the registers set by <I>ThInit()</I>. The reactivated <I>ThInit()</I> calls <I>(*Root) (ThCurr)</I>, and the new thread is underway. <I>ThNew()</I> returns the <I>ID</I> of the new thread, which is a non-zero index into the <I>Threads</I> table.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The threads created in this way are lightweight in two senses. First, they share the same code and data segments, and are thus not protected from each other by the operating system's memory management. Second, they are are treated as one process by the operating system, and thus are not automatically switched. Thus, the <I>ThJump(int ID)</I> function is needed so that a thread can cause a context switch to another thread, specified by <I>ID. ThJump</I> calls <I>setjmp()</I> to save the state of the current thread, then calls <I>longjmp()</I> to restore the saved state of the destination thread. The <I>ThJump()</I> function does not return until another thread jumps back to it, in which case it returns the thread <I>ID</I> of the jumper. <A href="fig2.htm">Figure 2</a>
shows a picture of the stack and the global <I>Threads</I> array while running two threads. <I>Thread 1 is</I> the initial thread (that is, the thread that called <I>ThInit()</I>), and <I>Thread 2</I> is the currently running thread, which has made several function calls since it was jumped to by <I>Thread 1</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0090_004E">Communication And Deadlock<A name="0090_004E"></FONT></h4></P>
Since lightweight threads share the same data segment they can communicate easily through global variables and shared memory buffers. On this basis, you may implement semaphores, pipes, messages, or any other communication discipline. Whatever communication method you choose, you must "beware the Jabberwock" of deadlock.<P>
For instance, a simple message passing scheme (not a very efficient one) can be implemented by placing the address of a message into an array of pointers, one for each thread, initialized to zero:<P>
<pre>Message = (char **) calloc(N_Threads,
         sizeof(char *));</pre>
and then jumping to the message destination:<P>
<pre>void msg_send(char *message,int
           destination)
{
    int id = ThId();
    Message[id] = message;
    do
        ThJump (destination);
    while (Message[id]);
}</pre>
The <I>ThId()</I> macro is used to get the <I>ID</I> of the current thread. The sending thread waits in a loop until the message is received. The destination thread can then receive a message with:</FONT></FONT></FONT></FONT><P>
<pre>char *msg_recv ()
{
    int id;
    char *m;
    do
        id = ThJump(ThNext());
    while (!Message[id]);
    m -- Message[id];
    Message[id] = 0;
    return m;
}</pre>
If no thread ever sends a message then the receiving thread will never leave the loop, a condition called starvation. This may not be a problem, since if no message is sent there may be nothing for the waiting thread to do. However, consider the following code, which waits for a message from a particular thread:<P>
<pre>char *msg_wait(int godot)
{
    int id;
    char *m;
    while (!Message[godot])
        ThJump(godot);
    m = Message[godot];
    Message[godot] = O;
    return m;
}</pre>
If <I>Thread 1</I> is in the loop, waiting for a message from <I>Thread 2,</I> and <I>Thread 2 </I> is also in the loop, waiting for a message from <I>Thread 1,</I> then neither thread will ever get out of the loop, and no other threads will get to run. This is a deadlock.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0090_004F">Preventing Deadlock<A name="0090_004F"></FONT></h4></P>
In general, deadlock can occur whenever threads must block to wait for exclusive use of a particular resource (memory buffer,screen, keyboard,disk controller, printer, etc.) that is in use by another thread. In the examples above I have implemented blocking by busy waiting in a loop. It would be better to add a flag to the thread structure, so that blocking could be handled by the kernel. It would then be possible to centralize deadlock control within the kernel.<P>
The easiest way to prevent deadlock is simply not to share resources. For instance, one thread might handle all file IO, another all printer output. Another easy solution is to arrange resources and threads in a hierarchy, so that there is never a conflict between threads. For instance, one thread might buffer keyboard input, while a second thread reads the keyboard buffer, performs computations, and buffers window output, and a third thread reads the window buffers and displays them on the screen. Other cases are harder, and the solutions tend to be task specific.<P>
For example, database programs can prevent deadlock, and ensure data integrity, with the concept of a transaction. A thread needing resources, such as write access to a set of data records, sets out to acquire them, one by one. If all the needed resources are acquired, the transaction succeeds and releases its resources for the next transaction. If any resource cannot be acquired, the transaction aborts, releasing all its resources. The thread then waits for a while, and tries again. Thus, no thread is ever holding a resource while waiting for another resource.<P>
For other examples on preventing deadlock, be sure to check the relevant literature for the tasks you are implementing. A good general discussion, with C source code and further references, can be found in Andrew Tanenbaum's <I>Operating Systems: Design and Implementation</I> (Prentice Ha11,1987). If you fail to ensure that your application is deadlock free you can look forward to mysterious system hangs and other evidence of Murphy's Law.<P>
<h4><FONT COLOR="#000080"><A name="0090_0050">Caveats<A name="0090_0050"></FONT></h4></P>
I have tested the code presented here with Microsoft C 5.0 on my 386 clone and with MPW C 3.0 on my Macintosh SE. On my clone the kernel compiles to under one K of code, and executes over 80,000 jumps per second. <I>(Ed: The code is available from the CUG Library; see New Releases.) Be</I> sure to design and test very carefully if you implement a similar kernel. Although the <I>setjmp()</I> and <I>longjmp()</I> functions are portable, this implementation depends on non-portable details of stack implementation. Be especially careful not to overrun the stack areas set up for each thread. I have provided a simple <I>ThProbe()</I> macro that exits with a message if an overrun is detected, but I have succeeded in crashing threads with <I>printf()</I> between calls to <I>ThProbe().</I> For a more powerful approach to ensuring stack integrity, see the article "A Stack Checking Function" by Eric White in <I>The C Users Journal</I> (Volume 7, Number 3, April 1989). If you exercise proper care, you will find the concept of lightweight threads to be a useful addition to your tool kit.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><A href="list1.htm">Listing 1</A></h4>
<h4><A href="list2.htm">Listing 2</A></h4>

<h4><a href="../../../source/1990/mar90/colvin.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
