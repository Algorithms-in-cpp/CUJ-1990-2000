<HTML>   
     <HEAD>
<TITLE>October 1999/Safer Graphical Drawing with MFC</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tococt.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Safer Graphical Drawing with MFC</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Ivan J. Johnson</FONT></H3>

<BLOCKQUOTE>
<p>Exceptions can really mess up the state of a graphic display, unless you preserve it with a well placed destructor.</p>
</BLOCKQUOTE>

<hr>
<BLOCKQUOTE>

<p>The following code shows a common MFC idiom:</p>

<pre>
void CMyView::OnDraw(CDC* pDC)
{
   CPen* pOldPen =
      pDC-&gt;SelectObject(&amp;pen);
   DoSomeDrawing(pDC);
   pDC-&gt;SelectObject(pOldPen);
}
</pre>

<p>Such code is ubiquitous in books and Microsoft samples, but unfortunately it is not exception-safe. If <B>DoSomeDrawing</B> should trigger an exception, the system's pen will not be restored, with unpredictable results. (Keep in mind that even if <B>DoSomeDrawing</B> contains no explicit <B>throw</B> statements, an exception could still be thrown by the language itself or by a library function called by <B>DoSomeDrawing</B>. Also, VC++ will throw a "hardwaqre exception" for certain errors, such as dereferencing an invalid pointer or dividing by zero.)</p>
<p>Fortunately, there is a simple fix. First, include the code from <a href="fig1.htm">Figure 1</a> via some header file. Second, rewrite the drawing code as follows:</p>

<pre>
void CMyView::OnDraw(CDC* pDC)
{
   AutoSelector a(pDC, &amp;pen);
   DoSomeDrawing(pDC);
}
</pre>

<p>Not only is this safer, it's also more concise and just as efficient. <B>AutoSelector</B> applies the "resource acquisition is initialization" idiom <a href="#1">[1]</a> to save and restore context. The constructor selects the new pen and saves a pointer to the old one in member data. Then, when <B>OnDraw</B> exits, whether by normal return or due to an exception, <B>AutoSelector</B>'s destructor automatically restores the old pen.</p>
<p>You can also use <B>AutoSelector</B> for other GDI objects, like brushes and fonts. Stock objects are allowed also:</p>

<pre>
AutoSelector a(pDC, GRAY_BRUSH);
</pre>

<p>The only GDI object you can't use is <B>CRgn</B>, a special case in MFC <a href="#2">[2]</a>. <B>AutoSelector</B> will not work with <B>CRgn</B>, and it's not needed anyway. <B>AutoSelector</B> prevents this usage with a compile-time error when possible and with an assertion when necessary.</p>
<p>One other caveat: <B>AutoSelector</B>'s internally stored pointer to the old GDI object is valid only during the processing of a single Windows message. You should ensure that the creation and destruction of an <B>AutoSelector</B> object occurs during the processing of the same message by making it an automatic variable in <B>OnDraw</B> or any message handler function (and not a data member of your view class). Otherwise, the class might be left with a dangling pointer <a href="#2">[2]</a>.</p>

<h4><FONT COLOR="#000080">Notes and References</FONT></H4>

<p><a name="1"></a>[1]  Bjarne Stroustrup. <I>The C++ Programming Language</I>, 3rd Ed. (Addison-Wesley, 1997), section 14.4.1.</p>
<p><a name="2"></a>[2]  See MSDN topic "CDC::SelectObject" for details.</p>

<p><i><B>Ivan J. Johnson</B> is a software engineer and consultant in Sacramento, CA. He can be reached at <B>ijohnson@alum.mit.edu</B>.</i></p>

<h4><a href="../../../source/1999/oct99/johnson.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY>
</HTML>
