<HTML><HEAD>
<TITLE>October 1999/Dynamic C++ Classes/Figure 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Figure 2: A partial implementation of the activate method, the constructor, and the member-selection operator</a></h4>
<pre>
// STATIC method
template&lt;class T&gt; Handle 
dynamic&lt;T&gt;::activate (const char *libraryName, 
    const char *className = NULL) throw(...)
{
    // special interface method provides default class name 
    if (className == NULL) {
        className = T::getClassName();
    }
     
    // for simplicity: only the code that handles the FIRST 
    // activation of this class, DynamicVersion constructor 
    // inlined, and no error checking
    DynamicVersion *dv = new DynamicVersion; 
    dv-&gt;activeVersion = true;
    dv-&gt;refCount = 0;
    dv-&gt;dlhandle = dlopen(libraryName,RTLD_NOW); 
    dv-&gt;dlloaded = true;
    // omitted: construct funcName (= name of static 
    // factory method that creates implementation object) 
    dv-&gt;funcPtr = dlsym(dvPtr-&gt;dlhandle,funcName); 
    dv-&gt;invalidated = false;
    // now we have an active version for this class 
    Handle handle = handleMap-&gt;createHandle(className); 
    activeMap[handle] = dv;
    return (handle); 
}
     
template&lt;class T&gt; 
dynamic&lt;T&gt;::dynamic (Handle handle) throw(...) 
{
    // omitted: all error checking
    // classHandle, dvPtr, object are per-instance member 
    // variables (see Figure 1)
    classHandle = handle;
    dvPtr = activeMap[handle];
    object = (T *)(*(dvPtr-&gt;funcPtr))(); 
    dvPtr -&gt; refCount += 1;
}
     
template &lt;class T&gt; 
T * dynamic&lt;T&gt;::operator-&gt; (void) throw(...) 
{
    if (dvPtr-&gt;invalidated) { throw ...; } 
    return (object);
}

</pre>
</BODY>
</HTML>
