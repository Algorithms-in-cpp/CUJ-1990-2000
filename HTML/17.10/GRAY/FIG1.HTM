<HTML><HEAD>
<TITLE>October 1999/Dynamic C++ Classes/Figure 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Figure 1: A partial definition of the proxy template</A></h4>
<pre>
typedef int Handle;
     
template&lt;class T&gt; class dynamic {
     
private:
     
    // the actual object, its version information and its
    // class handle
    T *object;
    DynamicVersion *dvPtr;
    Handle classHandle;
     
public:
     
    // constructors, etc.
    dynamic(Handle handle);
    dynamic(const dynamic&lt;T&gt;&amp; proxy);
    ~dynamic();
    dynamic&lt;T&gt;&amp; operator= (const dynamic&lt;T&gt;&amp; proxy);
     
    // smart pointer
    T *operator-&gt; (void) throw(...);
     
    // activate a version
    static Handle 
    activate (const char *libraryName,
        const char *className = NULL) throw(...);
     
    // invalidate a version
    static void 
    invalidate (const char *libraryName, 
       Handle handle) throw(...);
     
    // activate and invalidate
    static Handle 
    activate_and_invalidate (const char *libraryName,
        const char *className = NULL) throw(...);
     
  private:
     
    // static data (shared by all versions and classes 
    // implementing the interface &lt;T&gt;)
    // 1. map: class name to class handle 
    static Hash handleMap;
    // 2. map: class handle to active class version - 
    //         grows/shrinks in actual implementation 
    static DynamicVersion *activeMap[NUM_HANDLES];
    // ... more ...
};

</pre>
</BODY>
</HTML>
