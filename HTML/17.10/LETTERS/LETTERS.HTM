<HTML>   
     <HEAD>
<TITLE>October 1999/We Have Mail</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tococt.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Departments</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">We Have Mail</FONT></H2>

<hr>
<BLOCKQUOTE>

<p><i>Letters to the editor may be sent via email to </I>cujed@mfi.com<I>, or via the postal service to Letters to the Editor, </I>C/C++ Users Journal<I>, 1601 W. 23rd St., Ste 200, Lawrence, KS 66046-2700.</i></p>

<hr>
<p>Dear <I>CUJ,</I></p>
<p>(In response to Richard Smith's letter in <I>CUJ</I><B>,</B> July 1999):</p>
<p>Mr. Smith, if you don't like C++, then why use it? I call myself a C++ programmer, but I only use C++ because C++ is the language I feel most comfortable with. This is the language which allows me to work within the tight deadlines of the project.</p>
<p>This is not to say that if I could find a language that allowed me to get the job done in a similar fashion, I wouldn't use it. In my normal day to day work, I already use a mixture of tools &#151; perhaps Delphi for the GUI calling a C++ DLL for the grunt work (although Delphi less and less now I have CBuilder). I am currently investigating Java and CORBA for projects in the future. I don't use VC++ and MFC, because I don't like the environment (what happened to the visual bit?), so I went and found something that suits me better.</p>
<p>Mr. Smith, if you are such a fan of Cobol and dislike C++ so much, check out <B>http://www.casegen.co.uk/casegen.htm</B>, a 32-bit COBOL RAD environment for Windows. There are many others, point your browser at your favourite search engine and try "Cobol for Windows."</p>
<p>Glenn Eisenhut<br>
Thomson Financial Securites Data</p>

<p><i>In Mr. Smith's defense, developers don't always have such freedom of choice concerning which language or environment they use in their place of work. "Cobol for Windows" may not be an option. I'm holding out for Object-Oriented PL/1, myself. &#151; mb</i></p>

<hr>
<p>Hi there!</p>
<p>Pertaining to your article on Assertions in the June 1999 issue ("Better Assertions For MFC," by Giovanni Bavestrelli): I liked it a lot! But I have a different fix for issues 2 and 3 that you mention in your article (preventing a message box and logging the assert to a file). My fix has the additional advantage that it also works for other non-assert messages that also pop up as message boxes from time to time (run-time errors, etc.). Message boxes are extremely annoying when you are writing ActiveX controls that are being used from ASP. (<B>IUSR_MYMACHINE</B>, the bastard, refuses to press OK, so of course it locks up inetinfo and there's no way to figure out when it happens except by attaching to the process with the debugger.) Some message boxes come up even if you are not in debug mode! Anyway, without further ado, here's what I do:</p>
<p>When we are running inside a service (i.e., IIS inetinfo) we don't want any message boxes breaking the IIS system, even if we <I>are</I> indeed running debugging code. Therefore we insert this hook function to do reporting for us and allow us to go on. You could even send an email to the programmer inside this function if you wanted! See <a href="fig1.htm">Figure 1</a>.</p>
<p><B>timestamp</B> is a useful little manipulator I wrote that outputs the date and time of the call.</p>
<p>Roberto Leibman<br>
Talaria Research, Inc.<br>
<B>roberto.leibman@talaria.com<br>
http://www.talaria.com</b></p>

<p><I>Thanks. &#151; mb</i></p>

<hr>
<p>Dear <I>CUJ,</I></p>
<p>Having already implemented a templated fixed-length vector class myself, I took some interest in reading Fred Persi's "A Vector Class For Geometric Computations" (<I>CUJ,</I> August 1999). I was quite gratified to find that our implementations have much in common. However, considering that the main emphasis of Mr. Persi's article was on optimal code execution, there is one detail I think he (and other readers) might find important.</p>
<p>Nearly all of the arithmetic methods in the <B>tnVector</B> class use <B>for</B> loops to perform their operations. Unfortunately, many (if not all) compilers, unintuitively refuse to unroll loops of less than four iterations no matter what the optimization level. I presume this is due to the fact that 3 div 4 = 0, remainder 3, and the compiler never unrolls the "remainder" loop even though it knows exactly how many times it's going to be executed. Some compilers provide command-line switches to change the unroll limit, but then again some do not.</p>
<p>Therefore, considering that most 3-D geometric operations involve vectors of length three, it might be a good idea to provide "unrolled" specializations for <B>tnVector&lt;3&gt;</B> methods (and <B>tnVector&lt;2&gt;</B> if you like). If you're feeling pedantic, specializing <B>tnVector&lt;1&gt;</B> can even be helpful. (Compilers will add the conditional branch instruction even in <B>for</B> loops of length one.)</p>
<p>Michael McCarty<br>
<B>mikem@eai.com</B></p>

<p><I>Fred Persi replies:</p>
<p>Dear Mr. McCarty,</p>
<p>Thank you very much for your comments. I agree completely that unrolling loops is absolutely necessary to achieve optimal performance. My presumption was that a good optimizing compiler should indeed unroll all the loops, but as you point out that may not be the case.</p>
<p>I did not provide these "unrolled" specializations because of the substantial increase in the code base, and, more importantly, because some compilers not yet up to the Standard have difficulty with certain template specializations.</p>
<p>If you or other readers have any further information on why compilers typically do not unroll these loops, I'd be glad to hear it.</p>
<p>Sincerely,<br>
Fred Persi</i></p>

<hr>
<p>Hi,</p>
<p>Being a regular reader and subscriber to your excellent magazine, I find it interesting to see the boom in articles regarding multithreading, especially on Windows platforms. In Thomas Becker's otherwise great article on semaphores with priorities (<I>CUJ,</I> August 1999), I would like to add a few comments.</p>
<p>First of all, the solution relies on the <B>WaitForMultipleObjects</B> function, which limits the number of priorities available for the semaphore to <B>MAXIMUM_WAIT_OBJECTS</B>, which in WinNT 4.0 is 64. The implementation of <B>CPrioritySemaphore::Create</B> validates and makes sure that you do not exceed <B>MAXIMUM_WAIT_OBJECTS</B>, so the implementation is sound, as long as you do not need more than 64 priority levels.</p>
<p>Secondly, all events are created at once, which is needed when using <B>WaitForMultipleObjects</B>. Creating all events takes time, and also consumes system resources that might be needed elsewhere.</p>
<p><B>WaitForMultipleObjects</B> is a nice function if used with care. I recently wrote a thread-pooling framework, and started out using <B>WaitForMultipleObjects</B>, but had to rewrite everything, mainly due to the 64-object limit. This rewrite also eliminated the need for creating all events from the beginning, and in the process I also got rid of my <B>CriticalSection</B>s, which benefited performance a lot.</p>
<p>Regards,</p>
<p>Henrik Wivel<br>
<B>henrik@mijada.se</B></p>

<p><I>Thanks for the information. &#151; pjp</I></p>

<hr>
<p>Hi,</p>
<p>In Bobby Schmidt's column ("Decl Heckled," <I>CUJ,</I> June 1999), the scope of <B>for</B>-loop variables was discussed, and it was noted the MSVC V6.0 doesn't comply with Ansi C++ spec Section 6.5.3. I see it is still an active topic. <I>MSDN News</I> (Vol7, Num6, Dr. GUI column) gives the following workaround:</p>

<pre>
#define for if(0) ; else for
</pre>

<p>which will curtail the scope of a variable declared inside the <B>for</B> control parens. Not being an MSVC user I have never tried it myself.</p>
<p>Respectfully Yours,</p>
<p>Craig Hicks<br>
KGK Ltd.<br>
Tokyo, Japan</p>

<p><I>Thanks &#151; I think. Here's a brief review for readers who don't know what you're referring to. The C++ Standard says that when you declare a variable within the for-init-statement of a </I><B>for</B><I> loop, as in:</I></p>

<pre>
for(int i = 0; i &lt; 10; ++i)
   ...
</pre>

<p><I>that the variable will be in scope only from the beginning of the </I><B>for</B><I> loop to the end of the loop's body. So you should be able to write code like this:</I></p>

<pre>
for(int i = 0; i &lt; 10; ++i)
   cout &lt;&lt; "i is " &lt;&lt; i &lt;&lt; endl;
     
for(int i = 0; i &lt; 10; ++i)
   cout &lt;&lt; "i is " &lt;&lt; i &lt;&lt; endl;
</pre>

<p><I>The two </I><B>i</B><I>s don't conflict with each other because they each go out of scope at the end of their respective </I><B>for</B><I> loops.</p>
<p>Unfortunately, VC++ 5.0 and 6.0 (and most likely previous versions as well) do not implement this rule correctly. If you try to compile the above code, you'll get redefinition errors, because VC++ thinks that each </I><B>i</B><I> is at the scope enclosing the </I><B>for</B><I> statements.</p>
<p>I tried the macro hack you provided, and it does seem to work, at least for simple loops. But yuck. I'd like to hear from readers if they discover any hidden problems with this trick. I really wish Microsoft would fix their compiler. &#151; mb</p>

<p>[Well they did, kinda. But the compiler option that turns on proper scoping of </I><B>for</B><I> loops seems to be buggy. And at best, it breaks too much existing Microsoft code to be used safely. Sigh. &#151; pjp] </I>o</p>

<h4><a href="../../../source/1999/oct99/leibman.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY>
</HTML>
