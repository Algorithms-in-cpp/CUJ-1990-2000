<HTML><HEAD>
<TITLE>October 1999/We Have Mail/Figure 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Figure 1:	A hook function to do error reporting within a Windows NT service</A></h4>
<pre>
int __cdecl 
ReporterFunction(int reportType,
   char *message, int *returnValue)
{
   cerr &lt;&lt; endl;
   cerr &lt;&lt; timestamp &lt;&lt; "===========" 
        &lt;&lt; endl;
   cerr &lt;&lt; timestamp &lt;&lt; "Report Type: ";
   switch(reportType)
   {
      case _CRT_WARN  :
         cerr &lt;&lt; "Warning";
         break;
      case _CRT_ERROR :
         cerr &lt;&lt; "Error";
         break;
      case _CRT_ASSERT:
         cerr &lt;&lt; "Assertion";
         break;
      case _CRT_ERRCNT:
         cerr &lt;&lt; "Error Cnt";
         break;
      default:
         cerr &lt;&lt; "Unknown";
   }
   cerr &lt;&lt; endl;
   cerr &lt;&lt; timestamp &lt;&lt; message;
   cerr &lt;&lt; timestamp &lt;&lt; "===========" 
        &lt;&lt; endl;
   *returnValue = 1; //To break into the 
                     //debugger
   // if we are in a debugging session
   // (our old friend asm int -3)
   return TRUE;
}

BOOL CMyApp::InitInstance()
{
   m_pOldcout = &amp;cout;
   m_pOldcerr = &amp;cerr;
   m_pOldclog = &amp;clog;
   _CrtSetReportHook(ReporterFunction);
//This sets up a hook that
//traps any unwanted system message boxes!

//Do this only if we have file logging 
//turned on
   if(bLoggingOn == TRUE)
   {
      //Create a log file to store 
      //information
      CString sLogPath;
      GetTempPath(_MAX_PATH, 
         sLogPath.GetBuffer(_MAX_PATH + 
            1));
         sLogPath.ReleaseBuffer();
         sLogPath += "TacRemedyLib.log";

      //Check if the file should be 
      //truncated (i.e. contents discarded)
      //or appended
      DWORD nMaxLogFileSize;
      rexSetup.get_MaxLogFileSize
         (&amp;nMaxLogFileSize);

      CFile file;

      if(file.Open(sLogPath,
            CFile::modeRead | 
            CFile::shareExclusive) != 0 
         &amp;&amp; file.GetLength() &gt; 
            nMaxLogFileSize)
         //the limit has been reached
         {
            file.Close();
            applog.open(sLogPath,
               ios_base::out | 
               ios_base::trunc);
         }
         else
         {
            applog.open(sLogPath,
               ios_base::out | 
               ios_base::app);
         }

         cout = applog;
         clog = applog;
         cerr = applog;
         cout &lt;&lt; endl 
              &lt;&lt; "------------------" 
              &lt;&lt; endl;
         cout &lt;&lt; timestamp
              &lt;&lt; ": CMyApp::InitInstance()" 
              &lt;&lt; endl;
   }
   return CWinApp::InitInstance();
}

int CMyApp::ExitInstance()
{
   cout &lt;&lt; timestamp 
        &lt;&lt; ": CMyApp::ExitInstance()" 
        &lt;&lt; endl;

// Be nice and put things back the way
// you found them, or else, if this is a 
// DLL the app will crash when it tries to 
// write something to cout!
   _CrtSetReportHook(NULL);
   cout = *m_pOldcout;
   cerr = *m_pOldcerr;
   clog = *m_pOldclog;

   return CWinApp::ExitInstance();
}

</pre>
</BODY>
</HTML>
