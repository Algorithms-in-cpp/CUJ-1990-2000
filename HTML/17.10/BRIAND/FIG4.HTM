<HTML><HEAD>
<TITLE>October 1999/A Recursive Visit Template/Figure 4</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Figure 4: Classes derived from DirAdapter provide specific functions to be applied to directories and files</A></h4>
<pre>
// dir.h

class NamePrinter : public DirAdapter
{
   fstream fout;
public:
   NamePrinter(const string &amp;outfile, char sep = '\\');
   ~NamePrinter() {fout.close();}
   bool 
   processComposite(Directory &amp;dir, const CompositeHandle &amp;ch);
   bool processSimple(Directory &amp;dir, const SimpleHandle &amp;sh);
};

class FileCounter : public DirAdapter
{
   int count;
public:
   FileCounter() : count(0) {}
   // ignore directories
   bool 
   processComposite(Directory &amp;dir, const CompositeHandle &amp;ch)
   {}
   // count files
   bool processSimple(Directory &amp;dir, const SimpleHandle &amp;sh)
   {count++;}
   int getCount() const {return count;}
   void setCount(int n = 0) {count = n;}
};

// dir.cpp

NamePrinter::NamePrinter(const string &amp;outfile, char sep)
   : DirAdapter(sep)
{
   fout.open(outfile.c_str(), ios::out);
   if(!fout)
      throw "can't open output file";
}

bool 
NamePrinter::processComposite(Directory &amp;dir, 
   const CompositeHandle &amp;ch)
{
   cout &lt;&lt; ch &lt;&lt; "...DIR" &lt;&lt; endl;
   fout &lt;&lt; ch &lt;&lt; "...DIR" &lt;&lt; endl;
   return true;
}

bool 
NamePrinter::processSimple(Directory &amp;dir, 
   const SimpleHandle &amp;sh)
{
   cout &lt;&lt; sh &lt;&lt; "...FILE" &lt;&lt; endl;
   fout &lt;&lt; sh &lt;&lt; "...FILE" &lt;&lt; endl;
   return true;
}

</pre>
</BODY>
</HTML>
