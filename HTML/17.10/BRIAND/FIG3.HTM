<HTML><HEAD>
<TITLE>October 1999/A Recursive Visit Template/Figure 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Figure 3: The DirAdapter class</A></h4>
<pre>
// dir.h

class DirAdapter
{
   char separator;
public:
   DirAdapter(char sep = '\\') : separator(sep) {};
   virtual ~DirAdapter() {}
   typedef string CompositeHandle;
   typedef string SimpleHandle;
   //
   void 
   getHandles(Directory &amp;dir, vector&lt;CompositeHandle&gt; &amp;cvec,
      vector&lt;SimpleHandle&gt; &amp;svec);
   bool 
   moveDownTo(Directory &amp;dir, const CompositeHandle &amp;ch);
   bool moveUp(Directory &amp;dir);
};

// dir.cpp

void
DirAdapter::getHandles(Directory &amp;dir, 
   vector&lt;CompositeHandle&gt; &amp;cvec, vector&lt;SimpleHandle&gt; &amp;svec)
{
   dir.getSubdirNames(cvec);
   dir.getFileNames(svec);
}

bool 
DirAdapter::moveDownTo(Directory &amp;dir, const CompositeHandle &amp;ch)
{
   string newpath = dir.getCurrentPath();
   // append separator if needed
   if(newpath[newpath.size()-1] != separator)
      newpath += separator;
   newpath += ch;

   return dir.setCurrentPath(newpath);
}

bool DirAdapter::moveUp(Directory &amp;dir)
{
   string newpath = dir.getCurrentPath();
   // lop off last directory name from path
   // don't try if there isn't a name there
   if(newpath.size() &gt;= 2)
   {
      for(int i = newpath.size()-2; i &gt;= 0; --i)
      {
         if(newpath[i] == separator)
         {
            string::iterator j = newpath.begin() + i;
            newpath.erase(j, newpath.end());
            break;
         }
      }
      return dir.setCurrentPath(newpath);
   }
   return false;
}

</pre>
</BODY>
</HTML>
