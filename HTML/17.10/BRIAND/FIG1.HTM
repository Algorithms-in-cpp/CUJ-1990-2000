<HTML><HEAD>
<TITLE>October 1999/A Recursive Visit Template/Figure 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Figure 1: The template function rVisit</A></h4>
<pre>
template &lt;class CompositeType, class ProcessType&gt;
int rVisit(CompositeType &amp;cobj, ProcessType &amp;pobj)
{
   // "stack" of composite handles
   deque&lt;ProcessType::CompositeHandle&gt; cdeq;

   // number of composites at current level
   deque&lt;int&gt; ndeq; 

   // temporary vectors of simple and composite handles
   vector&lt;ProcessType::SimpleHandle&gt; svec;
   vector&lt;ProcessType::CompositeHandle&gt; tempcvec;

   int depth = 0;
   bool searching = true;
   bool done = false;
   int count = 0;

   while(!done)
   {
      if(searching)
      {
         // clear simple and composite handle vectors
         svec.erase(svec.begin(), svec.end());
         tempcvec.erase(tempcvec.begin(), tempcvec.end());

         // get hanles at this level
         pobj.getHandles(cobj, tempcvec, svec);
         ndeq.push_back(tempcvec.size());

         // push CompositeHandles to stack in reverse order
         for(int i = tempcvec.size()-1; i &gt;= 0; --i)
            cdeq.push_back(tempcvec[i]);

         // process elements at this level
         for(int i = 0; i &lt; tempcvec.size(); ++i)
         {
            pobj.processComposite(cobj, tempcvec[i]);
            count++;
         }
         for(int j = 0; j &lt; svec.size(); ++j)
         {
            pobj.processSimple(cobj, svec[j]);
            count++;
         }
         searching = false;
      }
      else // in not-searching state
      {
         if(ndeq.back() &gt; 0) // more unexpanded composites
         {                   // try to move down a level
            pobj.moveDownTo(cobj, cdeq.back());
            assert(cdeq.size() &gt; 0);
            cdeq.pop_back();
            ndeq.back()--;
            depth++;
            searching = true;
         }
         else // no more unexpanded composites
         {    // try to move back up a level
            if(depth &gt; 0) // we can move up
            {
               assert(ndeq.size() &gt; 0);
               ndeq.pop_back();
               pobj.moveUp(cobj);
               depth--;
            }
            else         // already at top -- we're done
            {
               assert(ndeq.size() &gt; 0);
               ndeq.pop_back();
               done = true;
            }
         }
      }
   }
   assert(ndeq.size() == 0);
   assert(cdeq.size() == 0);
   assert(depth == 0);
   return count;
}

</pre>
</BODY>
</HTML>
