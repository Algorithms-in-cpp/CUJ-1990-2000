<HTML>   
     <HEAD>
<TITLE>October 1999/Uncaught Exceptions</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tococt.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Uncaught Exceptions: One Small Step</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Bobby Schmidt</FONT></H3>

<BLOCKQUOTE>
<p>Some steps are smaller than others, even if they look big to a compiler.</p>
</BLOCKQUOTE>

<hr>
<BLOCKQUOTE>

<p>Copyright &copy; 1999 Robert H. Schmidt</p>
<p>As I write, today is the 30th anniversary of the Apollo 11 moon walk. I remember Mom waking me up to watch the fuzzy black-and-white live pictures. I was seven at the time, and quite captivated by astronomy and the space program. I still have the <I>Golden Guide to the Stars</I> my grandmother gave me, from which I learned the major constellations visible beyond Ohio's haze, streetlights, and rooftops.</p>
<p>Three decades later, I've traded up to Redmond's clouds, streetlights, and treetops. <I>CUJ</I> Editor-in-Chief Marc Briand keeps inviting me out to Kansas to chase storms &#151; but I may have to take up his offer just to chase stars. Actually, some business interests want to build a spaceport in Eastern Washington for the next-generation reusable space vehicle. Eastern Washington is closer than Kansas and about as flat, a much more convenient source for my astronomy fix.</p>
<p>As a counterpoint to nostalgia, my 13-year-old stepdaughter Ren&eacute;e has no memory of the moon landings; they are as remote in her history as D-Day is in mine. She also represents an irony, at least today. If Apollo 11 was NASA's zenith, then the Challenger explosion was its nadir &#151; and Ren&eacute;e was born on the very day of that explosion.</p>
<p>So here's to the men on the moon in my youth, and the hope of men and women on Mars in my old age. Perhaps in Ren&eacute;e's old age we'll have a permanent lunar or Martian colony, complete with 13-year-olds having no memory of walking on Earth.</p>

<h4><FONT COLOR="#000080">More Conversion Ambiguity</FONT></H4>

<h4><FONT COLOR="#000080">Q</FONT></H4>
<p> Dear <I>CUJ,</I></p>
<p>I've tried to customize Microsoft's COM <B>VARIANT</B> type, because I wanted to type-cast its value to <B>CString</B>, but I couldn't compile my changed version. I found the enclosed code to be the core of the problem.</p>
<p>It worked on Borland C++ 4.52, and somebody told me that he could compile it under GCC 2.7.2.4. But under MSVC 5.0 and GCC 2.8.1 it didn't work. I didn't find anything relevant in the draft C++ Standard.</p>
<p>Could you tell me something about this problem? The compiler claims the code contains ambiguity, but I don't understand why the compiler does not recognizes the type-cast operator. &#151; Istvan Nemeth</p>

<h4><FONT COLOR="#000080">A</FONT></H4>
<p> Sometimes I wish C++ didn't support conversion operators. The ambiguities wrought by mixing conversion constructors and conversion operators seem never-ending.</p>
<p>As is my wont, I've simplified your code:</p>

<pre>
class A
    {
public:
    A(int);
    };
     
class B
    {
public:
    operator int();
    operator A();
    };
     
int main()
    {
    B b;
    (A) b; // error here
    }
</pre>

<p>Your compilers apparently can't decide if</p>

<pre>
(A) b;
</pre>

<p>means</p>

<pre>
b.operator A();
</pre>

<p>or</p>

<pre>
A(b.operator int());
</pre>

<p>I'm guessing that you expect the compilers to unambiguously choose the first interpretation.</p>
<p>Based on my reading of the C++ Standard, that first interpretation is indeed correct. The language rules generally prefer the "shortest" distance when choosing among conversion paths. In this example, the first path requires only one conversion hop &#151; <B>B</B> to <B>A</B> &#151; while the second path requires two &#151; <B>B</B> to <B>int</B>, then <B>int</B> to <B>A</B>. I don't have GCC installed anymore, so I can't verify its behavior. Of the translators I do have installed, Visual C++ 5 works incorrectly, while both CodeWarrior 4 and EDG 2.41.2 work correctly.</p>
<p>On a related note, consider this example:</p>

<pre>
class A
    {
public:
    A(int);
    };
     
class B
    {
public:
    operator int();
    };
     
int main()
    {
    B b;
    A a1 = b;     // should be error
    A a2 = (int) b; // OK
    A a3(b);        // ???
    }
</pre>

<p>The only possible conversion path for</p>

<pre>
A a1 = b;
</pre>

<p>is</p>

<pre>
A a1 = A(b.operator int());
</pre>

<p>which requires two implicit conversions (<B>B</B> to <B>int</B>, then <B>int</B> to <B>A</B>). But the Standard specifically forbids multiple implicit user-defined conversions to the same value <a href="#1">[1]</a>. As a result, the definition should not compile, yet both VC++ and CodeWarrior accept it. EDG (correctly) does not.</p>
<p>Contrast this to</p>

<pre>
A a2 = int(b);
</pre>

<p>which requires the same two conversions &#151; but only one of those conversions (<B>int</B> to <B>A</B>) is implicit. The other conversion (<B>B</B> to <B>int</B>) is explicit, thanks to the cast. Since only one implicit user-defined conversion is required, the definition is valid.</p>
<p>As an Exercise For The Student, I leave you with this problem: without running your compiler, decide if the definition</p>

<pre>
A a3(b);
</pre>

<p>should compile.</p>

<h4><FONT COLOR="#000080">Counting Chickens</FONT></H4>

<p>In my July column I ran an item titled Chicken and Egg, wherein Diligent Reader Marlon Nelson desired a function returning a pointer to itself. After some scratching around, I decided that such a thing wasn't possible. I ended my response by trawling for alternatives:</p>

<BLOCKQUOTE>
<p>If any Diligent Reader has a portable and robust solution to this problem, please let me know.</p>
</BLOCKQUOTE>

<p>In hindsight, I should have seen this problem as the sort that generates 50-message threads on comp.lang.c++. Not since the Hungarian Notation donnybrook have I received so much reader mail on a single topic <a href="#2">[2]</a>. While I can't run all of your proposed solutions, I do want to show a representative sampling <a href="#3">[3]</a>.</p>
<p>Caveat: Nobody actually submitted a solution that literally describes a function returning a pointer to itself. Instead, all respondents satisfied themselves with code mimicking the appearance of such a function.</p>
<p>I'm thrilled to tell you that the first solution came from our own Dan Saks, whom I now officially welcome to the exalted ranks of Diligent Reader. His solution is</p>

<pre>
class itself
    {
    friend bool
    operator==(itself const &amp;lo,
        itself const &amp;ro)
        {
        return lo.f == ro.f;
        }
public:
    itself(itself p()) : f(p)
        {
        }
    itself operator()() const
        {
        return f();
        }
private:
    itself (*f)();
    };
     
itself f()
    {
    return f;
    }
     
int main()
    {
    f == f();
    }
</pre>

<p>Unfortunately this code fails to compile on some of our systems. I traced the problem to the private data member declaration; changing that declaration to</p>

<pre>
class itself (*f)();
</pre>

<p>allows the code to compile on all of our systems.</p>
<p>Inside <B>f</B>, the expression</p>

<pre>
return f;
</pre>

<p>gives the appearance that <B>f</B> is literally returning itself. Beneath the appearance, however, <B>f</B> does not return <B>f</B> directly, but instead returns an <B>itself</B> object which in turn contains a pointer to <B>f</B>. The effect is the same as if the return statement were really</p>

<pre>
return itself(f);
</pre>

<p>This trick &#151; hiding <B>f</B>'s address in a class object &#151; is one that most reader solutions share. While the trick satisfies the aesthetic requirements of the original problem, it also requires some agent to extract the encapsulated function pointer. Dan achieves this within <B>operator==</B>, which splits open its two <B>itself</B> arguments to compare the pointers within.</p>
<p>Note that Dan's solution is not complete. For example, if I want to write</p>

<pre>
f != f()
</pre>

<p>I need to create my own <B>operator!=</B> function. In fact, everywhere I might want to use an <B>itself</B> object in an expression, I'm faced with possibly adding or tweaking user-defined operators.</p>
<p>One remedy: use the language's built-in operators instead. For that remedy to work, the returned <B>itself</B> object must convert into some type compatible with those operators. The obvious target for such a conversion is the underlying function pointer, so that</p>

<pre>
f == f()
</pre>

<p>actually uses the language's built-in <B>operator==</B> for comparing pointers.</p>
<p>Since the type I want itself to convert to is the type of a function pointer &#151; specifically, the type <B>itself (*)()</B> &#151; my first thought was to add the conversion operator</p>

<pre>
class itself
    {
    // ...
public:
    operator itself (*)()()
        {
        return f;
        }
    }
</pre>

<p>Dan had the same thought but dismissed it: the code did not translate on any system we tried, including EDG. Reading through the C++ Standard's grammar, we finally convinced ourselves that such operator declarations are syntactically invalid.</p>
<p>At this point I got my patented Bright Idea: wrap the function pointer within a typedef, thereby keeping the same semantics while satisfying the grammar's syntactic requirements. Using such a typedef, my final solution is</p>

<pre>
class itself
    {
private:
    typedef itself (*pointer)();
public:
    itself(pointer p) : p_(p)
        {
        }
    operator pointer() const
        {
        return p_;
        }
    itself operator()() const
        {
        return p_();
        }
private:
    pointer p_;
    };
     
itself f()
    {
    return f;
    }
     
int main()
    {
    f == f();
    itself p = f();
    p == p();
    p = p();
    }
</pre>

<p>Apparently great minds think alike, for several readers similarly use a typedef in their solutions. Among those readers is Herb Sutter, whose solution is the same as mine with two twists: he defines the pointer typedef outside the scope of <B>itself</B>, and omits the function operator:</p>

<pre>
class itself;
     
typedef itself (*pointer)();
     
class itself
    {
public:
    itself(pointer p) : p_(p)
        {
        }
    operator pointer() const
        {
        return p_;
        }
private:
    pointer p_;
    };
</pre>

<p>As a result, he can't use the function-call syntax on an <B>itself</B> object, but can call through the pointer instead:</p>

<pre>
int main()
    {
    itself p = f();
    p(); // error
    pointer q = f();
    q(); // OK
    }
</pre>

<p>Because it can't directly manipulate an object of <B>f</B>'s return type (<B>itself</B>), I'd argue that Herb's solution is less aesthetic than mine. At the same time, I'd also argue that his solution is more efficient: instead of constructing, destroying, and referencing a class object, his solution manipulates a function pointer.</p>
<p>Herb ends his email with a challenge:</p>

<BLOCKQUOTE>
<p>Of course, normally a special-purpose <B>itself</B> proxy class like this (that contains some old object and doesn't really care much about its type) just cries out to be templatized into a general-purpose <B>Holder</B> proxy. Alas, I don't think it's possible here without breaking the solution, because the typedef would have to look something like:</p>

<pre>
typedef Holder&lt;pointer&gt; (*pointer)();
</pre>

<p>which is self-referential. Anyone care to demonstrate that it can be done?</p>
</BLOCKQUOTE>

<p>A few readers submitted solutions dispensing with function pointers altogether. Representative of those solutions is this from Volker Simonis:</p>

<pre>
class itself
    {
public:
    itself operator()()
        {
        return *this;
        }
    operator bool()
        {
        return true;
        }
    };
     
int main(void)
    {
    itself p;
    while (p = p())
        ;
    }
</pre>

<p>The solution deviates from the original question's spirit, since it has no non-member function from which to return a value. However, the solution does allow for a compact <B>itself</B> definition, and the resulting <B>p</B> "call" within <B>main</B> has the desired syntax.</p>
<p>Eric Hopper proposes a solution that works in C:</p>

<pre>
struct itself;
     
typedef struct itself
    (*pointer)(void);
     
typedef struct itself
    {
    pointer f_;
    }
itself;
     
itself f(void)
    {
    itself p = {f};
    return p;
    }
     
int main(void)
    {
    itself p = {f};
    while ((p = p.f_()).f_ != f)
        ;
    return 0;
    }
</pre>

<p>where the C statements in <B>main</B> are equivalent to the C++ statements</p>

<pre>
itself p = f;
while ((p = p()) != f)
    ;
</pre>

<p>Because C doesn't have conversion operators or conversion constructors, the value <B>f</B> must be explicitly converted into the object type <B>itself</B>:</p>

<pre>
itself p = {f};
</pre>

<p>This explicit conversion denudes the previous C++ abstraction, since the return expression does not appear to be returning the function itself.</p>

<h4><FONT COLOR="#000080">Notes</FONT></H4>

<p><a name="1"></a>[1]  Subclause 12.3p4 ("Conversions").</p>
<p><a name="2"></a>[2]  My other recent mail magnet: MSVC vs. for-scoped objects. The lesson here, I guess, is that the best way to draw a crowd is by either dissing Microsoft or running brain teasers.</p>
<p><a name="3"></a>[3]  As you can well imagine, each reader's solution uses a unique set of names. To better show their significant differences, I've "normalized" all solutions to use the same names for the same purposes.</p>

<p><i><B>Bobby Schmidt</B> is a freelance writer, teacher, consultant, and programmer. He is also an alumnus of Microsoft, a speaker at the Software Development and Embedded Systems Conferences, and an original "associate" of (Dan) Saks &amp; Associates. In other career incarnations, Bobby has been a pool hall operator, radio DJ, private investigator, and astronomer. You may summon him on the Internet via <B>rschmidt@netcom.com</B>.</i></p>

</BLOCKQUOTE>
</BODY>
</HTML>
