<HTML><HEAD>
<TITLE>October 1999/Controlling the Destruction Order of Singleton Objects/Figure 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Figure 3: Definition of class Destructor and class template TDestructor</A></h4>
<pre>
// destructor.h:
#include "dphase.h"
#include "dmanager.h"

class Destructor {
   DestructionPhase m_dphase;
public:
   Destructor(DestructionPhase dphase) : m_dphase(dphase)
   { DestructionManager::instance().register_destructor(this); }

   bool operator&gt;(const Destructor&amp; destructor) const
   { return m_dphase &gt; destructor.m_dphase; }

   virtual void destroy() = 0;
};

template &lt;class T&gt; class TDestructor : public Destructor {
   T* m_object;
public:
   TDestructor(T* object, DestructionPhase dphase)
       : Destructor(dphase), m_object(object) {}

   void destroy() { m_object-&gt;destroy_instance(); }
};


</pre>
</BODY>
</HTML>
