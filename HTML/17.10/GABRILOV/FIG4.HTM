<HTML><HEAD>
<TITLE>October 1999/Controlling the Destruction Order of Singleton Objects/Figure 4</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Figure 4: Destruction Manager</A></h4>
<pre>
// dmanager.h:
#include &lt;memory&gt;
#include &lt;vector&gt;

using namespace std;

class Destructor;      // forward declaration

class DestructionManager {
   typedef auto_ptr&lt;DestructionManager&gt; DestructionManagerPtr;

   vector&lt;Destructor*&gt; m_destructors;

   static DestructionManagerPtr&amp; get_instance();

   DestructionManager() {}
   ~DestructionManager();

   friend class auto_ptr&lt;DestructionManager&gt;;

public:
   // singleton interface
   static DestructionManager&amp; instance() 
   { return *get_instance(); }

   void register_destructor(Destructor* destructor)
   { m_destructors.push_back(destructor); }

   void destroy_objects();    // destroy the objects
};

// dmanager.cxx:
#include &lt;algorithm&gt;    // for 'sort'

#include "dmanager.h"
#include "destructor.h"

using namespace std;

DestructionManager::~DestructionManager()
{
   // the Destruction Manager is responsible for managing
   // the memory occupied by Destructor objects
   for (int i = 0; i &lt; m_destructors.size(); ++i)
      delete m_destructors[i];
}

template &lt;class T&gt; class greater_ptr {
public:
   typedef T* T_ptr;

   bool operator()(const T_ptr&amp; lhs, const T_ptr&amp; rhs) const
   { return *lhs &gt; *rhs; }
};

void DestructionManager::destroy_objects()
{
   // sort the destructors in decreasing order
   sort( m_destructors.begin(), m_destructors.end(),
         greater_ptr&lt;Destructor&gt;() );

   // destroy the objects
   for (int i = 0; i &lt; m_destructors.size(); ++i)
      m_destructors[i]-&gt;destroy();
}


</pre>
</BODY>
</HTML>
