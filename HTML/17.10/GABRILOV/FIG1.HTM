<HTML><HEAD>
<TITLE>October 1999/Controlling the Destruction Order of Singleton Objects/Figure 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Figure 1: Improved Singleton implementation</A></h4>
<pre>
// singleton.h
#include &lt;memory&gt;            // for auto_ptr

using namespace std;

class Singleton {
   typedef auto_ptr&lt;Singleton&gt; SingletonPtr;

   // the auto_ptr should be returned by reference;
   // otherwise the returned copy will receive the ownership
   // over the sole instance of the class
   static SingletonPtr&amp; get_instance();

   // so that the auto_ptr may delete the singleton
   friend class auto_ptr&lt;Singleton&gt;;

   // Singleton objects should NOT be copy constructed or 
   // assigned. Therefore, copy constructor and assignment 
   // operator made private so that clients cannot invoke them 
   // and the compiler doesn't create them implicitly.
   Singleton(const Singleton&amp;);
   Singleton&amp; operator=(const Singleton&amp;);

protected:
   // the constructor is protected, so that no instances of this 
   // class may be created except in the dedicated function 
   // 'get_instance' or by the derived classes
   Singleton() { /* initialize the singleton object */ }

   // the destructor is protected so that nobody deletes the 
   // singleton by mistake (or maliciously)
   ~Singleton() { /* destroy the singleton object */ }

public:
   static Singleton&amp; instance() { return *get_instance(); }
   static const Singleton&amp; const_instance() { return instance(); }
};

// singleton.cxx:

#include "singleton.h"

Singleton::SingletonPtr&amp; Singleton::get_instance()
{
   static SingletonPtr the_singleton(new Singleton);

   return the_singleton;
}


</pre>
</BODY>
</HTML>
