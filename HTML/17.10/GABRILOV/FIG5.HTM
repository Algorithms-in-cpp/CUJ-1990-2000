<HTML><HEAD>
<TITLE>October 1999/Controlling the Destruction Order of Singleton Objects/Figure 5</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Figure 5: Sample Logger resource definition</A></h4>
<pre>
// logger.h:
#include &lt;memory&gt;
#include &lt;string&gt;

#include "dphase.h"
#include "destructor.h"

using namespace std;

class Logger {
   typedef auto_ptr&lt;Logger&gt; LoggerPtr;

   static LoggerPtr&amp; get_instance();
   static void destroy_instance()
   { delete get_instance().release(); }

   Logger();
   ~Logger();

   friend class auto_ptr&lt;Logger&gt;;
   friend class TDestructor&lt;Logger&gt;;

public:
   // singleton interface
   static Logger&amp; instance() { return *get_instance(); }

   void log(string message);
};

// logger.cxx:
#include &lt;iostream&gt;
#include &lt;string&gt;

#include "dphase.h"
#include "destructor.h"
#include "logger.h"

using namespace std;

Logger::Logger()
{
   new TDestructor&lt;Logger&gt;(this, DestructionPhase(1));

   cout &lt;&lt; "Logger created" &lt;&lt; endl;
}

Logger::~Logger()
{
   cout &lt;&lt; "Logger destroyed" &lt;&lt; endl;
}

void Logger::log(string message)
{
   cerr &lt;&lt; "Logger: " &lt;&lt; message &lt;&lt; endl;
}



</pre>
</BODY>
</HTML>
