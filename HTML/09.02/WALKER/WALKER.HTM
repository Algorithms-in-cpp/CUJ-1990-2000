


<HTML>
<HEAD>

<TITLE>February 1991/Positioning Nodes For General Trees</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocfeb.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Algorithms</FONT></H2>

<hr><h2 align="center"><font color="#800000">Positioning Nodes For General Trees<A name="0056_002B"><A name="0056_002B"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="0056_0000"><A name="0056_0000">John Q. Walker II</font></h3><hr><blockquote><P>
<P><i><A name="0056_0000"><A name="0056_0000">John Q. Walker II manages one of the software development teams implementing the SNA<I></I> <I></I>communications protocols on OS/2. He joined IBM in 1978, where he was a developer and tester for the<I></I> <I></I>operating system software of the IBM System/38. In Research Triangle Park, NC, John has been an<I></I> <I></I>architect for the IBM Token-Ring Network, serving as co-editor of the IEEE 802.5 local area network<I></I> <I></I>standard in 1983 and 1984. John received a B.S., B.A., and M.S. from Southern Illinois University and<I></I> <I></I>is completing a Ph.D. in computer science at the University of North Carolina at Chapel Hill. You may<I></I> <I></I>contact John at IBM Corp., Dept. E42, Bldg. 673, P.O. Box 12195, Research Triangle Park, NC 27709.</i></P><P>
<P><i>The bulk of this article first appeared in Software - Practice and Experience, July 1990, Copyright<I></I> <I></I>1990 by John Wiley and Sons, Ltd. Reprinted by permission.</i></P><P>
Drawing a tree consists of two stages: determining the position of each node, and actually rendering the individuals nodes and interconnecting branches. The algorithm described here concerns the first stage. That is, given a list of nodes, an indication of the hierarchical relationship among them, and their shape and size, where should each node be positioned for optimal aesthetic effect?<P>
This algorithm determines the positions of the nodes for an arbitrary general tree. The positioning, specified in <I>x</I>, <I>y</I> coordinates, minimizes the width of the tree. A general tree may have an unlimited number of offspring per node. Binary and ternary trees, on the other hand, can have only two and three offspring per node, respectively. This algorithm operates in time <I>0(N)</I>, where <I>N</I> is the number of nodes in the tree.<P>
In textbooks, most tree drawings have been positioned by the sure hand of a human graphic designer. Many computer-generated positionings have been either trivial or contained irregularities. Earlier work by Wetherell and Shannon <a href="#ref8">[8]</a> and Tilford <a href="#ref6">[6]</a>, upon which the algorithm builds, failed to correctly position the interior nodes of some trees. The algorithm in this article correctly positions a tree's nodes in two passes. It also handles several practical considerations: alternate orientations of the tree, variable node sizes, and out-of-bounds conditions. Radack <a href="#ref2">[2]</a>, also building on Tilford's work, solved this same problem with an algorithm that makes four passes.<P>
A history of algorithms leading up to this one is presented in reference <a href="#ref7">[7]</a>.<P>
This algorithm lets a computer reliably generate tree drawings equivalent to those done by a skilled human. Below are some of the applications that often use tree-drawings.<P>
<UL><li>Drawings of B-trees and 2-3 trees</li>
<li>Structure editors that draw trees</li>
<li>Flow charts without loops</li>
<li>Visual LISP editors</li>
<li>Parse trees</li>
<li>Decision trees</li>
<li>Hierarchical database models</li>
<li>Hierarchically-organized file systems (for example, directories, subdirectories, and files)</li>
<li>Organizational charts</li>
<li>Tables of contents in printed matter</li>
<li>Biological classifications</li></UL>
<h4><FONT COLOR="#000080"><A name="0056_002C">General Trees<A name="0056_002C"></FONT></h4></P>
This paper deals with rooted, directed trees, that is, trees with one root and hierarchical connections from the root to its offspring. No node may have more than one parent.<P>
Each node in a general tree can have an unlimited number of offspring. A general tree is also known as an <I>m</I>-ary tree, since each node can have m offspring (where <I>m</I> is <I>0</I> or more). As a class, binary trees differ from general trees in that an offspring of a binary tree node must be either the left offspring or the right offspring. Binary tree drawings preserve this left-right distinction. Thus, a single offspring is placed under its parent node either to the left or right of its parent's position. This left-right distinction does not apply in a general tree. If a node has a single offspring, the offspring is placed directly below its parent.<P>
This algorithm positions a binary tree by ignoring the left-right distinction. If a node has exactly one offspring, it is positioned directly below its parent. Supowit and Reingold <a href="#ref4">[4]</a> noted that it is NP-hard to optimally position minimum-width binary trees (while adhering to the left-right distinction) to within a factor of less than about four percent.<P>
<h4><FONT COLOR="#000080"><A name="0056_002D">Aesthetic Rules<A name="0056_002D"></FONT></h4></P>
Wetherell and Shannon <a href="#ref8">[8]</a> first described a set of aesthetic rules against which a good positioning algorithm must be judged. Tilford <a href="#ref6">[6]</a> and Supowit and Reingold <a href="#ref4">[4]</a> expanded that list in an effort to produce better algorithms.<P>
A tidy tree drawing occupies as little space as possible while satisfying certain aesthetics:<P>
1. Nodes at the same level of the tree should lie along a straight line, and the straight lines defining the levels should be parallel <a href="#ref8">[8]</a>.<P>
2. A parent should be centered over its offspring <a href="#ref8">[8]</a>.<P>
3. A tree and its mirror image should produce drawings that are reflections of one another. Moreover, a subtree should be drawn the same way regardless of where it occurs in the tree. In some applications, one wishes to examine large trees to find repeated patterns. Searching for patterns is facilitated by having isomorphic subtrees drawn isomorphically <a href="#ref3">[3]</a>.<P>
This implies that small subtrees should not appear arbitrarily positioned among larger subtrees. Small, interior subtrees should be spaced out evenly among larger subtrees (where the larger subtrees are adjacent at one or more levels). Small subtrees at the far left or far right should be adjacent to larger subtrees.<P>
The algorithm described in this article satisfies these aesthetic rules.<P>
<h4><FONT COLOR="#000080"><A name="0056_002E">How The Algorithm Works<A name="0056_002E"></FONT></h4></P>
This algorithm initially assumes that the root of the tree is at the top of the drawing <a href="#ref1">[1]</a>. Node-positioning algorithms are concerned only with determining the <I>x</I>-coordinates of the nodes. The <I>y</I>-coordinate can be determined from its level in the tree, due to Aesthetic 1 and the convention of providing a uniform vertical separation between consecutive levels. A later section presents a variation for placing the root in other positions.<P>
This algorithm uses two positioning concepts, the first of which is building subtrees as rigid units. Moving a node moves all of its descendants (if it has any) &#151; the entire subtree is thus treated as a rigid unit. A general tree is positioned by building it up recursively from its leaves toward its root.<P>
Second is the concept of using two fields for the positioning of each node. They are a preliminary <I>x</I>-coordinate, and a modifier field.<P>
Two tree traversals are used to produce a node's final <I>x</I>-coordinate. The first traversal assigns the preliminary <I>x</I>-coordinate and modifier fields for each node. The second traversal computes the final <I>x</I>-coordinate of each node by summing the node's preliminary <I>x</I>-coordinate with the modifier fields of all of its ancestors. This technique makes moving a large subtree simple and allows the algorithm to operate in time <I>0(N)</I>.<P>
For example, to move a subtree four units to the right, increment both the preliminary <I>x</I>-coordinate and the modifier field of the subtree's root by four. As another example, the modifier field associated with the tree's apex<I> </I>node is used in determining the final position of all of its descendants. (I use the term <I>apex node</I> to distinguish the root of the entire tree from the roots of individual internal subtrees.)<P>
The first tree traversal is a postorder traversal, positioning the smallest subtrees (the leaves) first and recursively proceeding from left to right to build up the position of larger and larger subtrees. Sibling nodes are always separated from one another by a predefined minimal distance (the sibling separation). Adjacent subtrees are separated by at least a predefined subtree separation. Subtrees of a node are formed independently and placed as close together as these separation values allow.<P>
As the tree walk moves from the leaves to the apex, it combines smaller subtrees and their root to form a larger subtree. For a given node, its subtrees are positioned one-by-one, moving left to right. Imagine that its newest subtree has been drawn and cut out of paper along its contour. Now superimpose the new subtree atop its neighbor to the left, and move them apart until no two points touch. Initially the subtrees' roots are separated by the sibling separation value. The roots are then pushed apart until the adjacent subtrees at the lower level are separated by the subtree separation value. This process continues at successively lower levels until it arrives at the bottom of the shorter subtree. Note that the new subtree being superimposed may not always bump against a descendant of its nearest sibling to the left. Siblings much farther to the left, but with many offspring, may cause the new subtree to be pushed to the right. At some levels no movement may be necessary, but at no level are subtrees moved closer together. When this process is complete for all of the offspring of a node, the node is centered over its leftmost and rightmost offspring.<P>
Pushing a new, large subtree farther and farther to the right may open a gap between the large subtree and smaller subtrees that had been positioned correctly, but are now bunched on the left with an empty area to their right. This undesirable left-to-right gluing was the failing of the algorithms by Sweet, Wetherell and Shannon, and Tilford.<P>
The algorithm presented here produces evenly distributed, proportional spacing among subtrees. The distance that a large subtree is moved is apportioned to smaller, interior subtrees, satisfying Aesthetic 3. Moving these subtrees is accomplished as before &#151; by adding the proportional values to the preliminary <I>x</I>-coordinate and modifier fields of the roots of the small interior subtrees. For example, if three small subtrees are bunched at the left because a new large subtree has been positioned to the right, the first small subtree is shifted right by one-fourth of the gap, the second small subtree is shifted right by one-half of the gap, and the third small subtree is shifted right by three-quarters of the gap.<P>
The second tree traversal, a preorder traversal, determines the final x-coordinate for each node. It starts at the apex node and sums each node's x-coordinate value with the combined sum of the modifier fields of its ancestors. The second traversal also adds a value that guarantees centering the display with respect to the position of the apex<I> </I>node.<P>
<h4><FONT COLOR="#000080"><A name="0056_002F">Changing Root Orientation<A name="0056_002F"></FONT></h4></P>
The algorithm allows tree positionings where the apex is not at the top of the drawing. One such orientation puts the root on the left and the siblings to its right. Four such orientations of the root are the values taken by the global constant <I>RootOrientation</I>, set before the algorithm is called.<P>
<I>NORTH</I> &#151; root is at the top, as in the preceding algorithm<P>
<I>SOUTH</I> &#151; root is at the bottom, its siblings are above it<P>
<I>EAST</I> &#151; root is at the right, its siblings are to its left<P>
<I>WEST</I> &#151; root is at the left, its siblings are to its right<P>
<h4><FONT COLOR="#000080"><A name="0056_0030">An Extended Example<A name="0056_0030"></FONT></h4></P>
The algorithm's operation during the two walks can be best illustrated with an example (see <A href="fig1.htm">Figure 1</a>)
. At least three levels are needed to illustrate its operation, since a small subtree must be centered between larger sibling subtrees. The following example has fifteen nodes lettered in the order that they are visited in the first, postorder traversal. For this example, the mean size of each node is two units and the sibling separation and subtree separation values are four units.<P>
In the postorder walk, nodes' preliminary <I>x</I>-coordinate value and modifier values are calculated.<P>
<I>A</I> is a leaf with no left sibling.<P>
<pre>PRELIM(A) = 0
MODIFIER(A) = 0</pre>
<I>B</I> is also a leaf with no left sibling.<P>
<pre>PRELIM(B) = 0
MODIFIER(B) = 0</pre>
<I>C</I> is the right sibling of node <I>B</I> and is separated from node <I>B </I>by the sibling separation value plus the mean size of the two nodes.<P>
<pre>PRELIM(C) = 0 + 4 + 2 = 6
MODIFIER(C) = 0</pre>
<I>D</I> is the parent of nodes <I>B</I> and <I>C</I>, and the right sibling of node <I>A</I>. <I>D</I> is separated from node <I>A</I> by the sibling separation value plus the mean size of the two nodes. <I>D</I>'s modifier value is set so that applying it to nodes <I>B</I> and <I>C</I> will center them under <I>D</I>. The modifier is determined by subtracting the mean of the <I>PRELIM</I> (its mostly widely-separated offspring) values from <I>PRELIM(D)</I>.<P>
<pre>PRELIM(D) = 0 + 4 + 2 = 6
MODIFIER(D) = 6 - (0 + 6)/2 = 3</pre>
<I>E</I> is the parent of nodes <I>A</I> and <I>D</I>, and is centered over nodes <I>A</I> and <I>D</I>.<P>
<pre>PRELIM(E) = (0 + 6)/2 = 3
MODIFIER(E) = 0</pre>
<I>F</I> is a right sibling of node <I>E</I>, and is separated from <I>E</I> by the sibling separation value plus the mean size of the two nodes. That would place it directly over node <I>C</I>. You can see now that node <I>N</I>'s subtree will later be placed much further to the right, leaving the spacing between nodes <I>E</I> and <I>F</I> smaller, and hence different, than the spacing between nodes <I>F</I> and <I>N</I>. When node <I>N</I> is finally positioned, the position of node <I>F</I> will be adjusted. But for now,<P>
<pre>PRELIM(F) = 3 + 4 + 2 = 9
MODIFIER(F) = 0</pre>
<I>G</I> and <I>H</I> are leaves with no left sibling.<P>
<pre>PRELIM(G) = 0
MODIFIER(G) = 0

PRELIM(H) = 0
MODIFIER(H) = 0</pre>
<I>I</I> is the right sibling of node <I>H</I>. It is separated from <I>H</I> by the sibling separation value plus the mean size of the two nodes.<P>
<pre>PRELIM(I) = 0 + 4 + 2 = 6
MODIFIER(I) = 0</pre>
<I>J</I> is the right sibling of node <I>I</I>. As before, it is separated by the standard spacing from node <I>I</I>.<P>
<pre>PRELIM(J) = 6 + 4 + 2 = 12
MODIFIER(J) = 0</pre>
<I>K</I> is the right sibling of node <I>J</I>, and <I>L</I> is the right sibling of node <I>K</I>.<P>
<pre>PRELIM(K) = 12 + 4 + 2 = 18
MODIFIER(K) = 0

PRELIM(L) = 18 + 4 + 2 = 24
MODIFIER(L) = 0</pre>
<I>M</I> is the parent of nodes <I>H</I> through <I>L</I>, and is the right sibling of node <I>G</I>. It is separated from node <I>G</I> by the sibling separation value plus the mean size of the two nodes. Its modifier is set so that when it is applied to nodes <I>H</I> through <I>L</I>, they will appear centered underneath it.<P>
<pre>PRELIM(M) = 0 + 4 + 2 = 6
MODIFIER(M) = 6 -  (0 + 24)/2 = -6</pre>
<I>N</I> is the parent of nodes <I>G</I> and <I>M</I>, and is the right sibling of node <I>F</I>. <I>N</I> first receives its standard positioning to the right of node <I>F</I>, with a modifier that reflects the centering of its offspring beneath it.<P>
<pre>PRELIM(N) = 9 + 4 + 2 = 15
MODIFIER(N) = 15 - (0 + 6)/2 = 12</pre>
Now verify that node<I> E</I>'s subtree and node <I>N</I>'s subtree are properly separated.<P>
Move down one level. The leftmost descendant of node <I>N</I>, node <I>G</I>, currently has a positioning of 0 + 12 = 12 (<I>PRELIM(G)</I> plus the <I>MODIFIER(N)</I>, its parent). The rightmost descendant of node <I>E</I>, node <I>D</I> is positioned at 6 + 0 = 6 (<I>PRELIM(D)</I> plus the <I>MODIFIER(E)</I>, its parent). Their difference is 12 - 6 = 6, which is equal to the minimum separation (subtree separation plus mean node size), so <I>N</I>'s subtree does not need to be moved, since there is no overlap at this level.<P>
Move down another level. The leftmost descendant of node <I>N</I> is node <I>H</I>. It is positioned at 0 + -6 + 12 = 6 (<I>PRELIM(H</I>) plus <I>MODIFIER(M)</I> and <I>MODIFIER(N)</I>). The rightmost descendant of node <I>E</I>, node <I>C</I>, is positioned at 6 + 3 + 0 = 9 (<I>PRELIM(C)</I> plus <I>MODIFIER(D)</I> and <I>MODIFIER(E)</I>). Their difference is 6 - 9 = -3; it should be 6, the minimum subtree separation plus the mean node size. Thus node <I>N</I> and its subtree need to be moved to the right a distance of 6 - -3 = 9.<P>
<pre>PRELIM(N) = 15 + 9 = 24
MODIFIER(N) = 12 + 9 = 21</pre>
Moving node <I>N</I> and its subtree opens a gap of size nine between sibling nodes <I>E</I> and <I>N</I>. This difference must be evenly distributed to all contained sibling nodes, and node <I>F</I> is the only one. It is moved to the right a distance of 9/2 = 4.5.<P>
<pre>PRELIM(F) = 9 + 4.5 = 13.5
MODIFIER(F) = 0 + 4.5 = 4.5</pre>
<I>0</I> is the parent of nodes <I>E</I>, <I>F</I>, and <I>N</I>. It is positioned halfway between the position of nodes <I>E</I> and <I>N</I>.<P>
<pre>PRELIM(0) = (3 + 24)/2 = 13.5
MODIFIER(0) = 0</pre>
All the nodes are visited a second time in a preorder traversal. Their final <I>x</I>-coordinates are determined by summing their preliminary <I>x</I>-coordinates with the modifier fields of all of their ancestors. (See <A href="tab1.htm">Table 1</a>.
)<P>
<h4><FONT COLOR="#000080"><A name="0056_0031">The Algorithm<A name="0056_0031"></FONT></h4></P>
Since the algorithm operates by making two recursive walks of the tree, several variables are global for the sake of runtime efficiency. These variables are described below, alphabetically. All other variables are local to their respective procedures and functions.<P>
<I>pLevelZero</I>: The algorithm maintains a list containing the previous node at each level, that is, the adjacent neighbor to the left. <I>pLevelZero</I> is a pointer to the first entry in this list.<P>
<I>xTopAdjustment</I>: A fixed distance used in the final walk of the tree to determine the absolute <I>x</I>-coordinate of a node with respect to the apex node of the tree.<P>
<I>yTopAdjustment</I>: A fixed distance used in the final walk of the tree to determine the absolute <I>y</I>-coordinate of a node with respect to the apex node of the tree.<P>
The following global constants must be set before the algorithm is called.<P>
<I>LevelSeparation</I>: The fixed distance between adjacent levels of the tree. Used in determining the <I>y</I>-coordinate of a node being positioned.<P>
<I>MaximumDepth</I>: The maximum number of levels in the tree to be positioned. If all levels are to be positioned, set this value to positive infinity (or an appropriate numerical value).<P>
<I>SiblingSeparation</I>: The minimum distance between adjacent siblings of the tree.<P>
<I>SubtreeSeparation</I>: The minimum distance between adjacent subtrees of a tree. For proper aesthetics, this value is normally somewhat larger than <I>SiblingSeparation</I>.<P>
Upon entry to function <I>TreePosition</I>, four hierarchical relationships are required for each node. Also, the <I>X </I>and <I>Y</I> coordinates of the apex node are required. Upon its successful completion, the algorithm has set the <I>X</I> and <I>Y </I>coordinate values for each node in the tree.<P>
The algorithm is invoked by calling function <I>TreePosition</I>, passing it a pointer to the apex node of the tree. If the tree is too wide or too tall to be positioned within the coordinate system being used, <I>TreePosition</I> returns the boolean <I>FALSE</I>; otherwise it returns <I>TRUE</I>.<P>
I use the internal tree notation described by Knuth <a href="#ref1">[Reference 1, section 2.3.3]</a> for a triply-linked tree. Each node consists of three pointers, *<I>parent</I>, *<I>offspring</I>, and *<I>rightsibling</I>, and its information in field *<I>info</I>. Thus, if node <I>T</I> is the root of a binary tree, the root of its left subtree is<P>
<pre>T-&gt;offspring</pre>
and the root of its right subtree is<P>
<pre>T-&gt;offspring-&gt;rightsibling</pre>
<h4><FONT COLOR="#000080"><A name="0056_0032">Acknowledgements<A name="0056_0032"></FONT></h4></P>
I appreciate the written correspondence I received from the experts on this topic (listed alphabetically): Brad A. Myers at the Computer Systems Research Institute in Toronto, Andy Poggio at SRI International, Edward Reingold at the University of Illinois, Bob Tarjan at AT&amp;T Bell Laboratories, and C.S. Wetherell at AT&amp;T Information Systems. Thanks also to Jane Munn, Jim Staton, Bob Gibson, John Broughton III, Steve Joyce, and Dr. Bill Wright at IBM. The bulk of this article first appeared in Software &#151; Practice and Experience, July 1990, Copyright 1990 by John Wiley and Sons, Ltd. Reprinted by permisison.<P>
<h4>References</FONT></h4></P>
<a name="ref1">[1]</a>     Knuth, D.E., The <I>Art of Computer Programming, Volume 1: Fundamental Algorithms</I>, Addison-Wesley, Reading, MA, 1973.<P>
<a name="ref2">[2]</a>     Radack, G.M., "Tidy Drawing of M-ary Trees," Department of Computer Engineering and Science, Case Western Reserve University, Cleveland, Ohio, Report CES-88-24, November 1988.<P>
<a name="ref3">[3]</a>     Reingold, E.M. and J.S. Tilford., "Tidier Drawings of Trees," <I>IEEE Transactions on Software Engineering</I> SE-7, 2, March 1981, 223-228.<P>
<a name="ref4">[4]</a>     Supowit, K.J. and E.M. Reingold, "The complexity of drawing trees nicely," <I>Acta Informatica</I> 18, 4, January 1983, 377-392.<P>
<a name="ref5">[5]</a>     Sweet, R.E., "Empirical estimates of program entropy." Department of Computer Science, Stanford University, Stanford, CA, Report STAN-CS-78-698, November 1978. Also issued as Report CSL-78-3, Xerox PARC, Palo Alto, CA, September 1978.<P>
<a name="ref6">[6]</a>     Tilford, J.S., "Tree drawing algorithms." M.S. Thesis, Department of Computer Science, University of Illinois, Urbana, IL, Report UIUCDCS-R-81-1055, April 1981. Available as document UILU-ENG-81-1711 from the College of Engineering Document Center at the Univ. of Illinois.<P>
<a name="ref7">[7]</a>     Walker II, J. Q., "A Node-Positioning Algorithm for General Trees," <I>Software &#151; Practice and Experience</I> 10, 1980 553-561.<P>
<a name="ref8">[8]</a>     Wetherell, C.S. and A. Shannon, "Tidy Drawings of Trees," <I>IEEE Transactions on Software Engineering</I>, SE-5, 5 September 1979, 514-520.<P>
<h4><A HREF="list1.htm">Listing 1</A></h4>

<h4><a href="../../../source/1991/feb91/walker.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY>
</HTML>
