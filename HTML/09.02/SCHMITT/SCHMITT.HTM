


<HTML>
<HEAD>

<TITLE>February 1991/Reviving The UNIX sbrk Function</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocfeb.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">Reviving The UNIX sbrk Function<A name="005E_0031"><A name="005E_0031"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="005E_0000"><A name="005E_0000">David A. Schmitt</font></h3><hr><blockquote><P>
<P><i><A name="005E_0000"><A name="005E_0000">Dave Schmitt was a founder and president of Lattice, the well-known C compiler company, from 1983 until 1990. Prior to that, he worked at Bell Telephone Laboratories where he was involved in the design of fault-tolerant operating systems, including a nonstop version of UNIX. He is currently a free-lance author and consultant. You may contact him at Pivot, (708) 469-2235.</i></P><P>
Early versions of UNIX offered C programmers a simple memory allocator using a linear heap and two functions named <I>sbrk</I> and <I>brk</I>. (Later systems renamed the latter <I>rbrk</I>.) This heap management system is fast and efficient because, unlike more sophisticated random heap systems, it requires no overhead to keep track of allocated and free blocks.<P>
A random heap manager usually adds a pointer and an integer to each block. The integer contains the block size, and the pointer is used to chain the block into a linked list. I've seen some applications in which nearly 20 percent of the memory was lost to this overhead information. This typically occurs when you need to allocate a lot of very small blocks, such as when building a compiler symbol table.<P>
Nonetheless, a linear heap is not as generally useful as a random heap, so the ANSI committee did not include <I>sbrk</I> and <I>rbrk</I> in the standard C library. They perpetuated only the UNIX random heap functions named <I>malloc</I>, <I>free</I>, <I>calloc</I>, and <I>realloc</I>. As a result, compiler vendors are gradually dropping <I>sbrk</I> and <I>rbrk</I> from their libraries.<P>
Despite its omission from the ANSI standard, the linear heap has advantages in some applications. This article shows how you can implement <I>sbrk</I> and <I>rbrk</I> in an environment that offers only the ANSI random heap functions.<P>
<h4><FONT COLOR="#000080"><A name="005E_0032">Linear Heap Management<A name="005E_0032"></FONT></h4></P>
A linear heap is a contiguous memory area divided into allocated and unallocated portions as shown in <A href="fig1.htm">Figure 1</a>.
 A break pointer contains the address of the unallocated portion. It initially points to the beginning (i.e., the low address) of the heap. You allocate memory by moving the pointer upwards (i.e., by increasing its address), and you free memory by moving the pointer downwards. The <I>sbrk</I> function handles both of these operations, as shown in <A href="list1.htm">Listing 1</a>.
<P>
The first two calls to <I>sbrk</I> allocate a 100-byte block and a 200-byte block, assigning the block addresses to pointers <I>p</I> and <I>q</I>, respectively. The third and fourth calls free both blocks by telling <I>sbrk</I> to move the break pointer first 200 bytes and then 100 bytes in the negative direction. You could combine these into a single call moving the break pointer down 300 bytes. Also, you can call <I>rbrk</I> to reset the break pointer to its initial position, thereby freeing all allocated blocks.<P>
<h4><FONT COLOR="#000080"><A name="005E_0033">Linear Heap Applications<A name="005E_0033"></FONT></h4></P>
The example in <A href="list1.htm">Listing 1</a>
shows the primary disadvantage of the linear heap: <I>You must always free blocks in the reverse order that they were allocated</I>. If you no longer need the 100-byte block, you cannot release it until you are done with all the blocks allocated after it. Indeed, the linear heap manager knows nothing about blocks; it merely moves a pointer up and down.<P>
Despite this disadvantage, the linear heap is well-suited to some applications. Suppose you're building a symbol table for a compiler. Each symbol is represented by a structure having the format shown in <A href="list2.htm">Listing 2</a>.
<P>
When the compiler encounters a new symbol, it builds a <I>SYMBOL</I> structure on the stack and then calls a function named <I>savesym</I> to save this information in the heap. When the function returns, the compiler links the new <I>SYMBOL</I> structure into the appropriate place in an alphabetical list. These structures remain allocated throughout the compilation and are all released at the same time when the compiler is finished. This is clearly a case where the overhead of a random heap is unnecessary.<P>
To show the difference between the two heap methods, the <I>savesym</I> function can be written to use either <I>sbrk</I> or <I>malloc</I>, as shown in <A href="list3.htm">Listing 3</a>.
<P>
This function uses <I>sbrk</I> if the symbol <I>LHEAP</I> is defined; otherwise, it uses<I> malloc</I>. Note that <I>savesym</I> returns <I>NULL</I> if no space can be allocated. The strange <I>if</I> statement after the <I>sbrk</I> call is necessary because <I>sbrk</I> does not return <I>NULL</I> when it fails. Instead, it conforms to the original UNIX definition by returning the value <I>-1</I> cast to a pointer.<P>
The little test program in <A href="list4.htm">Listing 4</a>
shows how many symbols we can save under various conditions. <A href="fig2.htm">Figure 2</a>
shows the results of running this test program with the linear and random heap, using the Lattice compiler and various symbol sizes. The left column indicates the size of the symbol. A size of <I>8</I> produces a 19-byte <I>SYMBOL</I> structure, while a size of <I>255</I> produces a 266-byte structure. The percentage column is computed by taking the difference between the <I>sbrk</I> and <I>malloc</I> results, divided by the <I>malloc</I> results.<P>
This test indicates that, given a typical implementation, <I>sbrk</I> is about 25 percent more space efficient than <I>malloc</I> when allocating small blocks. As the block size increases, this advantage gradually disappears.<P>
Since many programming languages use small symbols of 32 bytes or less, the linear heap method can make a noticable difference in compiler memory consumption. In general, you should consider using <I>sbrk</I> if your application allocates a lot of small blocks that it keeps until termination or until the beginning of another processing phase. In such an application, you can also get a performance improvement with a linear heap because it allows you to release all memory with a single call to <I>rbrk</I> rather than with multiple calls to <I>free</I>.<P>
<h4><FONT COLOR="#000080"><A name="005E_0034">Implementing A Linear Heap<A name="005E_0034"></FONT></h4></P>
If your favorite C compiler doesn't support <I>sbrk</I> and <I>rbrk</I>, you can easily implement them on top of <I>malloc</I> and <I>free</I>. The code is shown in <A href="list5.htm">Listing 5</a>.
<P>
The operation of <I>sbrk</I> is straightforward. On the first call, it uses <I>malloc</I> to get a block whose size is the larger of the requested size and the global parameter <I>_LHINCR</I>. Local variables <I>base</I> and <I>size</I> are used to save the base address and size of this block, respectively. The variable <I>xbrk</I> is the offset of the break location within the block. It is initially set to zero. In other words, the current break address is <I>&amp;base[xbrk]</I>. In keeping with the UNIX definition of <I>sbrk</I>, a new block is cleared &#151; <I>memset</I> is called if <I>n</I> is greater than <I>0</I>.<P>
The <I>rbrk</I> function is even simpler. If a linear heap has been created, it frees the block and resets all the local variables. Otherwise, it does nothing.<P>
Notice that <I>_LHINCR</I> normally causes the linear heap to contain <I>8</I> kilobytes. You can change this to a different value before the first call to <I>sbrk</I> or after calling <I>rbrk</I>. You might wonder why this approach is used rather than having <I>sbrk</I> call <I>realloc</I> to expand the linear heap when it cannot honor a request. The problem is that <I>realloc</I> may move the heap, thereby invalidating the pointers returned by all previous <I>sbrk</I> calls.<P>
<h4><FONT COLOR="#000080"><A name="005E_0035">Final Thoughts<A name="005E_0035"></FONT></h4></P>
The latest compiler from Microsoft does not provide <I>sbrk</I> and <I>rbrk</I>, so you can use the functions from <A href="list5.htm">Listing 5</a>
with no problems.<P>
Borland provides a verison of <I>sbrk</I> that performs about the same as Lattice's. However, Borland's C compilers do not have an <I>rbrk</I> function. This is not a big problem if you maintain a total of all the space you have allocated via <I>sbrk</I>. You can then simulate <I>rbrk</I> by calling <I>sbrk</I> with the negative of this total value.<P>
Watcom and Zortech also provide <I>sbrk</I> but not <I>rbrk</I>. However, you may not want to use their linear heaps because of the implementation's overhead. When I ran the <A href="list4.htm">Listing 4</a>
test program with these two compilers, I discovered that the <I>sbrk</I> version of <I>savesym</I> stored fewer symbols than the <I>malloc</I> version.<P>
This discovery led me to examine the source code that Zortech supplies in their Developer's Edition. It turns out that each time you call their <I>sbrk</I> function, they invoke DOS to get more memory. Since DOS allocates in multiples of 16-byte paragraphs, each <I>sbrk</I> request is rounded up to the next multiple of 16. This is considerably more overhead than Zortech's <I>malloc</I>, which rounds each request up to the next multiple of four.<P>
Zortech's implementation of <I>sbrk</I> also violates the spirit of the original UNIX version, where the requested size was not rounded up and each allocated block was immediately above its predecessor. To be fair, however, Zortech says this about <I>sbrk</I> in their manual: "Applications should avoid using it." If that's the case, I wonder why they bothered to include it in their library and documentation.<P>
The Watcom version of <I>sbrk</I> behaves so much like Zortech's that I suspect it uses a similar strategy, although I did not have access to their library source. It's clear that if you can benefit from the linear heap approach, you should use the routines from <A href="list5.htm">Listing 5</a>
even in the Watcom and Zortech environments, which supposedly support this feature. To be sure of linking in the correct version, you might want to put a leading underscore in front of your <I>sbrk</I> and <I>rbrk</I> routines, or give them completely different names.<P>

<h4><a href="../../../source/1991/feb91/schmitt.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
