<HTML><head><TITLE>February 1991/Skip Lists/Listing 2</TITLE></head><BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4><A name="004D_003A"><A name="004D_003A">Listing 2 (skiplist.c)<A name="004D_003A"></h4><P>
<pre>/* skiplist.c */

#define SLTEST  1
#include &lt;stdlib.h&gt;
#include &lt;setjmp.h&gt;
#include "skiplist.h"
#ifdef SLTEST
#define NOMEM   1
#endif

/*
 *  Skip list routines based on algorithms described
 *  by William Pugh, SKIP LISTS:  A PROBABILISTIC
 *  ALTERNATIVE TO BALANCED TREES.  CACM, XXXIII, 6,
 *  June, 1990.  Pp. 668 &#151; 676.
 */

NODE *newlist()
{
   NODE *temp;

   if(temp = (NODE *)calloc(sizeof(NODE) +
      (sizeof(NODE *) * (DMAX -- 1)), 1))
   {
      temp--&gt;korl.level = 1;
   }
   return(temp);
}

NODE *search(searchlist, searchkey)
NODE *searchlist;
KEYTYPE searchkey;
{
   NODE *list, *temp;
   int i, probe;

   list = searchlist;
   for(i = searchlist--&gt;korl.level; ----i &gt;= 0; )
   {
      while(temp = list--&gt;pointers[i])
      {
         if((probe = COMPARE(temp--&gt;korl.key, searchkey))
            &lt; 0)
         {
            list = temp;
         }
         else if(probe == NIL)   /* key found */
            return(temp);
         else
            break;
      }
   }
   return(NIL);
}

NODE *insert(searchlist, searchkey)
NODE *searchlist;
KEYTYPE searchkey;
{
   NODE *lnode, *tnode;
   int i, newlevel, probe;
   NODE *tempptrs[MAXLEVEL];

   lnode = searchlist;
   for(i = searchlist--&gt;korl.level; ----i &gt;= 0; )
   {
      while(tnode = lnode--&gt;pointers[i])
      {
         if((probe = COMPARE(tnode--&gt;korl.key, searchkey))
            &lt; 0)
         {
            lnode = tnode;
         }
         else if(probe == NIL)   /* already present */
            return(tnode);
         else
            break;  /* break from while loop */
      }
      tempptrs[i] = lnode;
   }
   /* key not yet present in list ---- insert it */
   newlevel = randomlevel();
   if(newlevel &gt; searchlist--&gt;korl.level)
   {
      for(i = searchlist--&gt;korl.level; i &lt; newlevel; ++i)
      {
         tempptrs[i] = searchlist;
      }
      searchlist--&gt;korl.level = newlevel;
   }
   lnode = newnode(newlevel, searchkey);
   for(i = 0; i &lt; newlevel; ++i)
   {
      lnode--&gt;pointers[i] = tempptrs[i]--&gt;pointers[i];
      tempptrs[i]--&gt;pointers[i] = lnode;
   }
   return(lnode);
}

int delete(searchlist, searchkey)
NODE *searchlist;
KEYTYPE searchkey;
{
   NODE *lnode, *tnode;
   int i;
   NODE *tempptrs[MAXLEVEL];

   lnode = searchlist;
   for(i = lnode--&gt;korl.level; ----i &gt;= 0; )
   {
      while((tnode = lnode--&gt;pointers[i])
         &amp;&amp; (COMPARE(tnode--&gt;korl.key, searchkey) &lt; 0))
      {
         lnode = tnode;
      }
      tempptrs[i] = lnode;
   }
   tnode = lnode--&gt;pointers[0];
   if(tnode &amp;&amp; (COMPARE(tnode--&gt;korl.key, searchkey) == 0))
   {
      lnode = searchlist;
      for(i = 0; i &lt; lnode--&gt;korl.level; ++i)
      {
         if(tempptrs[i]--&gt;pointers[i] != tnode)
            break;
         tempptrs[i]--&gt;pointers[i] = tnode--&gt;pointers[i];
      }
      free(tnode);
      while((i = lnode--&gt;korl.level) &gt; 1
         &amp;&amp; lnode--&gt;pointers[i] == NIL)
      {
         lnode--&gt;korl.level = ----i;
      }
      return(TRUE);
   }
   else
      return(FALSE);
}

NODE *newnode(nlevel, nkey)
int nlevel;
KEYTYPE nkey;

{
#ifdef SLTEST
   extern jmp_buf errbuf;
   extern int *emptr;
   extern int nnodes;
   extern int levels[];
#endif
   NODE *temp;

   temp = (NODE *)malloc(sizeof(NODE)+
                sizeof(NODE *) * (nlevel - 1));
#ifdef SLTEST
   if(temp == NIL)
      longjmp(errbuf, NOMEM); /* best we can do */
   emptr[nnodes] = nkey;   /* record keys as entered */
   nnodes += 1;            /* track number allocated */
   levels[nlevel - 1] += 1;    /* track distribution */
#endif
   temp-&gt;korl.key = nkey;  /* NOTE!!! no error checking */
   return(temp);
}

int randomlevel();
{
   int slrandom();
   int newlevel;

/*
 *  NMAX/DMAX constitute a ratio n/d, such that (d-n)/d
 *  of all nodes will have only 1 pointer and n/d of all
 *  nodes with pointers at any level N will also have
 *  pointers at level N+1
 */

   newlevel = 1;
   while(slrandom(DMAX) &lt; NMAX)
      newlevel += 1;
   if(newlevel &gt; DMAX)
      return(DMAX);
   else
      return(newlevel);
}
</pre>
</BODY>
</HTML>
