


<HTML>
<HEAD>

<TITLE>February 1991/Standard C</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocfeb.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Standard C<A name="0066_0037"><A name="0066_0037"></font></h2><P>
<h3 align="center"><A name="0066_0000"><A name="0066_0000">The Header &lt;limits.h&gt;</h3><P>
<h3 align="center"><font color="#800000">P.J. Plauger</font></h3><hr><blockquote><P>
<P><i><A name="0066_0000"><A name="0066_0000">P.J. Plauger is senior editor of The C Users Journal. He is secretary of the ANSI C standards committee, X3J11, and convenor of the ISO C standards committee, WG14. His latest book is Standard C, which he co-authored with Jim Brodie. You can reach him at pjp@plauger.uunet.</i></P><P>
<h4><FONT COLOR="#000080"><A name="0066_0038">History<A name="0066_0038"></FONT></h4></P>
One of the first attempts at standardizing any part of the C programming languages began in 1980. It was begun by an organization then called /usr/group, now called Usenix. As the first organization founded to promote UNIX commercially, /usr/group had a stake in vendor-independent standards. Technical developments couldn't simply go off in all directions, nor could they be dictated solely by AT&amp;T. Either way, it was hard to maintain an open marketplace.<P>
So /usr/group began the process of defining what it means to call a system UNIX or UNIX-like. They formed a standards committee that focused, at least initially, on the C programming environment. That's where nearly all applications were written, anyway. The goal was to describe a set of C functions that you could expect to find in any UNIX-compatible system. The descriptions, of course, had to be independent of any particular architecture.<P>
A chunk of what /usr/group described was the set of C-callable functions that let you access UNIX system services. An even larger chunk, however, was the set of functions common to <I>all</I> C environments. That larger chunk served as the basis for the language portion of the C Standard. Since Kernighan and Ritchie chose not to discuss the library except in passing, the /usr/group standard was of immense help to X3J11. It saved us many months, possibly even years, of additionl labor.<P>
As an aside, the /usr/group effort served another very useful purpose. IEEE committee 1003 was formed to turn this industry product into an official standard. The IEEE group turned over responsibility for the system-independent functions to X3J11 and focused on the UNIX-specific portion. You know the resultant standard today as IEEE 1003.1, a.k.a. POSIX.<P>
Part of building an architecture-independent description is to recognize what changes across machines. You want to avoid any unnecessary differences, to be sure. The rest you want to identify and to circumscribe. Some critical value might change when you move an application program to another flavor of UNIX. So you give it a name. You lay down rules for testing the named value in a program. And you define the limits that the value can range between.<P>
A long-standing tradition in C is that scalar data types are represented in ways natural to each machine. The fundamental type <I>int</I> is particularly elastic. It wants to be a size that supports efficient computation, at least within broad limits. That may be great for efficiency, but it's a real nuisance for portability.<P>
/usr/group invented the standard header <I>&lt;limits.h&gt;</I> to capture many important properties that can change across architectures. It so happens that this header deals exclusively with the ranges of values of integer types. That was all that /usr/group chose to address. When X3J11 decided to add similar data on the floating types, we elected not to overwhelm the existing contents of <I>&lt;limits.h&gt;</I>. Instead, we added the standard header <I>&lt;float.h&gt;</I>. Perhaps we should have renamed the existing standard header <I>&lt;integer.h&gt;</I>, but we didn't. Tidiness yielded to historical continuity.<P>
<h4><FONT COLOR="#000080"><A name="0066_0039">Using <B><I>&lt;limits.h&gt;</I><A name="0066_0039"></B></FONT></h4></P>
You can use <I>&lt;limits.h&gt;</I> one of two ways. The simpler way assures that you do not produce a silly program. Let's say, for example, that you want to represent some signed data that ranges in value between <I>VAL_MIN</I> and <I>VAL_MAX</I>. You can keep the program from compiling incorrectly by including in the text:<P>
<pre>#include &lt;assert.h&gt;
#include &lt;limits.h&gt;
#if VAL_MIN &lt; INT_MIN \
   || INT_MAX &lt; VAL_MAX
#error values out of range
#endif</pre>
You can safely store the data in variables declared with type <I>int</I> if the <I>error</I> directive is skipped.<P>
A more elaborate way to use <I>&lt;limits.h&gt;</I> is to control the choice of types in a program. You can alter the example above to read:<P>
<pre>#include &lt;assert.h&gt;
#include &lt;limits.h&gt;
#if VAL_MIN &lt; LONG_MIN \
   || LONG_MAX &lt; VAL_MAX
typedef double Val_t;
#elif VAL_MIN &lt; INT_MIN \
   || INT_MAX &lt; VAL_MAX
typedef long Val_t;
#else
typedef int Val_t;
#endif</pre>
You then declare all variables that must hold this range of values as having type <I>Val_t</I>. The program will use the computationally most efficient type for a given target environment.<P>
The presence of <I>&lt;limits.h&gt;</I> is also designed to discourage an old programming trick that is extremely non-portable. Some programs attempted to sniff out the properties of the target environment by writing tricky <I>if</I> directives, as in:<P>
<pre>#if (-1 + 0x0) &gt;&gt; 1 &gt; 0x7fff
/* must have ints greater than 16 bits */
.....
#endif</pre>
This code assumes that whatever arithmetic the preprocessor performs is the same as what occurs in the execution environment. Those of us who deal heavily with cross compilers know well that the translation environment can differ markedly from the execution environment. For tricks like this one to work, the C Standard would have to require that the translator mimic the execution environment very closely. And compiler families with a common front end would have to adapt translation-time arithmetic to suit the target.<P>
X3J11 discussed such requirements at length. In the end, we decided that the preprocessor was not the creature to burden with such stringent requirements. The translator must closely model the execution environment in many ways, to be sure. It must compute constant expressions <I></I>&#151; the things you use to initialize static data objects, for example <I></I>&#151; to at least as wide a range and precision as the target. But it can largely define its own internal environment for the arithmetic within <I>if</I> and <I>elif</I> directives.<P>
So to test the execution environment you can't do experiments on the preprocessor. You must include <I>&lt;limits.h&gt;</I> and test the values of the macros it provides.<P>
<h4><FONT COLOR="#000080"><A name="0066_003A">What The Standard Says<A name="0066_003A"></FONT></h4></P>
Here is what the Standard has to say about <I>&lt;limits.h&gt;</I>. The library portion contains only a brief reference:<P>
<h4><FONT COLOR="#000080"><A name="0066_003B">4.1.4 Limits <B><I>&lt;float.h&gt;</I></B> and <B><I>&lt;limits.h&gt;</I><A name="0066_003B"></B></FONT></h4></P>
The headers <I>&lt;float.h&gt;</I> and <I>&lt;limits.h&gt;</I> define several macros that expand to various limits and parameters.<P>
The macros, their meanings, and the constraints (or restrictions) on their values are listed in 2.2.4.2. <I>[end of extract]</I><P>
That's it. For the meat, you have to go back to the environment section:<P>
<h4><FONT COLOR="#000080"><A name="0066_003C">2.2.4.2 Numerical Limits<A name="0066_003C"></FONT></h4></P>
A conforming implementation shall document all the limits specified in this section, which shall be specified in the headers <I>&lt;limits.h&gt;</I> and <I>&lt;float.h&gt;</I>.<P>
<h4><FONT COLOR="#000080"><A name="0066_003D">2.2.4.2.1 Sizes of Integral Types<A name="0066_003D"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0066_003E"><I>&lt;limits.h&gt;</I><A name="0066_003E"></FONT></h4></P>
The values given below shall be replaced by constant expressions suitable for use in <I>#if</I> preprocessing directives. Moreover, except for <I>CHAR_BIT</I> and <I>MB_LEN_MAX</I>, the following shall be replaced by expressions that have the same type as would an expression that is an object of the corresponding type converted according to the integral promotions. Their implementation-defined values shall be equal or greater in magnitude (absolute value) to those shown, with the same sign.<P>
<UL><li>number of bits for smallest object that is not a bit-field (byte)</li>
<pre>   <I>CHAR_BIT         8</I></pre>
<li>minimum value for an object of type <I>signed char</I></li>
<pre>   <I>SCHAR_MIN     -127</I></pre>
<li>maximum value for an object of type <I>signed char</I></li>
<pre>   <I>SCHAR_MAX     +127</I></pre>
<li>maximum value for an object of type <I>unsigned char</I></li>
<pre>   <I>UCHAR_MAX      255</I></pre>
<li>minimum value for an object of type <I>char</I></li>
<pre>   <I>CHAR_MIN       see below</I></pre>
<li>maximum value for an object of type <I>char</I></li>
<pre>   <I>CHAR_MAX       see below</I></pre>
<li>maximum number of bytes in a multibyte character, for any supported locale</li>
<pre>   <I>MB_LEN_MAX     1</I></pre>
<li>minimum value for an object of type <I>short</I> <I>int</I></li>
<pre>   <I>SHRT_MIN       -32767</I></pre>
<li>maximum value for an object of type <I>short</I> <I>int</I></li>
<pre>   <I>SHRT_MAX       +32767</I></pre>
<li>maximum value for an object of type <I>unsigned short</I> <I>int</I></li>
<pre>   <I>USHRT_MAX      65535</I></pre>
<li>minimum value for an object of type <I>int</I></li>
<pre>   <I>INT_MIN       -32767</I></pre>
<li>maximum value for an object of type <I>int</I></li>
<pre>   <I>INT_MAX       +32767</I></pre>
<li>maximum value for an object of type <I>unsigned</I> <I>int</I></li>
<pre>   <I>UINT_MAX      65535</I></pre>
<li>minimum value for an object of type <I>long</I> <I>int</I></li>
<pre>   <I>LONG_MIN      -2147483647</I></pre>
<li>maximum value for an object of type <I>long</I> <I>int</I></li>
<pre>   <I>LONG_MAX      +2147483647</I></pre>
<li>maximum value for an object of type <I>unsigned long</I> <I>int</I></li>
<pre>   <I>ULONG_MAX     4294967295</I></pre></UL>
If the value of an object of type <I>char</I> is treated as a signed integer when used in an expression, the value of <I>CHAR_MIN</I> shall be the same as that of <I>SCHAR_MIN</I> and the value of <I>CHAR_MAX</I> shall be the same as that of <I>SCHAR_MAX</I>. Otherwise, the value of <I>CHAR_MIN</I> shall be <I>0</I> and the value of <I>CHAR_MAX</I> shall be the same as that of <I>UCHAR_MAX</I>.9<P>
Footnote<P>
9. See 3.1.2.5 <I>[end of extract]</I><P>
The only significant addition to this header from the days of /usr/group is the addition of <I>MB_LEN_MAX</I>. I will discuss multibyte characters at length in a future column.<P>
Several people reviewing the Standard complained that names such as <I>USHRT_MAX</I> are barbaric. It is silly to omit a single vowel in the interest of terseness, particularly in this age of 31-character (or longer) names. I can only plead, on behalf of X3Jll, the same excuse we gave for not changing the name of the header itself. We couldn't justify abandoning prior art just to be a bit tidier. Besides, fixing such barbarisms only in this place is like eating one peanut.<P>
<h4><FONT COLOR="#000080"><A name="0066_003F">Implementing <B><I>&lt;limits.h&gt;</I><A name="0066_003F"></B></FONT></h4></P>
The only code you have to provide for this header is the header itself. All the macros defined in <I>&lt;limits.h&gt;</I> are testable within an <I>if</I> directive and are unlikely to change during execution. (The same is <I>not</I> true of most of the macros defined in <I>&lt;float.h&gt;</I>.)<P>
Most modern computers have eight-bit bytes, two-byte <I>shorts</I>, and four-byte <I>longs</I>. There are several common variations on this principal theme:<P>
<UL><li>An <I>int</I> is either two or four bytes.</li>
<li>A <I>char</I> has the same range of values as either <I>signed</I> <I>char</I> or <I>unsigned char</I>.</li>
<li>Signed values are encoded most frequently in <I>2</I>'s complement, which has only one form of zero but one negative value that has no corresponding positive value. Less common encodings are <I>1</I>'s complement and signed magnitude, which have two forms of zero but no extra negative value.</li>
<li>The number of bytes for a single multibyte character can be any value greater than zero.</li></UL>
I found it convenient, therefore, to write a version of <I>&lt;limits.h&gt;</I> that expands to any of these common forms. It includes, as needed, a configuration file called <I>&lt;yvals.h&gt;</I>. Among other things, this file defines the macros:<P>
<UL><li><I>_ILONG</I> <I></I>&#151; nonzero if a <I>long</I> has four bytes</li>
<li><I>_CSIGN</I> <I></I>&#151; nonzero if a <I>char</I> is signed</li>
<li><I>_2C</I> <I></I>&#151; 1 if the encoding is 2's complement, else 0</li>
<li><I>_MBMAX </I><I></I>&#151; the worst-case length of a single multibyte character.</li></UL>
<A href="list1.htm">Listing 1</a>
shows the code for <I>&lt;limits.h&gt;</I>.<P>
The use of the macro <I>_2C</I> obscures an important subtlety. On a 2's-complement machine, you cannot simply write the obvious value for <I>INT_MIN</I>. Why not? On a 16-bit machine, for example, the sequence of characters <I>-32768</I> parses as two tokens <I></I>&#151; a minus sign and the integer constant with value 32,768. The latter has type <I>long</I> because it is too large to represent properly as type <I>int</I>. Negating this value doesn't change its type. The Standard requires, however, that <I>INT_MIN</I> have type <I>int</I>. Otherwise, you can be astonished by the behavior of a statement as innocent looking as:<P>
<pre>printf("range is from %d to %d\n",
   INT_MIN, INT_MAX);</pre>
The only safe thing is to sneak up on the value by writing an expression such as <I>(-32767-1)</I>. Given the way I chose to parametrize <I>&lt;limits.h&gt;</I>, you get this trickery for free.<P>
One other subtlety should not be overlooked. I made the point earlier that preprocessor arithmetic need not model that of the execution environment. You can, in principle, compile on a host with 32-bit <I>longs</I> for a target with 36-bit <I>longs</I>. Nevertheless, the host is obliged to get the values in <I>&lt;limits.h&gt;</I> right. That means that it must do preprocessor arithmetic to at least 36 bits. The latitude spelled out for implementors by X3J11 isn't so broad after all.<P>
<h4><FONT COLOR="#000080"><A name="0066_0040">Testing <B><I>&lt;limits.h&gt;</I><A name="0066_0040"></B></FONT></h4></P>
<A href="list2.htm">Listing 2</a>
is a brief sanity check you can run on <I>&lt;limits.h&gt;</I>. It is by no means exhaustive, but it does tell you whether the header is basically sane.<P>
Note that all the action occurs at translation time. That's because all the macros must be usable within <I>if</I> directives. If this test compiles, it will surely run, print its success message, and exit with happy status.<P>
You might try this test on your favorite compiler. I can only comment that I have known it to fail on some popular offerings.<P>

<h4><a href="../../../source/1991/feb91/plauger.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
