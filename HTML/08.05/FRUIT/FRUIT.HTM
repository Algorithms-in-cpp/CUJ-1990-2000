


<HTML>
<HEAD>

<TITLE>May 1990/A Pseudo-Random Number Generator</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmay.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Number Crunching</FONT></H2>

<hr><h2 align="center"><font color="#800000">A Pseudo-Random Number Generator<A name="00F4_0088"><A name="00F4_0088"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="00F4_0000"><A name="00F4_0000">Robert Fruit</font></h3><hr><blockquote><P>
<P><i><A name="00F4_0000"><A name="00F4_0000">Robert Fruit is a graduate of the Illinois Institute of Technology and is president of Simulation Rule, which designs and builds actuarial computer system for microcomputers. He has worked in the actuarial field for 20 years, most of that time spent on computer systems for actuaries. He can be contacted at PO Box 295, Clarendon, IL 60514.</i></P><P>
The linear congruent method for creating pseudo-random numbers dominates modern random number generation for three reasons. First, it can create good random number series. Second, it makes efficient use of limited computer resources. Third, its mathematical requirements are a particularly good match to the way electronic computers do arithmetic.<P>
Forty years of mathematics research into the linear congruential method guarantees that if properly used, it will create good random number sequences. The theory also predicts that it is easy to create bad random number generators using the linear congruent method (LCM). In fact, one can create bad LCM random number generators more easily than good ones.<P>
<h4><FONT COLOR="#000080"><A name="00F4_0089">Linear Congruence<A name="00F4_0089"></FONT></h4></P>
The classic description of a congruent system is the hours on an analog clock (the ones with the hands). The clock hands point out the hours, <I>1</I>, <I>2</I>, <I>3</I>, ..., <I>12</I>. After <I>12</I> the next number is <I>1</I>, and the pattern keeps repeating. The classic description says this is modulo <I>12</I>. (Modulo is a special number in congruent mathematics which defines the length of a pattern).</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
This classic definition is wrong about almost everything, except that the hours on a clock are modulo <I>12</I>. The clock does not follow a classic congruent pattern. For modulo <I>12</I>, the numbers would go from <I>0</I> to <I>11</I> (not <I>1</I> to <I>12</I>). One of the first rules of congruent mathematics is that the numbers always stop one short of the modulo number.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The minutes on a clock do follow the correct pattern for a congruent system. If the minute hand is at 59 minutes right now, one minute from now the minute hand will be at zero minutes. The minutes are a congruent system with a modulo value of 60.<P>
Congruent mathematics has its own writing style. Using the minutes example above, the style is<P>
<pre>0 = ( 59 + 1 ) mod 60</pre>
which, in general, would be written as<P>
<pre>A = B mod M
A, B, and M are integers.</pre>
This statement reads "<I>A</I> is congruent to <I>B</I> modulo <I>M</I>". From the early rules of congruent mathematics, <I>A</I> must be between <I>0</I> and <I>M-1</I>. There is no like restriction on what integral value <I>B</I> may have.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
A linear congruent function is nothing more than<P>
<pre>x' = ( A * x + C ) mod M</pre>
It may be little hard to see how this works without an example. Let <I>A = 5, C = 3</I> and <I>M = 8</I>. Then if <I>x = 0</I> initially:</FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>x  5*x+3  mod 8
---------------
0      3      3
3     18      2
2     13      5
5     28      4
4     23      7
7     38      6
6     33      1
1      8      0</pre>
This example shows all the parts of a linear congruent random number generator. An initial seed is chosen (zero in the example). The seed passes through the linear formula ( <I>5*x+3</I> in the example), and is "confined" by the modulo operation (<I>mod 8</I>). Each result (<I>x'</I>) becomes the next value (<I>x</I>) to be fed through the process. The <I>mod 8</I> column represents the first eight random numbers created by this process.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
In this example, the generator produced every value from <I>0</I> to <I>M-1</I>. If the same linear formula were "confined" by a <I>mod 7</I> operation, it would create only five values:</FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>3, 4, 2, 6, 5, 0.</pre>
And if this new generator were seeded with a one, it would generate:<P>
<pre>1, 1, 1, ...</pre>
There are two lessons here. First, the longest run any linear congruent system can have is <I>M</I>, each number from <I>0</I> to <I>M-1</I> appearing once. Second, the values for <I>A, C</I>, and <I>M</I> must be selected carefully if one is to achieve the longest possible run length.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Donald Knuth in his book, <I>The Art of Computer Programming volume 2 / Seminumerical Algorithms</I>, has the most often quoted set of rules for choosing the <I>A</I> and <I>C</I>. These rules guarantee that the run length of the linear congruent series will be <I>M</I> &#151; that is, every value from <I>0</I> to <I>M-1</I> will appear once. The rules are:</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<li><I>C</I> must be relatively prime to <I>M</I>.</FONT></FONT></FONT></FONT></li><P>
<li><I>A-1</I> must be a multiple of every prime factor of <I>M</I>.</FONT></FONT></FONT></FONT></li><P>
<li><I>A-1</I> is a multiple of <I>4</I>, if <I>M</I> is a multiple of <I>4</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></li><P>
For <I>C</I> and <I>M</I> to be relatively prime, as required by the first rule, they may share only the divisor one. The numbers <I>12</I> and <I>19</I> are relatively prime because one is the only divisor they have in common. The numbers <I>15</I> and <I>18</I> are not relatively prime because one and three are their common divisors.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
To meet this requirement, first find all the prime divisors of <I>M</I> and then make <I>C</I> a prime number that is not a prime factor of <I>M</I>.</FONT></FONT></FONT></FONT></FONT></FONT><P>
To apply the second rule you must break <I>M</I> into its prime factors. If <I>M</I> is <I>63</I>, its prime factors are <I>3</I> squared and <I>7</I>. According to the second rule, <I>A-1</I> must be a multiple of every prime of <I>M</I>. So, <I>A</I> can be any of three values:</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>factors of A-1  A - 1        A
----------------------------------
      3 * 7      21          22
    2 * 3 * 7    42          43
    3 * 3 * 7    63    64 mod 63 = 1</pre>
The values <I>1, 22,</I> and <I>43</I> are the only values for <I>A</I> that will produce the maximum run length of <I>63</I>. Every other value of <I>A</I> will have shorter run lengths. Notice that <I>42</I> has a prime factor that is not a prime factor of <I>M</I>. That is fine as long as <I>42</I> also contains at least one of every prime of <I>M</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The third rule is a special case of the second. If M is divisible by four, then <I>A-1</I> must be divisible by four. For example, if <I>M =  56</I> (prime factors two cubed and seven), the only values for <I>A</I> that will have the maximum run length are <I>1</I> and <I>29</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>factors of A-1   A - 1         A
----------------------------------
    2 * 2 * 7     28          29
  2 * 2 * 2 * 7   56    57 mod 56 = 1</pre>
Notice that <I>2 * 7 ( A = 15 )</I> is not in the list. The second rule would include this factor, but the additional restriction imposed by the third rule excludes it.</FONT></FONT><P>
Rule 3 can complicate the selection when two can be part of <I> A-1</I>'s factors. For example, if <I>M = 18</I> (prime factors <I>2</I> and <I>3</I> squared) here are <I>3</I> values for <I>A: 1, 7</I>, and <I>13</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>factors of A-1  A - 1        A
----------------------------------
      2 * 3       6          7
    2 * 2 * 3    12         13
    2 * 3 * 3    18    19 mod 18 = 1</pre>
In this case <I>A = 7</I> will have the maximum run length since <I>18</I> is not divisible by four. Only the second rule applies in this case.</FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="00F4_008A">Choosing M<A name="00F4_008A"></FONT></h4></P>
For electronic computers, if <I>M</I> is equal to the word size of the computer's arithmetic unit, the modulo operation will be performed automatically for simple multiplication and addition &#151; the high order bits lost during arithmetic overflow are the same bits that would be removed by the modulo operation.</FONT></FONT><P>
Generally <I>M</I> should be as large as possible, because it determines how long a linear congruent random number generator can go without repeating its pattern.</FONT></FONT><P>
The factors of <I>M</I> will lead to other patterns that must be carefully watched. For example, the random number generator</FONT></FONT><P>
<pre>#define RAND( seed) (seed = \
   ((( seed * 41 ) + 13 ) % 100 ))</pre>
produces the 100 values in <A href="fig1.htm">Figure 1</a>.
 Notice how the one's digits of all these numbers are all the same for each column.<P>
Similar patterns can occur in generators with a larger <I>M</I>. Consider the following <I>#define</I></FONT></FONT></FONT><P>
<pre>// all items must be longs

#define RAND( seed ) ( seed = \
  ((( seed * 101L ) + 13L ) % 1000L ))</pre>
<A href="fig2.htm">Figure 2</a>
gives the upper right corner of the first three pages of the 3-dimensional array (10 x 10 x 10) of its output. Notice that not only is the column pattern from <A href="fig1.htm">Figure 1</a>
preserved but the 10 digit repeats in the same place on each page.<P>
These patterns are characteristic of linear congruent random number generators and are determined by the factors of <I>M</I>. In particular, you should avoid <I>M</I>'s that are perfect squares or cubes.</FONT></FONT></FONT></FONT><P>
Thus, selecting <I>M</I> is fairly complicated: you must choose a number that avoids all undesirable patterns and still produces the maximum run lengths.</FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="00F4_008B">Selecting A<A name="00F4_008B"></FONT></h4></P>
<I>A</I> must also be selected with care. It is not enough that the <I>A</I> be selected for the greatest run length of <I>M</I>. For example,</FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>#define RAND( seed ) ( seed = \
    ( ( seed + 1 ) % M ) )</pre>
always produces the maximum run length, but simply counts through the integers:<P>
<pre>0, 1, 2, 3, ..., M-1, 0, 1, ...</pre>
Run length isn't enough; the order of the numbers is also important.<P>
The <I>A</I> must be selected so that a large amount of mixing occurs between random numbers. To get good mixing, <I>A</I> must meet two tests. First, <I>A</I> must be at least as large as the square root of <I>M</I>. LCMs work much like the carnival number guessing wheel in <A href="fig3.htm">Figure 3</a>.
 Choosing a small <I>A</I> is like giving the wheel a small push &#151; so small that the wheel might not even make one complete revolution. Choosing a large <I>A</I> is like giving the wheel a large push &#151; the wheel will turn several times before it slows to a stop. When the wheel makes several revolutions it is difficult to guess, at the time the wheel is pushed, where it will stop.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
In addition to being large, <I>A</I> must also have a characteristic that makes the next value appear especially random. Knuth suggests calculating a value he called potency. The potency for <I>A</I> is <I>s</I>, where <I>s</I> is the smallest integer to satisfy</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>(A-1)<SUP>s</SUP> = 0 mod M</pre>
Every <I>A</I> that meets the three conditions given earlier will have a solution for the potency equation. <A href="list1.htm">Listing 1</a>
is a program that will calculate the potency using one of two functions. The first function requires the modulo size which must be less than the size of an <I>unsigned long</I>. The second function assumes the modulo is the size of an <I>unsigned long</I>.</FONT></FONT></FONT></FONT></FONT></FONT><P>
For <I>M = 32</I>, some <I>A</I>s have a potency of one (<I>1</I>, <I>9</I>, <I>17</I>, and <I>25</I>). Two of these are shown in <A href="fig4.htm">Figure 4</a>, <I>1</I> and <I>9</I>. Some <I>A</I>s have a potency of two (<I>5</I>, <I>13</I>,<I> 21</I>, and <I>29</I>). Two of these, <I>5</I> and <I>13</I>, are shown in <A href="fig5.htm">Figure 5</a>.
</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<A href="fig4.htm">Figure 4</a>
and <A href="fig5.htm">Figure 5</a>
use interpolation differences to determine the next number in the sequence. When <I>A=1</I>, the results differ by a constant relationship, when <I>A=9</I>, by a linear relationship. It turns out that <I>A=1</I> is a special case of the linear relationship (the multiplier of the linear term is <I>0</I>). Obviously higher values for <I>A</I> yield greater mixing. <A href="fig5.htm">Figure 5</a>
shows what happens when larger values are used. Both of these random sequences need a quadratic formula to determine the next item in the sequence. It does not take much effort to determine that the quadratic results in <A href="fig5.htm">Figure 5</a>
are significantly better (more random-like) than are the results in <A href="fig4.htm">Figure 4</a>.
 Remember that these sequences are created with a linear formula &#151; it is the relationship between that linear formula and congruent arithmetic that gives the effect of higher powered functions.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Potency is a measure of mixing. The higher the potency, the better the mixing. Knuth recommends a potency of at least three, and he mentions that others recommend a potency of at least four.<P>
<h4><FONT COLOR="#000080"><A name="00F4_008C">Applying The Rules<A name="00F4_008C"></FONT></h4></P>
To illustrate how the criteria for <I>M, C</I> and <I>A</I> interact, I'll use them to select values for a "real" LCM random number generator.</FONT></FONT></FONT></FONT><P>
First select an <I>M</I>. Begin by checking some modulo calculations with a pocket calculator. Let <I>M = 769,387, A = 7,283</I>, and <I>C = 853</I>. Start with <I>x0 = 0</I></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre> x1 = ( 7,283 * 0 + 853 ) mod 769,387 = 853
 x2 = ( 7,283 * 853 + 853 ) mod 769,387 = 57,303
 x3 = ( 7,283 * 57,303 + 853 ) mod 769,387 = error</pre>
An eight-digit pocket calculator will overflow on that last calculation, loosing its least significant digits. Without the least significant digits, it is impossible to calculate the modulo value.<P>
A computer has the same problem. If the calculations are attempted using standard mathematics, a similar overflow will occur. Thus <I>M</I><I><SUP>2</I></SUP> can never be greater than the word size of the computer's arithmetic unit. For <I>unsigned int</I> with Microsoft's QuickC the <I>M</I><I><SUP>2</I></SUP> limit is <I>65,536</I> and <I>M</I> can not be larger than <I>256</I> &#151; an unacceptable restriction for <I>M</I>. Using <I>unsigned long int</I> instead makes the limit on <I>M 65,536</I> &#151; still not a great situation.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
If you are unwilling to write your own arithmetic routines, even ones in C, there is another way out. Earlier it was mentioned that the word size for the arithmetic unit would do modulo calculation automatically for multiplication and addition. Relying on this "automatic" modulo would let <I>unsigned</I> <I>int</I> accomodate <I>M</I> values to <I>65,536</I> &#151; still too small &#151; and <I>unsigned long int</I> acccomodate <I>M</I> values to <I>4,294,967,296</I> &#151; an acceptable size.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Choosing this <I>M</I>, though, implies a compromise &#151; many patterns, based on the powers of <I>2</I>, will be created, but we'll get the needed run length.</FONT></FONT></FONT></FONT><P>
Now we select <I>A</I>. Since <I>M</I> only has <I>2</I> as a prime factor, and is divisible by <I>4</I>, both rules 2 and 3 apply. <I>A-1</I> must be large, but still fit within a <I>unsigned long int</I>, say <I>2</I><I><SUP>20</I></SUP>. Large <I>A</I>s like this have a low potency, so a small <I>A-1</I> with a large potency is also needed, say <I>2</I><I><SUP>3</I></SUP>. To keep from having too simple a multiplier, it is a good idea to also include another power of <I>2</I> between the <I>2</I> already selected, like <I>2</I><I><SUP>13</I></SUP>. Combining these three numbers, and adding <I>1</I> gives:</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>A = 2<SUP>20</SUP> + 2<SUP>13</SUP> + 2<SUP>3</SUP> + 1 = 1,056,777</pre>
Because we included <I>2</I><I><SUP>3</I></SUP>, the potency of this combined number is <I>10</I>.</FONT></FONT></FONT></FONT><P>
Now select <I>C</I>, preferably a value larger than the square root of <I>M</I>. The only requirement is that <I>C</I> be relatively prime to <I>M. C = 2</I><I><SUP>18</I></SUP><I> + 1</I> must be prime to <I>M</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
This makes the definition for this random number generator:<P>
<pre>#define RAND( seed ) ( seed = \
  ( ( 1056777 * seed ) + 262145 ) )</pre>
Because <I>M</I> is the word size <I>unsigned long</I>, there is no % operator in this definition; the modulo operation will occur automatically.</FONT></FONT></FONT></FONT><P>
<A href="fig6.htm">Figure 6</a>
shows the first 100 numbers created by this random number generator. These numbers are not like the digits found in the random number books like <I>1,000,000 Random Digits</I>. In books like that, each digit occurs randomly. A random number generator creates a sequence of numbers that have the wanted random behavior. Looking at one number does not make it possible to reasonably guess what number in the sequence will be next.<P>
That distinction between the random digits found in a book or table of random digits, and a random sequence of numbers, is important. In a table of random digits, if some random three-digit numbers are wanted, just start selecting three-digit triples anywhere, and random three-digit numbers will be created. With a sequence of random numbers, it is necessary to convert from one sequence into another. This is often done by first converting the random numbers into numbers between 0 and 1. Those random numbers between <I>0</I> and <I>1</I> are then converted into random three-digit numbers.</FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="00F4_008D">Conclusion<A name="00F4_008D"></FONT></h4></P>
One thing should be clear now: creating a good random number generator is not a random process. Hard work goes into choosing an <I>M</I> that best balances the hardware with the need to suppress patterns and have long run lengths &#151; and to choose an <I>A</I> that works best with that <I>M</I>, suppresses unwanted patterns, and has great mixing.</FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4>Bibliography</FONT></h4></P>
<I>The Art of Computer Programming </I>&#151;<I> volume 2 / Seminumerical Algorithms, Donald Knuth, Addison-Wesley Publishing Company, 1969.</I><P>
<I>Algorithms</I>, Robert Sedgewick, Addison-Wesley Publishing Company, 1984.<P>
<I>C.R.C Standard Mathematical Tables, twelfth edition</I>, Chemical Rubber Publishing Company, 1963.<P>

<h4><a href="../../../source/1990/may90/fruit.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
