


<HTML>
<HEAD>

<TITLE>May 1990/Complex Arithmetic And Matrices In C</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmay.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Number Crunching</FONT></H2>

<hr><h2 align="center"><font color="#800000">Complex Arithmetic And Matrices In C<A name="00F2_0086"><A name="00F2_0086"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="00F2_0000"><A name="00F2_0000">Louis Baker</font></h3><hr><blockquote><P>
<P><i><A name="00F2_0000"><A name="00F2_0000">Louis Baker has a Ph.D. in astronomy and has written books with code in C and Ada for McGraw-Hill. He may be reached at Mission Research Corp., 1720 Randolph SE, Albuquerque NM 87106.</i></P><P>
FORTRAN has long been the language of choice in the scientific and engineering community. (The name FORTRAN &#151; short for FORmula TRANslator &#151; betrays its origins.) Over the years, FORTRAN has been extended to meet the needs of its user community. Today's FORTRANs routinely handle complex arithmetic, multi-dimensional arrays, and sophisticated graphics.<P>
C, on the other hand, has evolved to support its user base, systems programmers who benefit from C's easy access to low-level constructs such as register variables and absolute addresses. Unfortunately, there doesn't seem to be much effort to incorporate features like complex numbers into the ANSI C standard. Most FORTRAN programmers also decry C's inability to pass a subroutine both the dimensions and values of a multi-dimensional array. Yet, there are compelling reasons for writing "engineering" code in C, especially for real-time control or data acquisition applications. C, after all, makes it easy to access ports, take advantage of DMA, and so on.<P>
In this article I'll show you one approach, namely the use of header files, that adds complex number and matrix support to your C programs.<P>
<h4><FONT COLOR="#000080"><A name="00F2_0087">Roots<A name="00F2_0087"></FONT></h4></P>
The header files that I'll discuss here were originally developed for a book recently published by McGraw-Hill, <I>C Tools for Scientists and Engineers</I> <a href="#note1">[1]</a>. I found them quite useful for the problems addressed in that book.<P>
"Why bother with C?" you may ask, evoking a mental image of Louis Baker as a Neanderthal. "Why not just use C++ and make things a lot simpler?" Although C++ provides no more support for complex numbers or multi-dimensional matrices than C does, you can at least define classes of objects such as complex numbers or matrices. In fact, new versions of C++ that support multiple inheritance make it relatively easy to define complex matrices in terms of other C++ definitions. However, C++ is less widely available than C and is even less standardized. One of C's claims to fame is its portability, but today's C++s don't insure that a port to another host or compiler will work the same way. But yes, C++ is certainly a viable option.<P>
<h4><FONT COLOR="#000080"><A name="00F2_0088">Complex Numbers For The Uninitiated<A name="00F2_0088"></FONT></h4></P>
Complex numbers are generally represented in the form<P>
<pre>x + iy</pre>
where <I>i</I> is the square root of <I>-1</I>. The <I>x</I> is usually called the "real" part of the complex number and <I>iy</I> the "imaginary" part. Complex numbers crop up in mathematics, for example, as the roots of polynomial equations. Every polynomial has a complex root. This means that you can plug the complex root into the polynomial for <I>x</I> and make the polynomial evaluate to zero. Remember factoring polynomials like <I>x2 - 4x + 4</I> into <I>(x - 2)(x - 2)</I>? Factoring represented an easy method for solving polynomials. Factoring a higher order polynomial <I>f(x)</I> often involves rewriting it as <I>(x-r)g(x)</I> where <I>r</I> is a root and <I>g(x)</I> is a polynomial of lower degree. However, the root <I>r</I> may very well be a complex number &#151; not just a "real" number such as 4.67.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Complex numbers appear in engineering mostly in equations that use the complex exponential. The relationship<P>
<pre>e<SUP>(ix)</SUP> = cos(x) + i sin (x)</pre>
where <I>e</I> is 2.718281828459045... is often used to analyze AC circuits and other systems with periodic behavior. A quick glance at the equation should convince you that it enables the cosine function to be written as the real part of <I>e</I><I><SUP>(ix)</I></SUP>. So what? Well, it's often simpler to use the properties of exponents to manipulate equations than to rely on trigonometric functions.</FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="00F2_0089">Complex Arithmetic In C<A name="00F2_0089"></FONT></h4></P>
The rules for adding, subtracting, multiplying, and dividing complex numbers can be found in most elementary algebra texts. Examine <A href="list1.htm">Listing 1</a>
to see how you might write a header file to define functions that perform these common operations on complex numbers. Note that addition and subtraction of complex numbers just requires that you treat the real and complex parts of the numbers separately. Multiplication and division, as you might expect, are a bit more involved. The product<P>
<pre>(a+bi)(c+di) = (ac-bd)+(ad+bc)i</pre>
for example, can be implemented either in a straightforward manner by <I>CMULT()</I> or in a more involved manner by <I>CMLT()</I>. The latter saves a multiplication, but the price is more additions and more storage of intermediate results. Actually, life's even more complicated than that. On some machines, particularly those that have floating-point operations performed by software emulation, <I>CMLT()</I> may very well be faster than <I>CMULT()</I>. But even if your system has a math coprocessor, where multiplication is only slightly more costly in time than addition, <I>CMULT()</I> should still be faster than <I>CMLT()</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
My method for determining the magnitude or "absolute value" of a complex number is also straightforward:<P>
<pre>|x+iy| = sqrt(x<SUP>2</SUP>+y<SUP>2</SUP>).</pre>
Some packages minimize the possibility of roundoff error by calculating this as<P>
<pre>|x+iy| = a sqrt( 1 +(b/a)<SUP>2</SUP>)</pre>
where<P>
<pre>a = max(|x|,|y|)</pre>
and<P>
<pre>b = min (|x|, |y|)</pre>
<A href="list2.htm">Listing 2</a>
shows a C program that uses the header file definitions to calculate the Kelvin functions from approximations presented in the <I>Handbook of Mathematical Functions</I> <a href="#note3">[3]</a>. The Kelvin functions are Bessel functions for which the argument is a complex number of the form <I>sz</I>, where <I>z</I> is real and <I>s</I> is a square root of <I>i</I>. The imaginary unit <I>i</I> has two square roots, <I>(1+i)/sqrt(2)</I> and <I>(1-i)/sqrt(2)</I>. The Kelvin functions are useful, for example, in analyzing the distribution of alternating current within a wire. <A href="list2.htm">Listing 2</a>
also contains two auxiliary routines, <I>printc()</I>, for printing complex numbers, and <I>cexp()</I>, for finding <I>e</I><I><SUP>z</I></SUP> where <I>z</I> is a complex number.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
If this were C++, you could overload the "+" operator for the class of complex objects rather than use something like <A href="list1.htm">Listing 1</A>'s definition for complex addition, <I>CADD()</I>. You could use overloading in a similar fashion for most of the other operators, making complex arithmetic look much more like ordinary arithmetic. C++ would also allow you to specify that the code should be in-line, avoiding the overhead of subroutine calls.</FONT></FONT><P>
My <I>C Tools</I> book uses an expanded version of this complex header file to implement root finders and an FFT (Fast Fourier Transform) package. It contains functions for the complex logarithm, conversion between the rectangular form for representing complex numbers <I>(x</I> + <I>iy)</I> and polar form</FONT></FONT></FONT></FONT><P>
<pre>r e<SUP>iq</SUP></pre>
where <I>r</I> and <I>q</I> are real numbers, <I>r</I> the magnitude and <I>q</I> the "argument" of the complex number <I>x</I>+<I>iy</I>. I've also used the package in a number of other routines, some of which will appear in a forthcoming book called <I>More C Tools</I>. My pet project is to implement all the functions discussed in Abramowitz and Stegun <a href="#note3">[3]</a> in C.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="00F2_008A">Matrices<A name="00F2_008A"></FONT></h4></P>
If you use the header file given in <A href="list3.htm">Listing 3</a>,
 you'll discover that it makes using two-dimensional arrays, or matrices, much more akin to their use in mathematics and FORTRAN. Recall that for a matrix <I>A(m,n)</I>, the notation <I>A(i,j)</I> conventionally refers to the element in the <I>i</I>-th row and the <I>j</I>-th column. The matrix <I>A</I> declared in FORTRAN as</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>DIMENSION A(2,3)</pre>
would have its elements stored sequentially by columns<P>
<pre>A(1,1) A(2,1) A(1,2) A(2,2) A(1,3) A(2,3)</pre>
In C, however, the declaration<P>
<pre>double a[2][3];</pre>
would give us a representation in storage of the form<P>
<pre>a[0][0] a[0][1] a[0][2] a[1][0] a[1][1] a[1][2]</pre>
The matrix in C is stored by rows, and the indexing is based at zero instead of one as the index of the lowest element. The header file supplies the <I>INDEX()</I> definition, among others, to allow matrix <I>a</I> to be referenced with a mechanism somewhat like the mathematical or FORTRAN notation, but with C conventions as to indexing starting at base zero and storage by rows. The example in <A href="list4.htm">Listing 4</a>
illustrates how <I>INDEX</I> is used to multiply a vector by a matrix.</FONT></FONT></FONT></FONT></FONT></FONT><P>
Obviously, you can adapt <I>INDEX</I> to suit your taste. If you want to use indexing that starts with first rather than zeroth elements, all you have to do is replace <I>i</I> and <I>j</I> by <I>(i-1)</I> and <I>(j-1)</I>. To store by columns, interchange <I>i</I> and <I>j</I> and replace the variable <I>coln</I> &#151; the maximum number of columns of the matrix &#151; by <I>rown</I>, the number of rows of the matrix.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The header file also supplies some constructs that make translating <I>do</I> loops from FORTRAN into C a little less painful.</FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="00F2_008B">Closing Remarks<A name="00F2_008B"></FONT></h4></P>
I hope these header files and examples are of some use to you. I don't pretend that they're perfect solutions to some of the complex problems your applications need to address, but they work in most cases. Maybe they'll give you the ammunition you need to convince colleagues that C deserves a chance.<P>
<a name="note1">[1]</a>     W. H. Press, B. P. Flannery, S. A. Teukolsky, W. T. Vetterling, <I>Numerical Recipes In C</I>, Cambridge University Press, 1986.<P>
[2]     L. Baker, <I>C Tools for Scientists and Engineers</I>, McGraw-Hill, 1989.<P>
<a name="note3">[3]</a>     M. Abramowitz and I. Stegun, <I>Handbook of Mathematical Functions</I>, U. S. Dept. of Commerce Applied Math Series Publ. 55 (also available as a paperback from Dover Publications), 1964.<P>

<h4><a href="../../../source/1990/may90/baker.zip">Get Article Source Code</a></h4>

</BODY>
</BLOCKQUOTE>
</HTML>
