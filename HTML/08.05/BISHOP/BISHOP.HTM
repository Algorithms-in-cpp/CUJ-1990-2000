


<HTML>
<HEAD>

<TITLE>May 1990/Storage In C</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmay.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">Storage In C<A name="010D_0092"><A name="010D_0092"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="010D_0000"><A name="010D_0000">Matt Bishop</font></h3><hr><blockquote><P>
<P><i><A name="010D_0000"><A name="010D_0000">Matt Bishop teaches computer science at Dartmouth College and has used C extensively on many different types of UNIX-based systems. Before, he was a research scientist at the Research Institute for Advanced Computer Science. His research areas are computer security and software engineering, especially portability. He may be contacted at Department of Mathematics and Computer Science, Dartmouth College, Hanover, NH 03755 (603) 646-3267.</i></P><P>
Unlike other high-level languages, C grants the programmer some control over where variables are placed &#151; over "storage." When a program defines a variable, the compiler decides how to store the value of that variable and creates a space in memory for the value. The compiler uses the declaration to determine how much space to allocate and how to allocate it &#151; as temporary storage (such as on a stack) or as more permanent storage (in data space).<P>
The format of a C variable declaration is:<P>
<pre>&lt;storage-class specifier&gt; &lt;type identifier&gt;</pre>
The storage classes are <I>static, auto, register,</I> and <I>extern.</I> (A fifth keyword, <I>typedef</I>, is considered a storage class for syntactic reasons, but plays no part in anything that follows.)</FONT></FONT></FONT></FONT></FONT></FONT><P>
Each of the following sections discusses one type of storage declaration, its effects, and when it is legal. The last section looks at a simple program written in a variety of ways and shows how changing storage classes affects the way the compiler handles storage.<P>
<h4><FONT COLOR="#000080"><A name="010D_0093">Auto<A name="010D_0093"></FONT></h4></P>
The simplest class of storage is automatic storage, indicated by the storage class keyword <I>auto</I>. Any variables defined at the beginning of a block with no explicit storage class specifier are assumed to be automatic. The storage for these variables is created when the block is entered, and exists until the block is left. For example, in <A href="list1.htm">Listing 1</a>,
 the storage space for <I>i</I> is allocated when the routine is entered, and deallocated when the program leaves the routine.</FONT></FONT></FONT></FONT><P>
Most compilers keep <I>auto</I>s in a stack &#151; a list onto which things are pushed (or put) and from which things are popped (or removed.) Because the last thing pushed onto the stack is the first thing removed, a stack is sometimes called a "LIFO" list (for "Last In, First Out").</FONT></FONT><P>
Note that the storage class specifier is almost always omitted when a variable is automatic; since automatic variables only occur in blocks and never outside them, this does not pose any problems. However, another version of automatic storage, <I>register</I> requires a storage class specifier.</FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="010D_0094">Register<A name="010D_0094"></FONT></h4></P>
Unlike with other storage class specifiers, compilers are at liberty to obey or ignore the <I>register</I> keyword. This storage class is the same as automatic so far as the programmer is concerned; however, rather than allocating storage on a stack (as with variables declared <I>auto</I>) the compiler arranges for the variables to be stored in CPU registers. Usually the machine can access data in the registers much faster than it can data on the stack.</FONT></FONT></FONT></FONT><P>
Because of the nature of machine registers, declaring a variable as a register variable entails some restrictions. Many machines cannot use the address of a register in the same way they use a memory address, so the address operator <I>&amp;</I> cannot be applied to a register variable. Some compilers will not allow certain types of variables to be assigned to registers. Also, compilers accept only a limited number of register declarations (the number varies from machine to machine and even from compiler to compiler) and do not give messages indicating when the <I>register</I> keyword is being ignored.</FONT></FONT></FONT></FONT><P>
In <A href="list2.htm">Listing 2</a>
the variable <I>ir</I> is stored in the stack; however, the contents of <I>address_of_ir</I> will be put into a register. This register variable will be assigned as its value the address of <I>ir</I>. Note that references using pointers are legal with registers, so the <I>printf</I> will print the value stored in <I>ir</I> correctly. However, if <I>ir</I> were declared as a <I>register</I> variable rather than an <I>auto</I>, the compiler would have printed an error message for the line</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>address_of_ir = &amp;ir;</pre>
since that line involves taking the address of the register variable.<P>
Both <I>register</I> and <I>auto</I> classes are transient; they go away when the block finishes executing. But often a program needs values to remain throughout the life of the program; the next two sections deal with longer duration storage classes.</FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="010D_0095">Extern<A name="010D_0095"></FONT></h4></P>
When applied to a variable, the storage class <I>extern</I> indicates that the <I>definition</I> of the variable is located in another file. Hence, <I>extern</I> statements are <I>declarations</I> giving just type information rather than definitions; the <I>extern</I> class does not cause any memory to be allocated.</FONT></FONT></FONT></FONT></FONT></FONT><P>
An <I>extern</I> declaration may appear anywhere before the declared variable is referenced. An <I>extern</I> declaration can even appear in the same file as the corresponding definition which supports the common practice of collecting all related <I>extern</I> declarations in a header file that is <I>#included</I> in all source files.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
An <I>extern</I> function declaration indicates that the function is defined elsewhere. (The keyword <I>extern</I> is often omitted here.) The compiler uses this declaration for type information and nothing else. See the example in <A href="list3.htm">Listing 3</a>.
</FONT></FONT></FONT></FONT><P>
When the compiler encounters a function, it assumes that function returns an integer value unless that function has been declared previously. So, in <A href="list3.htm">Listing 3</a>
the compiler assumes <I>sqrt()</I> returns an integer and generates code to coerce the returned integer into floating point format at the assignment statement. This leads to a result that is quite wrong:</FONT></FONT><P>
<pre>The square root of 2 is 1070596096.000000</pre>
(The precise answer is machine dependent; but it will be wrong.) However, if the line<P>
<pre>extern double sqrt();</pre>
is placed before the assignment statement, the compiler will understand that the function <I>sqrt()</I> returns a <I>double</I> and will not do any type coercion at the assignment statement; the result in this case is</FONT></FONT></FONT></FONT><P>
<pre>The square root of 2 is 1.414214</pre>
Every <I>extern</I> declaration must have a corresponding definition (unless the variable or function in it is never referenced). Precisely what constitutes an acceptable definition varies among compilers.</FONT></FONT><P>
With some compilers, the single definition at the top level (that is, not contained inside any function's body) is taken to be the definition associated with <I>extern</I> declarations. If more than one such definition occurs, the compiler (actually, the linker) will report an error. These errors are of the form "variable (or function) multiply defined."</FONT></FONT><P>
Other compilers follow the ANSI C standard and use a more complex scheme. They consider a top-level declaration of a variable to be a tentative definition if the storage class is <I>static</I> or omitted. If a tentative definition is found in which the variable is initialized, that is taken to be the definition and the other tentative definitions become declarations. Otherwise, the first tentative definition becomes the definition and the rest become declarations.</FONT></FONT><P>
For example, suppose <A href="list4.htm">Listing 4</a>
and <A href="list5.htm">Listing 5</a>
are two separate source files belonging to the same program. If the first rule of defining variables is followed, each source file will compile correctly, but when they are linked, the linker will find two definitions of <I>testcalled</I>, and report that <I>testcalled</I> is multiply defined. If the ANSI rule of defining variables is used however, the statement</FONT></FONT></FONT></FONT><P>
<pre>int testcalled;</pre>
in <I>test.c</I> is considered a tentative definition, and the statement</FONT></FONT><P>
<pre>int testcalled = 0;</pre>
in <I>main.c</I> is considered the real definition, because <I>testcalled</I> is initialized. Hence, the tentative definition in <I>test.c</I> becomes a declaration and the linking procedure succeeds. Note that if the statement in <I>test.c</I> had been</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>int testcalled = 0;</pre>
there would have been two definitions, not one, and the linker would have complained that <I>testcalled</I> had been multiply defined.</FONT></FONT><P>
The rules of global definition also apply to another storage class, which on first glance seems to be the most complicated.<P>
<h4><FONT COLOR="#000080"><A name="010D_0096">Static<A name="010D_0096"></FONT></h4></P>
Variables with <I>static</I> storage class retain their value throughout the life of the program. When used outside a function definition, <I>static</I> has the side effect of not allowing the variable or function to be referenced anywhere except within the enclosing source file.</FONT></FONT></FONT></FONT><P>
The slightly reworked versions of <I>main.c</I> and <I>test.c</I> in <A href="list6.htm">Listing 6</a>
and <A href="list7.htm">Listing 7</a>
illustrate the effect of <I>static</I> on variable life.</FONT></FONT></FONT></FONT></FONT></FONT><P>
When compiled, linked and executed, this program generates:<P>
<pre>test() called, testcalled = 1
test() called, testcalled = 2</pre>
If, for comparison, we omit the storage class keyword <I>static</I> from the declaration of <I>testcalled</I> in <I>test(), testcalled</I> will be an automatic variable. As an automatic, <I>testcalled</I> will be created each time <I>test()</I> is called, and discarded each time <I>test()</I> returns. Hence, we get the following result:</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>test() called, testcalled = 1
test() called, testcalled = 1</pre>
This graphically points out that regardleas of their scope, static variables retain whatever value they are assigned throughout the life of the program, whereas automatic variables do not.<P>
When declared outside a function, the storage class static has one additional side effect: it limits the scope of the variable or function so declared to the file in which it is declared. For example, a program built from the main.c in <A href="list4.htm">Listing 4</a>
and the test.c in <A href="list8.htm">Listing 8</a>
would produce<P>
<pre>test() called, testcalled = 0
test() called, testcalled = 0</pre>
because the variable <I>testcalled</I> in <I>test.c</I> is not visible to any other file. So, it and the variable <I>testcalled</I> in <I>main.c</I> are completely different.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
To illustrate what happens when a function is declared <I>static,</I> I've combined <I>main.c</I> and <I>test.c</I> into one file, and made <I>test() static</I> (see <A href="list9.htm">Listing 9</a>)
. The result is:</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>test() called, testcalled = 1
test() called, testcalled = 2</pre>
If, however, I put <I>test()</I> into a separate file (<A href="list10.htm">Listing 10</a>)
, both files <I>main.c</I> and <I>test.c</I> will compile, but the linker will complain that <I>"test</I> is undefined". Because test is declared as <I>static</I>, it is only visible in the file <I>test.c</I>; it cannot be accessed by anything in the file <I>main.c</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="010D_0097">An Example<A name="010D_0097"></FONT></h4></P>
<A href="list11.htm">Listing 11</a>
contains a very simple program that sets a variable <I>total</I> to 20, and loops, adding 20 each time through, until <I>total</I>'s value is more than 1000 or until 1000 loops have been made.</FONT></FONT></FONT></FONT><P>
First, note that the variable <I>counter</I> is declared automatic. It could just have easily been declared static; the effect would be the same, since it is local to <I>main</I> and exists until that routine exits (at which time the program exits.) So, <I>counter</I> could be any storage class except <I>extern</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
However, notice that <I>total</I> is defined as <I>static</I> on line 13A, thus <I>total</I> will increase in value each time <I>dowork</I> is called. The program would exit when <I>total</I> reached 1020. If, instead, the word <I>static</I> were replaced by <I>auto</I> (or <I>register</I>, or just omitted) then each time <I>dowork</I> was called, <I>total</I> would be recreated and reinitialized to 20. In this alternative version <I>dowork</I> would always return 40, and the program would loop 1000 times before exiting.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
In yet another alternative, we could move <I>total</I> outside the function <I>dowork</I> and put it either above or below main. We could even put it after <I>dowork</I>, but then we would need the statement</FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>extern int total;</pre>
somewhere before line 14A (otherwise <I>total</I> would be undefined and undeclared at that point, causing a compile-time error.)</FONT></FONT><P>
If we split this example into two files <I>main.c</I> (<A href="list12.htm">Listing 12</a>)
 and <I>dowork.c</I> (<A href="list13.htm">Listing 13</a>)
 and declare the function <I>dowork static</I>, the program will not compile correctly because the function <I> dowork</I> isn't defined anywhere (so far as the function <I>main</I> is concerned).</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
In this variation line 13B could be moved before line 11B without changing anything. In fact, line 3B could be put before line 1B, and every occurrence of the variable counter could be renamed <I>total</I> without any problem, because the variable <I>total</I> in the file <I>dowork.c</I> is declared <I>static</I> and hence is defined for that file only.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="010D_0098">Conclusion<A name="010D_0098"></FONT></h4></P>
By choosing storage classes carefully, a programmer can balance speed against memory used. Moreover, because <I>static</I> affects the visibility of objects, a C programmer who plans to practice sophisticated modular design, must thoroughly understand the ramifications of storage class.</FONT></FONT><P>

<h4><a href="../../../source/1990/may90/bishop.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
