


<HTML>
<HEAD>

<TITLE>May 1990/CUG Library</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmay.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">CUG Library<A name="0111_0095"><A name="0111_0095"></font></h2><P>
<h3 align="center"><A name="0111_0000"><A name="0111_0000">An Adaptable Disk Utility</h3><P>
<h3 align="center"><font color="#800000">Alex Cameron</font></h3><hr><blockquote><P>
<P><i><A name="0111_0000"><A name="0111_0000">Alex Cameron is currently an engineering Project Manager with a large Australian Telecommunications company. Like many others, he caught the 'C' bug from Ron Cain's small C compiler, and enjoys programming for embedded control systems. He is currently working on a hardware-assisted Disk Utility for the IBM PC.</i></P><P>
<h4><FONT COLOR="#000080"><A name="0111_0096">Format Adaptable Disk Utility<A name="0111_0096"></FONT></h4></P>
For many programmers, the PC was not their first machine. Many of us started with CP/M and Apple IIs and had to find some way of porting that old data to the PC. There are two options:<P>
If you still have the old computer, no problem, just load compatible file transfer programs on both machines and connect an RS-232 link between them.<P>
If your old computer's disk format is supported by programs such as PC-Alien and Xenocopy, you can use them. But, if the transfer utilities don't support your format and you don't have access to your original computer, you're high and dry. My solution: Write my own truly versatile and adaptable disk utility.<P>
ADU (Adaptable Disk Utility) can scan a disk, building a disk parameter table. Once the table is built, you can adjust any of the disk operating system dependencies, such as system track offsets, and so on, before reading and editing. The user interface includes a full screen editor so that patching and editing the disk is a simple task.<P>
<h4><FONT COLOR="#000080"><A name="0111_0097">Adjusting The PC's Disk Format Tables<A name="0111_0097"></FONT></h4></P>
The current standard PC floppy disk format consists of 40 tracks, each containing nine sectors of 512 bytes per sector. Vary this in any way and the PC chokes.<P>
Each time the BIOS is called to perform a disk function, through <I>INT 13H</I>, it calls the BIOS routine <I>GET_PARM</I> which indexes into a table called <I>DISK_BASE. DISK_BASE</I> is a collection of floppy disk controller (FDC) parameters which tells the BIOS in what manner the FDC chip must be programmed in order to correctly read the disk (see <A href="fig1.htm">Figure 1</a>)
. Forcing C pointers to address specific locations is complicated by the PC's 8088/8086 memory segmentation and the high/low byte reversal, but it is doable.</FONT></FONT></FONT></FONT></FONT></FONT><P>
Some of the parameters relating to the <I>GAP</I> lengths must be determined empirically and are important when attempting to read multiple sectors during a diskcopy or formatting process. These <I>GAP</I>s are basically buffers designed to allow the controller's data separator to "turn off" during splices or periods of unknown data. If the Phase Locked Loop (PLL) within the data separator is not instructed to "turn off", it may get out of synchronisation and so not be able to lock onto the identification (ID) marks. Thus, an incorrect <I>GAP</I> setting can "turn off" the data separator during an area of good data. Errors of this type normally manifest themselves as "Time out errors" (BIOS return code <I>80H</I>). The BIOS's disk status area is maintained at address <I>0040:0041</I> (<A href="fig2.htm">Figure 2</a>)
.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0111_0098">Determining The Disk Format<A name="0111_0098"></FONT></h4></P>
ADU finds the correct disk parameters by trial and error. If a call to BIOS function <I>13H</I> returns an error, it adjusts a parameter and retries. For example, ADU continually varies the bytes per sector code from 00 to 05 on, say, track 0, sector 1 until no error is returned. Once the number of bytes per sector is determined, ADU determines the total number of sectors by incrementing the sector number and perform a seek/verify until an error occurs. Next it looks for a match on side one to determine the number of sides. Finally it steps off the number of tracks.</FONT></FONT><P>
The number of sectors per block is user-definable, as are all the other parameters (default is eight sectors per block). The number of sectors per block is only important during the copying of CP/M type disks. As with other parameters, if you don't want to work in blocks then just set the sectors per block to one. <A href="table1.htm">Table 1</a>
lists all the commands available with ADU.<P>
<I>An Adaptable Disk Utility (ADU) is available through the CUG Library as CUG volume #307. See the order form in the center of the magazine</I>.<P>
</BLOCKQUOTE>
</BODY>
</HTML>
