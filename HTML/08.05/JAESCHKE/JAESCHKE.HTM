


<HTML>
<HEAD>

<TITLE>May 1990/Dr. C's Pointers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmay.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Dr. C's Pointers&reg;<A name="0115_0099"><A name="0115_0099"></font></h2><P>
<h3 align="center"><A name="0115_0000"><A name="0115_0000">Pointers To Arrays</h3><P>
<h3 align="center"><font color="#800000">Rex Jaeschke</font></h3><hr><blockquote><P>
<P><i><A name="0115_0000"><A name="0115_0000">Rex Jaeschke is an independent computer consultant, author and seminar leader. He participates in both ANSI and ISO C Standards meetings and is the editor of The Journal of C Language Translation, a quarterly publication aimed at implementers of C language translation tools. Readers are encouraged to submit column topics and suggestions to Rex at 2051 Swans Neck Way, Reston, VA, 22091 or via UUCP at uunet!aussie!rex.</i></P><P>
The address of an array is the same as the address of the array's first element, right? Well, yes, I guess so, but a pointer to an array is definitely <I>not</I> the same as a pointer to the array's first element.<P>
Pointers to arrays have long been supported by C; it's just that they are not often used, at least not directly. Pointers to arrays do, however, come into play when using multi-dimensional arrays, but usually so covertly that their role generally goes unnoticed. In my experience most seasoned C programmers either have no idea what pointers to arrays are or deny ever using them. Nonetheless, pointers to arrays are part of the language and they can be useful.<P>
<h4><FONT COLOR="#000080"><A name="0115_009A">Getting Started<A name="0115_009A"></FONT></h4></P>
A pointer to an array is tricky to declare because you need grouping parentheses in the declaration, something rarely seen and then usually only in pointers to functions. (Of course, redundant grouping parentheses can exist in any declaration, but in this case they are not redundant.)<P>
In <A href="list1.htm">Listing 1</a>
<I>p2</I> is a pointer to an array of three <I>char</I>s while <I>p3</I> is a pointer to an array of six <I>char</I>s. Without the grouping parentheses both declarations would produce an array of pointers, something quite different. As you should expect, the type of the expression <I>*p2</I> is <I>array of 3 char</I>, hence the result <I>3</I>. Similarly for <I>*p3</I> and <I>6</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Given an array <I>A</I>, the address of that array is the same memory location as the address of <I>A[0]</I>. That is, a pointer to array <I>A</I> points to the same location as does a pointer to <I>A[0]</I>. How are these pointers different? When you perform arithmetic operations on a pointer, the integer offset is scaled by the size of the underlying object. Therefore, the expressions</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>p1 + 1
p2 + 1
p3 + 1</pre>
are quite different. <I>p1 + 1</I> points to the <I>char</I> one beyond <I>p1.p2 + 1</I> points to the array of three <I>char</I>, one object (that is, three <I>char</I>) beyond <I>p2</I>. And of course <I>p3</I> + <I>1</I> points to the array of six <I>char</I>, six <I>char</I>s beyond <I>p3.</I> Similarly, the following expressions all have different type:</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<pre>*p1     /* char      */
*p2     /* char [3]  */
*p3     /* char [6]  */</pre>
And since subscripting can be written in terms of indirection and integer arithmetic, the expressions <I>p1[i]</I>, <I>p2[i]</I>, and <I>p3[i]</I> are also quite different.</FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0115_009B">Naturally Occurring Array Pointers<A name="0115_009B"></FONT></h4></P>
I stated above that pointers to arrays come in to play when multidimensional arrays are used. In the example of <A href="list2.htm">Listing 2</a>
a two-dimensional array is passed to a function <I>f</I>.</FONT></FONT><P>
Now we know that arrays in C are always passed by address but what is the type of the expression <I>a</I> in <I>f(a)</I>? When pressed for an answer most people guess that <I>f(a)</I> is equivalent to <I>f(&amp;a[0][0])</I> so the type must be <I>long *</I>. That is, in fact, wrong. To understand the error, we need to look at how multi-dimensional arrays are referenced.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
The expression <I>a[i][j]</I> can be written as <I>(a[i])[j]</I> since the <I>[]</I> operator associates left to right. Specifically, <I>a</I> can only be subscripted to one level. The result of that subscript, however, can also be subscripted to one level. We do not directly subscript <I>a</I> to two levels as it may appear on the surface. To be able to legitimately use the second subscript, the type of <I>a[i]</I> must be a pointer type since only pointer type expressions can be subscripted.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Let's consider the type <I>long</I> *. Subscripting this to one level gives the type <I>long</I> which cannot be subscripted further. Considering the type <I>long **</I>, this can indeed be subscripted to two levels, however, what about the scaling factor for each row?</FONT></FONT></FONT></FONT></FONT></FONT><P>
The answer is, the type of <I>a</I> in <I>f(a)</I> is <I>long (*)[5]</I>. That is, the expression passed in by value to <I>f</I> is a pointer to an array of five <I>long int</I>s. In fact, it is a pointer to the first vector of five <I>long</I>s (the first row) in the multi-dimensional array. (As we know, multi-dimensional arrays in C are stored in row-major order.)</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Returning then to the notion that an expression designating an array is converted to the address of its first element, this does hold true in this case. The problem is, however, that <I>a</I> is not a two-dimensional array; it's a one-dimensional array whose elements are vectors. (I admit that this sounds like hair splitting but I find it a useful concept when dealing which such expressions.) <I>f(a)</I> then, is actually equivalent to <I>f(&amp;a[0])</I>. Since <I>a[0]</I> has type <I>array of 5 longs, &amp;a[0]</I> has type <I>pointer to array of 5 long</I>s.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
In <A href="list2.htm">Listing 2</a>,
 pointers to arrays are never overtly declared although one is implied by the definition of function <I>f</I>. The argument list could have been written in either of the following two forms:</FONT></FONT><P>
<pre>void f(long a[][5]) {...}
void f(long (*a)[5]) {...}</pre>
When used in the context of formal parameters, these declarations are equivalent.<P>
<h4><FONT COLOR="#000080"><A name="0115_009C">Subscripting Array Pointers<A name="0115_009C"></FONT></h4></P>
In the expression <I>pd = d + 1</I> (<A href="list3.htm">Listing 3</a>)
 the subexpression <I>d</I> is converted to the address of the first element of the array, that is, to <I>&amp;d[0]</I>. And since <I>d</I> is a two-dimensional array, the type is a pointer to an array of two <I>double</I>. As a result, <I>pd</I> points to the second row of the array <I>d</I>. By subscripting <I>pd</I> to two levels, we can access <I>d</I> as though its row numbers were <I>-1, 0,</I> and <I>1</I> as shown.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0115_009D">Array Pointers And Casts<A name="0115_009D"></FONT></h4></P>
Just as you can cast a pointer to <I>int</I> to a pointer to <I>char</I>, you can cast a pointer to one size array to a pointer to another size array. For example:</FONT></FONT></FONT></FONT><P>
<pre>main ()
{
     char *pc1 = "abcdefghi"; /* OK */
/*4*/ char (*pc2a)[3] = pc1; /* error */
     char (*pc2b)[3] = (char (*)[3])pc1; /* OK */
/*6*/ char (*pc3a)[6] = "abcdefghi"; /* error */
     char (*pc3b)[6] = (char (*)[6])"abcdefghi"; /* OK */
}</pre>
In strict ANSI mode, lines four and six should be diagnosed since the two pointer types are not assignment compatible. Note the parentheses around the * in the casts. These are necessary, for without them the cast type would be an array of pointers and you cannot cast anything into an array.<P>
<h4><FONT COLOR="#000080"><A name="0115_009E">Returning An Array Pointer<A name="0115_009E"></FONT></h4></P>
Due to the symmetry of C's typing mechanism, you can return pretty much any type object that you can declare. (The only exceptions are arrays and functions.) As such, it is possible to return a pointer to an array. (See <A href="list4.htm">Listing 4</a>.
)<P>
The expression <I>(*f())[0][1]</I> looks rather strange, but on close inspection is quite sensible. Function <I>f</I> returns a pointer to an array of three pointers to <I>char</I>. Therefore, <I>*f()</I> is the array of three pointers. <I>(*f())[i]</I> references the <I>i</I><SUP>th</SUP> element of the array of three pointers to <I>char</I> and <I>(*f())[i][j]</I> references the <I>j</I><SUP>th</SUP> <I>char</I> offset from the <I>i</I><SUP>th</SUP> pointer.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
Prior to ANSI C, statements of the form <I>return &amp;ap;</I> were typically accepted by compilers, but the ampersand was regarded as superfluous. In fact, quite a few compilers produced a message saying so. However, ANSI C, says that <I>&amp;array</I> is <I>not</I> the same as <I>&amp;array[0]</I>. Specifically, an lvalue expression that designates an array is converted to a pointer to the first element in all cases <I>except</I> when preceded by the unary <I>&amp;</I> operator, when used as the operand of <I>sizeof</I>, and when the expression is a string literal being used in the initializer of an array.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>
<h4><FONT COLOR="#000080"><A name="0115_009F">A Real Need For Array Pointers<A name="0115_009F"></FONT></h4></P>
The following example shows a situation where you must use pointers to arrays. It involves the dynamic allocation of a multidimensional array.<P>
<pre>#include &lt;stdlib.h&gt;

main()
{
    int (*p)[3][4];

    p = malloc(2 * 3 * 4 *
sizeof(int));
    p[0][0][0] = 1;
    p[1][2][3] = 1;
}</pre>
An array of type <I>int [2][3][4]</I> is allocated and the resultant pointer type is a pointer to an <I>array 3 of array 4 of int</I>s. To use the space for an array of type <I>int [4][3][2]</I>, the pointer must be declared as <I>int (*p)[3][2]</I>.</FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><P>

<h4><a href="../../../source/1990/may90/jaeschke.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>

