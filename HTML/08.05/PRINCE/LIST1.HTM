<HTML><HEAD><TITLE>May 1990/The Quick Sort For Micros And Pipeline Processors/Listing 1</TITLE></HEAD><BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4><A name="00F9_008F"><A name="00F9_008F">Listing 1<A name="00F9_008F"></h4><P>
<pre>#include &lt;stdio.h&gt;

#define NSTACK 30              /* 2 log2 (max n) */
typedef unsigned int ARRTYPE;  /* type of data to be sorted */

void iqsort( n, arr, indx)  /* 1 based arrays */
    unsigned int n;         /* sort arr[1..n] */
    ARRTYPE arr[], *indx[]; /* return indx pointers to sorted arr[] */
{
    static unsigned int stack[NSTACK+1], llim, rlim, iq, i, j;
    int jstack = 1;         /* "unsigned int" may be faster... */
    static ARRTYPE *a, *b;
    static int swap;

/* initialize pointers to input order */
    for( i = 1; i &lt;= n; ++i)
       indx[i] = &amp;arr[i];

/* terminate with first pivot element (chosen same as below) */
   indx[n + 1] = indx[((rlim = n) +(llim = 1)) &gt;&gt; 1];
   do
   {               /* while any unsorted segments remain */
      while((int)(rlim - llim) &gt; 1 )
      {       /* 3 or more elements                   */
             /* quick sort: split segment into 3 segments    */
             /* pick guess of median element to make segments near equal */
          a = indx[iq = ((i = llim) + (j = rlim)) &gt;&gt; 1];
          indx[iq] = indx[i];
          indx[i] = a;        /* for left terminator */
          for( ; ; )
          {
/* search for small element to be moved to left */
              while( *a &lt; *(b = indx[j]))
                 --j;
              if(j &lt;= i)
                 break;

              indx[i] = b;

/* search for large element to be moved to right */
              while( *(b = indx[++i]) &lt; *a )
                 ;
              if(i &gt;= j)
              {
                 i =j;
                 break;
              }
              indx[j--] = b;
          }

          indx[i] = a; /* new middle segment, length 1 */
          if( (jstack += 2) &gt; NSTACK )
             printf("\nNSTACK exceeded");

/* work shorter segment next to limit stacking */
          stack[jstack] = (swap = (rlim-i &gt;= i-llim)) ? rlim : (i-1);
          stack[jstack - 1] = swap ? (i+1) : llim;
          rlim = swap ? (i-1) : rlim;
          llim = swap ? llim : (i+1);
       }

/* finish off short segments directly -- optional case for 2 elements */
       if(rlim - llim == 1 &amp;&amp; *(a = indx[llim]) &gt; *(b = indx[llim + 1]) )
       {
           indx[llim] = b;
           indx[llim + 1] = a;
       }

/* get next segment to sort from stack */

       rlim = stack[jstack--];
       llim = stack[jstack--];
    } while(jstack != -1);
}
</pre>
</BODY>
</HTML>
