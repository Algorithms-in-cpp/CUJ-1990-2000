<HTML><HEAD>
<TITLE>November 1999/Templates for Efficient Dynamic Type Checking/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: The assert_cast function templates</A></h4>
<pre>
// cast.h  definitions for assert_cast

#ifndef CAST_H_A2434B93
#define CAST_H_A2434B93

#include &lt;assert.h&gt;

// assert_cast is similar to dynamic_cast; it differs in that 
// (1) RTTI, with its (small) associated cost in executable size 
// and speed, is used only in Debug mode (i.e., when NDEBUG is 
// not #defined), and (2) a bad cast is signalled by raising an 
// assertion, rather than by returning 0 or throwing 
// std::bad_cast.

// for pointers
template&lt;typename Result_ptr, typename Source&gt;
inline Result_ptr assert_cast(Source* pSource)
{
    assert ( static_cast&lt;Result_ptr&gt;(pSource) ==
                 dynamic_cast&lt;Result_ptr&gt;(pSource) );
    return static_cast&lt;Result_ptr&gt;(pSource);
}

// for references
template&lt;typename Result_ref, typename Source&gt;
inline Result_ref assert_cast(Source&amp; rSource)
{
#ifndef NDEBUG
    try
    {
        assert ( &amp;static_cast&lt;Result_ref&gt;(rSource) ==
                    &amp;dynamic_cast&lt;Result_ref&gt;(rSource) );
    }
    catch(...)
    {
        // convert exceptions to assertions to prevent them 
        // from being "handled"
        assert(false);
    }
#endif
    return static_cast&lt;Result_ref&gt;(rSource);
}

#endif  // CAST_H_A2434B93
</pre>
</BODY>
</HTML>
