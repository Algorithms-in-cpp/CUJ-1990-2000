<HTML><HEAD>
<TITLE>November 1999/Templates for Efficient Dynamic Type Checking/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2: Template class workarounds for compiler template argument deduction and overload resolution problems</A></h4>
<pre>
// alt_cast.h  definitions for assert_cast (workarounds for 
// certain compilers)

#ifndef CAST_H_A2434B93
#define CAST_H_A2434B93

#include &lt;assert.h&gt;

// declare general version
template&lt;typename Result&gt;
class assert_cast;

// define specialization for pointers
template&lt;typename Result&gt;
class assert_cast&lt;Result*&gt;
{
public:
    template&lt;typename Source&gt;
    assert_cast(Source* pSource)
        : m_pResult( static_cast&lt;Result*&gt;(pSource) )
    {
        assert ( m_pResult ==
                     dynamic_cast&lt;Result*&gt;(pSource) );
    }

    operator Result*() const { return m_pResult; }

private:
    Result* m_pResult;
};

// define specialization for references
template&lt;typename Result&gt;
class assert_cast&lt;Result&amp;&gt;
{
public:
    template&lt;typename Source&gt;
    assert_cast(Source&amp; rSource)
        : m_rResult( static_cast&lt;Result&amp;&gt;(rSource) )
    {
        assert( &amp;m_rResult );
        assert( &amp;m_rResult ==
            dynamic_cast&lt;Result*&gt;(&amp;rSource) );
    }

    operator Result&amp;() const { return m_rResult; }

private:
    Result&amp; m_rResult;
};

#endif  // CAST_H_A2434B93
</pre>
</BODY>
</HTML>
