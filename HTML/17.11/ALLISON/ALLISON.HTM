<HTML>   
     <HEAD>
<TITLE>November 1999/import java.*</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocnov.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">import java.*: Object-Oriented Programming in Java</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Chuck Allison</FONT></H3>

<BLOCKQUOTE>
<p>Java supports polymorphism much as C++ does, but with a couple of interesting twists.</p>
</BLOCKQUOTE>

<HR>

<BLOCKQUOTE>

<p>There is more to object-oriented programming than just objects. Although encapsulating data and functionality within a class boundary goes a long way to improve the organization of complex programs, the crowning feature of object orientation is polymorphism, which is the ability to process objects related by inheritance through a single abstract interface, while the behavior of those objects varies dynamically according to their actual type. In this article I'll discuss how to use inheritance and polymorphism in Java.</p>

<h4><FONT COLOR="#000080">Code Sharing</FONT></H4>

<p>The first benefit of inheritance that meets the eye is code economy. Consider a simple <B>Employee</B> class like that in <a href="fig1.htm">Figure 1</a>. The crucial operation here is <B>computePay</B> (just ask any employee), which in this case gives time-and-a-half for overtime. What should you do to handle salaried employees? If you were to define a <B>SalariedEmployee</B> class, it would look just like class <B>Employee</B> except for the name of the class (and its constructor, of course) and the implementation of <B>computePay</B>. You would have to duplicate the fields and other methods of <B>Employee</B> in <B>SalariedEmployee</B>, which is not only tedious but a maintenance headache, since both copies must be kept in sync. Inheritance allows you to define <B>SalariedEmployee</B> as an extension of <B>Employee</B>, as follows:</p>

<pre>
class SalariedEmployee
   extends Employee
{
   public SalariedEmployee
      (String name, double rate)
   {
      super(name, rate);
   }
   public double computePay()
   {
      return timeWorked * rate;
   }
}
</pre>

<p>All you have to do is say that <B>SalariedEmployee</B> (the "subclass") extends <B>Employee</B> (the "superclass"), and then specify what is different about <B>SalariedEmployee</B>. A <B>SalariedEmployee</B> object inherits everything else from <B>Employee</B>, so it has the <B>name</B>, <B>rate</B>, and <B>timeWorked</B> fields, and it can also call the other three <B>Employee</B> methods (<B>getName</B>, <B>getRate</B>, and <B>recordTime</B>). The <B>SalariedEmployee</B> constructor just passes its arguments to the <B>Employee</B> constructor to initialize its inherited fields. (That's what the <B>super</B> method does.) <B>SalariedEmployee.computePay</B> overrides <B>Employee.computePay</B> by interpreting <B>timeWorked</B> as the number of pay periods. Whenever you invoke <B>computePay</B> on a <B>SalariedEmployee</B> object, <B>SalariedEmployee.computePay</B> executes, not <B>Employee.computePay</B>.</p>

<h4><FONT COLOR="#000080">Dynamic Binding</FONT></H4>

<p>Another nice thing about inheritance is that it allows you to express class relationships in your code. In real life, a salaried employee is an employee, that is, anything you can say about employees also applies to salaried employees. The <B>extends</B> keyword in Java works analogously by implementing an is-a relationship between a subclass and its superclass: anywhere you can use an <B>Employee</B> object you can use a <B>SalariedEmployee</B> object. The program in <a href="fig2.htm">Figure 2</a> illustrates this in two ways. First, notice that the program stores a handle to a <B>SalariedEmployee</B> object in an array of <B>Employee</B>. Since a <B>SalariedEmployee</B> is an <B>Employee</B>, this makes sense. Storing a handle to a subclass in a superclass handle is so common and crucial to object-oriented programming that it has a name: upcasting, so called because we usually draw class diagrams with superclasses positioned above subclasses (see <a href="fig3.htm">Figure 3</a>). The type of object a variable actually refers to at run time is called its dynamic type.</p>
<p>The second use of the is-a relationship is in the <B>pay</B> method. <B>pay</B> doesn't care whether the variable <B>e</B> refers to an instance of the superclass or the subclass. It treats its parameter as an <B>Employee</B>, and thus only calls methods named in the <B>Employee</B> class. Since a <B>SalariedEmployee</B> is an <B>Employee</B>, the <B>computePay</B> method applies. <I>But</I> &#151; <B>pay</B> wants <B>SalariedEmployee.computePay</B> to execute, not <B>Employee.computePay</B>. How can this happen when <B>e</B> is declared as a handle to an <B>Employee</B> object?</p>
<p>The answer is dynamic binding, which maps a method name to an implementation according to the object's dynamic type. The expression <B>e.computePay()</B> will call the correct version of <B>computePay</B> according to whether <B>e</B> is referring to an <B>Employee</B> or a <B>SalariedEmployee</B> at the moment. The use of dynamic binding of methods in an inheritance hierarchy is called polymorphism.</p>
<p>Unless you specify otherwise, all methods in Java bind dynamically. A closer look at the definition of the <B>Employee</B> class suggests that we need a way to turn off dynamic binding, since functions like <B>getName</B> that only retrieve attributes aren't likely to vary. In fact, the only method that seems to need dynamic binding is <B>computePay</B>. To turn off dynamic method binding, use the <B>final</B> keyword, like this:</p>

<pre>
public final String getName()
{
   return name;
}
public final double getRate()
{
   return rate;
}
public final void
   recordTime(double time)
{
   timeWorked = time;
}
</pre>

<p>Final methods are just that &#151; "final"; you cannot override them in subclasses. You can also declare a class final, which means that it can't be a superclass.</p>
<p>With a little imagination applied to this example you can appreciate the power of polymorphism. Consider a more complex payroll system in a separate module from the code that builds a heterogeneous collection of <B>Employee</B> objects. The payroll functions concern themselves only with <B>Employee</B> objects, and yet the right things happen because the methods called operate on the objects' dynamic type. If there is a change to <B>computePay</B>, the payroll code does not change. Furthermore, if you add a new type of employee, the payroll code still doesn't change! Dynamic binding takes care of invoking the right method. This perfect separation of interface and implementation known as polymorphism makes for clairvoyant code, as it were, because you can process objects of a type that doesn't even exist yet!</p>
<p>It is also possible to downcast, that is, to cast from a general type to a more specific type, but only if an object's dynamic type allows it. In <a href="fig4.htm">Figure 4</a>, for example, the dynamic type of <B>e</B> is <B>Employee</B>, so I can't use it as a <B>SalariedEmployee</B>. The <B>instanceof</B> operator is similar to C++'s <B>dynamic_cast</B>, and returns <B>true</B> if the dynamic type of the first operand is identical to or a subclass of the type specified in the second operand. If you try to downcast when you shouldn't you get a <B>ClassCastException</B>.</p>
<p>One caution in using inheritance is to be mindful of the access you give methods in a subclass. When you override an inherited method in a subclass you can increase its access (e.g., from private to public) but not decrease it. Otherwise you would destroy the ability of a subclass object to behave like its superclass. In other words, a subclass can provide more functionality, but not less. Likewise, a subclass can require less of its method's parameters, but not more. (For the more academically minded reader, the last two sentences describe covariance and contravariance, respectively.) In all ways a subclass instance should be substitutable for a superclass one.</p>

<h4><FONT COLOR="#000080">The Mother of All Classes</FONT></H4>

<p>When you define a class that doesn't extend another, your new class implicitly inherits from a class name <B>Object</B>, so all classes in Java are actually in one huge hierarchy with <B>Object</B> as the root. The <B>Object</B> class has a method named <B>toString</B>, which is called whenever an object needs to be represented as a string, such as when you pass it to <B>System.out.println</B>. Unless you override <B>toString</B> in your class, <B>Object.toString</B> gives you a string consisting of the class name, the @-sign, and the hash code of the object (a unique, system-generated integer), as the following example illustrates.</p>

<pre>
class MyClass
{}

class ToStringTest
{
   public static void
      main(String[] args)
   {
      MyClass m = new MyClass();
      System.out.println(m);
   }
}

/* Output:
MyClass@719aea8b
*/
</pre>

<p>Since <B>toString</B> is not a final method, however, you can override it to render a string of your choice, as in</p>

<pre>
class MyClass
{
   public String toString()
   {
      return "MyClassObject";
   }
}
</pre>

<p>The Java collection classes act as generic containers by holding instances of <B>Object</B>. The program in <a href="fig5.htm">Figure 5</a> uses an <B>ArrayList</B>, a vector-like collection, to store some instances of <B>Integer</B>. In the call to <B>add</B>, the <B>Integer</B> object upcasts to an <B>Object</B>, since that is what <B>ArrayList.add</B> expects, and since everything, including <B>Integer</B>, is a subclass of <B>Object</B>. But to get an <B>Integer</B> back you need to explicitly cast the return value of <B>ArrayList.get</B>. If you try to cast to the wrong type you'll get a <B>ClassCastException</B>.</p>

<h4><FONT COLOR="#000080">Abstract Classes</FONT></H4>

<p>Sometimes a class at the top of a hierarchy represents a general concept that exists only for the purpose of unifying its subclasses. You can look at <B>Employee</B> in this way, in fact. That is, why is an hourly employee more of an employee than a salaried employee? Could I have just as easily used <B>SalariedEmployee</B> as the superclass? Of course. It makes more sense, then, to have a general <B>Employee</B> class and to derive both <B>SalariedEmployee</B> and <B>HourlyEmployee</B> and whatever else from it (see <a href="fig6.htm">Figure 6</a>).</p>
<p>Because there is no need to actually instantiate any <B>Employee</B> objects, <B>Employee</B> is called an abstract class. In <a href="fig7.htm">Figure 7</a> I have redefined the <B>Employee</B> class with the <B>abstract</B> keyword, and have included everything that applies to all types of <B>Employee</B> objects, including a declaration of <B>computePay</B> as an abstract method. Because <B>Employee</B> is an abstract class, the Java compiler will not allow it to be the target of the <B>new</B> operator, so you can't have any <B>Employee</B> objects. Because <B>computePay</B> is abstract, in order to provide a concrete (i.e., instantiable) class, we must create a subclass, override <B>computePay</B>, and provide an implementation.</p>
<p><B>SalariedEmployee</B> already fills this requirement, so its code doesn't change. The code for <B>HourlyEmployee</B> is in <a href="fig8.htm">Figure 8</a>, and the test program is in <a href="fig9.htm">Figure 9</a>. Any class with an abstract method is abstract, and must be so declared, although declaring a class abstract is sufficient to prohibit objects thereof, whether it has an abstract method or not. Abstract methods must not have a body, and any method without a body must be declared abstract.</p>

<h4><FONT COLOR="#000080">Java vs. C++</FONT></H4>

<p>As in C++, in Java you cannot access private superclass members in a subclass. I used package access in the employee classes, but if you wanted to access <B>Employee</B> members in a subclass defined in another package, I would have to declare those members protected.</p>
<p>A common error made by C++ novices is to override a function without making it virtual. The problem doesn't appear until you try to access objects through a pointer or reference, and the lack of dynamic binding may go undetected for some time. Java finesses this situation by making all methods virtual by default, and should you turn off dynamic binding by applying the <B>final</B> qualifier, you can no longer override that function. It is also a nice feature to be able to explicitly declare a class abstract, instead of requiring the presence of a pure virtual function to do it.</p>
<p>Another "gotcha" for C++ novices is to confuse overloading with overriding. In the following C++ code, for example, the function <B>B::f</B> is not found when searching for a function to match the expression <B>d.f()</B>.</p>

<pre>
struct B
{
   virtual void f() {}
};

struct D : B
{
   void f(int) {}
};

int main()
{
   D d;
   d.f();     // error
   d.f(1);    // OK
}
</pre>

<p>A function in a derived class hides all functions of the same name in the base class, regardless of signature, because C++ follows the following scheme for name lookup:</p>
<p>1.  Find a scope that contains the name of the function, starting in the current class, then going to any enclosing scopes if necessary.</p>
<p>2.  Once the name is found, do overload resolution to find a matching function.</p>
<p>3.  If a function was found, see if its access allows you to use it in the current context.</p>
<p>Since there is an <B>f</B> in <B>D</B>, step 1 is satisfied but step 2 fails, since there is no <B>f()</B> in <B>D</B>. Java, on the other hand, allows overloading and overriding to coexist (see <a href="fig10.htm">Figure 10</a>).</p>
<p>A C++ feature missing in Java is different types of inheritance. The <B>extends</B> keyword is all you get, and that means the same thing as public inheritance in C++ (i.e., "is-a" inheritance). It is nice to sometimes to use private inheritance for implementation reuse in C++, but the need for it is rare, and using an embedded object instead is a suitable workaround. I have never seen a need for protected inheritance in C++. (I think it's just there for theoretical reasons.)</p>
<p>Perhaps the biggest difference between Java and C++ with respect to objects is that Java does not support multiple inheritance &#151; a class can extend only one class. At first blush this may seem quite restrictive, but while Java doesn't support multiple implementation inheritance, it does support multiple inheritance of interfaces. If you've ever had to plumb the depths of virtual base classes (in my opinion the darkest corner of C++), you might appreciate this restriction. In my next installment I'll cover interfaces in Java, but suffice it to say for now that a class in Java can implement any number of interfaces, which is the most common use of multiple inheritance in C++ anyway. Java attempts to provide support for object-oriented programming with a balance of safety, simplicity, and utility. It does a pretty good job.</p>

<p><i><B>Chuck Allison</B> is a Senior Technical Advisor at Ingenix, a leading healthcare information company. He has been a contributing member of J16, the C++ standards committee, since 1991, and designed the Standard library's <B>bitset</B> class template. His book, <I>C &amp; C++ Code Capsules</I> (Prentice-Hall, 1998), is filled with practical, ISO-compliant code. He is currently the Java columnist and consulting editor for the <I>C/C++ Users Journal.</I> Contact Chuck at <B>cda@freshsources.com</B>.</i></p>


<h4><a href="../../../source/1999/nov99/allison.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY>
<HR>
</HTML>
