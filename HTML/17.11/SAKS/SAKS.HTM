<HTML>   
     <HEAD>
<TITLE>November 1999/C++ Theory and Practice</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocnov.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">C++ Theory and Practice: Standard C++ as a High-Level Language?</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Dan Saks</FONT></H3>

<BLOCKQUOTE>
<p>Is C++ a high-level language with low-level roots, or a low-level language with high-level aspirations? Dan gives us his view.</p>
</BLOCKQUOTE>
<HR>

<BLOCKQUOTE>

<p><B>Copyright &copy; 1999 by Dan Saks</B></p>
<p>By the time you read this, my son Ben will be completing his second season running cross-country for Springfield Shawnee High School. I enjoy watching him run. I really want him to do well at his sport and have fun at the same time.</p>
<p>Ben had a disappointing spring track season marred by injury. After resting for about a month after the track season, we agreed that it would be fun for me to coach him back into shape for cross-country. Really. He thought it would be fun, too. Recognizing that training techniques have changed considerably in the 20 some odd years since I competed in school, I talked to a few coaches and scoured my local library for books on running that post dated the running boom of the late 1970's.</p>
<p>One of the books I read had a section on the relationship between runner and coach. It draws from the words of Arthur Lydiard, a prominent track coach from New Zealand.  Recognizing the individualism of distance runners, Lydiard urged runners to hold their coaches accountable:</p>

<BLOCKQUOTE>
<p>If the coach says, "Okay, go out and run 20 times 400 meters," you say, "Coach, why am I doing this? What physiological effects is this going to have on me?" If the coach can't tell you, then go out and get another coach, because this one is going to hurt you. It's your career. " <a href="#1">[1]</a> </p>
</BLOCKQUOTE>

<p>I suspect that many coaches, particularly in regimented sports such as American football, might not take too kindly to such questioning. ("Okay, smartass, drop and give me 20.") However, I found this passage gratifying. This has been my attitude for quite some time, not just toward coaching, but toward teaching. Especially when it comes to C++.</p>
<p>C++ has a lot of details. Despite my best efforts in the classroom to keep my presentation of language issues grounded in program design issues, the big picture gets lost once in a while. Consequently, I tell my students that they should never hesitate to ask, "Why are you telling me this? How is this going to help me write better C++ programs?"</p>
<p>I have the same attitude toward my writing. And well I should, because one of our readers is holding <I>CUJ</I> in general, and me in particular, accountable. Since I suspect he's not alone in his concerns, I've elected to respond here. Besides, it gives me an opportunity to address a related issue I've been itching to discuss.</p>

<p><I>Dear Editor,</p>
<p>Considering that Bjarne Stroustrup's article "Learning Standard C++ as a New Language" (</I>CUJ, <I>May 1999) was quite visionary, I think</I> CUJ <I>itself is full of examples of a paradigm that is only very slowly shifting towards C++. Dan Saks' "Isolating Design Decisions, Part 1" (</I>CUJ, <I>August 1999) is a typical example. The article has a very interesting topic, but he fails to show us how to do things easier and in a state-of-the-art manner.</p>
<p>He mentions that he could declare the cross-reference table as:</I></p>

<pre>
typedef map &lt; string, set&lt;unsigned&gt; &gt;
   table;
</pre>

<p><I>This would actually replace more than 100 lines of his own code, but he decides to consider these possibilities "not just yet." Also the main file of his sample code is full of C-- instead of C++ style. Why is he not using standard functions like </I><B>istream::getline</B><I> to read a line of text? Why is he not using C++ strings?</p>
<p>Writing something like:</I></p>

<pre>
while (isalnum(c = fgetc(stdin)) ||
       c == '_'))
</pre>

<p><I>is (without reason) very hard to understand for not so experienced programmers. His whole function </I><B>get_token</B><I> is a typical example of "C" code, that is &#151; yet &#151; small but not well designed. This is of course OK for a homegrown utility, but not for published code in a programmer's magazine.</p>
<p>With Standard C++ done right, the whole code would be less than half the size of the code that Dan is showing us.</p>
<p>I am working on software projects with hundreds of thousands of lines of code. People working on those projects may &#151; if they do it right &#151; write modules in 5,000 very well structured lines, or they might write the same module in 15,000 lines, that I, and sometimes they, do not understand. We read </I>CUJ<I> because we want to learn how to make our work better, quicker, and our code smaller, faster, and easier to maintain. I usually appreciate many of the things </I>CUJ<I> points out, but there is much too much C code in it that does not show us how to make things easier, but in the opposite unreasonably difficult.</p>
<p>Yours sincerely,</p>
<p>Stefan Woerthmueller<br>
Application Programming, Music &amp; Emotions Unlimited</I><br>
<B>StefanWoe@compuserve.com</B></p>

<p>The letter poses a few interesting questions. Let's get the minor one out of the way first namely, why didn't I use <B>istream::getline</B> to read a line of text?</p>

<h4><FONT COLOR="#000080">Scanning Techniques</FONT></H4>

<p>The cross-reference program reads identifiers (as in C or C++) from standard input. In addition to scanning identifiers, the program must note the number of the line on which each identifier appears. If you try using an istream extractor to read one identifier at a time, as in:</p>

<pre>
cin &gt;&gt; token;
</pre>

<p>you'll miss the newlines. By default, extractors skip over newlines along with all other whitespace characters.</p>
<p><B>istream::getline</B> ought to solve that problem. You can use <B>getline</B> to read a line at a time into a string. Then you can use an <B>istringstream</B> to extract tokens from the line, as in:</p>

<pre>
unsigned ln = 0;
string id, line;
while (getline(cin, line))
    {
    ++ln;
    istringstream iss(line);
    while (iss &gt;&gt; id))
        // place id and ln into the cross-reference
    }
</pre>

<p>The problem here is that the extraction:</p>

<pre>
iss &gt;&gt; id
</pre>

<p>interprets a token as any sequence of characters separated by whitespace. Given the input line:</p>

<pre>
get_token(std::string &amp;s)
</pre>

<p>the extractor finds:</p>

<pre>
get_token(std::string
</pre>

<p>as the first token and:</p>

<pre>
&amp;s)
</pre>

<p>as the second. This does not satisfy the program's requirements. The tokens on the line are supposed to be:</p>

<pre>
get_token
std
string
s
</pre>

<p>Neither <B>&lt;iostream&gt;</B> nor <B>&lt;stdio.h&gt;</B> has formatted input functions that will scan identifiers directly. You have to write a function to do it.</p>
<p>One approach is to read a line at a time and scan the identifiers from each line. Another approach is to regard newline characters, as well as identifiers, as tokens, and scan them directly from the input stream. My <B>get_token</B> (<a href="list1.htm">Listing 1</a>) uses the latter. It scans standard input for either an identifier or a newline, and ignores everything else. This is a pretty classic approach to input scanning. Although I admit the expression in:</p>

<pre>
while (isalnum(c = fgetc(stdin)) ||
       c == '_')
</pre>

<p>is a little more complicated than I'd like it to be, I don't see any way to rewrite it without complicating other parts of the program. And I don't think using <B>&lt;iostream&gt;</B> instead of <B>&lt;stdio.h&gt;</B> makes much difference here.</p>
<p>Now to the larger concern that <I>CUJ,</I> and especially I, have been too slow to embrace C++ as a truly high-level language.</p>

<h4><FONT COLOR="#000080">Shifting Gears Too Slowly</FONT></H4>

<p>In his article, Stroustrup advocates an approach to learning and teaching C++ with a heavy emphasis on using libraries, especially the Standard C++ library, from the outset. In particular, he advises using <B>&lt;iostream&gt;</B> in preference to <B>&lt;stdio.h&gt;,</B> using the string class in preference to character arrays, and using vector and iterator classes in preference to the language's native arrays and pointers. Coverage of lower- level language and library facilities should come later.</p>
<p>I whole-heartedly agree with some of Stroustrup's points, but I have serious reservations about others. I'll elaborate shortly. But regardless of my position, this is, after all, the <I>C/C++ Users Journal,</I> not just the <I>C++ Users Journal.</I> We cater to C as well as C++ programmers over a wide range of ability and experience. In articles that demonstrate techniques of interest to both C and C++ programmers, it makes perfect sense to use the features that are common to both languages.</p>
<p>I skimmed over the <I>CUJ</I> issues from May through August 1999 to find C++ articles that used a "retro" style (using classes, but not the newer features of the Standard C++ library). It wasn't obvious to me that any articles other than mine were guilty of this offense. So what's my excuse for not using streams, strings, and all that other good stuff?</p>
<p>My series on isolating design decisions is actually the continuation of a thread I started well over a year ago. It's been a while since I explained my motives for choosing this example, so I guess I should explain them again.</p>
<p>I started writing regularly for this magazine in 1991. In those days, my column was entitled "Stepping Up to C++." My first few articles were a series in which I transformed a C program into an object-oriented C++ program. That program was the cross-reference generator.</p>
<p>In the years since, C++ changed and so did I. In looking back at that early series, I found a number of things in the program that I'd do differently. I found other things that, while I'd do them the same, I'd explain them differently. Thus, I decided to revisit the example.</p>
<p>Why am I so fond of this particular programming example?  My focus is on how to use C++ to build large systems by dividing those systems into simpler abstractions. For this, I need a programming example that's complicated enough so that you can see if the chosen techniques really do make it simpler. On the other hand, the program has to be small enough to fit into the magazine format. I think the cross-reference generator strikes a nice balance.</p>
<p>As I explained in the article that the letter criticizes, I started with an existing program rather than one that I wrote from scratch because I didn't want to spend time developing algorithms and data structures. Rather, my focus is on wrapping those algorithms and data structures into tidy abstract bundles.</p>
<p>In 1991, C++ had no standard library. There wasn't a standard string class, and there certainly weren't any containers and iterators. There wasn't any question about my failure to use them. Now that we have these library components, you can ask why I'm not using them. I think I explained that, but I'll try to say it more clearly.</p>
<p>The standard library's containers are very useful, but they aren't the solution to every problem. The library doesn't provide data structures such as circular lists, skip lists, or graphs. And the containers that are in the library might not be fast enough or compact enough for some applications. In short, the standard library does not eliminate the need to write your own classes and data structures. Not by a long shot. When you do write you own, you should think carefully about packaging those structures as abstract types. C++ gives you lots of packaging options, and it's those options I want to discuss.</p>
<p>Would it be better for me to choose a programming example with data structures that don't map so obviously into library components? Maybe, if I could find one that's not too big and not platform specific. If any of you have ideas for programs on the scale of the cross-reference program that use different data structures, and you're willing to share them with me, I'd be delighted to hear from you.</p>
<p>Did I really have to start this programming example as a C program? Wouldn't it work just as well if I had used streams instead of C files? As I explained last year <a href="#3">[3]</a>:</p>

<BLOCKQUOTE>
<p>I debated whether to start with a C++ program rather than a C program, but decided to stick with C. C provides a well defined starting point for this exercise. If I had started with a C++ program, I'd have had a hard time deciding which C++ features to use initially. For example, the iostream library uses parameters of reference types. If I had used iostream instead of stdio, should I have also used references extensively? The iostream components are members of namespace <B>std</B>. Had I used iostream, should I have used the explicitly qualified names for the components, or should I have used using directives? It is my intent to discuss these issues, but I want to take them one at a time.</p>
</BLOCKQUOTE>

<h4><FONT COLOR="#000080">Performance Issues</FONT></H4>

<p>I have another reason for starting my analysis with a C program, which I haven't explained until now; namely, I want to use the C program as a reference for measuring the cost of various abstraction techniques.</p>
<p>When I worked with the cross-reference program back in 1991, I found that restructuring the C program into an object-oriented C++ program increased the size of the executable code by less than two percent and had a negligible effect on execution speed. With all the changes in the C++ language and library over the past several years, I've heard a lot of programmers express doubt that a well written class-based C++ program could still compete favorably with its C counterpart. I want to find out for myself.</p>
<p>Although I have not completely rewritten the cross-reference program to my satisfaction, I made some measurements just to see how things are going. I compared the program I started with, which had no classes <a href="#3">[3]</a>, against the version from my last column, which has classes for cross-reference tables and for line-number sequences <a href="#4">[4]</a>. I considered both code size and execution speed.</p>
<p>Much to my chagrin, I realized that my initial version of the program used <B>new</B> instead of <B>malloc</B>, so it wasn't really a C program after all. So I cranked out a version in straight C and compiled it as such. I also produced two more versions of the cross-reference program just to gain a sense of what I might confront in future versions of the program. One version uses the cross-reference table and line-number sequence classes, but it uses streams and strings instead of C files and character arrays. The other uses the map and vector classes to implement the cross-reference table and line number sequences. (Earlier I suggested using <B>set</B>, but <B>vector</B> turns out to be faster.)</p>
<p>In summary, I compared five versions of the cross-reference program:</p>
<p>1.   a program written in Standard C, similar in style to the one appearing in exercise 6-3 of Tondo and Gimpel <a href="#5">[5]</a>,</p>
<p>2.   the program from which I started last year, identical to (1) except that it uses <B>new</B> instead of <B>malloc</B>,</p>
<p>3.   the version of the program from my last column, with classes for cross-reference tables and line number sequences, but still using C files and character arrays,</p>
<p>4.   a program just like (3), but with streams and strings,</p>
<p>5.   a program that uses maps and vectors as well as strings and streams.</p>
<p>I will examine (4) in an upcoming column. It may be a while longer until I discuss (5) in any detail, so I'll just show it to you without much comment. It appears in <a href="list2.htm">Listing 2</a>. (Actually, I do have one comment. It uses <B>getline</B> to read a line at a time and scans the tokens from each line. I did this just to try out the alternative I described earlier.)</p>
<p>I compiled each program using the latest vintage of three different C/C++ compilers for Windows 9x. (I do not want to turn this from a language feature comparison to a compiler comparison, so I won't name names. At least not yet.) I used only the default compiler options. I did not explore options for optimizing program size or speed.</p>
<p>I made the measurements on my aging HP Omnibook 5000 notebook with a 120 Mhz Pentium and 32MB RAM running Windows 95. I ran each program from the command line with a minimum of tasks running in the background. I used command-line redirection (<B>&lt;</B> and <B>&gt;</B>) to specify the input and output files. For input, I used a copy of the C++ Standard in plain text (1,951,043 characters).</p>
<p><a href="tab1.htm">Table 1</a> shows the execution times for each of the programs. <a href="tab2.htm">Table 2</a> shows the sizes the of executable (<B>.exe</B>) files for each program. Just look at the numbers and you'll see why I'm only inching my way toward using streams and strings.</p>
<p>The changes I've made to the cross-reference program so far (through version 3) have slowed the program by no more than 30%, and increased the executable file size by no more than 40% (and typically much less). That's more than I was expecting, so I want to discover what caused the increase.  Still, it's not too shabby.</p>
<p>On the other hand, adding streams and strings to the program slowed the program by at least another factor of four. With one compiler, the program ran a whopping 63 times slower than the C program. (I don't think that's a mismeasurement. It's the average of three runs, all within 3% of that average.)  Adding streams and strings increased the executable file size by anywhere from 50K to 100K bytes.</p>
<p>Using the <B>map</B> and <B>vector</B> classes on top of streams and strings apparently makes the program bigger and slower still. However, using <B>map</B> and <B>vector</B> did bring that one very slow program back from 63 times to only 23 times slower than its C counterpart.</p>
<p>I'm trying not to read too much into these numbers. Again, I have not exercised any compiler options for optimizing the code. I've only started to experiment with programming techniques that will improve the performance of container classes. It looks like I've got a bunch of interesting stuff to explore in future columns.</p>
<p>I plan to tune the programs and make more measurements. (Here's a teaser: I believe I have a technique that enables the version of the program using the map to run nearly as fast as the original C. It'll be the subject of a future column.) Nonetheless, I think these numbers explain why I've been cautious about using certain library components.</p>

<h4><FONT COLOR="#000080">Diff'rent Strokes for Diff'rent Folks</FONT></H4>

<p>In his article, Stroustrup acknowledges that there is no one right way to learn and teach C++. Nonetheless, he suggests that early emphasis on the abstractions in the C++ library is appropriate for experienced programmers as well as beginners.  Whereas this approach might be just right for beginning programmers, I have my doubts that it's practical, or even desirable, for the vast majority of on-the-job professionals.</p>
<p>Learning C++ takes time. Months, if not years. It would be wonderful if programmers who want to learn C++ could take the time off from work to study and experiment with the language. Few professionals have that luxury. At best they can take a few days, maybe a week, at a time for training, and then it's back to work. They've got to learn stuff they can apply fairly quickly else they'll forget it.</p>
<p>Beyond the time constraints, many newcomers to C++ must work with legacy code (C and/or C++), and even more must interact with legacy interfaces (APIs), especially if they develop applications for a certain popular family of desktop operating systems. Legacy interfaces traffic heavily in pointers, built-in arrays, and other low-level "C" features. If not contained by classes, that low-level stuff just worms its way into places where it doesn't belong, which is just about everywhere.</p>
<p>One of the virtues of C++ is that experienced C programmers can learn it in steps and apply it right away. If they start by learning how to use classes to encapsulate pointers and arrays, most will see the value immediately. If they start by learning to use library abstractions too far removed from what they deal with from day to day, I suspect many will have trouble applying the lessons in their work.</p>
<p>I think the essence of my disagreement with Stroustrup over learning and teaching C++ is in how each of us perceives C++.  I get the impression he thinks C++ is a high-level language, which lets you descend to lower levels as needed. I think C++ is a fairly low-level language, which lets you program at much higher levels. We don't disagree about the nature of good C++ programs, only about the focus it takes to develop them in an industrial setting.</p>
<p>If C++ were a high-level language, you could program most of the time as if the low-level stuff weren't there. I don't think you can. Even when you program with pretty high-level abstractions, the low-level stuff is lurking just below the surface waiting to sneak bugs into your program. You have to respect the low-level nature of C++ so you can keep it at bay and get on with your work.</p>

<h4><FONT COLOR="#000080">References</FONT></H4>

<p><a name="1"></a>[1]  Joe Henderson. <I>Think Fast : Mental Toughness Training for Runners</I> (Plume, 1991).</p>
<p><a name="2"></a>[2]  Dan Saks. "C++ Theory and Practice: Basing Style on Design Principles," <I>CUJ,</I> March 1998.</p>
<p><a name="3"></a>[3]  Dan Saks. "C++ Theory and Practice: Partitioning with Namespaces, Part 1," <I>CUJ,</I> April 1998.</p>
<p><a name="4"></a>[4]  Dan Saks. "C++ Theory and Practice: Isolating Design Decisions, Part 2," <I>CUJ,</I> September 1999.</p>
<p><a name="5"></a>[5]  Clovis Tondo and Scott Gimpel. <I>The C Answer Book, 2nd edition</I> (Prentice Hall, 1989).</p>

<p><i><B>Dan Saks</B> is the president of Saks &amp; Associates, which offers training and consulting in C++ and C. He is active in C++ standards, having served nearly seven years as secretary of the ANSI and ISO C++ standards committees. Dan is coauthor of <I>C++ Programming Guidelines</I>, and codeveloper of the Plum Hall Validation Suite for C++ (both with Thomas Plum). You can reach him at 393 Leander Dr., Springfield, OH 45504-4906 USA, by phone at +1-937-324-3601, or electronically at <B>dsaks@wittenberg.edu</B>.</i></p>

<h4><a href="../../../source/1999/nov99/saks.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY>
</HTML>
