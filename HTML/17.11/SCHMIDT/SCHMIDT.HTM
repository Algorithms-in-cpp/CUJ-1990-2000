<html>
<head>
<TITLE>November 1999/Uncaught Exceptions</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocnov.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Uncaught Exceptions: Paper or Plastic</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Bobby Schmidt</FONT></H3>

<BLOCKQUOTE>
<p>Where you declare things in C++ really matters as Bobby shows through several answers to readers' questions.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p><B>Copyright &copy; 1999 Robert H. Schmidt</B></p>

<p>As the mythical "they" say, be careful what you wish for...</p>
<p>I always wanted to be a professional writer full time, and now it looks as though I'll have my chance. Along with my gig for <I>CUJ,</I> I am also now a columnist and writer for MSDN (Microsoft Developer Network). My first column in their Online Voices magazine appeared this past May <a href="#1">[1]</a>.</p>
<p>Compared to writing for a print publication like <I>CUJ,</I> writing for an online magazine presents some advantages. For instance, I'm not bound to a fixed printing schedule, since online bits can be published and updated any time. I'm also not constrained by surrounding ad space, fixed column widths, or page counts. And I hope to make good use of hyperlinks to draw in related material.</p>
<p>On the other hand, so much drivel oozes into the Internet that I wonder if online publications will ever seem as authoritative or glamorous as print publications. Even though I'm fairly comfortable with Internet culture, and keep many of my technical references online, I must admit that printed books and magazines still feel more real. Then there's the whole online profit model, which I don't pretend to understand.</p>
<p>These differences are real today, but they won't be forever. I fully expect that in my lifetime the choice of "paper or plastic" publications will be largely arbitrary. Still, I wonder what we'll call a real newspaper printed only on bits &#151; a newspaperless? &#151; and, most importantly, when I'll be able to read it in the tub.</p>

<h4><FONT COLOR="#000080">First Things First</FONT></H4>

<h4><FONT COLOR="#000080">Q</FONT></H4>

<p>I have been introduced to a project in development which I will be maintaining. While reviewing the code I was assigned to I was looking at some of the criticisms by the previous programmer assigned to do the maintenance but who quit. I am having a problem with both versions: the original code and his proposed revision. This is a large project and I am including only one of the functions. The original function is called <B>getFileName</B> and the revised function is <B>getFileName1</B>. The first parameter is an input and the second is an output.</p>
<p>I am concerned about the fact that both functions are using pointers without initializing them, and secondly I am also concerned about the second function with regards to assigning the first parameter <B>fullpath</B> to the pointer variable <B>ptr</B>, which is then assigned to the argument variable <B>filename</B>. My concern is that <B>ptr</B> being a local variable will be lost and the value of the parameter <B>filename1</B> will be possibly lost after leaving the function. I have a feeling that the second function contains too many opportunities for errors. I had created a small test program to test both functions which is attached. What is your thought on this ? Thanks for your time. &#151; Joao Coelho</p>

<h4><FONT COLOR="#000080">A</FONT></H4>

<p>(I've included a slightly-reformatted version of your small program as <a href="list1.htm">Listing 1</a>.) My principle recommendation: ensure that the design and code are specified.</p>
<p>I'm guessing from their titles that the functions accept a DOS or Windows fully-qualified path name, parse out the base file name, then return that file name. I'm also guessing that the base file name is that part between the directory specification and the file extension.</p>
<p>The specification must define and constrain the domain of valid input data. For example, can the <B>fullpath</B> argument contain zero backslashes? Contiguous backslashes, as in UNC names? Forward slashes? More than one dot? A drive specifier such as <B>C:</B>? More than 255 characters?</p>
<p>I can infer some of these answers by reading and testing the code. My inference is incomplete, however, because the functions react differently to certain input strings. To see an example, test both functions with the string <B>"\\1.2.3"</B>. To see a more pathological example, test with <B>"1.2.3"</B>. Normally I'd ascribe these differences to inadequate testing; but without a specification, you can't easily craft meaningful test cases.</p>
<p>The specification must also define how the functions behave in the face of invalid data. These are C functions, so they can't throw exceptions. They could return an error signal &#151; but since they have but one outbound conduit (the <B>filename</B> parameter), they would have to add a second outbound paramater, supply a return value, or overload the meaning of <B>filename</B>.</p>
<p>Bottom line: before worrying about implementation concerns like uninitialized pointers, you first need to determine your requirements, then codify those requirements in a specification. Complete and accurate specifications mitigate or eliminate many other deficiencies. Scott Meyers and I talked about this recently, and we both agree: inadequate specification is arguably the single biggest deficiency in most programming projects.</p>

<h4><FONT COLOR="#000080">Heisenberg's Turtle</FONT></H4>

<h4><FONT COLOR="#000080">Q</FONT></H4>

<p>Hi Bobby,</p>
<p>Can you please help me with the following problem. I have posted it to various discussion forums and asked my colleagues, but no one seems to have an explanation for it.</p>
<p>I am using the VC++ compiler. I was generally going through some C++ columns and experimenting with some code. While trying to declare a class and including an object of that same class in its definition:</p>

<pre>
class A
    {
    A a1;
    };
</pre>

<p>I discovered that the compiler gave the error</p>

<pre>
'a1' : uses 'A',
which is being defined
</pre>

<p>which is quite understandable. But when I preceded the declaration with the <B>static</B> keyword:</p>

<pre>
class A
    {
    static A a1;
    };
</pre>

<p>the code compiled fine.</p>
<p>I fail to understand why making the declaration static lets the class compile. Any light on this matter is appreciated.</p>
<p>Thanking you in anticipation. &#151; Kabir Khanna</p>

<h4><FONT COLOR="#000080">A</FONT></H4>

<p>I'm turning your question around somewhat. You want to know why the compiler accepts the static version, but I'm first going to show why the compiler rejects the non-static version. I'm also going to make the question generic to both C and C++.</p>
<p>When you define a class or structure type, you explicitly and implicitly imbue that type with various properties. One of those implicit properties is size. Consider this small program:</p>

<pre>
#include &lt;stdio.h&gt;
     
struct X;
typedef struct X X;
     
struct X
    {
    char m1;
    };
     
int main(void)
    {
    printf("%d\n", (int) sizeof(X));
    return 0;
    }
</pre>

<p>which you can build in either language. We know that <B>sizeof(X)</B> is at least the combined size of its parts, which in this case means <B>sizeof(m1)</B>. Since the Standards define <B>sizeof(char)</B> to be exactly 1, we infer that <B>sizeof(X)</B> is at least 1.</p>
<p>To mimic your original problem, add a second data member:</p>

<pre>
struct X
    {
    char m1;
    X m2;
    };
</pre>

<p>We already know that the compiler will reject this definition. But let's assume, for the sake of argument, that the compiler accepts this definition. What is the size of <B>X</B> now?</p>
<p>As before, the size of the entire structure is at least the combined size of its data members. The algebra for our example is</p>

<pre>
sizeof(X) &gt;= sizeof(m1) + sizeof(m2)
</pre>

<p>Substituting for <B>sizeof(m1)</B>, which we know to be a constant 1:</p>

<pre>
sizeof(X) &gt;= 1 + sizeof(m2)
</pre>

<p>The only variable left is <B>sizeof(m2)</B>. Since every complete object has non-zero size <a href="#2">[2]</a>,</p>

<pre>
sizeof(m2) &gt;= 1
</pre>

<p>By implication,</p>

<pre>
sizeof(X) &gt;= 1 + 1
</pre>

<p>or</p>

<pre>
sizeof(X) &gt;= 2
</pre>

<p>Remember, though, that <B>m2</B> is of type <B>X</B>. Since we have shown that <B>sizeof(X) &gt;= 2</B>, we also know that <B>sizeof(m2) &gt;= 2</B>. In our original relationship</p>

<pre>
sizeof(X) &gt;= sizeof(m1) + sizeof(m2)
</pre>

<p>we can now substitute</p>

<pre>
sizeof(X) &gt;= 1 + 2
</pre>

<p>or</p>

<pre>
sizeof(X) &gt;= 3
</pre>

<p>I hope you can see where this is going. The pattern is recursive, and <B>sizeof(X)</B> will approach infinity. Long-time Diligent Readers might recognize this phenomenon as "turtles all the way down." <a href="#3">[3]</a></p>
<p>As a remedy for such reptilian excess, the Standards disallow definitions of objects having incomplete type. If you want to define an object, that object's type must be complete at the point of the definition. If the act of defining an object changes the object type's size, that type is clearly not yet complete <a href="#4">[4]</a>.</p>
<p>Now to your original question. In the C++ definition</p>

<pre>
class A
    {
    A a; // error
    };
</pre>

<p>the member <B>a</B> is defined within class <B>A</B>. But in the variation</p>

<pre>
class A
    {
    static A a; // OK
    };
</pre>

<p>the member <B>a</B> is declared &#151; but not defined &#151; within class <B>A</B>. The actual storage for <B>a</B> exists outside any <B>A</B> object. From the C++ Standard (subclause 9.4.2, "Static data members"):</p>

<BLOCKQUOTE>
<p>A <B>static</B> data member is not part of the subobjects of a class. There is only one copy of a <B>static</B> data member shared by all the objects of the class.<br>
The declaration of a <B>static</B> data member in its class definition is not a definition and may be of an incomplete type other than cv-qualified <B>void</B>.</p>
</BLOCKQUOTE>

<p>Thus, the size of <B>A</B> is in no way dependent on the size of <B>a</B>. Further, by the time <B>a</B> is actually defined:</p>

<pre>
class A
    {
    static A a; // declaration OK
    };
     
A A::a; // definition OK
</pre>

<p>the type <B>A</B> is complete. Net result: both the <B>a</B> declaration (within <B>A</B>) and the <B>a</B> definition (outside of <B>A</B>) are valid.</p>

<h4><FONT COLOR="#000080">Typedefs and Templates</FONT></H4>

<h4><FONT COLOR="#000080">Q</FONT></H4>

<p> Hi,</p>
<p>This is my first time programming in C++/Unix and I have a combined function pointer and template function. The compiler complains about the following code on the the typedef line:</p>

<pre>
template&lt;class T&gt;
struct node
    {
    };
     
// error on following line
typedef int (*func_ptr)(node&lt;T&gt;);
</pre>

<p>Now this is the C phrasing for declaring a function pointer and I thought I would mix it with the C++ template idea &#151; but all the syntactic variations I tried come up with one complaint or another. Is there a better way to type define a function pointer that has template arguments?</p>
<p>Thanks. &#151; Jason Balkman</p>

<h4><FONT COLOR="#000080">A</FONT></H4>

<p>(The example above is greatly simplified from your original.) While you don't say so explicitly in your email, I assume you want</p>

<pre>
func_ptr&lt;char&gt; p;
</pre>

<p>to behave as if it were written</p>

<pre>
int (*p)(node&lt;char&gt;);
</pre>

<p>Unfortunately for you, typedefs can't have [template?] arguments. You can get close with</p>

<pre>
#define func_ptr(T) \
    int (*p)(node&lt;T&gt;)
     
func_ptr(char) p; // OK
</pre>

<p>You can also instrument the <B>node</B> template to expose the typedef:</p>

<pre>
template&lt;typename T&gt;
struct node
    {
    typedef int (*func_ptr)(node&lt;T&gt;);
    };
     
node&lt;char&gt;::func_ptr p; // OK
</pre>

<p>While compact, this solution creates a tight coupling between <B>node</B> and <B>func_ptr</B>. <B>node</B> should not have to change simply because another type wants to reference it. To remove this coupling, you can move <B>func_ptr</B> into a second template:</p>

<pre>
template&lt;typename T&gt;
struct node
    {
    };
     
template&lt;typename T&gt;
struct node_
    {
    typedef int (*func_ptr)(node&lt;T&gt;);
    };
     
node_&lt;char&gt;::func_ptr p;
</pre>

<h4><FONT COLOR="#000080">I Do Declare!</FONT></H4>

<h4><FONT COLOR="#000080">Q</FONT></H4>

<p>While writing some code I stumbled upon a compile-time error which has me a little baffled. The basic structure of the code is as follows:</p>

<pre>
class A
    {
    };
     
class B
    {
public:
    B(A const &amp;);
    };
     
void f(B const &amp;);
     
int main()
    {
    A a;
    f(B(a)); // LINE1 - OK
    B(a);    // LINE2 - error
    }
</pre>

<p><B>LINE1</B> compiles fine, while <B>LINE2</B> produces the following compile-time error:</p>

<pre>
'a' : redefinition;
different basic types
</pre>

<p>Furthermore, while my Unix boxes also state the problem with redefinition, they also suggest that <B>a</B> has no linkage.</p>
<p>Is it not true that the statement <B>B(a)</B> should produce a temporary unnamed object? I have returned objects from functions using the "return value optimization" many times with no problems.</p>
<p>Could the problem be that the compiler sees <B>LINE2</B> as an ambiguous expression? The reason I suggest this is because the code compiles fine when <B>LINE2</B> is changed to <B>(B)a</B> , hence forcing a cast. In other words, it may be that the compiler cannot decide whether <B>LINE2</B> is a cast of the object <B>a</B> to type <B>B</B>, or whether it is an instantiation of a temporary (and therefore unnamed) object of type <B>B</B>. &#151; Philip C. Couchara</p>

<h4><FONT COLOR="#000080">A</FONT></H4>

<p>Your example does indeed show a lovely syntactic ambiguity in C++. Given that <B>B</B> is a type name, you can interpret the statement</p>

<pre>
B(a);
</pre>

<p>as either</p>
<p>1.  an expression converting object <B>a</B> to type <B>B</B>, or </p>
<p>2.  the declaration of object <B>a</B> having type <B>B</B>, with redundant parentheses around the <B>a</B>.</p>
<p>You want the compiler to choose Interpretation 1 (conversion expression), but the evidence suggests that the compiler actually chooses Interpretation 2 (declaration). Which is correct? Interpretation 2. Why? Because the C++ Standard says so.</p>
<p>In subclauses 6.8 and 8.2, the Standard spells out tie-breaking rules designed to resolve ambiguities like <B>B(a)</B>. Put simply, whenever the compiler considers a construct that could be either an expression or a declaration, the compiler interprets the construct as a declaration. Furthermore, other than determining if the affected names are type names, the compiler considers only syntactic properties to disambiguate the statement.</p>
<p>Since <B>B</B> is a type name, the compiler can potentially interpret <B>B(a)</B> as either an expression or a declaration. According to the tie-breaking rules, the compiler chooses to interpret <B>B(a)</B> as a declaration &#151; even though that interpretation leads to the redefinition error that you found.</p>
<p>Now consider the correctly-compiling line</p>

<pre>
f(B(a));
</pre>

<p>Because <B>f</B> is not a type name, the compiler cannot interpret this statement as a declaration, but instead reckons <B>f(B(a))</B> as a function call expression. Because no ambiguity exists, the tie-breaking rules of subclauses 6.8 and 8.2 don't come into play.</p>

<h4><FONT COLOR="#000080">Notes</FONT></H4>
<p><a name="1"></a>[1]  <B>&lt;http://msdn.microsoft.com/voices/deep.asp&gt;</B></p>
<p><a name="2"></a>[2]  This is true even for empty objects. See C++ Standard subclause 1.8 ("The C++ object model").</p>
<p><a name="3"></a>[3]  For the etymology of this phrase, check out my very first <I>CUJ</I> column, in the November 1995 issue.</p>
<p><a name="4"></a>[4]  Given both this observation and the current design pattern vogue among C++ cognoscenti, I hereby brand this design the Heisenberg Turtle Pattern. You read it here first.</p>

<p><i><B>Bobby Schmidt</B> is a freelance writer, teacher, consultant, and programmer. He is also an alumnus of Microsoft, a speaker at the Software Development and Embedded Systems Conferences, and an original "associate" of (Dan) Saks &amp; Associates. In other career incarnations, Bobby has been a pool hall operator, radio DJ, private investigator, and astronomer. You may summon him on the Internet via <B>rschmidt@netcom.com</B>.</i></p>


<h4><a href="../../../source/1999/nov99/schmidt.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY>
</HTML>
