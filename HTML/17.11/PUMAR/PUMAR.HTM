<HTML>   
     <HEAD>
<TITLE>November 1999/A Concise Method For Evaluating Derivatives</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocnov.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Scientific</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">A Concise Method For Evaluating Derivatives</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Ronald E. Huss, Mark A. Pumar, and Robert L. Rudin</FONT></H3>

<BLOCKQUOTE>
<p>Is your differential calculus a bit rusty? Here's a class that can lend a hand.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<h4><FONT COLOR="#000080">Introduction</FONT></H4>

<p>The need to evaluate derivatives is often encountered in solving a wide variety of scientific and numerical problems. Applications and algorithms for resolving nonlinear algebraic equations, two-point boundary-value problems, integral equations, and nonlinear differential equations (to name a few), usually require evaluating the first, second, and sometimes higher derivatives of the equations of interest. In many cases, these equations are expressed in terms of sums and products of the standard transcendental functions: sine, cosine, logarithm, exponential, etc. Except for the most trivial cases, finding symbolic expressions for the first- and, especially, second-order derivatives is a time-consuming and error-prone task.</p>
<p>With the advent of sophisticated symbolic manipulation packages, the difficult task of finding expressions for derivatives has been ameliorated by use of software. However, transferring and translating the symbolic outputs of such applications into algorithmic code &#151; in C, for example &#151; is still quite error-prone. Even when completed and debugged, the resulting code often contains multiple lines of code containing the sums and products of numerous math library functions for each derivative. Such code is usually, at best, less than illuminating when related back to the defining problem. At worst, it is very difficult to modify and maintain.</p>
<p>Applying the chain and product rules of calculus <a href="#1">[1]</a> greatly simplifies the evaluation of complicated derivatives. The chain rule relates the derivative of a composite function, <I>f(x) = g(h(x)),</I> to the derivatives of the individual functions:</p>

<p><I>f' = dg(h(x))/dx = (dg/dh)(dh/dx)</I></p>

<p>where <I>f, g,</I> and <I>h</I> are functions and <I>x</I> is the independent variable. The product rule relates the derivative of the product of two functions <I>f(x) = g(x)h(x)</I> to the sum of the products of the functions and their derivatives:</p>

<p><I>f' = gh' + hg'</I></p>

<p>Instead of finding a symbolic expression for the more complicated composite function, the chain and product rule can be employed to express this derivative in term of the sums and products of the derivatives of the simpler constituent functions. This fact was first realized by Wengert <a href="#2">[2]</a> and later by Kalaba et. al. [<a href="#3">3</a>-<a href="#5">5</a>] who refined and demonstrated this result in FORTRAN and BASIC. Kalaba gave the name FEED, an acronym for Fast and Efficient Evaluation of Derivatives, to this technique. Unfortunately, languages like FORTRAN and BASIC cannot fully take advantage of the power of these rules. The symbolic derivatives of the constituent functions must still be determined and explicitly placed in the code. This process is error prone and obscures the underlying equations. Consider the simple case:</p>

<p><I>f(x) = xe<SUP>x</SUP></I></p>

Let <I>g(x) = x</I> and <I>h(x) = e<SUP>x</SUP></I>. Then applying the product rule:</p>

<p><I>f' = gh' + hg' = xe<SUP>x</SUP> + e<SUP>x</SUP></I></p>

<p>Because the derivative of the exponential function is itself the exponential function, it is not immediately obvious which terms in the above expression correspond to <I>g, h, g',</I> and <I>h'.</I> If <I>f</I> is modified to include a minus sign in the exponential, <I>f(x) = xe<SUP>-x</SUP></I>, then how is the expression for its derivative affected? This problem is further compounded if the expression for the derivative is regrouped:</p>

<p><I>f' = (x + 1)e<SUP>x</SUP></I></p>

<p>Clearly, these problems are magnified as <I>f</I> becomes more complex. With languages like FORTRAN, all of these difficulties are either directly or indirectly attributable to the inability to overload the fundamental operations of addition and multiplication. C++ removes this difficulty, and makes it possible to write a small class that encapsulates the basic properties of derivatives by overloading the arithmetic operators. This class, called <B>CFeed</B>, allows complex derivatives to be expressed conveniently and naturally within the source code of an algorithm or analysis program. In addition, it provides an excellent and meaningful example of operator overloading in C++.</p>

<h4><FONT COLOR="#000080">The CFeed Class Design</FONT></H4>

<p>The <B>CFeed</B> class is designed to encapsulate the expression of complex derivatives in terms of the derivatives of the simpler fundamental math functions. These functions include the trigonometric functions (sine, cosine, tangent) and their inverses (arcsine, arccosine, arctangent), the hyperbolic trigonometric functions (sinh, cosh, tanh), the exponential functions (exp, pow) and their inverses (log, log10), and the square root function. In addition, the behavior of the derivatives of these functions is also encapsulated by the class.</p>
<p>The class determines derivative behavior by applying the product and chain rules of calculus. If <I>f, g,</I> and <I>h</I> are represented by <B>CFeed</B> objects and <I>f = gh</I> or <I>f = g(h),</I> then the derivatives of <I>f</I> are determined automatically by the product or chain rule. The <B>CFeed</B> class encapsulates this behavior via operator overloading so that the mere inclusion of the statement:</p>

<pre>
f = g*h;  
</pre>

<p>or</p>

<pre>
f = g(h);
</pre>

<p>in the source code yields all the derivative for the function <I>f</I>. This is accomplished by overloading not only the arithmetic operators (<B>+</B>, <B>-</B>, <B>*</B>, <B>/</B>) but also the assignment (<B>=</B>) and call (<B>()</B>) operators. In addition, class <B>CFeed</B> declares the fundamental math library functions as friends, so that statements like:</p>

<pre>
g = exp(x);
</pre>

<p>and</p>

<pre>
h = sin(x);
</pre>

<p>are valid and correct within the source code. This permits the natural and convenient expression of complicated functions (and their derivatives) in terms of the basic functions contained in the math library.</p>

<h4><FONT COLOR="#000080">The CFeed Class</FONT></H4>

<p>The <B>CFeed</B> class consists of four data members, two constructors, a destructor, a size function, and overloaded operators as shown in <a href="fig1.htm">Figure 1</a>. The transcendental math functions in the standard math library (<B>&lt;math.h&gt;</B>) are declared as friends of this class. With the exception of its constructor, destructor, and size function, all the member functions of this class are overloaded operators. The <B>CFeed</B> class supports extension through inheritance by declaring all data members as protected and all function members as public. It supports output access to data members through <B>operator()</B> and <B>operator&lt;&lt;</B>. Input access is provided only through constructors. We have compiled and tested the source code under Windows NT, Windows 95, and Unix. We used both Sun and SGI machines for Unix testing.</p>

<h4><FONT COLOR="#000080">CFeed Data Members</FONT></H4>

<p>The <B>CFeed</B> class contains four data members:</p>
<UL><LI><B>m_N</B> represents the number of independent variables; </LI>
<LI><B>m_f</B> (type <B>unsigned long</B>) holds the base function value; </LI>
<LI><B>m_df</B> (type <B>double *</B>) holds the first partials; </LI>
<LI><B>m_ddf</B> (type <B>double *</B>) holds the second partials.</LI></UL>
<p>As explained in the conclusion, <B>CFeed</B> does not include derivatives of order three or greater. The "size" of a <B>CFeed</B> variable is the number of independent variables in the encapsulated function. Since the number of independent variables determines the number of first- and second-order partial derivatives, <B>m_N</B> gives the sizes for the first- and second-partial derivative arrays, <B>m_df</B> and <B>m_ddf</B>. The size of these arrays are <B>m_N</B> and <B>m_N*m_N</B>, respectively. Strictly speaking, the size of <B>m_ddf</B> need only be <B>m_N*(m_N+1)/2</B> since the order of the derivatives in the second partials is usually unimportant; however, <B>m_ddf</B> is allocated with length <B>m_N*m_N</B> to simplify the code and provide for the more general case. The additional memory required is insignificant for most practical applications, in which <B>m_N</B> is unlikely to be much greater than four.</p>

<h4><FONT COLOR="#000080">CFeed Function Members</FONT></H4>

<p>The class function members consist almost exclusively of overloaded operators. These operators provide the core functionality of the class and consist of the standard arithmetic operators: addition, subtraction, multiplication, and division. In addition, <B>operator()</B> is overloaded to provide access to data members and to support, in a natural way, the chain rule. The remaining functions consist of constructors, a destructor, a size function, and equality operators, as well as non-member friend functions. Each function group is discussed in detail below. <a href="fig2.htm">Figure 2</a> shows the significant member functions of the class for each of these categories. You'll find a complete listing at the <I>CUJ</I> web site listed on page 3.</p>

<h4><FONT COLOR="#000080">Constructor/Destructor Group</FONT></H4>

<p>Two constructors are defined for class <B>CFeed</B>. The first is the default constructor:</p>

<pre>
CFeed::CFeed
   (
    unsigned long N = 0,
    double f = 0,
    double *df = 0,
    double *ddf = 0
   );
</pre>

<p>This constructor supplies zero as the default assignment to each argument. The first argument is the variable size (i.e., the number of independent variables), the second is the base function value. The inputs <B>df</B> and <B>ddf</B> are pointers to arrays or allocated memory of size <B>N</B> and <B>N</B> squared, respectively. The default constructor checks that these pointers are non-zero and assigns their contents to <B>m_df</B> and <B>m_ddf</B>, which are internally allocated.</p>
<p>The constructor does not check for the successful allocation of memory for <B>m_df</B> and <B>m_ddf</B>; the code assumes that the C++ <B>new_handler</B> mechanism exists and has been properly initialized before any <B>CFeed</B> class instances are declared or allocated. This memory allocation strategy is employed throughout the code.</p>
<p>The second constructor is the class constructor:</p>

<pre>
CFeed::CFeed(CFeed &amp;feed);
</pre>

<p>which initializes one <B>CFeed</B> class instance with another. Again, memory is internally allocated for <B>m_df</B> and <B>m_ddf</B>.</p>
<p>The class destructor frees memory allocated for <B>m_df</B> and <B>m_ddf</B> and zeros all the data members. Zeroing of data members is employed internally in the class to determine if memory has been allocated for the partial derivative arrays. This helps prevent attempts to access memory that has not been allocated in the class member functions. The size of these members can be altered explicitly or implicitly by most of the other operators in the class (see below).</p>
<p>The assignment operator is part of the constructor/destructor group; it is used to set one <B>CFeed</B> object equal to another. This operator deallocates the memory associated with <B>m_df</B> and <B>m_ddf</B> and reallocates memory to these pointers corresponding to the size of the assignment. The two constructors and <B>operator=</B> are the only three functions in the class that explicitly allocate memory. However, since these functions are used internally in most of the other operators, memory is implicitly allocated and deallocated in most the remaining operators.</p>

<h4><FONT COLOR="#000080">Arithmetic Group</FONT></H4>

<p>This group consists of <B>operator+</B>, <B>operator+=</B>, <B>operator-</B>, <B>operator-=</B>, <B>operator*</B>, <B>operator*=</B>, <B>operator/</B>, and <B>operator/=</B>. Each operator is overloaded two ways to handle operations between <B>CFeed</B> objects and <B>double</B>s. The <B>operator+=</B>, <B>operator-=</B>, <B>operator*=</B>, and <B>operator/=</B> contain the code that performs the core functionality for each operator; the remaining operators use these operators to accomplish their tasks in three to five lines of code. As such, the "<B>X=</B>" operators form the core of the arithmetic operator class code.  This code is similar for each operator.</p>
<p>Arithmetic operations on <B>CFeed</B> objects result in a <B>CFeed</B> object whose size is equal to the size of the largest of the two operands. This reflects that fact that if <I>h(x,y)</I> is a function of two independent variables and <I>g(x,y,z)</I> is a function of three independent variables, then their sum or product, <I>f(x,y,z),</I> is a function of three independent variables. As such, the first task in any arithmetic operator is to determine the size of the result. This is accomplished by the following code fragment at the beginning of each of the core operators:</p>

<pre>
CFeed THIS(*this);
if(m_N &lt; feed.m_N)
   *this = feed;
</pre>

<p>The first line defines a temporary <B>CFeed</B> object that is a copy of the calling object. The second and third lines change the size of the first operand by equating it to the second operand if the second operand is larger. The remaining code uses the temporary <B>THIS</B> object and the second operand, <B>feed</B>, to compute the result and store it in the enlarged space. Note the first and third lines in the code fragment involve the constructor and equality operator, which in turn allocate and deallocate memory using <B>new</B> and <B>delete</B>. Thus the core arithmetic operators implicitly manage memory.</p>

<h4><FONT COLOR="#000080">Special Operations Group</FONT></H4>

<p>This group contains two operators: <B>operator-</B> and <B>operator()</B>. The minus operator is overloaded to provided a unary minus or negation for the class. This is one of the few operators that does not involve memory management. It essentially consists of a double nested <B>for</B> loop that negates each data member in the class.</p>
<p>The chain rule is implemented using <B>operator()</B>. If <B>g</B> is a <B>CFeed</B> object of size one and <B>h</B> is a <B>CFeed</B> object of, say, size two, then <B>f = g(h)</B> is a <B>CFeed</B> object of size two and is the composite of <B>g</B> and <B>h</B>. Note: <B>operator()</B> assumes that its associated object is of size one; it uses only the first elements of the <B>m_df</B> and <B>m_ddf</B> arrays and ignores any additional values. A size zero object returns a copy of itself.</p>

<h4><FONT COLOR="#000080">I/O Group</FONT></H4>

<p>The I/O group also contains two functions. The member function <B>size</B> simply returns the size of the variable, <B>m_N</B>. The second function overloads <B>operator()</B> to provide access to the remaining class data members. If <B>f</B> is a <B>CFeed</B> object then:</p>

<UL><LI><B>f()</B> returns the base value of the class, <B>m_f</B>; </LI>
<LI><B>f(i)</B> returns the <B>i</B>th first partial, <B>m_df[i]</B>, and; </LI>
<LI><B>f(i,j)</B> returns the (<B>i</B>th, <B>j</B>th) second partial, <B>m_ddf[i*m_N+j]</B>.</LI></UL>

<p>If either of the indices <B>i</B> or <B>j</B> is out of range, <B>operator()</B> returns zero.</p>

<h4><FONT COLOR="#000080">Class Friend Functions</FONT></H4>

<p>As a convenience, overloads are provided for all the transcendental functions in the standard math library (<B>&lt;math.h&gt;</B>). These overloaded functions are declared as friend functions of the class. With the exception of the <B>pow</B> function, each function takes a single argument, a <B>CFeed</B> object, and returns a <B>CFeed</B> object.</p>
<p>The transcendental functions are: <B>exp</B>, <B>log</B>, <B>log10</B>, <B>sqrt</B>, <B>sin</B>, <B>cos</B>, <B>tan</B>, <B>asin</B>, <B>acos</B>, <B>atan</B>, <B>sinh</B>, <B>cosh</B>, <B>tanh</B>, and <B>pow</B>. The <B>pow</B> function is multiply overloaded to handle two <B>CFeed</B> objects and a <B>CFeed</B> object and a <B>double</B>. <B>pow</B> always returns a <B>CFeed</B> object. The <B>atan2</B> function is not included as part of the <B>CFeed</B> math convenience functions.</p>
<p>None of the overloaded math functions check for inappropriate values (e.g., log(0)). However, the comments at the beginning of each function list the correct range of input values. Most employ <BR>
<p><B>operator()</B> to compute their result. The <B>pow</B> function requires special attention to the appropriateness of its inputs. In particular, the <B>pow(double g, CFeed h)</B> and <B>pow(CFeed g, CFeed h)</B> implementations utilize <B>log(g)</B> and <B>log(h.m_f)</B>, respectively, in the calculation of the result. As such, <B>g</B> and <B>h.m_f</B> must be positive and non-zero in order to obtain valid results. The final friend function is <B>operator&lt;&lt;</B>, which is used to print the class data member values. Each member is printed on a single line and labeled for easy identification. This operator can be employed to print the object to either the screen or a file.</p>

<h4><FONT COLOR="#000080">A Usage Example</FONT></H4>

<p>A simple example illustrates usage of the <B>CFeed</B> class. We use a damped sine wave, for its familiarity and ubiquity, and the rapidity with which its derivatives become complicated. The function for a damped sine wave is:</p>

<p><I>f(t) = Ae<SUP>-kt</SUP>sin(wt)</I></p>

<p>Here <I>A</I> is the amplitude of the wave, <I>k</I> is its dampening constant, and <I>w</I> is its frequency. The time is represented by the independent variable <I>t.</I> Because of the exponential term, both product and chain rule are required to compute the symbolic derivatives. This results in a first derivative that contains the sum of two terms similar to the original function and a second derivative that contains four such terms:</p>

<p><I>f'(t) = -kAe<SUP>-kt</SUP>sin(wt) + wAe<SUP>-kt</SUP>cos(wt)</I></p>

<p><I>f"(t) = k<SUP>2</SUP>Ae<SUP>-kt</SUP>sin(wt) - wkAe<SUP>-kt</SUP>cos(wt) - kwAe<SUP>-kt</SUP>cos(wt) - w<SUP>2</SUP>Ae<SUP>-kt</SUP>sin(wt)</I></p>

<p>Of course, these expressions can be simplified by factoring out the exponential and grouping the sine and cosine terms, but then the relationship to the generating function is obscured. With the <B>CFeed</B> class, computing <I>f(t)</I> and its derivatives is as simple as writing the function in the source code. This is shown in <a href="fig3.htm">Figure 3</a>, which contains a small program for calculating <I>f(t)</I> and its derivatives.</p>
<p>After declaring two <B>CFeed</B> variables, performing some constant initializations, and opening the output file, the program contains just three statements. The first statement:</p>

<pre>
t = CFeed(1, (double) i, &amp;dt);
</pre>

<p>converts the loop counter into a <B>CFeed</B> time. Note that since <I>f(t)</I> is a function of only one variable, <I>t,</I> the <B>CFeed</B> time is initialized with a size of one, a base value equal to <B>i</B>'s initial value, a first derivative of <B>1</B><I>,</I> and a second derivative of zero (via the default argument). The first derivative of the independent variable with respect to itself is always one and the second derivative is always zero, as indicated in this statement. Once the time is properly constructed, <I>f(t)</I> itself and its derivatives are computed in the second statement:</p>

<pre>
f = A*exp(-k*t)*sin(w*t);
</pre>

<p>Here the overloaded exponential and sine functions declared as friends to the class are utilized to calculate <I>f(t)</I> and its derivatives. The overloaded multiplication operator is also used to multiply <B>CFeed</B> variables and <B>CFeed</B> objects and <B>double</B>s. The final statement prints the results to the output file. The overloaded function call operator is used here to retrieve the value of the function and its first and second derivatives. <a href="fig4.htm">Figure 4</a> shows a plot of the output values generated by running this program.</p>
<p>The contrast between <a href="fig3.htm">Figure 3</a> and a program using the more traditional approach of including the derivatives directly into the source code is significant. Such a program would include the expressions for the derivatives given above. Most likely these expressions would be compacted by regrouping; however this still leaves several difficulties. First, these expressions must be transferred into the source code without error. This is not insignificant, due in part to the number of terms involved, and to the <I>flattening</I> of the symbolic notation. This is especially apparent with the exponential term, <I>e<SUP>-kt</SUP></I>, which becomes <B>exp(-k*t)</B>. The loss of superscripting flattens this expression in the source code, making it harder to visually correlate with the symbolic original. Although minor, this effect is cumulative and adds to the difficulty of coding, debugging, and maintenance as the complexity of the expression increases.</p>
<p>The second difficulty arises when modifying the code. If the definition of <I>f(t)</I> changes, then its derivatives must be recomputed and reinserted into the source code. Even minor alterations like changing the sine to a cosine presents significant work to the user of such a program. This leads directly to the last difficulty: the derivatives must be symbolically computed (and recomputed for changes) before the source code can be written. Although this task is relatively easy with the appropriate software tools, it does require access to these tools every time changes are required. With the <B>CFeed</B> class, these problems vanish. In the case of changing the sine to a cosine, all that is required is to, well, change the sine to a cosine in the source code! Changing <I>f(t)</I> completely presents no greater difficulty than merely writing the new expression into the code.</p>

<h4><FONT COLOR="#000080">Conclusion</FONT></H4>

<p>As noted above, the <B>CFeed</B> class facilitates the calculation of derivatives by encapsulating their basic properties and behaviors. This class works with functions having any number of independent variables and with the functions in the standard math library. That said, several points are noteworthy. First, the class limits derivative calculation to second order. There are several reasons for doing this. First, generalization of the code, although possible, significantly complicates the class member functions and obscures the underlying process (chain and product rules). Second, for most scientific and numerical applications, derivatives beyond the second order are rarely encountered. This is evidenced by noting that majority of differential equations encountered in Physics are second order or less. Finally, the class can be extended through inheritance to calculate derivatives of higher order if required.</p>
<p>This leads to the second point. The <B>CFeed</B> class is limited to the functions in the standard math library. Clearly, other functions worthy of inclusion do exist. Perhaps most noteworthy are Bessel functions and the like often encountered in scientific applications. Inheritance would play a major role in extending this class to include such functions when required.</p>
<p>Finally, it should be noted that the class does not require the explicit use of known functions. It handles empirical functions equally well if their derivatives are known. This could prove useful in applications such as navigation and flight control, in which instrumentation measures derivatives such as acceleration, angular acceleration, and stability derivatives of an aircraft.</p>

<h4><FONT COLOR="#000080">References</FONT></H4>

<p><a name="1"></a>[1]  G. Sherwood, and A. Taylor. <I>Calculus</I> (Prentice-Hall, New Jersey, 1954).</p>
<p><a name="2"></a>[2]  R. Wengert. "A Simple Automatic Derivative Evaluation Program," <I>Communications Of The ACM 7,</I> (463-464), 1964.</p>
<p><a name="3"></a>[3]  H. Kagiwada, R. Kalaba, N. Rasakhoo, and K. Spingam, <I>Numerical Derivatives And Nonlinear Analysis</I> (Plenum, New York, 1986).</p>
<p><a name="4"></a>[4]  R. Kalaba, N. Rasakhoo, and A. Tischler, "Nonlinear Least Squares Via Automatic Derivative Evaluation," <I>Applied Mathematics And Computation 12,</I> (119-137), 1983.</p>
<p><a name="5"></a>[5]  R. Kalaba, and A. Tischler, "Automatic Derivative Evaluation In The Optimization Of Nonlinear Models," <I>The Review Of Economics And Statistics 66,</I> (653-660), 1984.</p>

<p><i><B>Ronald E. Huss</B> is a consultant and former employee of Hughes Aircraft Co. in El Seguendo, CA. He has a Ph.D. in bio-medical engineering. His research interests include solving complex optimization problems involving radar and other sensor systems.</p>
<p><B>Mark A. Pumar</B> is a Senior Software Engineer of Raytheon ITSS in Pasadena, CA. He has MS degrees in Physics and Electrical Engineering from UCLA. Mark is currently working on the ground data processing system for the shuttle radar topography mission at JPL. Mark can be reached via email at: <B>map@sdsio.jpl.nasa.gov</B> or <B>MAPar@aol.com</B> or by phone at +1.626.744.5406.</p>
<p><B>Robert L. Rudin</B> is a Senior Software Engineer at COMPTEK Federal Systems Inc. in Camarillo, CA. He has a BA in Math from UCLA. Bob is currently working on ICAP III for the EA-6B aircraft. He can be reached via email at <B>brudin@comptek.com</B>.</i></p>


<h4><a href="../../../source/1999/nov99/pumar.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY>
</HTML>
