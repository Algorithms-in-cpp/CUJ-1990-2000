<HTML><HEAD>
<TITLE>November 1999/A Concise Method For Evaluating Derivatives/Figure 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Figure 1: Class CFeed and non-member operations</A></h4>
<pre>
class CFeed {
// class data members
protected:
   unsigned long m_N;   // number of independent variables
   double        m_f;   // function value
   double       *m_df;  // first order partials 
   double       *m_ddf; // Jacobian: second order partials
public:
// creation, destruction, assignement
   CFeed(const CFeed &amp;);        // class constructor
   CFeed(unsigned long  = 0,    // full constructor
      double   = 0, 
      double * = 0, 
      double * = 0);
   ~CFeed(void);                // destructor 
   CFeed &amp;   operator=(const CFeed &amp;);    // equal operator
// arithmetic operators
   CFeed &amp;   operator+=(const CFeed &amp;);   
   CFeed &amp;   operator+=(const double);    
   CFeed     operator+(const CFeed &amp;);    
   CFeed     operator+(const double);     
   CFeed &amp;   operator-=(const CFeed &amp;);   
   CFeed &amp;   operator-=(const double);    
   CFeed     operator-(const CFeed &amp;);    
   CFeed     operator-(const double);     
   CFeed &amp;   operator*=(const CFeed &amp;);   
   CFeed &amp;   operator*=(const double);    
   CFeed     operator*(const CFeed &amp;);    
   CFeed     operator*(const double);     
   CFeed &amp;   operator/=(const CFeed &amp;);   
   CFeed &amp;   operator/=(const double);    
   CFeed     operator/(const CFeed &amp;);    
   CFeed     operator/(const double);     
// special
   CFeed &amp;   operator-(void);           // unary minus operator
   CFeed     operator()(const CFeed &amp;); // call operator 
                                        // (chain rule) 
// I/O
   double    operator()(void);            // call operator; 
                                          // return base value
   double    operator()(unsigned long);   // call operator; 
                                          // return 1st partial
   double    operator()(unsigned long, 
                unsigned long);           // call operator; 
                                          // return 2nd partial
   unsigned long    size(void);           // return size of 
                                          // feed object
// Math
   friend CFeed exp(const CFeed &amp;);   // exponential
   friend CFeed log(const CFeed &amp;);   // natural logrithm
   friend CFeed log10(const CFeed &amp;); // base 10 logrithm
   friend CFeed sqrt(const CFeed &amp;);  // square root
   friend CFeed sin(const CFeed &amp;);   // sine
   friend CFeed cos(const CFeed &amp;);   // cosine
   friend CFeed tan(const CFeed &amp;);   // tangent
   friend CFeed asin(const CFeed &amp;);  // arc sine
   friend CFeed acos(const CFeed &amp;);  // arc cosine
   friend CFeed atan(const CFeed &amp;);  // arc tangent
   friend CFeed sinh(const CFeed &amp;);  // hyperbolic sine
   friend CFeed cosh(const CFeed &amp;);  // hyperbolic cosine
   friend CFeed tanh(const CFeed &amp;);  // hyperbolic tangent
   friend CFeed pow(const CFeed &amp;,const CFeed &amp;); // feed^feed 
   friend CFeed pow(const CFeed &amp;,const double);  // feed^double
   friend CFeed pow(const double,const CFeed &amp;);  // double^feed 
// I/O
friend ostream &amp; operator&lt;&lt;(ostream &amp;,CFeed &amp;); // write output
};
            
// non-member operators
            
CFeed operator+(const double, const CFeed &amp;);   // double + feed
CFeed operator-(const double, const CFeed &amp;);   // double - feed
CFeed operator*(const double, const CFeed &amp;);   // double * feed
CFeed operator/(const double, const CFeed &amp;);   // double / feed

</pre>
</BODY>
</HTML>
