<HTML>
     
     <HEAD>
<TITLE>December 1998/Uncaught Exceptions</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocdec.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Uncaught Exceptions: Phoenix Rising</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Bobby Schmidt</FONT></H3>

<BLOCKQUOTE>

<p>Bobby describes various sneaky tricks you can perform with reference parameters, operator-&gt;, and other mechanisms &#151; and why you shouldn't.</p>
</BLOCKQUOTE>
<HR>
<BLOCKQUOTE>
<p><I>To ask Bobby a question about C or C++, send email to </I><B>cujqa@mfi.com</B><I>, use subject line: Questions and Answers, or write to Bobby Schmidt, C/C++ Users Journal, 1601 W. 23rd St., Ste. 200, Lawrence, KS 66046.</I></p>

<p><I>Copyright &copy; 1998 Robert H. Schmidt</I></p>

<p>Welcome back! From the ashes of "The Learning C/C++urve" arises the phoenix of my new Q&amp;A column. Or maybe I should call it a Q&amp;A&amp;O column, where O == Opinions. Unlike Joe Friday, I'm interested in writing more than Just The Facts. Besides, some of my best reader mail results from brash opinions (remember the Hungarian Notation donnybrook?).</p>
<p>Editor-in-Chief Marc Briand came up with a number of candidate names for this column. Of those I really liked "Uncaught Exceptions." It of course alludes to the C++ language directly; but it also describes a problem that a reader can't solve alone, a problem the reader "throws" out and up, hoping some last line of defense catches and solves it.</p>
<p>As I published last month, please direct your questions or comments to <B>&lt;mailto:cujqa@mfi.com&gt;</B>. If you send them to me directly, they risk getting lost beyond the event horizon of my Inbox. Plus, if I decide one month to follow in Dan Saks's footsteps and go walkabout, someone else can intercept your questions in my absence.</p>
<p>Since I suspect many of you write email in a style too loose for print standards, I may edit your questions for usage, capitalization, and so on. However, I hope to edit your content sparingly, if ever [1]. If you have editorial commentary you want for My Eyes Only, or wish to remain anonymous, please so indicate in your mail. Otherwise your testimony may end up part of the public record, and look where that got Clinton.</p>
<p>Also keep in mind time dilation. From the moment you submit a question until it can appear in print, at least two months will elapse [2]. If you must have an answer straight away, let me know. If I can't get you a quick answer, I'll tell you. In any event, if I'm going to print your question in a column, I'll send you a draft of the answer before I submit that column for publication.</p>
<p>Some questions I'll never answer in print. As with my previous columns, I favor topics that involve Standard C and C++ and don't require my writing a master's thesis. Topics to avoid include:</p>
<UL><LI>How do I poll the A3 register on my Ultimate Behemoth video card?</LI>
    <LI>Explain pointers.</LI>
    <LI>Why doesn't my <B>CSpotRun</B> MFC class work with Windows NT Service Pack 13?</LI>
    <LI>Please write my homework assignment by Monday morning.</LI>
    <LI>Make Money Fast!</LI></UL>

<p>Finally, to help keep things lively, I may from time to time fabricate questions attributed to blatantly fictitious Diligent Readers. Part of your fun will be figuring out which questions those are, although the tone of the questions and the appropriateness of the "author" names should give them away. I also expect to occasionally trawl Usenet and other online Help Wanted areas for inspiration.</p>

<h4><FONT COLOR="#000080">Using Directives vs. MSVC</FONT></H4>

<h4><FONT COLOR="#000080">Q</FONT></H4>

<p>To keep down conflicts with Microsoft's stuff ("we believe in open standards"... right, as long as they are Microsoft standards) I thought I'd use <B>using</B> here and there to expose part of namespace <B>std:</B></p>

<pre>
using std::vector;
</pre>

<p>I later get a compiler error at the point where I say something like</p>

<pre>
vector&lt;char *&gt; blah;
</pre>

<p>Is my using declaration in error? I could not find an example in Stroustrup of how to do it with a template class. (I tried some obvious possibilities like</p>

<pre>
using std::vector&lt;char *&gt;;
</pre>

<p>to no avail.)</p>
<p>Microsoft's compiler is well known to have problems with namespaces, but I'm also just starting with this stuff.</p>
<p>Thanks. &#151; Dave Callaway</p>

<h4><FONT COLOR="#000080">A</FONT></H4>

<p>You should be able to write</p>

<pre>
using std::vector;
</pre>

<p>and have it work as you expect. That you can't sounds like an error in Microsoft's implementation. For support of this thesis, check out the example from section 14.5.4 paragraph 7 of the C++ Standard:</p>

<pre>
namespace N
    {
    template&lt;class T1, class T2&gt;
    class A
        {
        }; // primary template
    }
     
using N::A; // refers to the primary template
</pre>

<p>At least MSVC correctly fails to compile</p>

<pre>
using std::vector&lt;char *&gt;;
</pre>

<p>which is forbidden by section 7.3.3 paragraph 5 of the Standard.</p>
<p>I tried a variety of techniques to get around MSVC's problem. The only simple ones I could find were a macro:</p>

<pre>
#define vector std::vector
     
vector&lt;char *&gt; blah;
</pre>

<p>or the more encompassing using directive</p>

<pre>
using namespace std;
     
vector&lt;char *&gt; blah;
</pre>

<p>Unfortunately, there's no way to say the equivalent of</p>

<pre>
unusing namespace std;
</pre>

<p>You are stuck with the using directive's effects until the end of the translation unit. At least you can <B>#undef</B> the macro.</p>
<p>In a slightly more complicated solution, you can inherit a class from <B>std::vector</B>:</p>

<pre>
template&lt;class T&gt;
class vector : public std::vector&lt;T&gt;
    {
    // ...
    };
     
vector&lt;LPCTSTR&gt; blah;
</pre>

<h4><FONT COLOR="#000080">Life After Death</FONT></H4>

<h4><FONT COLOR="#000080">Q</FONT></H4>

<p>Should the following code be possible? &#151; Conrad Taylor</p>

<h4><FONT COLOR="#000080">A</FONT></H4>

<p>Your code, distilled down, is</p>

<pre>
/*
//    C example using malloc/free
*/
int *p1 = malloc(sizeof(*p1));
*p1 = 5;
free(p1);
printf("%d\n", *p1);
     
//
//    C++ example using new/delete
//
int *p2 = new int;
*p2 = 5;
delete p2;
cout &lt;&lt; *p2 &lt;&lt; endl;
</pre>

<p>This should compile. It may or may not run; the behavior is undefined. Once you <B>delete</B> or <B>free</B> an object, that object and its storage are conceptually vaporized.</p>
<p>That's "conceptually" &#151; in actual fact, the storage may be intact. Because <B>int</B> objects don't have destructors, you might be "safe" dereferencing the way you've shown: the storage very likely still contains the former value (5 in your example) and has not yet been reused for another object.</p>
<p>But again, this is a happy accident on many implementations, and is far from guaranteed. In a vigorous multi-process environment, or on a resource-constrained embedded system, the storage could be taken away the instant you call <B>delete</B> or <B>free.</B> </p>
<p>This is a common error, and is motivation for eschewing real pointers in C++. With a pointer-like class you can eliminate many sources of such dereferencing problems:</p>

<pre>
{
auto_ptr&lt;int&gt; p(new int);
*p = 5;
delete p; // error, won't compile
}
// p's destructor calls delete
</pre>

</B>The standard <B>auto_ptr</B> is not a total solution to this problem, since it assumes <B>*p</B> was allocated by <B>new.</B> You'll need to craft an <B>auto_ptr</B> variant to correctly handle <B>malloc:</B><p>

<pre>
{
MallocAutoPtr&lt;int&gt;
p((int *) malloc(sizeof(int)));
*p = 5;
free(p); // error, won't compile
}
// p's destructor calls free
</pre>

<p>For more on such <B>auto_ptr</B> mutations, see my column "Morte d'Autopointer" in the February 1998 <I>CUJ</I>.</p>

<h4><FONT COLOR="#000080">The Grand Illusion</FONT></H4>

<h4><FONT COLOR="#000080">Q</FONT></H4>

<p>Re "<B>const !=</B> Permanent" [3]. In the last paragraph, you write:</p>
<p>This is a good reason to avoid passing pointers. Where possible, I prefer to pass references, thereby avoiding the whole question of object ownership.</p>
<p>You're referring to the convention of using pointers to allude to dynamic resources, right? That's a common and useful convention but, alas, only a convention. The "allusion" quickly turns into "illusion" in this example:</p>

<pre>
void f1( const X* x ) { delete x; }
void f2( const X&amp; x ) { delete &amp;x; }
     
int main() {
  f1( new X );
  f2( * new X );
}
</pre>

<p>Here <B>f2( * new X );</B> may look odd because the example is simplified, but code with the same effect isn't uncommon. Not to start another religious argument, but what <B>f2</B> does isn't much different from the much-debated style of <B>delete this</B>.</p>
<p>The real answer to "how do we tell the user what <B>f1</B> and <B>f2</B> might do," I'm sure we agree, is to document the interface &#151; to explicitly state <B>f2</B>'s preconditions, postconditions, and other semantics. I agree that passing by <B>const&amp;</B> should be a pretty strong hint that <B>f2</B> shouldn't delete its parameter, but I'm uncomfortable with relying on the programmer to infer a function's semantics from its parameter list.</p>
<p>Just curious (and I thought you'd appreciate a change of hecklers; Scott's had his turn). &#151; Herb Sutter</p>

<h4><FONT COLOR="#000080">A</FONT></H4>

<p>As you suggest, my thinking was driven in large part by convention. If I have a function declared as</p>

<pre>
void f2(X const &amp;x)
</pre>

<p>the caller can reasonably assume <B>x</B> will stay intact. This can't be guaranteed of course, but few things can be in this language. At some point we have to trust apparent programmer intent and the power of convention and idiom.</p>
<p>In my experience calling</p>

<pre>
f2(*new X);
</pre>

<p>is unusual, as is taking a pointer to a reference argument and deleting it. The chances of a user seeing this, let alone being confused and misled by it, are small.</p>
<p>Compare this to</p>

<pre>
f1(new X);
</pre>

<p>with a pointer argument; there the convention is more common, and the notion of <B>f1</B> deleting the pointer is not so strained or incredible.</p>
<p>Also, I was thinking that instead of calling <B>new</B> and <B>delete</B> explicitly, I'd wrap the newed object in a class object [4], avoiding the whole problem:</p>

<pre>
class MetaX
    {
public:
    ~MetaX()
        {
        delete x;
        }
    MetaX() : x(new X)
        {
        }
private:
    X *x;
    };
     
void f3(MetaX const &amp;);
</pre>

<p>All the allocation/deletion and pointed-to object ownership would be encapsulated and abstracted away.</p>
<p>I'm in complete agreement regarding thorough documentation of a function's assumptions and effects, and preached that gospel for years at Microsoft. But the sad fact is, I've never known anyone (including me) to consistently document this way. And I have yet to see documentation that didn't deviate over time from the reality being documented. In the end, I trust the code's implied "truth" more than the documentation's, all else held equal.</p>
<p>Maybe what we really need is a literate C++, where the documentation and the code are inextricably linked and can't drift out of phase with each other. I leave that as a pondering for others. (Somehow I bet Stan Kelly-Bootle will weigh in here.)</p>
<p>And as for Scott, he got his karmic reward: I'm beta testing his CD, and (at his request) was brutal in my comments.</p>

<h4><FONT COLOR="#000080">Ineffective C++</FONT></H4>

<h4><FONT COLOR="#000080">Q</FONT></H4>

<p>I knew. I thought everybody did. :-) &#151; Scott Meyers</p>

<h4><FONT COLOR="#000080">A</FONT></H4>

<p>(This is in reference to C++ names with double underscores being reserved for the implementation [5].)</p>
<p>Okay Mr. Smarty Pants, we're now even in the "Shoulda Known Better" department. Glad to see you got your email privileges back; we missed your regular column feature last month.</p>
<p>And hey, how's that CD coming along?</p>

<h4><FONT COLOR="#000080">Russian Dolls</FONT></H4>

<h4><FONT COLOR="#000080">Q</FONT></H4>

<p>Dear <I>CUJ</I>, I came across this C++ wrinkle by accident and can't explain why it works. Can you advise whether this is valid C++ and if so what is going on? The code compiles and executes on Microsoft VC++ 5.0 and returns 99.</p>

<pre>
struct Data {
    static int data(){ return 99; }
};

static Data s_data;
     
struct Test1 {
    Data* operator-&gt;()
        { return &amp;s_data; }
};
 
struct Test2 {
    Test1 operator-&gt;()
        { return Test1(); } };
struct Test3 {
    Test2 operator-&gt;()
        { return Test2(); } };
struct Test4 {
    Test3 operator-&gt;()
        { return Test3(); } };
struct Test5 {
    Test4 operator-&gt;()
        { return Test4(); } };
     
#include &lt;iostream&gt;
     
void main(int argc, char ** argv)
    {
    Test5 t;
    std::cout &lt;&lt; t-&gt;data()
              &lt;&lt; std::endl;
    }
</pre>

<p>Regards. &#151; Paul Kerslake</p>

<h4><FONT COLOR="#000080">A</FONT></H4>

<p>Yes, this is "valid" C++ that should run and produce 99.</p>
<p>Since <B>*t</B> doesn't have a function member called <B>data,</B> you might think <B>t-&gt;data()</B> shouldn't even compile. If <B>t</B> were a real pointer, you'd be right, but <B>t</B> is a class object. Don't let the <B>-&gt;</B> fool you &#151; in this example, <B>-&gt;</B> is shorthand for a function call to <B>operator-&gt;(),</B> which (like most functions) can return anything.</p>
<p>To remove some layers of indirection, I'm changing the type of <B>t</B> to <B>Test2,</B> although my analysis is still valid for your original question. Here's what's happening:</p>

<pre>
t-&gt;data()
</pre>

<p>is really</p>

<pre>
(t.operator-&gt;())-&gt;data()
</pre>

<p><B>t.operator-&gt;()</B> yields <B>Test1()</B>. Thus, <B>t-&gt;data()</B> is equivalent to <B>Test1()-&gt;data().</B> Similarly,</p>

<pre>
Test1()-&gt;data()
</pre>

<p>is really</p>

<pre>
(Test1().operator-&gt;())-&gt;data()
</pre>

<p><B>Test1().operator-&gt;()</B> yields <B>&amp;s_data.</B> Thus, <B>Test1()-&gt;data()</B> is equivalent to <B>(&amp;s_data)-&gt;data().</B> Because this <B>-&gt;</B> is a real built-in <B>-&gt;</B> on a real pointer,</p>

<pre>
(&amp;s_data)-&gt;data()
</pre>

<p>is really</p>

<pre>
(*&amp;s_data).data()
</pre>

<p>or the reduced</p>

<pre>
s_data.data()
</pre>

<p>And that expression yields 99.</p>
<p>If you're still not convinced, change the <B>operator-&gt;</B> member names to <B>f1,</B> <B>f2,</B> and so on. That will make the real chain of operations more obvious in your original example:</p>

<pre>
cout &lt;&lt; t.f5().f4().f3().f2().f1()-&gt;data() &lt;&lt; endl;
</pre>

<h4><FONT COLOR="#000080">Notes</FONT></H4>

<p>[1]  Your prose content, anyway. Code is another matter. I might edit your sample down to its essence; or my editors might change your formatting to fit the magazine's page layout.</p>
<p>[2]  For example, it is now mid-September as I write a column that will appear to U.S. subscribers in mid-November.</p>
<p>[3]  "The Learning C/C++urve," <I>C/C++ Users Journal,</I> October 1998.</p>
<p>[4]  Think of a private <B>char *</B> inside a string object.</p>
<p>[5]  Once again from my October 1998 column.</p>

<p><i>Bobby Schmidt is a freelance writer, teacher, consultant, and programmer. He is also an alumnus of Microsoft, a speaker at the Software Development and Embedded Systems Conferences, and an original "associate" of (Dan) Saks &amp; Associates. In other career incarnations, Bobby has been a pool hall operator, radio DJ, private investigator, and astronomer. You may summon him on the Internet via <B>rschmidt@netcom.com</B>.</i></p>


</BLOCKQUOTE>
</BODY>
</HTML>
