<HTML>
     
     <HEAD>
<TITLE>December 1998/ActiveX Licensing with MD5 Encryption</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocdec.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">ActiveX Licensing with MD5 Encryption</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Michael Parent</FONT></H3>

<BLOCKQUOTE>

<p>An encrypted license key is hard to forge. But it still needs to be relatively easy to use.</p>
</BLOCKQUOTE>
<HR>
<BLOCKQUOTE>
<p>For complex licensing mechanisms, the standard text-based license (<B>.lic</B>) file available in VC++'s AppWizard is too simple to be effective. If your application requires a complex licensing mechanism, consider the MD5 message digest. MD5 is an encryption algorithm described in RFC 1321 (The MD5 Message-Digest Algorithm) <a href="#1">[1]</a>. It was created by RSA Data Security, Inc. The algorithm takes a string of any length as input and produces a 128-bit fingerprint, or message digest, as output. Theoretically, it is computationally infeasible to produce more than one message with the same message digest using MD5 encryption. For ease of use, I wrapped the MD5 algorithm in a small reusable C++ class that can be added to any MFC or ATL COM/ActiveX project. <a href="#2">[2]</a></p>
<p>MFC uses the first line of the AppWizard-created <B>.lic</B> file as the license key. For license verification, this key is compared to the same hard-coded key embedded in the control. A better method would be to put an encrypted key or message digest that was created by MD5 into the license file. Then, for license verification, the control would run the same algorithm and compare the resultant message digest with the license file's digest. If they matched, the control would be created. If they did not match, you could either deny the request or display a "nag" screen that prompts the user to pay for the control.</p>
<p>You can use MD5 as a tool to implement licensing mechanisms of varying degrees of sophistication. For instance, you could use a secret key that is embedded in the control. This key would be concatenated to a string read out of a registry entry that was set during installation. You could then use MD5 to create a message digest from the concatenated string. For license verification, compare this digest to another digest that you had set in a second registry entry during installation. That registry entry would have been created using the same concatention method.</p>
<p>For this article I created a generic AppWizard-generated MFC ActiveX control that supports licensing and uses my MD5 class. As a simple demonstration, I changed the license key (the first line of the license file) to be</p>

<pre>
ae05741a93699a5c4d7bb1744aa9a1b0
</pre>

<p>which is the message digest produced by MD5 when fed the string <B>"TESTMD5"</B>. Remember, anyone can see the message digest, but they won't know the string used to create it. Next, I hard-coded the string <B>"TESTMD5"</B> into my control. For license verification, I send this string through MD5 to create a message digest.</p>
<p>You can create a message digest for your <B>.lic</B> file using the Digest utility included in the source code for this article. (See p. 3 for downloading instructions.) Choose any string as input, and Digest will create the associated message digest. In MFC, you can use <B>AfxVerifyLicFile</B> to read and verify the <B>.lic</B> file. <A HREF="fig1.htm">Figure 1</A> shows the <B>VerifyUserLicense</B> method using MD5 to create the digest and pass it to <B>AfxVerifyLicFile</B> for license verification. Note that if license verification fails the control's <B>ClassFactory</B> creates it, but the control will display a "nag" screen. This allows a developer to try out the control but not use it with any software product intended for resale. If you don't want the control to be created at all when license verification fails, have <B>VerifyUserLicense</B> return <B>FALSE</B>.</p>
<p><A HREF="fig2.htm">Figure 2</A> shows the <B>GetLicenseKey</B> method. This method invokes MD5 so development tools such as VB or VC++ can get the license key from the control at design time and include it in the compiled program. At run-time, the <B>GetLicenseKey</B> method will be called again. For license verification, its return value will be compared to the key that was embedded at design time.</p>
<p>This is a simple example for demonstration purposes only. No licensing scheme is foolproof, but using an encryption algorithm like MD5 as part of your licensing mechanism will make hacking the license key much more difficult. To use the MD5 class, just add the <B>MD5Encrypt.cpp</B> and <B>MD5Encrypt.h files</B> (available on the <I>CUJ</I> FTP site) to your project and recompile.</p>

<h4><FONT COLOR="#000080">Information Sources</FONT></H4>

<p><a name="1"></a>[1]  <B>http://www.cenacle.se/~jorgen/CIE/RFC/1321/index.htm</B>.</p>
<p><a name="2"></a>[2]  My source code is a wrapper around RSA's code. RSA grants license to copy and use this software provided that it is identified as the "RSA Data Security, Inc. MD5 Message-Digest Algorithm" in all material mentioning or referencing this software or this function.</p>
<p><a name="3"></a>[3]  <B>http://www.rsa.com/rsalabs/newfaq/q99.html</B>.</p>

<p><i>Michael Parent is a software developer at ViewLogic Systems, Inc., a Massachusetts-based company specializing in electronic design automation software. He can be reached via email at <B>mparent@ici.net</B>.</i></p>

<h4><a href="../../../source/1998/dec98/parent.zip">Get Article Source Code</a></h4>


</BLOCKQUOTE>
</BODY>
</HTML>
