



<HTML><HEAD>

<TITLE>May 1997/A Reusable Directory Walk Class/Listing 2</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4>Listing 2:	Header for class FileAttributes</h4>

<pre>
#if !defined(FILEATTRIBUTES_H_)
#define FILEATTRIBUTES_H_
#include &lt;windows.h&gt;
#include &lt;stdexcept&gt;

#if defined(__BORLANDC__)
    using namespace std;
#endif

class FileAttributes {
    DWORD attributes;
public:
 // "Get" functions
    inline BOOL IsDirectory() const throw() {
        return ((attributes &amp; FILE_ATTRIBUTE_DIRECTORY )!=0); }
    inline BOOL IsArchive()  const throw() {
        return ((attributes &amp; FILE_ATTRIBUTE_ARCHIVE   )!=0); }

 // portions omitted ...

     inline BOOL IsTemporary() const throw() {
         return ((attributes &amp; FILE_ATTRIBUTE_TEMPORARY )!=0); }

 // Sometimes it's more useful just to have the raw number and do
 // your own comparisons versus the various FILE_ATTRIBUTE_
 // constants.

     inline DWORD Value() const throw() { return attributes; }
 
 // "Set" functions
    inline void IsDirectory (const BOOL SetBit) throw() {
        if(SetBit) attributes |= FILE_ATTRIBUTE_DIRECTORY;
        else attributes &amp;= (~FILE_ATTRIBUTE_DIRECTORY );}
    inline void IsArchive   (const BOOL SetBit) throw() {
        if(SetBit) attributes |= FILE_ATTRIBUTE_ARCHIVE;
        else attributes &amp;= (~FILE_ATTRIBUTE_ARCHIVE   );}

 // portions omitted ...
 
    inline void IsTemporary (const BOOL SetBit) throw() {
        if(SetBit) attributes |= FILE_ATTRIBUTE_TEMPORARY;
        else attributes &amp;= (~FILE_ATTRIBUTE_TEMPORARY );}

 // Constructors. Can construct from a DWORD or another
 // FileAttribute object.

    inline FileAttributes(const DWORD NewAttributes=0) throw() :
        attributes(NewAttributes) {}
    inline FileAttributes(const FileAttributes&amp; FA) throw() {
        attributes=FA.attributes; }

    //Assignment operator is defined for other FileAttribute objects
    //as well as for DWORDS

    inline FileAttributes&amp; operator=(const FileAttributes&amp; FA)
        throw() {
            if(&amp;FA != this) attributes=FA.attributes; return *this; }
    inline FileAttributes&amp; operator=(const DWORD dw) throw() {
        attributes=dw; return *this; }
};
#endif // FILEATTRIBUTES_H_
/* End of File */
</pre>
</body></html>
