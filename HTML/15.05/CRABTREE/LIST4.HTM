



<HTML><HEAD>

<TITLE>May 1997/A Reusable Directory Walk Class/Listing 4</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4>Listing 4:	Implementation of FileTime</h4>
<p></p>

<pre>
#include "FileTime.h"
#include &lt;iomanip&gt;
#include &lt;strstream&gt;
#include &lt;stdexcept&gt;
#include &lt;windows.h&gt;

#if defined(__BORLANDC__)
 using namespace std;
#endif

/**
 * This is where most of the real work of the class is done.
 * NewTime() takes an argument of type FILETIME and then makes the
 * appropriate API calls to turn this into a useful set of data.
 * This data is then stored in the object's member variables. A
 * FILETIME object is returned from various file access functions,
 * but the data it contains is not generally useful, and must be
 * converted.
 **/
void FileTime::NewTime(const FILETIME *pFileTime)
     throw(runtime_error){

    ZeroMemberVars();
 
 FILETIME LocalFileTime;
 BOOL bResult=FileTimeToLocalFileTime(pFileTime,&amp;LocalFileTime);
 if(!bResult) throw runtime_error(
        "Problem in FileTime::NewTime().Couldn't convert file time"
        " to local time");
 
 SYSTEMTIME SystemTime;
 bResult=FileTimeToSystemTime(&amp;LocalFileTime,&amp;SystemTime);
 if(!bResult) throw runtime_error(
        "Problem in FileTime::NewTime().Couldn't convert local time"
        " to system time");

 mYear        = SystemTime.wYear;
 mMonth       = SystemTime.wMonth;
 mDayOfWeek   = SystemTime.wDayOfWeek;
 mDay         = SystemTime.wDay;
 mHour        = SystemTime.wHour;
 mMinute      = SystemTime.wMinute;
 mSecond      = SystemTime.wSecond;
 mMillisecond = SystemTime.wMilliseconds;
}

void FileTime::ZeroMemberVars() throw() {
 mYear=0;
 mMonth=0;
 mDayOfWeek=0;
 mDay=0;
 mHour=0;
 mMinute=0;
 mSecond=0;
 mMillisecond=0;
 mDateSeparator='/';
 mTimeSeparator=':';
 mDateFillCharacter='0';
 mTimeFillCharacter='0';
}

const char* const FileTime::DateString() throw() {
 ostrstream osDate(mString,MaxLength);
 osDate &lt;&lt; setfill(mDateFillCharacter)
        &lt;&lt; setw(MonthLength) &lt;&lt; mMonth &lt;&lt; mDateSeparator
        &lt;&lt; setw(DayLength)   &lt;&lt; mDay   &lt;&lt; mDateSeparator
        &lt;&lt; setw(YearLength)  &lt;&lt; mYear  &lt;&lt; ends;
 return mString;
}

const char* const FileTime::TimeString() throw() {
 ostrstream osTime(mString,MaxLength);
 osTime &lt;&lt; setfill(mTimeFillCharacter) 
        &lt;&lt; setw(HourLength)        &lt;&lt; mHour        &lt;&lt; mTimeSeparator
        &lt;&lt; setw(MinuteLength)      &lt;&lt; mMinute      &lt;&lt; mTimeSeparator
        &lt;&lt; setw(SecondLength)      &lt;&lt; mSecond      &lt;&lt; mTimeSeparator
        &lt;&lt; setw(MillisecondLength) &lt;&lt; mMillisecond &lt;&lt; ends;
 return mString;
}

const char* const FileTime::YearString() throw() {
 ostrstream os(mString,MaxLength);
 os &lt;&lt; setfill(mDateFillCharacter) &lt;&lt; setw(YearLength) &lt;&lt; mYear
    &lt;&lt; ends;
 return mString;
}

const char* const FileTime::MonthString() throw() {
 ostrstream os(mString,MaxLength);
 os &lt;&lt; setfill(mDateFillCharacter) &lt;&lt; setw(MonthLength) &lt;&lt; mMonth
  &lt;&lt; ends;
 return mString;
}

// portions omitted ...

const char* const FileTime::MillisecondString() throw() {
 ostrstream os(mString,MaxLength);
 os &lt;&lt; setfill(mTimeFillCharacter) &lt;&lt; setw(MillisecondLength)
    &lt;&lt; mMillisecond                &lt;&lt; ends;
 return mString;
}
//End of File
</pre>
</body></html>
