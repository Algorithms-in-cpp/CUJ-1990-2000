



<HTML><HEAD>

<TITLE>May 1997/A Reusable Directory Walk Class/Listing 5</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4>Listing 5:	Function Recurse</h4>

<pre>
void DirWalk::Recurse() throw(runtime_error) {
    HANDLE hFind;
    mDepth++; // if Recurse has been called,
              // then we're one level lower
 
    hFind=FindFirstFile(mSearchSpec,&amp;mFindData);

    mFoundAnother=(hFind!=INVALID_HANDLE_VALUE);
    while(mFoundAnother) {
        mSize = mFindData.nFileSizeLow; // set the file size
        mSizeHigh = mFindData.nFileSizeHigh;
        mFA   = mFindData.dwFileAttributes;
        mIsDir= mFA.IsDirectory();
        // set up the time objects for this file
        mCreationTime.NewTime(&amp;mFindData.ftCreationTime);
        mLastAccessTime.NewTime(&amp;mFindData.ftLastAccessTime);
        mLastWriteTime.NewTime(&amp;mFindData.ftLastWriteTime);
        if(!mIsDir) {
            FoundFile(); // announce each file (but not dirs, yet)
        }
        mFoundAnother=FindNextFile(hFind, &amp;mFindData); // next one
    }
    if(hFind != INVALID_HANDLE_VALUE) {
        if (FindClose(hFind) == FALSE) throw runtime_error(
            "DirWalk::Recurse().Problem closing hFind.");
    }

    // OK, we've listed all the files of interest.
    // Now, we go into subdirectories and list those if we need to
    if(mRecurse) {
        hFind=FindFirstChildDir();
        mFoundAnother=(hFind != INVALID_HANDLE_VALUE);
        while(mFoundAnother) {
            mFA=mFindData.dwFileAttributes; // same game as above
            mCreationTime.NewTime(&amp;mFindData.ftCreationTime);
            mLastAccessTime.NewTime(&amp;mFindData.ftLastAccessTime);
            mLastWriteTime.NewTime(&amp;mFindData.ftLastWriteTime);
            mSize=mFindData.nFileSizeLow;
            mSizeHigh=mFindData.nFileSizeHigh;
            // go into subdirectory
            if(SetCurrentDirectory(mFindData.cFileName) == TRUE) {
                if(mListSubDirs) FoundFile(); // announce subdir name
                Recurse();       //list files in the subdirectory now
                if(SetCurrentDirectory("..") == FALSE)
                  throw runtime_error(
                    "DirWalk::Recurse(). Prob chnging to parnt dir");
            }

            mFoundAnother=FindNextChildDir(hFind); //next subdir
        }
        if(hFind != INVALID_HANDLE_VALUE) {
            if(FindClose(hFind) == FALSE)
                throw runtime_error(
                    "DirWalk::Recurse().Problem closing hFind(2).");
        }
    }
    mDepth--;           // we're returning to the parent's depth now
} //void DirWalk::Recurse()
//End of File
</pre>
</body></html>
