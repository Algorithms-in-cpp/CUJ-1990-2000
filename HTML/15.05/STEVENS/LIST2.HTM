



<HTML><HEAD>

<TITLE>May 1997/An ISAPI Web-Server Extension SMTP Gateway/Listing 2</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4>Listing 2:  GOPOSTAL.CPP &#151; Implementation file for your Internet server
gopostal extension</h4>

<pre>
#include "stdafx.h"
#include "gopostal.h"
#include &lt;afxsock.h&gt;
#include &lt;afx.h&gt;
#include &lt;stdlib.h&gt;

#define BUFLEN 255

////////////////////////////////////////////////////////////////////
// The one and only CWinApp object
// NOTE: You may remove this object if you alter your project to no
// longer use MFC in a DLL.

CWinApp theApp;

////////////////////////////////////////////////////////////////////
// command-parsing map

BEGIN_PARSE_MAP(CGopostalExtension, CHttpServer)
    // TODO: insert your ON_PARSE_COMMAND() and 
    // ON_PARSE_COMMAND_PARAMS() here to hook up your commands.
    // For example:

    ON_PARSE_COMMAND(Default, CGopostalExtension, ITS_EMPTY)
    DEFAULT_PARSE_COMMAND(Default, CGopostalExtension)
    
    ON_PARSE_COMMAND(Phillips, CGopostalExtension, ITS_PSTR ITS_PSTR ITS_PSTR
ITS_PSTR ITS_PSTR ITS_PSTR ITS_PSTR ITS_PSTR ITS_PSTR ITS_PSTR 
ITS_PSTR ITS_PSTR ITS_PSTR ITS_PSTR ITS_PSTR ITS_PSTR ITS_PSTR 
ITS_PSTR ITS_PSTR ITS_PSTR ITS_PSTR ITS_PSTR ITS_PSTR ITS_PSTR 
ITS_PSTR ITS_PSTR ITS_PSTR ITS_PSTR ITS_PSTR ITS_PSTR ITS_PSTR 
ITS_PSTR ITS_PSTR)
    ON_PARSE_COMMAND_PARAMS("Date JBostic PHarrison JGreen 
Jobnumber Firstname MI Lastname Address City State Zip Homephone 
Workphone Extension School1 Degree1 GPA1 Cursalary Dessalary 
Availdate Clearances Employed Lastworked Employer Division Industries 
Whychange Position1 Position2 Skills Languages " )
END_PARSE_MAP(CGopostalExtension)

////////////////////////////////////////////////////////////////////
// The one and only CGopostalExtension object

CGopostalExtension theExtension;


////////////////////////////////////////////////////////////////////
// CGopostalExtension implementation

CGopostalExtension::CGopostalExtension()
{
}

CGopostalExtension::~CGopostalExtension()
{
}

BOOL CGopostalExtension::GetExtensionVersion(HSE_VERSION_INFO* pVer)
{
    // Call default implementation for initialization
    CHttpServer::GetExtensionVersion(pVer);
    // Load description string
    TCHAR sz[HSE_MAX_EXT_DLL_NAME_LEN+1];
    ISAPIVERIFY(::LoadString(AfxGetResourceHandle(),
            IDS_SERVER, sz, HSE_MAX_EXT_DLL_NAME_LEN));
    _tcscpy(pVer-&gt;lpszExtensionDesc, sz);
    return TRUE;
}

////////////////////////////////////////////////////////////////////
// CGopostalExtension command handlers

void CGopostalExtension::Default(CHttpServerContext* pCtxt)
{
    StartContent(pCtxt);
    WriteTitle(pCtxt);
*pCtxt &lt;&lt; _T("This default message was produced by the Internet");
*pCtxt &lt;&lt; _T(
     " Server DLL Wizard. Edit your CGopostalExtension::Default()");
*pCtxt &lt;&lt; _T(" implementation to change it.\r\n");
    EndContent(pCtxt);
}

///////////////////////////////////////
// Handle the sbphillips on-line resume form
///////////////////////////////////////
void CGopostalExtension::Phillips(CHttpServerContext* pCtxt, LPTSTR
 Date, LPTSTR JBostic, LPTSTR PHarrison, LPTSTR JGreen, LPTSTR 
Jobnumber, LPTSTR Firstname, LPTSTR MI, LPTSTR Lastname, LPTSTR 
Address, LPTSTR City, LPTSTR State, LPTSTR Zip, LPTSTR Homephone,
LPTSTR Workphone, LPTSTR Extension, LPTSTR School1, LPTSTR Degree1, 
LPTSTR GPA1, LPTSTR Cursalary, LPTSTR Dessalary, LPTSTR Availdate, 
LPTSTR Clearances, LPTSTR Employed, LPTSTR Lastworked, LPTSTR 
Employer, LPTSTR Division, LPTSTR Industries, LPTSTR Whychange, 
LPTSTR Position1, LPTSTR Position2, LPTSTR Skills, LPTSTR Languages )

{

// construct a CString object BUFLEN characters in length
    CString buf( "x", BUFLEN );

// construct a socket
    CSocket S;
    S.Create();

// try to connect
    if( ! S.Connect("email.acsinc.net", 25) ){
               StartContent(pCtxt);
            WriteTitle(pCtxt);
            *pCtxt &lt;&lt; _T("&lt;h1&gt;Can't open email&lt;/h1&gt;");
            EndContent(pCtxt);
            return;
    }
//construct a file object
    CSocketFile f1( &amp;S );
    CSocketFile f2( &amp;S );

//construct an archive
    CArchive arOut( &amp;f1, CArchive::store );
    CArchive arIn( &amp;f2, CArchive::load );
    
// Get the SMTP sign-on message
    arIn.ReadString((char *)(LPCSTR)buf, BUFLEN);

//Check response - looking for 220 Service Ready
    if( atoi( (LPCSTR)buf ) != 220 ) {
            StartContent(pCtxt);
            WriteTitle(pCtxt);
            *pCtxt &lt;&lt; _T("Error : ") &lt;&lt; buf;
            EndContent(pCtxt);
            return;
}

// Say hello
    arOut.WriteString("HELO WWW.ACSINC.NET\n"); 
arOut.Flush();

// Get SMTP response message
    arIn.ReadString((char *)(LPCSTR)buf, BUFLEN);

//Check response - looking for 250 Requested Action Completed OK
    if( atoi( (LPCSTR)buf ) != 250 ) {
            arOut.WriteString("QUIT\n");
            StartContent(pCtxt);
            WriteTitle(pCtxt);
            *pCtxt &lt;&lt; _T("Error : ") &lt;&lt; buf;
            EndContent(pCtxt);
            return;
    }

// Send the MAIL FROM command        
    arOut.WriteString("MAIL FROM:&lt;gateway@acsinc.net&gt;\n" );
    arOut.Flush();

// Get SMTP response message
    arIn.ReadString((char *)(LPCSTR)buf, BUFLEN);

//Check response - looking for 250 Requested Action Completed OK
    if( atoi( (LPCSTR)buf ) != 250 ) {
            arOut.WriteString("QUIT\n");
            StartContent(pCtxt);
            WriteTitle(pCtxt);
            *pCtxt &lt;&lt; _T("Error : ") &lt;&lt; buf;
            EndContent(pCtxt);
            return;
    }

////// Send the RCPT TO command for each recipient /////

    // Send to me for debugging
    arOut.WriteString("RCPT TO:    keith@acsinc.net\n");
arOut.Flush();
    // Get SMTP response message
    arIn.ReadString((char *)(LPCSTR)buf, BUFLEN);

    if( *JBostic == 'Y'){
    // Send to JBostic
    arOut.WriteString("RCPT TO:    jbostic@sbphillips.com\n");
arOut.Flush();
    // Get SMTP response message
    arIn.ReadString((char *)(LPCSTR)buf, BUFLEN);
    }

    if( *PHarrison == 'Y'){
    // Send to PHarrison
    arOut.WriteString("RCPT TO:    pharrison@sbphillips.com\n");
arOut.Flush();
    // Get SMTP response message
    arIn.ReadString((char *)(LPCSTR)buf, BUFLEN);
    }

    if( *JGreen == 'Y'){
    // Send to JGreen
    arOut.WriteString("RCPT TO:    jgreen@sbphillips.com\n");
arOut.Flush();
    // Get SMTP response message
    arIn.ReadString((char *)(LPCSTR)buf, BUFLEN);
    }


// Send the DATA command    
    arOut.WriteString("DATA\n");
arOut.Flush();

// Get SMTP response message
    arIn.ReadString((char *)(LPCSTR)buf, BUFLEN);

//Check response - looking for 354 Start Mail Input
    if( atoi( (LPCSTR)buf ) != 354 ) {
            arOut.WriteString("QUIT\n");
            StartContent(pCtxt);
            WriteTitle(pCtxt);
            *pCtxt &lt;&lt; _T("Error : ") &lt;&lt; buf;
            EndContent(pCtxt);
            return;
    }

arOut.WriteString(
    "Subject: Email Gateway Copyright 1996 ACSinc.NET\n\n");
arOut.Flush();


//////////////// Send the body of the message here ///////////////

    buf =  "Date :";               buf += Date;
    buf += "\nJBostic :";          buf += JBostic;
    buf += "\nPHarrison :";        buf += PHarrison;
    buf += "\nJGreen :";           buf += JGreen;
    buf += "\nJob number(s) :";    buf += Jobnumber;
    buf += "\nFirst name :";       buf += Firstname;
    buf += "   Middle initial :";  buf += MI;
    buf += "   Last name :";       buf += Lastname;
    buf += "\nAddress :";          buf += Address;
    buf += "   City :";            buf += City;
    buf += "   State :";           buf += State;
    buf += "   Zipcode :";         buf += Zip;
    buf += "\nHome phone :";       buf += Homephone;
    buf += "   Workphone :";       buf += Workphone;
    buf += "   Extension :";       buf += Extension;
    buf += "\nSchool 1 :";         buf += School1;
    buf += "   Degree 1 :";        buf += Degree1;
    buf += "   GPA 1 :";           buf += GPA1;
    buf += "\nCurrent salary :";   buf += Cursalary;
    buf += "   Desired salary :";  buf += Dessalary;
    buf += "\nDate available :";   buf += Availdate;
    buf += "\nSecurity clearances :";
    buf += Clearances;
    buf += "\nCurrently employed? :";
    buf += Employed;
    buf += "   Date last worked :";buf += Lastworked;
    buf += "   Employer :";        buf += Employer;
    buf += "   Division :";        buf += Division;
    buf += "\nIndustries worked in :";
    buf += Industries;
    buf += "\nWhy are you changeing jobs? :";    
    buf += Whychange;
    buf += "\nPositions desired 1 :";
    buf += Position1;
    buf += "\n                  2 :";
    buf += Position2;
    buf += "\nSkills :";           buf += Skills;
    buf += "\nLanguages :";        buf += Languages;
    
///////// signal end of message /////////
    buf += "\n.\n";
    
    arOut.WriteString(buf); 
    arOut.Flush();

// Get SMTP response message
    arIn.ReadString((char *)(LPCSTR)buf, BUFLEN);

//Check response - looking for 250 Requested Action Completed OK
    if( atoi( (LPCSTR)buf ) != 250 ) {
            arOut.WriteString("QUIT\n");
            StartContent(pCtxt);
            WriteTitle(pCtxt);
            *pCtxt &lt;&lt; _T("Error : ") &lt;&lt; buf;
            EndContent(pCtxt);
            return;
    }
// Quit SMTP session
    arOut.WriteString("QUIT\n");


/////////// Send a response to the browser //////////

    StartContent(pCtxt);
    WriteTitle(pCtxt);
*pCtxt &lt;&lt; _T("&lt;h3&gt;ACSinc.NET Form to Email Gateway&lt;/h3&gt;&lt;hr&gt;");
*pCtxt &lt;&lt; _T(
    "The following data has been emailed to these recipients:&lt;br&gt;");
*pCtxt &lt;&lt; _T("&lt;br&gt;JBostic :") &lt;&lt; JBostic;
*pCtxt &lt;&lt; _T("&lt;br&gt;PHarrison :") &lt;&lt; PHarrison;
*pCtxt &lt;&lt; _T("&lt;br&gt;JGreen :") &lt;&lt; JGreen; 
*pCtxt &lt;&lt; _T("&lt;br&gt;Job number(s) :") &lt;&lt; Jobnumber;
*pCtxt &lt;&lt; _T("&lt;br&gt;First name :") &lt;&lt; Firstname;
*pCtxt &lt;&lt; _T(" Middle initial :") &lt;&lt; MI;
*pCtxt &lt;&lt; _T(" Last name :") &lt;&lt; Lastname;
*pCtxt &lt;&lt; _T("&lt;br&gt;Address :") &lt;&lt; Address;
*pCtxt &lt;&lt; _T(" City :") &lt;&lt; City;
*pCtxt &lt;&lt; _T(" State :") &lt;&lt; State;
*pCtxt &lt;&lt; _T(" Zipcode :") &lt;&lt; Zip;
*pCtxt &lt;&lt; _T("&lt;br&gt;Home phone :") &lt;&lt; Homephone;
*pCtxt &lt;&lt; _T(" Workphone :") &lt;&lt; Workphone;
*pCtxt &lt;&lt; _T(" Extension :") &lt;&lt; Extension;
*pCtxt &lt;&lt; _T("&lt;br&gt;Current salary :") &lt;&lt; Cursalary;
*pCtxt &lt;&lt; _T(" Desired salary :") &lt;&lt; Dessalary ;
*pCtxt &lt;&lt; _T("&lt;br&gt;Date available :") &lt;&lt; Availdate;
*pCtxt &lt;&lt; _T("&lt;br&gt;Security clearances :") &lt;&lt; Clearances;
*pCtxt &lt;&lt; _T("&lt;br&gt;Currently employed? :") &lt;&lt; Employed;
*pCtxt &lt;&lt; _T(" Date last worked :") &lt;&lt; Lastworked;
*pCtxt &lt;&lt; _T(" Employer :") &lt;&lt; Employer;
*pCtxt &lt;&lt; _T(" Division :") &lt;&lt; Division;
*pCtxt &lt;&lt; _T("&lt;br&gt;Industries worked in :") &lt;&lt; Industries;
*pCtxt &lt;&lt; _T("&lt;br&gt;Why are you changeing jobs? :") &lt;&lt; Whychange;
*pCtxt &lt;&lt; _T("&lt;br&gt;Positions desired 1:") &lt;&lt; Position1;
*pCtxt &lt;&lt; _T(" 2 :") &lt;&lt; Position2;
*pCtxt &lt;&lt; _T("&lt;br&gt;Skills :") &lt;&lt; Skills;
*pCtxt &lt;&lt; _T("&lt;br&gt;Languages :") &lt;&lt; Languages;
*pCtxt &lt;&lt; _T("&lt;br&gt;School 1 :") &lt;&lt; School1;
*pCtxt &lt;&lt; _T(" Degree 1 :") &lt;&lt; Degree1;
*pCtxt &lt;&lt; _T(" GPA 1 :") &lt;&lt; GPA1;
*pCtxt &lt;&lt; _T(
    "&lt;hr&gt;Thank you for taking the time to fill out the form.");
    EndContent(pCtxt);


}
// Do not edit the following lines, which are needed by ClassWizard.
#if 0
BEGIN_MESSAGE_MAP(CGopostalExtension, CHttpServer)
    //{{AFX_MSG_MAP(CGopostalExtension)
    //}}AFX_MSG_MAP
END_MESSAGE_MAP()
#endif    // 0

///////////////////////////////////////////////////////////////////////
// If your extension will not use MFC, you'll need this code to make
// sure the extension objects can find the resource handle for the
// module.  If you convert your extension to not be dependent on MFC,
// remove the comments arounn the following AfxGetResourceHandle()
// and DllMain() functions, as well as the g_hInstance global.

/****

static HINSTANCE g_hInstance;

HINSTANCE AFXISAPI AfxGetResourceHandle()
{
    return g_hInstance;
}

BOOL WINAPI DllMain(HINSTANCE hInst, ULONG ulReason,
                    LPVOID lpReserved)
{
    if (ulReason == DLL_PROCESS_ATTACH)
    {
        g_hInstance = hInst;
    }

    return TRUE;
}

****/
//End of File

</body></html>
