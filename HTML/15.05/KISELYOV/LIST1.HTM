



<HTML><HEAD>

<TITLE>May 1997/Speaking in Iostreams-ese/Listing 1</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4>Listing 1:	A stream to help compose a packet</h4>

<pre>

class SegmentOutStream
{
  LAPOut&amp; out_link;
  CRC16 crc;

  void write_byte(const unsigned char a_byte)
  { out_link.write_byte(a_byte); crc &lt;&lt; a_byte; }

public:
  SegmentOutStream(LAPOut&amp; _out_link);
  ~SegmentOutStream(void);    // write the CRC and flush the packet

  SegmentOutStream&amp; operator &lt;&lt; (const unsigned char a_byte)
    { write_byte(a_byte); return *this; }
  SegmentOutStream&amp; operator &lt;&lt; (const unsigned short a_short);
  SegmentOutStream&amp; operator &lt;&lt; (const unsigned long a_long);
  SegmentOutStream&amp; operator &lt;&lt; (const SegmentHeader&amp; seg_header);

  // Write an array of bytes

  // Array: a representation for an array. Note, for safety an Array object<br>  // cannot be constructed explicitly, either on stack or on heap.<br>  // An Array object can only be constructed via a friend function<br>  // byte_array, and is always transient.

  class Array
  {
    friend SegmentOutStream;
    friend SegmentInStream;
    const char * const ptr;
    const unsigned long size;
    
    // private constructor
    Array(const char * byte_array, const unsigned long _size) 
        : ptr(byte_array), size(_size) {}
    Array&amp; operator = (const Array&amp;); // unimplemented and forbidden
    Array(const Array&amp;);              // unimplemented and forbidden
  public:
    friend inline Array byte_array(const char * ptr,
                                   const unsigned long size)
        { return Array(ptr,size); }
  };
  SegmentOutStream&amp; operator &lt;&lt; (const Array&amp; array);
};

// A stream to help de-compose a packet
// When the stream is fully constructed, it contains
// the complete packet, with CRC and other checks performed
class SegmentInStream
{
  // The buffer where the packet is received to
  // Two ptrs in buffer for the current reading
  // and writing position
  unsigned char buffer[Segment0::max_MTU+1];    
  const unsigned char * read_ptr;
  unsigned char * write_ptr;
  CRC16 curr_crc;     // CRC accumulated while the packet is being received

  // The packet header is being read as a part
  // of the receiving process
  SegmentHeader header;

  // Take the current byte from the buffer
  unsigned char take_byte(void)
    { assert( write_ptr &gt; read_ptr ); return *read_ptr++; }

  // Receive a byte from the link and into the
  // buffer
  void receive_byte(LAPIn&amp; in_link);

public:
  // Receive a packet. It throws up if there was
  // an input error
  SegmentInStream(LAPIn&amp; in_link);
  const SegmentHeader&amp; q_header(void) const { return header; }

  SegmentInStream&amp; operator &gt;&gt; (unsigned char&amp; a_byte)
    { a_byte = take_byte(); return *this; }
  SegmentInStream&amp; operator &gt;&gt; (unsigned short&amp; a_short);
  SegmentInStream&amp; operator &gt;&gt; (unsigned long&amp; a_long);
  SegmentInStream&amp; operator &gt;&gt;
    (const SegmentOutStream::Array&amp; array);
  void write(FILE * fp); // Dump the rest if the stream into a file
};
//End of File
</pre>
</body></html>
