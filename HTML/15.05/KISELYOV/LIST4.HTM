



<HTML><HEAD>

<TITLE>May 1997/Speaking in Iostreams-ese/Listing 4</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4>Listing 4:	An over-simplified version &lt;iostream&gt;</h4>

<pre>
//              
// Metrowerk's C++ in BeOS DR8 does not have iostream.
// By including this file, you get almost complete 
// iostream functionality.
// That is, your code may contain something like
//      int d; double f;
//      cout &lt;&lt; "Enter two numbers" &lt;&lt; endl; cin &gt;&gt; d &gt;&gt; f;
//      cout &lt;&lt; "The numbers are " &lt;&lt; d &lt;&lt; " and " &lt;&lt; f &lt;&lt; endl;
// and it *will* work (with this iostream included),
// without _any_ changes in your code...
// Made at a Be Dev kitchen on Dec 13, 1996 (in 5 minutes)

#include &lt;stdio.h&gt;

class IOSTREAM
{
};

static IOSTREAM cout, cin;

class Endl {};
static Endl endl;
class Manip {};
static Manip dec, hex;

IOSTREAM&amp; operator &lt;&lt; (IOSTREAM&amp; os, const char * str)
{ printf("%s",str); return os; }

IOSTREAM&amp; operator &lt;&lt; (IOSTREAM&amp; os, const int num)
{ printf("%d",num); return os; }

IOSTREAM&amp; operator &lt;&lt; (IOSTREAM&amp; os, const unsigned long num)
{ printf("%d",num); return os; }
// the same for 'const long num',  'const unsigned int num', 
// 'const float num', 'const double num', etc.
// primitive number types

IOSTREAM&amp; operator &lt;&lt; (IOSTREAM&amp; os, const Endl&amp; _endl)
{ puts(""); return os; }

IOSTREAM&amp; operator &lt;&lt; (IOSTREAM&amp; os, const Manip&amp; manip)
{ return os; }

IOSTREAM&amp; operator &gt;&gt; (IOSTREAM&amp; os, int&amp; num)
{ scanf("%d",&amp;num); return os; }
// similar for 'double&amp; num', etc.

//End of File
</pre>
</body></html>
