<HTML><HEAD>
<TITLE>May 1992/malloc-Related Errors/Listing 4</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 4 An Example of a Stack Abstraction with Magic Numbers</A></h4>
<pre>#include &lt;stdlib.h&gt;
#include &lt;assert.h&gt;
#include &lt;stack.h&gt;

static  char    *magic = "Stack";
#define MAGIC_ON(p)     ((p)-&gt;stk_magic = magic)
#define MAGIC_OFF(p)    ((p)-&gt;stk_magic = NULL)
#define MAGIC_CHECK(p)  assert((p != NULL) &amp;&amp; ((p)-&gt;stk_magic
== magic))

/* Create a stack */
STK     *StkConstruct() {
STK     *stk;

       stk =malloc(sizeof(STK));
       assert(stk != NULL);
       stk-&gt;stk_top = 0;
       MAGIC_ON(stk);
       MAGIC_CHECK(stk);
       return(stk);
}

/* Destroy a stack */
void    StkDestroy(STK *stk) {
       MAGIC_CHECK(stk);
       MAGIC_OFF(stk);
       free(stk);
}

/* Push an item on the stack */
void    StkPush(STK *stk, void *item) {
       MAGIC_CHECK(stk);
       assert(stk-&gt;stk_top &lt; STACK_SIZE);
       stk-&gt;stk_stack[stk-&gt;stk_top++] = item;
}

/* Pop an item from the stack */
void    *StkPop(STK *stk) {
       MAGIC_CHECK(stk);
       assert(stk-&gt;stk_top &gt; 0);
       return(stk-&gt;stk_stack[-(stk-&gt;stk_top)]);
}

/* Determine if the stack is empty */
int     StkIsEmpty(STK *stk) {
       MAGIC_CHECK(stk);
       return(stk-&gt;stk_top == 0);
}

/* End of File */
</pre>
</BODY>
</HTML>
