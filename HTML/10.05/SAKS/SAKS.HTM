


<HTML>
<HEAD>

<TITLE>May 1992/Stepping Up to C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmay.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Stepping Up to C++<A name="00FF_0075"><A name="00FF_0075"></font></h2><P>
<h3 align="center"><A name="00FF_0000"><A name="00FF_0000">Operator Overloading, Part 3</h3><P>
<h3 align="center"><font color="#800000">Dan Saks</font></h3><hr><blockquote><P>
<P><i><A name="00FF_0000"><A name="00FF_0000">Dan Saks is the owner of Saks &amp; Associates, which offers consulting and training in C and C++. He is secretary of the ANSI C++ standards committee, and also contributing editor for Windows/DOS Developer's Journal. Dan recently finished his first book, C++ Programming Guidelines, written with Thomas Plum. You can write to him at 393 Leander Dr., Springfield, OH 45504, or <I>dsaks@wittenberg.edu</I> (Internet), or call (513)324-6301.</i></P><P>
In the first part of this series ("Operator Overloading, Part 1," January 1992) I presented the basic features of operator overloading by building a simple class for rational numbers (fractions). That class contained only constructors, binary operators, and a crude output function. In the next part ("Operator Overloading, Part 2," March 1992), I extended the <I>rational</I> class to include an additional constructor with one argument to provide a conversion from <I>long</I> to <I>rational</I>. I also defined several unary operators for rationals, including prefix and postfix ++ and --. This month, I'll continue my explanation of operator overloading by adding additional functionality to rational numbers.<P>
<h4><FONT COLOR="#000080"><A name="00FF_0076">Default Arguments<A name="00FF_0076"></FONT></h4></P>
<A href="list1.htm">Listing 1</a>
and <A href="list2.htm">Listing 2</a>
show the <I>rational</I> class as it was at the end of Part 2 of this series. <I>rational.h</I> (<A href="list1.htm">Listing 1</a>)
 defines the class itself, along with four inline nonmember functions that implement the four binary operators +, -, *, and /. <I>rational.cpp</I> (<A href="list2.htm">Listing 2</a>)
 defines the non-inline class member functions.<P>
<A href="list2.htm">Listing 2</a>
defines three constructors<P>
<pre>rational() { }
rational(long n) : num(n), denom(1) { }
rational(long n, long d) : num(n), denom(d) { }</pre>
The second and third constructors are very similar &#151; the third constructor produces the same result as the second whenever the denominator is one. That is, the declarations<P>
<pre>rational r (x);</pre>
and<P>
<pre>rational r (x, 1);</pre>
are equivalent. Using default function arguments makes this equivalence explicit, and reduces the source code needed to define the class. You simply rewrite the third constructor as<P>
<pre>rational(long n, long d = 1) :
   num(n), denom(d) { }</pre>
and discard the second constructor.<P>
The = <I>1</I> in the function declaration specifies the default value for <I>d</I>. You invoke this constructor with either one or two arguments. If you declare a <I>rational</I> object using one argument, as in<P>
<pre>rational r (3);</pre>
the compiler applies the two-argument constructor and supplies the default value for the second argument. That is, it behaves just as if you had written<P>
<pre>rational r (3, 1);</pre>
Of course, you can still provide an explicit second argument, as in<P>
<pre>rational r(3, 4);</pre>
Default argument values can be used in functions other than constructors. For example, the <I>istream</I> (input stream) class defined in the header <I>iostream.h</I> has a member function<P>
<pre>istream &amp;get(char *p, int n, char delim = '\n');</pre>
that reads at most <I>n</I>-1 characters in the character array addressed by <I>p. get</I> stops reading when it reads a character equal to <I>delim</I>. A call to <I>get</I> with only two arguments, such as<P>
<pre>cin.get(s, MAXSTRING);</pre>
stops reading at the next newline character (the end of a line). A call such as<P>
<pre>cin.get(w, MAXWORD, ' ');</pre>
stops reading at the next space.<P>
An overloaded operator cannot have default argument values. That is, you cannot overload both unary and binary plus using one function with default arguments. For example,<P>
<pre>rational operator+(rational r1, rational r2 = 0);</pre>
is an error. You must declare the unary and binary operators as distinct functions.<P>
A function can have more than one argument with a default value. For example,<P>
<pre>void f(int a, int b = 1, int c = 2);</pre>
can be called with one, two, or three arguments<P>
<pre>f(x);         // same as f(x,1 , 2);
f(x, y);      // same as f(x, y, 2);
f(x, y, z);  // no defaults used</pre>
All arguments to the right of the first default argument must have default values. Thus,<P>
<pre>void f(int a = 0, int b, int c = 2);</pre>
is illegal.<P>
<h4><FONT COLOR="#000080"><A name="00FF_0077">Default Constructors<A name="00FF_0077"></FONT></h4></P>
The <I>rational</I> class now has two constructors<P>
<pre>rational() { }</pre>
and<P>
<pre>rational(long n, long d = 1) :
   num(n), denom(d) { }</pre>
You can eliminate the need for the first constructor by providing a default value for the first argument of the second constructor<P>
<pre>rational(long n = 0, long d = 1) :
   num(n), denom(d) { }</pre>
According to the ARM<a href="#ref1">[1]</a>, a default constructor is any constructor that can be called without an argument. A declaration such as<P>
<pre>rational r1;</pre>
invokes the default constructor. (Note that the declaration<P>
<pre>rational r1();</pre>
does not invoke a default constructor &#151; it declares a function that accepts no arguments and returns a <I>rational</I>.)<P>
You typically declare a default constructor as one with an explicitly empty signature, such as <I>rational:: rational()</I>; however, the ARM states that a constructor with default values for all of its arguments is also a default constructor. Thus, if you provide a default value for each argument of <I>rational:: rarional(long, long)</I> you must discard <I>rational:: rational ()</I>. Otherwise, the compiler will complain that the declaration<P>
<pre>rational r1;</pre>
is an ambiguous call to either of the two different constructors.<P>
Replacing<P>
<pre>rational() { }</pre>
with<P>
<pre>rational(long n = 0, long d = 1) :
   num(n), denom(d) { }</pre>
actually changes the behavior of the default rational constructor. When the default constructor is<P>
<pre>rational() { }</pre>
the declaration<P>
<pre>rational r1;</pre>
constructs a rational object with unspecified values for its numerator and denominator. When the default constructor is<P>
<pre>rational(long n = 0, long d = 1)
   num(n), denom(1) { }</pre>
the same declaration for <I>r1</I> constructs a <I>rational</I> object with the value 0/1 (rational zero).<P>
This change has interesting ramifications for the class design. The constructor<P>
<pre>rational() { }</pre>
generates no code, so it adds no runtime overhead to rational object declarations. In contrast, the constructor with default argument values always generates code to initialize rational objects. Thus, even though the constructor is an inline function, a declaration such as<P>
<pre>rational r1;</pre>
always generates at least two instructions<P>
<pre>r1.num = 0;
r1.denom = 1;</pre>
On the other hand, the constructor with default argument values is safer because it guarantees that all <I>rational</I> objects have a well-defined initial value. Although I have not shown such details in <A href="list1.htm">Listing 1</a>
and <A href="list2.htm">Listing 2</a>,
 a robust implementation of rationals should insure that no <I>rational</I> object has a denominator of zero. If a <I>rational</I> object can be constructed with an unspecified initial value, then most, if not all, <I>rational</I> operators must check the validity of their operand(s) before proceeding with the operation. Guaranteed initialization significantly reduces the number of places where the validity of operands must be checked.<P>
In practice, avoiding use of the default constructor is usually easy. In the first part of this series, I showed that you can easily rewrite the member function bodies to avoid using default constructors. For example, you can always rewrite<P>
<pre>rational result;  // uses default constructor
result.num = n;   // n may be an expression
result.denum = d; // n may be an expression
return result;</pre>
as simply<P>
<pre>return rational(n, d);</pre>
In fact, the implementation of rationals in <A href="list1.htm">Listing 1</a>
and <A href="list2.htm">Listing 2</a>
do not use the default <I>rational</I> constructor at all.<P>
Allowing a constructor with default values for all of its arguments to be a default constructor is a recent extension to C++ which is not supported by all current compilers. If you declare class <I>rational</I> with only the constructor<P>
<pre>rational(long n = 0, long d = 1);</pre>
some compilers will reject declarations such as<P>
<pre>rational r1;</pre>
With other compilers, you can declare both<P>
<pre>rational ();
rational(long n = 0, long d = 1);</pre>
and the compiler invokes <I>rational() </I>when it encounters declarations like<P>
<pre>rational r1;</pre>
Tom Plum and I recommend that, for widest portability across today's compilers, you should not assume that a constructor which has default values for all of its arguments is a default constructor<a href="#ref2">[2]</a>. Rather, write the default constructor as a special case, as in<P>
<pre>rational() : num(0), denom(1) { }
rational(long n, long d = 1) :
   num(n), denom(d) { }</pre>
<h4><FONT COLOR="#000080"><A name="00FF_0078">Conversion Operators<A name="00FF_0078"></FONT></h4></P>
As I explained in the second part of this series, a constructor that accepts one argument of type <I>T</I> provides a user-defined conversion from type <I>T</I> to the class type. For example, the constructor<P>
<pre>rational(long n, long d = 1);</pre>
can be called with one argument of type <I>long</I>. In fact, it can also be called with an argument of any type, such as <I>char, short int </I>or<I> int</I>, that promotes to <I>long</I> by a standard (predefined) conversion. Thus, you can use any type that promotes to a <I>long</I> in a context that expects a <I>rational</I>, and the compiler will apply the constructor to create a temporary <I>rational</I> object initialized with that <I>long</I>. For example, the assignment<P>
<pre>rational r1;
...
r1 += 3;</pre>
invokes<P>
<pre>rational(long n, long d = 1);</pre>
to convert 3 to a <I>rational</I> object whose value is 3/1, and then passes that object as the right-hand operand of<P>
<pre>rational &amp;operator+=(rational r);</pre>
You may also desire to have conversions from a class type like <I>rational</I> to a predefined type like <I>double</I> or <I>float</I>. However, predefined types do not have constructors. Therefore, C++ offers another notation for user-defined conversions &#151; conversion operators.<P>
A conversion operator is a member function of the form <I>operator T()</I> specifying a conversion from the class type to <I>T</I>, where <I>T</I> is a type name for a predefined or user-defined type. For example, adding a <I>rational</I> member function<P>
<pre>rational ::operator double()
    {
    return (double)num / denom;
    }</pre>
provides a conversion from <I>rational</I> to <I>double</I>. Then you can pass a <I>rational</I> object as an argument to a function expecting a <I>double</I>. For example, the standard header <I>math. h</I> declares <I>sqrt</I> as<P>
<pre>double sqrt(double);</pre>
Given<P>
<pre>rational r;
double x;</pre>
the call<P>
<pre>x = sqrt(r);</pre>
uses the conversion operator <I>rational::operator double() </I>to convert <I>r</I> to <I>double</I>, and passes the result to <I>sqrt</I>.<P>
Conversion operators do not have an explicit return type &#151; you cannot declare the conversion from <I>rational</I> to <I>double</I> as<P>
<pre>double rational::operator double(); // error</pre>
The return type is implied by the operator name.<P>
<h4><FONT COLOR="#000080"><A name="00FF_0079">Ambiguous Conversions<A name="00FF_0079"></FONT></h4></P>
Unfortunately, adding operator <I>dauble()</I> to the <I>rational</I> class in <A href="list1.htm">Listing 1</a>
and <A href="list2.htm">Listing 2</a>
leads to an ambiguity in arithmetic expressions such as <I>r + 1</I>, where <I>r</I> is a <I>rational</I>. If the <I>rational</I> class has a user-defined conversion from <I>double</I> to <I>rational</I> (via a constructor) and from <I>rational</I> to <I>double</I> (via the conversion operator), then the expression <I>r + 1</I> has two interpretations:<P>
1) The compiler promotes 1 from <I>int</I> to <I>long</I> (by a standard conversion) and then to <I>rational</I> (by a constructor), and then applies<P>
<pre>rational operator+(rational, rational)</pre>
to produce a rational result, or<P>
2) the compiler converts <I>r</I> to <I>double</I> (by the conversion operator), promotes 1 to <I>double</I>, and then applies the predefined+ operator to produce a <I>double</I> result.<P>
C++ considers these two interpretations to be equally valid, so the expression is ambiguous and produces a diagnostic. (As always, not all compilers behave this way. However, this is the behavior described by the ARM, and most newer compilers diagnose the error.)<P>
Applying an explicit conversion to one of the operands in the expression eliminates the ambiguity. You can apply explicit user-defined conversions (both constructors and conversions operators) by using either C-style casts or function-like casts. For example,<P>
<pre>r + (rational)1</pre>
or<P>
<pre>r + rational(1)</pre>
ensures that both operands are <I>rational</I> and forces the compiler to use <I>operator+(rational, rational)</I>. On the other hand, either<P>
<pre>(double)r + 1</pre>
or<P>
<pre>double(r) + 1</pre>
coerces the first operand to <I>double</I>, and forces the compiler to apply the predefined + operator.<P>
Alternatively, you can eliminate the ambiguities by renaming the conversion operator<P>
<pre>rational: :operator double();</pre>
as an explicitly-named conversion function, say<P>
<pre>double rational: :to_double();</pre>
Then, expressions such as <I>r</I> + <I>1</I> unambiguously invoke <I>operator+(rational, rational)</I>, but you must always write conversions from <I>rational</I> to <I>double</I> explicitly, as in<P>
<pre>x = sqrt(to_double(r));</pre>
When designing classes with overloaded operators and user-defined conversions, you must decide which style produces the most useful and error-free notation. My impression is that most experienced C++ programmers avoid conversion operators and use explicitly-named conversion functions.<P>
Note that, even if you retain the conversion operator from <I>rational</I> to <I>double</I>, there's still no ambiguity in expressions using assignment operators, such as<P>
<pre>r += 1</pre>
The assignment operators are implemented as member functions. A member function's left operand must be a class object, and the compiler will not apply user-defined conversions to it. The ambiguity only arises in operators implemented as nonmember functions.<P>
<h4><FONT COLOR="#000080"><A name="00FF_007A">User-Defined Output<A name="00FF_007A"></FONT></h4></P>
As defined in <A href="list1.htm">Listing 1</a>
and <A href="list2.htm">Listing 2</a>,
 rational numbers have an output function<P>
<pre>void rational::put(FILE *f)</pre>
that puts a <I>rational</I> object to a <I>FILE</I> (as defined in <I>stdio.h</I>). <A href="list3.htm">Listing 3</a>
shows a simple test program for rationals that uses <I>rational::put</I>, along with <I>printf</I> and <I>putchar</I>, to display rational numbers to <I>stdout</I>.<P>
Intermixing calls to <I>rational::put</I> with the other <I>stdio</I> output functions is not very convenient. It takes three separate function calls<P>
<pre>printf("r1 = ");
r1.put(stdout);
putchar('\n');</pre>
to print the line<P>
<pre>r1 = &lt;value of r1&gt;</pre>
If rationals were a predefined type, such as <I>double</I>, you could replace the three calls as one call to <I>printf</I><P>
<pre>printf("r1 = %d\n", r1);</pre>
For <I>rational</I> output to be as convenient output for predefined types, you must be able to add an additional <I>printf</I> format specifier, like <I>%r</I> or <I>%R</I>. Unfortunately, you cannot extend <I>printf</I> very easily, and even if you could, you will probably run out of mnemonic format specifiers as you or members of your programming team create more and more user-defined types.<P>
C++ provides an alternative input/output library that avoids this problem. You can extend the library so that I/O operations on user-defined types are as convenient as for predefined types. Early implementations of C++ defined the library interface in a header called <I>stream.h</I>. Newer implementations provide an enhanced stream library defined in <I>iostream.h</I>. I shall refer to the library as the <I>iostream</I> library, but the following discussion uses the basic facilities found in both versions.<P>
The library provides output facilities as operations on objects of class <I>ostream</I>. The predefined object <I>cout</I> is the <I>ostream</I> object attached to standard output. Another <I>ostream</I> object, <I>cerr</I>, is attached to standard error.<P>
You write to an <I>ostream</I> by using the overloaded operator &lt;&lt;. &lt;&lt; is the predefined left-shift operator, but when used with an <I>ostream</I>, it's called the <I>put to</I> operator. The library defines an <I>operator</I>&lt;&lt; for each of the predefined types. For example,<P>
<pre>cout &lt;&lt; 100;</pre>
uses <I>ostream::operator</I>&lt;&lt;(<I>int</I>) to write the integer 100 to <I>cout</I>, and<P>
<pre>cerr &lt;&lt; "Error!\n";</pre>
uses <I>ostream::operator&lt;&lt;(const char *)</I> to write the string literal <I>"Error! \n"</I> to <I>cerr</I>.<P>
You can string along many output operators in a single statement, such as<P>
<pre>cout &lt;&lt; "n = " &lt;&lt; n &lt;&lt; '\n';</pre>
Here's how it works. The &lt;&lt; operators group from left to right, so the above expression is equivalent to<P>
<pre>((cout &lt;&lt; "n = ") &lt;&lt; n) &lt;&lt; '\n';</pre>
which is equivalent to<P>
<pre>((cout.operator&lt;&lt;("n= ")) .operator&lt;&lt;(n)).operator&lt;&lt; (' \n');</pre>
Every <I>ostream::operator</I>&lt;&lt; has a return value of type <I>ostream &amp;</I> and returns its left aperand. Thus<P>
<pre>cout.operator&lt;&lt;( n = ")</pre>
writes the string literal to <I>cout</I> and returns a reference to <I>cout</I>. Since a reference acts like an object when used in an expression, this reference becomes the left operand of the next <I>operator</I>&lt;&lt;, which in turn, returns that same reference to <I>cout</I>. And so it goes, to the end of the statement.<P>
The overloaded &lt;&lt; operators defined by the <I>iostream</I> library are members of class <I>ostream</I>. However, when defining an <I>operator</I>&lt;&lt; for a user-defined type like rationals, you are not expected to add new members to the <I>ostream</I> class because you may not have access to the source code for the library. C++ provides facilities so that you can extend the library without rewriting it.<P>
At first, you might try implementing output for rationals as a member function<P>
<pre>ostream &amp;rational::operator&lt;&lt;(ostream &amp;os);</pre>
Unfortunately, this member function forces you to place the <I>rational</I> object to the left of the &lt;&lt;, as in<P>
<pre>r &lt;&lt; cout</pre>
which is the reverse ordering of the argument types in expressions that output the predefined types. To put the stream argument on the left, you must implement the operator as a nonmember function, as in <A href="list4.htm">Listing 4</a>.
<P>
Now you hit another snag &#151; the <I>num</I> and <I>denom</I> members of <I>rational</I> objects are <I>private</I>, but nonmember functions typically cannot access <I>private</I> members. One solution is to add functions to the <I>rational</I> class that provide <I>public</I> access to the values inside an object<P>
<pre>long rational::numerator() { return num; }
long rational::denominator() { return denom; }</pre>
and rewrite the <I>rational</I> output operator in terms of these functions, as in <A href="list5.htm">Listing 5</a>.
 These <I>accessor</I> functions are better than making the <I>num </I>and <I>denom</I> fields public, because they protect the integrity of <I>rational</I> objects by limiting clients to read-only access, but they add functions to the class interface that may only be needed for implementation. As an alternative, you can define the <I>rational</I> output operator as in <A href="list4.htm">Listing 4</a>,
 but declare it as a friend of the <I>rational</I> class.<P>
A function that is a friend of class <I>X</I> is a nonmember function that has access to the <I>private</I> members of X. The class must grant the function friendship by a friend declaration inside the class definition. <A href="list6.htm">Listing 6</a>
shows the <I>rational</I> class with operator&lt;&lt; declared as a friend function. The friend declaration consists of a complete function declaration preceded by the keyword <I>friend</I>. The function definition appears later outside the class definition, but without the keyword <I>friend</I>.<P>
Since a friend function is a global, nonmember function, its declaration is not affected by the access specifiers inside the class definition. It doesn't matter whether you place the friend declaration among the <I>public</I> or the <I>private</I> class members. However, friend functions are part of the <I>public</I> interface to a class, so most programmers place friend declarations just above or among the <I>public</I> members.<P>
<A href="list7.htm">Listing 7</a>
shows the test program for rationals rewritten using the <I>iostream</I> library and an overloaded <I>operator</I>&lt;&lt; for rationals. The output expressions freely mix operands of predefined and user-defined types. Using the <I>ostream</I> operators is as convenient and much safer than using <I>printf</I>. <I>printf</I> uses ellipsis (...) arguments, and the compiler checks neither the type nor the number of arguments passed to <I>printf</I>. In contrast, each <I>ostream</I> output statement is actually a sequence of type-safe calls to binary operators.<P>
<h4>References</FONT></h4></P>
<a name="ref1">[1]</a>     Ellis, Margaret A. and Bjarne Stroustrup, The Annotated C++ Reference Manual. Addison-Wesley, Reading, MA, 1990.<P>
<a name="ref2">[2]</a>     Plum, Thomas and Dan Saks, C++ Programming Guidelines. Plum Hall, Somers Point, NJ, 1991.<P>

<h4><a href="../../../source/1992/may92/saks.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
