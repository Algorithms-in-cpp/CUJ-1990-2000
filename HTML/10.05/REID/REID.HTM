


<HTML>
<HEAD>

<TITLE>May 1992/A Simple Formula for Digital Filtering</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmay.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Scientific and Numerical Applications</FONT></H2>

<hr><h2 align="center"><font color="#800000">A Simple Formula for Digital Filtering<A name="00D2_0069"><A name="00D2_0069"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="00D2_0000"><A name="00D2_0000">Christoper E. Reid and Thomas B. Passin</font></h3><hr><blockquote><P>
<P><i><A name="00D2_0000"><A name="00D2_0000">Christopher E. Reid is a senior software engineer at Cadence Design Systems, formerly of MITRE Corporation. He is modeling signal integrity problems on printed circuit boards for Cadence. At MITRE he developed speech-recognition systems, and designed and simulated digital receivers for operation during local thunderstorms. He has extensive experience building software for digital signal processing.</i></P><P>
<P><i>Thomas B. Passin is on the technical staff at MITRE Corporation. His work includes simulations of the effects of an electromagnetic pulse on various antenna/receiver combinations. He developed new techniques for this work which have been verified by experiment. Before joining MITRE, Mr. Passin spent ten years designing and building various detectors of nuclear readiation.</i></P><P>
The cornerstone of digital filtering is the digital simple harmonic oscillator, expressed by a two-term recursion formula<P>
<b><a name="equation1">Equation 1</a></b><P>
<pre>y<SUB>t+1</SUB> = ay<SUB>t</SUB> + by<SUB>t-1</SUB> + cx<SUB>t+1</SUB></pre>
where <I>x</I><SUB><I>t</I></SUB> is the sequence of input values and <I>y</I><I>t</I> is the sequence of output values, and <I>a, b,</I> and <I>c</I> are constants. This simple formula can produce a long clear bell tone of any desired frequency, or a thudding drum like noise, or even a the sound of a cheap tin whistle depending only on the values of the constants and the input values. This article explains why this simple formula works, shows how to calculate the frequency response of this simple filter, and introduces the methods required to implement a filter with any desired frequency response. You will be able to test these concepts yourself if you have a sound board on your system.<P>
<h4><FONT COLOR="#000080"><A name="00D2_006B">The Oscillator<B><A name="00D2_006B"></B></FONT></h4></P>
The general equation for a digital simple harmonic oscillator, shown in <a href="reid.htm#equation1">Equation 1</a>,
 is surprisingly simple. Given a sequence of input points, <I>x</I><SUB><I>t</I></SUB>, and three constants, <I>a, b</I>, and <I>c</I>, the output points <I>y</I><SUB><I>t</I></SUB> are defined by the two-term recursion formula. This equation can oscillate, and, from another point of view, it is also a simple filter. We call it a filter because given an input signal, <I>x</I><SUB><I>t</I></SUB>, it produces an output signal that depends on the input in certain predictable ways. (We explore this point of view in the discussion of the ocsillator as a filter, later in the article.)<P>
In words, <a href="reid.htm#equation1">Equation 1</a> says the position of the oscillating body at time <I>y</I><SUB><I>t</I>+1</SUB> depends on the applied force at that instant, <I>x</I><SUB><I>t</I>+1</SUB>, and on two previous position values. The time value, t, is an integer. This equation is the discrete version of a physical oscillator such as a pendulum, a simple bell, or a tuning fork. This article implicitly assumes the time between sample points is <FONT FACE="Symbol">D</FONT><I>t</I> = 1.<P>
The impulse response of any system is its behavior after being hit with an ideal, instantaneous force. A quick blow of a stick on a drum, or a quick, staccato note on a piano approximates an impulse on each of those systems. In the digital world the ideal impulse is truly attainable. It is a driving force, <I>x</I><SUB><I>t</I></SUB>, which is zero at all times except the instant of the impulse. As a matter of convenience later, we assume the impulse occurs at time <I>t</I> = 1, so the impulse is defined by<P>
<IMG SRC="equata.gif"><P>
The function in <A href="list1.htm">Listing 1</a>
calculates <I>N</I> points of the impulse response of <a href="reid.htm#equation1">Equation 1</a>
and writes the output to a disk file. To see what is happening, examine the output of this algorithm for the special case<P>
<b><a name="equation2">Equation 2</a></b><P>
<IMG SRC="equat2.gif"><P>
so the parameters are<P>
<IMG SRC="equatb.gif"><P>
Calculating a few points by hand reveals that the outputs are<P>
<IMG SRC="equatc.gif"><P>
and then the pattern repeats forever. This can be expressed by noting that, for this example<P>
<IMG SRC="equatd.gif"><P>
Of course this simple result is not an accident. The values for <I>a</I> and <I>b</I> were carefully chosen for this example. However, the result is typical. In this special case, the waveform is a sinusoid with a period of eight data points. The data rate on a CD player is 44,100 samples per second. That means that if this waveform was stored on a CD, you would hear it as a pure tone with the frequency 44100/8 = 5812.5 Hz (cycles per second), which is approximately four octaves above middle-E on the piano, just off the top of the keyboard.<P>
It is instructive to play around with this algorithm. Try it for various values of <I>a</I> and <I>b</I>. Notice that <I>c</I> is simply a scale factor. For some combinations of <I>a</I> and <I>b</I>, the waveform amplitude decays steadily to zero. For other values, you will see it grow until the computer signals a floating-point overflow. You may find some values for which the waveform does not oscillate at all, but climbs steadily upward, maybe turning back down, maybe not. If you have a sound board you can even listen to the output, although you will first have to scale the waveform appropriately and use only integer values. <A href="fig1.htm">Figure 1</a>
shows the output of this function for the equation<P>
<b><a name="equation3">Equation 3</a></b><P>
<pre>y<SUB>t+1</SUB> = 1.6019y<SUB>t</SUB> - 0.9802y<SUB>t-1</SUB> + x<SUB>t+1</SUB></pre>
<h4><FONT COLOR="#000080"><A name="00D2_006E">Calculating the Coefficients<A name="00D2_006E"></FONT></h4></P>
So what is the relationship between the coefficients of <a href="reid.htm#equation1">Equation 1</a>
and its impulse response? A full investigation of that question takes more space and time than this article allows. For the whole story, see chapters one through three of our book <a href="#ref2">[2]</a>, <I>Signal Processing in C</I>. The final result is as follows. It can be shown that the equation<P>
<b><a name="equation4">Equation 4</a></b><P>
<pre>y<SUB>t+1</SUB> = 2e<SUP>-<FONT FACE="Symbol">a</FONT></SUP> cos(<FONT FACE="Symbol">w</FONT>)y<SUB>t</SUB> - e<SUP>-2<FONT FACE="Symbol">a</FONT></SUP>y<SUB>t-1</SUB> + cx<SUB>t+1</SUB></pre>
has impulse response<P>
<b><a name="equation5">Equation 5</a></b><P>
<IMG SRC="equat5.gif"><P>
In other words, when plucked, the system produces a damped sinusoid of frequency <FONT FACE="Symbol">w</FONT> radians per data point with a damping factor of exp(-<FONT FACE="Symbol">a</FONT>) per data point. If the damping is slow (<FONT FACE="Symbol">a</FONT> close to zero) this waveform sounds like a long clear bell tone. If the damping is quick (<FONT FACE="Symbol">a</FONT> large) it sounds more like a drum beat, or a dull thud. You can obtain a waveform of any desired frequency, say <I>f</I> Hz, by using the relationship<P>
<IMG SRC="equate.gif"><P>
where <I>s</I> is the number of samples per second produced by your D/A converter. <a href="reid.htm#equation3">Equation 3</a>
uses <FONT FACE="Symbol">a</FONT> = 0.01, and <FONT FACE="Symbol">w</FONT> = 0.2<FONT FACE="Symbol">p</FONT>, which produces the damped sinusoid of <A href="fig1.htm">Figure 1</a>.
<P>
It is worthwhile to examine some special cases of <a href="reid.htm#equation5">Equation 5</a>.
 First, if <FONT FACE="Symbol">a</FONT> = 0, the waveform does not decay, but remains the same amplitude indefinitely. If <FONT FACE="Symbol">a</FONT> &gt; 0, the waveform decays more or less quickly towards zero. If, however, <FONT FACE="Symbol">a</FONT> &lt; 0 then the waveform grows exponentially until your computer signals a floating-point overflow.<P>
As long as <FONT FACE="Symbol">a</FONT> &gt;= 0 the impulse response is well behaved no matter what the value of <FONT FACE="Symbol">w</FONT>. There is one special case to consider, <FONT FACE="Symbol">w</FONT> = 0. In that case, <a href="reid.htm#equation5">Equation 5</a>
does not seem to work. However, the recursion <a href="reid.htm#equation4">equation 4</a>
is well defined for this case. Its impulse response can be obtained from <a href="reid.htm#equation5">Equation 5</a>
by taking the limit as <FONT FACE="Symbol">w</FONT> approaches 0, which gives the proper impulse response in this case,<P>
<b><a name="equation6">Equation 6</a></b><P>
<IMG SRC="equat6.gif"><P>
This waveform does not oscillate. <A href="fig2.htm">Figure 2</a>
plots this function for the case <FONT FACE="Symbol">a</FONT> = 0.01, the same damping used for <a href="reid.htm#equation3"Equation 3</a>.
<P>
<h4><FONT COLOR="#000080"><A name="00D2_0072">The Oscillator as a Filter<A name="00D2_0072"></FONT></h4></P>
As mentioned before, <a href="reid.htm#equation1">equation 1</a>
can be thought of as a filter applied to the input waveform {<I>x</I><SUB><I>t</I></SUB>}. Oscillators can be used as signal sources, which was the focus in the previous sections, or as signal modifiers, called filters. Both uses are important. For example, most high-fidelity amplifiers have treble and bass controls, which are simple filters designed to selectively attenuate or boost the desired frequency range. Equalizers consist of a set of simple bandpass filters. All of these functions could be implemented as digital filters, and undoubtedly will be in the near future.<P>
The function in <A href="list2.htm">Listing 2</a>
takes <I>N</I> input points and produces <I>N</I> output points using <a href="reid.htm#equation1">Equation 1</a>
as a filter (with <I>c</I> = 1). For example, <A href="fig3.htm">Figure 3</a>
shows the waveform produced by <a href="reid.htm#equation3">Equation 3</a>
when driven by white noise using this algorithm. When played through a D/A converter this waveform sounds somewhat like a cheap tin whistle.<P>
Filters are not very useful without some method of designing them to give the frequency response required for a given application. The first step of that process is calculating the frequency response of <a href="reid.htm#equation1">Equation 1</a>.
 It is not particularly difficult to derive the required formulas, but it would take quite a few pages. (For the details see chapter 14 of <a href="#ref2">[2]</a>.) The formula for the gain of <a href="reid.htm#equation1">Equation 1</a>
is simple to remember by writing the formula with all three output terms on the same side like this,<P>
<pre>y<SUB>t+1</SUB> - ay<SUB>t</SUB> - by<SUB>t-1</SUB> = cx<SUB>t+1</SUB></pre>
The left-hand side of this equation looks like a polynomial, and the resemblance is more than superficial. The gain of this filter as a function of frequency <FONT FACE="Symbol">w</FONT> is given by<P>
<b><a name="equation7">Equation 7</a></b><P>
<IMG SRC="equat7.gif"><P>
This gain is given in terms of power (voltage squared) because that is the quantity of primary concern.<P>
The appearance of the complex exponential in <a href="reid.htm#equation7">Equation 7</a>,
<P>
<pre><I>e</I><SUP><I>jw</I></SUP> = cos(<FONT FACE="Symbol">w</FONT>) + <I>j</I> sin(<FONT FACE="Symbol">w</FONT>)</pre>
implies the gain is the same for any frequency <I>Q</I> = <FONT FACE="Symbol">w</FONT> + 2<FONT FACE="Symbol">p</FONT><I>k</I> for any integer <I>k</I>. That means that the gain only needs to be calculated for some fixed range of <FONT FACE="Symbol">w</FONT> of length 2<FONT FACE="Symbol">p</FONT>. Conventionally the frequency range considered is -<FONT FACE="Symbol">p</FONT> to <FONT FACE="Symbol">p</FONT>. Because only the squared-magnitude of the complex polynomial is used in <a href="reid.htm#equation7">Equation 7</a>,
 we also have<P>
<IMG SRC="equatf.gif"><P>
In other words, the gain at -<FONT FACE="Symbol">w</FONT> is the same as the gain at <FONT FACE="Symbol">w</FONT>. The solid line in <A href="fig4.htm">Figure 4</a> plots the gain of <a href="reid.htm#equation3">equation 3</a>, the same equation used for <A href="fig1.htm">Figure 1</a> and <A href="fig2.htm">Figure 2</a>. The dashed line in <A href="fig4.htm">Figure 4</a> is for an oscillator with the same frequency, but with damping term <FONT FACE="Symbol">a</FONT> = 0.05 instead of 0.01 in <a href="reid.htm#equation3">Equation 3</a>. The peak of the gain spreads as the damping <FONT FACE="Symbol">a</FONT> increases.<P>
<h4><FONT COLOR="#000080"><A name="00D2_0074">A More General Filter<A name="00D2_0074"></FONT></h4></P>
The simple harmonic oscillator is only the simplest possible equation of an infinite family of possibilities. The general recursion formula for this type of filter is given by (with a change of notation from <a href="reid.htm#equation1">Equation 1</a>)
<P>
<b><a name="equation8">Equation 8</a></b><P>
<pre>y<SUB>t+1</SUB> = -c<SUB>1</SUB>y<SUB>t</SUB> - c<SUB>2</SUB>y<SUB>t-1</SUB> - . . . - c<SUB>n</SUB>y<SUB>t-n+1</SUB> + kx<SUB>t+1</SUB></pre>
There can be any number of fixed, real coefficients for this type of equation. The gain of this equation as a function of frequency is, in a way, no more difficult to calculate than the special case already considered. The equation can be rearranged as before,<P>
<pre>y<SUB>t+1</SUB> + c<SUB>1</SUB>y<SUB>t</SUB> + c<SUB>2</SUB>y<SUB>t-1</SUB> + . . . + c<SUB>n</SUB>y<SUB>t-n+1</SUB> + kx<SUB>t+1</SUB></pre>
which makes the left-hand side resemble a polynomial. Just as in the simpler case, the gain of this equation can be written as<P>
<b><a name="equation9">Equation 9</a></b><P>
<IMG SRC="equat9.gif"><P>
It is possible to approximate any desired frequency-response curve to any specified accuracy using this polynomial. There are, however, practical problems in some cases. These difficulties are typical of numerical calculations in general, and will not be discussed in this article. In practice, it is necessary to test your implementation to make sure the frequency response is as desired. Special design techniques exist for the most commonly desired filter types. Park's book <a href="#ref1">[1]</a> is an excellent reference in this area.<P>
<h4><FONT COLOR="#000080"><A name="00D2_0077">Filters and Circular Buffers<A name="00D2_0077"></FONT></h4></P>
The code of <A href="list1.htm">Listing 1</a>
and <A href="list2.htm">Listing 2</a>
was sufficient for demonstration purposes, but something more is required to implement the more general filter of <a href="reid.htm#equation8">Equation 8</a>.
 The simple harmonic oscillator uses a two-term recursion formula which means it had to keep track of two previous output values. The general formula, <a href="reid.htm#equation8">Equation 8</a>,
 requires the handling of <I>n</I> previous output values. The simple procedure of <A href="list2.htm">Listing 2</a>
is not efficient when generalized to these more complicated filters. Furthermore, the previous code could filter only one vector of input values. More often it is necessary to keep the set of previous output values for use on the next vector to be filtered. Physically, these values represent energy stored in the oscillator. Throwing them away and starting over again would be like turning off your television every time you changed channels. A general purpose algorithm must save these values.<P>
The best way to store the old filter outputs is in a <I>circular buffer</I>. In general, a circular buffer can be any length, <I>N</I>. The array index, <I>i</I> ranges from <I>0</I> to <I>N-1</I>, and then wraps around back to <I>0</I>. Mathematically, the array index is calculated modulo <I>N</I>. Such a circular buffer is exactly what is needed to hold the history of <I>n</I> previous output values of the filter, <a href="reid.htm#equation8">Equation 8</a>.
 We can simply use a circular buffer of length <I>N </I>=<I> n</I>, store the filter outputs in order, and keep an index to the most recent value. All the values can then be accessed by incrementing the index from that initial value modulo <I>N</I>. Once a new filter output is calculated, that value overwrites the oldest previous output value in the buffer, and the index to the most recent value is adjusted accordingly.<P>
This technique does work, but there is one problem. Every time an index is calculated, code that checks its value and calculates a new value modulo <I>N</I> when required must be executed. This is not efficient. It requires one, maybe two comparisons, a jump of the program counter if nothing needs to be done, and an addition, subtraction, or modulus operator if the value must be adjusted. This is a significant problem because this code will be executed <I>n</I> times for each output value of the filter calculated.<P>
The process is much more efficient if <I>N</I> is chosen to be a power of 2, N = 2<SUP>m</SUP>. Of course, this often requires allocating a larger block of memory for the circular buffer than would otherwise be required, but this is usually not a problem. The key to writing more efficient code is the relationship<P>
<pre>i &amp; M = i modulo N, with M = 2<SUP>m</SUP> - 1</pre>
where <I>i</I> is any integer and <I>&amp;</I> is the masking operator (bitwise AND) of C. Thus, for example, the code to increment <I>i</I> by one and calculate its value modulo <I>N</I> reduces to<P>
<pre>i = (i + 1) &amp; M</pre>
The masking operator is very fast on most machines, so this code is very efficient.<P>
To see why this masking operation is the same as calculating <I>i</I> modulo <I>N</I> = 2<I>m</I>, remember that the binary representation of M = 2<SUP>m</SUP> - 1 is <I>m</I> ones, filling bits 0 through <I>m</I>-1 of the integer representation. Thus any part of the integer that is a multiple of 2<SUP>m</SUP> is masked to zero (bits <I>m</I> and higher in the integer). This also works for negative numbers, as some reflection along the same lines will reveal. All this assumes the processor uses 2's complement binary arithmetic. There are very few processors that do not meet this requirement.<P>
<A href="list3.htm">Listing 3</a>
shows the structure definitions for the circular buffer and the filter routine. The circular buffer contains a member, <I>index</I>, which is used as the index into the buffer member where the next value should be placed. The mask member is the mask value as discussed above. It is assumed that this structure has been initialized with a length equal to a power of 2, the smallest power of 2 needed to contain the required output values. Usually the buffer is initialized to hold zeros.<P>
The <I>Filter</I> structure in <A href="list3.htm">Listing 3</a>
contains a pointer to a <I>CircularBuffer</I> and an array of filter coefficients. These coefficients are the {c<SUB>1</SUB>, c<SUB>2</SUB>, ..., c<SUB>n</SUB>} of <a href="reid.htm#equation8">Equation 8</a>.
 This structure is used by the filter routine shown in <A href="list4.htm">Listing 4</a>.
 The code is a straightforward implementation of <a href="reid.htm#equation8">Equation 8</a>
except for the circular buffer which has already been explained. Notice that a local copy of the circular buffer structure is constructed. A glance at the structure definition in <A href="list3.htm">Listing 3</a>
shows only two integers and one pointer are copied. If integers and pointers are both four bytes that means only 12 bytes are moved. This little bit of overhead saves execution time later by removing one level of indirection to retrieve these values from inside the loop.<P>
The simplified code presented in this article should be enough to get started using digital filters. More general code requires a better way to handle vectors of data, and more flexible filtering routines that allow other filter techniques not discussed here. Reference <a href="#ref2">[2]</a> gives a full account of these considerations. Further, a source code library of DSP routines is available as well as an interactive DSP environment for testing many DSP concepts. Contact Reid Associates Companion Software, (800) 374-7343.<P>
<h4>References</FONT></h4></P>
<a name="ref1">[1]</a>     T. W. Parks and C. S. Burrus. Digital Filter Designs. Wiley-Interscience, John Wiley and Sons, Inc., 1987.<P>
<a name="ref2">[2]</a>     Christopher E. Reid and Thomas B. Passin. Signal Processing in C. John Wiley and Sons, Inc., New York, 1992.<P>

<h4><a href="../../../source/1992/may92/reid.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
