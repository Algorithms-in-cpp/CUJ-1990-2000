


<HTML>
<HEAD>

<TITLE>May 1992/Number Crunching in C</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmay.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Scientific and Numerical Applications</FONT></H2>

<hr><h2 align="center"><font color="#800000">Number Crunching in C<A name="00CD_0067"><A name="00CD_0067"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="00CD_0000"><A name="00CD_0000">William Smith</font></h3><hr><blockquote><P>
<P><i><A name="00CD_0000"><A name="00CD_0000">William Smith is the engineering manager at Montana Software, a software development company specializing in custom applications for MS-DOS and Windows. You may contact him by mail at P.O. Box 663, Bozeman, MT 59771-0663.</i></P><P>
<h4><FONT COLOR="#000080"><A name="00CD_0068">C as a Number Crunching Language<A name="00CD_0068"></FONT></h4></P>
The scientific community has long considered FORTRAN a language better suited to numerical applications then C. A common belief is that C is a low-level language for systems programming and FORTRAN is for number crunching. Even fine books such as <I>Numerical Recipes in C</I> help perpetuate this notion. If used properly, I believe C is a better number crunching language than FORTRAN. Because of its flexibility and low-level language features C can be optimized beyond FORTRAN.<P>
In this article I am going to point out some of the features of C that can produce faster algorithms. To illustrate, I will analyze the tasks of inverting a matrix and solving a set of simultaneous equations. These tasks are required operations for many numerically-intensive applications. I will present two versions of the Gauss-Jordan numerical method for solving a system of equations and inverting a matrix. The first is a FORTRAN-like algorithm in C the second is a version that utilizes features unique to C.<P>
<h4><FONT COLOR="#000080"><A name="00CD_0069">Advantages of C Over FORTRAN<A name="00CD_0069"></FONT></h4></P>
Besides floating-point operations, addressing and moving large amounts of data are operations that take up processing time in numerical applications. To increase code performance, the programmer must improve the speed of floating-point operations, decrease the overall number of operations and make the data addressing more efficient. Not much can be done to improve upon the speed of the floating-point operations. It is highly dependant upon the math library and hardware. What you can easily improve upon are the methods of addressing and the number of operations in a particular algorithm.<P>
One of the features of C that differentiates it from FORTRAN is the pointer type and the resulting direct access to memory. In C, you can address memory with a closeness and power that does not exist in FORTRAN. You can also use direct memory access to speed up your numerical routines. Numerical applications that process large arrays and matrices of floating-point numbers can benefit greatly by improvements in addressing and operation reduction through the use of pointers. In C, by using pointers, you can exchange two rows of a matrix with a single swap operation. In FORTRAN, you are forced to use a swap operation for each element in the row. Ironically much of the C code that was inspired or translated from FORTRAN inherits this inefficiency. But all it takes is some minor changes and use of pointers to speed up this code.<P>
<h4><FONT COLOR="#000080"><A name="00CD_006A">Gauss-Jordan as an Example<A name="00CD_006A"></FONT></h4></P>
The Gauss-Jordan elimination method of inverting a matrix and solving a set of simultaneous equations is a popular and well-known methodology in numerical analysis. Gauss-Jordan is a variation of the simpler Gaussian elimination algorithm. Gauss-Jordan both inverts a matrix and solves a set of linear equations.<P>
For example, the following set of three linear equations in three unknowns <P>
<pre>6x + -4y + 6z = -4
4x + 5y + -2z = 10
-6x + 2y + -5z = 3</pre>
becomes<P>
<IMG SRC="equat1.gif"><P>
in matrix notation. You can further simplify the expression to <I>[A][X] = [B]. </I>The first matrix, <I>[A]</I>, is the coefficient matrix. The solution vector, <I>[X]</I> and the constant vector, <I>[B]</I>, follow in the expression. For the above example the solution vector <I>[X]</I> is <P>
<IMG SRC="equat2.gif"><P>
and the inverse of <I>[A]</I> is<P>
<IMG SRC="equat3.gif"><P>
Gauss-Jordan is not the best choice of numerical methods if one is only interested in solving a set of linear equations and not interested in obtaining the inverse of a matrix. Neither is it the best choice for inverting matrices if the matrix is sparse or conforms to certain classes of matrices. Nevertheless, Gauss-Jordan is popular and will serve as an excellent example for the points I wish to make.<P>
The optimization techniques I present here utilize more efficient ways to address and access matrices. You can apply these techniques to other numerical methods not just Gauss-Jordan. I use a variant of the Gauss-Jordan algorithm that employs partial pivoting. Partial pivoting is the process of exchanging rows in the matrix. Without it, the reduction method is prone to round-off error and divide-by-zero singularities. Full pivoting involves the exchange of columns in addition to the exchange of rows. Full pivoting is slightly more stable, but is more complicated and potentially slower. The pivoting process is the operation that benefits the most from addressing optimization. Nearly all matrix-inversion and simultaneous-equation solution algorithms utilize pivoting and can benefit from addressing optimization.<P>
<h4><FONT COLOR="#000080"><A name="00CD_006B">Matrices in C<A name="00CD_006B"></FONT></h4></P>
To employ pointer-addressing optimization, matrices must be set up in a specific way. To accomplish this, I have created a new type, <I>matrix_t</I>, and the corresponding constructor and destructor functions for this type. <A href="list1.htm">Listing 1</a>,
 <I>MATRIX_T.C</I>, contains the code for the functions to create and destroy matrices of type <I>matrix_t</I>. <A href="list2.htm">Listing 2</a>
contains the associated <I>include</I> file, <I>MATRIX_T.H</I>, for <I>MATRIX_T.C.</I> I define the matrix type, <I>m</I><I>atrix_t</I>, in <I>MATRIX_T.H.</I><P>
In FORTRAN array indices begin at 1. In C, array indices begin at 0. I have seen this difference handled in three different ways when translating FORTRAN code to C. One is to dimension the arrays and matrices an extra element larger. Since this method never uses the 0 array element, this method wastes space. Another method is to change the loop indices to start at 0 and go to the array size minus 1. A third way is to shift the starting array index to 1 by decrementing the pointer that is set to the array name. This last method requires a bit of extra bookkeeping. I choose to let array indexing begin at 0 and to change the loop indices.<P>
<h4><FONT COLOR="#000080"><A name="00CD_006C">Multiple Block Matrices<A name="00CD_006C"></FONT></h4></P>
The function <I>cr_matrix</I> in <A href="list1.htm">Listing 1</a>,
 allocates the memory for a matrix on the heap and sets it up so you can use array (<I>[]</I>) notation to access elements in the matrix. You use the expression, <I>A[i][j]</I>, to access the element at the <I>i</I>th row and <I>j</I>th column of matrix A. <I>cr_matrix</I> first allocates memory for the pointers to the rows of the matrix. It then allocates memory for each row individually and assigns a row pointer to this memory. I use the function <I>calloc</I> to allocate the memory because it will also initialize all the memory to 0. <I>cr_matrix</I> calls the function <I>calloc</I> once for every row and once for the row pointers. This results in the allocation of many separate blocks of memory. The number of blocks is equal to the number or rows plus one. This has advantages and disadvantages over allocating a single block of memory. The disadvantages are that it is slower and more complicated; and requires more memory overhead, a special destructor function, and may later fragment memory. The only advantage is that it works well with the segmented architecture of the Intel processors under MS-DOS. When using the large or compact memory models that employ far pointers, you can create matrices that total larger than a single 64KB segment of memory.<P>
<h4><FONT COLOR="#000080"><A name="00CD_006D">Single Block Matrices<A name="00CD_006D"></FONT></h4></P>
For situations of abundant memory or if you are using near pointers with the small or medium memory models, I suggest you use the function <I>cr_matrix_s</I>, shown in <A href="list1.htm">Listing 1</a>.
 This function creates a matrix on the heap with a single call to <I>calloc</I>. The way <I>cr_matrix_s</I> accomplishes this, is to allocate enough memory in a single block to hold both the pointers to rows and all the rows. The pointers to rows are then set equal to the address of where each of the rows begin in the block. You can destroy a matrix created with <I>cr_matrix_s</I> with a single call to <I>free</I>. I have included a destructor function, <I>fr_matrix_s</I>, in <I>MATRIX_T.C</I>, shown in <A href="list1.htm">Listing 1</a>,
 for completeness. All it does is make a call <I>free. fr_matrix_s</I> is an ideal candidate for replacement with a macro.<P>
<h4><FONT COLOR="#000080"><A name="00CD_006E">Gauss-Jordan FORTRAN Style<A name="00CD_006E"></FONT></h4></P>
<I>GS_JRD_F.C</I>, shown in <A href="list3.htm">Listing 3</a>,
 contains a version of the Gauss-Jordan function, <I>gauss_jordan</I>, that will look familiar to anyone that has coded or seen the Gauss-Jordan function coded in FORTRAN. (<A href="list5.htm">Listing 5</a>
contains the associated <I>include</I> file. It can be used in both the FORTRAN-style code or the C-style code.) It is also indicative of what you will see in much of the published numerical C code. The function takes a matrix of the equation coefficients and a matrix of the constant vectors as parameters. <I>gauss_jordan</I> also requires the number of rows and the number of constant vectors as parameters. There is not a single pointer dereference operator (*) or address of operator (&amp;) in the entire function. This is FORTRAN-style C. Code blindly translated from FORTRAN to C looks like this. It is straight forward, easy to understand, and logical. But it is not as efficient as it can be.<P>
<h4><FONT COLOR="#000080"><A name="00CD_006F">Gauss-Jordan C Style<A name="00CD_006F"></FONT></h4></P>
<I>GS_JRD_C.C</I>, shown in <A href="list4.htm">Listing 4</a>
(and the associated <I>include</I> file in <A href="list5.htm">Listing 5</a>)
, contains a version of function <I>gauss_jordan</I> that takes advantages of the features of C. Overall it is not that different than the FORTRAN-style version of <A href="list3.htm">Listing 3</a>.
 Upon closer examination, the differences become apparent. I wrote the code so the two different implementations are line for line comparable. What are the differences? I use variables to store temporary values to limit the level of indirection when evaluating an expression with array notation inside loops. This is no big deal. Some compilers with advanced and aggressive optimization may do this for you. Unfortunately, you can not count on it. What else is different? The section of code that swaps the elements between two rows is different. The FORTRAN-style version of <I>gauss_jordan</I> employs a loop through all the columns of a row and swaps each row element. The C-style version eliminates this loop and swaps pointers to the rows. This swapping must be done for both the matrix of the coefficients and the matrix of the constant vectors. This difference can eliminate many operations. This is especially true for large coefficient or constant-vector matrices.<P>
<h4><FONT COLOR="#000080"><A name="00CD_0070">Using <B><I>gauss_jordan</I><A name="00CD_0070"></B></FONT></h4></P>
The following code fragment illustrates the sequence of how to use the <I>gauss_jordan</I> function. You first make a call to <I>cr_matrix</I> to create the space for the coefficient and constant-vector matrices. Then you load the matrices with data. Where the data comes from and what is done with the results of the matrix inversion and equation solution is application specific. For this reason, I have not included a demonstration program. Once the matrices are loaded with values, your program can make a call to <I>gauss_jordan</I>. <I>gauss_jordan</I> replaces the coefficient matrix with its inverse and the constant vector matrix with solution vectors. You can then process the results. When you are finished with the results, you destroy the matrices by calls to <I>fr_matrix</I>. <P>
<pre>.
.
.
matrix_t A, B;

/* Create space for matrix */
A = cr_matrix( NumRow, NumRow );
B = cr_matrix( NumRow, NumVec );

/* Load matrix here */

/* Calculated inverse
** and solve system */
status = gauss_jordan(
     A, NumRow,
     B, NumVec );

/* Process the results */

/* Destroy matrix */
fr_matrix( A, NumRow );
fr_matrix( B, NumRow );

.
.
.</pre>
<h4><FONT COLOR="#000080"><A name="00CD_0071">C versus FORTRAN Style<A name="00CD_0071"></FONT></h4></P>
So what are the advantages and disadvantages of the C-style code to the FORTRAN-style code? Depending on how far you take the optimization, the readability of the C-style code may suffer. The C-style code in <A href="list4.htm">Listing 4</a>
is still quite readable. Proper choice of variable names helps in this regard. The difference in compiled size is not very significant. Under Microsoft C v6.0 with full optimization, the object code size for the FORTRAN-style version was 1038 bytes. The C-style was 962 bytes. The savings in size are small. Possibly this may be important for an embedded application.<P>
Although the size difference is not very significant, the speed advantage of the C style over the FORTRAN style is significant. This is especially true as the matrix size increases. I tested three different matrix sizes. For each case, I only used a single-column constant vector. If solving for more than one constant vector at a time, the differences would be greater.<P>
<A href="tab1.htm">Table 1</a>
shows the ratio of the C-style time to the FORTRAN-style time. I used Borland's Turbo Profiler to measure how much time was spent in the <I>gauss_jordan</I> function. I generate the ratios by dividing the amount of time spent in the C-style code by the amount of time spent in the FORTRAN-style code. This normalizes the time spent in the FORTRAN code to 1. The smaller the number the faster the C-style code as compared to the FORTRAN-style code. I use the ratios here since actual times are very hardware dependant and lose meaning from one system to another. It is clear that the speed advantage of the C-style code increases as the matrix size increases. In fact, for the three points tested, the ratio decreases linearly with the matrix row size. I doubt it remains linear for long, but probably approaches the value of zero asymptotically for large matrices. I would expect the C style to be twice as fast as the FORTRAN style for a 20 x 20 matrix and an order of magnitude (10 times faster or taking 0.1 of the time) faster for a 100 x 100 matrix. I ran the tests on a 25MHz 80486 computer. The ratios may be different on a system without a math co-processor. <P>
<h4><FONT COLOR="#000080"><A name="00CD_0072">Other Optimization<A name="00CD_0072"></FONT></h4></P>
The optimization to the C-style version of <I>gauss_jordan</I> in <A href="list4.htm">Listing 4</a>
are by no means complete. A goal I kept in mind when writing the C-style version was to keep the overall algorithm the same and maintain clarity. I was tempted to totally replace the array notation with pointer notation and pointer incrementing. You may gain some additional time savings from this. You can even replace the <I>for</I> loops with <I>while</I> loops and increment pointers. I avoided these optimizations because I have found that the savings are small especially with an optimizing compiler. Besides the code starts to diverge significantly in style. The algorithm is hard to follow and to compare directly with the FORTRAN-style code if it changes too much.<P>
Another possible optimization, that became apparent, does not depend on features unique to C. When using the profiler on the code I discovered that the <I>fabs</I> function was taking up nearly as much time as the rest of the <I>gauss_jordan</I> function. By creating a temporary place holder for both <I>fabs ( Pivot )</I> and the sign of <I>Pivot</I>, the number of times <I>gauss_jordan</I> calls <I>fabs</I> can be reduced. By decreasing the amount of time spent in floating-point operations, the time savings due to addressing improvement and operation reduction becomes even more significant. This optimization will tend to further decrease the ratios in <A href="tab1.htm">Table 1</a>.
<P>
<h4><FONT COLOR="#000080"><A name="00CD_0073">Conclusions<A name="00CD_0073"></FONT></h4></P>
No computer is fast enough. This truism becomes all to apparent when waiting hours for your computer to calculate a 1,000 node finite element model of a real physical system. Speed becomes important when doing scientific modeling, finite element analysis and any application that must process a large amount of data. Even though the speed of hardware is constantly improving, you can realize significant speed advantages by attention to detail when writing code. By taking advantage of some of the features of C, you can also significantly improve the performance of existing numerical code in C that was translated from FORTRAN.<P>

<h4><a href="../../../source/1992/may92/smith.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
