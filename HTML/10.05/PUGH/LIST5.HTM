<HTML><HEAD>
<TITLE>May 1992/Questions & Answers/Listing 5</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 5</A></h4>
<pre>/*  A header file */

   struct s_number
      {
      int number_of_elements;
      int overflow;       /* Overflow (single bit) */
      int sign;           /* Sign (0 = positive, 1 = negative) */
      long int element[]; /* Kept in least significant first order */
      };
   typedef struct s_number *NUMBER;

   NUMBER new_number(long initial_long_value);
   NUMBER add_numbers(NUMBER add1, NUMBER add2);

/*  This is a short program with its use */

main()
   {
   NUMBER first_number;
   NUMBER second_number;
   NUMBER sum;

   first_number= new_number(10000);
   second_number= new_number(10000);
   sum = add_numbers(first_number, second_number);
   }

/*  The routines */

NUMBER new_number(NUMBER number, long initial_long_value)
   {
   number = calloc(sizeof(struct s_number) + 1, 1);
   if (number != NULL)
      {
      number-&gt;number_of_elements = 1;
      number-&gt;element[0] = initial_long_value;
      }
   return number;
   }

NUMBER add_numbers(NUMBER add1, NUMBER add2)
   {
   NUMBER sum;
   int size_sum;    /* Size of result */
   int size_count;  /* Size of smaller addend */
   int i;
   int overflow;
   int sign;
   int which_is_bigger;

   /* Should check for overflow here and increase size_sum */
   if (add1-&gt;number_of_elements &gt; add2-&gt;number_of_elements)
      {
      size_sum = add1-&gt;number of elements;
      size_count = add2-&gt;number_of_elements;
      which_is_bigger: 1;
      }
   else
      {
      size_count = add1-&gt;number_of_elements;
      size_sum = add2-&gt;number of elements;
      which_is_bigger = 2;
      }

   /* Get a place for the result */
   sum = calloc(sizeof(struct s_number) + size_sum, 1);

   /* Do the addition - will need to check for overflow, sign, etc. */
   for (i = 0; i &lt; size_count++; i++)
      {
      /*  Need to check for overflow */
      sum-&gt;element[i] = add1-&gt;element[i] + add2-&gt;element[i] +
         overflow;
      }

   /* Do the remainder of the larger addend */
   for (i = size_count; i &lt; size_sum; i++)
      {
      if (which_is_bigger == 1)
         sum-&gt;element[i] = add1-&gt;element[i] + overflow;
      else
         sum-&gt;element[i] = add2-&gt;element[i] + overflow;
      overflow = 0;
      }

   /* Need to test overflow of the larger addend
     and set sum here */

   return sum;
   }
/* End of File */
</pre>
</BODY>
</HTML>
