


<HTML>
<HEAD>

<TITLE>May 1992/Questions & Answers</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmay.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Questions &amp; Answers<A name="0103_0079"><A name="0103_0079"></font></h2><P>
<h3 align="center"><A name="0103_0000"><A name="0103_0000">Modifying IBM Extended Characters</h3><P>
<h3 align="center"><font color="#800000">Ken Pugh</font></h3><hr><blockquote><P>
<P><i><A name="0103_0000"><A name="0103_0000">Kenneth Pugh, a principal in Pugh-Killeen Associates, teaches C language courses for corporations. He is the author of C Language for Programmers and All On C, and was a member on the ANSI C committee. He also does custom C programming for communications, graphics, image databases, and hypertext. His address is 4201 University Dr., Suite 102, Durham, NC 27707. You may fax questions for Ken to (919) 489-5239. Ken also receives email at kpugh@dukemvs.ac.duke.edu (Internet).</i></P><P>
<B>Q</B><P>
I need help with the following problem. I want to be able to change the appearance, on screen, of one or more of the IBM extended characters (128 to 255). For instance, character number 157 is a symbol for the Japanese yen (x) and I would like to change it to a character which is half white/half black divided diagonally. I believe what I need is a character editor.<P>
In fact, such a character editor (in BASIC) is described in a Tandy publication <I>Graphics and Sound for the Tandy 1000s and PC Compatibles</I> (pg. 164). This is just what I need but I need (want) to do it in C.<P>
I am informed that the extended character set is located in its own area of memory. I know it's possible to copy that section of memory elsewhere and then change the pointers that pointed to the default set so that they now point to the new location. I then want to change character 157 so that when I press <B>ALT</B>-157 it will give me my new shape instead of the YEN symbol. I also want to save this area of memory to disk and bring it back when I need it.<P>
In the book <I>The New Peter Norton Guide to the IBM PC &amp; PS/2</I> a description is given (pg. 187) on how to do this with ROM BIOS <I>int 10h</I>:<P>
"...to define your own characters you need to use subservice <I>11H</I>, as follows: Place a table of the bit patterns that define the characters in a buffer. Then call subservice <I>11H</I> with the address of the table in <I>ES:BP</I>, the number of characters in <I>CX</I>, the ASCII code of the first character in the table in <I>DX</I>, and the number of bytes in each character's bit pattern in <I>BH</I>."<P>
One of my main hang-ups is how to get the table address into <I>ES:BP</I>. My available literature doesn't tell me how. So how do you do it?<P>
I also would appreciate a simple routine for changing the bit pattern of any particular character. Is there an article or book which explains this?<P>
Jack Steiner<br>
Cedar Grove, NJ<P>
<B>A</B><P>
The routine you are describing is one that works only for EGA and newer video adapters. The original <I>IBM Technical Reference</I> manual only stated how to modify the extended characters (put the address of 1KB table &#151; 128 * 8 bytes each &#151; into location <I>0X7C)</I> that were used when in graphics mode. Those graphic character patterns are actually in the processor memory. With the EGA, the character patterns you are referring to are stored on the adapter.<P>
<A href="fig1.htm">Figure 1</a>
shows the interface stated by <I>The EGA Technical Manual</I> for changing the generator characters. The block to load can be 0 to 3, depending on how much storage your EGA card has. With a bit of programming, you can set up two blocks and have 512 different characters.<P>
To load an entire table, set <I>CX</I> to 256, <I>DX</I> to 0, <I>BH</I> to 8 (or whatever the number of scan lines/characters for the screen mode you want to use), and <I>ES:BP</I> to point to the table. To load a single character, simply set <I>CX</I> to 1 and <I>DX</I> to the character value, <I>BH</I> to 8, and <I>ES:BP</I> to point to the table containing the single character.<P>
I assume you are going to be using a compiler that has an <I>int86x</I> or similar function. This function sets up the register according to the values you pass it in a structure, calls the desired interrupt, and then returns the register values in another passed structure. <A href="list1.htm">Listing 1</a>
gives an example.<P>
I've used shifts and masks to get to the segment and offset portions of the address. You could use <I>FP_OFF (address)</I> and <I>FP_SEG (address)</I>, if you are using Microsoft. Using the shift and mask is the most portable construction I know if you shift a lot between compilers and don't want to bother with making up a header file. Instead of including my custom header file that has its own definitions for <I>segment_of</I> and <I>offset_of</I>, I've written out the equivalent shift and mask operators. This is essentially what <I>FP_OFF (address)</I> and <I>FP_SEG(address)</I> do in Microsoft.<P>
For the benefit of our readers who may want to investigate DOS interrupts, I've included an excerpt (<A href="list2.htm">Listing 2</a>)
 from a quicky program that I wrote that allows you to read a particular cluster on the hard disk, using a DOS interrupt. If the directory structure on a disk is corrupt, you could read through the disk (ala Norton and other programs) and write the data out to the screen or another file. It assumes a particular cluster size and offset, (as befits a quicky program).<P>
<B>Q</B><P>
Could you please answer me this question: may a strictly ANSI performing C compiler accept old style operators like <I>=-?</I> Actually, we have been searching several days for the reason why one of our programs produced slightly different results on an HP9000/700. Normally, we separate all ='s with spaces but there was one statement<P>
<pre>x =-1.0;</pre>
(without any spaces!) which was compiled as X = X-1.0.<P>
HP claims an ANSI compiler (for which you have to pay a lot of money to HP) can do so and the user has to separate = and - by spaces.<P>
I would be glad if you would tell me your opinion as far as possible.<P>
Dr.-Ing. Dieter Scharpf<br>
Weinstadt-Endersbach, Germany<P>
<B>A</B><P>
<I>= -</I> is not a valid ANSI operator. <I>X= -1</I> consists of three tokens: <I>x</I>,<I> =</I>, and <I>-1</I>. Some compilers give warnings of <I>X= -1</I> being obsolete, but they still interpret it as <I>x = -1</I>.<P>
<B>Q</B><P>
I need to trap printer errors, like <I>Out of paper, Printer taken off-line</I>. I guess I need to write an interrupt handler of some sort. So far my searches for skeleton code have been fruitless. I know this has to have been written over and over.<P>
Can you please point me in the direction of code samples, books, articles, anything to help me. This needs to work with simple <I>fprintf</I> statements, normally to <I>PRN</I>, running on DOS. I know what I want to write inside the error handler, I just need to know what to write to let DOS know my handler exists.<P>
Barrie Adsett<br>
San Diego, CA<P>
<B>A</B><P>
For the benefit of our readers, this answer will be a little more comprehensive than the one item for which you requested information. You didn't mention what compiler you are using. Both Borland and Microsoft have a critical error-handler function. You specify a function to call when a critical error occurs. Note that you will get control regardless of the type of error.<P>
The sample in <A href="list3.htm">Listing 3</a>
is Microsoft's version. Borland has a similar function, the only difference is that the parameters that are passed to <I>your_error_handler</I> are slightly different. The prototype for the function that sets up your handler is<P>
<pre>void _harderr( void (_far *handler)() );</pre>
You need to create a function to handle the error and call <I>_harderr</I> to set up that function. When called, it will receive three items. The first is a device error. This contains bits denoting which disk drive (if any) and what possible action can be taken. The bits of <I>dos error</I> are shown in <A href="fig2.htm">Figure 2</a>
(from <I>MS-DOS Programmer's Reference Manual</I> by Microsoft).<P>
The other two items are the MS-DOS error code and a pointer to the header for the device which caused the error. Your function should call <I>_hardretn</I> or <I>_hardresume</I>, depending on what you want your program to do. Do not use DOS inside your handler to output any messages, since it is not reentrant. Call the BIOS instead.<P>
<B>Q</B><P>
I'm new to the C programming language. I basically would like to ask you how does one read very large integers into a linked list? I would like to use some code from page 221 of <I>Data Structures Using C</I> by Tenebaum, Langsam, &amp; Augenstein. I would like to be able to add, multiply, divide, and subtract any integer. This code on page 221 gives me a start by setting up the <I>addint</I> routine. I'm sure I could come up with the others I think, but I would like to know how to read very large integers into a linked list. Also, could you tell me, how could I convert a <I>char</I> pointer into a <I>NODEPTR</I> (each node stores five integers instead of one).<P>
Conrad Taylor<P>
<B>A</B><P>
This question involves a long bit of code that is in a copyright book. The size of the code is too large to reproduce here, so for the benefit of our readers, let me summarize it here. A portion of the header file is shown in <A href="list4.htm">Listing 4</a>.
 The idea behind it is to use a linked list to store a set of <I>long ints</I> which represent a number that is greater than that which can be stored in a single integer.<P>
Taking your second question first, to convert a <I>NODEPTR</I> to a <I>char</I> pointer, simply use the cast operator<P>
<pre> char *pc;
 NODEPTR pn;
 pc = (char *) pn;</pre>
In order to discuss your problem with noncopyright code, let me provide another representation of the system you are trying to set up. A linked list may not necessarily be the simplest method that can be applied here. The alternative of a structure that uses the undimensioned array member (a feature of ANSI C) may be simpler. Of course if you can live with some large, but practically unachievable width (say the equivalent of 100 <I>long ints</I> or 2 raised to the 3199th power), then you could use a fixed dimension array member and the code would be simplified.<P>
A general outline of how to proceed is shown in <A href="list5.htm">Listing 5</a>.
 On an aside, this problem is an excellent example of how C++ could simplify the use of such a package. Setting up a class of large <I>ints</I> and overloading the arithmetic operators would greatly ease the user interface to the package.<P>
The same question that you have with initializing a linked list appears with this format. The <I>new_number</I> function only allows the input of a single <I>long int</I>. First, you will need to write a <I>multiply_number</I> function that multiplies two numbers and returns the product. With that function, the process would look like <A href="list6.htm">Listing 6</a>.
<P>
Note that this routine does not have all the error testing that should be in any code. There is one additional minor bug that a sharp-eyed reader should be able to catch. It doesn't handle negative input numbers. That one remains to keep the code within a reasonable limit of complexity.<P>
<h4><FONT COLOR="#000080"><A name="0103_007A">Reader Feedback<A name="0103_007A"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0103_007B">Dynamic Link Libraries<A name="0103_007B"></FONT></h4></P>
Your Q?/A column in <I>The C Users Journal</I> of September had a question regarding dynamic link libraries. There are a couple of options for DOS that were not mentioned. An article in <I>Dr. Dobb's Journal</I>, May, 1990 by Gary Syck "Dynamic Link Libraries For DOS" provides a look at building such a system. They also mention compiler supported DLL's. Specifically Jensen &amp; Partners International (JPI) appears to have a compiler(s) that allows use of DLL's under DOS as well as under other environments.<P>
While I have not used either of these items, it would appear that an off-the-shelf solution is available.<P>
C.E. Isdale<br>
Savoy, IL<P>
Thanks for your reply. (KP)<P>
Libraries:<P>
I am writing in response to a letter written by Moses Mawarari Maina, "CUJ 9/91 Q&amp;A". While I admire the writers ambition, I disagree with his approach. I started learning C about three years ago. I have probably purchased over 100 books on C. These books have proved to be an incredible resource when I get jammed, however, my greatest source of knowledge on how to program in C was not obtained from these books.<P>
I purchased my first C library after a year of the usual frustration that goes with learning C. The library was a user interface toolkit. Shortly after using the library's functions I ran into problems compiling. I decided to dump all of the source code and analyze what was really going on. As I started reading the source code I began to notice some of the author's ingenuous programming techniques. It didn't take long for me to realize where the greatest wealth of knowledge on C programming could be obtained. Combined with my library of C reference manuals, the picture came together.<P>
Ever since purchasing that first library I have purchased 12 other libraries, some just to analyze the techniques used by the well seasoned programmers. I have learned everything from shortcuts to excellent documentation techniques from these libraries. I would highly recommend to anyone learning how to program in C to purchase a library, if not to use, at least to analyze.<P>
If the writer still feels guilty about purchasing a library, just look at it as if you were hiring a staff of experienced programmers to take care of the mundane programming while you take care of creating something that someone can use.<P>
Ronald L. Roswell, Jr.<br>
West Palm Beach, FL<P>
I agree with you precisely. I buy libraries because I cannot write everything from scratch. Looking at the way they work will give some ingenious ideas. For example, CTREE from Faircom is an excellent example of how to write portable code. CSCAPE by Liant (formerly Oakland Group) gives some good examples of reasonable function names.<P>
A library with source costing about $200 is the equivalent of two to eight hours of programmer time, depending on salary and overhead. Although there is some learning overhead to use a library, if the same functions had to be designed and coded, the programmer's time would greatly exceed the two to eight hours by a factor of 10 or more. (KP)<P>
<h4><FONT COLOR="#000080"><A name="0103_007C">Recursive<B><I> main</I><A name="0103_007C"></B></FONT></h4></P>
Your Q&amp;A column for Oct 91 had a question about recursive <I>main</I>. I can't think of a realistic use for it either (except of course for obfuscated C programs). I think it just falls out of the idea that <I>main</I> is just another function, and there was no reason for the ANSI committee to disallow recursive calls. Interestingly, it is not legal to call <I>main</I> nor to take its address in C++. It is thus recognized in C++ as something special, rather than just another function.<P>
Steve Clamage<br>
TauMetric Corp<P>
Thanks for your comment. (KP)<P>

<h4><a href="../../../source/1992/may92/pugh.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
