<HTML><HEAD>
<TITLE>May 1992/Standard C/Listing 4</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 4 (xstod.c)</A></h4>
<pre>/* _Stod function */
#include &lt;ctype.h&gt;
#include &lt;float.h&gt;
#include &lt;limits.h&gt;
#include &lt;locale.h&gt;
#include &lt;stdlib.h&gt;
#include "xmath.h"

#define SIG_MAX 32

double _Stod(const char *s, char **endptr)
   {  /* convert string to double, with checking */
   const char point = localeconv()-&gt;decimal_point[0];
   const char *sc;
   char buf[SIG_MAX], sign;
   double x;
   int ndigit, nsig, nzero, olead, opoint;

   for (sc = s; isspace(*sc); ++sc)
      ;
   sign = *sc == '-' || *sc =='+' ? *sc++ : '+';
   olead = -1, opoint = -1;
   for (ndigit = 0, nsig = 0, nzero= 0; ; ++sc)
      if (*sc == point)
         if (0 &lt;= opoint)
            break; /* already seen point */
         else
            opoint = ndigit;
      else if (*sc == '0')
         ++nzero, ++ndigit;
      else if (!isdigit(*sc))
         break;
      else
         {   /* got a nonzero digit */
         if (olead &lt; 0)
            olead = nzero;
         else   /* deliver zeros */
            for (; 0 &lt; nzero &amp;&amp; nsig &lt; SIG_MAX; -nzero)
               buf[nsig++] = 0;
         ++ndigit;
         if (nsig &lt; SIG_MAX)  /* deliver digit */
            buf[nsig++] = *sc- '0';
         }
   if (ndigit == 0)
      {  /* set endptr */
      if (endptr)
         *endptr = (char *)s;
      return (0.0);
      }
   for (; 0 &lt; nsig &amp;&amp; buf[nsig - 1] == 0; -nsig)
      ;  /* skip trailing digits */
   {  /* compute significand */
   const char *pc = buf;
   int n;
   long lo[SIG_MAX/8+1];
   long *pl = &amp;lo[nsig &gt;&gt; 3];
   static double fac[] = {0, 1e8, 1e16, 1e24, 1e32};

   for (*pl = 0, n = nsig; 0 &lt; n; -n)
      if ((n &amp; 07) == 0)   /* start new sum */
         *-pl = *pc++;
      else
         *pl = *pl * 10 + *pc++;
   for (x = (double)lo[0], n = 0; ++n &lt;= (nsig &gt;&gt; 3); )
      if (lo[n] != 0)
         x += fac[n] * (double)lo[n];
    }
    {  /* fold in any explicit exponent */
   long lexp = 0;
   short sexp;

   if (*sc == 'e' || *sc == 'E')
      {  /* parse exponent */
      const char *scsav = sc;
      const char esign = *++sc == '+' || *sc == '-'
         ? *sc++ : '+';

      if (!isdigit(*sc))
         sc = scsav;   /* ill-formed exponent */
      else
         {  /* exponent looks valid */
         for (; isdigit(*sc); ++sc)
            if (lexp &lt; 100000)   /* else overflow */
               lexp = lexp * 10 + *sc - '0';
         if (esign == '-')
            lexp = -lexp;
         }
      }
   if (endptr)
      *endptr = (char *)sc;
   if (opoint &lt; 0)
      lexp += ndigit - nsig;
   else
      lexp += opoint - olead - nsig;
   sexp = lexp &lt; SHRT_MIN ? SHRT_MIN : lexp &lt; SHRT_MAX
      ? (short)lexp : SHRT_MAX;
   x = _Dtento(x, sexp);
   return (sign == '-' ? -x : x);
    }
   }

/* End of File */
</pre>
</BODY>
</HTML>
