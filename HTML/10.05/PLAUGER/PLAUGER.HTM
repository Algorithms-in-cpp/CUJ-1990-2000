


<HTML>
<HEAD>

<TITLE>May 1992/Standard C</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocmay.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Standard C<A name="00FB_0071"><A name="00FB_0071"></font></h2><P>
<h3 align="center"><A name="00FB_0000"><A name="00FB_0000">Text to Numeric Conversions</h3><P>
<h3 align="center"><font color="#800000">P.J. Plauger</font></h3><hr><blockquote><P>
<P><i><A name="00FB_0000"><A name="00FB_0000">P.J. Plauger is senior editor of The C Users Journal. He is secretary of the ANSI C standards committee, X3J11, and convenor of the ISO C standards committee, WG14. His latest book is The Standard C Library, published by Prentice-Hall. You can reach him care of The C Users Journal or via Internet at pjp@plauger.uunet.uu.net.</i></P><P>
<h4><FONT COLOR="#000080"><A name="00FB_0072">Introduction<A name="00FB_0072"></FONT></h4></P>
This is the second installment on the header <I>&lt;stdlib.h&gt;.</I> Last month, I discussed the header in general, two groups of functions in particular. Those functions perform sorting, searching, and simple integer arithmetic.<P>
I continue this month with another group, the functions that convert between text strings and encoded numeric data. Here are a few general comments on how to use these functions:<P>
<I>atof</I> &#151; The call <I>atof(s)</I> is equivalent to <I>strtod(s, NULL)</I>, except that <I>atof</I> is not obliged to store <I>ERANGE</I> in <I>errno</I> to report a range error. You also get no indication with <I>atof</I> of how many characters from the string participate in the conversion. Use <I>strtod</I> instead.<P>
<I>atoi</I> &#151; Replace <I>atoi(s)</I> with <I>(int)strtol(s, NULL, 10).</I> Then consider altering the second argument so that you can determine how many characters participated in the conversion.<P>
<I>atol</I> &#151; Replace <I>atol(s)</I> with <I>strtol(s, NULL, 10)</I>. Then consider altering the second argument.<P>
<I>strtod</I> &#151; This is the function called by the scan functions, to convert a sequence of characters to an encoded value of type <I>double</I>. You can call <I>strtod</I> directly to avoid the overhead of the scan functions. That also lets you determine more precisely what part of the string argument participates in the conversion.<P>
Note that the behavior of <I>strtod</I> can change among locales. The function effectively calls <I>isspace</I> to skip leading white-space. It also uses the decimal point defined for the current locale. Beyond that, the valid text patterns are essentially those of the integer and floating constants (with no suffixes) in C. For example, the following are all valid ways to represent the value 12: <I>12, +12.,</I> and .<I>12e2.</I> An implementation can also recognize additional patterns in other than the <I>"C"</I> locale.<P>
<I>strtol</I> &#151; This is the function called by the scan functions, to convert a sequence of characters to an encoded value of type <I>long.</I> You can call <I>strtol</I> directly to avoid the overhead of the scan functions. That also lets you specify unusual bases and to determine more precisely what part of the string argument participates in the conversion.<P>
Note that the behavior of <I>strtol</I> can change among locales. The function effectively calls <I>isspace</I> to skip leading white-space. Beyond that, the valid text patterns are essentially those of the integer constants (with no suffixes), modified as needed for various bases. For example, the following are all valid ways to represent the value 12 (assuming the third argument to <I>strtol</I> specifies a base of zero): <I>12, +014</I>, and <I>0xC</I>. An implementation can also recognize additional patterns in other than the <I>"C"</I> locale.<P>
<I>strtoul</I> &#151; Use this function instead of <I>strtol</I> when you need a result of type <I>unsigned long.</I> The function <I>strtoul</I> reports a range error only if the converted magnitude is greater than <I>ULONG_MAX,</I> defined in <I>&lt;limits.h&gt;.</I> (Negating the value cannot cause overflow.) <I>strtol</I>, on the other hand, reports a range error if the converted value is less than <I>LONG_MIN</I> or greater than <I>LONG_MAX</I>, both defined in <I>&lt;limits.h&gt;</I>. The same text patterns apply as for <I>strtoul.</I><P>
<h4><FONT COLOR="#000080"><A name="00FB_0073">What the C Standard Says<A name="00FB_0073"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="00FB_0074">7.10.1 String conversion functions<A name="00FB_0074"></FONT></h4></P>
The functions <I>atof, atoi</I>, and <I>atol</I> need not affect the value of the integer expression <I>errno</I> on an error. If the value of the result cannot be represented, the behavior is undefined.<P>
<h4><FONT COLOR="#000080"><A name="00FB_0075">7.10.1.1 The <B><I>atof</I></B> functions<A name="00FB_0075"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="00FB_0076">Synopsis<A name="00FB_0076"></FONT></h4></P>
<pre>#include &lt;stdlib.h&gt;
double atof(const char *nptr);</pre>
<h4><FONT COLOR="#000080"><A name="00FB_0077">Description<A name="00FB_0077"></FONT></h4></P>
The <I>atof</I> function converts the initial portion of the string pointed to by <I>nptr</I> to <I>double</I> representation. Except for the behavior on error, it is equivalent to<P>
<pre>strtod(nptr, (char **)NULL)</pre>
<h4><FONT COLOR="#000080"><A name="00FB_0078">Returns<A name="00FB_0078"></FONT></h4></P>
The <I>atof</I> function returns the converted value.<P>
<B>Forward references:</B> the <I>strtod</I> function (7.10.1.4).<P>
<h4><FONT COLOR="#000080"><A name="00FB_0079">7.10.1.2 The <B><I>atoi</I></B> function<A name="00FB_0079"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="00FB_007A">Synopsis<A name="00FB_007A"></FONT></h4></P>
<pre>#include &lt;stdlib.h&gt;
int atoi(const char *nptr);</pre>
<h4><FONT COLOR="#000080"><A name="00FB_007B">Description<A name="00FB_007B"></FONT></h4></P>
The <I>atoi</I> function converts the initial portion of the string pointed to by <I>nptr</I> to <I>int</I> representation. Except for the behavior on error, it is equivalent to<P>
<pre>(int)strtol(nptr, (char **)NULL, 10)</pre>
<h4><FONT COLOR="#000080"><A name="00FB_007C">Returns<A name="00FB_007C"></FONT></h4></P>
The <I>atoi</I> function returns the converted value.<P>
<B>Forward references:</B> the <I>strtol</I> function (7.10.1.5).<P>
<h4><FONT COLOR="#000080"><A name="00FB_007D">7.10.1.3 The <B><I>atol</I></B> function<A name="00FB_007D"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="00FB_007E">Synopsis<A name="00FB_007E"></FONT></h4></P>
<pre>   #include &lt;stdlib.h&gt;
   long int atol(const char *nptr);</pre>
<h4><FONT COLOR="#000080"><A name="00FB_007F">Description<A name="00FB_007F"></FONT></h4></P>
The <I>atol</I> function converts the initial portion of the string pointed to by <I>nptr</I> to <I>long int</I> representation. Except for the behavior on error, it is equivalent to<P>
<pre>   strtol(nptr, (char **)NULL, 10)</pre>
<h4><FONT COLOR="#000080"><A name="00FB_0080">Returns<A name="00FB_0080"></FONT></h4></P>
The <I>atol</I> function returns the converted value.<P>
<B>Forward references:</B> the <I>strtol</I> function (7.10.1.5).<P>
<h4><FONT COLOR="#000080"><A name="00FB_0081">7.10.1.4 The <B><I>strtod</I></B> function<A name="00FB_0081"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="00FB_0082">Synopsis<A name="00FB_0082"></FONT></h4></P>
<pre>#include &lt;stdlib.h&gt;
double strtod(const char *nptr, char **endptr);</pre>
<h4><FONT COLOR="#000080"><A name="00FB_0083">Description<A name="00FB_0083"></FONT></h4></P>
The <I>strtod</I> function converts the initial portion of the string pointed to by <I>nptr</I> to <I>double</I> representation. First, it decomposes the input string into three parts: an initial, possibly empty, sequence of white-space characters (as specified by the <I>isspace</I> function), a subject sequence resembling a floating-point constant; and a final string of one or more unrecognized characters, including the terminating null character of the input string. Then, it attempts to convert the subject sequence to a floating-point number, and returns the result.<P>
The expected form of the subject sequence is an optional plus or minus sign, then a nonempty sequence of digits optionally containing a decimal-point character, then an optional exponent part as defined in 6.1.3.1, but no floating suffix. The subject sequence is defined as the longest initial subsequence of the input string, starting with the first non-white-space character, that is of the expected form. The subject sequence contains no characters if the input string is empty or consists entirely of white space, or if the first non-white-space character is other than a sign, a digit, or a decimal-point character.<P>
If the subject sequence has the expected form, the sequence of characters starting with the first digit or the decimal-point character (whichever occurs first) is interpreted as a floating constant according to the rules of 6.1.3.1, except that the decimal-point character is used in place of a period, and that if neither an exponent part nor a decimal-point character appears, a decimal point is assumed to follow the last digit in the string. If the subject sequence begins with a minus sign, the value resulting from the conversion is negated. A pointer to the final string is stored in the object pointed to by <I>endptr,</I> provided that <I>endptr</I> is not a null pointer.<P>
In other than the <I>"C"</I> locale, additional implementation-defined subject sequence forms may be accepted.<P>
If the subject sequence is empty or does not have the expected form, no conversion is performed; the value of <I>nptr</I> is stored in the object pointed to by <I>endptr</I>, provided that <I>endptr</I> is not a null pointer.<P>
<h4><FONT COLOR="#000080"><A name="00FB_0084">Returns<A name="00FB_0084"></FONT></h4></P>
The <I>strtod</I> function returns the converted value, if any. If no conversion could be performed, zero is returned. If the correct value is outside therrange of representable values, plus or minus <I>HUGE_VAL</I> is returned (according to the sign of the value), and the value of the macro <I>ERANGE</I> is stored in <I>errno.</I> If the correct value would cause underflow, zero is returned and the value of the macro <I>ERANGE</I> is stored in <I>errno.</I><P>
<h4><FONT COLOR="#000080"><A name="00FB_0085">7.10.1.5 The <B><I>strtol</I></B> function<A name="00FB_0085"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="00FB_0086">Synopsis<A name="00FB_0086"></FONT></h4></P>
<pre>#include &lt;stdlib.h&gt;
long int strtol(const char *nptr, char **endptr, int base);</pre>
<h4><FONT COLOR="#000080"><A name="00FB_0087">Description<A name="00FB_0087"></FONT></h4></P>
The <I>strtol</I> function converts the initial portion of the string pointed to by <I>nptr</I> to <I>long int</I> representation. First, it decomposes the input string into three parts: an initial, possibly empty, sequence of white-space characters (as specified by the <I>isspace</I> function), a subject sequence<P>
resembling an integer represented in some radix determined by the value of <I>base,</I> and a final string of one or more unrecognized characters, including the terminating null character of the input string. Then, it attempts to convert the subject sequence to an integer, and returns the result.<P>
If the value of <I>base</I> is zero, the expected form of the subject sequence is that of an integer constant as described in 6.1.3.2, optionally preceded by a plus or minus sign, but not including an integer suffix. If the value of <I>base</I> is between 2 and 36, the expected form of the subject sequence is a sequence of letters and digits representing an integer with the radix specified by <I>base,</I> optionally preceded by a plus or minus sign, but not including an integer suffix. The letters from <I>a</I> (or <I>A</I>) through <I>z</I> (or <I>Z)</I> are ascribed the values 10 to 35; only letters whose ascribed values are less than that of <I>base</I> are permitted. If the value of <I>base</I> is 16, the characters <I>0x</I> or <I>0X</I> may optionally precede the sequence of letters and digits, following the sign if present.<P>
The subject sequence is defined as the longest initial subsequence of the input string, starting with the first non-white-space character, that is of the expected form. The subject sequence contains no characters if the input string is empty or consists entirely of white space, or if the first non-white-space character is other than a sign or a permissible letter or digit.<P>
If the subject sequence has the expected form and the value of <I>base</I> is zero, the sequence of characters starting with the first digit is interpreted as an integer constant according to the rules of 6.1.3.2. If the subject sequence has the expected form and the value of <I>base</I> is between 2 and 36, it is used as the base for conversion, ascribing to each letter its value as given above. If the subject sequence begins with a minus sign, the value resulting from the conversion is negated. A pointer to the final string is stored in the object pointed to by <I>endptr</I>, provided that <I>endptr</I> is not a null pointer.<P>
In other than the <I>"C"</I> locale, additional implementation-defined subject sequence forms may be accepted.<P>
If the subject sequence is empty or does not have the expected form, no conversion is performed; the value of <I>nptr</I> is stored in the object pointed to by <I>endptr</I>, provided that <I>endptr</I> is not a null pointer<P>
<h4><FONT COLOR="#000080"><A name="00FB_0088">Returns<A name="00FB_0088"></FONT></h4></P>
The <I>strtol</I> function returns the converted value, if any. If no conversion could be performed, zero is returned. If the correct value is outside the range of representable values, <I>LONG_MAX</I> or <I>LONG_MIN</I> is returned (according to the sign of the value), and the value of the macro <I>ERANGE</I> is stored in <I>errno</I>.<P>
<h4><FONT COLOR="#000080"><A name="00FB_0089">7.10.1.6 The <B><I>strtoul</I></B> function<A name="00FB_0089"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="00FB_008A">Synopsis<A name="00FB_008A"></FONT></h4></P>
<pre>#include &lt;stdlib.h&gt;
unsigned long int strtoul
   (const char *nptr, char **endptr, int base);</pre>
<h4><FONT COLOR="#000080"><A name="00FB_008B">Description<A name="00FB_008B"></FONT></h4></P>
The <I>strtoul</I> function converts the initial portion of the string pointed to by <I>nptr</I> to <I>unsigned long int</I> representation. First, it decomposes the input string into three parts: an initial, possibly empty, sequence of white-space characters (as specified by the <I>isspace</I> function), a subject sequence resembling an unsigned integer represented in some radix determined by the value of <I>base</I>, and a final string of one or more unrecognized characters, including the terminating null character of the input string. Then, it attempts to convert the subject sequence to an unsigned integer, and returns the result.<P>
If the value of <I>base</I> is zero, the expected form of the subject sequence is that of an integer constant as described in 6.1.3.2, optionally preceded by a plus or minus sign, but not including an integer suffix. If the value of <I>base</I> is between 2 and 36, the expected form of the subject sequence is a sequence of letters and digits representing an integer with the radix specified by <I>base</I>, optionally preceded by a plus or minus sign, but not including an integer suffix. The letters from <I>a</I> (or <I>A</I>) through <I>z</I> (or <I>Z</I>) are ascribed the values 10 to 35; only letters whose ascribed values are less than that of <I>base</I> are permitted. If the value of <I>base</I> is 16, the characters <I>0x</I> or <I>0X</I> may optionally precede the sequence of letters and digits, following the sign if present.<P>
The subject sequence is defined as the longest initial subsequence of the input string, starting with the first non-white-space character, that is of the expected form. The subject sequence contains no characters if the input string is empty or consists entirely of white space, or if the first non-white-space character is other than a sign or a permissible letter or digit.<P>
If the subject sequence has the expected form and the value of <I>base</I> is zero, the sequence of characters starting with the first digit is interpreted as an integer constant according to the rules of 6.1.3.2. If the subject sequence has the expected form and the value of <I>base</I> is between 2 and 36, it is used as the base for conversion, ascribing to each letter its value as given above.<P>
If the subject sequence begins with a minus sign, the value resulting from the conversion is negated. A pointer to the final string is stored in the object pointed to by <I>endptr</I>, provided that <I>endptr</I> is not a null pointer.<P>
In other than the <I>"C"</I> locale, additional implementation-defined subject sequence forms may be accepted.<P>
If the subject sequence is empty or does not have the expected form, no conversion is performed; the value of <I>nptr</I> is stored in the object pointed to by <I>endptr</I>, provided that <I>endptr</I> is not a null pointer.<P>
<h4><FONT COLOR="#000080"><A name="00FB_008C">Returns<A name="00FB_008C"></FONT></h4></P>
The <I>strtoul</I> function returns the converted value, if any. If no conversion could be performed, zero is returned. If the correct value is outside the range of representable values, <I>ULONG_MAX</I> is returned, and the value of the macro <I>ERANGE</I> is stored in <I>errno</I>.<P>
<h4><FONT COLOR="#000080"><A name="00FB_008D">Implementing the Conversion Functions<A name="00FB_008D"></FONT></h4></P>
<A href="list1.htm">Listing 1</a>
shows the file <I>xstoul.c</I>. It defines the function <I>_Stoul</I> that performs all conversions from text string to encoded integer. The function has the same specifications as <I>strtoul</I>. I made it a separate function so that several masking macros defined in &lt;<I>stdlib.h</I>&gt; can call it directly as shown in <A href="list2.htm">Listing 2</a>.
<P>
The three corresponding functions are equally simple. The first half of <I>_Stoul</I> determines the base and locates the most-significant digit. That involves stripping leading white-space, identifying any sign, and picking off any prefix such as <I>0X</I>. The function then skips any leading zeros so that it can count the number of significant digits it converts. It converts all significant digits regardless of possible overflow. For <I>unsigned long</I> arithmetic, an overflow does not cause an exception.<P>
<I>_Stoul</I> makes a coarse check for overflow by first inspecting the number of significant digits. This version assumes that an <I>unsigned long</I> occupies 32 bits. (Change the array <I>ndigs</I> if such integers are larger.) For each valid base, <I>ndigs[base]</I> is the number of digits at which overflow can occur. Thus, a shorter sequence cannot overflow and a longer sequence must. A sequence of the critical length requires further checking. Take away the last digit and see whether you get back the previously accumulated value (<I>y</I>). If not, an overflow occurred.<P>
Note the rare use of the type <I>ptrdiff_t</I>, defined in &lt;<I>stddef.h</I>&gt;. It ensures that <I>n</I> can hold the signed difference between two pointers. <I>ptrdiff_t</I> is not a completely safe type. An argument string with over 32,767 significant digits can fail to report overflow on a computer with 16-bit pointers. That is an unlikely occurrence, but it can happen. Still, it is tedious to write the test completely safely. I chose speed in this case over absolute safety.<P>
<A href="list3.htm">Listing 3</a>
shows the file <I>strtol.c.</I> It defines the function <I>strtol</I> that <I>must</I> report an overflow properly. Thus, it chases down any leading minus sign itself so that it can check the converted value as a <I>long</I>. Note that the function must call <I>_Stoul</I> with the original pointer. Should <I>_Stoul</I> find an invalid string, it must store that pointer at <I>endptr</I>. To point past any leading white-space would be misleading.<P>
Floating-point conversions follow a similar pattern. The header &lt;<I>stdlib.h</I>&gt; defines the two macros<P>
<pre>#define atof(s)_Stod(s, 0)
#define strtod(s, end) _Stod(s, end)</pre>
Thus, both functions simply call the common function <I>_Stod</I> to do all the work. In this case, <I>atof</I> enjoys the same thorough checking required of <I>strtod</I>.<P>
<A href="list4.htm">Listing 4</a>
shows the file <I>xstod.c.</I> It defines the function <I>_Stod</I> that performs all conversions from text string to encoded floating-point. It does so carefully, avoiding intermediate overflow and loss of precision.<P>
The macro <I>SIG_MAX</I>, for example, represents a careful compromise. It limits the number of significant digits to 32. That is more than enough for the most precise representation supported by this implementation (about 20 decimal digits for 10-byte IEEE 754 <I>long double</I>). It is also well short of the largest integer that would cause an overflow on a conforming implementation (about 37 digits). The function pays similar care in accumulating any exponent. As a result, any floating-point overflow or underflow is handled safely in the function <I>_Dtento</I>, declared in "<I>xmath.h</I>" and shown in <A href="list5.htm">Listing 5</a>.
<P>
The first half of _<I>Stod</I> checks syntax and accumulates significant fraction digits. It then converts eight digits at a time to an array of <I>long</I>. It converts these elements to <I>double</I>, from least-significant to most-significant, and scales each appropriately before adding it to the running sum. This sequence of operations is reasonably efficient and maintains precision.<P>
Warren Yelsin, an honors student at the University of New South Wales, studied _<I>Stod</I> in some depth. He found that it gives the best internal approximation most of the time. When it fails, it gives the next higher value. So far, the cost of getting the best answer all the time appears prohibitive. But the payoff can be very high. I'll discuss this issue more at a later date.<P>
<I>This article is excerpted from P.J. Plauger</I>, The Standard C Library, <I>(Englewood Cliffs, N.J.: Prentice-Hall, 1992)</I>.<P>

<h4><a href="../../../source/1992/may92/plauger.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
