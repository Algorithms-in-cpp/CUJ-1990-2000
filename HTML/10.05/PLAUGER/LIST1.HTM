<HTML><HEAD>
<TITLE>May 1992/Standard C/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1 (xstoul.c)</A></h4>
<pre>/* _Stoul function  */
#include &lt;stdlib.h&gt;
#include &lt;ctype.h&gt;
#include &lt;errno.h&gt;
#include &lt;limits.h&gt;
#include &lt;stddef.h&gt;
#include &lt;string.h&gt;

             /* macros */
#define BASE_MAX        36      /* largest valid base */
             /* static data  */
static const char digits[] = {  /* valid digits */
       "0123456789abcdefghijklmnopqrstuvwxyz"};
static const char ndigs[BASE_MAX+1] = { /* 32-bits! */
       0, 0, 33, 21, 17, 14, 13, 12, 11, 11,
       10, 10, 9, 9, 9, 9, 9, 8, 8, 8,
       8, 8, 8, 8, 7, 7, 7, 7, 7, 7,
       7, 7, 7, 7, 7, 7, 7,};

unsigned long _Stoul(const char *s, char **endptr, int base)
       {  /* convert string to unsigned long, with checking */
       const char *sc, *sd;
       const char *s1, *s2;
       char sign;
       ptrdiff_t n;
       unsigned long x, y;

       for (sc = s; isspace(*sc); ++sc)
              ;
       sign= *sc == '-' || *sc == '+' ? *sc++ : '+';
       if (base &lt; 0 || base == 1 || BASE_MAX &lt; based
              {       /* silly base */
              if (endptr)
                     *endptr == (char *)s;
              return (0);
              }
       else if (base)
              {        /* strip 0x or 0X */
              if (base == 16 &amp;&amp; *sc == '0'
                     &amp;&amp; (sc[1]) == 'x' || sc[1] == 'X'))
                     sc += 2;
              }
       else if (*sc != '0')
              base = 10;
       else if (sc[1] == 'x' || sc[1] == 'X')
              base = 16, sc += 2;
       else
              base = 8;
       for (s1 = sc; *sc == '0'; ++sc)
              ;       /* skip leading zeros */
       x = 0;
       for (s2 = sc; (sd = (char *)memchr(digits,
              tolower(*sc), base)) != NULL; ++sc)
              {       /* accumulate digits */
              y = x;  /* for overflow checking */
              x = x * base + (sd - digits);
              }
       if (s1 == sc)
              {       /* check string validity */
              if (endptr)
                     *endptr = (char *)s;
              return (0);
              }
       n = sc - s2 - ndigs[base];
       if (n&lt; 0)
              ;
       else if (0 &lt; n || x &lt; x - sc[-1]
              || (x - sc[-1]) / base != y)
              {      /* overflow */
              errno = ERANGE;
              x = ULONG_MAX;
              }
       if (sign == '-')        /* get final value */
              x = -x;
       if (endptr)
              *endptr = (char *)sc;
       return (x);
       }

/* End of File */
</pre>
</BODY>
</HTML>
