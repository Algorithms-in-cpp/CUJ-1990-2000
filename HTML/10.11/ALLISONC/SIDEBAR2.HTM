<HTML><HEAD><TITLE>November 1992/A Simple Real-Time Executive/Sidebar</TITLE></HEAD><BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h3 align="center"><FONT FACE="Garamond" COLOR="#000080">Floating-Point and Coprocessors</FONT></h3><hr>
<BLOCKQUOTE>
There are three ways to deal with floating point:<P>
<UL><li>You can restrict all floating-point activity to one task level. While highly restrictive, this approach can be useful where calculations are slow and high priority activities are very time critical.</li>
<li>You can disable interrupts while performing floating-point operations. This could slow things down dramatically on interrupt response.</li>
<li>You can attempt to make the floating point reentrant. Borland C++ 3.0 floating-point operations are documented to be reentrant. Microsoft states that theirs are not except when you use the command line option <I>/FPi87</I>, which requires the use of a coprocessor. Example:</li></UL>
<pre>union {
char state[108];
int control;
} coproc;</pre>
Tasks using the coprocessor must save and restore its context using assembly language instructions.<P>
<pre>/* Coprocessor Context Save *
* for in line assembly     */
asm fsave coproc.state
asm fldcw coproc.control
.
/* floating point operations */
.
.
/* Coprocessor Context Restore */

asm frstor coproc.state</pre>
Coprocessor hardware provides a reentrancy problem for multitasking. To save the context of an 80x87 coprocessor, 94 bytes are needed for the 8087 or 80287, 108 bytes for 80387 coprocessors.<P>
</BLOCKQUOTE>
</BODY>
</HTML>
