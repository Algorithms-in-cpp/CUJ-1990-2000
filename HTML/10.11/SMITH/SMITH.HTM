


<HTML>
<HEAD>

<TITLE>November 1992/A Versatile Plotting Routine</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocnov.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">A Versatile Plotting Routine<A name="027F_011B"><A name="027F_011B"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="027F_0000"><A name="027F_0000">Lowell Smith</font></h3><hr><blockquote><P>
<P><i><A name="027F_0000"><A name="027F_0000">Lowell Smith is a retired aerospace engineer (Hercules Aerospace Company). He first programmed in Fortran in 1962 on the IBM-1620, then later on the IBM-1130 and various IBM-360/370 models. After getting an IBM PC in 1982, he began using Pascal and C. He has never worked as a programmer, but has programmed many engineering applications over the years. He can be reached via 73377. 501@compuserve.com.</i></P><P>
<h4><FONT COLOR="#000080"><A name="027F_011C">Introduction<A name="027F_011C"></FONT></h4></P>
While developing programs that generate data which needs to be presented in graphical form I have often wanted a general purpose function for creating both screen display and hard copy from within the program. The basic requirements include:<P>
<UL><li>Automatic scaling of the variables</li>
<li>Provision for title and X and Y axis labels</li>
<li>User-specified number of X and Y axis divisions</li>
<li>Optional grid lines</li>
<li>Provision for an indefinite number of curves</li>
<li>Presentation of connected lines, symbols, or both</li>
<li>Automatic selection of symbols for each curve</li>
<li>Provision for a message box with program-defined notes or data</li>
<li>Optional output files for both HP LaserJet and PostScript printers</li></UL>
The function SPLOT was developed to meet those requirements. It requires a VGA monitor. (CGA and EGA monitors are rapidly becoming obsolete, and I don't consider their graphics acceptable.)<P>
All plotting is done in straight line segments. The calling program must provide enough points to give the desired resolution for curves. Horizontal and vertical text output is provided.<P>
<h4><FONT COLOR="#000080"><A name="027F_011D">Operation<A name="027F_011D"></FONT></h4></P>
The first task is to determine the appropriate scale for the plot. The maximum and minimum X and Y values of all the data to be plotted establish approximate extrema for both axes. The linscale function then adjusts these to provide the appropriate values for a "nice" plot with the specified number of divisions on each axis. The data are scaled to the 640 by 480 screen coordinates for plotting. The algorithm was adapted from C. R. Lewart, <I>Comm. ACM</I>, Algorithm 463, 1972. It is thus not necessary to specify upper and lower limits as input, although that could be done if the additional control is desired.<P>
The PostScript header is written to the file. This includes the macros <I>cntrj</I> and <I>rtj</I> which are used for center and right justification of text strings. <I>initgraph</I> initializes the graphics and then checks to see if a VGA monitor is available.<P>
The function <I>changetextstyle</I> uses the graphics library function <I>settextstyle</I> to set the printing direction and character size. The font <I>LITT.CHR</I> is used for screen display. An error message is issued if it and <I>EGAVGA.BGI</I> are not available in the current directory. They could be linked in the .<I>EXE</I> file for permanent applications. The PostScript output uses the printer-resident Helvetica font.<P>
Text output is defined by <I>outtxt</I> with arguments to set the starting coordinates and horizontal and vertical justification. Since <I>outtxt</I> is called from <I>linaxis</I> as well as <I>main</I>, I use the global variable <I>DIRECTION</I>, which is set by <I>changetextstyle</I>, to control printing direction.<P>
The function <I>outlin</I> draws a line between two pairs of X,Y coordinates. The line is drawn on the screen by the graphics library function <I>line</I>. The appropriate commands are also written to the PostScript file if it is defined.<P>
The function <I>box</I> uses <I>outlin</I> to draw a box with the coordinates of the upper left and lower right corners indicated by the parameters.<P>
The task of drawing and labeling the axes is handled by the function <I>linaxis</I>. The function <I>formx</I> is used to format the numeric labels. Called with <I>kon=0</I> it prints the numbers to a string in <I>G</I> format, checks to see whether <I>E</I> or <I>F</I> format is appropriate, and determines the required precision. Called with <I>kon=1</I> it returns a string formatted with the specified precision and type (<I>E</I> or <I>F</I>). For the Y axis the maximum width of the numeric labels is used to set the global variable <I>YAXOFF</I> which determines the placement of the Y axis text label.<P>
<A href="tab1.htm">Table 1</a>
shows the arguments for <I>SPLOT</I>.<P>
For curve <I>i</I> of the <I>nplots</I> curves, the first <I>npnts_pnts[i]</I> points are plotted with symbols only. The remaining points are plotted with connecting lines but no symbols. The number of either symbols or connecting lines, but not both, may be 0.<P>
The function <I>symbol</I> draws any of four predefined symbols. If there are more than four curves, the sequence of symbols is repeated.<P>
The message box is drawn by the function <I>msgbox</I>. For the screen output we delete the material behind the box with the graphics library function <I>fillpoly</I>, draw the enclosing box, and output the strings with <I>outtxt</I>. For the PostScript output we define the macro <I>pstrz</I>. It is first used to get the maximum string length and the vertical space required. It is used again for writing the strings after deleting the background and drawing the enclosing box.<P>
<h4><FONT COLOR="#000080"><A name="027F_011E">Files<A name="027F_011E"></FONT></h4></P>
The files for HP LaserJet output are screen images in binary <I>.PCL</I> format for printing at 150 dots per inch resolution. This gives plots about 4 by 3.25 inches which is (barely) acceptable for routine use. They are printed using the DOS <I>copy</I> command, as in:<P>
<pre>copy spl0t1.hp prn /b</pre>
They must be copied as binary to assure getting all the file printed.<P>
The PostScript files are defined in full-page size in landscape mode, suitable for reports. The resolution is determined by the printer used.<P>
The plot shown in <A href="fig1.htm">Figure 1</a>
is one of three generated by the sample <I>main </I>program. The original PostScript file was for full-size output in landscape mode. The scaling command <I>".4 .4 scale"</I> was added at the beginning of the file to size it for use here.<P>
<h4><FONT COLOR="#000080"><A name="027F_011F">Examples<A name="027F_011F"></FONT></h4></P>
The <I>SPLOT</I> function can be compiled with Borland's Turbo C++ or Borland C++ using the small, compact, or large model. The sample program was compiled in the small model. I have included a test using the <I>coreleft</I> function to determine whether enough core is available for the chosen model. In addition the macro <I>CORE</I> can be set to 1 for conditional compilation of statements to display the core available after graphics initialization. None of the functions has large space requirements for automatic variables.<P>
In the sample <I>main</I> program I have chosen the (perhaps unorthodox) method of using automatic variables to allocate space for the plot data. The arrays<P>
<pre>char    msgspace[5] [81];
double  xpltspace [5] [300];
double    ypltspace[5] [300];</pre>
allocate room for five strings in the message box and for five curves with 300 total points each. The statements <I>msg[i]=msgspace[i],</I> etc. assign space to the appropriate pointers.<P>
For the first plot we open both HP LaserJet and PostScript output files. The HP file must be opened as binary. The PostScript file is opened as text. In text mode the newline gives a carriage return followed by a line feed. Some PostScript printers may not like that. If you open the file as binary you get only a newline, consistent with UNIX usage. This will work with all PostScript printers, but some MS-DOS editors won't handle those files. In MS-DOS 5 <I>edit</I> accepts files without carriage returns, but saves them with carriage returns. The <I>epsilon</I> editor accepts files with or without carriage returns and permits saving them without returns by means of the <I>set-line-translate</I> command.<P>
For the first demonstration plot (<A href="fig1.htm">Figure 1</a>)
 we simply use a <I>for</I> loop to create a circle and an ellipse defined by 201 points each. Setting <I>numpoints=0</I> and <I>totpoints=201</I> for both curves we get connected lines only. The appropriate strings for the title and the X and Y axis labels are inserted using <I>strcpy</I>. Defining <I>nmsg[0]=0</I> indicates that there will be no message box.<P>
For the second plot (<A href="fig2.htm">Figure 2</a>)
 we open a PostScript file but assign <I>NULL</I> to the LaserJet file pointer, indicating that it will not be used. We use <I>for</I> loops to define two parabolas. The first has 101 points equally spaced between X=-5 and X=+5. The second has 17 points between X=-4 and X=+4, followed by an additional 137 points in the same region. For the first curve we set <I>numpoints=0</I> and <I>totpoints=101</I> to provide connected lines only. For the second we set <I>numpoints=17</I> and <I>totpoints=154</I> to get both symbols and connected lines. In this case the symbols will be on the lines, but they would not be if the two sets of points were for different functions. If we set <I>totpoints[1]=17</I> we would get symbols only for the second curve.<P>
The third plot (<A href="fig3.htm">Figure 3</a>)
 illustrates the available symbols and the way the code handles large numbers. We define five lines with symbols. In addition to setting the title and X and Y axis labels, we copy two strings to the message box pointers <I>msg[0]</I> and <I>msg[1]</I>. We set <I>nmsg[0]=2</I>, indicating that two strings are included, and <I>nmsg[1]=370</I> and <I>nmsg[2]=130</I> to determine the location of the message box in screen coordinates.<P>
<h4><a href="list1.htm">Listing 1: SAMPPLOT.C</a></h4>
<h4><a href="list2.htm">Listing 2: SPLOT.C</a></h4>

<h4><a href="../../../source/1992/nov92/smith.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
