


<HTML>
<HEAD>

<TITLE>November 1992/Code Capsules</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocnov.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Code Capsules<A name="0292_0125"><A name="0292_0125"></font></h2><P>
<h3 align="center"><A name="0292_0000"><A name="0292_0000">Text Processing II: printf</h3><P>
<h3 align="center"><font color="#800000">Chuck Allison</font></h3><hr><blockquote><P>
<P><i><A name="0292_0000"><A name="0292_0000">Chuck Allison is a software architect for the Family History Department of the Church of Jesus Christ of Latter Day Saints Church Headquarters in Salt Lake City. He has a B.S. and M.S. in mathematics, has been programming since 1975, and teaching and developing in C since 1984. His current interest is object-oriented technology and education, and he is a member of X3J16, the ANSI C++ Standards Committee. Chuck can be reached on the Internet at allison@decus.org, or at (801)240-4510.</i></P><P>
The quintessential "first program" for the student of C is some variant of "Hello, world" such as<P>
<pre>/* hello.c:   A first program */

#include &lt;stdio.h&gt;

main()
{
   printf("Hello, world\n");
}</pre>
This provides a starting point for discussing basic syntax and program layout, the notion of include files, and most importantly, how to produce output. Nothing is as encouraging or enabling as seeing the results of a program that works. Most programmers spend their first hours of C exploration discovering the ins and outs of <I>printf</I>. But mastering this most flexible of functions requires more than just a few hours. This capsule suggests some techniques to exploit the power of the <I>printf</I> family of functions.<P>
<h4><FONT COLOR="#000080"><A name="0292_0126">Precision<A name="0292_0126"></FONT></h4></P>
Consider the output from the following statements:<P>
<pre>printf("|%5.4d| |%-5.3s| |%5.0f|\n", 123, "a string", 45.6);
printf("|%+5d| |%+5d| |% 5d| |% 5d|\n", 123, -123, 123, -123);
printf("|%#5o| |%#5x| |%#5.0f|\n", 15, 15, 15.0);

Output:

 | 0123| |a s  | |  46|
 | +123| | -123| | 123| | -123|
 |  017| |  0xf| | 15.|</pre>
The first statement illustrates the effect of precision (specified with a decimal point followed by an integer). For an integer, it specifies the minimum number of digits to be displayed. This means that leading zeroes will appear, if necessary, to fill out the given precision. With strings, the precision specifies the maximum number of characters of the string to display (note that this example left-justifies the result because of the hyphen (-) flag). A precision of 0 causes a floating-point number to be rounded to the nearest integer and displayed without a decimal point. To display a decimal point but no subsequent decimal digits, use the # flag, as shown in the third statement. The + flag causes a sign to always be displayed, whereas the space flag (e.g., |% <I>5d</I>|) substitutes a space for the plus sign. The # flag prints a number with its characteristic notation (namely, a leading <I>0</I> for octal, a leading <I>0x</I> for hexadecimal, and a decimal point for real numbers). Under all circumstances, all significant digits are displayed, even if the field width (and precision in the case of integers) is exceeded.<P>
<h4><FONT COLOR="#000080"><A name="0292_0127">Saving a Formatted String<A name="0292_0127"></FONT></h4></P>
It is often convenient to save a formatted string for future or repeated use, instead of sending it to an output device immediately. Traditionally called in-core formatting, you save a formatted string with the <I>sprintf</I> function. The statement<P>
<pre>char s[9];
sprintf(s,"%2d/%02d/%02d",mon,day,year);</pre>
builds a date string in a character array.<P>
<I>sprintf</I> always appends a terminating zero byte to the formatted string. It returns the number of characters formatted (not including the terminating <I>null</I>). The program in <A href="list1.htm">Listing 1</a>
pastes input strings together into a single string. Each call to <I>sprintf</I> concatenates the current word to the end of the string by overwriting the zero byte at the end of the string with the first character of the word.<P>
While this could be done just as well using <I>strcpy</I> followed by <I>strcat</I>, this technique is especially useful when the strings to be appended require <I>printf-</I>like formatting. <A href="list2.htm">Listing 2</a>
illustrates the special case of an existing string that needs to be padded with blanks (before highlighting it for the user, say). It also illustrates how to specify a variable-length format in C. The * edit descriptor can appear as a width or a precision specifier. It indicates that the next argument in the print list (which must be an <I>int</I>) should be used as the field width (or precision). The preceding <I>if</I> statement is necessary, otherwise a single blank will always be printed, even if (<I>size-len</I>) is zero.<P>
<h4><FONT COLOR="#000080"><A name="0292_0128">Specifying Variable-Length Format<A name="0292_0128"></FONT></h4></P>
Variable-length format is also useful when formatting reports or screen output. Instead of allowing long lines to wrap, one usually prefers to truncate them, and then provide some other way to view the suppressed data (like scrolling).The segment<P>
<pre>#define WIDTH 80
. . .
fprintf(stderr, "%.*s",WIDTH,line);</pre>
displays a line on the screen without wrapping.<P>
The statement<P>
<pre>fprintf(f,"%*.*s\n",WIDTH,WIDTH,line);</pre>
right-justifies a row in a report.<P>
<h4><FONT COLOR="#000080"><A name="0292_0129">Padding a String<A name="0292_0129"></FONT></h4></P>
While <I>printf</I> provides some support for zero and blank padding, it is often not enough. For example, in financial applications it is convenient to specify an arbitrary pad character, such as asterisks for check protection. <A href="list3.htm">Listing 3</a>
shows a function, <I>align</I>, that places a string into a field with left, right or center justification and pads with a user-supplied character.<P>
The function calls<P>
<pre>align(s,10,'*',LEFT,"123.45")
align(s,10,'*',CENTER,"123.45")
align(s,10,'*',RIGHT,"123.45")</pre>
build, in turn, the strings<P>
<pre>123.45****
**123.45**
****123.45</pre>
inside <I>s []</I>.<P>
<h4><FONT COLOR="#000080"><A name="0292_012A">Specifying Variable Argument Lists<A name="0292_012A"></FONT></h4></P>
The <I>printf</I> functions process a variable number of arguments. An alternate set of functions, <I>vprintf, vfprintf</I> and <I>vsprintf</I>, allow the user to also write output functions that themselves do not need to know how many arguments are passed. A useful example is a function, <I>fatal</I>, which prints an error message and then exits the program (see <A href="list4.htm">Listing 4</a>)
. Some valid calls to <I>fatal</I> are<P>
<pre>fatal("Divide by zero in function f()\n");
fatal("Invalid value in function foo: %d\n", x);
fatal("%s: %d\n",argv[0],error_code);</pre>
Like the <I>printf</I> functions, all that matters is that the arguments to be printed match the edit descriptors in the format string. The macro call <I>va_start (args,fmt)</I> causes the variable argument list <I>args</I> (which is just a pointer in most implementations) to point to the first argument after <I>fmt</I>. The function <I>vfprintf</I> behaves like <I>fprintf</I> except that it expects a <I>va_list</I> after the format string instead of hard-coded arguments. A call to <I>va_end</I> is required to clean up any implementation-defined loose ends before execution continues.<P>
Using <I>vsprintf</I>, we can write a version of <I>strcat</I> (let's call it <I>append</I>) that does formatting (see <A href="list5.htm">Listing 5</a>)
.<P>

<h4><a href="../../../source/1992/nov92/allison.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
