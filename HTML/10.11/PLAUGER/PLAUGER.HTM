


<HTML>
<HEAD>

<TITLE>November 1992/Standard C</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocnov.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Standard C<A name="0288_011D"><A name="0288_011D"></font></h2><P>
<h3 align="center"><A name="0288_0000"><A name="0288_0000">Comparing Strings</h3><P>
<h3 align="center"><font color="#800000">P.J. Plauger</font></h3><hr><blockquote><P>
<P><i><A name="0288_0000"><A name="0288_0000">P.J. Plauger is senior editor of The C Users Journal. He is secretary of the ANSI C standards committee, X3J11, and convenor of the ISO C standards committee, WG14. His latest books are The Standard C Library, published by Prentice-Hall, and ANSI and ISO Standard C (with Jim Brodie), published by Microsoft Press. You can reach him at pjp@plauger.com</i></P><P>
<h4><FONT COLOR="#000080"><A name="0288_011E">Introduction<A name="0288_011E"></FONT></h4></P>
Last month, I introduced the header <I>&lt;string.h&gt;</I>. (See <I>Standard C, CUJ</I> Oct. '92.) I discussed the functions that copy and concatenate strings, and a few others. I also showed how to implement them. This month, I discuss the functions declared in <I>&lt;string.h&gt;</I> that help you compare strings in various ways.<P>
<h4><FONT COLOR="#000080"><A name="0288_011F">What the C Standard Says<A name="0288_011F"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0288_0120">7.11.4 Comparison functions<A name="0288_0120"></FONT></h4></P>
The sign of a nonzero value returned by the comparison functions <I>memcmp, strcmp</I>, and <I>strncmp</I> is determined by the sign of the difference between the values of the first pair of characters (both interpreted as <I>unsigned char</I>) that differ in the objects being compared.<P>
<h4><FONT COLOR="#000080"><A name="0288_0121">7.11.4.1 The <B><I>memcmp</I></B> function<A name="0288_0121"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0288_0122">Synopsis<A name="0288_0122"></FONT></h4></P>
<pre>#include &lt;string.h&gt;
int memcmp(const void *s1, const void *s2, size_t n);</pre>
<h4><FONT COLOR="#000080"><A name="0288_0123">Description<A name="0288_0123"></FONT></h4></P>
The <I>memcmp</I> function compares the first <I>n</I> characters of the object pointed to by <I>s1</I> to the first <I>n</I> characters of the object pointed to by <I>s2</I> .136<P>
<h4><FONT COLOR="#000080"><A name="0288_0124">Returns<A name="0288_0124"></FONT></h4></P>
The <I>memcmp</I> function returns an integer greater than, equal to, or less than zero, accordingly as the object pointed to by <I>s1</I> is greater than, equal to, or less than the object pointed to by <I>s2</I>.<P>
<h4><FONT COLOR="#000080"><A name="0288_0125">7.11.4.2 The <B><I>strcmp</I></B> function<A name="0288_0125"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0288_0126">Synopsis<A name="0288_0126"></FONT></h4></P>
<pre>#include &lt;string.h&gt;
int strcmp(const char *s1, const char *s2);</pre>
<h4><FONT COLOR="#000080"><A name="0288_0127">Description<A name="0288_0127"></FONT></h4></P>
The <I>strcmp</I> function compares the string pointed to by <I>s1</I> to the string pointed to by <I>s2</I>.<P>
<h4><FONT COLOR="#000080"><A name="0288_0128">Returns<A name="0288_0128"></FONT></h4></P>
The <I>strcmp</I> function returns an integer greater than, equal to, or less than zero, accordingly as the string pointed to by <I>s1</I> is greater than, equal to, or less than the string pointed to by <I>s2</I>.<P>
<h4><FONT COLOR="#000080"><A name="0288_0129">7.11.4.3 The <B><I>strcoll</I></B> function<A name="0288_0129"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0288_012A">Synopsis<A name="0288_012A"></FONT></h4></P>
<pre>#include &lt;string.h&gt;
int strcoll(const char *s1, const char *s2);</pre>
<h4><FONT COLOR="#000080"><A name="0288_012B">Description<A name="0288_012B"></FONT></h4></P>
The <I>strcoll</I> function compares the string pointed to by <I>s1</I> to the string pointed to by <I>s2</I>, both interpreted as appropriate to the <I>LC_COLLATE</I> category of the current locale.<P>
<h4><FONT COLOR="#000080"><A name="0288_012C">Returns<A name="0288_012C"></FONT></h4></P>
The <I>strcoll</I> function returns an integer greater than, equal to, or less than zero, accordingly as the string pointed to by <I>s1</I> is greater than, equal to, or less than the string pointed to by <I>s2</I> when both are interpreted as appropriate to the current locale.<P>
<h4><FONT COLOR="#000080"><A name="0288_012D">7.11.4.4 The <B><I>strncmp</I></B> function<A name="0288_012D"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0288_012E">Synopsis<A name="0288_012E"></FONT></h4></P>
<pre>#include &lt;string.h&gt;
int strncmp(const char *s1, const char *s2, size_t n);</pre>
<h4><FONT COLOR="#000080"><A name="0288_012F">Description<A name="0288_012F"></FONT></h4></P>
The <I>strncmp</I> function compares not more than <I>n</I> characters (characters that follow a null character are not compared) from the array pointed to by <I>s1</I> to the array pointed to by <I>s2</I>.<P>
<h4><FONT COLOR="#000080"><A name="0288_0130">Returns<A name="0288_0130"></FONT></h4></P>
The <I>strncmp</I> function returns an integer greater than, equal to, or less than zero, accordingly as the possibly null-terminated array pointed to by <I>s1</I> is greater than, equal to, or less than the possibly null-terminated array pointed to by <I>s2</I>.<P>
<h4><FONT COLOR="#000080"><A name="0288_0131">7.11.4.5 The <B><I>strxfrm</I></B> function<A name="0288_0131"></FONT></h4></P>
<h4><FONT COLOR="#000080"><A name="0288_0132">Synopsis<A name="0288_0132"></FONT></h4></P>
<pre>#include &lt;string.h&gt;
size_t strxfrm(char *s1, const char *s2, size_t n);</pre>
<h4><FONT COLOR="#000080"><A name="0288_0133">Description<A name="0288_0133"></FONT></h4></P>
The <I>strxfrm</I> function transforms the string pointed to by <I>s2</I> and places the resulting string into the array pointed to by <I>s1</I>. The transformation is such that if the <I>strcmp</I> function is applied to two transformed strings, it returns a value greater than, equal to, or less than zero, corresponding to the result of the <I>strcoll</I> function applied to the same two original strings. No more than <I>n</I> characters are placed into the resulting array pointed to by <I>s1</I>, including the terminating null character. If <I>n</I> is zero, <I>s1</I> is permitted to be a null pointer. If copying takes place between objects that overlap, the behavior is undefined.<P>
<h4><FONT COLOR="#000080"><A name="0288_0134">Returns<A name="0288_0134"></FONT></h4></P>
The <I>strxfrm</I> function returns the length of the transformed string (not including the terminating null character). If the value returned is <I>n</I> or more, the contents of the array pointed to by <I>s1</I> are indeterminate.<P>
<h4><FONT COLOR="#000080"><A name="0288_0135">Example<A name="0288_0135"></FONT></h4></P>
The value of the following expression is the size of the array needed to hold the transformation of the string pointed to by <I>s</I>.<P>
<pre>1 + strxfrm(NULL, s, 0)</pre>
Footnote:<P>
136. The contents of "holes" used as padding for purposes of alignment within structure objects are indeterminate. Strings shorter than their allocated space and unions may also cause problems in comparison.<P>
<h4><FONT COLOR="#000080"><A name="0288_0136">Using the Comparison Functions<A name="0288_0136"></FONT></h4></P>
<I>memcmp</I> &#151; This function offers the quickest way to determine whether two character sequences of the same known length match character for character. You can also use it to establish a lexical ordering between two character sequences, but that ordering can change among implementations. If a portable result is important, you must write your own comparison function.<P>
<I>strcmp</I> &#151; This function offers the quickest way to determine whether two null-terminated strings match character for character. You can also use it to establish a lexical ordering between two strings, but that ordering can change among implementations. If a portable result is important, you must write your own comparison function. See also <I>strcoll</I> and <I>strxfrm</I>, below.<P>
<I>strcoll</I> &#151; Use this function to determine the locale-specific lexical ordering of two null-terminated strings. You <I>must</I> know the current status of locale category <I>LC</I>_<I>COLLATE</I> to use this function wisely. (You must at least assume that someone else has set this category wisely.) Under some circumstances, you may want to use <I>strxfrm</I>, described below, instead.<P>
<I>strncmp</I> &#151; This function offers the quickest way to determine whether two character sequences of the same known length match character for character up to and including any null character in both. You can also use it to establish a lexical ordering between two such character sequences, but that ordering can change among implementations. If a portable result is important, you must write your own comparison function.<P>
<I>strxfrm</I> &#151; Use <I>strxfrm(s1, s2, n)</I> to map the null-terminated string <I>s2</I> to a (non-overlapping) version at <I>s1</I>. Strings you map this way can later be compared by calling <I>strcmp</I>. The comparison determines the locale-specific lexical ordering of the two strings that you mapped <I>from</I>. You <I>must</I> know the current status of locale category <I>LC</I>_<I>COLLATE</I> to use this function wisely. (You must at least assume that someone else has set this category wisely.) Under most circumstances, you may want to use <I>strcoll</I>, described above, instead. Use <I>strxfrm</I> if you plan to make repeated comparisons or if the locale may change before you can make the comparison. Use <I>malloc</I>, declared in <I>&lt;stdlib.h&gt;</I>, to allocate storage for <I>s1</I>, as in:<P>
<pre>size_t n = strxfrm(NULL, s2, 0);
char *s1 = malloc(n + 1);

if (s1)
   strxfrm(s1, s2, n);</pre>
The first call to <I>strxfrm</I> determines the amount of storage required. The second performs the conversion (again) and stores the translated string in the allocated array.<P>
<h4><FONT COLOR="#000080"><A name="0288_0137">Implementing the Comparison Functions<A name="0288_0137"></FONT></h4></P>
<A href="list1.htm">Listing 1</a>
shows the file <I>memcmp.c. memcmp</I> is careful to perform <I>unsigned char</I> comparisons to meet the requirements of the C Standard.<P>
<A href="list2.htm">Listing 2</a>
shows the file <I>strncmp.c</I>. The function <I>strncmp</I> is similar to <I>memcmp</I>, except that it also stops on a terminating null character. And unlike <I>memcmp, strncmp</I> can use its pointer arguments directly. It type casts them to <I>pointer to unsigned char</I> only to compute a nonzero return value.<P>
<A href="list3.htm">Listing 3</a>
shows the file <I>strcmp.c</I>. The function <I>strcmp</I> differs from <I>strncmp</I> only in not worrying about a limiting string length <I>n</I>.<P>
The last two functions help you perform locale-specific string collation. Both <I>strcoll</I> and <I>strxfrm</I> determine collation sequence by mapping strings to a form that collates properly when compared using <I>strcmp</I>. The locale category <I>LC</I>_<I>COLLATE</I> determines this mapping. (See "Standard C", <I>CUJ</I> Nov. 1990.) It does so, in this implementation at least, by specifying a <I>table-driven finite-state</I> <I>machine</I>. You can write your own state tables in a locale file, as I describe briefly below. The state tables are used by the internal function _<I>Strxfrm</I>. Thus, <I>strcoll</I> and <I>strxfrm</I> call _<I>Strxfrm</I> to map strings appropriately.<P>
<A href="list4.htm">Listing 4</a>
shows the file <I>xstrxfrm.h</I>. All the collation functions include the internal header <I>"xstrxfrm.h"</I>. It includes, in turn, the standard header <I>&lt;string.h&gt;</I> and the internal header <I>"xstate.h"</I>, shown in <A href="list5.htm">Listing 5</a>.
 (I won't describe all the magic here. I outlined the locale-file language for state tables in "Standard C", <I>CUJ</I> Jan. 1991.) <I>"xstrxfrm.h"</I> defines the type _<I>Cosave</I> and declares the function _<I>Strxfrm</I>. A data object of type _<I>Cosave</I> stores state information between calls to _<I>Strxfrm</I>.<P>
<A href="list6.htm">Listing 6</a>
shows the file <I>strxfrm.c</I>. The function <I>strxfrm</I> best illustrates how the collation functions work together. It stores the mapped string in the buffer pointed to by <I>s1</I>, of length <I>n</I>. Once the buffer is full, the function translates the remainder of the source string to determine the full length of the mapped string. <I>strxfrm</I> stores any such excess characters in its own dynamic temporary buffer <I>buf</I>.<P>
<A href="list7.htm">Listing 7</a>
shows the file <I>xstrxfrm.c</I>. It defines the function _<I>Strxfrm</I> that performs the actual mapping. It does so as a finite-state machine executing the state table stored at _<I>Wcstate</I>, defined in the file <I>xstate.c</I>. I won't repeat that file here &#151; it simply initializes _<I>Wcstate</I> to point at a table that transforms strings unchanged.<P>
_<I>Strxfrm</I> must be particularly cautious because _<I>Wcstate </I>can be flawed. It can change with locale category <I>LC_COLLATE </I>in ways that the Standard C library cannot control.<P>
Note the various ways that the function can elect to take an error return:<P>
<UL><li>if a transfer occurs to an undefined state</li>
<li>if no state table exists for a given state</li>
<li>if the function makes so many state transitions since generating an output character that it must be looping</li>
<li>if the state table entry specifically signals an error</li></UL>
The rest of _<I>Strxfrm</I> is simple by comparison. The function retains the wide-character accumulator (<I>ps-&gt;_Wchar</I>) as part of the state memory. That simplifies generating a sequence of mapped characters with a common component while in a given shift state. _<I>Strxfrm</I> returns after it fills the output buffer (with <I>size</I> characters) or whenever it encounters the terminating null character in the source string.<P>
That can happen more than once. Note the careful way that <I>strxfrm</I> distinguishes the three reasons why_<I>Strxfrm</I> returns:<P>
<UL><li>If the last character delivered is a null character, the translation is complete. _<I>Strxfrm</I> delivers a null character if an error occurs. It also jiggers the stored state information to fail immediately should it be inadvertently called again for the same string.</li>
<li>Otherwise, if the next source character is a null character, _<I>Strxfrm</I> wants to rescan the source string. _<I>Strxfrm</I> will not point past a null character in the source string.</li>
<li>Otherwise, _<I>Strxfrm</I> wants to continue where it left off.</li></UL>
<A href="list8.htm">Listing 8</a>
shows the file <I>strcoll.c</I>. The function <I>strcoll</I> is somewhat more complex than <I>strxfrm</I>. It must translate <I>two</I> source strings a piece at a time so that it can compare their mapped forms. The type <I>Sctl</I> describes a data object that holds the information needed to process each source string. The internal function <I>getxfrm</I> calls _<I>Strxfrm</I> to update an <I>Sctl</I> data object.<P>
The comparison loop within <I>strcoll</I> thus calls <I>getxfrm</I> for each source string that has no mapped characters in its <I>Sctl</I> buffer. That ensures that each source string is represented by at least one mapped character, if any such characters remain to be generated.<I>strcoll</I> compares all the mapped characters that it can. It returns zero only if both mapped strings compare equal character by character and have the same length.<P>
<h4><FONT COLOR="#000080"><A name="0288_0138">State Tables<A name="0288_0138"></FONT></h4></P>
The function _<I>Strxfrm</I> maps one character string into another a byte at a time. It begins in state zero with a zero (16-bit) accumulator. It can transfer among up to 16 different states. It uses the next character to map as an index into the current state table. That tells the function what operations to perform and what state to enter next. The operations are:<P>
<UL><li><I>$F</I> &#151; Map the character to a new value and <I>fold</I> that value into the accumulator, replacing the lower eight bits.</li>
<li><I>$R</I> &#151; <I>Rotate</I> the accumulator left eight bits.</li>
<li><I>$O</I> &#151; If the new value is nonzero, map the character to that value. Otherwise, take the low eight bits of the accumulator as the mapped value. In either case, <I>output</I> the mapped character to the destination string. If the mapped value is zero, return.</li>
<li><I>$I</I> &#151; If the character to map is nonzero (not the null character), point past it. Otherwise, return.</li></UL>
This is not an easy language to program in, but you can do a lot with it. Just think of all the tricks you can play with a 16-state machine. <A href="list9.htm">Listing 9</a>
shows a simple example. It implements a "dictionary sort" by the rules:<P>
<UL><li>Ignore all characters except letters, and treat upper case letters the same as lower case.</li>
<li>If two strings prove identical by the first rule, compare them again as raw ASCII text.</li></UL>
The actual mapping discards all characters but letters on the first pass, mapping upper case to lower case. It then appends a dot (<I>'.'</I>). On the second pass over the input string, it copies the input unchanged.<P>
Here's how to read <A href="list9.htm">Listing 9</a>.
 The first line defines a locale called <I>DICT</I>. The last line terminates the definition. The locale differs from the <I>"C"</I> locale only in the category <I>LC_COLLATE</I>. The second line is simply a comment. The remaining lines rewrite the collation state tables zero and one.<P>
Now examine the line<P>
<pre>collate[0, 0     ] '.'     $0  $I  $1</pre>
It describes how to rewrite table 0, entry 0 (<I>0, 0</I>). The mapped value is the character dot ('.'). The operations to perform are output and input (<I>$0 $I</I>). And the successor state is 1 (<I>$1</I>). That entry handles putting out the dot when the null is encountered at the end of the first pass.<P>
The next entry rewrites the remainder of table 0 to consume all input and stay in state 0. The one after that re-rewrites the table for the lower case letters. And the one after that fixes up the upper case letters to map to lower case.<P>
The last entry defines the entire table 1 to put out characters unchanged. No need to treat the null character specially here. It automatically stops the translation when it gets copied to the output string.<P>
There seem to be no end of collation rules used around the world. Many European languages treat accented characters mostly the same as unaccented, except to distinguish otherwise identical strings. This scheme handles all the cases I've seen so far. It just takes some practice to get the notation down.<P>
I'll leave it to your imagination to try more ambitious mappings. One of my favorite exercises simply extends the dictionary sort for telephone directories. Say you want names beginning with "Mac" to sort as if they began with "Mc". It takes a few more states, but it's quite doable. Try it.<P>
<I>This article is excerpted in part from P.J. Plauger</I>, The Standard C Library,<I> (Englewood Cliffs, N.J.: Prentice-Hall, 1992)</I>.<P>

<h4><a href="../../../source/1992/nov92/plauger.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
