


<HTML>
<HEAD>

<TITLE>November 1992/Stepping Up To C++</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocnov.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Columns</FONT></H2>

<hr><h2 align="center"><font color="#800000">Stepping Up To C++<A name="028C_0121"><A name="028C_0121"></font></h2><P>
<h3 align="center"><A name="028C_0000"><A name="028C_0000">Dynamic Arrays</h3><P>
<h3 align="center"><font color="#800000">Dan Saks</font></h3><hr><blockquote><P>
<P><i><A name="028C_0000"><A name="028C_0000">Dan Saks is the owner of Saks &amp; Associates, which offers consulting and training in C and C++. He is secretary of the ANSI C++ standards committee, and also contributing editor for Windows/DOS Developer's Journal. Dan recently finished his first book, C++ Programming Guidelines, written with Thomas Plum. You can write to him at 393 Leander Dr., Springfield, OH 45504, or dsaks@wittenberg.edu (Internet), or call (513)324-3601.</i></P><P>
In C++, as well as in C, array dimensions in array declarations must be constant integral expressions with positive values. A constant expression is an expression whose value can be determined at compile time, rather than at runtime.<P>
A constant integral expression can only contain integral constants, enumerators, floating expressions cast to integral types, or <I>sizeof</I> expressions. A constant integral expression may include operators, but all the operands must themselves be constant. For example,<P>
<pre>#define M 10
#define N 15
...
int *b [M];
// OK, 10 elements
float c[2 * N - 1];
// 0K, 29 elements</pre>
Sometimes I wish I could defer choosing a particular array dimension until runtime. However, C++ (like C) does not let me write<P>
<pre>void g(int n)
   {
   double a[n];   // error
   ...
   }</pre>
because <I>n</I> is not a constant expression.<P>
C++ extends the definition of constant expression to include <I>const</I> integral objects initialized with constant expressions. For instance, C++ allows<P>
<pre>const int len = 100;
char name[len];     // OK in C++ but not C</pre>
However, C++ still does not allow<P>
<pre>void g(int m)
   {
   const int n = m;
   double a[m];  // error
   ...
   }</pre>
because, even though <I>n</I> is const, its initializer is not a (compile-time) constant expression.<P>
Often when I need an array whose size may vary each time I run the program, I set the array size to be as large as I'll ever need. For example, the standard header <I>stdio.h</I> defines <I>FILENAME_MAX</I> as the size of an array large enough to hold the longest file name string used by the host system. Whenever I manipulate file names, I use arrays declared like<P>
<pre>char fn[FILENAME_MAX];</pre>
I can get away with this because <I>FILENAME_MAX</I> is rarely very big, so I need not worry about wasting a lot of memory. But, this is not a general solution to the problem of allocating space for arrays of widely varying sizes. Often, there just isn't enough room to give every array its largest possible size.<P>
<h4><FONT COLOR="#000080"><A name="028C_0122">Explicitly-Allocated Dynamic Arrays<A name="028C_0122"></FONT></h4></P>
If you really need an array whose dimension is determined at runtime, you can declare a pointer (to the element type of the array) and allocate the array using <I>new</I>. The size of an array allocated by <I>new</I> need not be constant. For example,<P>
<pre>void g(int n)
   {
   float *a = new float[n];
   assert(a != 0);
   ...
   }</pre>
allocates an array of <I>n floats</I> addressed through pointer <I>a</I>. The call to <I>assert </I>verifies that the allocation succeeded.<P>
In some ways, explicit allocation is almost as convenient as declaring the array as an auto variable. Inside <I>g</I>, you can still refer to the <I>i</I>th element of <I>a</I> as <I>a[i]</I>. However, when you're done with the array, you must remember to call<P>
<pre>delete [] a;</pre>
to recycle the array. But this delete expression can't recover the storage if it's skipped by executing <I>longjmp</I>. The program in <A href="list1.htm">Listing 1</a>
illustrates the problem.<P>
This program uses the Standard C <I>setjmp</I> and <I>longjmp</I> functions to recover from an error. The <I>setjmp</I> call in <I>main</I> marks the recovery point and returns zero. <I>main</I> calls <I>g</I>, which dynamically allocates array <I>a</I>, and then calls <I>f</I>. If <I>f</I> detects an error of some sort, it calls <I>longjmp</I>. <I>longjmp</I> does not return to <I>f</I>; it discards the stack frames for <I>f</I> and <I>g</I> and returns control to <I>main</I>. Inside <I>main</I>, the return from <I>longjmp</I> appears like a return from <I>setjmp</I> with a non-zero return value.<P>
By skipping the normal return from <I>g</I>, the <I>longjmp</I> also skips the delete expression<P>
<pre>delete [] a;</pre>
at the end of <I>g</I>. Since the <I>longjmp</I> discards <I>a</I> without deleting the storage it points to, that storage is lost forever &#151; you get a memory leak. Someday, C++ programmers will be able to use the new exception-handling features (<I>try, throw</I>, and <I>catch</I>) instead of <I>setjmp</I> and <I>longjmp</I>. <I>throw</I> improves on <I>longjmp</I> by calling destructors for local objects as it discards stack frames, but even a <I>throw</I> won't invoke that delete expression to free <I>a</I>'s storage.<P>
Manually allocating and deallocating the storage for dynamic arrays is tedious and error-prone. C++ programmers typically solve this problem using dynamic array objects with destructors.<P>
<h4><FONT COLOR="#000080"><A name="028C_0123">A Dynamic Array of <B><I>float</I><A name="028C_0123"></B></FONT></h4></P>
<A href="list2.htm">Listing 2</a>
shows the class definition for <I>float_array</I>, a minimal class for an array of floating-point values, that lets you set and change the number of elements at runtime. The data structure is similar to the one I used for variable-length strings in my last column (see "Stepping Up to C++: Initialization vs. Assignment", CUJ, September 1992). Each <I>float_array</I> has two data members: <I>array</I> is a pointer to the first element of the actual array allocated from the free store, and <I>len</I> is the number of elements in that array. <A href="list3.htm">Listing 3</a>
shows the implementation for the non-inline <I>float_array</I> member functions. <A href="list4.htm">Listing 4</a>
contains a small test program that does some simple <I>float_array</I> operations. <A href="fig1.htm">Figure 1</a>
is a sample output from that program.<P>
The constructor<P>
<pre>float_array(size_t n = 0)</pre>
constructs a <I>float_array</I> with a given number of elements. (Remember, <I>size_t</I> is an unsigned integral type, so the number of elements must be non-negative.) Since parameter <I>n</I> has a default value (= 0), this constructor can be called with no arguments, so it's also the default constructor. If <I>n</I> is zero, the constructor simply sets the length to zero and the pointer to null. Otherwise, it allocates an array and initializes all the elements with zero. The call to <I>assert</I> catches allocation failures. <A href="fig2.htm">Figure 2</a>
shows the representation of <I>fa</I> and <I>fb</I> declared as<P>
<pre>float_array fa;
              // default n = 0
float_array fa(4);
             // explicit n = 4</pre>
The copy constructor<P>
<pre>float_array(const float_array &amp;fa)</pre>
constructs a <I>float_array</I> by copying <I>fa</I>. This constructor replaces the shallow copy that would have been generated by the compiler with a deep copy that completely replicates the structure of <I>fa</I>.<P>
The destructor<P>
<pre>~ float_array ()</pre>
simply deletes the allocated array. Although <I>array</I> may be null, you need not check because deleting null is legal and has no effect.<P>
The assignment operator<P>
<pre>float_array &amp;operator=
   (const float_array &amp;fa)</pre>
replaces the shallow copy that the compiler would have generated with a proper deep copy. I added the <I>if </I>statement<P>
<pre>if (this == &amp;fa)
   return *this;</pre>
at the beginning of the function (in <A href="list2.htm">Listing 2</a>)
 to avoid copying an object on top of itself. <I>fa</I> is a reference, but <I>&amp;</I> applied to the reference applies to the referenced object, not to the underlying pointer that implements the reference. So <I>&amp;fa</I> is an expression of type "pointer to const float array" whose value is the address of the <I>float_array</I> object to be copied (the source object). <I>this</I> is the pointer to the destination of the copy. Hence, that conditional expression determines if the source and destination are the same object.<P>
Strictly speaking, I don't need that first <I>if</I> statement in my <I>operator=</I>. If I omitted that <I>if</I>, the remaining function might spin its wheels for a while copying an object over itself, but it would still produce a valid result. However, that first <I>if</I> statement illustrates a useful technique for detecting when two objects are the same.<P>
I'll skip <I>operator[]</I> for the moment. It's the subject of the next section.<P>
<pre>float_array::length ()</pre>
simply returns the number of elements currently in the array. The class definition declares <I>length</I> as an inline function, but doesn't include the function body. The function body appears later in the header file. I prefer ot to clutter class definitions with the bodies of inline function members. However, inline member function definitions must appear later in the same header so the compiler can see the function body and substitute it at each call. Had I put the definition of <I>float_array::length</I> in fa1.cpp (<A href="list3.htm">Listing 3</a>)
 instead of in <I>fa1.h</I> (<A href="list2.htm">Listing 2</a>)
, then the calls to <I>float_array::length</I> (<A href="list4.htm">Listing 4</a>)
 would compile as non-inline calls.<P>
The header also contains a non-member output operator<P>
<pre>ostream &amp;operator&lt;&lt;
   (ostream &amp;os, const float_array &amp;fa)</pre>
that writes a <I>float_array</I> to an <I>ostream</I> as a sequence of floating-point values separated by spaces and enclosed in braces. Note that <I>operator&lt;&lt;</I> is not a <I>friend</I> of <I>float_array</I> because it does not need access to any of <I>float_array's private</I> members.<P>
<h4><FONT COLOR="#000080"><A name="028C_0124">Subscripting<A name="028C_0124"></FONT></h4></P>
The <I>float_array</I> member function<P>
<pre>operator[] (size_t i)</pre>
overloads the <I>[]</I> operator so that subscripting on <I>float_arrays</I> looks very much like subscripting on other arrays. C++ translates the expression <I>fa[i]</I> into <I>fa.operator[](i)</I>.<P>
Unlike the built-in <I>[]</I> operator, <I>float_array::operator []</I> is not commutative. For array name (or pointer) <I>a</I>, the expression <I>a[i]</I> is equivalent to *<I>(a + i), *(i + a)</I> and even <I>i[a]</I>. However, since <I>float_array::operator[]</I> is a member function (it cannot be a non-member), the left operand must be a <I>float_array</I> object. Thus, you cannot rewrite <I>fa[i]</I> as <I>i[fa]</I>.<P>
Operator overloading does not preserve the usual relationships between operators applied to non-class types. Thus you cannot write <I>fa[i]</I> as *<I>(fa + i)</I> unless you also overload * and + appropriately (if it's even possible).<P>
Overloading <I>operator []</I> gives the class designer the ability to detect and respond to subscripting errors. You can choose to ignore the error or you can catch it by calling<P>
<pre>assert(i &lt; len);</pre>
as in <A href="list3.htm">Listing 3</a>.
 You can even choose to extend the array so that the errant subscript is no longer out of bounds.<P>
<I>operator[]</I> returns a <I>float</I> <I>&amp;</I> that refers to the selected <I>float_array</I> element. Why a reference? Why not a <I>float</I> or a pointer to a <I>float</I>? Well, suppose <I>operotor[]</I> returned just a <I>float</I>. A function call expression returning a <I>float</I> is an rvalue. This means you can use it on the right side of an assignment, as in<P>
<pre>x = fa[i];</pre>
but not on the left, as in<P>
<pre>fa[i] = y;</pre>
That's not acceptable, so try defining the function as<P>
<pre>float *float_array::operator[] (size_t i)
   {
   assert(i &lt; len);
   return &amp;array[i];
   }</pre>
so it returns a <I>float *</I> pointing to the selected element. The returned pointer value is still an rvalue. However, you can dereference the pointer to get an lvalue for the selected element. You can use that lvalue on either side of assignment.<P>
<pre>x = *fa[i];</pre>
copies the <I>i</I>th element of <I>fa</I> to <I>x</I>, and<P>
<pre>*fa[i] = y;</pre>
stores <I>y</I> into the <I>i</I>th element of <I>fa</I>. But the extra * spoils the look and feel of the subscripting expressions.<P>
A reference behaves like a pointer that's automatically dereferenced each time you use it. A function call returning a reference is an lvalue. When <I>operator[]</I> returns a reference, you can write<P>
<pre>x = fa[i];
fa[i] = y;</pre>
and even<P>
<pre>fa[i] = fa[j];</pre>
as if you were subscripting any other array type.<P>
<h4><FONT COLOR="#000080"><A name="028C_0125">The <B><I>const</I></B> Qualifier<A name="028C_0125"></FONT></h4></P>
C++, like C, is designed for programming a very wide range of applications, from very large end-user applications to very small embedded control programs. C++ improves support at the high end with features like classes and operator overloading. It retains C's power at the low end with features like the <I>const</I> and <I>volatile</I> qualifiers.<P>
The <I>const</I> qualifier indicates that the qualified object can't be changed, so the translator is free to place that object in read-only memory (ROM) or maybe even optimize the object out of existence. For example, given<P>
<pre>const char name[] = "Ben";</pre>
a C++ (or C) translator may place <I>name</I> in ROM. Once you declare <I>name</I> as <I>const</I>, the translator must diagnose any attempt to modify it, as in<P>
<pre>name[0] = 'b';     // error</pre>
C++ won't let you strip off the <I>const</I> qualifier without at least a little fuss. For example,<P>
<pre>char *p: name;     // error</pre>
is an error because <I>p</I> drops the <I>const</I> qualifier. Failure to catch this error would open the door to<P>
<pre>*p = 'b';</pre>
which writes over the <I>const</I> object. Of course, you can strip the <I>const</I> qualifier using a cast, as in<P>
<pre>char *p = (char *)name;</pre>
if you think you know what you're doing.<P>
When you write a call like<P>
<pre>strcpy(fullname, name);</pre>
how does the compiler know that <I>strcpy</I> won't change <I>name</I>? The second parameter in <I>strcpy's</I> declaration (in <I>string.h</I>) contains the appropriate <I>const</I> qualfier<P>
<pre>char *strcpy(char *s1, const char *s2);</pre>
In effect, the <I>const</I> qualifier is a promise by <I>strcpy</I> that it won't change the characters addressed by <I>s2</I>. Obviously, <I>strcpy</I> can't make the same promise for <I>s1</I>, because <I>strcpy's</I> purpose in life is to write into the characters addressed by <I>s1</I>.<P>
If you look through the Standard C headers, you'll see that it uses <I>const</I> qualifiers wherever possible to maximize library support for ROM-based applications. But most C++ programmers don't write ROM-based applications. Is there another reason to use <I>const</I>?<P>
I've said before, and I'll say again, I don't enjoy debugging. I want my language translator (compiler and linker) to catch my errors for me. That's why I like the stricter type checking of C++. I prefer a "declarative" style of programming where I tell the translator as much as I can about my intent, so it can tell me when I violate that intent.<P>
I view <I>const</I> as a statement of intent. Basically, I adopt the view that "everything that can be <I>const</I> should be <I>const</I>." I put a <I>const</I> qualifier on every pointer or reference parameter refering to an object that I don't intend to change. I want the compiler to poke me if I accidently try to change one of those objects.<P>
<h4><FONT COLOR="#000080"><A name="028C_0126"><I>const</I><B> Member Functions<A name="028C_0126"></B></FONT></h4></P>
Let's apply this policy to the <I>float_array</I> class in <A href="list2.htm">Listing 2</a>
and <A href="list3.htm">Listing 3</a>
and the test program in <A href="list4.htm">Listing 4</a>.
 The <I>display</I> function in <A href="list3.htm">Listing 3</a>
is an non- member function that displays the name and value of a <I>float_array</I> in the form<P>
<pre>name = { v1 v2 ... }</pre>
display changes neither of its parameters, so both should have a <I>const</I> qualifier. But, when you change the function heading to<P>
<pre>void display(const char *s,
     const float_array &amp;fa)</pre>
you get a diagnostic in the function body, saying something like "cannot bind non-<I>const</I> reference to <I>const</I> object" or "temporary used for parameter <I>fa</I> in call to <I>operator&lt;&lt;(ostream &amp;, float_array &amp;)</I>".<P>
The problem is that <I>display</I> calls <I>operator&lt;&lt;</I> (declared in <A href="list2.htm">Listing 2</a>
and defined in <A href="list3.htm">Listing 3</a>)
, passing <I>fa</I> (now a <I>const float_array &amp;</I>) as the second argument. But the second parameter of <I>operator</I>&lt;&lt; is still a (<I>non-const</I>) <I>float_array &amp;</I>. In other words, <I>display</I> promised not to change its <I>float_array</I> argument, but <I>operator&lt;&lt;</I> hasn't made the same promise. But, since <I>operator&lt;&lt;</I> doesn't change it's <I>float_array</I> argument either, it can easily keep the promise. Simply add a <I>const</I> qualifier.<P>
You change the function heading to<P>
<pre>ostream &amp;operator&lt;&lt;(ostream &amp;os,
         const float_array &amp;fa)</pre>
in both the header and the source file. But, when you recompile <A href="list3.htm">Listing 3</a>,
 you get at least two more diagnostics, this time in the body of <I>operator&lt;&lt;.</I> One diagnostic occurs at the call to <I>fa.length</I>, and the other occurs at the expression <I>fa[i]</I>. Both messages probably say something about calling a non-<I>const</I> member function for a <I>const</I> object.<P>
Now that <I>operator&lt;&lt;</I> has promised it won't change <I>fa</I>, how does it know that <I>fa.length</I> and <I>fa[i]</I> won't change <I>fa</I> either. <I>operator&lt;&lt;</I> can't apply a <I>float_array</I> member function to a <I>const float_array</I> object unless that member function also promises it won't change the object. How does a member function state that promise?<P>
The problem is that the <I>float_array</I> operand doesn't appear explicitly in a member function's parameter list. Every (non-static) member function has an extra parameter, known as <I>this</I>, that's a pointer to the object to which the function applies. Ordinarily, the type of <I>this</I> in a <I>float_array</I> member function is <I>float_array *const</I>. That is, a member function declaration like<P>
<pre>size_t float_array::length()</pre>
translates into something more like<P>
<pre>size_t float_array::length
   (float_array *const this)</pre>
As such, you cannot change <I>this</I> itself, but you can change the object it points to.<P>
But <I>operator&lt;&lt;</I> wants an assurance that <I>float_array::length</I> won't change the <I>float_array</I> object. It needs the declaration for <I>this</I> to be<P>
<pre>const float_array *const this</pre>
But, since you never declare <I>this</I> explicitly, where can you place the <I>const</I>? After the parameter list, as in<P>
<pre>size_t length() const;</pre>
<I>length</I> is now a <I>const</I> member function. It promises not to alter the <I>float_array</I> object to which it applies. The compiler will flag any attempt to modify either data member <I>array</I> or <I>len</I> inside length.<P>
You should also change <I>operator[]</I> to a <I>const</I> member function. You must be careful to change it both in the class definition and in the member function definition. <A href="list5.htm">Listing 5</a>
shows the <I>float_array</I> class definition with <I>length</I> and <I>operator[]</I> as <I>const</I> member functions. <A href="list6.htm">Listing 6</a>
shows the function definition for <I>operator[]</I> as a <I>const</I> member function.<P>
<h4><FONT COLOR="#000080"><A name="028C_0127">Is <B><I>const</I></B> Worth the Trouble?<A name="028C_0127"></FONT></h4></P>
As you may have noticed, adding <I>const</I> qualifiers to arguments in existing C++ functions causes the need for <I>consts</I> to ripple through the entire program. Adding <I>const</I> in one function usually forces you to add <I>const</I> in another. And another. Many good C++ programmers just don't think it's worth the bother retrofitting <I>const</I> to existing C++ code. It's a hard to argue with them. It's much easier to apply <I>const</I> properly if you plan to use it from the start.<P>
<h4><FONT COLOR="#000080"><A name="028C_0128">More to Come<A name="028C_0128"></FONT></h4></P>
If you rebuild the test program using the <I>const</I> member functions, everything compiles and links with no complaints. The resulting program produces the same output as before. But the <I>operator[]</I> in <A href="list6.htm">Listing 6</a>
is an accident waiting to happen. It let's you write an expression, without a cast, that inadvertantly modifies a <I>const float_array</I>. And the compiler can't detect it.<P>
I'll explain the cause and cure in my next column.<P>

<h4><a href="../../../source/1992/nov92/saks.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
