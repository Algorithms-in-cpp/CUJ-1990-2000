


<HTML>
<HEAD>

<TITLE>November 1992/The CORDIC Method for Faster sin and cos Calculations</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocnov.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">The CORDIC Method for Faster sin and cos Calculations<A name="024C_0117"><A name="024C_0117"></font></h2><P>
<h3 align="center"><font color="#800000"><A name="024C_0000"><A name="024C_0000">Michael Bertrand</font></h3><hr><blockquote><P>
<P><i><A name="024C_0000"><A name="024C_0000">Mike teaches Mathematics and programming at Madison Area Technical College, Madison, WI 53704.</i></P><P>
CORDIC stands for Coordinate Rotation Digital Computer, an early device implementing fast integer sine and cosine calculations (Volder, 1959). Whenever trigonometry functions must be evaluated repeatedly, as in computer graphics, integer methods, such as CORDIC, should be considered. While integer methods are less accurate than the C Library functions <I>sin</I> and <I>cos</I>, the improved speed makes the tradeoff quite acceptable in some applications.<P>
<h4><FONT COLOR="#000080"><A name="024C_0118">CORDIC Units<A name="024C_0118"></FONT></h4></P>
The key to the CORDIC method is the representation of both angles and trigonometric ratios as integers. In this implementation a 16-bit unsigned integer represents the angles around the circle as shown in <A href="tab1.htm">Table 1</a>.
<P>
With CORDIC angle units, or CAUs, the circle divides into 64K parts instead of 360 parts using degrees. Each degree measures about 182 CAU.<P>
Sine and cosine values are represented as signed integers, with an implicit denominator of 16384 (<I>CordicBase</I> in the accompanying program). Calculated sines and cosines lie in the range -16384 to +16384, corresponding to a trigonometric ratio between -1 and + 1. <A href="tab2.htm">Table 2</a>
contains sample correspondents in this fixed point scheme.<P>
Suppose your application receives a value of 100 and must multiply it by <I>sin(54&deg;)</I> to produce the nearest integer (a realistic example from computer graphics where input and output are pixel locations). The standard approach, using the C Standard Library <I>sin</I> call, amounts to:<P>
<pre>100 x sin(54&deg;) = 100 x 0.8090 = 80.90 -&gt; 81</pre>
Both the floating-point multiplication and the <I>sin</I> are expensive.<P>
The CORDIC version of this calculation substitutes a fast <I>sin</I> and long integer multiplication (where 54&deg; = 9830 CAU and sin(9830 CAU) = 13255 CORDIC fixed-point units):<P>
<pre>100 x sin(9830) = (100 x 13255 + 8192) / 16384 = 81.40 -&gt; 81</pre>
The 8192 is added for integer rounding (8192/16384 = 0.5). The division by 16384 is done with an inexpensive right shift. CORDIC's speed is due to the fast sine calculation and the complete avoidance of floating-point calculations.<P>
<h4><FONT COLOR="#000080"><A name="024C_0119">CORDIC Special Angles<A name="024C_0119"></FONT></h4></P>
The CORDIC algorithm depends on representing a given angle by a set of special angles, {arctan(2<SUP>-i</SUP>)} = {arctan(1), arctan(1/2), arctan(1/4), ...}:<P>
<pre>arctan(   1) = 45.00&deg; = 8192 CAU
arctan( 1/2) = 26.57&deg; = 4836 CAU
arctan( 1/4) = 14.04&deg; = 2555 CAU
arctan( 1/8) =  7.13&deg; = 1297 CAU
arctan(1/16) =  3.58&deg; = 651 CAU
            .
            .
            .</pre>
Using these special angles, 54 is represented to a finer and finer precision as follows:<P>
<pre>54&deg; = 45.00                               = 45.00
54&deg; = 45.00 + 26.57                       = 71.57
54&deg; = 45.00 + 26.57 - 14.04               = 57.53
54&deg; = 45.00 + 26.57 - 14.04 - 7.13        = 50.40
54&deg; = 45.00 + 26.57 - 14.04 - 7.13 + 3.58 = 53.98</pre>
This approximation has a physical interpretation. Think in terms of a vector 16384 units long and emanating from the origin in a standard x-y coordinate system. Starting at 0&deg; along the positive x axis, the vector rotates through each of the special angles one step at a time. Rotation at each step may be clockwise or counter-clockwise, whichever is needed to bring the vector closer to 54&deg;. The special angles represent rotations by smaller and smaller amounts, with positive signifying counter-clockwise rotation and negative signifying clockwise rotation.<P>
Starting at 0&deg; along the positive x axis, +45.00&deg; is a counter-clockwise rotation into the middle of the first quadrant. The next step again rotates counter-clockwise by another 26.57&deg;, but this results in 71.57&deg;, which overshoots the mark. The third rotation is therefore clockwise, signified by the minus 14.04&deg; bringing the result back to 57.53&deg;. This continues as many times as there are bits in 16384 &#151; 14 times.<P>
The x and y coordinates of the rotating vector are the cosine and sine of the vector's angle at each step, assuming that the vector's length, 16384, doesn't change during rotation. As the vector's angle approaches 54&deg; more closely, its x and y coordinates provide better approximations of cos(54&deg;) and sin(54&deg;).<P>
<h4><FONT COLOR="#000080"><A name="024C_011A">CORDIC Equations<A name="024C_011A"></FONT></h4></P>
<A href="fig1.htm">Figure 1</a>
illustrates the geometry of a counter-clockwise rotation at the <I>i</I><SUP>th</SUP> step. Rotate vector <I>p</I> through an angle of <I>arctan(2</I><I><SUP>-i</SUP></I><I>)</I> to new vector <I>p1</I> such that the indicated angle at <I>p</I> is a right angle. The task is to express the new (cosine, sine) approximations (x1, y1) in terms of the old ones (x, y). The two shaded triangles are similar because they are right triangles with acute angles that are equal. In the right triangle connecting <I>p</I> and <I>p1</I> to the origin, the two legs <I>R</I>* and <I>R</I> are in the proportion 1 : 2i by the definition of <I>arctan(2-i))</I> :<P>
<pre>2<SUP>-i</SUP> = tan(arctan(2<SUP>-i</SUP>)) = (R*)/R</pre>
<I>R</I> and <I>R</I>* are the hypotenuses of the two similar triangles, so these triangles are in the proportion 1 : 2<SUP>-i</SUP>. This implies that the shorter horizontal leg of the small triangle is y/(2<SUP>i</SUP>) and the longer, vertical leg is x/(2<SUP>i</SUP>), leading to the counter-clockwise equations:<P>
<pre>ccw rotation     x1 = x - y/(2<SUP>i</SUP>)
                  y1 = y + x/(2<SUP>i</SUP>)</pre>
Rotating <I>p1</I> clockwise leads to the clockwise equations, identical except for a sign reversal:<P>
<pre>cw rotation      x1 = x + y/(2<SUP>i</SUP>)
              y1 = y - x/(2<SUP>i</SUP>)</pre>
These are fast operations involving integer addition, subtraction and shifting.<P>
<h4><FONT COLOR="#000080"><A name="024C_011B">Expansion Factor<A name="024C_011B"></FONT></h4></P>
A problem arises with <I>p1</I>, which is further from the origin than <I>p</I> was at each step, so the vector does not simply rotate around a circle of radius 16384, but also expands. The expansion can be exactly measured by applying the Pythagorean theorem to the right triangle containing <I>p</I> and <I>p1</I>:<P>
<pre>p1<SUP>2</SUP> = R<SUP>2</SUP> + (R/2<SUP>i</SUP>)<SUP>2</SUP> = R<SUP>2</SUP> + R<SUP>2</SUP>/2<SUP>2i</SUP>
   = R<SUP>2</SUP> * (1 + 1 / 2<SUP>2i</SUP>)
   = R<SUP>2</SUP> * (2<SUP>2i</SUP> + 1) / 2<SUP>2i</SUP></pre>
or:<P>
<IMG SRC="equat1.gif"><P>
The first rotation (45&deg;) expands the vector by a factor of<P>

<IMG SRC="equat2.gif"><P>

the second rotation (26.57&deg;) expands it further by a factor of<P>

<IMG SRC="equat3.gif"><P>

the third rotation (14.04&deg;) expands by <P>

<IMG SRC="equat4.gif"><P>

and so on. Each of the 14 rotations entails such an expansion, although the later ones are negligible.<P>
The net effect is an expansion by a factor of 1.414 x 1.118 x 1.031 x ... = 1.646760. The original vector will expand to 1.646760 x 16384 = 26981 in the course of rotating. To offset this expansion, the original vector is contracted before starting the process to bring its final length, after the rotation/expansions, back to 16384. Instead of initializing the vector to 16384, it is initialized to <I>xInit</I> = 16384/1.646760 = 9949, which expands to 16384 after 14 steps. At the last step the vector's x and y coordinates will be the cosine and sine in CORDIC fixed-point units (based on 16384).<P>
<h4><FONT COLOR="#000080"><A name="024C_011C">Implementation Notes<A name="024C_011C"></FONT></h4></P>
The central routine is <I>SinCos</I> (See <A href="list1.htm">Listing 1</a>)
, which calculates the sine and cosine of an incoming angle. Both incoming angle and calculated sine and cosine are assumed to be in CORDIC units. <I>SinCosSetup</I> initializes needed global variables, including the special arctan angles and <I>xInit</I>, the initial contracted vector length. <I>SinCosSetup</I> must be called once only for initialization before calling <I>SinCos</I>. The CORDIC algorithm in <I>SinCos</I> works on first quadrant angles only (0 &#151; 90, or 0 &#151; 16383 CAU). <I>SinCos</I> translates angles from other quadrants into the first quadrant before applying the algorithm. The calculated sine and cosine will be correct, except possibly for the sign, which is adjusted before returning from the routine.<P>
A hexagon rotator is included to demonstrate the CORDIC system (see <A href="fig2.htm">Figure 2</a>)
. A center point and initial vertex remain fixed while another point, <I>vertex1</I>, rotates clockwise around the original vertex in increments of 650 CAU (3.57). For each <I>vertex1</I>, the five associated regular hexagon vertices are calculated and the hexagon is drawn using Borland C++'s line drawing commands. The routine calculating the vertices, <I>CalcHexPts</I>, calculates the sine and cosine of 60&deg; (10923 CAU) only once and calculates each vertex from the previous one. This practice cannot be used for continual rotating because of accumulating errors from integer rounding as well as inexact sines and cosines.<P>
Timing tests show the CORDIC method to be over 20 times faster than the standard method when calculating the vertices of a regular hexagon, a characteristic computer graphics task. The savings are due to the elimination of floating-point calculations as well as fast sine and cosine evaluation.<P>
An exhaustive test of all 16384 CAUs shows that the worst error in a sine or cosine is 0.00064 and the average error is 0.00011. This is over 13 bits of accuracy on average, or better than one part in 8000, quite adequate for many screen-related computer graphics applications.<P>
The original papers on this topic read very well, and are accessible through an excellent reprint by IEEE (<I>Computer Arithmetic</I>). Also helpful are articles cited below in <I>Graphics Gems</I>. Both volumes are essential for computer graphics workers.<P>
<h4>References</FONT></h4></P>
Linhardt, R. J., and H. S. Miller 1969. "Digit-by-Digit Transcendental Function Computation". <I>RCA Rev</I>. 30:209-247. (Reprinted in E. Swartzlander (ed.) 1990. <I>Computer Arithmetic</I>. IEEE Computer Society Press, 233-271.)<P>
Ritter, Jack. "Fast 2D-3D Rotation". In A. S. Glassner 1990. <I>Graphics Gems</I>. Academic Press, 440-441.<P>
Turkowski, Ken. "Fixed-Point Trigonometry with CORDIC Iterations". In A. S. Glassner 1990. <I>Graphics Gems</I>. Academic Press, 494-497.<P>
Volder, Jack E. 1959. "The CORDIC Trigonometric Computing Technique". <I>IRE Trans. Electron. Comput.</I> EC-8:330-334. (Reprinted in E. Swartzlander (ed.) 1990. <I>Computer Arithmetic</I>. IEEE Computer Society Press, 226-230.)<P>

<h4><a href="../../../source/1992/nov92/bertrand.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
</BODY>
</HTML>
