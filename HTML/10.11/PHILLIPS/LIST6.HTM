<HTML><HEAD>
<TITLE>November 1992/Image Processing, Part 8/Listing 6</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 6<B></B> <B><I></B>Changes made to the main program in the C Image Processing System to implement image operations</I></A></h4>
<pre>      case 11: /* perform image addition and subtraction */
         printf("\nCIPS&gt; Image Addition:"
             "\n         output = first + second"
             "\n      Image Subtractions:"
             "\n         output = first - second");
         printf("\nCIPS&gt; Enter first image name\n");
         get_image_name(name);
         printf("\nCIPS&gt; Enter second image name\n");
         get_image_name(name2);
         printf("nCIPS&gt; Enter output image name\n");
         get_image_name(name3);
         printf("\nCIPS&gt; Enter parameters for first image");
         get_parameters(&amp;il, &amp;ie, &amp;ll, &amp;le);
         printf("\nCIPS&gt; Enter parameters for second image");
         get_parameters(&amp;il2, &amp;ie2, &amp;ll2, &amp;le2);
         printf("\nCIPS&gt; Enter parameters for output image");
         get_parameters(&amp;il3, &amp;ie3, &amp;ll3, &amp;le3);
         printf("\n\nCIPS&gt; Enter a=addition
                      s=subtraction\n");
         printf("\nCIPS&gt; _\b");
         read_string(low_high);
         if(low_high[0] == 'a' || low_high[0] == 'A')
            add_image_array(name, name2, name3, the_image, out_image,
               il, ie, ll, le, i12, ie2, ll2, le2, i13, ie3, ll3, le3);
         if(low_high[0] == 's' || low_high[0] == 'S')
            subtract_image_array(name, name2, name3, the_image, out_image,
               il, ie, ll, le, il2, ieg, ll2, le2, il3, ie3, ll3, le3);
      break;
      
      case 12: /* image cutting and pasting */
         printf("\n\nCIPS&gt; Cut from source image and paste to"
            " destination image");
         printf("\nCIPS&gt; Enter source image name");
         get_image_name(name);
         get_parameters(&amp;il, &amp;ie, &amp;ll, &amp;le);
         check_cut_and_paste_limits(&amp;il, &amp;ie, &amp;ll, &amp;le);
         cut_image_piece(name, the_image,
                      il, ie, ll, le);
         printf("\nCIPS&gt; Enter destination image name");
         get_image_name(name2);
         printf("\nCIPS&gt; Enter destination image parameters");
         get_parameters(&amp;il, &amp;ie, &amp;ll, &amp;le);
         check_cut_and_paste_limits(&amp;il, &amp;ie, &amp;ll, &amp;le);
         paste_image_piece(name2, name, the_image,
                        out_image, il, ie, ll, le);
      break;
      
      case 13: /* image rotation and flipping */
         printf("\nCIPS&gt; Enter source image name");
         get_image_name(name);
         get_parameters(&amp;il, &amp;ie, &amp;ll, &amp;le);
         printf("\nCIPS&gt; Enter destination image name");
         printf("\nCIPS&gt; (source can equal destination)");
         get_image_name(name2);
         printf("\nCIPS&gt; Enter destination image parameters");
         get_parameters(&amp;il2, &amp;ie2, &amp;ll2, &amp;le2);
         printf("\nCIPS&gt; Enter number of Rotations (1, 2, 3)");
         printf("\nClPS&gt; or type of Flip
           (4=horizontal 5=vertical)");
         printf("\nCIPS&gt; _\b");
         get_integer(&amp;rotation_type);
         rotate_flip_image_array(name, name2, the_image,
                          out_image, il, ie, ll, le,
                          il2, ie2, ll2, le2,
                          rotation_type);
      break;
      
      case 14: /* image scaling */
         printf("\nCIPS&gt; Enter input image name");
         get_image_name(name);
         get_parameters(&amp;il, &amp;ie, &amp;ll, &amp;le);
         printf("\nCIPS&gt; Enter output image name");
         get_image_name(name2);
         get_scaling_options(zoom_shrink, &amp;scale, method);
         if(zoom_shrink[0] == 'z' || zoom_shrink[0] == 'Z')
           zoom_image_array(name, name2, the image, out_image,
                         il, ie, ll, le, scale, method);
         if(zoom_shrink[0] == 's' || zoom_shrink[0] == 'S'){
            printf("\nCIPS&gt; Enter output image parameters");
              get_parameters(&amp;il2, &amp;ie2, &amp;ll2, &amp;leg);
            shrink_image_array(name, name2, the_image,
                                       out_image,
                            il, ie, ll, le, il2, ie2, ll2, le2,
                            scale, method);
         }
      break;
      
      case 15: /* create image */
         printf("\nCIPS&gt; Enter input name of image to create");
         get_image_name(name);
         printf("\nCIPS&gt; Enter number of %d blocks wide",COLS);
         printf("\n      ___\b\b");
         get_integer(&amp;width);
         printf("\nCIPS&gt; Enter number of %d blocks tall",ROWS);
         printf("\n      __\b\b");
         get_integer(&amp;length);
         image_header.lsb            = 1;
         image_header.bits_per_pixel = 8;
         image_header.image_length   = length*COLS;
         image_header.image_width    = width*ROWS;
         image_header.strip_offset   = 1000;
         for(i=0; i&lt;ROWS; i++)
           for(j=0; j&lt;COLS; j++)
              the_image[i][j] = 0;
         create_allo-
cate_tiff_file(name, &amp;image_header, the_image);
       break;
       
       case 20:  /* exit system */
        not_finished = 0;
       break;
       
       default:
        printf("\nCould not understand response, try again");
       break;

/*--------------------------------------------------------------
  --------------------------------------------------------------*/
  
   /*******************************************************
   *
   *   show_menu(..
   *
   *   This function displays the CIPS main menu.
   *
   ******************************************************/
show_menu()
{

       printf("\n\nWelcome to CIPS");
       printf("\nThe C Image Processing System");
       printf("\nThese are you choices:");
       printf("\n\t1.  Display image header");
       printf("\n\t2.  Show image numbers");
       printf("\n\t3.  Print image numbers");
       printf("\n\t4.  Display image (VGA &amp; EGA only)");
       printf("\n\t5.  Display or print image using halftoning");
       printf("\n\t6.  Print graphics image using dithering");
       printf("\n\t7.  Print or display histogram numbers");
       printf("\n\t8.  Perform edge detection");
       printf("\n\t9.  Perform edge enhancement");
       printf("\n\t10. Perform image filtering");
       printf("\n\t11. Perform image addition and subtraction");
       printf("\n\t12. Perform image cutting and pasting");
       printf("\n\t13. Perform image rotation and flipping");
       printf("\n\t14. Perform image scaling");
       printf("\n\t15. Create a blank image");
       printf("\n\t20. Exit system");
       printf("\n\nEnter choice_\b");

}    /* ends show_menu */
/* End of File */
</pre>
</BODY>
</HTML>
