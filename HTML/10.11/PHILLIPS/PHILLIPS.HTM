


<HTML>
<HEAD>

<TITLE>November 1992/Image Processing, Part 8</TITLE></HEAD>
<body bgcolor="#ffffff">
<H2><A HREF="../tocnov.htm"><IMG SRC="../../toc.gif" ALT="{back to toc}" WIDTH="54" HEIGHT="54"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<hr><h2 align="center"><font color="#800000">Image Processing, Part 8<A name="0253_0119"><A name="0253_0119"></font></h2><P>
<h3 align="center"><A name="0253_0000"><A name="0253_0000">Image Operations</h3><P>
<h3 align="center"><font color="#800000">Dwayne Phillips</font></h3><hr><blockquote><P>
<P><i><A name="0253_0000"><A name="0253_0000">Dwayne Phillips works as a computer and electronics engineer with the U.S. Department of Defense. He has a Ph.D. in Electrical and Computer Engineering from Louisiana State University. His interests include computer vision, artificial intelligence, software engineering, and programming languages.</i></P><P>
<h4><FONT COLOR="#000080"><A name="0253_011A">Introduction<A name="0253_011A"></FONT></h4></P>
This is the eighth in a series of articles on images and image processing. The first seven articles discussed reading, writing, displaying, and printing images (TIFF format); histograms and histogram equalization; edge detection; and spatial frequency filtering. This article will discuss a collection of image operations (all source code is available through the C Users Group).<P>
In the past seven installments, I discussed various topics in image processing. In this installment, I will address image operations that allow you to have fun with images. These operations are: adding and subtracting images, rotating and flipping images, cutting and pasting parts of images, zooming and shrinking images, and creating blank images. As the photographs will show, these allow you to edit images by piecing them together. I'll list the code to perform the operations, integrate them into the C Image Processing System (CIPS), and give application programs that use them.<P>
<h4><FONT COLOR="#000080"><A name="0253_011B">Addition and Subtraction<A name="0253_011B"></FONT></h4></P>
<A href="fig1.htm">Figure 1</a>
illustrates the first operations: image addition and subtraction. In image addition, you add each pixel in one image to each pixel in another and place the result in a third image. If the sum is greater than the maximum pixel value, you set it to the maximum value. Image subtraction is the same. If the difference is less than 0, then you set it to zero.<P>
Image addition and subtraction allow you to place objects into and remove objects from images. In one application, you subtract two images in a sequence to see what has changed. For example, take an aerial photograph of a factory two days in a row, subtract the two, and you can detect what has moved from day to day.<P>
You can also subtract images to remove features. <A href="photo1.htm">Photograph 1</a>
shows a house. <A href="photo2.htm">Photograph 2</a>
shows the output of an edge detector applied to <A href="photo1.htm">Photograph 1</a>
(Phillips Nov. 1991, Jan. 1992). <A href="photo3.htm">Photograph 3</a>
shows the result of subtracting the edges from the original image. Note how the edges in <A href="photo3.htm">Photograph 3</a>
are whitened out or removed.<P>
<A href="list1.htm">Listing 1</a>
shows the functions that implement image addition and subtraction. The <I>add_image_array</I> function adds two image arrays. Given the names of the image files (<I>in1_name</I> and <I>in2_name</I>) and the line and element parameters, it reads the arrays, adds them, and stores the result to an output image. You can use the same image for the two inputs and the output, that is, you can add an image array to itself and write the result on top of itself. If the output image does not exist, <I>add_image_array</I> will create it by calling <I>create_allocate_tiff_file</I>. If the sum of two pixels is greater than the maximum pixel value, you set it to the maximum value. The <I>subtract_image_array</I> function is the same as <I>add_image_array</I> except it subtracts the corresponding pixels from two image arrays.<P>
These simple functions may seem insignificant. We are only talking about adding and subtracting, but did you ever do anything useful by adding and subtracting numbers? Think of the possibilities and experiment.<P>
<h4><FONT COLOR="#000080"><A name="0253_011C">Rotation and Flipping<A name="0253_011C"></FONT></h4></P>
The next operations are image rotation and flipping. <A href="fig2.htm">Figure 2</a>
and <A href="fig3.htm">Figure 3</a>
show three rotations and two flips. I define rotation as pinning the lower right-hand corner pixel of an image array and rotating the image array about that pixel, clockwise 90 degrees. <A href="fig2.htm">Figure 2</a>
shows the three rotations possible. If you rotate four times, the result is the same as the original.<P>
I define two image flips shown in <A href="fig3.htm">Figure 3</a>
: horizontal and vertical. The horizontal flip exchanges the vertical columns on opposite sides of the center of the image array. The first column swaps with the last column; the second column swaps with the next to last column, and so on. The vertical flip exchanges horizontal rows on opposite sides of the center of the image array. The top row swaps with the bottom row, the next to top row swaps with the next to bottom row, and so on.<P>
Rotating images is useful for effects and making wide images narrow and narrow images wide. Image flipping can turn objects upside down and create spatial negatives (right-handed people become left-handed).<P>
<A href="photo4.htm">Photograph 4</a>
shows the result of rotating the image in <A href="photo1.htm">Photograph 1</a>.
 Note, the code in <A href="list2.htm">Listing 2</a>
only rotates one image array at a time. <A href="photo1.htm">Photograph 1</a>
is not the result of rotating every array in the image. It is the result of taking every array, rotating it, and pasting the result into special places in another image. This requires the application program given later in <A href="list8.htm">Listing 8</a>.
<P>
<A href="list2.htm">Listing 2</a>
shows the function needed for rotating and flipping image arrays. <I>rotote_flip_image_array</I> will perform all three rotations shown in <A href="fig2.htm">Figure 2</a>
and both flips shown in <A href="fig3.htm">Figure 3</a>.
 It requires the names of the input and output image and the line and element parameters. The input and output image can be the same. If the output image does not exist, <I>rotote_flip_image_array</I> will create it. A single rotate operation (<I>type = 1</I>) rotates the array once. Type 2 and 3 rotations require the same the operation two and three times. If you request a type 3 rotation, the function will execute the first three <I>if</I> statements and rotate the array three times. This is not the most efficient method, but it is the simplest to implement and understand. The <I>if</I> statements <I>type</I> == <I>4</I> and <I>type</I> == <I>5</I> perform the horizontal and vertical flips. These are straightforward swapping of rows and columns.<P>
<h4><FONT COLOR="#000080"><A name="0253_011D">Cut and Paste<B><A name="0253_011D"></B></FONT></h4></P>
The next operations are image cut and paste. They allow you to cut and paste rectangles from one image to another. <A href="fig4.htm">Figure 4</a>
shows a cut and paste example where a section of image B was pasted into image A by reading from one image and writing into another one. <A href="photo5.htm">Photograph 5</a>
shows the result of pasting parts of the image in <A href="photo2.htm">Photograph 2</a>
into the image in <A href="photo1.htm">Photograph 1</a>.
 This demonstrates how you can paste processing results into images to better judge their effect.<P>
<A href="list3.htm">Listing 3</a>
shows the two new functions. <I>cut_image_piece</I> is a wrapper around the existing <I>read_tiff_image</I>. It checks for existence of the image and then reads it. In the same manner, the function <I>paste_image_piece</I> is a wrapper around <I>write_array_into_tiff_image</I>. It checks for the existence of the output image and creates it if required. Then, it writes the image piece into the target image file. The last function of <A href="list3.htm">Listing 3</a>,
 <I>check_cut_and_paste_limits</I>, ensures the line and element parameters are not too large. Calling programs should use this before using the cut and paste routines.<P>
<h4><FONT COLOR="#000080"><A name="0253_011E">Image Scaling<A name="0253_011E"></FONT></h4></P>
The next operation is image scaling. This includes zooming (enlarging) and shrinking images. You use image enlarging to zoom in on a part of an image for closer examination. Image shrinking is useful for saving disk space, fitting a large image into a small display, and pasting several images into one image of the same size.<P>
I chose two techniques for image zooming: replication and interpolation. <A href="fig5.htm">Figure 5</a>
shows these techniques for a 2x enlargement. You enlarge an image by repeating a single pixel several times in both directions. The replication method uses the simplest technique; it just copies the pixel. This is easy to do, but the enlarged image appears jagged.<P>
The interpolation technique is harder to implement, but the result is smoother. Note in <A href="fig5.htm">Figure 5</a>
how the 1 in the upper left corner of the original enlarges in the two techniques. Replication copies it, but interpolation smoothes the transition from 1 to 4, 6, and 9. The extra pixel values are half way between the 1 and the values of its neighbors. The 9 in the original image does not change in the final result. This will always be the case for the pixels on the bottom row and far right column of the image.<P>
<A href="photo6.htm">Photograph 6</a>
shows a 4x enlargement of an image array using the replication technique (part of the boy image of previous articles). <A href="photo7.htm">Photograph 7</a>
shows a 4x enlargement using the interpolation technique. The curves in the replication technique are more jagged than the interpolation case.<P>
I implemented three techniques for image shrinking: corner, average, and median. <A href="fig6.htm">Figure 6</a>
shows these three techniques for a 2x shrinking. In shrinking you will replace an <I>nxn</I> (2x2, 4x4, etc.) pixel area with one pixel. How do you choose the one pixel value to represent the <I>nxn</I> area? The corner method uses the pixel in the upper left-hand corner of the <I>nxn</I> area. The average method uses the average pixel value and the median method uses the median pixel value. <A href="fig6.htm">Figure 6</a>
shows how each method returns a different result. Which should you use? Experiment &#151; try all three and use the one that works best for the given image. The corner method is fastest since it does not perform any calculations. The median method is slowest, especially for a large <I>nxn</I> area, because it takes the pixels in the <I>nxn</I> area, sorts them, and finds the median value.<P>
<A href="photo8.htm">Photograph 8</a>
shows an aerial image. <A href="photo9.htm">Photograph 9</a>
shows 2x shrinking of that image using the corner technique. Most image shrinkings give a good appearance and it is difficult to discern any differences among the three techniques.<P>
<A href="list4.htm">Listing 4</a>
shows the functions that implement the image zooming and shrinking. I executed these functions for a factor of 2 and 4. You can repeat these over and over in combinations to achieve about any factor you want. Usually, it is not practical to shrink by more than 4x because you would not be able to see anything. You can modify the code to use other factors. Just ensure your factor will divide into <I>ROWS</I> and <I>COLS</I> (both = 100) evenly. If not, you will have a blank area along the bottom and right edge of the image arrays.<P>
The functions <I>zoom_image_array</I> and <I>interpolate_pixel</I> perform image zooming. <I>zoom_image_array</I> reads a <I>ROWS</I>x<I>COLS</I> image array from the input image file, enlarges it by 2 or 4, and writes the resulting image arrays to an output file. The output image file will be 200x200 or 400x400. The function will do replication or interpolation depending on the value of the method parameter. Both methods are similar except interpolation calls the <I>interpolate_pixel</I> function to calculate the interpolated values.<P>
The trick to <I>zoom_image_array</I> is the six levels of nested <I>for</I> statements. These allow you to use any factor for the zooming. You read one input image array before looping and zooming. The outside loops (over <I>A</I> and <I>B</I>) loop over the zoom factor because you are dividing the input image array into <I>factor</I>*<I>factor</I> parts. The loops over <I>i</I> and <I>j</I> loop over the individual pixels in the input image array. Again, you divide <I>ROWS</I> and <I>COLS</I> by factor because you are dividing the input into parts. The loops over <I>a</I> and <I>b</I> replicate each pixel <I>factor</I>*<I>factor</I> times. This structure may appear odd, but it works and it will work for any factor which divides into <I>ROWS</I> and <I>COLS</I> evenly.<P>
The functions <I>shrink_image_array</I>, <I>average_pixel</I>, <I>median_pixel</I> and <I>blank_image_array</I> implement image shrinking. This works for a factor of 2 or 4 so <I>shrink_image_array</I> reads in either a 200x200 or 400x400 image, shrinks it down to a 100x100 area, and writes this to an output file. It uses either the corner, average, or median technique depending on the method parameter. The <I>average</I>_<I>pixel</I> and <I>median</I>_<I>pixel</I> functions determine the output pixel value for those techniques.<P>
<I>shrink</I>_<I>image</I>_<I>array</I> also uses the six levels of nested <I>for</I> loops. The computation is backwards, but the loop structure is basically the same as in <I>zoom</I>_<I>image</I>_<I>array</I>. It reads an input image array <I>factor</I>*<I>factor</I> times, loops through the shrinking, and writes out one image array.<P>
If the desired image array is out of the limits of the input image file, then you call <I>blank</I>_<I>image</I>_<I>array</I> to create an empty array instead of trying to read from disk. This out-of-limits condition will occur many times. If the input image is 300x300 and you want to perform a 4x reduction, you will need a 400x400 input image. <I>blank</I>_<I>image</I>_<I>array</I> allows you to shrink the 300x300 image. The output will have a blank area along the bottom and right edges. That is much better than the garbled area you would have had otherwise. The final function in <A href="list4.htm">Listing 4</a>
is <I>get</I>_<I>scaling</I>_<I>options</I>. The main routine of CIPS will call this so the user can enter the scaling parameters.<P>
<h4><FONT COLOR="#000080"><A name="0253_011F">Blank Images<A name="0253_011F"></FONT></h4></P>
The final operation is creating an image. You use a blank image as a bulletin board to paste other images together. <A href="photo10.htm">Photograph 10</a>
shows a composite made up of four images that I pasted onto a blank image. The upper left shows the image in <A href="photo9.htm">Photograph 9</a>.
 The lower left shows the result of running a low-pass filter on the original image. The upper right shows the edge-detector output, and the lower right shows the result of a high-pass filter. I created this mosaic by running the original image through the three operations. Then I created a blank image and pasted the four smaller images into it.<P>
<A href="list5.htm">Listing 5</a>
shows an application program that will create a blank image. This interprets the command line, sets up the image header, and calls <I>create</I>_<I>allocate</I>_<I>tiff</I>_<I>file</I>.<P>
Now let's integrate all these new functions into CIPS. <A href="list6.htm">Listing 6</a>
shows the changes made to the main program of CIPS. The case sections handle image addition and subtraction, rotation and flipping, cutting and pasting, zooming and shrinking, and creating a blank image. Each case section obtains parameters from the user and calls the desired function.<P>
The final four code listings are application programs that use the new features added in this article. <A href="list7.htm">Listing 7</a>
shows the <I>mainas</I> program. It adds or subtracts two entire image files and stores the result in a third file. All three files can be the same if desired. This program checks the command line, checks the size of the input files, and loops over them either adding or subtracting the image arrays. This program produced the image in <A href="photo3.htm">Photograph 3</a>.
<P>
<A href="list8.htm">Listing 8</a>
shows the <I>mainr</I> program. This program produced the rotated house shown in <A href="photo4.htm">Photograph 4</a>.
 It is hard-coded to take a 300x300 image and rotate it 90 degrees by rotating each part of the image and pasting them into the correct places on the output image. Each of the nine calls to <I>rotate_flip_image_array</I> does the rotation and writes the result to the specified location. A little thought and a nested <I>for</I> loop construction would allow you to generalize this to any size input image.<P>
<A href="list9.htm">Listing 9</a>
shows the <I>side</I> program. This program will take two input images and combine them into one output image. It can place the inputs side by side or top to bottom in the output image. It uses the <I>create_allocate_tiff_file</I> function to create the output image as a bulletin board. It loops through the input images and uses <I>cut_image_piece</I> and <I>paste_image_piece</I> to place the two input images together. <A href="photo11.htm">Photograph 11</a>
shows part of the house image placed side by side with a high-pass filter output. <A href="photo12.htm">Photograph 12</a>
shows the same two images placed top to bottom. The <I>side</I> program allows you to display and compare two complete image files. If the total image is too large to display, shrink it.<P>
<A href="list10.htm">Listing 10</a>
shows the <I>half</I> program. This program shrinks an input image by a factor of 2. It produced the image in <A href="photo9.htm">Photograph 9</a>
by halving the image in <A href="photo8.htm">Photograph 8</a>.
 It loops over the input image and shrinks each 200x200 area into a 100x100 area by calling <I>shrink_image_array</I>.<P>
<h4><FONT COLOR="#000080"><A name="0253_0120">Conclusion<A name="0253_0120"></FONT></h4></P>
This installment of the series described several image operations. The major benefit of these is the ability to edit images by adding, rotating, flipping, scaling, and cutting and pasting. These operations are fun because they allow you to place original images and processing results together in combinations and display them all at once. Enjoy and experiment. These are low level tools that you can combine in an endless variety of ways.<P>
<h4>References</FONT></h4></P>
Karl, John H. 1989. <I>An Introduction to Digital Signal Processing</I>. San Diego: Academic Press.<P>
Levine, Martin D. 1985. <I>Vision in Man and Machine</I>. New York: McGraw-Hill.<P>
Phillips, Dwayne. March 1991. "Image Processing, Part 1: Reading the Tag Image File Format." <I>The C Users Journal</I>. 92-100.<P>
Phillips, Dwayne. May 1991. "Image Processing, Part 2: Displaying Images and Printing Numbers." <I>The C Users Journal</I>. 117-126.<P>
Phillips, Dwayne. June 1991. "Image Processing, Part 3: Displaying and Printing Images Using Halftoning." <I>The C Users Journal</I>. 89-104.<P>
Phillips, Dwayne. August 1991. "Image Processing, Part 4: Histograms and Histogram Equalization." <I>The C Users Journal</I>. 59-70.<P>
Phillips, Dwayne. November 1991. "Image Processing, Part 5: Writing Images to Files and Basic Edge Detection." <I>The C Users Journal</I>. 75-102.<P>
Phillips, Dwayne. January 1992. "Image Processing, Part 6: Advanced Edge Detection." <I>The C Users Journal</I>. 47-63.<P>
Phillips, Dwayne. October 1992. "Image Processing, Part 7: Spatial Frequency Filtering." <I>The C Users Journal</I>. 71-92.<P>

<h4><a href="../../../source/1992/nov92/phillips.zip">Get Article Source Code</a></h4>

</BODY>
</HTML>
