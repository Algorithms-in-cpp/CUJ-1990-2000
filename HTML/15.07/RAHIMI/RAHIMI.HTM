






<HTML>
     
     <HEAD>


          
          <TITLE>July 1997/A Multidimensional Array Class</TITLE>
     </HEAD>
     
     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          
          <H2><A href="../tocjul.htm"><IMG src="../../toc.gif" ALT="Back to TOC" WIDTH="54" HEIGHT="54"></A>
          <FONT COLOR="#FF0000">Features</FONT></H2>
          
          <HR>
          
          <H2 ALIGN="CENTER"><FONT COLOR="#800000">A Multidimensional Array
          Class</FONT></H2>
          
          <H3 ALIGN="center"><FONT COLOR="#800000">Ali Rahimi</FONT></H3>
          
          <BLOCKQUOTE>
               
               <P>An array is a simple creature in C, perhaps too simple for
                    the more ambitious needs of object-oriented programming in
                    C++. An array class can provide the missing services.</P></BLOCKQUOTE>
          <HR>
          <BLOCKQUOTE>
               
               <h4><FONT COLOR="#000080">Introduction</FONT></H4>
               
               <p>Arrays in C++ are not first-class
                    objects. As a result, they suffer from the following major
                    limitations (to paraphrase the ARM [<A href="#REF1">1</a>]
):</p>
               <UL><LI> An array size is fixed at
                         compile time. </FONT></LI>
                    <LI> An array is one dimensional. A
                         multidimensional array is treated as an array of array.
                         </FONT></LI>
                    <LI> An array is not self-describing
                         &#151; given just a pointer to an array there is no way to
                         determine its size. </FONT></LI>
               </UL> </FONT>
               
               <p> According to the ARM, the last
                    limitation makes "passing pointers to arrays inherently
                    dangerous.''</p>
               
               <p>My goal here is to remove the last
                    limitation and mitigate the second one. I use the template
                    and inheritance features of C++ to create an array class
                    with several desirable properties:</p>
               <UL><LI>It is self-describing. Given an
                         array object (or a pointer to one) it's possible to
                         learn the number of dimensions and the lower and upper
                         bounds for each dimension (the shape of the array).
                         This "self-describing" feature make it safe to pass
                         pointers to arrays. </FONT></LI>
                    <LI>It is as easy to use as C/C++
                         arrays. The usual subscript notation is used to access
                         an array element. </FONT></LI>
                    <LI>It is almost as efficient as
                         C/C++ arrays. </FONT></LI>
                    <LI>It can be easily extended to any
                         dimension </FONT></LI>
                    <LI>It supports range checking and
                         has the capability to raise range violation exceptions.
                         </FONT></LI>
                    <LI>It can be extended to support
                         variable-size multidimensional arrays. </FONT></LI>
               </UL>
               
               <h4><FONT COLOR="#000080">Implementation</FONT></H4>
               
               <p>The template array class is defined in
                    <A href="list1.htm">Listing 1</a>.
 The one-dimensional
                    array A1D is the base class for all arrays of higher
                    dimension. All the methods are implemented in the A1D array:</p>
               <UL><LI> The methods begin and end
                         return the lower and upper bounds of the array,
                         respectively.</FONT></LI>
                    <LI> dim returns the number of
                         dimensions.</FONT></LI>
                    <LI> operator[] is overloaded to
                         return a reference to an array element type and throw a
                         range error exception on range violations.</FONT></LI>
               </UL>
               
               <p>The derived classes don't have any
                    code! Every array of dimension n+1 is inherited from a
                    one-dimensional array of n-dimensional arrays.</p>
               
               <h4><FONT COLOR="#000080">Usage</FONT></H4>
               
               <p><A href="list2.htm">Listing 2</A>
                    provides an example of usage. The code using the array is
                    wrapped in a try block for catching range errors. The
                    example shows a number of different operations. To declare a
                    three-dimensional array, for instance, write:</p>

<PRE>
A3D&lt;int, 10,19, 20,29, 30,39&gt; va3d;
</PRE>
               
               <p>This is equivalent to the Pascal
                    declaration:</p>

<PRE>
va3d : ARRAY[10..19, 20..29, 30..39] OF INTEGER
</PRE>
               
               <p>To get the dimension and bounds
                    (shape) for the first subscript of va3d, you can write:</p>

<PRE>
int dim1 = va3d.dim();
int low1 = va3d.begin();
int high1 = va3d.end();
</PRE>
               
               <p>Here, we get 3 for dim1, 10 for low1,
                    and 19 for high1.</p>
               
               <p>To get the dimension and bounds
                    (shape) for the first subscript of the A2D subarray, write:</p>

<PRE>
int dim2 = va3d[low1].dim();
int low2 = va3d[low1].begin();
int high2 = va3d[low1].end();
</PRE>
               
               <p>Since va3d[low1] is an A2D array, we
                    get 2 for dim2, 20 for low2, and 29 for high2.</p>
               
               <p>To access array elements, you can
                    write:</p>

<PRE>
for( int i=low1; i&lt;=high1; ++i)
 for( int j=low2; j&lt;=high2; ++j)
    for( int k=low3; k&lt;=high3; ++k)
          va3d[i][j][k] = (i*100+j)*100+k;
</PRE>
               
               <p>And to obtain a projection, or
                    subarray, you can write:</p>

<PRE>
A1D&lt;int, 30,39&gt; va3d_1Dsubarr;
va3d_1Dsubarr = va3d[10][20];
</PRE>
               
               <p>Dynamic allocation of arrays is also
                    easy:</p>

<PRE>
A3D&lt;int,10,19,20,29,30,39&gt; *pva3d =
    new A3D&lt;int,10,19,20,29,30,39&gt;;
</PRE>
               
               <p>To initialize a reference to an array,
                    write:</p>

<PRE>
A3D&lt;int,10,19,20,29,30,39&gt;&amp; rva3d = *pva3d;
</PRE>
               
               <p>A range-error exception occurs if you
                    attempt to access an element outside the valid range of
                    subscripts. The assignment:</p>

<PRE>
va3d[1][20][30] = 1;
</PRE>
               
               <p>raises an exception. The example in
                    <A href="list2.htm">Listing 2</a>
prints:</p>

<PRE>
3-D (sub)array:
   The subscript 1 is out of range: 10:19
</PRE>
               
               <p>Similarly, the assignment:</p>

<PRE>
va3d[10][20][3] = 3;
</PRE>
               
               <p>Will print:</p>

<PRE>
1-D (sub)array:
   The subscript 3 is out of range: 30:39
</PRE>
               
               <p>It is thus easy to use the array class
                    to detect array range violations in C++ code. Suppose, for
                    example, that you are using a two-dimensional array such as:</p>

<PRE>
int A[100][200];
</PRE>
               
               <p>Just change the declaration to:</p>

<PRE>
Array1D&lt;int, 0, 99, 0, 199&gt; A;
</PRE>
               
               <p>recompile and run. An exception will
                    be raised whenever the subscript range is violated.</p>
               
               <h4><FONT COLOR="#000080"><A name="REF1">References</A></FONT></H4>
               
               <p>Margaret A. Ellis and Bjarne
                    Stroustrup. The Annotated C++ Reference Manual (also known
                    as the ARM), Addison-Wesley, 1990.</p>
               
               <p><I>Ali Rahimi has been developing
                    software for over 15 years. He is currently working for
                    Honeywell designing and developing software using OLE/COM
                    and Windows NT. His interests include object-oriented
                    programming, real-time and distributed systems, and AI. He
                    has an M.S.E in Computer Science and Information Science
                    from the University of Pennsylvania, Philadelphia. He can be
                    reached at Ali.A.Rahimi@ftw1.honeywell.com.  </I></p>
     
<h4><a href="../../../source/1997/jul97/rahimi.zip">Get Article Source Code</a></h4>

</BLOCKQUOTE>
     </BODY>
</HTML>
