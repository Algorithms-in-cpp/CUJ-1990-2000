



<HTML><HEAD>

<TITLE>July 1997/Polyphase Merge Sorting/Listing 2</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<h4>Listing 2:	Interfaces for class MergeFile and PreSort</h4>

<pre>
/*
 *  mfile.h
 */

#if !defined __MFILE_H
#define __MFILE_H
#include &lt;stdio.h&gt;      /* tmpnam(), rename() */
#include "insort.h"
#include "ffstream.h"

class MergeFile   {
    PDATA _pbuf;    /* -&gt; i/o buffer */
    PDATA _ppos;    /* buffer put pointer */
    PDATA _gpos;    /* buffer get pointer */
    PDATA _lpos;    /* last item put */
    char _tmpf[ L_tmpnam ];  /* tempfile name */
    const char *_fn;  /* -&gt; file name */
    ffstream *Mf;   /* associated stream */
    const char * _fmode;     /* ffstream file mode */
    int _tmpfile;  /* !0 if temp file used */
    int _eofile;    /* end of stream data */
    size_t _items;  /* buffer item count */
    size_t _actual_runs, _null_runs;
    const int _width;     /* sizeof items, bytes */
    const int _maxitems;  /* Max #items /buffer */
    const int _holdtmps;  /* keep temp files (debug) */

  protected:
    void _resetp()  /* reset buffer pointers */
        { _gpos = _ppos = _lpos = _pbuf; }
    void _advp( PDATA &amp;p )  /* advance buf pointer */
        { (char*) p += _width;  }
    virtual void _flushb(); /* flush buffer */
    virtual void _fillb(); /* fill buffer */
    PCDATA _getb();
    int _is_empty() const { return (_items == 0);  }

  public:
    friend class PreSort;
    enum io_mode { in, out };
    MergeFile( const int wd, const size_t blen,
               const char *mode = "w+b" );
    virtual ~MergeFile();
    size_t Actual() const { return _actual_runs; }
    size_t Null() const   { return _null_runs; }
    void Actual(size_t n) { _actual_runs = n; }
    void Null(size_t n)   { _null_runs = n; }
    PCDATA Nextg();
    PCDATA Lastp() const { return (PCDATA) _lpos; }
    PCDATA Get();
    PCDATA Put(PCDATA);
    const char *Fname() const { return _fn; }
    size_t Items() const { return _items; }
    int RenameOutput( const char * );
    void ResetIOMode(io_mode);
    int EndOfFile() const { return _eofile;  }
    void AttachStream( ffstream * );
    operator int ()     //assert valid object
        { return (_pbuf != 0) &amp;&amp; *Mf; }
    int operator == (MergeFile &amp; p)
        { return &amp;p == this; }  //for container lib
};

class PreSort   {
    MergeFile *Sf;    /* Source file */
    const InternalSort *Ins;
    PPCDATA _psbuf;   /* presort buffer */
    PPCDATA _psb;     /* -&gt; presort buffer */
  protected:
    void _putsbuf(PCDATA p) { *_psb++ = p; }
    PCDATA _getsbuf() { return *_psb++;  }
    void _setsbuf() { _psb = _psbuf; }
  public:
    PreSort( MergeFile&amp;, const InternalSort&amp; );
    ~PreSort() { if( _psbuf )
                    delete _psbuf;  }
    operator int ()     //assert valid object
        {   return _psbuf != 0; }
    size_t GenerateRun( MergeFile *dest, int&amp; comp );
    int EndOfFile() const { return Sf-&gt;EndOfFile(); }
};
#endif
// End of File
</pre>
</body></html>
