Keywords: May99, C, C++, Java, daemon, plug-in, wrapper, unicode, const,
Unix, NT

The code listings for the May 1999 issue of C/C++ Users Journal
include source code for Joseph Kathan's portable control of multiple
daemon processes, and Eric Roe's wrappers for dynamically linked
plug-ins. Also included are listings from P.J. Plauger's column,
Standard C/C++, Dan Saks' column, C++ Theory and Practice, Chuck
Allison's column, import java.*, and Letters to the Editor.

*************************  FILE DESCRIPTION **********************************

The following files are included in the disk:

FILENAME		AUTHOR-NAME	TITLE			       
(Zip archive/
subdirectory name)
-------------------------------------------------------------------------------
kathan                  Joseph Kathan   Portable Control of Multiple
                                        Daemon Processes

    dmnunix.c       - Listing 1, A sample daemon in Unix
    dkunix.c        - Listing 2, A Unix daemon killer
    dmnwin.c        - Listing 3, A sample Windows "daemon"
    dkwin.c         - Listing 4, A Windows daemon killer
    dkcombo.c       - Listing 5, A daemon killer with conditional compilation
                                 directives to compile under both Unix and
                                 Windows

roe                     Eric Roe        A Wrapper Class for Dynamically
                                        Linked Plug-Ins

    DynamicLibrary.h    - Listing 1, Wraps dynamic linking capabilities
                                     of Wind32, Solaris, and Linux
    DynamicLibrary.cpp  - Listing 2, DynamicLibrary class implementation
    SimpleMath.h        - Listing 3, Wraps functions exported by dynamic
                                     libraries supporting SimpleMath API
    SimpleMath.cpp      - Listing 4, SimpleMath class implementation
    GoodMath.cpp        - Listing 5, Compiled/linked to create a
                                     SimpleMath API compliant plug-in.
                                     Plug-In is used by the SimpleMath
                                     class (SimpleMath.cpp)
    BaseInterface.h     - Listing 6, Serves as the ancestor for all
                                     interfaces
    IDoMath.h           - Listing 7, Interface that declares some very
                                     basic arithmetic methods
    INamed.h            - Listing 8, Interface that declares a method to
                                     return plug-in name
    COMLikeMath.cpp     - Listing 9, Deinfes class COMLikeMath, which
                                     implements IBase, IDoMath, and INamed
                                     interfaces. Applications that use
                                     these interfaces know nothing about
                                     the underlying COMLikeMath object
    ClassFactory.h      - Listing 10, Used to create initial interface 
                                      pointer
    ClassFactory.cpp    - Listing 11, Used to create the initial interface
                                      pointer. This class wraps the
                                      cf_create_interface function exported
                                      by the dynamic libraries supporting
                                      COM-like capabilities
    ptest.cpp           - Figure 1,  Tests SimpleMath class
    BadMath.cpp         - not listed, Compiled/linked to create a
                                      SimpleMath compliant plug-in. This
                                      code implements certain math operations
                                      incorrectly (NOTE: for illustration
                                      only!!!)
    Makefile            - not listed, Makefile for Solaris
    Makefile.w32        - not listed, Makefile for Win95/NT builds
    Pitest.cpp          - not listed, Runs a timing test using the 
                                      TimeTest plug-in. Uses SimpleMath 
                                      object to test dynamic library specified
                                      on command line.  Finally, test COM-like
                                      capability of ClassFactory and
                                      IDoMath/INamed interfaces.
    Timetest.cpp        - not listed, Exports ten do-nothing functions for
                                      purposes of timing calls with 
                                      DynamicLibrary::GetProcAddr()

saks        Dan Saks            C++ Theory and Practice: Thinking Deeper

    deep.h              - Listing 1, A class template for deeply-const
                                     pointers, with named member functions
                                     for explicit conversions to true
                                     pointer types
    deep2.h             - Listing 2, A class template for deeply-const
                                     pointers, with operator() for
                                     explicit conversions to true pointer
                                     types
    deep3.h             - Listing 3, A class template for deeply-const
                                     pointers, with constructors and
                                     conversion operators for implicit
                                     conversions to true pointer types
    table.h             - Listing 4, The cross-reference table class
                                     definition using a deep pointer
    deep4.h             - Listing 5, A class template for deeply-const
                                     pointers, with constructors,
                                     conversion operators, and ->
                                     operators
    table.cpp           - Listing 6, The cross-reference table non-inline
                                     member definitions using deep
                                     pointers


allison     Chuck Allison       import java.*: Control Flow -- The Bad,
                                The Good, The Exceptional

    hilo.java           - Listing 1, Hi-Lo in Java
    boolexit.java       - Listing 2, Java program that exits a nested
                                     loop via boolean flags
    brkexit.java        - Listing 3, Java program that exits a nested
                                     loop with labeled break
    hilo2.java          - Listing 4, Hi-Lo in Java using breaks
    nestmethod.java     - Listing 5, Illustrates nested method calls
    retcodes.java       - Listing 6, Uses return codes to indicate errors
    useexcept.java      - Listing 7, Illustrates use of exceptions in Java
    usefinally.java     - Listing 8, Illustrates use of finally clause


plauger     P.J. Plauger        Standard C/C++: Multibyte Files

    fssutf.cpp          - Listing 1, FSS-UTF converter
    testconv.cpp        - Listing 2, Testing FSS-UTF converter


letters     We Have Mail

    IWordStream.idl     - Figure 1, Jim Langseth's IWordStream class
                                    converted to a COM interface
    IWordStream.vb      - Figure 2, The IWordStream interface implemented
                                    in a Visual Basic class module
